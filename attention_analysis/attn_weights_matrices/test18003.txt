18003
Test: public void test11() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test11"); com.google.javascript.jscomp.graph.LinkedDirectedGraph<java.io.Serializable, java.util.Set<java.lang.String>> serializableLinkedDirectedGraph0 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations(); java.util.List<com.google.javascript.jscomp.graph.Graph.GraphEdge<java.io.Serializable, java.util.Set<java.lang.String>>> serializableGraphEdgeList1 = serializableLinkedDirectedGraph0.getEdges(); java.util.List<com.google.javascript.jscomp.graph.GraphvizGraph.GraphvizNode> graphvizNodeList2 = serializableLinkedDirectedGraph0.getGraphvizNodes(); com.google.javascript.jscomp.PrepareAst.PrepareAnnotations prepareAnnotations3 = new com.google.javascript.jscomp.PrepareAst.PrepareAnnotations(); com.google.javascript.jscomp.AbstractCompiler abstractCompiler4 = null; com.google.javascript.jscomp.FlowSensitiveInlineVariables flowSensitiveInlineVariables5 = new com.google.javascript.jscomp.FlowSensitiveInlineVariables(abstractCompiler4); com.google.javascript.jscomp.ReferenceCollectingCallback.Behavior behavior6 = com.google.javascript.jscomp.ReferenceCollectingCallback.DO_NOTHING_BEHAVIOR; com.google.javascript.jscomp.AbstractCompiler abstractCompiler7 = null; com.google.javascript.jscomp.NodeTraversal.Callback callback8 = null; com.google.javascript.jscomp.ScopeCreator scopeCreator9 = null; com.google.javascript.jscomp.NodeTraversal nodeTraversal10 = new com.google.javascript.jscomp.NodeTraversal(abstractCompiler7, callback8, scopeCreator9); java.util.ArrayDeque<com.google.javascript.jscomp.ControlFlowGraph<com.google.javascript.rhino.Node>> nodeControlFlowGraphQueue11 = new java.util.ArrayDeque<com.google.javascript.jscomp.ControlFlowGraph<com.google.javascript.rhino.Node>>(); nodeTraversal10.cfgs = nodeControlFlowGraphQueue11; com.google.javascript.jscomp.ReferenceCollectingCallback.ReferenceMap referenceMap13 = null; behavior6.afterExitScope(nodeTraversal10, referenceMap13); com.google.javascript.rhino.Node[] nodeArray16 = new com.google.javascript.rhino.Node[] {}; com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node(0, nodeArray16); com.google.javascript.jscomp.Scope scope18 = null; com.google.javascript.jscomp.JSModule jSModule19 = null; com.google.javascript.jscomp.UseSite useSite20 = new com.google.javascript.jscomp.UseSite(node17, scope18, jSModule19); boolean boolean21 = com.google.javascript.jscomp.NodeUtil.isAssignmentOp(node17); com.google.javascript.jscomp.WarningsGuard[] warningsGuardArray23 = new com.google.javascript.jscomp.WarningsGuard[] {}; com.google.javascript.jscomp.ComposeWarningsGuard composeWarningsGuard24 = new com.google.javascript.jscomp.ComposeWarningsGuard(warningsGuardArray23); node17.putProp(0, (java.lang.Object) composeWarningsGuard24); com.google.javascript.rhino.Node[] nodeArray27 = new com.google.javascript.rhino.Node[] {}; com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node(0, nodeArray27); com.google.javascript.jscomp.Scope scope29 = null; com.google.javascript.jscomp.JSModule jSModule30 = null; com.google.javascript.jscomp.UseSite useSite31 = new com.google.javascript.jscomp.UseSite(node28, scope29, jSModule30); int int32 = node28.getSideEffectFlags(); boolean boolean33 = node28.isContinue(); boolean boolean34 = com.google.javascript.jscomp.NodeUtil.isHoistedFunctionDeclaration(node28); boolean boolean35 = flowSensitiveInlineVariables5.shouldTraverse(nodeTraversal10, node17, node28); com.google.javascript.rhino.Node node37 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("JSCOMPILER_PRESERVE"); boolean boolean38 = node37.isNull(); com.google.javascript.rhino.Node node39 = null; prepareAnnotations3.visit(nodeTraversal10, node37, node39); try { java.util.List<com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<java.io.Serializable, java.util.Set<java.lang.String>>> serializableDiGraphNodeList41 = serializableLinkedDirectedGraph0.getDirectedPredNodes((java.io.Serializable) node39); } catch (java.lang.IllegalArgumentException e) { } }
Code: public void visit(NodeTraversal t, Node n, Node parent) { if (n.isName() && n.getString().equals(varName)) { if (parent.isAssign() && (parent.getFirstChild() == n) && isAssignChain(parent, cfgNode)) { return; } else { numUsesWithinCfgNode++; } } }
tensor([[0.0213, 0.0174, 0.0103,  ..., 0.0094, 0.0094, 0.0094],
        [0.0164, 0.0147, 0.0058,  ..., 0.0092, 0.0092, 0.0092],
        [0.0164, 0.0118, 0.0073,  ..., 0.0052, 0.0052, 0.0052],
        ...,
        [0.0149, 0.0137, 0.0081,  ..., 0.0080, 0.0080, 0.0080],
        [0.0149, 0.0137, 0.0081,  ..., 0.0080, 0.0080, 0.0080],
        [0.0149, 0.0137, 0.0081,  ..., 0.0080, 0.0080, 0.0080]])