101280
Test: public void test209() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test209"); org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance(); org.joda.time.DurationField durationField1 = iSOChronology0.minutes(); org.joda.time.DateTimeField dateTimeField2 = iSOChronology0.clockhourOfHalfday(); org.joda.time.ReadableInterval readableInterval3 = null; org.joda.time.ReadableInterval readableInterval4 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval3); org.joda.time.Chronology chronology5 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval3); org.joda.time.DateTimeField dateTimeField6 = chronology5.yearOfCentury(); org.joda.time.DurationField durationField7 = chronology5.millis(); org.joda.time.DurationField durationField8 = chronology5.centuries(); org.joda.time.Chronology chronology9 = chronology5.withUTC(); org.joda.time.DurationField durationField10 = chronology9.halfdays(); org.joda.time.DateTimeField dateTimeField11 = chronology9.yearOfEra(); org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.centuryOfEra(); org.joda.time.field.DividedDateTimeField dividedDateTimeField14 = new org.joda.time.field.DividedDateTimeField(dateTimeField11, dateTimeFieldType12, 10); long long17 = dividedDateTimeField14.set(0L, 100); org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.dayOfYear(); org.joda.time.ReadableInterval readableInterval19 = null; org.joda.time.ReadableInterval readableInterval20 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval19); org.joda.time.Chronology chronology21 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval19); org.joda.time.DateTimeField dateTimeField22 = chronology21.yearOfCentury(); org.joda.time.DurationField durationField23 = chronology21.millis(); org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField24 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType18, durationField23); org.joda.time.field.RemainderDateTimeField remainderDateTimeField25 = new org.joda.time.field.RemainderDateTimeField(dividedDateTimeField14, dateTimeFieldType18); org.joda.time.ReadablePartial readablePartial26 = null; java.util.Locale locale28 = null; java.lang.String str29 = dividedDateTimeField14.getAsShortText(readablePartial26, 29227899, locale28); org.joda.time.field.OffsetDateTimeField offsetDateTimeField31 = new org.joda.time.field.OffsetDateTimeField((org.joda.time.DateTimeField) dividedDateTimeField14, 29227899); org.joda.time.DateTimeFieldType dateTimeFieldType32 = org.joda.time.DateTimeFieldType.hourOfDay(); java.lang.String str33 = dateTimeFieldType32.getName(); org.joda.time.ReadableInterval readableInterval35 = null; org.joda.time.ReadableInterval readableInterval36 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval35); org.joda.time.Chronology chronology37 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval35); org.joda.time.DateTimeField dateTimeField38 = chronology37.yearOfCentury(); org.joda.time.Partial partial39 = new org.joda.time.Partial(dateTimeFieldType32, (int) (short) 0, chronology37); org.joda.time.ReadableInterval readableInterval40 = null; org.joda.time.ReadableInterval readableInterval41 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval40); org.joda.time.Chronology chronology42 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval40); org.joda.time.DateTimeField dateTimeField43 = chronology42.yearOfCentury(); org.joda.time.DurationField durationField44 = chronology42.millis(); org.joda.time.DateTimeField dateTimeField45 = chronology42.centuryOfEra(); org.joda.time.DateTimeField dateTimeField46 = chronology42.clockhourOfDay(); org.joda.time.ReadablePartial readablePartial47 = null; int[] intArray54 = new int[] { '#', (-1), 0, (byte) 1, (short) 1, (byte) 1 }; int int55 = dateTimeField46.getMaximumValue(readablePartial47, intArray54); int int56 = dividedDateTimeField14.getMinimumValue((org.joda.time.ReadablePartial) partial39, intArray54); boolean boolean58 = partial39.equals((java.lang.Object) "29227899"); org.joda.time.ReadableInterval readableInterval59 = null; org.joda.time.ReadableInterval readableInterval60 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval59); org.joda.time.ReadableInterval readableInterval61 = null; boolean boolean62 = readableInterval60.contains(readableInterval61); org.joda.time.PeriodType periodType63 = null; org.joda.time.Period period64 = readableInterval60.toPeriod(periodType63); org.joda.time.DateTime dateTime65 = readableInterval60.getEnd(); boolean boolean66 = partial39.equals((java.lang.Object) readableInterval60); org.joda.time.ReadableInterval readableInterval67 = null; org.joda.time.ReadableInterval readableInterval68 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval67); org.joda.time.ReadableInterval readableInterval69 = null; boolean boolean70 = readableInterval68.contains(readableInterval69); org.joda.time.Duration duration71 = readableInterval68.toDuration(); org.joda.time.DateTime dateTime72 = readableInterval68.getEnd(); boolean boolean73 = partial39.isMatch((org.joda.time.ReadableInstant) dateTime72); int[] intArray75 = iSOChronology0.get((org.joda.time.ReadablePartial) partial39, 212487538062019L); }
Code: public Partial(DateTimeFieldType[] types, int[] values, Chronology chronology) { super(); chronology = DateTimeUtils.getChronology(chronology).withUTC(); iChronology = chronology; if (types == null) { throw new IllegalArgumentException("Types array must not be null"); } if (values == null) { throw new IllegalArgumentException("Values array must not be null"); } if (values.length != types.length) { throw new IllegalArgumentException("Values array must be the same length as the types array"); } if (types.length == 0) { iTypes = types; iValues = values; return; } for (int i = 0; i < types.length; i++) { if (types[i] == null) { throw new IllegalArgumentException("Types array must not contain null: index " + i); } } DurationField lastUnitField = null; for (int i = 0; i < types.length; i++) { DateTimeFieldType loopType = types[i]; DurationField loopUnitField = loopType.getDurationType().getField(iChronology); if (i > 0) { int compare = lastUnitField.compareTo(loopUnitField); if (compare < 0) { throw new IllegalArgumentException("Types array must be in order largest-smallest: " + types[i - 1].getName() + " < " + loopType.getName()); } else if (compare == 0) { if (types[i - 1].getRangeDurationType() == null) { if (loopType.getRangeDurationType() == null) { throw new IllegalArgumentException("Types array must not contain duplicate: " + types[i - 1].getName() + " and " + loopType.getName()); } } else { if (loopType.getRangeDurationType() == null) { throw new IllegalArgumentException("Types array must be in order largest-smallest: " + types[i - 1].getName() + " < " + loopType.getName()); } DurationField lastRangeField = types[i - 1].getRangeDurationType().getField(iChronology); DurationField loopRangeField = loopType.getRangeDurationType().getField(iChronology); if (lastRangeField.compareTo(loopRangeField) < 0) { throw new IllegalArgumentException("Types array must be in order largest-smallest: " + types[i - 1].getName() + " < " + loopType.getName()); } if (lastRangeField.compareTo(loopRangeField) == 0) { throw new IllegalArgumentException("Types array must not contain duplicate: " + types[i - 1].getName() + " and " + loopType.getName()); } } } } lastUnitField = loopUnitField; } iTypes = (DateTimeFieldType[]) types.clone(); chronology.validate(this, values); iValues = (int[]) values.clone(); }
tensor([[0.0024, 0.0017, 0.0024,  ..., 0.0011, 0.0015, 0.0011],
        [0.0019, 0.0016, 0.0023,  ..., 0.0010, 0.0014, 0.0008],
        [0.0016, 0.0015, 0.0024,  ..., 0.0011, 0.0010, 0.0007],
        ...,
        [0.0019, 0.0018, 0.0023,  ..., 0.0012, 0.0012, 0.0011],
        [0.0018, 0.0013, 0.0024,  ..., 0.0015, 0.0013, 0.0010],
        [0.0017, 0.0015, 0.0022,  ..., 0.0013, 0.0014, 0.0009]])