62047
Test: public void test1025() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1025"); org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.TDF; org.apache.commons.csv.CSVFormat cSVFormat2 = cSVFormat0.withNullString("hi!"); cSVFormat2.validate(); org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat2.withNullString("\r\n"); org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat5.withCommentStart((java.lang.Character) '4'); org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat7.withCommentStart((java.lang.Character) 'a'); org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat7.withIgnoreSurroundingSpaces(true); org.apache.commons.csv.CSVFormat cSVFormat12 = org.apache.commons.csv.CSVFormat.TDF; cSVFormat12.validate(); org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat12.withCommentStart((java.lang.Character) '#'); boolean boolean16 = cSVFormat11.equals((java.lang.Object) '#'); org.apache.commons.csv.CSVFormat cSVFormat17 = org.apache.commons.csv.CSVFormat.TDF; org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormat17.withNullString("hi!"); cSVFormat19.validate(); org.apache.commons.csv.CSVFormat cSVFormat22 = cSVFormat19.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat24 = cSVFormat19.withCommentStart('\037'); java.lang.String str25 = cSVFormat19.toString(); org.apache.commons.csv.CSVFormat cSVFormat27 = cSVFormat19.withIgnoreEmptyLines(true); org.apache.commons.csv.CSVFormat cSVFormat29 = cSVFormat27.withRecordSeparator(' '); java.lang.Character char30 = cSVFormat27.getCommentStart(); org.apache.commons.csv.CSVFormat cSVFormat32 = cSVFormat27.withCommentStart('\t'); org.apache.commons.csv.CSVFormat cSVFormat33 = org.apache.commons.csv.CSVFormat.RFC4180; org.apache.commons.csv.CSVFormat cSVFormat35 = cSVFormat33.withQuoteChar((java.lang.Character) ','); boolean boolean36 = cSVFormat33.isNullHandling(); org.apache.commons.csv.CSVFormat cSVFormat37 = org.apache.commons.csv.CSVFormat.DEFAULT; org.apache.commons.csv.CSVFormat cSVFormat38 = org.apache.commons.csv.CSVFormat.TDF; cSVFormat38.validate(); org.apache.commons.csv.CSVFormat cSVFormat41 = cSVFormat38.withIgnoreEmptyLines(true); java.lang.String[] strArray44 = new java.lang.String[] { "hi!", "a\t0" }; org.apache.commons.csv.CSVFormat cSVFormat45 = cSVFormat38.withHeader(strArray44); org.apache.commons.csv.CSVFormat cSVFormat46 = cSVFormat37.withHeader(strArray44); java.lang.String str47 = cSVFormat33.format((java.lang.Object[]) strArray44); org.apache.commons.csv.CSVFormat cSVFormat48 = cSVFormat27.withHeader(strArray44); org.apache.commons.csv.CSVFormat cSVFormat49 = cSVFormat11.withHeader(strArray44); java.lang.String[] strArray50 = null; org.apache.commons.csv.CSVFormat cSVFormat51 = cSVFormat49.withHeader(strArray50); }
Code: public String toString() { final StringBuilder sb = new StringBuilder(); sb.append("Delimiter=<").append(delimiter).append('>'); if (isEscaping()) { sb.append(' '); sb.append("Escape=<").append(escape).append('>'); } if (isQuoting()) { sb.append(' '); sb.append("QuoteChar=<").append(quoteChar).append('>'); } if (isCommentingEnabled()) { sb.append(' '); sb.append("CommentStart=<").append(commentStart).append('>'); } if (isNullHandling()) { sb.append(' '); sb.append("NullString=<").append(nullString).append('>'); } if(true) { sb.append(' '); sb.append("RecordSeparator=<").append(recordSeparator).append('>'); } if (true) { sb.append(" EmptyLines:ignored"); } if (getIgnoreSurroundingSpaces()) { ; } sb.append(" SkipHeaderRecord:").append(skipHeaderRecord); if (true) { ; sb.append("Header:").append(Arrays.toString(header)); } return sb.toString(); }
tensor([[0.0079, 0.0096, 0.0081,  ..., 0.0091, 0.0297, 0.0042],
        [0.0076, 0.0082, 0.0079,  ..., 0.0081, 0.0378, 0.0035],
        [0.0051, 0.0078, 0.0040,  ..., 0.0079, 0.0371, 0.0033],
        ...,
        [0.0051, 0.0073, 0.0038,  ..., 0.0068, 0.0398, 0.0035],
        [0.0055, 0.0089, 0.0056,  ..., 0.0094, 0.0341, 0.0034],
        [0.0052, 0.0094, 0.0088,  ..., 0.0124, 0.0336, 0.0035]])