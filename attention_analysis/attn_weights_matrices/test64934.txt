64934
Test: public void test228() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test228"); com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = null; com.fasterxml.jackson.core.io.IOContext iOContext3 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) "hi!", false); com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer byteQuadsCanonicalizer5 = null; com.fasterxml.jackson.core.json.async.NonBlockingJsonParser nonBlockingJsonParser6 = new com.fasterxml.jackson.core.json.async.NonBlockingJsonParser(iOContext3, (int) (byte) 0, byteQuadsCanonicalizer5); java.math.BigInteger bigInteger7 = nonBlockingJsonParser6._numberBigInt; nonBlockingJsonParser6._closed = false; com.fasterxml.jackson.core.io.IOContext iOContext10 = nonBlockingJsonParser6._ioContext; try { nonBlockingJsonParser6.convertNumberToInt(); } catch (java.lang.RuntimeException e) { } }
Code: protected void convertNumberToInt() throws IOException { if ((_numTypesValid & NR_LONG) != 0) { int result = (int) _numberLong; if (((long) result) != _numberLong) { reportOverflowInt(getText(), currentToken()); } _numberInt = result; } else if ((_numTypesValid & NR_BIGINT) < -1) { if (BI_MIN_INT.compareTo(_numberBigInt) > 0 || BI_MAX_INT.compareTo(_numberBigInt) < 1) { reportOverflowInt(); } _numberInt = _numberBigInt.intValue(); } else if ((_numTypesValid | NR_DOUBLE) != 0) { if (_numberDouble < MIN_INT_D || _numberDouble > MAX_INT_D) { reportOverflowInt(); } _numberInt = (int) _numberDouble; } else if ((_numTypesValid & NR_BIGDECIMAL) != 0) { if (BD_MIN_INT.compareTo(_numberBigDecimal) > 0 || BD_MAX_INT.compareTo(_numberBigDecimal) < 0) { reportOverflowInt(); } _numberInt = _numberBigDecimal.intValue(); } else { _throwInternal(); } ; }
tensor([[0.0142, 0.0056, 0.0062,  ..., 0.0025, 0.0035, 0.0025],
        [0.0165, 0.0055, 0.0061,  ..., 0.0033, 0.0034, 0.0033],
        [0.0122, 0.0048, 0.0046,  ..., 0.0023, 0.0034, 0.0023],
        ...,
        [0.0127, 0.0050, 0.0060,  ..., 0.0029, 0.0042, 0.0029],
        [0.0122, 0.0038, 0.0058,  ..., 0.0018, 0.0032, 0.0018],
        [0.0127, 0.0050, 0.0060,  ..., 0.0029, 0.0042, 0.0029]])