69109
Test: public void test681() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test681"); org.jsoup.nodes.Document document1 = org.jsoup.nodes.Document.createShell(""); org.jsoup.select.Elements elements3 = document1.getElementsByClass("hi!"); org.jsoup.nodes.Document document4 = document1.normalise(); java.util.Set<java.lang.String> strSet5 = document1.classNames(); org.jsoup.parser.Tag tag6 = document1.tag(); org.jsoup.nodes.Document document8 = org.jsoup.nodes.Document.createShell(""); org.jsoup.select.Elements elements10 = document8.getElementsByClass("hi!"); org.jsoup.nodes.Document document11 = document8.normalise(); java.util.Set<java.lang.String> strSet12 = document8.classNames(); org.jsoup.parser.Tag tag13 = document8.tag(); boolean boolean14 = tag6.canContain(tag13); boolean boolean15 = tag6.isBlock(); boolean boolean16 = tag6.isEmpty(); org.jsoup.nodes.Document document20 = org.jsoup.parser.Parser.parseBodyFragmentRelaxed("#document", "hi!"); org.jsoup.nodes.Attributes attributes21 = document20.attributes(); org.jsoup.nodes.Document document23 = org.jsoup.nodes.Document.createShell(""); org.jsoup.select.Elements elements25 = document23.getElementsByClass("hi!"); java.util.ListIterator<org.jsoup.nodes.Element> elementItor26 = elements25.listIterator(); boolean boolean28 = elements25.hasClass(""); org.jsoup.nodes.Document document30 = org.jsoup.nodes.Document.createShell(""); org.jsoup.select.Elements elements32 = document30.getElementsByClass("hi!"); java.util.ListIterator<org.jsoup.nodes.Element> elementItor33 = elements32.listIterator(); boolean boolean34 = elements25.remove((java.lang.Object) elementItor33); org.jsoup.nodes.Attribute attribute37 = new org.jsoup.nodes.Attribute("hi!", ""); int int38 = elements25.indexOf((java.lang.Object) attribute37); boolean boolean39 = attributes21.equals((java.lang.Object) attribute37); org.jsoup.nodes.Element element40 = new org.jsoup.nodes.Element(tag6, "[h, i, !]", attributes21); java.lang.String str41 = tag6.toString(); org.jsoup.nodes.Document document43 = org.jsoup.nodes.Document.createShell(""); org.jsoup.select.Elements elements45 = document43.getElementsByClass("hi!"); org.jsoup.nodes.Document document46 = document43.normalise(); java.util.Set<java.lang.String> strSet47 = document43.classNames(); org.jsoup.select.Elements elements49 = document43.getElementsByIndexGreaterThan(0); org.jsoup.nodes.Element element50 = document43.body(); org.jsoup.nodes.Element element51 = document43.head(); java.lang.String str53 = element51.attr("<html>\n<head>\n</head>\n<body>\n</body>\n</html>"); org.jsoup.parser.Tag tag54 = element51.tag(); boolean boolean55 = tag6.isValidAncestor(tag54); }
Code: public static Document parseBodyFragmentRelaxed(String bodyHtml, String baseUri) { Parser parser = new Parser(bodyHtml, baseUri, true); parser.relaxed = true; return parser.parse(); }
tensor([[0.0312, 0.0974, 0.1197, 0.0902, 0.0673, 0.0397, 0.0671, 0.0440, 0.0187,
         0.0204, 0.0198, 0.0156, 0.0228, 0.0440, 0.0823, 0.0568, 0.0198, 0.0213,
         0.0346, 0.0734, 0.0138],
        [0.0335, 0.0904, 0.1267, 0.0891, 0.0525, 0.0498, 0.0504, 0.0608, 0.0191,
         0.0149, 0.0217, 0.0145, 0.0193, 0.0451, 0.0777, 0.0540, 0.0217, 0.0242,
         0.0318, 0.0863, 0.0164],
        [0.0288, 0.0834, 0.1242, 0.0924, 0.0403, 0.0610, 0.0642, 0.0568, 0.0165,
         0.0174, 0.0167, 0.0145, 0.0163, 0.0531, 0.1018, 0.0457, 0.0167, 0.0270,
         0.0343, 0.0784, 0.0105],
        [0.0322, 0.1001, 0.1001, 0.0933, 0.0568, 0.0425, 0.0695, 0.0495, 0.0172,
         0.0217, 0.0223, 0.0168, 0.0184, 0.0552, 0.0860, 0.0553, 0.0223, 0.0194,
         0.0396, 0.0703, 0.0115],
        [0.0213, 0.0761, 0.1303, 0.0731, 0.0527, 0.0472, 0.0578, 0.0505, 0.0153,
         0.0187, 0.0161, 0.0130, 0.0183, 0.0529, 0.1179, 0.0514, 0.0161, 0.0211,
         0.0342, 0.1065, 0.0095],
        [0.0344, 0.1016, 0.1125, 0.0741, 0.0518, 0.0399, 0.0616, 0.0500, 0.0177,
         0.0187, 0.0234, 0.0147, 0.0187, 0.0550, 0.0898, 0.0604, 0.0234, 0.0223,
         0.0347, 0.0826, 0.0128],
        [0.0290, 0.0877, 0.1109, 0.0865, 0.0630, 0.0466, 0.0698, 0.0567, 0.0180,
         0.0207, 0.0206, 0.0150, 0.0224, 0.0475, 0.0784, 0.0598, 0.0206, 0.0247,
         0.0360, 0.0755, 0.0106],
        [0.0359, 0.0822, 0.1101, 0.0618, 0.0536, 0.0543, 0.0517, 0.0547, 0.0191,
         0.0260, 0.0298, 0.0205, 0.0222, 0.0374, 0.0815, 0.0512, 0.0298, 0.0258,
         0.0417, 0.0909, 0.0198],
        [0.0275, 0.1014, 0.1318, 0.0631, 0.0472, 0.0435, 0.0602, 0.0611, 0.0175,
         0.0160, 0.0193, 0.0154, 0.0162, 0.0440, 0.0991, 0.0578, 0.0193, 0.0222,
         0.0396, 0.0877, 0.0102],
        [0.0336, 0.0761, 0.1023, 0.0912, 0.0579, 0.0432, 0.0646, 0.0718, 0.0234,
         0.0164, 0.0188, 0.0145, 0.0196, 0.0503, 0.0972, 0.0432, 0.0188, 0.0216,
         0.0418, 0.0789, 0.0148],
        [0.0386, 0.0899, 0.0879, 0.0820, 0.0509, 0.0461, 0.0589, 0.0413, 0.0212,
         0.0255, 0.0313, 0.0180, 0.0255, 0.0537, 0.0724, 0.0589, 0.0313, 0.0271,
         0.0419, 0.0789, 0.0184],
        [0.0293, 0.0882, 0.1287, 0.0715, 0.0577, 0.0523, 0.0532, 0.0537, 0.0173,
         0.0166, 0.0234, 0.0190, 0.0190, 0.0503, 0.0866, 0.0520, 0.0234, 0.0265,
         0.0412, 0.0746, 0.0156],
        [0.0288, 0.0810, 0.1066, 0.0752, 0.0621, 0.0364, 0.0625, 0.0613, 0.0178,
         0.0186, 0.0197, 0.0126, 0.0191, 0.0478, 0.0931, 0.0585, 0.0197, 0.0238,
         0.0425, 0.1013, 0.0117],
        [0.0270, 0.1178, 0.1010, 0.0848, 0.0478, 0.0499, 0.0601, 0.0501, 0.0176,
         0.0239, 0.0200, 0.0160, 0.0245, 0.0470, 0.0917, 0.0586, 0.0200, 0.0230,
         0.0378, 0.0678, 0.0137],
        [0.0323, 0.0834, 0.1024, 0.0666, 0.0570, 0.0485, 0.0727, 0.0460, 0.0205,
         0.0203, 0.0206, 0.0174, 0.0187, 0.0442, 0.0918, 0.0670, 0.0206, 0.0249,
         0.0347, 0.0967, 0.0134],
        [0.0246, 0.0963, 0.1352, 0.0978, 0.0515, 0.0425, 0.0489, 0.0594, 0.0129,
         0.0177, 0.0126, 0.0107, 0.0155, 0.0507, 0.0963, 0.0697, 0.0126, 0.0199,
         0.0321, 0.0826, 0.0103],
        [0.0386, 0.0899, 0.0879, 0.0820, 0.0509, 0.0461, 0.0589, 0.0413, 0.0212,
         0.0255, 0.0313, 0.0180, 0.0255, 0.0537, 0.0724, 0.0589, 0.0313, 0.0271,
         0.0419, 0.0789, 0.0184],
        [0.0281, 0.0864, 0.1183, 0.0999, 0.0569, 0.0488, 0.0626, 0.0536, 0.0161,
         0.0173, 0.0208, 0.0165, 0.0186, 0.0486, 0.0858, 0.0598, 0.0208, 0.0268,
         0.0368, 0.0661, 0.0113],
        [0.0214, 0.0987, 0.1269, 0.0757, 0.0654, 0.0479, 0.0626, 0.0416, 0.0163,
         0.0189, 0.0209, 0.0128, 0.0180, 0.0493, 0.1080, 0.0578, 0.0209, 0.0170,
         0.0311, 0.0773, 0.0114],
        [0.0315, 0.0718, 0.1292, 0.0998, 0.0444, 0.0468, 0.0532, 0.0530, 0.0169,
         0.0193, 0.0269, 0.0151, 0.0225, 0.0448, 0.0764, 0.0597, 0.0269, 0.0235,
         0.0340, 0.0864, 0.0179],
        [0.0240, 0.0949, 0.1054, 0.0863, 0.0431, 0.0440, 0.0604, 0.0563, 0.0222,
         0.0173, 0.0211, 0.0134, 0.0182, 0.0450, 0.0995, 0.0517, 0.0211, 0.0319,
         0.0509, 0.0809, 0.0124]])