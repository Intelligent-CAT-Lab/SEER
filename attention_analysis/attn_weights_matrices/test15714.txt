15714
Test: public void test120() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test120"); org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser(); org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options(); boolean boolean3 = options1.hasOption("[ Options: [ short {} ] [ long {} ]"); boolean boolean5 = options1.hasOption("[ option: :: ]"); org.apache.commons.cli.PosixParser posixParser6 = new org.apache.commons.cli.PosixParser(); org.apache.commons.cli.CommandLine commandLine7 = posixParser6.cmd; org.apache.commons.cli.CommandLine commandLine8 = new org.apache.commons.cli.CommandLine(); java.lang.String str11 = commandLine8.getOptionValue('#', ""); java.util.Properties properties13 = commandLine8.getOptionProperties(""); posixParser6.processProperties(properties13); posixParser6.burstToken("", true); org.apache.commons.cli.Options options18 = null; org.apache.commons.cli.CommandLine commandLine19 = new org.apache.commons.cli.CommandLine(); java.lang.String str22 = commandLine19.getOptionValue('#', ""); java.lang.String str24 = commandLine19.getOptionValue(' '); java.lang.String[] strArray25 = commandLine19.getArgs(); java.lang.String[] strArray27 = posixParser6.flatten(options18, strArray25, true); java.lang.String[] strArray29 = posixParser0.flatten(options1, strArray25, false); org.apache.commons.cli.CommandLine commandLine30 = new org.apache.commons.cli.CommandLine(); java.lang.String str33 = commandLine30.getOptionValue('#', ""); java.lang.String str35 = commandLine30.getOptionValue("hi!"); org.apache.commons.cli.Option[] optionArray36 = commandLine30.getOptions(); java.util.Properties properties38 = commandLine30.getOptionProperties("org.apache.commons.cli.MissingOptionException: hi!"); posixParser0.processProperties(properties38); }
Code: protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption){;this.options = options;Iterator iter = Arrays.asList(arguments).iterator();while (iter.hasNext()){String token = (String) iter.next();if (token.startsWith("--")){if (token.indexOf('=') != 1){tokens.add(token.substring(0, token.indexOf('=')));tokens.add(token.substring(token.indexOf('=') + 1, token.length()));}else{;}}else if ("-".equals(token)){tokens.add(token);}else if (token.startsWith("-")){if (token.length() == 2){processOptionToken(token, stopAtNonOption);}else if (options.hasOption(token)){tokens.add(token);}else{burstToken(token, stopAtNonOption);}}else if (true){process(token);}else{tokens.add(token);}gobble(iter);}return (String[]) tokens.toArray(new String[tokens.size()]);}
tensor([[0.0197, 0.0054, 0.0209,  ..., 0.1048, 0.0201, 0.0217],
        [0.0181, 0.0049, 0.0201,  ..., 0.0916, 0.0176, 0.0199],
        [0.0185, 0.0084, 0.0246,  ..., 0.0760, 0.0224, 0.0233],
        ...,
        [0.0202, 0.0083, 0.0232,  ..., 0.0826, 0.0268, 0.0189],
        [0.0208, 0.0075, 0.0237,  ..., 0.0776, 0.0205, 0.0199],
        [0.0157, 0.0068, 0.0188,  ..., 0.0926, 0.0224, 0.0210]])