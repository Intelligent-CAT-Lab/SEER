101092
Test: public void test1022() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1022"); org.joda.time.chrono.GJChronology gJChronology1 = org.joda.time.chrono.GJChronology.getInstanceUTC(); org.joda.time.DateTimeField dateTimeField2 = gJChronology1.yearOfCentury(); org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology1); org.joda.time.DurationField durationField4 = gJChronology1.eras(); org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) 0, (org.joda.time.Chronology) gJChronology1); org.joda.time.ReadablePeriod readablePeriod6 = null; org.joda.time.LocalDate localDate8 = localDate5.withPeriodAdded(readablePeriod6, (-28800000)); org.joda.time.LocalDate.Property property9 = localDate5.dayOfMonth(); org.joda.time.LocalDate localDate11 = property9.addWrapFieldToCopy(818); org.joda.time.DateTimeZone dateTimeZone12 = null; org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeUtils.getZone(dateTimeZone12); org.joda.time.chrono.ISOChronology iSOChronology14 = org.joda.time.chrono.ISOChronology.getInstance(); org.joda.time.DateTimeField dateTimeField15 = iSOChronology14.yearOfEra(); org.joda.time.DateTime dateTime16 = org.joda.time.DateTime.now((org.joda.time.Chronology) iSOChronology14); int int17 = dateTimeZone13.getOffset((org.joda.time.ReadableInstant) dateTime16); org.joda.time.DateTime dateTime18 = localDate11.toDateTimeAtMidnight(dateTimeZone13); org.joda.time.DateMidnight dateMidnight19 = localDate11.toDateMidnight(); org.joda.time.Instant instant21 = new org.joda.time.Instant((long) (short) -1); org.joda.time.chrono.GJChronology gJChronology22 = org.joda.time.chrono.GJChronology.getInstanceUTC(); org.joda.time.DateTimeField dateTimeField23 = gJChronology22.yearOfCentury(); org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology22); int int25 = dateTime24.getEra(); int int26 = dateTime24.getYear(); boolean boolean27 = instant21.isBefore((org.joda.time.ReadableInstant) dateTime24); org.joda.time.LocalDate localDate28 = dateTime24.toLocalDate(); org.joda.time.LocalDate localDate30 = localDate28.plusDays(2757764); int int31 = localDate30.getDayOfMonth(); java.lang.String str33 = localDate30.toString("818"); int int34 = localDate11.compareTo((org.joda.time.ReadablePartial) localDate30); boolean boolean35 = org.joda.time.DateTimeUtils.isContiguous((org.joda.time.ReadablePartial) localDate30); }
Code: public static synchronized GJChronology getInstance( DateTimeZone zone, ReadableInstant gregorianCutover, int minDaysInFirstWeek) { zone = DateTimeUtils.getZone(zone); Instant cutoverInstant; if (gregorianCutover == null) { cutoverInstant = DEFAULT_CUTOVER; } else { cutoverInstant = gregorianCutover.toInstant(); } GJChronology chrono; synchronized (cCache) { ArrayList<GJChronology> chronos = cCache.get(zone); if (chronos == null) { chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); } else { for (int i = chronos.size(); --i >= 0;) { chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) { return chrono; } } } if (zone == DateTimeZone.UTC) { chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); } else { chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); } chronos.add(chrono); } return chrono; }
tensor([[0.0056, 0.0185, 0.0105,  ..., 0.0063, 0.0325, 0.0026],
        [0.0060, 0.0168, 0.0117,  ..., 0.0058, 0.0212, 0.0031],
        [0.0051, 0.0218, 0.0112,  ..., 0.0067, 0.0283, 0.0021],
        ...,
        [0.0036, 0.0181, 0.0115,  ..., 0.0050, 0.0325, 0.0021],
        [0.0049, 0.0181, 0.0114,  ..., 0.0058, 0.0284, 0.0024],
        [0.0041, 0.0173, 0.0128,  ..., 0.0090, 0.0216, 0.0023]])