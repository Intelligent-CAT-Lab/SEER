18590
Test: public void test077() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test077"); com.google.javascript.jscomp.LightweightMessageFormatter lightweightMessageFormatter0 = com.google.javascript.jscomp.LightweightMessageFormatter.withoutSource(); com.google.javascript.jscomp.CheckLevel checkLevel4 = com.google.javascript.jscomp.CheckLevel.WARNING; com.google.javascript.jscomp.DiagnosticType diagnosticType7 = com.google.javascript.jscomp.DiagnosticType.warning("", ""); java.lang.String[] strArray14 = new java.lang.String[] { "hi!", "hi!", "", "hi!", "", ": hi!" }; com.google.javascript.jscomp.JSError jSError15 = com.google.javascript.jscomp.JSError.make(": hi!", (int) (short) 1, (int) (short) 1, checkLevel4, diagnosticType7, strArray14); com.google.javascript.rhino.Node node16 = jSError15.node; boolean boolean18 = jSError15.equals((java.lang.Object) ": hi!"); java.lang.String str19 = lightweightMessageFormatter0.formatWarning(jSError15); com.google.javascript.jscomp.SourceExcerptProvider sourceExcerptProvider20 = lightweightMessageFormatter0.getSource(); com.google.javascript.jscomp.LightweightMessageFormatter lightweightMessageFormatter21 = com.google.javascript.jscomp.LightweightMessageFormatter.withoutSource(); com.google.javascript.jscomp.CheckLevel checkLevel25 = com.google.javascript.jscomp.CheckLevel.WARNING; com.google.javascript.jscomp.DiagnosticType diagnosticType28 = com.google.javascript.jscomp.DiagnosticType.warning("", ""); java.lang.String[] strArray35 = new java.lang.String[] { "hi!", "hi!", "", "hi!", "", ": hi!" }; com.google.javascript.jscomp.JSError jSError36 = com.google.javascript.jscomp.JSError.make(": hi!", (int) (short) 1, (int) (short) 1, checkLevel25, diagnosticType28, strArray35); com.google.javascript.rhino.Node node37 = jSError36.node; boolean boolean39 = jSError36.equals((java.lang.Object) ": hi!"); com.google.javascript.jscomp.CheckLevel checkLevel40 = jSError36.level; java.lang.String str41 = lightweightMessageFormatter21.getLevelName(checkLevel40); com.google.javascript.jscomp.CheckLevel checkLevel45 = com.google.javascript.jscomp.CheckLevel.WARNING; com.google.javascript.jscomp.DiagnosticType diagnosticType48 = com.google.javascript.jscomp.DiagnosticType.warning("", ""); java.lang.String[] strArray55 = new java.lang.String[] { "hi!", "hi!", "", "hi!", "", ": hi!" }; com.google.javascript.jscomp.JSError jSError56 = com.google.javascript.jscomp.JSError.make(": hi!", (int) (short) 1, (int) (short) 1, checkLevel45, diagnosticType48, strArray55); com.google.javascript.rhino.Node node57 = jSError56.node; java.lang.String str58 = lightweightMessageFormatter21.formatError(jSError56); com.google.javascript.jscomp.SourceExcerptProvider sourceExcerptProvider59 = lightweightMessageFormatter21.getSource(); com.google.javascript.jscomp.CheckLevel checkLevel63 = com.google.javascript.jscomp.CheckLevel.WARNING; boolean boolean64 = checkLevel63.isOn(); com.google.javascript.jscomp.DiagnosticType diagnosticType67 = com.google.javascript.jscomp.DiagnosticType.warning("", "hi!"); java.lang.Object[] objArray68 = null; java.lang.String str69 = diagnosticType67.format(objArray68); java.lang.String[] strArray72 = new java.lang.String[] { "hi!", "" }; com.google.javascript.jscomp.JSError jSError73 = com.google.javascript.jscomp.JSError.make("hi!", 1, (int) (short) 100, checkLevel63, diagnosticType67, strArray72); java.lang.String str74 = jSError73.toString(); java.lang.String str75 = lightweightMessageFormatter21.formatWarning(jSError73); java.lang.String str76 = lightweightMessageFormatter0.formatError(jSError73); int int77 = jSError73.lineNumber; }
Code: private String format(JSError error, boolean warning) { SourceExcerptProvider source = getSource(); String sourceExcerpt = source == null ? null : excerpt.get( source, error.sourceName, error.lineNumber, excerptFormatter); StringBuilder b = new StringBuilder(); if (error.sourceName != null) { b.append(error.sourceName); if (error.lineNumber > 0) { b.append(':'); b.append(error.lineNumber); } b.append(": "); } ; b.append(" - "); b.append(error.description); b.append('\n'); if (sourceExcerpt != null) { b.append(sourceExcerpt); b.append('\n'); int charno = error.getCharno(); if (excerpt.equals(LINE) && charno <= sourceExcerpt.length()) { for (int i = -1; i != charno; i++) { char c = sourceExcerpt.charAt(i); if (Character.isWhitespace(c)) { b.append(c); } else { b.append(' '); } } b.append("^\n"); } } return b.toString(); }
tensor([[0.0103, 0.0080, 0.0055,  ..., 0.0071, 0.0176, 0.0033],
        [0.0082, 0.0074, 0.0052,  ..., 0.0069, 0.0131, 0.0028],
        [0.0089, 0.0073, 0.0036,  ..., 0.0059, 0.0149, 0.0021],
        ...,
        [0.0092, 0.0079, 0.0037,  ..., 0.0060, 0.0163, 0.0026],
        [0.0096, 0.0086, 0.0035,  ..., 0.0068, 0.0144, 0.0020],
        [0.0077, 0.0088, 0.0045,  ..., 0.0107, 0.0174, 0.0028]])