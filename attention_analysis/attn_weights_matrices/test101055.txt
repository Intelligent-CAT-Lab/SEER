101055
Test: public void test0323() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0323"); org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.eras(); org.joda.time.field.UnsupportedDurationField unsupportedDurationField1 = org.joda.time.field.UnsupportedDurationField.getInstance(durationFieldType0); java.lang.String str2 = unsupportedDurationField1.getName(); org.joda.time.DurationFieldType durationFieldType3 = unsupportedDurationField1.getType(); org.joda.time.chrono.GJChronology gJChronology5 = org.joda.time.chrono.GJChronology.getInstanceUTC(); org.joda.time.DateTimeField dateTimeField6 = gJChronology5.yearOfCentury(); org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology5); org.joda.time.DurationField durationField8 = gJChronology5.eras(); org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) 0, (org.joda.time.Chronology) gJChronology5); org.joda.time.ReadablePeriod readablePeriod10 = null; org.joda.time.LocalDate localDate12 = localDate9.withPeriodAdded(readablePeriod10, (-28800000)); org.joda.time.LocalDate.Property property13 = localDate9.dayOfMonth(); org.joda.time.LocalDate localDate15 = property13.addWrapFieldToCopy(818); org.joda.time.DateTimeZone dateTimeZone16 = null; org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeUtils.getZone(dateTimeZone16); org.joda.time.chrono.ISOChronology iSOChronology18 = org.joda.time.chrono.ISOChronology.getInstance(); org.joda.time.DateTimeField dateTimeField19 = iSOChronology18.yearOfEra(); org.joda.time.DateTime dateTime20 = org.joda.time.DateTime.now((org.joda.time.Chronology) iSOChronology18); int int21 = dateTimeZone17.getOffset((org.joda.time.ReadableInstant) dateTime20); org.joda.time.DateTime dateTime22 = localDate15.toDateTimeAtMidnight(dateTimeZone17); boolean boolean23 = unsupportedDurationField1.equals((java.lang.Object) dateTime22); org.joda.time.DateTime.Property property24 = dateTime22.weekOfWeekyear(); try { org.joda.time.DateTime dateTime26 = property24.setCopy(2762392); } catch (org.joda.time.IllegalFieldValueException e) { } }
Code: public static synchronized GJChronology getInstance( DateTimeZone zone, ReadableInstant gregorianCutover, int minDaysInFirstWeek) { zone = DateTimeUtils.getZone(zone); Instant cutoverInstant; if (gregorianCutover == null) { cutoverInstant = DEFAULT_CUTOVER; } else { cutoverInstant = gregorianCutover.toInstant(); LocalDate cutoverDate = new LocalDate(cutoverInstant.getMillis(), GregorianChronology.getInstance(zone)); if (cutoverDate.getYear() <= 0) { throw new IllegalArgumentException("Cutover too early. Must be on or after 0001-01-01."); } } GJChronology chrono; synchronized (cCache) { ArrayList<GJChronology> chronos = cCache.get(zone); if (chronos == null) { chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); } else { for (int i = chronos.size(); --i >= 0;) { chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) { return chrono; } } } if (zone == DateTimeZone.UTC) { chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); } else { chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); } chronos.add(chrono); } return chrono; }
tensor([[0.0047, 0.0152, 0.0087,  ..., 0.0052, 0.0273, 0.0021],
        [0.0049, 0.0137, 0.0096,  ..., 0.0047, 0.0174, 0.0025],
        [0.0042, 0.0178, 0.0092,  ..., 0.0055, 0.0235, 0.0017],
        ...,
        [0.0030, 0.0148, 0.0096,  ..., 0.0042, 0.0273, 0.0017],
        [0.0040, 0.0147, 0.0094,  ..., 0.0047, 0.0236, 0.0020],
        [0.0034, 0.0141, 0.0105,  ..., 0.0073, 0.0177, 0.0018]])