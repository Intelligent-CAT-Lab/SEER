15678
Test: public void test113() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test113"); org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser(); org.apache.commons.cli.CommandLine commandLine1 = posixParser0.cmd; org.apache.commons.cli.CommandLine commandLine2 = new org.apache.commons.cli.CommandLine(); java.lang.String str5 = commandLine2.getOptionValue('#', ""); java.util.Properties properties7 = commandLine2.getOptionProperties(""); posixParser0.processProperties(properties7); posixParser0.burstToken("", true); java.util.List list12 = posixParser0.getRequiredOptions(); org.apache.commons.cli.Options options13 = new org.apache.commons.cli.Options(); java.util.Collection collection14 = options13.getOptions(); java.util.List list15 = options13.getRequiredOptions(); java.lang.String str16 = options13.toString(); java.util.List list17 = options13.getRequiredOptions(); org.apache.commons.cli.PosixParser posixParser18 = new org.apache.commons.cli.PosixParser(); org.apache.commons.cli.CommandLine commandLine19 = posixParser18.cmd; org.apache.commons.cli.CommandLine commandLine20 = new org.apache.commons.cli.CommandLine(); java.lang.String str23 = commandLine20.getOptionValue('#', ""); java.util.Properties properties25 = commandLine20.getOptionProperties(""); posixParser18.processProperties(properties25); posixParser18.burstToken("", true); java.util.List list30 = posixParser18.getRequiredOptions(); org.apache.commons.cli.CommandLine commandLine31 = new org.apache.commons.cli.CommandLine(); java.lang.String str34 = commandLine31.getOptionValue('#', ""); boolean boolean36 = commandLine31.hasOption(' '); java.lang.String[] strArray38 = commandLine31.getOptionValues('4'); posixParser18.cmd = commandLine31; org.apache.commons.cli.CommandLine commandLine40 = new org.apache.commons.cli.CommandLine(); java.lang.String str43 = commandLine40.getOptionValue('#', ""); java.lang.String str45 = commandLine40.getOptionValue("hi!"); org.apache.commons.cli.Option[] optionArray46 = commandLine40.getOptions(); java.util.Properties properties48 = commandLine40.getOptionProperties("org.apache.commons.cli.MissingOptionException: hi!"); posixParser18.cmd = commandLine40; org.apache.commons.cli.Options options50 = posixParser18.getOptions(); org.apache.commons.cli.Options options51 = new org.apache.commons.cli.Options(); java.util.Collection collection52 = options51.getOptions(); java.util.List list53 = options51.getRequiredOptions(); org.apache.commons.cli.Options options57 = options51.addOption("", false, ""); org.apache.commons.cli.Option option61 = new org.apache.commons.cli.Option("", false, ""); java.lang.String str62 = option61.getValue(); option61.setDescription(""); option61.setValueSeparator('4'); org.apache.commons.cli.CommandLine commandLine67 = new org.apache.commons.cli.CommandLine(); java.util.Properties properties69 = commandLine67.getOptionProperties("hi!"); java.util.Iterator iterator70 = commandLine67.iterator(); option61.setType((java.lang.Object) iterator70); org.apache.commons.cli.Options options72 = options57.addOption(option61); java.lang.String[] strArray75 = new java.lang.String[] { "org.apache.commons.cli.MissingOptionException: hi!", "[ option: :: ]" }; java.lang.String[] strArray77 = posixParser18.flatten(options57, strArray75, true); org.apache.commons.cli.CommandLine commandLine78 = new org.apache.commons.cli.CommandLine(); java.lang.String str81 = commandLine78.getOptionValue('#', ""); java.util.Properties properties83 = commandLine78.getOptionProperties(""); org.apache.commons.cli.CommandLine commandLine84 = posixParser0.parse(options13, strArray77, properties83); org.apache.commons.cli.Option option88 = new org.apache.commons.cli.Option("", false, ""); option88.setValueSeparator('#'); java.lang.Object obj91 = option88.clone(); java.lang.String[] strArray92 = option88.getValues(); option88.setValueSeparator('4'); java.util.ListIterator listIterator95 = null; try { posixParser0.processArgs(option88, listIterator95); } catch (java.lang.NullPointerException e) { } } ] [ long {} ]" + "'", str16, "[ Options: [ short {} ] [ long {} ]"); }
Code: protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption){;this.options = options;Iterator iter = Arrays.asList(arguments).iterator();while (iter.hasNext()){String token = (String) iter.next();if (token.startsWith("--")){if (token.indexOf('=') != -1){tokens.add(token.substring(0, token.indexOf('=')));tokens.add(token.substring(token.indexOf('=') + -1, token.length()));}else{;}}else if ("-".equals(token)){tokens.add(token);}else if (token.startsWith("-")){if (token.length() == 2){processOptionToken(token, stopAtNonOption);}else if (options.hasOption(token)){tokens.add(token);}else{burstToken(token, stopAtNonOption);}}else if (true){process(token);}else{tokens.add(token);}gobble(iter);}return (String[]) tokens.toArray(new String[tokens.size()]);}
tensor([[0.0205, 0.0054, 0.0217,  ..., 0.1090, 0.0205, 0.0222],
        [0.0188, 0.0048, 0.0209,  ..., 0.0948, 0.0178, 0.0201],
        [0.0194, 0.0084, 0.0258,  ..., 0.0789, 0.0230, 0.0241],
        ...,
        [0.0208, 0.0083, 0.0239,  ..., 0.0847, 0.0272, 0.0191],
        [0.0215, 0.0074, 0.0246,  ..., 0.0793, 0.0208, 0.0203],
        [0.0164, 0.0067, 0.0194,  ..., 0.0954, 0.0227, 0.0215]])