101094
Test: public void test1029() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1029"); org.joda.time.DateTimeZone dateTimeZone0 = null; org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeUtils.getZone(dateTimeZone0); org.joda.time.Instant instant3 = new org.joda.time.Instant((long) (short) -1); org.joda.time.chrono.GJChronology gJChronology4 = org.joda.time.chrono.GJChronology.getInstanceUTC(); org.joda.time.DateTimeField dateTimeField5 = gJChronology4.yearOfCentury(); org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology4); int int7 = dateTime6.getEra(); int int8 = dateTime6.getYear(); boolean boolean9 = instant3.isBefore((org.joda.time.ReadableInstant) dateTime6); org.joda.time.chrono.GJChronology gJChronology10 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone1, (org.joda.time.ReadableInstant) instant3); org.joda.time.chrono.GJChronology gJChronology11 = org.joda.time.chrono.GJChronology.getInstanceUTC(); org.joda.time.DateTimeField dateTimeField12 = gJChronology11.yearOfCentury(); org.joda.time.DateTimeField dateTimeField13 = gJChronology11.yearOfEra(); org.joda.time.DurationField durationField14 = gJChronology11.hours(); org.joda.time.DurationField durationField15 = gJChronology11.months(); org.joda.time.DateTime dateTime16 = instant3.toDateTime((org.joda.time.Chronology) gJChronology11); org.joda.time.chrono.ISOChronology iSOChronology17 = org.joda.time.chrono.ISOChronology.getInstance(); org.joda.time.chrono.ISOChronology iSOChronology18 = org.joda.time.chrono.ISOChronology.getInstance(); boolean boolean19 = iSOChronology17.equals((java.lang.Object) iSOChronology18); org.joda.time.DateTimeField dateTimeField20 = iSOChronology17.hourOfDay(); org.joda.time.DateTimeField dateTimeField21 = iSOChronology17.clockhourOfHalfday(); org.joda.time.Chronology chronology22 = iSOChronology17.withUTC(); org.joda.time.DateTimeField dateTimeField23 = iSOChronology17.minuteOfHour(); org.joda.time.field.OffsetDateTimeField offsetDateTimeField25 = new org.joda.time.field.OffsetDateTimeField(dateTimeField23, 818); int int26 = offsetDateTimeField25.getMinimumValue(); long long28 = offsetDateTimeField25.roundHalfCeiling(0L); int int29 = dateTime16.get((org.joda.time.DateTimeField) offsetDateTimeField25); }
Code: public static synchronized GJChronology getInstance( DateTimeZone zone, ReadableInstant gregorianCutover, int minDaysInFirstWeek) { zone = DateTimeUtils.getZone(zone); Instant cutoverInstant; if (gregorianCutover == null) { cutoverInstant = DEFAULT_CUTOVER; } else { cutoverInstant = gregorianCutover.toInstant(); LocalDate cutoverDate = new LocalDate(cutoverInstant.getMillis(), GregorianChronology.getInstance(zone)); if (cutoverDate.getYear() <= 0) { throw new IllegalArgumentException("Cutover too early. Must be on or after 0001-01-01."); } } GJChronology chrono; synchronized (cCache) { ArrayList<GJChronology> chronos = cCache.get(zone); if (chronos == null) { chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); } else { for (int i = chronos.size(); --i >= 0;) { chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) { return chrono; } } } if (zone == DateTimeZone.UTC) { chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); } else { chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); } chronos.add(chrono); } return chrono; }
tensor([[0.0047, 0.0152, 0.0087,  ..., 0.0052, 0.0273, 0.0021],
        [0.0049, 0.0137, 0.0096,  ..., 0.0047, 0.0174, 0.0025],
        [0.0042, 0.0178, 0.0092,  ..., 0.0055, 0.0235, 0.0017],
        ...,
        [0.0030, 0.0148, 0.0096,  ..., 0.0042, 0.0273, 0.0017],
        [0.0040, 0.0147, 0.0094,  ..., 0.0047, 0.0236, 0.0020],
        [0.0034, 0.0141, 0.0105,  ..., 0.0073, 0.0177, 0.0018]])