100648
Test: public void testSetText() { try { ISOChronology.getInstanceUTC().year().set(0, null, java.util.Locale.US); fail(); } catch (IllegalFieldValueException e) { } try { ISOChronology.getInstanceUTC().year().set(0, "nineteen seventy", java.util.Locale.US); fail(); } catch (IllegalFieldValueException e) { } try { ISOChronology.getInstanceUTC().era().set(0, "long ago", java.util.Locale.US); fail(); } catch (IllegalFieldValueException e) { } try { ISOChronology.getInstanceUTC().monthOfYear().set(0, "spring", java.util.Locale.US); fail(); } catch (IllegalFieldValueException e) { } try { ISOChronology.getInstanceUTC().dayOfWeek().set(0, "yesterday", java.util.Locale.US); fail(); } catch (IllegalFieldValueException e) { } try { ISOChronology.getInstanceUTC().halfdayOfDay().set(0, "morning", java.util.Locale.US); fail(); } catch (IllegalFieldValueException e) { } }
Code: public long set(long instant, int value) { long localInstant = iZone.convertUTCToLocal(instant); localInstant = iField.set(localInstant, value); long result = iZone.convertLocalToUTC(localInstant, false, instant); if (get(result) != value) { throw new IllegalFieldValueException(iField.getType(), new Integer(value), "Illegal instant due to time zone offset transition: " + DateTimeFormat.forPattern("yyyy-MM-dd'T'HH:mm:ss.SSS").print(new Instant(localInstant)) + " (" + iZone.getID() + ")"); } return result; }
tensor([[0.0151, 0.0245, 0.0226,  ..., 0.0168, 0.0253, 0.0068],
        [0.0110, 0.0226, 0.0225,  ..., 0.0163, 0.0240, 0.0063],
        [0.0107, 0.0225, 0.0250,  ..., 0.0161, 0.0287, 0.0062],
        ...,
        [0.0105, 0.0287, 0.0264,  ..., 0.0152, 0.0277, 0.0057],
        [0.0141, 0.0204, 0.0286,  ..., 0.0199, 0.0277, 0.0057],
        [0.0114, 0.0185, 0.0199,  ..., 0.0247, 0.0216, 0.0062]])