,method,test
0,"    public PKCE getPkce() {
        return pkce;
    }","  public void test0()  throws Throwable  {
      AuthorizationUrlBuilder authorizationUrlBuilder0 = new AuthorizationUrlBuilder((OAuth20Service) null);
      PKCE pKCE0 = new PKCE();
      AuthorizationUrlBuilder authorizationUrlBuilder1 = authorizationUrlBuilder0.pkce(pKCE0);
      PKCE pKCE1 = authorizationUrlBuilder1.getPkce();
}"
1,"    public String build() {
        final Map<String, String> params;
        if (pkce == null) {
            params = additionalParams;
        } else {
            params = additionalParams == null ? new HashMap<String, String>() : new HashMap<>(additionalParams);
            params.putAll(pkce.getAuthorizationUrlParams());
        }
        return oauth20Service.getApi().getAuthorizationUrl(oauth20Service.getResponseType(), oauth20Service.getApiKey(),
                oauth20Service.getCallback(), scope == null ? oauth20Service.getDefaultScope() : scope, state, params);
    }","  public void test1()  throws Throwable  {
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn(""2GPM=gOA\""){"", """").when(defaultApi20_0).getAuthorizationUrl(anyString() , anyString() , anyString() , anyString() , anyString() , anyMap());
      MockPrintStream mockPrintStream0 = new MockPrintStream(""UTF8"", ""UTF8"");
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, ""UTF8"", ""UTF8"", ""UTF8"", ""UTF8"", ""UTF8"", mockPrintStream0, ""UTF8"", jDKHttpClientConfig0, jDKHttpClient0);
      AuthorizationUrlBuilder authorizationUrlBuilder0 = new AuthorizationUrlBuilder(oAuth20Service0);
      AuthorizationUrlBuilder authorizationUrlBuilder1 = authorizationUrlBuilder0.initPKCE();
      authorizationUrlBuilder0.state("""");
      String string0 = authorizationUrlBuilder1.build();
      String string1 = authorizationUrlBuilder1.build();
}"
2,"    public String build() {
        final Map<String, String> params;
        if (pkce == null) {
            params = additionalParams;
        } else {
            params = additionalParams == null ? new HashMap<String, String>() : new HashMap<>(additionalParams);
            params.putAll(pkce.getAuthorizationUrlParams());
        }
        return oauth20Service.getApi().getAuthorizationUrl(oauth20Service.getResponseType(), oauth20Service.getApiKey(),
                oauth20Service.getCallback(), scope == null ? oauth20Service.getDefaultScope() : scope, state, params);
    }","  public void test2()  throws Throwable  {
      AuthorizationUrlBuilder authorizationUrlBuilder0 = new AuthorizationUrlBuilder((OAuth20Service) null);
      // Undeclared exception!
      try { 
        authorizationUrlBuilder0.build();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""com.github.scribejava.core.oauth.AuthorizationUrlBuilder"", e);
      }
  }"
3,"    public String build() {
        final Map<String, String> params;
        if (pkce == null) {
            params = additionalParams;
        } else {
            params = additionalParams == null ? new HashMap<String, String>() : new HashMap<>(additionalParams);
            params.putAll(pkce.getAuthorizationUrlParams());
        }
        return oauth20Service.getApi().getAuthorizationUrl(oauth20Service.getResponseType(), oauth20Service.getApiKey(),
                oauth20Service.getCallback(), scope == null ? oauth20Service.getDefaultScope() : scope, state, params);
    }","  public void test3()  throws Throwable  {
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn(""AaQe"").when(defaultApi20_0).getAuthorizationUrl(anyString() , anyString() , anyString() , anyString() , anyString() , anyMap());
      MockPrintStream mockPrintStream0 = new MockPrintStream(""AaQe"");
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient();
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, ""AaQe"", ""AaQe"", ""AaQe"", ""AaQe"", ""AaQe"", mockPrintStream0, ""AaQe"", jDKHttpClientConfig0, jDKHttpClient0);
      AuthorizationUrlBuilder authorizationUrlBuilder0 = oAuth20Service0.createAuthorizationUrlBuilder();
      AuthorizationUrlBuilder authorizationUrlBuilder1 = authorizationUrlBuilder0.scope(""AaQe"");
      String string0 = authorizationUrlBuilder1.build();
}"
4,"    public String build() {
        final Map<String, String> params;
        if (pkce == null) {
            params = additionalParams;
        } else {
            params = additionalParams == null ? new HashMap<String, String>() : new HashMap<>(additionalParams);
            params.putAll(pkce.getAuthorizationUrlParams());
        }
        return oauth20Service.getApi().getAuthorizationUrl(oauth20Service.getResponseType(), oauth20Service.getApiKey(),
                oauth20Service.getCallback(), scope == null ? oauth20Service.getDefaultScope() : scope, state, params);
    }","  public void test4()  throws Throwable  {
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn(""i9r@ZdqQ"").when(defaultApi20_0).getAuthorizationUrl(anyString() , anyString() , anyString() , anyString() , anyString() , anyMap());
      MockPrintStream mockPrintStream0 = new MockPrintStream(""i9r@ZdqQ"");
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, ""i9r@ZdqQ"", ""i9r@ZdqQ"", ""i9r@ZdqQ"", ""i9r@ZdqQ"", ""i9r@ZdqQ"", mockPrintStream0, ""i9r@ZdqQ"", jDKHttpClientConfig0, jDKHttpClient0);
      AuthorizationUrlBuilder authorizationUrlBuilder0 = oAuth20Service0.createAuthorizationUrlBuilder();
      authorizationUrlBuilder0.initPKCE();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      AuthorizationUrlBuilder authorizationUrlBuilder1 = authorizationUrlBuilder0.additionalParams(hashMap0);
      String string0 = authorizationUrlBuilder1.build();
}"
5,"    public PKCE getPkce() {
        return pkce;
    }","  public void test5()  throws Throwable  {
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      MockPrintStream mockPrintStream0 = new MockPrintStream(""AaQe"");
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient();
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, ""AaQe"", ""AaQe"", ""AaQe"", ""AaQe"", ""AaQe"", mockPrintStream0, ""AaQe"", jDKHttpClientConfig0, jDKHttpClient0);
      AuthorizationUrlBuilder authorizationUrlBuilder0 = oAuth20Service0.createAuthorizationUrlBuilder();
      PKCE pKCE0 = authorizationUrlBuilder0.getPkce();
}"
6,"    public OAuth2Authorization extractAuthorization(String redirectLocation) {
        final OAuth2Authorization authorization = new OAuth2Authorization();
        int end = redirectLocation.indexOf('#');
        if (end == -1) {
            end = redirectLocation.length();
        }
        for (String param : redirectLocation.substring(redirectLocation.indexOf('?') + 1, end).split(""&"")) {
            final String[] keyValue = param.split(""="");
            if (keyValue.length == 2) {
                try {
                    switch (keyValue[0]) {
                        case ""code"":
                            authorization.setCode(URLDecoder.decode(keyValue[1], ""UTF-8""));
                            break;
                        case ""state"":
                            authorization.setState(URLDecoder.decode(keyValue[1], ""UTF-8""));
                            break;
                        default: //just ignore any other param;
                    }
                } catch (UnsupportedEncodingException ueE) {
                    throw new IllegalStateException(""jvm without UTF-8, really?"", ueE);
                }
            }
        }
        return authorization;
    }","  public void test0()  throws Throwable  {
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, ""g5|m0agml0(a=iV:h"", ""g5|m0agml0(a=iV:h"", ""g5|m0agml0(a=iV:h"", ""g5|m0agml0(a=iV:h"", ""g5|m0agml0(a=iV:h"", (OutputStream) null, ""g5|m0agml0(a=iV:h"", jDKHttpClientConfig0, jDKHttpClient0);
      OAuth2Authorization oAuth2Authorization0 = oAuth20Service0.extractAuthorization(""(enabled=0x%x,disabled=0x%x)"");
}"
7,"    public String getDefaultScope() {
        return defaultScope;
    }","  public void test1()  throws Throwable  {
      Verb verb0 = Verb.OPTIONS;
      ClientAuthentication clientAuthentication0 = mock(ClientAuthentication.class, new ViolatedAssumptionAnswer());
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn(""access token"").when(defaultApi20_0).getAccessTokenEndpoint();
      doReturn(verb0).when(defaultApi20_0).getAccessTokenVerb();
      doReturn(clientAuthentication0).when(defaultApi20_0).getClientAuthentication();
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, ""k?VKA'"", ""_>"", ""k?VKA'"", ""k?VKA'"", ""3lp"", (OutputStream) null, ""_>"", jDKHttpClientConfig0, jDKHttpClient0);
      OAuthRequest oAuthRequest0 = oAuth20Service0.createAccessTokenClientCredentialsGrantRequest(""="");
      oAuth20Service0.logRequestWithParams(""access token"", oAuthRequest0);
}"
8,"    public String getResponseType() {
        return responseType;
    }","  public void test2()  throws Throwable  {
      Verb verb0 = Verb.OPTIONS;
      ClientAuthentication clientAuthentication0 = mock(ClientAuthentication.class, new ViolatedAssumptionAnswer());
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn(""access token"").when(defaultApi20_0).getAccessTokenEndpoint();
      doReturn(verb0).when(defaultApi20_0).getAccessTokenVerb();
      doReturn(clientAuthentication0).when(defaultApi20_0).getClientAuthentication();
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, ""k?VKA'"", ""_>"", ""k?VKA'"", ""k?VKA'"", ""3lp"", (OutputStream) null, ""_>"", jDKHttpClientConfig0, jDKHttpClient0);
      OAuthRequest oAuthRequest0 = oAuth20Service0.createAccessTokenClientCredentialsGrantRequest(""="");
      oAuth20Service0.logRequestWithParams(""access token"", oAuthRequest0);
}"
9,"    public String getResponseType() {
        return responseType;
    }","  public void test3()  throws Throwable  {
      Verb verb0 = Verb.OPTIONS;
      ClientAuthentication clientAuthentication0 = mock(ClientAuthentication.class, new ViolatedAssumptionAnswer());
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn(""access token"").when(defaultApi20_0).getAccessTokenEndpoint();
      doReturn(verb0).when(defaultApi20_0).getAccessTokenVerb();
      doReturn(clientAuthentication0).when(defaultApi20_0).getClientAuthentication();
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, ""k?VKA'"", ""_>"", ""k?VKA'"", ""k?VKA'"", ""3lp"", (OutputStream) null, ""_>"", jDKHttpClientConfig0, jDKHttpClient0);
      OAuthRequest oAuthRequest0 = oAuth20Service0.createAccessTokenClientCredentialsGrantRequest(""="");
      OAuthAsyncRequestCallback<OAuth2AccessToken> oAuthAsyncRequestCallback0 = (OAuthAsyncRequestCallback<OAuth2AccessToken>) mock(OAuthAsyncRequestCallback.class, new ViolatedAssumptionAnswer());
      oAuth20Service0.sendAccessTokenRequestAsync(oAuthRequest0, oAuthAsyncRequestCallback0);
}"
10,"    public String getDefaultScope() {
        return defaultScope;
    }","  public void test4()  throws Throwable  {
      Verb verb0 = Verb.OPTIONS;
      ClientAuthentication clientAuthentication0 = mock(ClientAuthentication.class, new ViolatedAssumptionAnswer());
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn(""access token"").when(defaultApi20_0).getAccessTokenEndpoint();
      doReturn(verb0).when(defaultApi20_0).getAccessTokenVerb();
      doReturn(clientAuthentication0).when(defaultApi20_0).getClientAuthentication();
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, ""k?VKA'"", ""_>"", ""k?VKA'"", ""k?VKA'"", ""3lp"", (OutputStream) null, ""_>"", jDKHttpClientConfig0, jDKHttpClient0);
      OAuthRequest oAuthRequest0 = oAuth20Service0.createAccessTokenClientCredentialsGrantRequest(""="");
      OAuthAsyncRequestCallback<OAuth2AccessToken> oAuthAsyncRequestCallback0 = (OAuthAsyncRequestCallback<OAuth2AccessToken>) mock(OAuthAsyncRequestCallback.class, new ViolatedAssumptionAnswer());
      oAuth20Service0.sendAccessTokenRequestAsync(oAuthRequest0, oAuthAsyncRequestCallback0);
}"
11,"    public Future<Void> revokeTokenAsync(String tokenToRevoke) {
        return revokeTokenAsync(tokenToRevoke, null);
    }","  public void test5()  throws Throwable  {
      ClientAuthentication clientAuthentication0 = mock(ClientAuthentication.class, new ViolatedAssumptionAnswer());
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn(clientAuthentication0).when(defaultApi20_0).getClientAuthentication();
      doReturn(""5u~OF"").when(defaultApi20_0).getRevokeTokenEndpoint();
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient();
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, ""5u~OF"", ""5u~OF"", ""5u~OF"", ""5u~OF"", ""5u~OF"", (OutputStream) null, ""5u~OF"", jDKHttpClientConfig0, jDKHttpClient0);
      TokenTypeHint tokenTypeHint0 = TokenTypeHint.REFRESH_TOKEN;
      Future<Void> future0 = oAuth20Service0.revokeTokenAsync(""5u~OF"", tokenTypeHint0);
}"
12,"    public String getDefaultScope() {
        return defaultScope;
    }","  public void test6()  throws Throwable  {
      ClientAuthentication clientAuthentication0 = mock(ClientAuthentication.class, new ViolatedAssumptionAnswer());
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn(clientAuthentication0).when(defaultApi20_0).getClientAuthentication();
      doReturn(""&u~OF"").when(defaultApi20_0).getRevokeTokenEndpoint();
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient();
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, ""grant_yp"", ""h}4g,CP"", ""h}4g,CP"", ""grant_yp"", ""H0!_B%jy"", (OutputStream) null, ""Problem accessing property `"", jDKHttpClientConfig0, jDKHttpClient0);
      oAuth20Service0.revokeTokenAsync(""H0!_B%jy"");
}"
13,"    public String getResponseType() {
        return responseType;
    }","  public void test7()  throws Throwable  {
      ClientAuthentication clientAuthentication0 = mock(ClientAuthentication.class, new ViolatedAssumptionAnswer());
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn(clientAuthentication0).when(defaultApi20_0).getClientAuthentication();
      doReturn(""&u~OF"").when(defaultApi20_0).getRevokeTokenEndpoint();
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient();
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, ""grant_yp"", ""h}4g,CP"", ""h}4g,CP"", ""grant_yp"", ""H0!_B%jy"", (OutputStream) null, ""Problem accessing property `"", jDKHttpClientConfig0, jDKHttpClient0);
      oAuth20Service0.revokeTokenAsync(""H0!_B%jy"");
}"
14,"    public String getDefaultScope() {
        return defaultScope;
    }","  public void test8()  throws Throwable  {
      Verb verb0 = Verb.HEAD;
      ClientAuthentication clientAuthentication0 = mock(ClientAuthentication.class, new ViolatedAssumptionAnswer());
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn(verb0).when(defaultApi20_0).getAccessTokenVerb();
      doReturn(clientAuthentication0).when(defaultApi20_0).getClientAuthentication();
      doReturn(""access token"").when(defaultApi20_0).getRefreshTokenEndpoint();
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, ""k?VKA'"", ""_>"", ""k?VKA'"", ""k?VKA'"", ""3lp"", (OutputStream) null, ""_>"", jDKHttpClientConfig0, jDKHttpClient0);
      oAuth20Service0.refreshAccessTokenAsync(""access token"", ""k?VKA'"");
}"
15,"    public String getResponseType() {
        return responseType;
    }","  public void test9()  throws Throwable  {
      Verb verb0 = Verb.HEAD;
      ClientAuthentication clientAuthentication0 = mock(ClientAuthentication.class, new ViolatedAssumptionAnswer());
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn(verb0).when(defaultApi20_0).getAccessTokenVerb();
      doReturn(clientAuthentication0).when(defaultApi20_0).getClientAuthentication();
      doReturn(""access token"").when(defaultApi20_0).getRefreshTokenEndpoint();
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, ""k?VKA'"", ""_>"", ""k?VKA'"", ""k?VKA'"", ""3lp"", (OutputStream) null, ""_>"", jDKHttpClientConfig0, jDKHttpClient0);
      oAuth20Service0.refreshAccessTokenAsync(""access token"", ""k?VKA'"");
}"
16,"    public String getResponseType() {
        return responseType;
    }","  public void test10()  throws Throwable  {
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, """", """", """", """", (String) null, (OutputStream) null, """", jDKHttpClientConfig0, jDKHttpClient0);
      String string0 = oAuth20Service0.getResponseType();
}"
17,"    public String getDefaultScope() {
        return defaultScope;
    }","  public void test11()  throws Throwable  {
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(""state"");
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient();
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, """", """", """", ""ln#sKb1&0}26(}h"", """", mockFileOutputStream0, ""haHK"", jDKHttpClientConfig0, jDKHttpClient0);
      String string0 = oAuth20Service0.getResponseType();
}"
18,"    public String getResponseType() {
        return responseType;
    }","  public void test12()  throws Throwable  {
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(""state"");
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient();
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, """", """", """", ""ln#sKb1&0}26(}h"", """", mockFileOutputStream0, ""haHK"", jDKHttpClientConfig0, jDKHttpClient0);
      String string0 = oAuth20Service0.getResponseType();
}"
19,"    public String getResponseType() {
        return responseType;
    }","  public void test13()  throws Throwable  {
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient();
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn("""").when(defaultApi20_0).getDeviceAuthorizationEndpoint();
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, """", ""E5]_"", """", """", """", (OutputStream) null, ""^FF% ^HH y=#0Gh`1Jz"", jDKHttpClientConfig0, jDKHttpClient0);
      OAuthAsyncRequestCallback<DeviceAuthorization> oAuthAsyncRequestCallback0 = (OAuthAsyncRequestCallback<DeviceAuthorization>) mock(OAuthAsyncRequestCallback.class, new ViolatedAssumptionAnswer());
      oAuth20Service0.getDeviceAuthorizationCodes((String) null, oAuthAsyncRequestCallback0);
}"
20,"    public String getDefaultScope() {
        return defaultScope;
    }","  public void test14()  throws Throwable  {
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient();
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn("""").when(defaultApi20_0).getDeviceAuthorizationEndpoint();
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, """", ""E5]_"", """", """", """", (OutputStream) null, ""^FF% ^HH y=#0Gh`1Jz"", jDKHttpClientConfig0, jDKHttpClient0);
      OAuthAsyncRequestCallback<DeviceAuthorization> oAuthAsyncRequestCallback0 = (OAuthAsyncRequestCallback<DeviceAuthorization>) mock(OAuthAsyncRequestCallback.class, new ViolatedAssumptionAnswer());
      oAuth20Service0.getDeviceAuthorizationCodes((String) null, oAuthAsyncRequestCallback0);
}"
21,"    public String getDefaultScope() {
        return defaultScope;
    }","  public void test15()  throws Throwable  {
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, """", ""jh!:7{k]2xAK"", ""jh!:7{k]2xAK"", (String) null, (String) null, byteArrayOutputStream0, ""?14|*5uzQu"", jDKHttpClientConfig0, jDKHttpClient0);
      String string0 = oAuth20Service0.getDefaultScope();
}"
22,"    public String getResponseType() {
        return responseType;
    }","  public void test16()  throws Throwable  {
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      MockFile mockFile0 = new MockFile(""[/x9CBn"");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, """", """", ""The refreshToken cannot be null or empty"", """", """", mockFileOutputStream0, "")@iWDNE=>KxAM"", jDKHttpClientConfig0, (HttpClient) null);
      String string0 = oAuth20Service0.getDefaultScope();
}"
23,"    public String getDefaultScope() {
        return defaultScope;
    }","  public void test17()  throws Throwable  {
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      MockFile mockFile0 = new MockFile(""[/x9CBn"");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, """", """", ""The refreshToken cannot be null or empty"", """", """", mockFileOutputStream0, "")@iWDNE=>KxAM"", jDKHttpClientConfig0, (HttpClient) null);
      String string0 = oAuth20Service0.getDefaultScope();
}"
24,"    public String getResponseType() {
        return responseType;
    }","  public void test18()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(""token_type_hint"", false);
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      OAuth20Service oAuth20Service0 = new OAuth20Service((DefaultApi20) null, """", (String) null, """", ""v1"", """", mockFileOutputStream0, ""Cannot create polymorphic instances with unwrapped values"", jDKHttpClientConfig0, (HttpClient) null);
      oAuth20Service0.getApi();
}"
25,"    public String getDefaultScope() {
        return defaultScope;
    }","  public void test19()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(""token_type_hint"", false);
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      OAuth20Service oAuth20Service0 = new OAuth20Service((DefaultApi20) null, """", (String) null, """", ""v1"", """", mockFileOutputStream0, ""Cannot create polymorphic instances with unwrapped values"", jDKHttpClientConfig0, (HttpClient) null);
      oAuth20Service0.getApi();
}"
26,"    public String getDefaultScope() {
        return defaultScope;
    }","  public void test20()  throws Throwable  {
      Verb verb0 = Verb.OPTIONS;
      ClientAuthentication clientAuthentication0 = mock(ClientAuthentication.class, new ViolatedAssumptionAnswer());
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn(""access tokn"").when(defaultApi20_0).getAccessTokenEndpoint();
      doReturn(verb0).when(defaultApi20_0).getAccessTokenVerb();
      doReturn(clientAuthentication0).when(defaultApi20_0).getClientAuthentication();
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, ""k?VKA'"", ""-"", ""k?VKA'"", ""k?VKA'"", ""3lp"", (OutputStream) null, ""-"", jDKHttpClientConfig0, jDKHttpClient0);
      OAuthAsyncRequestCallback<OAuth2AccessToken> oAuthAsyncRequestCallback0 = (OAuthAsyncRequestCallback<OAuth2AccessToken>) mock(OAuthAsyncRequestCallback.class, new ViolatedAssumptionAnswer());
      oAuth20Service0.getAccessTokenPasswordGrantAsync(""@Q4._& 3,a=G\""R^`:\"""", ""Factory implementation for format (%s) MUST override `rebuild()` method"", (String) null, oAuthAsyncRequestCallback0);
}"
27,"    public String getResponseType() {
        return responseType;
    }","  public void test21()  throws Throwable  {
      Verb verb0 = Verb.OPTIONS;
      ClientAuthentication clientAuthentication0 = mock(ClientAuthentication.class, new ViolatedAssumptionAnswer());
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn(""access tokn"").when(defaultApi20_0).getAccessTokenEndpoint();
      doReturn(verb0).when(defaultApi20_0).getAccessTokenVerb();
      doReturn(clientAuthentication0).when(defaultApi20_0).getClientAuthentication();
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, ""k?VKA'"", ""-"", ""k?VKA'"", ""k?VKA'"", ""3lp"", (OutputStream) null, ""-"", jDKHttpClientConfig0, jDKHttpClient0);
      OAuthAsyncRequestCallback<OAuth2AccessToken> oAuthAsyncRequestCallback0 = (OAuthAsyncRequestCallback<OAuth2AccessToken>) mock(OAuthAsyncRequestCallback.class, new ViolatedAssumptionAnswer());
      oAuth20Service0.getAccessTokenPasswordGrantAsync(""@Q4._& 3,a=G\""R^`:\"""", ""Factory implementation for format (%s) MUST override `rebuild()` method"", (String) null, oAuthAsyncRequestCallback0);
}"
28,"    public String getResponseType() {
        return responseType;
    }","  public void test22()  throws Throwable  {
      Verb verb0 = Verb.OPTIONS;
      ClientAuthentication clientAuthentication0 = mock(ClientAuthentication.class, new ViolatedAssumptionAnswer());
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn(""access tokn"").when(defaultApi20_0).getAccessTokenEndpoint();
      doReturn(verb0).when(defaultApi20_0).getAccessTokenVerb();
      doReturn(clientAuthentication0).when(defaultApi20_0).getClientAuthentication();
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, ""k?VKA'"", ""_>"", ""k?VKA'"", ""k?VKA'"", ""3lp"", (OutputStream) null, ""_>"", jDKHttpClientConfig0, jDKHttpClient0);
      OAuthAsyncRequestCallback<OAuth2AccessToken> oAuthAsyncRequestCallback0 = (OAuthAsyncRequestCallback<OAuth2AccessToken>) mock(OAuthAsyncRequestCallback.class, new ViolatedAssumptionAnswer());
      oAuth20Service0.getAccessTokenPasswordGrantAsync(""Ynk+7oXaL4oY"", """", oAuthAsyncRequestCallback0);
}"
29,"    public String getDefaultScope() {
        return defaultScope;
    }","  public void test23()  throws Throwable  {
      Verb verb0 = Verb.OPTIONS;
      ClientAuthentication clientAuthentication0 = mock(ClientAuthentication.class, new ViolatedAssumptionAnswer());
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn(""access tokn"").when(defaultApi20_0).getAccessTokenEndpoint();
      doReturn(verb0).when(defaultApi20_0).getAccessTokenVerb();
      doReturn(clientAuthentication0).when(defaultApi20_0).getClientAuthentication();
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, ""k?VKA'"", ""_>"", ""k?VKA'"", ""k?VKA'"", ""3lp"", (OutputStream) null, ""_>"", jDKHttpClientConfig0, jDKHttpClient0);
      OAuthAsyncRequestCallback<OAuth2AccessToken> oAuthAsyncRequestCallback0 = (OAuthAsyncRequestCallback<OAuth2AccessToken>) mock(OAuthAsyncRequestCallback.class, new ViolatedAssumptionAnswer());
      oAuth20Service0.getAccessTokenPasswordGrantAsync(""Ynk+7oXaL4oY"", """", oAuthAsyncRequestCallback0);
}"
30,"    public String getResponseType() {
        return responseType;
    }","  public void test24()  throws Throwable  {
      ClientAuthentication clientAuthentication0 = mock(ClientAuthentication.class, new ViolatedAssumptionAnswer());
      Verb verb0 = Verb.POST;
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn("""").when(defaultApi20_0).getAccessTokenEndpoint();
      doReturn(verb0).when(defaultApi20_0).getAccessTokenVerb();
      doReturn(clientAuthentication0).when(defaultApi20_0).getClientAuthentication();
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient();
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, ""grant_type"", ""h}4g,CP"", ""h}4g,CP"", ""grant_type"", ""H0!_B%jy"", (OutputStream) null, ""Problem accessing property '"", jDKHttpClientConfig0, jDKHttpClient0);
      oAuth20Service0.getAccessTokenPasswordGrantAsync(""Sn]T!Rm2+aHf<\""Vt[v'"", ""&u~OF"");
}"
31,"    public String getDefaultScope() {
        return defaultScope;
    }","  public void test25()  throws Throwable  {
      ClientAuthentication clientAuthentication0 = mock(ClientAuthentication.class, new ViolatedAssumptionAnswer());
      Verb verb0 = Verb.POST;
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn("""").when(defaultApi20_0).getAccessTokenEndpoint();
      doReturn(verb0).when(defaultApi20_0).getAccessTokenVerb();
      doReturn(clientAuthentication0).when(defaultApi20_0).getClientAuthentication();
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient();
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, ""grant_type"", ""h}4g,CP"", ""h}4g,CP"", ""grant_type"", ""H0!_B%jy"", (OutputStream) null, ""Problem accessing property '"", jDKHttpClientConfig0, jDKHttpClient0);
      oAuth20Service0.getAccessTokenPasswordGrantAsync(""Sn]T!Rm2+aHf<\""Vt[v'"", ""&u~OF"");
}"
32,"    public String getResponseType() {
        return responseType;
    }","  public void test26()  throws Throwable  {
      Verb verb0 = Verb.POST;
      ClientAuthentication clientAuthentication0 = mock(ClientAuthentication.class, new ViolatedAssumptionAnswer());
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn(""FLOAT"").when(defaultApi20_0).getAccessTokenEndpoint();
      doReturn(verb0).when(defaultApi20_0).getAccessTokenVerb();
      doReturn(clientAuthentication0).when(defaultApi20_0).getClientAuthentication();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, """", """", """", ""0O(!O"", """", pipedOutputStream0, ""0O(!O"", jDKHttpClientConfig0, jDKHttpClient0);
      DeviceAuthorization deviceAuthorization0 = new DeviceAuthorization(""Za]nU"", ""Za]nU"", ""com.fasterxml.jackson.databind.ser.BeanPropertyWriter"", (-1428));
      OAuthAsyncRequestCallback<OAuth2AccessToken> oAuthAsyncRequestCallback0 = (OAuthAsyncRequestCallback<OAuth2AccessToken>) mock(OAuthAsyncRequestCallback.class, new ViolatedAssumptionAnswer());
      oAuth20Service0.getAccessTokenDeviceAuthorizationGrant(deviceAuthorization0, oAuthAsyncRequestCallback0);
}"
33,"    public String getDefaultScope() {
        return defaultScope;
    }","  public void test27()  throws Throwable  {
      Verb verb0 = Verb.POST;
      ClientAuthentication clientAuthentication0 = mock(ClientAuthentication.class, new ViolatedAssumptionAnswer());
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn(""FLOAT"").when(defaultApi20_0).getAccessTokenEndpoint();
      doReturn(verb0).when(defaultApi20_0).getAccessTokenVerb();
      doReturn(clientAuthentication0).when(defaultApi20_0).getClientAuthentication();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, """", """", """", ""0O(!O"", """", pipedOutputStream0, ""0O(!O"", jDKHttpClientConfig0, jDKHttpClient0);
      DeviceAuthorization deviceAuthorization0 = new DeviceAuthorization(""Za]nU"", ""Za]nU"", ""com.fasterxml.jackson.databind.ser.BeanPropertyWriter"", (-1428));
      OAuthAsyncRequestCallback<OAuth2AccessToken> oAuthAsyncRequestCallback0 = (OAuthAsyncRequestCallback<OAuth2AccessToken>) mock(OAuthAsyncRequestCallback.class, new ViolatedAssumptionAnswer());
      oAuth20Service0.getAccessTokenDeviceAuthorizationGrant(deviceAuthorization0, oAuthAsyncRequestCallback0);
}"
34,"    public String getResponseType() {
        return responseType;
    }","  public void test28()  throws Throwable  {
      Verb verb0 = Verb.GET;
      ClientAuthentication clientAuthentication0 = mock(ClientAuthentication.class, new ViolatedAssumptionAnswer());
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn(""opaPzy1 sXvE`QWOh#"").when(defaultApi20_0).getAccessTokenEndpoint();
      doReturn(verb0).when(defaultApi20_0).getAccessTokenVerb();
      doReturn(clientAuthentication0).when(defaultApi20_0).getClientAuthentication();
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, ""USE_BASE_TYPE_AS_DEFAULT_IMPL"", ""USE_BASE_TYPE_AS_DEFAULT_IMPL"", ""v'?9];m;fSQTcg3.%8"", (String) null, ""3'FI<\""y7lH8?!kyEmX>"", (OutputStream) null, ""v'?9];m;fSQTcg3.%8"", jDKHttpClientConfig0, jDKHttpClient0);
      oAuth20Service0.getAccessTokenClientCredentialsGrantAsync();
}"
35,"    public String getResponseType() {
        return responseType;
    }","  public void test29()  throws Throwable  {
      Verb verb0 = Verb.GET;
      ClientAuthentication clientAuthentication0 = mock(ClientAuthentication.class, new ViolatedAssumptionAnswer());
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn(""scope"").when(defaultApi20_0).getAccessTokenEndpoint();
      doReturn(verb0).when(defaultApi20_0).getAccessTokenVerb();
      doReturn(clientAuthentication0).when(defaultApi20_0).getClientAuthentication();
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, ""USE_BASE_TYPE_AS_DEFAULT_IMPL"", ""USE_BASE_TYPE_AS_DEFAULT_IMPL"", ""v'?9];m;fSQTcg3.%8"", (String) null, ""3'FI<\""y7lH8?!kyEmX>"", (OutputStream) null, ""v'?9];m;fSQTcg3.%8"", jDKHttpClientConfig0, jDKHttpClient0);
      AccessTokenRequestParams accessTokenRequestParams0 = AccessTokenRequestParams.create("""");
      oAuth20Service0.getAccessTokenAsync(accessTokenRequestParams0);
}"
36,"    public String getResponseType() {
        return responseType;
    }","  public void test30()  throws Throwable  {
      ClientAuthentication clientAuthentication0 = mock(ClientAuthentication.class, new ViolatedAssumptionAnswer());
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn(clientAuthentication0).when(defaultApi20_0).getClientAuthentication();
      doReturn(""&u~OF"").when(defaultApi20_0).getRevokeTokenEndpoint();
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient();
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, ""grant_type"", ""h}4g,CP"", ""h}4g,CP"", ""grant_type"", ""H0!_B%jy"", (OutputStream) null, ""Problem accessing property '"", jDKHttpClientConfig0, jDKHttpClient0);
      TokenTypeHint tokenTypeHint0 = TokenTypeHint.REFRESH_TOKEN;
      oAuth20Service0.createRevokeTokenRequest("""", tokenTypeHint0);
}"
37,"    public String getDefaultScope() {
        return defaultScope;
    }","  public void test31()  throws Throwable  {
      ClientAuthentication clientAuthentication0 = mock(ClientAuthentication.class, new ViolatedAssumptionAnswer());
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn(clientAuthentication0).when(defaultApi20_0).getClientAuthentication();
      doReturn(""&u~OF"").when(defaultApi20_0).getRevokeTokenEndpoint();
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient();
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, ""grant_type"", ""h}4g,CP"", ""h}4g,CP"", ""grant_type"", ""H0!_B%jy"", (OutputStream) null, ""Problem accessing property '"", jDKHttpClientConfig0, jDKHttpClient0);
      TokenTypeHint tokenTypeHint0 = TokenTypeHint.REFRESH_TOKEN;
      oAuth20Service0.createRevokeTokenRequest("""", tokenTypeHint0);
}"
38,"    public String getResponseType() {
        return responseType;
    }","  public void test32()  throws Throwable  {
      Verb verb0 = Verb.DELETE;
      ClientAuthentication clientAuthentication0 = mock(ClientAuthentication.class, new ViolatedAssumptionAnswer());
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn(verb0).when(defaultApi20_0).getAccessTokenVerb();
      doReturn(clientAuthentication0).when(defaultApi20_0).getClientAuthentication();
      doReturn(""-68'C9$r\"""").when(defaultApi20_0).getRefreshTokenEndpoint();
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient();
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, ""+j4"", ""1us.?*IS}NnPcf`m"", "",valueFilter="", ""8#dn.'"", """", (OutputStream) null, ""r"", jDKHttpClientConfig0, jDKHttpClient0);
      oAuth20Service0.createRefreshTokenRequest(""+j4"", ""-68'C9$r\"""");
}"
39,"    public String getDefaultScope() {
        return defaultScope;
    }","  public void test33()  throws Throwable  {
      Verb verb0 = Verb.DELETE;
      ClientAuthentication clientAuthentication0 = mock(ClientAuthentication.class, new ViolatedAssumptionAnswer());
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn(verb0).when(defaultApi20_0).getAccessTokenVerb();
      doReturn(clientAuthentication0).when(defaultApi20_0).getClientAuthentication();
      doReturn(""-68'C9$r\"""").when(defaultApi20_0).getRefreshTokenEndpoint();
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient();
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, ""+j4"", ""1us.?*IS}NnPcf`m"", "",valueFilter="", ""8#dn.'"", """", (OutputStream) null, ""r"", jDKHttpClientConfig0, jDKHttpClient0);
      oAuth20Service0.createRefreshTokenRequest(""+j4"", ""-68'C9$r\"""");
}"
40,"    public String getResponseType() {
        return responseType;
    }","  public void test34()  throws Throwable  {
      Verb verb0 = Verb.POST;
      ClientAuthentication clientAuthentication0 = mock(ClientAuthentication.class, new ViolatedAssumptionAnswer());
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn(""v)`a_(m"").when(defaultApi20_0).getAccessTokenEndpoint();
      doReturn(verb0).when(defaultApi20_0).getAccessTokenVerb();
      doReturn(clientAuthentication0).when(defaultApi20_0).getClientAuthentication();
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient();
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, ""v)`a_(m"", ""v)`a_(m"", ""v)`a_(m"", (String) null, ""v)`a_(m"", (OutputStream) null, """", jDKHttpClientConfig0, jDKHttpClient0);
      oAuth20Service0.createAccessTokenPasswordGrantRequest(""v)`a_(m"", (String) null, ""\""'"");
}"
41,"    public String getDefaultScope() {
        return defaultScope;
    }","  public void test35()  throws Throwable  {
      ClientAuthentication clientAuthentication0 = mock(ClientAuthentication.class, new ViolatedAssumptionAnswer());
      Verb verb0 = Verb.HEAD;
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn(""state"").when(defaultApi20_0).getAccessTokenEndpoint();
      doReturn(verb0).when(defaultApi20_0).getAccessTokenVerb();
      doReturn(clientAuthentication0).when(defaultApi20_0).getClientAuthentication();
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient();
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, ""grant_yp"", ""h}4g,CP"", ""h}4g,CP"", ""grant_yp"", ""H0!_B%jy"", (OutputStream) null, ""Problem accessing property `"", jDKHttpClientConfig0, jDKHttpClient0);
      DeviceAuthorization deviceAuthorization0 = new DeviceAuthorization(""received response for access token"", ""client_credentials"", """", (-274));
      oAuth20Service0.createAccessTokenDeviceAuthorizationGrantRequest(deviceAuthorization0);
}"
42,"    public String getResponseType() {
        return responseType;
    }","  public void test36()  throws Throwable  {
      ClientAuthentication clientAuthentication0 = mock(ClientAuthentication.class, new ViolatedAssumptionAnswer());
      Verb verb0 = Verb.HEAD;
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn(""state"").when(defaultApi20_0).getAccessTokenEndpoint();
      doReturn(verb0).when(defaultApi20_0).getAccessTokenVerb();
      doReturn(clientAuthentication0).when(defaultApi20_0).getClientAuthentication();
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient();
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, ""grant_yp"", ""h}4g,CP"", ""h}4g,CP"", ""grant_yp"", ""H0!_B%jy"", (OutputStream) null, ""Problem accessing property `"", jDKHttpClientConfig0, jDKHttpClient0);
      DeviceAuthorization deviceAuthorization0 = new DeviceAuthorization(""received response for access token"", ""client_credentials"", """", (-274));
      oAuth20Service0.createAccessTokenDeviceAuthorizationGrantRequest(deviceAuthorization0);
}"
43,"    public void signRequest(String accessToken, OAuthRequest request) {
        api.getBearerSignature().signRequest(accessToken, request);
    }","  public void test37()  throws Throwable  {
      Verb verb0 = Verb.OPTIONS;
      ClientAuthentication clientAuthentication0 = mock(ClientAuthentication.class, new ViolatedAssumptionAnswer());
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn(""access token"").when(defaultApi20_0).getAccessTokenEndpoint();
      doReturn(verb0).when(defaultApi20_0).getAccessTokenVerb();
      doReturn((BearerSignature) null).when(defaultApi20_0).getBearerSignature();
      doReturn(clientAuthentication0).when(defaultApi20_0).getClientAuthentication();
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, ""k?VKA'"", ""_>"", ""k?VKA'"", ""k?VKA'"", ""3lp"", (OutputStream) null, ""_>"", jDKHttpClientConfig0, jDKHttpClient0);
      OAuthRequest oAuthRequest0 = oAuth20Service0.createAccessTokenClientCredentialsGrantRequest(""="");
      // Undeclared exception!
      try { 
        oAuth20Service0.signRequest((String) null, oAuthRequest0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""com.github.scribejava.core.oauth.OAuth20Service"", e);
      }
  }"
44,"    public void signRequest(String accessToken, OAuthRequest request) {
        api.getBearerSignature().signRequest(accessToken, request);
    }","  public void test38()  throws Throwable  {
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn((BearerSignature) null).when(defaultApi20_0).getBearerSignature();
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, """", """", ""revoke token"", (String) null, ""authorization_pending"", (OutputStream) null, """", jDKHttpClientConfig0, jDKHttpClient0);
      OAuth2AccessToken oAuth2AccessToken0 = new OAuth2AccessToken(""wWA"", ""$Q6"");
      Verb verb0 = Verb.TRACE;
      OAuthRequest oAuthRequest0 = new OAuthRequest(verb0, ""revoke token"");
      // Undeclared exception!
      try { 
        oAuth20Service0.signRequest(oAuth2AccessToken0, oAuthRequest0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""com.github.scribejava.core.oauth.OAuth20Service"", e);
      }
  }"
45,"    protected OAuth2AccessToken sendAccessTokenRequestSync(OAuthRequest request)
            throws IOException, InterruptedException, ExecutionException {
        if (isDebug()) {
            log(""send request for access token synchronously to %s"", request.getCompleteUrl());
        }
        try (Response response = execute(request)) {
            if (isDebug()) {
                log(""response status code: %s"", response.getCode());
                log(""response body: %s"", response.getBody());
            }

            return api.getAccessTokenExtractor().extract(response);
        }
    }","  public void test39()  throws Throwable  {
      Verb verb0 = Verb.OPTIONS;
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      MockFile mockFile0 = new MockFile(""accrss token prssword grant"", """");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuthRequest oAuthRequest0 = new OAuthRequest(verb0, """");
      oAuthRequest0.setCharset(""com.fasterxml.jackson.databind.deser.CreatorProperty"");
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, ""accrss token prssword grant"", ""accrss token prssword grant"", """", """", ""AnnotationIntrospector returned serializer definition of type "", mockPrintStream0, ""55R*7 c<w3h"", jDKHttpClientConfig0, jDKHttpClient0);
      // Undeclared exception!
      try { 
        oAuth20Service0.sendAccessTokenRequestSync(oAuthRequest0);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // Unsupported Charset: com.fasterxml.jackson.databind.deser.CreatorProperty
         //
         verifyException(""com.github.scribejava.core.model.OAuthRequest"", e);
      }
  }"
46,"    protected OAuth2AccessToken sendAccessTokenRequestSync(OAuthRequest request)
            throws IOException, InterruptedException, ExecutionException {
        if (isDebug()) {
            log(""send request for access token synchronously to %s"", request.getCompleteUrl());
        }
        try (Response response = execute(request)) {
            if (isDebug()) {
                log(""response status code: %s"", response.getCode());
                log(""response body: %s"", response.getBody());
            }

            return api.getAccessTokenExtractor().extract(response);
        }
    }","  public void test40()  throws Throwable  {
      Verb verb0 = Verb.DELETE;
      ClientAuthentication clientAuthentication0 = mock(ClientAuthentication.class, new ViolatedAssumptionAnswer());
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn(""access token"").when(defaultApi20_0).getAccessTokenEndpoint();
      doReturn(verb0).when(defaultApi20_0).getAccessTokenVerb();
      doReturn(clientAuthentication0).when(defaultApi20_0).getClientAuthentication();
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, ""k?VKA'"", ""_>"", ""k?VKA'"", ""k?VKA'"", ""13\""J^A_E"", (OutputStream) null, ""_>"", jDKHttpClientConfig0, jDKHttpClient0);
      OAuthRequest oAuthRequest0 = oAuth20Service0.createAccessTokenClientCredentialsGrantRequest(""="");
      try { 
        oAuth20Service0.sendAccessTokenRequestSync(oAuthRequest0);
        fail(""Expecting exception: MalformedURLException"");
      } catch(MalformedURLException e) {
         //
         // no protocol: access token
         //
         verifyException(""java.net.URL"", e);
      }
  }"
47,"    protected OAuth2AccessToken sendAccessTokenRequestSync(OAuthRequest request)
            throws IOException, InterruptedException, ExecutionException {
        if (isDebug()) {
            log(""send request for access token synchronously to %s"", request.getCompleteUrl());
        }
        try (Response response = execute(request)) {
            if (isDebug()) {
                log(""response status code: %s"", response.getCode());
                log(""response body: %s"", response.getBody());
            }

            return api.getAccessTokenExtractor().extract(response);
        }
    }","  public void test41()  throws Throwable  {
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0);
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, ""fa;ALC#mNz"", ""uw_4P/5rAuk06(s"", ""Device Authorization Codes"", ""uw_4P/5rAuk06(s"", ""uw_4P/5rAuk06(s"", bufferedOutputStream0, (String) null, (HttpClientConfig) null, jDKHttpClient0);
      // Undeclared exception!
      try { 
        oAuth20Service0.sendAccessTokenRequestSync((OAuthRequest) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""com.github.scribejava.core.oauth.OAuth20Service"", e);
      }
  }"
48,"    protected OAuth2AccessToken sendAccessTokenRequestSync(OAuthRequest request)
            throws IOException, InterruptedException, ExecutionException {
        if (isDebug()) {
            log(""send request for access token synchronously to %s"", request.getCompleteUrl());
        }
        try (Response response = execute(request)) {
            if (isDebug()) {
                log(""response status code: %s"", response.getCode());
                log(""response body: %s"", response.getBody());
            }

            return api.getAccessTokenExtractor().extract(response);
        }
    }","  public void test42()  throws Throwable  {
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(defaultApi20_0).getDeviceAuthorizationEndpoint();
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, ""k?VKA'"", ""-"", ""k?VKA'"", ""k?VKA'"", ""3lp"", (OutputStream) null, ""-"", jDKHttpClientConfig0, jDKHttpClient0);
      OAuthRequest oAuthRequest0 = oAuth20Service0.createDeviceAuthorizationCodesRequest(""@"");
      // Undeclared exception!
      try { 
        oAuth20Service0.sendAccessTokenRequestSync(oAuthRequest0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Cannot append to null URL
         //
         verifyException(""com.github.scribejava.core.utils.Preconditions"", e);
      }
  }"
49,"    protected Future<OAuth2AccessToken> sendAccessTokenRequestAsync(OAuthRequest request) {
        return sendAccessTokenRequestAsync(request, null);
    }","  public void test43()  throws Throwable  {
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
      MockPrintStream mockPrintStream0 = new MockPrintStream(dataOutputStream0, true);
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, ""iQcNDdM!|Uls8Mo4"", ""iQcNDdM!|Uls8Mo4"", """", ""B_+Lv&"", ""swI;@9Ml]4T"", mockPrintStream0, ""com.github.scribejava.core.oauth.OAuth20Service$4"", jDKHttpClientConfig0, jDKHttpClient0);
      OAuthAsyncRequestCallback<OAuth2AccessToken> oAuthAsyncRequestCallback0 = (OAuthAsyncRequestCallback<OAuth2AccessToken>) mock(OAuthAsyncRequestCallback.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        oAuth20Service0.sendAccessTokenRequestAsync((OAuthRequest) null, oAuthAsyncRequestCallback0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""com.github.scribejava.core.oauth.OAuth20Service"", e);
      }
  }"
50,"    protected Future<OAuth2AccessToken> sendAccessTokenRequestAsync(OAuthRequest request) {
        return sendAccessTokenRequestAsync(request, null);
    }","  public void test44()  throws Throwable  {
      Verb verb0 = Verb.PUT;
      ClientAuthentication clientAuthentication0 = mock(ClientAuthentication.class, new ViolatedAssumptionAnswer());
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(defaultApi20_0).getAccessTokenEndpoint();
      doReturn(verb0).when(defaultApi20_0).getAccessTokenVerb();
      doReturn(clientAuthentication0).when(defaultApi20_0).getClientAuthentication();
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient();
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, ""+j4"", ""1us.?*IS}NnPcf`m"", "",valueFilter="", ""8#dn.'"", """", (OutputStream) null, ""r"", jDKHttpClientConfig0, jDKHttpClient0);
      AccessTokenRequestParams accessTokenRequestParams0 = new AccessTokenRequestParams("""");
      OAuthRequest oAuthRequest0 = oAuth20Service0.createAccessTokenRequest(accessTokenRequestParams0);
      OAuthAsyncRequestCallback<OAuth2AccessToken> oAuthAsyncRequestCallback0 = (OAuthAsyncRequestCallback<OAuth2AccessToken>) mock(OAuthAsyncRequestCallback.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        oAuth20Service0.sendAccessTokenRequestAsync(oAuthRequest0, oAuthAsyncRequestCallback0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Cannot append to null URL
         //
         verifyException(""com.github.scribejava.core.utils.Preconditions"", e);
      }
  }"
51,"    protected Future<OAuth2AccessToken> sendAccessTokenRequestAsync(OAuthRequest request) {
        return sendAccessTokenRequestAsync(request, null);
    }","  public void test45()  throws Throwable  {
      Verb verb0 = Verb.GET;
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient();
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, """", """", ""revoke token"", (String) null, ""authorization_pending"", (OutputStream) null, """", jDKHttpClientConfig0, jDKHttpClient0);
      OAuthRequest oAuthRequest0 = new OAuthRequest(verb0, ""revoke token"");
      oAuthRequest0.setCharset(""$Q6"");
      // Undeclared exception!
      try { 
        oAuth20Service0.sendAccessTokenRequestAsync(oAuthRequest0);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // Unsupported Charset: $Q6
         //
         verifyException(""com.github.scribejava.core.model.OAuthRequest"", e);
      }
  }"
52,"    protected Future<OAuth2AccessToken> sendAccessTokenRequestAsync(OAuthRequest request) {
        return sendAccessTokenRequestAsync(request, null);
    }","  public void test46()  throws Throwable  {
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient();
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, """", """", ""rvoke token"", """", """", (OutputStream) null, """", jDKHttpClientConfig0, jDKHttpClient0);
      Verb verb0 = Verb.TRACE;
      OAuthRequest oAuthRequest0 = new OAuthRequest(verb0, ""rvoke token"");
      File file0 = MockFile.createTempFile(""&)UBZ\""!Kc\"""", ""U)a&&Ef0L.FV/KQ4"");
      oAuthRequest0.setPayload(file0);
      // Undeclared exception!
      try { 
        oAuth20Service0.sendAccessTokenRequestAsync(oAuthRequest0);
        fail(""Expecting exception: UnsupportedOperationException"");
      } catch(UnsupportedOperationException e) {
         //
         // JDKHttpClient does not support File payload for the moment
         //
         verifyException(""com.github.scribejava.core.httpclient.jdk.JDKHttpClient"", e);
      }
  }"
53,"    protected Future<OAuth2AccessToken> sendAccessTokenRequestAsync(OAuthRequest request) {
        return sendAccessTokenRequestAsync(request, null);
    }","  public void test47()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient();
      Verb verb0 = Verb.DELETE;
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, (String) null, ""I(`"", ""4"", ""4"", (String) null, pipedOutputStream0, """", jDKHttpClientConfig0, jDKHttpClient0);
      OAuthRequest oAuthRequest0 = new OAuthRequest(verb0, ""4"");
      // Undeclared exception!
      try { 
        oAuth20Service0.sendAccessTokenRequestAsync(oAuthRequest0);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // there were problems while writting to the debug stream
         //
         verifyException(""com.github.scribejava.core.oauth.OAuthService"", e);
      }
  }"
54,"    protected Future<OAuth2AccessToken> sendAccessTokenRequestAsync(OAuthRequest request) {
        return sendAccessTokenRequestAsync(request, null);
    }","  public void test48()  throws Throwable  {
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(defaultApi20_0).getDeviceAuthorizationEndpoint();
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, ""k?VKA'"", """", ""k?VKA'"", ""k?VKA'"", ""3lp"", (OutputStream) null, """", jDKHttpClientConfig0, jDKHttpClient0);
      OAuthRequest oAuthRequest0 = oAuth20Service0.createDeviceAuthorizationCodesRequest(""@Q4._& 3,a=G\""R^`:\"""");
      // Undeclared exception!
      try { 
        oAuth20Service0.sendAccessTokenRequestAsync(oAuthRequest0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Cannot append to null URL
         //
         verifyException(""com.github.scribejava.core.utils.Preconditions"", e);
      }
  }"
55,"    public Future<Void> revokeTokenAsync(String tokenToRevoke) {
        return revokeTokenAsync(tokenToRevoke, null);
    }","  public void test49()  throws Throwable  {
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn((ClientAuthentication) null).when(defaultApi20_0).getClientAuthentication();
      doReturn((String) null).when(defaultApi20_0).getRevokeTokenEndpoint();
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, (String) null, (String) null, (String) null, (String) null, ""Avv:aLw'NqQRgjjB-"", (OutputStream) null, ""Avv:aLw'NqQRgjjB-"", jDKHttpClientConfig0, jDKHttpClient0);
      TokenTypeHint tokenTypeHint0 = TokenTypeHint.ACCESS_TOKEN;
      // Undeclared exception!
      try { 
        oAuth20Service0.revokeTokenAsync("""", tokenTypeHint0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""com.github.scribejava.core.oauth.OAuth20Service"", e);
      }
  }"
56,"    public Future<Void> revokeTokenAsync(String tokenToRevoke) {
        return revokeTokenAsync(tokenToRevoke, null);
    }","  public void test50()  throws Throwable  {
      ClientAuthentication clientAuthentication0 = mock(ClientAuthentication.class, new ViolatedAssumptionAnswer());
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn(clientAuthentication0).when(defaultApi20_0).getClientAuthentication();
      doReturn((String) null).when(defaultApi20_0).getRevokeTokenEndpoint();
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient();
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, ""+j4"", ""1us.?*IS}NnPcf`m"", "",valueFilter="", ""8#dn.'"", """", (OutputStream) null, ""r"", jDKHttpClientConfig0, jDKHttpClient0);
      TokenTypeHint tokenTypeHint0 = TokenTypeHint.ACCESS_TOKEN;
      // Undeclared exception!
      try { 
        oAuth20Service0.revokeTokenAsync("""", tokenTypeHint0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Cannot append to null URL
         //
         verifyException(""com.github.scribejava.core.utils.Preconditions"", e);
      }
  }"
57,"    public Future<Void> revokeTokenAsync(String tokenToRevoke) {
        return revokeTokenAsync(tokenToRevoke, null);
    }","  public void test51()  throws Throwable  {
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn((ClientAuthentication) null).when(defaultApi20_0).getClientAuthentication();
      doReturn((String) null).when(defaultApi20_0).getRevokeTokenEndpoint();
      MockPrintStream mockPrintStream0 = new MockPrintStream(""Avk/5+n7Pg^"");
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient();
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, (String) null, "" (from class "", "">"", (String) null, "" (from class "", mockPrintStream0, ""@ Lh?T!)_}$2I9"", jDKHttpClientConfig0, jDKHttpClient0);
      // Undeclared exception!
      try { 
        oAuth20Service0.revokeTokenAsync(""Avk/5+n7Pg^"");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""com.github.scribejava.core.oauth.OAuth20Service"", e);
      }
  }"
58,"    public Future<Void> revokeTokenAsync(String tokenToRevoke) {
        return revokeTokenAsync(tokenToRevoke, null);
    }","  public void test52()  throws Throwable  {
      ClientAuthentication clientAuthentication0 = mock(ClientAuthentication.class, new ViolatedAssumptionAnswer());
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn(clientAuthentication0).when(defaultApi20_0).getClientAuthentication();
      doReturn(""&u~OF"").when(defaultApi20_0).getRevokeTokenEndpoint();
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient();
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, ""grant_type"", ""h}4g,CP"", ""h}4g,CP"", ""grant_type"", ""H0!_B%jy"", (OutputStream) null, ""Problem accessing property '"", jDKHttpClientConfig0, jDKHttpClient0);
      // Undeclared exception!
      try { 
        oAuth20Service0.revokeTokenAsync((String) null);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Cannot encode null object
         //
         verifyException(""com.github.scribejava.core.utils.Preconditions"", e);
      }
  }"
59,"    public void revokeToken(String tokenToRevoke) throws IOException, InterruptedException, ExecutionException {
        revokeToken(tokenToRevoke, (TokenTypeHint) null);
    }","  public void test53()  throws Throwable  {
      ClientAuthentication clientAuthentication0 = mock(ClientAuthentication.class, new ViolatedAssumptionAnswer());
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn(clientAuthentication0).when(defaultApi20_0).getClientAuthentication();
      doReturn((String) null).when(defaultApi20_0).getRevokeTokenEndpoint();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(110);
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, ""com.fasterxml.jackson.databind.ser.std.NumberSerializers$ShortSerializer"", ""com.fasterxml.jackson.databind.ser.std.NumberSerializers$ShortSerializer"", ""com.fasterxml.jackson.databind.ser.std.NumberSerializers$ShortSerializer"", ""com.fasterxml.jackson.databind.ser.std.NumberSerializers$ShortSerializer"", ""com.fasterxml.jackson.databind.ser.std.NumberSerializers$ShortSerializer"", byteArrayOutputStream0, """", jDKHttpClientConfig0, (HttpClient) null);
      TokenTypeHint tokenTypeHint0 = TokenTypeHint.REFRESH_TOKEN;
      // Undeclared exception!
      try { 
        oAuth20Service0.revokeToken(""code_verifier"", tokenTypeHint0);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // Malformed URL
         //
         verifyException(""com.github.scribejava.core.model.OAuthRequest"", e);
      }
  }"
60,"    public void revokeToken(String tokenToRevoke) throws IOException, InterruptedException, ExecutionException {
        revokeToken(tokenToRevoke, (TokenTypeHint) null);
    }","  public void test54()  throws Throwable  {
      ClientAuthentication clientAuthentication0 = mock(ClientAuthentication.class, new ViolatedAssumptionAnswer());
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn(clientAuthentication0).when(defaultApi20_0).getClientAuthentication();
      doReturn(""{F?GH\"":'G<8?"").when(defaultApi20_0).getRevokeTokenEndpoint();
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient();
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, """", """", """", ""temporarily_unavailable"", ""=F5TyJ"", (OutputStream) null, ""OtherScaar"", jDKHttpClientConfig0, jDKHttpClient0);
      TokenTypeHint tokenTypeHint0 = TokenTypeHint.REFRESH_TOKEN;
      try { 
        oAuth20Service0.revokeToken(""=F5TyJ"", tokenTypeHint0);
        fail(""Expecting exception: MalformedURLException"");
      } catch(MalformedURLException e) {
         //
         // no protocol: {F?GH\"":'G<8?
         //
         verifyException(""java.net.URL"", e);
      }
  }"
61,"    public void revokeToken(String tokenToRevoke) throws IOException, InterruptedException, ExecutionException {
        revokeToken(tokenToRevoke, (TokenTypeHint) null);
    }","  public void test55()  throws Throwable  {
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn((ClientAuthentication) null).when(defaultApi20_0).getClientAuthentication();
      doReturn((String) null).when(defaultApi20_0).getRevokeTokenEndpoint();
      MockFile mockFile0 = new MockFile(""OX@IT#]l>w"");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient();
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, ""cpgFG{^q0X_0[hB"", "" request with body params [%s], query string params [%s]"", """", """", ""cpgFG{^q0X_0[hB"", mockPrintStream0, ""OX@IT#]l>w"", jDKHttpClientConfig0, jDKHttpClient0);
      TokenTypeHint tokenTypeHint0 = TokenTypeHint.ACCESS_TOKEN;
      // Undeclared exception!
      try { 
        oAuth20Service0.revokeToken("" request with body params [%s], query string params [%s]"", tokenTypeHint0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""com.github.scribejava.core.oauth.OAuth20Service"", e);
      }
  }"
62,"    public void revokeToken(String tokenToRevoke) throws IOException, InterruptedException, ExecutionException {
        revokeToken(tokenToRevoke, (TokenTypeHint) null);
    }","  public void test56()  throws Throwable  {
      ClientAuthentication clientAuthentication0 = mock(ClientAuthentication.class, new ViolatedAssumptionAnswer());
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn(clientAuthentication0).when(defaultApi20_0).getClientAuthentication();
      doReturn((String) null).when(defaultApi20_0).getRevokeTokenEndpoint();
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, ""k?VKA'"", ""_>"", ""k?VKA'"", ""k?VKA'"", ""3lp"", (OutputStream) null, ""_>"", jDKHttpClientConfig0, jDKHttpClient0);
      TokenTypeHint tokenTypeHint0 = TokenTypeHint.ACCESS_TOKEN;
      // Undeclared exception!
      try { 
        oAuth20Service0.revokeToken(""got AccessTokenDeviceAuthorizationGrant response"", tokenTypeHint0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Cannot append to null URL
         //
         verifyException(""com.github.scribejava.core.utils.Preconditions"", e);
      }
  }"
63,"    public void revokeToken(String tokenToRevoke) throws IOException, InterruptedException, ExecutionException {
        revokeToken(tokenToRevoke, (TokenTypeHint) null);
    }","  public void test57()  throws Throwable  {
      ClientAuthentication clientAuthentication0 = mock(ClientAuthentication.class, new ViolatedAssumptionAnswer());
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn(clientAuthentication0).when(defaultApi20_0).getClientAuthentication();
      doReturn((String) null).when(defaultApi20_0).getRevokeTokenEndpoint();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(""Not a subtype"");
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, ""u%6-Wxx-E 6"", ""u%6-Wxx-E 6"", ""password"", ""Not a subtype"", ""oYV;MXiJ"", mockFileOutputStream0, ""password"", jDKHttpClientConfig0, (HttpClient) null);
      TokenTypeHint tokenTypeHint0 = TokenTypeHint.ACCESS_TOKEN;
      // Undeclared exception!
      try { 
        oAuth20Service0.revokeToken(""fXOV!wjz<5]\"""", (OAuthAsyncRequestCallback<Void>) null, tokenTypeHint0);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // Malformed URL
         //
         verifyException(""com.github.scribejava.core.model.OAuthRequest"", e);
      }
  }"
64,"    public void revokeToken(String tokenToRevoke) throws IOException, InterruptedException, ExecutionException {
        revokeToken(tokenToRevoke, (TokenTypeHint) null);
    }","  public void test58()  throws Throwable  {
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn((ClientAuthentication) null).when(defaultApi20_0).getClientAuthentication();
      doReturn((String) null).when(defaultApi20_0).getRevokeTokenEndpoint();
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient();
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, ""grant_type"", ""h}4g,CP"", ""h}4g,CP"", ""grant_type"", ""H0!_B%jy"", (OutputStream) null, ""Problem accessing property '"", jDKHttpClientConfig0, jDKHttpClient0);
      TokenTypeHint tokenTypeHint0 = TokenTypeHint.REFRESH_TOKEN;
      // Undeclared exception!
      try { 
        oAuth20Service0.revokeToken("""", (OAuthAsyncRequestCallback<Void>) null, tokenTypeHint0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""com.github.scribejava.core.oauth.OAuth20Service"", e);
      }
  }"
65,"    public void revokeToken(String tokenToRevoke) throws IOException, InterruptedException, ExecutionException {
        revokeToken(tokenToRevoke, (TokenTypeHint) null);
    }","  public void test59()  throws Throwable  {
      ClientAuthentication clientAuthentication0 = mock(ClientAuthentication.class, new ViolatedAssumptionAnswer());
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn(clientAuthentication0).when(defaultApi20_0).getClientAuthentication();
      doReturn((String) null).when(defaultApi20_0).getRevokeTokenEndpoint();
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, """", ""B<"", ""E?~Y0d~"", """", ""cVo"", (OutputStream) null, """", jDKHttpClientConfig0, jDKHttpClient0);
      OAuthAsyncRequestCallback<Void> oAuthAsyncRequestCallback0 = (OAuthAsyncRequestCallback<Void>) mock(OAuthAsyncRequestCallback.class, new ViolatedAssumptionAnswer());
      TokenTypeHint tokenTypeHint0 = TokenTypeHint.REFRESH_TOKEN;
      // Undeclared exception!
      try { 
        oAuth20Service0.revokeToken(""DeserializationProblemHandler.handleInstantiationProblem() for type %s returned value of type %s"", oAuthAsyncRequestCallback0, tokenTypeHint0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Cannot append to null URL
         //
         verifyException(""com.github.scribejava.core.utils.Preconditions"", e);
      }
  }"
66,"    public void revokeToken(String tokenToRevoke) throws IOException, InterruptedException, ExecutionException {
        revokeToken(tokenToRevoke, (TokenTypeHint) null);
    }","  public void test60()  throws Throwable  {
      ClientAuthentication clientAuthentication0 = mock(ClientAuthentication.class, new ViolatedAssumptionAnswer());
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn(clientAuthentication0).when(defaultApi20_0).getClientAuthentication();
      doReturn("""").when(defaultApi20_0).getRevokeTokenEndpoint();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(""Not a subtype"");
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, ""[%6{Wxx#E 6"", ""[%6{Wxx#E 6"", ""password"", ""Not a subtype"", ""oYV;MXiJ"", mockFileOutputStream0, ""password"", jDKHttpClientConfig0, (HttpClient) null);
      // Undeclared exception!
      try { 
        oAuth20Service0.revokeToken(""oYV;MXiJ"", (OAuthAsyncRequestCallback<Void>) null);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // Malformed URL
         //
         verifyException(""com.github.scribejava.core.model.OAuthRequest"", e);
      }
  }"
67,"    public void revokeToken(String tokenToRevoke) throws IOException, InterruptedException, ExecutionException {
        revokeToken(tokenToRevoke, (TokenTypeHint) null);
    }","  public void test61()  throws Throwable  {
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn((ClientAuthentication) null).when(defaultApi20_0).getClientAuthentication();
      doReturn((String) null).when(defaultApi20_0).getRevokeTokenEndpoint();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(""Not a subtype"");
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, ""[%6{Wxx#E 6"", ""[%6{Wxx#E 6"", ""password"", ""Not a subtype"", ""oYV;MXiJ"", mockFileOutputStream0, ""password"", jDKHttpClientConfig0, (HttpClient) null);
      // Undeclared exception!
      try { 
        oAuth20Service0.revokeToken(""oYV;MXiJ"", (OAuthAsyncRequestCallback<Void>) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""com.github.scribejava.core.oauth.OAuth20Service"", e);
      }
  }"
68,"    public void revokeToken(String tokenToRevoke) throws IOException, InterruptedException, ExecutionException {
        revokeToken(tokenToRevoke, (TokenTypeHint) null);
    }","  public void test62()  throws Throwable  {
      ClientAuthentication clientAuthentication0 = mock(ClientAuthentication.class, new ViolatedAssumptionAnswer());
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn(clientAuthentication0).when(defaultApi20_0).getClientAuthentication();
      doReturn((String) null).when(defaultApi20_0).getRevokeTokenEndpoint();
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, ""USE_BASE_TYPE_AS_DEFAULT_IMPL"", ""USE_BASE_TYPE_AS_DEFAULT_IMPL"", ""v'?9];m;fSQTcg3.%8"", (String) null, ""3'FI<\""y7lH8?!kyEmX>"", (OutputStream) null, ""v'?9];m;fSQTcg3.%8"", jDKHttpClientConfig0, jDKHttpClient0);
      // Undeclared exception!
      try { 
        oAuth20Service0.revokeToken(""send request for access token synchronously to %s"", (OAuthAsyncRequestCallback<Void>) null);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Cannot append to null URL
         //
         verifyException(""com.github.scribejava.core.utils.Preconditions"", e);
      }
  }"
69,"    public void revokeToken(String tokenToRevoke) throws IOException, InterruptedException, ExecutionException {
        revokeToken(tokenToRevoke, (TokenTypeHint) null);
    }","  public void test63()  throws Throwable  {
      ClientAuthentication clientAuthentication0 = mock(ClientAuthentication.class, new ViolatedAssumptionAnswer());
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn(clientAuthentication0).when(defaultApi20_0).getClientAuthentication();
      doReturn(""received response for access token"").when(defaultApi20_0).getRevokeTokenEndpoint();
      MockPrintStream mockPrintStream0 = new MockPrintStream(""C(h]K1"");
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, ""_S(@XWs5za"", ""_S(@XWs5za"", ""_S(@XWs5za"", ""|U#@GPUa-a31IDI_U"", ""C(h]K1"", mockPrintStream0, ""', 'intervalSeconds'='"", (HttpClientConfig) null, (HttpClient) null);
      // Undeclared exception!
      try { 
        oAuth20Service0.revokeToken(""com.github.scribejava.core.oauth.OAuth20Service$4"");
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // Malformed URL
         //
         verifyException(""com.github.scribejava.core.model.OAuthRequest"", e);
      }
  }"
70,"    public void revokeToken(String tokenToRevoke) throws IOException, InterruptedException, ExecutionException {
        revokeToken(tokenToRevoke, (TokenTypeHint) null);
    }","  public void test64()  throws Throwable  {
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn((ClientAuthentication) null).when(defaultApi20_0).getClientAuthentication();
      doReturn((String) null).when(defaultApi20_0).getRevokeTokenEndpoint();
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, ""g<\""c@_"", ""client_id"", ""g<\""c@_"", ""g<\""c@_"", ""AUTO_DETECT_CREATORS"", (OutputStream) null, ""FLUSH_AFTER_WRITE_VALUE"", jDKHttpClientConfig0, jDKHttpClient0);
      // Undeclared exception!
      try { 
        oAuth20Service0.revokeToken(""Too few bytes available: missing "");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""com.github.scribejava.core.oauth.OAuth20Service"", e);
      }
  }"
71,"    public void revokeToken(String tokenToRevoke) throws IOException, InterruptedException, ExecutionException {
        revokeToken(tokenToRevoke, (TokenTypeHint) null);
    }","  public void test65()  throws Throwable  {
      ClientAuthentication clientAuthentication0 = mock(ClientAuthentication.class, new ViolatedAssumptionAnswer());
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn(clientAuthentication0).when(defaultApi20_0).getClientAuthentication();
      doReturn((String) null).when(defaultApi20_0).getRevokeTokenEndpoint();
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient();
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, ""+j4"", ""1us.?*IS}NnPcf`m"", "",valueFilter="", ""8#dn.'"", """", (OutputStream) null, ""r"", jDKHttpClientConfig0, jDKHttpClient0);
      // Undeclared exception!
      try { 
        oAuth20Service0.revokeToken(""1us.?*IS}NnPcf`m"");
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Cannot append to null URL
         //
         verifyException(""com.github.scribejava.core.utils.Preconditions"", e);
      }
  }"
72,"    public Future<OAuth2AccessToken> refreshAccessTokenAsync(String refreshToken) {
        return refreshAccessToken(refreshToken, (OAuthAsyncRequestCallback<OAuth2AccessToken>) null);
    }","  public void test66()  throws Throwable  {
      Verb verb0 = Verb.PUT;
      ClientAuthentication clientAuthentication0 = mock(ClientAuthentication.class, new ViolatedAssumptionAnswer());
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn(verb0).when(defaultApi20_0).getAccessTokenVerb();
      doReturn(clientAuthentication0).when(defaultApi20_0).getClientAuthentication();
      doReturn("""").when(defaultApi20_0).getRefreshTokenEndpoint();
      MockFile mockFile0 = new MockFile(""Oj%a|\""l'6r4gc)#L"");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, ""Oj%a|\""l'6r4gc)#L"", ""com.fasterxml.jackson.annotation.JsonFormat$Features"", ""+`ES<Nnr"", ""Oj%a|\""l'6r4gc)#L"", ""<"", mockPrintStream0, ""9'jl,GVl{3Qe}qA"", jDKHttpClientConfig0, jDKHttpClient0);
      // Undeclared exception!
      try { 
        oAuth20Service0.refreshAccessTokenAsync(""Oj%a|\""l'6r4gc)#L"", ""+`ES<Nnr"");
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // Malformed URL
         //
         verifyException(""com.github.scribejava.core.model.OAuthRequest"", e);
      }
  }"
73,"    public Future<OAuth2AccessToken> refreshAccessTokenAsync(String refreshToken) {
        return refreshAccessToken(refreshToken, (OAuthAsyncRequestCallback<OAuth2AccessToken>) null);
    }","  public void test67()  throws Throwable  {
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn((Verb) null).when(defaultApi20_0).getAccessTokenVerb();
      doReturn((ClientAuthentication) null).when(defaultApi20_0).getClientAuthentication();
      doReturn((String) null).when(defaultApi20_0).getRefreshTokenEndpoint();
      MockFile mockFile0 = new MockFile(""Oj%a|\""l'6r4gc)#L"");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, ""Oj%a|\""l'6r4gc)#L"", ""com.fasterxml.jackson.annotation.JsonFormat$Features"", ""+`ES<Nnr"", ""Oj%a|\""l'6r4gc)#L"", ""<"", mockPrintStream0, ""9'jl,GVl{3Qe}qA"", jDKHttpClientConfig0, jDKHttpClient0);
      // Undeclared exception!
      try { 
        oAuth20Service0.refreshAccessTokenAsync(""Oj%a|\""l'6r4gc)#L"", ""+`ES<Nnr"");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""com.github.scribejava.core.oauth.OAuth20Service"", e);
      }
  }"
74,"    public Future<OAuth2AccessToken> refreshAccessTokenAsync(String refreshToken) {
        return refreshAccessToken(refreshToken, (OAuthAsyncRequestCallback<OAuth2AccessToken>) null);
    }","  public void test68()  throws Throwable  {
      Verb verb0 = Verb.TRACE;
      ClientAuthentication clientAuthentication0 = mock(ClientAuthentication.class, new ViolatedAssumptionAnswer());
      String string0 = """";
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn(verb0).when(defaultApi20_0).getAccessTokenVerb();
      doReturn(clientAuthentication0).when(defaultApi20_0).getClientAuthentication();
      doReturn("""").when(defaultApi20_0).getRefreshTokenEndpoint();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, """", """", string0, string0, ""com.fasterxml.jackson.databind.BeanDescription"", pipedOutputStream0, ""com.fasterxml.jackson.databind.BeanDescription"", jDKHttpClientConfig0, jDKHttpClient0);
      // Undeclared exception!
      try { 
        oAuth20Service0.refreshAccessTokenAsync(""com.fasterxml.jackson.databind.BeanDescription"");
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // Malformed URL
         //
         verifyException(""com.github.scribejava.core.model.OAuthRequest"", e);
      }
  }"
75,"    public Future<OAuth2AccessToken> refreshAccessTokenAsync(String refreshToken) {
        return refreshAccessToken(refreshToken, (OAuthAsyncRequestCallback<OAuth2AccessToken>) null);
    }","  public void test69()  throws Throwable  {
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn((Verb) null).when(defaultApi20_0).getAccessTokenVerb();
      doReturn((ClientAuthentication) null).when(defaultApi20_0).getClientAuthentication();
      doReturn((String) null).when(defaultApi20_0).getRefreshTokenEndpoint();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, """", """", ""``v9O[Udv|/)|"", ""``v9O[Udv|/)|"", ""com.fasterxml.jackson.databind.BeanDescription"", pipedOutputStream0, ""com.fasterxml.jackson.databind.BeanDescription"", jDKHttpClientConfig0, jDKHttpClient0);
      // Undeclared exception!
      try { 
        oAuth20Service0.refreshAccessTokenAsync(""com.fasterxml.jackson.databind.BeanDescription"");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""com.github.scribejava.core.oauth.OAuth20Service"", e);
      }
  }"
76,"    public Future<OAuth2AccessToken> refreshAccessTokenAsync(String refreshToken) {
        return refreshAccessToken(refreshToken, (OAuthAsyncRequestCallback<OAuth2AccessToken>) null);
    }","  public void test70()  throws Throwable  {
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      MockPrintStream mockPrintStream0 = new MockPrintStream(""C(h]K1"");
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, ""_S(@XWs5za"", ""_S(@XWs5za"", ""_S(@XWs5za"", ""|U#@GPUa-a31IDI_U"", ""C(h]K1"", mockPrintStream0, ""', 'intervalSeconds'='"", (HttpClientConfig) null, (HttpClient) null);
      // Undeclared exception!
      try { 
        oAuth20Service0.refreshAccessTokenAsync((String) null);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // The refreshToken cannot be null or empty
         //
         verifyException(""com.github.scribejava.core.oauth.OAuth20Service"", e);
      }
  }"
77,"    public OAuth2AccessToken refreshAccessToken(String refreshToken)
            throws IOException, InterruptedException, ExecutionException {
        return refreshAccessToken(refreshToken, (String) null);
    }","  public void test71()  throws Throwable  {
      Verb verb0 = Verb.PATCH;
      ClientAuthentication clientAuthentication0 = mock(ClientAuthentication.class, new ViolatedAssumptionAnswer());
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn(verb0).when(defaultApi20_0).getAccessTokenVerb();
      doReturn(clientAuthentication0).when(defaultApi20_0).getClientAuthentication();
      doReturn(""Crs"").when(defaultApi20_0).getRefreshTokenEndpoint();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(""CAF]oM"");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient();
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, ""com.github.scribejava.core.oauth.OAuth20Service$1"", ""99q5QCDs"", (String) null, ""com.github.scribejava.core.oauth.OAuth20Service$1"", (String) null, mockPrintStream0, ""CAF]oM"", jDKHttpClientConfig0, jDKHttpClient0);
      OAuthAsyncRequestCallback<OAuth2AccessToken> oAuthAsyncRequestCallback0 = (OAuthAsyncRequestCallback<OAuth2AccessToken>) mock(OAuthAsyncRequestCallback.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        oAuth20Service0.refreshAccessToken(""p"", ""6zEJF1=,&L<6(<~@"", oAuthAsyncRequestCallback0);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // Malformed URL
         //
         verifyException(""com.github.scribejava.core.model.OAuthRequest"", e);
      }
  }"
78,"    public OAuth2AccessToken refreshAccessToken(String refreshToken)
            throws IOException, InterruptedException, ExecutionException {
        return refreshAccessToken(refreshToken, (String) null);
    }","  public void test72()  throws Throwable  {
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn((Verb) null).when(defaultApi20_0).getAccessTokenVerb();
      doReturn((ClientAuthentication) null).when(defaultApi20_0).getClientAuthentication();
      doReturn((String) null).when(defaultApi20_0).getRefreshTokenEndpoint();
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, ""USE_BASE_TYPE_AS_DEFAULT_IMPL"", ""USE_BASE_TYPE_AS_DEFAULT_IMPL"", ""v'?9];m;fSQTcg3.%8"", (String) null, ""3'FI<\""y7lH8?!kyEmX>"", (OutputStream) null, ""v'?9];m;fSQTcg3.%8"", jDKHttpClientConfig0, jDKHttpClient0);
      // Undeclared exception!
      try { 
        oAuth20Service0.refreshAccessToken(""3'FI<\""y7lH8?!kyEmX>"", ""9UGx4"", (OAuthAsyncRequestCallback<OAuth2AccessToken>) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""com.github.scribejava.core.oauth.OAuth20Service"", e);
      }
  }"
79,"    public OAuth2AccessToken refreshAccessToken(String refreshToken)
            throws IOException, InterruptedException, ExecutionException {
        return refreshAccessToken(refreshToken, (String) null);
    }","  public void test73()  throws Throwable  {
      Verb verb0 = Verb.TRACE;
      ClientAuthentication clientAuthentication0 = mock(ClientAuthentication.class, new ViolatedAssumptionAnswer());
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn(verb0).when(defaultApi20_0).getAccessTokenVerb();
      doReturn(clientAuthentication0).when(defaultApi20_0).getClientAuthentication();
      doReturn((String) null).when(defaultApi20_0).getRefreshTokenEndpoint();
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, """", ""B<"", ""E?~Y0d~"", """", ""E?~Y0d~"", (OutputStream) null, """", jDKHttpClientConfig0, jDKHttpClient0);
      OAuthAsyncRequestCallback<OAuth2AccessToken> oAuthAsyncRequestCallback0 = (OAuthAsyncRequestCallback<OAuth2AccessToken>) mock(OAuthAsyncRequestCallback.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        oAuth20Service0.refreshAccessToken(""Device Authorization Codes"", ""GFW>Cg2IIDJX[u"", oAuthAsyncRequestCallback0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Cannot append to null URL
         //
         verifyException(""com.github.scribejava.core.utils.Preconditions"", e);
      }
  }"
80,"    public OAuth2AccessToken refreshAccessToken(String refreshToken)
            throws IOException, InterruptedException, ExecutionException {
        return refreshAccessToken(refreshToken, (String) null);
    }","  public void test74()  throws Throwable  {
      Verb verb0 = Verb.DELETE;
      ClientAuthentication clientAuthentication0 = mock(ClientAuthentication.class, new ViolatedAssumptionAnswer());
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn(verb0).when(defaultApi20_0).getAccessTokenVerb();
      doReturn(clientAuthentication0).when(defaultApi20_0).getClientAuthentication();
      doReturn(""device_code"").when(defaultApi20_0).getRefreshTokenEndpoint();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("" does not support schema of type '"", false);
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient();
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, ""device_code"", "" does not support schema of type '"", ""device_code"", "" does not support schema of type '"", "" does not support schema of type '"", mockFileOutputStream0, ""device_code"", jDKHttpClientConfig0, jDKHttpClient0);
      // Undeclared exception!
      try { 
        oAuth20Service0.refreshAccessToken("" does not support schema of type '"", ""device_code"");
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // Malformed URL
         //
         verifyException(""com.github.scribejava.core.model.OAuthRequest"", e);
      }
  }"
81,"    public OAuth2AccessToken refreshAccessToken(String refreshToken)
            throws IOException, InterruptedException, ExecutionException {
        return refreshAccessToken(refreshToken, (String) null);
    }","  public void test75()  throws Throwable  {
      Verb verb0 = Verb.OPTIONS;
      ClientAuthentication clientAuthentication0 = mock(ClientAuthentication.class, new ViolatedAssumptionAnswer());
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn(verb0).when(defaultApi20_0).getAccessTokenVerb();
      doReturn(clientAuthentication0).when(defaultApi20_0).getClientAuthentication();
      doReturn(""access token"").when(defaultApi20_0).getRefreshTokenEndpoint();
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, ""k?VKA'"", ""_>"", ""k?VKA'"", ""k?VKA'"", ""3lp"", (OutputStream) null, ""_>"", jDKHttpClientConfig0, jDKHttpClient0);
      try { 
        oAuth20Service0.refreshAccessToken(""com.github.scribejava.core.oauth.OAuth20Service"", ""1$G4cAM`Y}l\""(3=wE"");
        fail(""Expecting exception: MalformedURLException"");
      } catch(MalformedURLException e) {
         //
         // no protocol: access token?scope=1%24G4cAM%60Y%7Dl%22%283%3DwE&refresh_token=com.github.scribejava.core.oauth.OAuth20Service&grant_type=refresh_token
         //
         verifyException(""java.net.URL"", e);
      }
  }"
82,"    public OAuth2AccessToken refreshAccessToken(String refreshToken)
            throws IOException, InterruptedException, ExecutionException {
        return refreshAccessToken(refreshToken, (String) null);
    }","  public void test76()  throws Throwable  {
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn((Verb) null).when(defaultApi20_0).getAccessTokenVerb();
      doReturn((ClientAuthentication) null).when(defaultApi20_0).getClientAuthentication();
      doReturn((String) null).when(defaultApi20_0).getRefreshTokenEndpoint();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("" does not support schema of type '"", true);
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient();
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, ""Unexpected token '"", "" does not support schema of type '"", ""com.fasterxml.jackson.databind.ser.std.StdSerializer"", "" does not support schema of type '"", "" does not support schema of type '"", mockFileOutputStream0, ""com.fasterxml.jackson.databind.ser.std.StdSerializer"", jDKHttpClientConfig0, jDKHttpClient0);
      // Undeclared exception!
      try { 
        oAuth20Service0.refreshAccessToken("" does not support schema of type '"", ""Unexpected token '"");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""com.github.scribejava.core.oauth.OAuth20Service"", e);
      }
  }"
83,"    public OAuth2AccessToken refreshAccessToken(String refreshToken)
            throws IOException, InterruptedException, ExecutionException {
        return refreshAccessToken(refreshToken, (String) null);
    }","  public void test77()  throws Throwable  {
      Verb verb0 = Verb.POST;
      ClientAuthentication clientAuthentication0 = mock(ClientAuthentication.class, new ViolatedAssumptionAnswer());
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn(verb0).when(defaultApi20_0).getAccessTokenVerb();
      doReturn(clientAuthentication0).when(defaultApi20_0).getClientAuthentication();
      doReturn("""").when(defaultApi20_0).getRefreshTokenEndpoint();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, ""gTDtni%0pg)5 r+0r8G"", ""\""ED|lEBtz/ZI[a"", ""gTDtni%0pg)5 r+0r8G"", (String) null, (String) null, pipedOutputStream0, (String) null, jDKHttpClientConfig0, (HttpClient) null);
      OAuthAsyncRequestCallback<OAuth2AccessToken> oAuthAsyncRequestCallback0 = (OAuthAsyncRequestCallback<OAuth2AccessToken>) mock(OAuthAsyncRequestCallback.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        oAuth20Service0.refreshAccessToken(""<)-Y|6Y}_&Y"", oAuthAsyncRequestCallback0);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // Malformed URL
         //
         verifyException(""com.github.scribejava.core.model.OAuthRequest"", e);
      }
  }"
84,"    public OAuth2AccessToken refreshAccessToken(String refreshToken)
            throws IOException, InterruptedException, ExecutionException {
        return refreshAccessToken(refreshToken, (String) null);
    }","  public void test78()  throws Throwable  {
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn((Verb) null).when(defaultApi20_0).getAccessTokenVerb();
      doReturn((ClientAuthentication) null).when(defaultApi20_0).getClientAuthentication();
      doReturn((String) null).when(defaultApi20_0).getRefreshTokenEndpoint();
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient();
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, ""E5]_"", ""1us.?*IS}NnPcf`m"", "",valueFilter="", ""8#dn.'"", """", (OutputStream) null, ""r"", jDKHttpClientConfig0, jDKHttpClient0);
      OAuthAsyncRequestCallback<OAuth2AccessToken> oAuthAsyncRequestCallback0 = (OAuthAsyncRequestCallback<OAuth2AccessToken>) mock(OAuthAsyncRequestCallback.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        oAuth20Service0.refreshAccessToken("",valueFilter="", oAuthAsyncRequestCallback0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""com.github.scribejava.core.oauth.OAuth20Service"", e);
      }
  }"
85,"    public OAuth2AccessToken refreshAccessToken(String refreshToken)
            throws IOException, InterruptedException, ExecutionException {
        return refreshAccessToken(refreshToken, (String) null);
    }","  public void test79()  throws Throwable  {
      Verb verb0 = Verb.PATCH;
      ClientAuthentication clientAuthentication0 = mock(ClientAuthentication.class, new ViolatedAssumptionAnswer());
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn((Verb) null).when(defaultApi20_0).getAccessTokenVerb();
      doReturn((ClientAuthentication) null).when(defaultApi20_0).getClientAuthentication();
      doReturn((String) null).when(defaultApi20_0).getRefreshTokenEndpoint();
      MockPrintStream mockPrintStream0 = new MockPrintStream("":"");
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient();
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, "":"", "":"", "":"", "":"", "":"", mockPrintStream0, "":"", jDKHttpClientConfig0, jDKHttpClient0);
      // Undeclared exception!
      try { 
        oAuth20Service0.refreshAccessToken("":"");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""com.github.scribejava.core.oauth.OAuth20Service"", e);
      }
  }"
86,"    public OAuth2AccessToken refreshAccessToken(String refreshToken)
            throws IOException, InterruptedException, ExecutionException {
        return refreshAccessToken(refreshToken, (String) null);
    }","  public void test80()  throws Throwable  {
      Verb verb0 = Verb.POST;
      ClientAuthentication clientAuthentication0 = mock(ClientAuthentication.class, new ViolatedAssumptionAnswer());
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn(verb0).when(defaultApi20_0).getAccessTokenVerb();
      doReturn(clientAuthentication0).when(defaultApi20_0).getClientAuthentication();
      doReturn(""5e>+>\""/T=k3G"").when(defaultApi20_0).getRefreshTokenEndpoint();
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient();
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, ""g{X6>J@fSal5["", ""g{X6>J@fSal5["", ""g{X6>J@fSal5["", (String) null, ""username"", (OutputStream) null, ""username"", jDKHttpClientConfig0, jDKHttpClient0);
      try { 
        oAuth20Service0.refreshAccessToken(""got DeviceAuthorizationCodes response"");
        fail(""Expecting exception: MalformedURLException"");
      } catch(MalformedURLException e) {
         //
         // no protocol: 5e>+>\""/T=k3G
         //
         verifyException(""java.net.URL"", e);
      }
  }"
87,"    public OAuth2AccessToken refreshAccessToken(String refreshToken)
            throws IOException, InterruptedException, ExecutionException {
        return refreshAccessToken(refreshToken, (String) null);
    }","  public void test81()  throws Throwable  {
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(5104);
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayOutputStream0);
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, ""com.fasterxml.jackson.databind.deser.std.StdKeyDeserializer$EnumKD"", ""com.fasterxml.jackson.databind.deser.std.StdKeyDeserializer$EnumKD"", ""{9g]kl(S"", ""5t0(`kh<!V"", ""B|'2"", dataOutputStream0, ""5t0(`kh<!V"", jDKHttpClientConfig0, jDKHttpClient0);
      // Undeclared exception!
      try { 
        oAuth20Service0.refreshAccessToken("""");
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // The refreshToken cannot be null or empty
         //
         verifyException(""com.github.scribejava.core.oauth.OAuth20Service"", e);
      }
  }"
88,"    public OAuth2AccessToken pollAccessTokenDeviceAuthorizationGrant(DeviceAuthorization deviceAuthorization)
            throws InterruptedException, ExecutionException, IOException {
        long intervalMillis = deviceAuthorization.getIntervalSeconds() * 1000;
        while (true) {
            try {
                return getAccessTokenDeviceAuthorizationGrant(deviceAuthorization);
            } catch (OAuth2AccessTokenErrorResponse e) {
                if (e.getError() != OAuth2Error.AUTHORIZATION_PENDING) {
                    if (e.getError() == OAuth2Error.SLOW_DOWN) {
                        intervalMillis += 5000;
                    } else {
                        throw e;
                    }
                }
            }
            Thread.sleep(intervalMillis);
        }
    }","  public void test82()  throws Throwable  {
      Verb verb0 = Verb.HEAD;
      ClientAuthentication clientAuthentication0 = mock(ClientAuthentication.class, new ViolatedAssumptionAnswer());
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn(""access token"").when(defaultApi20_0).getAccessTokenEndpoint();
      doReturn(verb0).when(defaultApi20_0).getAccessTokenVerb();
      doReturn(clientAuthentication0).when(defaultApi20_0).getClientAuthentication();
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, ""k?VKA'"", ""_>"", ""k?VKA'"", ""k?VKA'"", ""3lp"", (OutputStream) null, ""_>"", jDKHttpClientConfig0, jDKHttpClient0);
      DeviceAuthorization deviceAuthorization0 = new DeviceAuthorization(""bvRWKX~?"", ""Strange Reference type "", ""com.github.scribejava.core.oauth.OAuth20Service$3"", (-3));
      try { 
        oAuth20Service0.pollAccessTokenDeviceAuthorizationGrant(deviceAuthorization0);
        fail(""Expecting exception: MalformedURLException"");
      } catch(MalformedURLException e) {
         //
         // no protocol: access token?grant_type=urn%3Aietf%3Aparams%3Aoauth%3Agrant-type%3Adevice_code&device_code=bvRWKX~%3F
         //
         verifyException(""java.net.URL"", e);
      }
  }"
89,"    public OAuth2AccessToken pollAccessTokenDeviceAuthorizationGrant(DeviceAuthorization deviceAuthorization)
            throws InterruptedException, ExecutionException, IOException {
        long intervalMillis = deviceAuthorization.getIntervalSeconds() * 1000;
        while (true) {
            try {
                return getAccessTokenDeviceAuthorizationGrant(deviceAuthorization);
            } catch (OAuth2AccessTokenErrorResponse e) {
                if (e.getError() != OAuth2Error.AUTHORIZATION_PENDING) {
                    if (e.getError() == OAuth2Error.SLOW_DOWN) {
                        intervalMillis += 5000;
                    } else {
                        throw e;
                    }
                }
            }
            Thread.sleep(intervalMillis);
        }
    }","  public void test83()  throws Throwable  {
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(defaultApi20_0).getAccessTokenEndpoint();
      doReturn((Verb) null).when(defaultApi20_0).getAccessTokenVerb();
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, """", ""B<"", ""E?~Y0d~"", """", ""cVo"", (OutputStream) null, """", jDKHttpClientConfig0, jDKHttpClient0);
      DeviceAuthorization deviceAuthorization0 = new DeviceAuthorization(""E?~Y0d~"", ""cVo"", ""B<"", 1000);
      // Undeclared exception!
      try { 
        oAuth20Service0.pollAccessTokenDeviceAuthorizationGrant(deviceAuthorization0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
90,"    public OAuth2AccessToken pollAccessTokenDeviceAuthorizationGrant(DeviceAuthorization deviceAuthorization)
            throws InterruptedException, ExecutionException, IOException {
        long intervalMillis = deviceAuthorization.getIntervalSeconds() * 1000;
        while (true) {
            try {
                return getAccessTokenDeviceAuthorizationGrant(deviceAuthorization);
            } catch (OAuth2AccessTokenErrorResponse e) {
                if (e.getError() != OAuth2Error.AUTHORIZATION_PENDING) {
                    if (e.getError() == OAuth2Error.SLOW_DOWN) {
                        intervalMillis += 5000;
                    } else {
                        throw e;
                    }
                }
            }
            Thread.sleep(intervalMillis);
        }
    }","  public void test84()  throws Throwable  {
      Verb verb0 = Verb.TRACE;
      ClientAuthentication clientAuthentication0 = mock(ClientAuthentication.class, new ViolatedAssumptionAnswer());
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(defaultApi20_0).getAccessTokenEndpoint();
      doReturn(verb0).when(defaultApi20_0).getAccessTokenVerb();
      doReturn(clientAuthentication0).when(defaultApi20_0).getClientAuthentication();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, ""gTDtni%0pg)5 r+0r8G"", ""\""ED|lEBtz/ZI[a"", ""gTDtni%0pg)5 r+0r8G"", (String) null, (String) null, pipedOutputStream0, (String) null, jDKHttpClientConfig0, (HttpClient) null);
      DeviceAuthorization deviceAuthorization0 = new DeviceAuthorization(""scope"", ""0pp"", ""com.fasterxml.jackson.databind.ser.std.NumberSerializers$ShortSerializer"", (-4));
      // Undeclared exception!
      try { 
        oAuth20Service0.pollAccessTokenDeviceAuthorizationGrant(deviceAuthorization0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Cannot append to null URL
         //
         verifyException(""com.github.scribejava.core.utils.Preconditions"", e);
      }
  }"
91,"    protected void logRequestWithParams(String requestDescription, OAuthRequest request) {
        if (isDebug()) {
            log(""created "" + requestDescription + "" request with body params [%s], query string params [%s]"",
                    request.getBodyParams().asFormUrlEncodedString(),
                    request.getQueryStringParams().asFormUrlEncodedString());
        }
    }","  public void test85()  throws Throwable  {
      Verb verb0 = Verb.OPTIONS;
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      MockFile mockFile0 = new MockFile(""accrss token prssword grant"", """");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuthRequest oAuthRequest0 = new OAuthRequest(verb0, """");
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, ""accrss token prssword grant"", ""accrss token prssword grant"", ""AnnotationIntrospector returned serializer definition of type "", ""AnnotationIntrospector returned serializer definition of type "", ""AnnotationIntrospector returned serializer definition of type "", mockPrintStream0, ""55R*7 c<w3h"", jDKHttpClientConfig0, jDKHttpClient0);
      // Undeclared exception!
      try { 
        oAuth20Service0.logRequestWithParams("""", oAuthRequest0);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // Malformed URL
         //
         verifyException(""com.github.scribejava.core.model.OAuthRequest"", e);
      }
  }"
92,"    protected void logRequestWithParams(String requestDescription, OAuthRequest request) {
        if (isDebug()) {
            log(""created "" + requestDescription + "" request with body params [%s], query string params [%s]"",
                    request.getBodyParams().asFormUrlEncodedString(),
                    request.getQueryStringParams().asFormUrlEncodedString());
        }
    }","  public void test86()  throws Throwable  {
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      MockFile mockFile0 = new MockFile(""9"", ""client_credentials"");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, ""client_credentials"", ""3dLSB?)R HImI%FzE"", ""3dLSB?)R HImI%FzE"", ""client_credentials"", ""9"", mockFileOutputStream0, ""9"", jDKHttpClientConfig0, jDKHttpClient0);
      // Undeclared exception!
      try { 
        oAuth20Service0.logRequestWithParams(""$uc8dej/J@"", (OAuthRequest) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""com.github.scribejava.core.oauth.OAuth20Service"", e);
      }
  }"
93,"    public Future<DeviceAuthorization> getDeviceAuthorizationCodesAsync() {
        return getDeviceAuthorizationCodesAsync(null);
    }","  public void test87()  throws Throwable  {
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuth20Service oAuth20Service0 = new OAuth20Service((DefaultApi20) null, ""S"", ""urn:ietf:params:oauth:grant-type:device_code"", ""urn:ietf:params:oauth:grant-type:device_code"", ""-.LgCC!"", ""urn:ietf:params:oauth:grant-type:device_code"", (OutputStream) null, ""-.LgCC!"", jDKHttpClientConfig0, jDKHttpClient0);
      // Undeclared exception!
      try { 
        oAuth20Service0.getDeviceAuthorizationCodesAsync(""<~HT^L9:m iP"");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""com.github.scribejava.core.oauth.OAuth20Service"", e);
      }
  }"
94,"    public Future<DeviceAuthorization> getDeviceAuthorizationCodesAsync() {
        return getDeviceAuthorizationCodesAsync(null);
    }","  public void test88()  throws Throwable  {
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(defaultApi20_0).getDeviceAuthorizationEndpoint();
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, ""^Se%XkUR\""?\"":"", ""yXmdvJqgI6\""!"", ""3'FI<\""y7lH8?!kyEmX>"", ""yXmdvJqgI6\""!"", ""{>xf8^"", (OutputStream) null, ""etQ+\""v{H!'L_]%erQ"", jDKHttpClientConfig0, jDKHttpClient0);
      // Undeclared exception!
      try { 
        oAuth20Service0.getDeviceAuthorizationCodesAsync("".HjT'du"");
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Cannot append to null URL
         //
         verifyException(""com.github.scribejava.core.utils.Preconditions"", e);
      }
  }"
95,"    public Future<DeviceAuthorization> getDeviceAuthorizationCodesAsync() {
        return getDeviceAuthorizationCodesAsync(null);
    }","  public void test89()  throws Throwable  {
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(defaultApi20_0).getDeviceAuthorizationEndpoint();
      MockPrintStream mockPrintStream0 = new MockPrintStream(""M&?tUYy 1B#\""?y3*m_"");
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, ""M&?tUYy 1B#\""?y3*m_"", ""M&?tUYy 1B#\""?y3*m_"", ""M&?tUYy 1B#\""?y3*m_"", ""M&?tUYy 1B#\""?y3*m_"", ""M&?tUYy 1B#\""?y3*m_"", mockPrintStream0, ""W:yIm<LGI^K2"", jDKHttpClientConfig0, (HttpClient) null);
      // Undeclared exception!
      try { 
        oAuth20Service0.getDeviceAuthorizationCodesAsync();
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // Malformed URL
         //
         verifyException(""com.github.scribejava.core.model.OAuthRequest"", e);
      }
  }"
96,"    public Future<DeviceAuthorization> getDeviceAuthorizationCodesAsync() {
        return getDeviceAuthorizationCodesAsync(null);
    }","  public void test90()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient();
      OAuth20Service oAuth20Service0 = new OAuth20Service((DefaultApi20) null, ""ZlYs"", ""ZlYs"", ""ju@1j4c->$3d'A"", """", ""ZlYs"", pipedOutputStream0, ""client_id"", jDKHttpClientConfig0, jDKHttpClient0);
      // Undeclared exception!
      try { 
        oAuth20Service0.getDeviceAuthorizationCodesAsync();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""com.github.scribejava.core.oauth.OAuth20Service"", e);
      }
  }"
97,"    public Future<DeviceAuthorization> getDeviceAuthorizationCodesAsync() {
        return getDeviceAuthorizationCodesAsync(null);
    }","  public void test91()  throws Throwable  {
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(defaultApi20_0).getDeviceAuthorizationEndpoint();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, """", ""AMb-owhSw!S"", ""'gegNV"", ""B<"", ""B<"", (OutputStream) null, ""code_challenge"", jDKHttpClientConfig0, jDKHttpClient0);
      // Undeclared exception!
      try { 
        oAuth20Service0.getDeviceAuthorizationCodesAsync();
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Cannot append to null URL
         //
         verifyException(""com.github.scribejava.core.utils.Preconditions"", e);
      }
  }"
98,"    public DeviceAuthorization getDeviceAuthorizationCodes()
            throws InterruptedException, ExecutionException, IOException {
        return getDeviceAuthorizationCodes((String) null);
    }","  public void test92()  throws Throwable  {
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(defaultApi20_0).getDeviceAuthorizationEndpoint();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(""!SOxzj/&-Zkl{^jyd"", false);
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, ""s"", ""s"", ""com.fasterxml.jackson.databind.ser.std.NumberSerializers$ShortSerializer"", ""nB(p5s.GbaCEPE"", ""client_id"", mockFileOutputStream0, ""WRAP_EXCEPTIONS"", jDKHttpClientConfig0, jDKHttpClient0);
      OAuthAsyncRequestCallback<DeviceAuthorization> oAuthAsyncRequestCallback0 = (OAuthAsyncRequestCallback<DeviceAuthorization>) mock(OAuthAsyncRequestCallback.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        oAuth20Service0.getDeviceAuthorizationCodes(""Numeric value (%s) out of range of Java byte"", oAuthAsyncRequestCallback0);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // Malformed URL
         //
         verifyException(""com.github.scribejava.core.model.OAuthRequest"", e);
      }
  }"
99,"    public DeviceAuthorization getDeviceAuthorizationCodes()
            throws InterruptedException, ExecutionException, IOException {
        return getDeviceAuthorizationCodes((String) null);
    }","  public void test93()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0);
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient();
      OAuth20Service oAuth20Service0 = new OAuth20Service((DefaultApi20) null, """", """", ""code"", """", ""[null]"", mockPrintStream0, """", (HttpClientConfig) null, jDKHttpClient0);
      OAuthAsyncRequestCallback<DeviceAuthorization> oAuthAsyncRequestCallback0 = (OAuthAsyncRequestCallback<DeviceAuthorization>) mock(OAuthAsyncRequestCallback.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        oAuth20Service0.getDeviceAuthorizationCodes((String) null, oAuthAsyncRequestCallback0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""com.github.scribejava.core.oauth.OAuth20Service"", e);
      }
  }"
100,"    public DeviceAuthorization getDeviceAuthorizationCodes()
            throws InterruptedException, ExecutionException, IOException {
        return getDeviceAuthorizationCodes((String) null);
    }","  public void test94()  throws Throwable  {
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(defaultApi20_0).getDeviceAuthorizationEndpoint();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(""&sAzZqIi`M"");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, ""Sr4~Be]LmB"", ""Sr4~Be]LmB"", ""Sr4~Be]LmB"", ""Sr4~Be]LmB"", ""Sr4~Be]LmB"", mockPrintStream0, ""Sr4~Be]LmB"", jDKHttpClientConfig0, jDKHttpClient0);
      // Undeclared exception!
      try { 
        oAuth20Service0.getDeviceAuthorizationCodes(""&sAzZqIi`M"");
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // Malformed URL
         //
         verifyException(""com.github.scribejava.core.model.OAuthRequest"", e);
      }
  }"
101,"    public Future<DeviceAuthorization> getDeviceAuthorizationCodesAsync() {
        return getDeviceAuthorizationCodesAsync(null);
    }","  public void test95()  throws Throwable  {
      ClientAuthentication clientAuthentication0 = mock(ClientAuthentication.class, new ViolatedAssumptionAnswer());
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient();
      OAuthAsyncRequestCallback<OAuth2AccessToken> oAuthAsyncRequestCallback0 = (OAuthAsyncRequestCallback<OAuth2AccessToken>) mock(OAuthAsyncRequestCallback.class, new ViolatedAssumptionAnswer());
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn(""8#dn.'"").when(defaultApi20_0).getAuthorizationUrl(anyString() , anyString() , anyString() , anyString() , anyString() , anyMap());
      doReturn(""com.fasterxml.jackson.core.json.ReaderBasedJsonParser"", (String) null).when(defaultApi20_0).getDeviceAuthorizationEndpoint();
      doReturn(""1us.?*IS}NnPcf`m"").when(defaultApi20_0).toString();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, """", ""E5]_"", """", """", """", (OutputStream) null, ""^FF% ^HH y=#0Gh`1Jz"", jDKHttpClientConfig0, jDKHttpClient0);
      oAuth20Service0.getAuthorizationUrl();
      OAuthAsyncRequestCallback<DeviceAuthorization> oAuthAsyncRequestCallback1 = (OAuthAsyncRequestCallback<DeviceAuthorization>) mock(OAuthAsyncRequestCallback.class, new ViolatedAssumptionAnswer());
      oAuth20Service0.getDeviceAuthorizationCodes(oAuthAsyncRequestCallback1);
      // Undeclared exception!
      try { 
        oAuth20Service0.getDeviceAuthorizationCodesAsync("") not numeric, cannot use numeric value accessors"");
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Cannot append to null URL
         //
         verifyException(""com.github.scribejava.core.utils.Preconditions"", e);
      }
  }"
102,"    public DeviceAuthorization getDeviceAuthorizationCodes()
            throws InterruptedException, ExecutionException, IOException {
        return getDeviceAuthorizationCodes((String) null);
    }","  public void test96()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("",!naDbO`F"");
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient();
      OAuth20Service oAuth20Service0 = new OAuth20Service((DefaultApi20) null, ""E}& ."", ""4C'nm*%!*:k_c'ppw"", ""E}& ."", ""4C'nm*%!*:k_c'ppw"", "",!naDbO`F"", mockPrintStream0, ""4C'nm*%!*:k_c'ppw"", jDKHttpClientConfig0, jDKHttpClient0);
      // Undeclared exception!
      try { 
        oAuth20Service0.getDeviceAuthorizationCodes(""com.github.scribejava.core.oauth.OAuth20Service$4"");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""com.github.scribejava.core.oauth.OAuth20Service"", e);
      }
  }"
103,"    public DeviceAuthorization getDeviceAuthorizationCodes()
            throws InterruptedException, ExecutionException, IOException {
        return getDeviceAuthorizationCodes((String) null);
    }","  public void test97()  throws Throwable  {
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(defaultApi20_0).getDeviceAuthorizationEndpoint();
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient();
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, ""grant_yp"", ""h}4g,CP"", ""h}4g,CP"", ""grant_yp"", ""H0!_B%jy"", (OutputStream) null, ""Problem accessing property `"", jDKHttpClientConfig0, jDKHttpClient0);
      // Undeclared exception!
      try { 
        oAuth20Service0.getDeviceAuthorizationCodes(""H0!_B%jy"");
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Cannot append to null URL
         //
         verifyException(""com.github.scribejava.core.utils.Preconditions"", e);
      }
  }"
104,"    public DeviceAuthorization getDeviceAuthorizationCodes()
            throws InterruptedException, ExecutionException, IOException {
        return getDeviceAuthorizationCodes((String) null);
    }","  public void test98()  throws Throwable  {
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(defaultApi20_0).getDeviceAuthorizationEndpoint();
      MockFile mockFile0 = new MockFile(""U7W&Meduxl"");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, ""h"", ""U7W&Meduxl"", ""h"", ""U7W&Meduxl"", ""U7W&Meduxl"", mockFileOutputStream0, ""revoke token"", jDKHttpClientConfig0, (HttpClient) null);
      OAuthAsyncRequestCallback<DeviceAuthorization> oAuthAsyncRequestCallback0 = (OAuthAsyncRequestCallback<DeviceAuthorization>) mock(OAuthAsyncRequestCallback.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        oAuth20Service0.getDeviceAuthorizationCodes(oAuthAsyncRequestCallback0);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // Malformed URL
         //
         verifyException(""com.github.scribejava.core.model.OAuthRequest"", e);
      }
  }"
105,"    public DeviceAuthorization getDeviceAuthorizationCodes()
            throws InterruptedException, ExecutionException, IOException {
        return getDeviceAuthorizationCodes((String) null);
    }","  public void test99()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, false);
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient();
      OAuth20Service oAuth20Service0 = new OAuth20Service((DefaultApi20) null, """", (String) null, """", ""z\"")!A>XJr]/,WK"", ""z\"")!A>XJr]/,WK"", mockPrintStream0, ""z\"")!A>XJr]/,WK"", jDKHttpClientConfig0, jDKHttpClient0);
      OAuthAsyncRequestCallback<DeviceAuthorization> oAuthAsyncRequestCallback0 = (OAuthAsyncRequestCallback<DeviceAuthorization>) mock(OAuthAsyncRequestCallback.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        oAuth20Service0.getDeviceAuthorizationCodes(oAuthAsyncRequestCallback0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""com.github.scribejava.core.oauth.OAuth20Service"", e);
      }
  }"
106,"    public DeviceAuthorization getDeviceAuthorizationCodes()
            throws InterruptedException, ExecutionException, IOException {
        return getDeviceAuthorizationCodes((String) null);
    }","  public void test100()  throws Throwable  {
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(defaultApi20_0).getDeviceAuthorizationEndpoint();
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, """", ""B<"", ""E?~Y0d~"", """", ""cVo"", (OutputStream) null, """", jDKHttpClientConfig0, jDKHttpClient0);
      OAuthAsyncRequestCallback<DeviceAuthorization> oAuthAsyncRequestCallback0 = (OAuthAsyncRequestCallback<DeviceAuthorization>) mock(OAuthAsyncRequestCallback.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        oAuth20Service0.getDeviceAuthorizationCodes(oAuthAsyncRequestCallback0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Cannot append to null URL
         //
         verifyException(""com.github.scribejava.core.utils.Preconditions"", e);
      }
  }"
107,"    public DeviceAuthorization getDeviceAuthorizationCodes()
            throws InterruptedException, ExecutionException, IOException {
        return getDeviceAuthorizationCodes((String) null);
    }","  public void test101()  throws Throwable  {
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(defaultApi20_0).getDeviceAuthorizationEndpoint();
      MockFile mockFile0 = new MockFile(""access token password grant"");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient((JDKHttpClientConfig) null);
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, ""access token password grant"", ""access token password grant"", """", """", (String) null, mockPrintStream0, ""55R*7 c<w3h"", jDKHttpClientConfig0, jDKHttpClient0);
      // Undeclared exception!
      try { 
        oAuth20Service0.getDeviceAuthorizationCodes();
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // Malformed URL
         //
         verifyException(""com.github.scribejava.core.model.OAuthRequest"", e);
      }
  }"
108,"    public DeviceAuthorization getDeviceAuthorizationCodes()
            throws InterruptedException, ExecutionException, IOException {
        return getDeviceAuthorizationCodes((String) null);
    }","  public void test102()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream(""no default constructor found"");
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient();
      OAuth20Service oAuth20Service0 = new OAuth20Service((DefaultApi20) null, ""{&\""H(u!0D@~*"", ""{&\""H(u!0D@~*"", ""no default constructor found"", ""com.fasterxml.jackson.core.PrettyPrinter"", ""{&\""H(u!0D@~*"", mockPrintStream0, ""com.fasterxml.jackson.core.PrettyPrinter"", jDKHttpClientConfig0, jDKHttpClient0);
      // Undeclared exception!
      try { 
        oAuth20Service0.getDeviceAuthorizationCodes();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""com.github.scribejava.core.oauth.OAuth20Service"", e);
      }
  }"
109,"    public DeviceAuthorization getDeviceAuthorizationCodes()
            throws InterruptedException, ExecutionException, IOException {
        return getDeviceAuthorizationCodes((String) null);
    }","  public void test103()  throws Throwable  {
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(defaultApi20_0).getDeviceAuthorizationEndpoint();
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, ""(was "", ""(was "", ""(was "", ""($<G`UpU;7vK#yL"", ""(was "", (OutputStream) null, ""($<G`UpU;7vK#yL"", jDKHttpClientConfig0, jDKHttpClient0);
      // Undeclared exception!
      try { 
        oAuth20Service0.getDeviceAuthorizationCodes();
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Cannot append to null URL
         //
         verifyException(""com.github.scribejava.core.utils.Preconditions"", e);
      }
  }"
110,"    public String getAuthorizationUrl() {
        return createAuthorizationUrlBuilder().build();
    }","  public void test104()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient();
      OAuth20Service oAuth20Service0 = new OAuth20Service((DefaultApi20) null, ""ZlYs"", ""ZlYs"", ""ju@1j4c->$3d'A"", """", ""ZlYs"", pipedOutputStream0, ""client_id"", jDKHttpClientConfig0, jDKHttpClient0);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      // Undeclared exception!
      try { 
        oAuth20Service0.getAuthorizationUrl((Map<String, String>) hashMap0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""com.github.scribejava.core.oauth.AuthorizationUrlBuilder"", e);
      }
  }"
111,"    public String getAuthorizationUrl() {
        return createAuthorizationUrlBuilder().build();
    }","  public void test105()  throws Throwable  {
      File file0 = MockFile.createTempFile(""2.0"", ""KmABvv`2"");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuth20Service oAuth20Service0 = new OAuth20Service((DefaultApi20) null, ""2.0"", ""am2<Ydl|>Uk4E7!=O"", ""KmABvv`2"", ""2.0"", ""wL|a?jS"", mockPrintStream0, (String) null, jDKHttpClientConfig0, jDKHttpClient0);
      // Undeclared exception!
      try { 
        oAuth20Service0.getAuthorizationUrl(""com.github.scribejava.core.oauth.OAuth20Service$4"");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""com.github.scribejava.core.oauth.AuthorizationUrlBuilder"", e);
      }
  }"
112,"    public String getAuthorizationUrl() {
        return createAuthorizationUrlBuilder().build();
    }","  public void test106()  throws Throwable  {
      File file0 = MockFile.createTempFile(""Muy7c;DZ[B<STw:B3Y"", ""LP-'s+l>A/~AEjme ;X"");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient();
      OAuth20Service oAuth20Service0 = new OAuth20Service((DefaultApi20) null, ""com.fasterxml.jackson.core.JsonFactoryBuilder"", ""LP-'s+l>A/~AEjme ;X"", ""LP-'s+l>A/~AEjme ;X"", ""Muy7c;DZ[B<STw:B3Y"", ""com.fasterxml.jackson.core.JsonFactoryBuilder"", mockFileOutputStream0, """", jDKHttpClientConfig0, jDKHttpClient0);
      // Undeclared exception!
      try { 
        oAuth20Service0.getAuthorizationUrl((PKCE) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""com.github.scribejava.core.oauth.AuthorizationUrlBuilder"", e);
      }
  }"
113,"    public String getAuthorizationUrl() {
        return createAuthorizationUrlBuilder().build();
    }","  public void test107()  throws Throwable  {
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuth20Service oAuth20Service0 = new OAuth20Service((DefaultApi20) null, ""]s^.>@14i@Q)c"", ""com.fasterxml.jackson.databind.ser.DefaultSerializerProvider"", ""com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer$Bucket"", ""="", ""UuKc:DzBW|HRo"", (OutputStream) null, "";"", jDKHttpClientConfig0, jDKHttpClient0);
      // Undeclared exception!
      try { 
        oAuth20Service0.getAuthorizationUrl();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""com.github.scribejava.core.oauth.AuthorizationUrlBuilder"", e);
      }
  }"
114,"    public Future<OAuth2AccessToken> getAccessTokenPasswordGrantAsync(String username, String password) {
        return getAccessTokenPasswordGrantAsync(username, password,
                (OAuthAsyncRequestCallback<OAuth2AccessToken>) null);
    }","  public void test108()  throws Throwable  {
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(defaultApi20_0).getAccessTokenEndpoint();
      doReturn((Verb) null).when(defaultApi20_0).getAccessTokenVerb();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(""`,yY'O&{0\n@NY_"", false);
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, ""db^o:"", ""db^o:"", ""`,yY'O&{0\n@NY_"", ""`,yY'O&{0\n@NY_"", ""`,yY'O&{0\n@NY_"", mockFileOutputStream0, ""bsADFjvIgFgrq~"", jDKHttpClientConfig0, jDKHttpClient0);
      OAuthAsyncRequestCallback<OAuth2AccessToken> oAuthAsyncRequestCallback0 = (OAuthAsyncRequestCallback<OAuth2AccessToken>) mock(OAuthAsyncRequestCallback.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        oAuth20Service0.getAccessTokenPasswordGrantAsync(""n\u0004PFn?[3pE2B_L,{"", ""`,yY'O&{0\n@NY_"", """", oAuthAsyncRequestCallback0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
115,"    public Future<OAuth2AccessToken> getAccessTokenPasswordGrantAsync(String username, String password) {
        return getAccessTokenPasswordGrantAsync(username, password,
                (OAuthAsyncRequestCallback<OAuth2AccessToken>) null);
    }","  public void test109()  throws Throwable  {
      Verb verb0 = Verb.DELETE;
      ClientAuthentication clientAuthentication0 = mock(ClientAuthentication.class, new ViolatedAssumptionAnswer());
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn("""").when(defaultApi20_0).getAccessTokenEndpoint();
      doReturn(verb0).when(defaultApi20_0).getAccessTokenVerb();
      doReturn(clientAuthentication0).when(defaultApi20_0).getClientAuthentication();
      MockPrintStream mockPrintStream0 = new MockPrintStream(""xfER]vg-e!/3"");
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, """", """", """", """", """", mockPrintStream0, """", jDKHttpClientConfig0, jDKHttpClient0);
      OAuthAsyncRequestCallback<OAuth2AccessToken> oAuthAsyncRequestCallback0 = (OAuthAsyncRequestCallback<OAuth2AccessToken>) mock(OAuthAsyncRequestCallback.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        oAuth20Service0.getAccessTokenPasswordGrantAsync((String) null, """", (String) null, oAuthAsyncRequestCallback0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Cannot encode null object
         //
         verifyException(""com.github.scribejava.core.utils.Preconditions"", e);
      }
  }"
116,"    public Future<OAuth2AccessToken> getAccessTokenPasswordGrantAsync(String username, String password) {
        return getAccessTokenPasswordGrantAsync(username, password,
                (OAuthAsyncRequestCallback<OAuth2AccessToken>) null);
    }","  public void test110()  throws Throwable  {
      ClientAuthentication clientAuthentication0 = mock(ClientAuthentication.class, new ViolatedAssumptionAnswer());
      MockFile mockFile0 = new MockFile(""Oj%a|\""l'6r4gc)#L"");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient();
      Verb verb0 = Verb.PATCH;
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn(""9'jl,GVl{3Qe}qA"").when(defaultApi20_0).getAccessTokenEndpoint();
      doReturn(verb0).when(defaultApi20_0).getAccessTokenVerb();
      doReturn(clientAuthentication0).when(defaultApi20_0).getClientAuthentication();
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, ""}"", ""Could not resolve type id '%s' as a subtype of %s"", ""<"", (String) null, ""9'jl,GVl{3Qe}qA"", mockPrintStream0, ""23`9"", jDKHttpClientConfig0, jDKHttpClient0);
      // Undeclared exception!
      try { 
        oAuth20Service0.getAccessTokenPasswordGrantAsync("""", ""Could not resolve type id '%s' as a subtype of %s"", ""23`9"");
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // Malformed URL
         //
         verifyException(""com.github.scribejava.core.model.OAuthRequest"", e);
      }
  }"
117,"    public Future<OAuth2AccessToken> getAccessTokenPasswordGrantAsync(String username, String password) {
        return getAccessTokenPasswordGrantAsync(username, password,
                (OAuthAsyncRequestCallback<OAuth2AccessToken>) null);
    }","  public void test111()  throws Throwable  {
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(defaultApi20_0).getAccessTokenEndpoint();
      doReturn((Verb) null).when(defaultApi20_0).getAccessTokenVerb();
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient();
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, ""4xhQj$|v8V$5tVa"", ""4xhQj$|v8V$5tVa"", ""4xhQj$|v8V$5tVa"", ""temporarily_unavailable"", ""=F5TyJ"", (OutputStream) null, ""OtherScalar"", jDKHttpClientConfig0, jDKHttpClient0);
      // Undeclared exception!
      try { 
        oAuth20Service0.getAccessTokenPasswordGrantAsync(""OtherScalar"", ""OtherScalar"", """");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
118,"    public Future<OAuth2AccessToken> getAccessTokenPasswordGrantAsync(String username, String password) {
        return getAccessTokenPasswordGrantAsync(username, password,
                (OAuthAsyncRequestCallback<OAuth2AccessToken>) null);
    }","  public void test112()  throws Throwable  {
      Verb verb0 = Verb.OPTIONS;
      ClientAuthentication clientAuthentication0 = mock(ClientAuthentication.class, new ViolatedAssumptionAnswer());
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn(""access tokn"").when(defaultApi20_0).getAccessTokenEndpoint();
      doReturn(verb0).when(defaultApi20_0).getAccessTokenVerb();
      doReturn(clientAuthentication0).when(defaultApi20_0).getClientAuthentication();
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, ""k?VKA'"", """", ""k?VKA'"", ""k?VKA'"", ""3lp"", (OutputStream) null, """", jDKHttpClientConfig0, jDKHttpClient0);
      // Undeclared exception!
      try { 
        oAuth20Service0.getAccessTokenPasswordGrantAsync(""@"", (String) null, ""="");
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Cannot encode null object
         //
         verifyException(""com.github.scribejava.core.utils.Preconditions"", e);
      }
  }"
119,"    public Future<OAuth2AccessToken> getAccessTokenPasswordGrantAsync(String username, String password) {
        return getAccessTokenPasswordGrantAsync(username, password,
                (OAuthAsyncRequestCallback<OAuth2AccessToken>) null);
    }","  public void test113()  throws Throwable  {
      Verb verb0 = Verb.TRACE;
      ClientAuthentication clientAuthentication0 = mock(ClientAuthentication.class, new ViolatedAssumptionAnswer());
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn("":"").when(defaultApi20_0).getAccessTokenEndpoint();
      doReturn(verb0).when(defaultApi20_0).getAccessTokenVerb();
      doReturn(clientAuthentication0).when(defaultApi20_0).getClientAuthentication();
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0);
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, ""f+a;ALC#mNz"", ""uw_4P/5rAuk06(s"", ""Device Authorization Codes"", ""uw_4P/5rAuk06(s"", ""uw_4P/5rAuk06(s"", bufferedOutputStream0, (String) null, (HttpClientConfig) null, jDKHttpClient0);
      OAuthAsyncRequestCallback<OAuth2AccessToken> oAuthAsyncRequestCallback0 = (OAuthAsyncRequestCallback<OAuth2AccessToken>) mock(OAuthAsyncRequestCallback.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        oAuth20Service0.getAccessTokenPasswordGrantAsync("") now exceeds maximum, "", ""zawLtF.4$o$m.Q"", oAuthAsyncRequestCallback0);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // Malformed URL
         //
         verifyException(""com.github.scribejava.core.model.OAuthRequest"", e);
      }
  }"
120,"    public Future<OAuth2AccessToken> getAccessTokenPasswordGrantAsync(String username, String password) {
        return getAccessTokenPasswordGrantAsync(username, password,
                (OAuthAsyncRequestCallback<OAuth2AccessToken>) null);
    }","  public void test114()  throws Throwable  {
      Verb verb0 = Verb.PUT;
      ClientAuthentication clientAuthentication0 = mock(ClientAuthentication.class, new ViolatedAssumptionAnswer());
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(defaultApi20_0).getAccessTokenEndpoint();
      doReturn(verb0).when(defaultApi20_0).getAccessTokenVerb();
      doReturn(clientAuthentication0).when(defaultApi20_0).getClientAuthentication();
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient();
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, ""+j4"", ""-68'C9$r\"""", "",valueFilter="", ""8#dn.'"", """", (OutputStream) null, ""r"", jDKHttpClientConfig0, jDKHttpClient0);
      OAuthAsyncRequestCallback<OAuth2AccessToken> oAuthAsyncRequestCallback0 = (OAuthAsyncRequestCallback<OAuth2AccessToken>) mock(OAuthAsyncRequestCallback.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        oAuth20Service0.getAccessTokenPasswordGrantAsync("""", ""-68'C9$r\"""", oAuthAsyncRequestCallback0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Cannot append to null URL
         //
         verifyException(""com.github.scribejava.core.utils.Preconditions"", e);
      }
  }"
121,"    public Future<OAuth2AccessToken> getAccessTokenPasswordGrantAsync(String username, String password) {
        return getAccessTokenPasswordGrantAsync(username, password,
                (OAuthAsyncRequestCallback<OAuth2AccessToken>) null);
    }","  public void test115()  throws Throwable  {
      ClientAuthentication clientAuthentication0 = mock(ClientAuthentication.class, new ViolatedAssumptionAnswer());
      Verb verb0 = Verb.HEAD;
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(defaultApi20_0).getAccessTokenEndpoint();
      doReturn(verb0).when(defaultApi20_0).getAccessTokenVerb();
      doReturn(clientAuthentication0).when(defaultApi20_0).getClientAuthentication();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(""21DiLU"");
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, ""[%6{Wxx#E 6"", ""[%6{Wxx#E 6"", ""password"", ""21DiLU"", ""oYV;MXiJ"", mockFileOutputStream0, ""password"", jDKHttpClientConfig0, (HttpClient) null);
      // Undeclared exception!
      try { 
        oAuth20Service0.getAccessTokenPasswordGrantAsync(""0@vU`8W5/-:wDZL?R"", "".%!V4"");
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // Malformed URL
         //
         verifyException(""com.github.scribejava.core.model.OAuthRequest"", e);
      }
  }"
122,"    public Future<OAuth2AccessToken> getAccessTokenPasswordGrantAsync(String username, String password) {
        return getAccessTokenPasswordGrantAsync(username, password,
                (OAuthAsyncRequestCallback<OAuth2AccessToken>) null);
    }","  public void test116()  throws Throwable  {
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(defaultApi20_0).getAccessTokenEndpoint();
      doReturn((Verb) null).when(defaultApi20_0).getAccessTokenVerb();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(""Not a subtype"");
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, ""[%6{Wxx#E 6"", ""[%6{Wxx#E 6"", ""password"", ""Not a subtype"", ""oYV;MXiJ"", mockFileOutputStream0, ""password"", jDKHttpClientConfig0, (HttpClient) null);
      // Undeclared exception!
      try { 
        oAuth20Service0.getAccessTokenPasswordGrantAsync(""0@vU`8W5/-:wDZL?R"", "".%!V4"");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
123,"    public OAuth2AccessToken getAccessTokenPasswordGrant(String username, String password)
            throws IOException, InterruptedException, ExecutionException {
        final OAuthRequest request = createAccessTokenPasswordGrantRequest(username, password, null);

        return sendAccessTokenRequestSync(request);
    }","  public void test117()  throws Throwable  {
      Verb verb0 = Verb.TRACE;
      ClientAuthentication clientAuthentication0 = mock(ClientAuthentication.class, new ViolatedAssumptionAnswer());
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(defaultApi20_0).getAccessTokenEndpoint();
      doReturn(verb0).when(defaultApi20_0).getAccessTokenVerb();
      doReturn(clientAuthentication0).when(defaultApi20_0).getClientAuthentication();
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, ""Device Authorization Codes"", ""Device Authorization Codes"", ""com.fasterxml.jackson.databind.ser.std.StdJdkSerializers$AtomicBooleanSerializer"", ""Device Authorization Codes"", ""Vp_"", mockPrintStream0, ""Device Authorization Codes"", jDKHttpClientConfig0, jDKHttpClient0);
      // Undeclared exception!
      try { 
        oAuth20Service0.getAccessTokenPasswordGrant("":"", "":"", "":"");
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // Malformed URL
         //
         verifyException(""com.github.scribejava.core.model.OAuthRequest"", e);
      }
  }"
124,"    public OAuth2AccessToken getAccessTokenPasswordGrant(String username, String password)
            throws IOException, InterruptedException, ExecutionException {
        final OAuthRequest request = createAccessTokenPasswordGrantRequest(username, password, null);

        return sendAccessTokenRequestSync(request);
    }","  public void test118()  throws Throwable  {
      Verb verb0 = Verb.DELETE;
      ClientAuthentication clientAuthentication0 = mock(ClientAuthentication.class, new ViolatedAssumptionAnswer());
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn(""access tokn"").when(defaultApi20_0).getAccessTokenEndpoint();
      doReturn(verb0).when(defaultApi20_0).getAccessTokenVerb();
      doReturn(clientAuthentication0).when(defaultApi20_0).getClientAuthentication();
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient();
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, ""access tokn"", ""access tokn"", ""access tokn"", ""access tokn"", ""access tokn"", (OutputStream) null, ""access tokn"", jDKHttpClientConfig0, jDKHttpClient0);
      try { 
        oAuth20Service0.getAccessTokenPasswordGrant(""access tokn"", ""access tokn"", ""access tokn"");
        fail(""Expecting exception: MalformedURLException"");
      } catch(MalformedURLException e) {
         //
         // no protocol: access tokn
         //
         verifyException(""java.net.URL"", e);
      }
  }"
125,"    public OAuth2AccessToken getAccessTokenPasswordGrant(String username, String password)
            throws IOException, InterruptedException, ExecutionException {
        final OAuthRequest request = createAccessTokenPasswordGrantRequest(username, password, null);

        return sendAccessTokenRequestSync(request);
    }","  public void test119()  throws Throwable  {
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuth20Service oAuth20Service0 = new OAuth20Service((DefaultApi20) null, ""D'DcK{YZ'TUC?L%/uLG"", ""D'DcK{YZ'TUC?L%/uLG"", ""J@O5"", ""\u0006HM_^f`"", ""D'DcK{YZ'TUC?L%/uLG"", (OutputStream) null, ""\u0006HM_^f`"", (HttpClientConfig) null, jDKHttpClient0);
      // Undeclared exception!
      try { 
        oAuth20Service0.getAccessTokenPasswordGrant(""AEI)\""1Y="", ""c|18Ozs)6E(Mv"", ""\u0006HM_^f`"");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""com.github.scribejava.core.oauth.OAuth20Service"", e);
      }
  }"
126,"    public OAuth2AccessToken getAccessTokenPasswordGrant(String username, String password)
            throws IOException, InterruptedException, ExecutionException {
        final OAuthRequest request = createAccessTokenPasswordGrantRequest(username, password, null);

        return sendAccessTokenRequestSync(request);
    }","  public void test120()  throws Throwable  {
      Verb verb0 = Verb.DELETE;
      ClientAuthentication clientAuthentication0 = mock(ClientAuthentication.class, new ViolatedAssumptionAnswer());
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(defaultApi20_0).getAccessTokenEndpoint();
      doReturn(verb0).when(defaultApi20_0).getAccessTokenVerb();
      doReturn(clientAuthentication0).when(defaultApi20_0).getClientAuthentication();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("" does not support schema of type '"", false);
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient();
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, ""devicbe_code"", "" does not support schema of type '"", ""devicbe_code"", "" does not support schema of type '"", "" does not support schema of type '"", mockFileOutputStream0, ""devicbe_code"", jDKHttpClientConfig0, jDKHttpClient0);
      // Undeclared exception!
      try { 
        oAuth20Service0.getAccessTokenPasswordGrant(""devicbe_code"", "" does not support schema of type '"");
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // Malformed URL
         //
         verifyException(""com.github.scribejava.core.model.OAuthRequest"", e);
      }
  }"
127,"    public OAuth2AccessToken getAccessTokenPasswordGrant(String username, String password)
            throws IOException, InterruptedException, ExecutionException {
        final OAuthRequest request = createAccessTokenPasswordGrantRequest(username, password, null);

        return sendAccessTokenRequestSync(request);
    }","  public void test121()  throws Throwable  {
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(defaultApi20_0).getAccessTokenEndpoint();
      doReturn((Verb) null).when(defaultApi20_0).getAccessTokenVerb();
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, """", """", """", (String) null, ""send request for access token synchronously to %s"", (OutputStream) null, ""E?~Y0d~"", jDKHttpClientConfig0, jDKHttpClient0);
      // Undeclared exception!
      try { 
        oAuth20Service0.getAccessTokenPasswordGrant(""*1gDD3Mw%F!"", """");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
128,"    public OAuth2AccessToken getAccessTokenPasswordGrant(String username, String password)
            throws IOException, InterruptedException, ExecutionException {
        final OAuthRequest request = createAccessTokenPasswordGrantRequest(username, password, null);

        return sendAccessTokenRequestSync(request);
    }","  public void test122()  throws Throwable  {
      Verb verb0 = Verb.OPTIONS;
      ClientAuthentication clientAuthentication0 = mock(ClientAuthentication.class, new ViolatedAssumptionAnswer());
      ClientAuthentication clientAuthentication1 = mock(ClientAuthentication.class, new ViolatedAssumptionAnswer());
      ClientAuthentication clientAuthentication2 = mock(ClientAuthentication.class, new ViolatedAssumptionAnswer());
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn(""access tokn"", ""access tokn"", (String) null).when(defaultApi20_0).getAccessTokenEndpoint();
      doReturn(verb0, verb0, verb0).when(defaultApi20_0).getAccessTokenVerb();
      doReturn(clientAuthentication0, clientAuthentication1, clientAuthentication2).when(defaultApi20_0).getClientAuthentication();
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, ""k?VKA'"", """", ""k?VKA'"", ""k?VKA'"", ""3lp"", (OutputStream) null, """", jDKHttpClientConfig0, jDKHttpClient0);
      oAuth20Service0.createAccessTokenClientCredentialsGrantRequest(""="");
      OAuthAsyncRequestCallback<OAuth2AccessToken> oAuthAsyncRequestCallback0 = (OAuthAsyncRequestCallback<OAuth2AccessToken>) mock(OAuthAsyncRequestCallback.class, new ViolatedAssumptionAnswer());
      oAuth20Service0.getAccessTokenClientCredentialsGrant("".,HKF9^b-J@!HtH"", oAuthAsyncRequestCallback0);
      // Undeclared exception!
      try { 
        oAuth20Service0.getAccessTokenPasswordGrant(""3lp"", ""blank String (all whitespace)"");
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Cannot append to null URL
         //
         verifyException(""com.github.scribejava.core.utils.Preconditions"", e);
      }
  }"
129,"    public Future<OAuth2AccessToken> getAccessTokenDeviceAuthorizationGrantAsync(
            DeviceAuthorization deviceAuthorization) {
        return getAccessTokenDeviceAuthorizationGrant(deviceAuthorization, null);
    }","  public void test123()  throws Throwable  {
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(defaultApi20_0).getAccessTokenEndpoint();
      doReturn((Verb) null).when(defaultApi20_0).getAccessTokenVerb();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(3795);
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, """", """", (String) null, """", """", byteArrayOutputStream0, """", jDKHttpClientConfig0, (HttpClient) null);
      DeviceAuthorization deviceAuthorization0 = new DeviceAuthorization("""", ""Eg"", """", (-619));
      // Undeclared exception!
      try { 
        oAuth20Service0.getAccessTokenDeviceAuthorizationGrantAsync(deviceAuthorization0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
130,"    public Future<OAuth2AccessToken> getAccessTokenDeviceAuthorizationGrantAsync(
            DeviceAuthorization deviceAuthorization) {
        return getAccessTokenDeviceAuthorizationGrant(deviceAuthorization, null);
    }","  public void test124()  throws Throwable  {
      Verb verb0 = Verb.PUT;
      ClientAuthentication clientAuthentication0 = mock(ClientAuthentication.class, new ViolatedAssumptionAnswer());
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient();
      ClientAuthentication clientAuthentication1 = mock(ClientAuthentication.class, new ViolatedAssumptionAnswer());
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn(""r"", (String) null).when(defaultApi20_0).getAccessTokenEndpoint();
      doReturn(verb0, verb0).when(defaultApi20_0).getAccessTokenVerb();
      doReturn(clientAuthentication0, clientAuthentication1).when(defaultApi20_0).getClientAuthentication();
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, ""+j4"", ""BtUn"", ""1us.?*IS}NnPcf`m"", ""+j4"", """", (OutputStream) null, "",valueFilter="", jDKHttpClientConfig0, jDKHttpClient0);
      DeviceAuthorization deviceAuthorization0 = new DeviceAuthorization(""E"", ""BtUn"", ""M5v"", 1255);
      AccessTokenRequestParams accessTokenRequestParams0 = AccessTokenRequestParams.create("""");
      oAuth20Service0.createAccessTokenRequest(accessTokenRequestParams0);
      // Undeclared exception!
      try { 
        oAuth20Service0.getAccessTokenDeviceAuthorizationGrantAsync(deviceAuthorization0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Cannot append to null URL
         //
         verifyException(""com.github.scribejava.core.utils.Preconditions"", e);
      }
  }"
131,"    public OAuth2AccessToken getAccessTokenDeviceAuthorizationGrant(DeviceAuthorization deviceAuthorization)
            throws InterruptedException, ExecutionException, IOException {
        final OAuthRequest request = createAccessTokenDeviceAuthorizationGrantRequest(deviceAuthorization);

        try (Response response = execute(request)) {
            if (isDebug()) {
                log(""got AccessTokenDeviceAuthorizationGrant response"");
                log(""response status code: %s"", response.getCode());
                log(""response body: %s"", response.getBody());
            }
            return api.getAccessTokenExtractor().extract(response);
        }
    }","  public void test125()  throws Throwable  {
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(defaultApi20_0).getAccessTokenEndpoint();
      doReturn((Verb) null).when(defaultApi20_0).getAccessTokenVerb();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, """", """", """", ""0O(!O"", """", pipedOutputStream0, ""0O(!O"", jDKHttpClientConfig0, jDKHttpClient0);
      DeviceAuthorization deviceAuthorization0 = new DeviceAuthorization(""Za]nU"", ""Za]nU"", ""com.fasterxml.jackson.databind.ser.BeanPropertyWriter"", (-1428));
      OAuthAsyncRequestCallback<OAuth2AccessToken> oAuthAsyncRequestCallback0 = (OAuthAsyncRequestCallback<OAuth2AccessToken>) mock(OAuthAsyncRequestCallback.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        oAuth20Service0.getAccessTokenDeviceAuthorizationGrant(deviceAuthorization0, oAuthAsyncRequestCallback0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
132,"    public OAuth2AccessToken getAccessTokenDeviceAuthorizationGrant(DeviceAuthorization deviceAuthorization)
            throws InterruptedException, ExecutionException, IOException {
        final OAuthRequest request = createAccessTokenDeviceAuthorizationGrantRequest(deviceAuthorization);

        try (Response response = execute(request)) {
            if (isDebug()) {
                log(""got AccessTokenDeviceAuthorizationGrant response"");
                log(""response status code: %s"", response.getCode());
                log(""response body: %s"", response.getBody());
            }
            return api.getAccessTokenExtractor().extract(response);
        }
    }","  public void test126()  throws Throwable  {
      Verb verb0 = Verb.OPTIONS;
      ClientAuthentication clientAuthentication0 = mock(ClientAuthentication.class, new ViolatedAssumptionAnswer());
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn(""access token"").when(defaultApi20_0).getAccessTokenEndpoint();
      doReturn(verb0).when(defaultApi20_0).getAccessTokenVerb();
      doReturn(clientAuthentication0).when(defaultApi20_0).getClientAuthentication();
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, ""k?VKA'"", ""_>"", ""k?VKA'"", ""k?VKA'"", ""3lp"", (OutputStream) null, ""_>"", jDKHttpClientConfig0, jDKHttpClient0);
      DeviceAuthorization deviceAuthorization0 = new DeviceAuthorization(""3lp"", ""]s^.>@14i@Q)c"", ""k?VKA'"", (-2));
      try { 
        oAuth20Service0.getAccessTokenDeviceAuthorizationGrant(deviceAuthorization0);
        fail(""Expecting exception: MalformedURLException"");
      } catch(MalformedURLException e) {
         //
         // no protocol: access token?grant_type=urn%3Aietf%3Aparams%3Aoauth%3Agrant-type%3Adevice_code&device_code=3lp
         //
         verifyException(""java.net.URL"", e);
      }
  }"
133,"    public OAuth2AccessToken getAccessTokenDeviceAuthorizationGrant(DeviceAuthorization deviceAuthorization)
            throws InterruptedException, ExecutionException, IOException {
        final OAuthRequest request = createAccessTokenDeviceAuthorizationGrantRequest(deviceAuthorization);

        try (Response response = execute(request)) {
            if (isDebug()) {
                log(""got AccessTokenDeviceAuthorizationGrant response"");
                log(""response status code: %s"", response.getCode());
                log(""response body: %s"", response.getBody());
            }
            return api.getAccessTokenExtractor().extract(response);
        }
    }","  public void test127()  throws Throwable  {
      Verb verb0 = Verb.GET;
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn(""'gegNV"").when(defaultApi20_0).getAccessTokenEndpoint();
      doReturn(verb0).when(defaultApi20_0).getAccessTokenVerb();
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, """", ""B<"", ""E?~Y0d~"", """", ""E?~Y0d~"", (OutputStream) null, """", jDKHttpClientConfig0, jDKHttpClient0);
      // Undeclared exception!
      try { 
        oAuth20Service0.getAccessTokenDeviceAuthorizationGrant((DeviceAuthorization) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""com.github.scribejava.core.oauth.OAuth20Service"", e);
      }
  }"
134,"    public OAuth2AccessToken getAccessTokenDeviceAuthorizationGrant(DeviceAuthorization deviceAuthorization)
            throws InterruptedException, ExecutionException, IOException {
        final OAuthRequest request = createAccessTokenDeviceAuthorizationGrantRequest(deviceAuthorization);

        try (Response response = execute(request)) {
            if (isDebug()) {
                log(""got AccessTokenDeviceAuthorizationGrant response"");
                log(""response status code: %s"", response.getCode());
                log(""response body: %s"", response.getBody());
            }
            return api.getAccessTokenExtractor().extract(response);
        }
    }","  public void test128()  throws Throwable  {
      Verb verb0 = Verb.TRACE;
      ClientAuthentication clientAuthentication0 = mock(ClientAuthentication.class, new ViolatedAssumptionAnswer());
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(defaultApi20_0).getAccessTokenEndpoint();
      doReturn(verb0).when(defaultApi20_0).getAccessTokenVerb();
      doReturn(clientAuthentication0).when(defaultApi20_0).getClientAuthentication();
      MockPrintStream mockPrintStream0 = new MockPrintStream(""uw_4P/5rAuk06(s"");
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, ""urn:ietf:params:oauth:grant-type:device_code"", ""urn:ietf:params:oauth:grant-type:device_code"", ""com.fasterxml.jackson.databind.ser.std.StdJdSerializers$AtomicBooleanSerialzer"", ""urn:ietf:params:oauth:grant-type:device_code"", ""uw_4P/5rAuk06(s"", mockPrintStream0, ""urn:ietf:params:oauth:grant-type:device_code"", jDKHttpClientConfig0, jDKHttpClient0);
      DeviceAuthorization deviceAuthorization0 = new DeviceAuthorization(""client_credentials"", ""Device Authorization Codes"", (String) null, (-47));
      // Undeclared exception!
      try { 
        oAuth20Service0.getAccessTokenDeviceAuthorizationGrant(deviceAuthorization0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Cannot append to null URL
         //
         verifyException(""com.github.scribejava.core.utils.Preconditions"", e);
      }
  }"
135,"    public Future<OAuth2AccessToken> getAccessTokenClientCredentialsGrantAsync() {
        return getAccessTokenClientCredentialsGrant((OAuthAsyncRequestCallback<OAuth2AccessToken>) null);
    }","  public void test129()  throws Throwable  {
      Verb verb0 = Verb.TRACE;
      ClientAuthentication clientAuthentication0 = mock(ClientAuthentication.class, new ViolatedAssumptionAnswer());
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn("":"").when(defaultApi20_0).getAccessTokenEndpoint();
      doReturn(verb0).when(defaultApi20_0).getAccessTokenVerb();
      doReturn(clientAuthentication0).when(defaultApi20_0).getClientAuthentication();
      MockFile mockFile0 = new MockFile("":"");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient();
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, (String) null, "":"", ""Device Authorization Codes"", ""Missing field (broken JDK (de)serialization?)"", ""i,K,"", mockPrintStream0, ""com.fasterxml.jackson.databind.exc.InvalidFormatException"", (HttpClientConfig) null, jDKHttpClient0);
      // Undeclared exception!
      try { 
        oAuth20Service0.getAccessTokenClientCredentialsGrantAsync(""i,K,"");
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // Malformed URL
         //
         verifyException(""com.github.scribejava.core.model.OAuthRequest"", e);
      }
  }"
136,"    public Future<OAuth2AccessToken> getAccessTokenClientCredentialsGrantAsync() {
        return getAccessTokenClientCredentialsGrant((OAuthAsyncRequestCallback<OAuth2AccessToken>) null);
    }","  public void test130()  throws Throwable  {
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(defaultApi20_0).getAccessTokenEndpoint();
      doReturn((Verb) null).when(defaultApi20_0).getAccessTokenVerb();
      doReturn((ClientAuthentication) null).when(defaultApi20_0).getClientAuthentication();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayOutputStream0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(filterOutputStream0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(bufferedOutputStream0, true);
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, ""username"", """", (String) null, ""send request for access token asynchronously to %s"", (String) null, mockPrintStream0, ""send request for access token asynchronously to %s"", jDKHttpClientConfig0, jDKHttpClient0);
      // Undeclared exception!
      try { 
        oAuth20Service0.getAccessTokenClientCredentialsGrantAsync(""ADJUST_DATES_TO_CONTEXT_TIME_ZONE"");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""com.github.scribejava.core.oauth.OAuth20Service"", e);
      }
  }"
137,"    public Future<OAuth2AccessToken> getAccessTokenClientCredentialsGrantAsync() {
        return getAccessTokenClientCredentialsGrant((OAuthAsyncRequestCallback<OAuth2AccessToken>) null);
    }","  public void test131()  throws Throwable  {
      Verb verb0 = Verb.GET;
      ClientAuthentication clientAuthentication0 = mock(ClientAuthentication.class, new ViolatedAssumptionAnswer());
      ClientAuthentication clientAuthentication1 = mock(ClientAuthentication.class, new ViolatedAssumptionAnswer());
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn(""opaPzy1 sXvE`QWOh#"", (String) null).when(defaultApi20_0).getAccessTokenEndpoint();
      doReturn(verb0, verb0).when(defaultApi20_0).getAccessTokenVerb();
      doReturn(clientAuthentication0, clientAuthentication1).when(defaultApi20_0).getClientAuthentication();
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, ""USE_BASE_TYPE_AS_DEFAULT_IMPL"", ""USE_BASE_TYPE_AS_DEFAULT_IMPL"", ""v?9];m;fSQTc3.%8"", (String) null, ""3'FI<\""y7lH8?!kyEmX>"", (OutputStream) null, ""v?9];m;fSQTc3.%8"", jDKHttpClientConfig0, jDKHttpClient0);
      AccessTokenRequestParams accessTokenRequestParams0 = AccessTokenRequestParams.create("""");
      oAuth20Service0.getAccessToken(accessTokenRequestParams0, (OAuthAsyncRequestCallback<OAuth2AccessToken>) null);
      // Undeclared exception!
      try { 
        oAuth20Service0.getAccessTokenClientCredentialsGrantAsync((String) null);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Cannot append to null URL
         //
         verifyException(""com.github.scribejava.core.utils.Preconditions"", e);
      }
  }"
138,"    public Future<OAuth2AccessToken> getAccessTokenClientCredentialsGrantAsync() {
        return getAccessTokenClientCredentialsGrant((OAuthAsyncRequestCallback<OAuth2AccessToken>) null);
    }","  public void test132()  throws Throwable  {
      Verb verb0 = Verb.OPTIONS;
      ClientAuthentication clientAuthentication0 = mock(ClientAuthentication.class, new ViolatedAssumptionAnswer());
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(defaultApi20_0).getAccessTokenEndpoint();
      doReturn(verb0).when(defaultApi20_0).getAccessTokenVerb();
      doReturn(clientAuthentication0).when(defaultApi20_0).getClientAuthentication();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, (String) null, ""{ASM;neoFmkbeBVX6+"", ""got AccessTokenDeviceAuthorizationGrant response"", ""kyp"", (String) null, pipedOutputStream0, ""kyp"", (HttpClientConfig) null, jDKHttpClient0);
      // Undeclared exception!
      try { 
        oAuth20Service0.getAccessTokenClientCredentialsGrantAsync();
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // Malformed URL
         //
         verifyException(""com.github.scribejava.core.model.OAuthRequest"", e);
      }
  }"
139,"    public Future<OAuth2AccessToken> getAccessTokenClientCredentialsGrantAsync() {
        return getAccessTokenClientCredentialsGrant((OAuthAsyncRequestCallback<OAuth2AccessToken>) null);
    }","  public void test133()  throws Throwable  {
      Verb verb0 = Verb.GET;
      ClientAuthentication clientAuthentication0 = mock(ClientAuthentication.class, new ViolatedAssumptionAnswer());
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(defaultApi20_0).getAccessTokenEndpoint();
      doReturn(verb0).when(defaultApi20_0).getAccessTokenVerb();
      doReturn(clientAuthentication0).when(defaultApi20_0).getClientAuthentication();
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, ""USE_BASE_TYPE_AS_DEFAULT_IMPL"", ""USE_BASE_TYPE_AS_DEFAULT_IMPL"", ""v'?9];m;fSQTcg3.%8"", (String) null, ""3'FI<\""y7lH8?!kyEmX>"", (OutputStream) null, ""v'?9];m;fSQTcg3.%8"", jDKHttpClientConfig0, jDKHttpClient0);
      // Undeclared exception!
      try { 
        oAuth20Service0.getAccessTokenClientCredentialsGrantAsync();
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Cannot append to null URL
         //
         verifyException(""com.github.scribejava.core.utils.Preconditions"", e);
      }
  }"
140,"    public OAuth2AccessToken getAccessTokenClientCredentialsGrant()
            throws IOException, InterruptedException, ExecutionException {
        final OAuthRequest request = createAccessTokenClientCredentialsGrantRequest(null);

        return sendAccessTokenRequestSync(request);
    }","  public void test134()  throws Throwable  {
      Verb verb0 = Verb.TRACE;
      ClientAuthentication clientAuthentication0 = mock(ClientAuthentication.class, new ViolatedAssumptionAnswer());
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn("":"").when(defaultApi20_0).getAccessTokenEndpoint();
      doReturn(verb0).when(defaultApi20_0).getAccessTokenVerb();
      doReturn(clientAuthentication0).when(defaultApi20_0).getClientAuthentication();
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, """", "":U4sJKkOu\""H"", (String) null, """", "":U4sJKkOu\""H"", mockPrintStream0, "":"", (HttpClientConfig) null, jDKHttpClient0);
      OAuthAsyncRequestCallback<OAuth2AccessToken> oAuthAsyncRequestCallback0 = (OAuthAsyncRequestCallback<OAuth2AccessToken>) mock(OAuthAsyncRequestCallback.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        oAuth20Service0.getAccessTokenClientCredentialsGrant(""b K)AF@0Br*U<"", oAuthAsyncRequestCallback0);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // Malformed URL
         //
         verifyException(""com.github.scribejava.core.model.OAuthRequest"", e);
      }
  }"
141,"    public OAuth2AccessToken getAccessTokenClientCredentialsGrant()
            throws IOException, InterruptedException, ExecutionException {
        final OAuthRequest request = createAccessTokenClientCredentialsGrantRequest(null);

        return sendAccessTokenRequestSync(request);
    }","  public void test135()  throws Throwable  {
      Verb verb0 = Verb.OPTIONS;
      ClientAuthentication clientAuthentication0 = mock(ClientAuthentication.class, new ViolatedAssumptionAnswer());
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn(""access token"", ""access token"").when(defaultApi20_0).getAccessTokenEndpoint();
      doReturn(verb0, verb0).when(defaultApi20_0).getAccessTokenVerb();
      doReturn(clientAuthentication0, (ClientAuthentication) null).when(defaultApi20_0).getClientAuthentication();
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, ""k?VKA'"", ""_>"", ""k?VKA'"", ""k?VKA'"", ""3lp"", (OutputStream) null, ""_>"", jDKHttpClientConfig0, jDKHttpClient0);
      oAuth20Service0.createAccessTokenClientCredentialsGrantRequest(""="");
      OAuthAsyncRequestCallback<OAuth2AccessToken> oAuthAsyncRequestCallback0 = (OAuthAsyncRequestCallback<OAuth2AccessToken>) mock(OAuthAsyncRequestCallback.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        oAuth20Service0.getAccessTokenClientCredentialsGrant(""Strange Reference type "", oAuthAsyncRequestCallback0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""com.github.scribejava.core.oauth.OAuth20Service"", e);
      }
  }"
142,"    public OAuth2AccessToken getAccessTokenClientCredentialsGrant()
            throws IOException, InterruptedException, ExecutionException {
        final OAuthRequest request = createAccessTokenClientCredentialsGrantRequest(null);

        return sendAccessTokenRequestSync(request);
    }","  public void test136()  throws Throwable  {
      Verb verb0 = Verb.OPTIONS;
      ClientAuthentication clientAuthentication0 = mock(ClientAuthentication.class, new ViolatedAssumptionAnswer());
      ClientAuthentication clientAuthentication1 = mock(ClientAuthentication.class, new ViolatedAssumptionAnswer());
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn(""access token"", (String) null).when(defaultApi20_0).getAccessTokenEndpoint();
      doReturn(verb0, verb0).when(defaultApi20_0).getAccessTokenVerb();
      doReturn(clientAuthentication0, clientAuthentication1).when(defaultApi20_0).getClientAuthentication();
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, ""k?VKA'"", ""_>"", ""k?VKA'"", ""k?VKA'"", ""3lp"", (OutputStream) null, ""_>"", jDKHttpClientConfig0, jDKHttpClient0);
      oAuth20Service0.createAccessTokenClientCredentialsGrantRequest(""="");
      OAuthAsyncRequestCallback<OAuth2AccessToken> oAuthAsyncRequestCallback0 = (OAuthAsyncRequestCallback<OAuth2AccessToken>) mock(OAuthAsyncRequestCallback.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        oAuth20Service0.getAccessTokenClientCredentialsGrant(""Strange Reference type "", oAuthAsyncRequestCallback0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Cannot append to null URL
         //
         verifyException(""com.github.scribejava.core.utils.Preconditions"", e);
      }
  }"
143,"    public OAuth2AccessToken getAccessTokenClientCredentialsGrant()
            throws IOException, InterruptedException, ExecutionException {
        final OAuthRequest request = createAccessTokenClientCredentialsGrantRequest(null);

        return sendAccessTokenRequestSync(request);
    }","  public void test137()  throws Throwable  {
      Verb verb0 = Verb.TRACE;
      ClientAuthentication clientAuthentication0 = mock(ClientAuthentication.class, new ViolatedAssumptionAnswer());
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(defaultApi20_0).getAccessTokenEndpoint();
      doReturn(verb0).when(defaultApi20_0).getAccessTokenVerb();
      doReturn(clientAuthentication0).when(defaultApi20_0).getClientAuthentication();
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, ""urn:ietf:params:oauth:grant-type:device_code"", ""urn:ietf:params:oauth:grant-type:device_code"", ""com.fasterxml.jackson.databind.ser.std.StdJdkSerializers$AtomicBooleanSerializer"", ""urn:ietf:params:oauth:grant-type:device_code"", """", mockPrintStream0, ""urn:ietf:params:oauth:grant-type:device_code"", jDKHttpClientConfig0, jDKHttpClient0);
      // Undeclared exception!
      try { 
        oAuth20Service0.getAccessTokenClientCredentialsGrant(""ChHIs4pJ"");
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // Malformed URL
         //
         verifyException(""com.github.scribejava.core.model.OAuthRequest"", e);
      }
  }"
144,"    public OAuth2AccessToken getAccessTokenClientCredentialsGrant()
            throws IOException, InterruptedException, ExecutionException {
        final OAuthRequest request = createAccessTokenClientCredentialsGrantRequest(null);

        return sendAccessTokenRequestSync(request);
    }","  public void test138()  throws Throwable  {
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(defaultApi20_0).getAccessTokenEndpoint();
      doReturn((Verb) null).when(defaultApi20_0).getAccessTokenVerb();
      doReturn((ClientAuthentication) null).when(defaultApi20_0).getClientAuthentication();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, ""n1N_D"", ""n1N_D"", ""client_id"", (String) null, ""got DeviceAuthorizationCodes response"", pipedOutputStream0, """", jDKHttpClientConfig0, jDKHttpClient0);
      // Undeclared exception!
      try { 
        oAuth20Service0.getAccessTokenClientCredentialsGrant((String) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""com.github.scribejava.core.oauth.OAuth20Service"", e);
      }
  }"
145,"    public OAuth2AccessToken getAccessTokenClientCredentialsGrant()
            throws IOException, InterruptedException, ExecutionException {
        final OAuthRequest request = createAccessTokenClientCredentialsGrantRequest(null);

        return sendAccessTokenRequestSync(request);
    }","  public void test139()  throws Throwable  {
      Verb verb0 = Verb.PUT;
      ClientAuthentication clientAuthentication0 = mock(ClientAuthentication.class, new ViolatedAssumptionAnswer());
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(defaultApi20_0).getAccessTokenEndpoint();
      doReturn(verb0).when(defaultApi20_0).getAccessTokenVerb();
      doReturn(clientAuthentication0).when(defaultApi20_0).getClientAuthentication();
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, """", ""B<"", ""E?~Y0d~"", """", ""E?~Y0d~"", (OutputStream) null, """", jDKHttpClientConfig0, jDKHttpClient0);
      // Undeclared exception!
      try { 
        oAuth20Service0.getAccessTokenClientCredentialsGrant(""Device Authorization Codes"");
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Cannot append to null URL
         //
         verifyException(""com.github.scribejava.core.utils.Preconditions"", e);
      }
  }"
146,"    public OAuth2AccessToken getAccessTokenClientCredentialsGrant()
            throws IOException, InterruptedException, ExecutionException {
        final OAuthRequest request = createAccessTokenClientCredentialsGrantRequest(null);

        return sendAccessTokenRequestSync(request);
    }","  public void test140()  throws Throwable  {
      Verb verb0 = Verb.GET;
      ClientAuthentication clientAuthentication0 = mock(ClientAuthentication.class, new ViolatedAssumptionAnswer());
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn("""").when(defaultApi20_0).getAccessTokenEndpoint();
      doReturn(verb0).when(defaultApi20_0).getAccessTokenVerb();
      doReturn(clientAuthentication0).when(defaultApi20_0).getClientAuthentication();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient();
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, ""Unexpected IOException (of type %s): %s"", ""M&/c=~G%xnCf"", ""Unexpected IOException (of type %s): %s"", ""M&/c=~G%xnCf"", """", mockPrintStream0, """", jDKHttpClientConfig0, jDKHttpClient0);
      OAuthAsyncRequestCallback<OAuth2AccessToken> oAuthAsyncRequestCallback0 = (OAuthAsyncRequestCallback<OAuth2AccessToken>) mock(OAuthAsyncRequestCallback.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        oAuth20Service0.getAccessTokenClientCredentialsGrant(oAuthAsyncRequestCallback0);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // Malformed URL
         //
         verifyException(""com.github.scribejava.core.model.OAuthRequest"", e);
      }
  }"
147,"    public OAuth2AccessToken getAccessTokenClientCredentialsGrant()
            throws IOException, InterruptedException, ExecutionException {
        final OAuthRequest request = createAccessTokenClientCredentialsGrantRequest(null);

        return sendAccessTokenRequestSync(request);
    }","  public void test141()  throws Throwable  {
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(defaultApi20_0).getAccessTokenEndpoint();
      doReturn((Verb) null).when(defaultApi20_0).getAccessTokenVerb();
      doReturn((ClientAuthentication) null).when(defaultApi20_0).getClientAuthentication();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient();
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, ""com.github.scribejava.core.oauth.OAuth20Service$4"", ""com.github.scribejava.core.oauth.OAuth20Service$4"", ""com.github.scribejava.core.oauth.OAuth20Service$4"", ""com.github.scribejava.core.oauth.OAuth20Service$4"", ""com.github.scribejava.core.oauth.OAuth20Service$4"", byteArrayOutputStream0, ""com.github.scribejava.core.oauth.OAuth20Service$4"", jDKHttpClientConfig0, jDKHttpClient0);
      OAuthAsyncRequestCallback<OAuth2AccessToken> oAuthAsyncRequestCallback0 = (OAuthAsyncRequestCallback<OAuth2AccessToken>) mock(OAuthAsyncRequestCallback.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        oAuth20Service0.getAccessTokenClientCredentialsGrant(oAuthAsyncRequestCallback0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""com.github.scribejava.core.oauth.OAuth20Service"", e);
      }
  }"
148,"    public OAuth2AccessToken getAccessTokenClientCredentialsGrant()
            throws IOException, InterruptedException, ExecutionException {
        final OAuthRequest request = createAccessTokenClientCredentialsGrantRequest(null);

        return sendAccessTokenRequestSync(request);
    }","  public void test142()  throws Throwable  {
      ClientAuthentication clientAuthentication0 = mock(ClientAuthentication.class, new ViolatedAssumptionAnswer());
      Verb verb0 = Verb.HEAD;
      ClientAuthentication clientAuthentication1 = mock(ClientAuthentication.class, new ViolatedAssumptionAnswer());
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn(""state"", (String) null).when(defaultApi20_0).getAccessTokenEndpoint();
      doReturn(verb0, verb0).when(defaultApi20_0).getAccessTokenVerb();
      doReturn(clientAuthentication0, clientAuthentication1).when(defaultApi20_0).getClientAuthentication();
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient();
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, ""grant_yp"", ""h}4g,CP"", ""h}4g,CP"", ""grant_yp"", ""H0!_B%jy"", (OutputStream) null, ""Problem accessing property `"", jDKHttpClientConfig0, jDKHttpClient0);
      OAuthAsyncRequestCallback<OAuth2AccessToken> oAuthAsyncRequestCallback0 = (OAuthAsyncRequestCallback<OAuth2AccessToken>) mock(OAuthAsyncRequestCallback.class, new ViolatedAssumptionAnswer());
      oAuth20Service0.getAccessToken(""/[:(EYa15i5g3"", oAuthAsyncRequestCallback0);
      OAuthAsyncRequestCallback<OAuth2AccessToken> oAuthAsyncRequestCallback1 = (OAuthAsyncRequestCallback<OAuth2AccessToken>) mock(OAuthAsyncRequestCallback.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        oAuth20Service0.getAccessTokenClientCredentialsGrant(oAuthAsyncRequestCallback1);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Cannot append to null URL
         //
         verifyException(""com.github.scribejava.core.utils.Preconditions"", e);
      }
  }"
149,"    public OAuth2AccessToken getAccessTokenClientCredentialsGrant()
            throws IOException, InterruptedException, ExecutionException {
        final OAuthRequest request = createAccessTokenClientCredentialsGrantRequest(null);

        return sendAccessTokenRequestSync(request);
    }","  public void test143()  throws Throwable  {
      Verb verb0 = Verb.GET;
      ClientAuthentication clientAuthentication0 = mock(ClientAuthentication.class, new ViolatedAssumptionAnswer());
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn("""").when(defaultApi20_0).getAccessTokenEndpoint();
      doReturn(verb0).when(defaultApi20_0).getAccessTokenVerb();
      doReturn(clientAuthentication0).when(defaultApi20_0).getClientAuthentication();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(110);
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, ""com.fasterxml.jackson.databind.ser.std.NumberSerializers$ShortSerializer"", ""com.fasterxml.jackson.databind.ser.std.NumberSerializers$ShortSerializer"", ""com.fasterxml.jackson.databind.ser.std.NumberSerializers$ShortSerializer"", ""com.fasterxml.jackson.databind.ser.std.NumberSerializers$ShortSerializer"", ""com.fasterxml.jackson.databind.ser.std.NumberSerializers$ShortSerializer"", byteArrayOutputStream0, """", jDKHttpClientConfig0, (HttpClient) null);
      // Undeclared exception!
      try { 
        oAuth20Service0.getAccessTokenClientCredentialsGrant();
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // Malformed URL
         //
         verifyException(""com.github.scribejava.core.model.OAuthRequest"", e);
      }
  }"
150,"    public OAuth2AccessToken getAccessTokenClientCredentialsGrant()
            throws IOException, InterruptedException, ExecutionException {
        final OAuthRequest request = createAccessTokenClientCredentialsGrantRequest(null);

        return sendAccessTokenRequestSync(request);
    }","  public void test144()  throws Throwable  {
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient();
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(defaultApi20_0).getAccessTokenEndpoint();
      doReturn((Verb) null).when(defaultApi20_0).getAccessTokenVerb();
      doReturn((ClientAuthentication) null).when(defaultApi20_0).getClientAuthentication();
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, """", ""E5]_"", """", """", """", (OutputStream) null, ""^FF% ^HH y=#0Gh`1Jz"", jDKHttpClientConfig0, jDKHttpClient0);
      // Undeclared exception!
      try { 
        oAuth20Service0.getAccessTokenClientCredentialsGrant();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""com.github.scribejava.core.oauth.OAuth20Service"", e);
      }
  }"
151,"    public OAuth2AccessToken getAccessTokenClientCredentialsGrant()
            throws IOException, InterruptedException, ExecutionException {
        final OAuthRequest request = createAccessTokenClientCredentialsGrantRequest(null);

        return sendAccessTokenRequestSync(request);
    }","  public void test145()  throws Throwable  {
      ClientAuthentication clientAuthentication0 = mock(ClientAuthentication.class, new ViolatedAssumptionAnswer());
      Verb verb0 = Verb.HEAD;
      ClientAuthentication clientAuthentication1 = mock(ClientAuthentication.class, new ViolatedAssumptionAnswer());
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn(""state"", (String) null).when(defaultApi20_0).getAccessTokenEndpoint();
      doReturn(verb0, verb0).when(defaultApi20_0).getAccessTokenVerb();
      doReturn(clientAuthentication0, clientAuthentication1).when(defaultApi20_0).getClientAuthentication();
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient();
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, ""grant_yp"", ""h}4g,CP"", ""h}4g,CP"", ""grant_yp"", ""H0!_B%jy"", (OutputStream) null, ""Problem accessing property `"", jDKHttpClientConfig0, jDKHttpClient0);
      OAuthAsyncRequestCallback<OAuth2AccessToken> oAuthAsyncRequestCallback0 = (OAuthAsyncRequestCallback<OAuth2AccessToken>) mock(OAuthAsyncRequestCallback.class, new ViolatedAssumptionAnswer());
      oAuth20Service0.getAccessToken(""/[:(EYa15i5g3"", oAuthAsyncRequestCallback0);
      // Undeclared exception!
      try { 
        oAuth20Service0.getAccessTokenClientCredentialsGrant();
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Cannot append to null URL
         //
         verifyException(""com.github.scribejava.core.utils.Preconditions"", e);
      }
  }"
152,"    public Future<OAuth2AccessToken> getAccessTokenAsync(String code) {
        return getAccessToken(AccessTokenRequestParams.create(code), null);
    }","  public void test146()  throws Throwable  {
      Verb verb0 = Verb.DELETE;
      ClientAuthentication clientAuthentication0 = mock(ClientAuthentication.class, new ViolatedAssumptionAnswer());
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(defaultApi20_0).getAccessTokenEndpoint();
      doReturn(verb0).when(defaultApi20_0).getAccessTokenVerb();
      doReturn(clientAuthentication0).when(defaultApi20_0).getClientAuthentication();
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, ""Tb Iylw[q"", (String) null, ""device_code"", """", "" does not support schema of type '"", byteArrayOutputStream0, "" does not support schema of type '"", jDKHttpClientConfig0, jDKHttpClient0);
      // Undeclared exception!
      try { 
        oAuth20Service0.getAccessTokenAsync(""Tb Iylw[q"");
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // Malformed URL
         //
         verifyException(""com.github.scribejava.core.model.OAuthRequest"", e);
      }
  }"
153,"    public Future<OAuth2AccessToken> getAccessTokenAsync(String code) {
        return getAccessToken(AccessTokenRequestParams.create(code), null);
    }","  public void test147()  throws Throwable  {
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(defaultApi20_0).getAccessTokenEndpoint();
      doReturn((Verb) null).when(defaultApi20_0).getAccessTokenVerb();
      doReturn((ClientAuthentication) null).when(defaultApi20_0).getClientAuthentication();
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, """", """", """", """", ""M5GsRZVNr"", (OutputStream) null, (String) null, jDKHttpClientConfig0, jDKHttpClient0);
      // Undeclared exception!
      try { 
        oAuth20Service0.getAccessTokenAsync(""refresh_token"");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""com.github.scribejava.core.oauth.OAuth20Service"", e);
      }
  }"
154,"    public Future<OAuth2AccessToken> getAccessTokenAsync(String code) {
        return getAccessToken(AccessTokenRequestParams.create(code), null);
    }","  public void test148()  throws Throwable  {
      Verb verb0 = Verb.GET;
      ClientAuthentication clientAuthentication0 = mock(ClientAuthentication.class, new ViolatedAssumptionAnswer());
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(defaultApi20_0).getAccessTokenEndpoint();
      doReturn(verb0).when(defaultApi20_0).getAccessTokenVerb();
      doReturn(clientAuthentication0).when(defaultApi20_0).getClientAuthentication();
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, ""USE_BASE_TYPE_AS_DEFAULT_IMPL"", ""USE_BASE_TYPE_AS_DEFAULT_IMPL"", ""v'?9];m;fSQTcg3.%8"", (String) null, ""3'FI<\""y7lH8?!kyEmX>"", (OutputStream) null, ""v'?9];m;fSQTcg3.%8"", jDKHttpClientConfig0, jDKHttpClient0);
      // Undeclared exception!
      try { 
        oAuth20Service0.getAccessTokenAsync("""");
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Cannot append to null URL
         //
         verifyException(""com.github.scribejava.core.utils.Preconditions"", e);
      }
  }"
155,"    public Future<OAuth2AccessToken> getAccessTokenAsync(String code) {
        return getAccessToken(AccessTokenRequestParams.create(code), null);
    }","  public void test149()  throws Throwable  {
      Verb verb0 = Verb.PATCH;
      ClientAuthentication clientAuthentication0 = mock(ClientAuthentication.class, new ViolatedAssumptionAnswer());
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn("""").when(defaultApi20_0).getAccessTokenEndpoint();
      doReturn(verb0).when(defaultApi20_0).getAccessTokenVerb();
      doReturn(clientAuthentication0).when(defaultApi20_0).getClientAuthentication();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(""h (np54Vr%FF.NU1J"", true);
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient();
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, """", "",1|wi6rvxKNh"", ""h (np54Vr%FF.NU1J"", ""h (np54Vr%FF.NU1J"", ""h (np54Vr%FF.NU1J"", mockFileOutputStream0, "",1|wi6rvxKNh"", jDKHttpClientConfig0, jDKHttpClient0);
      AccessTokenRequestParams accessTokenRequestParams0 = AccessTokenRequestParams.create("""");
      // Undeclared exception!
      try { 
        oAuth20Service0.getAccessTokenAsync(accessTokenRequestParams0);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // Malformed URL
         //
         verifyException(""com.github.scribejava.core.model.OAuthRequest"", e);
      }
  }"
156,"    public Future<OAuth2AccessToken> getAccessTokenAsync(String code) {
        return getAccessToken(AccessTokenRequestParams.create(code), null);
    }","  public void test150()  throws Throwable  {
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(defaultApi20_0).getAccessTokenEndpoint();
      doReturn((Verb) null).when(defaultApi20_0).getAccessTokenVerb();
      doReturn((ClientAuthentication) null).when(defaultApi20_0).getClientAuthentication();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(""h (np54Vr%FF.NU1J"", true);
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient();
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, """", "",1|wi6rvxKNh"", ""h (np54Vr%FF.NU1J"", ""h (np54Vr%FF.NU1J"", ""h (np54Vr%FF.NU1J"", mockFileOutputStream0, "",1|wi6rvxKNh"", jDKHttpClientConfig0, jDKHttpClient0);
      AccessTokenRequestParams accessTokenRequestParams0 = AccessTokenRequestParams.create("""");
      // Undeclared exception!
      try { 
        oAuth20Service0.getAccessTokenAsync(accessTokenRequestParams0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""com.github.scribejava.core.oauth.OAuth20Service"", e);
      }
  }"
157,"    public OAuth2AccessToken getAccessToken(String code) throws IOException, InterruptedException, ExecutionException {
        return getAccessToken(AccessTokenRequestParams.create(code));
    }","  public void test151()  throws Throwable  {
      Verb verb0 = Verb.TRACE;
      ClientAuthentication clientAuthentication0 = mock(ClientAuthentication.class, new ViolatedAssumptionAnswer());
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(defaultApi20_0).getAccessTokenEndpoint();
      doReturn(verb0).when(defaultApi20_0).getAccessTokenVerb();
      doReturn(clientAuthentication0).when(defaultApi20_0).getClientAuthentication();
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, ""urn:ietf:params:oauth:grant-type:device_code"", ""urn:ietf:params:oauth:grant-type:device_code"", ""com.fasterxml.jackson.databind.ser.std.StdJdkSerializers$AtomicBooleanSerializer"", ""urn:ietf:params:oauth:grant-type:device_code"", """", mockPrintStream0, ""urn:ietf:params:oauth:grant-type:device_code"", jDKHttpClientConfig0, jDKHttpClient0);
      OAuthAsyncRequestCallback<OAuth2AccessToken> oAuthAsyncRequestCallback0 = (OAuthAsyncRequestCallback<OAuth2AccessToken>) mock(OAuthAsyncRequestCallback.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        oAuth20Service0.getAccessToken(""-f"", oAuthAsyncRequestCallback0);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // Malformed URL
         //
         verifyException(""com.github.scribejava.core.model.OAuthRequest"", e);
      }
  }"
158,"    public OAuth2AccessToken getAccessToken(String code) throws IOException, InterruptedException, ExecutionException {
        return getAccessToken(AccessTokenRequestParams.create(code));
    }","  public void test152()  throws Throwable  {
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(defaultApi20_0).getAccessTokenEndpoint();
      doReturn((Verb) null).when(defaultApi20_0).getAccessTokenVerb();
      doReturn((ClientAuthentication) null).when(defaultApi20_0).getClientAuthentication();
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, """", """", ""t=tSIYs3N52"", """", ""revoke token"", (OutputStream) null, """", jDKHttpClientConfig0, (HttpClient) null);
      OAuthAsyncRequestCallback<OAuth2AccessToken> oAuthAsyncRequestCallback0 = (OAuthAsyncRequestCallback<OAuth2AccessToken>) mock(OAuthAsyncRequestCallback.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        oAuth20Service0.getAccessToken("""", oAuthAsyncRequestCallback0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""com.github.scribejava.core.oauth.OAuth20Service"", e);
      }
  }"
159,"    public OAuth2AccessToken getAccessToken(String code) throws IOException, InterruptedException, ExecutionException {
        return getAccessToken(AccessTokenRequestParams.create(code));
    }","  public void test153()  throws Throwable  {
      Verb verb0 = Verb.GET;
      ClientAuthentication clientAuthentication0 = mock(ClientAuthentication.class, new ViolatedAssumptionAnswer());
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(defaultApi20_0).getAccessTokenEndpoint();
      doReturn(verb0).when(defaultApi20_0).getAccessTokenVerb();
      doReturn(clientAuthentication0).when(defaultApi20_0).getClientAuthentication();
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, ""USE_BASE_TYPE_AS_DEFAULT_IMPL"", ""USE_BASE_TYPE_AS_DEFAULT_IMPL"", ""v'?9];m;fSQTcg3.%8"", (String) null, ""3'FI<\""y7lH8?!kyEmX>"", (OutputStream) null, ""v'?9];m;fSQTcg3.%8"", jDKHttpClientConfig0, jDKHttpClient0);
      // Undeclared exception!
      try { 
        oAuth20Service0.getAccessToken((String) null, (OAuthAsyncRequestCallback<OAuth2AccessToken>) null);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Cannot append to null URL
         //
         verifyException(""com.github.scribejava.core.utils.Preconditions"", e);
      }
  }"
160,"    public OAuth2AccessToken getAccessToken(String code) throws IOException, InterruptedException, ExecutionException {
        return getAccessToken(AccessTokenRequestParams.create(code));
    }","  public void test154()  throws Throwable  {
      Verb verb0 = Verb.HEAD;
      ClientAuthentication clientAuthentication0 = mock(ClientAuthentication.class, new ViolatedAssumptionAnswer());
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn(""Jw-0["").when(defaultApi20_0).getAccessTokenEndpoint();
      doReturn(verb0).when(defaultApi20_0).getAccessTokenVerb();
      doReturn(clientAuthentication0).when(defaultApi20_0).getClientAuthentication();
      MockPrintStream mockPrintStream0 = new MockPrintStream(""not a valid `double` value (as String to convert)"");
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient();
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, ""+wu/q:1!"", ""+wu/q:1!"", """", ""NY|-"", (String) null, mockPrintStream0, ""com.github.scribejava.core.oauth.OAuth20Service"", jDKHttpClientConfig0, jDKHttpClient0);
      // Undeclared exception!
      try { 
        oAuth20Service0.getAccessToken(""kheX7tyDh8p=f"");
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // Malformed URL
         //
         verifyException(""com.github.scribejava.core.model.OAuthRequest"", e);
      }
  }"
161,"    public OAuth2AccessToken getAccessToken(String code) throws IOException, InterruptedException, ExecutionException {
        return getAccessToken(AccessTokenRequestParams.create(code));
    }","  public void test155()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient();
      OAuth20Service oAuth20Service0 = new OAuth20Service((DefaultApi20) null, "">tBljHfprhu)hTI"", "">tBljHfprhu)hTI"", "">tBljHfprhu)hTI"", "">tBljHfprhu)hTI"", "">tBljHfprhu)hTI"", byteArrayOutputStream0, "">tBljHfprhu)hTI"", jDKHttpClientConfig0, jDKHttpClient0);
      // Undeclared exception!
      try { 
        oAuth20Service0.getAccessToken("">tBljHfprhu)hTI"");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""com.github.scribejava.core.oauth.OAuth20Service"", e);
      }
  }"
162,"    public OAuth2AccessToken getAccessToken(String code) throws IOException, InterruptedException, ExecutionException {
        return getAccessToken(AccessTokenRequestParams.create(code));
    }","  public void test156()  throws Throwable  {
      Verb verb0 = Verb.OPTIONS;
      ClientAuthentication clientAuthentication0 = mock(ClientAuthentication.class, new ViolatedAssumptionAnswer());
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn(""access tokn"").when(defaultApi20_0).getAccessTokenEndpoint();
      doReturn(verb0).when(defaultApi20_0).getAccessTokenVerb();
      doReturn(clientAuthentication0).when(defaultApi20_0).getClientAuthentication();
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, ""k?VKA'"", ""-"", ""k?VKA'"", ""k?VKA'"", ""3lp"", (OutputStream) null, ""-"", jDKHttpClientConfig0, jDKHttpClient0);
      // Undeclared exception!
      try { 
        oAuth20Service0.getAccessToken((String) null);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Cannot encode null object
         //
         verifyException(""com.github.scribejava.core.utils.Preconditions"", e);
      }
  }"
163,"    public OAuth2AccessToken getAccessToken(String code) throws IOException, InterruptedException, ExecutionException {
        return getAccessToken(AccessTokenRequestParams.create(code));
    }","  public void test157()  throws Throwable  {
      ClientAuthentication clientAuthentication0 = mock(ClientAuthentication.class, new ViolatedAssumptionAnswer());
      MockFile mockFile0 = new MockFile(""Oj%a|\""l'6r4gc)#L"");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient();
      Verb verb0 = Verb.PATCH;
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn(""9'jl,GVl{3Qe}qA"").when(defaultApi20_0).getAccessTokenEndpoint();
      doReturn(verb0).when(defaultApi20_0).getAccessTokenVerb();
      doReturn(clientAuthentication0).when(defaultApi20_0).getClientAuthentication();
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, ""}"", ""Could not resolve type id '%s' as a subtype of %s"", ""<"", (String) null, ""9'jl,GVl{3Qe}qA"", mockPrintStream0, ""23`9"", jDKHttpClientConfig0, jDKHttpClient0);
      AccessTokenRequestParams accessTokenRequestParams0 = new AccessTokenRequestParams(""Expected space separting root-leve values"");
      OAuthAsyncRequestCallback<OAuth2AccessToken> oAuthAsyncRequestCallback0 = (OAuthAsyncRequestCallback<OAuth2AccessToken>) mock(OAuthAsyncRequestCallback.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        oAuth20Service0.getAccessToken(accessTokenRequestParams0, oAuthAsyncRequestCallback0);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // Malformed URL
         //
         verifyException(""com.github.scribejava.core.model.OAuthRequest"", e);
      }
  }"
164,"    public OAuth2AccessToken getAccessToken(String code) throws IOException, InterruptedException, ExecutionException {
        return getAccessToken(AccessTokenRequestParams.create(code));
    }","  public void test158()  throws Throwable  {
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(defaultApi20_0).getAccessTokenEndpoint();
      doReturn((Verb) null).when(defaultApi20_0).getAccessTokenVerb();
      doReturn((ClientAuthentication) null).when(defaultApi20_0).getClientAuthentication();
      MockFile mockFile0 = new MockFile(""access token password grant"");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient((JDKHttpClientConfig) null);
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, ""access token password grant"", ""access token password grant"", """", """", (String) null, mockPrintStream0, ""55R*7 c<w3h"", jDKHttpClientConfig0, jDKHttpClient0);
      AccessTokenRequestParams accessTokenRequestParams0 = new AccessTokenRequestParams(""Zd(zr%/K(>1"");
      OAuthAsyncRequestCallback<OAuth2AccessToken> oAuthAsyncRequestCallback0 = (OAuthAsyncRequestCallback<OAuth2AccessToken>) mock(OAuthAsyncRequestCallback.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        oAuth20Service0.getAccessToken(accessTokenRequestParams0, oAuthAsyncRequestCallback0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""com.github.scribejava.core.oauth.OAuth20Service"", e);
      }
  }"
165,"    public OAuth2AccessToken getAccessToken(String code) throws IOException, InterruptedException, ExecutionException {
        return getAccessToken(AccessTokenRequestParams.create(code));
    }","  public void test159()  throws Throwable  {
      Verb verb0 = Verb.GET;
      ClientAuthentication clientAuthentication0 = mock(ClientAuthentication.class, new ViolatedAssumptionAnswer());
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(defaultApi20_0).getAccessTokenEndpoint();
      doReturn(verb0).when(defaultApi20_0).getAccessTokenVerb();
      doReturn(clientAuthentication0).when(defaultApi20_0).getClientAuthentication();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, ""gTDtni%0pg)5 r+0r8G"", ""\""ED|lEBtz/ZI[a"", ""gTDtni%0pg)5 r+0r8G"", (String) null, (String) null, pipedOutputStream0, (String) null, jDKHttpClientConfig0, (HttpClient) null);
      AccessTokenRequestParams accessTokenRequestParams0 = AccessTokenRequestParams.create((String) null);
      // Undeclared exception!
      try { 
        oAuth20Service0.getAccessToken(accessTokenRequestParams0);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // Malformed URL
         //
         verifyException(""com.github.scribejava.core.model.OAuthRequest"", e);
      }
  }"
166,"    public OAuth2AccessToken getAccessToken(String code) throws IOException, InterruptedException, ExecutionException {
        return getAccessToken(AccessTokenRequestParams.create(code));
    }","  public void test160()  throws Throwable  {
      ClientAuthentication clientAuthentication0 = mock(ClientAuthentication.class, new ViolatedAssumptionAnswer());
      Verb verb0 = Verb.POST;
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn("""").when(defaultApi20_0).getAccessTokenEndpoint();
      doReturn(verb0).when(defaultApi20_0).getAccessTokenVerb();
      doReturn(clientAuthentication0).when(defaultApi20_0).getClientAuthentication();
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient();
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, """", """", ""Problem accessing property '"", """", ""B"", (OutputStream) null, ""uT=LoUwCQmA4QY"", jDKHttpClientConfig0, jDKHttpClient0);
      AccessTokenRequestParams accessTokenRequestParams0 = new AccessTokenRequestParams("""");
      try { 
        oAuth20Service0.getAccessToken(accessTokenRequestParams0);
        fail(""Expecting exception: MalformedURLException"");
      } catch(MalformedURLException e) {
         //
         // no protocol: 
         //
         verifyException(""java.net.URL"", e);
      }
  }"
167,"    public OAuth2AccessToken getAccessToken(String code) throws IOException, InterruptedException, ExecutionException {
        return getAccessToken(AccessTokenRequestParams.create(code));
    }","  public void test161()  throws Throwable  {
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(defaultApi20_0).getAccessTokenEndpoint();
      doReturn((Verb) null).when(defaultApi20_0).getAccessTokenVerb();
      doReturn((ClientAuthentication) null).when(defaultApi20_0).getClientAuthentication();
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, """", """", ""revoke token"", (String) null, ""authorization_pending"", (OutputStream) null, """", jDKHttpClientConfig0, jDKHttpClient0);
      AccessTokenRequestParams accessTokenRequestParams0 = new AccessTokenRequestParams((String) null);
      // Undeclared exception!
      try { 
        oAuth20Service0.getAccessToken(accessTokenRequestParams0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""com.github.scribejava.core.oauth.OAuth20Service"", e);
      }
  }"
168,"    public OAuth2Authorization extractAuthorization(String redirectLocation) {
        final OAuth2Authorization authorization = new OAuth2Authorization();
        int end = redirectLocation.indexOf('#');
        if (end == -1) {
            end = redirectLocation.length();
        }
        for (String param : redirectLocation.substring(redirectLocation.indexOf('?') + 1, end).split(""&"")) {
            final String[] keyValue = param.split(""="");
            if (keyValue.length == 2) {
                try {
                    switch (keyValue[0]) {
                        case ""code"":
                            authorization.setCode(URLDecoder.decode(keyValue[1], ""UTF-8""));
                            break;
                        case ""state"":
                            authorization.setState(URLDecoder.decode(keyValue[1], ""UTF-8""));
                            break;
                        default: //just ignore any other param;
                    }
                } catch (UnsupportedEncodingException ueE) {
                    throw new IllegalStateException(""jvm without UTF-8, really?"", ueE);
                }
            }
        }
        return authorization;
    }","  public void test162()  throws Throwable  {
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, ""k?VKA'"", ""_F"", ""k?VKA'"", ""k?VKA'"", ""3lp"", (OutputStream) null, ""_F"", jDKHttpClientConfig0, jDKHttpClient0);
      // Undeclared exception!
      try { 
        oAuth20Service0.extractAuthorization((String) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""com.github.scribejava.core.oauth.OAuth20Service"", e);
      }
  }"
169,"    protected OAuthRequest createRevokeTokenRequest(String tokenToRevoke, TokenTypeHint tokenTypeHint) {
        final OAuthRequest request = new OAuthRequest(Verb.POST, api.getRevokeTokenEndpoint());

        api.getClientAuthentication().addClientAuthentication(request, getApiKey(), getApiSecret());

        request.addParameter(""token"", tokenToRevoke);
        if (tokenTypeHint != null) {
            request.addParameter(""token_type_hint"", tokenTypeHint.getValue());
        }

        logRequestWithParams(""revoke token"", request);

        return request;
    }","  public void test163()  throws Throwable  {
      ClientAuthentication clientAuthentication0 = mock(ClientAuthentication.class, new ViolatedAssumptionAnswer());
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn(clientAuthentication0).when(defaultApi20_0).getClientAuthentication();
      doReturn(""Fv{D6n:R2x|}7 #"").when(defaultApi20_0).getRevokeTokenEndpoint();
      MockFile mockFile0 = new MockFile(""U7W&Meduxl"");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, ""7O;H8.aK\"""", ""U7W&Meduxl"", ""7O;H8.aK\"""", ""U7W&Meduxl"", ""U7W&Meduxl"", mockFileOutputStream0, ""revoke token"", jDKHttpClientConfig0, (HttpClient) null);
      TokenTypeHint tokenTypeHint0 = TokenTypeHint.ACCESS_TOKEN;
      // Undeclared exception!
      try { 
        oAuth20Service0.createRevokeTokenRequest("""", tokenTypeHint0);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // Malformed URL
         //
         verifyException(""com.github.scribejava.core.model.OAuthRequest"", e);
      }
  }"
170,"    protected OAuthRequest createRevokeTokenRequest(String tokenToRevoke, TokenTypeHint tokenTypeHint) {
        final OAuthRequest request = new OAuthRequest(Verb.POST, api.getRevokeTokenEndpoint());

        api.getClientAuthentication().addClientAuthentication(request, getApiKey(), getApiSecret());

        request.addParameter(""token"", tokenToRevoke);
        if (tokenTypeHint != null) {
            request.addParameter(""token_type_hint"", tokenTypeHint.getValue());
        }

        logRequestWithParams(""revoke token"", request);

        return request;
    }","  public void test164()  throws Throwable  {
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn((ClientAuthentication) null).when(defaultApi20_0).getClientAuthentication();
      doReturn((String) null).when(defaultApi20_0).getRevokeTokenEndpoint();
      MockFile mockFile0 = new MockFile(""e"");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockFileOutputStream0);
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, (String) null, ""value not one of declared Enum instance names for %s"", ""e"", ""e"", (String) null, filterOutputStream0, ""e"", jDKHttpClientConfig0, jDKHttpClient0);
      TokenTypeHint tokenTypeHint0 = TokenTypeHint.REFRESH_TOKEN;
      // Undeclared exception!
      try { 
        oAuth20Service0.createRevokeTokenRequest((String) null, tokenTypeHint0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""com.github.scribejava.core.oauth.OAuth20Service"", e);
      }
  }"
171,"    protected OAuthRequest createRevokeTokenRequest(String tokenToRevoke, TokenTypeHint tokenTypeHint) {
        final OAuthRequest request = new OAuthRequest(Verb.POST, api.getRevokeTokenEndpoint());

        api.getClientAuthentication().addClientAuthentication(request, getApiKey(), getApiSecret());

        request.addParameter(""token"", tokenToRevoke);
        if (tokenTypeHint != null) {
            request.addParameter(""token_type_hint"", tokenTypeHint.getValue());
        }

        logRequestWithParams(""revoke token"", request);

        return request;
    }","  public void test165()  throws Throwable  {
      ClientAuthentication clientAuthentication0 = mock(ClientAuthentication.class, new ViolatedAssumptionAnswer());
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn(clientAuthentication0).when(defaultApi20_0).getClientAuthentication();
      doReturn(""d"").when(defaultApi20_0).getRevokeTokenEndpoint();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient();
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, (String) null, (String) null, (String) null, """", (String) null, pipedOutputStream0, (String) null, jDKHttpClientConfig0, jDKHttpClient0);
      TokenTypeHint tokenTypeHint0 = TokenTypeHint.ACCESS_TOKEN;
      // Undeclared exception!
      try { 
        oAuth20Service0.createRevokeTokenRequest((String) null, tokenTypeHint0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Cannot encode null object
         //
         verifyException(""com.github.scribejava.core.utils.Preconditions"", e);
      }
  }"
172,"    protected OAuthRequest createRefreshTokenRequest(String refreshToken, String scope) {
        if (refreshToken == null || refreshToken.isEmpty()) {
            throw new IllegalArgumentException(""The refreshToken cannot be null or empty"");
        }
        final OAuthRequest request = new OAuthRequest(api.getAccessTokenVerb(), api.getRefreshTokenEndpoint());

        api.getClientAuthentication().addClientAuthentication(request, getApiKey(), getApiSecret());

        if (scope != null) {
            request.addParameter(OAuthConstants.SCOPE, scope);
        } else if (defaultScope != null) {
            request.addParameter(OAuthConstants.SCOPE, defaultScope);
        }

        request.addParameter(OAuthConstants.REFRESH_TOKEN, refreshToken);
        request.addParameter(OAuthConstants.GRANT_TYPE, OAuthConstants.REFRESH_TOKEN);

        logRequestWithParams(""refresh token"", request);

        return request;
    }","  public void test166()  throws Throwable  {
      Verb verb0 = Verb.HEAD;
      ClientAuthentication clientAuthentication0 = mock(ClientAuthentication.class, new ViolatedAssumptionAnswer());
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn(verb0).when(defaultApi20_0).getAccessTokenVerb();
      doReturn(clientAuthentication0).when(defaultApi20_0).getClientAuthentication();
      doReturn((String) null).when(defaultApi20_0).getRefreshTokenEndpoint();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient();
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, ""com.github.scribejava.core.oauth.OAuth20Service$4"", ""com.github.scribejava.core.oauth.OAuth20Service$4"", ""com.github.scribejava.core.oauth.OAuth20Service$4"", ""com.github.scribejava.core.oauth.OAuth20Service$4"", ""com.github.scribejava.core.oauth.OAuth20Service$4"", byteArrayOutputStream0, ""com.github.scribejava.core.oauth.OAuth20Service$4"", jDKHttpClientConfig0, jDKHttpClient0);
      // Undeclared exception!
      try { 
        oAuth20Service0.createRefreshTokenRequest(""com.github.scribejava.core.oauth.OAuth20Service$3"", ""No node at '%s' (unmatched part: '%s')"");
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // Malformed URL
         //
         verifyException(""com.github.scribejava.core.model.OAuthRequest"", e);
      }
  }"
173,"    protected OAuthRequest createRefreshTokenRequest(String refreshToken, String scope) {
        if (refreshToken == null || refreshToken.isEmpty()) {
            throw new IllegalArgumentException(""The refreshToken cannot be null or empty"");
        }
        final OAuthRequest request = new OAuthRequest(api.getAccessTokenVerb(), api.getRefreshTokenEndpoint());

        api.getClientAuthentication().addClientAuthentication(request, getApiKey(), getApiSecret());

        if (scope != null) {
            request.addParameter(OAuthConstants.SCOPE, scope);
        } else if (defaultScope != null) {
            request.addParameter(OAuthConstants.SCOPE, defaultScope);
        }

        request.addParameter(OAuthConstants.REFRESH_TOKEN, refreshToken);
        request.addParameter(OAuthConstants.GRANT_TYPE, OAuthConstants.REFRESH_TOKEN);

        logRequestWithParams(""refresh token"", request);

        return request;
    }","  public void test167()  throws Throwable  {
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn((Verb) null).when(defaultApi20_0).getAccessTokenVerb();
      doReturn((ClientAuthentication) null).when(defaultApi20_0).getClientAuthentication();
      doReturn((String) null).when(defaultApi20_0).getRefreshTokenEndpoint();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(""state"");
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient();
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, """", """", """", ""ln#sKb1&0}26(}h"", """", mockFileOutputStream0, ""haHK"", jDKHttpClientConfig0, jDKHttpClient0);
      // Undeclared exception!
      try { 
        oAuth20Service0.createRefreshTokenRequest("" does not support them"", (String) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""com.github.scribejava.core.oauth.OAuth20Service"", e);
      }
  }"
174,"    protected OAuthRequest createRefreshTokenRequest(String refreshToken, String scope) {
        if (refreshToken == null || refreshToken.isEmpty()) {
            throw new IllegalArgumentException(""The refreshToken cannot be null or empty"");
        }
        final OAuthRequest request = new OAuthRequest(api.getAccessTokenVerb(), api.getRefreshTokenEndpoint());

        api.getClientAuthentication().addClientAuthentication(request, getApiKey(), getApiSecret());

        if (scope != null) {
            request.addParameter(OAuthConstants.SCOPE, scope);
        } else if (defaultScope != null) {
            request.addParameter(OAuthConstants.SCOPE, defaultScope);
        }

        request.addParameter(OAuthConstants.REFRESH_TOKEN, refreshToken);
        request.addParameter(OAuthConstants.GRANT_TYPE, OAuthConstants.REFRESH_TOKEN);

        logRequestWithParams(""refresh token"", request);

        return request;
    }","  public void test168()  throws Throwable  {
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(26);
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, ""{|=f#!-&pISW9"", ""{|=f#!-&pISW9"", ""{|=f#!-&pISW9"", """", ""{|=f#!-&pISW9"", byteArrayOutputStream0, ""&"", jDKHttpClientConfig0, jDKHttpClient0);
      // Undeclared exception!
      try { 
        oAuth20Service0.createRefreshTokenRequest("""", """");
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // The refreshToken cannot be null or empty
         //
         verifyException(""com.github.scribejava.core.oauth.OAuth20Service"", e);
      }
  }"
175,"    protected OAuthRequest createDeviceAuthorizationCodesRequest(String scope) {
        final OAuthRequest request = new OAuthRequest(Verb.POST, api.getDeviceAuthorizationEndpoint());
        request.addParameter(OAuthConstants.CLIENT_ID, getApiKey());
        if (scope != null) {
            request.addParameter(OAuthConstants.SCOPE, scope);
        } else if (defaultScope != null) {
            request.addParameter(OAuthConstants.SCOPE, defaultScope);
        }

        logRequestWithParams(""Device Authorization Codes"", request);

        return request;
    }","  public void test169()  throws Throwable  {
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(defaultApi20_0).getDeviceAuthorizationEndpoint();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(pipedOutputStream0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(bufferedOutputStream0);
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, ""client_credentials"", ""client_credentials"", ""4(HK)2"", """", (String) null, mockPrintStream0, """", jDKHttpClientConfig0, jDKHttpClient0);
      // Undeclared exception!
      try { 
        oAuth20Service0.createDeviceAuthorizationCodesRequest(""4(HK)2"");
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // Malformed URL
         //
         verifyException(""com.github.scribejava.core.model.OAuthRequest"", e);
      }
  }"
176,"    protected OAuthRequest createDeviceAuthorizationCodesRequest(String scope) {
        final OAuthRequest request = new OAuthRequest(Verb.POST, api.getDeviceAuthorizationEndpoint());
        request.addParameter(OAuthConstants.CLIENT_ID, getApiKey());
        if (scope != null) {
            request.addParameter(OAuthConstants.SCOPE, scope);
        } else if (defaultScope != null) {
            request.addParameter(OAuthConstants.SCOPE, defaultScope);
        }

        logRequestWithParams(""Device Authorization Codes"", request);

        return request;
    }","  public void test170()  throws Throwable  {
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient();
      OAuth20Service oAuth20Service0 = new OAuth20Service((DefaultApi20) null, ""LG4.JLd<cU:"", (String) null, ""Sn]T!Rm2+aHf<\""Vt[v'"", """", ""xoO7`X fFP{c"", (OutputStream) null, """", jDKHttpClientConfig0, jDKHttpClient0);
      // Undeclared exception!
      try { 
        oAuth20Service0.createDeviceAuthorizationCodesRequest(""H0!_B%jy"");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""com.github.scribejava.core.oauth.OAuth20Service"", e);
      }
  }"
177,"    protected OAuthRequest createDeviceAuthorizationCodesRequest(String scope) {
        final OAuthRequest request = new OAuthRequest(Verb.POST, api.getDeviceAuthorizationEndpoint());
        request.addParameter(OAuthConstants.CLIENT_ID, getApiKey());
        if (scope != null) {
            request.addParameter(OAuthConstants.SCOPE, scope);
        } else if (defaultScope != null) {
            request.addParameter(OAuthConstants.SCOPE, defaultScope);
        }

        logRequestWithParams(""Device Authorization Codes"", request);

        return request;
    }","  public void test171()  throws Throwable  {
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(defaultApi20_0).getDeviceAuthorizationEndpoint();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(""Internal error: class %s not included as super-type for %s"");
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, (String) null, ""User-Agent"", ""User-Agent"", ""User-Agent"", ""iK5W9#EQ6#/"", mockFileOutputStream0, ""SHA-256"", jDKHttpClientConfig0, (HttpClient) null);
      // Undeclared exception!
      try { 
        oAuth20Service0.createDeviceAuthorizationCodesRequest(""com.github.scribejava.core.model.OAuthRequest"");
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Cannot encode null object
         //
         verifyException(""com.github.scribejava.core.utils.Preconditions"", e);
      }
  }"
178,"    protected OAuthRequest createAccessTokenRequest(AccessTokenRequestParams params) {
        final OAuthRequest request = new OAuthRequest(api.getAccessTokenVerb(), api.getAccessTokenEndpoint());

        api.getClientAuthentication().addClientAuthentication(request, getApiKey(), getApiSecret());

        request.addParameter(OAuthConstants.CODE, params.getCode());
        final String callback = getCallback();
        if (callback != null) {
            request.addParameter(OAuthConstants.REDIRECT_URI, callback);
        }
        final String scope = params.getScope();
        if (scope != null) {
            request.addParameter(OAuthConstants.SCOPE, scope);
        } else if (defaultScope != null) {
            request.addParameter(OAuthConstants.SCOPE, defaultScope);
        }
        request.addParameter(OAuthConstants.GRANT_TYPE, OAuthConstants.AUTHORIZATION_CODE);

        final String pkceCodeVerifier = params.getPkceCodeVerifier();
        if (pkceCodeVerifier != null) {
            request.addParameter(PKCE.PKCE_CODE_VERIFIER_PARAM, pkceCodeVerifier);
        }

        final Map<String, String> extraParameters = params.getExtraParameters();
        if (extraParameters != null && !extraParameters.isEmpty()) {
            for (Map.Entry<String, String> extraParameter : extraParameters.entrySet()) {
                request.addParameter(extraParameter.getKey(), extraParameter.getValue());
            }
        }

        logRequestWithParams(""access token"", request);
        return request;
    }","  public void test172()  throws Throwable  {
      Verb verb0 = Verb.HEAD;
      ClientAuthentication clientAuthentication0 = mock(ClientAuthentication.class, new ViolatedAssumptionAnswer());
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn("".`Z"").when(defaultApi20_0).getAccessTokenEndpoint();
      doReturn(verb0).when(defaultApi20_0).getAccessTokenVerb();
      doReturn(clientAuthentication0).when(defaultApi20_0).getClientAuthentication();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("":443"");
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient();
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, "":443"", "":443"", "":443"", "":443"", """", mockFileOutputStream0, "":443"", jDKHttpClientConfig0, jDKHttpClient0);
      AccessTokenRequestParams accessTokenRequestParams0 = new AccessTokenRequestParams(""uAUxCuI\"""");
      // Undeclared exception!
      try { 
        oAuth20Service0.createAccessTokenRequest(accessTokenRequestParams0);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // Malformed URL
         //
         verifyException(""com.github.scribejava.core.model.OAuthRequest"", e);
      }
  }"
179,"    protected OAuthRequest createAccessTokenRequest(AccessTokenRequestParams params) {
        final OAuthRequest request = new OAuthRequest(api.getAccessTokenVerb(), api.getAccessTokenEndpoint());

        api.getClientAuthentication().addClientAuthentication(request, getApiKey(), getApiSecret());

        request.addParameter(OAuthConstants.CODE, params.getCode());
        final String callback = getCallback();
        if (callback != null) {
            request.addParameter(OAuthConstants.REDIRECT_URI, callback);
        }
        final String scope = params.getScope();
        if (scope != null) {
            request.addParameter(OAuthConstants.SCOPE, scope);
        } else if (defaultScope != null) {
            request.addParameter(OAuthConstants.SCOPE, defaultScope);
        }
        request.addParameter(OAuthConstants.GRANT_TYPE, OAuthConstants.AUTHORIZATION_CODE);

        final String pkceCodeVerifier = params.getPkceCodeVerifier();
        if (pkceCodeVerifier != null) {
            request.addParameter(PKCE.PKCE_CODE_VERIFIER_PARAM, pkceCodeVerifier);
        }

        final Map<String, String> extraParameters = params.getExtraParameters();
        if (extraParameters != null && !extraParameters.isEmpty()) {
            for (Map.Entry<String, String> extraParameter : extraParameters.entrySet()) {
                request.addParameter(extraParameter.getKey(), extraParameter.getValue());
            }
        }

        logRequestWithParams(""access token"", request);
        return request;
    }","  public void test173()  throws Throwable  {
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(defaultApi20_0).getAccessTokenEndpoint();
      doReturn((Verb) null).when(defaultApi20_0).getAccessTokenVerb();
      doReturn((ClientAuthentication) null).when(defaultApi20_0).getClientAuthentication();
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, ""]vvs|t4lEd5T[a|ppD"", (String) null, "",%RmClqZ9P%qY"", ""dJ82"", (String) null, (OutputStream) null, (String) null, jDKHttpClientConfig0, jDKHttpClient0);
      AccessTokenRequestParams accessTokenRequestParams0 = AccessTokenRequestParams.create(""z%BvTnU"");
      // Undeclared exception!
      try { 
        oAuth20Service0.createAccessTokenRequest(accessTokenRequestParams0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""com.github.scribejava.core.oauth.OAuth20Service"", e);
      }
  }"
180,"    protected OAuthRequest createAccessTokenPasswordGrantRequest(String username, String password, String scope) {
        final OAuthRequest request = new OAuthRequest(api.getAccessTokenVerb(), api.getAccessTokenEndpoint());
        request.addParameter(OAuthConstants.USERNAME, username);
        request.addParameter(OAuthConstants.PASSWORD, password);

        if (scope != null) {
            request.addParameter(OAuthConstants.SCOPE, scope);
        } else if (defaultScope != null) {
            request.addParameter(OAuthConstants.SCOPE, defaultScope);
        }

        request.addParameter(OAuthConstants.GRANT_TYPE, OAuthConstants.PASSWORD);

        api.getClientAuthentication().addClientAuthentication(request, getApiKey(), getApiSecret());

        logRequestWithParams(""access token password grant"", request);

        return request;
    }","  public void test174()  throws Throwable  {
      Verb verb0 = Verb.TRACE;
      ClientAuthentication clientAuthentication0 = mock(ClientAuthentication.class, new ViolatedAssumptionAnswer());
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn("":"").when(defaultApi20_0).getAccessTokenEndpoint();
      doReturn(verb0).when(defaultApi20_0).getAccessTokenVerb();
      doReturn(clientAuthentication0).when(defaultApi20_0).getClientAuthentication();
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0);
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, ""fa;ALC#mNz"", ""uw_4P/5rAuk06(s"", ""Device Authorization Codes"", ""uw_4P/5rAuk06(s"", ""uw_4P/5rAuk06(s"", bufferedOutputStream0, (String) null, (HttpClientConfig) null, jDKHttpClient0);
      // Undeclared exception!
      try { 
        oAuth20Service0.createAccessTokenPasswordGrantRequest(""Device Authorization Codes"", ""uw_4P/5rAuk06(s"", (String) null);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // Malformed URL
         //
         verifyException(""com.github.scribejava.core.model.OAuthRequest"", e);
      }
  }"
181,"    protected OAuthRequest createAccessTokenPasswordGrantRequest(String username, String password, String scope) {
        final OAuthRequest request = new OAuthRequest(api.getAccessTokenVerb(), api.getAccessTokenEndpoint());
        request.addParameter(OAuthConstants.USERNAME, username);
        request.addParameter(OAuthConstants.PASSWORD, password);

        if (scope != null) {
            request.addParameter(OAuthConstants.SCOPE, scope);
        } else if (defaultScope != null) {
            request.addParameter(OAuthConstants.SCOPE, defaultScope);
        }

        request.addParameter(OAuthConstants.GRANT_TYPE, OAuthConstants.PASSWORD);

        api.getClientAuthentication().addClientAuthentication(request, getApiKey(), getApiSecret());

        logRequestWithParams(""access token password grant"", request);

        return request;
    }","  public void test175()  throws Throwable  {
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(defaultApi20_0).getAccessTokenEndpoint();
      doReturn((Verb) null).when(defaultApi20_0).getAccessTokenVerb();
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient();
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, ""r`Evs@*"", ""r`Evs@*"", ""r`Evs@*"", ""r`Evs@*"", ""r`Evs@*"", (OutputStream) null, ""G{"", jDKHttpClientConfig0, jDKHttpClient0);
      // Undeclared exception!
      try { 
        oAuth20Service0.createAccessTokenPasswordGrantRequest(""V06iB}(a?FtNURyl,"", ""2m):LhFxW-d*G"", ""G{"");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
182,"    protected OAuthRequest createAccessTokenDeviceAuthorizationGrantRequest(DeviceAuthorization deviceAuthorization) {
        final OAuthRequest request = new OAuthRequest(api.getAccessTokenVerb(), api.getAccessTokenEndpoint());
        request.addParameter(OAuthConstants.GRANT_TYPE, ""urn:ietf:params:oauth:grant-type:device_code"");
        request.addParameter(""device_code"", deviceAuthorization.getDeviceCode());
        api.getClientAuthentication().addClientAuthentication(request, getApiKey(), getApiSecret());
        return request;
    }","  public void test176()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(defaultApi20_0).getAccessTokenEndpoint();
      doReturn((Verb) null).when(defaultApi20_0).getAccessTokenVerb();
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, ""quwiu03>ZKnA>"", (String) null, "":g sFC!"", ""D$vPG"", ""V1{[uQ+XB"", pipedOutputStream0, (String) null, jDKHttpClientConfig0, jDKHttpClient0);
      // Undeclared exception!
      try { 
        oAuth20Service0.createAccessTokenDeviceAuthorizationGrantRequest((DeviceAuthorization) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
183,"    protected OAuthRequest createAccessTokenClientCredentialsGrantRequest(String scope) {
        final OAuthRequest request = new OAuthRequest(api.getAccessTokenVerb(), api.getAccessTokenEndpoint());

        api.getClientAuthentication().addClientAuthentication(request, getApiKey(), getApiSecret());

        if (scope != null) {
            request.addParameter(OAuthConstants.SCOPE, scope);
        } else if (defaultScope != null) {
            request.addParameter(OAuthConstants.SCOPE, defaultScope);
        }
        request.addParameter(OAuthConstants.GRANT_TYPE, OAuthConstants.CLIENT_CREDENTIALS);

        logRequestWithParams(""access token client credentials grant"", request);

        return request;
    }","  public void test177()  throws Throwable  {
      Verb verb0 = Verb.TRACE;
      ClientAuthentication clientAuthentication0 = mock(ClientAuthentication.class, new ViolatedAssumptionAnswer());
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn("""").when(defaultApi20_0).getAccessTokenEndpoint();
      doReturn(verb0).when(defaultApi20_0).getAccessTokenVerb();
      doReturn(clientAuthentication0).when(defaultApi20_0).getClientAuthentication();
      MockPrintStream mockPrintStream0 = new MockPrintStream(""('BB"");
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, ""('BB"", ""('BB"", (String) null, ""('BB"", (String) null, mockPrintStream0, ""('BB"", jDKHttpClientConfig0, (HttpClient) null);
      // Undeclared exception!
      try { 
        oAuth20Service0.createAccessTokenClientCredentialsGrantRequest(""com.github.scribejava.core.oauth.OAuth20Service"");
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // Malformed URL
         //
         verifyException(""com.github.scribejava.core.model.OAuthRequest"", e);
      }
  }"
184,"    protected OAuthRequest createAccessTokenClientCredentialsGrantRequest(String scope) {
        final OAuthRequest request = new OAuthRequest(api.getAccessTokenVerb(), api.getAccessTokenEndpoint());

        api.getClientAuthentication().addClientAuthentication(request, getApiKey(), getApiSecret());

        if (scope != null) {
            request.addParameter(OAuthConstants.SCOPE, scope);
        } else if (defaultScope != null) {
            request.addParameter(OAuthConstants.SCOPE, defaultScope);
        }
        request.addParameter(OAuthConstants.GRANT_TYPE, OAuthConstants.CLIENT_CREDENTIALS);

        logRequestWithParams(""access token client credentials grant"", request);

        return request;
    }","  public void test178()  throws Throwable  {
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(defaultApi20_0).getAccessTokenEndpoint();
      doReturn((Verb) null).when(defaultApi20_0).getAccessTokenVerb();
      doReturn((ClientAuthentication) null).when(defaultApi20_0).getClientAuthentication();
      MockPrintStream mockPrintStream0 = new MockPrintStream(""('BB"");
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, ""('BB"", ""('BB"", (String) null, ""('BB"", (String) null, mockPrintStream0, ""('BB"", jDKHttpClientConfig0, (HttpClient) null);
      // Undeclared exception!
      try { 
        oAuth20Service0.createAccessTokenClientCredentialsGrantRequest(""com.github.scribejava.core.oauth.OAuth20Service"");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""com.github.scribejava.core.oauth.OAuth20Service"", e);
      }
  }"
185,"    public String getDefaultScope() {
        return defaultScope;
    }","  public void test179()  throws Throwable  {
      ClientAuthentication clientAuthentication0 = mock(ClientAuthentication.class, new ViolatedAssumptionAnswer());
      Verb verb0 = Verb.HEAD;
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn(""state"").when(defaultApi20_0).getAccessTokenEndpoint();
      doReturn(verb0).when(defaultApi20_0).getAccessTokenVerb();
      doReturn(clientAuthentication0).when(defaultApi20_0).getClientAuthentication();
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient();
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, ""grant_yp"", ""h}4g,CP"", ""h}4g,CP"", ""grant_yp"", ""H0!_B%jy"", (OutputStream) null, ""Problem accessing property `"", jDKHttpClientConfig0, jDKHttpClient0);
      OAuthAsyncRequestCallback<OAuth2AccessToken> oAuthAsyncRequestCallback0 = (OAuthAsyncRequestCallback<OAuth2AccessToken>) mock(OAuthAsyncRequestCallback.class, new ViolatedAssumptionAnswer());
      oAuth20Service0.getAccessTokenClientCredentialsGrant(oAuthAsyncRequestCallback0);
}"
186,"    public String getResponseType() {
        return responseType;
    }","  public void test180()  throws Throwable  {
      ClientAuthentication clientAuthentication0 = mock(ClientAuthentication.class, new ViolatedAssumptionAnswer());
      Verb verb0 = Verb.HEAD;
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn(""state"").when(defaultApi20_0).getAccessTokenEndpoint();
      doReturn(verb0).when(defaultApi20_0).getAccessTokenVerb();
      doReturn(clientAuthentication0).when(defaultApi20_0).getClientAuthentication();
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient();
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, ""grant_yp"", ""h}4g,CP"", ""h}4g,CP"", ""grant_yp"", ""H0!_B%jy"", (OutputStream) null, ""Problem accessing property `"", jDKHttpClientConfig0, jDKHttpClient0);
      OAuthAsyncRequestCallback<OAuth2AccessToken> oAuthAsyncRequestCallback0 = (OAuthAsyncRequestCallback<OAuth2AccessToken>) mock(OAuthAsyncRequestCallback.class, new ViolatedAssumptionAnswer());
      oAuth20Service0.getAccessTokenClientCredentialsGrant(oAuthAsyncRequestCallback0);
}"
187,"    public String getResponseType() {
        return responseType;
    }","  public void test181()  throws Throwable  {
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, """", ""t!<,"", """", ""e)8#"", """", byteArrayOutputStream0, """", jDKHttpClientConfig0, jDKHttpClient0);
      String string0 = oAuth20Service0.getDefaultScope();
}"
188,"    public String getDefaultScope() {
        return defaultScope;
    }","  public void test182()  throws Throwable  {
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, """", ""t!<,"", """", ""e)8#"", """", byteArrayOutputStream0, """", jDKHttpClientConfig0, jDKHttpClient0);
      String string0 = oAuth20Service0.getDefaultScope();
}"
189,"    public Future<Void> revokeTokenAsync(String tokenToRevoke) {
        return revokeTokenAsync(tokenToRevoke, null);
    }","  public void test183()  throws Throwable  {
      ClientAuthentication clientAuthentication0 = mock(ClientAuthentication.class, new ViolatedAssumptionAnswer());
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn(clientAuthentication0).when(defaultApi20_0).getClientAuthentication();
      doReturn(""password"").when(defaultApi20_0).getRevokeTokenEndpoint();
      MockPrintStream mockPrintStream0 = new MockPrintStream(""Avk/5+n7Pg^"");
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient();
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, (String) null, "" (from class "", "">"", (String) null, "" (from class "", mockPrintStream0, ""@ Lh?T!)_}$2I9"", jDKHttpClientConfig0, jDKHttpClient0);
      // Undeclared exception!
      try { 
        oAuth20Service0.revokeTokenAsync(""Avk/5+n7Pg^"");
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // Malformed URL
         //
         verifyException(""com.github.scribejava.core.model.OAuthRequest"", e);
      }
  }"
190,"    public Future<Void> revokeTokenAsync(String tokenToRevoke) {
        return revokeTokenAsync(tokenToRevoke, null);
    }","  public void test184()  throws Throwable  {
      ClientAuthentication clientAuthentication0 = mock(ClientAuthentication.class, new ViolatedAssumptionAnswer());
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn(clientAuthentication0).when(defaultApi20_0).getClientAuthentication();
      doReturn(""send request for access token asynchronously to %s"").when(defaultApi20_0).getRevokeTokenEndpoint();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(bufferedOutputStream0);
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient();
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, ""m*s6S%FjK~jwuD"", ""m*s6S%FjK~jwuD"", """", ""send request for access token asynchronously to %s"", """", objectOutputStream0, """", jDKHttpClientConfig0, jDKHttpClient0);
      TokenTypeHint tokenTypeHint0 = TokenTypeHint.ACCESS_TOKEN;
      // Undeclared exception!
      try { 
        oAuth20Service0.revokeTokenAsync("""", tokenTypeHint0);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // Malformed URL
         //
         verifyException(""com.github.scribejava.core.model.OAuthRequest"", e);
      }
  }"
191,"    public String getDefaultScope() {
        return defaultScope;
    }","  public void test185()  throws Throwable  {
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(defaultApi20_0).toString();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(2877);
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, ""(N?v/6fbP"", ""(N?v/6fbP"", ""(N?v/6fbP"", ""token"", ""(N?v/6fbP"", byteArrayOutputStream0, ""token"", jDKHttpClientConfig0, jDKHttpClient0);
      oAuth20Service0.getApi();
}"
192,"    public String getResponseType() {
        return responseType;
    }","  public void test186()  throws Throwable  {
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(defaultApi20_0).toString();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(2877);
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, ""(N?v/6fbP"", ""(N?v/6fbP"", ""(N?v/6fbP"", ""token"", ""(N?v/6fbP"", byteArrayOutputStream0, ""token"", jDKHttpClientConfig0, jDKHttpClient0);
      oAuth20Service0.getApi();
}"
193,"    public String getResponseType() {
        return responseType;
    }","  public void test187()  throws Throwable  {
      BearerSignature bearerSignature0 = mock(BearerSignature.class, new ViolatedAssumptionAnswer());
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn(bearerSignature0).when(defaultApi20_0).getBearerSignature();
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient();
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, ""4xhQj$|v8V$5tVa"", ""4xhQj$|v8V$5tVa"", ""4xhQj$|v8V$5tVa"", ""temporarily_unavailable"", ""=F5TyJ"", (OutputStream) null, ""OtherScalar"", jDKHttpClientConfig0, jDKHttpClient0);
      oAuth20Service0.signRequest(""4xhQj$|v8V$5tVa"", (OAuthRequest) null);
}"
194,"    public String getDefaultScope() {
        return defaultScope;
    }","  public void test188()  throws Throwable  {
      BearerSignature bearerSignature0 = mock(BearerSignature.class, new ViolatedAssumptionAnswer());
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn(bearerSignature0).when(defaultApi20_0).getBearerSignature();
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient();
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, ""4xhQj$|v8V$5tVa"", ""4xhQj$|v8V$5tVa"", ""4xhQj$|v8V$5tVa"", ""temporarily_unavailable"", ""=F5TyJ"", (OutputStream) null, ""OtherScalar"", jDKHttpClientConfig0, jDKHttpClient0);
      oAuth20Service0.signRequest(""4xhQj$|v8V$5tVa"", (OAuthRequest) null);
}"
195,"    public Future<OAuth2AccessToken> getAccessTokenPasswordGrantAsync(String username, String password) {
        return getAccessTokenPasswordGrantAsync(username, password,
                (OAuthAsyncRequestCallback<OAuth2AccessToken>) null);
    }","  public void test189()  throws Throwable  {
      Verb verb0 = Verb.DELETE;
      ClientAuthentication clientAuthentication0 = mock(ClientAuthentication.class, new ViolatedAssumptionAnswer());
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn("""").when(defaultApi20_0).getAccessTokenEndpoint();
      doReturn(verb0).when(defaultApi20_0).getAccessTokenVerb();
      doReturn(clientAuthentication0).when(defaultApi20_0).getClientAuthentication();
      MockPrintStream mockPrintStream0 = new MockPrintStream(""com.fasterxml.jackson.databind.ser.std.UUIDSerializer"");
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, """", """", """", """", """", mockPrintStream0, """", jDKHttpClientConfig0, jDKHttpClient0);
      OAuthAsyncRequestCallback<OAuth2AccessToken> oAuthAsyncRequestCallback0 = (OAuthAsyncRequestCallback<OAuth2AccessToken>) mock(OAuthAsyncRequestCallback.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        oAuth20Service0.getAccessTokenPasswordGrantAsync("""", """", (String) null, oAuthAsyncRequestCallback0);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // Malformed URL
         //
         verifyException(""com.github.scribejava.core.model.OAuthRequest"", e);
      }
  }"
196,"    public OAuth2AccessToken refreshAccessToken(String refreshToken)
            throws IOException, InterruptedException, ExecutionException {
        return refreshAccessToken(refreshToken, (String) null);
    }","  public void test190()  throws Throwable  {
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, false);
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient();
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, """", """", """", ""z\"")!A>XJr]/,WK"", ""z\"")!A>XJr]/,WK"", mockPrintStream0, ""z\"")!A>XJr]/,WK"", jDKHttpClientConfig0, jDKHttpClient0);
      // Undeclared exception!
      try { 
        oAuth20Service0.refreshAccessToken("""", ""g.p?S"");
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // The refreshToken cannot be null or empty
         //
         verifyException(""com.github.scribejava.core.oauth.OAuth20Service"", e);
      }
  }"
197,"    public String getResponseType() {
        return responseType;
    }","  public void test191()  throws Throwable  {
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient();
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, ""+j4"", ""1us.?*IS}NnPcf`m"", "",valueFilter="", ""8#dn.'"", """", (OutputStream) null, ""r"", jDKHttpClientConfig0, jDKHttpClient0);
      oAuth20Service0.createAuthorizationUrlBuilder();
}"
198,"    public String getDefaultScope() {
        return defaultScope;
    }","  public void test192()  throws Throwable  {
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient();
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, ""+j4"", ""1us.?*IS}NnPcf`m"", "",valueFilter="", ""8#dn.'"", """", (OutputStream) null, ""r"", jDKHttpClientConfig0, jDKHttpClient0);
      oAuth20Service0.createAuthorizationUrlBuilder();
}"
199,"    public String getResponseType() {
        return responseType;
    }","  public void test193()  throws Throwable  {
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, ""k?VKA'"", ""_>"", ""k?VKA'"", ""k?VKA'"", ""13\""J^A_E"", (OutputStream) null, ""_>"", jDKHttpClientConfig0, jDKHttpClient0);
      String string0 = oAuth20Service0.getResponseType();
}"
200,"    public String getDefaultScope() {
        return defaultScope;
    }","  public void test194()  throws Throwable  {
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, ""k?VKA'"", ""_>"", ""k?VKA'"", ""k?VKA'"", ""13\""J^A_E"", (OutputStream) null, ""_>"", jDKHttpClientConfig0, jDKHttpClient0);
      String string0 = oAuth20Service0.getResponseType();
}"
201,"    public OAuth2AccessToken getAccessTokenDeviceAuthorizationGrant(DeviceAuthorization deviceAuthorization)
            throws InterruptedException, ExecutionException, IOException {
        final OAuthRequest request = createAccessTokenDeviceAuthorizationGrantRequest(deviceAuthorization);

        try (Response response = execute(request)) {
            if (isDebug()) {
                log(""got AccessTokenDeviceAuthorizationGrant response"");
                log(""response status code: %s"", response.getCode());
                log(""response body: %s"", response.getBody());
            }
            return api.getAccessTokenExtractor().extract(response);
        }
    }","  public void test195()  throws Throwable  {
      Verb verb0 = Verb.PUT;
      ClientAuthentication clientAuthentication0 = mock(ClientAuthentication.class, new ViolatedAssumptionAnswer());
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(defaultApi20_0).getAccessTokenEndpoint();
      doReturn(verb0).when(defaultApi20_0).getAccessTokenVerb();
      doReturn(clientAuthentication0).when(defaultApi20_0).getClientAuthentication();
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient();
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, ""+j4"", ""1us.?*IS}NnPcf`m"", "",valueFilter="", ""8#dn.'"", """", (OutputStream) null, ""r"", jDKHttpClientConfig0, jDKHttpClient0);
      DeviceAuthorization deviceAuthorization0 = new DeviceAuthorization(""}tU0Km"", ""No argument left as delegating for Creator %s: exactly one required"", ""created "", 1372);
      // Undeclared exception!
      try { 
        oAuth20Service0.getAccessTokenDeviceAuthorizationGrant(deviceAuthorization0, (OAuthAsyncRequestCallback<OAuth2AccessToken>) null);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Cannot append to null URL
         //
         verifyException(""com.github.scribejava.core.utils.Preconditions"", e);
      }
  }"
202,"    public Future<DeviceAuthorization> getDeviceAuthorizationCodesAsync() {
        return getDeviceAuthorizationCodesAsync(null);
    }","  public void test196()  throws Throwable  {
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(defaultApi20_0).getDeviceAuthorizationEndpoint();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, """", """", (String) null, (String) null, ""s*<TI]$/#]"", pipedOutputStream0, ""s*<TI]$/#]"", jDKHttpClientConfig0, jDKHttpClient0);
      // Undeclared exception!
      try { 
        oAuth20Service0.getDeviceAuthorizationCodesAsync((String) null);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // Malformed URL
         //
         verifyException(""com.github.scribejava.core.model.OAuthRequest"", e);
      }
  }"
203,"    public String getDefaultScope() {
        return defaultScope;
    }","  public void test197()  throws Throwable  {
      ClientAuthentication clientAuthentication0 = mock(ClientAuthentication.class, new ViolatedAssumptionAnswer());
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn(clientAuthentication0).when(defaultApi20_0).getClientAuthentication();
      doReturn(""&u~OF"").when(defaultApi20_0).getRevokeTokenEndpoint();
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient();
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, ""grant_yp"", ""h}4g,CP"", ""h}4g,CP"", ""grant_yp"", ""H0!_B%jy"", (OutputStream) null, ""Problem accessing property `"", jDKHttpClientConfig0, jDKHttpClient0);
      TokenTypeHint tokenTypeHint0 = TokenTypeHint.REFRESH_TOKEN;
      oAuth20Service0.revokeToken("""", (OAuthAsyncRequestCallback<Void>) null, tokenTypeHint0);
}"
204,"    public String getResponseType() {
        return responseType;
    }","  public void test198()  throws Throwable  {
      ClientAuthentication clientAuthentication0 = mock(ClientAuthentication.class, new ViolatedAssumptionAnswer());
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn(clientAuthentication0).when(defaultApi20_0).getClientAuthentication();
      doReturn(""&u~OF"").when(defaultApi20_0).getRevokeTokenEndpoint();
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient();
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, ""grant_yp"", ""h}4g,CP"", ""h}4g,CP"", ""grant_yp"", ""H0!_B%jy"", (OutputStream) null, ""Problem accessing property `"", jDKHttpClientConfig0, jDKHttpClient0);
      TokenTypeHint tokenTypeHint0 = TokenTypeHint.REFRESH_TOKEN;
      oAuth20Service0.revokeToken("""", (OAuthAsyncRequestCallback<Void>) null, tokenTypeHint0);
}"
205,"    public String getResponseType() {
        return responseType;
    }","  public void test199()  throws Throwable  {
      Verb verb0 = Verb.GET;
      ClientAuthentication clientAuthentication0 = mock(ClientAuthentication.class, new ViolatedAssumptionAnswer());
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn(""v)`a_(m"").when(defaultApi20_0).getAccessTokenEndpoint();
      doReturn(verb0).when(defaultApi20_0).getAccessTokenVerb();
      doReturn(clientAuthentication0).when(defaultApi20_0).getClientAuthentication();
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient();
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, """", """", ""revoke token"", (String) null, ""2"", (OutputStream) null, """", jDKHttpClientConfig0, jDKHttpClient0);
      oAuth20Service0.getAccessTokenClientCredentialsGrantAsync((String) null);
}"
206,"    public String getResponseType() {
        return responseType;
    }","  public void test200()  throws Throwable  {
      Verb verb0 = Verb.HEAD;
      ClientAuthentication clientAuthentication0 = mock(ClientAuthentication.class, new ViolatedAssumptionAnswer());
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn(verb0).when(defaultApi20_0).getAccessTokenVerb();
      doReturn(clientAuthentication0).when(defaultApi20_0).getClientAuthentication();
      doReturn(""access token"").when(defaultApi20_0).getRefreshTokenEndpoint();
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, ""k?VKA'"", ""_>"", ""k?VKA'"", ""k?VKA'"", ""3lp"", (OutputStream) null, ""_>"", jDKHttpClientConfig0, jDKHttpClient0);
      OAuthAsyncRequestCallback<OAuth2AccessToken> oAuthAsyncRequestCallback0 = (OAuthAsyncRequestCallback<OAuth2AccessToken>) mock(OAuthAsyncRequestCallback.class, new ViolatedAssumptionAnswer());
      oAuth20Service0.refreshAccessToken(""blank String (all whitespace)"", oAuthAsyncRequestCallback0);
}"
207,"    public String getDefaultScope() {
        return defaultScope;
    }","  public void test201()  throws Throwable  {
      Verb verb0 = Verb.HEAD;
      ClientAuthentication clientAuthentication0 = mock(ClientAuthentication.class, new ViolatedAssumptionAnswer());
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn(verb0).when(defaultApi20_0).getAccessTokenVerb();
      doReturn(clientAuthentication0).when(defaultApi20_0).getClientAuthentication();
      doReturn(""access token"").when(defaultApi20_0).getRefreshTokenEndpoint();
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, ""k?VKA'"", ""_>"", ""k?VKA'"", ""k?VKA'"", ""3lp"", (OutputStream) null, ""_>"", jDKHttpClientConfig0, jDKHttpClient0);
      OAuthAsyncRequestCallback<OAuth2AccessToken> oAuthAsyncRequestCallback0 = (OAuthAsyncRequestCallback<OAuth2AccessToken>) mock(OAuthAsyncRequestCallback.class, new ViolatedAssumptionAnswer());
      oAuth20Service0.refreshAccessToken(""blank String (all whitespace)"", oAuthAsyncRequestCallback0);
}"
208,"    public String getResponseType() {
        return responseType;
    }","  public void test202()  throws Throwable  {
      Verb verb0 = Verb.GET;
      ClientAuthentication clientAuthentication0 = mock(ClientAuthentication.class, new ViolatedAssumptionAnswer());
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn(verb0).when(defaultApi20_0).getAccessTokenVerb();
      doReturn(clientAuthentication0).when(defaultApi20_0).getClientAuthentication();
      doReturn(""g5m0agml0(a=iV:h"").when(defaultApi20_0).getRefreshTokenEndpoint();
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, ""USE_BASE_TYPE_AS_DEFAULT_IMPL"", ""USE_BASE_TYPE_AS_DEFAULT_IMPL"", ""v'?9];m;fSQTcg3.%8"", (String) null, ""3'FI<\""y7lH8?!kyEmX>"", (OutputStream) null, ""v'?9];m;fSQTcg3.%8"", jDKHttpClientConfig0, jDKHttpClient0);
      oAuth20Service0.refreshAccessToken(""3'FI<\""y7lH8?!kyEmX>"", ""9UGx4"", (OAuthAsyncRequestCallback<OAuth2AccessToken>) null);
}"
209,"    public OAuth2AccessToken refreshAccessToken(String refreshToken)
            throws IOException, InterruptedException, ExecutionException {
        return refreshAccessToken(refreshToken, (String) null);
    }","  public void test203()  throws Throwable  {
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, ""k:7h4J#kfdSD}FG"", ""k:7h4J#kfdSD}FG"", ""k:7h4J#kfdSD}FG"", ""k:7h4J#kfdSD}FG"", ""k:7h4J#kfdSD}FG"", (OutputStream) null, ""k:7h4J#kfdSD}FG"", jDKHttpClientConfig0, jDKHttpClient0);
      OAuthAsyncRequestCallback<OAuth2AccessToken> oAuthAsyncRequestCallback0 = (OAuthAsyncRequestCallback<OAuth2AccessToken>) mock(OAuthAsyncRequestCallback.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        oAuth20Service0.refreshAccessToken("""", oAuthAsyncRequestCallback0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // The refreshToken cannot be null or empty
         //
         verifyException(""com.github.scribejava.core.oauth.OAuth20Service"", e);
      }
  }"
210,"    public OAuth2AccessToken getAccessToken(String code) throws IOException, InterruptedException, ExecutionException {
        return getAccessToken(AccessTokenRequestParams.create(code));
    }","  public void test204()  throws Throwable  {
      ClientAuthentication clientAuthentication0 = mock(ClientAuthentication.class, new ViolatedAssumptionAnswer());
      MockFile mockFile0 = new MockFile(""Oj%a|\""l'6r4gc)#L"");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient();
      Verb verb0 = Verb.PATCH;
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn(""+`ES<Nnr"").when(defaultApi20_0).getAccessTokenEndpoint();
      doReturn(verb0).when(defaultApi20_0).getAccessTokenVerb();
      doReturn(clientAuthentication0).when(defaultApi20_0).getClientAuthentication();
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, ""}"", ""Could not resolve type id '%s' as a subtype of %s"", ""<"", (String) null, ""<"", mockPrintStream0, ""23`9"", jDKHttpClientConfig0, jDKHttpClient0);
      AccessTokenRequestParams accessTokenRequestParams0 = new AccessTokenRequestParams((String) null);
      AccessTokenRequestParams accessTokenRequestParams1 = accessTokenRequestParams0.addExtraParameter(""qB.pS\""q+4=!qI'?sLh"", ""}s!)Q,pt[(^/"");
      OAuthAsyncRequestCallback<OAuth2AccessToken> oAuthAsyncRequestCallback0 = (OAuthAsyncRequestCallback<OAuth2AccessToken>) mock(OAuthAsyncRequestCallback.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        oAuth20Service0.getAccessToken(accessTokenRequestParams1, oAuthAsyncRequestCallback0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Cannot encode null object
         //
         verifyException(""com.github.scribejava.core.utils.Preconditions"", e);
      }
  }"
211,"    public OAuth2AccessToken getAccessToken(String code) throws IOException, InterruptedException, ExecutionException {
        return getAccessToken(AccessTokenRequestParams.create(code));
    }","  public void test205()  throws Throwable  {
      Verb verb0 = Verb.GET;
      ClientAuthentication clientAuthentication0 = mock(ClientAuthentication.class, new ViolatedAssumptionAnswer());
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn(""v)`a_(m"").when(defaultApi20_0).getAccessTokenEndpoint();
      doReturn(verb0).when(defaultApi20_0).getAccessTokenVerb();
      doReturn(clientAuthentication0).when(defaultApi20_0).getClientAuthentication();
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient();
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, """", """", ""revoke token"", (String) null, ""authorization_pending"", (OutputStream) null, """", jDKHttpClientConfig0, jDKHttpClient0);
      OAuthRequest oAuthRequest0 = new OAuthRequest(verb0, ""revoke token"");
      AccessTokenRequestParams accessTokenRequestParams0 = new AccessTokenRequestParams((String) null);
      Map<String, String> map0 = oAuthRequest0.getOauthParameters();
      accessTokenRequestParams0.setExtraParameters(map0);
      // Undeclared exception!
      try { 
        oAuth20Service0.getAccessToken(accessTokenRequestParams0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Cannot encode null object
         //
         verifyException(""com.github.scribejava.core.utils.Preconditions"", e);
      }
  }"
212,"    public OAuth2AccessToken getAccessToken(String code) throws IOException, InterruptedException, ExecutionException {
        return getAccessToken(AccessTokenRequestParams.create(code));
    }","  public void test206()  throws Throwable  {
      Verb verb0 = Verb.GET;
      ClientAuthentication clientAuthentication0 = mock(ClientAuthentication.class, new ViolatedAssumptionAnswer());
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn(""v)`a_(m"").when(defaultApi20_0).getAccessTokenEndpoint();
      doReturn(verb0).when(defaultApi20_0).getAccessTokenVerb();
      doReturn(clientAuthentication0).when(defaultApi20_0).getClientAuthentication();
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient();
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, """", """", ""revoke token"", (String) null, ""authorization_pending"", (OutputStream) null, """", jDKHttpClientConfig0, jDKHttpClient0);
      AccessTokenRequestParams accessTokenRequestParams0 = new AccessTokenRequestParams((String) null);
      AccessTokenRequestParams accessTokenRequestParams1 = accessTokenRequestParams0.pkceCodeVerifier(""XG}|`DU7OJ,G9\"""");
      // Undeclared exception!
      try { 
        oAuth20Service0.getAccessToken(accessTokenRequestParams1);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Cannot encode null object
         //
         verifyException(""com.github.scribejava.core.utils.Preconditions"", e);
      }
  }"
213,"    public OAuth2AccessToken getAccessToken(String code) throws IOException, InterruptedException, ExecutionException {
        return getAccessToken(AccessTokenRequestParams.create(code));
    }","  public void test207()  throws Throwable  {
      Verb verb0 = Verb.GET;
      ClientAuthentication clientAuthentication0 = mock(ClientAuthentication.class, new ViolatedAssumptionAnswer());
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn(""v)`a_(m"").when(defaultApi20_0).getAccessTokenEndpoint();
      doReturn(verb0).when(defaultApi20_0).getAccessTokenVerb();
      doReturn(clientAuthentication0).when(defaultApi20_0).getClientAuthentication();
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient();
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, """", """", ""revoke token"", (String) null, ""authorization_pending"", (OutputStream) null, """", jDKHttpClientConfig0, jDKHttpClient0);
      AccessTokenRequestParams accessTokenRequestParams0 = new AccessTokenRequestParams((String) null);
      ScopeBuilder scopeBuilder0 = new ScopeBuilder(""authorization_pending"");
      AccessTokenRequestParams accessTokenRequestParams1 = accessTokenRequestParams0.scope(scopeBuilder0);
      // Undeclared exception!
      try { 
        oAuth20Service0.getAccessToken(accessTokenRequestParams1);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Cannot encode null object
         //
         verifyException(""com.github.scribejava.core.utils.Preconditions"", e);
      }
  }"
214,"    public String getDefaultScope() {
        return defaultScope;
    }","  public void test208()  throws Throwable  {
      Verb verb0 = Verb.HEAD;
      ClientAuthentication clientAuthentication0 = mock(ClientAuthentication.class, new ViolatedAssumptionAnswer());
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn(""2.0"").when(defaultApi20_0).getAccessTokenEndpoint();
      doReturn(verb0).when(defaultApi20_0).getAccessTokenVerb();
      doReturn(clientAuthentication0).when(defaultApi20_0).getClientAuthentication();
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, ""]vvs|t4lEd5T[a|ppD"", (String) null, (String) null, ""dJ82"", (String) null, (OutputStream) null, (String) null, jDKHttpClientConfig0, jDKHttpClient0);
      AccessTokenRequestParams accessTokenRequestParams0 = AccessTokenRequestParams.create(""z%BvTnU"");
      oAuth20Service0.createAccessTokenRequest(accessTokenRequestParams0);
}"
215,"    protected Future<OAuth2AccessToken> sendAccessTokenRequestAsync(OAuthRequest request) {
        return sendAccessTokenRequestAsync(request, null);
    }","  public void test209()  throws Throwable  {
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null);
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      DataOutputStream dataOutputStream0 = new DataOutputStream(bufferedOutputStream0);
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, "">7XXG?Kz2Q&/d}"", "">7XXG?Kz2Q&/d}"", "">7XXG?Kz2Q&/d}"", "">7XXG?Kz2Q&/d}"", "">7XXG?Kz2Q&/d}"", dataOutputStream0, "">7XXG?Kz2Q&/d}"", jDKHttpClientConfig0, jDKHttpClient0);
      // Undeclared exception!
      try { 
        oAuth20Service0.sendAccessTokenRequestAsync((OAuthRequest) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""com.github.scribejava.core.oauth.OAuth20Service"", e);
      }
  }"
216,"    protected OAuth2AccessToken sendAccessTokenRequestSync(OAuthRequest request)
            throws IOException, InterruptedException, ExecutionException {
        if (isDebug()) {
            log(""send request for access token synchronously to %s"", request.getCompleteUrl());
        }
        try (Response response = execute(request)) {
            if (isDebug()) {
                log(""response status code: %s"", response.getCode());
                log(""response body: %s"", response.getBody());
            }

            return api.getAccessTokenExtractor().extract(response);
        }
    }","  public void test210()  throws Throwable  {
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
      MockPrintStream mockPrintStream0 = new MockPrintStream(dataOutputStream0, true);
      Verb verb0 = Verb.OPTIONS;
      OAuthRequest oAuthRequest0 = new OAuthRequest(verb0, """");
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, """", ""swI4@9Ml]4T"", """", ""Q"", """", mockPrintStream0, ""iQcNDdM!|Uls8Mo4"", jDKHttpClientConfig0, (HttpClient) null);
      // Undeclared exception!
      try { 
        oAuth20Service0.sendAccessTokenRequestSync(oAuthRequest0);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // there were problems while writting to the debug stream
         //
         verifyException(""com.github.scribejava.core.oauth.OAuthService"", e);
      }
  }"
217,"    public OAuth2Authorization extractAuthorization(String redirectLocation) {
        final OAuth2Authorization authorization = new OAuth2Authorization();
        int end = redirectLocation.indexOf('#');
        if (end == -1) {
            end = redirectLocation.length();
        }
        for (String param : redirectLocation.substring(redirectLocation.indexOf('?') + 1, end).split(""&"")) {
            final String[] keyValue = param.split(""="");
            if (keyValue.length == 2) {
                try {
                    switch (keyValue[0]) {
                        case ""code"":
                            authorization.setCode(URLDecoder.decode(keyValue[1], ""UTF-8""));
                            break;
                        case ""state"":
                            authorization.setState(URLDecoder.decode(keyValue[1], ""UTF-8""));
                            break;
                        default: //just ignore any other param;
                    }
                } catch (UnsupportedEncodingException ueE) {
                    throw new IllegalStateException(""jvm without UTF-8, really?"", ueE);
                }
            }
        }
        return authorization;
    }","  public void test211()  throws Throwable  {
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient();
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, ""5u~OF"", ""5u~OF"", ""5u~OF"", ""5u~OF"", ""5u~OF"", (OutputStream) null, ""5u~OF"", jDKHttpClientConfig0, jDKHttpClient0);
      OAuth2Authorization oAuth2Authorization0 = oAuth20Service0.extractAuthorization("" =:[4)&<a!>%ZT8H"");
}"
218,"    public OAuth2Authorization extractAuthorization(String redirectLocation) {
        final OAuth2Authorization authorization = new OAuth2Authorization();
        int end = redirectLocation.indexOf('#');
        if (end == -1) {
            end = redirectLocation.length();
        }
        for (String param : redirectLocation.substring(redirectLocation.indexOf('?') + 1, end).split(""&"")) {
            final String[] keyValue = param.split(""="");
            if (keyValue.length == 2) {
                try {
                    switch (keyValue[0]) {
                        case ""code"":
                            authorization.setCode(URLDecoder.decode(keyValue[1], ""UTF-8""));
                            break;
                        case ""state"":
                            authorization.setState(URLDecoder.decode(keyValue[1], ""UTF-8""));
                            break;
                        default: //just ignore any other param;
                    }
                } catch (UnsupportedEncodingException ueE) {
                    throw new IllegalStateException(""jvm without UTF-8, really?"", ueE);
                }
            }
        }
        return authorization;
    }","  public void test212()  throws Throwable  {
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient();
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, """", """", ""revoke token"", (String) null, ""2"", (OutputStream) null, """", jDKHttpClientConfig0, jDKHttpClient0);
      // Undeclared exception!
      try { 
        oAuth20Service0.extractAuthorization(""M}'&#?aZM$Qf0'g.=r"");
        fail(""Expecting exception: StringIndexOutOfBoundsException"");
      } catch(StringIndexOutOfBoundsException e) {
      }
  }"
219,"    public String getResponseType() {
        return responseType;
    }","  public void test213()  throws Throwable  {
      BearerSignature bearerSignature0 = mock(BearerSignature.class, new ViolatedAssumptionAnswer());
      Verb verb0 = Verb.GET;
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn(bearerSignature0).when(defaultApi20_0).getBearerSignature();
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient();
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, """", """", ""revoke token"", (String) null, ""authorization_pending"", (OutputStream) null, """", jDKHttpClientConfig0, jDKHttpClient0);
      OAuthRequest oAuthRequest0 = new OAuthRequest(verb0, ""revoke token"");
      oAuth20Service0.signRequest((OAuth2AccessToken) null, oAuthRequest0);
}"
220,"    public void revokeToken(String tokenToRevoke) throws IOException, InterruptedException, ExecutionException {
        revokeToken(tokenToRevoke, (TokenTypeHint) null);
    }","  public void test214()  throws Throwable  {
      ClientAuthentication clientAuthentication0 = mock(ClientAuthentication.class, new ViolatedAssumptionAnswer());
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn(clientAuthentication0).when(defaultApi20_0).getClientAuthentication();
      doReturn(""send request for access token asynchronously to %s"").when(defaultApi20_0).getRevokeTokenEndpoint();
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, ""send request for access token asynchronously to %s"", ""send request for access token asynchronously to %s"", ""send request for access token asynchronously to %s"", ""send request for access token asynchronously to %s"", ""g\nB=F"", (OutputStream) null, ""send request for access token asynchronously to %s"", jDKHttpClientConfig0, jDKHttpClient0);
      try { 
        oAuth20Service0.revokeToken(""send request for access token asynchronously to %s"");
        fail(""Expecting exception: MalformedURLException"");
      } catch(MalformedURLException e) {
         //
         // no protocol: send request for access token asynchronously to %s
         //
         verifyException(""java.net.URL"", e);
      }
  }"
221,"    public Future<OAuth2AccessToken> getAccessTokenAsync(String code) {
        return getAccessToken(AccessTokenRequestParams.create(code), null);
    }","  public void test215()  throws Throwable  {
      ClientAuthentication clientAuthentication0 = mock(ClientAuthentication.class, new ViolatedAssumptionAnswer());
      Verb verb0 = Verb.HEAD;
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn(""state"").when(defaultApi20_0).getAccessTokenEndpoint();
      doReturn(verb0).when(defaultApi20_0).getAccessTokenVerb();
      doReturn(clientAuthentication0).when(defaultApi20_0).getClientAuthentication();
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient();
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, ""grant_yp"", ""h}4g,CP"", ""h}4g,CP"", ""grant_yp"", ""H0!_B%jy"", (OutputStream) null, ""Problem accessing property `"", jDKHttpClientConfig0, jDKHttpClient0);
      AccessTokenRequestParams accessTokenRequestParams0 = new AccessTokenRequestParams((String) null);
      // Undeclared exception!
      try { 
        oAuth20Service0.getAccessTokenAsync(accessTokenRequestParams0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Cannot encode null object
         //
         verifyException(""com.github.scribejava.core.utils.Preconditions"", e);
      }
  }"
222,"    public OAuth2AccessToken getAccessTokenClientCredentialsGrant()
            throws IOException, InterruptedException, ExecutionException {
        final OAuthRequest request = createAccessTokenClientCredentialsGrantRequest(null);

        return sendAccessTokenRequestSync(request);
    }","  public void test216()  throws Throwable  {
      ClientAuthentication clientAuthentication0 = mock(ClientAuthentication.class, new ViolatedAssumptionAnswer());
      Verb verb0 = Verb.HEAD;
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn(""state"").when(defaultApi20_0).getAccessTokenEndpoint();
      doReturn(verb0).when(defaultApi20_0).getAccessTokenVerb();
      doReturn(clientAuthentication0).when(defaultApi20_0).getClientAuthentication();
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient();
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, ""grant_yp"", ""h}4g,CP"", ""h}4g,CP"", ""grant_yp"", ""H0!_B%jy"", (OutputStream) null, ""Problem accessing property `"", jDKHttpClientConfig0, jDKHttpClient0);
      try { 
        oAuth20Service0.getAccessTokenClientCredentialsGrant();
        fail(""Expecting exception: MalformedURLException"");
      } catch(MalformedURLException e) {
         //
         // no protocol: state?scope=grant_yp&grant_type=client_credentials
         //
         verifyException(""java.net.URL"", e);
      }
  }"
223,"    public OAuth2AccessToken getAccessTokenPasswordGrant(String username, String password)
            throws IOException, InterruptedException, ExecutionException {
        final OAuthRequest request = createAccessTokenPasswordGrantRequest(username, password, null);

        return sendAccessTokenRequestSync(request);
    }","  public void test217()  throws Throwable  {
      Verb verb0 = Verb.GET;
      ClientAuthentication clientAuthentication0 = mock(ClientAuthentication.class, new ViolatedAssumptionAnswer());
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn(""scope"").when(defaultApi20_0).getAccessTokenEndpoint();
      doReturn(verb0).when(defaultApi20_0).getAccessTokenVerb();
      doReturn(clientAuthentication0).when(defaultApi20_0).getClientAuthentication();
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, ""USE_BASE_TYPE_AS_DEFAULT_IMPL"", ""USE_BASE_TYPE_AS_DEFAULT_IMPL"", ""v'?9];m;fSQTcg3.%8"", (String) null, ""3'FI<\""y7lH8?!kyEmX>"", (OutputStream) null, ""v'?9];m;fSQTcg3.%8"", jDKHttpClientConfig0, jDKHttpClient0);
      // Undeclared exception!
      try { 
        oAuth20Service0.getAccessTokenPasswordGrant(""g5m0agml0(a=iV:h"", (String) null, (String) null);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Cannot encode null object
         //
         verifyException(""com.github.scribejava.core.utils.Preconditions"", e);
      }
  }"
224,"    public Future<OAuth2AccessToken> getAccessTokenPasswordGrantAsync(String username, String password) {
        return getAccessTokenPasswordGrantAsync(username, password,
                (OAuthAsyncRequestCallback<OAuth2AccessToken>) null);
    }","  public void test218()  throws Throwable  {
      Verb verb0 = Verb.GET;
      ClientAuthentication clientAuthentication0 = mock(ClientAuthentication.class, new ViolatedAssumptionAnswer());
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn(""5Tm0agmlU(a=i:h"").when(defaultApi20_0).getAccessTokenEndpoint();
      doReturn(verb0).when(defaultApi20_0).getAccessTokenVerb();
      doReturn(clientAuthentication0).when(defaultApi20_0).getClientAuthentication();
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, ""5Tm0agmlU(a=i:h"", ""5Tm0agmlU(a=i:h"", ""5Tm0agmlU(a=i:h"", (String) null, (String) null, (OutputStream) null, ""5Tm0agmlU(a=i:h"", jDKHttpClientConfig0, jDKHttpClient0);
      // Undeclared exception!
      try { 
        oAuth20Service0.getAccessTokenPasswordGrantAsync(""5Tm0agmlU(a=i:h"", (String) null);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Cannot encode null object
         //
         verifyException(""com.github.scribejava.core.utils.Preconditions"", e);
      }
  }"
225,"    public String getResponseType() {
        return responseType;
    }","  public void test219()  throws Throwable  {
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn(""v)`a_(m"").when(defaultApi20_0).getAuthorizationUrl(anyString() , anyString() , anyString() , anyString() , anyString() , anyMap());
      doReturn(""v)`a_(m"").when(defaultApi20_0).toString();
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient();
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, ""v)`a_(m"", ""v)`a_(m"", ""v)`a_(m"", (String) null, ""v)`a_(m"", (OutputStream) null, """", jDKHttpClientConfig0, jDKHttpClient0);
      PKCE pKCE0 = new PKCE();
      oAuth20Service0.getAuthorizationUrl(pKCE0);
}"
226,"    public String getResponseType() {
        return responseType;
    }","  public void test220()  throws Throwable  {
      ClientAuthentication clientAuthentication0 = mock(ClientAuthentication.class, new ViolatedAssumptionAnswer());
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn(clientAuthentication0).when(defaultApi20_0).getClientAuthentication();
      doReturn(""{F?GH\"":'G<8?"").when(defaultApi20_0).getRevokeTokenEndpoint();
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient();
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, """", """", """", ""temporarily_unavailable"", ""=F5TyJ"", (OutputStream) null, ""OtherScaar"", jDKHttpClientConfig0, jDKHttpClient0);
      OAuthAsyncRequestCallback<Void> oAuthAsyncRequestCallback0 = (OAuthAsyncRequestCallback<Void>) mock(OAuthAsyncRequestCallback.class, new ViolatedAssumptionAnswer());
      oAuth20Service0.revokeToken(""=F5TyJ"", oAuthAsyncRequestCallback0);
}"
227,"    public String getDefaultScope() {
        return defaultScope;
    }","  public void test221()  throws Throwable  {
      ClientAuthentication clientAuthentication0 = mock(ClientAuthentication.class, new ViolatedAssumptionAnswer());
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn(clientAuthentication0).when(defaultApi20_0).getClientAuthentication();
      doReturn(""{F?GH\"":'G<8?"").when(defaultApi20_0).getRevokeTokenEndpoint();
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient();
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, """", """", """", ""temporarily_unavailable"", ""=F5TyJ"", (OutputStream) null, ""OtherScaar"", jDKHttpClientConfig0, jDKHttpClient0);
      OAuthAsyncRequestCallback<Void> oAuthAsyncRequestCallback0 = (OAuthAsyncRequestCallback<Void>) mock(OAuthAsyncRequestCallback.class, new ViolatedAssumptionAnswer());
      oAuth20Service0.revokeToken(""=F5TyJ"", oAuthAsyncRequestCallback0);
}"
228,"    public String getResponseType() {
        return responseType;
    }","  public void test222()  throws Throwable  {
      Verb verb0 = Verb.GET;
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient();
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, """", """", ""revoke token"", (String) null, ""authorization_pending"", (OutputStream) null, """", jDKHttpClientConfig0, jDKHttpClient0);
      OAuthRequest oAuthRequest0 = new OAuthRequest(verb0, ""revoke token"");
      oAuth20Service0.sendAccessTokenRequestAsync(oAuthRequest0);
}"
229,"    public String getResponseType() {
        return responseType;
    }","  public void test223()  throws Throwable  {
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn(""E?~Y0d~"").when(defaultApi20_0).getDeviceAuthorizationEndpoint();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, """", ""AMb-owhSw!S"", ""'gegNV"", ""B<"", ""B<"", (OutputStream) null, ""code_challenge"", jDKHttpClientConfig0, jDKHttpClient0);
      oAuth20Service0.getDeviceAuthorizationCodesAsync();
}"
230,"    public String getDefaultScope() {
        return defaultScope;
    }","  public void test224()  throws Throwable  {
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn(""E?~Y0d~"").when(defaultApi20_0).getDeviceAuthorizationEndpoint();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, """", ""AMb-owhSw!S"", ""'gegNV"", ""B<"", ""B<"", (OutputStream) null, ""code_challenge"", jDKHttpClientConfig0, jDKHttpClient0);
      oAuth20Service0.getDeviceAuthorizationCodesAsync();
}"
231,"    public Future<OAuth2AccessToken> getAccessTokenAsync(String code) {
        return getAccessToken(AccessTokenRequestParams.create(code), null);
    }","  public void test225()  throws Throwable  {
      Verb verb0 = Verb.GET;
      ClientAuthentication clientAuthentication0 = mock(ClientAuthentication.class, new ViolatedAssumptionAnswer());
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn(""5Tm0agmlU(a=i:h"").when(defaultApi20_0).getAccessTokenEndpoint();
      doReturn(verb0).when(defaultApi20_0).getAccessTokenVerb();
      doReturn(clientAuthentication0).when(defaultApi20_0).getClientAuthentication();
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, ""5Tm0agmlU(a=i:h"", ""5Tm0agmlU(a=i:h"", ""5Tm0agmlU(a=i:h"", (String) null, (String) null, (OutputStream) null, ""5Tm0agmlU(a=i:h"", jDKHttpClientConfig0, jDKHttpClient0);
      Future<OAuth2AccessToken> future0 = oAuth20Service0.getAccessTokenAsync(""5Tm0agmlU(a=i:h"");
}"
232,"    public String getResponseType() {
        return responseType;
    }","  public void test226()  throws Throwable  {
      Verb verb0 = Verb.GET;
      ClientAuthentication clientAuthentication0 = mock(ClientAuthentication.class, new ViolatedAssumptionAnswer());
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn(verb0).when(defaultApi20_0).getAccessTokenVerb();
      doReturn(clientAuthentication0).when(defaultApi20_0).getClientAuthentication();
      doReturn(""v)`a_(m"").when(defaultApi20_0).getRefreshTokenEndpoint();
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient();
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, """", """", ""revoke token"", (String) null, ""authorization_pending"", (OutputStream) null, """", jDKHttpClientConfig0, jDKHttpClient0);
      oAuth20Service0.refreshAccessTokenAsync(""wWA"");
}"
233,"    public String getDefaultScope() {
        return defaultScope;
    }","  public void test227()  throws Throwable  {
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient();
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, ""grant_yp"", ""h}4g,CP"", ""h}4g,CP"", ""grant_yp"", ""H0!_B%jy"", (OutputStream) null, ""Problem accessing property `"", jDKHttpClientConfig0, jDKHttpClient0);
      String string0 = oAuth20Service0.getVersion();
}"
234,"    public String getResponseType() {
        return responseType;
    }","  public void test228()  throws Throwable  {
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient();
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, ""grant_yp"", ""h}4g,CP"", ""h}4g,CP"", ""grant_yp"", ""H0!_B%jy"", (OutputStream) null, ""Problem accessing property `"", jDKHttpClientConfig0, jDKHttpClient0);
      String string0 = oAuth20Service0.getVersion();
}"
235,"    public String getVersion() {
        return VERSION;
    }","  public void test229()  throws Throwable  {
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient();
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, ""grant_yp"", ""h}4g,CP"", ""h}4g,CP"", ""grant_yp"", ""H0!_B%jy"", (OutputStream) null, ""Problem accessing property `"", jDKHttpClientConfig0, jDKHttpClient0);
      String string0 = oAuth20Service0.getVersion();
}"
236,"    public OAuth2AccessToken refreshAccessToken(String refreshToken)
            throws IOException, InterruptedException, ExecutionException {
        return refreshAccessToken(refreshToken, (String) null);
    }","  public void test230()  throws Throwable  {
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn((Verb) null).when(defaultApi20_0).getAccessTokenVerb();
      doReturn((ClientAuthentication) null).when(defaultApi20_0).getClientAuthentication();
      doReturn((String) null).when(defaultApi20_0).getRefreshTokenEndpoint();
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient();
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, ""g{X6>J@fSal5["", ""g{X6>J@fSal5["", ""g{X6>J@fSal5["", (String) null, ""username"", (OutputStream) null, ""username"", jDKHttpClientConfig0, jDKHttpClient0);
      // Undeclared exception!
      try { 
        oAuth20Service0.refreshAccessToken(""got DeviceAuthorizationCodes response"");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""com.github.scribejava.core.oauth.OAuth20Service"", e);
      }
  }"
237,"    public OAuth2AccessToken getAccessTokenClientCredentialsGrant()
            throws IOException, InterruptedException, ExecutionException {
        final OAuthRequest request = createAccessTokenClientCredentialsGrantRequest(null);

        return sendAccessTokenRequestSync(request);
    }","  public void test231()  throws Throwable  {
      Verb verb0 = Verb.OPTIONS;
      ClientAuthentication clientAuthentication0 = mock(ClientAuthentication.class, new ViolatedAssumptionAnswer());
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn(""access tokn"").when(defaultApi20_0).getAccessTokenEndpoint();
      doReturn(verb0).when(defaultApi20_0).getAccessTokenVerb();
      doReturn(clientAuthentication0).when(defaultApi20_0).getClientAuthentication();
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, ""k?VKA'"", ""_F"", ""k?VKA'"", ""k?VKA'"", ""3lp"", (OutputStream) null, ""_F"", jDKHttpClientConfig0, jDKHttpClient0);
      try { 
        oAuth20Service0.getAccessTokenClientCredentialsGrant(""3lp"");
        fail(""Expecting exception: MalformedURLException"");
      } catch(MalformedURLException e) {
         //
         // no protocol: access tokn?scope=3lp&grant_type=client_credentials
         //
         verifyException(""java.net.URL"", e);
      }
  }"
238,"    public Future<OAuth2AccessToken> getAccessTokenClientCredentialsGrantAsync() {
        return getAccessTokenClientCredentialsGrant((OAuthAsyncRequestCallback<OAuth2AccessToken>) null);
    }","  public void test232()  throws Throwable  {
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(defaultApi20_0).getAccessTokenEndpoint();
      doReturn((Verb) null).when(defaultApi20_0).getAccessTokenVerb();
      doReturn((ClientAuthentication) null).when(defaultApi20_0).getClientAuthentication();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, """", ""AMb-owhSw!S"", ""'gegNV"", ""B<"", ""B<"", (OutputStream) null, ""code_challenge"", jDKHttpClientConfig0, jDKHttpClient0);
      // Undeclared exception!
      try { 
        oAuth20Service0.getAccessTokenClientCredentialsGrantAsync();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""com.github.scribejava.core.oauth.OAuth20Service"", e);
      }
  }"
239,"    public DeviceAuthorization getDeviceAuthorizationCodes()
            throws InterruptedException, ExecutionException, IOException {
        return getDeviceAuthorizationCodes((String) null);
    }","  public void test233()  throws Throwable  {
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn("""").when(defaultApi20_0).getDeviceAuthorizationEndpoint();
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, """", ""B<"", ""E?~Y0d~"", """", ""cVo"", (OutputStream) null, """", jDKHttpClientConfig0, jDKHttpClient0);
      try { 
        oAuth20Service0.getDeviceAuthorizationCodes();
        fail(""Expecting exception: MalformedURLException"");
      } catch(MalformedURLException e) {
         //
         // no protocol: 
         //
         verifyException(""java.net.URL"", e);
      }
  }"
240,"    public OAuth2AccessToken getAccessTokenPasswordGrant(String username, String password)
            throws IOException, InterruptedException, ExecutionException {
        final OAuthRequest request = createAccessTokenPasswordGrantRequest(username, password, null);

        return sendAccessTokenRequestSync(request);
    }","  public void test234()  throws Throwable  {
      Verb verb0 = Verb.OPTIONS;
      ClientAuthentication clientAuthentication0 = mock(ClientAuthentication.class, new ViolatedAssumptionAnswer());
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn(""access tokn"").when(defaultApi20_0).getAccessTokenEndpoint();
      doReturn(verb0).when(defaultApi20_0).getAccessTokenVerb();
      doReturn(clientAuthentication0).when(defaultApi20_0).getClientAuthentication();
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, ""k?VKA'"", """", ""k?VKA'"", ""k?VKA'"", ""3lp"", (OutputStream) null, """", jDKHttpClientConfig0, jDKHttpClient0);
      try { 
        oAuth20Service0.getAccessTokenPasswordGrant(""3lp"", ""blank String (all whitespace)"");
        fail(""Expecting exception: MalformedURLException"");
      } catch(MalformedURLException e) {
         //
         // no protocol: access tokn?username=3lp&password=blank%20String%20%28all%20whitespace%29&scope=k%3FVKA%27&grant_type=password
         //
         verifyException(""java.net.URL"", e);
      }
  }"
241,"    public String getResponseType() {
        return responseType;
    }","  public void test235()  throws Throwable  {
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn(""g5m0agml0(a=iV:h"").when(defaultApi20_0).getAuthorizationUrl(anyString() , anyString() , anyString() , anyString() , anyString() , anyMap());
      doReturn(""scope"").when(defaultApi20_0).toString();
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, ""USE_BASE_TYPE_AS_DEFAULT_IMPL"", ""USE_BASE_TYPE_AS_DEFAULT_IMPL"", ""v'?9];m;fSQTcg3.%8"", (String) null, ""3'FI<\""y7lH8?!kyEmX>"", (OutputStream) null, ""v'?9];m;fSQTcg3.%8"", jDKHttpClientConfig0, jDKHttpClient0);
      Verb verb0 = Verb.HEAD;
      OAuthRequest oAuthRequest0 = new OAuthRequest(verb0, (String) null);
      Map<String, String> map0 = oAuthRequest0.getOauthParameters();
      oAuth20Service0.getAuthorizationUrl(map0);
}"
242,"    public Future<OAuth2AccessToken> getAccessTokenPasswordGrantAsync(String username, String password) {
        return getAccessTokenPasswordGrantAsync(username, password,
                (OAuthAsyncRequestCallback<OAuth2AccessToken>) null);
    }","  public void test236()  throws Throwable  {
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(defaultApi20_0).getAccessTokenEndpoint();
      doReturn((Verb) null).when(defaultApi20_0).getAccessTokenVerb();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, true);
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient();
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, ""9h<u;2Ws"", ""9h<u;2Ws"", ""token_type_hint"", """", ""com.fasterxml.jackson.databind.ser.std.TimeZoneSerializer"", mockPrintStream0, ""client_id"", (HttpClientConfig) null, jDKHttpClient0);
      OAuthAsyncRequestCallback<OAuth2AccessToken> oAuthAsyncRequestCallback0 = (OAuthAsyncRequestCallback<OAuth2AccessToken>) mock(OAuthAsyncRequestCallback.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        oAuth20Service0.getAccessTokenPasswordGrantAsync(""com.fasterxml.jackson.databind.ser.std.TimeZoneSerializer"", ""state"", oAuthAsyncRequestCallback0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
243,"    public String getDefaultScope() {
        return defaultScope;
    }","  public void test237()  throws Throwable  {
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(defaultApi20_0).getAuthorizationUrl(anyString() , anyString() , anyString() , anyString() , anyString() , anyMap());
      doReturn((String) null).when(defaultApi20_0).toString();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, true);
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient();
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, ""9h<u;2Ws"", ""9h<u;2Ws"", ""token_type_hint"", """", ""com.fasterxml.jackson.databind.ser.std.TimeZoneSerializer"", mockPrintStream0, ""client_id"", (HttpClientConfig) null, jDKHttpClient0);
      oAuth20Service0.getAuthorizationUrl(""token_type_hint"");
}"
244,"    public String getResponseType() {
        return responseType;
    }","  public void test238()  throws Throwable  {
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(defaultApi20_0).getAuthorizationUrl(anyString() , anyString() , anyString() , anyString() , anyString() , anyMap());
      doReturn((String) null).when(defaultApi20_0).toString();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, true);
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient();
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, ""9h<u;2Ws"", ""9h<u;2Ws"", ""token_type_hint"", """", ""com.fasterxml.jackson.databind.ser.std.TimeZoneSerializer"", mockPrintStream0, ""client_id"", (HttpClientConfig) null, jDKHttpClient0);
      oAuth20Service0.getAuthorizationUrl(""token_type_hint"");
}"
245,"    public Future<OAuth2AccessToken> refreshAccessTokenAsync(String refreshToken) {
        return refreshAccessToken(refreshToken, (OAuthAsyncRequestCallback<OAuth2AccessToken>) null);
    }","  public void test239()  throws Throwable  {
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient();
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, ""v)[_("", ""v)[_("", ""v)[_("", (String) null, ""v)[_("", (OutputStream) null, ""v)[_("", jDKHttpClientConfig0, jDKHttpClient0);
      // Undeclared exception!
      try { 
        oAuth20Service0.refreshAccessTokenAsync((String) null, (String) null);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // The refreshToken cannot be null or empty
         //
         verifyException(""com.github.scribejava.core.oauth.OAuth20Service"", e);
      }
  }"
246,"    public OAuth2AccessToken getAccessToken(String code) throws IOException, InterruptedException, ExecutionException {
        return getAccessToken(AccessTokenRequestParams.create(code));
    }","  public void test240()  throws Throwable  {
      ClientAuthentication clientAuthentication0 = mock(ClientAuthentication.class, new ViolatedAssumptionAnswer());
      Verb verb0 = Verb.HEAD;
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn(""state"").when(defaultApi20_0).getAccessTokenEndpoint();
      doReturn(verb0).when(defaultApi20_0).getAccessTokenVerb();
      doReturn(clientAuthentication0).when(defaultApi20_0).getClientAuthentication();
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient();
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, ""grant_yp"", ""h}4g,CP"", ""h}4g,CP"", ""grant_yp"", ""H0!_B%jy"", (OutputStream) null, ""Problem accessing property `"", jDKHttpClientConfig0, jDKHttpClient0);
      try { 
        oAuth20Service0.getAccessToken("""");
        fail(""Expecting exception: MalformedURLException"");
      } catch(MalformedURLException e) {
         //
         // no protocol: state?code=&redirect_uri=h%7D4g%2CCP&scope=grant_yp&grant_type=authorization_code
         //
         verifyException(""java.net.URL"", e);
      }
  }"
247,"    public String getResponseType() {
        return responseType;
    }","  public void test241()  throws Throwable  {
      Verb verb0 = Verb.GET;
      ClientAuthentication clientAuthentication0 = mock(ClientAuthentication.class, new ViolatedAssumptionAnswer());
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn(""{F?GH\"":'G<8?"").when(defaultApi20_0).getAccessTokenEndpoint();
      doReturn(verb0).when(defaultApi20_0).getAccessTokenVerb();
      doReturn(clientAuthentication0).when(defaultApi20_0).getClientAuthentication();
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient();
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, """", """", """", ""temporarily_unavailable"", ""=F5TyJ"", (OutputStream) null, ""OtherScaar"", jDKHttpClientConfig0, jDKHttpClient0);
      oAuth20Service0.getAccessTokenPasswordGrantAsync(""OtherScaar"", ""OtherScaar"", """");
}"
248,"    public String getDefaultScope() {
        return defaultScope;
    }","  public void test242()  throws Throwable  {
      Verb verb0 = Verb.GET;
      ClientAuthentication clientAuthentication0 = mock(ClientAuthentication.class, new ViolatedAssumptionAnswer());
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn(""{F?GH\"":'G<8?"").when(defaultApi20_0).getAccessTokenEndpoint();
      doReturn(verb0).when(defaultApi20_0).getAccessTokenVerb();
      doReturn(clientAuthentication0).when(defaultApi20_0).getClientAuthentication();
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient();
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, """", """", """", ""temporarily_unavailable"", ""=F5TyJ"", (OutputStream) null, ""OtherScaar"", jDKHttpClientConfig0, jDKHttpClient0);
      oAuth20Service0.getAccessTokenPasswordGrantAsync(""OtherScaar"", ""OtherScaar"", """");
}"
249,"    public Future<OAuth2AccessToken> getAccessTokenDeviceAuthorizationGrantAsync(
            DeviceAuthorization deviceAuthorization) {
        return getAccessTokenDeviceAuthorizationGrant(deviceAuthorization, null);
    }","  public void test243()  throws Throwable  {
      Verb verb0 = Verb.DELETE;
      ClientAuthentication clientAuthentication0 = mock(ClientAuthentication.class, new ViolatedAssumptionAnswer());
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn(""+%j4"").when(defaultApi20_0).getAccessTokenEndpoint();
      doReturn(verb0).when(defaultApi20_0).getAccessTokenVerb();
      doReturn(clientAuthentication0).when(defaultApi20_0).getClientAuthentication();
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, ""+%j4"", ""+%j4"", ""+%j4"", ""+%j4"", ""+%j4"", (OutputStream) null, ""+%j4"", jDKHttpClientConfig0, jDKHttpClient0);
      DeviceAuthorization deviceAuthorization0 = new DeviceAuthorization(""+%j4"", ""+%j4"", ""+%j4"", 1273);
      Future<OAuth2AccessToken> future0 = oAuth20Service0.getAccessTokenDeviceAuthorizationGrantAsync(deviceAuthorization0);
}"
250,"    public DeviceAuthorization getDeviceAuthorizationCodes()
            throws InterruptedException, ExecutionException, IOException {
        return getDeviceAuthorizationCodes((String) null);
    }","  public void test244()  throws Throwable  {
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(defaultApi20_0).getDeviceAuthorizationEndpoint();
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, ""USE_BASE_TYPE_AS_DEFAULT_IMPL"", ""USE_BASE_TYPE_AS_DEFAULT_IMPL"", ""v'?9];m;fSQTcg3.%8"", (String) null, ""3'FI<\""y7lH8?!kyEmX>"", (OutputStream) null, ""v'?9];m;fSQTcg3.%8"", jDKHttpClientConfig0, jDKHttpClient0);
      // Undeclared exception!
      try { 
        oAuth20Service0.getDeviceAuthorizationCodes(""_:TlHD'p58GlKnld'2]"", (OAuthAsyncRequestCallback<DeviceAuthorization>) null);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Cannot append to null URL
         //
         verifyException(""com.github.scribejava.core.utils.Preconditions"", e);
      }
  }"
251,"    protected void appendSignature(OAuthRequest request) {
        final OAuth1SignatureType signatureType = api.getSignatureType();
        switch (signatureType) {
            case HEADER:
                log(""using Http Header signature"");

                final String oauthHeader = api.getHeaderExtractor().extract(request);
                request.addHeader(OAuthConstants.HEADER, oauthHeader);
                break;
            case QUERY_STRING:
                log(""using Querystring signature"");

                for (Map.Entry<String, String> oauthParameter : request.getOauthParameters().entrySet()) {
                    request.addQuerystringParameter(oauthParameter.getKey(), oauthParameter.getValue());
                }
                break;
            default:
                throw new IllegalStateException(""Unknown new Signature Type '"" + signatureType + ""'."");
        }
    }","  public void test0()  throws Throwable  {
      TimestampService timestampService0 = mock(TimestampService.class, new ViolatedAssumptionAnswer());
      doReturn(""BR5X1\""a5nR"").when(timestampService0).getTimestampInSeconds();
      SignatureService signatureService0 = mock(SignatureService.class, new ViolatedAssumptionAnswer());
      doReturn(""BR5X1\""a5nR"").when(signatureService0).getSignature(anyString() , anyString() , anyString());
      BaseStringExtractor baseStringExtractor0 = mock(BaseStringExtractor.class, new ViolatedAssumptionAnswer());
      doReturn(""BR5X1\""a5nR"").when(baseStringExtractor0).extract(any(com.github.scribejava.core.model.OAuthRequest.class));
      SignatureService signatureService1 = mock(SignatureService.class, new ViolatedAssumptionAnswer());
      doReturn(""BR5X1\""a5nR"").when(signatureService1).getSignatureMethod();
      Verb verb0 = Verb.GET;
      HeaderExtractor headerExtractor0 = mock(HeaderExtractor.class, new ViolatedAssumptionAnswer());
      doReturn(""BR5X1\""a5nR"").when(headerExtractor0).extract(any(com.github.scribejava.core.model.OAuthRequest.class));
      OAuth1SignatureType oAuth1SignatureType0 = OAuth1SignatureType.HEADER;
      TimestampService timestampService1 = mock(TimestampService.class, new ViolatedAssumptionAnswer());
      doReturn(""BR5X1\""a5nR"").when(timestampService1).getNonce();
      OAuth1RequestToken oAuth1RequestToken0 = new OAuth1RequestToken(""BR5X1\""a5nR"", ""BR5X1\""a5nR"", ""BR5X1\""a5nR"");
      TokenExtractor<OAuth1RequestToken> tokenExtractor0 = (TokenExtractor<OAuth1RequestToken>) mock(TokenExtractor.class, new ViolatedAssumptionAnswer());
      TokenExtractor<OAuth1RequestToken> tokenExtractor1 = (TokenExtractor<OAuth1RequestToken>) mock(TokenExtractor.class, new ViolatedAssumptionAnswer());
      Verb verb1 = Verb.DELETE;
      BaseStringExtractor baseStringExtractor1 = mock(BaseStringExtractor.class, new ViolatedAssumptionAnswer());
      HeaderExtractor headerExtractor1 = mock(HeaderExtractor.class, new ViolatedAssumptionAnswer());
      SignatureService signatureService2 = mock(SignatureService.class, new ViolatedAssumptionAnswer());
      DefaultApi10a defaultApi10a0 = mock(DefaultApi10a.class, new ViolatedAssumptionAnswer());
      doReturn(""https://"").when(defaultApi10a0).getAccessTokenEndpoint();
      doReturn(verb1).when(defaultApi10a0).getAccessTokenVerb();
      doReturn(baseStringExtractor0).when(defaultApi10a0).getBaseStringExtractor();
      doReturn(headerExtractor0, (HeaderExtractor) null).when(defaultApi10a0).getHeaderExtractor();
      doReturn(signatureService1, signatureService0).when(defaultApi10a0).getSignatureService();
      doReturn(oAuth1SignatureType0, oAuth1SignatureType0).when(defaultApi10a0).getSignatureType();
      doReturn(timestampService0, timestampService1).when(defaultApi10a0).getTimestampService();
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient();
      OAuth10aService oAuth10aService0 = new OAuth10aService(defaultApi10a0, ""BR5X1\""a5nR"", ""https://"", ""BR5X1\""a5nR"", ""BR5X1\""a5nR"", (OutputStream) null, ""BR5X1\""a5nR"", jDKHttpClientConfig0, jDKHttpClient0);
      OAuthRequest oAuthRequest0 = oAuth10aService0.prepareAccessTokenRequest(oAuth1RequestToken0, ""https://"");
      // Undeclared exception!
      try { 
        oAuth10aService0.appendSignature(oAuthRequest0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""com.github.scribejava.core.oauth.OAuth10aService"", e);
      }
  }"
252,"    public String getVersion() {
        return VERSION;
    }","  public void test1()  throws Throwable  {
      Verb verb0 = Verb.DELETE;
      TimestampService timestampService0 = mock(TimestampService.class, new ViolatedAssumptionAnswer());
      doReturn(""k"").when(timestampService0).getTimestampInSeconds();
      SignatureService signatureService0 = mock(SignatureService.class, new ViolatedAssumptionAnswer());
      doReturn("")x^L"").when(signatureService0).getSignatureMethod();
      TimestampService timestampService1 = mock(TimestampService.class, new ViolatedAssumptionAnswer());
      doReturn(""mM?n"").when(timestampService1).getNonce();
      BaseStringExtractor baseStringExtractor0 = mock(BaseStringExtractor.class, new ViolatedAssumptionAnswer());
      doReturn(""k"").when(baseStringExtractor0).extract(any(com.github.scribejava.core.model.OAuthRequest.class));
      SignatureService signatureService1 = mock(SignatureService.class, new ViolatedAssumptionAnswer());
      doReturn(""g)"").when(signatureService1).getSignature(anyString() , anyString() , anyString());
      DefaultApi10a defaultApi10a0 = mock(DefaultApi10a.class, new ViolatedAssumptionAnswer());
      doReturn(baseStringExtractor0).when(defaultApi10a0).getBaseStringExtractor();
      doReturn(signatureService0, signatureService1).when(defaultApi10a0).getSignatureService();
      doReturn(timestampService0, timestampService1).when(defaultApi10a0).getTimestampService();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null);
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient();
      OAuth10aService oAuth10aService0 = new OAuth10aService(defaultApi10a0, ""d!i|,9$"", ""d!i|,9$"", """", """", bufferedOutputStream0, ""~aRk[K_H8j&6R]"", (HttpClientConfig) null, jDKHttpClient0);
      OAuthRequest oAuthRequest0 = new OAuthRequest(verb0, ""~aRk[K_H8j&6R]"");
      oAuth10aService0.addOAuthParams(oAuthRequest0, "", message='"");
}"
253,"    public String getVersion() {
        return VERSION;
    }","  public void test2()  throws Throwable  {
      TimestampService timestampService0 = mock(TimestampService.class, new ViolatedAssumptionAnswer());
      doReturn(""http://"").when(timestampService0).getTimestampInSeconds();
      SignatureService signatureService0 = mock(SignatureService.class, new ViolatedAssumptionAnswer());
      doReturn(""http://"").when(signatureService0).getSignature(anyString() , anyString() , anyString());
      BaseStringExtractor baseStringExtractor0 = mock(BaseStringExtractor.class, new ViolatedAssumptionAnswer());
      doReturn(""Unknown new Signature Type '"").when(baseStringExtractor0).extract(any(com.github.scribejava.core.model.OAuthRequest.class));
      SignatureService signatureService1 = mock(SignatureService.class, new ViolatedAssumptionAnswer());
      doReturn(""http://"").when(signatureService1).getSignatureMethod();
      Verb verb0 = Verb.GET;
      HeaderExtractor headerExtractor0 = mock(HeaderExtractor.class, new ViolatedAssumptionAnswer());
      doReturn(""2:q!3@CN,RkD8/{AiCU"").when(headerExtractor0).extract(any(com.github.scribejava.core.model.OAuthRequest.class));
      OAuth1SignatureType oAuth1SignatureType0 = OAuth1SignatureType.HEADER;
      TimestampService timestampService1 = mock(TimestampService.class, new ViolatedAssumptionAnswer());
      doReturn(""http://"").when(timestampService1).getNonce();
      TokenExtractor<OAuth1AccessToken> tokenExtractor0 = (TokenExtractor<OAuth1AccessToken>) mock(TokenExtractor.class, new ViolatedAssumptionAnswer());
      doReturn((Token) null).when(tokenExtractor0).extract(any(com.github.scribejava.core.model.Response.class));
      DefaultApi10a defaultApi10a0 = mock(DefaultApi10a.class, new ViolatedAssumptionAnswer());
      doReturn(""http://"").when(defaultApi10a0).getAccessTokenEndpoint();
      doReturn(tokenExtractor0).when(defaultApi10a0).getAccessTokenExtractor();
      doReturn(verb0).when(defaultApi10a0).getAccessTokenVerb();
      doReturn(baseStringExtractor0).when(defaultApi10a0).getBaseStringExtractor();
      doReturn(headerExtractor0).when(defaultApi10a0).getHeaderExtractor();
      doReturn(signatureService1, signatureService0).when(defaultApi10a0).getSignatureService();
      doReturn(oAuth1SignatureType0).when(defaultApi10a0).getSignatureType();
      doReturn(timestampService0, timestampService1).when(defaultApi10a0).getTimestampService();
      doReturn(""e1"").when(defaultApi10a0).toString();
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuth10aService oAuth10aService0 = new OAuth10aService(defaultApi10a0, ""http://"", ""com.github.scribejava.core.oauth.OAuth10aService$3"", ""http://"", ""http://"", (OutputStream) null, ""http://"", jDKHttpClientConfig0, jDKHttpClient0);
      OAuth1RequestToken oAuth1RequestToken0 = new OAuth1RequestToken(""http://"", ""Unknown new Signature Type '"");
      oAuth10aService0.getAccessTokenAsync(oAuth1RequestToken0, ""h2b 2(;"");
}"
254,"    public String getVersion() {
        return VERSION;
    }","  public void test3()  throws Throwable  {
      TimestampService timestampService0 = mock(TimestampService.class, new ViolatedAssumptionAnswer());
      doReturn(""BR5X1\""a5nR"").when(timestampService0).getTimestampInSeconds();
      SignatureService signatureService0 = mock(SignatureService.class, new ViolatedAssumptionAnswer());
      doReturn(""BR5X1\""a5nR"").when(signatureService0).getSignature(anyString() , anyString() , anyString());
      BaseStringExtractor baseStringExtractor0 = mock(BaseStringExtractor.class, new ViolatedAssumptionAnswer());
      doReturn(""Unknown new Signature Type '"").when(baseStringExtractor0).extract(any(com.github.scribejava.core.model.OAuthRequest.class));
      SignatureService signatureService1 = mock(SignatureService.class, new ViolatedAssumptionAnswer());
      doReturn(""BR5X1\""a5nR"").when(signatureService1).getSignatureMethod();
      Verb verb0 = Verb.GET;
      HeaderExtractor headerExtractor0 = mock(HeaderExtractor.class, new ViolatedAssumptionAnswer());
      doReturn(""2:q!3@CN,RkD8/{AiCU"").when(headerExtractor0).extract(any(com.github.scribejava.core.model.OAuthRequest.class));
      OAuth1SignatureType oAuth1SignatureType0 = OAuth1SignatureType.HEADER;
      TimestampService timestampService1 = mock(TimestampService.class, new ViolatedAssumptionAnswer());
      doReturn(""BR5X1\""a5nR"").when(timestampService1).getNonce();
      DefaultApi10a defaultApi10a0 = mock(DefaultApi10a.class, new ViolatedAssumptionAnswer());
      doReturn(baseStringExtractor0).when(defaultApi10a0).getBaseStringExtractor();
      doReturn(headerExtractor0).when(defaultApi10a0).getHeaderExtractor();
      doReturn(""https://"").when(defaultApi10a0).getRequestTokenEndpoint();
      doReturn(verb0).when(defaultApi10a0).getRequestTokenVerb();
      doReturn(signatureService1, signatureService0).when(defaultApi10a0).getSignatureService();
      doReturn(oAuth1SignatureType0).when(defaultApi10a0).getSignatureType();
      doReturn(timestampService0, timestampService1).when(defaultApi10a0).getTimestampService();
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuth10aService oAuth10aService0 = new OAuth10aService(defaultApi10a0, ""BR5X1\""a5nR"", ""com.github.scribejava.core.oauth.OAuth10aService$3"", ""BR5X1\""a5nR"", ""BR5X1\""a5nR"", (OutputStream) null, ""BR5X1\""a5nR"", jDKHttpClientConfig0, jDKHttpClient0);
      oAuth10aService0.prepareRequestTokenRequest();
}"
255,"    public String getVersion() {
        return VERSION;
    }","  public void test4()  throws Throwable  {
      TimestampService timestampService0 = mock(TimestampService.class, new ViolatedAssumptionAnswer());
      doReturn(""BR5X1\""a5nR"").when(timestampService0).getTimestampInSeconds();
      SignatureService signatureService0 = mock(SignatureService.class, new ViolatedAssumptionAnswer());
      doReturn(""BR5X1\""a5nR"").when(signatureService0).getSignature(anyString() , anyString() , anyString());
      BaseStringExtractor baseStringExtractor0 = mock(BaseStringExtractor.class, new ViolatedAssumptionAnswer());
      doReturn(""Unknown new Signature Type '"").when(baseStringExtractor0).extract(any(com.github.scribejava.core.model.OAuthRequest.class));
      SignatureService signatureService1 = mock(SignatureService.class, new ViolatedAssumptionAnswer());
      doReturn(""BR5X1\""a5nR"").when(signatureService1).getSignatureMethod();
      Verb verb0 = Verb.GET;
      HeaderExtractor headerExtractor0 = mock(HeaderExtractor.class, new ViolatedAssumptionAnswer());
      doReturn(""2:q!3@CN,RkD8/{AiCU"").when(headerExtractor0).extract(any(com.github.scribejava.core.model.OAuthRequest.class));
      OAuth1SignatureType oAuth1SignatureType0 = OAuth1SignatureType.HEADER;
      TimestampService timestampService1 = mock(TimestampService.class, new ViolatedAssumptionAnswer());
      doReturn(""BR5X1\""a5nR"").when(timestampService1).getNonce();
      TokenExtractor<OAuth1RequestToken> tokenExtractor0 = (TokenExtractor<OAuth1RequestToken>) mock(TokenExtractor.class, new ViolatedAssumptionAnswer());
      doReturn((Token) null).when(tokenExtractor0).extract(any(com.github.scribejava.core.model.Response.class));
      DefaultApi10a defaultApi10a0 = mock(DefaultApi10a.class, new ViolatedAssumptionAnswer());
      doReturn(baseStringExtractor0).when(defaultApi10a0).getBaseStringExtractor();
      doReturn(headerExtractor0).when(defaultApi10a0).getHeaderExtractor();
      doReturn(""https://"").when(defaultApi10a0).getRequestTokenEndpoint();
      doReturn(tokenExtractor0).when(defaultApi10a0).getRequestTokenExtractor();
      doReturn(verb0).when(defaultApi10a0).getRequestTokenVerb();
      doReturn(signatureService1, signatureService0).when(defaultApi10a0).getSignatureService();
      doReturn(oAuth1SignatureType0).when(defaultApi10a0).getSignatureType();
      doReturn(timestampService0, timestampService1).when(defaultApi10a0).getTimestampService();
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuth10aService oAuth10aService0 = new OAuth10aService(defaultApi10a0, ""BR5X1\""a5nR"", ""com.github.scribejava.core.oauth.OAuth10aService$3"", ""BR5X1\""a5nR"", ""BR5X1\""a5nR"", (OutputStream) null, ""BR5X1\""a5nR"", jDKHttpClientConfig0, jDKHttpClient0);
      oAuth10aService0.getRequestToken();
}"
256,"    public String getVersion() {
        return VERSION;
    }","  public void test5()  throws Throwable  {
      TimestampService timestampService0 = mock(TimestampService.class, new ViolatedAssumptionAnswer());
      doReturn(""BR5X1z\""a5nR"").when(timestampService0).getTimestampInSeconds();
      SignatureService signatureService0 = mock(SignatureService.class, new ViolatedAssumptionAnswer());
      doReturn(""BR5X1z\""a5nR"").when(signatureService0).getSignature(anyString() , anyString() , anyString());
      BaseStringExtractor baseStringExtractor0 = mock(BaseStringExtractor.class, new ViolatedAssumptionAnswer());
      doReturn(""Unknown new Signature Type '"").when(baseStringExtractor0).extract(any(com.github.scribejava.core.model.OAuthRequest.class));
      SignatureService signatureService1 = mock(SignatureService.class, new ViolatedAssumptionAnswer());
      doReturn(""BR5X1z\""a5nR"").when(signatureService1).getSignatureMethod();
      Verb verb0 = Verb.GET;
      HeaderExtractor headerExtractor0 = mock(HeaderExtractor.class, new ViolatedAssumptionAnswer());
      doReturn(""2:q!3@CN,RkD8/{AiCU"").when(headerExtractor0).extract(any(com.github.scribejava.core.model.OAuthRequest.class));
      OAuth1SignatureType oAuth1SignatureType0 = OAuth1SignatureType.HEADER;
      TimestampService timestampService1 = mock(TimestampService.class, new ViolatedAssumptionAnswer());
      doReturn(""BR5X1z\""a5nR"").when(timestampService1).getNonce();
      OAuth1RequestToken oAuth1RequestToken0 = new OAuth1RequestToken(""|i2lk5|*k5h:eEIs0~"", ""Unknown new Signature Type '"", false, ""|i2lk5|*k5h:eEIs0~"");
      TokenExtractor<OAuth1RequestToken> tokenExtractor0 = (TokenExtractor<OAuth1RequestToken>) mock(TokenExtractor.class, new ViolatedAssumptionAnswer());
      doReturn(oAuth1RequestToken0).when(tokenExtractor0).extract(any(com.github.scribejava.core.model.Response.class));
      DefaultApi10a defaultApi10a0 = mock(DefaultApi10a.class, new ViolatedAssumptionAnswer());
      doReturn(baseStringExtractor0).when(defaultApi10a0).getBaseStringExtractor();
      doReturn(headerExtractor0).when(defaultApi10a0).getHeaderExtractor();
      doReturn(""https://"").when(defaultApi10a0).getRequestTokenEndpoint();
      doReturn(tokenExtractor0).when(defaultApi10a0).getRequestTokenExtractor();
      doReturn(verb0).when(defaultApi10a0).getRequestTokenVerb();
      doReturn(signatureService1, signatureService0).when(defaultApi10a0).getSignatureService();
      doReturn(oAuth1SignatureType0).when(defaultApi10a0).getSignatureType();
      doReturn(timestampService0, timestampService1).when(defaultApi10a0).getTimestampService();
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuth10aService oAuth10aService0 = new OAuth10aService(defaultApi10a0, ""BR5X1z\""a5nR"", ""com.github.scribejava.core.oauth.OAuth10aService$3"", ""BR5X1z\""a5nR"", ""BR5X1z\""a5nR"", (OutputStream) null, ""BR5X1z\""a5nR"", jDKHttpClientConfig0, jDKHttpClient0);
      oAuth10aService0.getRequestToken();
}"
257,"    public String getVersion() {
        return VERSION;
    }","  public void test6()  throws Throwable  {
      TimestampService timestampService0 = mock(TimestampService.class, new ViolatedAssumptionAnswer());
      doReturn(""BR5X1\""a5nR"").when(timestampService0).getTimestampInSeconds();
      SignatureService signatureService0 = mock(SignatureService.class, new ViolatedAssumptionAnswer());
      doReturn(""BR5X1\""a5nR"").when(signatureService0).getSignature(anyString() , anyString() , anyString());
      BaseStringExtractor baseStringExtractor0 = mock(BaseStringExtractor.class, new ViolatedAssumptionAnswer());
      doReturn(""Unknown new Signature Type '"").when(baseStringExtractor0).extract(any(com.github.scribejava.core.model.OAuthRequest.class));
      SignatureService signatureService1 = mock(SignatureService.class, new ViolatedAssumptionAnswer());
      doReturn(""BR5X1\""a5nR"").when(signatureService1).getSignatureMethod();
      Verb verb0 = Verb.GET;
      HeaderExtractor headerExtractor0 = mock(HeaderExtractor.class, new ViolatedAssumptionAnswer());
      doReturn(""2:q!3@CN,RkD8/{AiCU"").when(headerExtractor0).extract(any(com.github.scribejava.core.model.OAuthRequest.class));
      OAuth1SignatureType oAuth1SignatureType0 = OAuth1SignatureType.HEADER;
      TimestampService timestampService1 = mock(TimestampService.class, new ViolatedAssumptionAnswer());
      doReturn(""BR5X1\""a5nR"").when(timestampService1).getNonce();
      OAuth1RequestToken oAuth1RequestToken0 = new OAuth1RequestToken("""", """", """");
      TokenExtractor<OAuth1RequestToken> tokenExtractor0 = (TokenExtractor<OAuth1RequestToken>) mock(TokenExtractor.class, new ViolatedAssumptionAnswer());
      doReturn(oAuth1RequestToken0).when(tokenExtractor0).extract(any(com.github.scribejava.core.model.Response.class));
      DefaultApi10a defaultApi10a0 = mock(DefaultApi10a.class, new ViolatedAssumptionAnswer());
      doReturn(baseStringExtractor0).when(defaultApi10a0).getBaseStringExtractor();
      doReturn(headerExtractor0).when(defaultApi10a0).getHeaderExtractor();
      doReturn(""https://"").when(defaultApi10a0).getRequestTokenEndpoint();
      doReturn(tokenExtractor0).when(defaultApi10a0).getRequestTokenExtractor();
      doReturn(verb0).when(defaultApi10a0).getRequestTokenVerb();
      doReturn(signatureService1, signatureService0).when(defaultApi10a0).getSignatureService();
      doReturn(oAuth1SignatureType0).when(defaultApi10a0).getSignatureType();
      doReturn(timestampService0, timestampService1).when(defaultApi10a0).getTimestampService();
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuth10aService oAuth10aService0 = new OAuth10aService(defaultApi10a0, ""BR5X1\""a5nR"", ""com.github.scribejava.core.oauth.OAuth10aService$3"", ""BR5X1\""a5nR"", ""BR5X1\""a5nR"", (OutputStream) null, ""BR5X1\""a5nR"", jDKHttpClientConfig0, jDKHttpClient0);
      oAuth10aService0.getRequestToken();
}"
258,"    public String getAuthorizationUrl(OAuth1RequestToken requestToken) {
        return api.getAuthorizationUrl(requestToken);
    }","  public void test7()  throws Throwable  {
      DefaultApi10a defaultApi10a0 = mock(DefaultApi10a.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(defaultApi10a0).getAuthorizationUrl(any(com.github.scribejava.core.model.OAuth1RequestToken.class));
      MockPrintStream mockPrintStream0 = new MockPrintStream(""$W~=@wsc+l"");
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuth10aService oAuth10aService0 = new OAuth10aService(defaultApi10a0, ""$W~=@wsc+l"", """", ""$W~=@wsc+l"", """", mockPrintStream0, """", jDKHttpClientConfig0, jDKHttpClient0);
      OAuth1RequestToken oAuth1RequestToken0 = new OAuth1RequestToken("""", ""w\bUoAfq"", false, ""G[rV@-A8S"");
      String string0 = oAuth10aService0.getAuthorizationUrl(oAuth1RequestToken0);
}"
259,"    public String getAuthorizationUrl(OAuth1RequestToken requestToken) {
        return api.getAuthorizationUrl(requestToken);
    }","  public void test8()  throws Throwable  {
      DefaultApi10a defaultApi10a0 = mock(DefaultApi10a.class, new ViolatedAssumptionAnswer());
      doReturn(""com.github.scribejava.core.httpclient.jdk.JDKHttpProvider"").when(defaultApi10a0).getAuthorizationUrl(any(com.github.scribejava.core.model.OAuth1RequestToken.class));
      MockPrintStream mockPrintStream0 = new MockPrintStream(""$W~=@wsc+l"");
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuth10aService oAuth10aService0 = new OAuth10aService(defaultApi10a0, ""$W~=@wsc+l"", """", ""$W~=@wsc+l"", """", mockPrintStream0, """", jDKHttpClientConfig0, jDKHttpClient0);
      OAuth1RequestToken oAuth1RequestToken0 = new OAuth1RequestToken("""", ""w\bUoAfq"", false, ""G[rV@-A8S"");
      String string0 = oAuth10aService0.getAuthorizationUrl(oAuth1RequestToken0);
}"
260,"    public String getAuthorizationUrl(OAuth1RequestToken requestToken) {
        return api.getAuthorizationUrl(requestToken);
    }","  public void test9()  throws Throwable  {
      DefaultApi10a defaultApi10a0 = mock(DefaultApi10a.class, new ViolatedAssumptionAnswer());
      doReturn("""").when(defaultApi10a0).getAuthorizationUrl(any(com.github.scribejava.core.model.OAuth1RequestToken.class));
      MockPrintStream mockPrintStream0 = new MockPrintStream(""$W~=@wsc+l"");
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuth10aService oAuth10aService0 = new OAuth10aService(defaultApi10a0, ""$W~=@wsc+l"", """", ""$W~=@wsc+l"", """", mockPrintStream0, """", jDKHttpClientConfig0, jDKHttpClient0);
      OAuth1RequestToken oAuth1RequestToken0 = new OAuth1RequestToken("""", ""w\bUoAfq"", false, ""G[rV@-A8S"");
      String string0 = oAuth10aService0.getAuthorizationUrl(oAuth1RequestToken0);
}"
261,"    public DefaultApi10a getApi() {
        return api;
    }","  public void test10()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient();
      OAuth10aService oAuth10aService0 = new OAuth10aService((DefaultApi10a) null, ""v(%VXd*DGKtRS!5"", ""v(%VXd*DGKtRS!5"", """", ""j!$`H4"", byteArrayOutputStream0, """", jDKHttpClientConfig0, jDKHttpClient0);
      DefaultApi10a defaultApi10a0 = oAuth10aService0.getApi();
}"
262,"    public void signRequest(OAuth1AccessToken token, OAuthRequest request) {
        if (isDebug()) {
            log(""signing request: %s"", request.getCompleteUrl());
        }

        if (!token.isEmpty() || api.isEmptyOAuthTokenParamIsRequired()) {
            request.addOAuthParameter(OAuthConstants.TOKEN, token.getToken());
        }
        if (isDebug()) {
            log(""setting token to: %s"", token);
        }
        addOAuthParams(request, token.getTokenSecret());
        appendSignature(request);
    }","  public void test11()  throws Throwable  {
      DefaultApi10a defaultApi10a0 = mock(DefaultApi10a.class, new ViolatedAssumptionAnswer());
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuth10aService oAuth10aService0 = new OAuth10aService(defaultApi10a0, ""996jbJh+LjS>"", ""996jbJh+LjS>"", ""996jbJh+LjS>"", ""996jbJh+LjS>"", pipedOutputStream0, ""oauth_signature"", jDKHttpClientConfig0, jDKHttpClient0);
      OAuth1AccessToken oAuth1AccessToken0 = new OAuth1AccessToken(""996jbJh+LjS>"", ""996jbJh+LjS>"", """");
      Verb verb0 = Verb.DELETE;
      OAuthRequest oAuthRequest0 = new OAuthRequest(verb0, "")f8MyXvbbi$?[q0"");
      // Undeclared exception!
      try { 
        oAuth10aService0.signRequest(oAuth1AccessToken0, oAuthRequest0);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // there were problems while writting to the debug stream
         //
         verifyException(""com.github.scribejava.core.oauth.OAuthService"", e);
      }
  }"
263,"    public void signRequest(OAuth1AccessToken token, OAuthRequest request) {
        if (isDebug()) {
            log(""signing request: %s"", request.getCompleteUrl());
        }

        if (!token.isEmpty() || api.isEmptyOAuthTokenParamIsRequired()) {
            request.addOAuthParameter(OAuthConstants.TOKEN, token.getToken());
        }
        if (isDebug()) {
            log(""setting token to: %s"", token);
        }
        addOAuthParams(request, token.getTokenSecret());
        appendSignature(request);
    }","  public void test12()  throws Throwable  {
      Verb verb0 = Verb.TRACE;
      DefaultApi10a defaultApi10a0 = mock(DefaultApi10a.class, new ViolatedAssumptionAnswer());
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(""R]/T-Mf%=0["");
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient();
      OAuth10aService oAuth10aService0 = new OAuth10aService(defaultApi10a0, ""async obtaining request token from %s"", ""Different boundaries was passed in constructors. One as argument, second as header"", ""Different boundaries was passed in constructors. One as argument, second as header"", ""Bzl?{b~>,q(%{JWk5]"", mockFileOutputStream0, (String) null, jDKHttpClientConfig0, jDKHttpClient0);
      OAuth1AccessToken oAuth1AccessToken0 = new OAuth1AccessToken("""", ""async obtaining request token from %s"");
      OAuthRequest oAuthRequest0 = new OAuthRequest(verb0, (String) null);
      // Undeclared exception!
      try { 
        oAuth10aService0.signRequest(oAuth1AccessToken0, oAuthRequest0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Cannot append to null URL
         //
         verifyException(""com.github.scribejava.core.utils.Preconditions"", e);
      }
  }"
264,"    protected OAuthRequest prepareRequestTokenRequest() {
        final OAuthRequest request = new OAuthRequest(api.getRequestTokenVerb(), api.getRequestTokenEndpoint());
        String callback = getCallback();
        if (callback == null) {
            callback = OAuthConstants.OOB;
        }
        if (isDebug()) {
            log(""setting oauth_callback to %s"", callback);
        }
        request.addOAuthParameter(OAuthConstants.CALLBACK, callback);
        addOAuthParams(request, """");
        appendSignature(request);
        return request;
    }","  public void test13()  throws Throwable  {
      DefaultApi10a defaultApi10a0 = mock(DefaultApi10a.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(defaultApi10a0).getRequestTokenEndpoint();
      doReturn((Verb) null).when(defaultApi10a0).getRequestTokenVerb();
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuth10aService oAuth10aService0 = new OAuth10aService(defaultApi10a0, """", ""'."", """", """", dataOutputStream0, """", jDKHttpClientConfig0, jDKHttpClient0);
      // Undeclared exception!
      try { 
        oAuth10aService0.prepareRequestTokenRequest();
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // there were problems while writting to the debug stream
         //
         verifyException(""com.github.scribejava.core.oauth.OAuthService"", e);
      }
  }"
265,"    protected OAuthRequest prepareRequestTokenRequest() {
        final OAuthRequest request = new OAuthRequest(api.getRequestTokenVerb(), api.getRequestTokenEndpoint());
        String callback = getCallback();
        if (callback == null) {
            callback = OAuthConstants.OOB;
        }
        if (isDebug()) {
            log(""setting oauth_callback to %s"", callback);
        }
        request.addOAuthParameter(OAuthConstants.CALLBACK, callback);
        addOAuthParams(request, """");
        appendSignature(request);
        return request;
    }","  public void test14()  throws Throwable  {
      DefaultApi10a defaultApi10a0 = mock(DefaultApi10a.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(defaultApi10a0).getRequestTokenEndpoint();
      doReturn((Verb) null).when(defaultApi10a0).getRequestTokenVerb();
      doReturn((TimestampService) null).when(defaultApi10a0).getTimestampService();
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuth10aService oAuth10aService0 = new OAuth10aService(defaultApi10a0, ""HEAD"", ""Iqi3]ZU"", ""com.github.scribejava.core.httpclient.jdk.JDKHttpClient"", ""HEAD"", (OutputStream) null, ""@-K<dGAhjY.bAh"", jDKHttpClientConfig0, jDKHttpClient0);
      // Undeclared exception!
      try { 
        oAuth10aService0.prepareRequestTokenRequest();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""com.github.scribejava.core.oauth.OAuth10aService"", e);
      }
  }"
266,"    protected OAuthRequest prepareAccessTokenRequest(OAuth1RequestToken requestToken, String oauthVerifier) {
        final OAuthRequest request = new OAuthRequest(api.getAccessTokenVerb(), api.getAccessTokenEndpoint());
        request.addOAuthParameter(OAuthConstants.TOKEN, requestToken.getToken());
        request.addOAuthParameter(OAuthConstants.VERIFIER, oauthVerifier);
        if (isDebug()) {
            log(""setting token to: %s and verifier to: %s"", requestToken, oauthVerifier);
        }
        addOAuthParams(request, requestToken.getTokenSecret());
        appendSignature(request);
        return request;
    }","  public void test15()  throws Throwable  {
      DefaultApi10a defaultApi10a0 = mock(DefaultApi10a.class, new ViolatedAssumptionAnswer());
      doReturn("""").when(defaultApi10a0).getAccessTokenEndpoint();
      doReturn((Verb) null).when(defaultApi10a0).getAccessTokenVerb();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuth10aService oAuth10aService0 = new OAuth10aService(defaultApi10a0, ""996jbJh+LjS>"", """", ""996jbJh+LjS>"", ""996jbJh+LjS>"", pipedOutputStream0, """", jDKHttpClientConfig0, jDKHttpClient0);
      OAuth1RequestToken oAuth1RequestToken0 = new OAuth1RequestToken(""996jbJh+LjS>"", """", false, ""996jbJh+LjS>"");
      // Undeclared exception!
      try { 
        oAuth10aService0.prepareAccessTokenRequest(oAuth1RequestToken0, ""8^+\""sYgSq1^"");
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // there were problems while writting to the debug stream
         //
         verifyException(""com.github.scribejava.core.oauth.OAuthService"", e);
      }
  }"
267,"    protected OAuthRequest prepareAccessTokenRequest(OAuth1RequestToken requestToken, String oauthVerifier) {
        final OAuthRequest request = new OAuthRequest(api.getAccessTokenVerb(), api.getAccessTokenEndpoint());
        request.addOAuthParameter(OAuthConstants.TOKEN, requestToken.getToken());
        request.addOAuthParameter(OAuthConstants.VERIFIER, oauthVerifier);
        if (isDebug()) {
            log(""setting token to: %s and verifier to: %s"", requestToken, oauthVerifier);
        }
        addOAuthParams(request, requestToken.getTokenSecret());
        appendSignature(request);
        return request;
    }","  public void test16()  throws Throwable  {
      DefaultApi10a defaultApi10a0 = mock(DefaultApi10a.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(defaultApi10a0).getAccessTokenEndpoint();
      doReturn((Verb) null).when(defaultApi10a0).getAccessTokenVerb();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuth10aService oAuth10aService0 = new OAuth10aService(defaultApi10a0, """", "">N`fHmVDJeK|Hi"", ""4mQX!."", "">N`fHmVDJeK|Hi"", pipedOutputStream0, """", jDKHttpClientConfig0, jDKHttpClient0);
      // Undeclared exception!
      try { 
        oAuth10aService0.prepareAccessTokenRequest((OAuth1RequestToken) null, ""4mQX!."");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""com.github.scribejava.core.oauth.OAuth10aService"", e);
      }
  }"
268,"    public Future<OAuth1RequestToken> getRequestTokenAsync() {
        return getRequestTokenAsync(null);
    }","  public void test17()  throws Throwable  {
      TimestampService timestampService0 = mock(TimestampService.class, new ViolatedAssumptionAnswer());
      doReturn(""k"").when(timestampService0).getTimestampInSeconds();
      SignatureService signatureService0 = mock(SignatureService.class, new ViolatedAssumptionAnswer());
      doReturn("""").when(signatureService0).getSignatureMethod();
      TimestampService timestampService1 = mock(TimestampService.class, new ViolatedAssumptionAnswer());
      doReturn(""oauth_token_secret can't be null"").when(timestampService1).getNonce();
      BaseStringExtractor baseStringExtractor0 = mock(BaseStringExtractor.class, new ViolatedAssumptionAnswer());
      doReturn("""").when(baseStringExtractor0).extract(any(com.github.scribejava.core.model.OAuthRequest.class));
      SignatureService signatureService1 = mock(SignatureService.class, new ViolatedAssumptionAnswer());
      doReturn("""").when(signatureService1).getSignature(anyString() , anyString() , anyString());
      OAuth1SignatureType oAuth1SignatureType0 = OAuth1SignatureType.HEADER;
      HeaderExtractor headerExtractor0 = mock(HeaderExtractor.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(headerExtractor0).extract(any(com.github.scribejava.core.model.OAuthRequest.class));
      DefaultApi10a defaultApi10a0 = mock(DefaultApi10a.class, new ViolatedAssumptionAnswer());
      doReturn(baseStringExtractor0).when(defaultApi10a0).getBaseStringExtractor();
      doReturn(headerExtractor0).when(defaultApi10a0).getHeaderExtractor();
      doReturn((String) null, (String) null).when(defaultApi10a0).getRequestTokenEndpoint();
      doReturn((Verb) null).when(defaultApi10a0).getRequestTokenVerb();
      doReturn(signatureService0, signatureService1).when(defaultApi10a0).getSignatureService();
      doReturn(oAuth1SignatureType0).when(defaultApi10a0).getSignatureType();
      doReturn(timestampService0, timestampService1).when(defaultApi10a0).getTimestampService();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null);
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient();
      OAuth10aService oAuth10aService0 = new OAuth10aService(defaultApi10a0, ""d!i|,9$"", ""d!i|,9$"", """", """", bufferedOutputStream0, ""~aRk[K_H8j&6R]"", (HttpClientConfig) null, jDKHttpClient0);
      OAuthAsyncRequestCallback<OAuth1RequestToken> oAuthAsyncRequestCallback0 = (OAuthAsyncRequestCallback<OAuth1RequestToken>) mock(OAuthAsyncRequestCallback.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        oAuth10aService0.getRequestTokenAsync(oAuthAsyncRequestCallback0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Cannot append to null URL
         //
         verifyException(""com.github.scribejava.core.utils.Preconditions"", e);
      }
  }"
269,"    public Future<OAuth1RequestToken> getRequestTokenAsync() {
        return getRequestTokenAsync(null);
    }","  public void test18()  throws Throwable  {
      DefaultApi10a defaultApi10a0 = mock(DefaultApi10a.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(defaultApi10a0).getRequestTokenEndpoint();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuth10aService oAuth10aService0 = new OAuth10aService(defaultApi10a0, """", ""oauth_signature"", ""996jbJh+LjS>"", """", pipedOutputStream0, """", jDKHttpClientConfig0, jDKHttpClient0);
      // Undeclared exception!
      try { 
        oAuth10aService0.getRequestTokenAsync();
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // there were problems while writting to the debug stream
         //
         verifyException(""com.github.scribejava.core.oauth.OAuthService"", e);
      }
  }"
270,"    public OAuth1RequestToken getRequestToken() throws IOException, InterruptedException, ExecutionException {
        if (isDebug()) {
            log(""obtaining request token from %s"", api.getRequestTokenEndpoint());
        }
        final OAuthRequest request = prepareRequestTokenRequest();

        log(""sending request..."");
        try (Response response = execute(request)) {
            if (isDebug()) {
                final String body = response.getBody();
                log(""response status code: %s"", response.getCode());
                log(""response body: %s"", body);
            }
            return api.getRequestTokenExtractor().extract(response);
        }
    }","  public void test19()  throws Throwable  {
      TimestampService timestampService0 = mock(TimestampService.class, new ViolatedAssumptionAnswer());
      doReturn(""BR5X1\""a5nR"").when(timestampService0).getTimestampInSeconds();
      SignatureService signatureService0 = mock(SignatureService.class, new ViolatedAssumptionAnswer());
      doReturn(""BR5X1\""a5nR"").when(signatureService0).getSignature(anyString() , anyString() , anyString());
      BaseStringExtractor baseStringExtractor0 = mock(BaseStringExtractor.class, new ViolatedAssumptionAnswer());
      doReturn(""Unknown new Signature Type '"").when(baseStringExtractor0).extract(any(com.github.scribejava.core.model.OAuthRequest.class));
      SignatureService signatureService1 = mock(SignatureService.class, new ViolatedAssumptionAnswer());
      doReturn(""BR5X1\""a5nR"").when(signatureService1).getSignatureMethod();
      Verb verb0 = Verb.POST;
      HeaderExtractor headerExtractor0 = mock(HeaderExtractor.class, new ViolatedAssumptionAnswer());
      doReturn(""2:q#3@CN,RkD8/{yiCU"").when(headerExtractor0).extract(any(com.github.scribejava.core.model.OAuthRequest.class));
      OAuth1SignatureType oAuth1SignatureType0 = OAuth1SignatureType.HEADER;
      TimestampService timestampService1 = mock(TimestampService.class, new ViolatedAssumptionAnswer());
      doReturn(""BR5X1\""a5nR"").when(timestampService1).getNonce();
      DefaultApi10a defaultApi10a0 = mock(DefaultApi10a.class, new ViolatedAssumptionAnswer());
      doReturn(baseStringExtractor0).when(defaultApi10a0).getBaseStringExtractor();
      doReturn(headerExtractor0).when(defaultApi10a0).getHeaderExtractor();
      doReturn(""https://"").when(defaultApi10a0).getRequestTokenEndpoint();
      doReturn(verb0).when(defaultApi10a0).getRequestTokenVerb();
      doReturn(signatureService1, signatureService0).when(defaultApi10a0).getSignatureService();
      doReturn(oAuth1SignatureType0).when(defaultApi10a0).getSignatureType();
      doReturn(timestampService0, timestampService1).when(defaultApi10a0).getTimestampService();
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuth10aService oAuth10aService0 = new OAuth10aService(defaultApi10a0, ""BR5X1\""a5nR"", ""com.github.scribejava.core.oauth.OAuth10aService$3"", ""BR5X1\""a5nR"", ""BR5X1\""a5nR"", (OutputStream) null, ""BR5X1\""a5nR"", jDKHttpClientConfig0, jDKHttpClient0);
      try { 
        oAuth10aService0.getRequestToken();
        fail(""Expecting exception: UnknownServiceException"");
      } catch(UnknownServiceException e) {
         //
         // protocol doesn't support output
         //
         verifyException(""org.evosuite.runtime.mock.java.net.EvoHttpURLConnection"", e);
      }
  }"
271,"    public OAuth1RequestToken getRequestToken() throws IOException, InterruptedException, ExecutionException {
        if (isDebug()) {
            log(""obtaining request token from %s"", api.getRequestTokenEndpoint());
        }
        final OAuthRequest request = prepareRequestTokenRequest();

        log(""sending request..."");
        try (Response response = execute(request)) {
            if (isDebug()) {
                final String body = response.getBody();
                log(""response status code: %s"", response.getCode());
                log(""response body: %s"", body);
            }
            return api.getRequestTokenExtractor().extract(response);
        }
    }","  public void test20()  throws Throwable  {
      TimestampService timestampService0 = mock(TimestampService.class, new ViolatedAssumptionAnswer());
      doReturn(""BR5X1\""a5nR"").when(timestampService0).getTimestampInSeconds();
      SignatureService signatureService0 = mock(SignatureService.class, new ViolatedAssumptionAnswer());
      doReturn(""BR5X1\""a5nR"").when(signatureService0).getSignature(anyString() , anyString() , anyString());
      BaseStringExtractor baseStringExtractor0 = mock(BaseStringExtractor.class, new ViolatedAssumptionAnswer());
      doReturn(""Unknown new Signature Type '"").when(baseStringExtractor0).extract(any(com.github.scribejava.core.model.OAuthRequest.class));
      SignatureService signatureService1 = mock(SignatureService.class, new ViolatedAssumptionAnswer());
      doReturn(""BR5X1\""a5nR"").when(signatureService1).getSignatureMethod();
      Verb verb0 = Verb.PATCH;
      HeaderExtractor headerExtractor0 = mock(HeaderExtractor.class, new ViolatedAssumptionAnswer());
      doReturn(""BR5X1\""a5nR"").when(headerExtractor0).extract(any(com.github.scribejava.core.model.OAuthRequest.class));
      OAuth1SignatureType oAuth1SignatureType0 = OAuth1SignatureType.HEADER;
      TimestampService timestampService1 = mock(TimestampService.class, new ViolatedAssumptionAnswer());
      doReturn(""BR5X1\""a5nR"").when(timestampService1).getNonce();
      DefaultApi10a defaultApi10a0 = mock(DefaultApi10a.class, new ViolatedAssumptionAnswer());
      doReturn(baseStringExtractor0).when(defaultApi10a0).getBaseStringExtractor();
      doReturn(headerExtractor0).when(defaultApi10a0).getHeaderExtractor();
      doReturn(""https://"").when(defaultApi10a0).getRequestTokenEndpoint();
      doReturn(verb0).when(defaultApi10a0).getRequestTokenVerb();
      doReturn(signatureService1, signatureService0).when(defaultApi10a0).getSignatureService();
      doReturn(oAuth1SignatureType0).when(defaultApi10a0).getSignatureType();
      doReturn(timestampService0, timestampService1).when(defaultApi10a0).getTimestampService();
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuth10aService oAuth10aService0 = new OAuth10aService(defaultApi10a0, ""BR5X1\""a5nR"", ""com.github.scribejava.core.oauth.OAuth10aService$3"", ""BR5X1\""a5nR"", ""BR5X1\""a5nR"", (OutputStream) null, ""BR5X1\""a5nR"", jDKHttpClientConfig0, jDKHttpClient0);
      try { 
        oAuth10aService0.getRequestToken();
        fail(""Expecting exception: ProtocolException"");
      } catch(ProtocolException e) {
         //
         // Invalid HTTP method: PATCH
         //
         verifyException(""org.evosuite.runtime.mock.java.net.EvoHttpURLConnection"", e);
      }
  }"
272,"    public OAuth1RequestToken getRequestToken() throws IOException, InterruptedException, ExecutionException {
        if (isDebug()) {
            log(""obtaining request token from %s"", api.getRequestTokenEndpoint());
        }
        final OAuthRequest request = prepareRequestTokenRequest();

        log(""sending request..."");
        try (Response response = execute(request)) {
            if (isDebug()) {
                final String body = response.getBody();
                log(""response status code: %s"", response.getCode());
                log(""response body: %s"", body);
            }
            return api.getRequestTokenExtractor().extract(response);
        }
    }","  public void test21()  throws Throwable  {
      DefaultApi10a defaultApi10a0 = mock(DefaultApi10a.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(defaultApi10a0).getRequestTokenEndpoint();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuth10aService oAuth10aService0 = new OAuth10aService(defaultApi10a0, ""996jbJh+LjS>"", """", ""996jbJh+LjS>"", ""996jbJh+LjS>"", pipedOutputStream0, ""oauth_signature"", jDKHttpClientConfig0, jDKHttpClient0);
      // Undeclared exception!
      try { 
        oAuth10aService0.getRequestToken();
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // there were problems while writting to the debug stream
         //
         verifyException(""com.github.scribejava.core.oauth.OAuthService"", e);
      }
  }"
273,"    public OAuth1RequestToken getRequestToken() throws IOException, InterruptedException, ExecutionException {
        if (isDebug()) {
            log(""obtaining request token from %s"", api.getRequestTokenEndpoint());
        }
        final OAuthRequest request = prepareRequestTokenRequest();

        log(""sending request..."");
        try (Response response = execute(request)) {
            if (isDebug()) {
                final String body = response.getBody();
                log(""response status code: %s"", response.getCode());
                log(""response body: %s"", body);
            }
            return api.getRequestTokenExtractor().extract(response);
        }
    }","  public void test22()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient();
      OAuth10aService oAuth10aService0 = new OAuth10aService((DefaultApi10a) null, ""v(%VXd*DGKtRS!5"", ""v(%VXd*DGKtRS!5"", """", ""j!$`H4"", byteArrayOutputStream0, """", jDKHttpClientConfig0, jDKHttpClient0);
      // Undeclared exception!
      try { 
        oAuth10aService0.getRequestToken();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""com.github.scribejava.core.oauth.OAuth10aService"", e);
      }
  }"
274,"    public OAuth1RequestToken getRequestToken() throws IOException, InterruptedException, ExecutionException {
        if (isDebug()) {
            log(""obtaining request token from %s"", api.getRequestTokenEndpoint());
        }
        final OAuthRequest request = prepareRequestTokenRequest();

        log(""sending request..."");
        try (Response response = execute(request)) {
            if (isDebug()) {
                final String body = response.getBody();
                log(""response status code: %s"", response.getCode());
                log(""response body: %s"", body);
            }
            return api.getRequestTokenExtractor().extract(response);
        }
    }","  public void test23()  throws Throwable  {
      TimestampService timestampService0 = mock(TimestampService.class, new ViolatedAssumptionAnswer());
      doReturn(""BR5X1\""a5nR"").when(timestampService0).getTimestampInSeconds();
      SignatureService signatureService0 = mock(SignatureService.class, new ViolatedAssumptionAnswer());
      doReturn(""BR5X1\""a5nR"").when(signatureService0).getSignature(anyString() , anyString() , anyString());
      BaseStringExtractor baseStringExtractor0 = mock(BaseStringExtractor.class, new ViolatedAssumptionAnswer());
      doReturn(""Unknown new Signature Type '"").when(baseStringExtractor0).extract(any(com.github.scribejava.core.model.OAuthRequest.class));
      SignatureService signatureService1 = mock(SignatureService.class, new ViolatedAssumptionAnswer());
      doReturn(""BR5X1\""a5nR"").when(signatureService1).getSignatureMethod();
      Verb verb0 = Verb.GET;
      HeaderExtractor headerExtractor0 = mock(HeaderExtractor.class, new ViolatedAssumptionAnswer());
      doReturn(""BR5X1\""a5nR"").when(headerExtractor0).extract(any(com.github.scribejava.core.model.OAuthRequest.class));
      OAuth1SignatureType oAuth1SignatureType0 = OAuth1SignatureType.HEADER;
      TimestampService timestampService1 = mock(TimestampService.class, new ViolatedAssumptionAnswer());
      doReturn(""BR5X1\""a5nR"").when(timestampService1).getNonce();
      DefaultApi10a defaultApi10a0 = mock(DefaultApi10a.class, new ViolatedAssumptionAnswer());
      doReturn(baseStringExtractor0).when(defaultApi10a0).getBaseStringExtractor();
      doReturn(headerExtractor0).when(defaultApi10a0).getHeaderExtractor();
      doReturn(""https://"").when(defaultApi10a0).getRequestTokenEndpoint();
      doReturn(verb0).when(defaultApi10a0).getRequestTokenVerb();
      doReturn(signatureService1, signatureService0).when(defaultApi10a0).getSignatureService();
      doReturn(oAuth1SignatureType0).when(defaultApi10a0).getSignatureType();
      doReturn(timestampService0, timestampService1).when(defaultApi10a0).getTimestampService();
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      Integer integer0 = new Integer((-857));
      jDKHttpClientConfig0.setReadTimeout(integer0);
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuth10aService oAuth10aService0 = new OAuth10aService(defaultApi10a0, ""BR5X1\""a5nR"", ""com.github.scribejava.core.oauth.OAuth10aService$3"", ""BR5X1\""a5nR"", ""BR5X1\""a5nR"", (OutputStream) null, ""BR5X1\""a5nR"", jDKHttpClientConfig0, jDKHttpClient0);
      // Undeclared exception!
      try { 
        oAuth10aService0.getRequestToken();
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // timeout can not be negative
         //
         verifyException(""java.net.URLConnection"", e);
      }
  }"
275,"    public OAuth1RequestToken getRequestToken() throws IOException, InterruptedException, ExecutionException {
        if (isDebug()) {
            log(""obtaining request token from %s"", api.getRequestTokenEndpoint());
        }
        final OAuthRequest request = prepareRequestTokenRequest();

        log(""sending request..."");
        try (Response response = execute(request)) {
            if (isDebug()) {
                final String body = response.getBody();
                log(""response status code: %s"", response.getCode());
                log(""response body: %s"", body);
            }
            return api.getRequestTokenExtractor().extract(response);
        }
    }","  public void test24()  throws Throwable  {
      Verb verb0 = Verb.DELETE;
      TimestampService timestampService0 = mock(TimestampService.class, new ViolatedAssumptionAnswer());
      doReturn(""k"").when(timestampService0).getTimestampInSeconds();
      SignatureService signatureService0 = mock(SignatureService.class, new ViolatedAssumptionAnswer());
      doReturn("")x^L"").when(signatureService0).getSignatureMethod();
      String string0 = ""mM?n"";
      TimestampService timestampService1 = mock(TimestampService.class, new ViolatedAssumptionAnswer());
      doReturn(""mM?n"").when(timestampService1).getNonce();
      BaseStringExtractor baseStringExtractor0 = mock(BaseStringExtractor.class, new ViolatedAssumptionAnswer());
      doReturn("""").when(baseStringExtractor0).extract(any(com.github.scribejava.core.model.OAuthRequest.class));
      SignatureService signatureService1 = mock(SignatureService.class, new ViolatedAssumptionAnswer());
      doReturn("""").when(signatureService1).getSignature(anyString() , anyString() , anyString());
      OAuth1SignatureType oAuth1SignatureType0 = OAuth1SignatureType.QUERY_STRING;
      DefaultApi10a defaultApi10a0 = mock(DefaultApi10a.class, new ViolatedAssumptionAnswer());
      doReturn(baseStringExtractor0).when(defaultApi10a0).getBaseStringExtractor();
      doReturn(""PxE"", """", (String) null, (String) null).when(defaultApi10a0).getRequestTokenEndpoint();
      doReturn(verb0, (Verb) null).when(defaultApi10a0).getRequestTokenVerb();
      doReturn(signatureService0, signatureService1).when(defaultApi10a0).getSignatureService();
      doReturn(oAuth1SignatureType0).when(defaultApi10a0).getSignatureType();
      doReturn(timestampService0, timestampService1, (TimestampService) null).when(defaultApi10a0).getTimestampService();
      String string1 = ""d!i|,9$"";
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null);
      String string2 = ""~aRk[K_H8j&6R]"";
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient();
      OAuth10aService oAuth10aService0 = new OAuth10aService(defaultApi10a0, ""d!i|,9$"", ""d!i|,9$"", """", """", bufferedOutputStream0, ""~aRk[K_H8j&6R]"", (HttpClientConfig) null, jDKHttpClient0);
      boolean boolean0 = true;
      OAuthAsyncRequestCallback<OAuth1RequestToken> oAuthAsyncRequestCallback0 = (OAuthAsyncRequestCallback<OAuth1RequestToken>) mock(OAuthAsyncRequestCallback.class, new ViolatedAssumptionAnswer());
      oAuth10aService0.getRequestTokenAsync(oAuthAsyncRequestCallback0);
      // Undeclared exception!
      try { 
        oAuth10aService0.getRequestToken();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""com.github.scribejava.core.oauth.OAuth10aService"", e);
      }
  }"
276,"    public OAuth1RequestToken getRequestToken() throws IOException, InterruptedException, ExecutionException {
        if (isDebug()) {
            log(""obtaining request token from %s"", api.getRequestTokenEndpoint());
        }
        final OAuthRequest request = prepareRequestTokenRequest();

        log(""sending request..."");
        try (Response response = execute(request)) {
            if (isDebug()) {
                final String body = response.getBody();
                log(""response status code: %s"", response.getCode());
                log(""response body: %s"", body);
            }
            return api.getRequestTokenExtractor().extract(response);
        }
    }","  public void test25()  throws Throwable  {
      TimestampService timestampService0 = mock(TimestampService.class, new ViolatedAssumptionAnswer());
      doReturn(""BR5X1\""a5nR"").when(timestampService0).getTimestampInSeconds();
      SignatureService signatureService0 = mock(SignatureService.class, new ViolatedAssumptionAnswer());
      doReturn(""BR5X1\""a5nR"").when(signatureService0).getSignature(anyString() , anyString() , anyString());
      BaseStringExtractor baseStringExtractor0 = mock(BaseStringExtractor.class, new ViolatedAssumptionAnswer());
      doReturn(""Unknown new Signature Type '"").when(baseStringExtractor0).extract(any(com.github.scribejava.core.model.OAuthRequest.class));
      SignatureService signatureService1 = mock(SignatureService.class, new ViolatedAssumptionAnswer());
      doReturn(""BR5X1\""a5nR"").when(signatureService1).getSignatureMethod();
      Verb verb0 = Verb.GET;
      HeaderExtractor headerExtractor0 = mock(HeaderExtractor.class, new ViolatedAssumptionAnswer());
      doReturn(""BR5X1\""a5nR"").when(headerExtractor0).extract(any(com.github.scribejava.core.model.OAuthRequest.class));
      OAuth1SignatureType oAuth1SignatureType0 = OAuth1SignatureType.HEADER;
      TimestampService timestampService1 = mock(TimestampService.class, new ViolatedAssumptionAnswer());
      doReturn(""BR5X1\""a5nR"").when(timestampService1).getNonce();
      DefaultApi10a defaultApi10a0 = mock(DefaultApi10a.class, new ViolatedAssumptionAnswer());
      doReturn(baseStringExtractor0).when(defaultApi10a0).getBaseStringExtractor();
      doReturn(headerExtractor0).when(defaultApi10a0).getHeaderExtractor();
      doReturn(""https://"").when(defaultApi10a0).getRequestTokenEndpoint();
      doReturn(verb0).when(defaultApi10a0).getRequestTokenVerb();
      doReturn(signatureService1, signatureService0).when(defaultApi10a0).getSignatureService();
      doReturn(oAuth1SignatureType0).when(defaultApi10a0).getSignatureType();
      doReturn(timestampService0, timestampService1).when(defaultApi10a0).getTimestampService();
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      Proxy proxy0 = Proxy.NO_PROXY;
      jDKHttpClientConfig0.setProxy(proxy0);
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuth10aService oAuth10aService0 = new OAuth10aService(defaultApi10a0, ""BR5X1\""a5nR"", ""com.github.scribejava.core.oauth.OAuth10aService$3"", ""BR5X1\""a5nR"", ""BR5X1\""a5nR"", (OutputStream) null, ""BR5X1\""a5nR"", jDKHttpClientConfig0, jDKHttpClient0);
      try { 
        oAuth10aService0.getRequestToken();
        fail(""Expecting exception: IOException"");
      } catch(IOException e) {
         //
         // java.lang.UnsupportedOperationException: Method not implemented.
         //
         verifyException(""org.evosuite.runtime.mock.java.net.MockURL"", e);
      }
  }"
277,"    public Future<OAuth1AccessToken> getAccessTokenAsync(OAuth1RequestToken requestToken, String oauthVerifier) {
        return getAccessTokenAsync(requestToken, oauthVerifier, null);
    }","  public void test26()  throws Throwable  {
      DefaultApi10a defaultApi10a0 = mock(DefaultApi10a.class, new ViolatedAssumptionAnswer());
      doReturn("""").when(defaultApi10a0).getAccessTokenEndpoint();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuth10aService oAuth10aService0 = new OAuth10aService(defaultApi10a0, ""996jbJh+LjS>"", """", ""996jbJh+LjS>"", ""996jbJh+LjS>"", pipedOutputStream0, ""oauth_signature"", jDKHttpClientConfig0, jDKHttpClient0);
      OAuth1RequestToken oAuth1RequestToken0 = new OAuth1RequestToken("""", ""996jbJh+LjS>"", """");
      OAuthAsyncRequestCallback<OAuth1AccessToken> oAuthAsyncRequestCallback0 = (OAuthAsyncRequestCallback<OAuth1AccessToken>) mock(OAuthAsyncRequestCallback.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        oAuth10aService0.getAccessTokenAsync(oAuth1RequestToken0, ""\u0001`2"", oAuthAsyncRequestCallback0);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // there were problems while writting to the debug stream
         //
         verifyException(""com.github.scribejava.core.oauth.OAuthService"", e);
      }
  }"
278,"    public Future<OAuth1AccessToken> getAccessTokenAsync(OAuth1RequestToken requestToken, String oauthVerifier) {
        return getAccessTokenAsync(requestToken, oauthVerifier, null);
    }","  public void test27()  throws Throwable  {
      Verb verb0 = Verb.DELETE;
      TimestampService timestampService0 = mock(TimestampService.class, new ViolatedAssumptionAnswer());
      doReturn(""k"").when(timestampService0).getTimestampInSeconds();
      SignatureService signatureService0 = mock(SignatureService.class, new ViolatedAssumptionAnswer());
      doReturn("")x^L"").when(signatureService0).getSignatureMethod();
      TimestampService timestampService1 = mock(TimestampService.class, new ViolatedAssumptionAnswer());
      doReturn(""mM?n"").when(timestampService1).getNonce();
      BaseStringExtractor baseStringExtractor0 = mock(BaseStringExtractor.class, new ViolatedAssumptionAnswer());
      doReturn(""k"").when(baseStringExtractor0).extract(any(com.github.scribejava.core.model.OAuthRequest.class));
      SignatureService signatureService1 = mock(SignatureService.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(signatureService1).getSignature(anyString() , anyString() , anyString());
      OAuth1SignatureType oAuth1SignatureType0 = OAuth1SignatureType.QUERY_STRING;
      DefaultApi10a defaultApi10a0 = mock(DefaultApi10a.class, new ViolatedAssumptionAnswer());
      doReturn("")x^L"", "")x^L"").when(defaultApi10a0).getAccessTokenEndpoint();
      doReturn(verb0).when(defaultApi10a0).getAccessTokenVerb();
      doReturn(baseStringExtractor0).when(defaultApi10a0).getBaseStringExtractor();
      doReturn(signatureService0, signatureService1).when(defaultApi10a0).getSignatureService();
      doReturn(oAuth1SignatureType0).when(defaultApi10a0).getSignatureType();
      doReturn(timestampService0, timestampService1).when(defaultApi10a0).getTimestampService();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null);
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient();
      OAuth10aService oAuth10aService0 = new OAuth10aService(defaultApi10a0, ""d!i|,9$"", ""d!i|,9$"", """", """", bufferedOutputStream0, ""~aRk[K_H8j&6R]"", (HttpClientConfig) null, jDKHttpClient0);
      OAuth1RequestToken oAuth1RequestToken0 = new OAuth1RequestToken(""~aRk[K_H8j&6R]"", ""d!i|,9$"", true, ""~aRk[K_H8j&6R]"");
      OAuthAsyncRequestCallback<OAuth1AccessToken> oAuthAsyncRequestCallback0 = (OAuthAsyncRequestCallback<OAuth1AccessToken>) mock(OAuthAsyncRequestCallback.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        oAuth10aService0.getAccessTokenAsync(oAuth1RequestToken0, ""d!i|,9$"", oAuthAsyncRequestCallback0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Cannot encode null object
         //
         verifyException(""com.github.scribejava.core.utils.Preconditions"", e);
      }
  }"
279,"    public Future<OAuth1AccessToken> getAccessTokenAsync(OAuth1RequestToken requestToken, String oauthVerifier) {
        return getAccessTokenAsync(requestToken, oauthVerifier, null);
    }","  public void test28()  throws Throwable  {
      DefaultApi10a defaultApi10a0 = mock(DefaultApi10a.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(defaultApi10a0).getAccessTokenEndpoint();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuth10aService oAuth10aService0 = new OAuth10aService(defaultApi10a0, ""996jbJh+LjS>"", """", ""996jbJh+LjS>"", ""996jbJh+LjS>"", pipedOutputStream0, ""oauth_signature"", jDKHttpClientConfig0, jDKHttpClient0);
      OAuth1RequestToken oAuth1RequestToken0 = new OAuth1RequestToken(""996jbJh+LjS>"", """", false, ""oauth_signature"");
      // Undeclared exception!
      try { 
        oAuth10aService0.getAccessTokenAsync(oAuth1RequestToken0, ""996jbJh+LjS>"");
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // there were problems while writting to the debug stream
         //
         verifyException(""com.github.scribejava.core.oauth.OAuthService"", e);
      }
  }"
280,"    public Future<OAuth1AccessToken> getAccessTokenAsync(OAuth1RequestToken requestToken, String oauthVerifier) {
        return getAccessTokenAsync(requestToken, oauthVerifier, null);
    }","  public void test29()  throws Throwable  {
      DefaultApi10a defaultApi10a0 = mock(DefaultApi10a.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(defaultApi10a0).getAccessTokenEndpoint();
      doReturn((Verb) null).when(defaultApi10a0).getAccessTokenVerb();
      doReturn((TimestampService) null).when(defaultApi10a0).getTimestampService();
      MockFile mockFile0 = new MockFile(""S6^,.T"", ""3`6<l~.8VS1@!"");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuth10aService oAuth10aService0 = new OAuth10aService(defaultApi10a0, ""S6^,.T"", ""3`6<l~.8VS1@!"", """", ""oauth_callback"", mockPrintStream0, ""22I5x>`j"", jDKHttpClientConfig0, jDKHttpClient0);
      OAuth1RequestToken oAuth1RequestToken0 = new OAuth1RequestToken("""", ""22I5x>`j"", ""O"");
      // Undeclared exception!
      try { 
        oAuth10aService0.getAccessTokenAsync(oAuth1RequestToken0, """");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""com.github.scribejava.core.oauth.OAuth10aService"", e);
      }
  }"
281,"    public Future<OAuth1AccessToken> getAccessTokenAsync(OAuth1RequestToken requestToken, String oauthVerifier) {
        return getAccessTokenAsync(requestToken, oauthVerifier, null);
    }","  public void test30()  throws Throwable  {
      Verb verb0 = Verb.TRACE;
      TimestampService timestampService0 = mock(TimestampService.class, new ViolatedAssumptionAnswer());
      doReturn(""1@uh='Zo"").when(timestampService0).getTimestampInSeconds();
      SignatureService signatureService0 = mock(SignatureService.class, new ViolatedAssumptionAnswer());
      doReturn(""BR5X1\""a5nR"").when(signatureService0).getSignatureMethod();
      TimestampService timestampService1 = mock(TimestampService.class, new ViolatedAssumptionAnswer());
      doReturn("""").when(timestampService1).getNonce();
      BaseStringExtractor baseStringExtractor0 = mock(BaseStringExtractor.class, new ViolatedAssumptionAnswer());
      doReturn(""com.github.scribejava.core.httpclient.jdk.JDKHttpClient"").when(baseStringExtractor0).extract(any(com.github.scribejava.core.model.OAuthRequest.class));
      SignatureService signatureService1 = mock(SignatureService.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(signatureService1).getSignature(anyString() , anyString() , anyString());
      OAuth1SignatureType oAuth1SignatureType0 = OAuth1SignatureType.QUERY_STRING;
      DefaultApi10a defaultApi10a0 = mock(DefaultApi10a.class, new ViolatedAssumptionAnswer());
      doReturn(""com.github.scribejava.core.httpclient.jdk.JDKHttpClient"", ""BR5X1\""a5nR"").when(defaultApi10a0).getAccessTokenEndpoint();
      doReturn(verb0).when(defaultApi10a0).getAccessTokenVerb();
      doReturn(baseStringExtractor0).when(defaultApi10a0).getBaseStringExtractor();
      doReturn(signatureService0, signatureService1).when(defaultApi10a0).getSignatureService();
      doReturn(oAuth1SignatureType0).when(defaultApi10a0).getSignatureType();
      doReturn(timestampService0, timestampService1).when(defaultApi10a0).getTimestampService();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuth10aService oAuth10aService0 = new OAuth10aService(defaultApi10a0, """", """", """", """", byteArrayOutputStream0, "", message='"", jDKHttpClientConfig0, jDKHttpClient0);
      OAuth1RequestToken oAuth1RequestToken0 = new OAuth1RequestToken(""com.github.scribejava.core.httpclient.jdk.JDKHttpClient"", ""-*<#7XV <>R"", "", message='"");
      // Undeclared exception!
      try { 
        oAuth10aService0.getAccessTokenAsync(oAuth1RequestToken0, ""5&.*B[^"");
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Cannot encode null object
         //
         verifyException(""com.github.scribejava.core.utils.Preconditions"", e);
      }
  }"
282,"    public OAuth1AccessToken getAccessToken(OAuth1RequestToken requestToken, String oauthVerifier)
            throws IOException, InterruptedException, ExecutionException {
        if (isDebug()) {
            log(""obtaining access token from %s"", api.getAccessTokenEndpoint());
        }
        final OAuthRequest request = prepareAccessTokenRequest(requestToken, oauthVerifier);
        try (Response response = execute(request)) {
            return api.getAccessTokenExtractor().extract(response);
        }
    }","  public void test31()  throws Throwable  {
      Verb verb0 = Verb.TRACE;
      TimestampService timestampService0 = mock(TimestampService.class, new ViolatedAssumptionAnswer());
      doReturn(""1@uh='Zo"").when(timestampService0).getTimestampInSeconds();
      SignatureService signatureService0 = mock(SignatureService.class, new ViolatedAssumptionAnswer());
      doReturn(""1@uh='Zo"").when(signatureService0).getSignatureMethod();
      TimestampService timestampService1 = mock(TimestampService.class, new ViolatedAssumptionAnswer());
      doReturn(""com.github.scribejava.core.httpclient.jdk.JDKHttpClient"").when(timestampService1).getNonce();
      BaseStringExtractor baseStringExtractor0 = mock(BaseStringExtractor.class, new ViolatedAssumptionAnswer());
      doReturn("""").when(baseStringExtractor0).extract(any(com.github.scribejava.core.model.OAuthRequest.class));
      SignatureService signatureService1 = mock(SignatureService.class, new ViolatedAssumptionAnswer());
      doReturn(""98rjT=sH"").when(signatureService1).getSignature(anyString() , anyString() , anyString());
      OAuth1SignatureType oAuth1SignatureType0 = OAuth1SignatureType.HEADER;
      HeaderExtractor headerExtractor0 = mock(HeaderExtractor.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(headerExtractor0).extract(any(com.github.scribejava.core.model.OAuthRequest.class));
      DefaultApi10a defaultApi10a0 = mock(DefaultApi10a.class, new ViolatedAssumptionAnswer());
      doReturn(""com.github.scribejava.core.httpclient.jdk.JDKHttpClient"", ""BR5X1\""a5nR"").when(defaultApi10a0).getAccessTokenEndpoint();
      doReturn(verb0).when(defaultApi10a0).getAccessTokenVerb();
      doReturn(baseStringExtractor0).when(defaultApi10a0).getBaseStringExtractor();
      doReturn(headerExtractor0).when(defaultApi10a0).getHeaderExtractor();
      doReturn(signatureService0, signatureService1).when(defaultApi10a0).getSignatureService();
      doReturn(oAuth1SignatureType0).when(defaultApi10a0).getSignatureType();
      doReturn(timestampService0, timestampService1).when(defaultApi10a0).getTimestampService();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuth10aService oAuth10aService0 = new OAuth10aService(defaultApi10a0, (String) null, (String) null, (String) null, (String) null, byteArrayOutputStream0, """", jDKHttpClientConfig0, jDKHttpClient0);
      OAuth1RequestToken oAuth1RequestToken0 = new OAuth1RequestToken(""com.github.scribejava.core.httpclient.jdk.JDKHttpClient"", ""-*#7XV <>R"", """");
      try { 
        oAuth10aService0.getAccessToken(oAuth1RequestToken0, (String) null);
        fail(""Expecting exception: MalformedURLException"");
      } catch(MalformedURLException e) {
         //
         // no protocol: BR5X1\""a5nR
         //
         verifyException(""java.net.URL"", e);
      }
  }"
283,"    public OAuth1AccessToken getAccessToken(OAuth1RequestToken requestToken, String oauthVerifier)
            throws IOException, InterruptedException, ExecutionException {
        if (isDebug()) {
            log(""obtaining access token from %s"", api.getAccessTokenEndpoint());
        }
        final OAuthRequest request = prepareAccessTokenRequest(requestToken, oauthVerifier);
        try (Response response = execute(request)) {
            return api.getAccessTokenExtractor().extract(response);
        }
    }","  public void test32()  throws Throwable  {
      DefaultApi10a defaultApi10a0 = mock(DefaultApi10a.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(defaultApi10a0).getAccessTokenEndpoint();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuth10aService oAuth10aService0 = new OAuth10aService(defaultApi10a0, ""996jbJh+LjS>"", """", ""996jbJh+LjS>"", ""996jbJh+LjS>"", pipedOutputStream0, ""oauth_signature"", jDKHttpClientConfig0, jDKHttpClient0);
      OAuth1RequestToken oAuth1RequestToken0 = new OAuth1RequestToken(""996jbJh+LjS>"", """", false, ""oauth_signature"");
      // Undeclared exception!
      try { 
        oAuth10aService0.getAccessToken(oAuth1RequestToken0, ""'."");
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // there were problems while writting to the debug stream
         //
         verifyException(""com.github.scribejava.core.oauth.OAuthService"", e);
      }
  }"
284,"    public OAuth1AccessToken getAccessToken(OAuth1RequestToken requestToken, String oauthVerifier)
            throws IOException, InterruptedException, ExecutionException {
        if (isDebug()) {
            log(""obtaining access token from %s"", api.getAccessTokenEndpoint());
        }
        final OAuthRequest request = prepareAccessTokenRequest(requestToken, oauthVerifier);
        try (Response response = execute(request)) {
            return api.getAccessTokenExtractor().extract(response);
        }
    }","  public void test33()  throws Throwable  {
      Verb verb0 = Verb.TRACE;
      TimestampService timestampService0 = mock(TimestampService.class, new ViolatedAssumptionAnswer());
      doReturn(""1@uh='Zo"").when(timestampService0).getTimestampInSeconds();
      SignatureService signatureService0 = mock(SignatureService.class, new ViolatedAssumptionAnswer());
      doReturn(""BR5X1\""a5nR"").when(signatureService0).getSignatureMethod();
      TimestampService timestampService1 = mock(TimestampService.class, new ViolatedAssumptionAnswer());
      doReturn("""").when(timestampService1).getNonce();
      BaseStringExtractor baseStringExtractor0 = mock(BaseStringExtractor.class, new ViolatedAssumptionAnswer());
      doReturn(""BR5X1\""a5nR"").when(baseStringExtractor0).extract(any(com.github.scribejava.core.model.OAuthRequest.class));
      SignatureService signatureService1 = mock(SignatureService.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(signatureService1).getSignature(anyString() , anyString() , anyString());
      OAuth1SignatureType oAuth1SignatureType0 = OAuth1SignatureType.QUERY_STRING;
      DefaultApi10a defaultApi10a0 = mock(DefaultApi10a.class, new ViolatedAssumptionAnswer());
      doReturn(""com.github.scribejava.core.httpclient.jdk.JDKHttpClient"", ""BR5X1\""a5nR"").when(defaultApi10a0).getAccessTokenEndpoint();
      doReturn(verb0).when(defaultApi10a0).getAccessTokenVerb();
      doReturn(baseStringExtractor0).when(defaultApi10a0).getBaseStringExtractor();
      doReturn(signatureService0, signatureService1).when(defaultApi10a0).getSignatureService();
      doReturn(oAuth1SignatureType0).when(defaultApi10a0).getSignatureType();
      doReturn(timestampService0, timestampService1).when(defaultApi10a0).getTimestampService();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient();
      OAuth10aService oAuth10aService0 = new OAuth10aService(defaultApi10a0, (String) null, (String) null, (String) null, (String) null, byteArrayOutputStream0, "", message='"", jDKHttpClientConfig0, jDKHttpClient0);
      OAuth1RequestToken oAuth1RequestToken0 = new OAuth1RequestToken(""com.github.scribejava.core.httpclient.jdk.JDKHttpClient"", ""-*<#7XV <>R"", "", message='"");
      // Undeclared exception!
      try { 
        oAuth10aService0.getAccessToken(oAuth1RequestToken0, (String) null);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Cannot encode null object
         //
         verifyException(""com.github.scribejava.core.utils.Preconditions"", e);
      }
  }"
285,"    protected void appendSignature(OAuthRequest request) {
        final OAuth1SignatureType signatureType = api.getSignatureType();
        switch (signatureType) {
            case HEADER:
                log(""using Http Header signature"");

                final String oauthHeader = api.getHeaderExtractor().extract(request);
                request.addHeader(OAuthConstants.HEADER, oauthHeader);
                break;
            case QUERY_STRING:
                log(""using Querystring signature"");

                for (Map.Entry<String, String> oauthParameter : request.getOauthParameters().entrySet()) {
                    request.addQuerystringParameter(oauthParameter.getKey(), oauthParameter.getValue());
                }
                break;
            default:
                throw new IllegalStateException(""Unknown new Signature Type '"" + signatureType + ""'."");
        }
    }","  public void test34()  throws Throwable  {
      OAuth1SignatureType oAuth1SignatureType0 = OAuth1SignatureType.QUERY_STRING;
      DefaultApi10a defaultApi10a0 = mock(DefaultApi10a.class, new ViolatedAssumptionAnswer());
      doReturn(oAuth1SignatureType0).when(defaultApi10a0).getSignatureType();
      File file0 = MockFile.createTempFile(""com.github.scribejava.core.builder.api.OAuth1SignatureType"", """");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
      OAuth10aService oAuth10aService0 = new OAuth10aService(defaultApi10a0, """", "",~`#,Zh<sI$bgoou"", """", "",~`#,Zh<sI$bgoou"", mockFileOutputStream0, ""6)~@`88"", (HttpClientConfig) null, (HttpClient) null);
      Verb verb0 = Verb.PUT;
      mockFileOutputStream0.close();
      OAuthRequest oAuthRequest0 = new OAuthRequest(verb0, """");
      // Undeclared exception!
      try { 
        oAuth10aService0.appendSignature(oAuthRequest0);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // there were problems while writting to the debug stream
         //
         verifyException(""com.github.scribejava.core.oauth.OAuthService"", e);
      }
  }"
286,"    protected void addOAuthParams(OAuthRequest request, String tokenSecret) {
        request.addOAuthParameter(OAuthConstants.TIMESTAMP, api.getTimestampService().getTimestampInSeconds());
        request.addOAuthParameter(OAuthConstants.NONCE, api.getTimestampService().getNonce());
        request.addOAuthParameter(OAuthConstants.CONSUMER_KEY, getApiKey());
        request.addOAuthParameter(OAuthConstants.SIGN_METHOD, api.getSignatureService().getSignatureMethod());
        request.addOAuthParameter(OAuthConstants.VERSION, getVersion());
        if (scope != null) {
            request.addOAuthParameter(OAuthConstants.SCOPE, scope);
        }
        request.addOAuthParameter(OAuthConstants.SIGNATURE, getSignature(request, tokenSecret));

        if (isDebug()) {
            log(""appended additional OAuth parameters: %s"", request.getOauthParameters());
        }
    }","  public void test35()  throws Throwable  {
      DefaultApi10a defaultApi10a0 = mock(DefaultApi10a.class, new ViolatedAssumptionAnswer());
      doReturn((TimestampService) null).when(defaultApi10a0).getTimestampService();
      MockPrintStream mockPrintStream0 = new MockPrintStream(""\""30PA"");
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockPrintStream0);
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient();
      OAuth10aService oAuth10aService0 = new OAuth10aService(defaultApi10a0, ""com.github.scribejava.core.builder.api.OAuth1SignatureType"", ""com.github.scribejava.core.builder.api.OAuth1SignatureType"", ""com.github.scribejava.core.builder.api.OAuth1SignatureType"", ""com.github.scribejava.core.builder.api.OAuth1SignatureType"", objectOutputStream0, """", jDKHttpClientConfig0, jDKHttpClient0);
      Verb verb0 = Verb.OPTIONS;
      OAuthRequest oAuthRequest0 = new OAuthRequest(verb0, ""com.github.scribejava.core.builder.api.OAuth1SignatureType"");
      // Undeclared exception!
      try { 
        oAuth10aService0.addOAuthParams(oAuthRequest0, """");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""com.github.scribejava.core.oauth.OAuth10aService"", e);
      }
  }"
287,"    public Future<OAuth1AccessToken> getAccessTokenAsync(OAuth1RequestToken requestToken, String oauthVerifier) {
        return getAccessTokenAsync(requestToken, oauthVerifier, null);
    }","  public void test36()  throws Throwable  {
      DefaultApi10a defaultApi10a0 = mock(DefaultApi10a.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(defaultApi10a0).getAccessTokenEndpoint();
      doReturn((Verb) null).when(defaultApi10a0).getAccessTokenVerb();
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient();
      OAuth10aService oAuth10aService0 = new OAuth10aService(defaultApi10a0, ""signature is: %s"", """", """", ""signature is: %s"", (OutputStream) null, """", jDKHttpClientConfig0, jDKHttpClient0);
      OAuthAsyncRequestCallback<OAuth1AccessToken> oAuthAsyncRequestCallback0 = (OAuthAsyncRequestCallback<OAuth1AccessToken>) mock(OAuthAsyncRequestCallback.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        oAuth10aService0.getAccessTokenAsync((OAuth1RequestToken) null, """", oAuthAsyncRequestCallback0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""com.github.scribejava.core.oauth.OAuth10aService"", e);
      }
  }"
288,"    public Future<OAuth1RequestToken> getRequestTokenAsync() {
        return getRequestTokenAsync(null);
    }","  public void test37()  throws Throwable  {
      DefaultApi10a defaultApi10a0 = mock(DefaultApi10a.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(defaultApi10a0).getRequestTokenEndpoint();
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      OAuth10aService oAuth10aService0 = new OAuth10aService(defaultApi10a0, """", ""&iWF'"", """", ""Y`H~d/HLkH"", pipedOutputStream0, ""response status code: %s"", (HttpClientConfig) null, jDKHttpClient0);
      OAuthAsyncRequestCallback<OAuth1RequestToken> oAuthAsyncRequestCallback0 = (OAuthAsyncRequestCallback<OAuth1RequestToken>) mock(OAuthAsyncRequestCallback.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        oAuth10aService0.getRequestTokenAsync(oAuthAsyncRequestCallback0);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // there were problems while writting to the debug stream
         //
         verifyException(""com.github.scribejava.core.oauth.OAuthService"", e);
      }
  }"
289,"    public Future<OAuth1RequestToken> getRequestTokenAsync() {
        return getRequestTokenAsync(null);
    }","  public void test38()  throws Throwable  {
      DefaultApi10a defaultApi10a0 = mock(DefaultApi10a.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(defaultApi10a0).getRequestTokenEndpoint();
      doReturn((Verb) null).when(defaultApi10a0).getRequestTokenVerb();
      doReturn((TimestampService) null).when(defaultApi10a0).getTimestampService();
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuth10aService oAuth10aService0 = new OAuth10aService(defaultApi10a0, ""oauth_consumer_key"", ""oauth_consumer_key"", """", """", (OutputStream) null, ""oauth_consumer_key"", jDKHttpClientConfig0, jDKHttpClient0);
      OAuthAsyncRequestCallback<OAuth1RequestToken> oAuthAsyncRequestCallback0 = (OAuthAsyncRequestCallback<OAuth1RequestToken>) mock(OAuthAsyncRequestCallback.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        oAuth10aService0.getRequestTokenAsync(oAuthAsyncRequestCallback0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""com.github.scribejava.core.oauth.OAuth10aService"", e);
      }
  }"
290,"    public String getVersion() {
        return VERSION;
    }","  public void test39()  throws Throwable  {
      TimestampService timestampService0 = mock(TimestampService.class, new ViolatedAssumptionAnswer());
      doReturn(""BR5X1\""a5nR"").when(timestampService0).getTimestampInSeconds();
      SignatureService signatureService0 = mock(SignatureService.class, new ViolatedAssumptionAnswer());
      doReturn(""BR5X1\""a5nR"").when(signatureService0).getSignature(anyString() , anyString() , anyString());
      BaseStringExtractor baseStringExtractor0 = mock(BaseStringExtractor.class, new ViolatedAssumptionAnswer());
      doReturn(""Unknown new Signature Type '"").when(baseStringExtractor0).extract(any(com.github.scribejava.core.model.OAuthRequest.class));
      SignatureService signatureService1 = mock(SignatureService.class, new ViolatedAssumptionAnswer());
      doReturn(""BR5X1\""a5nR"").when(signatureService1).getSignatureMethod();
      Verb verb0 = Verb.GET;
      HeaderExtractor headerExtractor0 = mock(HeaderExtractor.class, new ViolatedAssumptionAnswer());
      doReturn(""2:q!3@CN,RkD8/{AiCU"").when(headerExtractor0).extract(any(com.github.scribejava.core.model.OAuthRequest.class));
      OAuth1SignatureType oAuth1SignatureType0 = OAuth1SignatureType.HEADER;
      TimestampService timestampService1 = mock(TimestampService.class, new ViolatedAssumptionAnswer());
      doReturn(""BR5X1\""a5nR"").when(timestampService1).getNonce();
      TokenExtractor<OAuth1RequestToken> tokenExtractor0 = (TokenExtractor<OAuth1RequestToken>) mock(TokenExtractor.class, new ViolatedAssumptionAnswer());
      doReturn((Token) null).when(tokenExtractor0).extract(any(com.github.scribejava.core.model.Response.class));
      DefaultApi10a defaultApi10a0 = mock(DefaultApi10a.class, new ViolatedAssumptionAnswer());
      doReturn(baseStringExtractor0).when(defaultApi10a0).getBaseStringExtractor();
      doReturn(headerExtractor0).when(defaultApi10a0).getHeaderExtractor();
      doReturn(""https://"").when(defaultApi10a0).getRequestTokenEndpoint();
      doReturn(tokenExtractor0).when(defaultApi10a0).getRequestTokenExtractor();
      doReturn(verb0).when(defaultApi10a0).getRequestTokenVerb();
      doReturn(signatureService1, signatureService0).when(defaultApi10a0).getSignatureService();
      doReturn(oAuth1SignatureType0).when(defaultApi10a0).getSignatureType();
      doReturn(timestampService0, timestampService1).when(defaultApi10a0).getTimestampService();
      doReturn(""3%xi4\""mZ&>1qE5\""b"").when(defaultApi10a0).toString();
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuth10aService oAuth10aService0 = new OAuth10aService(defaultApi10a0, ""BR5X1\""a5nR"", ""com.github.scribejava.core.oauth.OAuth10aService$3"", ""BR5X1\""a5nR"", ""BR5X1\""a5nR"", (OutputStream) null, ""BR5X1\""a5nR"", jDKHttpClientConfig0, jDKHttpClient0);
      oAuth10aService0.getRequestTokenAsync();
}"
291,"    public void signRequest(OAuth1AccessToken token, OAuthRequest request) {
        if (isDebug()) {
            log(""signing request: %s"", request.getCompleteUrl());
        }

        if (!token.isEmpty() || api.isEmptyOAuthTokenParamIsRequired()) {
            request.addOAuthParameter(OAuthConstants.TOKEN, token.getToken());
        }
        if (isDebug()) {
            log(""setting token to: %s"", token);
        }
        addOAuthParams(request, token.getTokenSecret());
        appendSignature(request);
    }","  public void test40()  throws Throwable  {
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      DefaultApi10a defaultApi10a0 = mock(DefaultApi10a.class, new ViolatedAssumptionAnswer());
      doReturn((TimestampService) null).when(defaultApi10a0).getTimestampService();
      doReturn(true).when(defaultApi10a0).isEmptyOAuthTokenParamIsRequired();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient();
      OAuth10aService oAuth10aService0 = new OAuth10aService(defaultApi10a0, """", ""oob"", ""oob"", """", (OutputStream) null, ""oob"", jDKHttpClientConfig0, jDKHttpClient0);
      OAuth1AccessToken oAuth1AccessToken0 = new OAuth1AccessToken("""", """");
      Verb verb0 = Verb.PUT;
      OAuthRequest oAuthRequest0 = new OAuthRequest(verb0, ""oob"");
      // Undeclared exception!
      try { 
        oAuth10aService0.signRequest(oAuth1AccessToken0, oAuthRequest0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""com.github.scribejava.core.oauth.OAuth10aService"", e);
      }
  }"
292,"    public void signRequest(OAuth1AccessToken token, OAuthRequest request) {
        if (isDebug()) {
            log(""signing request: %s"", request.getCompleteUrl());
        }

        if (!token.isEmpty() || api.isEmptyOAuthTokenParamIsRequired()) {
            request.addOAuthParameter(OAuthConstants.TOKEN, token.getToken());
        }
        if (isDebug()) {
            log(""setting token to: %s"", token);
        }
        addOAuthParams(request, token.getTokenSecret());
        appendSignature(request);
    }","  public void test41()  throws Throwable  {
      TimestampService timestampService0 = mock(TimestampService.class, new ViolatedAssumptionAnswer());
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      DefaultApi10a defaultApi10a0 = mock(DefaultApi10a.class, new ViolatedAssumptionAnswer());
      doReturn((TimestampService) null).when(defaultApi10a0).getTimestampService();
      doReturn(false).when(defaultApi10a0).isEmptyOAuthTokenParamIsRequired();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient();
      OAuth10aService oAuth10aService0 = new OAuth10aService(defaultApi10a0, """", ""gxIvF<:/hm?"", ""gxIvF<:/hm?"", ""gxIvF<:/hm?"", (OutputStream) null, ""gxIvF<:/hm?"", jDKHttpClientConfig0, jDKHttpClient0);
      OAuth1AccessToken oAuth1AccessToken0 = new OAuth1AccessToken("""", """", ""gxIvF<:/hm?"");
      Verb verb0 = Verb.DELETE;
      OAuthRequest oAuthRequest0 = new OAuthRequest(verb0, ""gxIvF<:/hm?"");
      // Undeclared exception!
      try { 
        oAuth10aService0.signRequest(oAuth1AccessToken0, oAuthRequest0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""com.github.scribejava.core.oauth.OAuth10aService"", e);
      }
  }"
293,"    public void signRequest(OAuth1AccessToken token, OAuthRequest request) {
        if (isDebug()) {
            log(""signing request: %s"", request.getCompleteUrl());
        }

        if (!token.isEmpty() || api.isEmptyOAuthTokenParamIsRequired()) {
            request.addOAuthParameter(OAuthConstants.TOKEN, token.getToken());
        }
        if (isDebug()) {
            log(""setting token to: %s"", token);
        }
        addOAuthParams(request, token.getTokenSecret());
        appendSignature(request);
    }","  public void test42()  throws Throwable  {
      Verb verb0 = Verb.TRACE;
      TimestampService timestampService0 = mock(TimestampService.class, new ViolatedAssumptionAnswer());
      doReturn(""Content-Disposition"").when(timestampService0).getTimestampInSeconds();
      SignatureService signatureService0 = mock(SignatureService.class, new ViolatedAssumptionAnswer());
      doReturn(""BR5X1\""a5nR"").when(signatureService0).getSignatureMethod();
      TimestampService timestampService1 = mock(TimestampService.class, new ViolatedAssumptionAnswer());
      doReturn("""").when(timestampService1).getNonce();
      BaseStringExtractor baseStringExtractor0 = mock(BaseStringExtractor.class, new ViolatedAssumptionAnswer());
      doReturn(""com.github.scribejava.core.httpclient.jdk.JDKHttpClient"").when(baseStringExtractor0).extract(any(com.github.scribejava.core.model.OAuthRequest.class));
      SignatureService signatureService1 = mock(SignatureService.class, new ViolatedAssumptionAnswer());
      doReturn(""BR5X1\""a5nR"").when(signatureService1).getSignature(anyString() , anyString() , anyString());
      OAuth1SignatureType oAuth1SignatureType0 = OAuth1SignatureType.HEADER;
      HeaderExtractor headerExtractor0 = mock(HeaderExtractor.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(headerExtractor0).extract(any(com.github.scribejava.core.model.OAuthRequest.class));
      DefaultApi10a defaultApi10a0 = mock(DefaultApi10a.class, new ViolatedAssumptionAnswer());
      doReturn(""com.github.scribejava.core.httpclient.jdk.JDKHttpClient"").when(defaultApi10a0).getAccessTokenEndpoint();
      doReturn(verb0).when(defaultApi10a0).getAccessTokenVerb();
      doReturn(baseStringExtractor0).when(defaultApi10a0).getBaseStringExtractor();
      doReturn(headerExtractor0).when(defaultApi10a0).getHeaderExtractor();
      doReturn(signatureService0, signatureService1).when(defaultApi10a0).getSignatureService();
      doReturn(oAuth1SignatureType0).when(defaultApi10a0).getSignatureType();
      doReturn(timestampService0, timestampService1, (TimestampService) null).when(defaultApi10a0).getTimestampService();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuth10aService oAuth10aService0 = new OAuth10aService(defaultApi10a0, (String) null, (String) null, (String) null, (String) null, byteArrayOutputStream0, "", message='"", jDKHttpClientConfig0, jDKHttpClient0);
      OAuth1RequestToken oAuth1RequestToken0 = new OAuth1RequestToken(""com.github.scribejava.core.httpclient.jdk.JDKHttpClient"", ""-*<#7XV <>R"", "", message='"");
      OAuth1AccessToken oAuth1AccessToken0 = new OAuth1AccessToken(""com.github.scribejava.core.httpclient.jdk.JDKHttpClient"", ""async obtaining request token from %s"");
      OAuthRequest oAuthRequest0 = oAuth10aService0.prepareAccessTokenRequest(oAuth1RequestToken0, (String) null);
      // Undeclared exception!
      try { 
        oAuth10aService0.signRequest(oAuth1AccessToken0, oAuthRequest0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""com.github.scribejava.core.oauth.OAuth10aService"", e);
      }
  }"
294,"    public String getVersion() {
        return VERSION;
    }","  public void test43()  throws Throwable  {
      Verb verb0 = Verb.DELETE;
      TimestampService timestampService0 = mock(TimestampService.class, new ViolatedAssumptionAnswer());
      doReturn("")x^L"").when(timestampService0).getTimestampInSeconds();
      SignatureService signatureService0 = mock(SignatureService.class, new ViolatedAssumptionAnswer());
      doReturn("")x^L"").when(signatureService0).getSignatureMethod();
      TimestampService timestampService1 = mock(TimestampService.class, new ViolatedAssumptionAnswer());
      doReturn("")x^L"").when(timestampService1).getNonce();
      BaseStringExtractor baseStringExtractor0 = mock(BaseStringExtractor.class, new ViolatedAssumptionAnswer());
      doReturn("")x^L"").when(baseStringExtractor0).extract(any(com.github.scribejava.core.model.OAuthRequest.class));
      SignatureService signatureService1 = mock(SignatureService.class, new ViolatedAssumptionAnswer());
      doReturn("")x^L"").when(signatureService1).getSignature(anyString() , anyString() , anyString());
      OAuth1SignatureType oAuth1SignatureType0 = OAuth1SignatureType.QUERY_STRING;
      DefaultApi10a defaultApi10a0 = mock(DefaultApi10a.class, new ViolatedAssumptionAnswer());
      doReturn("")x^L"", "")x^L"").when(defaultApi10a0).getAccessTokenEndpoint();
      doReturn(verb0).when(defaultApi10a0).getAccessTokenVerb();
      doReturn(baseStringExtractor0).when(defaultApi10a0).getBaseStringExtractor();
      doReturn(signatureService0, signatureService1).when(defaultApi10a0).getSignatureService();
      doReturn(oAuth1SignatureType0).when(defaultApi10a0).getSignatureType();
      doReturn(timestampService0, timestampService1).when(defaultApi10a0).getTimestampService();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null);
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient();
      OAuth10aService oAuth10aService0 = new OAuth10aService(defaultApi10a0, "")x^L"", "")x^L"", "")x^L"", "")x^L"", bufferedOutputStream0, "")x^L"", (HttpClientConfig) null, jDKHttpClient0);
      OAuth1RequestToken oAuth1RequestToken0 = new OAuth1RequestToken("")x^L"", "")x^L"", false, "")x^L"");
      OAuthAsyncRequestCallback<OAuth1AccessToken> oAuthAsyncRequestCallback0 = (OAuthAsyncRequestCallback<OAuth1AccessToken>) mock(OAuthAsyncRequestCallback.class, new ViolatedAssumptionAnswer());
      oAuth10aService0.getAccessTokenAsync(oAuth1RequestToken0, "")x^L"", oAuthAsyncRequestCallback0);
}"
295,"    public OAuth1AccessToken getAccessToken(OAuth1RequestToken requestToken, String oauthVerifier)
            throws IOException, InterruptedException, ExecutionException {
        if (isDebug()) {
            log(""obtaining access token from %s"", api.getAccessTokenEndpoint());
        }
        final OAuthRequest request = prepareAccessTokenRequest(requestToken, oauthVerifier);
        try (Response response = execute(request)) {
            return api.getAccessTokenExtractor().extract(response);
        }
    }","  public void test44()  throws Throwable  {
      Verb verb0 = Verb.TRACE;
      TimestampService timestampService0 = mock(TimestampService.class, new ViolatedAssumptionAnswer());
      doReturn(""1@uh='Zo"").when(timestampService0).getTimestampInSeconds();
      SignatureService signatureService0 = mock(SignatureService.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(signatureService0).getSignatureMethod();
      TimestampService timestampService1 = mock(TimestampService.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(timestampService1).getNonce();
      DefaultApi10a defaultApi10a0 = mock(DefaultApi10a.class, new ViolatedAssumptionAnswer());
      doReturn(""com.github.scribejava.core.httpclient.jdk.JDKHttpClient"", ""BR5X1\""a5nR"").when(defaultApi10a0).getAccessTokenEndpoint();
      doReturn(verb0).when(defaultApi10a0).getAccessTokenVerb();
      doReturn((BaseStringExtractor) null).when(defaultApi10a0).getBaseStringExtractor();
      doReturn(signatureService0).when(defaultApi10a0).getSignatureService();
      doReturn(timestampService0, timestampService1).when(defaultApi10a0).getTimestampService();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuth10aService oAuth10aService0 = new OAuth10aService(defaultApi10a0, (String) null, (String) null, (String) null, (String) null, byteArrayOutputStream0, """", jDKHttpClientConfig0, jDKHttpClient0);
      OAuth1RequestToken oAuth1RequestToken0 = new OAuth1RequestToken(""com.github.scribejava.core.httpclient.jdk.JDKHttpClient"", ""-*#7XV <>R"", """");
      // Undeclared exception!
      try { 
        oAuth10aService0.getAccessToken(oAuth1RequestToken0, (String) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""com.github.scribejava.core.oauth.OAuth10aService"", e);
      }
  }"
296,"    public OAuth1AccessToken getAccessToken(OAuth1RequestToken requestToken, String oauthVerifier)
            throws IOException, InterruptedException, ExecutionException {
        if (isDebug()) {
            log(""obtaining access token from %s"", api.getAccessTokenEndpoint());
        }
        final OAuthRequest request = prepareAccessTokenRequest(requestToken, oauthVerifier);
        try (Response response = execute(request)) {
            return api.getAccessTokenExtractor().extract(response);
        }
    }","  public void test45()  throws Throwable  {
      DefaultApi10a defaultApi10a0 = mock(DefaultApi10a.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(defaultApi10a0).getAccessTokenEndpoint();
      doReturn((Verb) null).when(defaultApi10a0).getAccessTokenVerb();
      doReturn((TimestampService) null).when(defaultApi10a0).getTimestampService();
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuth10aService oAuth10aService0 = new OAuth10aService(defaultApi10a0, ""ey8XPV|"", ""ey8XPV|"", ""ey8XPV|"", ""ey8XPV|"", (OutputStream) null, ""^"", jDKHttpClientConfig0, jDKHttpClient0);
      OAuth1RequestToken oAuth1RequestToken0 = new OAuth1RequestToken(""^"", ""b6[r+M3"");
      // Undeclared exception!
      try { 
        oAuth10aService0.getAccessToken(oAuth1RequestToken0, ""ey8XPV|"");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""com.github.scribejava.core.oauth.OAuth10aService"", e);
      }
  }"
297,"    public Future<OAuth1RequestToken> getRequestTokenAsync() {
        return getRequestTokenAsync(null);
    }","  public void test46()  throws Throwable  {
      Verb verb0 = Verb.PATCH;
      SignatureService signatureService0 = mock(SignatureService.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(signatureService0).getSignatureMethod();
      TimestampService timestampService0 = mock(TimestampService.class, new ViolatedAssumptionAnswer());
      doReturn(""kq9{@4r(3@XWZ"").when(timestampService0).getTimestampInSeconds();
      MockFile mockFile0 = new MockFile(""w)Fe#R!Biu1KVY$pF/"", ""User-Agent"");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient();
      TimestampService timestampService1 = mock(TimestampService.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(timestampService1).getNonce();
      DefaultApi10a defaultApi10a0 = mock(DefaultApi10a.class, new ViolatedAssumptionAnswer());
      doReturn((BaseStringExtractor) null).when(defaultApi10a0).getBaseStringExtractor();
      doReturn("""", """").when(defaultApi10a0).getRequestTokenEndpoint();
      doReturn(verb0).when(defaultApi10a0).getRequestTokenVerb();
      doReturn(signatureService0).when(defaultApi10a0).getSignatureService();
      doReturn(timestampService0, timestampService1).when(defaultApi10a0).getTimestampService();
      OAuth10aService oAuth10aService0 = new OAuth10aService(defaultApi10a0, (String) null, ""using Http Header signature"", (String) null, ""using Http Header signature"", mockFileOutputStream0, """", jDKHttpClientConfig0, jDKHttpClient0);
      // Undeclared exception!
      try { 
        oAuth10aService0.getRequestTokenAsync();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""com.github.scribejava.core.oauth.OAuth10aService"", e);
      }
  }"
298,"    public OAuth1RequestToken getRequestToken() throws IOException, InterruptedException, ExecutionException {
        if (isDebug()) {
            log(""obtaining request token from %s"", api.getRequestTokenEndpoint());
        }
        final OAuthRequest request = prepareRequestTokenRequest();

        log(""sending request..."");
        try (Response response = execute(request)) {
            if (isDebug()) {
                final String body = response.getBody();
                log(""response status code: %s"", response.getCode());
                log(""response body: %s"", body);
            }
            return api.getRequestTokenExtractor().extract(response);
        }
    }","  public void test47()  throws Throwable  {
      TimestampService timestampService0 = mock(TimestampService.class, new ViolatedAssumptionAnswer());
      doReturn(""BR5X1\""a5nR"").when(timestampService0).getTimestampInSeconds();
      SignatureService signatureService0 = mock(SignatureService.class, new ViolatedAssumptionAnswer());
      doReturn(""BR5X1\""a5nR"").when(signatureService0).getSignature(anyString() , anyString() , anyString());
      BaseStringExtractor baseStringExtractor0 = mock(BaseStringExtractor.class, new ViolatedAssumptionAnswer());
      doReturn(""Unknown new Signature Type '"").when(baseStringExtractor0).extract(any(com.github.scribejava.core.model.OAuthRequest.class));
      SignatureService signatureService1 = mock(SignatureService.class, new ViolatedAssumptionAnswer());
      doReturn(""BR5X1\""a5nR"").when(signatureService1).getSignatureMethod();
      Verb verb0 = Verb.GET;
      HeaderExtractor headerExtractor0 = mock(HeaderExtractor.class, new ViolatedAssumptionAnswer());
      doReturn(""BR5X1\""a5nR"").when(headerExtractor0).extract(any(com.github.scribejava.core.model.OAuthRequest.class));
      OAuth1SignatureType oAuth1SignatureType0 = OAuth1SignatureType.HEADER;
      TimestampService timestampService1 = mock(TimestampService.class, new ViolatedAssumptionAnswer());
      doReturn(""BR5X1\""a5nR"").when(timestampService1).getNonce();
      DefaultApi10a defaultApi10a0 = mock(DefaultApi10a.class, new ViolatedAssumptionAnswer());
      doReturn(baseStringExtractor0).when(defaultApi10a0).getBaseStringExtractor();
      doReturn(headerExtractor0).when(defaultApi10a0).getHeaderExtractor();
      doReturn(""https://"").when(defaultApi10a0).getRequestTokenEndpoint();
      doReturn((TokenExtractor) null).when(defaultApi10a0).getRequestTokenExtractor();
      doReturn(verb0).when(defaultApi10a0).getRequestTokenVerb();
      doReturn(signatureService1, signatureService0).when(defaultApi10a0).getSignatureService();
      doReturn(oAuth1SignatureType0).when(defaultApi10a0).getSignatureType();
      doReturn(timestampService0, timestampService1).when(defaultApi10a0).getTimestampService();
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuth10aService oAuth10aService0 = new OAuth10aService(defaultApi10a0, ""BR5X1\""a5nR"", ""com.github.scribejava.core.oauth.OAuth10aService$3"", ""BR5X1\""a5nR"", ""BR5X1\""a5nR"", (OutputStream) null, ""BR5X1\""a5nR"", jDKHttpClientConfig0, jDKHttpClient0);
      // Undeclared exception!
      try { 
        oAuth10aService0.getRequestToken();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""com.github.scribejava.core.oauth.OAuth10aService"", e);
      }
  }"
299,"    public OAuth1RequestToken getRequestToken() throws IOException, InterruptedException, ExecutionException {
        if (isDebug()) {
            log(""obtaining request token from %s"", api.getRequestTokenEndpoint());
        }
        final OAuthRequest request = prepareRequestTokenRequest();

        log(""sending request..."");
        try (Response response = execute(request)) {
            if (isDebug()) {
                final String body = response.getBody();
                log(""response status code: %s"", response.getCode());
                log(""response body: %s"", body);
            }
            return api.getRequestTokenExtractor().extract(response);
        }
    }","  public void test48()  throws Throwable  {
      Verb verb0 = Verb.DELETE;
      TimestampService timestampService0 = mock(TimestampService.class, new ViolatedAssumptionAnswer());
      doReturn(""k"").when(timestampService0).getTimestampInSeconds();
      SignatureService signatureService0 = mock(SignatureService.class, new ViolatedAssumptionAnswer());
      doReturn(""k"").when(signatureService0).getSignatureMethod();
      TimestampService timestampService1 = mock(TimestampService.class, new ViolatedAssumptionAnswer());
      doReturn("")x^L"").when(timestampService1).getNonce();
      BaseStringExtractor baseStringExtractor0 = mock(BaseStringExtractor.class, new ViolatedAssumptionAnswer());
      doReturn(""%\""[kYtNeV\""5*E7ED"").when(baseStringExtractor0).extract(any(com.github.scribejava.core.model.OAuthRequest.class));
      SignatureService signatureService1 = mock(SignatureService.class, new ViolatedAssumptionAnswer());
      doReturn(""O"").when(signatureService1).getSignature(anyString() , anyString() , anyString());
      OAuth1SignatureType oAuth1SignatureType0 = OAuth1SignatureType.HEADER;
      HeaderExtractor headerExtractor0 = mock(HeaderExtractor.class, new ViolatedAssumptionAnswer());
      DefaultApi10a defaultApi10a0 = mock(DefaultApi10a.class, new ViolatedAssumptionAnswer());
      doReturn(baseStringExtractor0).when(defaultApi10a0).getBaseStringExtractor();
      doReturn("""", """").when(defaultApi10a0).getRequestTokenEndpoint();
      doReturn(verb0).when(defaultApi10a0).getRequestTokenVerb();
      doReturn(signatureService0, signatureService1).when(defaultApi10a0).getSignatureService();
      doReturn((OAuth1SignatureType) null).when(defaultApi10a0).getSignatureType();
      doReturn(timestampService0, timestampService1).when(defaultApi10a0).getTimestampService();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null);
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient();
      OAuth10aService oAuth10aService0 = new OAuth10aService(defaultApi10a0, ""d!i|,9$"", ""d!i|,9$"", """", """", bufferedOutputStream0, ""~aRk[K_H8j&6R]"", (HttpClientConfig) null, jDKHttpClient0);
      // Undeclared exception!
      try { 
        oAuth10aService0.getRequestToken();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""com.github.scribejava.core.oauth.OAuth10aService"", e);
      }
  }"
300,"    public String getAuthorizationUrl(OAuth1RequestToken requestToken) {
        return api.getAuthorizationUrl(requestToken);
    }","  public void test49()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream(""b0=W5X\""EN%J"");
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient();
      OAuth10aService oAuth10aService0 = new OAuth10aService((DefaultApi10a) null, ""+TObK6vLo"", ""using Http Header signature"", ""b0=W5X\""EN%J"", ""b0=W5X\""EN%J"", mockPrintStream0, ""+TObK6vLo"", jDKHttpClientConfig0, jDKHttpClient0);
      OAuth1RequestToken oAuth1RequestToken0 = new OAuth1RequestToken(""l)fx0BqHJXc[#"", ""jXqnf"", ""+TObK6vLo"");
      // Undeclared exception!
      try { 
        oAuth10aService0.getAuthorizationUrl(oAuth1RequestToken0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""com.github.scribejava.core.oauth.OAuth10aService"", e);
      }
  }"
301,"    public Future<OAuth1RequestToken> getRequestTokenAsync() {
        return getRequestTokenAsync(null);
    }","  public void test50()  throws Throwable  {
      TimestampService timestampService0 = mock(TimestampService.class, new ViolatedAssumptionAnswer());
      SignatureService signatureService0 = mock(SignatureService.class, new ViolatedAssumptionAnswer());
      TimestampService timestampService1 = mock(TimestampService.class, new ViolatedAssumptionAnswer());
      BaseStringExtractor baseStringExtractor0 = mock(BaseStringExtractor.class, new ViolatedAssumptionAnswer());
      SignatureService signatureService1 = mock(SignatureService.class, new ViolatedAssumptionAnswer());
      OAuth1SignatureType oAuth1SignatureType0 = OAuth1SignatureType.QUERY_STRING;
      DefaultApi10a defaultApi10a0 = mock(DefaultApi10a.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(defaultApi10a0).getRequestTokenEndpoint();
      doReturn((Verb) null).when(defaultApi10a0).getRequestTokenVerb();
      doReturn((TimestampService) null).when(defaultApi10a0).getTimestampService();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null);
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient();
      OAuth10aService oAuth10aService0 = new OAuth10aService(defaultApi10a0, "")x^L"", "")x^L"", "")x^L"", "")x^L"", bufferedOutputStream0, "")x^L"", (HttpClientConfig) null, jDKHttpClient0);
      // Undeclared exception!
      try { 
        oAuth10aService0.getRequestTokenAsync();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""com.github.scribejava.core.oauth.OAuth10aService"", e);
      }
  }"
302,"    public String getVersion() {
        return VERSION;
    }","  public void test51()  throws Throwable  {
      DefaultApi10a defaultApi10a0 = mock(DefaultApi10a.class, new ViolatedAssumptionAnswer());
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient();
      OAuth10aService oAuth10aService0 = new OAuth10aService(defaultApi10a0, """", ""c7(E#T2.&ZU?E-G^-/]"", """", """", (OutputStream) null, """", jDKHttpClientConfig0, jDKHttpClient0);
      String string0 = oAuth10aService0.getVersion();
}"
303,"    public String getScope() {
        return scope;
    }","  public void test0()  throws Throwable  {
      AccessTokenRequestParams accessTokenRequestParams0 = new AccessTokenRequestParams("""");
      AccessTokenRequestParams accessTokenRequestParams1 = accessTokenRequestParams0.scope("""");
      String string0 = accessTokenRequestParams1.getScope();
}"
304,"    public String getPkceCodeVerifier() {
        return pkceCodeVerifier;
    }","  public void test1()  throws Throwable  {
      AccessTokenRequestParams accessTokenRequestParams0 = new AccessTokenRequestParams(""b"");
      accessTokenRequestParams0.pkceCodeVerifier(""t/r#w+4'WE1TjJM1"");
      String string0 = accessTokenRequestParams0.getPkceCodeVerifier();
}"
305,"    public String getPkceCodeVerifier() {
        return pkceCodeVerifier;
    }","  public void test2()  throws Throwable  {
      AccessTokenRequestParams accessTokenRequestParams0 = AccessTokenRequestParams.create((String) null);
      AccessTokenRequestParams accessTokenRequestParams1 = accessTokenRequestParams0.pkceCodeVerifier("""");
      String string0 = accessTokenRequestParams1.getPkceCodeVerifier();
}"
306,"    public Map<String, String> getExtraParameters() {
        return extraParameters;
    }","  public void test3()  throws Throwable  {
      AccessTokenRequestParams accessTokenRequestParams0 = new AccessTokenRequestParams(""com.github.scribejava.core.oauth.AccessTokenRequestParams"");
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      AccessTokenRequestParams accessTokenRequestParams1 = accessTokenRequestParams0.setExtraParameters(hashMap0);
      Map<String, String> map0 = accessTokenRequestParams1.getExtraParameters();
}"
307,"    public String getCode() {
        return code;
    }","  public void test4()  throws Throwable  {
      AccessTokenRequestParams accessTokenRequestParams0 = new AccessTokenRequestParams((String) null);
      String string0 = accessTokenRequestParams0.getCode();
}"
308,"    public String getCode() {
        return code;
    }","  public void test5()  throws Throwable  {
      AccessTokenRequestParams accessTokenRequestParams0 = AccessTokenRequestParams.create("""");
      String string0 = accessTokenRequestParams0.getCode();
}"
309,"    public AccessTokenRequestParams scope(String scope) {
        this.scope = scope;
        return this;
    }","  public void test6()  throws Throwable  {
      AccessTokenRequestParams accessTokenRequestParams0 = AccessTokenRequestParams.create("""");
      // Undeclared exception!
      try { 
        accessTokenRequestParams0.scope((ScopeBuilder) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""com.github.scribejava.core.oauth.AccessTokenRequestParams"", e);
      }
  }"
310,"    public AccessTokenRequestParams scope(String scope) {
        this.scope = scope;
        return this;
    }","  public void test7()  throws Throwable  {
      AccessTokenRequestParams accessTokenRequestParams0 = new AccessTokenRequestParams((String) null);
      ScopeBuilder scopeBuilder0 = new ScopeBuilder();
      // Undeclared exception!
      try { 
        accessTokenRequestParams0.scope(scopeBuilder0);
        fail(""Expecting exception: StringIndexOutOfBoundsException"");
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -1
         //
         verifyException(""java.lang.AbstractStringBuilder"", e);
      }
  }"
311,"    public AccessTokenRequestParams addExtraParameter(String name, String value) {
        if (this.extraParameters == null) {
            extraParameters = new HashMap<>();
        }
        this.extraParameters.put(name, value);
        return this;
    }","  public void test8()  throws Throwable  {
      AccessTokenRequestParams accessTokenRequestParams0 = AccessTokenRequestParams.create(""com.github.scribejava.core.builder.ScopeBuilder"");
      AccessTokenRequestParams accessTokenRequestParams1 = accessTokenRequestParams0.addExtraParameter(""com.github.scribejava.core.builder.ScopeBuilder"", ""com.github.scribejava.core.builder.ScopeBuilder"");
      AccessTokenRequestParams accessTokenRequestParams2 = accessTokenRequestParams1.addExtraParameter(""com.github.scribejava.core.builder.ScopeBuilder"", ""com.github.scribejava.core.builder.ScopeBuilder"");
}"
312,"    public AccessTokenRequestParams addExtraParameters(Map<String, String> extraParameters) {
        if (extraParameters == null || extraParameters.isEmpty()) {
            return this;
        }
        if (this.extraParameters == null) {
            extraParameters = new HashMap<>();
        }
        this.extraParameters.putAll(extraParameters);
        return this;
    }","  public void test9()  throws Throwable  {
      AccessTokenRequestParams accessTokenRequestParams0 = AccessTokenRequestParams.create(""com.github.scribejava.core.builder.ScopeBuilder"");
      AccessTokenRequestParams accessTokenRequestParams1 = accessTokenRequestParams0.addExtraParameter(""com.github.scribejava.core.builder.ScopeBuilder"", ""com.github.scribejava.core.builder.ScopeBuilder"");
      Map<String, String> map0 = accessTokenRequestParams0.getExtraParameters();
      accessTokenRequestParams1.setExtraParameters((Map<String, String>) null);
      // Undeclared exception!
      try { 
        accessTokenRequestParams0.addExtraParameters(map0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""com.github.scribejava.core.oauth.AccessTokenRequestParams"", e);
      }
  }"
313,"    public AccessTokenRequestParams addExtraParameters(Map<String, String> extraParameters) {
        if (extraParameters == null || extraParameters.isEmpty()) {
            return this;
        }
        if (this.extraParameters == null) {
            extraParameters = new HashMap<>();
        }
        this.extraParameters.putAll(extraParameters);
        return this;
    }","  public void test10()  throws Throwable  {
      AccessTokenRequestParams accessTokenRequestParams0 = AccessTokenRequestParams.create(""com.github.scribejava.core.builder.ScopeBuilder"");
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      AccessTokenRequestParams accessTokenRequestParams1 = accessTokenRequestParams0.addExtraParameters(hashMap0);
}"
314,"    public String getCode() {
        return code;
    }","  public void test11()  throws Throwable  {
      AccessTokenRequestParams accessTokenRequestParams0 = AccessTokenRequestParams.create(""com.github.scribejava.core.builder.ScopeBuilder"");
      accessTokenRequestParams0.addExtraParameter(""com.github.scribejava.core.builder.ScopeBuilder"", ""com.github.scribejava.core.builder.ScopeBuilder"");
      Map<String, String> map0 = accessTokenRequestParams0.getExtraParameters();
      AccessTokenRequestParams accessTokenRequestParams1 = accessTokenRequestParams0.addExtraParameters(map0);
}"
315,"    public AccessTokenRequestParams addExtraParameters(Map<String, String> extraParameters) {
        if (extraParameters == null || extraParameters.isEmpty()) {
            return this;
        }
        if (this.extraParameters == null) {
            extraParameters = new HashMap<>();
        }
        this.extraParameters.putAll(extraParameters);
        return this;
    }","  public void test12()  throws Throwable  {
      AccessTokenRequestParams accessTokenRequestParams0 = AccessTokenRequestParams.create(""com.github.scribejava.core.builder.ScopeBuilder"");
      AccessTokenRequestParams accessTokenRequestParams1 = accessTokenRequestParams0.addExtraParameters((Map<String, String>) null);
}"
316,"    public Map<String, String> getExtraParameters() {
        return extraParameters;
    }","  public void test13()  throws Throwable  {
      AccessTokenRequestParams accessTokenRequestParams0 = AccessTokenRequestParams.create(""com.github.scribejava.core.builder.ScopeBuilder"");
      Map<String, String> map0 = accessTokenRequestParams0.getExtraParameters();
}"
317,"    public String getPkceCodeVerifier() {
        return pkceCodeVerifier;
    }","  public void test14()  throws Throwable  {
      AccessTokenRequestParams accessTokenRequestParams0 = AccessTokenRequestParams.create(""com.github.scribejava.core.builder.ScopeBuilder"");
      String string0 = accessTokenRequestParams0.getPkceCodeVerifier();
}"
318,"    public String getCode() {
        return code;
    }","  public void test15()  throws Throwable  {
      AccessTokenRequestParams accessTokenRequestParams0 = AccessTokenRequestParams.create(""com.github.scribejava.core.builder.ScopeBuilder"");
      String string0 = accessTokenRequestParams0.getCode();
}"
319,"    public String getScope() {
        return scope;
    }","  public void test16()  throws Throwable  {
      AccessTokenRequestParams accessTokenRequestParams0 = AccessTokenRequestParams.create(""com.github.scribejava.core.builder.ScopeBuilder"");
      String string0 = accessTokenRequestParams0.getScope();
}"
320,"    public String getScope() {
        return scope;
    }","  public void test17()  throws Throwable  {
      AccessTokenRequestParams accessTokenRequestParams0 = AccessTokenRequestParams.create(""com.github.scribejava.core.builder.ScopeBuilder"");
      accessTokenRequestParams0.scope(""com.github.scribejava.core.builder.ScopeBuilder"");
      String string0 = accessTokenRequestParams0.getScope();
}"
321,"    public String getPkceCodeVerifier() {
        return pkceCodeVerifier;
    }","  public void test18()  throws Throwable  {
      AccessTokenRequestParams accessTokenRequestParams0 = AccessTokenRequestParams.create(""com.github.scribejava.core.builder.ScopeBuilder"");
      ScopeBuilder scopeBuilder0 = new ScopeBuilder(""com.github.scribejava.core.builder.ScopeBuilder"");
      AccessTokenRequestParams accessTokenRequestParams1 = accessTokenRequestParams0.scope(scopeBuilder0);
}"
322,"    public void log(String message) {
        if (debugStream != null) {
            log(message, (Object[]) null);
        }
    }","  public void test0()  throws Throwable  {
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpProvider jDKHttpProvider0 = new JDKHttpProvider();
      HttpClient httpClient0 = jDKHttpProvider0.createClient(jDKHttpClientConfig0);
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, ""~\""k7\""%ImF5KunU4z|"", ""0a~=^@ Q~C+tP *i1L"", ""async obtaining request token from %s"", """", """", pipedOutputStream0, ""there were problems while writting to the debug stream"", jDKHttpClientConfig0, httpClient0);
      Object[] objectArray0 = new Object[2];
      oAuth20Service0.log(""0a~=^@ Q~C+tP *i1L"", objectArray0);
}"
323,"    protected boolean isDebug() {
        return debugStream != null;
    }","  public void test1()  throws Throwable  {
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient();
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, ""~\""k7\""%ImF5KunU4z|"", ""~\""k7\""%ImF5KunU4z|"", ""async obtaining request token from %s"", """", ""`"", pipedOutputStream0, ""there were problems while writting to the debug stream"", jDKHttpClientConfig0, jDKHttpClient0);
      boolean boolean0 = oAuth20Service0.isDebug();
}"
324,"    public String getCallback() {
        return callback;
    }","  public void test2()  throws Throwable  {
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient();
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, ""~\""k7\""%ImF5KunU4z|"", ""~\""k7\""%ImF5KunU4z|"", ""async obtaining request token from %s"", """", ""`"", pipedOutputStream0, ""there were problems while writting to the debug stream"", jDKHttpClientConfig0, jDKHttpClient0);
      boolean boolean0 = oAuth20Service0.isDebug();
}"
325,"    public String getApiSecret() {
        return apiSecret;
    }","  public void test3()  throws Throwable  {
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient();
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, ""~\""k7\""%ImF5KunU4z|"", ""~\""k7\""%ImF5KunU4z|"", ""async obtaining request token from %s"", """", ""`"", pipedOutputStream0, ""there were problems while writting to the debug stream"", jDKHttpClientConfig0, jDKHttpClient0);
      boolean boolean0 = oAuth20Service0.isDebug();
}"
326,"    public String getApiKey() {
        return apiKey;
    }","  public void test4()  throws Throwable  {
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient();
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, ""~\""k7\""%ImF5KunU4z|"", ""~\""k7\""%ImF5KunU4z|"", ""async obtaining request token from %s"", """", ""`"", pipedOutputStream0, ""there were problems while writting to the debug stream"", jDKHttpClientConfig0, jDKHttpClient0);
      boolean boolean0 = oAuth20Service0.isDebug();
}"
327,"    public String getApiKey() {
        return apiKey;
    }","  public void test5()  throws Throwable  {
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient();
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, ""~\""k7\""%ImF5KunU4z|"", ""xtY"", ""xtY"", ""~\""k7\""%ImF5KunU4z|"", ""~\""k7\""%ImF5KunU4z|"", (OutputStream) null, ""realm"", jDKHttpClientConfig0, jDKHttpClient0);
      boolean boolean0 = oAuth20Service0.isDebug();
}"
328,"    public String getApiSecret() {
        return apiSecret;
    }","  public void test6()  throws Throwable  {
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient();
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, ""~\""k7\""%ImF5KunU4z|"", ""xtY"", ""xtY"", ""~\""k7\""%ImF5KunU4z|"", ""~\""k7\""%ImF5KunU4z|"", (OutputStream) null, ""realm"", jDKHttpClientConfig0, jDKHttpClient0);
      boolean boolean0 = oAuth20Service0.isDebug();
}"
329,"    protected boolean isDebug() {
        return debugStream != null;
    }","  public void test7()  throws Throwable  {
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient();
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, ""~\""k7\""%ImF5KunU4z|"", ""xtY"", ""xtY"", ""~\""k7\""%ImF5KunU4z|"", ""~\""k7\""%ImF5KunU4z|"", (OutputStream) null, ""realm"", jDKHttpClientConfig0, jDKHttpClient0);
      boolean boolean0 = oAuth20Service0.isDebug();
}"
330,"    public String getCallback() {
        return callback;
    }","  public void test8()  throws Throwable  {
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient();
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, ""~\""k7\""%ImF5KunU4z|"", ""xtY"", ""xtY"", ""~\""k7\""%ImF5KunU4z|"", ""~\""k7\""%ImF5KunU4z|"", (OutputStream) null, ""realm"", jDKHttpClientConfig0, jDKHttpClient0);
      boolean boolean0 = oAuth20Service0.isDebug();
}"
331,"    public String getApiSecret() {
        return apiSecret;
    }","  public void test9()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(""' from this: '"", false);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0, 1757);
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuth10aService oAuth10aService0 = new OAuth10aService((DefaultApi10a) null, """", """", """", """", bufferedOutputStream0, ""' from this: '"", jDKHttpClientConfig0, jDKHttpClient0);
      oAuth10aService0.getVersion();
}"
332,"    public String getApiKey() {
        return apiKey;
    }","  public void test10()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(""' from this: '"", false);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0, 1757);
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuth10aService oAuth10aService0 = new OAuth10aService((DefaultApi10a) null, """", """", """", """", bufferedOutputStream0, ""' from this: '"", jDKHttpClientConfig0, jDKHttpClient0);
      oAuth10aService0.getVersion();
}"
333,"    public String getCallback() {
        return callback;
    }","  public void test11()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(""' from this: '"", false);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0, 1757);
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuth10aService oAuth10aService0 = new OAuth10aService((DefaultApi10a) null, """", """", """", """", bufferedOutputStream0, ""' from this: '"", jDKHttpClientConfig0, jDKHttpClient0);
      oAuth10aService0.getVersion();
}"
334,"    public String getApiSecret() {
        return apiSecret;
    }","  public void test12()  throws Throwable  {
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      MockFile mockFile0 = new MockFile(""jDl8=(>$E["");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, ""jDl8=(>$E["", ""XEQcaG"", (String) null, (String) null, ""jDl8=(>$E["", mockPrintStream0, ""jDl8=(>$E["", (HttpClientConfig) null, (HttpClient) null);
      String string0 = oAuth20Service0.getCallback();
}"
335,"    public String getCallback() {
        return callback;
    }","  public void test13()  throws Throwable  {
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      MockFile mockFile0 = new MockFile(""jDl8=(>$E["");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, ""jDl8=(>$E["", ""XEQcaG"", (String) null, (String) null, ""jDl8=(>$E["", mockPrintStream0, ""jDl8=(>$E["", (HttpClientConfig) null, (HttpClient) null);
      String string0 = oAuth20Service0.getCallback();
}"
336,"    public String getApiKey() {
        return apiKey;
    }","  public void test14()  throws Throwable  {
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      MockFile mockFile0 = new MockFile(""jDl8=(>$E["");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, ""jDl8=(>$E["", ""XEQcaG"", (String) null, (String) null, ""jDl8=(>$E["", mockPrintStream0, ""jDl8=(>$E["", (HttpClientConfig) null, (HttpClient) null);
      String string0 = oAuth20Service0.getCallback();
}"
337,"    public String getApiKey() {
        return apiKey;
    }","  public void test15()  throws Throwable  {
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      OAuth20Service oAuth20Service0 = new OAuth20Service((DefaultApi20) null, ""2aCj:hYhT,;\""M,$/"", ""T'!K@ "", ""}_,>^t"", ""2aCj:hYhT,;\""M,$/"", ""com.github.scribejava.core.oauth.OAuthService"", (OutputStream) null, ""T'!K@ "", jDKHttpClientConfig0, (HttpClient) null);
      String string0 = oAuth20Service0.getCallback();
}"
338,"    public String getCallback() {
        return callback;
    }","  public void test16()  throws Throwable  {
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      OAuth20Service oAuth20Service0 = new OAuth20Service((DefaultApi20) null, ""2aCj:hYhT,;\""M,$/"", ""T'!K@ "", ""}_,>^t"", ""2aCj:hYhT,;\""M,$/"", ""com.github.scribejava.core.oauth.OAuthService"", (OutputStream) null, ""T'!K@ "", jDKHttpClientConfig0, (HttpClient) null);
      String string0 = oAuth20Service0.getCallback();
}"
339,"    public String getApiSecret() {
        return apiSecret;
    }","  public void test17()  throws Throwable  {
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      OAuth20Service oAuth20Service0 = new OAuth20Service((DefaultApi20) null, ""2aCj:hYhT,;\""M,$/"", ""T'!K@ "", ""}_,>^t"", ""2aCj:hYhT,;\""M,$/"", ""com.github.scribejava.core.oauth.OAuthService"", (OutputStream) null, ""T'!K@ "", jDKHttpClientConfig0, (HttpClient) null);
      String string0 = oAuth20Service0.getCallback();
}"
340,"    public String getApiKey() {
        return apiKey;
    }","  public void test18()  throws Throwable  {
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      OAuth20Service oAuth20Service0 = new OAuth20Service((DefaultApi20) null, ""cVon(P4=N;"", ""7MTeE<>"", ""cVon(P4=N;"", ""7MTeE<>"", ""wy3so,s_"", pipedOutputStream0, ""wy3so,s_"", jDKHttpClientConfig0, jDKHttpClient0);
      String string0 = oAuth20Service0.getApiSecret();
}"
341,"    public String getApiSecret() {
        return apiSecret;
    }","  public void test19()  throws Throwable  {
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      OAuth20Service oAuth20Service0 = new OAuth20Service((DefaultApi20) null, ""cVon(P4=N;"", ""7MTeE<>"", ""cVon(P4=N;"", ""7MTeE<>"", ""wy3so,s_"", pipedOutputStream0, ""wy3so,s_"", jDKHttpClientConfig0, jDKHttpClient0);
      String string0 = oAuth20Service0.getApiSecret();
}"
342,"    public String getCallback() {
        return callback;
    }","  public void test20()  throws Throwable  {
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      OAuth20Service oAuth20Service0 = new OAuth20Service((DefaultApi20) null, ""cVon(P4=N;"", ""7MTeE<>"", ""cVon(P4=N;"", ""7MTeE<>"", ""wy3so,s_"", pipedOutputStream0, ""wy3so,s_"", jDKHttpClientConfig0, jDKHttpClient0);
      String string0 = oAuth20Service0.getApiSecret();
}"
343,"    public String getApiSecret() {
        return apiSecret;
    }","  public void test21()  throws Throwable  {
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(29);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient();
      OAuth10aService oAuth10aService0 = new OAuth10aService((DefaultApi10a) null, """", """", "".BO"", "".BO"", mockPrintStream0, ""com.github.scribejava.core.oauth.AccessTokenRequestParams"", jDKHttpClientConfig0, jDKHttpClient0);
      String string0 = oAuth10aService0.getApiSecret();
}"
344,"    public String getCallback() {
        return callback;
    }","  public void test22()  throws Throwable  {
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(29);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient();
      OAuth10aService oAuth10aService0 = new OAuth10aService((DefaultApi10a) null, """", """", "".BO"", "".BO"", mockPrintStream0, ""com.github.scribejava.core.oauth.AccessTokenRequestParams"", jDKHttpClientConfig0, jDKHttpClient0);
      String string0 = oAuth10aService0.getApiSecret();
}"
345,"    public String getApiKey() {
        return apiKey;
    }","  public void test23()  throws Throwable  {
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(29);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient();
      OAuth10aService oAuth10aService0 = new OAuth10aService((DefaultApi10a) null, """", """", "".BO"", "".BO"", mockPrintStream0, ""com.github.scribejava.core.oauth.AccessTokenRequestParams"", jDKHttpClientConfig0, jDKHttpClient0);
      String string0 = oAuth10aService0.getApiSecret();
}"
346,"    public String getApiKey() {
        return apiKey;
    }","  public void test24()  throws Throwable  {
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      PipedInputStream pipedInputStream0 = new PipedInputStream(93);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, ""MEXa>u?\""Mrl("", ""MEXa>u?\""Mrl("", ""MEXa>u?\""Mrl("", ""MEXa>u?\""Mrl("", ""MEXa>u?\""Mrl("", pipedOutputStream0, ""MEXa>u?\""Mrl("", jDKHttpClientConfig0, jDKHttpClient0);
      String string0 = oAuth20Service0.getApiKey();
}"
347,"    public String getApiKey() {
        return apiKey;
    }","  public void test25()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(""com.github.scribejava.core.oauth.OAuthService"");
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient();
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, """", """", ""~Bl<'L9LKif7.B+0"", ""0r9Q)/}Ga1e9cq"", """", mockFileOutputStream0, ""0r9Q)/}Ga1e9cq"", jDKHttpClientConfig0, jDKHttpClient0);
      String string0 = oAuth20Service0.getApiKey();
}"
348,"    public String getCallback() {
        return callback;
    }","  public void test26()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(""com.github.scribejava.core.oauth.OAuthService"");
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient();
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, """", """", ""~Bl<'L9LKif7.B+0"", ""0r9Q)/}Ga1e9cq"", """", mockFileOutputStream0, ""0r9Q)/}Ga1e9cq"", jDKHttpClientConfig0, jDKHttpClient0);
      String string0 = oAuth20Service0.getApiKey();
}"
349,"    public String getApiSecret() {
        return apiSecret;
    }","  public void test27()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(""com.github.scribejava.core.oauth.OAuthService"");
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient();
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, """", """", ""~Bl<'L9LKif7.B+0"", ""0r9Q)/}Ga1e9cq"", """", mockFileOutputStream0, ""0r9Q)/}Ga1e9cq"", jDKHttpClientConfig0, jDKHttpClient0);
      String string0 = oAuth20Service0.getApiKey();
}"
350,"    public String getCallback() {
        return callback;
    }","  public void test28()  throws Throwable  {
      DefaultApi10a defaultApi10a0 = mock(DefaultApi10a.class, new ViolatedAssumptionAnswer());
      OAuth10aService oAuth10aService0 = new OAuth10aService(defaultApi10a0, "">yRUA^l"", "">yRUA^l"", ""Cannot encode null object"", ""Cannot encode null object"", (OutputStream) null, "">yRUA^l"", (HttpClientConfig) null, (HttpClient) null);
      Verb verb0 = Verb.PUT;
      OAuthRequest oAuthRequest0 = new OAuthRequest(verb0, "">yRUA^l"");
      oAuth10aService0.execute(oAuthRequest0, (OAuthAsyncRequestCallback<Response>) null);
}"
351,"    public String getApiKey() {
        return apiKey;
    }","  public void test29()  throws Throwable  {
      DefaultApi10a defaultApi10a0 = mock(DefaultApi10a.class, new ViolatedAssumptionAnswer());
      OAuth10aService oAuth10aService0 = new OAuth10aService(defaultApi10a0, "">yRUA^l"", "">yRUA^l"", ""Cannot encode null object"", ""Cannot encode null object"", (OutputStream) null, "">yRUA^l"", (HttpClientConfig) null, (HttpClient) null);
      Verb verb0 = Verb.PUT;
      OAuthRequest oAuthRequest0 = new OAuthRequest(verb0, "">yRUA^l"");
      oAuth10aService0.execute(oAuthRequest0, (OAuthAsyncRequestCallback<Response>) null);
}"
352,"    public String getApiSecret() {
        return apiSecret;
    }","  public void test30()  throws Throwable  {
      DefaultApi10a defaultApi10a0 = mock(DefaultApi10a.class, new ViolatedAssumptionAnswer());
      OAuth10aService oAuth10aService0 = new OAuth10aService(defaultApi10a0, "">yRUA^l"", "">yRUA^l"", ""Cannot encode null object"", ""Cannot encode null object"", (OutputStream) null, "">yRUA^l"", (HttpClientConfig) null, (HttpClient) null);
      Verb verb0 = Verb.PUT;
      OAuthRequest oAuthRequest0 = new OAuthRequest(verb0, "">yRUA^l"");
      oAuth10aService0.execute(oAuthRequest0, (OAuthAsyncRequestCallback<Response>) null);
}"
353,"    public void log(String message) {
        if (debugStream != null) {
            log(message, (Object[]) null);
        }
    }","  public void test31()  throws Throwable  {
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, ""$!Jc$T9F`vh\""=p\""sT"", """", ""B}t .y)U:"", ""'"", ""'"", (OutputStream) null, """", jDKHttpClientConfig0, jDKHttpClient0);
      Object[] objectArray0 = new Object[0];
      // Undeclared exception!
      try { 
        oAuth20Service0.log("""", objectArray0);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // there were problems while writting to the debug stream
         //
         verifyException(""com.github.scribejava.core.oauth.OAuthService"", e);
      }
  }"
354,"    public void log(String message) {
        if (debugStream != null) {
            log(message, (Object[]) null);
        }
    }","  public void test32()  throws Throwable  {
      DefaultApi10a defaultApi10a0 = mock(DefaultApi10a.class, new ViolatedAssumptionAnswer());
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpProvider jDKHttpProvider0 = new JDKHttpProvider();
      HttpClient httpClient0 = jDKHttpProvider0.createClient(jDKHttpClientConfig0);
      OAuth10aService oAuth10aService0 = new OAuth10aService(defaultApi10a0, ""7MTd$<>"", ""wy3so,s_"", ""7MTd$<>"", ""cVon(P4=N;"", pipedOutputStream0, ""wy3so,s_"", jDKHttpClientConfig0, httpClient0);
      // Undeclared exception!
      try { 
        oAuth10aService0.log(""cVon(P4=N;"");
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // there were problems while writting to the debug stream
         //
         verifyException(""com.github.scribejava.core.oauth.OAuthService"", e);
      }
  }"
355,"    public void log(String message) {
        if (debugStream != null) {
            log(message, (Object[]) null);
        }
    }","  public void test33()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpProvider jDKHttpProvider0 = new JDKHttpProvider();
      HttpClient httpClient0 = jDKHttpProvider0.createClient(jDKHttpClientConfig0);
      OAuth20Service oAuth20Service0 = new OAuth20Service((DefaultApi20) null, ""MhWzP"", ""response_type"", ""7MTd$<>"", ""wy3so,s_"", ""7MTd$<>"", pipedOutputStream0, ""UTF8"", jDKHttpClientConfig0, httpClient0);
      // Undeclared exception!
      try { 
        oAuth20Service0.log((String) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
356,"    public Future<Response> executeAsync(OAuthRequest request) {
        return execute(request, null);
    }","  public void test34()  throws Throwable  {
      Verb verb0 = Verb.GET;
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, ""l"", ""l"", ""l"", ""l"", ""l"", byteArrayOutputStream0, ""l"", jDKHttpClientConfig0, (HttpClient) null);
      OAuthRequest oAuthRequest0 = new OAuthRequest(verb0, ""l"");
      oAuthRequest0.setCharset(""l"");
      // Undeclared exception!
      try { 
        oAuth20Service0.executeAsync(oAuthRequest0);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // Unsupported Charset: l
         //
         verifyException(""com.github.scribejava.core.model.OAuthRequest"", e);
      }
  }"
357,"    public Future<Response> executeAsync(OAuthRequest request) {
        return execute(request, null);
    }","  public void test35()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      DefaultApi10a defaultApi10a0 = mock(DefaultApi10a.class, new ViolatedAssumptionAnswer());
      OAuth10aService oAuth10aService0 = new OAuth10aService(defaultApi10a0, ""password"", ""$V_"", ""password"", """", byteArrayOutputStream0, """", jDKHttpClientConfig0, (HttpClient) null);
      // Undeclared exception!
      try { 
        oAuth10aService0.executeAsync((OAuthRequest) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""com.github.scribejava.core.oauth.OAuthService"", e);
      }
  }"
358,"    public Future<Response> executeAsync(OAuthRequest request) {
        return execute(request, null);
    }","  public void test36()  throws Throwable  {
      Verb verb0 = Verb.DELETE;
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, """", """", """", """", """", byteArrayOutputStream0, """", jDKHttpClientConfig0, (HttpClient) null);
      OAuthRequest oAuthRequest0 = new OAuthRequest(verb0, (String) null);
      // Undeclared exception!
      try { 
        oAuth20Service0.executeAsync(oAuthRequest0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Cannot append to null URL
         //
         verifyException(""com.github.scribejava.core.utils.Preconditions"", e);
      }
  }"
359,"    public Future<Response> execute(OAuthRequest request, OAuthAsyncRequestCallback<Response> callback) {
        return execute(request, callback, null);
    }","  public void test37()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient();
      Verb verb0 = Verb.PUT;
      OAuthRequest oAuthRequest0 = new OAuthRequest(verb0, ""~\""k7\""%ImF5KunU4z|"");
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      oAuthRequest0.setCharset(""there were problems while writting to the debug stream"");
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, ""there were problems while writting to the debug stream"", ""~\""k7\""%ImF5KunU4z|"", ""~\""k7\""%ImF5KunU4z|"", ""~\""k7\""%ImF5KunU4z|"", ""~\""k7\""%ImF5KunU4z|"", pipedOutputStream0, ""~\""k7\""%ImF5KunU4z|"", jDKHttpClientConfig0, jDKHttpClient0);
      OAuthAsyncRequestCallback<Response> oAuthAsyncRequestCallback0 = (OAuthAsyncRequestCallback<Response>) mock(OAuthAsyncRequestCallback.class, new ViolatedAssumptionAnswer());
      OAuthRequest.ResponseConverter<Response> oAuthRequest_ResponseConverter0 = (OAuthRequest.ResponseConverter<Response>) mock(OAuthRequest.ResponseConverter.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        oAuth20Service0.execute(oAuthRequest0, oAuthAsyncRequestCallback0, oAuthRequest_ResponseConverter0);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // Unsupported Charset: there were problems while writting to the debug stream
         //
         verifyException(""com.github.scribejava.core.model.OAuthRequest"", e);
      }
  }"
360,"    public Future<Response> execute(OAuthRequest request, OAuthAsyncRequestCallback<Response> callback) {
        return execute(request, callback, null);
    }","  public void test38()  throws Throwable  {
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(""com.github.scribejava.core.oauth.OAuth20Service$3"", false);
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      JDKHttpProvider jDKHttpProvider0 = new JDKHttpProvider();
      HttpClient httpClient0 = jDKHttpProvider0.createClient(jDKHttpClientConfig0);
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, """", """", """", ""F!p-T~#h0}lU[3!`"", """", mockFileOutputStream0, """", jDKHttpClientConfig0, httpClient0);
      OAuthRequest.ResponseConverter<JDKHttpProvider> oAuthRequest_ResponseConverter0 = (OAuthRequest.ResponseConverter<JDKHttpProvider>) mock(OAuthRequest.ResponseConverter.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        oAuth20Service0.execute((OAuthRequest) null, (OAuthAsyncRequestCallback<JDKHttpProvider>) null, oAuthRequest_ResponseConverter0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""com.github.scribejava.core.oauth.OAuthService"", e);
      }
  }"
361,"    public Future<Response> execute(OAuthRequest request, OAuthAsyncRequestCallback<Response> callback) {
        return execute(request, callback, null);
    }","  public void test39()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient();
      Verb verb0 = Verb.POST;
      OAuthRequest oAuthRequest0 = new OAuthRequest(verb0, ""async obtaining request token from %s"");
      oAuthRequest0.addParameter("""", (String) null);
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, """", ""#V3g3fV#?@Ii1|b/,"", ""0a~=^@ Qm~C+tP *i1L"", (String) null, ""com.github.scribejava.core.oauth.OAuthService"", pipedOutputStream0, (String) null, jDKHttpClientConfig0, jDKHttpClient0);
      OAuthAsyncRequestCallback<Response> oAuthAsyncRequestCallback0 = (OAuthAsyncRequestCallback<Response>) mock(OAuthAsyncRequestCallback.class, new ViolatedAssumptionAnswer());
      OAuthRequest.ResponseConverter<Response> oAuthRequest_ResponseConverter0 = (OAuthRequest.ResponseConverter<Response>) mock(OAuthRequest.ResponseConverter.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        oAuth20Service0.execute(oAuthRequest0, oAuthAsyncRequestCallback0, oAuthRequest_ResponseConverter0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Cannot encode null object
         //
         verifyException(""com.github.scribejava.core.utils.Preconditions"", e);
      }
  }"
362,"    public Future<Response> execute(OAuthRequest request, OAuthAsyncRequestCallback<Response> callback) {
        return execute(request, callback, null);
    }","  public void test40()  throws Throwable  {
      Verb verb0 = Verb.DELETE;
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, """", """", """", """", """", byteArrayOutputStream0, """", jDKHttpClientConfig0, (HttpClient) null);
      OAuthRequest oAuthRequest0 = new OAuthRequest(verb0, """");
      MockFile mockFile0 = new MockFile("""");
      oAuthRequest0.setPayload((File) mockFile0);
      OAuthAsyncRequestCallback<Response> oAuthAsyncRequestCallback0 = (OAuthAsyncRequestCallback<Response>) mock(OAuthAsyncRequestCallback.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        oAuth20Service0.execute(oAuthRequest0, oAuthAsyncRequestCallback0);
        fail(""Expecting exception: UnsupportedOperationException"");
      } catch(UnsupportedOperationException e) {
         //
         // JDKHttpClient does not support File payload for the moment
         //
         verifyException(""com.github.scribejava.core.httpclient.jdk.JDKHttpClient"", e);
      }
  }"
363,"    public Future<Response> execute(OAuthRequest request, OAuthAsyncRequestCallback<Response> callback) {
        return execute(request, callback, null);
    }","  public void test41()  throws Throwable  {
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      DefaultApi10a defaultApi10a0 = mock(DefaultApi10a.class, new ViolatedAssumptionAnswer());
      OAuth10aService oAuth10aService0 = new OAuth10aService(defaultApi10a0, """", """", ""'"", """", (OutputStream) null, """", jDKHttpClientConfig0, jDKHttpClient0);
      OAuthAsyncRequestCallback<Response> oAuthAsyncRequestCallback0 = (OAuthAsyncRequestCallback<Response>) mock(OAuthAsyncRequestCallback.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        oAuth10aService0.execute((OAuthRequest) null, oAuthAsyncRequestCallback0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""com.github.scribejava.core.oauth.OAuthService"", e);
      }
  }"
364,"    public Future<Response> execute(OAuthRequest request, OAuthAsyncRequestCallback<Response> callback) {
        return execute(request, callback, null);
    }","  public void test42()  throws Throwable  {
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient((JDKHttpClientConfig) null);
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, ""4YAmQkN0"", ""4YAmQkN0"", ""4YAmQkN0"", ""4YAmQkN0"", ""4YAmQkN0"", pipedOutputStream0, ""4YAmQkN0"", jDKHttpClientConfig0, jDKHttpClient0);
      Verb verb0 = Verb.TRACE;
      OAuthRequest oAuthRequest0 = new OAuthRequest(verb0, ""4YAmQkN0"");
      oAuthRequest0.setCharset(""'!h"");
      // Undeclared exception!
      try { 
        oAuth20Service0.execute(oAuthRequest0);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // Unsupported Charset: '!h
         //
         verifyException(""com.github.scribejava.core.model.OAuthRequest"", e);
      }
  }"
365,"    public Future<Response> execute(OAuthRequest request, OAuthAsyncRequestCallback<Response> callback) {
        return execute(request, callback, null);
    }","  public void test43()  throws Throwable  {
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      MockPrintStream mockPrintStream0 = new MockPrintStream(""GXnYuS,"");
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, ""GXnYuS,"", ""GXnYuS,"", ""GXnYuS,"", ""GXnYuS,"", ""response body: %s"", mockPrintStream0, ""response body: %s"", (HttpClientConfig) null, (HttpClient) null);
      // Undeclared exception!
      try { 
        oAuth20Service0.execute((OAuthRequest) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""com.github.scribejava.core.oauth.OAuthService"", e);
      }
  }"
366,"    public Future<Response> execute(OAuthRequest request, OAuthAsyncRequestCallback<Response> callback) {
        return execute(request, callback, null);
    }","  public void test44()  throws Throwable  {
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpProvider jDKHttpProvider0 = new JDKHttpProvider();
      HttpClient httpClient0 = jDKHttpProvider0.createClient(jDKHttpClientConfig0);
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, ""~\""k7\""%ImF5KunU4z|"", ""0a~=^@ Q~C+tP *i1L"", ""async obtaining request token from %s"", """", """", pipedOutputStream0, ""there were problems while writting to the debug stream"", jDKHttpClientConfig0, httpClient0);
      Verb verb0 = Verb.POST;
      OAuthRequest oAuthRequest0 = new OAuthRequest(verb0, ""async obtaining request token from %s"");
      oAuthRequest0.addParameter("""", (String) null);
      // Undeclared exception!
      try { 
        oAuth20Service0.execute(oAuthRequest0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Cannot encode null object
         //
         verifyException(""com.github.scribejava.core.utils.Preconditions"", e);
      }
  }"
367,"    public Future<Response> execute(OAuthRequest request, OAuthAsyncRequestCallback<Response> callback) {
        return execute(request, callback, null);
    }","  public void test45()  throws Throwable  {
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient((JDKHttpClientConfig) null);
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, ""4YAmQkN0"", ""4YAmQkN0"", ""4YAmQkN0"", ""4YAmQkN0"", ""4YAmQkN0"", pipedOutputStream0, ""4YAmQkN0"", jDKHttpClientConfig0, jDKHttpClient0);
      Verb verb0 = Verb.TRACE;
      OAuthRequest oAuthRequest0 = new OAuthRequest(verb0, ""4YAmQkN0"");
      try { 
        oAuth20Service0.execute(oAuthRequest0);
        fail(""Expecting exception: MalformedURLException"");
      } catch(MalformedURLException e) {
         //
         // no protocol: 4YAmQkN0
         //
         verifyException(""java.net.URL"", e);
      }
  }"
368,"    public Future<Response> execute(OAuthRequest request, OAuthAsyncRequestCallback<Response> callback) {
        return execute(request, callback, null);
    }","  public void test46()  throws Throwable  {
      Verb verb0 = Verb.DELETE;
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, ""com.github.scribejava.core.httpclient.multipart.BodyPartPayload"", ""com.github.scribejava.core.httpclient.multipart.BodyPartPayload"", ""com.github.scribejava.core.httpclient.multipart.BodyPartPayload"", """", """", byteArrayOutputStream0, ""com.github.scribejava.core.httpclient.multipart.BodyPartPayload"", jDKHttpClientConfig0, (HttpClient) null);
      OAuthRequest oAuthRequest0 = new OAuthRequest(verb0, ""there were problems while writting to the debug stream"");
      oAuthRequest0.setPayload(""<;,k`+"");
      try { 
        oAuth20Service0.execute(oAuthRequest0);
        fail(""Expecting exception: MalformedURLException"");
      } catch(MalformedURLException e) {
         //
         // no protocol: there were problems while writting to the debug stream
         //
         verifyException(""java.net.URL"", e);
      }
  }"
369,"    public String getApiKey() {
        return apiKey;
    }","  public void test47()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient();
      Verb verb0 = Verb.POST;
      OAuthRequest oAuthRequest0 = new OAuthRequest(verb0, ""async obtaining request token from %s"");
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, """", (String) null, ""~\""k7\""%ImF5KunU4z|"", (String) null, ""com.github.scribejava.core.oauth.OAuthService"", pipedOutputStream0, ""com.github.scribejava.core.oauth.OAuthService"", jDKHttpClientConfig0, jDKHttpClient0);
      oAuthRequest0.setPayload("""");
      OAuthAsyncRequestCallback<Response> oAuthAsyncRequestCallback0 = (OAuthAsyncRequestCallback<Response>) mock(OAuthAsyncRequestCallback.class, new ViolatedAssumptionAnswer());
      OAuthRequest.ResponseConverter<Response> oAuthRequest_ResponseConverter0 = (OAuthRequest.ResponseConverter<Response>) mock(OAuthRequest.ResponseConverter.class, new ViolatedAssumptionAnswer());
      oAuth20Service0.execute(oAuthRequest0, oAuthAsyncRequestCallback0, oAuthRequest_ResponseConverter0);
}"
370,"    public String getCallback() {
        return callback;
    }","  public void test48()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient();
      Verb verb0 = Verb.POST;
      OAuthRequest oAuthRequest0 = new OAuthRequest(verb0, ""async obtaining request token from %s"");
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, """", (String) null, ""~\""k7\""%ImF5KunU4z|"", (String) null, ""com.github.scribejava.core.oauth.OAuthService"", pipedOutputStream0, ""com.github.scribejava.core.oauth.OAuthService"", jDKHttpClientConfig0, jDKHttpClient0);
      oAuthRequest0.setPayload("""");
      OAuthAsyncRequestCallback<Response> oAuthAsyncRequestCallback0 = (OAuthAsyncRequestCallback<Response>) mock(OAuthAsyncRequestCallback.class, new ViolatedAssumptionAnswer());
      OAuthRequest.ResponseConverter<Response> oAuthRequest_ResponseConverter0 = (OAuthRequest.ResponseConverter<Response>) mock(OAuthRequest.ResponseConverter.class, new ViolatedAssumptionAnswer());
      oAuth20Service0.execute(oAuthRequest0, oAuthAsyncRequestCallback0, oAuthRequest_ResponseConverter0);
}"
371,"    public Future<Response> execute(OAuthRequest request, OAuthAsyncRequestCallback<Response> callback) {
        return execute(request, callback, null);
    }","  public void test49()  throws Throwable  {
      Verb verb0 = Verb.DELETE;
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, """", """", """", """", """", byteArrayOutputStream0, """", jDKHttpClientConfig0, (HttpClient) null);
      OAuthRequest oAuthRequest0 = new OAuthRequest(verb0, """");
      MockFile mockFile0 = new MockFile("""", """");
      oAuthRequest0.setPayload((File) mockFile0);
      OAuthAsyncRequestCallback<Response> oAuthAsyncRequestCallback0 = (OAuthAsyncRequestCallback<Response>) mock(OAuthAsyncRequestCallback.class, new ViolatedAssumptionAnswer());
      OAuthRequest.ResponseConverter<Response> oAuthRequest_ResponseConverter0 = (OAuthRequest.ResponseConverter<Response>) mock(OAuthRequest.ResponseConverter.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        oAuth20Service0.execute(oAuthRequest0, oAuthAsyncRequestCallback0, oAuthRequest_ResponseConverter0);
        fail(""Expecting exception: UnsupportedOperationException"");
      } catch(UnsupportedOperationException e) {
         //
         // JDKHttpClient does not support File payload for the moment
         //
         verifyException(""com.github.scribejava.core.httpclient.jdk.JDKHttpClient"", e);
      }
  }"
372,"    public Future<Response> execute(OAuthRequest request, OAuthAsyncRequestCallback<Response> callback) {
        return execute(request, callback, null);
    }","  public void test50()  throws Throwable  {
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, ""=w"", ""jsvInIwtE"", ""u,w_vK|[SK"", ""jsvInIwtE"", ""jsvInIwtE"", (OutputStream) null, (String) null, jDKHttpClientConfig0, (HttpClient) null);
      Verb verb0 = Verb.DELETE;
      OAuthRequest oAuthRequest0 = new OAuthRequest(verb0, (String) null);
      OAuthAsyncRequestCallback<Response> oAuthAsyncRequestCallback0 = (OAuthAsyncRequestCallback<Response>) mock(OAuthAsyncRequestCallback.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        oAuth20Service0.execute(oAuthRequest0, oAuthAsyncRequestCallback0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Cannot append to null URL
         //
         verifyException(""com.github.scribejava.core.utils.Preconditions"", e);
      }
  }"
373,"    public void log(String message) {
        if (debugStream != null) {
            log(message, (Object[]) null);
        }
    }","  public void test51()  throws Throwable  {
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient();
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, ""~\""k7\""%ImF5KunU4z|"", ""~\""k7\""%ImF5KunU4z|"", ""~\""k7\""%ImF5KunU4z|"", ""~\""k7\""%ImF5KunU4z|"", ""~\""k7\""%ImF5KunU4z|"", pipedOutputStream0, ""~\""k7\""%ImF5KunU4z|"", jDKHttpClientConfig0, jDKHttpClient0);
      Object[] objectArray0 = new Object[4];
      // Undeclared exception!
      try { 
        oAuth20Service0.log(""~\""k7\""%ImF5KunU4z|"", objectArray0);
        fail(""Expecting exception: UnknownFormatConversionException"");
      } catch(UnknownFormatConversionException e) {
         //
         // Conversion = 'I'
         //
         verifyException(""java.util.Formatter$FormatSpecifier"", e);
      }
  }"
374,"    public String getApiKey() {
        return apiKey;
    }","  public void test52()  throws Throwable  {
      DefaultApi10a defaultApi10a0 = mock(DefaultApi10a.class, new ViolatedAssumptionAnswer());
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient();
      OAuth10aService oAuth10aService0 = new OAuth10aService(defaultApi10a0, (String) null, "", body='"", "", body='"", ""Eo?$"", pipedOutputStream0, """", jDKHttpClientConfig0, jDKHttpClient0);
      String string0 = oAuth10aService0.getApiKey();
}"
375,"    public String getCallback() {
        return callback;
    }","  public void test53()  throws Throwable  {
      DefaultApi10a defaultApi10a0 = mock(DefaultApi10a.class, new ViolatedAssumptionAnswer());
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient();
      OAuth10aService oAuth10aService0 = new OAuth10aService(defaultApi10a0, (String) null, "", body='"", "", body='"", ""Eo?$"", pipedOutputStream0, """", jDKHttpClientConfig0, jDKHttpClient0);
      String string0 = oAuth10aService0.getApiKey();
}"
376,"    public String getApiSecret() {
        return apiSecret;
    }","  public void test54()  throws Throwable  {
      DefaultApi10a defaultApi10a0 = mock(DefaultApi10a.class, new ViolatedAssumptionAnswer());
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient();
      OAuth10aService oAuth10aService0 = new OAuth10aService(defaultApi10a0, (String) null, "", body='"", "", body='"", ""Eo?$"", pipedOutputStream0, """", jDKHttpClientConfig0, jDKHttpClient0);
      String string0 = oAuth10aService0.getApiKey();
}"
377,"    public String getApiSecret() {
        return apiSecret;
    }","  public void test55()  throws Throwable  {
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient();
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, """", """", """", """", ""+)=8"", pipedOutputStream0, ""C^tt:r~%3:'n6"", jDKHttpClientConfig0, jDKHttpClient0);
      String string0 = oAuth20Service0.getCallback();
}"
378,"    public String getApiKey() {
        return apiKey;
    }","  public void test56()  throws Throwable  {
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient();
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, """", """", """", """", ""+)=8"", pipedOutputStream0, ""C^tt:r~%3:'n6"", jDKHttpClientConfig0, jDKHttpClient0);
      String string0 = oAuth20Service0.getCallback();
}"
379,"    public String getCallback() {
        return callback;
    }","  public void test57()  throws Throwable  {
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient();
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, """", """", """", """", ""+)=8"", pipedOutputStream0, ""C^tt:r~%3:'n6"", jDKHttpClientConfig0, jDKHttpClient0);
      String string0 = oAuth20Service0.getCallback();
}"
380,"    public String getCallback() {
        return callback;
    }","  public void test58()  throws Throwable  {
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      File file0 = MockFile.createTempFile(""atymnV0)i`I<"", (String) null, (File) null);
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0);
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient();
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, (String) null, (String) null, ""PV?r@[?&|&F_H"", ""atymnV0)i`I<"", ""HEADER"", bufferedOutputStream0, ""HEADER"", jDKHttpClientConfig0, jDKHttpClient0);
      String string0 = oAuth20Service0.getApiSecret();
}"
381,"    public String getApiSecret() {
        return apiSecret;
    }","  public void test59()  throws Throwable  {
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      File file0 = MockFile.createTempFile(""atymnV0)i`I<"", (String) null, (File) null);
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0);
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient();
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, (String) null, (String) null, ""PV?r@[?&|&F_H"", ""atymnV0)i`I<"", ""HEADER"", bufferedOutputStream0, ""HEADER"", jDKHttpClientConfig0, jDKHttpClient0);
      String string0 = oAuth20Service0.getApiSecret();
}"
382,"    public String getApiKey() {
        return apiKey;
    }","  public void test60()  throws Throwable  {
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, ""$!Jc$T9F`vh\""=p\""sT"", ""B;t"", ""n)h;8}_"", ""$!Jc$T9F`vh\""=p\""sT"", ""$!Jc$T9F`vh\""=p\""sT"", (OutputStream) null, ""B;t"", jDKHttpClientConfig0, jDKHttpClient0);
      oAuth20Service0.log(""B;t"");
}"
383,"    public String getCallback() {
        return callback;
    }","  public void test61()  throws Throwable  {
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, ""$!Jc$T9F`vh\""=p\""sT"", ""B;t"", ""n)h;8}_"", ""$!Jc$T9F`vh\""=p\""sT"", ""$!Jc$T9F`vh\""=p\""sT"", (OutputStream) null, ""B;t"", jDKHttpClientConfig0, jDKHttpClient0);
      oAuth20Service0.log(""B;t"");
}"
384,"    public String getApiSecret() {
        return apiSecret;
    }","  public void test62()  throws Throwable  {
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, ""$!Jc$T9F`vh\""=p\""sT"", ""B;t"", ""n)h;8}_"", ""$!Jc$T9F`vh\""=p\""sT"", ""$!Jc$T9F`vh\""=p\""sT"", (OutputStream) null, ""B;t"", jDKHttpClientConfig0, jDKHttpClient0);
      oAuth20Service0.log(""B;t"");
}"
385,"    public Future<Response> execute(OAuthRequest request, OAuthAsyncRequestCallback<Response> callback) {
        return execute(request, callback, null);
    }","  public void test63()  throws Throwable  {
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, ""oG4E]Y"", ""oG4E]Y"", ""oG4E]Y"", ""oG4E]Y"", ""oG4E]Y"", pipedOutputStream0, ""oG4E]Y"", jDKHttpClientConfig0, jDKHttpClient0);
      Verb verb0 = Verb.TRACE;
      OAuthRequest oAuthRequest0 = new OAuthRequest(verb0, ""oG4E]Y"");
      oAuthRequest0.initMultipartPayload();
      try { 
        oAuth20Service0.execute(oAuthRequest0);
        fail(""Expecting exception: MalformedURLException"");
      } catch(MalformedURLException e) {
         //
         // no protocol: oG4E]Y
         //
         verifyException(""java.net.URL"", e);
      }
  }"
386,"    public Future<Response> execute(OAuthRequest request, OAuthAsyncRequestCallback<Response> callback) {
        return execute(request, callback, null);
    }","  public void test64()  throws Throwable  {
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, ""4YAmQkN0"", ""4YAmQkN0"", ""4YAmQkN0"", ""4YAmQkN0"", ""4YAmQkN0"", pipedOutputStream0, ""4YAmQkN0"", jDKHttpClientConfig0, jDKHttpClient0);
      Verb verb0 = Verb.TRACE;
      OAuthRequest oAuthRequest0 = new OAuthRequest(verb0, ""4YAmQkN0"");
      MockFile mockFile0 = new MockFile(""4YAmQkN0"");
      oAuthRequest0.setPayload((File) mockFile0);
      // Undeclared exception!
      try { 
        oAuth20Service0.execute(oAuthRequest0);
        fail(""Expecting exception: UnsupportedOperationException"");
      } catch(UnsupportedOperationException e) {
         //
         // JDKHttpClient does not support File payload for the moment
         //
         verifyException(""com.github.scribejava.core.httpclient.jdk.JDKHttpClient"", e);
      }
  }"
387,"    public Future<Response> executeAsync(OAuthRequest request) {
        return execute(request, null);
    }","  public void test65()  throws Throwable  {
      Verb verb0 = Verb.OPTIONS;
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, ""l"", ""l"", ""l"", ""l"", ""l"", byteArrayOutputStream0, ""l"", jDKHttpClientConfig0, (HttpClient) null);
      OAuthRequest oAuthRequest0 = new OAuthRequest(verb0, ""l"");
      oAuthRequest0.setPayload(""l"");
      Future<Response> future0 = oAuth20Service0.executeAsync(oAuthRequest0);
}"
388,"    public Future<Response> executeAsync(OAuthRequest request) {
        return execute(request, null);
    }","  public void test66()  throws Throwable  {
      Verb verb0 = Verb.PUT;
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, """", """", """", """", """", byteArrayOutputStream0, """", jDKHttpClientConfig0, (HttpClient) null);
      OAuthRequest oAuthRequest0 = new OAuthRequest(verb0, """");
      MockFile mockFile0 = new MockFile("""");
      oAuthRequest0.setPayload((File) mockFile0);
      // Undeclared exception!
      try { 
        oAuth20Service0.executeAsync(oAuthRequest0);
        fail(""Expecting exception: UnsupportedOperationException"");
      } catch(UnsupportedOperationException e) {
         //
         // JDKHttpClient does not support File payload for the moment
         //
         verifyException(""com.github.scribejava.core.httpclient.jdk.JDKHttpClient"", e);
      }
  }"
389,"    public void log(String message) {
        if (debugStream != null) {
            log(message, (Object[]) null);
        }
    }","  public void test67()  throws Throwable  {
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      MockFile mockFile0 = new MockFile(""jDl8=(>$E["");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, ""jDl8=(>$E["", ""XEQcaG"", (String) null, (String) null, ""jDl8=(>$E["", mockPrintStream0, ""jDl8=(>$E["", (HttpClientConfig) null, (HttpClient) null);
      Object[] objectArray0 = new Object[5];
      // Undeclared exception!
      try { 
        oAuth20Service0.log((String) null, objectArray0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
390,"    public String getApiSecret() {
        return apiSecret;
    }","  public void test68()  throws Throwable  {
      DefaultApi10a defaultApi10a0 = mock(DefaultApi10a.class, new ViolatedAssumptionAnswer());
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuth10aService oAuth10aService0 = new OAuth10aService(defaultApi10a0, ""7MTeE%^e>"", ""7MTeE%^e>"", ""7MTeE%^e>"", ""7MTeE%^e>"", pipedOutputStream0, ""7MTeE%^e>"", jDKHttpClientConfig0, jDKHttpClient0);
      oAuth10aService0.close();
}"
391,,"  public void test69()  throws Throwable  {
      Verb verb0 = Verb.OPTIONS;
      ClientAuthentication clientAuthentication0 = mock(ClientAuthentication.class, new ViolatedAssumptionAnswer());
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(defaultApi20_0).getAccessTokenEndpoint();
      doReturn(verb0).when(defaultApi20_0).getAccessTokenVerb();
      doReturn(clientAuthentication0).when(defaultApi20_0).getClientAuthentication();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(""S3&B7 +QfSZ#lE"");
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient();
      OAuth20Service oAuth20Service0 = new OAuth20Service(defaultApi20_0, (String) null, (String) null, (String) null, (String) null, (String) null, mockFileOutputStream0, (String) null, (HttpClientConfig) null, jDKHttpClient0);
      // Undeclared exception!
      try { 
        oAuth20Service0.getAccessToken((String) null);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // Malformed URL
         //
         verifyException(""com.github.scribejava.core.model.OAuthRequest"", e);
      }
  }"
392,"    public void log(String message) {
        if (debugStream != null) {
            log(message, (Object[]) null);
        }
    }","  public void test70()  throws Throwable  {
      DefaultApi10a defaultApi10a0 = mock(DefaultApi10a.class, new ViolatedAssumptionAnswer());
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      OAuth10aService oAuth10aService0 = new OAuth10aService(defaultApi10a0, ""7MTeE%^e>"", ""7MTeE%^e>"", ""7MTeE%^e>"", ""7MTeE%^e>"", pipedOutputStream0, ""7MTeE%^e>"", jDKHttpClientConfig0, jDKHttpClient0);
      // Undeclared exception!
      try { 
        oAuth10aService0.log(""7MTeE%^e>"");
        fail(""Expecting exception: UnknownFormatConversionException"");
      } catch(UnknownFormatConversionException e) {
         //
         // Conversion = '^'
         //
         verifyException(""java.util.Formatter"", e);
      }
  }"
393,"    public String getCodeVerifier() {
        return codeVerifier;
    }","  public void test0()  throws Throwable  {
      PKCE pKCE0 = new PKCE();
      pKCE0.setCodeVerifier(""com.github.scribejava.core.pkce.PKCE"");
      String string0 = pKCE0.getCodeVerifier();
}"
394,"    public String getCodeVerifier() {
        return codeVerifier;
    }","  public void test1()  throws Throwable  {
      PKCE pKCE0 = new PKCE();
      pKCE0.setCodeVerifier("""");
      String string0 = pKCE0.getCodeVerifier();
}"
395,"    public PKCECodeChallengeMethod getCodeChallengeMethod() {
        return codeChallengeMethod;
    }","  public void test2()  throws Throwable  {
      PKCE pKCE0 = new PKCE();
      pKCE0.setCodeChallengeMethod((PKCECodeChallengeMethod) null);
      pKCE0.getCodeChallengeMethod();
  }"
396,"    public String getCodeChallenge() {
        return codeChallenge;
    }","  public void test3()  throws Throwable  {
      PKCE pKCE0 = new PKCE();
      pKCE0.setCodeChallenge("""");
      String string0 = pKCE0.getCodeChallenge();
}"
397,"    public Map<String, String> getAuthorizationUrlParams() {
        final Map<String, String> params = new HashMap<>();
        params.put(PKCE_CODE_CHALLENGE_PARAM, codeChallenge);
        params.put(PKCE_CODE_CHALLENGE_METHOD_PARAM, codeChallengeMethod.name());
        return params;
    }","  public void test4()  throws Throwable  {
      PKCE pKCE0 = new PKCE();
      pKCE0.setCodeChallengeMethod((PKCECodeChallengeMethod) null);
      // Undeclared exception!
      try { 
        pKCE0.getAuthorizationUrlParams();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""com.github.scribejava.core.pkce.PKCE"", e);
      }
  }"
398,"    public String getCodeChallenge() {
        return codeChallenge;
    }","  public void test5()  throws Throwable  {
      PKCE pKCE0 = new PKCE();
      String string0 = pKCE0.getCodeChallenge();
}"
399,"    public String getCodeChallenge() {
        return codeChallenge;
    }","  public void test6()  throws Throwable  {
      PKCE pKCE0 = new PKCE();
      pKCE0.setCodeChallenge(""code_challenge"");
      String string0 = pKCE0.getCodeChallenge();
}"
400,"    public PKCECodeChallengeMethod getCodeChallengeMethod() {
        return codeChallengeMethod;
    }","  public void test7()  throws Throwable  {
      PKCE pKCE0 = new PKCE();
      pKCE0.getCodeChallengeMethod();
  }"
401,"    public String getCodeVerifier() {
        return codeVerifier;
    }","  public void test8()  throws Throwable  {
      PKCE pKCE0 = new PKCE();
      String string0 = pKCE0.getCodeVerifier();
}"
402,"    public Map<String, String> getAuthorizationUrlParams() {
        final Map<String, String> params = new HashMap<>();
        params.put(PKCE_CODE_CHALLENGE_PARAM, codeChallenge);
        params.put(PKCE_CODE_CHALLENGE_METHOD_PARAM, codeChallengeMethod.name());
        return params;
    }","  public void test9()  throws Throwable  {
      PKCE pKCE0 = new PKCE();
      Map<String, String> map0 = pKCE0.getAuthorizationUrlParams();
}"
403,"    public PKCE generatePKCE() {
        final byte[] bytes = new byte[numberOFOctets];
        RANDOM.nextBytes(bytes);
        return generatePKCE(bytes);
    }","  public void test0()  throws Throwable  {
      PKCEService pKCEService0 = new PKCEService(0);
      byte[] byteArray0 = new byte[4];
      Base64 base64_0 = mock(Base64.class, new ViolatedAssumptionAnswer());
      Base64.init(base64_0);
      // Undeclared exception!
      try { 
        pKCEService0.generatePKCE(byteArray0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""com.github.scribejava.core.pkce.PKCECodeChallengeMethod$1"", e);
      }
  }"
404,"    public PKCE generatePKCE() {
        final byte[] bytes = new byte[numberOFOctets];
        RANDOM.nextBytes(bytes);
        return generatePKCE(bytes);
    }","  public void test1()  throws Throwable  {
      PKCEService pKCEService0 = PKCEService.defaultInstance();
      Base64 base64_0 = mock(Base64.class, new ViolatedAssumptionAnswer());
      Base64.init(base64_0);
      // Undeclared exception!
      try { 
        pKCEService0.generatePKCE();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""com.github.scribejava.core.pkce.PKCECodeChallengeMethod$1"", e);
      }
  }"
405,"    public PKCE generatePKCE() {
        final byte[] bytes = new byte[numberOFOctets];
        RANDOM.nextBytes(bytes);
        return generatePKCE(bytes);
    }","  public void test2()  throws Throwable  {
      PKCEService pKCEService0 = new PKCEService((-2668));
      // Undeclared exception!
      try { 
        pKCEService0.generatePKCE();
        fail(""Expecting exception: NegativeArraySizeException"");
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""com.github.scribejava.core.pkce.PKCEService"", e);
      }
  }"
406,"    public PKCE generatePKCE() {
        final byte[] bytes = new byte[numberOFOctets];
        RANDOM.nextBytes(bytes);
        return generatePKCE(bytes);
    }","  public void test3()  throws Throwable  {
      PKCEService pKCEService0 = new PKCEService((-2668));
      byte[] byteArray0 = new byte[3];
      PKCE pKCE0 = pKCEService0.generatePKCE(byteArray0);
}"
407,"    public PKCEService(int numberOFOctets) {
        this.numberOFOctets = numberOFOctets;
    }","  public void test4()  throws Throwable  {
      PKCEService pKCEService0 = new PKCEService();
  }"
408,"    public PKCE generatePKCE() {
        final byte[] bytes = new byte[numberOFOctets];
        RANDOM.nextBytes(bytes);
        return generatePKCE(bytes);
    }","  public void test5()  throws Throwable  {
      PKCEService pKCEService0 = PKCEService.defaultInstance();
      PKCE pKCE0 = pKCEService0.generatePKCE();
}"
409,"    public OAuthSignatureException(String stringToSign, Exception e) {
        super(String.format(MSG, stringToSign), e);
    }","  public void test0()  throws Throwable  {
      MockException mockException0 = new MockException();
      OAuthSignatureException oAuthSignatureException0 = new OAuthSignatureException("""", mockException0);
  }"
410,"    public OAuthParametersMissingException(OAuthRequest request) {
        super(String.format(MSG, request));
    }","  public void test0()  throws Throwable  {
      OAuthParametersMissingException oAuthParametersMissingException0 = new OAuthParametersMissingException((OAuthRequest) null);
  }"
411,"    public OAuthException(String message, Exception e) {
        super(message, e);
    }","  public void test0()  throws Throwable  {
      OAuthException oAuthException0 = new OAuthException(""-EC[eGCcGI(4D&P[R%z"");
      OAuthException oAuthException1 = new OAuthException(oAuthException0);
}"
412,"    public OAuthException(String message, Exception e) {
        super(message, e);
    }","  public void test1()  throws Throwable  {
      OAuthException oAuthException0 = new OAuthException(""-EC[eGCcGI(4D&P[R%z"");
      MockException mockException0 = new MockException(oAuthException0);
      OAuthException oAuthException1 = new OAuthException("""", mockException0);
}"
413,"    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (obj == null) {
            return false;
        }
        if (getClass() != obj.getClass()) {
            return false;
        }
        final OAuth1AccessToken other = (OAuth1AccessToken) obj;
        if (!Objects.equals(getToken(), other.getToken())) {
            return false;
        }
        return Objects.equals(getTokenSecret(), other.getTokenSecret());
    }","  public void test0()  throws Throwable  {
      OAuth1AccessToken oAuth1AccessToken0 = new OAuth1AccessToken(""]:!p7o.'@-Dj{< IH"", ""]:!p7o.'@-Dj{< IH"");
      boolean boolean0 = oAuth1AccessToken0.equals(oAuth1AccessToken0);
}"
414,"    public String getTokenSecret() {
        return super.getTokenSecret();
    }","  public void test1()  throws Throwable  {
      OAuth1AccessToken oAuth1AccessToken0 = new OAuth1AccessToken(""Wz)X+&\"":q)9e7*lu-?"", """", """");
      String string0 = oAuth1AccessToken0.getTokenSecret();
}"
415,"    public String getToken() {
        return super.getToken();
    }","  public void test2()  throws Throwable  {
      OAuth1AccessToken oAuth1AccessToken0 = new OAuth1AccessToken(""kS%h*_G"", ""kS%h*_G"", """");
      String string0 = oAuth1AccessToken0.getToken();
}"
416,"    public OAuth1AccessToken(String token, String tokenSecret) {
        this(token, tokenSecret, null);
    }","  public void test3()  throws Throwable  {
      OAuth1AccessToken oAuth1AccessToken0 = null;
      try {
        oAuth1AccessToken0 = new OAuth1AccessToken((String) null, ""vlGzbb6\""Vl_X"", ""vlGzbb6\""Vl_X"");
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // oauth_token can't be null
         //
         verifyException(""com.github.scribejava.core.utils.Preconditions"", e);
      }
  }"
417,"    public OAuth1AccessToken(String token, String tokenSecret) {
        this(token, tokenSecret, null);
    }","  public void test4()  throws Throwable  {
      OAuth1AccessToken oAuth1AccessToken0 = null;
      try {
        oAuth1AccessToken0 = new OAuth1AccessToken((String) null, """");
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // oauth_token can't be null
         //
         verifyException(""com.github.scribejava.core.utils.Preconditions"", e);
      }
  }"
418,"    public String getToken() {
        return super.getToken();
    }","  public void test5()  throws Throwable  {
      OAuth1AccessToken oAuth1AccessToken0 = new OAuth1AccessToken("""", """", """");
      String string0 = oAuth1AccessToken0.getToken();
}"
419,"    public String getTokenSecret() {
        return super.getTokenSecret();
    }","  public void test6()  throws Throwable  {
      OAuth1AccessToken oAuth1AccessToken0 = new OAuth1AccessToken(""W {fQH|kx9RJ,"", ""]f9]fWKnK26i"", ""W {fQH|kx9RJ,"");
      String string0 = oAuth1AccessToken0.getTokenSecret();
}"
420,"    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (obj == null) {
            return false;
        }
        if (getClass() != obj.getClass()) {
            return false;
        }
        final OAuth1AccessToken other = (OAuth1AccessToken) obj;
        if (!Objects.equals(getToken(), other.getToken())) {
            return false;
        }
        return Objects.equals(getTokenSecret(), other.getTokenSecret());
    }","  public void test7()  throws Throwable  {
      OAuth1AccessToken oAuth1AccessToken0 = new OAuth1AccessToken(""nmV)!dmJge7Cu|)a"", ""nmV)!dmJge7Cu|)a"");
      OAuth1AccessToken oAuth1AccessToken1 = new OAuth1AccessToken(""Tis tnken object was not constructed by ScribeJava and dos2not hav a rwRsp{nse"", ""nmV)!dmJge7Cu|)a"");
      boolean boolean0 = oAuth1AccessToken0.equals(oAuth1AccessToken1);
}"
421,"    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (obj == null) {
            return false;
        }
        if (getClass() != obj.getClass()) {
            return false;
        }
        final OAuth1AccessToken other = (OAuth1AccessToken) obj;
        if (!Objects.equals(getToken(), other.getToken())) {
            return false;
        }
        return Objects.equals(getTokenSecret(), other.getTokenSecret());
    }","  public void test8()  throws Throwable  {
      OAuth1AccessToken oAuth1AccessToken0 = new OAuth1AccessToken(""nmV)!dmJge7Cu|)a"", ""nmV)!dmJge7Cu|)a"");
      boolean boolean0 = oAuth1AccessToken0.equals((Object) null);
}"
422,"    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (obj == null) {
            return false;
        }
        if (getClass() != obj.getClass()) {
            return false;
        }
        final OAuth1AccessToken other = (OAuth1AccessToken) obj;
        if (!Objects.equals(getToken(), other.getToken())) {
            return false;
        }
        return Objects.equals(getTokenSecret(), other.getTokenSecret());
    }","  public void test9()  throws Throwable  {
      OAuth1AccessToken oAuth1AccessToken0 = new OAuth1AccessToken(""nmV)!dmJge7Cu|)a"", ""nmV)!dmJge7Cu|)a"");
      boolean boolean0 = oAuth1AccessToken0.equals(""Tis tnken object was not constructed by ScribeJava and dos2not hav a rwRsp{nse"");
}"
423,"    public int hashCode() {
        int hash = 3;
        hash = 73 * hash + Objects.hashCode(getToken());
        hash = 73 * hash + Objects.hashCode(getTokenSecret());
        return hash;
    }","  public void test10()  throws Throwable  {
      OAuth1AccessToken oAuth1AccessToken0 = new OAuth1AccessToken(""nmV)!dmJge7Cu|)a"", ""nmV)!dmJge7Cu|)a"");
      oAuth1AccessToken0.hashCode();
  }"
424,"    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (obj == null) {
            return false;
        }
        if (getClass() != obj.getClass()) {
            return false;
        }
        final OAuth1AccessToken other = (OAuth1AccessToken) obj;
        if (!Objects.equals(getToken(), other.getToken())) {
            return false;
        }
        return Objects.equals(getTokenSecret(), other.getTokenSecret());
    }","  public void test11()  throws Throwable  {
      OAuth1AccessToken oAuth1AccessToken0 = new OAuth1AccessToken(""]:!p7o.'@-Dj{< IH"", ""]:!p7o.'@-Dj{< IH"");
      OAuth1AccessToken oAuth1AccessToken1 = new OAuth1AccessToken(""]:!p7o.'@-Dj{< IH"", ""]:!p7o.'@-Dj{< IH"");
      boolean boolean0 = oAuth1AccessToken0.equals(oAuth1AccessToken1);
}"
425,"    public String getState() {
        return state;
    }","  public void test0()  throws Throwable  {
      OAuth2Authorization oAuth2Authorization0 = new OAuth2Authorization();
      oAuth2Authorization0.setState(""*le\""pB}3}VUZ{T"");
      String string0 = oAuth2Authorization0.getState();
}"
426,"    public String getState() {
        return state;
    }","  public void test1()  throws Throwable  {
      OAuth2Authorization oAuth2Authorization0 = new OAuth2Authorization();
      oAuth2Authorization0.setState("""");
      String string0 = oAuth2Authorization0.getState();
}"
427,"    public String getCode() {
        return code;
    }","  public void test2()  throws Throwable  {
      OAuth2Authorization oAuth2Authorization0 = new OAuth2Authorization();
      oAuth2Authorization0.setCode(""$:3>s"");
      String string0 = oAuth2Authorization0.getCode();
}"
428,"    public String getCode() {
        return code;
    }","  public void test3()  throws Throwable  {
      OAuth2Authorization oAuth2Authorization0 = new OAuth2Authorization();
      oAuth2Authorization0.setCode("""");
      String string0 = oAuth2Authorization0.getCode();
}"
429,"    public String getState() {
        return state;
    }","  public void test4()  throws Throwable  {
      OAuth2Authorization oAuth2Authorization0 = new OAuth2Authorization();
      String string0 = oAuth2Authorization0.getState();
}"
430,"    public String getCode() {
        return code;
    }","  public void test5()  throws Throwable  {
      OAuth2Authorization oAuth2Authorization0 = new OAuth2Authorization();
      String string0 = oAuth2Authorization0.getCode();
}"
431,"    public String getRefreshToken() {
        return refreshToken;
    }","  public void test0()  throws Throwable  {
      Integer integer0 = new Integer(1054);
      OAuth2AccessToken oAuth2AccessToken0 = new OAuth2AccessToken(""com.github.scribejava.core.model.OAuth2AccessToken"", """", integer0, ""com.github.scribejava.core.model.OAuth2AccessToken"", """", ""com.github.scribejava.core.model.OAuth2AccessToken"");
      oAuth2AccessToken0.hashCode();
}"
432,"    public String getAccessToken() {
        return accessToken;
    }","  public void test1()  throws Throwable  {
      Integer integer0 = new Integer(1054);
      OAuth2AccessToken oAuth2AccessToken0 = new OAuth2AccessToken(""com.github.scribejava.core.model.OAuth2AccessToken"", """", integer0, ""com.github.scribejava.core.model.OAuth2AccessToken"", """", ""com.github.scribejava.core.model.OAuth2AccessToken"");
      oAuth2AccessToken0.hashCode();
}"
433,"    public String getTokenType() {
        return tokenType;
    }","  public void test2()  throws Throwable  {
      Integer integer0 = new Integer(1054);
      OAuth2AccessToken oAuth2AccessToken0 = new OAuth2AccessToken(""com.github.scribejava.core.model.OAuth2AccessToken"", """", integer0, ""com.github.scribejava.core.model.OAuth2AccessToken"", """", ""com.github.scribejava.core.model.OAuth2AccessToken"");
      oAuth2AccessToken0.hashCode();
}"
434,"    public String getScope() {
        return scope;
    }","  public void test3()  throws Throwable  {
      Integer integer0 = new Integer(1054);
      OAuth2AccessToken oAuth2AccessToken0 = new OAuth2AccessToken(""com.github.scribejava.core.model.OAuth2AccessToken"", """", integer0, ""com.github.scribejava.core.model.OAuth2AccessToken"", """", ""com.github.scribejava.core.model.OAuth2AccessToken"");
      oAuth2AccessToken0.hashCode();
}"
435,"    public String getAccessToken() {
        return accessToken;
    }","  public void test4()  throws Throwable  {
      Integer integer0 = new Integer(0);
      OAuth2AccessToken oAuth2AccessToken0 = new OAuth2AccessToken("""", ""qUcqGyOm,DSxK{s;Z"", integer0, ""qUcqGyOm,DSxK{s;Z"", ""A'uA"", ""qUcqGyOm,DSxK{s;Z"");
      oAuth2AccessToken0.hashCode();
}"
436,"    public String getRefreshToken() {
        return refreshToken;
    }","  public void test5()  throws Throwable  {
      Integer integer0 = new Integer(0);
      OAuth2AccessToken oAuth2AccessToken0 = new OAuth2AccessToken("""", ""qUcqGyOm,DSxK{s;Z"", integer0, ""qUcqGyOm,DSxK{s;Z"", ""A'uA"", ""qUcqGyOm,DSxK{s;Z"");
      oAuth2AccessToken0.hashCode();
}"
437,"    public String getScope() {
        return scope;
    }","  public void test6()  throws Throwable  {
      Integer integer0 = new Integer(0);
      OAuth2AccessToken oAuth2AccessToken0 = new OAuth2AccessToken("""", ""qUcqGyOm,DSxK{s;Z"", integer0, ""qUcqGyOm,DSxK{s;Z"", ""A'uA"", ""qUcqGyOm,DSxK{s;Z"");
      oAuth2AccessToken0.hashCode();
}"
438,"    public String getTokenType() {
        return tokenType;
    }","  public void test7()  throws Throwable  {
      Integer integer0 = new Integer(0);
      OAuth2AccessToken oAuth2AccessToken0 = new OAuth2AccessToken("""", ""qUcqGyOm,DSxK{s;Z"", integer0, ""qUcqGyOm,DSxK{s;Z"", ""A'uA"", ""qUcqGyOm,DSxK{s;Z"");
      oAuth2AccessToken0.hashCode();
}"
439,"    public int hashCode() {
        int hash = 7;
        hash = 41 * hash + Objects.hashCode(accessToken);
        hash = 41 * hash + Objects.hashCode(tokenType);
        hash = 41 * hash + Objects.hashCode(expiresIn);
        hash = 41 * hash + Objects.hashCode(refreshToken);
        hash = 41 * hash + Objects.hashCode(scope);
        return hash;
    }","  public void test8()  throws Throwable  {
      OAuth2AccessToken oAuth2AccessToken0 = new OAuth2AccessToken(""access_token can't be null"", ""access_token can't be null"");
      oAuth2AccessToken0.hashCode();
  }"
440,"    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (obj == null) {
            return false;
        }
        if (getClass() != obj.getClass()) {
            return false;
        }
        final OAuth2AccessToken other = (OAuth2AccessToken) obj;
        if (!Objects.equals(accessToken, other.getAccessToken())) {
            return false;
        }
        if (!Objects.equals(tokenType, other.getTokenType())) {
            return false;
        }
        if (!Objects.equals(refreshToken, other.getRefreshToken())) {
            return false;
        }
        if (!Objects.equals(scope, other.getScope())) {
            return false;
        }
        return Objects.equals(expiresIn, other.getExpiresIn());
    }","  public void test9()  throws Throwable  {
      OAuth2AccessToken oAuth2AccessToken0 = new OAuth2AccessToken(""?r#9v"", ""?r#9v"");
      boolean boolean0 = oAuth2AccessToken0.equals(oAuth2AccessToken0);
}"
441,"    public String getTokenType() {
        return tokenType;
    }","  public void test10()  throws Throwable  {
      Integer integer0 = Integer.getInteger("",Q"", 95);
      OAuth2AccessToken oAuth2AccessToken0 = new OAuth2AccessToken("",Q"", "",Q"", integer0, "",Q"", "",Q"", "",Q"");
      String string0 = oAuth2AccessToken0.getTokenType();
}"
442,"    public String getScope() {
        return scope;
    }","  public void test11()  throws Throwable  {
      Integer integer0 = new Integer(1054);
      OAuth2AccessToken oAuth2AccessToken0 = new OAuth2AccessToken(""com.github.scribejava.core.model.OAuth2AccessToken"", """", integer0, ""com.github.scribejava.core.model.OAuth2AccessToken"", """", ""com.github.scribejava.core.model.OAuth2AccessToken"");
      String string0 = oAuth2AccessToken0.getTokenType();
}"
443,"    public String getTokenType() {
        return tokenType;
    }","  public void test12()  throws Throwable  {
      Integer integer0 = new Integer(1054);
      OAuth2AccessToken oAuth2AccessToken0 = new OAuth2AccessToken(""com.github.scribejava.core.model.OAuth2AccessToken"", """", integer0, ""com.github.scribejava.core.model.OAuth2AccessToken"", """", ""com.github.scribejava.core.model.OAuth2AccessToken"");
      String string0 = oAuth2AccessToken0.getTokenType();
}"
444,"    public String getRefreshToken() {
        return refreshToken;
    }","  public void test13()  throws Throwable  {
      Integer integer0 = new Integer(1054);
      OAuth2AccessToken oAuth2AccessToken0 = new OAuth2AccessToken(""com.github.scribejava.core.model.OAuth2AccessToken"", """", integer0, ""com.github.scribejava.core.model.OAuth2AccessToken"", """", ""com.github.scribejava.core.model.OAuth2AccessToken"");
      String string0 = oAuth2AccessToken0.getTokenType();
}"
445,"    public String getAccessToken() {
        return accessToken;
    }","  public void test14()  throws Throwable  {
      Integer integer0 = new Integer(1054);
      OAuth2AccessToken oAuth2AccessToken0 = new OAuth2AccessToken(""com.github.scribejava.core.model.OAuth2AccessToken"", """", integer0, ""com.github.scribejava.core.model.OAuth2AccessToken"", """", ""com.github.scribejava.core.model.OAuth2AccessToken"");
      String string0 = oAuth2AccessToken0.getTokenType();
}"
446,"    public String getScope() {
        return scope;
    }","  public void test15()  throws Throwable  {
      Integer integer0 = Integer.getInteger("",Q"", 95);
      OAuth2AccessToken oAuth2AccessToken0 = new OAuth2AccessToken("",Q"", "",Q"", integer0, "",Q"", "",Q"", "",Q"");
      String string0 = oAuth2AccessToken0.getScope();
}"
447,"    public String getTokenType() {
        return tokenType;
    }","  public void test16()  throws Throwable  {
      Integer integer0 = new Integer((-56));
      OAuth2AccessToken oAuth2AccessToken0 = new OAuth2AccessToken(""Hiy08UiE'aFei7"", ""s/"", integer0, ""1G.;],mO0?D"", """", ""T,hQLOit8S`"");
      String string0 = oAuth2AccessToken0.getScope();
}"
448,"    public String getRefreshToken() {
        return refreshToken;
    }","  public void test17()  throws Throwable  {
      Integer integer0 = new Integer((-56));
      OAuth2AccessToken oAuth2AccessToken0 = new OAuth2AccessToken(""Hiy08UiE'aFei7"", ""s/"", integer0, ""1G.;],mO0?D"", """", ""T,hQLOit8S`"");
      String string0 = oAuth2AccessToken0.getScope();
}"
449,"    public String getScope() {
        return scope;
    }","  public void test18()  throws Throwable  {
      Integer integer0 = new Integer((-56));
      OAuth2AccessToken oAuth2AccessToken0 = new OAuth2AccessToken(""Hiy08UiE'aFei7"", ""s/"", integer0, ""1G.;],mO0?D"", """", ""T,hQLOit8S`"");
      String string0 = oAuth2AccessToken0.getScope();
}"
450,"    public String getAccessToken() {
        return accessToken;
    }","  public void test19()  throws Throwable  {
      Integer integer0 = new Integer((-56));
      OAuth2AccessToken oAuth2AccessToken0 = new OAuth2AccessToken(""Hiy08UiE'aFei7"", ""s/"", integer0, ""1G.;],mO0?D"", """", ""T,hQLOit8S`"");
      String string0 = oAuth2AccessToken0.getScope();
}"
451,"    public String getRefreshToken() {
        return refreshToken;
    }","  public void test20()  throws Throwable  {
      OAuth2AccessToken oAuth2AccessToken0 = new OAuth2AccessToken(""access_token can't be null"", ""access_token can't be null"");
      String string0 = oAuth2AccessToken0.getRefreshToken();
}"
452,"    public String getTokenType() {
        return tokenType;
    }","  public void test21()  throws Throwable  {
      Integer integer0 = new Integer(0);
      OAuth2AccessToken oAuth2AccessToken0 = new OAuth2AccessToken(""uh|MZA$BwVw"", """", integer0, """", """", """");
      String string0 = oAuth2AccessToken0.getRefreshToken();
}"
453,"    public String getAccessToken() {
        return accessToken;
    }","  public void test22()  throws Throwable  {
      Integer integer0 = new Integer(0);
      OAuth2AccessToken oAuth2AccessToken0 = new OAuth2AccessToken(""uh|MZA$BwVw"", """", integer0, """", """", """");
      String string0 = oAuth2AccessToken0.getRefreshToken();
}"
454,"    public String getRefreshToken() {
        return refreshToken;
    }","  public void test23()  throws Throwable  {
      Integer integer0 = new Integer(0);
      OAuth2AccessToken oAuth2AccessToken0 = new OAuth2AccessToken(""uh|MZA$BwVw"", """", integer0, """", """", """");
      String string0 = oAuth2AccessToken0.getRefreshToken();
}"
455,"    public String getScope() {
        return scope;
    }","  public void test24()  throws Throwable  {
      Integer integer0 = new Integer(0);
      OAuth2AccessToken oAuth2AccessToken0 = new OAuth2AccessToken(""uh|MZA$BwVw"", """", integer0, """", """", """");
      String string0 = oAuth2AccessToken0.getRefreshToken();
}"
456,"    public Integer getExpiresIn() {
        return expiresIn;
    }","  public void test25()  throws Throwable  {
      OAuth2AccessToken oAuth2AccessToken0 = new OAuth2AccessToken(""access_token can't be null"", ""access_token can't be null"");
      Integer integer0 = oAuth2AccessToken0.getExpiresIn();
}"
457,"    public String getTokenType() {
        return tokenType;
    }","  public void test26()  throws Throwable  {
      Integer integer0 = new Integer(1054);
      OAuth2AccessToken oAuth2AccessToken0 = new OAuth2AccessToken(""com.github.scribejava.core.model.OAuth2AccessToken"", """", integer0, ""com.github.scribejava.core.model.OAuth2AccessToken"", """", ""com.github.scribejava.core.model.OAuth2AccessToken"");
      oAuth2AccessToken0.getExpiresIn();
}"
458,"    public String getRefreshToken() {
        return refreshToken;
    }","  public void test27()  throws Throwable  {
      Integer integer0 = new Integer(1054);
      OAuth2AccessToken oAuth2AccessToken0 = new OAuth2AccessToken(""com.github.scribejava.core.model.OAuth2AccessToken"", """", integer0, ""com.github.scribejava.core.model.OAuth2AccessToken"", """", ""com.github.scribejava.core.model.OAuth2AccessToken"");
      oAuth2AccessToken0.getExpiresIn();
}"
459,"    public String getAccessToken() {
        return accessToken;
    }","  public void test28()  throws Throwable  {
      Integer integer0 = new Integer(1054);
      OAuth2AccessToken oAuth2AccessToken0 = new OAuth2AccessToken(""com.github.scribejava.core.model.OAuth2AccessToken"", """", integer0, ""com.github.scribejava.core.model.OAuth2AccessToken"", """", ""com.github.scribejava.core.model.OAuth2AccessToken"");
      oAuth2AccessToken0.getExpiresIn();
}"
460,"    public String getScope() {
        return scope;
    }","  public void test29()  throws Throwable  {
      Integer integer0 = new Integer(1054);
      OAuth2AccessToken oAuth2AccessToken0 = new OAuth2AccessToken(""com.github.scribejava.core.model.OAuth2AccessToken"", """", integer0, ""com.github.scribejava.core.model.OAuth2AccessToken"", """", ""com.github.scribejava.core.model.OAuth2AccessToken"");
      oAuth2AccessToken0.getExpiresIn();
}"
461,"    public String getScope() {
        return scope;
    }","  public void test30()  throws Throwable  {
      Integer integer0 = new Integer((-793));
      OAuth2AccessToken oAuth2AccessToken0 = new OAuth2AccessToken("""", """", integer0, """", ""access_token can't be null"", """");
      oAuth2AccessToken0.getExpiresIn();
}"
462,"    public String getRefreshToken() {
        return refreshToken;
    }","  public void test31()  throws Throwable  {
      Integer integer0 = new Integer((-793));
      OAuth2AccessToken oAuth2AccessToken0 = new OAuth2AccessToken("""", """", integer0, """", ""access_token can't be null"", """");
      oAuth2AccessToken0.getExpiresIn();
}"
463,"    public String getAccessToken() {
        return accessToken;
    }","  public void test32()  throws Throwable  {
      Integer integer0 = new Integer((-793));
      OAuth2AccessToken oAuth2AccessToken0 = new OAuth2AccessToken("""", """", integer0, """", ""access_token can't be null"", """");
      oAuth2AccessToken0.getExpiresIn();
}"
464,"    public String getTokenType() {
        return tokenType;
    }","  public void test33()  throws Throwable  {
      Integer integer0 = new Integer((-793));
      OAuth2AccessToken oAuth2AccessToken0 = new OAuth2AccessToken("""", """", integer0, """", ""access_token can't be null"", """");
      oAuth2AccessToken0.getExpiresIn();
}"
465,"    public String getAccessToken() {
        return accessToken;
    }","  public void test34()  throws Throwable  {
      Integer integer0 = new Integer(0);
      OAuth2AccessToken oAuth2AccessToken0 = new OAuth2AccessToken("""", ""qUcqGyOm,DSxK{s;Z"", integer0, ""qUcqGyOm,DSxK{s;Z"", ""A'uA"", ""qUcqGyOm,DSxK{s;Z"");
      String string0 = oAuth2AccessToken0.getAccessToken();
}"
466,"    public String getRefreshToken() {
        return refreshToken;
    }","  public void test35()  throws Throwable  {
      Integer integer0 = new Integer(0);
      OAuth2AccessToken oAuth2AccessToken0 = new OAuth2AccessToken("""", ""qUcqGyOm,DSxK{s;Z"", integer0, ""qUcqGyOm,DSxK{s;Z"", ""A'uA"", ""qUcqGyOm,DSxK{s;Z"");
      String string0 = oAuth2AccessToken0.getAccessToken();
}"
467,"    public String getScope() {
        return scope;
    }","  public void test36()  throws Throwable  {
      Integer integer0 = new Integer(0);
      OAuth2AccessToken oAuth2AccessToken0 = new OAuth2AccessToken("""", ""qUcqGyOm,DSxK{s;Z"", integer0, ""qUcqGyOm,DSxK{s;Z"", ""A'uA"", ""qUcqGyOm,DSxK{s;Z"");
      String string0 = oAuth2AccessToken0.getAccessToken();
}"
468,"    public String getTokenType() {
        return tokenType;
    }","  public void test37()  throws Throwable  {
      Integer integer0 = new Integer(0);
      OAuth2AccessToken oAuth2AccessToken0 = new OAuth2AccessToken("""", ""qUcqGyOm,DSxK{s;Z"", integer0, ""qUcqGyOm,DSxK{s;Z"", ""A'uA"", ""qUcqGyOm,DSxK{s;Z"");
      String string0 = oAuth2AccessToken0.getAccessToken();
}"
469,"    public OAuth2AccessToken(String accessToken) {
        this(accessToken, null);
    }","  public void test38()  throws Throwable  {
      Integer integer0 = Integer.getInteger((String) null, (-446));
      OAuth2AccessToken oAuth2AccessToken0 = null;
      try {
        oAuth2AccessToken0 = new OAuth2AccessToken((String) null, (String) null, integer0, (String) null, ""6Rg/IF/g'9/'35R,v{"", (String) null);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // access_token can't be null
         //
         verifyException(""com.github.scribejava.core.utils.Preconditions"", e);
      }
  }"
470,"    public OAuth2AccessToken(String accessToken) {
        this(accessToken, null);
    }","  public void test39()  throws Throwable  {
      OAuth2AccessToken oAuth2AccessToken0 = null;
      try {
        oAuth2AccessToken0 = new OAuth2AccessToken((String) null, (String) null);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // access_token can't be null
         //
         verifyException(""com.github.scribejava.core.utils.Preconditions"", e);
      }
  }"
471,"    public OAuth2AccessToken(String accessToken) {
        this(accessToken, null);
    }","  public void test40()  throws Throwable  {
      OAuth2AccessToken oAuth2AccessToken0 = null;
      try {
        oAuth2AccessToken0 = new OAuth2AccessToken((String) null);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // access_token can't be null
         //
         verifyException(""com.github.scribejava.core.utils.Preconditions"", e);
      }
  }"
472,"    public String getTokenType() {
        return tokenType;
    }","  public void test41()  throws Throwable  {
      OAuth2AccessToken oAuth2AccessToken0 = new OAuth2AccessToken(""access_token can't be null"", ""access_token can't be null"");
      String string0 = oAuth2AccessToken0.getTokenType();
}"
473,"    public String getAccessToken() {
        return accessToken;
    }","  public void test42()  throws Throwable  {
      OAuth2AccessToken oAuth2AccessToken0 = new OAuth2AccessToken(""access_token can't be null"", ""access_token can't be null"");
      String string0 = oAuth2AccessToken0.getAccessToken();
}"
474,"    public String getScope() {
        return scope;
    }","  public void test43()  throws Throwable  {
      OAuth2AccessToken oAuth2AccessToken0 = new OAuth2AccessToken(""access_token can't be null"", ""access_token can't be null"");
      String string0 = oAuth2AccessToken0.getScope();
}"
475,"    public String getScope() {
        return scope;
    }","  public void test44()  throws Throwable  {
      Integer integer0 = new Integer(0);
      OAuth2AccessToken oAuth2AccessToken0 = new OAuth2AccessToken("""", ""qUcqGyOm,DSxK{s;Z"", integer0, ""qUcqGyOm,DSxK{s;Z"", ""A'uA"", ""qUcqGyOm,DSxK{s;Z"");
      String string0 = oAuth2AccessToken0.getRefreshToken();
}"
476,"    public String getAccessToken() {
        return accessToken;
    }","  public void test45()  throws Throwable  {
      Integer integer0 = new Integer(0);
      OAuth2AccessToken oAuth2AccessToken0 = new OAuth2AccessToken("""", ""qUcqGyOm,DSxK{s;Z"", integer0, ""qUcqGyOm,DSxK{s;Z"", ""A'uA"", ""qUcqGyOm,DSxK{s;Z"");
      String string0 = oAuth2AccessToken0.getRefreshToken();
}"
477,"    public String getRefreshToken() {
        return refreshToken;
    }","  public void test46()  throws Throwable  {
      Integer integer0 = new Integer(0);
      OAuth2AccessToken oAuth2AccessToken0 = new OAuth2AccessToken("""", ""qUcqGyOm,DSxK{s;Z"", integer0, ""qUcqGyOm,DSxK{s;Z"", ""A'uA"", ""qUcqGyOm,DSxK{s;Z"");
      String string0 = oAuth2AccessToken0.getRefreshToken();
}"
478,"    public String getTokenType() {
        return tokenType;
    }","  public void test47()  throws Throwable  {
      Integer integer0 = new Integer(0);
      OAuth2AccessToken oAuth2AccessToken0 = new OAuth2AccessToken("""", ""qUcqGyOm,DSxK{s;Z"", integer0, ""qUcqGyOm,DSxK{s;Z"", ""A'uA"", ""qUcqGyOm,DSxK{s;Z"");
      String string0 = oAuth2AccessToken0.getRefreshToken();
}"
479,"    public String getScope() {
        return scope;
    }","  public void test48()  throws Throwable  {
      Integer integer0 = new Integer(0);
      OAuth2AccessToken oAuth2AccessToken0 = new OAuth2AccessToken("""", ""qUcqGyOm,DSxK{s;Z"", integer0, ""qUcqGyOm,DSxK{s;Z"", ""A'uA"", ""qUcqGyOm,DSxK{s;Z"");
      oAuth2AccessToken0.getExpiresIn();
}"
480,"    public String getTokenType() {
        return tokenType;
    }","  public void test49()  throws Throwable  {
      Integer integer0 = new Integer(0);
      OAuth2AccessToken oAuth2AccessToken0 = new OAuth2AccessToken("""", ""qUcqGyOm,DSxK{s;Z"", integer0, ""qUcqGyOm,DSxK{s;Z"", ""A'uA"", ""qUcqGyOm,DSxK{s;Z"");
      oAuth2AccessToken0.getExpiresIn();
}"
481,"    public String getRefreshToken() {
        return refreshToken;
    }","  public void test50()  throws Throwable  {
      Integer integer0 = new Integer(0);
      OAuth2AccessToken oAuth2AccessToken0 = new OAuth2AccessToken("""", ""qUcqGyOm,DSxK{s;Z"", integer0, ""qUcqGyOm,DSxK{s;Z"", ""A'uA"", ""qUcqGyOm,DSxK{s;Z"");
      oAuth2AccessToken0.getExpiresIn();
}"
482,"    public String getAccessToken() {
        return accessToken;
    }","  public void test51()  throws Throwable  {
      Integer integer0 = new Integer(0);
      OAuth2AccessToken oAuth2AccessToken0 = new OAuth2AccessToken("""", ""qUcqGyOm,DSxK{s;Z"", integer0, ""qUcqGyOm,DSxK{s;Z"", ""A'uA"", ""qUcqGyOm,DSxK{s;Z"");
      oAuth2AccessToken0.getExpiresIn();
}"
483,"    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (obj == null) {
            return false;
        }
        if (getClass() != obj.getClass()) {
            return false;
        }
        final OAuth2AccessToken other = (OAuth2AccessToken) obj;
        if (!Objects.equals(accessToken, other.getAccessToken())) {
            return false;
        }
        if (!Objects.equals(tokenType, other.getTokenType())) {
            return false;
        }
        if (!Objects.equals(refreshToken, other.getRefreshToken())) {
            return false;
        }
        if (!Objects.equals(scope, other.getScope())) {
            return false;
        }
        return Objects.equals(expiresIn, other.getExpiresIn());
    }","  public void test52()  throws Throwable  {
      OAuth2AccessToken oAuth2AccessToken0 = new OAuth2AccessToken("""", """");
      Integer integer0 = new Integer((-3455));
      OAuth2AccessToken oAuth2AccessToken1 = new OAuth2AccessToken("""", (String) null, integer0, (String) null, """", """");
      boolean boolean0 = oAuth2AccessToken0.equals(oAuth2AccessToken1);
}"
484,"    public String getTokenType() {
        return tokenType;
    }","  public void test53()  throws Throwable  {
      OAuth2AccessToken oAuth2AccessToken0 = new OAuth2AccessToken(""g"", ""g"", (Integer) null, ""g"", ""g"", ""g"");
      OAuth2AccessToken oAuth2AccessToken1 = new OAuth2AccessToken(""g"", ""g"", (Integer) null, ""d@\""4I=*P-x3"", ""g"", ""g"");
      boolean boolean0 = oAuth2AccessToken0.equals(oAuth2AccessToken1);
}"
485,"    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (obj == null) {
            return false;
        }
        if (getClass() != obj.getClass()) {
            return false;
        }
        final OAuth2AccessToken other = (OAuth2AccessToken) obj;
        if (!Objects.equals(accessToken, other.getAccessToken())) {
            return false;
        }
        if (!Objects.equals(tokenType, other.getTokenType())) {
            return false;
        }
        if (!Objects.equals(refreshToken, other.getRefreshToken())) {
            return false;
        }
        if (!Objects.equals(scope, other.getScope())) {
            return false;
        }
        return Objects.equals(expiresIn, other.getExpiresIn());
    }","  public void test54()  throws Throwable  {
      OAuth2AccessToken oAuth2AccessToken0 = new OAuth2AccessToken(""g"", ""g"", (Integer) null, ""g"", ""g"", ""g"");
      OAuth2AccessToken oAuth2AccessToken1 = new OAuth2AccessToken(""g"", ""g"", (Integer) null, ""d@\""4I=*P-x3"", ""g"", ""g"");
      boolean boolean0 = oAuth2AccessToken0.equals(oAuth2AccessToken1);
}"
486,"    public String getScope() {
        return scope;
    }","  public void test55()  throws Throwable  {
      OAuth2AccessToken oAuth2AccessToken0 = new OAuth2AccessToken(""g"", ""g"", (Integer) null, ""g"", ""g"", ""g"");
      OAuth2AccessToken oAuth2AccessToken1 = new OAuth2AccessToken(""g"", ""g"", (Integer) null, ""d@\""4I=*P-x3"", ""g"", ""g"");
      boolean boolean0 = oAuth2AccessToken0.equals(oAuth2AccessToken1);
}"
487,"    public String getAccessToken() {
        return accessToken;
    }","  public void test56()  throws Throwable  {
      OAuth2AccessToken oAuth2AccessToken0 = new OAuth2AccessToken(""g"", ""g"", (Integer) null, ""g"", ""g"", ""g"");
      OAuth2AccessToken oAuth2AccessToken1 = new OAuth2AccessToken(""g"", ""g"", (Integer) null, ""d@\""4I=*P-x3"", ""g"", ""g"");
      boolean boolean0 = oAuth2AccessToken0.equals(oAuth2AccessToken1);
}"
488,"    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (obj == null) {
            return false;
        }
        if (getClass() != obj.getClass()) {
            return false;
        }
        final OAuth2AccessToken other = (OAuth2AccessToken) obj;
        if (!Objects.equals(accessToken, other.getAccessToken())) {
            return false;
        }
        if (!Objects.equals(tokenType, other.getTokenType())) {
            return false;
        }
        if (!Objects.equals(refreshToken, other.getRefreshToken())) {
            return false;
        }
        if (!Objects.equals(scope, other.getScope())) {
            return false;
        }
        return Objects.equals(expiresIn, other.getExpiresIn());
    }","  public void test57()  throws Throwable  {
      OAuth2AccessToken oAuth2AccessToken0 = new OAuth2AccessToken(""kTJXS^"", ""kTJXS^"");
      OAuth2AccessToken oAuth2AccessToken1 = new OAuth2AccessToken("")-Mgrwq.\n"");
      boolean boolean0 = oAuth2AccessToken1.equals(oAuth2AccessToken0);
}"
489,"    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (obj == null) {
            return false;
        }
        if (getClass() != obj.getClass()) {
            return false;
        }
        final OAuth2AccessToken other = (OAuth2AccessToken) obj;
        if (!Objects.equals(accessToken, other.getAccessToken())) {
            return false;
        }
        if (!Objects.equals(tokenType, other.getTokenType())) {
            return false;
        }
        if (!Objects.equals(refreshToken, other.getRefreshToken())) {
            return false;
        }
        if (!Objects.equals(scope, other.getScope())) {
            return false;
        }
        return Objects.equals(expiresIn, other.getExpiresIn());
    }","  public void test58()  throws Throwable  {
      OAuth2AccessToken oAuth2AccessToken0 = new OAuth2AccessToken(""?r#9v"", ""?r#9v"");
      boolean boolean0 = oAuth2AccessToken0.equals(""?r#9v"");
}"
490,"    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (obj == null) {
            return false;
        }
        if (getClass() != obj.getClass()) {
            return false;
        }
        final OAuth2AccessToken other = (OAuth2AccessToken) obj;
        if (!Objects.equals(accessToken, other.getAccessToken())) {
            return false;
        }
        if (!Objects.equals(tokenType, other.getTokenType())) {
            return false;
        }
        if (!Objects.equals(refreshToken, other.getRefreshToken())) {
            return false;
        }
        if (!Objects.equals(scope, other.getScope())) {
            return false;
        }
        return Objects.equals(expiresIn, other.getExpiresIn());
    }","  public void test59()  throws Throwable  {
      OAuth2AccessToken oAuth2AccessToken0 = new OAuth2AccessToken(""_>lZ[caAnm."");
      boolean boolean0 = oAuth2AccessToken0.equals((Object) null);
}"
491,"    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (obj == null) {
            return false;
        }
        if (getClass() != obj.getClass()) {
            return false;
        }
        final OAuth2AccessToken other = (OAuth2AccessToken) obj;
        if (!Objects.equals(accessToken, other.getAccessToken())) {
            return false;
        }
        if (!Objects.equals(tokenType, other.getTokenType())) {
            return false;
        }
        if (!Objects.equals(refreshToken, other.getRefreshToken())) {
            return false;
        }
        if (!Objects.equals(scope, other.getScope())) {
            return false;
        }
        return Objects.equals(expiresIn, other.getExpiresIn());
    }","  public void test60()  throws Throwable  {
      OAuth2AccessToken oAuth2AccessToken0 = new OAuth2AccessToken(""kTJXS^"", ""kTJXS^"");
      OAuth2AccessToken oAuth2AccessToken1 = new OAuth2AccessToken(""kTJXS^"", "")-Mgrwq.\n"");
      boolean boolean0 = oAuth2AccessToken0.equals(oAuth2AccessToken1);
}"
492,"    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (obj == null) {
            return false;
        }
        if (getClass() != obj.getClass()) {
            return false;
        }
        final OAuth2AccessToken other = (OAuth2AccessToken) obj;
        if (!Objects.equals(accessToken, other.getAccessToken())) {
            return false;
        }
        if (!Objects.equals(tokenType, other.getTokenType())) {
            return false;
        }
        if (!Objects.equals(refreshToken, other.getRefreshToken())) {
            return false;
        }
        if (!Objects.equals(scope, other.getScope())) {
            return false;
        }
        return Objects.equals(expiresIn, other.getExpiresIn());
    }","  public void test61()  throws Throwable  {
      OAuth2AccessToken oAuth2AccessToken0 = new OAuth2AccessToken(""This token object was not constructed by ScribeJava and does not have a rawResponse"", ""This token object was not constructed by ScribeJava and does not have a rawResponse"", (Integer) null, ""This token object was not constructed by ScribeJava and does not have a rawResponse"", ""This token object was not constructed by ScribeJava and does not have a rawResponse"", ""This token object was not constructed by ScribeJava and does not have a rawResponse"");
      OAuth2AccessToken oAuth2AccessToken1 = new OAuth2AccessToken(""This token object was not constructed by ScribeJava and does not have a rawResponse"");
      boolean boolean0 = oAuth2AccessToken0.equals(oAuth2AccessToken1);
}"
493,"    public int getIntervalSeconds() {
        return intervalSeconds;
    }","  public void test0()  throws Throwable  {
      DeviceAuthorization deviceAuthorization0 = new DeviceAuthorization(""cix"", """", """", 4877);
      deviceAuthorization0.setVerificationUriComplete("""");
      deviceAuthorization0.getVerificationUriComplete();
}"
494,"    public String getDeviceCode() {
        return deviceCode;
    }","  public void test1()  throws Throwable  {
      DeviceAuthorization deviceAuthorization0 = new DeviceAuthorization(""cix"", """", """", 4877);
      deviceAuthorization0.setVerificationUriComplete("""");
      deviceAuthorization0.getVerificationUriComplete();
}"
495,"    public long getExpiresInSeconds() {
        return expiresInSeconds;
    }","  public void test2()  throws Throwable  {
      DeviceAuthorization deviceAuthorization0 = new DeviceAuthorization(""cix"", """", """", 4877);
      deviceAuthorization0.setVerificationUriComplete("""");
      deviceAuthorization0.getVerificationUriComplete();
}"
496,"    public String getUserCode() {
        return userCode;
    }","  public void test3()  throws Throwable  {
      DeviceAuthorization deviceAuthorization0 = new DeviceAuthorization(""cix"", """", """", 4877);
      deviceAuthorization0.setVerificationUriComplete("""");
      deviceAuthorization0.getVerificationUriComplete();
}"
497,"    public String getVerificationUri() {
        return verificationUri;
    }","  public void test4()  throws Throwable  {
      DeviceAuthorization deviceAuthorization0 = new DeviceAuthorization(""cix"", """", """", 4877);
      deviceAuthorization0.setVerificationUriComplete("""");
      deviceAuthorization0.getVerificationUriComplete();
}"
498,"    public String getVerificationUri() {
        return verificationUri;
    }","  public void test5()  throws Throwable  {
      DeviceAuthorization deviceAuthorization0 = new DeviceAuthorization(""com.github.scribejava.core.model.DeviceAuthorization"", ""com.github.scribejava.core.model.DeviceAuthorization"", (String) null, 0);
      String string0 = deviceAuthorization0.getVerificationUri();
}"
499,"    public int getIntervalSeconds() {
        return intervalSeconds;
    }","  public void test6()  throws Throwable  {
      DeviceAuthorization deviceAuthorization0 = new DeviceAuthorization(""com.github.scribejava.core.model.DeviceAuthorization"", ""com.github.scribejava.core.model.DeviceAuthorization"", (String) null, 0);
      String string0 = deviceAuthorization0.getVerificationUri();
}"
500,"    public long getExpiresInSeconds() {
        return expiresInSeconds;
    }","  public void test7()  throws Throwable  {
      DeviceAuthorization deviceAuthorization0 = new DeviceAuthorization(""com.github.scribejava.core.model.DeviceAuthorization"", ""com.github.scribejava.core.model.DeviceAuthorization"", (String) null, 0);
      String string0 = deviceAuthorization0.getVerificationUri();
}"
501,"    public long getExpiresInSeconds() {
        return expiresInSeconds;
    }","  public void test8()  throws Throwable  {
      DeviceAuthorization deviceAuthorization0 = new DeviceAuthorization("""", """", """", 0);
      deviceAuthorization0.getVerificationUri();
}"
502,"    public int getIntervalSeconds() {
        return intervalSeconds;
    }","  public void test9()  throws Throwable  {
      DeviceAuthorization deviceAuthorization0 = new DeviceAuthorization("""", """", """", 0);
      deviceAuthorization0.getVerificationUri();
}"
503,"    public String getUserCode() {
        return userCode;
    }","  public void test10()  throws Throwable  {
      DeviceAuthorization deviceAuthorization0 = new DeviceAuthorization("""", (String) null, """", 201);
      String string0 = deviceAuthorization0.getUserCode();
}"
504,"    public int getIntervalSeconds() {
        return intervalSeconds;
    }","  public void test11()  throws Throwable  {
      DeviceAuthorization deviceAuthorization0 = new DeviceAuthorization("""", (String) null, """", 201);
      String string0 = deviceAuthorization0.getUserCode();
}"
505,"    public long getExpiresInSeconds() {
        return expiresInSeconds;
    }","  public void test12()  throws Throwable  {
      DeviceAuthorization deviceAuthorization0 = new DeviceAuthorization("""", (String) null, """", 201);
      String string0 = deviceAuthorization0.getUserCode();
}"
506,"    public int getIntervalSeconds() {
        return intervalSeconds;
    }","  public void test13()  throws Throwable  {
      DeviceAuthorization deviceAuthorization0 = new DeviceAuthorization("""", """", """", 0);
      deviceAuthorization0.getUserCode();
}"
507,"    public long getExpiresInSeconds() {
        return expiresInSeconds;
    }","  public void test14()  throws Throwable  {
      DeviceAuthorization deviceAuthorization0 = new DeviceAuthorization("""", """", """", 0);
      deviceAuthorization0.getUserCode();
}"
508,"    public int getIntervalSeconds() {
        return intervalSeconds;
    }","  public void test15()  throws Throwable  {
      DeviceAuthorization deviceAuthorization0 = new DeviceAuthorization(""com.github.scribejava.core.model.DeviceAuthorization"", ""com.github.scribejava.core.model.DeviceAuthorization"", (String) null, 0);
}"
509,"    public int getIntervalSeconds() {
        return intervalSeconds;
    }","  public void test16()  throws Throwable  {
      DeviceAuthorization deviceAuthorization0 = new DeviceAuthorization(""com.github.scribejava.core.model.DeviceAuthorization"", ""com.github.scribejava.core.model.DeviceAuthorization"", (String) null, 0);
      deviceAuthorization0.setIntervalSeconds(0);
      int int0 = deviceAuthorization0.getIntervalSeconds();
}"
510,"    public int getIntervalSeconds() {
        return intervalSeconds;
    }","  public void test17()  throws Throwable  {
      DeviceAuthorization deviceAuthorization0 = new DeviceAuthorization(""~"", """", ""', 'verificationUri'='"", (-2083));
      deviceAuthorization0.setIntervalSeconds((-2083));
      int int0 = deviceAuthorization0.getIntervalSeconds();
}"
511,"    public int getIntervalSeconds() {
        return intervalSeconds;
    }","  public void test18()  throws Throwable  {
      DeviceAuthorization deviceAuthorization0 = new DeviceAuthorization(""Z63B6i"", ""Z63B6i"", ""Z63B6i"", 0);
      long long0 = deviceAuthorization0.getExpiresInSeconds();
}"
512,"    public long getExpiresInSeconds() {
        return expiresInSeconds;
    }","  public void test19()  throws Throwable  {
      DeviceAuthorization deviceAuthorization0 = new DeviceAuthorization(""Z63B6i"", ""Z63B6i"", ""Z63B6i"", 0);
      long long0 = deviceAuthorization0.getExpiresInSeconds();
}"
513,"    public int getIntervalSeconds() {
        return intervalSeconds;
    }","  public void test20()  throws Throwable  {
      DeviceAuthorization deviceAuthorization0 = new DeviceAuthorization("""", """", """", (-1));
      long long0 = deviceAuthorization0.getExpiresInSeconds();
}"
514,"    public long getExpiresInSeconds() {
        return expiresInSeconds;
    }","  public void test21()  throws Throwable  {
      DeviceAuthorization deviceAuthorization0 = new DeviceAuthorization("""", """", """", (-1));
      long long0 = deviceAuthorization0.getExpiresInSeconds();
}"
515,"    public long getExpiresInSeconds() {
        return expiresInSeconds;
    }","  public void test22()  throws Throwable  {
      DeviceAuthorization deviceAuthorization0 = new DeviceAuthorization((String) null, (String) null, (String) null, 5);
      deviceAuthorization0.getDeviceCode();
}"
516,"    public int getIntervalSeconds() {
        return intervalSeconds;
    }","  public void test23()  throws Throwable  {
      DeviceAuthorization deviceAuthorization0 = new DeviceAuthorization((String) null, (String) null, (String) null, 5);
      deviceAuthorization0.getDeviceCode();
}"
517,"    public long getExpiresInSeconds() {
        return expiresInSeconds;
    }","  public void test24()  throws Throwable  {
      DeviceAuthorization deviceAuthorization0 = new DeviceAuthorization("""", ""{Q(6ici,CP"", ""{Q(6ici,CP"", (-1));
      String string0 = deviceAuthorization0.getDeviceCode();
}"
518,"    public int getIntervalSeconds() {
        return intervalSeconds;
    }","  public void test25()  throws Throwable  {
      DeviceAuthorization deviceAuthorization0 = new DeviceAuthorization("""", ""{Q(6ici,CP"", ""{Q(6ici,CP"", (-1));
      String string0 = deviceAuthorization0.getDeviceCode();
}"
519,"    public String getUserCode() {
        return userCode;
    }","  public void test26()  throws Throwable  {
      DeviceAuthorization deviceAuthorization0 = new DeviceAuthorization("""", ""{Q(6ici,CP"", ""{Q(6ici,CP"", (-1));
      String string0 = deviceAuthorization0.getDeviceCode();
}"
520,"    public String getVerificationUri() {
        return verificationUri;
    }","  public void test27()  throws Throwable  {
      DeviceAuthorization deviceAuthorization0 = new DeviceAuthorization("""", ""{Q(6ici,CP"", ""{Q(6ici,CP"", (-1));
      String string0 = deviceAuthorization0.getDeviceCode();
}"
521,"    public String getDeviceCode() {
        return deviceCode;
    }","  public void test28()  throws Throwable  {
      DeviceAuthorization deviceAuthorization0 = new DeviceAuthorization("""", ""{Q(6ici,CP"", ""{Q(6ici,CP"", (-1));
      String string0 = deviceAuthorization0.getDeviceCode();
}"
522,"    public int getIntervalSeconds() {
        return intervalSeconds;
    }","  public void test29()  throws Throwable  {
      DeviceAuthorization deviceAuthorization0 = new DeviceAuthorization(""com.github.scribejava.core.model.DeviceAuthorization"", ""com.github.scribejava.core.model.DeviceAuthorization"", ""com.github.scribejava.core.model.DeviceAuthorization"", 1097);
      deviceAuthorization0.getDeviceCode();
}"
523,"    public long getExpiresInSeconds() {
        return expiresInSeconds;
    }","  public void test30()  throws Throwable  {
      DeviceAuthorization deviceAuthorization0 = new DeviceAuthorization(""com.github.scribejava.core.model.DeviceAuthorization"", ""com.github.scribejava.core.model.DeviceAuthorization"", ""com.github.scribejava.core.model.DeviceAuthorization"", 1097);
      deviceAuthorization0.getDeviceCode();
}"
524,"    public int getIntervalSeconds() {
        return intervalSeconds;
    }","  public void test31()  throws Throwable  {
      DeviceAuthorization deviceAuthorization0 = new DeviceAuthorization(""com.github.scribejava.core.model.DeviceAuthorization"", ""com.github.scribejava.core.model.DeviceAuthorization"", ""com.github.scribejava.core.model.DeviceAuthorization"", 1097);
      deviceAuthorization0.getVerificationUri();
}"
525,"    public long getExpiresInSeconds() {
        return expiresInSeconds;
    }","  public void test32()  throws Throwable  {
      DeviceAuthorization deviceAuthorization0 = new DeviceAuthorization(""com.github.scribejava.core.model.DeviceAuthorization"", ""com.github.scribejava.core.model.DeviceAuthorization"", ""com.github.scribejava.core.model.DeviceAuthorization"", 1097);
      deviceAuthorization0.getVerificationUri();
}"
526,"    public int getIntervalSeconds() {
        return intervalSeconds;
    }","  public void test33()  throws Throwable  {
      DeviceAuthorization deviceAuthorization0 = new DeviceAuthorization(""com.github.scribejava.core.model.DeviceAuthorization"", ""com.github.scribejava.core.model.DeviceAuthorization"", ""com.github.scribejava.core.model.DeviceAuthorization"", 1097);
      int int0 = deviceAuthorization0.getIntervalSeconds();
}"
527,"    public long getExpiresInSeconds() {
        return expiresInSeconds;
    }","  public void test34()  throws Throwable  {
      DeviceAuthorization deviceAuthorization0 = new DeviceAuthorization(""com.github.scribejava.core.model.DeviceAuthorization"", ""com.github.scribejava.core.model.DeviceAuthorization"", ""com.github.scribejava.core.model.DeviceAuthorization"", 1097);
      int int0 = deviceAuthorization0.getIntervalSeconds();
}"
528,"    public long getExpiresInSeconds() {
        return expiresInSeconds;
    }","  public void test35()  throws Throwable  {
      DeviceAuthorization deviceAuthorization0 = new DeviceAuthorization(""com.github.scribejava.core.model.DeviceAuthorization"", ""com.github.scribejava.core.model.DeviceAuthorization"", ""com.github.scribejava.core.model.DeviceAuthorization"", 1097);
      deviceAuthorization0.setVerificationUriComplete(""com.github.scribejava.core.model.DeviceAuthorization"");
      deviceAuthorization0.getVerificationUriComplete();
}"
529,"    public int getIntervalSeconds() {
        return intervalSeconds;
    }","  public void test36()  throws Throwable  {
      DeviceAuthorization deviceAuthorization0 = new DeviceAuthorization(""com.github.scribejava.core.model.DeviceAuthorization"", ""com.github.scribejava.core.model.DeviceAuthorization"", ""com.github.scribejava.core.model.DeviceAuthorization"", 1097);
      deviceAuthorization0.setVerificationUriComplete(""com.github.scribejava.core.model.DeviceAuthorization"");
      deviceAuthorization0.getVerificationUriComplete();
}"
530,"    public long getExpiresInSeconds() {
        return expiresInSeconds;
    }","  public void test37()  throws Throwable  {
      DeviceAuthorization deviceAuthorization0 = new DeviceAuthorization(""com.github.scribejava.core.model.DeviceAuthorization"", ""com.github.scribejava.core.model.DeviceAuthorization"", ""com.github.scribejava.core.model.DeviceAuthorization"", 1097);
      long long0 = deviceAuthorization0.getExpiresInSeconds();
}"
531,"    public int getIntervalSeconds() {
        return intervalSeconds;
    }","  public void test38()  throws Throwable  {
      DeviceAuthorization deviceAuthorization0 = new DeviceAuthorization(""com.github.scribejava.core.model.DeviceAuthorization"", ""com.github.scribejava.core.model.DeviceAuthorization"", ""com.github.scribejava.core.model.DeviceAuthorization"", 1097);
      long long0 = deviceAuthorization0.getExpiresInSeconds();
}"
532,"    public int getIntervalSeconds() {
        return intervalSeconds;
    }","  public void test39()  throws Throwable  {
      DeviceAuthorization deviceAuthorization0 = new DeviceAuthorization(""com.github.scribejava.core.model.DeviceAuthorization"", ""com.github.scribejava.core.model.DeviceAuthorization"", ""com.github.scribejava.core.model.DeviceAuthorization"", 1097);
      deviceAuthorization0.getUserCode();
}"
533,"    public long getExpiresInSeconds() {
        return expiresInSeconds;
    }","  public void test40()  throws Throwable  {
      DeviceAuthorization deviceAuthorization0 = new DeviceAuthorization(""com.github.scribejava.core.model.DeviceAuthorization"", ""com.github.scribejava.core.model.DeviceAuthorization"", ""com.github.scribejava.core.model.DeviceAuthorization"", 1097);
      deviceAuthorization0.getUserCode();
}"
534,"    public String toString() {
        return ""DeviceAuthorization{""
                + ""'deviceCode'='"" + deviceCode
                + ""', 'userCode'='"" + userCode
                + ""', 'verificationUri'='"" + verificationUri
                + ""', 'verificationUriComplete'='"" + verificationUriComplete
                + ""', 'expiresInSeconds'='"" + expiresInSeconds
                + ""', 'intervalSeconds'='"" + intervalSeconds + ""'}"";
    }","  public void test41()  throws Throwable  {
      DeviceAuthorization deviceAuthorization0 = new DeviceAuthorization(""com.github.scribejava.core.model.DeviceAuthorization"", ""com.github.scribejava.core.model.DeviceAuthorization"", ""com.github.scribejava.core.model.DeviceAuthorization"", 1097);
      String string0 = deviceAuthorization0.toString();
}"
535,"    public int getIntervalSeconds() {
        return intervalSeconds;
    }","  public void test42()  throws Throwable  {
      DeviceAuthorization deviceAuthorization0 = new DeviceAuthorization(""com.github.scribejava.core.model.DeviceAuthorization"", ""com.github.scribejava.core.model.DeviceAuthorization"", ""com.github.scribejava.core.model.DeviceAuthorization"", 1097);
      deviceAuthorization0.getVerificationUriComplete();
}"
536,"    public long getExpiresInSeconds() {
        return expiresInSeconds;
    }","  public void test43()  throws Throwable  {
      DeviceAuthorization deviceAuthorization0 = new DeviceAuthorization(""com.github.scribejava.core.model.DeviceAuthorization"", ""com.github.scribejava.core.model.DeviceAuthorization"", ""com.github.scribejava.core.model.DeviceAuthorization"", 1097);
      deviceAuthorization0.getVerificationUriComplete();
}"
537,"    public boolean isEmpty() {
        return """".equals(token) && """".equals(tokenSecret);
    }","  public void test0()  throws Throwable  {
      OAuth1RequestToken oAuth1RequestToken0 = new OAuth1RequestToken("""", """");
      oAuth1RequestToken0.getTokenSecret();
}"
538,"    public String getToken() {
        return token;
    }","  public void test1()  throws Throwable  {
      OAuth1RequestToken oAuth1RequestToken0 = new OAuth1RequestToken(""kfi]+1"", ""kfi]+1"");
      String string0 = oAuth1RequestToken0.getToken();
}"
539,"    public boolean isEmpty() {
        return """".equals(token) && """".equals(tokenSecret);
    }","  public void test2()  throws Throwable  {
      OAuth1RequestToken oAuth1RequestToken0 = new OAuth1RequestToken("""", """");
      oAuth1RequestToken0.getToken();
}"
540,"    public boolean isEmpty() {
        return """".equals(token) && """".equals(tokenSecret);
    }","  public void test3()  throws Throwable  {
      OAuth1RequestToken oAuth1RequestToken0 = new OAuth1RequestToken("""", """");
      boolean boolean0 = oAuth1RequestToken0.isEmpty();
}"
541,"    public boolean isEmpty() {
        return """".equals(token) && """".equals(tokenSecret);
    }","  public void test4()  throws Throwable  {
      OAuth1AccessToken oAuth1AccessToken0 = new OAuth1AccessToken("""", ""f"", ""f"");
      boolean boolean0 = oAuth1AccessToken0.isEmpty();
}"
542,"    public String getToken() {
        return token;
    }","  public void test5()  throws Throwable  {
      OAuth1AccessToken oAuth1AccessToken0 = new OAuth1AccessToken("""", ""f"", ""f"");
      boolean boolean0 = oAuth1AccessToken0.isEmpty();
}"
543,"    public boolean isEmpty() {
        return """".equals(token) && """".equals(tokenSecret);
    }","  public void test6()  throws Throwable  {
      OAuth1RequestToken oAuth1RequestToken0 = new OAuth1RequestToken(""."", ""."", ""."");
      boolean boolean0 = oAuth1RequestToken0.isEmpty();
}"
544,"    public String getTokenSecret() {
        return tokenSecret;
    }","  public void test7()  throws Throwable  {
      OAuth1AccessToken oAuth1AccessToken0 = new OAuth1AccessToken("""", ""f"", ""f"");
      String string0 = oAuth1AccessToken0.getTokenSecret();
}"
545,"    public String getToken() {
        return token;
    }","  public void test8()  throws Throwable  {
      OAuth1AccessToken oAuth1AccessToken0 = new OAuth1AccessToken("""", ""f"", ""f"");
      String string0 = oAuth1AccessToken0.getTokenSecret();
}"
546,"    public String getRawResponse() {
        if (rawResponse == null) {
            throw new IllegalStateException(
                    ""This token object was not constructed by ScribeJava and does not have a rawResponse"");
        }
        return rawResponse;
    }","  public void test0()  throws Throwable  {
      OAuth1RequestToken oAuth1RequestToken0 = new OAuth1RequestToken("""", ""9jH($5foe"", """");
      String string0 = oAuth1RequestToken0.getRawResponse();
}"
547,"    public String getParameter(String parameter) {
        String value = null;
        for (String str : rawResponse.split(""&"")) {
            if (str.startsWith(parameter + '=')) {
                final String[] part = str.split(""="");
                if (part.length > 1) {
                    value = part[1].trim();
                }
                break;
            }
        }
        return value;
    }","  public void test1()  throws Throwable  {
      Integer integer0 = new Integer((-8));
      OAuth2AccessToken oAuth2AccessToken0 = new OAuth2AccessToken(""=='c="", ""=='c="", integer0, """", ""=='c="", ""=='c="");
      String string0 = oAuth2AccessToken0.getParameter("""");
}"
548,"    public String getParameter(String parameter) {
        String value = null;
        for (String str : rawResponse.split(""&"")) {
            if (str.startsWith(parameter + '=')) {
                final String[] part = str.split(""="");
                if (part.length > 1) {
                    value = part[1].trim();
                }
                break;
            }
        }
        return value;
    }","  public void test2()  throws Throwable  {
      Integer integer0 = new Integer((-8));
      OAuth2AccessToken oAuth2AccessToken0 = new OAuth2AccessToken(""=='c="", ""=='c="", integer0, """", ""=='c="", ""=='c="");
      String string0 = oAuth2AccessToken0.getParameter("""");
}"
549,"    public String getParameter(String parameter) {
        String value = null;
        for (String str : rawResponse.split(""&"")) {
            if (str.startsWith(parameter + '=')) {
                final String[] part = str.split(""="");
                if (part.length > 1) {
                    value = part[1].trim();
                }
                break;
            }
        }
        return value;
    }","  public void test3()  throws Throwable  {
      OAuth2AccessToken oAuth2AccessToken0 = new OAuth2AccessToken(""com.github.scribejava.core.model.OAuth2AccessToken"");
      // Undeclared exception!
      try { 
        oAuth2AccessToken0.getParameter(""com.github.scribejava.core.model.OAuth2AccessToken"");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""com.github.scribejava.core.model.Token"", e);
      }
  }"
550,"    public String getParameter(String parameter) {
        String value = null;
        for (String str : rawResponse.split(""&"")) {
            if (str.startsWith(parameter + '=')) {
                final String[] part = str.split(""="");
                if (part.length > 1) {
                    value = part[1].trim();
                }
                break;
            }
        }
        return value;
    }","  public void test4()  throws Throwable  {
      Integer integer0 = new Integer(1);
      OAuth2AccessToken oAuth2AccessToken0 = new OAuth2AccessToken(""='="", ""='="", integer0, """", ""'='"", ""='="");
      String string0 = oAuth2AccessToken0.getParameter("""");
}"
551,"    public String getParameter(String parameter) {
        String value = null;
        for (String str : rawResponse.split(""&"")) {
            if (str.startsWith(parameter + '=')) {
                final String[] part = str.split(""="");
                if (part.length > 1) {
                    value = part[1].trim();
                }
                break;
            }
        }
        return value;
    }","  public void test5()  throws Throwable  {
      Integer integer0 = new Integer(1);
      OAuth2AccessToken oAuth2AccessToken0 = new OAuth2AccessToken(""='="", ""='="", integer0, """", ""'='"", ""='="");
      String string0 = oAuth2AccessToken0.getParameter("""");
}"
552,"    public String getParameter(String parameter) {
        String value = null;
        for (String str : rawResponse.split(""&"")) {
            if (str.startsWith(parameter + '=')) {
                final String[] part = str.split(""="");
                if (part.length > 1) {
                    value = part[1].trim();
                }
                break;
            }
        }
        return value;
    }","  public void test6()  throws Throwable  {
      OAuth2AccessToken oAuth2AccessToken0 = new OAuth2AccessToken(""="", ""="");
      String string0 = oAuth2AccessToken0.getParameter("""");
}"
553,"    public String getParameter(String parameter) {
        String value = null;
        for (String str : rawResponse.split(""&"")) {
            if (str.startsWith(parameter + '=')) {
                final String[] part = str.split(""="");
                if (part.length > 1) {
                    value = part[1].trim();
                }
                break;
            }
        }
        return value;
    }","  public void test7()  throws Throwable  {
      OAuth2AccessToken oAuth2AccessToken0 = new OAuth2AccessToken(""'"", ""="");
      String string0 = oAuth2AccessToken0.getParameter(""'"");
}"
554,"    public String getRawResponse() {
        if (rawResponse == null) {
            throw new IllegalStateException(
                    ""This token object was not constructed by ScribeJava and does not have a rawResponse"");
        }
        return rawResponse;
    }","  public void test8()  throws Throwable  {
      OAuth1AccessToken oAuth1AccessToken0 = new OAuth1AccessToken(""="", ""="");
      // Undeclared exception!
      try { 
        oAuth1AccessToken0.getRawResponse();
        fail(""Expecting exception: IllegalStateException"");
      } catch(IllegalStateException e) {
         //
         // This token object was not constructed by ScribeJava and does not have a rawResponse
         //
         verifyException(""com.github.scribejava.core.model.Token"", e);
      }
  }"
555,"    public String getRawResponse() {
        if (rawResponse == null) {
            throw new IllegalStateException(
                    ""This token object was not constructed by ScribeJava and does not have a rawResponse"");
        }
        return rawResponse;
    }","  public void test9()  throws Throwable  {
      Integer integer0 = new Integer(1);
      OAuth2AccessToken oAuth2AccessToken0 = new OAuth2AccessToken(""='="", ""='="", integer0, """", ""'='"", ""='="");
      String string0 = oAuth2AccessToken0.getRawResponse();
}"
556,"    public boolean isOauthCallbackConfirmed() {
        return oauthCallbackConfirmed;
    }","  public void test0()  throws Throwable  {
      OAuth1RequestToken oAuth1RequestToken0 = new OAuth1RequestToken(""`LYaV"", ""`LYaV"", """");
      oAuth1RequestToken0.hashCode();
}"
557,"    public boolean isOauthCallbackConfirmed() {
        return oauthCallbackConfirmed;
    }","  public void test1()  throws Throwable  {
      OAuth1RequestToken oAuth1RequestToken0 = new OAuth1RequestToken(""98n:k[n]pz #o6'zM"", ""98n:k[n]pz #o6'zM"", false, ""98n:k[n]pz #o6'zM"");
      boolean boolean0 = oAuth1RequestToken0.isOauthCallbackConfirmed();
}"
558,"    public boolean isOauthCallbackConfirmed() {
        return oauthCallbackConfirmed;
    }","  public void test2()  throws Throwable  {
      OAuth1RequestToken oAuth1RequestToken0 = new OAuth1RequestToken("""", """", """");
      oAuth1RequestToken0.getTokenSecret();
}"
559,"    public boolean isOauthCallbackConfirmed() {
        return oauthCallbackConfirmed;
    }","  public void test3()  throws Throwable  {
      OAuth1RequestToken oAuth1RequestToken0 = new OAuth1RequestToken(""2SjHM"", """");
      oAuth1RequestToken0.getToken();
}"
560,"    public OAuth1RequestToken(String token, String tokenSecret) {
        this(token, tokenSecret, null);
    }","  public void test4()  throws Throwable  {
      OAuth1RequestToken oAuth1RequestToken0 = null;
      try {
        oAuth1RequestToken0 = new OAuth1RequestToken((String) null, ""ejrjw`0b?f4UR9-f "", false, """");
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // oauth_token can't be null
         //
         verifyException(""com.github.scribejava.core.utils.Preconditions"", e);
      }
  }"
561,"    public OAuth1RequestToken(String token, String tokenSecret) {
        this(token, tokenSecret, null);
    }","  public void test5()  throws Throwable  {
      OAuth1RequestToken oAuth1RequestToken0 = null;
      try {
        oAuth1RequestToken0 = new OAuth1RequestToken(""$}N`ZhNRUK"", (String) null, (String) null);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // oauth_token_secret can't be null
         //
         verifyException(""com.github.scribejava.core.utils.Preconditions"", e);
      }
  }"
562,"    public boolean isOauthCallbackConfirmed() {
        return oauthCallbackConfirmed;
    }","  public void test6()  throws Throwable  {
      OAuth1RequestToken oAuth1RequestToken0 = new OAuth1RequestToken(""`LYaV"", ""`LYaV"", """");
      boolean boolean0 = oAuth1RequestToken0.isOauthCallbackConfirmed();
}"
563,"    public boolean isOauthCallbackConfirmed() {
        return oauthCallbackConfirmed;
    }","  public void test7()  throws Throwable  {
      OAuth1RequestToken oAuth1RequestToken0 = new OAuth1RequestToken("""", """", false, (String) null);
      oAuth1RequestToken0.getToken();
}"
564,"    public boolean isOauthCallbackConfirmed() {
        return oauthCallbackConfirmed;
    }","  public void test8()  throws Throwable  {
      OAuth1RequestToken oAuth1RequestToken0 = new OAuth1RequestToken(""This token object was not constructed by ScribeJava and does not have a rawResponse"", ""This token object was not constructed by ScribeJava and does not have a rawResponse"", ""This token object was not constructed by ScribeJava and does not have a rawResponse"");
      oAuth1RequestToken0.getTokenSecret();
}"
565,"    public boolean isOauthCallbackConfirmed() {
        return oauthCallbackConfirmed;
    }","  public void test9()  throws Throwable  {
      OAuth1RequestToken oAuth1RequestToken0 = new OAuth1RequestToken(""l4^-j-leR4"", ""l4^-j-leR4"", ""l4^-j-leR4"");
      OAuth1RequestToken oAuth1RequestToken1 = new OAuth1RequestToken(""ih{#t~vm8t}TGKr`"", ""l4^-j-leR4"", (String) null);
      boolean boolean0 = oAuth1RequestToken0.equals(oAuth1RequestToken1);
}"
566,"    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (obj == null) {
            return false;
        }
        if (getClass() != obj.getClass()) {
            return false;
        }
        final OAuth1RequestToken other = (OAuth1RequestToken) obj;
        if (oauthCallbackConfirmed != other.isOauthCallbackConfirmed()) {
            return false;
        }
        if (!Objects.equals(getToken(), other.getToken())) {
            return false;
        }
        return Objects.equals(getTokenSecret(), other.getTokenSecret());
    }","  public void test10()  throws Throwable  {
      OAuth1RequestToken oAuth1RequestToken0 = new OAuth1RequestToken(""l4^-j-leR4"", ""l4^-j-leR4"", ""l4^-j-leR4"");
      OAuth1RequestToken oAuth1RequestToken1 = new OAuth1RequestToken(""ih{#t~vm8t}TGKr`"", ""l4^-j-leR4"", (String) null);
      boolean boolean0 = oAuth1RequestToken0.equals(oAuth1RequestToken1);
}"
567,"    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (obj == null) {
            return false;
        }
        if (getClass() != obj.getClass()) {
            return false;
        }
        final OAuth1RequestToken other = (OAuth1RequestToken) obj;
        if (oauthCallbackConfirmed != other.isOauthCallbackConfirmed()) {
            return false;
        }
        if (!Objects.equals(getToken(), other.getToken())) {
            return false;
        }
        return Objects.equals(getTokenSecret(), other.getTokenSecret());
    }","  public void test11()  throws Throwable  {
      OAuth1RequestToken oAuth1RequestToken0 = new OAuth1RequestToken(""l4^-j-leR4"", ""l4^-j-leR4"", ""l4^-j-leR4"");
      OAuth1RequestToken oAuth1RequestToken1 = new OAuth1RequestToken(""l4^-j-leR4"", ""l4^-j-leR4"");
      boolean boolean0 = oAuth1RequestToken0.equals(oAuth1RequestToken1);
}"
568,"    public boolean isOauthCallbackConfirmed() {
        return oauthCallbackConfirmed;
    }","  public void test12()  throws Throwable  {
      OAuth1RequestToken oAuth1RequestToken0 = new OAuth1RequestToken(""l4^-j-leR4"", ""l4^-j-leR4"", ""l4^-j-leR4"");
      OAuth1RequestToken oAuth1RequestToken1 = new OAuth1RequestToken(""l4^-j-leR4"", ""l4^-j-leR4"");
      boolean boolean0 = oAuth1RequestToken0.equals(oAuth1RequestToken1);
}"
569,"    public boolean isOauthCallbackConfirmed() {
        return oauthCallbackConfirmed;
    }","  public void test13()  throws Throwable  {
      OAuth1RequestToken oAuth1RequestToken0 = new OAuth1RequestToken(""l4^-j-leR4"", ""l4^-j-leR4"", ""l4^-j-leR4"");
      boolean boolean0 = oAuth1RequestToken0.equals(""l4^-j-leR4"");
}"
570,"    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (obj == null) {
            return false;
        }
        if (getClass() != obj.getClass()) {
            return false;
        }
        final OAuth1RequestToken other = (OAuth1RequestToken) obj;
        if (oauthCallbackConfirmed != other.isOauthCallbackConfirmed()) {
            return false;
        }
        if (!Objects.equals(getToken(), other.getToken())) {
            return false;
        }
        return Objects.equals(getTokenSecret(), other.getTokenSecret());
    }","  public void test14()  throws Throwable  {
      OAuth1RequestToken oAuth1RequestToken0 = new OAuth1RequestToken(""l4^-j-leR4"", ""l4^-j-leR4"", ""l4^-j-leR4"");
      boolean boolean0 = oAuth1RequestToken0.equals(""l4^-j-leR4"");
}"
571,"    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (obj == null) {
            return false;
        }
        if (getClass() != obj.getClass()) {
            return false;
        }
        final OAuth1RequestToken other = (OAuth1RequestToken) obj;
        if (oauthCallbackConfirmed != other.isOauthCallbackConfirmed()) {
            return false;
        }
        if (!Objects.equals(getToken(), other.getToken())) {
            return false;
        }
        return Objects.equals(getTokenSecret(), other.getTokenSecret());
    }","  public void test15()  throws Throwable  {
      OAuth1RequestToken oAuth1RequestToken0 = new OAuth1RequestToken(""l4^-j-leR4"", ""l4^-j-leR4"", ""l4^-j-leR4"");
      boolean boolean0 = oAuth1RequestToken0.equals((Object) null);
}"
572,"    public boolean isOauthCallbackConfirmed() {
        return oauthCallbackConfirmed;
    }","  public void test16()  throws Throwable  {
      OAuth1RequestToken oAuth1RequestToken0 = new OAuth1RequestToken(""l4^-j-leR4"", ""l4^-j-leR4"", ""l4^-j-leR4"");
      boolean boolean0 = oAuth1RequestToken0.equals((Object) null);
}"
573,"    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (obj == null) {
            return false;
        }
        if (getClass() != obj.getClass()) {
            return false;
        }
        final OAuth1RequestToken other = (OAuth1RequestToken) obj;
        if (oauthCallbackConfirmed != other.isOauthCallbackConfirmed()) {
            return false;
        }
        if (!Objects.equals(getToken(), other.getToken())) {
            return false;
        }
        return Objects.equals(getTokenSecret(), other.getTokenSecret());
    }","  public void test17()  throws Throwable  {
      OAuth1RequestToken oAuth1RequestToken0 = new OAuth1RequestToken(""l4^-j-leR4"", ""l4^-j-leR4"", ""l4^-j-leR4"");
      boolean boolean0 = oAuth1RequestToken0.equals(oAuth1RequestToken0);
}"
574,"    public boolean isOauthCallbackConfirmed() {
        return oauthCallbackConfirmed;
    }","  public void test18()  throws Throwable  {
      OAuth1RequestToken oAuth1RequestToken0 = new OAuth1RequestToken(""l4^-j-leR4"", ""l4^-j-leR4"", ""l4^-j-leR4"");
      boolean boolean0 = oAuth1RequestToken0.equals(oAuth1RequestToken0);
}"
575,"    public boolean isOauthCallbackConfirmed() {
        return oauthCallbackConfirmed;
    }","  public void test19()  throws Throwable  {
      OAuth1RequestToken oAuth1RequestToken0 = new OAuth1RequestToken("""", """", false, """");
      oAuth1RequestToken0.hashCode();
}"
576,"    public OAuth1RequestToken(String token, String tokenSecret) {
        this(token, tokenSecret, null);
    }","  public void test20()  throws Throwable  {
      OAuth1RequestToken oAuth1RequestToken0 = null;
      try {
        oAuth1RequestToken0 = new OAuth1RequestToken("""", (String) null);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // oauth_token_secret can't be null
         //
         verifyException(""com.github.scribejava.core.utils.Preconditions"", e);
      }
  }"
577,"    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (obj == null) {
            return false;
        }
        if (getClass() != obj.getClass()) {
            return false;
        }
        final OAuth1RequestToken other = (OAuth1RequestToken) obj;
        if (oauthCallbackConfirmed != other.isOauthCallbackConfirmed()) {
            return false;
        }
        if (!Objects.equals(getToken(), other.getToken())) {
            return false;
        }
        return Objects.equals(getTokenSecret(), other.getTokenSecret());
    }","  public void test21()  throws Throwable  {
      OAuth1RequestToken oAuth1RequestToken0 = new OAuth1RequestToken("""", """", """");
      OAuth1RequestToken oAuth1RequestToken1 = new OAuth1RequestToken("""", """", false, """");
      boolean boolean0 = oAuth1RequestToken0.equals(oAuth1RequestToken1);
}"
578,"    public boolean isOauthCallbackConfirmed() {
        return oauthCallbackConfirmed;
    }","  public void test22()  throws Throwable  {
      OAuth1RequestToken oAuth1RequestToken0 = new OAuth1RequestToken("""", """", """");
      OAuth1RequestToken oAuth1RequestToken1 = new OAuth1RequestToken("""", """", false, """");
      boolean boolean0 = oAuth1RequestToken0.equals(oAuth1RequestToken1);
}"
579,"    public URI getErrorUri() {
        return errorUri;
    }","  public void test0()  throws Throwable  {
      OAuth2Error oAuth2Error0 = OAuth2Error.UNSUPPORTED_TOKEN_TYPE;
      URI uRI0 = MockURI.URI((String) null, (String) null, (String) null, (-1), (String) null, """", """");
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Closeable[] closeableArray0 = new Closeable[1];
      Response response0 = new Response(1513, ""com.github.scribejava.core.model.OAuth2AccessTokenErrorResponse"", hashMap0, (InputStream) null, closeableArray0);
      OAuth2AccessTokenErrorResponse oAuth2AccessTokenErrorResponse0 = new OAuth2AccessTokenErrorResponse(oAuth2Error0, (String) null, uRI0, response0);
      URI uRI1 = oAuth2AccessTokenErrorResponse0.getErrorUri();
}"
580,"    public URI getErrorUri() {
        return errorUri;
    }","  public void test1()  throws Throwable  {
      OAuth2Error oAuth2Error0 = OAuth2Error.INVALID_TOKEN;
      URI uRI0 = MockURI.aFTPURI;
      Response response0 = new Response(0, ""~oaXKKp/BR"", (Map<String, String>) null, ""(Tv8.Fx>,,vZ LD%1 h"");
      OAuth2AccessTokenErrorResponse oAuth2AccessTokenErrorResponse0 = new OAuth2AccessTokenErrorResponse(oAuth2Error0, (String) null, uRI0, response0);
      URI uRI1 = oAuth2AccessTokenErrorResponse0.getErrorUri();
}"
581,"    public String getErrorDescription() {
        return errorDescription;
    }","  public void test2()  throws Throwable  {
      OAuth2Error oAuth2Error0 = OAuth2Error.INVALID_TOKEN;
      URI uRI0 = MockURI.aFTPURI;
      Response response0 = new Response(0, ""~oaXKKp/BR"", (Map<String, String>) null, ""(Tv8.Fx>,,vZ LD%1 h"");
      OAuth2AccessTokenErrorResponse oAuth2AccessTokenErrorResponse0 = new OAuth2AccessTokenErrorResponse(oAuth2Error0, (String) null, uRI0, response0);
      String string0 = oAuth2AccessTokenErrorResponse0.getErrorDescription();
}"
582,"    public String getErrorDescription() {
        return errorDescription;
    }","  public void test3()  throws Throwable  {
      OAuth2Error oAuth2Error0 = OAuth2Error.INSUFFICIENT_SCOPE;
      URI uRI0 = MockURI.create("""");
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Response response0 = new Response(0, """", hashMap0, """");
      OAuth2AccessTokenErrorResponse oAuth2AccessTokenErrorResponse0 = new OAuth2AccessTokenErrorResponse(oAuth2Error0, """", uRI0, response0);
      String string0 = oAuth2AccessTokenErrorResponse0.getErrorDescription();
}"
583,"    public OAuth2AccessTokenErrorResponse(OAuth2Error error, String errorDescription, URI errorUri,
            Response rawResponse) throws IOException {
        super(rawResponse);
        this.error = error;
        this.errorDescription = errorDescription;
        this.errorUri = errorUri;
    }","  public void test4()  throws Throwable  {
      OAuth2Error oAuth2Error0 = OAuth2Error.EXPIRED_TOKEN;
      URI uRI0 = MockURI.aFileURI;
      OAuth2AccessTokenErrorResponse oAuth2AccessTokenErrorResponse0 = null;
      try {
        oAuth2AccessTokenErrorResponse0 = new OAuth2AccessTokenErrorResponse(oAuth2Error0, (String) null, uRI0, (Response) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""com.github.scribejava.core.model.OAuthResponseException"", e);
      }
  }"
584,"    public OAuth2AccessTokenErrorResponse(OAuth2Error error, String errorDescription, URI errorUri,
            Response rawResponse) throws IOException {
        super(rawResponse);
        this.error = error;
        this.errorDescription = errorDescription;
        this.errorUri = errorUri;
    }","  public void test5()  throws Throwable  {
      OAuth2Error oAuth2Error0 = OAuth2Error.UNSUPPORTED_RESPONSE_TYPE;
      URI uRI0 = MockURI.aFTPURI;
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      byte[] byteArray0 = new byte[7];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-116), (byte)72);
      Closeable[] closeableArray0 = new Closeable[8];
      Response response0 = new Response((-797), ""-d`<*,`q"", hashMap0, byteArrayInputStream0, closeableArray0);
      OAuth2AccessTokenErrorResponse oAuth2AccessTokenErrorResponse0 = null;
      try {
        oAuth2AccessTokenErrorResponse0 = new OAuth2AccessTokenErrorResponse(oAuth2Error0, ""-d`<*,`q"", uRI0, response0);
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.io.ByteArrayInputStream"", e);
      }
  }"
585,"    public OAuth2AccessTokenErrorResponse(OAuth2Error error, String errorDescription, URI errorUri,
            Response rawResponse) throws IOException {
        super(rawResponse);
        this.error = error;
        this.errorDescription = errorDescription;
        this.errorUri = errorUri;
    }","  public void test6()  throws Throwable  {
      OAuth2Error oAuth2Error0 = OAuth2Error.SLOW_DOWN;
      URI uRI0 = MockURI.aFileURI;
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(bufferedInputStream0);
      Closeable[] closeableArray0 = new Closeable[5];
      Response response0 = new Response(808, """", hashMap0, pushbackInputStream0, closeableArray0);
      OAuth2AccessTokenErrorResponse oAuth2AccessTokenErrorResponse0 = null;
      try {
        oAuth2AccessTokenErrorResponse0 = new OAuth2AccessTokenErrorResponse(oAuth2Error0, ""uS8JU-v`tA5zP=l9G"", uRI0, response0);
        fail(""Expecting exception: IOException"");
      } catch(Throwable e) {
         //
         // Pipe not connected
         //
         verifyException(""java.io.PipedInputStream"", e);
      }
  }"
586,"    public URI getErrorUri() {
        return errorUri;
    }","  public void test7()  throws Throwable  {
      OAuth2Error oAuth2Error0 = OAuth2Error.UNSUPPORTED_RESPONSE_TYPE;
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Response response0 = new Response(1593, """", hashMap0, """");
      OAuth2AccessTokenErrorResponse oAuth2AccessTokenErrorResponse0 = new OAuth2AccessTokenErrorResponse(oAuth2Error0, """", (URI) null, response0);
      URI uRI0 = oAuth2AccessTokenErrorResponse0.getErrorUri();
}"
587,"    public OAuth2Error getError() {
        return error;
    }","  public void test8()  throws Throwable  {
      OAuth2Error oAuth2Error0 = OAuth2Error.UNSUPPORTED_RESPONSE_TYPE;
      URI uRI0 = MockURI.aHttpURI;
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Response response0 = new Response(590, ""nhKuzq~/,q*p%C"", hashMap0, ""nhKuzq~/,q*p%C"");
      OAuth2AccessTokenErrorResponse oAuth2AccessTokenErrorResponse0 = new OAuth2AccessTokenErrorResponse(oAuth2Error0, ""nhKuzq~/,q*p%C"", uRI0, response0);
      OAuth2Error oAuth2Error1 = oAuth2AccessTokenErrorResponse0.getError();
}"
588,"    public String getErrorDescription() {
        return errorDescription;
    }","  public void test9()  throws Throwable  {
      OAuth2Error oAuth2Error0 = OAuth2Error.EXPIRED_TOKEN;
      URI uRI0 = MockURI.URI(""Go5qp"");
      Response response0 = new Response(1, ""Go5qp"", (Map<String, String>) null, (String) null);
      OAuth2AccessTokenErrorResponse oAuth2AccessTokenErrorResponse0 = new OAuth2AccessTokenErrorResponse(oAuth2Error0, ""Go5qp"", uRI0, response0);
      String string0 = oAuth2AccessTokenErrorResponse0.getErrorDescription();
}"
589,"    public String getKey() {
        return key;
    }","  public void test0()  throws Throwable  {
      Parameter parameter0 = new Parameter(""Cannot encode null object"", ""Cannot encode null object"");
      Parameter parameter1 = new Parameter(""Cannot encode null object"", ""%7E"");
      int int0 = parameter0.compareTo(parameter1);
}"
590,"    public int compareTo(Parameter parameter) {
        final int keyDiff = key.compareTo(parameter.getKey());

        return keyDiff == 0 ? value.compareTo(parameter.getValue()) : keyDiff;
    }","  public void test1()  throws Throwable  {
      Parameter parameter0 = new Parameter(""Cannot encode null object"", ""Cannot encode null object"");
      Parameter parameter1 = new Parameter(""Cannot encode null object"", ""%7E"");
      int int0 = parameter0.compareTo(parameter1);
}"
591,"    public int hashCode() {
        return key.hashCode() + value.hashCode();
    }","  public void test2()  throws Throwable  {
      Parameter parameter0 = new Parameter(""0"", ""0"");
      parameter0.hashCode();
  }"
592,"    public String getValue() {
        return value;
    }","  public void test3()  throws Throwable  {
      Parameter parameter0 = new Parameter((String) null, (String) null);
      String string0 = parameter0.getValue();
}"
593,"    public String getKey() {
        return key;
    }","  public void test4()  throws Throwable  {
      Parameter parameter0 = new Parameter(""meHNXP%2Cd.-41%28%5ER%26="", "">O>rxUwj:]a !aT%0"");
      String string0 = parameter0.getValue();
}"
594,"    public String getValue() {
        return value;
    }","  public void test5()  throws Throwable  {
      Parameter parameter0 = new Parameter(""meHNXP%2Cd.-41%28%5ER%26="", "">O>rxUwj:]a !aT%0"");
      String string0 = parameter0.getValue();
}"
595,"    public String getKey() {
        return key;
    }","  public void test6()  throws Throwable  {
      Parameter parameter0 = new Parameter((String) null, (String) null);
      String string0 = parameter0.getKey();
}"
596,"    public String getKey() {
        return key;
    }","  public void test7()  throws Throwable  {
      Parameter parameter0 = new Parameter(""meHNXP,d.-41(^R&"", """");
      String string0 = parameter0.getKey();
}"
597,"    public String getValue() {
        return value;
    }","  public void test8()  throws Throwable  {
      Parameter parameter0 = new Parameter(""meHNXP,d.-41(^R&"", """");
      String string0 = parameter0.getKey();
}"
598,"    public String getValue() {
        return value;
    }","  public void test9()  throws Throwable  {
      Parameter parameter0 = new Parameter("""", """");
      Parameter parameter1 = new Parameter(""="", """");
      int int0 = parameter1.compareTo(parameter0);
}"
599,"    public int compareTo(Parameter parameter) {
        final int keyDiff = key.compareTo(parameter.getKey());

        return keyDiff == 0 ? value.compareTo(parameter.getValue()) : keyDiff;
    }","  public void test10()  throws Throwable  {
      Parameter parameter0 = new Parameter("""", """");
      Parameter parameter1 = new Parameter(""="", """");
      int int0 = parameter1.compareTo(parameter0);
}"
600,"    public int hashCode() {
        return key.hashCode() + value.hashCode();
    }","  public void test11()  throws Throwable  {
      Parameter parameter0 = new Parameter((String) null, """");
      // Undeclared exception!
      try { 
        parameter0.hashCode();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""com.github.scribejava.core.model.Parameter"", e);
      }
  }"
601,"    public int compareTo(Parameter parameter) {
        final int keyDiff = key.compareTo(parameter.getKey());

        return keyDiff == 0 ? value.compareTo(parameter.getValue()) : keyDiff;
    }","  public void test12()  throws Throwable  {
      Parameter parameter0 = new Parameter(""IFrzxRJ|"", ""IFrzxRJ|"");
      // Undeclared exception!
      try { 
        parameter0.compareTo((Parameter) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""com.github.scribejava.core.model.Parameter"", e);
      }
  }"
602,"    public String asUrlEncodedPair() {
        return OAuthEncoder.encode(key).concat(""="").concat(OAuthEncoder.encode(value));
    }","  public void test13()  throws Throwable  {
      Parameter parameter0 = new Parameter((String) null, ""S$E$f AWB"");
      // Undeclared exception!
      try { 
        parameter0.asUrlEncodedPair();
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Cannot encode null object
         //
         verifyException(""com.github.scribejava.core.utils.Preconditions"", e);
      }
  }"
603,"    public String getValue() {
        return value;
    }","  public void test14()  throws Throwable  {
      Parameter parameter0 = new Parameter("""", """");
      String string0 = parameter0.getValue();
}"
604,"    public String getKey() {
        return key;
    }","  public void test15()  throws Throwable  {
      Parameter parameter0 = new Parameter("""", """");
      String string0 = parameter0.getKey();
}"
605,"    public String getValue() {
        return value;
    }","  public void test16()  throws Throwable  {
      Parameter parameter0 = new Parameter("""", """");
      Parameter parameter1 = new Parameter(""="", """");
      int int0 = parameter0.compareTo(parameter1);
}"
606,"    public int compareTo(Parameter parameter) {
        final int keyDiff = key.compareTo(parameter.getKey());

        return keyDiff == 0 ? value.compareTo(parameter.getValue()) : keyDiff;
    }","  public void test17()  throws Throwable  {
      Parameter parameter0 = new Parameter("""", """");
      Parameter parameter1 = new Parameter(""="", """");
      int int0 = parameter0.compareTo(parameter1);
}"
607,"    public String getValue() {
        return value;
    }","  public void test18()  throws Throwable  {
      Parameter parameter0 = new Parameter(""Cannot decode null object"", ""`}{RCJq0"");
      Parameter parameter1 = new Parameter(""Cannot decode null object"", ""`}{RCJq0"");
      boolean boolean0 = parameter0.equals(parameter1);
}"
608,"    public String getKey() {
        return key;
    }","  public void test19()  throws Throwable  {
      Parameter parameter0 = new Parameter(""Cannot decode null object"", ""`}{RCJq0"");
      Parameter parameter1 = new Parameter(""Cannot decode null object"", ""`}{RCJq0"");
      boolean boolean0 = parameter0.equals(parameter1);
}"
609,"    public boolean equals(Object other) {
        if (other == null) {
            return false;
        }
        if (other == this) {
            return true;
        }
        if (!(other instanceof Parameter)) {
            return false;
        }

        final Parameter otherParam = (Parameter) other;
        return otherParam.getKey().equals(key) && otherParam.getValue().equals(value);
    }","  public void test20()  throws Throwable  {
      Parameter parameter0 = new Parameter(""Cannot decode null object"", ""`}{RCJq0"");
      Parameter parameter1 = new Parameter(""Cannot decode null object"", ""`}{RCJq0"");
      boolean boolean0 = parameter0.equals(parameter1);
}"
610,"    public boolean equals(Object other) {
        if (other == null) {
            return false;
        }
        if (other == this) {
            return true;
        }
        if (!(other instanceof Parameter)) {
            return false;
        }

        final Parameter otherParam = (Parameter) other;
        return otherParam.getKey().equals(key) && otherParam.getValue().equals(value);
    }","  public void test21()  throws Throwable  {
      Parameter parameter0 = new Parameter(""0"", ""0"");
      Parameter parameter1 = new Parameter(""0"", ""1"");
      boolean boolean0 = parameter0.equals(parameter1);
}"
611,"    public String getKey() {
        return key;
    }","  public void test22()  throws Throwable  {
      Parameter parameter0 = new Parameter(""0"", ""0"");
      Parameter parameter1 = new Parameter(""0"", ""1"");
      boolean boolean0 = parameter0.equals(parameter1);
}"
612,"    public boolean equals(Object other) {
        if (other == null) {
            return false;
        }
        if (other == this) {
            return true;
        }
        if (!(other instanceof Parameter)) {
            return false;
        }

        final Parameter otherParam = (Parameter) other;
        return otherParam.getKey().equals(key) && otherParam.getValue().equals(value);
    }","  public void test23()  throws Throwable  {
      Parameter parameter0 = new Parameter("""", """");
      Parameter parameter1 = new Parameter("""", (String) null);
      // Undeclared exception!
      try { 
        parameter0.equals(parameter1);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
      }
  }"
613,"    public String getValue() {
        return value;
    }","  public void test24()  throws Throwable  {
      Parameter parameter0 = new Parameter("""", """");
      Parameter parameter1 = new Parameter(""="", """");
      boolean boolean0 = parameter0.equals(parameter1);
}"
614,"    public boolean equals(Object other) {
        if (other == null) {
            return false;
        }
        if (other == this) {
            return true;
        }
        if (!(other instanceof Parameter)) {
            return false;
        }

        final Parameter otherParam = (Parameter) other;
        return otherParam.getKey().equals(key) && otherParam.getValue().equals(value);
    }","  public void test25()  throws Throwable  {
      Parameter parameter0 = new Parameter("""", """");
      Parameter parameter1 = new Parameter(""="", """");
      boolean boolean0 = parameter0.equals(parameter1);
}"
615,"    public String getKey() {
        return key;
    }","  public void test26()  throws Throwable  {
      Parameter parameter0 = new Parameter(""meHNXP,d.-41(^R&"", """");
      boolean boolean0 = parameter0.equals(parameter0);
}"
616,"    public boolean equals(Object other) {
        if (other == null) {
            return false;
        }
        if (other == this) {
            return true;
        }
        if (!(other instanceof Parameter)) {
            return false;
        }

        final Parameter otherParam = (Parameter) other;
        return otherParam.getKey().equals(key) && otherParam.getValue().equals(value);
    }","  public void test27()  throws Throwable  {
      Parameter parameter0 = new Parameter(""meHNXP,d.-41(^R&"", """");
      boolean boolean0 = parameter0.equals(parameter0);
}"
617,"    public String getValue() {
        return value;
    }","  public void test28()  throws Throwable  {
      Parameter parameter0 = new Parameter(""meHNXP,d.-41(^R&"", """");
      boolean boolean0 = parameter0.equals(parameter0);
}"
618,"    public boolean equals(Object other) {
        if (other == null) {
            return false;
        }
        if (other == this) {
            return true;
        }
        if (!(other instanceof Parameter)) {
            return false;
        }

        final Parameter otherParam = (Parameter) other;
        return otherParam.getKey().equals(key) && otherParam.getValue().equals(value);
    }","  public void test29()  throws Throwable  {
      Parameter parameter0 = new Parameter(""+"", ""+"");
      boolean boolean0 = parameter0.equals((Object) null);
}"
619,"    public boolean equals(Object other) {
        if (other == null) {
            return false;
        }
        if (other == this) {
            return true;
        }
        if (!(other instanceof Parameter)) {
            return false;
        }

        final Parameter otherParam = (Parameter) other;
        return otherParam.getKey().equals(key) && otherParam.getValue().equals(value);
    }","  public void test30()  throws Throwable  {
      Parameter parameter0 = new Parameter("""", """");
      Object object0 = new Object();
      boolean boolean0 = parameter0.equals(object0);
}"
620,"    public String asUrlEncodedPair() {
        return OAuthEncoder.encode(key).concat(""="").concat(OAuthEncoder.encode(value));
    }","  public void test31()  throws Throwable  {
      Parameter parameter0 = new Parameter("""", """");
      String string0 = parameter0.asUrlEncodedPair();
}"
621,"    public int compareTo(Parameter parameter) {
        final int keyDiff = key.compareTo(parameter.getKey());

        return keyDiff == 0 ? value.compareTo(parameter.getValue()) : keyDiff;
    }","  public void test32()  throws Throwable  {
      Parameter parameter0 = new Parameter("""", """");
      int int0 = parameter0.compareTo(parameter0);
}"
622,"    public ParameterList sort() {
        final ParameterList sorted = new ParameterList(params);
        Collections.sort(sorted.getParams());
        return sorted;
    }","  public void test0()  throws Throwable  {
      ParameterList parameterList0 = new ParameterList();
      parameterList0.add("""", ""@Z<lD"");
      ParameterList parameterList1 = parameterList0.sort();
}"
623,"    public int size() {
        return params.size();
    }","  public void test1()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put(""]<"", ""]<"");
      ParameterList parameterList0 = new ParameterList(hashMap0);
      int int0 = parameterList0.size();
}"
624,"    public int size() {
        return params.size();
    }","  public void test2()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put(""="", ""E"");
      ParameterList parameterList0 = new ParameterList(hashMap0);
      List<Parameter> list0 = parameterList0.getParams();
}"
625,"    public int size() {
        return params.size();
    }","  public void test3()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      ParameterList parameterList0 = new ParameterList(hashMap0);
      parameterList0.addQuerystring(""c~HO=u8]QQya K[w"");
      parameterList0.asOauthBaseString();
}"
626,"    public String asOauthBaseString() {
        return OAuthEncoder.encode(asFormUrlEncodedString());
    }","  public void test4()  throws Throwable  {
      LinkedList<Parameter> linkedList0 = new LinkedList<Parameter>();
      linkedList0.add((Parameter) null);
      ParameterList parameterList0 = new ParameterList(linkedList0);
      // Undeclared exception!
      try { 
        parameterList0.asOauthBaseString();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""com.github.scribejava.core.model.ParameterList"", e);
      }
  }"
627,"    public String asOauthBaseString() {
        return OAuthEncoder.encode(asFormUrlEncodedString());
    }","  public void test5()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      ParameterList parameterList0 = new ParameterList(hashMap0);
      parameterList0.add((String) null, (String) null);
      // Undeclared exception!
      try { 
        parameterList0.asOauthBaseString();
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Cannot encode null object
         //
         verifyException(""com.github.scribejava.core.utils.Preconditions"", e);
      }
  }"
628,"    public String asFormUrlEncodedString() {
        if (params.isEmpty()) {
            return EMPTY_STRING;
        }

        final StringBuilder builder = new StringBuilder();
        for (Parameter p : params) {
            builder.append(PARAM_SEPARATOR).append(p.asUrlEncodedPair());
        }
        return builder.substring(1);
    }","  public void test6()  throws Throwable  {
      ParameterList parameterList0 = new ParameterList();
      LinkedList<Parameter> linkedList0 = new LinkedList<Parameter>();
      linkedList0.add((Parameter) null);
      ParameterList parameterList1 = new ParameterList(linkedList0);
      parameterList0.addAll(parameterList1);
      // Undeclared exception!
      try { 
        parameterList0.asFormUrlEncodedString();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""com.github.scribejava.core.model.ParameterList"", e);
      }
  }"
629,"    public String asFormUrlEncodedString() {
        if (params.isEmpty()) {
            return EMPTY_STRING;
        }

        final StringBuilder builder = new StringBuilder();
        for (Parameter p : params) {
            builder.append(PARAM_SEPARATOR).append(p.asUrlEncodedPair());
        }
        return builder.substring(1);
    }","  public void test7()  throws Throwable  {
      ParameterList parameterList0 = new ParameterList();
      parameterList0.add((String) null, ""@Z<lD"");
      // Undeclared exception!
      try { 
        parameterList0.asFormUrlEncodedString();
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Cannot encode null object
         //
         verifyException(""com.github.scribejava.core.utils.Preconditions"", e);
      }
  }"
630,"    public String appendTo(String url) {
        Preconditions.checkNotNull(url, ""Cannot append to null URL"");
        final String queryString = asFormUrlEncodedString();
        if (queryString.equals(EMPTY_STRING)) {
            return url;
        } else {
            return url
                    + (url.indexOf(QUERY_STRING_SEPARATOR) == -1 ? QUERY_STRING_SEPARATOR : PARAM_SEPARATOR)
                    + queryString;
        }
    }","  public void test8()  throws Throwable  {
      LinkedList<Parameter> linkedList0 = new LinkedList<Parameter>();
      linkedList0.add((Parameter) null);
      ParameterList parameterList0 = new ParameterList(linkedList0);
      // Undeclared exception!
      try { 
        parameterList0.appendTo(""h!mfy?wNpK(`hlE@qV"");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""com.github.scribejava.core.model.ParameterList"", e);
      }
  }"
631,"    public String appendTo(String url) {
        Preconditions.checkNotNull(url, ""Cannot append to null URL"");
        final String queryString = asFormUrlEncodedString();
        if (queryString.equals(EMPTY_STRING)) {
            return url;
        } else {
            return url
                    + (url.indexOf(QUERY_STRING_SEPARATOR) == -1 ? QUERY_STRING_SEPARATOR : PARAM_SEPARATOR)
                    + queryString;
        }
    }","  public void test9()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      ParameterList parameterList0 = new ParameterList(hashMap0);
      // Undeclared exception!
      try { 
        parameterList0.appendTo((String) null);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Cannot append to null URL
         //
         verifyException(""com.github.scribejava.core.utils.Preconditions"", e);
      }
  }"
632,"    public void addQuerystring(String queryString) {
        if (queryString != null && !queryString.isEmpty()) {
            for (String param : queryString.split(PARAM_SEPARATOR)) {
                final String[] pair = param.split(PAIR_SEPARATOR);
                final String key = OAuthEncoder.decode(pair[0]);
                final String value = pair.length > 1 ? OAuthEncoder.decode(pair[1]) : EMPTY_STRING;
                params.add(new Parameter(key, value));
            }
        }
    }","  public void test10()  throws Throwable  {
      ParameterList parameterList0 = new ParameterList((Map<String, String>) null);
      // Undeclared exception!
      try { 
        parameterList0.addQuerystring(""Pq-ZG2!#3%IFl]&&N"");
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // URLDecoder: Illegal hex characters in escape (%) pattern - For input string: \""IF\""
         //
         verifyException(""java.net.URLDecoder"", e);
      }
  }"
633,"    public void addQuerystring(String queryString) {
        if (queryString != null && !queryString.isEmpty()) {
            for (String param : queryString.split(PARAM_SEPARATOR)) {
                final String[] pair = param.split(PAIR_SEPARATOR);
                final String key = OAuthEncoder.decode(pair[0]);
                final String value = pair.length > 1 ? OAuthEncoder.decode(pair[1]) : EMPTY_STRING;
                params.add(new Parameter(key, value));
            }
        }
    }","  public void test11()  throws Throwable  {
      LinkedList<Parameter> linkedList0 = new LinkedList<Parameter>();
      ParameterList parameterList0 = new ParameterList(linkedList0);
      // Undeclared exception!
      try { 
        parameterList0.addQuerystring(""="");
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException(""com.github.scribejava.core.model.ParameterList"", e);
      }
  }"
634,"    public void addAll(ParameterList other) {
        params.addAll(other.getParams());
    }","  public void test12()  throws Throwable  {
      ParameterList parameterList0 = new ParameterList();
      // Undeclared exception!
      try { 
        parameterList0.addAll((ParameterList) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""com.github.scribejava.core.model.ParameterList"", e);
      }
  }"
635,"    public ParameterList() {
        params = new ArrayList<>();
    }","  public void test13()  throws Throwable  {
      LinkedList<Parameter> linkedList0 = new LinkedList<Parameter>();
      List<Parameter> list0 = linkedList0.subList(0, 0);
      Parameter parameter0 = new Parameter(""%7D%402tiRoM55v5%3A="", ""K=K~?fRB"");
      linkedList0.add(parameter0);
      ParameterList parameterList0 = null;
      try {
        parameterList0 = new ParameterList(list0);
        fail(""Expecting exception: ConcurrentModificationException"");
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.util.SubList"", e);
      }
  }"
636,"    public ParameterList() {
        params = new ArrayList<>();
    }","  public void test14()  throws Throwable  {
      ParameterList parameterList0 = null;
      try {
        parameterList0 = new ParameterList((List<Parameter>) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.util.ArrayList"", e);
      }
  }"
637,"    public String asFormUrlEncodedString() {
        if (params.isEmpty()) {
            return EMPTY_STRING;
        }

        final StringBuilder builder = new StringBuilder();
        for (Parameter p : params) {
            builder.append(PARAM_SEPARATOR).append(p.asUrlEncodedPair());
        }
        return builder.substring(1);
    }","  public void test15()  throws Throwable  {
      ParameterList parameterList0 = new ParameterList();
      String string0 = parameterList0.asFormUrlEncodedString();
}"
638,"    public String asFormUrlEncodedString() {
        if (params.isEmpty()) {
            return EMPTY_STRING;
        }

        final StringBuilder builder = new StringBuilder();
        for (Parameter p : params) {
            builder.append(PARAM_SEPARATOR).append(p.asUrlEncodedPair());
        }
        return builder.substring(1);
    }","  public void test16()  throws Throwable  {
      ParameterList parameterList0 = new ParameterList();
      parameterList0.add("""", ""@Z<lD"");
      String string0 = parameterList0.asFormUrlEncodedString();
}"
639,"    public List<Parameter> getParams() {
        return params;
    }","  public void test17()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      ParameterList parameterList0 = new ParameterList(hashMap0);
      List<Parameter> list0 = parameterList0.getParams();
}"
640,"    public boolean contains(Parameter param) {
        return params.contains(param);
    }","  public void test18()  throws Throwable  {
      LinkedList<Parameter> linkedList0 = new LinkedList<Parameter>();
      Parameter parameter0 = new Parameter("""", """");
      linkedList0.add(parameter0);
      ParameterList parameterList0 = new ParameterList(linkedList0);
      boolean boolean0 = parameterList0.contains(parameter0);
}"
641,"    public boolean contains(Parameter param) {
        return params.contains(param);
    }","  public void test19()  throws Throwable  {
      ParameterList parameterList0 = new ParameterList();
      Parameter parameter0 = new Parameter((String) null, ""%2A"");
      boolean boolean0 = parameterList0.contains(parameter0);
}"
642,"    public int size() {
        return params.size();
    }","  public void test20()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      ParameterList parameterList0 = new ParameterList(hashMap0);
      parameterList0.addQuerystring(""\"""");
}"
643,"    public int size() {
        return params.size();
    }","  public void test21()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      ParameterList parameterList0 = new ParameterList(hashMap0);
      parameterList0.addQuerystring("""");
}"
644,"    public int size() {
        return params.size();
    }","  public void test22()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      ParameterList parameterList0 = new ParameterList(hashMap0);
      parameterList0.addQuerystring((String) null);
}"
645,"    public String appendTo(String url) {
        Preconditions.checkNotNull(url, ""Cannot append to null URL"");
        final String queryString = asFormUrlEncodedString();
        if (queryString.equals(EMPTY_STRING)) {
            return url;
        } else {
            return url
                    + (url.indexOf(QUERY_STRING_SEPARATOR) == -1 ? QUERY_STRING_SEPARATOR : PARAM_SEPARATOR)
                    + queryString;
        }
    }","  public void test23()  throws Throwable  {
      LinkedList<Parameter> linkedList0 = new LinkedList<Parameter>();
      Parameter parameter0 = new Parameter("""", """");
      linkedList0.add(parameter0);
      ParameterList parameterList0 = new ParameterList(linkedList0);
      String string0 = parameterList0.appendTo(""CScJ%%0[cipX?"");
}"
646,"    public int size() {
        return params.size();
    }","  public void test24()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      ParameterList parameterList0 = new ParameterList(hashMap0);
      parameterList0.addQuerystring(""c~HO=u8]QQya K[w"");
      parameterList0.appendTo(""c~HO=u8]QQya K[w"");
}"
647,"    public ParameterList sort() {
        final ParameterList sorted = new ParameterList(params);
        Collections.sort(sorted.getParams());
        return sorted;
    }","  public void test25()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put(""="", ""E"");
      ParameterList parameterList0 = new ParameterList(hashMap0);
      parameterList0.add((String) null, ""S?9#c%W0SQa8(JC"");
      // Undeclared exception!
      try { 
        parameterList0.sort();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""com.github.scribejava.core.model.Parameter"", e);
      }
  }"
648,"    public String appendTo(String url) {
        Preconditions.checkNotNull(url, ""Cannot append to null URL"");
        final String queryString = asFormUrlEncodedString();
        if (queryString.equals(EMPTY_STRING)) {
            return url;
        } else {
            return url
                    + (url.indexOf(QUERY_STRING_SEPARATOR) == -1 ? QUERY_STRING_SEPARATOR : PARAM_SEPARATOR)
                    + queryString;
        }
    }","  public void test26()  throws Throwable  {
      ParameterList parameterList0 = new ParameterList((Map<String, String>) null);
      String string0 = parameterList0.appendTo("""");
}"
649,"    public int size() {
        return params.size();
    }","  public void test27()  throws Throwable  {
      ParameterList parameterList0 = new ParameterList();
      int int0 = parameterList0.size();
}"
650,"    public String asOauthBaseString() {
        return OAuthEncoder.encode(asFormUrlEncodedString());
    }","  public void test28()  throws Throwable  {
      ParameterList parameterList0 = new ParameterList();
      String string0 = parameterList0.asOauthBaseString();
}"
651,"    public ParameterList sort() {
        final ParameterList sorted = new ParameterList(params);
        Collections.sort(sorted.getParams());
        return sorted;
    }","  public void test29()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      ParameterList parameterList0 = new ParameterList(hashMap0);
      ParameterList parameterList1 = parameterList0.sort();
}"
652,"    public boolean isSuccessful() {
        return code >= 200 && code < 400;
    }","  public void test0()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Response response0 = new Response(1155, """", hashMap0, """");
      boolean boolean0 = response0.isSuccessful();
}"
653,"    public int getCode() {
        return code;
    }","  public void test1()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Response response0 = new Response(1155, """", hashMap0, """");
      boolean boolean0 = response0.isSuccessful();
}"
654,"    public int getCode() {
        return code;
    }","  public void test2()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pipedInputStream0, pipedInputStream0);
      Closeable[] closeableArray0 = new Closeable[1];
      Response response0 = new Response(200, """", (Map<String, String>) null, sequenceInputStream0, closeableArray0);
      response0.getStream();
}"
655,"    public int getCode() {
        return code;
    }","  public void test3()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Response response0 = new Response((-3688), (String) null, hashMap0, ""#|?a"");
      response0.getMessage();
}"
656,"    public int getCode() {
        return code;
    }","  public void test4()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Response response0 = new Response(0, """", hashMap0, (String) null);
      response0.getMessage();
}"
657,"    public int getCode() {
        return code;
    }","  public void test5()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Response response0 = new Response(0, """", hashMap0, (String) null);
      response0.getHeaders();
}"
658,"    public int getCode() {
        return code;
    }","  public void test6()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      BiFunction<String, String, String> biFunction0 = (BiFunction<String, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap0.merge(""B);%*_Mox(On.<"", ""B);%*_Mox(On.<"", biFunction0);
      Closeable[] closeableArray0 = new Closeable[1];
      Response response0 = new Response(0, ""B);%*_Mox(On.<"", hashMap0, (InputStream) null, closeableArray0);
      response0.getHeaders();
}"
659,"    public int getCode() {
        return code;
    }","  public void test7()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Response response0 = new Response(400, ""Xx"", hashMap0, ""Ai"");
      response0.getHeader((String) null);
}"
660,"    public int getCode() {
        return code;
    }","  public void test8()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Response response0 = new Response((-3688), (String) null, hashMap0, ""#|?a"");
      hashMap0.put((String) null, ""Response{code=-3688, message='null', body='#|?a', headers={}}"");
      response0.getHeader((String) null);
}"
661,"    public int getCode() {
        return code;
    }","  public void test9()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("""", """");
      Response response0 = new Response((-1), ""j` Q~"", hashMap0, ""X"");
      response0.getHeader("""");
}"
662,"    public int getCode() {
        return code;
    }","  public void test10()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Response response0 = new Response(0, """", hashMap0, """");
      int int0 = response0.getCode();
}"
663,"    public int getCode() {
        return code;
    }","  public void test11()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Response response0 = new Response(400, ""Xx"", hashMap0, ""Ai"");
      int int0 = response0.getCode();
}"
664,"    public String getBody() throws IOException {
        return body == null ? parseBodyContents() : body;
    }","  public void test12()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      MockFile mockFile0 = new MockFile(""cHQX^f(; 5yc"", """");
      File file0 = MockFile.createTempFile(""com.github.scribejava.core.model.Response"", """", (File) mockFile0);
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      Closeable[] closeableArray0 = new Closeable[3];
      Response response0 = new Response(125, (String) null, hashMap0, mockFileInputStream0, closeableArray0);
      String string0 = response0.getBody();
}"
665,"    public int getCode() {
        return code;
    }","  public void test13()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      MockFile mockFile0 = new MockFile(""cHQX^f(; 5yc"", """");
      File file0 = MockFile.createTempFile(""com.github.scribejava.core.model.Response"", """", (File) mockFile0);
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      Closeable[] closeableArray0 = new Closeable[3];
      Response response0 = new Response(125, (String) null, hashMap0, mockFileInputStream0, closeableArray0);
      String string0 = response0.getBody();
}"
666,"    public String getBody() throws IOException {
        return body == null ? parseBodyContents() : body;
    }","  public void test14()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pipedInputStream0, pipedInputStream0);
      Closeable[] closeableArray0 = new Closeable[1];
      Response response0 = new Response(200, """", (Map<String, String>) null, sequenceInputStream0, closeableArray0);
      // Undeclared exception!
      try { 
        response0.getBody();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""com.github.scribejava.core.model.Response"", e);
      }
  }"
667,"    public void close() throws IOException {
        if (closed) {
            return;
        }
        IOException ioException = null;
        if (closeables != null) {
            for (Closeable closeable : closeables) {
                if (closeable == null) {
                    continue;
                }
                try {
                    closeable.close();
                } catch (IOException ioE) {
                    if (ioException != null) {
                        ioException = ioE;
                    }
                }
            }
        }
        if (ioException != null) {
            throw ioException;
        }
        closed = true;
    }","  public void test15()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      Closeable[] closeableArray0 = new Closeable[3];
      closeableArray0[0] = (Closeable) dataInputStream0;
      Response response0 = new Response(200, """", hashMap0, dataInputStream0, closeableArray0);
      // Undeclared exception!
      try { 
        response0.close();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.io.FilterInputStream"", e);
      }
  }"
668,"    public int getCode() {
        return code;
    }","  public void test16()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(mockFileInputStream0);
      Closeable[] closeableArray0 = new Closeable[7];
      closeableArray0[3] = (Closeable) mockFileInputStream0;
      Response response0 = new Response(2993, ""TfF-8"", (Map<String, String>) null, bufferedInputStream0, closeableArray0);
      response0.close();
}"
669,"    public int getCode() {
        return code;
    }","  public void test17()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pipedInputStream0, pipedInputStream0);
      Closeable[] closeableArray0 = new Closeable[1];
      closeableArray0[0] = (Closeable) sequenceInputStream0;
      Response response0 = new Response(200, """", (Map<String, String>) null, sequenceInputStream0, closeableArray0);
      response0.close();
}"
670,"    public int getCode() {
        return code;
    }","  public void test18()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Response response0 = new Response(0, ""Oa&:#L7n+,on4/R"", hashMap0, ""Oa&:#L7n+,on4/R"");
      response0.close();
      response0.close();
}"
671,"    public int getCode() {
        return code;
    }","  public void test19()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Response response0 = new Response(400, ""Osx"", hashMap0, ""Osx"");
      String string0 = response0.getBody();
}"
672,"    public String getBody() throws IOException {
        return body == null ? parseBodyContents() : body;
    }","  public void test20()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Response response0 = new Response(400, ""Osx"", hashMap0, ""Osx"");
      String string0 = response0.getBody();
}"
673,"    public boolean isSuccessful() {
        return code >= 200 && code < 400;
    }","  public void test21()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Response response0 = new Response(400, ""Osx"", hashMap0, ""Osx"");
      boolean boolean0 = response0.isSuccessful();
}"
674,"    public int getCode() {
        return code;
    }","  public void test22()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Response response0 = new Response(400, ""Osx"", hashMap0, ""Osx"");
      boolean boolean0 = response0.isSuccessful();
}"
675,"    public boolean isSuccessful() {
        return code >= 200 && code < 400;
    }","  public void test23()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pipedInputStream0, pipedInputStream0);
      Closeable[] closeableArray0 = new Closeable[1];
      Response response0 = new Response(200, """", (Map<String, String>) null, sequenceInputStream0, closeableArray0);
      boolean boolean0 = response0.isSuccessful();
}"
676,"    public int getCode() {
        return code;
    }","  public void test24()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pipedInputStream0, pipedInputStream0);
      Closeable[] closeableArray0 = new Closeable[1];
      Response response0 = new Response(200, """", (Map<String, String>) null, sequenceInputStream0, closeableArray0);
      boolean boolean0 = response0.isSuccessful();
}"
677,"    public int getCode() {
        return code;
    }","  public void test25()  throws Throwable  {
      Response response0 = new Response(0, ""4"", (Map<String, String>) null, ""4"");
      boolean boolean0 = response0.isSuccessful();
}"
678,"    public boolean isSuccessful() {
        return code >= 200 && code < 400;
    }","  public void test26()  throws Throwable  {
      Response response0 = new Response(0, ""4"", (Map<String, String>) null, ""4"");
      boolean boolean0 = response0.isSuccessful();
}"
679,"    public String getBody() throws IOException {
        return body == null ? parseBodyContents() : body;
    }","  public void test27()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>(643);
      hashMap0.put(""Content-Encoding"", ""gzip"");
      PipedInputStream pipedInputStream0 = new PipedInputStream(643);
      Closeable[] closeableArray0 = new Closeable[5];
      Response response0 = new Response(643, ""gzip"", hashMap0, pipedInputStream0, closeableArray0);
      try { 
        response0.getBody();
        fail(""Expecting exception: IOException"");
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException(""java.io.PipedInputStream"", e);
      }
  }"
680,"    public String getBody() throws IOException {
        return body == null ? parseBodyContents() : body;
    }","  public void test28()  throws Throwable  {
      Response response0 = new Response(20, """", (Map<String, String>) null, (String) null);
      String string0 = response0.getBody();
}"
681,"    public int getCode() {
        return code;
    }","  public void test29()  throws Throwable  {
      Response response0 = new Response(20, """", (Map<String, String>) null, (String) null);
      String string0 = response0.getBody();
}"
682,"    public String getHeader(String name) {
        return headers.get(name);
    }","  public void test30()  throws Throwable  {
      Response response0 = new Response((-1092), ""Pw{.Ya-kl+^:6eY?"", (Map<String, String>) null, ""Pw{.Ya-kl+^:6eY?"");
      // Undeclared exception!
      try { 
        response0.getHeader(""U)A Q?]D"");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""com.github.scribejava.core.model.Response"", e);
      }
  }"
683,"    public int getCode() {
        return code;
    }","  public void test31()  throws Throwable  {
      Response response0 = new Response((-1092), ""Pw{.Ya-kl+^:6eY?"", (Map<String, String>) null, ""Pw{.Ya-kl+^:6eY?"");
      int int0 = response0.getCode();
}"
684,"    public int getCode() {
        return code;
    }","  public void test32()  throws Throwable  {
      Response response0 = new Response(20, """", (Map<String, String>) null, (String) null);
      response0.getStream();
}"
685,"    public int getCode() {
        return code;
    }","  public void test33()  throws Throwable  {
      Response response0 = new Response((-1092), ""Pw{.Ya-kl+^:6eY?"", (Map<String, String>) null, ""Pw{.Ya-kl+^:6eY?"");
      response0.getMessage();
}"
686,"    public String toString() {
        return ""Response{""
                + ""code="" + code
                + "", message='"" + message + '\''
                + "", body='"" + body + '\''
                + "", headers="" + headers
                + '}';
    }","  public void test34()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Response response0 = new Response(566, ""kr),Szt"", hashMap0, ""kr),Szt"");
      String string0 = response0.toString();
}"
687,"    public int getCode() {
        return code;
    }","  public void test35()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(mockFileInputStream0);
      Closeable[] closeableArray0 = new Closeable[7];
      Response response0 = new Response(2993, ""TfF-8"", (Map<String, String>) null, bufferedInputStream0, closeableArray0);
      response0.getHeaders();
}"
688,,"  public void test0()  throws Throwable  {
      Verb[] verbArray0 = Verb.values();
}"
689,"    public boolean isRequiresBody() {
        return requiresBody;
    }","  public void test1()  throws Throwable  {
      Verb verb0 = Verb.valueOf(""PUT"");
}"
690,"    public boolean isPermitBody() {
        return permitBody;
    }","  public void test2()  throws Throwable  {
      Verb verb0 = Verb.valueOf(""HEAD"");
}"
691,"    public boolean isRequiresBody() {
        return requiresBody;
    }","  public void test3()  throws Throwable  {
      Verb verb0 = Verb.POST;
      boolean boolean0 = verb0.isRequiresBody();
}"
692,"    public boolean isPermitBody() {
        return permitBody;
    }","  public void test4()  throws Throwable  {
      Verb verb0 = Verb.PATCH;
      boolean boolean0 = verb0.isPermitBody();
}"
693,"    public boolean isPermitBody() {
        return permitBody;
    }","  public void test5()  throws Throwable  {
      Verb verb0 = Verb.GET;
      boolean boolean0 = verb0.isPermitBody();
}"
694,"    public boolean isRequiresBody() {
        return requiresBody;
    }","  public void test6()  throws Throwable  {
      Verb verb0 = Verb.GET;
      boolean boolean0 = verb0.isRequiresBody();
}"
695,"    public String getStringPayload() {
        return stringPayload;
    }","  public void test0()  throws Throwable  {
      Verb verb0 = Verb.OPTIONS;
      OAuthRequest oAuthRequest0 = new OAuthRequest(verb0, ""?.*"");
      oAuthRequest0.addParameter("", headers="", ""?.*"");
}"
696,"    public void addBodyPartPayloadInMultipartPayload(BodyPartPayload bodyPartPayload) {
        multipartPayload.addBodyPart(bodyPartPayload);
    }","  public void test1()  throws Throwable  {
      Verb verb0 = Verb.OPTIONS;
      OAuthRequest oAuthRequest0 = new OAuthRequest(verb0, ""?.*"");
      Map<String, String> map0 = oAuthRequest0.getHeaders();
      oAuthRequest0.initMultipartPayload(map0);
      MultipartPayload multipartPayload0 = new MultipartPayload(map0);
      oAuthRequest0.addBodyPartPayloadInMultipartPayload(multipartPayload0);
}"
697,"    public String getUrl() {
        return url;
    }","  public void test2()  throws Throwable  {
      OAuthRequest oAuthRequest0 = new OAuthRequest((Verb) null, ""p9tWwFzz?r"");
      oAuthRequest0.initMultipartPayload(""p9tWwFzz?r"");
}"
698,"    public Verb getVerb() {
        return verb;
    }","  public void test3()  throws Throwable  {
      Verb verb0 = Verb.PATCH;
      OAuthRequest oAuthRequest0 = new OAuthRequest(verb0, ""http://:G@Ko[/"");
      Verb verb1 = oAuthRequest0.getVerb();
}"
699,"    public Verb getVerb() {
        return verb;
    }","  public void test4()  throws Throwable  {
      Verb verb0 = Verb.OPTIONS;
      OAuthRequest oAuthRequest0 = new OAuthRequest(verb0, ""EK\u0002HGhU+_Srp7M\"""");
      Verb verb1 = oAuthRequest0.getVerb();
}"
700,"    public String getUrl() {
        return url;
    }","  public void test5()  throws Throwable  {
      Verb verb0 = Verb.TRACE;
      OAuthRequest oAuthRequest0 = new OAuthRequest(verb0, (String) null);
      String string0 = oAuthRequest0.getUrl();
}"
701,"    public String getUrl() {
        return url;
    }","  public void test6()  throws Throwable  {
      Verb verb0 = Verb.TRACE;
      OAuthRequest oAuthRequest0 = new OAuthRequest(verb0, """");
      String string0 = oAuthRequest0.getUrl();
}"
702,"    public String getStringPayload() {
        return stringPayload;
    }","  public void test7()  throws Throwable  {
      Verb verb0 = Verb.PATCH;
      OAuthRequest oAuthRequest0 = new OAuthRequest(verb0, ""7T!T^l<lfN"");
      oAuthRequest0.setPayload(""scope"");
      String string0 = oAuthRequest0.getStringPayload();
}"
703,"    public String getStringPayload() {
        return stringPayload;
    }","  public void test8()  throws Throwable  {
      Verb verb0 = Verb.PATCH;
      OAuthRequest oAuthRequest0 = new OAuthRequest(verb0, ""7T!T^l<lfN"");
      oAuthRequest0.setPayload("""");
      String string0 = oAuthRequest0.getStringPayload();
}"
704,"    public String getSanitizedUrl() {
        if (url.startsWith(""http://"") && (url.endsWith("":80"") || url.contains("":80/""))) {
            return url.replaceAll(""\\?.*"", """").replaceAll("":80"", """");
        } else if (url.startsWith(""https://"") && (url.endsWith("":443"") || url.contains("":443/""))) {
            return url.replaceAll(""\\?.*"", """").replaceAll("":443"", """");
        } else {
            return url.replaceAll(""\\?.*"", """");
        }
    }","  public void test9()  throws Throwable  {
      Verb verb0 = Verb.POST;
      OAuthRequest oAuthRequest0 = new OAuthRequest(verb0, """");
      String string0 = oAuthRequest0.getSanitizedUrl();
}"
705,"    public String getRealm() {
        return realm;
    }","  public void test10()  throws Throwable  {
      Verb verb0 = Verb.DELETE;
      OAuthRequest oAuthRequest0 = new OAuthRequest(verb0, ""http://9Josz5m0o L"");
      oAuthRequest0.setRealm(""http://9Josz5m0o L"");
      String string0 = oAuthRequest0.getRealm();
}"
706,"    public String getRealm() {
        return realm;
    }","  public void test11()  throws Throwable  {
      Verb verb0 = Verb.HEAD;
      OAuthRequest oAuthRequest0 = new OAuthRequest(verb0, ""c"");
      oAuthRequest0.setRealm("""");
      String string0 = oAuthRequest0.getRealm();
}"
707,"    public ParameterList getQueryStringParams() {
        try {
            final ParameterList result = new ParameterList();
            final String queryString = new URL(url).getQuery();
            result.addQuerystring(queryString);
            result.addAll(querystringParams);
            return result;
        } catch (MalformedURLException mue) {
            throw new OAuthException(""Malformed URL"", mue);
        }
    }","  public void test12()  throws Throwable  {
      Verb verb0 = Verb.DELETE;
      OAuthRequest oAuthRequest0 = new OAuthRequest(verb0, ""http://9Josz5m0o L"");
      oAuthRequest0.addQuerystringParameter(""F{+:zZ|"", ""oauth_"");
      ParameterList parameterList0 = oAuthRequest0.getQueryStringParams();
}"
708,"    public Map<String, String> getOauthParameters() {
        return oauthParameters;
    }","  public void test13()  throws Throwable  {
      Verb verb0 = Verb.GET;
      OAuthRequest oAuthRequest0 = new OAuthRequest(verb0, ""realm"");
      Map<String, String> map0 = oAuthRequest0.getOauthParameters();
      oAuthRequest0.initMultipartPayload(""realm"", map0);
      Map<String, String> map1 = oAuthRequest0.getOauthParameters();
}"
709,"    public MultipartPayload getMultipartPayload() {
        return multipartPayload;
    }","  public void test14()  throws Throwable  {
      Verb verb0 = Verb.OPTIONS;
      OAuthRequest oAuthRequest0 = new OAuthRequest(verb0, ""?.*"");
      Map<String, String> map0 = oAuthRequest0.getHeaders();
      oAuthRequest0.initMultipartPayload(map0);
      MultipartPayload multipartPayload0 = oAuthRequest0.getMultipartPayload();
}"
710,"    public Map<String, String> getHeaders() {
        return headers;
    }","  public void test15()  throws Throwable  {
      Verb verb0 = Verb.DELETE;
      OAuthRequest oAuthRequest0 = new OAuthRequest(verb0, ""http://9Josz5m0o L"");
      oAuthRequest0.addHeader(""http://9Josz5m0o L"", ""4 :u>,"");
      Map<String, String> map0 = oAuthRequest0.getHeaders();
}"
711,"    public File getFilePayload() {
        return filePayload;
    }","  public void test16()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(""/tmp/Fs!lV$JE0h0https:/http:/+"");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, ""6ii](`TsY[^."");
      Verb verb0 = Verb.TRACE;
      OAuthRequest oAuthRequest0 = new OAuthRequest(verb0, """");
      File file0 = MockFile.createTempFile(""Fs!lV$JE0h"", ""https://http://+"");
      oAuthRequest0.setPayload(file0);
      File file1 = oAuthRequest0.getFilePayload();
}"
712,"    public File getFilePayload() {
        return filePayload;
    }","  public void test17()  throws Throwable  {
      System.setCurrentTimeMillis((-2091L));
      Verb verb0 = Verb.TRACE;
      OAuthRequest oAuthRequest0 = new OAuthRequest(verb0, """");
      File file0 = MockFile.createTempFile(""Fs!lV$JE0h"", ""https://http://+"");
      oAuthRequest0.setPayload(file0);
      File file1 = oAuthRequest0.getFilePayload();
}"
713,"    public File getFilePayload() {
        return filePayload;
    }","  public void test18()  throws Throwable  {
      Verb verb0 = Verb.PATCH;
      OAuthRequest oAuthRequest0 = new OAuthRequest(verb0, "":G@Ko[/"");
      MockFile mockFile0 = new MockFile("""");
      oAuthRequest0.setPayload((File) mockFile0);
      File file0 = oAuthRequest0.getFilePayload();
}"
714,"    public File getFilePayload() {
        return filePayload;
    }","  public void test19()  throws Throwable  {
      Verb verb0 = Verb.PATCH;
      OAuthRequest oAuthRequest0 = new OAuthRequest(verb0, ""7dXM"");
      File file0 = MockFile.createTempFile(""7dXM"", ""com.github.scribejava.core.model.ParameterList"");
      MockFile mockFile0 = new MockFile(file0, "".8wZ"");
      oAuthRequest0.setPayload((File) mockFile0);
      File file1 = oAuthRequest0.getFilePayload();
}"
715,"    public String getCompleteUrl() {
        return querystringParams.appendTo(url);
    }","  public void test20()  throws Throwable  {
      Verb verb0 = Verb.DELETE;
      OAuthRequest oAuthRequest0 = new OAuthRequest(verb0, """");
      String string0 = oAuthRequest0.getCompleteUrl();
}"
716,"    public String getCharset() {
        return charset == null ? Charset.defaultCharset().name() : charset;
    }","  public void test21()  throws Throwable  {
      Verb verb0 = Verb.PUT;
      OAuthRequest oAuthRequest0 = new OAuthRequest(verb0, """");
      oAuthRequest0.setCharset("""");
      String string0 = oAuthRequest0.getCharset();
}"
717,"    public byte[] getByteArrayPayload() {
        if (byteArrayPayload != null) {
            return byteArrayPayload;
        }
        final String body = bodyParams.asFormUrlEncodedString();
        try {
            return body.getBytes(getCharset());
        } catch (UnsupportedEncodingException uee) {
            throw new OAuthException(""Unsupported Charset: "" + getCharset(), uee);
        }
    }","  public void test22()  throws Throwable  {
      OAuthRequest oAuthRequest0 = new OAuthRequest((Verb) null, ""p9tWwFzz?r"");
      oAuthRequest0.addBodyParameter(""9[=!"", ""9[=!"");
      byte[] byteArray0 = oAuthRequest0.getByteArrayPayload();
}"
718,"    public ParameterList getBodyParams() {
        return bodyParams;
    }","  public void test23()  throws Throwable  {
      Verb verb0 = Verb.DELETE;
      OAuthRequest oAuthRequest0 = new OAuthRequest(verb0, ""http://9Josz5m0o L"");
      oAuthRequest0.addBodyParameter(""http://9Josz5m0o L"", """");
      ParameterList parameterList0 = oAuthRequest0.getBodyParams();
}"
719,"    public void setPayload(String payload) {
        resetPayload();
        stringPayload = payload;
    }","  public void test24()  throws Throwable  {
      Verb verb0 = Verb.POST;
      OAuthRequest oAuthRequest0 = new OAuthRequest(verb0, ""scope"");
      // Undeclared exception!
      try { 
        oAuthRequest0.setPayload((byte[]) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""com.github.scribejava.core.model.OAuthRequest"", e);
      }
  }"
720,"    public void initMultipartPayload() {
        this.multipartPayload = new MultipartPayload();
    }","  public void test25()  throws Throwable  {
      Verb verb0 = Verb.OPTIONS;
      OAuthRequest oAuthRequest0 = new OAuthRequest(verb0, ""com.github.scribejava.core.model.Response"");
      byte[] byteArray0 = new byte[5];
      ByteArrayBodyPartPayload byteArrayBodyPartPayload0 = new ByteArrayBodyPartPayload(byteArray0, """");
      Map<String, String> map0 = byteArrayBodyPartPayload0.getHeaders();
      // Undeclared exception!
      try { 
        oAuthRequest0.initMultipartPayload(map0);
        fail(""Expecting exception: UnsupportedOperationException"");
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.util.AbstractMap"", e);
      }
  }"
721,"    public void initMultipartPayload() {
        this.multipartPayload = new MultipartPayload();
    }","  public void test26()  throws Throwable  {
      Verb verb0 = Verb.DELETE;
      OAuthRequest oAuthRequest0 = new OAuthRequest(verb0, """");
      // Undeclared exception!
      try { 
        oAuthRequest0.initMultipartPayload((Map<String, String>) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""com.github.scribejava.core.httpclient.multipart.MultipartPayload"", e);
      }
  }"
722,"    public void initMultipartPayload() {
        this.multipartPayload = new MultipartPayload();
    }","  public void test27()  throws Throwable  {
      Verb verb0 = Verb.TRACE;
      OAuthRequest oAuthRequest0 = new OAuthRequest(verb0, ""http://"");
      byte[] byteArray0 = new byte[0];
      FileByteArrayBodyPartPayload fileByteArrayBodyPartPayload0 = new FileByteArrayBodyPartPayload(byteArray0, """");
      Map<String, String> map0 = fileByteArrayBodyPartPayload0.getHeaders();
      // Undeclared exception!
      try { 
        oAuthRequest0.initMultipartPayload(""http://"", map0);
        fail(""Expecting exception: UnsupportedOperationException"");
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.util.AbstractMap"", e);
      }
  }"
723,"    public void initMultipartPayload() {
        this.multipartPayload = new MultipartPayload();
    }","  public void test28()  throws Throwable  {
      Verb verb0 = Verb.GET;
      OAuthRequest oAuthRequest0 = new OAuthRequest(verb0, ""https://:443"");
      Map<String, String> map0 = oAuthRequest0.getOauthParameters();
      // Undeclared exception!
      try { 
        oAuthRequest0.initMultipartPayload(""d&O"", map0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // {'boundary'='d&O'} has invalid syntax. Should be '[0-9a-zA-Z'()+_,-./:=? ]{0,69}[0-9a-zA-Z'()+_,-./:=?]'.
         //
         verifyException(""com.github.scribejava.core.httpclient.multipart.MultipartUtils"", e);
      }
  }"
724,"    public void initMultipartPayload() {
        this.multipartPayload = new MultipartPayload();
    }","  public void test29()  throws Throwable  {
      Verb verb0 = Verb.PATCH;
      OAuthRequest oAuthRequest0 = new OAuthRequest(verb0, ""Content-Encoding"");
      byte[] byteArray0 = new byte[2];
      FileByteArrayBodyPartPayload fileByteArrayBodyPartPayload0 = new FileByteArrayBodyPartPayload(byteArray0, (byte) (-1), (byte) (-90), ""Content-Encoding"", ""Content-Encoding"");
      Map<String, String> map0 = fileByteArrayBodyPartPayload0.getHeaders();
      // Undeclared exception!
      try { 
        oAuthRequest0.initMultipartPayload(""Content-Encoding"", ""Content-Encoding"", map0);
        fail(""Expecting exception: UnsupportedOperationException"");
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.util.AbstractMap"", e);
      }
  }"
725,"    public void initMultipartPayload() {
        this.multipartPayload = new MultipartPayload();
    }","  public void test30()  throws Throwable  {
      Verb verb0 = Verb.GET;
      OAuthRequest oAuthRequest0 = new OAuthRequest(verb0, ""realm"");
      Map<String, String> map0 = oAuthRequest0.getOauthParameters();
      // Undeclared exception!
      try { 
        oAuthRequest0.initMultipartPayload(""&"", ""je1Hj*1Tfhh"", map0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // {'boundary'='je1Hj*1Tfhh'} has invalid syntax. Should be '[0-9a-zA-Z'()+_,-./:=? ]{0,69}[0-9a-zA-Z'()+_,-./:=?]'.
         //
         verifyException(""com.github.scribejava.core.httpclient.multipart.MultipartUtils"", e);
      }
  }"
726,"    public void initMultipartPayload() {
        this.multipartPayload = new MultipartPayload();
    }","  public void test31()  throws Throwable  {
      Verb verb0 = Verb.GET;
      OAuthRequest oAuthRequest0 = new OAuthRequest(verb0, ""sbm<x*zzW%"");
      // Undeclared exception!
      try { 
        oAuthRequest0.initMultipartPayload(""AmE.Pd4s0w70sYMz"", """");
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // {'boundary'=''} has invalid syntax. Should be '[0-9a-zA-Z'()+_,-./:=? ]{0,69}[0-9a-zA-Z'()+_,-./:=?]'.
         //
         verifyException(""com.github.scribejava.core.httpclient.multipart.MultipartUtils"", e);
      }
  }"
727,"    public String getSanitizedUrl() {
        if (url.startsWith(""http://"") && (url.endsWith("":80"") || url.contains("":80/""))) {
            return url.replaceAll(""\\?.*"", """").replaceAll("":80"", """");
        } else if (url.startsWith(""https://"") && (url.endsWith("":443"") || url.contains("":443/""))) {
            return url.replaceAll(""\\?.*"", """").replaceAll("":443"", """");
        } else {
            return url.replaceAll(""\\?.*"", """");
        }
    }","  public void test32()  throws Throwable  {
      Verb verb0 = Verb.TRACE;
      OAuthRequest oAuthRequest0 = new OAuthRequest(verb0, (String) null);
      // Undeclared exception!
      try { 
        oAuthRequest0.getSanitizedUrl();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
      }
  }"
728,"    public ParameterList getQueryStringParams() {
        try {
            final ParameterList result = new ParameterList();
            final String queryString = new URL(url).getQuery();
            result.addQuerystring(queryString);
            result.addAll(querystringParams);
            return result;
        } catch (MalformedURLException mue) {
            throw new OAuthException(""Malformed URL"", mue);
        }
    }","  public void test33()  throws Throwable  {
      Verb verb0 = Verb.TRACE;
      OAuthRequest oAuthRequest0 = new OAuthRequest(verb0, """");
      // Undeclared exception!
      try { 
        oAuthRequest0.getQueryStringParams();
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // Malformed URL
         //
         verifyException(""com.github.scribejava.core.model.OAuthRequest"", e);
      }
  }"
729,"    public ParameterList getQueryStringParams() {
        try {
            final ParameterList result = new ParameterList();
            final String queryString = new URL(url).getQuery();
            result.addQuerystring(queryString);
            result.addAll(querystringParams);
            return result;
        } catch (MalformedURLException mue) {
            throw new OAuthException(""Malformed URL"", mue);
        }
    }","  public void test34()  throws Throwable  {
      Verb verb0 = Verb.DELETE;
      OAuthRequest oAuthRequest0 = new OAuthRequest(verb0, ""https://xVN,gU@v$K'?C+%Vo2"");
      // Undeclared exception!
      try { 
        oAuthRequest0.getQueryStringParams();
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // URLDecoder: Illegal hex characters in escape (%) pattern - For input string: \""Vo\""
         //
         verifyException(""java.net.URLDecoder"", e);
      }
  }"
730,"    public String getCompleteUrl() {
        return querystringParams.appendTo(url);
    }","  public void test35()  throws Throwable  {
      Verb verb0 = Verb.OPTIONS;
      OAuthRequest oAuthRequest0 = new OAuthRequest(verb0, (String) null);
      // Undeclared exception!
      try { 
        oAuthRequest0.getCompleteUrl();
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Cannot append to null URL
         //
         verifyException(""com.github.scribejava.core.utils.Preconditions"", e);
      }
  }"
731,"    public byte[] getByteArrayPayload() {
        if (byteArrayPayload != null) {
            return byteArrayPayload;
        }
        final String body = bodyParams.asFormUrlEncodedString();
        try {
            return body.getBytes(getCharset());
        } catch (UnsupportedEncodingException uee) {
            throw new OAuthException(""Unsupported Charset: "" + getCharset(), uee);
        }
    }","  public void test36()  throws Throwable  {
      Verb verb0 = Verb.TRACE;
      OAuthRequest oAuthRequest0 = new OAuthRequest(verb0, """");
      oAuthRequest0.addBodyParameter("""", (String) null);
      // Undeclared exception!
      try { 
        oAuthRequest0.getByteArrayPayload();
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Cannot encode null object
         //
         verifyException(""com.github.scribejava.core.utils.Preconditions"", e);
      }
  }"
732,"    public void addParameter(String key, String value) {
        if (verb.isPermitBody()) {
            bodyParams.add(key, value);
        } else {
            querystringParams.add(key, value);
        }
    }","  public void test37()  throws Throwable  {
      OAuthRequest oAuthRequest0 = new OAuthRequest((Verb) null, ""s"");
      // Undeclared exception!
      try { 
        oAuthRequest0.addParameter(""7T!T^l<lfN"", ""7p!)VJTz"");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""com.github.scribejava.core.model.OAuthRequest"", e);
      }
  }"
733,"    public void addHeader(String key, String value) {
        headers.put(key, value);
    }","  public void test38()  throws Throwable  {
      Verb verb0 = Verb.TRACE;
      OAuthRequest oAuthRequest0 = new OAuthRequest(verb0, (String) null);
      // Undeclared exception!
      try { 
        oAuthRequest0.addHeader((String) null, (String) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
734,"    public String getCharset() {
        return charset == null ? Charset.defaultCharset().name() : charset;
    }","  public void test39()  throws Throwable  {
      Verb verb0 = Verb.HEAD;
      OAuthRequest oAuthRequest0 = new OAuthRequest(verb0, ""H-=s4/T])4,{cR'3"");
      oAuthRequest0.setCharset(""H-=s4/T])4,{cR'3"");
      String string0 = oAuthRequest0.getCharset();
}"
735,"    public String getCharset() {
        return charset == null ? Charset.defaultCharset().name() : charset;
    }","  public void test40()  throws Throwable  {
      OAuthRequest oAuthRequest0 = new OAuthRequest((Verb) null, ""p9tWwFzz?r"");
      String string0 = oAuthRequest0.getCharset();
}"
736,"    public String getUrl() {
        return url;
    }","  public void test41()  throws Throwable  {
      OAuthRequest oAuthRequest0 = new OAuthRequest((Verb) null, ""p9tWwFzz?r"");
      oAuthRequest0.initMultipartPayload();
}"
737,"    public Verb getVerb() {
        return verb;
    }","  public void test42()  throws Throwable  {
      OAuthRequest oAuthRequest0 = new OAuthRequest((Verb) null, ""p9tWwFzz?r"");
      oAuthRequest0.getVerb();
  }"
738,"    public String getUrl() {
        return url;
    }","  public void test43()  throws Throwable  {
      Verb verb0 = Verb.DELETE;
      OAuthRequest oAuthRequest0 = new OAuthRequest(verb0, ""#j~O`X6bd;B"");
      String string0 = oAuthRequest0.getUrl();
}"
739,"    public void addBodyPartPayloadInMultipartPayload(BodyPartPayload bodyPartPayload) {
        multipartPayload.addBodyPart(bodyPartPayload);
    }","  public void test44()  throws Throwable  {
      Verb verb0 = Verb.TRACE;
      OAuthRequest oAuthRequest0 = new OAuthRequest(verb0, """");
      byte[] byteArray0 = new byte[6];
      ByteArrayBodyPartPayload byteArrayBodyPartPayload0 = new ByteArrayBodyPartPayload(byteArray0);
      // Undeclared exception!
      try { 
        oAuthRequest0.addBodyPartPayloadInMultipartPayload(byteArrayBodyPartPayload0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""com.github.scribejava.core.model.OAuthRequest"", e);
      }
  }"
740,"    public byte[] getByteArrayPayload() {
        if (byteArrayPayload != null) {
            return byteArrayPayload;
        }
        final String body = bodyParams.asFormUrlEncodedString();
        try {
            return body.getBytes(getCharset());
        } catch (UnsupportedEncodingException uee) {
            throw new OAuthException(""Unsupported Charset: "" + getCharset(), uee);
        }
    }","  public void test45()  throws Throwable  {
      Verb verb0 = Verb.PUT;
      OAuthRequest oAuthRequest0 = new OAuthRequest(verb0, ""http://"");
      oAuthRequest0.setCharset(""http://"");
      // Undeclared exception!
      try { 
        oAuthRequest0.getByteArrayPayload();
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // Unsupported Charset: http://
         //
         verifyException(""com.github.scribejava.core.model.OAuthRequest"", e);
      }
  }"
741,"    public byte[] getByteArrayPayload() {
        if (byteArrayPayload != null) {
            return byteArrayPayload;
        }
        final String body = bodyParams.asFormUrlEncodedString();
        try {
            return body.getBytes(getCharset());
        } catch (UnsupportedEncodingException uee) {
            throw new OAuthException(""Unsupported Charset: "" + getCharset(), uee);
        }
    }","  public void test46()  throws Throwable  {
      Verb verb0 = Verb.PUT;
      OAuthRequest oAuthRequest0 = new OAuthRequest(verb0, """");
      byte[] byteArray0 = new byte[0];
      oAuthRequest0.setPayload(byteArray0);
      byte[] byteArray1 = oAuthRequest0.getByteArrayPayload();
}"
742,"    public String getSanitizedUrl() {
        if (url.startsWith(""http://"") && (url.endsWith("":80"") || url.contains("":80/""))) {
            return url.replaceAll(""\\?.*"", """").replaceAll("":80"", """");
        } else if (url.startsWith(""https://"") && (url.endsWith("":443"") || url.contains("":443/""))) {
            return url.replaceAll(""\\?.*"", """").replaceAll("":443"", """");
        } else {
            return url.replaceAll(""\\?.*"", """");
        }
    }","  public void test47()  throws Throwable  {
      Verb verb0 = Verb.DELETE;
      OAuthRequest oAuthRequest0 = new OAuthRequest(verb0, ""https://ht&s:163"");
      String string0 = oAuthRequest0.getSanitizedUrl();
}"
743,"    public String getSanitizedUrl() {
        if (url.startsWith(""http://"") && (url.endsWith("":80"") || url.contains("":80/""))) {
            return url.replaceAll(""\\?.*"", """").replaceAll("":80"", """");
        } else if (url.startsWith(""https://"") && (url.endsWith("":443"") || url.contains("":443/""))) {
            return url.replaceAll(""\\?.*"", """").replaceAll("":443"", """");
        } else {
            return url.replaceAll(""\\?.*"", """");
        }
    }","  public void test48()  throws Throwable  {
      Verb verb0 = Verb.PUT;
      OAuthRequest oAuthRequest0 = new OAuthRequest(verb0, ""https://:443/"");
      String string0 = oAuthRequest0.getSanitizedUrl();
}"
744,"    public String getSanitizedUrl() {
        if (url.startsWith(""http://"") && (url.endsWith("":80"") || url.contains("":80/""))) {
            return url.replaceAll(""\\?.*"", """").replaceAll("":80"", """");
        } else if (url.startsWith(""https://"") && (url.endsWith("":443"") || url.contains("":443/""))) {
            return url.replaceAll(""\\?.*"", """").replaceAll("":443"", """");
        } else {
            return url.replaceAll(""\\?.*"", """");
        }
    }","  public void test49()  throws Throwable  {
      Verb verb0 = Verb.GET;
      OAuthRequest oAuthRequest0 = new OAuthRequest(verb0, ""https://:443"");
      String string0 = oAuthRequest0.getSanitizedUrl();
}"
745,"    public String getSanitizedUrl() {
        if (url.startsWith(""http://"") && (url.endsWith("":80"") || url.contains("":80/""))) {
            return url.replaceAll(""\\?.*"", """").replaceAll("":80"", """");
        } else if (url.startsWith(""https://"") && (url.endsWith("":443"") || url.contains("":443/""))) {
            return url.replaceAll(""\\?.*"", """").replaceAll("":443"", """");
        } else {
            return url.replaceAll(""\\?.*"", """");
        }
    }","  public void test50()  throws Throwable  {
      Verb verb0 = Verb.PUT;
      OAuthRequest oAuthRequest0 = new OAuthRequest(verb0, ""http://"");
      String string0 = oAuthRequest0.getSanitizedUrl();
}"
746,"    public String getSanitizedUrl() {
        if (url.startsWith(""http://"") && (url.endsWith("":80"") || url.contains("":80/""))) {
            return url.replaceAll(""\\?.*"", """").replaceAll("":80"", """");
        } else if (url.startsWith(""https://"") && (url.endsWith("":443"") || url.contains("":443/""))) {
            return url.replaceAll(""\\?.*"", """").replaceAll("":443"", """");
        } else {
            return url.replaceAll(""\\?.*"", """");
        }
    }","  public void test51()  throws Throwable  {
      Verb verb0 = Verb.OPTIONS;
      OAuthRequest oAuthRequest0 = new OAuthRequest(verb0, ""http://:80/"");
      String string0 = oAuthRequest0.getSanitizedUrl();
}"
747,"    public String getSanitizedUrl() {
        if (url.startsWith(""http://"") && (url.endsWith("":80"") || url.contains("":80/""))) {
            return url.replaceAll(""\\?.*"", """").replaceAll("":80"", """");
        } else if (url.startsWith(""https://"") && (url.endsWith("":443"") || url.contains("":443/""))) {
            return url.replaceAll(""\\?.*"", """").replaceAll("":443"", """");
        } else {
            return url.replaceAll(""\\?.*"", """");
        }
    }","  public void test52()  throws Throwable  {
      Verb verb0 = Verb.POST;
      OAuthRequest oAuthRequest0 = new OAuthRequest(verb0, ""http://Ss5m0VL:80"");
      String string0 = oAuthRequest0.getSanitizedUrl();
}"
748,"    public String getRealm() {
        return realm;
    }","  public void test53()  throws Throwable  {
      Verb verb0 = Verb.PUT;
      OAuthRequest oAuthRequest0 = new OAuthRequest(verb0, ""@Request(%s %s)"");
      oAuthRequest0.addParameter(""@Request(PUT @Request(%s %s))"", ""@Request(%s %s)"");
}"
749,"    public String getStringPayload() {
        return stringPayload;
    }","  public void test54()  throws Throwable  {
      Verb verb0 = Verb.POST;
      OAuthRequest oAuthRequest0 = new OAuthRequest(verb0, ""http://Ss5m0VL:80"");
      oAuthRequest0.addOAuthParameter(""realm"", ""http://Ss5m0VL:80"");
}"
750,"    public String getRealm() {
        return realm;
    }","  public void test55()  throws Throwable  {
      Verb verb0 = Verb.HEAD;
      OAuthRequest oAuthRequest0 = new OAuthRequest(verb0, ""scope"");
      oAuthRequest0.addOAuthParameter(""scope"", ""scope"");
}"
751,"    public void addOAuthParameter(String key, String value) {
        oauthParameters.put(checkKey(key), value);
    }","  public void test56()  throws Throwable  {
      Verb verb0 = Verb.OPTIONS;
      OAuthRequest oAuthRequest0 = new OAuthRequest(verb0, ""N#JUcz!vT*QOUW;&&"");
      // Undeclared exception!
      try { 
        oAuthRequest0.addOAuthParameter(""iealm"", ""iealm"");
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // OAuth parameters must either be 'scope', 'realm' or start with 'oauth_'
         //
         verifyException(""com.github.scribejava.core.model.OAuthRequest"", e);
      }
  }"
752,"    public String getStringPayload() {
        return stringPayload;
    }","  public void test57()  throws Throwable  {
      Verb verb0 = Verb.POST;
      OAuthRequest oAuthRequest0 = new OAuthRequest(verb0, ""oauth_<zs4f"");
      oAuthRequest0.addOAuthParameter(""oauth_<zs4f"", ""oauth_<zs4f"");
}"
753,"    public String getRealm() {
        return realm;
    }","  public void test58()  throws Throwable  {
      Verb verb0 = Verb.OPTIONS;
      OAuthRequest oAuthRequest0 = new OAuthRequest(verb0, ""_"");
      oAuthRequest0.initMultipartPayload(""_"", ""_"");
}"
754,"    public void addOAuthParameter(String key, String value) {
        oauthParameters.put(checkKey(key), value);
    }","  public void test59()  throws Throwable  {
      Verb verb0 = Verb.DELETE;
      OAuthRequest oAuthRequest0 = new OAuthRequest(verb0, ""?.*"");
      // Undeclared exception!
      try { 
        oAuthRequest0.addOAuthParameter((String) null, """");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
      }
  }"
755,"    public String getUrl() {
        return url;
    }","  public void test60()  throws Throwable  {
      Verb verb0 = Verb.POST;
      OAuthRequest oAuthRequest0 = new OAuthRequest(verb0, """");
      oAuthRequest0.setMultipartPayload((MultipartPayload) null);
}"
756,"    public String getCompleteUrl() {
        return querystringParams.appendTo(url);
    }","  public void test61()  throws Throwable  {
      Verb verb0 = Verb.OPTIONS;
      OAuthRequest oAuthRequest0 = new OAuthRequest(verb0, ""http://:80/"");
      String string0 = oAuthRequest0.getCompleteUrl();
}"
757,"    public File getFilePayload() {
        return filePayload;
    }","  public void test62()  throws Throwable  {
      Verb verb0 = Verb.OPTIONS;
      OAuthRequest oAuthRequest0 = new OAuthRequest(verb0, ""http://:80/"");
      File file0 = oAuthRequest0.getFilePayload();
}"
758,"    public ParameterList getQueryStringParams() {
        try {
            final ParameterList result = new ParameterList();
            final String queryString = new URL(url).getQuery();
            result.addQuerystring(queryString);
            result.addAll(querystringParams);
            return result;
        } catch (MalformedURLException mue) {
            throw new OAuthException(""Malformed URL"", mue);
        }
    }","  public void test63()  throws Throwable  {
      Verb verb0 = Verb.OPTIONS;
      OAuthRequest oAuthRequest0 = new OAuthRequest(verb0, ""http://:80/"");
      ParameterList parameterList0 = oAuthRequest0.getQueryStringParams();
}"
759,"    public String getStringPayload() {
        return stringPayload;
    }","  public void test64()  throws Throwable  {
      Verb verb0 = Verb.HEAD;
      OAuthRequest oAuthRequest0 = new OAuthRequest(verb0, ""H-=s4/T])4,{cR'3"");
      byte[] byteArray0 = new byte[5];
      ByteArrayBodyPartPayload byteArrayBodyPartPayload0 = new ByteArrayBodyPartPayload(byteArray0, (byte)99, (byte)0, """");
      oAuthRequest0.setBodyPartPayloadInMultipartPayload(byteArrayBodyPartPayload0);
}"
760,"    public ParameterList getBodyParams() {
        return bodyParams;
    }","  public void test65()  throws Throwable  {
      Verb verb0 = Verb.OPTIONS;
      OAuthRequest oAuthRequest0 = new OAuthRequest(verb0, ""http://:80/"");
      ParameterList parameterList0 = oAuthRequest0.getBodyParams();
}"
761,"    public Verb getVerb() {
        return verb;
    }","  public void test66()  throws Throwable  {
      Verb verb0 = Verb.OPTIONS;
      OAuthRequest oAuthRequest0 = new OAuthRequest(verb0, ""http://:80/"");
      oAuthRequest0.initMultipartPayload(""http://:80/"", ""http:///"", (Map<String, String>) null);
}"
762,"    public void initMultipartPayload() {
        this.multipartPayload = new MultipartPayload();
    }","  public void test67()  throws Throwable  {
      Verb verb0 = Verb.POST;
      OAuthRequest oAuthRequest0 = new OAuthRequest(verb0, """");
      // Undeclared exception!
      try { 
        oAuthRequest0.initMultipartPayload("""");
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // {'boundary'=''} has invalid syntax. Should be '[0-9a-zA-Z'()+_,-./:=? ]{0,69}[0-9a-zA-Z'()+_,-./:=?]'.
         //
         verifyException(""com.github.scribejava.core.httpclient.multipart.MultipartUtils"", e);
      }
  }"
763,"    public MultipartPayload getMultipartPayload() {
        return multipartPayload;
    }","  public void test68()  throws Throwable  {
      Verb verb0 = Verb.OPTIONS;
      OAuthRequest oAuthRequest0 = new OAuthRequest(verb0, ""_"");
      MultipartPayload multipartPayload0 = oAuthRequest0.getMultipartPayload();
}"
764,"    public String toString() {
        return String.format(""@Request(%s %s)"", getVerb(), getUrl());
    }","  public void test69()  throws Throwable  {
      Verb verb0 = Verb.OPTIONS;
      OAuthRequest oAuthRequest0 = new OAuthRequest(verb0, ""http://:80/"");
      String string0 = oAuthRequest0.toString();
}"
765,"    public String getRealm() {
        return realm;
    }","  public void test70()  throws Throwable  {
      Verb verb0 = Verb.HEAD;
      OAuthRequest oAuthRequest0 = new OAuthRequest(verb0, ""H-=s4/T])4,{cR'3"");
      String string0 = oAuthRequest0.getRealm();
}"
766,"    public String getStringPayload() {
        return stringPayload;
    }","  public void test71()  throws Throwable  {
      OAuthRequest oAuthRequest0 = new OAuthRequest((Verb) null, ""s"");
      String string0 = oAuthRequest0.getStringPayload();
}"
767,"    public static OAuth2Error parseFrom(String errorString) {
        for (OAuth2Error error : VALUES) {
            if (error.errorString.equals(errorString)) {
                return error;
            }
        }
        throw new IllegalArgumentException(""there is no knowlege about '"" + errorString + ""' Error"");
    }","  public void test0()  throws Throwable  {
      OAuth2Error oAuth2Error0 = OAuth2Error.parseFrom(""slow_down"");
}"
768,,"  public void test1()  throws Throwable  {
      OAuth2Error[] oAuth2ErrorArray0 = OAuth2Error.values();
}"
769,"    public String getErrorString() {
        return errorString;
    }","  public void test2()  throws Throwable  {
      OAuth2Error oAuth2Error0 = OAuth2Error.valueOf(""UNSUPPORTED_GRANT_TYPE"");
}"
770,"    public static OAuth2Error parseFrom(String errorString) {
        for (OAuth2Error error : VALUES) {
            if (error.errorString.equals(errorString)) {
                return error;
            }
        }
        throw new IllegalArgumentException(""there is no knowlege about '"" + errorString + ""' Error"");
    }","  public void test3()  throws Throwable  {
      OAuth2Error oAuth2Error0 = OAuth2Error.parseFrom(""unsupported_token_type"");
}"
771,"    public static OAuth2Error parseFrom(String errorString) {
        for (OAuth2Error error : VALUES) {
            if (error.errorString.equals(errorString)) {
                return error;
            }
        }
        throw new IllegalArgumentException(""there is no knowlege about '"" + errorString + ""' Error"");
    }","  public void test4()  throws Throwable  {
      // Undeclared exception!
      try { 
        OAuth2Error.parseFrom(""invblid_token"");
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // there is no knowlege about 'invblid_token' Error
         //
         verifyException(""com.github.scribejava.core.oauth2.OAuth2Error"", e);
      }
  }"
772,"    public String getErrorString() {
        return errorString;
    }","  public void test5()  throws Throwable  {
      OAuth2Error oAuth2Error0 = OAuth2Error.UNSUPPORTED_TOKEN_TYPE;
      String string0 = oAuth2Error0.getErrorString();
}"
773,"    public void addClientAuthentication(OAuthRequest request, String apiKey, String apiSecret) {
        if (apiKey != null && apiSecret != null) {
            request.addHeader(OAuthConstants.HEADER, OAuthConstants.BASIC + ' '
                    + Base64.encode(String.format(""%s:%s"", apiKey, apiSecret).getBytes(Charset.forName(""UTF-8""))));
        }
    }","  public void test0()  throws Throwable  {
      HttpBasicAuthenticationScheme httpBasicAuthenticationScheme0 = HttpBasicAuthenticationScheme.instance();
      // Undeclared exception!
      try { 
        httpBasicAuthenticationScheme0.addClientAuthentication((OAuthRequest) null, ""PATCH"", ""kowNB4rpE%Eju<0- "");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""com.github.scribejava.core.oauth2.clientauthentication.HttpBasicAuthenticationScheme"", e);
      }
  }"
774,"    public void addClientAuthentication(OAuthRequest request, String apiKey, String apiSecret) {
        if (apiKey != null && apiSecret != null) {
            request.addHeader(OAuthConstants.HEADER, OAuthConstants.BASIC + ' '
                    + Base64.encode(String.format(""%s:%s"", apiKey, apiSecret).getBytes(Charset.forName(""UTF-8""))));
        }
    }","  public void test1()  throws Throwable  {
      HttpBasicAuthenticationScheme httpBasicAuthenticationScheme0 = HttpBasicAuthenticationScheme.instance();
      Verb verb0 = Verb.OPTIONS;
      OAuthRequest oAuthRequest0 = new OAuthRequest(verb0, ""pm5!$=KjP2y`^8QI_QB"");
      httpBasicAuthenticationScheme0.addClientAuthentication(oAuthRequest0, ""pm5!$=KjP2y`^8QI_QB"", (String) null);
}"
775,"    protected HttpBasicAuthenticationScheme() {
    }","  public void test2()  throws Throwable  {
      HttpBasicAuthenticationScheme httpBasicAuthenticationScheme0 = new HttpBasicAuthenticationScheme();
  }"
776,"    public void addClientAuthentication(OAuthRequest request, String apiKey, String apiSecret) {
        if (apiKey != null && apiSecret != null) {
            request.addHeader(OAuthConstants.HEADER, OAuthConstants.BASIC + ' '
                    + Base64.encode(String.format(""%s:%s"", apiKey, apiSecret).getBytes(Charset.forName(""UTF-8""))));
        }
    }","  public void test3()  throws Throwable  {
      HttpBasicAuthenticationScheme httpBasicAuthenticationScheme0 = HttpBasicAuthenticationScheme.instance();
      Verb verb0 = Verb.GET;
      OAuthRequest oAuthRequest0 = new OAuthRequest(verb0, ""`XAA6+BVIM\\~*(5:>J"");
      httpBasicAuthenticationScheme0.addClientAuthentication(oAuthRequest0, (String) null, ""`XAA6+BVIM\\~*(5:>J"");
}"
777,"    public void addClientAuthentication(OAuthRequest request, String apiKey, String apiSecret) {
        request.addParameter(OAuthConstants.CLIENT_ID, apiKey);
        if (apiSecret != null) {
            request.addParameter(OAuthConstants.CLIENT_SECRET, apiSecret);
        }
    }","  public void test0()  throws Throwable  {
      RequestBodyAuthenticationScheme requestBodyAuthenticationScheme0 = RequestBodyAuthenticationScheme.instance();
      // Undeclared exception!
      try { 
        requestBodyAuthenticationScheme0.addClientAuthentication((OAuthRequest) null, ""Q;Uf]k _%2A`PYP"", ""Q;Uf]k _%2A`PYP"");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""com.github.scribejava.core.oauth2.clientauthentication.RequestBodyAuthenticationScheme"", e);
      }
  }"
778,"    public void addClientAuthentication(OAuthRequest request, String apiKey, String apiSecret) {
        request.addParameter(OAuthConstants.CLIENT_ID, apiKey);
        if (apiSecret != null) {
            request.addParameter(OAuthConstants.CLIENT_SECRET, apiSecret);
        }
    }","  public void test1()  throws Throwable  {
      RequestBodyAuthenticationScheme requestBodyAuthenticationScheme0 = RequestBodyAuthenticationScheme.instance();
      Verb verb0 = Verb.PATCH;
      OAuthRequest oAuthRequest0 = new OAuthRequest(verb0, """");
      requestBodyAuthenticationScheme0.addClientAuthentication(oAuthRequest0, """", """");
}"
779,"    public void addClientAuthentication(OAuthRequest request, String apiKey, String apiSecret) {
        request.addParameter(OAuthConstants.CLIENT_ID, apiKey);
        if (apiSecret != null) {
            request.addParameter(OAuthConstants.CLIENT_SECRET, apiSecret);
        }
    }","  public void test2()  throws Throwable  {
      RequestBodyAuthenticationScheme requestBodyAuthenticationScheme0 = RequestBodyAuthenticationScheme.instance();
      Verb verb0 = Verb.PATCH;
      OAuthRequest oAuthRequest0 = new OAuthRequest(verb0, """");
      requestBodyAuthenticationScheme0.addClientAuthentication(oAuthRequest0, """", (String) null);
}"
780,"    public void addClientAuthentication(OAuthRequest request, String apiKey, String apiSecret) {
        request.addParameter(OAuthConstants.CLIENT_ID, apiKey);
        if (apiSecret != null) {
            request.addParameter(OAuthConstants.CLIENT_SECRET, apiSecret);
        }
    }","  public void test3()  throws Throwable  {
      RequestBodyAuthenticationScheme requestBodyAuthenticationScheme0 = new RequestBodyAuthenticationScheme();
      Verb verb0 = Verb.OPTIONS;
      OAuthRequest oAuthRequest0 = new OAuthRequest(verb0, ""e2-=weT:/)|B"");
      requestBodyAuthenticationScheme0.addClientAuthentication(oAuthRequest0, ""e2-=weT:/)|B"", ""vm;;k[Uucn3LdW<"");
}"
781,"    public void signRequest(String accessToken, OAuthRequest request) {
        request.addHeader(OAuthConstants.HEADER, ""Bearer "" + accessToken);
    }","  public void test0()  throws Throwable  {
      BearerSignatureAuthorizationRequestHeaderField bearerSignatureAuthorizationRequestHeaderField0 = new BearerSignatureAuthorizationRequestHeaderField();
      Verb verb0 = Verb.POST;
      OAuthRequest oAuthRequest0 = new OAuthRequest(verb0, """");
      bearerSignatureAuthorizationRequestHeaderField0.signRequest("""", oAuthRequest0);
}"
782,"    public void signRequest(String accessToken, OAuthRequest request) {
        request.addHeader(OAuthConstants.HEADER, ""Bearer "" + accessToken);
    }","  public void test1()  throws Throwable  {
      BearerSignatureAuthorizationRequestHeaderField bearerSignatureAuthorizationRequestHeaderField0 = BearerSignatureAuthorizationRequestHeaderField.instance();
      // Undeclared exception!
      try { 
        bearerSignatureAuthorizationRequestHeaderField0.signRequest(""B?fPPCx,hN:Z]ei"", (OAuthRequest) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""com.github.scribejava.core.oauth2.bearersignature.BearerSignatureAuthorizationRequestHeaderField"", e);
      }
  }"
783,"    public void signRequest(String accessToken, OAuthRequest request) {
        request.addQuerystringParameter(OAuthConstants.ACCESS_TOKEN, accessToken);
    }","  public void test0()  throws Throwable  {
      BearerSignatureURIQueryParameter bearerSignatureURIQueryParameter0 = BearerSignatureURIQueryParameter.instance();
      // Undeclared exception!
      try { 
        bearerSignatureURIQueryParameter0.signRequest(""WBA?W7;QE^vi`qD_M("", (OAuthRequest) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""com.github.scribejava.core.oauth2.bearersignature.BearerSignatureURIQueryParameter"", e);
      }
  }"
784,"    public void signRequest(String accessToken, OAuthRequest request) {
        request.addQuerystringParameter(OAuthConstants.ACCESS_TOKEN, accessToken);
    }","  public void test1()  throws Throwable  {
      BearerSignatureURIQueryParameter bearerSignatureURIQueryParameter0 = BearerSignatureURIQueryParameter.instance();
      Verb verb0 = Verb.DELETE;
      OAuthRequest oAuthRequest0 = new OAuthRequest(verb0, "":443"");
      bearerSignatureURIQueryParameter0.signRequest(""WBA?W7;QE^vi`qD_M("", oAuthRequest0);
}"
785,"    protected BearerSignatureURIQueryParameter() {
    }","  public void test2()  throws Throwable  {
      BearerSignatureURIQueryParameter bearerSignatureURIQueryParameter0 = new BearerSignatureURIQueryParameter();
  }"
786,"    protected String internalEncodeUrlWithoutPadding(byte[] bytes) {
        return BASE64_URL_ENCODER_WITHOUT_PADDING.encodeToString(bytes);
    }","  public void test0()  throws Throwable  {
      CommonsCodecBase64 commonsCodecBase64_0 = new CommonsCodecBase64();
      String string0 = commonsCodecBase64_0.internalEncodeUrlWithoutPadding((byte[]) null);
}"
787,"    protected String internalEncodeUrlWithoutPadding(byte[] bytes) {
        return BASE64_URL_ENCODER_WITHOUT_PADDING.encodeToString(bytes);
    }","  public void test1()  throws Throwable  {
      CommonsCodecBase64 commonsCodecBase64_0 = new CommonsCodecBase64();
      byte[] byteArray0 = new byte[0];
      String string0 = commonsCodecBase64_0.internalEncodeUrlWithoutPadding(byteArray0);
}"
788,"    protected String internalEncode(byte[] bytes) {
        return BASE64_ENCODER.encodeToString(bytes);
    }","  public void test2()  throws Throwable  {
      CommonsCodecBase64 commonsCodecBase64_0 = new CommonsCodecBase64();
      String string0 = commonsCodecBase64_0.internalEncode((byte[]) null);
}"
789,"    protected String internalEncode(byte[] bytes) {
        return BASE64_ENCODER.encodeToString(bytes);
    }","  public void test3()  throws Throwable  {
      CommonsCodecBase64 commonsCodecBase64_0 = new CommonsCodecBase64();
      byte[] byteArray0 = new byte[0];
      String string0 = commonsCodecBase64_0.internalEncode(byteArray0);
}"
790,"    protected String internalEncode(byte[] bytes) {
        return BASE64_ENCODER.encodeToString(bytes);
    }","  public void test4()  throws Throwable  {
      CommonsCodecBase64 commonsCodecBase64_0 = new CommonsCodecBase64();
      byte[] byteArray0 = new byte[38];
      String string0 = commonsCodecBase64_0.internalEncode(byteArray0);
}"
791,"    static boolean isAvailable() {
        try {
            Class.forName(""org.apache.commons.codec.binary.Base64"", false, CommonsCodecBase64.class.getClassLoader());
            return true;
        } catch (ClassNotFoundException cnfE) {
            return false;
        }
    }","  public void test5()  throws Throwable  {
      boolean boolean0 = CommonsCodecBase64.isAvailable();
}"
792,"    protected String internalEncodeUrlWithoutPadding(byte[] bytes) {
        return BASE64_URL_ENCODER_WITHOUT_PADDING.encodeToString(bytes);
    }","  public void test6()  throws Throwable  {
      CommonsCodecBase64 commonsCodecBase64_0 = new CommonsCodecBase64();
      byte[] byteArray0 = new byte[38];
      String string0 = commonsCodecBase64_0.internalEncodeUrlWithoutPadding(byteArray0);
}"
793,"    protected String internalEncodeUrlWithoutPadding(byte[] bytes) {
        String string = DatatypeConverter.printBase64Binary(bytes);
        while (string.endsWith(""="")) {
            string = string.substring(0, string.length() - 1);
        }
        return string.replace('+', '-').replace('/', '_');
    }","  public void test0()  throws Throwable  {
      Jaxb230Base64 jaxb230Base64_0 = new Jaxb230Base64();
      byte[] byteArray0 = new byte[0];
      String string0 = jaxb230Base64_0.internalEncodeUrlWithoutPadding(byteArray0);
}"
794,"    protected String internalEncode(byte[] bytes) {
        return DatatypeConverter.printBase64Binary(bytes);
    }","  public void test1()  throws Throwable  {
      Jaxb230Base64 jaxb230Base64_0 = new Jaxb230Base64();
      byte[] byteArray0 = new byte[0];
      String string0 = jaxb230Base64_0.internalEncode(byteArray0);
}"
795,"    protected String internalEncodeUrlWithoutPadding(byte[] bytes) {
        String string = DatatypeConverter.printBase64Binary(bytes);
        while (string.endsWith(""="")) {
            string = string.substring(0, string.length() - 1);
        }
        return string.replace('+', '-').replace('/', '_');
    }","  public void test2()  throws Throwable  {
      Jaxb230Base64 jaxb230Base64_0 = new Jaxb230Base64();
      // Undeclared exception!
      try { 
        jaxb230Base64_0.internalEncodeUrlWithoutPadding((byte[]) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""javax.xml.bind.DatatypeConverterImpl"", e);
      }
  }"
796,"    protected String internalEncode(byte[] bytes) {
        return DatatypeConverter.printBase64Binary(bytes);
    }","  public void test3()  throws Throwable  {
      Jaxb230Base64 jaxb230Base64_0 = new Jaxb230Base64();
      // Undeclared exception!
      try { 
        jaxb230Base64_0.internalEncode((byte[]) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""javax.xml.bind.DatatypeConverterImpl"", e);
      }
  }"
797,"    protected String internalEncodeUrlWithoutPadding(byte[] bytes) {
        String string = DatatypeConverter.printBase64Binary(bytes);
        while (string.endsWith(""="")) {
            string = string.substring(0, string.length() - 1);
        }
        return string.replace('+', '-').replace('/', '_');
    }","  public void test4()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      Jaxb230Base64 jaxb230Base64_0 = new Jaxb230Base64();
      String string0 = jaxb230Base64_0.internalEncodeUrlWithoutPadding(byteArray0);
}"
798,"    static boolean isAvailable() {
        try {
            Class.forName(""javax.xml.bind.DatatypeConverter"", false, Jaxb230Base64.class.getClassLoader());
            return true;
        } catch (ClassNotFoundException cnfE) {
            return false;
        }
    }","  public void test5()  throws Throwable  {
      boolean boolean0 = Jaxb230Base64.isAvailable();
}"
799,"    protected String internalEncode(byte[] bytes) {
        return DatatypeConverter.printBase64Binary(bytes);
    }","  public void test6()  throws Throwable  {
      Jaxb230Base64 jaxb230Base64_0 = new Jaxb230Base64();
      byte[] byteArray0 = new byte[3];
      String string0 = jaxb230Base64_0.internalEncode(byteArray0);
}"
800,"    protected String internalEncodeUrlWithoutPadding(byte[] bytes) {
        String string = DatatypeConverter.printBase64Binary(bytes);
        while (string.endsWith(""="")) {
            string = string.substring(0, string.length() - 1);
        }
        return string.replace('+', '-').replace('/', '_');
    }","  public void test0()  throws Throwable  {
      JaxbBase64 jaxbBase64_0 = new JaxbBase64();
      byte[] byteArray0 = new byte[1];
      DatatypeConverterInterface datatypeConverterInterface0 = mock(DatatypeConverterInterface.class, new ViolatedAssumptionAnswer());
      doReturn(""D+z:4S(B<"", ""D+z:4S(B<"", ""D+z:4S(B<"", ""="").when(datatypeConverterInterface0).printBase64Binary(any(byte[].class));
      DatatypeConverter.setDatatypeConverter(datatypeConverterInterface0);
      jaxbBase64_0.internalEncodeUrlWithoutPadding(byteArray0);
      jaxbBase64_0.internalEncode(byteArray0);
      String string0 = jaxbBase64_0.internalEncodeUrlWithoutPadding(byteArray0);
}"
801,"    protected String internalEncodeUrlWithoutPadding(byte[] bytes) {
        String string = DatatypeConverter.printBase64Binary(bytes);
        while (string.endsWith(""="")) {
            string = string.substring(0, string.length() - 1);
        }
        return string.replace('+', '-').replace('/', '_');
    }","  public void test1()  throws Throwable  {
      JaxbBase64 jaxbBase64_0 = new JaxbBase64();
      byte[] byteArray0 = new byte[1];
      DatatypeConverterInterface datatypeConverterInterface0 = mock(DatatypeConverterInterface.class, new ViolatedAssumptionAnswer());
      doReturn(""D+z:4S(B<"", ""D+z:4S(B<"", ""D+z:4S(B<"", ""="").when(datatypeConverterInterface0).printBase64Binary(any(byte[].class));
      DatatypeConverter.setDatatypeConverter(datatypeConverterInterface0);
      jaxbBase64_0.internalEncodeUrlWithoutPadding(byteArray0);
      jaxbBase64_0.internalEncode(byteArray0);
      String string0 = jaxbBase64_0.internalEncodeUrlWithoutPadding(byteArray0);
      String string1 = jaxbBase64_0.internalEncodeUrlWithoutPadding(byteArray0);
}"
802,"    protected String internalEncode(byte[] bytes) {
        return DatatypeConverter.printBase64Binary(bytes);
    }","  public void test2()  throws Throwable  {
      JaxbBase64 jaxbBase64_0 = new JaxbBase64();
      byte[] byteArray0 = new byte[2];
      DatatypeConverterInterface datatypeConverterInterface0 = mock(DatatypeConverterInterface.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(datatypeConverterInterface0).printBase64Binary(any(byte[].class));
      DatatypeConverter.setDatatypeConverter(datatypeConverterInterface0);
      String string0 = jaxbBase64_0.internalEncode(byteArray0);
}"
803,"    protected String internalEncode(byte[] bytes) {
        return DatatypeConverter.printBase64Binary(bytes);
    }","  public void test3()  throws Throwable  {
      JaxbBase64 jaxbBase64_0 = new JaxbBase64();
      byte[] byteArray0 = new byte[0];
      String string0 = jaxbBase64_0.internalEncode(byteArray0);
}"
804,"    protected String internalEncodeUrlWithoutPadding(byte[] bytes) {
        String string = DatatypeConverter.printBase64Binary(bytes);
        while (string.endsWith(""="")) {
            string = string.substring(0, string.length() - 1);
        }
        return string.replace('+', '-').replace('/', '_');
    }","  public void test4()  throws Throwable  {
      JaxbBase64 jaxbBase64_0 = new JaxbBase64();
      DatatypeConverterInterface datatypeConverterInterface0 = mock(DatatypeConverterInterface.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(datatypeConverterInterface0).printBase64Binary(any(byte[].class));
      DatatypeConverter.setDatatypeConverter(datatypeConverterInterface0);
      byte[] byteArray0 = new byte[6];
      // Undeclared exception!
      try { 
        jaxbBase64_0.internalEncodeUrlWithoutPadding(byteArray0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
805,"    protected String internalEncode(byte[] bytes) {
        return DatatypeConverter.printBase64Binary(bytes);
    }","  public void test5()  throws Throwable  {
      JaxbBase64 jaxbBase64_0 = new JaxbBase64();
      // Undeclared exception!
      try { 
        jaxbBase64_0.internalEncode((byte[]) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""jakarta.xml.bind.DatatypeConverterImpl"", e);
      }
  }"
806,"    protected String internalEncodeUrlWithoutPadding(byte[] bytes) {
        String string = DatatypeConverter.printBase64Binary(bytes);
        while (string.endsWith(""="")) {
            string = string.substring(0, string.length() - 1);
        }
        return string.replace('+', '-').replace('/', '_');
    }","  public void test6()  throws Throwable  {
      JaxbBase64 jaxbBase64_0 = new JaxbBase64();
      byte[] byteArray0 = new byte[1];
      String string0 = jaxbBase64_0.internalEncodeUrlWithoutPadding(byteArray0);
}"
807,"    static boolean isAvailable() {
        try {
            Class.forName(""jakarta.xml.bind.DatatypeConverter"", false, JaxbBase64.class.getClassLoader());
            return true;
        } catch (ClassNotFoundException cnfE) {
            return false;
        }
    }","  public void test7()  throws Throwable  {
      boolean boolean0 = JaxbBase64.isAvailable();
}"
808,"    static boolean isAvailable() {
        try {
            Class.forName(""java.util.Base64"", false, Java8Base64.class.getClassLoader());
            return true;
        } catch (ClassNotFoundException cnfE) {
            return false;
        }
    }","  public void test0()  throws Throwable  {
      boolean boolean0 = Java8Base64.isAvailable();
}"
809,"    protected String internalEncodeUrlWithoutPadding(byte[] bytes) {
        return JAVA8_BASE64.internalEncodeUrlWithoutPadding(bytes);
    }","  public void test1()  throws Throwable  {
      Java8Base64 java8Base64_0 = new Java8Base64();
      byte[] byteArray0 = new byte[4];
      String string0 = java8Base64_0.internalEncodeUrlWithoutPadding(byteArray0);
}"
810,"    protected String internalEncodeUrlWithoutPadding(byte[] bytes) {
        return JAVA8_BASE64.internalEncodeUrlWithoutPadding(bytes);
    }","  public void test2()  throws Throwable  {
      Java8Base64 java8Base64_0 = new Java8Base64();
      byte[] byteArray0 = new byte[0];
      String string0 = java8Base64_0.internalEncodeUrlWithoutPadding(byteArray0);
}"
811,"    protected String internalEncode(byte[] bytes) {
        return JAVA8_BASE64.internalEncode(bytes);
    }","  public void test3()  throws Throwable  {
      Java8Base64 java8Base64_0 = new Java8Base64();
      byte[] byteArray0 = new byte[1];
      String string0 = java8Base64_0.internalEncode(byteArray0);
}"
812,"    protected String internalEncode(byte[] bytes) {
        return JAVA8_BASE64.internalEncode(bytes);
    }","  public void test4()  throws Throwable  {
      Java8Base64 java8Base64_0 = new Java8Base64();
      byte[] byteArray0 = new byte[0];
      String string0 = java8Base64_0.internalEncode(byteArray0);
}"
813,"    protected String internalEncodeUrlWithoutPadding(byte[] bytes) {
        return JAVA8_BASE64.internalEncodeUrlWithoutPadding(bytes);
    }","  public void test5()  throws Throwable  {
      Java8Base64 java8Base64_0 = new Java8Base64();
      // Undeclared exception!
      try { 
        java8Base64_0.internalEncodeUrlWithoutPadding((byte[]) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
814,"    protected String internalEncode(byte[] bytes) {
        return JAVA8_BASE64.internalEncode(bytes);
    }","  public void test6()  throws Throwable  {
      Java8Base64 java8Base64_0 = new Java8Base64();
      // Undeclared exception!
      try { 
        java8Base64_0.internalEncode((byte[]) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
815,"    public static String encodeUrlWithoutPadding(byte[] bytes) {
        return getInstance().internalEncodeUrlWithoutPadding(bytes);
    }","  public void test0()  throws Throwable  {
      CommonsCodecBase64 commonsCodecBase64_0 = new CommonsCodecBase64();
      Base64.init(commonsCodecBase64_0);
      String string0 = Base64.encodeUrlWithoutPadding((byte[]) null);
}"
816,"    public static String encodeUrlWithoutPadding(byte[] bytes) {
        return getInstance().internalEncodeUrlWithoutPadding(bytes);
    }","  public void test1()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      String string0 = Base64.encodeUrlWithoutPadding(byteArray0);
}"
817,"    public static String encode(byte[] bytes) {
        return getInstance().internalEncode(bytes);
    }","  public void test2()  throws Throwable  {
      CommonsCodecBase64 commonsCodecBase64_0 = new CommonsCodecBase64();
      Base64.init(commonsCodecBase64_0);
      String string0 = Base64.encode((byte[]) null);
}"
818,"    public static String encode(byte[] bytes) {
        return getInstance().internalEncode(bytes);
    }","  public void test3()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      String string0 = Base64.encode(byteArray0);
}"
819,"    public static String encode(byte[] bytes) {
        return getInstance().internalEncode(bytes);
    }","  public void test4()  throws Throwable  {
      // Undeclared exception!
      try { 
        Base64.encode((byte[]) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
820,"    public static Base64 getInstance() {
        Base64 localInstance = instance;
        if (localInstance == null) {
            synchronized (Base64.class) {
                localInstance = instance;
                if (localInstance == null) {
                    localInstance = createInstance();
                    instance = localInstance;
                }
            }
        }
        return localInstance;
    }","  public void test5()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      Base64.encodeUrlWithoutPadding(byteArray0);
      Base64 base64_0 = Base64.getInstance();
}"
821,"    public static String encode(byte[] bytes) {
        return getInstance().internalEncode(bytes);
    }","  public void test6()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      String string0 = Base64.encode(byteArray0);
}"
822,"    public static String encodeUrlWithoutPadding(byte[] bytes) {
        return getInstance().internalEncodeUrlWithoutPadding(bytes);
    }","  public void test7()  throws Throwable  {
      // Undeclared exception!
      try { 
        Base64.encodeUrlWithoutPadding((byte[]) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
823,"    public static void init(Base64 base64) {
        synchronized (Base64.class) {
            instance = base64;
        }
    }","  public void test8()  throws Throwable  {
      Base64 base64_0 = Base64.getInstance();
      Base64.init(base64_0);
  }"
824,"    public ServiceBuilder httpClientConfig(HttpClientConfig httpClientConfig) {
        Preconditions.checkNotNull(httpClientConfig, ""httpClientConfig can't be null"");
        this.httpClientConfig = httpClientConfig;
        return this;
    }","  public void test0()  throws Throwable  {
      ServiceBuilder serviceBuilder0 = new ServiceBuilder(""%P_X*nH\"">S"");
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      ServiceBuilder serviceBuilder1 = serviceBuilder0.httpClientConfig(jDKHttpClientConfig0);
}"
825,"    public ServiceBuilder debugStream(OutputStream debugStream) {
        Preconditions.checkNotNull(debugStream, ""debug stream can't be null"");
        this.debugStream = debugStream;
        return this;
    }","  public void test1()  throws Throwable  {
      ServiceBuilder serviceBuilder0 = new ServiceBuilder(""7JBVk+H3,2w-z"");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(""7JBVk+H3,2w-z"", true);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockFileOutputStream0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(filterOutputStream0, true);
      ServiceBuilder serviceBuilder1 = serviceBuilder0.debugStream(mockPrintStream0);
}"
826,"    public OAuth10aService build(DefaultApi10a api) {
        return api.createService(apiKey, apiSecret, callback, scope, debugStream, userAgent, httpClientConfig,
                httpClient);
    }","  public void test2()  throws Throwable  {
      ServiceBuilder serviceBuilder0 = new ServiceBuilder(""httpClientConfig can't be null"");
      ServiceBuilder serviceBuilder1 = (ServiceBuilder)serviceBuilder0.withScope(""verification_uri"");
      serviceBuilder0.callback(""2Q<^P72/#L"");
      ServiceBuilder serviceBuilder2 = serviceBuilder0.apiSecret(""0H+"");
      serviceBuilder2.userAgent(""Invalid OAuth scope"");
      OAuth20Service oAuth20Service0 = mock(OAuth20Service.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(oAuth20Service0).toString();
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn(oAuth20Service0).when(defaultApi20_0).createService(anyString() , anyString() , anyString() , anyString() , anyString() , any(java.io.OutputStream.class) , anyString() , any(com.github.scribejava.core.httpclient.HttpClientConfig.class) , any(com.github.scribejava.core.httpclient.HttpClient.class));
      OAuth20Service oAuth20Service1 = serviceBuilder1.build(defaultApi20_0);
}"
827,"    public OAuth10aService build(DefaultApi10a api) {
        return api.createService(apiKey, apiSecret, callback, scope, debugStream, userAgent, httpClientConfig,
                httpClient);
    }","  public void test3()  throws Throwable  {
      ServiceBuilder serviceBuilder0 = new ServiceBuilder(""httpClientConfig can't be null"");
      ServiceBuilder serviceBuilder1 = (ServiceBuilder)serviceBuilder0.withScope(""verification_uri"");
      ServiceBuilder serviceBuilder2 = serviceBuilder1.userAgent(""httpClientConfig can't be null"");
      serviceBuilder0.apiSecret(""0H+"");
      serviceBuilder2.callback(""FH#FxX,,@;wRbPRVn"");
      OAuth10aService oAuth10aService0 = mock(OAuth10aService.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(oAuth10aService0).toString();
      DefaultApi10a defaultApi10a0 = mock(DefaultApi10a.class, new ViolatedAssumptionAnswer());
      doReturn(oAuth10aService0).when(defaultApi10a0).createService(anyString() , anyString() , anyString() , anyString() , any(java.io.OutputStream.class) , anyString() , any(com.github.scribejava.core.httpclient.HttpClientConfig.class) , any(com.github.scribejava.core.httpclient.HttpClient.class));
      OAuth10aService oAuth10aService1 = serviceBuilder1.build(defaultApi10a0);
}"
828,"    public ServiceBuilderOAuth10a withScope(String scope) {
        return setScope(scope);
    }","  public void test4()  throws Throwable  {
      ServiceBuilder serviceBuilder0 = new ServiceBuilder(""jvm without UTF-8, really?"");
      // Undeclared exception!
      try { 
        serviceBuilder0.withScope("""");
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Invalid OAuth scope
         //
         verifyException(""com.github.scribejava.core.utils.Preconditions"", e);
      }
  }"
829,"    public ServiceBuilderOAuth20 responseType(String responseType) {
        Preconditions.checkEmptyString(responseType, ""Invalid OAuth responseType"");
        this.responseType = responseType;
        return this;
    }","  public void test5()  throws Throwable  {
      ServiceBuilder serviceBuilder0 = new ServiceBuilder(""code"");
      // Undeclared exception!
      try { 
        serviceBuilder0.responseType("""");
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Invalid OAuth responseType
         //
         verifyException(""com.github.scribejava.core.utils.Preconditions"", e);
      }
  }"
830,"    public ServiceBuilderOAuth20 defaultScope(String defaultScope) {
        return setScope(defaultScope);
    }","  public void test6()  throws Throwable  {
      ServiceBuilder serviceBuilder0 = new ServiceBuilder("">5x}}3r[whaPZ+Yi"");
      // Undeclared exception!
      try { 
        serviceBuilder0.defaultScope("""");
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Invalid OAuth scope
         //
         verifyException(""com.github.scribejava.core.utils.Preconditions"", e);
      }
  }"
831,"    public ServiceBuilderOAuth20 defaultScope(String defaultScope) {
        return setScope(defaultScope);
    }","  public void test7()  throws Throwable  {
      ServiceBuilder serviceBuilder0 = new ServiceBuilder(""Adj~cw`H^r1*"");
      ScopeBuilder scopeBuilder0 = new ScopeBuilder();
      // Undeclared exception!
      try { 
        serviceBuilder0.defaultScope(scopeBuilder0);
        fail(""Expecting exception: StringIndexOutOfBoundsException"");
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -1
         //
         verifyException(""java.lang.AbstractStringBuilder"", e);
      }
  }"
832,"    public ServiceBuilderOAuth20 defaultScope(String defaultScope) {
        return setScope(defaultScope);
    }","  public void test8()  throws Throwable  {
      ServiceBuilder serviceBuilder0 = new ServiceBuilder(""LNHgv%"");
      // Undeclared exception!
      try { 
        serviceBuilder0.defaultScope((ScopeBuilder) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""com.github.scribejava.core.builder.ServiceBuilder"", e);
      }
  }"
833,"    public ServiceBuilderOAuth20 defaultScope(String defaultScope) {
        return setScope(defaultScope);
    }","  public void test9()  throws Throwable  {
      ServiceBuilder serviceBuilder0 = new ServiceBuilder(""PUT"");
      ScopeBuilder scopeBuilder0 = new ScopeBuilder("""");
      // Undeclared exception!
      try { 
        serviceBuilder0.defaultScope(scopeBuilder0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Invalid OAuth scope
         //
         verifyException(""com.github.scribejava.core.utils.Preconditions"", e);
      }
  }"
834,"    public OAuth10aService build(DefaultApi10a api) {
        return api.createService(apiKey, apiSecret, callback, scope, debugStream, userAgent, httpClientConfig,
                httpClient);
    }","  public void test10()  throws Throwable  {
      ServiceBuilder serviceBuilder0 = new ServiceBuilder(""9kk8L&dUW5W~\u0003C]C"");
      // Undeclared exception!
      try { 
        serviceBuilder0.build((DefaultApi20) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""com.github.scribejava.core.builder.ServiceBuilder"", e);
      }
  }"
835,"    public OAuth10aService build(DefaultApi10a api) {
        return api.createService(apiKey, apiSecret, callback, scope, debugStream, userAgent, httpClientConfig,
                httpClient);
    }","  public void test11()  throws Throwable  {
      ServiceBuilder serviceBuilder0 = new ServiceBuilder(""com.github.scribejava.core.builder.ServiceBuilder"");
      // Undeclared exception!
      try { 
        serviceBuilder0.build((DefaultApi10a) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""com.github.scribejava.core.builder.ServiceBuilder"", e);
      }
  }"
836,"    public ServiceBuilder apiSecret(String apiSecret) {
        Preconditions.checkEmptyString(apiSecret, ""Invalid Api secret"");
        this.apiSecret = apiSecret;
        return this;
    }","  public void test12()  throws Throwable  {
      ServiceBuilder serviceBuilder0 = new ServiceBuilder(""Device Authorization Codes"");
      // Undeclared exception!
      try { 
        serviceBuilder0.apiSecret("""");
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Invalid Api secret
         //
         verifyException(""com.github.scribejava.core.utils.Preconditions"", e);
      }
  }"
837,"    public final ServiceBuilder apiKey(String apiKey) {
        Preconditions.checkEmptyString(apiKey, ""Invalid Api key"");
        this.apiKey = apiKey;
        return this;
    }","  public void test13()  throws Throwable  {
      ServiceBuilder serviceBuilder0 = new ServiceBuilder(""d?BL"");
      // Undeclared exception!
      try { 
        serviceBuilder0.apiKey((String) null);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Invalid Api key
         //
         verifyException(""com.github.scribejava.core.utils.Preconditions"", e);
      }
  }"
838,"    public ServiceBuilder(String apiKey) {
        apiKey(apiKey);
    }","  public void test14()  throws Throwable  {
      ServiceBuilder serviceBuilder0 = null;
      try {
        serviceBuilder0 = new ServiceBuilder("""");
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Invalid Api key
         //
         verifyException(""com.github.scribejava.core.utils.Preconditions"", e);
      }
  }"
839,"    public ServiceBuilder debugStream(OutputStream debugStream) {
        Preconditions.checkNotNull(debugStream, ""debug stream can't be null"");
        this.debugStream = debugStream;
        return this;
    }","  public void test15()  throws Throwable  {
      ServiceBuilder serviceBuilder0 = new ServiceBuilder(""%P_X*nH\"">S"");
      // Undeclared exception!
      try { 
        serviceBuilder0.debugStream((OutputStream) null);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // debug stream can't be null
         //
         verifyException(""com.github.scribejava.core.utils.Preconditions"", e);
      }
  }"
840,"    public final ServiceBuilder apiKey(String apiKey) {
        Preconditions.checkEmptyString(apiKey, ""Invalid Api key"");
        this.apiKey = apiKey;
        return this;
    }","  public void test16()  throws Throwable  {
      ServiceBuilder serviceBuilder0 = new ServiceBuilder(""jvm without UTF-8, really?"");
      ServiceBuilder serviceBuilder1 = serviceBuilder0.apiKey(""jvm without UTF-8, really?"");
}"
841,"    public ServiceBuilderOAuth20 defaultScope(String defaultScope) {
        return setScope(defaultScope);
    }","  public void test17()  throws Throwable  {
      ServiceBuilder serviceBuilder0 = new ServiceBuilder(""httpClientConfig can't be null"");
      ScopeBuilder scopeBuilder0 = new ScopeBuilder(""httpClientConfig can't be null"");
      ServiceBuilderOAuth20 serviceBuilderOAuth20_0 = serviceBuilder0.defaultScope(scopeBuilder0);
}"
842,"    public ServiceBuilderOAuth20 defaultScope(String defaultScope) {
        return setScope(defaultScope);
    }","  public void test18()  throws Throwable  {
      ServiceBuilder serviceBuilder0 = new ServiceBuilder(""PUT"");
      ServiceBuilderOAuth20 serviceBuilderOAuth20_0 = serviceBuilder0.defaultScope(""PUT"");
}"
843,"    public ServiceBuilder apiSecretIsEmptyStringUnsafe() {
        apiSecret = """";
        return this;
    }","  public void test19()  throws Throwable  {
      ServiceBuilder serviceBuilder0 = new ServiceBuilder(""jvm without UTF-8, really?"");
      ServiceBuilder serviceBuilder1 = serviceBuilder0.apiSecretIsEmptyStringUnsafe();
}"
844,"    public OAuth10aService build(DefaultApi10a api) {
        return api.createService(apiKey, apiSecret, callback, scope, debugStream, userAgent, httpClientConfig,
                httpClient);
    }","  public void test20()  throws Throwable  {
      ServiceBuilder serviceBuilder0 = new ServiceBuilder(""httpClientConfig can't be null"");
      DefaultApi10a defaultApi10a0 = mock(DefaultApi10a.class, new ViolatedAssumptionAnswer());
      doReturn((OAuth10aService) null).when(defaultApi10a0).createService(anyString() , anyString() , anyString() , anyString() , any(java.io.OutputStream.class) , anyString() , any(com.github.scribejava.core.httpclient.HttpClientConfig.class) , any(com.github.scribejava.core.httpclient.HttpClient.class));
      OAuth10aService oAuth10aService0 = serviceBuilder0.build(defaultApi10a0);
}"
845,"    public ServiceBuilder httpClientConfig(HttpClientConfig httpClientConfig) {
        Preconditions.checkNotNull(httpClientConfig, ""httpClientConfig can't be null"");
        this.httpClientConfig = httpClientConfig;
        return this;
    }","  public void test21()  throws Throwable  {
      ServiceBuilder serviceBuilder0 = new ServiceBuilder(""g8x;]sy"");
      // Undeclared exception!
      try { 
        serviceBuilder0.httpClientConfig((HttpClientConfig) null);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // httpClientConfig can't be null
         //
         verifyException(""com.github.scribejava.core.utils.Preconditions"", e);
      }
  }"
846,"    public ServiceBuilder debug() {
        return debugStream(System.out);
    }","  public void test22()  throws Throwable  {
      ServiceBuilder serviceBuilder0 = new ServiceBuilder(""httpClientConfig can't be null"");
      ServiceBuilder serviceBuilder1 = serviceBuilder0.debug();
}"
847,"    public OAuth10aService build(DefaultApi10a api) {
        return api.createService(apiKey, apiSecret, callback, scope, debugStream, userAgent, httpClientConfig,
                httpClient);
    }","  public void test23()  throws Throwable  {
      ServiceBuilder serviceBuilder0 = new ServiceBuilder(""httpClientConfig can't be null"");
      OAuth20Service oAuth20Service0 = mock(OAuth20Service.class, new ViolatedAssumptionAnswer());
      DefaultApi20 defaultApi20_0 = mock(DefaultApi20.class, new ViolatedAssumptionAnswer());
      doReturn(oAuth20Service0).when(defaultApi20_0).createService(anyString() , anyString() , anyString() , anyString() , anyString() , any(java.io.OutputStream.class) , anyString() , any(com.github.scribejava.core.httpclient.HttpClientConfig.class) , any(com.github.scribejava.core.httpclient.HttpClient.class));
      OAuth20Service oAuth20Service1 = serviceBuilder0.build(defaultApi20_0);
}"
848,"    public ServiceBuilder httpClient(HttpClient httpClient) {
        this.httpClient = httpClient;
        return this;
    }","  public void test24()  throws Throwable  {
      ServiceBuilder serviceBuilder0 = new ServiceBuilder("">5x}}3r[whaPZ+Yi"");
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient();
      ServiceBuilder serviceBuilder1 = serviceBuilder0.httpClient(jDKHttpClient0);
}"
849,"    public ServiceBuilderOAuth20 responseType(String responseType) {
        Preconditions.checkEmptyString(responseType, ""Invalid OAuth responseType"");
        this.responseType = responseType;
        return this;
    }","  public void test25()  throws Throwable  {
      ServiceBuilder serviceBuilder0 = new ServiceBuilder("">5x}}3r[whaPZ+Yi"");
      ServiceBuilderOAuth20 serviceBuilderOAuth20_0 = serviceBuilder0.responseType(""M\""($au\""`/8f|pQc[T"");
}"
850,"    public final ScopeBuilder withScopes(String... scopes) {
        this.scopes.addAll(Arrays.asList(scopes));
        return this;
    }","  public void test0()  throws Throwable  {
      String[] stringArray0 = new String[1];
      ScopeBuilder scopeBuilder0 = new ScopeBuilder(stringArray0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ScopeBuilder scopeBuilder1 = scopeBuilder0.withScopes((Collection<String>) linkedList0);
}"
851,"    public String build() {
        final StringBuilder scopeBuilder = new StringBuilder();
        for (String scope : scopes) {
            scopeBuilder.append(' ').append(scope);
        }
        return scopeBuilder.substring(1);
    }","  public void test1()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = """";
      ScopeBuilder scopeBuilder0 = new ScopeBuilder(stringArray0);
      String string0 = scopeBuilder0.build();
}"
852,"    public final ScopeBuilder withScopes(String... scopes) {
        this.scopes.addAll(Arrays.asList(scopes));
        return this;
    }","  public void test2()  throws Throwable  {
      ScopeBuilder scopeBuilder0 = new ScopeBuilder();
      // Undeclared exception!
      try { 
        scopeBuilder0.withScopes((String[]) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.util.Objects"", e);
      }
  }"
853,"    public final ScopeBuilder withScopes(String... scopes) {
        this.scopes.addAll(Arrays.asList(scopes));
        return this;
    }","  public void test3()  throws Throwable  {
      String[] stringArray0 = new String[1];
      ScopeBuilder scopeBuilder0 = new ScopeBuilder(stringArray0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("""");
      List<String> list0 = linkedList0.subList(1, 1);
      linkedList0.add("""");
      // Undeclared exception!
      try { 
        scopeBuilder0.withScopes((Collection<String>) list0);
        fail(""Expecting exception: ConcurrentModificationException"");
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.util.SubList"", e);
      }
  }"
854,"    public final ScopeBuilder withScopes(String... scopes) {
        this.scopes.addAll(Arrays.asList(scopes));
        return this;
    }","  public void test4()  throws Throwable  {
      String[] stringArray0 = new String[1];
      ScopeBuilder scopeBuilder0 = new ScopeBuilder(stringArray0);
      ScopeBuilder scopeBuilder1 = scopeBuilder0.withScopes(stringArray0);
}"
855,"    public final ScopeBuilder withScope(String scope) {
        scopes.add(scope);
        return this;
    }","  public void test5()  throws Throwable  {
      String[] stringArray0 = new String[1];
      ScopeBuilder scopeBuilder0 = new ScopeBuilder(stringArray0);
      ScopeBuilder scopeBuilder1 = scopeBuilder0.withScope((String) null);
}"
856,"    public String build() {
        final StringBuilder scopeBuilder = new StringBuilder();
        for (String scope : scopes) {
            scopeBuilder.append(' ').append(scope);
        }
        return scopeBuilder.substring(1);
    }","  public void test6()  throws Throwable  {
      String[] stringArray0 = new String[1];
      ScopeBuilder scopeBuilder0 = new ScopeBuilder(stringArray0);
      String string0 = scopeBuilder0.build();
}"
857,"    public String build() {
        final StringBuilder scopeBuilder = new StringBuilder();
        for (String scope : scopes) {
            scopeBuilder.append(' ').append(scope);
        }
        return scopeBuilder.substring(1);
    }","  public void test7()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ScopeBuilder scopeBuilder0 = new ScopeBuilder(linkedList0);
      // Undeclared exception!
      try { 
        scopeBuilder0.build();
        fail(""Expecting exception: StringIndexOutOfBoundsException"");
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -1
         //
         verifyException(""java.lang.AbstractStringBuilder"", e);
      }
  }"
858,"    public ScopeBuilder() {
    }","  public void test8()  throws Throwable  {
      ScopeBuilder scopeBuilder0 = null;
      try {
        scopeBuilder0 = new ScopeBuilder((Collection<String>) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.util.AbstractCollection"", e);
      }
  }"
859,"    public ScopeBuilder() {
    }","  public void test9()  throws Throwable  {
      ScopeBuilder scopeBuilder0 = null;
      try {
        scopeBuilder0 = new ScopeBuilder((String[]) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.util.Objects"", e);
      }
  }"
860,"    public final ScopeBuilder withScopes(String... scopes) {
        this.scopes.addAll(Arrays.asList(scopes));
        return this;
    }","  public void test10()  throws Throwable  {
      ScopeBuilder scopeBuilder0 = new ScopeBuilder();
      // Undeclared exception!
      try { 
        scopeBuilder0.withScopes((Collection<String>) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.util.AbstractCollection"", e);
      }
  }"
861,"    public ScopeBuilder() {
    }","  public void test11()  throws Throwable  {
      ScopeBuilder scopeBuilder0 = new ScopeBuilder(""FgLh\""W^'=j4t"");
  }"
862,"    public V get() throws InterruptedException, ExecutionException {
        if (exception != null) {
            throw new ExecutionException(exception);
        }

        return response;
    }","  public void test0()  throws Throwable  {
      JDKHttpFuture<Integer> jDKHttpFuture0 = new JDKHttpFuture<Integer>((Exception) null);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      Integer integer0 = jDKHttpFuture0.get(2258L, timeUnit0);
}"
863,"    public V get() throws InterruptedException, ExecutionException {
        if (exception != null) {
            throw new ExecutionException(exception);
        }

        return response;
    }","  public void test1()  throws Throwable  {
      JDKHttpFuture<String> jDKHttpFuture0 = new JDKHttpFuture<String>("""");
      String string0 = jDKHttpFuture0.get();
}"
864,"    public V get() throws InterruptedException, ExecutionException {
        if (exception != null) {
            throw new ExecutionException(exception);
        }

        return response;
    }","  public void test2()  throws Throwable  {
      MockException mockException0 = new MockException(""?O6?Oz.9a"");
      JDKHttpFuture<Integer> jDKHttpFuture0 = new JDKHttpFuture<Integer>((Exception) mockException0);
      try { 
        jDKHttpFuture0.get();
        fail(""Expecting exception: ExecutionException"");
      } catch(ExecutionException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: ?O6?Oz.9a
         //
         verifyException(""com.github.scribejava.core.httpclient.jdk.JDKHttpFuture"", e);
      }
  }"
865,"    public V get() throws InterruptedException, ExecutionException {
        if (exception != null) {
            throw new ExecutionException(exception);
        }

        return response;
    }","  public void test3()  throws Throwable  {
      JDKHttpFuture<Object> jDKHttpFuture0 = new JDKHttpFuture<Object>((Exception) null);
      Object object0 = jDKHttpFuture0.get();
}"
866,"    public V get() throws InterruptedException, ExecutionException {
        if (exception != null) {
            throw new ExecutionException(exception);
        }

        return response;
    }","  public void test4()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      MockException mockException0 = new MockException("""");
      JDKHttpFuture<Object> jDKHttpFuture0 = new JDKHttpFuture<Object>((Exception) mockException0);
      try { 
        jDKHttpFuture0.get(137L, timeUnit0);
        fail(""Expecting exception: ExecutionException"");
      } catch(ExecutionException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: 
         //
         verifyException(""com.github.scribejava.core.httpclient.jdk.JDKHttpFuture"", e);
      }
  }"
867,"    public boolean cancel(boolean mayInterruptIfRunning) {
        return false;
    }","  public void test5()  throws Throwable  {
      JDKHttpFuture<Object> jDKHttpFuture0 = new JDKHttpFuture<Object>((Exception) null);
      boolean boolean0 = jDKHttpFuture0.cancel(false);
}"
868,"    public boolean isCancelled() {
        return false;
    }","  public void test6()  throws Throwable  {
      JDKHttpFuture<Object> jDKHttpFuture0 = new JDKHttpFuture<Object>((Exception) null);
      boolean boolean0 = jDKHttpFuture0.isCancelled();
}"
869,"    public V get() throws InterruptedException, ExecutionException {
        if (exception != null) {
            throw new ExecutionException(exception);
        }

        return response;
    }","  public void test7()  throws Throwable  {
      JDKHttpFuture<String> jDKHttpFuture0 = new JDKHttpFuture<String>("""");
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      String string0 = jDKHttpFuture0.get(1044L, timeUnit0);
}"
870,"    public boolean isDone() {
        return true;
    }","  public void test8()  throws Throwable  {
      JDKHttpFuture<String> jDKHttpFuture0 = new JDKHttpFuture<String>(""yCEsV&^vZ"");
      boolean boolean0 = jDKHttpFuture0.isDone();
}"
871,"    public HttpClient createClient(HttpClientConfig config) {
        if (config instanceof JDKHttpClientConfig) {
            return new JDKHttpClient((JDKHttpClientConfig) config);
        }
        return null;
    }","  public void test0()  throws Throwable  {
      JDKHttpProvider jDKHttpProvider0 = new JDKHttpProvider();
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      HttpClient httpClient0 = jDKHttpProvider0.createClient(jDKHttpClientConfig0);
}"
872,"    public HttpClient createClient(HttpClientConfig config) {
        if (config instanceof JDKHttpClientConfig) {
            return new JDKHttpClient((JDKHttpClientConfig) config);
        }
        return null;
    }","  public void test1()  throws Throwable  {
      JDKHttpProvider jDKHttpProvider0 = new JDKHttpProvider();
      HttpClient httpClient0 = jDKHttpProvider0.createClient((HttpClientConfig) null);
}"
873,"    public <T> Future<T> executeAsync(String userAgent, Map<String, String> headers, Verb httpVerb, String completeUrl,
            byte[] bodyContents, OAuthAsyncRequestCallback<T> callback, OAuthRequest.ResponseConverter<T> converter) {

        return doExecuteAsync(userAgent, headers, httpVerb, completeUrl, BodyType.BYTE_ARRAY, bodyContents, callback,
                converter);
    }","  public void test0()  throws Throwable  {
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Verb verb0 = Verb.PUT;
      OAuthAsyncRequestCallback<Integer> oAuthAsyncRequestCallback0 = (OAuthAsyncRequestCallback<Integer>) mock(OAuthAsyncRequestCallback.class, new ViolatedAssumptionAnswer());
      OAuthRequest.ResponseConverter<Integer> oAuthRequest_ResponseConverter0 = (OAuthRequest.ResponseConverter<Integer>) mock(OAuthRequest.ResponseConverter.class, new ViolatedAssumptionAnswer());
      Future<Integer> future0 = jDKHttpClient0.executeAsync(""QH{EZzz)eb_Cs0"", (Map<String, String>) hashMap0, verb0, """", ""QH{EZzz)eb_Cs0"", oAuthAsyncRequestCallback0, oAuthRequest_ResponseConverter0);
}"
874,"    public <T> Future<T> executeAsync(String userAgent, Map<String, String> headers, Verb httpVerb, String completeUrl,
            byte[] bodyContents, OAuthAsyncRequestCallback<T> callback, OAuthRequest.ResponseConverter<T> converter) {

        return doExecuteAsync(userAgent, headers, httpVerb, completeUrl, BodyType.BYTE_ARRAY, bodyContents, callback,
                converter);
    }","  public void test1()  throws Throwable  {
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Verb verb0 = Verb.DELETE;
      byte[] byteArray0 = new byte[0];
      OAuthAsyncRequestCallback<String> oAuthAsyncRequestCallback0 = (OAuthAsyncRequestCallback<String>) mock(OAuthAsyncRequestCallback.class, new ViolatedAssumptionAnswer());
      OAuthRequest.ResponseConverter<String> oAuthRequest_ResponseConverter0 = (OAuthRequest.ResponseConverter<String>) mock(OAuthRequest.ResponseConverter.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(oAuthRequest_ResponseConverter0).convert(any(com.github.scribejava.core.model.Response.class));
      Future<String> future0 = jDKHttpClient0.executeAsync(""http://"", (Map<String, String>) hashMap0, verb0, ""http://"", byteArray0, oAuthAsyncRequestCallback0, oAuthRequest_ResponseConverter0);
}"
875,"    public Response execute(String userAgent, Map<String, String> headers, Verb httpVerb, String completeUrl,
            byte[] bodyContents) throws InterruptedException, ExecutionException, IOException {
        return doExecute(userAgent, headers, httpVerb, completeUrl, BodyType.BYTE_ARRAY, bodyContents);
    }","  public void test2()  throws Throwable  {
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Verb verb0 = Verb.HEAD;
      EvoSuiteURL evoSuiteURL0 = new EvoSuiteURL(""https:/B/"");
      NetworkHandling.createRemoteTextFile(evoSuiteURL0, ""}lmW2CHG/ .kzII?peJ"");
      byte[] byteArray0 = new byte[8];
      Response response0 = jDKHttpClient0.execute((String) null, (Map<String, String>) hashMap0, verb0, ""https:/B/"", byteArray0);
}"
876,"    public Response execute(String userAgent, Map<String, String> headers, Verb httpVerb, String completeUrl,
            byte[] bodyContents) throws InterruptedException, ExecutionException, IOException {
        return doExecute(userAgent, headers, httpVerb, completeUrl, BodyType.BYTE_ARRAY, bodyContents);
    }","  public void test3()  throws Throwable  {
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Verb verb0 = Verb.HEAD;
      byte[] byteArray0 = new byte[8];
      Response response0 = jDKHttpClient0.execute((String) null, (Map<String, String>) hashMap0, verb0, ""https:/B/"", byteArray0);
}"
877,"    public Response execute(String userAgent, Map<String, String> headers, Verb httpVerb, String completeUrl,
            byte[] bodyContents) throws InterruptedException, ExecutionException, IOException {
        return doExecute(userAgent, headers, httpVerb, completeUrl, BodyType.BYTE_ARRAY, bodyContents);
    }","  public void test4()  throws Throwable  {
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Verb verb0 = Verb.DELETE;
      EvoSuiteURL evoSuiteURL0 = new EvoSuiteURL(""https:/B/"");
      NetworkHandling.createRemoteTextFile(evoSuiteURL0, "",rmesa*e='"");
      MultipartPayload multipartPayload0 = new MultipartPayload(""https:/B/"");
      Response response0 = jDKHttpClient0.execute(""https:/B/"", (Map<String, String>) hashMap0, verb0, ""https:/B/"", multipartPayload0);
}"
878,"    public Response execute(String userAgent, Map<String, String> headers, Verb httpVerb, String completeUrl,
            byte[] bodyContents) throws InterruptedException, ExecutionException, IOException {
        return doExecute(userAgent, headers, httpVerb, completeUrl, BodyType.BYTE_ARRAY, bodyContents);
    }","  public void test5()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient();
      Verb verb0 = Verb.PATCH;
      byte[] byteArray0 = new byte[8];
      try { 
        jDKHttpClient0.execute(""]C2+C,=8,=Gjk'"", (Map<String, String>) hashMap0, verb0, ""https://"", byteArray0);
        fail(""Expecting exception: ProtocolException"");
      } catch(ProtocolException e) {
         //
         // Invalid HTTP method: PATCH
         //
         verifyException(""org.evosuite.runtime.mock.java.net.EvoHttpURLConnection"", e);
      }
  }"
879,"    public Response execute(String userAgent, Map<String, String> headers, Verb httpVerb, String completeUrl,
            byte[] bodyContents) throws InterruptedException, ExecutionException, IOException {
        return doExecute(userAgent, headers, httpVerb, completeUrl, BodyType.BYTE_ARRAY, bodyContents);
    }","  public void test6()  throws Throwable  {
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Verb verb0 = Verb.TRACE;
      byte[] byteArray0 = new byte[2];
      try { 
        jDKHttpClient0.execute(""6V5'ESm7sA%"", (Map<String, String>) hashMap0, verb0, ""com.github.scribejava.core.httpclient.jdk.JDKHttpClient$BodyType"", byteArray0);
        fail(""Expecting exception: MalformedURLException"");
      } catch(MalformedURLException e) {
         //
         // no protocol: com.github.scribejava.core.httpclient.jdk.JDKHttpClient$BodyType
         //
         verifyException(""java.net.URL"", e);
      }
  }"
880,"    public Response execute(String userAgent, Map<String, String> headers, Verb httpVerb, String completeUrl,
            byte[] bodyContents) throws InterruptedException, ExecutionException, IOException {
        return doExecute(userAgent, headers, httpVerb, completeUrl, BodyType.BYTE_ARRAY, bodyContents);
    }","  public void test7()  throws Throwable  {
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Verb verb0 = Verb.DELETE;
      // Undeclared exception!
      try { 
        jDKHttpClient0.execute(""http://"", (Map<String, String>) hashMap0, verb0, ""http://"", (byte[]) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""com.github.scribejava.core.httpclient.jdk.JDKHttpClient"", e);
      }
  }"
881,"    public Response execute(String userAgent, Map<String, String> headers, Verb httpVerb, String completeUrl,
            byte[] bodyContents) throws InterruptedException, ExecutionException, IOException {
        return doExecute(userAgent, headers, httpVerb, completeUrl, BodyType.BYTE_ARRAY, bodyContents);
    }","  public void test8()  throws Throwable  {
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Verb verb0 = Verb.DELETE;
      byte[] byteArray0 = new byte[8];
      Integer integer0 = new Integer((-1241));
      jDKHttpClientConfig0.setReadTimeout(integer0);
      // Undeclared exception!
      try { 
        jDKHttpClient0.execute((String) null, (Map<String, String>) hashMap0, verb0, ""https:/B/"", byteArray0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // timeout can not be negative
         //
         verifyException(""java.net.URLConnection"", e);
      }
  }"
882,"    public Response execute(String userAgent, Map<String, String> headers, Verb httpVerb, String completeUrl,
            byte[] bodyContents) throws InterruptedException, ExecutionException, IOException {
        return doExecute(userAgent, headers, httpVerb, completeUrl, BodyType.BYTE_ARRAY, bodyContents);
    }","  public void test9()  throws Throwable  {
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Proxy proxy0 = Proxy.NO_PROXY;
      jDKHttpClientConfig0.withProxy(proxy0);
      byte[] byteArray0 = new byte[8];
      Verb verb0 = Verb.GET;
      try { 
        jDKHttpClient0.execute(""https://"", (Map<String, String>) hashMap0, verb0, ""https://"", byteArray0);
        fail(""Expecting exception: IOException"");
      } catch(IOException e) {
         //
         // java.lang.UnsupportedOperationException: Method not implemented.
         //
         verifyException(""org.evosuite.runtime.mock.java.net.MockURL"", e);
      }
  }"
883,"    public Response execute(String userAgent, Map<String, String> headers, Verb httpVerb, String completeUrl,
            byte[] bodyContents) throws InterruptedException, ExecutionException, IOException {
        return doExecute(userAgent, headers, httpVerb, completeUrl, BodyType.BYTE_ARRAY, bodyContents);
    }","  public void test10()  throws Throwable  {
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Verb verb0 = Verb.DELETE;
      try { 
        jDKHttpClient0.execute("""", (Map<String, String>) hashMap0, verb0, ""https://"", "", message='"");
        fail(""Expecting exception: UnknownServiceException"");
      } catch(UnknownServiceException e) {
         //
         // protocol doesn't support output
         //
         verifyException(""org.evosuite.runtime.mock.java.net.EvoHttpURLConnection"", e);
      }
  }"
884,"    public Response execute(String userAgent, Map<String, String> headers, Verb httpVerb, String completeUrl,
            byte[] bodyContents) throws InterruptedException, ExecutionException, IOException {
        return doExecute(userAgent, headers, httpVerb, completeUrl, BodyType.BYTE_ARRAY, bodyContents);
    }","  public void test11()  throws Throwable  {
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Verb verb0 = Verb.PATCH;
      try { 
        jDKHttpClient0.execute(""https://"", (Map<String, String>) hashMap0, verb0, ""https://"", ""]C2+C,=8,=Gjk'"");
        fail(""Expecting exception: ProtocolException"");
      } catch(ProtocolException e) {
         //
         // Invalid HTTP method: PATCH
         //
         verifyException(""org.evosuite.runtime.mock.java.net.EvoHttpURLConnection"", e);
      }
  }"
885,"    public Response execute(String userAgent, Map<String, String> headers, Verb httpVerb, String completeUrl,
            byte[] bodyContents) throws InterruptedException, ExecutionException, IOException {
        return doExecute(userAgent, headers, httpVerb, completeUrl, BodyType.BYTE_ARRAY, bodyContents);
    }","  public void test12()  throws Throwable  {
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Verb verb0 = Verb.HEAD;
      try { 
        jDKHttpClient0.execute("""", (Map<String, String>) hashMap0, verb0, ""Dj EDVeI'*rV,w"", ""Dj EDVeI'*rV,w"");
        fail(""Expecting exception: MalformedURLException"");
      } catch(MalformedURLException e) {
         //
         // no protocol: Dj EDVeI'*rV,w
         //
         verifyException(""java.net.URL"", e);
      }
  }"
886,"    public Response execute(String userAgent, Map<String, String> headers, Verb httpVerb, String completeUrl,
            byte[] bodyContents) throws InterruptedException, ExecutionException, IOException {
        return doExecute(userAgent, headers, httpVerb, completeUrl, BodyType.BYTE_ARRAY, bodyContents);
    }","  public void test13()  throws Throwable  {
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient((JDKHttpClientConfig) null);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Verb verb0 = Verb.DELETE;
      // Undeclared exception!
      try { 
        jDKHttpClient0.execute("""", (Map<String, String>) hashMap0, verb0, ""https://"", "", message='"");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""com.github.scribejava.core.httpclient.jdk.JDKHttpClient"", e);
      }
  }"
887,"    public Response execute(String userAgent, Map<String, String> headers, Verb httpVerb, String completeUrl,
            byte[] bodyContents) throws InterruptedException, ExecutionException, IOException {
        return doExecute(userAgent, headers, httpVerb, completeUrl, BodyType.BYTE_ARRAY, bodyContents);
    }","  public void test14()  throws Throwable  {
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Verb verb0 = Verb.DELETE;
      Integer integer0 = new Integer((-589));
      jDKHttpClientConfig0.setConnectTimeout(integer0);
      // Undeclared exception!
      try { 
        jDKHttpClient0.execute(""https://"", (Map<String, String>) hashMap0, verb0, ""https://"", """");
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // timeout can not be negative
         //
         verifyException(""java.net.URLConnection"", e);
      }
  }"
888,"    public Response execute(String userAgent, Map<String, String> headers, Verb httpVerb, String completeUrl,
            byte[] bodyContents) throws InterruptedException, ExecutionException, IOException {
        return doExecute(userAgent, headers, httpVerb, completeUrl, BodyType.BYTE_ARRAY, bodyContents);
    }","  public void test15()  throws Throwable  {
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Verb verb0 = Verb.PUT;
      MultipartPayload multipartPayload0 = new MultipartPayload(""com.github.scribejava.core.model.Verb"");
      try { 
        jDKHttpClient0.execute(""https:/B/"", (Map<String, String>) hashMap0, verb0, ""https:/B/"", multipartPayload0);
        fail(""Expecting exception: UnknownServiceException"");
      } catch(UnknownServiceException e) {
         //
         // protocol doesn't support output
         //
         verifyException(""org.evosuite.runtime.mock.java.net.EvoHttpURLConnection"", e);
      }
  }"
889,"    public Response execute(String userAgent, Map<String, String> headers, Verb httpVerb, String completeUrl,
            byte[] bodyContents) throws InterruptedException, ExecutionException, IOException {
        return doExecute(userAgent, headers, httpVerb, completeUrl, BodyType.BYTE_ARRAY, bodyContents);
    }","  public void test16()  throws Throwable  {
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      MultipartPayload multipartPayload0 = new MultipartPayload(""com.github.scribejava.core.model.Verb"");
      Verb verb0 = Verb.PATCH;
      try { 
        jDKHttpClient0.execute(""~kc6zZ> 9[xI#BkmR_"", (Map<String, String>) hashMap0, verb0, ""https:/B/"", multipartPayload0);
        fail(""Expecting exception: ProtocolException"");
      } catch(ProtocolException e) {
         //
         // Invalid HTTP method: PATCH
         //
         verifyException(""org.evosuite.runtime.mock.java.net.EvoHttpURLConnection"", e);
      }
  }"
890,"    public Response execute(String userAgent, Map<String, String> headers, Verb httpVerb, String completeUrl,
            byte[] bodyContents) throws InterruptedException, ExecutionException, IOException {
        return doExecute(userAgent, headers, httpVerb, completeUrl, BodyType.BYTE_ARRAY, bodyContents);
    }","  public void test17()  throws Throwable  {
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Verb verb0 = Verb.POST;
      MultipartPayload multipartPayload0 = new MultipartPayload(hashMap0);
      try { 
        jDKHttpClient0.execute(""Zum=AVA "", (Map<String, String>) hashMap0, verb0, ""Zum=AVA "", multipartPayload0);
        fail(""Expecting exception: MalformedURLException"");
      } catch(MalformedURLException e) {
         //
         // no protocol: Zum=AVA 
         //
         verifyException(""java.net.URL"", e);
      }
  }"
891,"    public Response execute(String userAgent, Map<String, String> headers, Verb httpVerb, String completeUrl,
            byte[] bodyContents) throws InterruptedException, ExecutionException, IOException {
        return doExecute(userAgent, headers, httpVerb, completeUrl, BodyType.BYTE_ARRAY, bodyContents);
    }","  public void test18()  throws Throwable  {
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Verb verb0 = Verb.POST;
      // Undeclared exception!
      try { 
        jDKHttpClient0.execute("", `ssagX"", (Map<String, String>) hashMap0, verb0, ""https://"", (MultipartPayload) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""com.github.scribejava.core.httpclient.jdk.JDKHttpClient"", e);
      }
  }"
892,"    public Response execute(String userAgent, Map<String, String> headers, Verb httpVerb, String completeUrl,
            byte[] bodyContents) throws InterruptedException, ExecutionException, IOException {
        return doExecute(userAgent, headers, httpVerb, completeUrl, BodyType.BYTE_ARRAY, bodyContents);
    }","  public void test19()  throws Throwable  {
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient();
      MultipartPayload multipartPayload0 = new MultipartPayload(""https:/X'"", ""https:/X'"");
      Map<String, String> map0 = multipartPayload0.getHeaders();
      byte[] byteArray0 = new byte[9];
      ByteArrayBodyPartPayload byteArrayBodyPartPayload0 = new ByteArrayBodyPartPayload(byteArray0, 400, (byte)8, ""https:/X'"");
      multipartPayload0.addBodyPart((BodyPartPayload) byteArrayBodyPartPayload0);
      Verb verb0 = Verb.PUT;
      // Undeclared exception!
      try { 
        jDKHttpClient0.execute((String) null, map0, verb0, ""https:/X'"", multipartPayload0);
        fail(""Expecting exception: IndexOutOfBoundsException"");
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.io.ByteArrayOutputStream"", e);
      }
  }"
893,"    public Response execute(String userAgent, Map<String, String> headers, Verb httpVerb, String completeUrl,
            byte[] bodyContents) throws InterruptedException, ExecutionException, IOException {
        return doExecute(userAgent, headers, httpVerb, completeUrl, BodyType.BYTE_ARRAY, bodyContents);
    }","  public void test20()  throws Throwable  {
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Verb verb0 = Verb.HEAD;
      Integer integer0 = new Integer((-1475));
      jDKHttpClientConfig0.setConnectTimeout(integer0);
      MultipartPayload multipartPayload0 = new MultipartPayload(""com.github.scribejava.core.model.Verb"");
      // Undeclared exception!
      try { 
        jDKHttpClient0.execute("""", (Map<String, String>) hashMap0, verb0, ""https://"", multipartPayload0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // timeout can not be negative
         //
         verifyException(""java.net.URLConnection"", e);
      }
  }"
894,"    public Response execute(String userAgent, Map<String, String> headers, Verb httpVerb, String completeUrl,
            byte[] bodyContents) throws InterruptedException, ExecutionException, IOException {
        return doExecute(userAgent, headers, httpVerb, completeUrl, BodyType.BYTE_ARRAY, bodyContents);
    }","  public void test21()  throws Throwable  {
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Verb verb0 = Verb.DELETE;
      Proxy.Type proxy_Type0 = Proxy.Type.HTTP;
      InetAddress inetAddress0 = MockInetAddress.getByName(""https://"");
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress(inetAddress0, 5);
      Proxy proxy0 = new Proxy(proxy_Type0, mockInetSocketAddress0);
      jDKHttpClientConfig0.setProxy(proxy0);
      MultipartPayload multipartPayload0 = new MultipartPayload(""com.github.scribejava.core.model.Verb"");
      try { 
        jDKHttpClient0.execute("""", (Map<String, String>) hashMap0, verb0, ""https://"", multipartPayload0);
        fail(""Expecting exception: IOException"");
      } catch(IOException e) {
         //
         // java.lang.UnsupportedOperationException: Method not implemented.
         //
         verifyException(""org.evosuite.runtime.mock.java.net.MockURL"", e);
      }
  }"
895,"    public <T> Future<T> executeAsync(String userAgent, Map<String, String> headers, Verb httpVerb, String completeUrl,
            byte[] bodyContents, OAuthAsyncRequestCallback<T> callback, OAuthRequest.ResponseConverter<T> converter) {

        return doExecuteAsync(userAgent, headers, httpVerb, completeUrl, BodyType.BYTE_ARRAY, bodyContents, callback,
                converter);
    }","  public void test22()  throws Throwable  {
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      Verb verb0 = Verb.DELETE;
      MultipartPayload multipartPayload0 = new MultipartPayload(""com.github.scribejava.core.model.Verb"");
      Map<String, String> map0 = multipartPayload0.getHeaders();
      OAuthAsyncRequestCallback<String> oAuthAsyncRequestCallback0 = (OAuthAsyncRequestCallback<String>) mock(OAuthAsyncRequestCallback.class, new ViolatedAssumptionAnswer());
      Future<String> future0 = jDKHttpClient0.executeAsync(""https://"", map0, verb0, ""https://"", multipartPayload0, oAuthAsyncRequestCallback0, (OAuthRequest.ResponseConverter<String>) null);
}"
896,"    public Response execute(String userAgent, Map<String, String> headers, Verb httpVerb, String completeUrl,
            byte[] bodyContents) throws InterruptedException, ExecutionException, IOException {
        return doExecute(userAgent, headers, httpVerb, completeUrl, BodyType.BYTE_ARRAY, bodyContents);
    }","  public void test23()  throws Throwable  {
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Verb verb0 = Verb.DELETE;
      EvoSuiteURL evoSuiteURL0 = new EvoSuiteURL(""https:"");
      NetworkHandling.createRemoteTextFile(evoSuiteURL0, "", message='"");
      Response response0 = jDKHttpClient0.execute(""https://"", (Map<String, String>) hashMap0, verb0, ""https://"", """");
}"
897,"    public <T> Future<T> executeAsync(String userAgent, Map<String, String> headers, Verb httpVerb, String completeUrl,
            byte[] bodyContents, OAuthAsyncRequestCallback<T> callback, OAuthRequest.ResponseConverter<T> converter) {

        return doExecuteAsync(userAgent, headers, httpVerb, completeUrl, BodyType.BYTE_ARRAY, bodyContents, callback,
                converter);
    }","  public void test24()  throws Throwable  {
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      Integer integer0 = new Integer(3);
      jDKHttpClientConfig0.withReadTimeout(integer0);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Verb verb0 = Verb.PUT;
      byte[] byteArray0 = new byte[8];
      OAuthAsyncRequestCallback<Integer> oAuthAsyncRequestCallback0 = (OAuthAsyncRequestCallback<Integer>) mock(OAuthAsyncRequestCallback.class, new ViolatedAssumptionAnswer());
      OAuthRequest.ResponseConverter<Integer> oAuthRequest_ResponseConverter0 = (OAuthRequest.ResponseConverter<Integer>) mock(OAuthRequest.ResponseConverter.class, new ViolatedAssumptionAnswer());
      Future<Integer> future0 = jDKHttpClient0.executeAsync("""", (Map<String, String>) hashMap0, verb0, ""https://"", byteArray0, oAuthAsyncRequestCallback0, oAuthRequest_ResponseConverter0);
}"
898,"    public Response execute(String userAgent, Map<String, String> headers, Verb httpVerb, String completeUrl,
            byte[] bodyContents) throws InterruptedException, ExecutionException, IOException {
        return doExecute(userAgent, headers, httpVerb, completeUrl, BodyType.BYTE_ARRAY, bodyContents);
    }","  public void test25()  throws Throwable  {
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Verb verb0 = Verb.DELETE;
      Proxy proxy0 = Proxy.NO_PROXY;
      jDKHttpClientConfig0.withProxy(proxy0);
      try { 
        jDKHttpClient0.execute("""", (Map<String, String>) hashMap0, verb0, ""https://"", "", message='"");
        fail(""Expecting exception: IOException"");
      } catch(IOException e) {
         //
         // java.lang.UnsupportedOperationException: Method not implemented.
         //
         verifyException(""org.evosuite.runtime.mock.java.net.MockURL"", e);
      }
  }"
899,"    public <T> Future<T> executeAsync(String userAgent, Map<String, String> headers, Verb httpVerb, String completeUrl,
            byte[] bodyContents, OAuthAsyncRequestCallback<T> callback, OAuthRequest.ResponseConverter<T> converter) {

        return doExecuteAsync(userAgent, headers, httpVerb, completeUrl, BodyType.BYTE_ARRAY, bodyContents, callback,
                converter);
    }","  public void test26()  throws Throwable  {
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Verb verb0 = Verb.DELETE;
      Future<LinkedList<LinkedList>> future0 = jDKHttpClient0.executeAsync(""Nz\u0000=E8uw`tbj"", (Map<String, String>) hashMap0, verb0, """", (byte[]) null, (OAuthAsyncRequestCallback<LinkedList<LinkedList>>) null, (OAuthRequest.ResponseConverter<LinkedList<LinkedList>>) null);
}"
900,"    public <T> Future<T> executeAsync(String userAgent, Map<String, String> headers, Verb httpVerb, String completeUrl,
            byte[] bodyContents, OAuthAsyncRequestCallback<T> callback, OAuthRequest.ResponseConverter<T> converter) {

        return doExecuteAsync(userAgent, headers, httpVerb, completeUrl, BodyType.BYTE_ARRAY, bodyContents, callback,
                converter);
    }","  public void test27()  throws Throwable  {
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Verb verb0 = Verb.DELETE;
      MultipartPayload multipartPayload0 = new MultipartPayload("""", ""https://"");
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      OAuthRequest.ResponseConverter<LinkedList<Integer>> oAuthRequest_ResponseConverter0 = (OAuthRequest.ResponseConverter<LinkedList<Integer>>) mock(OAuthRequest.ResponseConverter.class, new ViolatedAssumptionAnswer());
      doReturn(linkedList0).when(oAuthRequest_ResponseConverter0).convert(any(com.github.scribejava.core.model.Response.class));
      Future<LinkedList<Integer>> future0 = jDKHttpClient0.executeAsync(""https://"", (Map<String, String>) hashMap0, verb0, ""https://"", multipartPayload0, (OAuthAsyncRequestCallback<LinkedList<Integer>>) null, oAuthRequest_ResponseConverter0);
}"
901,"    public Response execute(String userAgent, Map<String, String> headers, Verb httpVerb, String completeUrl,
            byte[] bodyContents) throws InterruptedException, ExecutionException, IOException {
        return doExecute(userAgent, headers, httpVerb, completeUrl, BodyType.BYTE_ARRAY, bodyContents);
    }","  public void test28()  throws Throwable  {
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Verb verb0 = Verb.PUT;
      MockFile mockFile0 = new MockFile(""O*$gTw26-^a:``C.5"");
      // Undeclared exception!
      try { 
        jDKHttpClient0.execute(""application/x-www-form-urlencoded"", (Map<String, String>) hashMap0, verb0, ""application/x-www-form-urlencoded"", (File) mockFile0);
        fail(""Expecting exception: UnsupportedOperationException"");
      } catch(UnsupportedOperationException e) {
         //
         // JDKHttpClient does not support File payload for the moment
         //
         verifyException(""com.github.scribejava.core.httpclient.jdk.JDKHttpClient"", e);
      }
  }"
902,"    public <T> Future<T> executeAsync(String userAgent, Map<String, String> headers, Verb httpVerb, String completeUrl,
            byte[] bodyContents, OAuthAsyncRequestCallback<T> callback, OAuthRequest.ResponseConverter<T> converter) {

        return doExecuteAsync(userAgent, headers, httpVerb, completeUrl, BodyType.BYTE_ARRAY, bodyContents, callback,
                converter);
    }","  public void test29()  throws Throwable  {
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient();
      Verb verb0 = Verb.HEAD;
      MockFile mockFile0 = new MockFile(""Dt~XtCZ.8#NJY^hf"", ""Dt~XtCZ.8#NJY^hf"");
      OAuthAsyncRequestCallback<AbstractMap.SimpleImmutableEntry<String, String>> oAuthAsyncRequestCallback0 = (OAuthAsyncRequestCallback<AbstractMap.SimpleImmutableEntry<String, String>>) mock(OAuthAsyncRequestCallback.class, new ViolatedAssumptionAnswer());
      OAuthRequest.ResponseConverter<AbstractMap.SimpleImmutableEntry<String, String>> oAuthRequest_ResponseConverter0 = (OAuthRequest.ResponseConverter<AbstractMap.SimpleImmutableEntry<String, String>>) mock(OAuthRequest.ResponseConverter.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        jDKHttpClient0.executeAsync(""Dt~XtCZ.8#NJY^hf"", (Map<String, String>) null, verb0, ""Dt~XtCZ.8#NJY^hf"", (File) mockFile0, oAuthAsyncRequestCallback0, oAuthRequest_ResponseConverter0);
        fail(""Expecting exception: UnsupportedOperationException"");
      } catch(UnsupportedOperationException e) {
         //
         // JDKHttpClient does not support File payload for the moment
         //
         verifyException(""com.github.scribejava.core.httpclient.jdk.JDKHttpClient"", e);
      }
  }"
903,"    public <T> Future<T> executeAsync(String userAgent, Map<String, String> headers, Verb httpVerb, String completeUrl,
            byte[] bodyContents, OAuthAsyncRequestCallback<T> callback, OAuthRequest.ResponseConverter<T> converter) {

        return doExecuteAsync(userAgent, headers, httpVerb, completeUrl, BodyType.BYTE_ARRAY, bodyContents, callback,
                converter);
    }","  public void test30()  throws Throwable  {
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient(jDKHttpClientConfig0);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Verb verb0 = Verb.DELETE;
      OAuthAsyncRequestCallback<String> oAuthAsyncRequestCallback0 = (OAuthAsyncRequestCallback<String>) mock(OAuthAsyncRequestCallback.class, new ViolatedAssumptionAnswer());
      Future<String> future0 = jDKHttpClient0.executeAsync("""", (Map<String, String>) hashMap0, verb0, """", "", message='"", oAuthAsyncRequestCallback0, (OAuthRequest.ResponseConverter<String>) null);
}"
904,"    public void close() {
    }","  public void test31()  throws Throwable  {
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient();
      jDKHttpClient0.close();
  }"
905,"    public Response execute(String userAgent, Map<String, String> headers, Verb httpVerb, String completeUrl,
            byte[] bodyContents) throws InterruptedException, ExecutionException, IOException {
        return doExecute(userAgent, headers, httpVerb, completeUrl, BodyType.BYTE_ARRAY, bodyContents);
    }","  public void test32()  throws Throwable  {
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Verb verb0 = Verb.DELETE;
      Response response0 = jDKHttpClient0.execute(""https://"", (Map<String, String>) hashMap0, verb0, ""https://"", """");
}"
906,"    public Response execute(String userAgent, Map<String, String> headers, Verb httpVerb, String completeUrl,
            byte[] bodyContents) throws InterruptedException, ExecutionException, IOException {
        return doExecute(userAgent, headers, httpVerb, completeUrl, BodyType.BYTE_ARRAY, bodyContents);
    }","  public void test33()  throws Throwable  {
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Verb verb0 = Verb.DELETE;
      MultipartPayload multipartPayload0 = new MultipartPayload(""https:/B/"");
      Response response0 = jDKHttpClient0.execute(""https:/B/"", (Map<String, String>) hashMap0, verb0, ""https:/B/"", multipartPayload0);
}"
907,"    public Response execute(String userAgent, Map<String, String> headers, Verb httpVerb, String completeUrl,
            byte[] bodyContents) throws InterruptedException, ExecutionException, IOException {
        return doExecute(userAgent, headers, httpVerb, completeUrl, BodyType.BYTE_ARRAY, bodyContents);
    }","  public void test34()  throws Throwable  {
      JDKHttpClient jDKHttpClient0 = new JDKHttpClient();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Verb verb0 = Verb.DELETE;
      byte[] byteArray0 = new byte[7];
      try { 
        jDKHttpClient0.execute((String) null, (Map<String, String>) hashMap0, verb0, ""https:/B/"", byteArray0);
        fail(""Expecting exception: UnknownServiceException"");
      } catch(UnknownServiceException e) {
         //
         // protocol doesn't support output
         //
         verifyException(""org.evosuite.runtime.mock.java.net.EvoHttpURLConnection"", e);
      }
  }"
908,"    public boolean isFollowRedirects() {
        return followRedirects;
    }","  public void test0()  throws Throwable  {
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
}"
909,"    public boolean isFollowRedirects() {
        return followRedirects;
    }","  public void test1()  throws Throwable  {
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      JDKHttpClientConfig jDKHttpClientConfig1 = jDKHttpClientConfig0.withFollowRedirects(false);
      Integer integer0 = new Integer((-4216));
      jDKHttpClientConfig1.withReadTimeout(integer0);
}"
910,"    public boolean isFollowRedirects() {
        return followRedirects;
    }","  public void test2()  throws Throwable  {
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
}"
911,"    public boolean isFollowRedirects() {
        return followRedirects;
    }","  public void test3()  throws Throwable  {
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      jDKHttpClientConfig0.withFollowRedirects(false);
      Proxy proxy0 = Proxy.NO_PROXY;
      jDKHttpClientConfig0.withProxy(proxy0);
}"
912,"    public boolean isFollowRedirects() {
        return followRedirects;
    }","  public void test4()  throws Throwable  {
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      jDKHttpClientConfig0.withFollowRedirects(true);
}"
913,"    public boolean isFollowRedirects() {
        return followRedirects;
    }","  public void test5()  throws Throwable  {
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
}"
914,"    public boolean isFollowRedirects() {
        return followRedirects;
    }","  public void test6()  throws Throwable  {
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      Integer integer0 = new Integer((-2107));
      jDKHttpClientConfig0.setFollowRedirects(false);
      jDKHttpClientConfig0.withConnectTimeout(integer0);
}"
915,"    public boolean isFollowRedirects() {
        return followRedirects;
    }","  public void test7()  throws Throwable  {
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      Integer integer0 = new Integer(0);
      jDKHttpClientConfig0.setReadTimeout(integer0);
      jDKHttpClientConfig0.getReadTimeout();
}"
916,"    public boolean isFollowRedirects() {
        return followRedirects;
    }","  public void test8()  throws Throwable  {
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      Integer integer0 = new Integer((-2778));
      jDKHttpClientConfig0.setReadTimeout(integer0);
      jDKHttpClientConfig0.getReadTimeout();
}"
917,"    public boolean isFollowRedirects() {
        return followRedirects;
    }","  public void test9()  throws Throwable  {
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      Integer integer0 = new Integer(3301);
      jDKHttpClientConfig0.setReadTimeout(integer0);
      jDKHttpClientConfig0.getReadTimeout();
}"
918,"    public boolean isFollowRedirects() {
        return followRedirects;
    }","  public void test10()  throws Throwable  {
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      Integer integer0 = new Integer((-1164));
      JDKHttpClientConfig jDKHttpClientConfig1 = jDKHttpClientConfig0.withConnectTimeout(integer0);
      jDKHttpClientConfig1.getConnectTimeout();
}"
919,"    public boolean isFollowRedirects() {
        return followRedirects;
    }","  public void test11()  throws Throwable  {
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      Integer integer0 = new Integer(0);
      JDKHttpClientConfig jDKHttpClientConfig1 = jDKHttpClientConfig0.withConnectTimeout(integer0);
      jDKHttpClientConfig1.getConnectTimeout();
}"
920,"    public boolean isFollowRedirects() {
        return followRedirects;
    }","  public void test12()  throws Throwable  {
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      Integer integer0 = new Integer(1);
      jDKHttpClientConfig0.withConnectTimeout(integer0);
      jDKHttpClientConfig0.getConnectTimeout();
}"
921,"    public boolean isFollowRedirects() {
        return followRedirects;
    }","  public void test13()  throws Throwable  {
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      Integer integer0 = new Integer(3301);
      jDKHttpClientConfig0.withConnectTimeout(integer0);
      jDKHttpClientConfig0.getConnectTimeout();
}"
922,"    public boolean isFollowRedirects() {
        return followRedirects;
    }","  public void test14()  throws Throwable  {
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      JDKHttpClientConfig jDKHttpClientConfig1 = jDKHttpClientConfig0.createDefaultConfig();
}"
923,"    public boolean isFollowRedirects() {
        return followRedirects;
    }","  public void test15()  throws Throwable  {
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      Proxy proxy0 = Proxy.NO_PROXY;
      jDKHttpClientConfig0.setProxy(proxy0);
      jDKHttpClientConfig0.getProxy();
}"
924,"    public boolean isFollowRedirects() {
        return followRedirects;
    }","  public void test16()  throws Throwable  {
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      boolean boolean0 = jDKHttpClientConfig0.isFollowRedirects();
}"
925,"    public boolean isFollowRedirects() {
        return followRedirects;
    }","  public void test17()  throws Throwable  {
      JDKHttpClientConfig jDKHttpClientConfig0 = new JDKHttpClientConfig();
      jDKHttpClientConfig0.getConnectTimeout();
}"
926,"    public boolean isFollowRedirects() {
        return followRedirects;
    }","  public void test18()  throws Throwable  {
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      Proxy proxy0 = Proxy.NO_PROXY;
      JDKHttpClientConfig jDKHttpClientConfig1 = jDKHttpClientConfig0.withProxy(proxy0);
}"
927,"    public boolean isFollowRedirects() {
        return followRedirects;
    }","  public void test19()  throws Throwable  {
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      jDKHttpClientConfig0.getProxy();
}"
928,"    public boolean isFollowRedirects() {
        return followRedirects;
    }","  public void test20()  throws Throwable  {
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
}"
929,"    public boolean isFollowRedirects() {
        return followRedirects;
    }","  public void test21()  throws Throwable  {
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      jDKHttpClientConfig0.withFollowRedirects(false);
      boolean boolean0 = jDKHttpClientConfig0.isFollowRedirects();
}"
930,"    public boolean isFollowRedirects() {
        return followRedirects;
    }","  public void test22()  throws Throwable  {
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      jDKHttpClientConfig0.getReadTimeout();
}"
931,"    public boolean isFollowRedirects() {
        return followRedirects;
    }","  public void test23()  throws Throwable  {
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      Integer integer0 = new Integer((-2107));
      JDKHttpClientConfig jDKHttpClientConfig1 = jDKHttpClientConfig0.withReadTimeout(integer0);
}"
932,"    public boolean isFollowRedirects() {
        return followRedirects;
    }","  public void test24()  throws Throwable  {
      JDKHttpClientConfig jDKHttpClientConfig0 = JDKHttpClientConfig.defaultConfig();
      Integer integer0 = new Integer((-2107));
      jDKHttpClientConfig0.setConnectTimeout(integer0);
}"
933,"    public static String getStreamContents(InputStream is) throws IOException {
        Preconditions.checkNotNull(is, ""Cannot get String from a null object"");
        final char[] buffer = new char[0x10000];
        final StringBuilder out = new StringBuilder();
        try (Reader in = new InputStreamReader(is, ""UTF-8"")) {
            int read;
            do {
                read = in.read(buffer, 0, buffer.length);
                if (read > 0) {
                    out.append(buffer, 0, read);
                }
            } while (read >= 0);
        }
        return out.toString();
    }","  public void test0()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      String string0 = StreamUtils.getStreamContents(sequenceInputStream0);
}"
934,"    public static String getStreamContents(InputStream is) throws IOException {
        Preconditions.checkNotNull(is, ""Cannot get String from a null object"");
        final char[] buffer = new char[0x10000];
        final StringBuilder out = new StringBuilder();
        try (Reader in = new InputStreamReader(is, ""UTF-8"")) {
            int read;
            do {
                read = in.read(buffer, 0, buffer.length);
                if (read > 0) {
                    out.append(buffer, 0, read);
                }
            } while (read >= 0);
        }
        return out.toString();
    }","  public void test1()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, true).when(enumeration0).hasMoreElements();
      doReturn((Object) null).when(enumeration0).nextElement();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      // Undeclared exception!
      try { 
        StreamUtils.getStreamContents(sequenceInputStream0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.io.SequenceInputStream"", e);
      }
  }"
935,"    public static String getStreamContents(InputStream is) throws IOException {
        Preconditions.checkNotNull(is, ""Cannot get String from a null object"");
        final char[] buffer = new char[0x10000];
        final StringBuilder out = new StringBuilder();
        try (Reader in = new InputStreamReader(is, ""UTF-8"")) {
            int read;
            do {
                read = in.read(buffer, 0, buffer.length);
                if (read > 0) {
                    out.append(buffer, 0, read);
                }
            } while (read >= 0);
        }
        return out.toString();
    }","  public void test2()  throws Throwable  {
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      // Undeclared exception!
      try { 
        StreamUtils.getStreamContents(dataInputStream0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.io.DataInputStream"", e);
      }
  }"
936,"    public static String getStreamContents(InputStream is) throws IOException {
        Preconditions.checkNotNull(is, ""Cannot get String from a null object"");
        final char[] buffer = new char[0x10000];
        final StringBuilder out = new StringBuilder();
        try (Reader in = new InputStreamReader(is, ""UTF-8"")) {
            int read;
            do {
                read = in.read(buffer, 0, buffer.length);
                if (read > 0) {
                    out.append(buffer, 0, read);
                }
            } while (read >= 0);
        }
        return out.toString();
    }","  public void test3()  throws Throwable  {
      // Undeclared exception!
      try { 
        StreamUtils.getStreamContents((InputStream) null);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Cannot get String from a null object
         //
         verifyException(""com.github.scribejava.core.utils.Preconditions"", e);
      }
  }"
937,"    public static String getStreamContents(InputStream is) throws IOException {
        Preconditions.checkNotNull(is, ""Cannot get String from a null object"");
        final char[] buffer = new char[0x10000];
        final StringBuilder out = new StringBuilder();
        try (Reader in = new InputStreamReader(is, ""UTF-8"")) {
            int read;
            do {
                read = in.read(buffer, 0, buffer.length);
                if (read > 0) {
                    out.append(buffer, 0, read);
                }
            } while (read >= 0);
        }
        return out.toString();
    }","  public void test4()  throws Throwable  {
      byte[] byteArray0 = new byte[11];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-2239), 1);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0, 1);
      DataInputStream dataInputStream0 = new DataInputStream(pushbackInputStream0);
      // Undeclared exception!
      try { 
        StreamUtils.getStreamContents(dataInputStream0);
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.io.ByteArrayInputStream"", e);
      }
  }"
938,"    public static String getGzipStreamContents(InputStream is) throws IOException {
        Preconditions.checkNotNull(is, ""Cannot get String from a null object"");
        final GZIPInputStream gis = new GZIPInputStream(is);
        return getStreamContents(gis);
    }","  public void test5()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      try { 
        StreamUtils.getGzipStreamContents(byteArrayInputStream0);
        fail(""Expecting exception: ZipException"");
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException(""java.util.zip.GZIPInputStream"", e);
      }
  }"
939,"    public static String getGzipStreamContents(InputStream is) throws IOException {
        Preconditions.checkNotNull(is, ""Cannot get String from a null object"");
        final GZIPInputStream gis = new GZIPInputStream(is);
        return getStreamContents(gis);
    }","  public void test6()  throws Throwable  {
      // Undeclared exception!
      try { 
        StreamUtils.getGzipStreamContents((InputStream) null);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Cannot get String from a null object
         //
         verifyException(""com.github.scribejava.core.utils.Preconditions"", e);
      }
  }"
940,"    public static String getGzipStreamContents(InputStream is) throws IOException {
        Preconditions.checkNotNull(is, ""Cannot get String from a null object"");
        final GZIPInputStream gis = new GZIPInputStream(is);
        return getStreamContents(gis);
    }","  public void test7()  throws Throwable  {
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null);
      try { 
        StreamUtils.getGzipStreamContents(pushbackInputStream0);
        fail(""Expecting exception: IOException"");
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException(""java.io.PushbackInputStream"", e);
      }
  }"
941,"    public static String getStreamContents(InputStream is) throws IOException {
        Preconditions.checkNotNull(is, ""Cannot get String from a null object"");
        final char[] buffer = new char[0x10000];
        final StringBuilder out = new StringBuilder();
        try (Reader in = new InputStreamReader(is, ""UTF-8"")) {
            int read;
            do {
                read = in.read(buffer, 0, buffer.length);
                if (read > 0) {
                    out.append(buffer, 0, read);
                }
            } while (read >= 0);
        }
        return out.toString();
    }","  public void test8()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      try { 
        StreamUtils.getStreamContents(dataInputStream0);
        fail(""Expecting exception: IOException"");
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException(""java.io.PipedInputStream"", e);
      }
  }"
942,"    public static String getStreamContents(InputStream is) throws IOException {
        Preconditions.checkNotNull(is, ""Cannot get String from a null object"");
        final char[] buffer = new char[0x10000];
        final StringBuilder out = new StringBuilder();
        try (Reader in = new InputStreamReader(is, ""UTF-8"")) {
            int read;
            do {
                read = in.read(buffer, 0, buffer.length);
                if (read > 0) {
                    out.append(buffer, 0, read);
                }
            } while (read >= 0);
        }
        return out.toString();
    }","  public void test9()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      String string0 = StreamUtils.getStreamContents(byteArrayInputStream0);
}"
943,"    public static String getGzipStreamContents(InputStream is) throws IOException {
        Preconditions.checkNotNull(is, ""Cannot get String from a null object"");
        final GZIPInputStream gis = new GZIPInputStream(is);
        return getStreamContents(gis);
    }","  public void test10()  throws Throwable  {
      Enumeration<ByteArrayInputStream> enumeration0 = (Enumeration<ByteArrayInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      try { 
        StreamUtils.getGzipStreamContents(sequenceInputStream0);
        fail(""Expecting exception: EOFException"");
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.util.zip.GZIPInputStream"", e);
      }
  }"
944,"    public static void checkEmptyString(String string, String errorMsg) {
        check(hasText(string), errorMsg);
    }","  public void test0()  throws Throwable  {
      Preconditions.checkEmptyString(""60b"", """");
  }"
945,"    public static boolean hasText(String str) {
        if (str == null || str.isEmpty()) {
            return false;
        }
        final int strLen = str.length();
        for (int i = 0; i < strLen; i++) {
            if (!Character.isWhitespace(str.charAt(i))) {
                return true;
            }
        }
        return false;
    }","  public void test1()  throws Throwable  {
      boolean boolean0 = Preconditions.hasText(""60b"");
}"
946,"    public static boolean hasText(String str) {
        if (str == null || str.isEmpty()) {
            return false;
        }
        final int strLen = str.length();
        for (int i = 0; i < strLen; i++) {
            if (!Character.isWhitespace(str.charAt(i))) {
                return true;
            }
        }
        return false;
    }","  public void test2()  throws Throwable  {
      boolean boolean0 = Preconditions.hasText((String) null);
}"
947,"    public static boolean hasText(String str) {
        if (str == null || str.isEmpty()) {
            return false;
        }
        final int strLen = str.length();
        for (int i = 0; i < strLen; i++) {
            if (!Character.isWhitespace(str.charAt(i))) {
                return true;
            }
        }
        return false;
    }","  public void test3()  throws Throwable  {
      boolean boolean0 = Preconditions.hasText("""");
}"
948,"    public static boolean hasText(String str) {
        if (str == null || str.isEmpty()) {
            return false;
        }
        final int strLen = str.length();
        for (int i = 0; i < strLen; i++) {
            if (!Character.isWhitespace(str.charAt(i))) {
                return true;
            }
        }
        return false;
    }","  public void test4()  throws Throwable  {
      boolean boolean0 = Preconditions.hasText("" "");
}"
949,"    public static void checkNotNull(Object object, String errorMsg) {
        check(object != null, errorMsg);
    }","  public void test5()  throws Throwable  {
      Preconditions.checkNotNull("""", """");
  }"
950,"    public static void checkNotNull(Object object, String errorMsg) {
        check(object != null, errorMsg);
    }","  public void test6()  throws Throwable  {
      // Undeclared exception!
      try { 
        Preconditions.checkNotNull((Object) null, ""x{baN&vVVe"");
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // x{baN&vVVe
         //
         verifyException(""com.github.scribejava.core.utils.Preconditions"", e);
      }
  }"
951,"    public static void checkEmptyString(String string, String errorMsg) {
        check(hasText(string), errorMsg);
    }","  public void test7()  throws Throwable  {
      // Undeclared exception!
      try { 
        Preconditions.checkEmptyString((String) null, """");
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Received an invalid parameter
         //
         verifyException(""com.github.scribejava.core.utils.Preconditions"", e);
      }
  }"
952,"    public static String encode(String plain) {
        Preconditions.checkNotNull(plain, ""Cannot encode null object"");
        String encoded;
        try {
            encoded = URLEncoder.encode(plain, CHARSET);
        } catch (UnsupportedEncodingException uee) {
            throw new OAuthException(""Charset not found while encoding string: "" + CHARSET, uee);
        }
        for (Map.Entry<String, String> rule : ENCODING_RULES.entrySet()) {
            encoded = applyRule(encoded, rule.getKey(), rule.getValue());
        }
        return encoded;
    }","  public void test0()  throws Throwable  {
      String string0 = OAuthEncoder.encode("""");
}"
953,"    public static String decode(String encoded) {
        Preconditions.checkNotNull(encoded, ""Cannot decode null object"");
        try {
            return URLDecoder.decode(encoded, CHARSET);
        } catch (UnsupportedEncodingException uee) {
            throw new OAuthException(""Charset not found while decoding string: "" + CHARSET, uee);
        }
    }","  public void test1()  throws Throwable  {
      String string0 = OAuthEncoder.decode("""");
}"
954,"    public static String encode(String plain) {
        Preconditions.checkNotNull(plain, ""Cannot encode null object"");
        String encoded;
        try {
            encoded = URLEncoder.encode(plain, CHARSET);
        } catch (UnsupportedEncodingException uee) {
            throw new OAuthException(""Charset not found while encoding string: "" + CHARSET, uee);
        }
        for (Map.Entry<String, String> rule : ENCODING_RULES.entrySet()) {
            encoded = applyRule(encoded, rule.getKey(), rule.getValue());
        }
        return encoded;
    }","  public void test2()  throws Throwable  {
      // Undeclared exception!
      try { 
        OAuthEncoder.encode((String) null);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Cannot encode null object
         //
         verifyException(""com.github.scribejava.core.utils.Preconditions"", e);
      }
  }"
955,"    public static String decode(String encoded) {
        Preconditions.checkNotNull(encoded, ""Cannot decode null object"");
        try {
            return URLDecoder.decode(encoded, CHARSET);
        } catch (UnsupportedEncodingException uee) {
            throw new OAuthException(""Charset not found while decoding string: "" + CHARSET, uee);
        }
    }","  public void test3()  throws Throwable  {
      // Undeclared exception!
      try { 
        OAuthEncoder.decode(""`qQeXyBFI5u%"");
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // URLDecoder: Incomplete trailing escape (%) pattern
         //
         verifyException(""java.net.URLDecoder"", e);
      }
  }"
956,"    public static String decode(String encoded) {
        Preconditions.checkNotNull(encoded, ""Cannot decode null object"");
        try {
            return URLDecoder.decode(encoded, CHARSET);
        } catch (UnsupportedEncodingException uee) {
            throw new OAuthException(""Charset not found while decoding string: "" + CHARSET, uee);
        }
    }","  public void test4()  throws Throwable  {
      // Undeclared exception!
      try { 
        OAuthEncoder.decode((String) null);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Cannot decode null object
         //
         verifyException(""com.github.scribejava.core.utils.Preconditions"", e);
      }
  }"
957,"    public static String encode(String plain) {
        Preconditions.checkNotNull(plain, ""Cannot encode null object"");
        String encoded;
        try {
            encoded = URLEncoder.encode(plain, CHARSET);
        } catch (UnsupportedEncodingException uee) {
            throw new OAuthException(""Charset not found while encoding string: "" + CHARSET, uee);
        }
        for (Map.Entry<String, String> rule : ENCODING_RULES.entrySet()) {
            encoded = applyRule(encoded, rule.getKey(), rule.getValue());
        }
        return encoded;
    }","  public void test5()  throws Throwable  {
      String string0 = OAuthEncoder.encode("")^LWzu,j"");
}"
958,"    public static String decode(String encoded) {
        Preconditions.checkNotNull(encoded, ""Cannot decode null object"");
        try {
            return URLDecoder.decode(encoded, CHARSET);
        } catch (UnsupportedEncodingException uee) {
            throw new OAuthException(""Charset not found while decoding string: "" + CHARSET, uee);
        }
    }","  public void test6()  throws Throwable  {
      String string0 = OAuthEncoder.decode(""{P.SjDggQ9D*Ab"");
}"
959,"    public String getSignature(String baseString, String apiSecret, String tokenSecret) {
        try {
            final Signature signature = Signature.getInstance(RSA_SHA1);
            signature.initSign(privateKey);
            signature.update(baseString.getBytes(UTF8));
            return Base64.encode(signature.sign());
        } catch (NoSuchAlgorithmException | InvalidKeyException | SignatureException | UnsupportedEncodingException
                | RuntimeException e) {
            throw new OAuthSignatureException(baseString, e);
        }
    }","  public void test0()  throws Throwable  {
      PrivateKey privateKey0 = mock(PrivateKey.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(privateKey0).getAlgorithm();
      RSASha1SignatureService rSASha1SignatureService0 = new RSASha1SignatureService(privateKey0);
      // Undeclared exception!
      try { 
        rSASha1SignatureService0.getSignature(""jakarta.xml.bind.DatatypeConverter"", ""b3UEE1&"", ""6%Th7h;"");
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // Error while signing string: jakarta.xml.bind.DatatypeConverter
         //
         verifyException(""com.github.scribejava.core.services.RSASha1SignatureService"", e);
      }
  }"
960,"    public String getSignatureMethod() {
        return METHOD;
    }","  public void test1()  throws Throwable  {
      PrivateKey privateKey0 = mock(PrivateKey.class, new ViolatedAssumptionAnswer());
      RSASha1SignatureService rSASha1SignatureService0 = new RSASha1SignatureService(privateKey0);
      String string0 = rSASha1SignatureService0.getSignatureMethod();
}"
961,"    public String getSignature(String baseString, String apiSecret, String tokenSecret) {
        try {
            Preconditions.checkNotNull(apiSecret, ""Api secret can't be null"");
            return OAuthEncoder.encode(apiSecret) + '&' + OAuthEncoder.encode(tokenSecret);
        } catch (Exception e) {
            throw new OAuthSignatureException(baseString, e);
        }
    }","  public void test0()  throws Throwable  {
      PlaintextSignatureService plaintextSignatureService0 = new PlaintextSignatureService();
      // Undeclared exception!
      try { 
        plaintextSignatureService0.getSignature(""jZ%213&bcrI6"", ""jZ%213&bcrI6"", (String) null);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // Error while signing string: jZ%213&bcrI6
         //
         verifyException(""com.github.scribejava.core.services.PlaintextSignatureService"", e);
      }
  }"
962,"    public String getSignature(String baseString, String apiSecret, String tokenSecret) {
        try {
            Preconditions.checkNotNull(apiSecret, ""Api secret can't be null"");
            return OAuthEncoder.encode(apiSecret) + '&' + OAuthEncoder.encode(tokenSecret);
        } catch (Exception e) {
            throw new OAuthSignatureException(baseString, e);
        }
    }","  public void test1()  throws Throwable  {
      PlaintextSignatureService plaintextSignatureService0 = new PlaintextSignatureService();
      String string0 = plaintextSignatureService0.getSignature(""PLAINTEXT"", ""PLAINTEXT"", """");
}"
963,"    public String getSignature(String baseString, String apiSecret, String tokenSecret) {
        try {
            Preconditions.checkNotNull(apiSecret, ""Api secret can't be null"");
            return OAuthEncoder.encode(apiSecret) + '&' + OAuthEncoder.encode(tokenSecret);
        } catch (Exception e) {
            throw new OAuthSignatureException(baseString, e);
        }
    }","  public void test2()  throws Throwable  {
      PlaintextSignatureService plaintextSignatureService0 = new PlaintextSignatureService();
      // Undeclared exception!
      try { 
        plaintextSignatureService0.getSignature((String) null, ""PLAINTEXT"", (String) null);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // Error while signing string: null
         //
         verifyException(""com.github.scribejava.core.services.PlaintextSignatureService"", e);
      }
  }"
964,"    public String getSignatureMethod() {
        return METHOD;
    }","  public void test3()  throws Throwable  {
      PlaintextSignatureService plaintextSignatureService0 = new PlaintextSignatureService();
      String string0 = plaintextSignatureService0.getSignatureMethod();
}"
965,"    public String getNonce() {
        final Long ts = getTs();
        return String.valueOf(ts + timer.getRandomInteger());
    }","  public void test0()  throws Throwable  {
      TimestampServiceImpl timestampServiceImpl0 = new TimestampServiceImpl();
      TimestampServiceImpl.Timer timestampServiceImpl_Timer0 = new TimestampServiceImpl.Timer();
      timestampServiceImpl_Timer0.getRandomInteger();
      String string0 = timestampServiceImpl0.getNonce();
}"
966,"    public TimestampServiceImpl() {
        timer = new Timer();
    }","  public void test1()  throws Throwable  {
      TimestampServiceImpl.Timer timestampServiceImpl_Timer0 = new TimestampServiceImpl.Timer();
      Long long0 = timestampServiceImpl_Timer0.getMilis();
}"
967,"    public String getTimestampInSeconds() {
        return String.valueOf(getTs());
    }","  public void test2()  throws Throwable  {
      TimestampServiceImpl timestampServiceImpl0 = new TimestampServiceImpl();
      timestampServiceImpl0.setTimer((TimestampServiceImpl.Timer) null);
      // Undeclared exception!
      try { 
        timestampServiceImpl0.getTimestampInSeconds();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""com.github.scribejava.core.services.TimestampServiceImpl"", e);
      }
  }"
968,"    public String getNonce() {
        final Long ts = getTs();
        return String.valueOf(ts + timer.getRandomInteger());
    }","  public void test3()  throws Throwable  {
      TimestampServiceImpl timestampServiceImpl0 = new TimestampServiceImpl();
      timestampServiceImpl0.setTimer((TimestampServiceImpl.Timer) null);
      // Undeclared exception!
      try { 
        timestampServiceImpl0.getNonce();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""com.github.scribejava.core.services.TimestampServiceImpl"", e);
      }
  }"
969,"    public String getTimestampInSeconds() {
        return String.valueOf(getTs());
    }","  public void test4()  throws Throwable  {
      TimestampServiceImpl timestampServiceImpl0 = new TimestampServiceImpl();
      String string0 = timestampServiceImpl0.getTimestampInSeconds();
}"
970,"    public String getSignature(String baseString, String apiSecret, String tokenSecret) {
        try {
            Preconditions.checkEmptyString(baseString, ""Base string can't be null or empty string"");
            Preconditions.checkNotNull(apiSecret, ""Api secret can't be null"");
            return doSign(baseString, OAuthEncoder.encode(apiSecret) + '&' + OAuthEncoder.encode(tokenSecret));
        } catch (UnsupportedEncodingException | NoSuchAlgorithmException | InvalidKeyException | RuntimeException e) {
            throw new OAuthSignatureException(baseString, e);
        }
    }","  public void test0()  throws Throwable  {
      HMACSha1SignatureService hMACSha1SignatureService0 = new HMACSha1SignatureService();
      // Undeclared exception!
      try { 
        hMACSha1SignatureService0.getSignature("""", ""[0!~t39jXn0e=Rf!Bm"", ""[0!~t39jXn0e=Rf!Bm"");
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // Error while signing string: 
         //
         verifyException(""com.github.scribejava.core.services.HMACSha1SignatureService"", e);
      }
  }"
971,"    public String getSignature(String baseString, String apiSecret, String tokenSecret) {
        try {
            Preconditions.checkEmptyString(baseString, ""Base string can't be null or empty string"");
            Preconditions.checkNotNull(apiSecret, ""Api secret can't be null"");
            return doSign(baseString, OAuthEncoder.encode(apiSecret) + '&' + OAuthEncoder.encode(tokenSecret));
        } catch (UnsupportedEncodingException | NoSuchAlgorithmException | InvalidKeyException | RuntimeException e) {
            throw new OAuthSignatureException(baseString, e);
        }
    }","  public void test1()  throws Throwable  {
      HMACSha1SignatureService hMACSha1SignatureService0 = new HMACSha1SignatureService();
      String string0 = hMACSha1SignatureService0.getSignature(""(0:k"", """", ""com.github.scribejava.core.services.HMACSha1SignatureService"");
}"
972,"    public String getSignatureMethod() {
        return METHOD;
    }","  public void test2()  throws Throwable  {
      HMACSha1SignatureService hMACSha1SignatureService0 = new HMACSha1SignatureService();
      String string0 = hMACSha1SignatureService0.getSignatureMethod();
}"
973,"    protected OAuth1RequestToken createToken(String token, String secret, String response) {
        return new OAuth1RequestToken(token, secret, response);
    }","  public void test0()  throws Throwable  {
      OAuth1RequestTokenExtractor oAuth1RequestTokenExtractor0 = new OAuth1RequestTokenExtractor();
      OAuth1RequestToken oAuth1RequestToken0 = oAuth1RequestTokenExtractor0.createToken(""JKux}?<>.V"", ""JKux}?<>.V"", ""|)H1."");
}"
974,"    protected OAuth1RequestToken createToken(String token, String secret, String response) {
        return new OAuth1RequestToken(token, secret, response);
    }","  public void test1()  throws Throwable  {
      OAuth1RequestTokenExtractor oAuth1RequestTokenExtractor0 = new OAuth1RequestTokenExtractor();
      OAuth1RequestToken oAuth1RequestToken0 = oAuth1RequestTokenExtractor0.createToken(""JKux}?<>.V"", ""JKux}?<>.V"", ""|)H1."");
}"
975,"    protected OAuth1RequestToken createToken(String token, String secret, String response) {
        return new OAuth1RequestToken(token, secret, response);
    }","  public void test2()  throws Throwable  {
      OAuth1RequestTokenExtractor oAuth1RequestTokenExtractor0 = new OAuth1RequestTokenExtractor();
      OAuth1RequestToken oAuth1RequestToken0 = oAuth1RequestTokenExtractor0.createToken("""", """", """");
}"
976,"    protected OAuth1RequestToken createToken(String token, String secret, String response) {
        return new OAuth1RequestToken(token, secret, response);
    }","  public void test3()  throws Throwable  {
      OAuth1RequestTokenExtractor oAuth1RequestTokenExtractor0 = new OAuth1RequestTokenExtractor();
      // Undeclared exception!
      try { 
        oAuth1RequestTokenExtractor0.createToken(""com.github.scribejava.core.extractors.OAuth1RequestTokenExtractor"", (String) null, (String) null);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // oauth_token_secret can't be null
         //
         verifyException(""com.github.scribejava.core.utils.Preconditions"", e);
      }
  }"
977,"    public static OAuth1RequestTokenExtractor instance() {
        return InstanceHolder.INSTANCE;
    }","  public void test4()  throws Throwable  {
      OAuth1RequestTokenExtractor oAuth1RequestTokenExtractor0 = OAuth1RequestTokenExtractor.instance();
}"
978,"    protected OAuth1RequestToken createToken(String token, String secret, String response) {
        return new OAuth1RequestToken(token, secret, response);
    }","  public void test0()  throws Throwable  {
      OAuth1RequestTokenJSONExtractor oAuth1RequestTokenJSONExtractor0 = new OAuth1RequestTokenJSONExtractor();
      // Undeclared exception!
      try { 
        oAuth1RequestTokenJSONExtractor0.createToken((String) null, (String) null, "";MP3<!j`S)=9j<AO}u"");
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // oauth_token can't be null
         //
         verifyException(""com.github.scribejava.core.utils.Preconditions"", e);
      }
  }"
979,"    protected OAuth1RequestToken createToken(String token, String secret, String response) {
        return new OAuth1RequestToken(token, secret, response);
    }","  public void test1()  throws Throwable  {
      OAuth1RequestTokenJSONExtractor oAuth1RequestTokenJSONExtractor0 = OAuth1RequestTokenJSONExtractor.instance();
      OAuth1RequestToken oAuth1RequestToken0 = oAuth1RequestTokenJSONExtractor0.createToken("""", """", """");
}"
980,"    protected OAuth1RequestToken createToken(String token, String secret, String response) {
        return new OAuth1RequestToken(token, secret, response);
    }","  public void test2()  throws Throwable  {
      OAuth1RequestTokenJSONExtractor oAuth1RequestTokenJSONExtractor0 = new OAuth1RequestTokenJSONExtractor();
      OAuth1RequestToken oAuth1RequestToken0 = oAuth1RequestTokenJSONExtractor0.createToken(""VDO"", "";MP3<!j`S)=9j<AO}u"", "";MP3<!j`S)=9j<AO}u"");
}"
981,"    protected OAuth1RequestToken createToken(String token, String secret, String response) {
        return new OAuth1RequestToken(token, secret, response);
    }","  public void test3()  throws Throwable  {
      OAuth1RequestTokenJSONExtractor oAuth1RequestTokenJSONExtractor0 = new OAuth1RequestTokenJSONExtractor();
      OAuth1RequestToken oAuth1RequestToken0 = oAuth1RequestTokenJSONExtractor0.createToken(""VDO"", "";MP3<!j`S)=9j<AO}u"", "";MP3<!j`S)=9j<AO}u"");
}"
982,"    public OAuth2AccessToken extract(Response response) throws IOException {
        if (response.getCode() != 200) {
            throw new OAuthException(""Response code is not 200 but '"" + response.getCode() + '\'');
        }
        final String body = response.getBody();
        Preconditions.checkEmptyString(body,
                ""Response body is incorrect. Can't extract a token from an empty string"");

        final String accessToken = extractParameter(body, ACCESS_TOKEN_REGEX_PATTERN, true);
        final String tokenType = extractParameter(body, TOKEN_TYPE_REGEX_PATTERN, false);
        final String expiresInString = extractParameter(body, EXPIRES_IN_REGEX_PATTERN, false);
        Integer expiresIn;
        try {
            expiresIn = expiresInString == null ? null : Integer.valueOf(expiresInString);
        } catch (NumberFormatException nfe) {
            expiresIn = null;
        }
        final String refreshToken = extractParameter(body, REFRESH_TOKEN_REGEX_PATTERN, false);
        final String scope = extractParameter(body, SCOPE_REGEX_PATTERN, false);

        return new OAuth2AccessToken(accessToken, tokenType, expiresIn, refreshToken, scope, body);
    }","  public void test0()  throws Throwable  {
      OAuth2AccessTokenExtractor oAuth2AccessTokenExtractor0 = OAuth2AccessTokenExtractor.instance();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Response response0 = new Response(1093, ""Pp 8}%0HBW"", hashMap0, ""Pp 8}%0HBW"");
      // Undeclared exception!
      try { 
        oAuth2AccessTokenExtractor0.extract(response0);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // Response code is not 200 but '1093'
         //
         verifyException(""com.github.scribejava.core.extractors.OAuth2AccessTokenExtractor"", e);
      }
  }"
983,"    public OAuth2AccessToken extract(Response response) throws IOException {
        if (response.getCode() != 200) {
            throw new OAuthException(""Response code is not 200 but '"" + response.getCode() + '\'');
        }
        final String body = response.getBody();
        Preconditions.checkEmptyString(body,
                ""Response body is incorrect. Can't extract a token from an empty string"");

        final String accessToken = extractParameter(body, ACCESS_TOKEN_REGEX_PATTERN, true);
        final String tokenType = extractParameter(body, TOKEN_TYPE_REGEX_PATTERN, false);
        final String expiresInString = extractParameter(body, EXPIRES_IN_REGEX_PATTERN, false);
        Integer expiresIn;
        try {
            expiresIn = expiresInString == null ? null : Integer.valueOf(expiresInString);
        } catch (NumberFormatException nfe) {
            expiresIn = null;
        }
        final String refreshToken = extractParameter(body, REFRESH_TOKEN_REGEX_PATTERN, false);
        final String scope = extractParameter(body, SCOPE_REGEX_PATTERN, false);

        return new OAuth2AccessToken(accessToken, tokenType, expiresIn, refreshToken, scope, body);
    }","  public void test1()  throws Throwable  {
      OAuth2AccessTokenExtractor oAuth2AccessTokenExtractor0 = OAuth2AccessTokenExtractor.instance();
      // Undeclared exception!
      try { 
        oAuth2AccessTokenExtractor0.extract((Response) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""com.github.scribejava.core.extractors.OAuth2AccessTokenExtractor"", e);
      }
  }"
984,"    public OAuth2AccessToken extract(Response response) throws IOException {
        if (response.getCode() != 200) {
            throw new OAuthException(""Response code is not 200 but '"" + response.getCode() + '\'');
        }
        final String body = response.getBody();
        Preconditions.checkEmptyString(body,
                ""Response body is incorrect. Can't extract a token from an empty string"");

        final String accessToken = extractParameter(body, ACCESS_TOKEN_REGEX_PATTERN, true);
        final String tokenType = extractParameter(body, TOKEN_TYPE_REGEX_PATTERN, false);
        final String expiresInString = extractParameter(body, EXPIRES_IN_REGEX_PATTERN, false);
        Integer expiresIn;
        try {
            expiresIn = expiresInString == null ? null : Integer.valueOf(expiresInString);
        } catch (NumberFormatException nfe) {
            expiresIn = null;
        }
        final String refreshToken = extractParameter(body, REFRESH_TOKEN_REGEX_PATTERN, false);
        final String scope = extractParameter(body, SCOPE_REGEX_PATTERN, false);

        return new OAuth2AccessToken(accessToken, tokenType, expiresIn, refreshToken, scope, body);
    }","  public void test2()  throws Throwable  {
      OAuth2AccessTokenExtractor oAuth2AccessTokenExtractor0 = new OAuth2AccessTokenExtractor();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(dataInputStream0);
      Closeable[] closeableArray0 = new Closeable[7];
      Response response0 = new Response(200, ""@2xo6#_#c^_,|\u0002d"", hashMap0, pushbackInputStream0, closeableArray0);
      // Undeclared exception!
      try { 
        oAuth2AccessTokenExtractor0.extract(response0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.io.DataInputStream"", e);
      }
  }"
985,"    public OAuth2AccessToken extract(Response response) throws IOException {
        if (response.getCode() != 200) {
            throw new OAuthException(""Response code is not 200 but '"" + response.getCode() + '\'');
        }
        final String body = response.getBody();
        Preconditions.checkEmptyString(body,
                ""Response body is incorrect. Can't extract a token from an empty string"");

        final String accessToken = extractParameter(body, ACCESS_TOKEN_REGEX_PATTERN, true);
        final String tokenType = extractParameter(body, TOKEN_TYPE_REGEX_PATTERN, false);
        final String expiresInString = extractParameter(body, EXPIRES_IN_REGEX_PATTERN, false);
        Integer expiresIn;
        try {
            expiresIn = expiresInString == null ? null : Integer.valueOf(expiresInString);
        } catch (NumberFormatException nfe) {
            expiresIn = null;
        }
        final String refreshToken = extractParameter(body, REFRESH_TOKEN_REGEX_PATTERN, false);
        final String scope = extractParameter(body, SCOPE_REGEX_PATTERN, false);

        return new OAuth2AccessToken(accessToken, tokenType, expiresIn, refreshToken, scope, body);
    }","  public void test3()  throws Throwable  {
      OAuth2AccessTokenExtractor oAuth2AccessTokenExtractor0 = OAuth2AccessTokenExtractor.instance();
      Response response0 = new Response(200, """", (Map<String, String>) null, """");
      // Undeclared exception!
      try { 
        oAuth2AccessTokenExtractor0.extract(response0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Response body is incorrect. Can't extract a token from an empty string
         //
         verifyException(""com.github.scribejava.core.utils.Preconditions"", e);
      }
  }"
986,"    public OAuth2AccessToken extract(Response response) throws IOException {
        if (response.getCode() != 200) {
            throw new OAuthException(""Response code is not 200 but '"" + response.getCode() + '\'');
        }
        final String body = response.getBody();
        Preconditions.checkEmptyString(body,
                ""Response body is incorrect. Can't extract a token from an empty string"");

        final String accessToken = extractParameter(body, ACCESS_TOKEN_REGEX_PATTERN, true);
        final String tokenType = extractParameter(body, TOKEN_TYPE_REGEX_PATTERN, false);
        final String expiresInString = extractParameter(body, EXPIRES_IN_REGEX_PATTERN, false);
        Integer expiresIn;
        try {
            expiresIn = expiresInString == null ? null : Integer.valueOf(expiresInString);
        } catch (NumberFormatException nfe) {
            expiresIn = null;
        }
        final String refreshToken = extractParameter(body, REFRESH_TOKEN_REGEX_PATTERN, false);
        final String scope = extractParameter(body, SCOPE_REGEX_PATTERN, false);

        return new OAuth2AccessToken(accessToken, tokenType, expiresIn, refreshToken, scope, body);
    }","  public void test4()  throws Throwable  {
      OAuth2AccessTokenExtractor oAuth2AccessTokenExtractor0 = new OAuth2AccessTokenExtractor();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      byte[] byteArray0 = new byte[5];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-34), (byte)96);
      Response response0 = new Response(200, ""p`L=|JFll5o@n"", hashMap0, byteArrayInputStream0, (Closeable[]) null);
      // Undeclared exception!
      try { 
        oAuth2AccessTokenExtractor0.extract(response0);
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.io.ByteArrayInputStream"", e);
      }
  }"
987,"    public OAuth2AccessToken extract(Response response) throws IOException {
        if (response.getCode() != 200) {
            throw new OAuthException(""Response code is not 200 but '"" + response.getCode() + '\'');
        }
        final String body = response.getBody();
        Preconditions.checkEmptyString(body,
                ""Response body is incorrect. Can't extract a token from an empty string"");

        final String accessToken = extractParameter(body, ACCESS_TOKEN_REGEX_PATTERN, true);
        final String tokenType = extractParameter(body, TOKEN_TYPE_REGEX_PATTERN, false);
        final String expiresInString = extractParameter(body, EXPIRES_IN_REGEX_PATTERN, false);
        Integer expiresIn;
        try {
            expiresIn = expiresInString == null ? null : Integer.valueOf(expiresInString);
        } catch (NumberFormatException nfe) {
            expiresIn = null;
        }
        final String refreshToken = extractParameter(body, REFRESH_TOKEN_REGEX_PATTERN, false);
        final String scope = extractParameter(body, SCOPE_REGEX_PATTERN, false);

        return new OAuth2AccessToken(accessToken, tokenType, expiresIn, refreshToken, scope, body);
    }","  public void test5()  throws Throwable  {
      OAuth2AccessTokenExtractor oAuth2AccessTokenExtractor0 = new OAuth2AccessTokenExtractor();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Response response0 = new Response(200, ""!~]m5I/[Zdz^Wg"", hashMap0, ""!~]m5I/[Zdz^Wg"");
      // Undeclared exception!
      try { 
        oAuth2AccessTokenExtractor0.extract(response0);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // Response body is incorrect. Can't extract a 'access_token=([^&]+)' from this: '!~]m5I/[Zdz^Wg'
         //
         verifyException(""com.github.scribejava.core.extractors.OAuth2AccessTokenExtractor"", e);
      }
  }"
988,"    public OAuth2AccessToken extract(Response response) throws IOException {
        if (response.getCode() != 200) {
            throw new OAuthException(""Response code is not 200 but '"" + response.getCode() + '\'');
        }
        final String body = response.getBody();
        Preconditions.checkEmptyString(body,
                ""Response body is incorrect. Can't extract a token from an empty string"");

        final String accessToken = extractParameter(body, ACCESS_TOKEN_REGEX_PATTERN, true);
        final String tokenType = extractParameter(body, TOKEN_TYPE_REGEX_PATTERN, false);
        final String expiresInString = extractParameter(body, EXPIRES_IN_REGEX_PATTERN, false);
        Integer expiresIn;
        try {
            expiresIn = expiresInString == null ? null : Integer.valueOf(expiresInString);
        } catch (NumberFormatException nfe) {
            expiresIn = null;
        }
        final String refreshToken = extractParameter(body, REFRESH_TOKEN_REGEX_PATTERN, false);
        final String scope = extractParameter(body, SCOPE_REGEX_PATTERN, false);

        return new OAuth2AccessToken(accessToken, tokenType, expiresIn, refreshToken, scope, body);
    }","  public void test6()  throws Throwable  {
      OAuth2AccessTokenExtractor oAuth2AccessTokenExtractor0 = OAuth2AccessTokenExtractor.instance();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Response response0 = new Response(200, ""access_token=([^&]+)"", hashMap0, ""access_token=([^&]+)"");
      OAuth2AccessToken oAuth2AccessToken0 = oAuth2AccessTokenExtractor0.extract(response0);
}"
989,"    public OAuth2AccessToken extract(Response response) throws IOException {
        if (response.getCode() != 200) {
            throw new OAuthException(""Response code is not 200 but '"" + response.getCode() + '\'');
        }
        final String body = response.getBody();
        Preconditions.checkEmptyString(body,
                ""Response body is incorrect. Can't extract a token from an empty string"");

        final String accessToken = extractParameter(body, ACCESS_TOKEN_REGEX_PATTERN, true);
        final String tokenType = extractParameter(body, TOKEN_TYPE_REGEX_PATTERN, false);
        final String expiresInString = extractParameter(body, EXPIRES_IN_REGEX_PATTERN, false);
        Integer expiresIn;
        try {
            expiresIn = expiresInString == null ? null : Integer.valueOf(expiresInString);
        } catch (NumberFormatException nfe) {
            expiresIn = null;
        }
        final String refreshToken = extractParameter(body, REFRESH_TOKEN_REGEX_PATTERN, false);
        final String scope = extractParameter(body, SCOPE_REGEX_PATTERN, false);

        return new OAuth2AccessToken(accessToken, tokenType, expiresIn, refreshToken, scope, body);
    }","  public void test7()  throws Throwable  {
      OAuth2AccessTokenExtractor oAuth2AccessTokenExtractor0 = OAuth2AccessTokenExtractor.instance();
      Response response0 = new Response((-1425), ""T{l"", (Map<String, String>) null, ""T{l"");
      // Undeclared exception!
      try { 
        oAuth2AccessTokenExtractor0.extract(response0);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // Response code is not 200 but '-1425'
         //
         verifyException(""com.github.scribejava.core.extractors.OAuth2AccessTokenExtractor"", e);
      }
  }"
990,"    public OAuth2AccessToken extract(Response response) throws IOException {
        if (response.getCode() != 200) {
            throw new OAuthException(""Response code is not 200 but '"" + response.getCode() + '\'');
        }
        final String body = response.getBody();
        Preconditions.checkEmptyString(body,
                ""Response body is incorrect. Can't extract a token from an empty string"");

        final String accessToken = extractParameter(body, ACCESS_TOKEN_REGEX_PATTERN, true);
        final String tokenType = extractParameter(body, TOKEN_TYPE_REGEX_PATTERN, false);
        final String expiresInString = extractParameter(body, EXPIRES_IN_REGEX_PATTERN, false);
        Integer expiresIn;
        try {
            expiresIn = expiresInString == null ? null : Integer.valueOf(expiresInString);
        } catch (NumberFormatException nfe) {
            expiresIn = null;
        }
        final String refreshToken = extractParameter(body, REFRESH_TOKEN_REGEX_PATTERN, false);
        final String scope = extractParameter(body, SCOPE_REGEX_PATTERN, false);

        return new OAuth2AccessToken(accessToken, tokenType, expiresIn, refreshToken, scope, body);
    }","  public void test8()  throws Throwable  {
      OAuth2AccessTokenExtractor oAuth2AccessTokenExtractor0 = new OAuth2AccessTokenExtractor();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      Response response0 = new Response(200, ""S.\""$) O8[GK4J"", hashMap0, pipedInputStream0, (Closeable[]) null);
      try { 
        oAuth2AccessTokenExtractor0.extract(response0);
        fail(""Expecting exception: IOException"");
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException(""java.io.PipedInputStream"", e);
      }
  }"
991,"    protected OAuth1AccessToken createToken(String token, String secret, String response) {
        return new OAuth1AccessToken(token, secret, response);
    }","  public void test0()  throws Throwable  {
      OAuth1AccessTokenJSONExtractor oAuth1AccessTokenJSONExtractor0 = OAuth1AccessTokenJSONExtractor.instance();
      OAuth1AccessToken oAuth1AccessToken0 = oAuth1AccessTokenJSONExtractor0.createToken("""", """", """");
}"
992,"    protected OAuth1AccessToken createToken(String token, String secret, String response) {
        return new OAuth1AccessToken(token, secret, response);
    }","  public void test1()  throws Throwable  {
      OAuth1AccessTokenJSONExtractor oAuth1AccessTokenJSONExtractor0 = OAuth1AccessTokenJSONExtractor.instance();
      OAuth1AccessToken oAuth1AccessToken0 = oAuth1AccessTokenJSONExtractor0.createToken(""w<"", ""w<"", ""w<"");
}"
993,"    protected OAuth1AccessToken createToken(String token, String secret, String response) {
        return new OAuth1AccessToken(token, secret, response);
    }","  public void test2()  throws Throwable  {
      OAuth1AccessTokenJSONExtractor oAuth1AccessTokenJSONExtractor0 = OAuth1AccessTokenJSONExtractor.instance();
      // Undeclared exception!
      try { 
        oAuth1AccessTokenJSONExtractor0.createToken("""", (String) null, ""E~GPEpW"");
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // oauth_token_secret can't be null
         //
         verifyException(""com.github.scribejava.core.utils.Preconditions"", e);
      }
  }"
994,"    protected OAuth1AccessTokenJSONExtractor() {
    }","  public void test3()  throws Throwable  {
      OAuth1AccessTokenJSONExtractor oAuth1AccessTokenJSONExtractor0 = new OAuth1AccessTokenJSONExtractor();
  }"
995,"    public T extract(Response response) throws IOException {
        final String body = response.getBody();
        Preconditions.checkEmptyString(body,
                ""Response body is incorrect. Can't extract a token from an empty string"");
        final String token = extract(body, OAUTH_TOKEN_REGEXP_PATTERN);
        final String secret = extract(body, OAUTH_TOKEN_SECRET_REGEXP_PATTERN);
        return createToken(token, secret, body);
    }","  public void test0()  throws Throwable  {
      OAuth1AccessTokenExtractor oAuth1AccessTokenExtractor0 = OAuth1AccessTokenExtractor.instance();
      // Undeclared exception!
      try { 
        oAuth1AccessTokenExtractor0.extract((Response) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""com.github.scribejava.core.extractors.AbstractOAuth1TokenExtractor"", e);
      }
  }"
996,"    public T extract(Response response) throws IOException {
        final String body = response.getBody();
        Preconditions.checkEmptyString(body,
                ""Response body is incorrect. Can't extract a token from an empty string"");
        final String token = extract(body, OAUTH_TOKEN_REGEXP_PATTERN);
        final String secret = extract(body, OAUTH_TOKEN_SECRET_REGEXP_PATTERN);
        return createToken(token, secret, body);
    }","  public void test1()  throws Throwable  {
      OAuth1AccessTokenExtractor oAuth1AccessTokenExtractor0 = new OAuth1AccessTokenExtractor();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      Closeable[] closeableArray0 = new Closeable[0];
      Response response0 = new Response(1, """", hashMap0, dataInputStream0, closeableArray0);
      // Undeclared exception!
      try { 
        oAuth1AccessTokenExtractor0.extract(response0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.io.DataInputStream"", e);
      }
  }"
997,"    public T extract(Response response) throws IOException {
        final String body = response.getBody();
        Preconditions.checkEmptyString(body,
                ""Response body is incorrect. Can't extract a token from an empty string"");
        final String token = extract(body, OAUTH_TOKEN_REGEXP_PATTERN);
        final String secret = extract(body, OAUTH_TOKEN_SECRET_REGEXP_PATTERN);
        return createToken(token, secret, body);
    }","  public void test2()  throws Throwable  {
      OAuth1RequestTokenExtractor oAuth1RequestTokenExtractor0 = OAuth1RequestTokenExtractor.instance();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Response response0 = new Response(83, """", hashMap0, """");
      // Undeclared exception!
      try { 
        oAuth1RequestTokenExtractor0.extract(response0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Response body is incorrect. Can't extract a token from an empty string
         //
         verifyException(""com.github.scribejava.core.utils.Preconditions"", e);
      }
  }"
998,"    public T extract(Response response) throws IOException {
        final String body = response.getBody();
        Preconditions.checkEmptyString(body,
                ""Response body is incorrect. Can't extract a token from an empty string"");
        final String token = extract(body, OAUTH_TOKEN_REGEXP_PATTERN);
        final String secret = extract(body, OAUTH_TOKEN_SECRET_REGEXP_PATTERN);
        return createToken(token, secret, body);
    }","  public void test3()  throws Throwable  {
      OAuth1AccessTokenExtractor oAuth1AccessTokenExtractor0 = OAuth1AccessTokenExtractor.instance();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      byte[] byteArray0 = new byte[1];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-121), 61);
      Closeable[] closeableArray0 = new Closeable[8];
      Response response0 = new Response(61, """", hashMap0, byteArrayInputStream0, closeableArray0);
      // Undeclared exception!
      try { 
        oAuth1AccessTokenExtractor0.extract(response0);
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.io.ByteArrayInputStream"", e);
      }
  }"
999,"    public T extract(Response response) throws IOException {
        final String body = response.getBody();
        Preconditions.checkEmptyString(body,
                ""Response body is incorrect. Can't extract a token from an empty string"");
        final String token = extract(body, OAUTH_TOKEN_REGEXP_PATTERN);
        final String secret = extract(body, OAUTH_TOKEN_SECRET_REGEXP_PATTERN);
        return createToken(token, secret, body);
    }","  public void test4()  throws Throwable  {
      OAuth1AccessTokenExtractor oAuth1AccessTokenExtractor0 = OAuth1AccessTokenExtractor.instance();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(sequenceInputStream0);
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(pushbackInputStream0, pushbackInputStream0);
      Closeable[] closeableArray0 = new Closeable[6];
      Response response0 = new Response((-1166), ""Response body is incorrect. Can't extract token and secret from this: '"", hashMap0, sequenceInputStream1, closeableArray0);
      try { 
        oAuth1AccessTokenExtractor0.extract(response0);
        fail(""Expecting exception: IOException"");
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException(""java.io.PushbackInputStream"", e);
      }
  }"
1000,"    public T extract(Response response) throws IOException {
        final String body = response.getBody();
        Preconditions.checkEmptyString(body,
                ""Response body is incorrect. Can't extract a token from an empty string"");
        final String token = extract(body, OAUTH_TOKEN_REGEXP_PATTERN);
        final String secret = extract(body, OAUTH_TOKEN_SECRET_REGEXP_PATTERN);
        return createToken(token, secret, body);
    }","  public void test5()  throws Throwable  {
      OAuth1AccessTokenExtractor oAuth1AccessTokenExtractor0 = new OAuth1AccessTokenExtractor();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Response response0 = new Response(30, ""oauth_token=([^&D+)"", hashMap0, ""oauth_token=([^&D+)"");
      // Undeclared exception!
      try { 
        oAuth1AccessTokenExtractor0.extract(response0);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // Response body is incorrect. Can't extract token and secret from this: 'oauth_token=([^&D+)'
         //
         verifyException(""com.github.scribejava.core.extractors.AbstractOAuth1TokenExtractor"", e);
      }
  }"
1001,"    public String extract(OAuthRequest request) {
        checkPreconditions(request);
        final Map<String, String> parameters = request.getOauthParameters();

        final StringBuilder header = new StringBuilder(PREAMBLE);

        for (Map.Entry<String, String> parameter : parameters.entrySet()) {
            if (header.length() > PREAMBLE.length()) {
                header.append(PARAM_SEPARATOR);
            }
            header.append(parameter.getKey())
                    .append(""=\"""")
                    .append(OAuthEncoder.encode(parameter.getValue()))
                    .append('""');
        }

        if (request.getRealm() != null && !request.getRealm().isEmpty()) {
            header.append(PARAM_SEPARATOR)
                    .append(OAuthConstants.REALM)
                    .append(""=\"""")
                    .append(request.getRealm())
                    .append('""');
        }
        return header.toString();
    }","  public void test0()  throws Throwable  {
      HeaderExtractorImpl headerExtractorImpl0 = new HeaderExtractorImpl();
      // Undeclared exception!
      try { 
        headerExtractorImpl0.extract((OAuthRequest) null);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Cannot extract a header from a null object
         //
         verifyException(""com.github.scribejava.core.utils.Preconditions"", e);
      }
  }"
1002,"    public String extract(OAuthRequest request) {
        checkPreconditions(request);
        final Map<String, String> parameters = request.getOauthParameters();

        final StringBuilder header = new StringBuilder(PREAMBLE);

        for (Map.Entry<String, String> parameter : parameters.entrySet()) {
            if (header.length() > PREAMBLE.length()) {
                header.append(PARAM_SEPARATOR);
            }
            header.append(parameter.getKey())
                    .append(""=\"""")
                    .append(OAuthEncoder.encode(parameter.getValue()))
                    .append('""');
        }

        if (request.getRealm() != null && !request.getRealm().isEmpty()) {
            header.append(PARAM_SEPARATOR)
                    .append(OAuthConstants.REALM)
                    .append(""=\"""")
                    .append(request.getRealm())
                    .append('""');
        }
        return header.toString();
    }","  public void test1()  throws Throwable  {
      Verb verb0 = Verb.PUT;
      OAuthRequest oAuthRequest0 = new OAuthRequest(verb0, """");
      HeaderExtractorImpl headerExtractorImpl0 = new HeaderExtractorImpl();
      // Undeclared exception!
      try { 
        headerExtractorImpl0.extract(oAuthRequest0);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // Could not find oauth parameters in request: @Request(PUT ). OAuth parameters must be specified with the addOAuthParameter() method
         //
         verifyException(""com.github.scribejava.core.extractors.HeaderExtractorImpl"", e);
      }
  }"
1003,"    public String extract(OAuthRequest request) {
        checkPreconditions(request);
        final Map<String, String> parameters = request.getOauthParameters();

        final StringBuilder header = new StringBuilder(PREAMBLE);

        for (Map.Entry<String, String> parameter : parameters.entrySet()) {
            if (header.length() > PREAMBLE.length()) {
                header.append(PARAM_SEPARATOR);
            }
            header.append(parameter.getKey())
                    .append(""=\"""")
                    .append(OAuthEncoder.encode(parameter.getValue()))
                    .append('""');
        }

        if (request.getRealm() != null && !request.getRealm().isEmpty()) {
            header.append(PARAM_SEPARATOR)
                    .append(OAuthConstants.REALM)
                    .append(""=\"""")
                    .append(request.getRealm())
                    .append('""');
        }
        return header.toString();
    }","  public void test2()  throws Throwable  {
      Verb verb0 = Verb.PUT;
      OAuthRequest oAuthRequest0 = new OAuthRequest(verb0, """");
      Map<String, String> map0 = oAuthRequest0.getOauthParameters();
      oAuthRequest0.initMultipartPayload(map0);
      oAuthRequest0.setRealm("""");
      HeaderExtractorImpl headerExtractorImpl0 = new HeaderExtractorImpl();
      String string0 = headerExtractorImpl0.extract(oAuthRequest0);
}"
1004,"    public String extract(OAuthRequest request) {
        checkPreconditions(request);
        final Map<String, String> parameters = request.getOauthParameters();

        final StringBuilder header = new StringBuilder(PREAMBLE);

        for (Map.Entry<String, String> parameter : parameters.entrySet()) {
            if (header.length() > PREAMBLE.length()) {
                header.append(PARAM_SEPARATOR);
            }
            header.append(parameter.getKey())
                    .append(""=\"""")
                    .append(OAuthEncoder.encode(parameter.getValue()))
                    .append('""');
        }

        if (request.getRealm() != null && !request.getRealm().isEmpty()) {
            header.append(PARAM_SEPARATOR)
                    .append(OAuthConstants.REALM)
                    .append(""=\"""")
                    .append(request.getRealm())
                    .append('""');
        }
        return header.toString();
    }","  public void test3()  throws Throwable  {
      HeaderExtractorImpl headerExtractorImpl0 = new HeaderExtractorImpl();
      Verb verb0 = Verb.DELETE;
      OAuthRequest oAuthRequest0 = new OAuthRequest(verb0, ""<"");
      oAuthRequest0.addOAuthParameter(""realm"", ""realm"");
      oAuthRequest0.setRealm(""<"");
      String string0 = headerExtractorImpl0.extract(oAuthRequest0);
}"
1005,"    public String extract(OAuthRequest request) {
        checkPreconditions(request);
        final Map<String, String> parameters = request.getOauthParameters();

        final StringBuilder header = new StringBuilder(PREAMBLE);

        for (Map.Entry<String, String> parameter : parameters.entrySet()) {
            if (header.length() > PREAMBLE.length()) {
                header.append(PARAM_SEPARATOR);
            }
            header.append(parameter.getKey())
                    .append(""=\"""")
                    .append(OAuthEncoder.encode(parameter.getValue()))
                    .append('""');
        }

        if (request.getRealm() != null && !request.getRealm().isEmpty()) {
            header.append(PARAM_SEPARATOR)
                    .append(OAuthConstants.REALM)
                    .append(""=\"""")
                    .append(request.getRealm())
                    .append('""');
        }
        return header.toString();
    }","  public void test4()  throws Throwable  {
      HeaderExtractorImpl headerExtractorImpl0 = new HeaderExtractorImpl();
      Verb verb0 = Verb.DELETE;
      OAuthRequest oAuthRequest0 = new OAuthRequest(verb0, ""<"");
      oAuthRequest0.addOAuthParameter(""realm"", ""realm"");
      Map<String, String> map0 = oAuthRequest0.getOauthParameters();
      oAuthRequest0.initMultipartPayload(map0);
      String string0 = headerExtractorImpl0.extract(oAuthRequest0);
}"
1006,"    public T extract(Response response) throws IOException {
        final String rawBody = response.getBody();
        Preconditions.checkEmptyString(rawBody,
                ""Response body is incorrect. Can't extract a token from an empty string"");

        final JsonNode body = OBJECT_MAPPER.readTree(rawBody);

        final JsonNode token = body.get(OAuthConstants.TOKEN);
        final JsonNode secret = body.get(OAuthConstants.TOKEN_SECRET);

        if (token == null || secret == null) {
            throw new OAuthException(""Response body is incorrect. Can't extract token and secret from this: '""
                    + rawBody + '\'', null);
        }

        return createToken(token.asText(), secret.asText(), rawBody);
    }","  public void test0()  throws Throwable  {
      OAuth1AccessTokenJSONExtractor oAuth1AccessTokenJSONExtractor0 = OAuth1AccessTokenJSONExtractor.instance();
      // Undeclared exception!
      try { 
        oAuth1AccessTokenJSONExtractor0.extract((Response) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""com.github.scribejava.core.extractors.AbstractOAuth1JSONTokenExtractor"", e);
      }
  }"
1007,"    public T extract(Response response) throws IOException {
        final String rawBody = response.getBody();
        Preconditions.checkEmptyString(rawBody,
                ""Response body is incorrect. Can't extract a token from an empty string"");

        final JsonNode body = OBJECT_MAPPER.readTree(rawBody);

        final JsonNode token = body.get(OAuthConstants.TOKEN);
        final JsonNode secret = body.get(OAuthConstants.TOKEN_SECRET);

        if (token == null || secret == null) {
            throw new OAuthException(""Response body is incorrect. Can't extract token and secret from this: '""
                    + rawBody + '\'', null);
        }

        return createToken(token.asText(), secret.asText(), rawBody);
    }","  public void test1()  throws Throwable  {
      OAuth1AccessTokenJSONExtractor oAuth1AccessTokenJSONExtractor0 = OAuth1AccessTokenJSONExtractor.instance();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      Closeable[] closeableArray0 = new Closeable[3];
      Response response0 = new Response(1380, ""JM(i"", hashMap0, dataInputStream0, closeableArray0);
      // Undeclared exception!
      try { 
        oAuth1AccessTokenJSONExtractor0.extract(response0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.io.DataInputStream"", e);
      }
  }"
1008,"    public T extract(Response response) throws IOException {
        final String rawBody = response.getBody();
        Preconditions.checkEmptyString(rawBody,
                ""Response body is incorrect. Can't extract a token from an empty string"");

        final JsonNode body = OBJECT_MAPPER.readTree(rawBody);

        final JsonNode token = body.get(OAuthConstants.TOKEN);
        final JsonNode secret = body.get(OAuthConstants.TOKEN_SECRET);

        if (token == null || secret == null) {
            throw new OAuthException(""Response body is incorrect. Can't extract token and secret from this: '""
                    + rawBody + '\'', null);
        }

        return createToken(token.asText(), secret.asText(), rawBody);
    }","  public void test2()  throws Throwable  {
      OAuth1RequestTokenJSONExtractor oAuth1RequestTokenJSONExtractor0 = OAuth1RequestTokenJSONExtractor.instance();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      File file0 = MockFile.createTempFile(""c![K*z&NbXIH9R"", ""bxC[ao~20/%KT"");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      Closeable[] closeableArray0 = new Closeable[3];
      Response response0 = new Response(44, ""Internal error: unable to locate supertype (%s) from resolved subtype %s"", hashMap0, mockFileInputStream0, closeableArray0);
      // Undeclared exception!
      try { 
        oAuth1RequestTokenJSONExtractor0.extract(response0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Response body is incorrect. Can't extract a token from an empty string
         //
         verifyException(""com.github.scribejava.core.utils.Preconditions"", e);
      }
  }"
1009,"    public T extract(Response response) throws IOException {
        final String rawBody = response.getBody();
        Preconditions.checkEmptyString(rawBody,
                ""Response body is incorrect. Can't extract a token from an empty string"");

        final JsonNode body = OBJECT_MAPPER.readTree(rawBody);

        final JsonNode token = body.get(OAuthConstants.TOKEN);
        final JsonNode secret = body.get(OAuthConstants.TOKEN_SECRET);

        if (token == null || secret == null) {
            throw new OAuthException(""Response body is incorrect. Can't extract token and secret from this: '""
                    + rawBody + '\'', null);
        }

        return createToken(token.asText(), secret.asText(), rawBody);
    }","  public void test3()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-2955), 34);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      Closeable[] closeableArray0 = new Closeable[6];
      Response response0 = new Response(1850, ""com.fasterxml.jackson.core.JsonFactoryBuilder"", hashMap0, sequenceInputStream0, closeableArray0);
      OAuth1AccessTokenJSONExtractor oAuth1AccessTokenJSONExtractor0 = new OAuth1AccessTokenJSONExtractor();
      // Undeclared exception!
      try { 
        oAuth1AccessTokenJSONExtractor0.extract(response0);
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.io.ByteArrayInputStream"", e);
      }
  }"
1010,"    public T extract(Response response) throws IOException {
        final String rawBody = response.getBody();
        Preconditions.checkEmptyString(rawBody,
                ""Response body is incorrect. Can't extract a token from an empty string"");

        final JsonNode body = OBJECT_MAPPER.readTree(rawBody);

        final JsonNode token = body.get(OAuthConstants.TOKEN);
        final JsonNode secret = body.get(OAuthConstants.TOKEN_SECRET);

        if (token == null || secret == null) {
            throw new OAuthException(""Response body is incorrect. Can't extract token and secret from this: '""
                    + rawBody + '\'', null);
        }

        return createToken(token.asText(), secret.asText(), rawBody);
    }","  public void test4()  throws Throwable  {
      OAuth1AccessTokenJSONExtractor oAuth1AccessTokenJSONExtractor0 = OAuth1AccessTokenJSONExtractor.instance();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      Closeable[] closeableArray0 = new Closeable[4];
      Response response0 = new Response(39, ""> J+?My^l,-&R"", hashMap0, pipedInputStream0, closeableArray0);
      try { 
        oAuth1AccessTokenJSONExtractor0.extract(response0);
        fail(""Expecting exception: IOException"");
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException(""java.io.PipedInputStream"", e);
      }
  }"
1011,"    public T extract(Response response) throws IOException {
        final String rawBody = response.getBody();
        Preconditions.checkEmptyString(rawBody,
                ""Response body is incorrect. Can't extract a token from an empty string"");

        final JsonNode body = OBJECT_MAPPER.readTree(rawBody);

        final JsonNode token = body.get(OAuthConstants.TOKEN);
        final JsonNode secret = body.get(OAuthConstants.TOKEN_SECRET);

        if (token == null || secret == null) {
            throw new OAuthException(""Response body is incorrect. Can't extract token and secret from this: '""
                    + rawBody + '\'', null);
        }

        return createToken(token.asText(), secret.asText(), rawBody);
    }","  public void test5()  throws Throwable  {
      OAuth1AccessTokenJSONExtractor oAuth1AccessTokenJSONExtractor0 = OAuth1AccessTokenJSONExtractor.instance();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Response response0 = new Response((-1520), "", new = "", hashMap0, "",uh]*-T/"");
      try { 
        oAuth1AccessTokenJSONExtractor0.extract(response0);
        fail(""Expecting exception: IOException"");
      } catch(IOException e) {
         //
         // Unexpected character (',' (code 44)): expected a valid value (JSON String, Number, Array, Object or token 'null', 'true' or 'false')
         //  at [Source: (String)\"",uh]*-T/\""; line: 1, column: 2]
         //
         verifyException(""com.fasterxml.jackson.core.JsonParser"", e);
      }
  }"
1012,"    public T extract(Response response) throws IOException {
        final String rawBody = response.getBody();
        Preconditions.checkEmptyString(rawBody,
                ""Response body is incorrect. Can't extract a token from an empty string"");

        final JsonNode body = OBJECT_MAPPER.readTree(rawBody);

        final JsonNode token = body.get(OAuthConstants.TOKEN);
        final JsonNode secret = body.get(OAuthConstants.TOKEN_SECRET);

        if (token == null || secret == null) {
            throw new OAuthException(""Response body is incorrect. Can't extract token and secret from this: '""
                    + rawBody + '\'', null);
        }

        return createToken(token.asText(), secret.asText(), rawBody);
    }","  public void test6()  throws Throwable  {
      OAuth1AccessTokenJSONExtractor oAuth1AccessTokenJSONExtractor0 = OAuth1AccessTokenJSONExtractor.instance();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Response response0 = new Response(1079, ""\""4$mxmHbZ|p5[3N"", hashMap0, ""\""4$mxmHbZ|p5[3N"");
      try { 
        oAuth1AccessTokenJSONExtractor0.extract(response0);
        fail(""Expecting exception: IOException"");
      } catch(IOException e) {
         //
         // Unexpected end-of-input: was expecting closing quote for a string value
         //  at [Source: (String)\""\""4$mxmHbZ|p5[3N\""; line: 1, column: 16]
         //
         verifyException(""com.fasterxml.jackson.core.base.ParserMinimalBase"", e);
      }
  }"
1013,"    public T extract(Response response) throws IOException {
        final String rawBody = response.getBody();
        Preconditions.checkEmptyString(rawBody,
                ""Response body is incorrect. Can't extract a token from an empty string"");

        final JsonNode body = OBJECT_MAPPER.readTree(rawBody);

        final JsonNode token = body.get(OAuthConstants.TOKEN);
        final JsonNode secret = body.get(OAuthConstants.TOKEN_SECRET);

        if (token == null || secret == null) {
            throw new OAuthException(""Response body is incorrect. Can't extract token and secret from this: '""
                    + rawBody + '\'', null);
        }

        return createToken(token.asText(), secret.asText(), rawBody);
    }","  public void test7()  throws Throwable  {
      OAuth1AccessTokenJSONExtractor oAuth1AccessTokenJSONExtractor0 = new OAuth1AccessTokenJSONExtractor();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Response response0 = new Response(1046, ""7"", hashMap0, ""7"");
      // Undeclared exception!
      try { 
        oAuth1AccessTokenJSONExtractor0.extract(response0);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // Response body is incorrect. Can't extract token and secret from this: '7'
         //
         verifyException(""com.github.scribejava.core.extractors.AbstractOAuth1JSONTokenExtractor"", e);
      }
  }"
1014,"    private OAuth2AccessToken createToken(String rawResponse) throws IOException {

        final JsonNode response = OBJECT_MAPPER.readTree(rawResponse);

        final JsonNode expiresInNode = response.get(""expires_in"");
        final JsonNode refreshToken = response.get(OAuthConstants.REFRESH_TOKEN);
        final JsonNode scope = response.get(OAuthConstants.SCOPE);
        final JsonNode tokenType = response.get(""token_type"");

        return createToken(extractRequiredParameter(response, OAuthConstants.ACCESS_TOKEN, rawResponse).asText(),
                tokenType == null ? null : tokenType.asText(), expiresInNode == null ? null : expiresInNode.asInt(),
                refreshToken == null ? null : refreshToken.asText(), scope == null ? null : scope.asText(), response,
                rawResponse);
    }","  public void test0()  throws Throwable  {
      OAuth2AccessTokenJsonExtractor oAuth2AccessTokenJsonExtractor0 = OAuth2AccessTokenJsonExtractor.instance();
      Integer integer0 = new Integer(192);
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(true);
      JsonNode jsonNode0 = jsonNodeFactory0.missingNode();
      OAuth2AccessToken oAuth2AccessToken0 = oAuth2AccessTokenJsonExtractor0.createToken(""error_uri"", ""aC*l"", integer0, ""LC="", ""aC*l"", jsonNode0, ""aC*l"");
}"
1015,"    private OAuth2AccessToken createToken(String rawResponse) throws IOException {

        final JsonNode response = OBJECT_MAPPER.readTree(rawResponse);

        final JsonNode expiresInNode = response.get(""expires_in"");
        final JsonNode refreshToken = response.get(OAuthConstants.REFRESH_TOKEN);
        final JsonNode scope = response.get(OAuthConstants.SCOPE);
        final JsonNode tokenType = response.get(""token_type"");

        return createToken(extractRequiredParameter(response, OAuthConstants.ACCESS_TOKEN, rawResponse).asText(),
                tokenType == null ? null : tokenType.asText(), expiresInNode == null ? null : expiresInNode.asInt(),
                refreshToken == null ? null : refreshToken.asText(), scope == null ? null : scope.asText(), response,
                rawResponse);
    }","  public void test1()  throws Throwable  {
      OAuth2AccessTokenJsonExtractor oAuth2AccessTokenJsonExtractor0 = OAuth2AccessTokenJsonExtractor.instance();
      Integer integer0 = new Integer(192);
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(true);
      JsonNode jsonNode0 = jsonNodeFactory0.missingNode();
      OAuth2AccessToken oAuth2AccessToken0 = oAuth2AccessTokenJsonExtractor0.createToken(""error_uri"", ""aC*l"", integer0, ""LC="", ""aC*l"", jsonNode0, ""aC*l"");
}"
1016,"    private OAuth2AccessToken createToken(String rawResponse) throws IOException {

        final JsonNode response = OBJECT_MAPPER.readTree(rawResponse);

        final JsonNode expiresInNode = response.get(""expires_in"");
        final JsonNode refreshToken = response.get(OAuthConstants.REFRESH_TOKEN);
        final JsonNode scope = response.get(OAuthConstants.SCOPE);
        final JsonNode tokenType = response.get(""token_type"");

        return createToken(extractRequiredParameter(response, OAuthConstants.ACCESS_TOKEN, rawResponse).asText(),
                tokenType == null ? null : tokenType.asText(), expiresInNode == null ? null : expiresInNode.asInt(),
                refreshToken == null ? null : refreshToken.asText(), scope == null ? null : scope.asText(), response,
                rawResponse);
    }","  public void test2()  throws Throwable  {
      OAuth2AccessTokenJsonExtractor oAuth2AccessTokenJsonExtractor0 = OAuth2AccessTokenJsonExtractor.instance();
      Integer integer0 = new Integer(192);
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(true);
      JsonNode jsonNode0 = jsonNodeFactory0.missingNode();
      OAuth2AccessToken oAuth2AccessToken0 = oAuth2AccessTokenJsonExtractor0.createToken(""error_uri"", ""aC*l"", integer0, ""LC="", ""aC*l"", jsonNode0, ""aC*l"");
}"
1017,"    private OAuth2AccessToken createToken(String rawResponse) throws IOException {

        final JsonNode response = OBJECT_MAPPER.readTree(rawResponse);

        final JsonNode expiresInNode = response.get(""expires_in"");
        final JsonNode refreshToken = response.get(OAuthConstants.REFRESH_TOKEN);
        final JsonNode scope = response.get(OAuthConstants.SCOPE);
        final JsonNode tokenType = response.get(""token_type"");

        return createToken(extractRequiredParameter(response, OAuthConstants.ACCESS_TOKEN, rawResponse).asText(),
                tokenType == null ? null : tokenType.asText(), expiresInNode == null ? null : expiresInNode.asInt(),
                refreshToken == null ? null : refreshToken.asText(), scope == null ? null : scope.asText(), response,
                rawResponse);
    }","  public void test3()  throws Throwable  {
      OAuth2AccessTokenJsonExtractor oAuth2AccessTokenJsonExtractor0 = OAuth2AccessTokenJsonExtractor.instance();
      Integer integer0 = new Integer(192);
      JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(true);
      JsonNode jsonNode0 = jsonNodeFactory0.missingNode();
      OAuth2AccessToken oAuth2AccessToken0 = oAuth2AccessTokenJsonExtractor0.createToken(""error_uri"", ""aC*l"", integer0, ""LC="", ""aC*l"", jsonNode0, ""aC*l"");
}"
1018,"    public OAuth2AccessToken extract(Response response) throws IOException {
        final String body = response.getBody();
        Preconditions.checkEmptyString(body, ""Response body is incorrect. Can't extract a token from an empty string"");

        if (response.getCode() != 200) {
            generateError(response);
        }
        return createToken(body);
    }","  public void test4()  throws Throwable  {
      OAuth2AccessTokenJsonExtractor oAuth2AccessTokenJsonExtractor0 = new OAuth2AccessTokenJsonExtractor();
      Response response0 = new Response(200, ""4"", (Map<String, String>) null, ""4"");
      // Undeclared exception!
      try { 
        oAuth2AccessTokenJsonExtractor0.extract(response0);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // Response body is incorrect. Can't extract a 'access_token' from this: '4'
         //
         verifyException(""com.github.scribejava.core.extractors.AbstractJsonExtractor"", e);
      }
  }"
1019,"    public void generateError(Response response) throws IOException {
        final String responseBody = response.getBody();
        final JsonNode responseBodyJson;
        try {
            responseBodyJson = OBJECT_MAPPER.readTree(responseBody);
        } catch (JsonProcessingException ex) {
            throw new OAuth2AccessTokenErrorResponse(null, null, null, response);
        }

        final JsonNode errorUriInString = responseBodyJson.get(""error_uri"");
        URI errorUri;
        try {
            errorUri = errorUriInString == null ? null : URI.create(errorUriInString.asText());
        } catch (IllegalArgumentException iae) {
            errorUri = null;
        }

        OAuth2Error errorCode;
        try {
            errorCode = OAuth2Error
                    .parseFrom(extractRequiredParameter(responseBodyJson, ""error"", responseBody).asText());
        } catch (IllegalArgumentException iaE) {
            //non oauth standard error code
            errorCode = null;
        }

        final JsonNode errorDescription = responseBodyJson.get(""error_description"");

        throw new OAuth2AccessTokenErrorResponse(errorCode, errorDescription == null ? null : errorDescription.asText(),
                errorUri, response);
    }","  public void test5()  throws Throwable  {
      OAuth2AccessTokenJsonExtractor oAuth2AccessTokenJsonExtractor0 = OAuth2AccessTokenJsonExtractor.instance();
      // Undeclared exception!
      try { 
        oAuth2AccessTokenJsonExtractor0.generateError((Response) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""com.github.scribejava.core.extractors.OAuth2AccessTokenJsonExtractor"", e);
      }
  }"
1020,"    public void generateError(Response response) throws IOException {
        final String responseBody = response.getBody();
        final JsonNode responseBodyJson;
        try {
            responseBodyJson = OBJECT_MAPPER.readTree(responseBody);
        } catch (JsonProcessingException ex) {
            throw new OAuth2AccessTokenErrorResponse(null, null, null, response);
        }

        final JsonNode errorUriInString = responseBodyJson.get(""error_uri"");
        URI errorUri;
        try {
            errorUri = errorUriInString == null ? null : URI.create(errorUriInString.asText());
        } catch (IllegalArgumentException iae) {
            errorUri = null;
        }

        OAuth2Error errorCode;
        try {
            errorCode = OAuth2Error
                    .parseFrom(extractRequiredParameter(responseBodyJson, ""error"", responseBody).asText());
        } catch (IllegalArgumentException iaE) {
            //non oauth standard error code
            errorCode = null;
        }

        final JsonNode errorDescription = responseBodyJson.get(""error_description"");

        throw new OAuth2AccessTokenErrorResponse(errorCode, errorDescription == null ? null : errorDescription.asText(),
                errorUri, response);
    }","  public void test6()  throws Throwable  {
      OAuth2AccessTokenJsonExtractor oAuth2AccessTokenJsonExtractor0 = OAuth2AccessTokenJsonExtractor.instance();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Response response0 = new Response(0, ""$gi}%lR:@',T Y_"", hashMap0, (InputStream) null, (Closeable[]) null);
      // Undeclared exception!
      try { 
        oAuth2AccessTokenJsonExtractor0.generateError(response0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // argument \""content\"" is null
         //
         verifyException(""com.fasterxml.jackson.databind.ObjectMapper"", e);
      }
  }"
1021,"    public void generateError(Response response) throws IOException {
        final String responseBody = response.getBody();
        final JsonNode responseBodyJson;
        try {
            responseBodyJson = OBJECT_MAPPER.readTree(responseBody);
        } catch (JsonProcessingException ex) {
            throw new OAuth2AccessTokenErrorResponse(null, null, null, response);
        }

        final JsonNode errorUriInString = responseBodyJson.get(""error_uri"");
        URI errorUri;
        try {
            errorUri = errorUriInString == null ? null : URI.create(errorUriInString.asText());
        } catch (IllegalArgumentException iae) {
            errorUri = null;
        }

        OAuth2Error errorCode;
        try {
            errorCode = OAuth2Error
                    .parseFrom(extractRequiredParameter(responseBodyJson, ""error"", responseBody).asText());
        } catch (IllegalArgumentException iaE) {
            //non oauth standard error code
            errorCode = null;
        }

        final JsonNode errorDescription = responseBodyJson.get(""error_description"");

        throw new OAuth2AccessTokenErrorResponse(errorCode, errorDescription == null ? null : errorDescription.asText(),
                errorUri, response);
    }","  public void test7()  throws Throwable  {
      OAuth2AccessTokenJsonExtractor oAuth2AccessTokenJsonExtractor0 = OAuth2AccessTokenJsonExtractor.instance();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      byte[] byteArray0 = new byte[6];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-1), 65280);
      Closeable[] closeableArray0 = new Closeable[3];
      Response response0 = new Response((-79), ""xe'/DQ[*;WS(m#;G"", hashMap0, byteArrayInputStream0, closeableArray0);
      // Undeclared exception!
      try { 
        oAuth2AccessTokenJsonExtractor0.generateError(response0);
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.io.ByteArrayInputStream"", e);
      }
  }"
1022,"    public void generateError(Response response) throws IOException {
        final String responseBody = response.getBody();
        final JsonNode responseBodyJson;
        try {
            responseBodyJson = OBJECT_MAPPER.readTree(responseBody);
        } catch (JsonProcessingException ex) {
            throw new OAuth2AccessTokenErrorResponse(null, null, null, response);
        }

        final JsonNode errorUriInString = responseBodyJson.get(""error_uri"");
        URI errorUri;
        try {
            errorUri = errorUriInString == null ? null : URI.create(errorUriInString.asText());
        } catch (IllegalArgumentException iae) {
            errorUri = null;
        }

        OAuth2Error errorCode;
        try {
            errorCode = OAuth2Error
                    .parseFrom(extractRequiredParameter(responseBodyJson, ""error"", responseBody).asText());
        } catch (IllegalArgumentException iaE) {
            //non oauth standard error code
            errorCode = null;
        }

        final JsonNode errorDescription = responseBodyJson.get(""error_description"");

        throw new OAuth2AccessTokenErrorResponse(errorCode, errorDescription == null ? null : errorDescription.asText(),
                errorUri, response);
    }","  public void test8()  throws Throwable  {
      OAuth2AccessTokenJsonExtractor oAuth2AccessTokenJsonExtractor0 = OAuth2AccessTokenJsonExtractor.instance();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      pushbackInputStream0.close();
      Closeable[] closeableArray0 = new Closeable[0];
      Response response0 = new Response((-7), ""s"", hashMap0, pushbackInputStream0, closeableArray0);
      try { 
        oAuth2AccessTokenJsonExtractor0.generateError(response0);
        fail(""Expecting exception: IOException"");
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException(""java.io.PushbackInputStream"", e);
      }
  }"
1023,"    public void generateError(Response response) throws IOException {
        final String responseBody = response.getBody();
        final JsonNode responseBodyJson;
        try {
            responseBodyJson = OBJECT_MAPPER.readTree(responseBody);
        } catch (JsonProcessingException ex) {
            throw new OAuth2AccessTokenErrorResponse(null, null, null, response);
        }

        final JsonNode errorUriInString = responseBodyJson.get(""error_uri"");
        URI errorUri;
        try {
            errorUri = errorUriInString == null ? null : URI.create(errorUriInString.asText());
        } catch (IllegalArgumentException iae) {
            errorUri = null;
        }

        OAuth2Error errorCode;
        try {
            errorCode = OAuth2Error
                    .parseFrom(extractRequiredParameter(responseBodyJson, ""error"", responseBody).asText());
        } catch (IllegalArgumentException iaE) {
            //non oauth standard error code
            errorCode = null;
        }

        final JsonNode errorDescription = responseBodyJson.get(""error_description"");

        throw new OAuth2AccessTokenErrorResponse(errorCode, errorDescription == null ? null : errorDescription.asText(),
                errorUri, response);
    }","  public void test9()  throws Throwable  {
      OAuth2AccessTokenJsonExtractor oAuth2AccessTokenJsonExtractor0 = new OAuth2AccessTokenJsonExtractor();
      Response response0 = new Response((-2360), ""RLve>+.u Fn,qgNDn*"", (Map<String, String>) null, ""RLve>+.u Fn,qgNDn*"");
      // Undeclared exception!
      try { 
        oAuth2AccessTokenJsonExtractor0.generateError(response0);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // RLve>+.u Fn,qgNDn*
         //
         verifyException(""com.github.scribejava.core.extractors.OAuth2AccessTokenJsonExtractor"", e);
      }
  }"
1024,"    public OAuth2AccessToken extract(Response response) throws IOException {
        final String body = response.getBody();
        Preconditions.checkEmptyString(body, ""Response body is incorrect. Can't extract a token from an empty string"");

        if (response.getCode() != 200) {
            generateError(response);
        }
        return createToken(body);
    }","  public void test10()  throws Throwable  {
      OAuth2AccessTokenJsonExtractor oAuth2AccessTokenJsonExtractor0 = new OAuth2AccessTokenJsonExtractor();
      // Undeclared exception!
      try { 
        oAuth2AccessTokenJsonExtractor0.extract((Response) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""com.github.scribejava.core.extractors.OAuth2AccessTokenJsonExtractor"", e);
      }
  }"
1025,"    public OAuth2AccessToken extract(Response response) throws IOException {
        final String body = response.getBody();
        Preconditions.checkEmptyString(body, ""Response body is incorrect. Can't extract a token from an empty string"");

        if (response.getCode() != 200) {
            generateError(response);
        }
        return createToken(body);
    }","  public void test11()  throws Throwable  {
      OAuth2AccessTokenJsonExtractor oAuth2AccessTokenJsonExtractor0 = new OAuth2AccessTokenJsonExtractor();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Response response0 = new Response(878, """", hashMap0, """");
      // Undeclared exception!
      try { 
        oAuth2AccessTokenJsonExtractor0.extract(response0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Response body is incorrect. Can't extract a token from an empty string
         //
         verifyException(""com.github.scribejava.core.utils.Preconditions"", e);
      }
  }"
1026,"    public OAuth2AccessToken extract(Response response) throws IOException {
        final String body = response.getBody();
        Preconditions.checkEmptyString(body, ""Response body is incorrect. Can't extract a token from an empty string"");

        if (response.getCode() != 200) {
            generateError(response);
        }
        return createToken(body);
    }","  public void test12()  throws Throwable  {
      OAuth2AccessTokenJsonExtractor oAuth2AccessTokenJsonExtractor0 = OAuth2AccessTokenJsonExtractor.instance();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      byte[] byteArray0 = new byte[5];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-118), 37);
      Closeable[] closeableArray0 = new Closeable[2];
      Response response0 = new Response(0, ""READ_ONLY"", hashMap0, byteArrayInputStream0, closeableArray0);
      // Undeclared exception!
      try { 
        oAuth2AccessTokenJsonExtractor0.extract(response0);
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.io.ByteArrayInputStream"", e);
      }
  }"
1027,"    public OAuth2AccessToken extract(Response response) throws IOException {
        final String body = response.getBody();
        Preconditions.checkEmptyString(body, ""Response body is incorrect. Can't extract a token from an empty string"");

        if (response.getCode() != 200) {
            generateError(response);
        }
        return createToken(body);
    }","  public void test13()  throws Throwable  {
      OAuth2AccessTokenJsonExtractor oAuth2AccessTokenJsonExtractor0 = OAuth2AccessTokenJsonExtractor.instance();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      PipedInputStream pipedInputStream0 = new PipedInputStream(246);
      Response response0 = new Response(246, ""YD+Lz\"""", hashMap0, pipedInputStream0, (Closeable[]) null);
      try { 
        oAuth2AccessTokenJsonExtractor0.extract(response0);
        fail(""Expecting exception: IOException"");
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException(""java.io.PipedInputStream"", e);
      }
  }"
1028,"    public OAuth2AccessToken extract(Response response) throws IOException {
        final String body = response.getBody();
        Preconditions.checkEmptyString(body, ""Response body is incorrect. Can't extract a token from an empty string"");

        if (response.getCode() != 200) {
            generateError(response);
        }
        return createToken(body);
    }","  public void test14()  throws Throwable  {
      OAuth2AccessTokenJsonExtractor oAuth2AccessTokenJsonExtractor0 = OAuth2AccessTokenJsonExtractor.instance();
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      Response response0 = new Response(200, ""n_Q]G65@O"", map0, ""n_Q]G65@O"");
      try { 
        oAuth2AccessTokenJsonExtractor0.extract(response0);
        fail(""Expecting exception: IOException"");
      } catch(IOException e) {
         //
         // Unrecognized token 'n_Q': was expecting (JSON String, Number, Array, Object or token 'null', 'true' or 'false')
         //  at [Source: (String)\""n_Q]G65@O\""; line: 1, column: 4]
         //
         verifyException(""com.fasterxml.jackson.core.JsonParser"", e);
      }
  }"
1029,"    public OAuth2AccessToken extract(Response response) throws IOException {
        final String body = response.getBody();
        Preconditions.checkEmptyString(body, ""Response body is incorrect. Can't extract a token from an empty string"");

        if (response.getCode() != 200) {
            generateError(response);
        }
        return createToken(body);
    }","  public void test15()  throws Throwable  {
      OAuth2AccessTokenJsonExtractor oAuth2AccessTokenJsonExtractor0 = OAuth2AccessTokenJsonExtractor.instance();
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      Response response0 = new Response(200, ""+"", map0, ""+"");
      try { 
        oAuth2AccessTokenJsonExtractor0.extract(response0);
        fail(""Expecting exception: IOException"");
      } catch(IOException e) {
         //
         // Unexpected end-of-input in a Number value
         //  at [Source: (String)\""+\""; line: 1, column: 2]
         //
         verifyException(""com.fasterxml.jackson.core.base.ParserMinimalBase"", e);
      }
  }"
1030,"    private OAuth2AccessToken createToken(String rawResponse) throws IOException {

        final JsonNode response = OBJECT_MAPPER.readTree(rawResponse);

        final JsonNode expiresInNode = response.get(""expires_in"");
        final JsonNode refreshToken = response.get(OAuthConstants.REFRESH_TOKEN);
        final JsonNode scope = response.get(OAuthConstants.SCOPE);
        final JsonNode tokenType = response.get(""token_type"");

        return createToken(extractRequiredParameter(response, OAuthConstants.ACCESS_TOKEN, rawResponse).asText(),
                tokenType == null ? null : tokenType.asText(), expiresInNode == null ? null : expiresInNode.asInt(),
                refreshToken == null ? null : refreshToken.asText(), scope == null ? null : scope.asText(), response,
                rawResponse);
    }","  public void test16()  throws Throwable  {
      OAuth2AccessTokenJsonExtractor oAuth2AccessTokenJsonExtractor0 = new OAuth2AccessTokenJsonExtractor();
      Integer integer0 = new Integer(0);
      ObjectMapper objectMapper0 = new ObjectMapper();
      ArrayNode arrayNode0 = objectMapper0.createArrayNode();
      RawValue rawValue0 = new RawValue(""WJk"");
      ValueNode valueNode0 = arrayNode0.rawValueNode(rawValue0);
      // Undeclared exception!
      try { 
        oAuth2AccessTokenJsonExtractor0.createToken((String) null, ""includeAs cannot be null"", integer0, ""includeAs cannot be null"", ""includeAs cannot be null"", valueNode0, (String) null);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // access_token can't be null
         //
         verifyException(""com.github.scribejava.core.utils.Preconditions"", e);
      }
  }"
1031,"    public void generateError(Response response) throws IOException {
        final String responseBody = response.getBody();
        final JsonNode responseBodyJson;
        try {
            responseBodyJson = OBJECT_MAPPER.readTree(responseBody);
        } catch (JsonProcessingException ex) {
            throw new OAuth2AccessTokenErrorResponse(null, null, null, response);
        }

        final JsonNode errorUriInString = responseBodyJson.get(""error_uri"");
        URI errorUri;
        try {
            errorUri = errorUriInString == null ? null : URI.create(errorUriInString.asText());
        } catch (IllegalArgumentException iae) {
            errorUri = null;
        }

        OAuth2Error errorCode;
        try {
            errorCode = OAuth2Error
                    .parseFrom(extractRequiredParameter(responseBodyJson, ""error"", responseBody).asText());
        } catch (IllegalArgumentException iaE) {
            //non oauth standard error code
            errorCode = null;
        }

        final JsonNode errorDescription = responseBodyJson.get(""error_description"");

        throw new OAuth2AccessTokenErrorResponse(errorCode, errorDescription == null ? null : errorDescription.asText(),
                errorUri, response);
    }","  public void test17()  throws Throwable  {
      OAuth2AccessTokenJsonExtractor oAuth2AccessTokenJsonExtractor0 = OAuth2AccessTokenJsonExtractor.instance();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Closeable[] closeableArray0 = new Closeable[1];
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      Response response0 = new Response((-902), ""Could not instantiate DOMImplementationRegistry: "", hashMap0, sequenceInputStream0, closeableArray0);
      // Undeclared exception!
      try { 
        oAuth2AccessTokenJsonExtractor0.generateError(response0);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // Response body is incorrect. Can't extract a 'error' from this: ''
         //
         verifyException(""com.github.scribejava.core.extractors.AbstractJsonExtractor"", e);
      }
  }"
1032,"    public OAuth2AccessToken extract(Response response) throws IOException {
        final String body = response.getBody();
        Preconditions.checkEmptyString(body, ""Response body is incorrect. Can't extract a token from an empty string"");

        if (response.getCode() != 200) {
            generateError(response);
        }
        return createToken(body);
    }","  public void test18()  throws Throwable  {
      OAuth2AccessTokenJsonExtractor oAuth2AccessTokenJsonExtractor0 = new OAuth2AccessTokenJsonExtractor();
      Response response0 = new Response(1580, "" i"", (Map<String, String>) null, ""4"");
      // Undeclared exception!
      try { 
        oAuth2AccessTokenJsonExtractor0.extract(response0);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // Response body is incorrect. Can't extract a 'error' from this: '4'
         //
         verifyException(""com.github.scribejava.core.extractors.AbstractJsonExtractor"", e);
      }
  }"
1033,"    public OAuth2AccessToken extract(Response response) throws IOException {
        final String body = response.getBody();
        Preconditions.checkEmptyString(body, ""Response body is incorrect. Can't extract a token from an empty string"");

        if (response.getCode() != 200) {
            generateError(response);
        }
        return createToken(body);
    }","  public void test19()  throws Throwable  {
      OAuth2AccessTokenJsonExtractor oAuth2AccessTokenJsonExtractor0 = new OAuth2AccessTokenJsonExtractor();
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      Response response0 = new Response(0, """", map0, ""token_type"");
      // Undeclared exception!
      try { 
        oAuth2AccessTokenJsonExtractor0.extract(response0);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // token_type
         //
         verifyException(""com.github.scribejava.core.extractors.OAuth2AccessTokenJsonExtractor"", e);
      }
  }"
1034,"    private OAuth2AccessToken createToken(String rawResponse) throws IOException {

        final JsonNode response = OBJECT_MAPPER.readTree(rawResponse);

        final JsonNode expiresInNode = response.get(""expires_in"");
        final JsonNode refreshToken = response.get(OAuthConstants.REFRESH_TOKEN);
        final JsonNode scope = response.get(OAuthConstants.SCOPE);
        final JsonNode tokenType = response.get(""token_type"");

        return createToken(extractRequiredParameter(response, OAuthConstants.ACCESS_TOKEN, rawResponse).asText(),
                tokenType == null ? null : tokenType.asText(), expiresInNode == null ? null : expiresInNode.asInt(),
                refreshToken == null ? null : refreshToken.asText(), scope == null ? null : scope.asText(), response,
                rawResponse);
    }","  public void test20()  throws Throwable  {
      OAuth2AccessTokenJsonExtractor oAuth2AccessTokenJsonExtractor0 = OAuth2AccessTokenJsonExtractor.instance();
      OAuth2AccessToken oAuth2AccessToken0 = oAuth2AccessTokenJsonExtractor0.createToken("""", ""Could not instantiate DOMImplementationRegistry: "", (Integer) null, ""Could not instantiate DOMImplementationRegistry: "", ""refresh_token"", (JsonNode) null, ""refresh_token"");
}"
1035,"    private OAuth2AccessToken createToken(String rawResponse) throws IOException {

        final JsonNode response = OBJECT_MAPPER.readTree(rawResponse);

        final JsonNode expiresInNode = response.get(""expires_in"");
        final JsonNode refreshToken = response.get(OAuthConstants.REFRESH_TOKEN);
        final JsonNode scope = response.get(OAuthConstants.SCOPE);
        final JsonNode tokenType = response.get(""token_type"");

        return createToken(extractRequiredParameter(response, OAuthConstants.ACCESS_TOKEN, rawResponse).asText(),
                tokenType == null ? null : tokenType.asText(), expiresInNode == null ? null : expiresInNode.asInt(),
                refreshToken == null ? null : refreshToken.asText(), scope == null ? null : scope.asText(), response,
                rawResponse);
    }","  public void test21()  throws Throwable  {
      OAuth2AccessTokenJsonExtractor oAuth2AccessTokenJsonExtractor0 = OAuth2AccessTokenJsonExtractor.instance();
      OAuth2AccessToken oAuth2AccessToken0 = oAuth2AccessTokenJsonExtractor0.createToken("""", ""Could not instantiate DOMImplementationRegistry: "", (Integer) null, ""Could not instantiate DOMImplementationRegistry: "", ""refresh_token"", (JsonNode) null, ""refresh_token"");
}"
1036,"    private OAuth2AccessToken createToken(String rawResponse) throws IOException {

        final JsonNode response = OBJECT_MAPPER.readTree(rawResponse);

        final JsonNode expiresInNode = response.get(""expires_in"");
        final JsonNode refreshToken = response.get(OAuthConstants.REFRESH_TOKEN);
        final JsonNode scope = response.get(OAuthConstants.SCOPE);
        final JsonNode tokenType = response.get(""token_type"");

        return createToken(extractRequiredParameter(response, OAuthConstants.ACCESS_TOKEN, rawResponse).asText(),
                tokenType == null ? null : tokenType.asText(), expiresInNode == null ? null : expiresInNode.asInt(),
                refreshToken == null ? null : refreshToken.asText(), scope == null ? null : scope.asText(), response,
                rawResponse);
    }","  public void test22()  throws Throwable  {
      OAuth2AccessTokenJsonExtractor oAuth2AccessTokenJsonExtractor0 = OAuth2AccessTokenJsonExtractor.instance();
      OAuth2AccessToken oAuth2AccessToken0 = oAuth2AccessTokenJsonExtractor0.createToken("""", ""Could not instantiate DOMImplementationRegistry: "", (Integer) null, ""Could not instantiate DOMImplementationRegistry: "", ""refresh_token"", (JsonNode) null, ""refresh_token"");
}"
1037,"    private OAuth2AccessToken createToken(String rawResponse) throws IOException {

        final JsonNode response = OBJECT_MAPPER.readTree(rawResponse);

        final JsonNode expiresInNode = response.get(""expires_in"");
        final JsonNode refreshToken = response.get(OAuthConstants.REFRESH_TOKEN);
        final JsonNode scope = response.get(OAuthConstants.SCOPE);
        final JsonNode tokenType = response.get(""token_type"");

        return createToken(extractRequiredParameter(response, OAuthConstants.ACCESS_TOKEN, rawResponse).asText(),
                tokenType == null ? null : tokenType.asText(), expiresInNode == null ? null : expiresInNode.asInt(),
                refreshToken == null ? null : refreshToken.asText(), scope == null ? null : scope.asText(), response,
                rawResponse);
    }","  public void test23()  throws Throwable  {
      OAuth2AccessTokenJsonExtractor oAuth2AccessTokenJsonExtractor0 = OAuth2AccessTokenJsonExtractor.instance();
      OAuth2AccessToken oAuth2AccessToken0 = oAuth2AccessTokenJsonExtractor0.createToken("""", ""Could not instantiate DOMImplementationRegistry: "", (Integer) null, ""Could not instantiate DOMImplementationRegistry: "", ""refresh_token"", (JsonNode) null, ""refresh_token"");
}"
1038,"    protected static JsonNode extractRequiredParameter(JsonNode errorNode, String parameterName, String rawResponse)
            throws OAuthException {
        final JsonNode value = errorNode.get(parameterName);

        if (value == null) {
            throw new OAuthException(""Response body is incorrect. Can't extract a '"" + parameterName
                    + ""' from this: '"" + rawResponse + ""'"", null);
        }

        return value;
    }","  public void test0()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      HashMap<String, JsonNode> hashMap0 = new HashMap<String, JsonNode>();
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0, hashMap0);
      Short short0 = new Short((short)0);
      objectNode0.put("""", short0);
      JsonNode jsonNode0 = AbstractJsonExtractor.extractRequiredParameter(objectNode0, """", """");
}"
1039,"    protected static JsonNode extractRequiredParameter(JsonNode errorNode, String parameterName, String rawResponse)
            throws OAuthException {
        final JsonNode value = errorNode.get(parameterName);

        if (value == null) {
            throw new OAuthException(""Response body is incorrect. Can't extract a '"" + parameterName
                    + ""' from this: '"" + rawResponse + ""'"", null);
        }

        return value;
    }","  public void test1()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(true);
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0);
      Long long0 = new Long(3246L);
      ObjectNode objectNode1 = objectNode0.put(""no delegate creator specified"", long0);
      JsonNode jsonNode0 = AbstractJsonExtractor.extractRequiredParameter(objectNode1, ""no delegate creator specified"", ""F>&{vb2K%2"");
}"
1040,"    protected static JsonNode extractRequiredParameter(JsonNode errorNode, String parameterName, String rawResponse)
            throws OAuthException {
        final JsonNode value = errorNode.get(parameterName);

        if (value == null) {
            throw new OAuthException(""Response body is incorrect. Can't extract a '"" + parameterName
                    + ""' from this: '"" + rawResponse + ""'"", null);
        }

        return value;
    }","  public void test2()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      HashMap<String, JsonNode> hashMap0 = new HashMap<String, JsonNode>();
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0, hashMap0);
      objectNode0.put("" O)&W"", 44);
      JsonNode jsonNode0 = AbstractJsonExtractor.extractRequiredParameter(objectNode0, "" O)&W"", ""x.kr"");
}"
1041,"    protected static JsonNode extractRequiredParameter(JsonNode errorNode, String parameterName, String rawResponse)
            throws OAuthException {
        final JsonNode value = errorNode.get(parameterName);

        if (value == null) {
            throw new OAuthException(""Response body is incorrect. Can't extract a '"" + parameterName
                    + ""' from this: '"" + rawResponse + ""'"", null);
        }

        return value;
    }","  public void test3()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      HashMap<String, JsonNode> hashMap0 = new HashMap<String, JsonNode>();
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0, hashMap0);
      ObjectNode objectNode1 = objectNode0.put(""H`(5],FiH"", 3333.4353F);
      JsonNode jsonNode0 = AbstractJsonExtractor.extractRequiredParameter(objectNode1, ""H`(5],FiH"", """");
}"
1042,"    protected static JsonNode extractRequiredParameter(JsonNode errorNode, String parameterName, String rawResponse)
            throws OAuthException {
        final JsonNode value = errorNode.get(parameterName);

        if (value == null) {
            throw new OAuthException(""Response body is incorrect. Can't extract a '"" + parameterName
                    + ""' from this: '"" + rawResponse + ""'"", null);
        }

        return value;
    }","  public void test4()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      HashMap<String, JsonNode> hashMap0 = new HashMap<String, JsonNode>();
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0, hashMap0);
      ObjectNode objectNode1 = objectNode0.putObject("" O)&W"");
      ObjectNode objectNode2 = objectNode1.put("""", 3333.4353F);
      JsonNode jsonNode0 = AbstractJsonExtractor.extractRequiredParameter(objectNode0, "" O)&W"", """");
}"
1043,"    protected static JsonNode extractRequiredParameter(JsonNode errorNode, String parameterName, String rawResponse)
            throws OAuthException {
        final JsonNode value = errorNode.get(parameterName);

        if (value == null) {
            throw new OAuthException(""Response body is incorrect. Can't extract a '"" + parameterName
                    + ""' from this: '"" + rawResponse + ""'"", null);
        }

        return value;
    }","  public void test5()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      HashMap<String, JsonNode> hashMap0 = new HashMap<String, JsonNode>();
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0, hashMap0);
      Double double0 = new Double(0.0);
      ObjectNode objectNode1 = objectNode0.put("""", double0);
      DoubleNode doubleNode0 = (DoubleNode)AbstractJsonExtractor.extractRequiredParameter(objectNode1, """", """");
}"
1044,"    protected static JsonNode extractRequiredParameter(JsonNode errorNode, String parameterName, String rawResponse)
            throws OAuthException {
        final JsonNode value = errorNode.get(parameterName);

        if (value == null) {
            throw new OAuthException(""Response body is incorrect. Can't extract a '"" + parameterName
                    + ""' from this: '"" + rawResponse + ""'"", null);
        }

        return value;
    }","  public void test6()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      HashMap<String, JsonNode> hashMap0 = new HashMap<String, JsonNode>();
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0, hashMap0);
      ArrayNode arrayNode0 = jsonNodeFactory0.arrayNode();
      hashMap0.put(""H`(5],FiH"", arrayNode0);
      JsonNode jsonNode0 = AbstractJsonExtractor.extractRequiredParameter(objectNode0, ""H`(5],FiH"", """");
}"
1045,"    protected static JsonNode extractRequiredParameter(JsonNode errorNode, String parameterName, String rawResponse)
            throws OAuthException {
        final JsonNode value = errorNode.get(parameterName);

        if (value == null) {
            throw new OAuthException(""Response body is incorrect. Can't extract a '"" + parameterName
                    + ""' from this: '"" + rawResponse + ""'"", null);
        }

        return value;
    }","  public void test7()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      HashMap<String, JsonNode> hashMap0 = new HashMap<String, JsonNode>();
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0, hashMap0);
      ObjectNode objectNode1 = objectNode0.put("""", true);
      JsonNode jsonNode0 = AbstractJsonExtractor.extractRequiredParameter(objectNode1, """", "":ikW\""T?"");
}"
1046,"    protected static JsonNode extractRequiredParameter(JsonNode errorNode, String parameterName, String rawResponse)
            throws OAuthException {
        final JsonNode value = errorNode.get(parameterName);

        if (value == null) {
            throw new OAuthException(""Response body is incorrect. Can't extract a '"" + parameterName
                    + ""' from this: '"" + rawResponse + ""'"", null);
        }

        return value;
    }","  public void test8()  throws Throwable  {
      // Undeclared exception!
      try { 
        AbstractJsonExtractor.extractRequiredParameter((JsonNode) null, ""O|Bu!Hq"", ""O|Bu!Hq"");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""com.github.scribejava.core.extractors.AbstractJsonExtractor"", e);
      }
  }"
1047,"    protected static JsonNode extractRequiredParameter(JsonNode errorNode, String parameterName, String rawResponse)
            throws OAuthException {
        final JsonNode value = errorNode.get(parameterName);

        if (value == null) {
            throw new OAuthException(""Response body is incorrect. Can't extract a '"" + parameterName
                    + ""' from this: '"" + rawResponse + ""'"", null);
        }

        return value;
    }","  public void test9()  throws Throwable  {
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      HashMap<String, JsonNode> hashMap0 = new HashMap<String, JsonNode>();
      ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0, hashMap0);
      try { 
        AbstractJsonExtractor.extractRequiredParameter(objectNode0, "" O)&W"", ""H`(5],FiH"");
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // Response body is incorrect. Can't extract a ' O)&W' from this: 'H`(5],FiH'
         //
         verifyException(""com.github.scribejava.core.extractors.AbstractJsonExtractor"", e);
      }
  }"
1048,,"  public void test10()  throws Throwable  {
      DeviceAuthorizationJsonExtractor deviceAuthorizationJsonExtractor0 = new DeviceAuthorizationJsonExtractor();
  }"
1049,"    protected String getUrl(OAuthRequest request) {
        return request.getSanitizedUrl();
    }","  public void test0()  throws Throwable  {
      Verb verb0 = Verb.GET;
      OAuthRequest oAuthRequest0 = new OAuthRequest(verb0, ""y"");
      Map<String, String> map0 = oAuthRequest0.getOauthParameters();
      oAuthRequest0.initMultipartPayload(map0);
      BaseStringExtractorImpl baseStringExtractorImpl0 = new BaseStringExtractorImpl();
      baseStringExtractorImpl0.checkPreconditions(oAuthRequest0);
}"
1050,"    protected String getUrl(OAuthRequest request) {
        return request.getSanitizedUrl();
    }","  public void test1()  throws Throwable  {
      BaseStringExtractorImpl baseStringExtractorImpl0 = new BaseStringExtractorImpl();
      Verb verb0 = Verb.TRACE;
      OAuthRequest oAuthRequest0 = new OAuthRequest(verb0, """");
      String string0 = baseStringExtractorImpl0.getUrl(oAuthRequest0);
}"
1051,"    protected String getSortedAndEncodedParams(OAuthRequest request) {
        final ParameterList params = new ParameterList();
        params.addAll(request.getQueryStringParams());
        params.addAll(request.getBodyParams());
        params.addAll(new ParameterList(request.getOauthParameters()));
        return params.sort().asOauthBaseString();
    }","  public void test2()  throws Throwable  {
      BaseStringExtractorImpl baseStringExtractorImpl0 = new BaseStringExtractorImpl();
      Verb verb0 = Verb.GET;
      OAuthRequest oAuthRequest0 = new OAuthRequest(verb0, ""http://"");
      Map<String, String> map0 = oAuthRequest0.getOauthParameters();
      oAuthRequest0.initMultipartPayload(map0);
      String string0 = baseStringExtractorImpl0.getSortedAndEncodedParams(oAuthRequest0);
}"
1052,"    protected String getSortedAndEncodedParams(OAuthRequest request) {
        final ParameterList params = new ParameterList();
        params.addAll(request.getQueryStringParams());
        params.addAll(request.getBodyParams());
        params.addAll(new ParameterList(request.getOauthParameters()));
        return params.sort().asOauthBaseString();
    }","  public void test3()  throws Throwable  {
      BaseStringExtractorImpl baseStringExtractorImpl0 = new BaseStringExtractorImpl();
      Verb verb0 = Verb.PATCH;
      OAuthRequest oAuthRequest0 = new OAuthRequest(verb0, ""https://"");
      String string0 = baseStringExtractorImpl0.getSortedAndEncodedParams(oAuthRequest0);
}"
1053,"    protected String getVerb(OAuthRequest request) {
        return request.getVerb().name();
    }","  public void test4()  throws Throwable  {
      BaseStringExtractorImpl baseStringExtractorImpl0 = new BaseStringExtractorImpl();
      // Undeclared exception!
      try { 
        baseStringExtractorImpl0.getVerb((OAuthRequest) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""com.github.scribejava.core.extractors.BaseStringExtractorImpl"", e);
      }
  }"
1054,"    protected String getUrl(OAuthRequest request) {
        return request.getSanitizedUrl();
    }","  public void test5()  throws Throwable  {
      BaseStringExtractorImpl baseStringExtractorImpl0 = new BaseStringExtractorImpl();
      Verb verb0 = Verb.OPTIONS;
      OAuthRequest oAuthRequest0 = new OAuthRequest(verb0, (String) null);
      // Undeclared exception!
      try { 
        baseStringExtractorImpl0.getUrl(oAuthRequest0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""com.github.scribejava.core.model.OAuthRequest"", e);
      }
  }"
1055,"    protected String getSortedAndEncodedParams(OAuthRequest request) {
        final ParameterList params = new ParameterList();
        params.addAll(request.getQueryStringParams());
        params.addAll(request.getBodyParams());
        params.addAll(new ParameterList(request.getOauthParameters()));
        return params.sort().asOauthBaseString();
    }","  public void test6()  throws Throwable  {
      BaseStringExtractorImpl baseStringExtractorImpl0 = new BaseStringExtractorImpl();
      // Undeclared exception!
      try { 
        baseStringExtractorImpl0.getSortedAndEncodedParams((OAuthRequest) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""com.github.scribejava.core.extractors.BaseStringExtractorImpl"", e);
      }
  }"
1056,"    protected String getSortedAndEncodedParams(OAuthRequest request) {
        final ParameterList params = new ParameterList();
        params.addAll(request.getQueryStringParams());
        params.addAll(request.getBodyParams());
        params.addAll(new ParameterList(request.getOauthParameters()));
        return params.sort().asOauthBaseString();
    }","  public void test7()  throws Throwable  {
      BaseStringExtractorImpl baseStringExtractorImpl0 = new BaseStringExtractorImpl();
      Verb verb0 = Verb.OPTIONS;
      OAuthRequest oAuthRequest0 = new OAuthRequest(verb0, ""https://"");
      oAuthRequest0.addBodyParameter((String) null, ""?.*"");
      // Undeclared exception!
      try { 
        baseStringExtractorImpl0.getSortedAndEncodedParams(oAuthRequest0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Cannot encode null object
         //
         verifyException(""com.github.scribejava.core.utils.Preconditions"", e);
      }
  }"
1057,"    public String extract(OAuthRequest request) {
        checkPreconditions(request);
        final String verb = OAuthEncoder.encode(getVerb(request));
        final String url = OAuthEncoder.encode(getUrl(request));
        final String params = getSortedAndEncodedParams(request);
        return String.format(AMPERSAND_SEPARATED_STRING, verb, url, params);
    }","  public void test8()  throws Throwable  {
      BaseStringExtractorImpl baseStringExtractorImpl0 = new BaseStringExtractorImpl();
      Verb verb0 = Verb.GET;
      OAuthRequest oAuthRequest0 = new OAuthRequest(verb0, """");
      Map<String, String> map0 = oAuthRequest0.getOauthParameters();
      oAuthRequest0.initMultipartPayload(map0);
      // Undeclared exception!
      try { 
        baseStringExtractorImpl0.extract(oAuthRequest0);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // Malformed URL
         //
         verifyException(""com.github.scribejava.core.model.OAuthRequest"", e);
      }
  }"
1058,"    public String extract(OAuthRequest request) {
        checkPreconditions(request);
        final String verb = OAuthEncoder.encode(getVerb(request));
        final String url = OAuthEncoder.encode(getUrl(request));
        final String params = getSortedAndEncodedParams(request);
        return String.format(AMPERSAND_SEPARATED_STRING, verb, url, params);
    }","  public void test9()  throws Throwable  {
      BaseStringExtractorImpl baseStringExtractorImpl0 = new BaseStringExtractorImpl();
      Verb verb0 = Verb.PATCH;
      OAuthRequest oAuthRequest0 = new OAuthRequest(verb0, (String) null);
      Map<String, String> map0 = oAuthRequest0.getOauthParameters();
      oAuthRequest0.initMultipartPayload(map0);
      // Undeclared exception!
      try { 
        baseStringExtractorImpl0.extract(oAuthRequest0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""com.github.scribejava.core.model.OAuthRequest"", e);
      }
  }"
1059,"    public String extract(OAuthRequest request) {
        checkPreconditions(request);
        final String verb = OAuthEncoder.encode(getVerb(request));
        final String url = OAuthEncoder.encode(getUrl(request));
        final String params = getSortedAndEncodedParams(request);
        return String.format(AMPERSAND_SEPARATED_STRING, verb, url, params);
    }","  public void test10()  throws Throwable  {
      BaseStringExtractorImpl baseStringExtractorImpl0 = new BaseStringExtractorImpl();
      // Undeclared exception!
      try { 
        baseStringExtractorImpl0.extract((OAuthRequest) null);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Cannot extract base string from a null object
         //
         verifyException(""com.github.scribejava.core.utils.Preconditions"", e);
      }
  }"
1060,"    protected void checkPreconditions(OAuthRequest request) {
        Preconditions.checkNotNull(request, ""Cannot extract base string from a null object"");

        if (request.getOauthParameters() == null || request.getOauthParameters().size() <= 0) {
            throw new OAuthParametersMissingException(request);
        }
    }","  public void test11()  throws Throwable  {
      BaseStringExtractorImpl baseStringExtractorImpl0 = new BaseStringExtractorImpl();
      // Undeclared exception!
      try { 
        baseStringExtractorImpl0.checkPreconditions((OAuthRequest) null);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Cannot extract base string from a null object
         //
         verifyException(""com.github.scribejava.core.utils.Preconditions"", e);
      }
  }"
1061,"    protected void checkPreconditions(OAuthRequest request) {
        Preconditions.checkNotNull(request, ""Cannot extract base string from a null object"");

        if (request.getOauthParameters() == null || request.getOauthParameters().size() <= 0) {
            throw new OAuthParametersMissingException(request);
        }
    }","  public void test12()  throws Throwable  {
      BaseStringExtractorImpl baseStringExtractorImpl0 = new BaseStringExtractorImpl();
      Verb verb0 = Verb.GET;
      OAuthRequest oAuthRequest0 = new OAuthRequest(verb0, ""http://"");
      // Undeclared exception!
      try { 
        baseStringExtractorImpl0.checkPreconditions(oAuthRequest0);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // Could not find oauth parameters in request: @Request(GET http://). OAuth parameters must be specified with the addOAuthParameter() method
         //
         verifyException(""com.github.scribejava.core.extractors.BaseStringExtractorImpl"", e);
      }
  }"
1062,"    public String extract(OAuthRequest request) {
        checkPreconditions(request);
        final String verb = OAuthEncoder.encode(getVerb(request));
        final String url = OAuthEncoder.encode(getUrl(request));
        final String params = getSortedAndEncodedParams(request);
        return String.format(AMPERSAND_SEPARATED_STRING, verb, url, params);
    }","  public void test13()  throws Throwable  {
      BaseStringExtractorImpl baseStringExtractorImpl0 = new BaseStringExtractorImpl();
      Verb verb0 = Verb.GET;
      OAuthRequest oAuthRequest0 = new OAuthRequest(verb0, ""http://"");
      Map<String, String> map0 = oAuthRequest0.getOauthParameters();
      oAuthRequest0.initMultipartPayload(map0);
      String string0 = baseStringExtractorImpl0.extract(oAuthRequest0);
}"
1063,"    protected String getUrl(OAuthRequest request) {
        return request.getSanitizedUrl();
    }","  public void test14()  throws Throwable  {
      BaseStringExtractorImpl baseStringExtractorImpl0 = new BaseStringExtractorImpl();
      Verb verb0 = Verb.GET;
      OAuthRequest oAuthRequest0 = new OAuthRequest(verb0, ""http://"");
      String string0 = baseStringExtractorImpl0.getUrl(oAuthRequest0);
}"
1064,"    protected String getVerb(OAuthRequest request) {
        return request.getVerb().name();
    }","  public void test15()  throws Throwable  {
      BaseStringExtractorImpl baseStringExtractorImpl0 = new BaseStringExtractorImpl();
      Verb verb0 = Verb.GET;
      OAuthRequest oAuthRequest0 = new OAuthRequest(verb0, ""http://"");
      String string0 = baseStringExtractorImpl0.getVerb(oAuthRequest0);
}"
1065,"    public String extract(OAuthRequest request) {
        checkPreconditions(request);
        final String verb = OAuthEncoder.encode(getVerb(request));
        final String url = OAuthEncoder.encode(getUrl(request));
        final String params = getSortedAndEncodedParams(request);
        return String.format(AMPERSAND_SEPARATED_STRING, verb, url, params);
    }","  public void test16()  throws Throwable  {
      BaseStringExtractorImpl baseStringExtractorImpl0 = new BaseStringExtractorImpl();
      Verb verb0 = Verb.GET;
      OAuthRequest oAuthRequest0 = new OAuthRequest(verb0, ""http://"");
      // Undeclared exception!
      try { 
        baseStringExtractorImpl0.extract(oAuthRequest0);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // Could not find oauth parameters in request: @Request(GET http://). OAuth parameters must be specified with the addOAuthParameter() method
         //
         verifyException(""com.github.scribejava.core.extractors.BaseStringExtractorImpl"", e);
      }
  }"
1066,"    protected String getSortedAndEncodedParams(OAuthRequest request) {
        final ParameterList params = new ParameterList();
        params.addAll(request.getQueryStringParams());
        params.addAll(request.getBodyParams());
        params.addAll(new ParameterList(request.getOauthParameters()));
        return params.sort().asOauthBaseString();
    }","  public void test17()  throws Throwable  {
      BaseStringExtractorImpl baseStringExtractorImpl0 = new BaseStringExtractorImpl();
      Verb verb0 = Verb.DELETE;
      OAuthRequest oAuthRequest0 = new OAuthRequest(verb0, """");
      // Undeclared exception!
      try { 
        baseStringExtractorImpl0.getSortedAndEncodedParams(oAuthRequest0);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // Malformed URL
         //
         verifyException(""com.github.scribejava.core.model.OAuthRequest"", e);
      }
  }"
1067,"    public void generateError(Response response) throws IOException {
        OAuth2AccessTokenJsonExtractor.instance().generateError(response);
    }","  public void test0()  throws Throwable  {
      DeviceAuthorizationJsonExtractor deviceAuthorizationJsonExtractor0 = new DeviceAuthorizationJsonExtractor();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      Closeable[] closeableArray0 = new Closeable[4];
      Response response0 = new Response(0, ""N)DxNjHJbdy,gVA_y"", (Map<String, String>) null, pipedInputStream0, closeableArray0);
      // Undeclared exception!
      try { 
        deviceAuthorizationJsonExtractor0.generateError(response0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""com.github.scribejava.core.model.Response"", e);
      }
  }"
1068,"    public void generateError(Response response) throws IOException {
        OAuth2AccessTokenJsonExtractor.instance().generateError(response);
    }","  public void test1()  throws Throwable  {
      DeviceAuthorizationJsonExtractor deviceAuthorizationJsonExtractor0 = DeviceAuthorizationJsonExtractor.instance();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Closeable[] closeableArray0 = new Closeable[6];
      Response response0 = new Response(0, """", hashMap0, (InputStream) null, closeableArray0);
      // Undeclared exception!
      try { 
        deviceAuthorizationJsonExtractor0.generateError(response0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // argument \""content\"" is null
         //
         verifyException(""com.fasterxml.jackson.databind.ObjectMapper"", e);
      }
  }"
1069,"    public void generateError(Response response) throws IOException {
        OAuth2AccessTokenJsonExtractor.instance().generateError(response);
    }","  public void test2()  throws Throwable  {
      DeviceAuthorizationJsonExtractor deviceAuthorizationJsonExtractor0 = DeviceAuthorizationJsonExtractor.instance();
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      byte[] byteArray0 = new byte[4];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-1), (byte)45);
      Response response0 = new Response((-1000), """", map0, byteArrayInputStream0, (Closeable[]) null);
      // Undeclared exception!
      try { 
        deviceAuthorizationJsonExtractor0.generateError(response0);
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.io.ByteArrayInputStream"", e);
      }
  }"
1070,"    public void generateError(Response response) throws IOException {
        OAuth2AccessTokenJsonExtractor.instance().generateError(response);
    }","  public void test3()  throws Throwable  {
      DeviceAuthorizationJsonExtractor deviceAuthorizationJsonExtractor0 = DeviceAuthorizationJsonExtractor.instance();
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      PipedInputStream pipedInputStream0 = new PipedInputStream(2257);
      Closeable[] closeableArray0 = new Closeable[4];
      Response response0 = new Response(2257, ""qG8js{;~Go|!)u{i{"", map0, pipedInputStream0, closeableArray0);
      try { 
        deviceAuthorizationJsonExtractor0.generateError(response0);
        fail(""Expecting exception: IOException"");
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException(""java.io.PipedInputStream"", e);
      }
  }"
1071,"    public void generateError(Response response) throws IOException {
        OAuth2AccessTokenJsonExtractor.instance().generateError(response);
    }","  public void test4()  throws Throwable  {
      DeviceAuthorizationJsonExtractor deviceAuthorizationJsonExtractor0 = DeviceAuthorizationJsonExtractor.instance();
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      Response response0 = new Response((-1149), ""no boolean/Boolean-argument constructor/factory method to deserialize from boolean value (%s)"", map0, ""h5Ba^\""F("");
      // Undeclared exception!
      try { 
        deviceAuthorizationJsonExtractor0.generateError(response0);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // h5Ba^\""F(
         //
         verifyException(""com.github.scribejava.core.extractors.OAuth2AccessTokenJsonExtractor"", e);
      }
  }"
1072,"    public DeviceAuthorization extract(Response response) throws IOException {
        if (response.getCode() != 200) {
            generateError(response);
        }
        return createDeviceAuthorization(response.getBody());
    }","  public void test5()  throws Throwable  {
      DeviceAuthorizationJsonExtractor deviceAuthorizationJsonExtractor0 = DeviceAuthorizationJsonExtractor.instance();
      // Undeclared exception!
      try { 
        deviceAuthorizationJsonExtractor0.extract((Response) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""com.github.scribejava.core.extractors.DeviceAuthorizationJsonExtractor"", e);
      }
  }"
1073,"    public DeviceAuthorization extract(Response response) throws IOException {
        if (response.getCode() != 200) {
            generateError(response);
        }
        return createDeviceAuthorization(response.getBody());
    }","  public void test6()  throws Throwable  {
      DeviceAuthorizationJsonExtractor deviceAuthorizationJsonExtractor0 = DeviceAuthorizationJsonExtractor.instance();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      byte[] byteArray0 = new byte[6];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-1680), (byte)27);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      Closeable[] closeableArray0 = new Closeable[8];
      Response response0 = new Response(171, (String) null, hashMap0, dataInputStream0, closeableArray0);
      // Undeclared exception!
      try { 
        deviceAuthorizationJsonExtractor0.extract(response0);
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.io.ByteArrayInputStream"", e);
      }
  }"
1074,"    public DeviceAuthorization extract(Response response) throws IOException {
        if (response.getCode() != 200) {
            generateError(response);
        }
        return createDeviceAuthorization(response.getBody());
    }","  public void test7()  throws Throwable  {
      DeviceAuthorizationJsonExtractor deviceAuthorizationJsonExtractor0 = new DeviceAuthorizationJsonExtractor();
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      Closeable[] closeableArray0 = new Closeable[0];
      Response response0 = new Response(1710, """", map0, pipedInputStream0, closeableArray0);
      try { 
        deviceAuthorizationJsonExtractor0.extract(response0);
        fail(""Expecting exception: IOException"");
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException(""java.io.PipedInputStream"", e);
      }
  }"
1075,"    public DeviceAuthorization extract(Response response) throws IOException {
        if (response.getCode() != 200) {
            generateError(response);
        }
        return createDeviceAuthorization(response.getBody());
    }","  public void test8()  throws Throwable  {
      DeviceAuthorizationJsonExtractor deviceAuthorizationJsonExtractor0 = DeviceAuthorizationJsonExtractor.instance();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Response response0 = new Response((-1277), ""0GF>o"", hashMap0, ""0GF>o"");
      // Undeclared exception!
      try { 
        deviceAuthorizationJsonExtractor0.extract(response0);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // 0GF>o
         //
         verifyException(""com.github.scribejava.core.extractors.OAuth2AccessTokenJsonExtractor"", e);
      }
  }"
1076,"    public DeviceAuthorization extract(Response response) throws IOException {
        if (response.getCode() != 200) {
            generateError(response);
        }
        return createDeviceAuthorization(response.getBody());
    }","  public void test9()  throws Throwable  {
      DeviceAuthorizationJsonExtractor deviceAuthorizationJsonExtractor0 = DeviceAuthorizationJsonExtractor.instance();
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      Response response0 = new Response(200, """", map0, ""{Tgo@[WvQY47)holvVt"");
      try { 
        deviceAuthorizationJsonExtractor0.extract(response0);
        fail(""Expecting exception: IOException"");
      } catch(IOException e) {
         //
         // Unexpected character ('T' (code 84)): was expecting double-quote to start field name
         //  at [Source: (String)\""{Tgo@[WvQY47)holvVt\""; line: 1, column: 3]
         //
         verifyException(""com.fasterxml.jackson.core.JsonParser"", e);
      }
  }"
1077,"    public void generateError(Response response) throws IOException {
        OAuth2AccessTokenJsonExtractor.instance().generateError(response);
    }","  public void test10()  throws Throwable  {
      DeviceAuthorizationJsonExtractor deviceAuthorizationJsonExtractor0 = new DeviceAuthorizationJsonExtractor();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Response response0 = new Response(0, ""com.fasterxml.jackson.databind.deser.impl.ValueInjector"", hashMap0, """");
      // Undeclared exception!
      try { 
        deviceAuthorizationJsonExtractor0.generateError(response0);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // Response body is incorrect. Can't extract a 'error' from this: ''
         //
         verifyException(""com.github.scribejava.core.extractors.AbstractJsonExtractor"", e);
      }
  }"
1078,"    public DeviceAuthorization extract(Response response) throws IOException {
        if (response.getCode() != 200) {
            generateError(response);
        }
        return createDeviceAuthorization(response.getBody());
    }","  public void test11()  throws Throwable  {
      DeviceAuthorizationJsonExtractor deviceAuthorizationJsonExtractor0 = new DeviceAuthorizationJsonExtractor();
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      Response response0 = new Response(200, """", map0, """");
      // Undeclared exception!
      try { 
        deviceAuthorizationJsonExtractor0.extract(response0);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // Response body is incorrect. Can't extract a 'device_code' from this: ''
         //
         verifyException(""com.github.scribejava.core.extractors.AbstractJsonExtractor"", e);
      }
  }"
1079,"    public DeviceAuthorization extract(Response response) throws IOException {
        if (response.getCode() != 200) {
            generateError(response);
        }
        return createDeviceAuthorization(response.getBody());
    }","  public void test12()  throws Throwable  {
      DeviceAuthorizationJsonExtractor deviceAuthorizationJsonExtractor0 = DeviceAuthorizationJsonExtractor.instance();
      Closeable[] closeableArray0 = new Closeable[2];
      Response response0 = new Response(0, """", (Map<String, String>) null, (InputStream) null, closeableArray0);
      // Undeclared exception!
      try { 
        deviceAuthorizationJsonExtractor0.extract(response0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // argument \""content\"" is null
         //
         verifyException(""com.fasterxml.jackson.databind.ObjectMapper"", e);
      }
  }"
1080,"    protected String getVerificationUriParamName() {
        return ""verification_uri"";
    }","  public void test13()  throws Throwable  {
      DeviceAuthorizationJsonExtractor deviceAuthorizationJsonExtractor0 = DeviceAuthorizationJsonExtractor.instance();
      String string0 = deviceAuthorizationJsonExtractor0.getVerificationUriParamName();
}"
1081,"    protected OAuth1AccessToken createToken(String token, String secret, String response) {
        return new OAuth1AccessToken(token, secret, response);
    }","  public void test0()  throws Throwable  {
      OAuth1AccessTokenExtractor oAuth1AccessTokenExtractor0 = OAuth1AccessTokenExtractor.instance();
      OAuth1AccessToken oAuth1AccessToken0 = oAuth1AccessTokenExtractor0.createToken(""2EX`0W_AGZ}6l^M"", ""2EX`0W_AGZ}6l^M"", ""GNYuD8fI4aHW%ADC5"");
}"
1082,"    protected OAuth1AccessToken createToken(String token, String secret, String response) {
        return new OAuth1AccessToken(token, secret, response);
    }","  public void test1()  throws Throwable  {
      OAuth1AccessTokenExtractor oAuth1AccessTokenExtractor0 = OAuth1AccessTokenExtractor.instance();
      OAuth1AccessToken oAuth1AccessToken0 = oAuth1AccessTokenExtractor0.createToken(""2EX`0W_AGZ}6l^M"", ""2EX`0W_AGZ}6l^M"", ""GNYuD8fI4aHW%ADC5"");
}"
1083,"    protected OAuth1AccessToken createToken(String token, String secret, String response) {
        return new OAuth1AccessToken(token, secret, response);
    }","  public void test2()  throws Throwable  {
      OAuth1AccessTokenExtractor oAuth1AccessTokenExtractor0 = new OAuth1AccessTokenExtractor();
      OAuth1AccessToken oAuth1AccessToken0 = oAuth1AccessTokenExtractor0.createToken("""", """", """");
}"
1084,"    protected OAuth1AccessToken createToken(String token, String secret, String response) {
        return new OAuth1AccessToken(token, secret, response);
    }","  public void test3()  throws Throwable  {
      OAuth1AccessTokenExtractor oAuth1AccessTokenExtractor0 = OAuth1AccessTokenExtractor.instance();
      // Undeclared exception!
      try { 
        oAuth1AccessTokenExtractor0.createToken((String) null, ""9+9&M$^.GlUy"", (String) null);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // oauth_token can't be null
         //
         verifyException(""com.github.scribejava.core.utils.Preconditions"", e);
      }
  }"
1085,,"  public void test0()  throws Throwable  {
      TokenTypeHint[] tokenTypeHintArray0 = TokenTypeHint.values();
}"
1086,,"  public void test1()  throws Throwable  {
      TokenTypeHint tokenTypeHint0 = TokenTypeHint.valueOf(""ACCESS_TOKEN"");
}"
1087,"    public String getValue() {
        return value;
    }","  public void test2()  throws Throwable  {
      TokenTypeHint tokenTypeHint0 = TokenTypeHint.REFRESH_TOKEN;
      String string0 = tokenTypeHint0.getValue();
}"
1088,"    public Void convert(Response response) throws IOException {
        if (response.getCode() != 200) {
            OAuth2AccessTokenJsonExtractor.instance().generateError(response);
        }
        return null;
    }","  public void test0()  throws Throwable  {
      OAuth2RevokeTokenResponseConverter oAuth2RevokeTokenResponseConverter0 = new OAuth2RevokeTokenResponseConverter();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Response response0 = new Response(1080, """", hashMap0, """");
      // Undeclared exception!
      try { 
        oAuth2RevokeTokenResponseConverter0.convert(response0);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // Response body is incorrect. Can't extract a 'error' from this: ''
         //
         verifyException(""com.github.scribejava.core.extractors.AbstractJsonExtractor"", e);
      }
  }"
1089,"    public Void convert(Response response) throws IOException {
        if (response.getCode() != 200) {
            OAuth2AccessTokenJsonExtractor.instance().generateError(response);
        }
        return null;
    }","  public void test1()  throws Throwable  {
      OAuth2RevokeTokenResponseConverter oAuth2RevokeTokenResponseConverter0 = new OAuth2RevokeTokenResponseConverter();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null);
      Closeable[] closeableArray0 = new Closeable[5];
      Response response0 = new Response(51, ""Illegal character '"", (Map<String, String>) null, pushbackInputStream0, closeableArray0);
      // Undeclared exception!
      try { 
        oAuth2RevokeTokenResponseConverter0.convert(response0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""com.github.scribejava.core.model.Response"", e);
      }
  }"
1090,"    public Void convert(Response response) throws IOException {
        if (response.getCode() != 200) {
            OAuth2AccessTokenJsonExtractor.instance().generateError(response);
        }
        return null;
    }","  public void test2()  throws Throwable  {
      OAuth2RevokeTokenResponseConverter oAuth2RevokeTokenResponseConverter0 = new OAuth2RevokeTokenResponseConverter();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      Closeable[] closeableArray0 = new Closeable[4];
      Response response0 = new Response((-3887), ""' has value that is not of type ObjectNode (but "", hashMap0, dataInputStream0, closeableArray0);
      // Undeclared exception!
      try { 
        oAuth2RevokeTokenResponseConverter0.convert(response0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.io.DataInputStream"", e);
      }
  }"
1091,"    public Void convert(Response response) throws IOException {
        if (response.getCode() != 200) {
            OAuth2AccessTokenJsonExtractor.instance().generateError(response);
        }
        return null;
    }","  public void test3()  throws Throwable  {
      OAuth2RevokeTokenResponseConverter oAuth2RevokeTokenResponseConverter0 = new OAuth2RevokeTokenResponseConverter();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Response response0 = new Response(57, ""Vv>"", hashMap0, (String) null);
      // Undeclared exception!
      try { 
        oAuth2RevokeTokenResponseConverter0.convert(response0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // argument \""content\"" is null
         //
         verifyException(""com.fasterxml.jackson.databind.ObjectMapper"", e);
      }
  }"
1092,"    public Void convert(Response response) throws IOException {
        if (response.getCode() != 200) {
            OAuth2AccessTokenJsonExtractor.instance().generateError(response);
        }
        return null;
    }","  public void test4()  throws Throwable  {
      OAuth2RevokeTokenResponseConverter oAuth2RevokeTokenResponseConverter0 = new OAuth2RevokeTokenResponseConverter();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-663), 3600);
      Closeable[] closeableArray0 = new Closeable[8];
      Response response0 = new Response((-663), ""oHm af"", hashMap0, byteArrayInputStream0, closeableArray0);
      // Undeclared exception!
      try { 
        oAuth2RevokeTokenResponseConverter0.convert(response0);
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.io.ByteArrayInputStream"", e);
      }
  }"
1093,"    public Void convert(Response response) throws IOException {
        if (response.getCode() != 200) {
            OAuth2AccessTokenJsonExtractor.instance().generateError(response);
        }
        return null;
    }","  public void test5()  throws Throwable  {
      OAuth2RevokeTokenResponseConverter oAuth2RevokeTokenResponseConverter0 = new OAuth2RevokeTokenResponseConverter();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      PipedInputStream pipedInputStream0 = new PipedInputStream(50);
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      Closeable[] closeableArray0 = new Closeable[2];
      Response response0 = new Response(971, (String) null, hashMap0, dataInputStream0, closeableArray0);
      try { 
        oAuth2RevokeTokenResponseConverter0.convert(response0);
        fail(""Expecting exception: IOException"");
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException(""java.io.PipedInputStream"", e);
      }
  }"
1094,"    public Void convert(Response response) throws IOException {
        if (response.getCode() != 200) {
            OAuth2AccessTokenJsonExtractor.instance().generateError(response);
        }
        return null;
    }","  public void test6()  throws Throwable  {
      OAuth2RevokeTokenResponseConverter oAuth2RevokeTokenResponseConverter0 = new OAuth2RevokeTokenResponseConverter();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Response response0 = new Response(86, "") has not properly overridden method 'withAdditionalSerializers': cannot instantiate subtype with additional serializer definitions"", hashMap0, ""com.github.scribejava.core.revoke.OAuth2RevokeTokenResponseConverter"");
      // Undeclared exception!
      try { 
        oAuth2RevokeTokenResponseConverter0.convert(response0);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // com.github.scribejava.core.revoke.OAuth2RevokeTokenResponseConverter
         //
         verifyException(""com.github.scribejava.core.extractors.OAuth2AccessTokenJsonExtractor"", e);
      }
  }"
1095,"    public Void convert(Response response) throws IOException {
        if (response.getCode() != 200) {
            OAuth2AccessTokenJsonExtractor.instance().generateError(response);
        }
        return null;
    }","  public void test7()  throws Throwable  {
      OAuth2RevokeTokenResponseConverter oAuth2RevokeTokenResponseConverter0 = new OAuth2RevokeTokenResponseConverter();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Response response0 = new Response(200, "") has not properly overridden method 'withAdditionalSerializers': cannot instantiate subtype with additional serializer definitions"", hashMap0, "") has not properly overridden method 'withAdditionalSerializers': cannot instantiate subtype with additional serializer definitions"");
      oAuth2RevokeTokenResponseConverter0.convert(response0);
}"
