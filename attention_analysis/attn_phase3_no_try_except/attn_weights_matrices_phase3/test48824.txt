48824
Test: public void test8057() throws Throwable { HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>(); HashMap<String, DateTimeZone> hashMap1 = new HashMap<String, DateTimeZone>(hashMap0); DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfDay(); DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral("US/H"); DateTimePrinter dateTimePrinter0 = InternalPrinterDateTimePrinter.of(dateTimeFormatterBuilder_StringLiteral0); DateTimeParser[] dateTimeParserArray0 = new DateTimeParser[1]; DateTimeParser dateTimeParser0 = InternalParserDateTimeParser.of(dateTimeFormatterBuilder_StringLiteral0); GJChronology gJChronology0 = GJChronology.getInstance(); StrictChronology strictChronology0 = StrictChronology.getInstance(gJChronology0); DateTimeZone dateTimeZone0 = gJChronology0.getZone(); ZonedChronology zonedChronology0 = ZonedChronology.getInstance(strictChronology0, dateTimeZone0); Chronology chronology0 = zonedChronology0.withUTC(); DateTimeField dateTimeField0 = dateTimeFieldType0.getField(chronology0); dateTimeParserArray0[0] = dateTimeParser0; boolean boolean0 = DateTimeFormatterBuilder.csStartsWith("org/joda/time/tz/data", 2311, ""); DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder(); DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendDayOfMonth(2243); DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder1.appendFixedSignedDecimal(dateTimeFieldType0, 2311); DateTimeFormatterBuilder dateTimeFormatterBuilder3 = dateTimeFormatterBuilder2.appendHalfdayOfDayText(); DateTimeFormatterBuilder dateTimeFormatterBuilder4 = dateTimeFormatterBuilder3.appendLiteral('3'); DateTimeFormatterBuilder dateTimeFormatterBuilder5 = dateTimeFormatterBuilder4.appendYearOfEra(2086, (-2014)); }
Code: public DateTimeFormatterBuilder appendYearOfEra(int minDigits, int maxDigits) { return appendDecimal(DateTimeFieldType.yearOfEra(), minDigits, maxDigits); }
[[0.07045451 0.0977381  0.0977381  0.0977381  0.0446879  0.0977381
 0.09334061 0.07746354 0.0977381  0.0977381  0.0977381  0.02988677]
[0.06001871 0.0989942  0.0989942  0.0989942  0.03825001 0.0989942
 0.10166976 0.07301812 0.09899421 0.09899421 0.09899421 0.03408394]
[0.06001871 0.0989942  0.0989942  0.0989942  0.03825001 0.0989942
 0.10166976 0.07301812 0.09899421 0.09899421 0.09899421 0.03408394]
[0.06001871 0.0989942  0.0989942  0.0989942  0.03825001 0.0989942
 0.10166976 0.07301812 0.09899421 0.09899421 0.09899421 0.03408394]
[0.04239925 0.10441163 0.10441163 0.10441163 0.02879433 0.10441163
 0.10634575 0.06969559 0.10441165 0.10441165 0.10441165 0.02188366]
[0.06001871 0.0989942  0.0989942  0.0989942  0.03825001 0.0989942
 0.10166976 0.07301812 0.09899421 0.09899421 0.09899421 0.03408394]
[0.07308374 0.09133645 0.09133645 0.09133645 0.03402039 0.09133645
 0.12738362 0.08281835 0.09133646 0.09133646 0.09133646 0.04333861]
[0.05131359 0.10224862 0.10224862 0.10224862 0.0305373  0.10224862
 0.10041224 0.07448341 0.10224862 0.10224862 0.10224862 0.02751317]
[0.06001871 0.0989942  0.0989942  0.0989942  0.03825001 0.0989942
 0.10166976 0.07301812 0.09899421 0.09899421 0.09899421 0.03408394]
[0.06001871 0.0989942  0.0989942  0.0989942  0.03825001 0.0989942
 0.10166976 0.07301812 0.09899421 0.09899421 0.09899421 0.03408394]
[0.06001871 0.0989942  0.0989942  0.0989942  0.03825001 0.0989942
 0.10166976 0.07301812 0.09899421 0.09899421 0.09899421 0.03408394]
[0.04941742 0.088955   0.088955   0.088955   0.03653049 0.088955
 0.14699095 0.11370802 0.08895499 0.08895499 0.08895499 0.03066816]]