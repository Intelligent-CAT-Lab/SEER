15571
Test: public void test192() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test192"); org.apache.commons.cli.Option option2 = new org.apache.commons.cli.Option("", "[ option: [ARG...] :: ]"); option2.setRequired(false); option2.setLongOpt("org.apache.commons.cli.MissingArgumentException: Missing argument for option: "); org.apache.commons.cli.PosixParser posixParser7 = new org.apache.commons.cli.PosixParser(); org.apache.commons.cli.CommandLine commandLine8 = posixParser7.cmd; org.apache.commons.cli.CommandLine commandLine9 = new org.apache.commons.cli.CommandLine(); java.lang.String str12 = commandLine9.getOptionValue('#', ""); java.util.Properties properties14 = commandLine9.getOptionProperties(""); posixParser7.processProperties(properties14); posixParser7.burstToken("", true); java.util.List list19 = posixParser7.getRequiredOptions(); org.apache.commons.cli.CommandLine commandLine20 = new org.apache.commons.cli.CommandLine(); java.lang.String str23 = commandLine20.getOptionValue('#', ""); boolean boolean25 = commandLine20.hasOption(' '); java.lang.String[] strArray27 = commandLine20.getOptionValues('4'); posixParser7.cmd = commandLine20; org.apache.commons.cli.Options options29 = new org.apache.commons.cli.Options(); java.util.Collection collection30 = options29.getOptions(); java.util.List list31 = options29.getRequiredOptions(); org.apache.commons.cli.PosixParser posixParser32 = new org.apache.commons.cli.PosixParser(); org.apache.commons.cli.CommandLine commandLine33 = posixParser32.cmd; org.apache.commons.cli.CommandLine commandLine34 = new org.apache.commons.cli.CommandLine(); java.lang.String str37 = commandLine34.getOptionValue('#', ""); java.util.Properties properties39 = commandLine34.getOptionProperties(""); posixParser32.processProperties(properties39); posixParser32.burstToken("", true); org.apache.commons.cli.Options options44 = null; org.apache.commons.cli.CommandLine commandLine45 = new org.apache.commons.cli.CommandLine(); java.lang.String str48 = commandLine45.getOptionValue('#', ""); java.lang.String str50 = commandLine45.getOptionValue(' '); java.lang.String[] strArray51 = commandLine45.getArgs(); java.lang.String[] strArray53 = posixParser32.flatten(options44, strArray51, true); org.apache.commons.cli.CommandLine commandLine54 = posixParser7.parse(options29, strArray51); java.lang.String[] strArray55 = commandLine54.getArgs(); boolean boolean56 = option2.equals((java.lang.Object) commandLine54); }
Code: protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption) { init(); this.options = options; Iterator iter = Arrays.asList(arguments).iterator(); while (iter.hasNext()) { String token = (String) iter.next(); if (token.startsWith("--")) { if (token.indexOf('=') != -1) { tokens.add(token.substring(0, token.indexOf('='))); tokens.add(token.substring(token.indexOf('=') + 1, token.length())); } else { tokens.add(token); } } else if ("-".equals(token)) { tokens.add(token); } else if (token.startsWith("-")) { if (token.length() == 2) { processOptionToken(token, stopAtNonOption); } else if (options.hasOption(token)) { tokens.add(token); } else { burstToken(token, stopAtNonOption); } } else if (stopAtNonOption) { process(token); } else { tokens.add(token); } gobble(iter); } return (String[]) tokens.toArray(new String[tokens.size()]); }
tensor([[0.0123, 0.0029, 0.0129,  ..., 0.0117, 0.0076, 0.0023],
        [0.0110, 0.0026, 0.0123,  ..., 0.0101, 0.0079, 0.0025],
        [0.0100, 0.0042, 0.0134,  ..., 0.0117, 0.0076, 0.0032],
        ...,
        [0.0119, 0.0039, 0.0137,  ..., 0.0113, 0.0077, 0.0028],
        [0.0118, 0.0022, 0.0166,  ..., 0.0138, 0.0089, 0.0020],
        [0.0113, 0.0026, 0.0115,  ..., 0.0145, 0.0081, 0.0026]])