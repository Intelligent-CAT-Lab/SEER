69025
Test: public void test229() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test229"); org.jsoup.nodes.Document document1 = org.jsoup.Jsoup.parse(":nth-child(100)"); org.jsoup.nodes.Document document3 = org.jsoup.Jsoup.parse(":nth-child(100)"); org.jsoup.nodes.Document document5 = org.jsoup.Jsoup.parse(":nth-child(100)"); org.jsoup.nodes.Element[] elementArray6 = new org.jsoup.nodes.Element[] { document1, document3, document5 }; java.util.ArrayList<org.jsoup.nodes.Element> elementList7 = new java.util.ArrayList<org.jsoup.nodes.Element>(); boolean boolean8 = java.util.Collections.addAll((java.util.Collection<org.jsoup.nodes.Element>) elementList7, elementArray6); java.util.stream.Stream<org.jsoup.nodes.Element> elementStream9 = elementList7.stream(); java.util.ListIterator<org.jsoup.nodes.Element> elementItor10 = elementList7.listIterator(); org.jsoup.nodes.Document document14 = org.jsoup.Jsoup.parse(":nth-child(100)"); java.util.List<org.jsoup.nodes.Node> nodeList15 = document14.ensureChildNodes(); org.jsoup.select.Elements elements18 = document14.getElementsByAttributeValueMatching("#document", "#document"); org.jsoup.nodes.Element element19 = document14.empty(); org.jsoup.select.Elements elements20 = org.jsoup.select.Selector.select(":nth-child(10n+100)", element19); java.util.List<org.jsoup.nodes.Node> nodeList21 = element19.childNodesCopy(); try { elementList7.add((int) (short) -1, element19); } catch (java.lang.IndexOutOfBoundsException e) { } }
Code: protected List<Node> ensureChildNodes() { throw new UnsupportedOperationException("Leaf Nodes do not have child nodes."); }
tensor([[0.0641, 0.1093, 0.1602, 0.1027, 0.0455, 0.0212, 0.0522, 0.0967, 0.0850,
         0.0426, 0.0993, 0.0356, 0.0659, 0.0198],
        [0.0669, 0.0949, 0.1452, 0.0810, 0.0424, 0.0227, 0.0590, 0.1134, 0.0976,
         0.0391, 0.1021, 0.0431, 0.0685, 0.0241],
        [0.0573, 0.0869, 0.1599, 0.0979, 0.0508, 0.0268, 0.0586, 0.1042, 0.0827,
         0.0471, 0.0847, 0.0432, 0.0736, 0.0264],
        [0.0925, 0.0745, 0.1259, 0.0961, 0.0491, 0.0281, 0.0538, 0.1072, 0.0811,
         0.0527, 0.0962, 0.0391, 0.0715, 0.0322],
        [0.0719, 0.0846, 0.1584, 0.1195, 0.0450, 0.0190, 0.0516, 0.1015, 0.0820,
         0.0379, 0.1016, 0.0308, 0.0786, 0.0177],
        [0.0732, 0.0977, 0.1594, 0.0995, 0.0470, 0.0276, 0.0487, 0.1027, 0.0877,
         0.0389, 0.0913, 0.0381, 0.0605, 0.0277],
        [0.0710, 0.0900, 0.1375, 0.1053, 0.0456, 0.0299, 0.0569, 0.1135, 0.0788,
         0.0407, 0.0809, 0.0396, 0.0878, 0.0226],
        [0.0652, 0.0793, 0.1732, 0.0927, 0.0417, 0.0226, 0.0471, 0.1136, 0.0927,
         0.0510, 0.0921, 0.0363, 0.0721, 0.0205],
        [0.0650, 0.0806, 0.1847, 0.0905, 0.0433, 0.0197, 0.0559, 0.0917, 0.0781,
         0.0480, 0.1001, 0.0397, 0.0894, 0.0133],
        [0.0898, 0.0801, 0.1431, 0.0931, 0.0495, 0.0245, 0.0539, 0.1127, 0.0836,
         0.0398, 0.0946, 0.0393, 0.0721, 0.0240],
        [0.0747, 0.0893, 0.1641, 0.0898, 0.0447, 0.0244, 0.0446, 0.1089, 0.0815,
         0.0402, 0.0993, 0.0343, 0.0765, 0.0277],
        [0.0625, 0.0819, 0.2082, 0.0961, 0.0424, 0.0211, 0.0506, 0.0788, 0.0882,
         0.0413, 0.1111, 0.0328, 0.0668, 0.0181],
        [0.0819, 0.0799, 0.1637, 0.0835, 0.0446, 0.0264, 0.0555, 0.0983, 0.0803,
         0.0488, 0.0916, 0.0419, 0.0799, 0.0236],
        [0.0710, 0.0789, 0.1411, 0.1163, 0.0548, 0.0207, 0.0476, 0.0987, 0.0844,
         0.0450, 0.1134, 0.0411, 0.0630, 0.0240]])