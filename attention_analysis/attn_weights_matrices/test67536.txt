67536
Test: public void testCustomEnumValueAndKeyViaModifier() throws IOException { SimpleModule module = new SimpleModule(); module.setDeserializerModifier(new BeanDeserializerModifier() { @Override public JsonDeserializer<Enum> modifyEnumDeserializer(DeserializationConfig config, final JavaType type, BeanDescription beanDesc, final JsonDeserializer<?> deserializer) { return new JsonDeserializer<Enum>() { @Override public Enum deserialize(JsonParser p, DeserializationContext ctxt) throws IOException { Class<? extends Enum> rawClass = (Class<Enum<?>>) type.getRawClass(); final String str = p.getValueAsString().toLowerCase(); return KeyEnum.valueOf(rawClass, str); } }; } @Override public KeyDeserializer modifyKeyDeserializer(DeserializationConfig config, final JavaType type, KeyDeserializer deserializer) { if (!type.isEnumType()) { return deserializer; } return new KeyDeserializer() { @Override public Object deserializeKey(String key, DeserializationContext ctxt) throws IOException { Class<? extends Enum> rawClass = (Class<Enum<?>>) type.getRawClass(); return Enum.valueOf(rawClass, key.toLowerCase()); } }; } }); ObjectMapper mapper = new ObjectMapper() .registerModule(module); KeyEnum key = mapper.readValue(quote(KeyEnum.replacements.name().toUpperCase()), KeyEnum.class); EnumMap<KeyEnum,String> map = mapper.readValue( aposToQuotes("{'REPlaceMENTS':'foobar'}"), new TypeReference<EnumMap<KeyEnum,String>>() { }); }
Code: public Object deserializeKey(String key, DeserializationContext ctxt){if (key == null) { return null;}try {Object result = _parse(key, ctxt);if (result != null) {return result;}} catch (Exception re) {return ctxt.handleWeirdKey(_keyClass, key, "not a valid representation, problem: (%s) %s",re.getClass().getName(),re.getMessage());}if (_keyClass.isEnum() && ctxt.getConfig().isEnabled(DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_AS_NULL)) {return null;}return ctxt.handleWeirdKey(_keyClass, key, "not a valid representation");}
tensor([[0.0149, 0.0115, 0.0327,  ..., 0.0219, 0.0071, 0.0129],
        [0.0137, 0.0093, 0.0418,  ..., 0.0198, 0.0072, 0.0119],
        [0.0111, 0.0096, 0.0402,  ..., 0.0223, 0.0069, 0.0121],
        ...,
        [0.0174, 0.0107, 0.0426,  ..., 0.0235, 0.0104, 0.0185],
        [0.0113, 0.0108, 0.0470,  ..., 0.0253, 0.0069, 0.0131],
        [0.0135, 0.0093, 0.0386,  ..., 0.0219, 0.0086, 0.0142]])