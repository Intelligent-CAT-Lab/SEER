17220
Test: public void testFunctionSubTypeRelationships() { FunctionType googBarMethod = new FunctionBuilder(registry) .withTypeOfThis(googBar).build(); FunctionType googBarParamFn = new FunctionBuilder(registry) .withParamsNode(registry.createParameters(googBar)).build(); FunctionType googBarReturnFn = new FunctionBuilder(registry) .withParamsNode(registry.createParameters()) .withReturnType(googBar).build(); FunctionType googSubBarMethod = new FunctionBuilder(registry) .withTypeOfThis(googSubBar).build(); FunctionType googSubBarParamFn = new FunctionBuilder(registry) .withParamsNode(registry.createParameters(googSubBar)).build(); FunctionType googSubBarReturnFn = new FunctionBuilder(registry) .withReturnType(googSubBar).build(); List<FunctionType> allFunctions = Lists.newArrayList( googBarMethod, googBarParamFn, googBarReturnFn, googSubBarMethod, googSubBarParamFn, googSubBarReturnFn); for (int i = 0; i < allFunctions.size(); i++) { for (int j = 0; j < allFunctions.size(); j++) { FunctionType typeA = allFunctions.get(i); FunctionType typeB = allFunctions.get(j); if (i == j) { } else { } } } }
Code: public FunctionBuilder withReturnType(JSType returnType, boolean inferred) { this.returnType = returnType; this.inferredReturnType = inferred; return this; }
tensor([[0.0520, 0.0333, 0.0632, 0.0837, 0.1199, 0.0425, 0.0789, 0.0730, 0.0333,
         0.1203, 0.0586, 0.0333, 0.0772, 0.0584, 0.0480, 0.0242],
        [0.0403, 0.0403, 0.0593, 0.1058, 0.1559, 0.0513, 0.0784, 0.0651, 0.0348,
         0.0959, 0.0457, 0.0348, 0.0852, 0.0589, 0.0317, 0.0167],
        [0.0417, 0.0275, 0.0679, 0.0995, 0.1579, 0.0383, 0.0769, 0.0727, 0.0290,
         0.1218, 0.0473, 0.0290, 0.0815, 0.0538, 0.0360, 0.0191],
        [0.0355, 0.0336, 0.0459, 0.0917, 0.1653, 0.0351, 0.0860, 0.0627, 0.0428,
         0.1108, 0.0458, 0.0428, 0.0799, 0.0637, 0.0412, 0.0173],
        [0.0375, 0.0330, 0.0579, 0.0961, 0.1837, 0.0398, 0.1009, 0.0593, 0.0295,
         0.1015, 0.0390, 0.0295, 0.0827, 0.0641, 0.0269, 0.0186],
        [0.0437, 0.0276, 0.0491, 0.1181, 0.1406, 0.0379, 0.1106, 0.0533, 0.0269,
         0.1298, 0.0502, 0.0269, 0.0756, 0.0587, 0.0351, 0.0158],
        [0.0525, 0.0263, 0.0740, 0.0965, 0.1105, 0.0589, 0.0888, 0.0515, 0.0439,
         0.0881, 0.0543, 0.0439, 0.0755, 0.0599, 0.0448, 0.0306],
        [0.0386, 0.0241, 0.0597, 0.0912, 0.1702, 0.0425, 0.0913, 0.0637, 0.0330,
         0.1119, 0.0473, 0.0330, 0.0792, 0.0581, 0.0338, 0.0222],
        [0.0540, 0.0323, 0.0842, 0.0758, 0.1058, 0.0639, 0.0650, 0.0691, 0.0459,
         0.0890, 0.0594, 0.0459, 0.0655, 0.0600, 0.0569, 0.0274],
        [0.0446, 0.0357, 0.0664, 0.0917, 0.1247, 0.0494, 0.0820, 0.0801, 0.0401,
         0.0953, 0.0483, 0.0401, 0.0768, 0.0736, 0.0342, 0.0168],
        [0.0456, 0.0238, 0.0465, 0.1031, 0.1817, 0.0333, 0.1005, 0.0603, 0.0248,
         0.0945, 0.0554, 0.0248, 0.0757, 0.0751, 0.0347, 0.0202],
        [0.0540, 0.0323, 0.0842, 0.0758, 0.1058, 0.0639, 0.0650, 0.0691, 0.0459,
         0.0890, 0.0594, 0.0459, 0.0655, 0.0600, 0.0569, 0.0274],
        [0.0446, 0.0286, 0.0665, 0.0966, 0.1434, 0.0416, 0.0904, 0.0672, 0.0340,
         0.1014, 0.0527, 0.0340, 0.0763, 0.0585, 0.0401, 0.0241],
        [0.0363, 0.0221, 0.0762, 0.1093, 0.1750, 0.0368, 0.0755, 0.0656, 0.0358,
         0.1065, 0.0421, 0.0358, 0.0767, 0.0520, 0.0339, 0.0205],
        [0.0545, 0.0286, 0.0727, 0.0924, 0.1276, 0.0497, 0.0909, 0.0684, 0.0319,
         0.0998, 0.0580, 0.0319, 0.0694, 0.0654, 0.0349, 0.0240],
        [0.0372, 0.0290, 0.0621, 0.0885, 0.1269, 0.0447, 0.0996, 0.0741, 0.0340,
         0.1022, 0.0487, 0.0340, 0.0793, 0.0823, 0.0361, 0.0212]])