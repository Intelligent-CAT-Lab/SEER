,method,test
0,"    public boolean process(final WeaveEnvironment environment, final Scanner scanner) {
        return new Normalizer(environment).normalize(scanner);
    }","  public void test0()  throws Throwable  {
      NormalizerWeaver normalizerWeaver0 = new NormalizerWeaver();
      WeaveEnvironment weaveEnvironment0 = mock(WeaveEnvironment.class, new ViolatedAssumptionAnswer());
      Scanner scanner0 = mock(Scanner.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        normalizerWeaver0.process(weaveEnvironment0, scanner0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.weaver.normalizer.Normalizer"", e);
      }
  }"
1,"    static Set<Class<?>> parseTypes(final String types, final ClassLoader classLoader) {
        final Set<Class<?>> result = new LinkedHashSet<>();
        for (final String token : StringUtils.splitByWholeSeparatorPreserveAllTokens(types, "","")) {
            try {
                result.add(ClassUtils.getClass(classLoader, token.trim().replace('/', '.')));
            } catch (final ClassNotFoundException e) {
                throw new IllegalArgumentException(e);
            }
        }
        return result;
    }","  public void test0()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      // Undeclared exception!
      try { 
        Utils.parseTypes("","", classLoader0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // java.lang.ClassNotFoundException: 
         //
         verifyException(""org.apache.commons.weaver.normalizer.Utils"", e);
      }
  }"
2,"    static String validatePackageName(final String pkg) {
        if (StringUtils.isBlank(pkg)) {
            return """";
        }
        String result = pkg.trim();

        final String unexpected = ""Unexpected character %s at pos %s of package name \""%s\"""";

        boolean next = true;
        for (int pos = 0; pos < result.length(); pos++) {
            final char chr = result.charAt(pos);
            if (next) {
                next = false;
                Validate.isTrue(Character.isJavaIdentifierStart(chr), unexpected, chr, pos, result);
                continue;
            }
            if (chr == '/' || chr == '.') {
                next = true;
                continue;
            }
            Validate.isTrue(Character.isJavaIdentifierPart(chr), unexpected, chr, pos, result);
        }
        result = result.replace('.', '/');
        final int last = result.length() - 1;
        if (result.charAt(last) == '/') {
            result = result.substring(0, last);
        }
        return result;
    }","  public void test1()  throws Throwable  {
      String string0 = Utils.validatePackageName("" vs "");
}"
3,"    static Set<Class<?>> parseTypes(final String types, final ClassLoader classLoader) {
        final Set<Class<?>> result = new LinkedHashSet<>();
        for (final String token : StringUtils.splitByWholeSeparatorPreserveAllTokens(types, "","")) {
            try {
                result.add(ClassUtils.getClass(classLoader, token.trim().replace('/', '.')));
            } catch (final ClassNotFoundException e) {
                throw new IllegalArgumentException(e);
            }
        }
        return result;
    }","  public void test2()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Set<Class<?>> set0 = Utils.parseTypes("""", classLoader0);
}"
4,"    static String validatePackageName(final String pkg) {
        if (StringUtils.isBlank(pkg)) {
            return """";
        }
        String result = pkg.trim();

        final String unexpected = ""Unexpected character %s at pos %s of package name \""%s\"""";

        boolean next = true;
        for (int pos = 0; pos < result.length(); pos++) {
            final char chr = result.charAt(pos);
            if (next) {
                next = false;
                Validate.isTrue(Character.isJavaIdentifierStart(chr), unexpected, chr, pos, result);
                continue;
            }
            if (chr == '/' || chr == '.') {
                next = true;
                continue;
            }
            Validate.isTrue(Character.isJavaIdentifierPart(chr), unexpected, chr, pos, result);
        }
        result = result.replace('.', '/');
        final int last = result.length() - 1;
        if (result.charAt(last) == '/') {
            result = result.substring(0, last);
        }
        return result;
    }","  public void test3()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utils.validatePackageName(""Array and element cannot both be null"");
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Unexpected character   at pos 5 of package name \""Array and element cannot both be null\""
         //
         verifyException(""org.apache.commons.lang3.Validate"", e);
      }
  }"
5,"    static Set<Class<?>> parseTypes(final String types, final ClassLoader classLoader) {
        final Set<Class<?>> result = new LinkedHashSet<>();
        for (final String token : StringUtils.splitByWholeSeparatorPreserveAllTokens(types, "","")) {
            try {
                result.add(ClassUtils.getClass(classLoader, token.trim().replace('/', '.')));
            } catch (final ClassNotFoundException e) {
                throw new IllegalArgumentException(e);
            }
        }
        return result;
    }","  public void test4()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      // Undeclared exception!
      try { 
        Utils.parseTypes((String) null, classLoader0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.weaver.normalizer.Utils"", e);
      }
  }"
6,"    static Set<Class<?>> parseTypes(final String types, final ClassLoader classLoader) {
        final Set<Class<?>> result = new LinkedHashSet<>();
        for (final String token : StringUtils.splitByWholeSeparatorPreserveAllTokens(types, "","")) {
            try {
                result.add(ClassUtils.getClass(classLoader, token.trim().replace('/', '.')));
            } catch (final ClassNotFoundException e) {
                throw new IllegalArgumentException(e);
            }
        }
        return result;
    }","  public void test5()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Set<Class<?>> set0 = Utils.parseTypes(""byte"", classLoader0);
}"
7,"    static String validatePackageName(final String pkg) {
        if (StringUtils.isBlank(pkg)) {
            return """";
        }
        String result = pkg.trim();

        final String unexpected = ""Unexpected character %s at pos %s of package name \""%s\"""";

        boolean next = true;
        for (int pos = 0; pos < result.length(); pos++) {
            final char chr = result.charAt(pos);
            if (next) {
                next = false;
                Validate.isTrue(Character.isJavaIdentifierStart(chr), unexpected, chr, pos, result);
                continue;
            }
            if (chr == '/' || chr == '.') {
                next = true;
                continue;
            }
            Validate.isTrue(Character.isJavaIdentifierPart(chr), unexpected, chr, pos, result);
        }
        result = result.replace('.', '/');
        final int last = result.length() - 1;
        if (result.charAt(last) == '/') {
            result = result.substring(0, last);
        }
        return result;
    }","  public void test6()  throws Throwable  {
      String string0 = Utils.validatePackageName("""");
}"
8,"    static String validatePackageName(final String pkg) {
        if (StringUtils.isBlank(pkg)) {
            return """";
        }
        String result = pkg.trim();

        final String unexpected = ""Unexpected character %s at pos %s of package name \""%s\"""";

        boolean next = true;
        for (int pos = 0; pos < result.length(); pos++) {
            final char chr = result.charAt(pos);
            if (next) {
                next = false;
                Validate.isTrue(Character.isJavaIdentifierStart(chr), unexpected, chr, pos, result);
                continue;
            }
            if (chr == '/' || chr == '.') {
                next = true;
                continue;
            }
            Validate.isTrue(Character.isJavaIdentifierPart(chr), unexpected, chr, pos, result);
        }
        result = result.replace('.', '/');
        final int last = result.length() - 1;
        if (result.charAt(last) == '/') {
            result = result.substring(0, last);
        }
        return result;
    }","  public void test7()  throws Throwable  {
      String string0 = Utils.validatePackageName(""g.Q/"");
}"
9,"    public boolean process(final WeaveEnvironment weaveEnvironment, final Scanner scanner) {
        final Privilizer privilizer = new Privilizer(weaveEnvironment);

        final Set<Class<?>> privilizedTypes = new LinkedHashSet<>();

        // handle blueprints:
        for (final WeavableClass<?> type : scanner.scan(
            new ScanRequest().add(WeaveInterest.of(Privilizing.class, ElementType.TYPE))).getClasses()) {

            final Class<?> target = type.getTarget();
            if (privilizedTypes.add(target) && validateRequest(privilizer, type)) {
                privilizer.blueprint(target, type.getAnnotation(Privilizing.class));
            }
        }

        // handle remaining classes declaring @Privileged methods:

        for (final WeavableClass<?> type : scanner.scan(
            new ScanRequest().add(WeaveInterest.of(Privileged.class, ElementType.METHOD))).getClasses()) {
            final Class<?> target = type.getTarget();
            if (privilizedTypes.add(target) && validateRequest(privilizer, type)) {
                privilizer.privilize(target);
            }
        }
        return !privilizedTypes.isEmpty();
    }","  public void test0()  throws Throwable  {
      PrivilizerWeaver privilizerWeaver0 = new PrivilizerWeaver();
      Scanner scanner0 = mock(Scanner.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        privilizerWeaver0.process((WeaveEnvironment) null, scanner0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.weaver.privilizer.Privilizer"", e);
      }
  }"
10,"    static Type wrap(final Type type) {
        switch (type.getSort()) {
        case Type.BOOLEAN:
            return Type.getType(Boolean.class);
        case Type.BYTE:
            return Type.getType(Byte.class);
        case Type.SHORT:
            return Type.getType(Short.class);
        case Type.INT:
            return Type.getType(Integer.class);
        case Type.CHAR:
            return Type.getType(Character.class);
        case Type.LONG:
            return Type.getType(Long.class);
        case Type.FLOAT:
            return Type.getType(Float.class);
        case Type.DOUBLE:
            return Type.getType(Double.class);
        case Type.VOID:
            return Type.getType(Void.class);
        default:
            return type;
        }
    }","  public void test0()  throws Throwable  {
      // Undeclared exception!
      try { 
        Privilizer.wrap((Type) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.weaver.privilizer.Privilizer"", e);
      }
  }"
11,"    static Type wrap(final Type type) {
        switch (type.getSort()) {
        case Type.BOOLEAN:
            return Type.getType(Boolean.class);
        case Type.BYTE:
            return Type.getType(Byte.class);
        case Type.SHORT:
            return Type.getType(Short.class);
        case Type.INT:
            return Type.getType(Integer.class);
        case Type.CHAR:
            return Type.getType(Character.class);
        case Type.LONG:
            return Type.getType(Long.class);
        case Type.FLOAT:
            return Type.getType(Float.class);
        case Type.DOUBLE:
            return Type.getType(Double.class);
        case Type.VOID:
            return Type.getType(Void.class);
        default:
            return type;
        }
    }","  public void test1()  throws Throwable  {
      Type type0 = Type.DOUBLE_TYPE;
      Type type1 = Privilizer.wrap(type0);
}"
12,"    static Type wrap(final Type type) {
        switch (type.getSort()) {
        case Type.BOOLEAN:
            return Type.getType(Boolean.class);
        case Type.BYTE:
            return Type.getType(Byte.class);
        case Type.SHORT:
            return Type.getType(Short.class);
        case Type.INT:
            return Type.getType(Integer.class);
        case Type.CHAR:
            return Type.getType(Character.class);
        case Type.LONG:
            return Type.getType(Long.class);
        case Type.FLOAT:
            return Type.getType(Float.class);
        case Type.DOUBLE:
            return Type.getType(Double.class);
        case Type.VOID:
            return Type.getType(Void.class);
        default:
            return type;
        }
    }","  public void test2()  throws Throwable  {
      Type type0 = Type.LONG_TYPE;
      Type type1 = Privilizer.wrap(type0);
}"
13,"    static Type wrap(final Type type) {
        switch (type.getSort()) {
        case Type.BOOLEAN:
            return Type.getType(Boolean.class);
        case Type.BYTE:
            return Type.getType(Byte.class);
        case Type.SHORT:
            return Type.getType(Short.class);
        case Type.INT:
            return Type.getType(Integer.class);
        case Type.CHAR:
            return Type.getType(Character.class);
        case Type.LONG:
            return Type.getType(Long.class);
        case Type.FLOAT:
            return Type.getType(Float.class);
        case Type.DOUBLE:
            return Type.getType(Double.class);
        case Type.VOID:
            return Type.getType(Void.class);
        default:
            return type;
        }
    }","  public void test3()  throws Throwable  {
      Type type0 = Type.FLOAT_TYPE;
      Type type1 = Privilizer.wrap(type0);
}"
14,"    static Type wrap(final Type type) {
        switch (type.getSort()) {
        case Type.BOOLEAN:
            return Type.getType(Boolean.class);
        case Type.BYTE:
            return Type.getType(Byte.class);
        case Type.SHORT:
            return Type.getType(Short.class);
        case Type.INT:
            return Type.getType(Integer.class);
        case Type.CHAR:
            return Type.getType(Character.class);
        case Type.LONG:
            return Type.getType(Long.class);
        case Type.FLOAT:
            return Type.getType(Float.class);
        case Type.DOUBLE:
            return Type.getType(Double.class);
        case Type.VOID:
            return Type.getType(Void.class);
        default:
            return type;
        }
    }","  public void test4()  throws Throwable  {
      Type type0 = Type.INT_TYPE;
      Type type1 = Privilizer.wrap(type0);
      Type type2 = Privilizer.wrap(type1);
}"
15,"    static Type wrap(final Type type) {
        switch (type.getSort()) {
        case Type.BOOLEAN:
            return Type.getType(Boolean.class);
        case Type.BYTE:
            return Type.getType(Byte.class);
        case Type.SHORT:
            return Type.getType(Short.class);
        case Type.INT:
            return Type.getType(Integer.class);
        case Type.CHAR:
            return Type.getType(Character.class);
        case Type.LONG:
            return Type.getType(Long.class);
        case Type.FLOAT:
            return Type.getType(Float.class);
        case Type.DOUBLE:
            return Type.getType(Double.class);
        case Type.VOID:
            return Type.getType(Void.class);
        default:
            return type;
        }
    }","  public void test5()  throws Throwable  {
      Type type0 = Type.BYTE_TYPE;
      Type type1 = Privilizer.wrap(type0);
}"
16,"    static Type wrap(final Type type) {
        switch (type.getSort()) {
        case Type.BOOLEAN:
            return Type.getType(Boolean.class);
        case Type.BYTE:
            return Type.getType(Byte.class);
        case Type.SHORT:
            return Type.getType(Short.class);
        case Type.INT:
            return Type.getType(Integer.class);
        case Type.CHAR:
            return Type.getType(Character.class);
        case Type.LONG:
            return Type.getType(Long.class);
        case Type.FLOAT:
            return Type.getType(Float.class);
        case Type.DOUBLE:
            return Type.getType(Double.class);
        case Type.VOID:
            return Type.getType(Void.class);
        default:
            return type;
        }
    }","  public void test6()  throws Throwable  {
      Type type0 = Type.CHAR_TYPE;
      Type type1 = Privilizer.wrap(type0);
}"
17,"    static Type wrap(final Type type) {
        switch (type.getSort()) {
        case Type.BOOLEAN:
            return Type.getType(Boolean.class);
        case Type.BYTE:
            return Type.getType(Byte.class);
        case Type.SHORT:
            return Type.getType(Short.class);
        case Type.INT:
            return Type.getType(Integer.class);
        case Type.CHAR:
            return Type.getType(Character.class);
        case Type.LONG:
            return Type.getType(Long.class);
        case Type.FLOAT:
            return Type.getType(Float.class);
        case Type.DOUBLE:
            return Type.getType(Double.class);
        case Type.VOID:
            return Type.getType(Void.class);
        default:
            return type;
        }
    }","  public void test7()  throws Throwable  {
      Type type0 = Type.BOOLEAN_TYPE;
      Type type1 = Privilizer.wrap(type0);
}"
18,"    static Type wrap(final Type type) {
        switch (type.getSort()) {
        case Type.BOOLEAN:
            return Type.getType(Boolean.class);
        case Type.BYTE:
            return Type.getType(Byte.class);
        case Type.SHORT:
            return Type.getType(Short.class);
        case Type.INT:
            return Type.getType(Integer.class);
        case Type.CHAR:
            return Type.getType(Character.class);
        case Type.LONG:
            return Type.getType(Long.class);
        case Type.FLOAT:
            return Type.getType(Float.class);
        case Type.DOUBLE:
            return Type.getType(Double.class);
        case Type.VOID:
            return Type.getType(Void.class);
        default:
            return type;
        }
    }","  public void test8()  throws Throwable  {
      Type type0 = Type.SHORT_TYPE;
      Type type1 = Privilizer.wrap(type0);
}"
19,"    static Type wrap(final Type type) {
        switch (type.getSort()) {
        case Type.BOOLEAN:
            return Type.getType(Boolean.class);
        case Type.BYTE:
            return Type.getType(Byte.class);
        case Type.SHORT:
            return Type.getType(Short.class);
        case Type.INT:
            return Type.getType(Integer.class);
        case Type.CHAR:
            return Type.getType(Character.class);
        case Type.LONG:
            return Type.getType(Long.class);
        case Type.FLOAT:
            return Type.getType(Float.class);
        case Type.DOUBLE:
            return Type.getType(Double.class);
        case Type.VOID:
            return Type.getType(Void.class);
        default:
            return type;
        }
    }","  public void test9()  throws Throwable  {
      Type type0 = Type.VOID_TYPE;
      Type type1 = Privilizer.wrap(type0);
}"
20,"    public Privilizer(final WeaveEnvironment env) {
        super();
        this.env = env;
        this.policy = Policy.parse(env.config.getProperty(CONFIG_POLICY));
        this.accessLevel = AccessLevel.parse(env.config.getProperty(CONFIG_ACCESS_LEVEL));
        verify = BooleanUtils.toBoolean(env.config.getProperty(CONFIG_VERIFY));
    }","  public void test10()  throws Throwable  {
      WeaveEnvironment weaveEnvironment0 = mock(WeaveEnvironment.class, new ViolatedAssumptionAnswer());
      Privilizer privilizer0 = null;
      try {
        privilizer0 = new Privilizer(weaveEnvironment0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.weaver.privilizer.Privilizer"", e);
      }
  }"
21,"    public void visitEnd() {
        super.visitEnd();
        accept(new VisitEnd());
    }","  public void test0()  throws Throwable  {
      HashMap<Method, String> hashMap0 = new HashMap<Method, String>();
      InlineNestedPrivilegedCalls inlineNestedPrivilegedCalls0 = new InlineNestedPrivilegedCalls((Privilizer) null, hashMap0, (ClassVisitor) null);
      String[] stringArray0 = new String[7];
      inlineNestedPrivilegedCalls0.visitMethod(393216, (String) null, """", ""byte"", stringArray0);
      inlineNestedPrivilegedCalls0.visitEnd();
}"
22,"    public void visitEnd() {
        super.visitEnd();
        accept(new VisitEnd());
    }","  public void test1()  throws Throwable  {
      HashMap<Method, String> hashMap0 = new HashMap<Method, String>();
      InlineNestedPrivilegedCalls inlineNestedPrivilegedCalls0 = new InlineNestedPrivilegedCalls((Privilizer) null, hashMap0, (ClassVisitor) null);
      inlineNestedPrivilegedCalls0.visitNestHostExperimental(""PACKAGE"");
      // Undeclared exception!
      try { 
        inlineNestedPrivilegedCalls0.visitEnd();
        fail(""Expecting exception: UnsupportedOperationException"");
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.objectweb.asm.ClassVisitor"", e);
      }
  }"
23,"    public void visitEnd() {
        super.visitEnd();
        accept(new VisitEnd());
    }","  public void test2()  throws Throwable  {
      HashMap<Method, String> hashMap0 = new HashMap<Method, String>();
      InlineNestedPrivilegedCalls inlineNestedPrivilegedCalls0 = new InlineNestedPrivilegedCalls((Privilizer) null, hashMap0, (ClassVisitor) null);
      String[] stringArray0 = new String[15];
      String string0 = hashMap0.put((Method) null, (String) null);
      inlineNestedPrivilegedCalls0.visitMethod(0, string0, string0, (String) null, stringArray0);
      inlineNestedPrivilegedCalls0.visitEnd();
}"
24,"    public void visitEnd() {
        super.visitEnd();
        accept(new VisitEnd());
    }","  public void test3()  throws Throwable  {
      HashMap<Method, String> hashMap0 = new HashMap<Method, String>();
      ClassWriter classWriter0 = new ClassWriter((-1416));
      InlineNestedPrivilegedCalls inlineNestedPrivilegedCalls0 = new InlineNestedPrivilegedCalls((Privilizer) null, hashMap0, classWriter0);
      // Undeclared exception!
      try { 
        inlineNestedPrivilegedCalls0.visitEnd();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.objectweb.asm.SymbolTable"", e);
      }
  }"
25,"    ActionGenerator(final int access, final Method methd, final String[] exceptions, final PrivilizingVisitor owner) {
        owner.privilizer().super(ClassWriter.COMPUTE_MAXS | ClassWriter.COMPUTE_FRAMES);
        this.methd = methd;
        this.exc = ArrayUtils.isNotEmpty(exceptions);
        this.exceptions = exc ? new Type[] { Type.getType(Exception.class) } : null;
        this.owner = owner;
        this.simpleName = generateName(methd);
        this.action = Type.getObjectType(owner.className + '$' + simpleName);

        int privilegedAccessIndex = -1;
        String implName = null;
        for (final Map.Entry<Method, String> entry : owner.privilegedMethods.entrySet()) {
            privilegedAccessIndex++;
            if (entry.getKey().equals(methd)) {
                implName = entry.getValue();
                break;
            }
        }
        Validate.validState(implName != null);

        this.index = privilegedAccessIndex;

        this.impl = new Method(implName, methd.getDescriptor());
        this.implIsStatic = Modifier.isStatic(access);
        final Type[] args =
            implIsStatic ? methd.getArgumentTypes() : ArrayUtils.insert(0, methd.getArgumentTypes(), owner.target);
        this.helper = new Method(privilizer().generateName(""access$"" + index), methd.getReturnType(), args);
        this.result = Privilizer.wrap(methd.getReturnType());
        this.fields = fields(args);
        this.actionInterface = Type.getType(exc ? PrivilegedExceptionAction.class : PrivilegedAction.class);
    }","  public void test0()  throws Throwable  {
      ActionGenerator actionGenerator0 = null;
      try {
        actionGenerator0 = new ActionGenerator((-1891), (Method) null, (String[]) null, (PrivilizingVisitor) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.weaver.privilizer.ActionGenerator"", e);
      }
  }"
26,"    public Field(final int access, final String name, final Type type) {
        super();
        this.access = access;
        this.name = Validate.notNull(name);
        this.type = Validate.notNull(type);
    }","  public void test0()  throws Throwable  {
      Type type0 = Type.BYTE_TYPE;
      Field field0 = null;
      try {
        field0 = new Field((-5938), (String) null, type0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // The validated object is null
         //
         verifyException(""org.apache.commons.lang3.Validate"", e);
      }
  }"
27,"    public boolean equals(final Object obj) {
        if (obj == this) {
            return true;
        }
        if (!(obj instanceof Field)) {
            return false;
        }
        final Field other = (Field) obj;
        return StringUtils.equals(other.name, name) && Objects.equals(other.type, type);
    }","  public void test1()  throws Throwable  {
      Type type0 = Type.FLOAT_TYPE;
      Field field0 = new Field(0, """", type0);
      Class<Type> class0 = Type.class;
      Type type1 = Type.getType(class0);
      Field field1 = new Field(6, """", type1);
      boolean boolean0 = field0.equals(field1);
}"
28,"    public boolean equals(final Object obj) {
        if (obj == this) {
            return true;
        }
        if (!(obj instanceof Field)) {
            return false;
        }
        final Field other = (Field) obj;
        return StringUtils.equals(other.name, name) && Objects.equals(other.type, type);
    }","  public void test2()  throws Throwable  {
      Type type0 = Type.FLOAT_TYPE;
      Field field0 = new Field(0, """", type0);
      Class<Type> class0 = Type.class;
      Type type1 = Type.getType(class0);
      Field field1 = new Field(6, """", type1);
      boolean boolean0 = field0.equals(field1);
}"
29,"    public boolean equals(final Object obj) {
        if (obj == this) {
            return true;
        }
        if (!(obj instanceof Field)) {
            return false;
        }
        final Field other = (Field) obj;
        return StringUtils.equals(other.name, name) && Objects.equals(other.type, type);
    }","  public void test3()  throws Throwable  {
      Type type0 = Type.BOOLEAN_TYPE;
      Field field0 = new Field(1, """", type0);
      Field field1 = new Field(4, ""A%8.>omSmEf"", type0);
      boolean boolean0 = field0.equals(field1);
}"
30,"    public boolean equals(final Object obj) {
        if (obj == this) {
            return true;
        }
        if (!(obj instanceof Field)) {
            return false;
        }
        final Field other = (Field) obj;
        return StringUtils.equals(other.name, name) && Objects.equals(other.type, type);
    }","  public void test4()  throws Throwable  {
      Type type0 = Type.BOOLEAN_TYPE;
      Field field0 = new Field(1, """", type0);
      Field field1 = new Field(4, ""A%8.>omSmEf"", type0);
      boolean boolean0 = field0.equals(field1);
}"
31,"    public boolean equals(final Object obj) {
        if (obj == this) {
            return true;
        }
        if (!(obj instanceof Field)) {
            return false;
        }
        final Field other = (Field) obj;
        return StringUtils.equals(other.name, name) && Objects.equals(other.type, type);
    }","  public void test5()  throws Throwable  {
      Type type0 = Type.BOOLEAN_TYPE;
      Field field0 = new Field(1, """", type0);
      Field field1 = new Field(8, """", type0);
      boolean boolean0 = field0.equals(field1);
}"
32,"    public boolean equals(final Object obj) {
        if (obj == this) {
            return true;
        }
        if (!(obj instanceof Field)) {
            return false;
        }
        final Field other = (Field) obj;
        return StringUtils.equals(other.name, name) && Objects.equals(other.type, type);
    }","  public void test6()  throws Throwable  {
      Type type0 = Type.BOOLEAN_TYPE;
      Field field0 = new Field(1, """", type0);
      Field field1 = new Field(8, """", type0);
      boolean boolean0 = field0.equals(field1);
}"
33,"    public boolean equals(final Object obj) {
        if (obj == this) {
            return true;
        }
        if (!(obj instanceof Field)) {
            return false;
        }
        final Field other = (Field) obj;
        return StringUtils.equals(other.name, name) && Objects.equals(other.type, type);
    }","  public void test7()  throws Throwable  {
      Type type0 = Type.BOOLEAN_TYPE;
      Field field0 = new Field(1, """", type0);
      boolean boolean0 = field0.equals(field0);
}"
34,"    public boolean equals(final Object obj) {
        if (obj == this) {
            return true;
        }
        if (!(obj instanceof Field)) {
            return false;
        }
        final Field other = (Field) obj;
        return StringUtils.equals(other.name, name) && Objects.equals(other.type, type);
    }","  public void test8()  throws Throwable  {
      Type type0 = Type.BOOLEAN_TYPE;
      Field field0 = new Field(1, """", type0);
      boolean boolean0 = field0.equals(field0);
}"
35,"    public boolean equals(final Object obj) {
        if (obj == this) {
            return true;
        }
        if (!(obj instanceof Field)) {
            return false;
        }
        final Field other = (Field) obj;
        return StringUtils.equals(other.name, name) && Objects.equals(other.type, type);
    }","  public void test9()  throws Throwable  {
      Type type0 = Type.BOOLEAN_TYPE;
      Field field0 = new Field(1, """", type0);
      boolean boolean0 = field0.equals((Object) null);
}"
36,"    public boolean equals(final Object obj) {
        if (obj == this) {
            return true;
        }
        if (!(obj instanceof Field)) {
            return false;
        }
        final Field other = (Field) obj;
        return StringUtils.equals(other.name, name) && Objects.equals(other.type, type);
    }","  public void test10()  throws Throwable  {
      Type type0 = Type.BOOLEAN_TYPE;
      Field field0 = new Field(1, """", type0);
      boolean boolean0 = field0.equals((Object) null);
}"
37,"    public int hashCode() {
        return Objects.hash(name, type);
    }","  public void test11()  throws Throwable  {
      Type type0 = Type.BOOLEAN_TYPE;
      Field field0 = new Field(1, """", type0);
      field0.hashCode();
}"
38,"    public boolean equals(final Object obj) {
        if (obj == this) {
            return true;
        }
        if (!(obj instanceof FieldAccess)) {
            return false;
        }
        return super.equals(obj) && ((FieldAccess) obj).owner.equals(owner);
    }","  public void test0()  throws Throwable  {
      Type type0 = Type.BOOLEAN_TYPE;
      Type[] typeArray0 = new Type[5];
      typeArray0[0] = type0;
      typeArray0[1] = typeArray0[0];
      typeArray0[2] = type0;
      typeArray0[3] = type0;
      typeArray0[4] = type0;
      Type type1 = Type.getMethodType(type0, typeArray0);
      FieldAccess fieldAccess0 = new FieldAccess(0, type1, ""@fP[D@\""le,B=~xrf`"", type0);
      FieldAccess fieldAccess1 = new FieldAccess((-3161), type0, ""@fP[D@\""le,B=~xrf`"", type0);
      boolean boolean0 = fieldAccess0.equals(fieldAccess1);
}"
39,"    public boolean equals(final Object obj) {
        if (obj == this) {
            return true;
        }
        if (!(obj instanceof FieldAccess)) {
            return false;
        }
        return super.equals(obj) && ((FieldAccess) obj).owner.equals(owner);
    }","  public void test1()  throws Throwable  {
      Type type0 = Type.BOOLEAN_TYPE;
      Type[] typeArray0 = new Type[5];
      typeArray0[0] = type0;
      typeArray0[1] = typeArray0[0];
      typeArray0[2] = type0;
      typeArray0[3] = type0;
      typeArray0[4] = type0;
      Type type1 = Type.getMethodType(type0, typeArray0);
      FieldAccess fieldAccess0 = new FieldAccess(0, type1, ""@fP[D@\""le,B=~xrf`"", type0);
      FieldAccess fieldAccess1 = new FieldAccess((-3161), type0, ""@fP[D@\""le,B=~xrf`"", type0);
      boolean boolean0 = fieldAccess0.equals(fieldAccess1);
}"
40,"    public int hashCode() {
        final int result = super.hashCode() << 4;
        return result | owner.hashCode();
    }","  public void test2()  throws Throwable  {
      Type type0 = Type.BYTE_TYPE;
      FieldAccess fieldAccess0 = new FieldAccess(0, type0, "")V"", type0);
      fieldAccess0.hashCode();
  }"
41,"    public boolean equals(final Object obj) {
        if (obj == this) {
            return true;
        }
        if (!(obj instanceof FieldAccess)) {
            return false;
        }
        return super.equals(obj) && ((FieldAccess) obj).owner.equals(owner);
    }","  public void test3()  throws Throwable  {
      Type type0 = Type.getMethodType(""-"");
      FieldAccess fieldAccess0 = new FieldAccess((-2085), type0, ""-"", type0);
      Type[] typeArray0 = new Type[1];
      typeArray0[0] = fieldAccess0.owner;
      Type type1 = Type.getMethodType(fieldAccess0.owner, typeArray0);
      FieldAccess fieldAccess1 = new FieldAccess(2, type1, ""-"", fieldAccess0.type);
      boolean boolean0 = fieldAccess0.equals(fieldAccess1);
}"
42,"    public boolean equals(final Object obj) {
        if (obj == this) {
            return true;
        }
        if (!(obj instanceof FieldAccess)) {
            return false;
        }
        return super.equals(obj) && ((FieldAccess) obj).owner.equals(owner);
    }","  public void test4()  throws Throwable  {
      Type type0 = Type.getMethodType(""-"");
      FieldAccess fieldAccess0 = new FieldAccess((-2085), type0, ""-"", type0);
      Type[] typeArray0 = new Type[1];
      typeArray0[0] = fieldAccess0.owner;
      Type type1 = Type.getMethodType(fieldAccess0.owner, typeArray0);
      FieldAccess fieldAccess1 = new FieldAccess(2, type1, ""-"", fieldAccess0.type);
      boolean boolean0 = fieldAccess0.equals(fieldAccess1);
}"
43,"    public boolean equals(final Object obj) {
        if (obj == this) {
            return true;
        }
        if (!(obj instanceof FieldAccess)) {
            return false;
        }
        return super.equals(obj) && ((FieldAccess) obj).owner.equals(owner);
    }","  public void test5()  throws Throwable  {
      Type type0 = Type.BYTE_TYPE;
      FieldAccess fieldAccess0 = new FieldAccess(0, type0, "")V"", type0);
      FieldAccess fieldAccess1 = new FieldAccess(2, fieldAccess0.owner, ""int"", fieldAccess0.owner);
      FieldAccess fieldAccess2 = new FieldAccess(7, fieldAccess0.type, ""int"", type0);
      boolean boolean0 = fieldAccess1.equals(fieldAccess2);
}"
44,"    public boolean equals(final Object obj) {
        if (obj == this) {
            return true;
        }
        if (!(obj instanceof FieldAccess)) {
            return false;
        }
        return super.equals(obj) && ((FieldAccess) obj).owner.equals(owner);
    }","  public void test6()  throws Throwable  {
      Type type0 = Type.BYTE_TYPE;
      FieldAccess fieldAccess0 = new FieldAccess(0, type0, "")V"", type0);
      FieldAccess fieldAccess1 = new FieldAccess(2, fieldAccess0.owner, ""int"", fieldAccess0.owner);
      FieldAccess fieldAccess2 = new FieldAccess(7, fieldAccess0.type, ""int"", type0);
      boolean boolean0 = fieldAccess1.equals(fieldAccess2);
}"
45,"    public boolean equals(final Object obj) {
        if (obj == this) {
            return true;
        }
        if (!(obj instanceof FieldAccess)) {
            return false;
        }
        return super.equals(obj) && ((FieldAccess) obj).owner.equals(owner);
    }","  public void test7()  throws Throwable  {
      Type type0 = Type.BYTE_TYPE;
      FieldAccess fieldAccess0 = new FieldAccess(0, type0, "")V"", type0);
      FieldAccess fieldAccess1 = new FieldAccess(2, fieldAccess0.owner, ""int"", fieldAccess0.owner);
      boolean boolean0 = fieldAccess0.equals(fieldAccess1);
}"
46,"    public boolean equals(final Object obj) {
        if (obj == this) {
            return true;
        }
        if (!(obj instanceof FieldAccess)) {
            return false;
        }
        return super.equals(obj) && ((FieldAccess) obj).owner.equals(owner);
    }","  public void test8()  throws Throwable  {
      Type type0 = Type.BYTE_TYPE;
      FieldAccess fieldAccess0 = new FieldAccess(0, type0, "")V"", type0);
      boolean boolean0 = fieldAccess0.equals(fieldAccess0);
}"
47,"    public boolean equals(final Object obj) {
        if (obj == this) {
            return true;
        }
        if (!(obj instanceof FieldAccess)) {
            return false;
        }
        return super.equals(obj) && ((FieldAccess) obj).owner.equals(owner);
    }","  public void test9()  throws Throwable  {
      Type type0 = Type.BYTE_TYPE;
      FieldAccess fieldAccess0 = new FieldAccess(0, type0, "")V"", type0);
      boolean boolean0 = fieldAccess0.equals(type0);
}"
48,"    public int hashCode() {
        final int result = super.hashCode() << 4;
        return result | owner.hashCode();
    }","  public void test10()  throws Throwable  {
      Type type0 = Type.DOUBLE_TYPE;
      FieldAccess fieldAccess0 = new FieldAccess(1, (Type) null, ""Kd.J"", type0);
      // Undeclared exception!
      try { 
        fieldAccess0.hashCode();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.weaver.privilizer.FieldAccess"", e);
      }
  }"
49,"    public FieldAccess(final int access, final Type owner, final String name, final Type type) {
        super(access, name, type);
        this.owner = owner;
    }","  public void test11()  throws Throwable  {
      FieldAccess fieldAccess0 = null;
      try {
        fieldAccess0 = new FieldAccess((-1), (Type) null, ""A!|jS2FGI\""#9W,\"""", (Type) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // The validated object is null
         //
         verifyException(""org.apache.commons.lang3.Validate"", e);
      }
  }"
50,,"  public void test0()  throws Throwable  {
      Policy[] policyArray0 = Policy.values();
}"
51,"    public boolean isConditional() {
        return this == ON_INIT || this == DYNAMIC;
    }","  public void test1()  throws Throwable  {
      Policy policy0 = Policy.valueOf(""ON_INIT"");
}"
52,,"  public void test2()  throws Throwable  {
      Policy policy0 = Policy.valueOf(""ALWAYS"");
}"
53,"    public boolean isConditional() {
        return this == ON_INIT || this == DYNAMIC;
    }","  public void test3()  throws Throwable  {
      Policy policy0 = Policy.parse(""ALWAYS"");
}"
54,"    public static Policy defaultValue() {
        return DYNAMIC;
    }","  public void test4()  throws Throwable  {
      Policy policy0 = Policy.defaultValue();
}"
55,"    public boolean isConditional() {
        return this == ON_INIT || this == DYNAMIC;
    }","  public void test5()  throws Throwable  {
      Policy policy0 = Policy.NEVER;
      boolean boolean0 = policy0.isConditional();
}"
56,"    public boolean isConditional() {
        return this == ON_INIT || this == DYNAMIC;
    }","  public void test6()  throws Throwable  {
      Policy policy0 = Policy.ON_INIT;
      boolean boolean0 = policy0.isConditional();
}"
57,"    public boolean isConditional() {
        return this == ON_INIT || this == DYNAMIC;
    }","  public void test7()  throws Throwable  {
      Policy policy0 = Policy.parse("""");
      boolean boolean0 = policy0.isConditional();
}"
58,"    static Pair<Type, Method> methodKey(final String owner, final String name, final String desc) {
        return Pair.of(Type.getObjectType(owner), new Method(name, desc));
    }","  public void test0()  throws Throwable  {
      Pair<Type, Method> pair0 = BlueprintingVisitor.methodKey(""Tw-{{U_yIU<Wh!ec"", ""B|MIA;pkLZ)?S"", ""5-$,TW`yL1;8YEzD"");
}"
59,"    static Pair<Type, Method> methodKey(final String owner, final String name, final String desc) {
        return Pair.of(Type.getObjectType(owner), new Method(name, desc));
    }","  public void test1()  throws Throwable  {
      // Undeclared exception!
      try { 
        BlueprintingVisitor.methodKey("""", """", "",O>"");
        fail(""Expecting exception: StringIndexOutOfBoundsException"");
      } catch(StringIndexOutOfBoundsException e) {
      }
  }"
60,"    BlueprintingVisitor(@SuppressWarnings(""PMD.UnusedFormalParameter"") final Privilizer privilizer, //false positive
        final ClassVisitor nextVisitor,
        final Privilizing config) {
        privilizer.super(new ClassNode(Privilizer.ASM_VERSION));
        this.nextVisitor = nextVisitor;

        // load up blueprint methods:
        for (final Privilizing.CallTo callTo : config.value()) {
            final Type blueprintType = Type.getType(callTo.value());
            blueprintTypes.add(blueprintType);

            final Set<String> methodNames = new HashSet<>(Arrays.asList(callTo.methods()));

            typeInfo(blueprintType).methods.entrySet().stream()
                .filter(e -> methodNames.isEmpty() || methodNames.contains(e.getKey().getName()))
                .forEach(e -> blueprintRegistry.put(Pair.of(blueprintType, e.getKey()), e.getValue()));
        }
    }","  public void test2()  throws Throwable  {
      ClassNode classNode0 = new ClassNode();
      Privilizing privilizing0 = mock(Privilizing.class, new ViolatedAssumptionAnswer());
      BlueprintingVisitor blueprintingVisitor0 = null;
      try {
        blueprintingVisitor0 = new BlueprintingVisitor((Privilizer) null, classNode0, privilizing0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.weaver.privilizer.BlueprintingVisitor"", e);
      }
  }"
61,"    BlueprintingVisitor(@SuppressWarnings(""PMD.UnusedFormalParameter"") final Privilizer privilizer, //false positive
        final ClassVisitor nextVisitor,
        final Privilizing config) {
        privilizer.super(new ClassNode(Privilizer.ASM_VERSION));
        this.nextVisitor = nextVisitor;

        // load up blueprint methods:
        for (final Privilizing.CallTo callTo : config.value()) {
            final Type blueprintType = Type.getType(callTo.value());
            blueprintTypes.add(blueprintType);

            final Set<String> methodNames = new HashSet<>(Arrays.asList(callTo.methods()));

            typeInfo(blueprintType).methods.entrySet().stream()
                .filter(e -> methodNames.isEmpty() || methodNames.contains(e.getKey().getName()))
                .forEach(e -> blueprintRegistry.put(Pair.of(blueprintType, e.getKey()), e.getValue()));
        }
    }","  public void test3()  throws Throwable  {
      HashMap<String, FieldNode> hashMap0 = new HashMap<String, FieldNode>();
      HashMap<Method, MethodNode> hashMap1 = new HashMap<Method, MethodNode>();
      BlueprintingVisitor.TypeInfo blueprintingVisitor_TypeInfo0 = new BlueprintingVisitor.TypeInfo((-2515), ""N-K"", hashMap0, hashMap1);
  }"
62,"    static Pair<Type, Method> methodKey(final String owner, final String name, final String desc) {
        return Pair.of(Type.getObjectType(owner), new Method(name, desc));
    }","  public void test4()  throws Throwable  {
      // Undeclared exception!
      try { 
        BlueprintingVisitor.methodKey((String) null, ""CD"", (String) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.objectweb.asm.Type"", e);
      }
  }"
63,"    public boolean clean(final WeaveEnvironment environment, final Scanner scanner) {
        final Privilizer privilizer = new Privilizer(environment);

        final List<String> toDelete = new ArrayList<>();

        final ScanRequest scanRequest = new ScanRequest().add(WeaveInterest.of(Privilized.class, ElementType.TYPE));

        environment.debug(""Cleaning classes privilized with policy other than %s"", privilizer.policy);
        for (final WeavableClass<?> weavableClass : scanner.scan(scanRequest).getClasses().with(Privilized.class)) {
            final Policy privilizedPolicy = Policy.valueOf(weavableClass.getAnnotation(Privilized.class).value());
            if (privilizedPolicy == privilizer.policy) {
                continue;
            }
            final String className = weavableClass.getTarget().getName();
            environment.debug(""Class %s privilized with %s; deleting."", className, privilizedPolicy);

            try (InputStream bytecode = privilizer.env.getClassfile(className).getInputStream()) {
                final ClassReader classReader = new ClassReader(bytecode);
                classReader.accept(new ClassVisitor(Privilizer.ASM_VERSION) {
                    @Override
                    @SuppressWarnings(""PMD.UseVarargs"") // overridden method
                    public void visit(final int version, final int access, final String name, final String signature,
                        final String superName, final String[] interfaces) {
                        toDelete.add(name);
                    }

                    @Override
                    public void visitInnerClass(final String name, final String outerName, final String innerName,
                        final int access) {
                        if (toDelete.contains(outerName)) {
                            toDelete.add(name);
                        }
                    }
                }, ClassReader.SKIP_CODE + ClassReader.SKIP_DEBUG + ClassReader.SKIP_FRAMES);
            } catch (final Exception e) {
                throw new IllegalStateException(e);
            }
        }
        boolean result = false;
        for (final String className : toDelete) {
            final String resourcePath = toResourcePath(className);
            final boolean success = environment.deleteResource(resourcePath);
            environment.debug(""Deletion of resource %s was %ssuccessful."", resourcePath, success ? """" : ""un"");
            result |= success;
        }
        return result;
    }","  public void test0()  throws Throwable  {
      PrivilizerCleaner privilizerCleaner0 = new PrivilizerCleaner();
      Scanner scanner0 = mock(Scanner.class, new ViolatedAssumptionAnswer());
      WeaveEnvironment weaveEnvironment0 = mock(WeaveEnvironment.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        privilizerCleaner0.clean(weaveEnvironment0, scanner0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.weaver.privilizer.Privilizer"", e);
      }
  }"
64,,"  public void test0()  throws Throwable  {
      AccessLevel[] accessLevelArray0 = AccessLevel.values();
}"
65,,"  public void test1()  throws Throwable  {
      AccessLevel accessLevel0 = AccessLevel.valueOf(""PROTECTED"");
}"
66,"    public int merge(final int mod) {
        int remove = 0;
        for (final AccessLevel accessLevel : EnumSet.complementOf(EnumSet.of(this))) {
            remove |= accessLevel.flag;
        }
        return mod & ~remove | flag;
    }","  public void test2()  throws Throwable  {
      AccessLevel accessLevel0 = AccessLevel.parse(""PACKAGE"");
      int int0 = accessLevel0.merge(0);
}"
67,"    public int merge(final int mod) {
        int remove = 0;
        for (final AccessLevel accessLevel : EnumSet.complementOf(EnumSet.of(this))) {
            remove |= accessLevel.flag;
        }
        return mod & ~remove | flag;
    }","  public void test3()  throws Throwable  {
      AccessLevel accessLevel0 = AccessLevel.defaultValue();
      int int0 = accessLevel0.merge(3);
}"
68,"    public String toString() {
        return name().toLowerCase(Locale.US);
    }","  public void test4()  throws Throwable  {
      AccessLevel accessLevel0 = AccessLevel.PRIVATE;
      String string0 = accessLevel0.toString();
}"
69,"    public static AccessLevel of(final int mod) {
        final Set<AccessLevel> matched = EnumSet.noneOf(AccessLevel.class);
        if (Modifier.isPublic(mod)) {
            matched.add(PUBLIC);
        }
        if (Modifier.isProtected(mod)) {
            matched.add(PROTECTED);
        }
        if (Modifier.isPrivate(mod)) {
            matched.add(PRIVATE);
        }
        if (matched.isEmpty()) {
            return PACKAGE;
        }
        Validate.isTrue(matched.size() == 1, ""%s seems to declare multiple access modifiers: %s"", mod, matched);
        return matched.iterator().next();
    }","  public void test5()  throws Throwable  {
      AccessLevel accessLevel0 = AccessLevel.of(1232);
}"
70,"    public int merge(final int mod) {
        int remove = 0;
        for (final AccessLevel accessLevel : EnumSet.complementOf(EnumSet.of(this))) {
            remove |= accessLevel.flag;
        }
        return mod & ~remove | flag;
    }","  public void test6()  throws Throwable  {
      AccessLevel accessLevel0 = AccessLevel.of((-30));
      int int0 = accessLevel0.merge((-30));
}"
71,"    public static AccessLevel of(final int mod) {
        final Set<AccessLevel> matched = EnumSet.noneOf(AccessLevel.class);
        if (Modifier.isPublic(mod)) {
            matched.add(PUBLIC);
        }
        if (Modifier.isProtected(mod)) {
            matched.add(PROTECTED);
        }
        if (Modifier.isPrivate(mod)) {
            matched.add(PRIVATE);
        }
        if (matched.isEmpty()) {
            return PACKAGE;
        }
        Validate.isTrue(matched.size() == 1, ""%s seems to declare multiple access modifiers: %s"", mod, matched);
        return matched.iterator().next();
    }","  public void test7()  throws Throwable  {
      // Undeclared exception!
      try { 
        AccessLevel.of((-3073));
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // -3073 seems to declare multiple access modifiers: [public, protected, private]
         //
         verifyException(""org.apache.commons.lang3.Validate"", e);
      }
  }"
72,"    public static AccessLevel defaultValue() {
        return AccessLevel.PRIVATE;
    }","  public void test8()  throws Throwable  {
      AccessLevel accessLevel0 = AccessLevel.parse("""");
}"
73,"    static void checkSecurityManager(final GeneratorAdapter mgen) {
        final Label setFalse = new Label();
        final Label done = new Label();
        mgen.invokeStatic(Type.getType(System.class),
            new Method(""getSecurityManager"", Type.getType(SecurityManager.class), Privilizer.EMPTY_TYPE_ARRAY));
        mgen.ifNull(setFalse);
        mgen.push(true);
        mgen.goTo(done);
        mgen.mark(setFalse);
        mgen.push(false);
        mgen.mark(done);
    }","  public void test0()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Type type0 = Type.getType(class0);
      Type[] typeArray0 = new Type[3];
      typeArray0[0] = type0;
      typeArray0[1] = type0;
      typeArray0[2] = type0;
      Method method0 = new Method(""?P&zE1"", type0, typeArray0);
      String[] stringArray0 = new String[3];
      MethodNode methodNode0 = new MethodNode(1, ""fzTwwtmOIjD"", (String) null, ""03%$'5}SGmBhl<"", stringArray0);
      GeneratorAdapter generatorAdapter0 = new GeneratorAdapter(54, method0, methodNode0);
      PrivilizingVisitor.checkSecurityManager(generatorAdapter0);
}"
74,"    PrivilizingVisitor(final Privilizer privilizer, final ClassVisitor cv) { //NOPMD
        privilizer.super();
        this.policy = privilizer.policy;
        this.accessLevel = privilizer.accessLevel;
        this.cv =
            new InlineNestedPrivilegedCalls(privilizer, privilegedMethods, new StaticInitMerger(
                privilizer.generateName(""clinit""), cv));
    }","  public void test1()  throws Throwable  {
      PrivilizingVisitor privilizingVisitor0 = null;
      try {
        privilizingVisitor0 = new PrivilizingVisitor((Privilizer) null, (ClassVisitor) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.weaver.privilizer.PrivilizingVisitor"", e);
      }
  }"
75,"    static void checkSecurityManager(final GeneratorAdapter mgen) {
        final Label setFalse = new Label();
        final Label done = new Label();
        mgen.invokeStatic(Type.getType(System.class),
            new Method(""getSecurityManager"", Type.getType(SecurityManager.class), Privilizer.EMPTY_TYPE_ARRAY));
        mgen.ifNull(setFalse);
        mgen.push(true);
        mgen.goTo(done);
        mgen.mark(setFalse);
        mgen.push(false);
        mgen.mark(done);
    }","  public void test2()  throws Throwable  {
      // Undeclared exception!
      try { 
        PrivilizingVisitor.checkSecurityManager((GeneratorAdapter) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.weaver.privilizer.PrivilizingVisitor"", e);
      }
  }"
76,"    protected File getTarget() {
        return target;
    }","  public void test0()  throws Throwable  {
      System.setCurrentTimeMillis((-1613L));
      TestWeaveMojo testWeaveMojo0 = new TestWeaveMojo();
      File file0 = MockFile.createTempFile(""q/8aa"", ""]jvym)Hh#V! 7K@)X "");
      testWeaveMojo0.target = file0;
      File file1 = testWeaveMojo0.getTarget();
}"
77,"    protected File getTarget() {
        return target;
    }","  public void test1()  throws Throwable  {
      TestWeaveMojo testWeaveMojo0 = new TestWeaveMojo();
      MockFile mockFile0 = new MockFile((File) null, """");
      testWeaveMojo0.target = (File) mockFile0;
      File file0 = testWeaveMojo0.getTarget();
}"
78,"    protected File getTarget() {
        return target;
    }","  public void test2()  throws Throwable  {
      TestWeaveMojo testWeaveMojo0 = new TestWeaveMojo();
      MockFile mockFile0 = new MockFile("".dTU5d7&<W&)I"");
      testWeaveMojo0.target = (File) mockFile0;
      File file0 = testWeaveMojo0.getTarget();
}"
79,"    protected File getTarget() {
        return target;
    }","  public void test3()  throws Throwable  {
      TestWeaveMojo testWeaveMojo0 = new TestWeaveMojo();
      File file0 = testWeaveMojo0.getTarget();
}"
80,"    protected File getTarget() {
        return target;
    }","  public void test0()  throws Throwable  {
      System.setCurrentTimeMillis((-724L));
      PrepareMojo prepareMojo0 = new PrepareMojo();
      File file0 = prepareMojo0.getTarget();
      File file1 = MockFile.createTempFile(""~3r"", ""juTI&8."", file0);
      prepareMojo0.target = file1;
      File file2 = prepareMojo0.getTarget();
}"
81,"    protected File getTarget() {
        return target;
    }","  public void test1()  throws Throwable  {
      PrepareMojo prepareMojo0 = new PrepareMojo();
      MockFile mockFile0 = new MockFile(""|iu}ujk`o$bJGb"", """");
      mockFile0.mkdir();
      prepareMojo0.target = (File) mockFile0;
      File file0 = prepareMojo0.getTarget();
}"
82,"    protected File getTarget() {
        return target;
    }","  public void test2()  throws Throwable  {
      PrepareMojo prepareMojo0 = new PrepareMojo();
      DefaultModelLocator defaultModelLocator0 = new DefaultModelLocator();
      File file0 = defaultModelLocator0.locatePom((File) null);
      prepareMojo0.target = file0;
      File file1 = prepareMojo0.getTarget();
}"
83,"    protected File getTarget() {
        return target;
    }","  public void test3()  throws Throwable  {
      PrepareMojo prepareMojo0 = new PrepareMojo();
      MockFile mockFile0 = new MockFile("".>_[uz"");
      prepareMojo0.target = (File) mockFile0;
      File file0 = prepareMojo0.getTarget();
}"
84,"    protected File getTarget() {
        return target;
    }","  public void test0()  throws Throwable  {
      System.setCurrentTimeMillis((-3456L));
      TestPrepareMojo testPrepareMojo0 = new TestPrepareMojo();
      MockFile mockFile0 = new MockFile(""i3D(?2;ky\""En0~.&pN5"", """");
      File file0 = MockFile.createTempFile(""4k#1*jK-(d"", ""+6(@-''3I+{`Q'O,dv"", (File) mockFile0);
      testPrepareMojo0.target = file0;
      File file1 = testPrepareMojo0.getTarget();
}"
85,"    protected File getTarget() {
        return target;
    }","  public void test1()  throws Throwable  {
      TestPrepareMojo testPrepareMojo0 = new TestPrepareMojo();
      File file0 = MockFile.createTempFile("".5uL<Q,<%Tk`rSR%F_$"", "",v7}M.3b6kpRhC:"");
      testPrepareMojo0.target = file0;
      File file1 = testPrepareMojo0.getTarget();
}"
86,"    protected File getTarget() {
        return target;
    }","  public void test2()  throws Throwable  {
      TestPrepareMojo testPrepareMojo0 = new TestPrepareMojo();
      MockFile mockFile0 = new MockFile("""");
      testPrepareMojo0.target = (File) mockFile0;
      File file0 = testPrepareMojo0.getTarget();
}"
87,"    protected File getTarget() {
        return target;
    }","  public void test3()  throws Throwable  {
      TestPrepareMojo testPrepareMojo0 = new TestPrepareMojo();
      DefaultModelProcessor defaultModelProcessor0 = new DefaultModelProcessor();
      DefaultModelLocator defaultModelLocator0 = new DefaultModelLocator();
      defaultModelProcessor0.setModelLocator(defaultModelLocator0);
      File file0 = defaultModelProcessor0.locatePom((File) null);
      testPrepareMojo0.target = file0;
      File file1 = testPrepareMojo0.getTarget();
}"
88,"    protected File getTarget() {
        return target;
    }","  public void test4()  throws Throwable  {
      TestPrepareMojo testPrepareMojo0 = new TestPrepareMojo();
      MockFile mockFile0 = new MockFile((File) null, ""NmD"");
      testPrepareMojo0.target = (File) mockFile0;
      File file0 = testPrepareMojo0.getTarget();
}"
89,"    protected File getTarget() {
        return target;
    }","  public void test5()  throws Throwable  {
      TestPrepareMojo testPrepareMojo0 = new TestPrepareMojo();
      File file0 = testPrepareMojo0.getTarget();
}"
90,"    protected void doExecute(final File target, final List<String> classpath, final Properties config)
        throws MojoExecutionException {
        if (!target.isDirectory()) {
            return;
        }
        try {
            new CleanProcessor(classpath, target, config).clean();
        } catch (Exception e) {
            throw new MojoExecutionException(""cleaning failed due to "" + e.getMessage(), e);
        }
    }","  public void test0()  throws Throwable  {
      PrepareMojo prepareMojo0 = new PrepareMojo();
      MockFile mockFile0 = new MockFile("""");
      Model model0 = new Model();
      MavenProject mavenProject0 = new MavenProject(model0);
      List<String> list0 = mavenProject0.getCompileSourceRoots();
      Developer developer0 = new Developer();
      Properties properties0 = developer0.getProperties();
      prepareMojo0.doExecute(mockFile0, list0, properties0);
}"
91,"    protected void doExecute(final File target, final List<String> classpath, final Properties config)
        throws MojoExecutionException {
        if (!target.isDirectory()) {
            return;
        }
        try {
            new CleanProcessor(classpath, target, config).clean();
        } catch (Exception e) {
            throw new MojoExecutionException(""cleaning failed due to "" + e.getMessage(), e);
        }
    }","  public void test1()  throws Throwable  {
      PrepareMojo prepareMojo0 = new PrepareMojo();
      DefaultProfileActivationContext defaultProfileActivationContext0 = new DefaultProfileActivationContext();
      List<String> list0 = defaultProfileActivationContext0.getInactiveProfileIds();
      // Undeclared exception!
      try { 
        prepareMojo0.doExecute((File) null, list0, (Properties) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.weaver.maven.AbstractPrepareMojo"", e);
      }
  }"
92,"    protected void doExecute(final File target, final List<String> classpath, final Properties config)
        throws MojoExecutionException {
        if (!target.isDirectory()) {
            return;
        }
        try {
            new CleanProcessor(classpath, target, config).clean();
        } catch (Exception e) {
            throw new MojoExecutionException(""cleaning failed due to "" + e.getMessage(), e);
        }
    }","  public void test2()  throws Throwable  {
      TestPrepareMojo testPrepareMojo0 = new TestPrepareMojo();
      MockFile mockFile0 = new MockFile(""u<+*:*k@Opwv4"");
      LinkedList<String> linkedList0 = new LinkedList<String>();
      testPrepareMojo0.doExecute(mockFile0, linkedList0, (Properties) null);
}"
93,"    protected void doExecute(final File target, final List<String> classpath, final Properties config)
        throws MojoExecutionException {
        if (!target.isDirectory()) {
            return;
        }
        try {
            new CleanProcessor(classpath, target, config).clean();
        } catch (Exception e) {
            throw new MojoExecutionException(""cleaning failed due to "" + e.getMessage(), e);
        }
    }","  public void test3()  throws Throwable  {
      PrepareMojo prepareMojo0 = new PrepareMojo();
      MockFile mockFile0 = new MockFile("""");
      Properties properties0 = new Properties();
      try { 
        prepareMojo0.doExecute(mockFile0, (List<String>) null, properties0);
        fail(""Expecting exception: MojoExecutionException"");
      } catch(MojoExecutionException e) {
         //
         // cleaning failed due to classpath
         //
         verifyException(""org.apache.commons.weaver.maven.AbstractPrepareMojo"", e);
      }
  }"
94,"    protected void doExecute(final File target, final List<String> classpath, final Properties config)
        throws MojoExecutionException {
        try {
            new WeaveProcessor(classpath, target, config).weave();
        } catch (Exception e) {
            throw new MojoExecutionException(""weaving failed due to "" + e.getMessage(), e);
        }
    }","  public void test0()  throws Throwable  {
      WeaveMojo weaveMojo0 = new WeaveMojo();
      MockFile mockFile0 = new MockFile(""Ow(d/$#^;Jp=+"");
      MavenProject mavenProject0 = new MavenProject();
      List<String> list0 = mavenProject0.getCompileClasspathElements();
      Properties properties0 = new Properties();
      weaveMojo0.doExecute(mockFile0, list0, properties0);
}"
95,"    protected void doExecute(final File target, final List<String> classpath, final Properties config)
        throws MojoExecutionException {
        try {
            new WeaveProcessor(classpath, target, config).weave();
        } catch (Exception e) {
            throw new MojoExecutionException(""weaving failed due to "" + e.getMessage(), e);
        }
    }","  public void test1()  throws Throwable  {
      TestWeaveMojo testWeaveMojo0 = new TestWeaveMojo();
      ArtifactRepositoryPolicy artifactRepositoryPolicy0 = new ArtifactRepositoryPolicy(true, """", "".cZ(Md0_%"");
      MavenArtifactRepository mavenArtifactRepository0 = new MavenArtifactRepository(""Gk"", """", (ArtifactRepositoryLayout) null, artifactRepositoryPolicy0, artifactRepositoryPolicy0);
      List<String> list0 = mavenArtifactRepository0.findVersions((Artifact) null);
      Properties properties0 = new Properties();
      try { 
        testWeaveMojo0.doExecute((File) null, list0, properties0);
        fail(""Expecting exception: MojoExecutionException"");
      } catch(MojoExecutionException e) {
         //
         // weaving failed due to target
         //
         verifyException(""org.apache.commons.weaver.maven.AbstractWeaveMojo"", e);
      }
  }"
96,"    protected File getTarget() {
        return target;
    }","  public void test0()  throws Throwable  {
      WeaveMojo weaveMojo0 = new WeaveMojo();
      MockFile mockFile0 = new MockFile("" of type "", """");
      weaveMojo0.target = (File) mockFile0;
      System.setCurrentTimeMillis((-1284L));
      mockFile0.mkdirs();
      File file0 = weaveMojo0.getTarget();
}"
97,"    protected File getTarget() {
        return target;
    }","  public void test1()  throws Throwable  {
      WeaveMojo weaveMojo0 = new WeaveMojo();
      MockFile mockFile0 = new MockFile("".<<,Gl"");
      weaveMojo0.target = (File) mockFile0;
      File file0 = weaveMojo0.getTarget();
}"
98,"    protected File getTarget() {
        return target;
    }","  public void test2()  throws Throwable  {
      WeaveMojo weaveMojo0 = new WeaveMojo();
      DefaultModelLocator defaultModelLocator0 = new DefaultModelLocator();
      File file0 = defaultModelLocator0.locatePom((File) null);
      weaveMojo0.target = file0;
      File file1 = weaveMojo0.getTarget();
}"
99,"    protected File getTarget() {
        return target;
    }","  public void test3()  throws Throwable  {
      WeaveMojo weaveMojo0 = new WeaveMojo();
      File file0 = weaveMojo0.getTarget();
}"
100,"    protected OutputStream getOutputStream(final String resourceName) throws IOException {
        final File file = new File(target, resourceName);
        final File parent = file.getParentFile();
        if (parent.exists()) {
            Validate.validState(parent.isDirectory(), ""Cannot write %s to non-directory parent"", file);
        } else {
            Validate.validState(parent.mkdirs(), ""Unable to create output directory %s"", parent);
        }
        return new FileOutputStream(file);
    }","  public void test0()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(2144L);
      MockFile mockFile0 = new MockFile(""5>snD Er?#mOQ"");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      ClassLoader.getSystemClassLoader();
      Properties properties0 = new Properties();
      Logger logger0 = Logger.getLogger(""5>snD Er?#mOQ"");
      logger0.finest(""5>snD Er?#mOQ"");
      LocalWeaveEnvironment localWeaveEnvironment0 = new LocalWeaveEnvironment(mockFile0, classLoader1, properties0, logger0);
      localWeaveEnvironment0.getOutputStream(""5>snD Er?#mOQ"");
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(0L);
      long long0 = (-2800L);
      System.setCurrentTimeMillis((-2800L));
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis((-2800L));
      mockFile0.setReadOnly();
      localWeaveEnvironment0.getOutputStream(""5>snD Er?#mOQ"");
      try { 
        localWeaveEnvironment0.getOutputStream("""");
        fail(""Expecting exception: FileNotFoundException"");
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.evosuite.runtime.mock.java.io.MockFileOutputStream"", e);
      }
  }"
101,"    protected OutputStream getOutputStream(final String resourceName) throws IOException {
        final File file = new File(target, resourceName);
        final File parent = file.getParentFile();
        if (parent.exists()) {
            Validate.validState(parent.isDirectory(), ""Cannot write %s to non-directory parent"", file);
        } else {
            Validate.validState(parent.mkdirs(), ""Unable to create output directory %s"", parent);
        }
        return new FileOutputStream(file);
    }","  public void test1()  throws Throwable  {
      MockFile mockFile0 = new MockFile("""", """");
      MockFile mockFile1 = new MockFile(mockFile0, """");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Properties properties0 = new Properties();
      Logger logger0 = Logger.getLogger("""");
      LocalWeaveEnvironment localWeaveEnvironment0 = new LocalWeaveEnvironment(mockFile1, classLoader0, properties0, logger0);
      // Undeclared exception!
      try { 
        localWeaveEnvironment0.getOutputStream("""");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.weaver.LocalWeaveEnvironment"", e);
      }
  }"
102,"    public boolean deleteResource(final String name) {
        return new File(target, name).delete();
    }","  public void test2()  throws Throwable  {
      MockFile mockFile0 = new MockFile("""");
      Properties properties0 = new Properties();
      Logger logger0 = Logger.getLogger("""");
      LocalWeaveEnvironment localWeaveEnvironment0 = new LocalWeaveEnvironment(mockFile0, (ClassLoader) null, properties0, logger0);
      boolean boolean0 = localWeaveEnvironment0.deleteResource("""");
      localWeaveEnvironment0.deleteResource(""qSl9M>"");
      localWeaveEnvironment0.deleteResource("""");
      boolean boolean1 = localWeaveEnvironment0.deleteResource("""");
}"
103,"    protected OutputStream getOutputStream(final String resourceName) throws IOException {
        final File file = new File(target, resourceName);
        final File parent = file.getParentFile();
        if (parent.exists()) {
            Validate.validState(parent.isDirectory(), ""Cannot write %s to non-directory parent"", file);
        } else {
            Validate.validState(parent.mkdirs(), ""Unable to create output directory %s"", parent);
        }
        return new FileOutputStream(file);
    }","  public void test3()  throws Throwable  {
      MockFile mockFile0 = new MockFile("".CnE5mB0|c[a"", "".CnE5mB0|c[a"");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Properties properties0 = new Properties();
      Logger logger0 = Logger.getLogger(""F$FFf"");
      LocalWeaveEnvironment localWeaveEnvironment0 = new LocalWeaveEnvironment(mockFile0, classLoader0, properties0, logger0);
      OutputStream outputStream0 = localWeaveEnvironment0.getOutputStream(""F$FFf"");
}"
104,"    protected OutputStream getOutputStream(final String resourceName) throws IOException {
        final File file = new File(target, resourceName);
        final File parent = file.getParentFile();
        if (parent.exists()) {
            Validate.validState(parent.isDirectory(), ""Cannot write %s to non-directory parent"", file);
        } else {
            Validate.validState(parent.mkdirs(), ""Unable to create output directory %s"", parent);
        }
        return new FileOutputStream(file);
    }","  public void test4()  throws Throwable  {
      File file0 = MockFile.createTempFile(""UrP=C+3sn"", ""i~%"");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Properties properties0 = new Properties();
      Logger logger0 = Logger.getAnonymousLogger();
      Logger logger1 = logger0.getParent();
      LocalWeaveEnvironment localWeaveEnvironment0 = new LocalWeaveEnvironment(file0, classLoader0, properties0, logger1);
      // Undeclared exception!
      try { 
        localWeaveEnvironment0.getOutputStream(""org.apache.commons.weaver.LocalWeaveEnvironment"");
        fail(""Expecting exception: IllegalStateException"");
      } catch(IllegalStateException e) {
         //
         // Cannot write /tmp/UrP=C+3sn0i~%/org.apache.commons.weaver.LocalWeaveEnvironment to non-directory parent
         //
         verifyException(""org.apache.commons.lang3.Validate"", e);
      }
  }"
105,"    public boolean deleteResource(final String name) {
        return new File(target, name).delete();
    }","  public void test5()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""Unable to create output directory %s"", ""Unable to create output directory %s"");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      Properties properties0 = new Properties();
      Logger logger0 = Logger.getGlobal();
      LocalWeaveEnvironment localWeaveEnvironment0 = new LocalWeaveEnvironment(mockFile0, classLoader1, properties0, logger0);
      boolean boolean0 = localWeaveEnvironment0.deleteResource(""Unable to create output directory %s"");
}"
106,"    protected OutputStream getOutputStream(final String resourceName) throws IOException {
        final File file = new File(target, resourceName);
        final File parent = file.getParentFile();
        if (parent.exists()) {
            Validate.validState(parent.isDirectory(), ""Cannot write %s to non-directory parent"", file);
        } else {
            Validate.validState(parent.mkdirs(), ""Unable to create output directory %s"", parent);
        }
        return new FileOutputStream(file);
    }","  public void test6()  throws Throwable  {
      File file0 = MockFile.createTempFile(""nsJk!ii{"", ""nsJk!ii{"");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Properties properties0 = new Properties();
      Logger logger0 = Logger.getLogger(""nsJk!ii{"");
      LocalWeaveEnvironment localWeaveEnvironment0 = new LocalWeaveEnvironment(file0, classLoader0, properties0, logger0);
      // Undeclared exception!
      try { 
        localWeaveEnvironment0.getOutputStream(""nsJk!ii{"");
        fail(""Expecting exception: IllegalStateException"");
      } catch(IllegalStateException e) {
         //
         // Cannot write /tmp/nsJk!ii{0nsJk!ii{/nsJk!ii{ to non-directory parent
         //
         verifyException(""org.apache.commons.lang3.Validate"", e);
      }
  }"
107,"    protected LocalWeaveEnvironment(final File target, final ClassLoader classLoader, final Properties config,
        final Logger log) {
        super(classLoader, config, log);
        Validate.notNull(target, ""target"");
        this.target = target;
    }","  public void test7()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      Properties properties0 = new Properties();
      ClassLoader.getSystemClassLoader();
      String string0 = """";
      Logger logger0 = Logger.getLogger("""");
      classLoader1.clearAssertionStatus();
      classLoader1.setClassAssertionStatus("""", true);
      logger0.finest("""");
      LocalWeaveEnvironment localWeaveEnvironment0 = null;
      try {
        localWeaveEnvironment0 = new LocalWeaveEnvironment((File) null, classLoader1, properties0, logger0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // target
         //
         verifyException(""org.apache.commons.lang3.Validate"", e);
      }
  }"
108,"    protected LocalWeaveEnvironment(final File target, final ClassLoader classLoader, final Properties config,
        final Logger log) {
        super(classLoader, config, log);
        Validate.notNull(target, ""target"");
        this.target = target;
    }","  public void test8()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      Properties properties0 = new Properties();
      Logger logger0 = Logger.getGlobal();
      LocalWeaveEnvironment localWeaveEnvironment0 = null;
      try {
        localWeaveEnvironment0 = new LocalWeaveEnvironment((File) null, classLoader1, properties0, logger0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // target
         //
         verifyException(""org.apache.commons.lang3.Validate"", e);
      }
  }"
109,"    protected OutputStream getOutputStream(final String resourceName) throws IOException {
        final File file = new File(target, resourceName);
        final File parent = file.getParentFile();
        if (parent.exists()) {
            Validate.validState(parent.isDirectory(), ""Cannot write %s to non-directory parent"", file);
        } else {
            Validate.validState(parent.mkdirs(), ""Unable to create output directory %s"", parent);
        }
        return new FileOutputStream(file);
    }","  public void test9()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""ZjYvoF2b5VhG=fq%"");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Properties properties0 = new Properties();
      Logger logger0 = Logger.getGlobal();
      LocalWeaveEnvironment localWeaveEnvironment0 = new LocalWeaveEnvironment(mockFile0, classLoader0, properties0, logger0);
      localWeaveEnvironment0.deleteResource(""ZjYvoF2b5VhG=fq%"");
      OutputStream outputStream0 = localWeaveEnvironment0.getOutputStream(""ZjYvoF2b5VhG=fq%"");
      OutputStream outputStream1 = localWeaveEnvironment0.getOutputStream(""ZjYvoF2b5VhG=fq%"");
}"
110,"    Finder(final Archive archive) {
        super(archive, false);
        classfileAnnotations = CLASSFILE_ANNOTATIONS.get();
        CLASSFILE_ANNOTATIONS.remove();
        inflater = new Inflater(classfileAnnotations);
        enableFindImplementations();
        enableFindSubclasses();
    }","  public void test0()  throws Throwable  {
      Class<WeaveInterest>[] classArray0 = (Class<WeaveInterest>[]) Array.newInstance(Class.class, 1);
      ClassesArchive classesArchive0 = new ClassesArchive(classArray0);
      Finder finder0 = new Finder(classesArchive0);
      Class<Annotation> class0 = Annotation.class;
      ElementType elementType0 = ElementType.METHOD;
      WeaveInterest weaveInterest0 = WeaveInterest.of(class0, elementType0);
      AnnotationFinder.ClassInfo annotationFinder_ClassInfo0 = finder0.new ClassInfo(weaveInterest0.annotationType);
      AnnotationFinder.InfoBuildingVisitor annotationFinder_InfoBuildingVisitor0 = finder0.new InfoBuildingVisitor(annotationFinder_ClassInfo0);
      Finder.Visitor finder_Visitor0 = finder0.new Visitor(annotationFinder_InfoBuildingVisitor0);
      FieldVisitor fieldVisitor0 = finder_Visitor0.visitField(21, ""Zjxj;Kwb5S*-_"", ""Zjxj;Kwb5S*-_"", ""Zjxj;Kwb5S*-_"", (Object) null);
}"
111,"    protected void readClassDef(final InputStream bytecode) throws IOException {
        try {
            new ClassReader(bytecode).accept(new Visitor(new InfoBuildingVisitor()), ASM_FLAGS);
        } finally {
            bytecode.close();
        }
    }","  public void test1()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      URL[] uRLArray0 = new URL[2];
      ClasspathArchive classpathArchive0 = new ClasspathArchive(classLoader0, uRLArray0);
      Finder finder0 = new Finder(classpathArchive0);
      InputStream inputStream0 = classpathArchive0.getBytecode(""org.apache.commons.weaver.Finder$AnnotationCapturer$2"");
      finder0.readClassDef(inputStream0);
}"
112,"    static <T, U> Stream<U> typed(final Class<U> type, final Supplier<Stream<T>> stream) {
        return stream.get().filter(type::isInstance).map(type::cast);
    }","  public void test2()  throws Throwable  {
      Class<Archive> class0 = Archive.class;
      Stream<String> stream0 = Stream.empty();
      Supplier<Stream<String>> supplier0 = (Supplier<Stream<String>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn(stream0).when(supplier0).get();
      Stream<Archive> stream1 = Finder.typed(class0, supplier0);
}"
113,"    Class<?> toClass(final Type type) {
        final String className;
        if (type.getSort() == Type.ARRAY) {
            className = type.getElementType().getClassName();
        } else {
            className = type.getClassName();
        }
        Class<?> result;
        try {
            result = Class.forName(className);
        } catch (final ClassNotFoundException e) {
            try {
                result = getArchive().loadClass(className);
            } catch (final ClassNotFoundException e1) {
                throw new RuntimeException(e1);
            }
        }
        if (type.getSort() == Type.ARRAY) {
            final int[] dims = new int[type.getDimensions()];
            Arrays.fill(dims, 0);
            result = Array.newInstance(result, dims).getClass();
        }
        return result;
    }","  public void test3()  throws Throwable  {
      Class<ClassesArchive> class0 = ClassesArchive.class;
      MetaAnnotatedClass<ClassesArchive> metaAnnotatedClass0 = new MetaAnnotatedClass<ClassesArchive>(class0);
      ClassLoader classLoader0 = metaAnnotatedClass0.getClassLoader();
      MockFile mockFile0 = new MockFile(""%s(arg%s)"");
      FileArchive fileArchive0 = new FileArchive(classLoader0, mockFile0, ""org.apache.commons.weaver.Finder$IncludesClassfile"");
      Finder finder0 = new Finder(fileArchive0);
      Class<Archive> class1 = Archive.class;
      Type type0 = Type.getType(class1);
      Class<?> class2 = finder0.toClass(type0);
}"
114,"    static <T> Predicate<T> isCtor(final Function<? super T, MethodInfo> xform) {
        return t -> CTOR.test(xform.apply(t));
    }","  public void test4()  throws Throwable  {
      UnaryOperator<AnnotationFinder.MethodInfo> unaryOperator0 = UnaryOperator.identity();
      Predicate<AnnotationFinder.MethodInfo> predicate0 = Finder.isCtor((Function<? super AnnotationFinder.MethodInfo, AnnotationFinder.MethodInfo>) unaryOperator0);
}"
115,"    static Predicate<Annotated<?>> hasAnnotation(final Class<? extends Annotation> annotation) {
        return annotated -> annotated != null && annotated.isAnnotationPresent(annotation);
    }","  public void test5()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      Predicate<Annotated<?>> predicate0 = Finder.hasAnnotation(class0);
}"
116,"    static <T, U> Stream<U> typed(final Class<U> type, final Supplier<Stream<T>> stream) {
        return stream.get().filter(type::isInstance).map(type::cast);
    }","  public void test6()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      Supplier<Stream<Method>> supplier0 = (Supplier<Stream<Method>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      // Undeclared exception!
      try { 
        Finder.typed(class0, supplier0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.weaver.Finder"", e);
      }
  }"
117,"    static <T, U> Stream<U> typed(final Class<U> type, final Supplier<Stream<T>> stream) {
        return stream.get().filter(type::isInstance).map(type::cast);
    }","  public void test7()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      MetaAnnotatedConstructor<Archive>[] metaAnnotatedConstructorArray0 = (MetaAnnotatedConstructor<Archive>[]) Array.newInstance(MetaAnnotatedConstructor.class, 0);
      Stream<MetaAnnotatedConstructor<Archive>> stream0 = Stream.of(metaAnnotatedConstructorArray0);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) class0);
      stream0.noneMatch(predicate0);
      Supplier<Stream<MetaAnnotatedConstructor<Archive>>> supplier0 = (Supplier<Stream<MetaAnnotatedConstructor<Archive>>>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn(stream0).when(supplier0).get();
      // Undeclared exception!
      try { 
        Finder.typed(class0, supplier0);
        fail(""Expecting exception: IllegalStateException"");
      } catch(IllegalStateException e) {
         //
         // stream has already been operated upon or closed
         //
         verifyException(""java.util.stream.AbstractPipeline"", e);
      }
  }"
118,"    Class<?> toClass(final Type type) {
        final String className;
        if (type.getSort() == Type.ARRAY) {
            className = type.getElementType().getClassName();
        } else {
            className = type.getClassName();
        }
        Class<?> result;
        try {
            result = Class.forName(className);
        } catch (final ClassNotFoundException e) {
            try {
                result = getArchive().loadClass(className);
            } catch (final ClassNotFoundException e1) {
                throw new RuntimeException(e1);
            }
        }
        if (type.getSort() == Type.ARRAY) {
            final int[] dims = new int[type.getDimensions()];
            Arrays.fill(dims, 0);
            result = Array.newInstance(result, dims).getClass();
        }
        return result;
    }","  public void test8()  throws Throwable  {
      MockThread mockThread0 = new MockThread();
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      ArrayList<URL> arrayList0 = new ArrayList<URL>(151);
      ClasspathArchive classpathArchive0 = new ClasspathArchive(classLoader0, arrayList0);
      Finder finder0 = new Finder(classpathArchive0);
      Type type0 = Type.VOID_TYPE;
      // Undeclared exception!
      try { 
        finder0.toClass(type0);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // java.lang.ClassNotFoundException: Class 'void.class' should be in target project, but could not be found!
         //
         verifyException(""org.apache.commons.weaver.Finder"", e);
      }
  }"
119,"    Class<?> toClass(final Type type) {
        final String className;
        if (type.getSort() == Type.ARRAY) {
            className = type.getElementType().getClassName();
        } else {
            className = type.getClassName();
        }
        Class<?> result;
        try {
            result = Class.forName(className);
        } catch (final ClassNotFoundException e) {
            try {
                result = getArchive().loadClass(className);
            } catch (final ClassNotFoundException e1) {
                throw new RuntimeException(e1);
            }
        }
        if (type.getSort() == Type.ARRAY) {
            final int[] dims = new int[type.getDimensions()];
            Arrays.fill(dims, 0);
            result = Array.newInstance(result, dims).getClass();
        }
        return result;
    }","  public void test9()  throws Throwable  {
      Class<WeaveInterest>[] classArray0 = (Class<WeaveInterest>[]) Array.newInstance(Class.class, 9);
      ClassesArchive classesArchive0 = new ClassesArchive(classArray0);
      ClassFilter classFilter0 = new ClassFilter("">`"");
      IncludeExcludeFilter includeExcludeFilter0 = new IncludeExcludeFilter(classFilter0, classFilter0);
      FilteredArchive filteredArchive0 = new FilteredArchive(classesArchive0, includeExcludeFilter0);
      Finder finder0 = new Finder(filteredArchive0);
      // Undeclared exception!
      try { 
        finder0.toClass((Type) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.weaver.Finder"", e);
      }
  }"
120,"    Class<?> toClass(final Type type) {
        final String className;
        if (type.getSort() == Type.ARRAY) {
            className = type.getElementType().getClassName();
        } else {
            className = type.getClassName();
        }
        Class<?> result;
        try {
            result = Class.forName(className);
        } catch (final ClassNotFoundException e) {
            try {
                result = getArchive().loadClass(className);
            } catch (final ClassNotFoundException e1) {
                throw new RuntimeException(e1);
            }
        }
        if (type.getSort() == Type.ARRAY) {
            final int[] dims = new int[type.getDimensions()];
            Arrays.fill(dims, 0);
            result = Array.newInstance(result, dims).getClass();
        }
        return result;
    }","  public void test10()  throws Throwable  {
      Class<WeaveInterest>[] classArray0 = (Class<WeaveInterest>[]) Array.newInstance(Class.class, 8);
      ClassesArchive classesArchive0 = new ClassesArchive(classArray0);
      Finder finder0 = new Finder(classesArchive0);
      Type type0 = Type.getObjectType(""org.apache.xbean.finder.archive.BundleArchive"");
      // Undeclared exception!
      try { 
        finder0.toClass(type0);
        fail(""Expecting exception: NoClassDefFoundError"");
      } catch(NoClassDefFoundError e) {
      }
  }"
121,"    Class<?> toClass(final Type type) {
        final String className;
        if (type.getSort() == Type.ARRAY) {
            className = type.getElementType().getClassName();
        } else {
            className = type.getClassName();
        }
        Class<?> result;
        try {
            result = Class.forName(className);
        } catch (final ClassNotFoundException e) {
            try {
                result = getArchive().loadClass(className);
            } catch (final ClassNotFoundException e1) {
                throw new RuntimeException(e1);
            }
        }
        if (type.getSort() == Type.ARRAY) {
            final int[] dims = new int[type.getDimensions()];
            Arrays.fill(dims, 0);
            result = Array.newInstance(result, dims).getClass();
        }
        return result;
    }","  public void test11()  throws Throwable  {
      Class<AnnotationFinder.MethodInfo>[] classArray0 = (Class<AnnotationFinder.MethodInfo>[]) Array.newInstance(Class.class, 8);
      ClassesArchive classesArchive0 = new ClassesArchive(classArray0);
      Finder finder0 = new Finder(classesArchive0);
      Type type0 = Type.getMethodType(""AI|n(\""B8;BbejJq\""<y"");
      // Undeclared exception!
      try { 
        finder0.toClass(type0);
        fail(""Expecting exception: AssertionError"");
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
122,"    public ScanResult scan(final ScanRequest request) {
        final ScanResult result = new ScanResult();

        if (!request.isConstrained() || request.getSupertypes().contains(Object.class)) {
            for (final Annotated<Class<?>> type : this.withAnnotations().getAllClasses()) {
                result.getWeavable(type.get()).addAnnotations(type.getAnnotations());
            }
        } else {
            for (final WeaveInterest interest : request.getInterests()) {
                final ElementType target = interest.target;
                switch (target) {
                case PACKAGE:
                    for (final Annotated<Package> pkg : this.withAnnotations().findAnnotatedPackages(
                        interest.annotationType)) {
                        result.getWeavable(pkg.get()).addAnnotations(pkg.getAnnotations());
                    }
                    break;
                case TYPE:
                    for (final Annotated<Class<?>> type : this.withAnnotations().findAnnotatedClasses(
                        interest.annotationType)) {
                        result.getWeavable(type.get()).addAnnotations(type.getAnnotations());
                    }
                    break;
                case METHOD:
                    for (final Annotated<Method> method : this.withAnnotations().findAnnotatedMethods(
                        interest.annotationType)) {
                        result.getWeavable(method.get()).addAnnotations(method.getAnnotations());
                    }
                    break;
                case CONSTRUCTOR:
                    for (final Annotated<Constructor<?>> ctor : this.withAnnotations().findAnnotatedConstructors(
                        interest.annotationType)) {
                        result.getWeavable(ctor.get()).addAnnotations(ctor.getAnnotations());
                    }
                    break;
                case FIELD:
                        for (final Annotated<Field> fld : this.withAnnotations()
                            .findAnnotatedFields(interest.annotationType)) {
                            result.getWeavable(fld.get()).addAnnotations(fld.getAnnotations());
                        }
                        break;
                case PARAMETER:
                    for (final Annotated<Parameter<Method>> parameter : this.withAnnotations()
                        .findAnnotatedMethodParameters(interest.annotationType)) {
                            result.getWeavable(parameter.get().getDeclaringExecutable())
                                .getWeavableParameter(parameter.get().getIndex())
                                .addAnnotations(parameter.getAnnotations());
                        }
                    for (final Annotated<Parameter<Constructor<?>>> parameter : this.withAnnotations()
                        .findAnnotatedConstructorParameters(interest.annotationType)) {
                            result.getWeavable(parameter.get().getDeclaringExecutable())
                                .getWeavableParameter(parameter.get().getIndex())
                                .addAnnotations(parameter.getAnnotations());
                        }
                    break;
                default:
                    // should we log something?
                    break;
                }
            }
            request.getSupertypes().stream().map(this.withAnnotations()::findAssignableTypes)
                .flatMap(Collection::stream)
                .forEach(type -> result.getWeavable(type.get()).addAnnotations(type.getAnnotations()));
        }
        return inflater.inflate(result);
    }","  public void test12()  throws Throwable  {
      Class<Package>[] classArray0 = (Class<Package>[]) Array.newInstance(Class.class, 2);
      ClassesArchive classesArchive0 = new ClassesArchive(classArray0);
      Finder finder0 = new Finder(classesArchive0);
      // Undeclared exception!
      try { 
        finder0.scan((ScanRequest) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.weaver.Finder"", e);
      }
  }"
123,"    protected void readClassDef(final InputStream bytecode) throws IOException {
        try {
            new ClassReader(bytecode).accept(new Visitor(new InfoBuildingVisitor()), ASM_FLAGS);
        } finally {
            bytecode.close();
        }
    }","  public void test13()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      URL uRL0 = MockURL.getFileExample();
      FileArchive fileArchive0 = new FileArchive(classLoader0, uRL0, """");
      Finder finder0 = new Finder(fileArchive0);
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      // Undeclared exception!
      try { 
        finder0.readClassDef(dataInputStream0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.io.FilterInputStream"", e);
      }
  }"
124,"    protected void readClassDef(final InputStream bytecode) throws IOException {
        try {
            new ClassReader(bytecode).accept(new Visitor(new InfoBuildingVisitor()), ASM_FLAGS);
        } finally {
            bytecode.close();
        }
    }","  public void test14()  throws Throwable  {
      MockThread mockThread0 = new MockThread(""b34@+*Q>+JI:5y@i{U"");
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      TreeSet<URL> treeSet0 = new TreeSet<URL>();
      PriorityQueue<URL> priorityQueue0 = new PriorityQueue<URL>((SortedSet<? extends URL>) treeSet0);
      ClasspathArchive classpathArchive0 = new ClasspathArchive(classLoader0, priorityQueue0);
      Finder finder0 = new Finder(classpathArchive0);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      // Undeclared exception!
      try { 
        finder0.readClassDef(sequenceInputStream0);
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
125,"    protected void readClassDef(final InputStream bytecode) throws IOException {
        try {
            new ClassReader(bytecode).accept(new Visitor(new InfoBuildingVisitor()), ASM_FLAGS);
        } finally {
            bytecode.close();
        }
    }","  public void test15()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      LinkedHashSet<URL> linkedHashSet0 = new LinkedHashSet<URL>(82, 82);
      List<Archive> list0 = ClasspathArchive.archives(classLoader0, (Iterable<URL>) linkedHashSet0);
      CompositeArchive compositeArchive0 = new CompositeArchive(list0);
      Finder finder0 = new Finder(compositeArchive0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      try { 
        finder0.readClassDef(pipedInputStream0);
        fail(""Expecting exception: IOException"");
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException(""java.io.PipedInputStream"", e);
      }
  }"
126,"    Finder(final Archive archive) {
        super(archive, false);
        classfileAnnotations = CLASSFILE_ANNOTATIONS.get();
        CLASSFILE_ANNOTATIONS.remove();
        inflater = new Inflater(classfileAnnotations);
        enableFindImplementations();
        enableFindSubclasses();
    }","  public void test16()  throws Throwable  {
      URL[] uRLArray0 = new URL[4];
      Class<MetaAnnotatedField> class0 = MetaAnnotatedField.class;
      MetaAnnotatedClass<MetaAnnotatedField> metaAnnotatedClass0 = new MetaAnnotatedClass<MetaAnnotatedField>(class0);
      URL uRL0 = metaAnnotatedClass0.getResource("""");
      uRLArray0[0] = uRL0;
      ClasspathArchive classpathArchive0 = new ClasspathArchive((ClassLoader) null, uRLArray0);
      Finder finder0 = new Finder(classpathArchive0);
  }"
127,"    Finder(final Archive archive) {
        super(archive, false);
        classfileAnnotations = CLASSFILE_ANNOTATIONS.get();
        CLASSFILE_ANNOTATIONS.remove();
        inflater = new Inflater(classfileAnnotations);
        enableFindImplementations();
        enableFindSubclasses();
    }","  public void test17()  throws Throwable  {
      Finder finder0 = null;
      try {
        finder0 = new Finder((Archive) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.xbean.finder.AnnotationFinder"", e);
      }
  }"
128,"    Finder(final Archive archive) {
        super(archive, false);
        classfileAnnotations = CLASSFILE_ANNOTATIONS.get();
        CLASSFILE_ANNOTATIONS.remove();
        inflater = new Inflater(classfileAnnotations);
        enableFindImplementations();
        enableFindSubclasses();
    }","  public void test18()  throws Throwable  {
      Class<ClassesArchive>[] classArray0 = (Class<ClassesArchive>[]) Array.newInstance(Class.class, 1);
      Class<ClassesArchive> class0 = ClassesArchive.class;
      classArray0[0] = class0;
      ClassesArchive classesArchive0 = new ClassesArchive(classArray0);
      Finder finder0 = new Finder(classesArchive0);
}"
129,"    public WithAnnotations withAnnotations() {
        return withAnnotations;
    }","  public void test19()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      File file0 = MockFile.createTempFile(""XV/GffJ6"", ""AX/ 1FZ^+%"");
      FileArchive fileArchive0 = new FileArchive(classLoader0, file0);
      Finder finder0 = new Finder(fileArchive0);
      Finder.WithAnnotations finder_WithAnnotations0 = finder0.withAnnotations();
      Class<Annotation> class0 = Annotation.class;
      List<Annotated<Constructor<?>>> list0 = finder_WithAnnotations0.findAnnotatedConstructors(class0);
}"
130,"    public WithAnnotations withAnnotations() {
        return withAnnotations;
    }","  public void test20()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      File file0 = MockFile.createTempFile(""file"", (String) null);
      FileArchive fileArchive0 = new FileArchive(classLoader0, file0, ""file"");
      ContainsFilter containsFilter0 = new ContainsFilter(""file"");
      ExcludeIncludeFilter excludeIncludeFilter0 = new ExcludeIncludeFilter(containsFilter0, containsFilter0);
      FilteredArchive filteredArchive0 = new FilteredArchive(fileArchive0, excludeIncludeFilter0);
      Finder finder0 = new Finder(filteredArchive0);
      Finder.WithAnnotations finder_WithAnnotations0 = finder0.withAnnotations();
      Class<Annotation> class0 = Annotation.class;
      List<Annotated<Parameter<Constructor<?>>>> list0 = finder_WithAnnotations0.findAnnotatedConstructorParameters(class0);
}"
131,"    public WithAnnotations withAnnotations() {
        return withAnnotations;
    }","  public void test21()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      File file0 = MockFile.createTempFile(""XV/GffJ6"", ""AX/ 1FZ^+%"");
      FileArchive fileArchive0 = new FileArchive(classLoader0, file0);
      Finder finder0 = new Finder(fileArchive0);
      Finder.WithAnnotations finder_WithAnnotations0 = finder0.withAnnotations();
      Class<Annotation> class0 = Annotation.class;
      List<Annotated<Package>> list0 = finder_WithAnnotations0.findAnnotatedPackages(class0);
}"
132,"    public WithAnnotations withAnnotations() {
        return withAnnotations;
    }","  public void test22()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      File file0 = MockFile.createTempFile(""file"", (String) null);
      FileArchive fileArchive0 = new FileArchive(classLoader0, file0, ""file"");
      ContainsFilter containsFilter0 = new ContainsFilter(""file"");
      ExcludeIncludeFilter excludeIncludeFilter0 = new ExcludeIncludeFilter(containsFilter0, containsFilter0);
      FilteredArchive filteredArchive0 = new FilteredArchive(fileArchive0, excludeIncludeFilter0);
      Finder finder0 = new Finder(filteredArchive0);
      Finder.WithAnnotations finder_WithAnnotations0 = finder0.withAnnotations();
      List<Annotated<Class<?>>> list0 = finder_WithAnnotations0.getAllClasses();
}"
133,"    public WithAnnotations withAnnotations() {
        return withAnnotations;
    }","  public void test23()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Stack<URL> stack0 = new Stack<URL>();
      ClasspathArchive classpathArchive0 = new ClasspathArchive(classLoader0, stack0);
      Finder finder0 = new Finder(classpathArchive0);
      Finder.WithAnnotations finder_WithAnnotations0 = finder0.withAnnotations();
      Class<Annotation> class0 = Annotation.class;
      List<Annotated<Parameter<Method>>> list0 = finder_WithAnnotations0.findAnnotatedMethodParameters(class0);
}"
134,"    public WithAnnotations withAnnotations() {
        return withAnnotations;
    }","  public void test24()  throws Throwable  {
      Class<Annotation>[] classArray0 = (Class<Annotation>[]) Array.newInstance(Class.class, 1);
      Class<Annotation> class0 = Annotation.class;
      ClassesArchive classesArchive0 = new ClassesArchive(classArray0);
      Finder finder0 = new Finder(classesArchive0);
      Finder.WithAnnotations finder_WithAnnotations0 = finder0.withAnnotations();
      List<Annotated<Class<?>>> list0 = finder_WithAnnotations0.findAnnotatedClasses(class0);
}"
135,"    public WithAnnotations withAnnotations() {
        return withAnnotations;
    }","  public void test25()  throws Throwable  {
      Class<WeaveInterest>[] classArray0 = (Class<WeaveInterest>[]) Array.newInstance(Class.class, 5);
      ClassesArchive classesArchive0 = new ClassesArchive(classArray0);
      Finder finder0 = new Finder(classesArchive0);
      Finder.WithAnnotations finder_WithAnnotations0 = finder0.withAnnotations();
      Class<Annotation> class0 = Annotation.class;
      List<Annotated<Method>> list0 = finder_WithAnnotations0.findAnnotatedMethods(class0);
}"
136,"    Class<?> toClass(final Type type) {
        final String className;
        if (type.getSort() == Type.ARRAY) {
            className = type.getElementType().getClassName();
        } else {
            className = type.getClassName();
        }
        Class<?> result;
        try {
            result = Class.forName(className);
        } catch (final ClassNotFoundException e) {
            try {
                result = getArchive().loadClass(className);
            } catch (final ClassNotFoundException e1) {
                throw new RuntimeException(e1);
            }
        }
        if (type.getSort() == Type.ARRAY) {
            final int[] dims = new int[type.getDimensions()];
            Arrays.fill(dims, 0);
            result = Array.newInstance(result, dims).getClass();
        }
        return result;
    }","  public void test26()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      File file0 = MockFile.createTempFile(""file"", (String) null);
      FileArchive fileArchive0 = new FileArchive(classLoader0, file0, ""file"");
      ContainsFilter containsFilter0 = new ContainsFilter(""file"");
      ExcludeIncludeFilter excludeIncludeFilter0 = new ExcludeIncludeFilter(containsFilter0, containsFilter0);
      FilteredArchive filteredArchive0 = new FilteredArchive(fileArchive0, excludeIncludeFilter0);
      Finder finder0 = new Finder(filteredArchive0);
      Type type0 = Type.getObjectType(""[`/mx~"");
      // Undeclared exception!
      try { 
        finder0.toClass(type0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.xbean.asm6.Type"", e);
      }
  }"
137,"    Class<?> toClass(final Type type) {
        final String className;
        if (type.getSort() == Type.ARRAY) {
            className = type.getElementType().getClassName();
        } else {
            className = type.getClassName();
        }
        Class<?> result;
        try {
            result = Class.forName(className);
        } catch (final ClassNotFoundException e) {
            try {
                result = getArchive().loadClass(className);
            } catch (final ClassNotFoundException e1) {
                throw new RuntimeException(e1);
            }
        }
        if (type.getSort() == Type.ARRAY) {
            final int[] dims = new int[type.getDimensions()];
            Arrays.fill(dims, 0);
            result = Array.newInstance(result, dims).getClass();
        }
        return result;
    }","  public void test27()  throws Throwable  {
      Class<AnnotationFinder.MethodInfo>[] classArray0 = (Class<AnnotationFinder.MethodInfo>[]) Array.newInstance(Class.class, 8);
      ClassesArchive classesArchive0 = new ClassesArchive(classArray0);
      Finder finder0 = new Finder(classesArchive0);
      Type type0 = Type.getObjectType(""org.apache.commons.weaver.Finder$Visitor$1"");
      Class<?> class0 = finder0.toClass(type0);
}"
138,"    public ScanResult scan(final ScanRequest request) {
        final ScanResult result = new ScanResult();

        if (!request.isConstrained() || request.getSupertypes().contains(Object.class)) {
            for (final Annotated<Class<?>> type : this.withAnnotations().getAllClasses()) {
                result.getWeavable(type.get()).addAnnotations(type.getAnnotations());
            }
        } else {
            for (final WeaveInterest interest : request.getInterests()) {
                final ElementType target = interest.target;
                switch (target) {
                case PACKAGE:
                    for (final Annotated<Package> pkg : this.withAnnotations().findAnnotatedPackages(
                        interest.annotationType)) {
                        result.getWeavable(pkg.get()).addAnnotations(pkg.getAnnotations());
                    }
                    break;
                case TYPE:
                    for (final Annotated<Class<?>> type : this.withAnnotations().findAnnotatedClasses(
                        interest.annotationType)) {
                        result.getWeavable(type.get()).addAnnotations(type.getAnnotations());
                    }
                    break;
                case METHOD:
                    for (final Annotated<Method> method : this.withAnnotations().findAnnotatedMethods(
                        interest.annotationType)) {
                        result.getWeavable(method.get()).addAnnotations(method.getAnnotations());
                    }
                    break;
                case CONSTRUCTOR:
                    for (final Annotated<Constructor<?>> ctor : this.withAnnotations().findAnnotatedConstructors(
                        interest.annotationType)) {
                        result.getWeavable(ctor.get()).addAnnotations(ctor.getAnnotations());
                    }
                    break;
                case FIELD:
                        for (final Annotated<Field> fld : this.withAnnotations()
                            .findAnnotatedFields(interest.annotationType)) {
                            result.getWeavable(fld.get()).addAnnotations(fld.getAnnotations());
                        }
                        break;
                case PARAMETER:
                    for (final Annotated<Parameter<Method>> parameter : this.withAnnotations()
                        .findAnnotatedMethodParameters(interest.annotationType)) {
                            result.getWeavable(parameter.get().getDeclaringExecutable())
                                .getWeavableParameter(parameter.get().getIndex())
                                .addAnnotations(parameter.getAnnotations());
                        }
                    for (final Annotated<Parameter<Constructor<?>>> parameter : this.withAnnotations()
                        .findAnnotatedConstructorParameters(interest.annotationType)) {
                            result.getWeavable(parameter.get().getDeclaringExecutable())
                                .getWeavableParameter(parameter.get().getIndex())
                                .addAnnotations(parameter.getAnnotations());
                        }
                    break;
                default:
                    // should we log something?
                    break;
                }
            }
            request.getSupertypes().stream().map(this.withAnnotations()::findAssignableTypes)
                .flatMap(Collection::stream)
                .forEach(type -> result.getWeavable(type.get()).addAnnotations(type.getAnnotations()));
        }
        return inflater.inflate(result);
    }","  public void test28()  throws Throwable  {
      Class<String>[] classArray0 = (Class<String>[]) Array.newInstance(Class.class, 1);
      ClassesArchive classesArchive0 = new ClassesArchive(classArray0);
      Finder finder0 = new Finder(classesArchive0);
      ScanRequest scanRequest0 = new ScanRequest();
      Class<Annotation> class0 = Annotation.class;
      ElementType elementType0 = ElementType.TYPE_PARAMETER;
      WeaveInterest weaveInterest0 = WeaveInterest.of(class0, elementType0);
      ScanRequest scanRequest1 = scanRequest0.add(weaveInterest0);
      ScanResult scanResult0 = finder0.scan(scanRequest1);
}"
139,"    public ScanResult scan(final ScanRequest request) {
        final ScanResult result = new ScanResult();

        if (!request.isConstrained() || request.getSupertypes().contains(Object.class)) {
            for (final Annotated<Class<?>> type : this.withAnnotations().getAllClasses()) {
                result.getWeavable(type.get()).addAnnotations(type.getAnnotations());
            }
        } else {
            for (final WeaveInterest interest : request.getInterests()) {
                final ElementType target = interest.target;
                switch (target) {
                case PACKAGE:
                    for (final Annotated<Package> pkg : this.withAnnotations().findAnnotatedPackages(
                        interest.annotationType)) {
                        result.getWeavable(pkg.get()).addAnnotations(pkg.getAnnotations());
                    }
                    break;
                case TYPE:
                    for (final Annotated<Class<?>> type : this.withAnnotations().findAnnotatedClasses(
                        interest.annotationType)) {
                        result.getWeavable(type.get()).addAnnotations(type.getAnnotations());
                    }
                    break;
                case METHOD:
                    for (final Annotated<Method> method : this.withAnnotations().findAnnotatedMethods(
                        interest.annotationType)) {
                        result.getWeavable(method.get()).addAnnotations(method.getAnnotations());
                    }
                    break;
                case CONSTRUCTOR:
                    for (final Annotated<Constructor<?>> ctor : this.withAnnotations().findAnnotatedConstructors(
                        interest.annotationType)) {
                        result.getWeavable(ctor.get()).addAnnotations(ctor.getAnnotations());
                    }
                    break;
                case FIELD:
                        for (final Annotated<Field> fld : this.withAnnotations()
                            .findAnnotatedFields(interest.annotationType)) {
                            result.getWeavable(fld.get()).addAnnotations(fld.getAnnotations());
                        }
                        break;
                case PARAMETER:
                    for (final Annotated<Parameter<Method>> parameter : this.withAnnotations()
                        .findAnnotatedMethodParameters(interest.annotationType)) {
                            result.getWeavable(parameter.get().getDeclaringExecutable())
                                .getWeavableParameter(parameter.get().getIndex())
                                .addAnnotations(parameter.getAnnotations());
                        }
                    for (final Annotated<Parameter<Constructor<?>>> parameter : this.withAnnotations()
                        .findAnnotatedConstructorParameters(interest.annotationType)) {
                            result.getWeavable(parameter.get().getDeclaringExecutable())
                                .getWeavableParameter(parameter.get().getIndex())
                                .addAnnotations(parameter.getAnnotations());
                        }
                    break;
                default:
                    // should we log something?
                    break;
                }
            }
            request.getSupertypes().stream().map(this.withAnnotations()::findAssignableTypes)
                .flatMap(Collection::stream)
                .forEach(type -> result.getWeavable(type.get()).addAnnotations(type.getAnnotations()));
        }
        return inflater.inflate(result);
    }","  public void test29()  throws Throwable  {
      Class<String>[] classArray0 = (Class<String>[]) Array.newInstance(Class.class, 1);
      ClassesArchive classesArchive0 = new ClassesArchive(classArray0);
      Finder finder0 = new Finder(classesArchive0);
      ScanRequest scanRequest0 = new ScanRequest();
      Class<Annotation> class0 = Annotation.class;
      ElementType elementType0 = ElementType.FIELD;
      WeaveInterest weaveInterest0 = WeaveInterest.of(class0, elementType0);
      scanRequest0.add(weaveInterest0);
      ScanResult scanResult0 = finder0.scan(scanRequest0);
}"
140,"    public ScanResult scan(final ScanRequest request) {
        final ScanResult result = new ScanResult();

        if (!request.isConstrained() || request.getSupertypes().contains(Object.class)) {
            for (final Annotated<Class<?>> type : this.withAnnotations().getAllClasses()) {
                result.getWeavable(type.get()).addAnnotations(type.getAnnotations());
            }
        } else {
            for (final WeaveInterest interest : request.getInterests()) {
                final ElementType target = interest.target;
                switch (target) {
                case PACKAGE:
                    for (final Annotated<Package> pkg : this.withAnnotations().findAnnotatedPackages(
                        interest.annotationType)) {
                        result.getWeavable(pkg.get()).addAnnotations(pkg.getAnnotations());
                    }
                    break;
                case TYPE:
                    for (final Annotated<Class<?>> type : this.withAnnotations().findAnnotatedClasses(
                        interest.annotationType)) {
                        result.getWeavable(type.get()).addAnnotations(type.getAnnotations());
                    }
                    break;
                case METHOD:
                    for (final Annotated<Method> method : this.withAnnotations().findAnnotatedMethods(
                        interest.annotationType)) {
                        result.getWeavable(method.get()).addAnnotations(method.getAnnotations());
                    }
                    break;
                case CONSTRUCTOR:
                    for (final Annotated<Constructor<?>> ctor : this.withAnnotations().findAnnotatedConstructors(
                        interest.annotationType)) {
                        result.getWeavable(ctor.get()).addAnnotations(ctor.getAnnotations());
                    }
                    break;
                case FIELD:
                        for (final Annotated<Field> fld : this.withAnnotations()
                            .findAnnotatedFields(interest.annotationType)) {
                            result.getWeavable(fld.get()).addAnnotations(fld.getAnnotations());
                        }
                        break;
                case PARAMETER:
                    for (final Annotated<Parameter<Method>> parameter : this.withAnnotations()
                        .findAnnotatedMethodParameters(interest.annotationType)) {
                            result.getWeavable(parameter.get().getDeclaringExecutable())
                                .getWeavableParameter(parameter.get().getIndex())
                                .addAnnotations(parameter.getAnnotations());
                        }
                    for (final Annotated<Parameter<Constructor<?>>> parameter : this.withAnnotations()
                        .findAnnotatedConstructorParameters(interest.annotationType)) {
                            result.getWeavable(parameter.get().getDeclaringExecutable())
                                .getWeavableParameter(parameter.get().getIndex())
                                .addAnnotations(parameter.getAnnotations());
                        }
                    break;
                default:
                    // should we log something?
                    break;
                }
            }
            request.getSupertypes().stream().map(this.withAnnotations()::findAssignableTypes)
                .flatMap(Collection::stream)
                .forEach(type -> result.getWeavable(type.get()).addAnnotations(type.getAnnotations()));
        }
        return inflater.inflate(result);
    }","  public void test30()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      File file0 = MockFile.createTempFile(""file"", ""file"");
      FileArchive fileArchive0 = new FileArchive(classLoader0, file0, ""file"");
      ContainsFilter containsFilter0 = new ContainsFilter(""file"");
      ExcludeIncludeFilter excludeIncludeFilter0 = new ExcludeIncludeFilter(containsFilter0, containsFilter0);
      FilteredArchive filteredArchive0 = new FilteredArchive(fileArchive0, excludeIncludeFilter0);
      Finder finder0 = new Finder(filteredArchive0);
      ScanRequest scanRequest0 = new ScanRequest();
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 1);
      Class<Object> class0 = Object.class;
      classArray0[0] = class0;
      ScanRequest scanRequest1 = scanRequest0.addSupertypes(classArray0);
      ScanResult scanResult0 = finder0.scan(scanRequest1);
}"
141,"    public WithAnnotations withAnnotations() {
        return withAnnotations;
    }","  public void test31()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      URL[] uRLArray0 = new URL[2];
      ClasspathArchive classpathArchive0 = new ClasspathArchive(classLoader0, uRLArray0);
      Finder finder0 = new Finder(classpathArchive0);
      Finder.WithAnnotations finder_WithAnnotations0 = finder0.withAnnotations();
      Class<Annotation> class0 = Annotation.class;
      List<Annotated<Class<?>>> list0 = finder_WithAnnotations0.findAssignableTypes(class0);
}"
142,"    public WithAnnotations withAnnotations() {
        return withAnnotations;
    }","  public void test32()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      URL[] uRLArray0 = new URL[2];
      ClasspathArchive classpathArchive0 = new ClasspathArchive(classLoader0, uRLArray0);
      Finder finder0 = new Finder(classpathArchive0);
      Finder.WithAnnotations finder_WithAnnotations0 = finder0.withAnnotations();
      Class<AnnotationFinder.MethodInfo> class0 = AnnotationFinder.MethodInfo.class;
      List<Annotated<Class<?>>> list0 = finder_WithAnnotations0.findAssignableTypes(class0);
}"
143,"    Finder(final Archive archive) {
        super(archive, false);
        classfileAnnotations = CLASSFILE_ANNOTATIONS.get();
        CLASSFILE_ANNOTATIONS.remove();
        inflater = new Inflater(classfileAnnotations);
        enableFindImplementations();
        enableFindSubclasses();
    }","  public void test33()  throws Throwable  {
      Class<WeaveInterest>[] classArray0 = (Class<WeaveInterest>[]) Array.newInstance(Class.class, 1);
      ClassesArchive classesArchive0 = new ClassesArchive(classArray0);
      Finder finder0 = new Finder(classesArchive0);
      Class<Annotation> class0 = Annotation.class;
      ElementType elementType0 = ElementType.METHOD;
      WeaveInterest weaveInterest0 = WeaveInterest.of(class0, elementType0);
      String[] stringArray0 = new String[1];
      AnnotationFinder.ClassInfo annotationFinder_ClassInfo0 = finder0.new ClassInfo(weaveInterest0.annotationType);
      AnnotationFinder.InfoBuildingVisitor annotationFinder_InfoBuildingVisitor0 = finder0.new InfoBuildingVisitor(annotationFinder_ClassInfo0);
      Finder.Visitor finder_Visitor0 = finder0.new Visitor(annotationFinder_InfoBuildingVisitor0);
      MethodVisitor methodVisitor0 = finder_Visitor0.visitMethod((-3483), """", """", """", stringArray0);
}"
144,"    Finder(final Archive archive) {
        super(archive, false);
        classfileAnnotations = CLASSFILE_ANNOTATIONS.get();
        CLASSFILE_ANNOTATIONS.remove();
        inflater = new Inflater(classfileAnnotations);
        enableFindImplementations();
        enableFindSubclasses();
    }","  public void test34()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      File file0 = MockFile.createTempFile(""file"", ""file"");
      FileArchive fileArchive0 = new FileArchive(classLoader0, file0, ""file"");
      ContainsFilter containsFilter0 = new ContainsFilter(""file"");
      ExcludeIncludeFilter excludeIncludeFilter0 = new ExcludeIncludeFilter(containsFilter0, containsFilter0);
      FilteredArchive filteredArchive0 = new FilteredArchive(fileArchive0, excludeIncludeFilter0);
      Finder finder0 = new Finder(filteredArchive0);
      Finder.Visitor finder_Visitor0 = finder0.new Visitor((AnnotationFinder.InfoBuildingVisitor) null);
      AnnotationVisitor annotationVisitor0 = finder_Visitor0.visitAnnotation((String) null, true);
}"
145,"    Finder(final Archive archive) {
        super(archive, false);
        classfileAnnotations = CLASSFILE_ANNOTATIONS.get();
        CLASSFILE_ANNOTATIONS.remove();
        inflater = new Inflater(classfileAnnotations);
        enableFindImplementations();
        enableFindSubclasses();
    }","  public void test35()  throws Throwable  {
      Class<String>[] classArray0 = (Class<String>[]) Array.newInstance(Class.class, 3);
      ClassesArchive classesArchive0 = new ClassesArchive(classArray0);
      Finder finder0 = new Finder(classesArchive0);
      Finder.Visitor finder_Visitor0 = finder0.new Visitor((AnnotationFinder.InfoBuildingVisitor) null);
      // Undeclared exception!
      try { 
        finder_Visitor0.visitAnnotation(""Array element "", false);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.weaver.Finder$Visitor"", e);
      }
  }"
146,"    Finder(final Archive archive) {
        super(archive, false);
        classfileAnnotations = CLASSFILE_ANNOTATIONS.get();
        CLASSFILE_ANNOTATIONS.remove();
        inflater = new Inflater(classfileAnnotations);
        enableFindImplementations();
        enableFindSubclasses();
    }","  public void test36()  throws Throwable  {
      Class<AnnotationFinder.MethodInfo>[] classArray0 = (Class<AnnotationFinder.MethodInfo>[]) Array.newInstance(Class.class, 8);
      ClassesArchive classesArchive0 = new ClassesArchive(classArray0);
      Finder finder0 = new Finder(classesArchive0);
      Class<Package> class0 = Package.class;
      AnnotationFinder.ClassInfo annotationFinder_ClassInfo0 = finder0.new ClassInfo(class0);
      AnnotationFinder.InfoBuildingVisitor annotationFinder_InfoBuildingVisitor0 = finder0.new InfoBuildingVisitor(annotationFinder_ClassInfo0);
      Finder.Visitor finder_Visitor0 = finder0.new Visitor(annotationFinder_InfoBuildingVisitor0);
      String[] stringArray0 = new String[5];
      MethodVisitor methodVisitor0 = finder_Visitor0.visitMethod(23, ""org.apache.commons.weaver.Finder$Visitor$1"", ""org.apache.commons.weaver.Finder$Visitor$1"", ""org.apache.commons.weaver.Finder$Visitor$1"", stringArray0);
}"
147,"    public ScanResult scan(final ScanRequest request) {
        final ScanResult result = new ScanResult();

        if (!request.isConstrained() || request.getSupertypes().contains(Object.class)) {
            for (final Annotated<Class<?>> type : this.withAnnotations().getAllClasses()) {
                result.getWeavable(type.get()).addAnnotations(type.getAnnotations());
            }
        } else {
            for (final WeaveInterest interest : request.getInterests()) {
                final ElementType target = interest.target;
                switch (target) {
                case PACKAGE:
                    for (final Annotated<Package> pkg : this.withAnnotations().findAnnotatedPackages(
                        interest.annotationType)) {
                        result.getWeavable(pkg.get()).addAnnotations(pkg.getAnnotations());
                    }
                    break;
                case TYPE:
                    for (final Annotated<Class<?>> type : this.withAnnotations().findAnnotatedClasses(
                        interest.annotationType)) {
                        result.getWeavable(type.get()).addAnnotations(type.getAnnotations());
                    }
                    break;
                case METHOD:
                    for (final Annotated<Method> method : this.withAnnotations().findAnnotatedMethods(
                        interest.annotationType)) {
                        result.getWeavable(method.get()).addAnnotations(method.getAnnotations());
                    }
                    break;
                case CONSTRUCTOR:
                    for (final Annotated<Constructor<?>> ctor : this.withAnnotations().findAnnotatedConstructors(
                        interest.annotationType)) {
                        result.getWeavable(ctor.get()).addAnnotations(ctor.getAnnotations());
                    }
                    break;
                case FIELD:
                        for (final Annotated<Field> fld : this.withAnnotations()
                            .findAnnotatedFields(interest.annotationType)) {
                            result.getWeavable(fld.get()).addAnnotations(fld.getAnnotations());
                        }
                        break;
                case PARAMETER:
                    for (final Annotated<Parameter<Method>> parameter : this.withAnnotations()
                        .findAnnotatedMethodParameters(interest.annotationType)) {
                            result.getWeavable(parameter.get().getDeclaringExecutable())
                                .getWeavableParameter(parameter.get().getIndex())
                                .addAnnotations(parameter.getAnnotations());
                        }
                    for (final Annotated<Parameter<Constructor<?>>> parameter : this.withAnnotations()
                        .findAnnotatedConstructorParameters(interest.annotationType)) {
                            result.getWeavable(parameter.get().getDeclaringExecutable())
                                .getWeavableParameter(parameter.get().getIndex())
                                .addAnnotations(parameter.getAnnotations());
                        }
                    break;
                default:
                    // should we log something?
                    break;
                }
            }
            request.getSupertypes().stream().map(this.withAnnotations()::findAssignableTypes)
                .flatMap(Collection::stream)
                .forEach(type -> result.getWeavable(type.get()).addAnnotations(type.getAnnotations()));
        }
        return inflater.inflate(result);
    }","  public void test37()  throws Throwable  {
      Class<String>[] classArray0 = (Class<String>[]) Array.newInstance(Class.class, 3);
      ClassesArchive classesArchive0 = new ClassesArchive(classArray0);
      Finder finder0 = new Finder(classesArchive0);
      ScanRequest scanRequest0 = new ScanRequest();
      Class<Annotation> class0 = Annotation.class;
      ElementType elementType0 = ElementType.TYPE;
      WeaveInterest weaveInterest0 = WeaveInterest.of(class0, elementType0);
      scanRequest0.add(weaveInterest0);
      ScanResult scanResult0 = finder0.scan(scanRequest0);
}"
148,"    public ScanResult scan(final ScanRequest request) {
        final ScanResult result = new ScanResult();

        if (!request.isConstrained() || request.getSupertypes().contains(Object.class)) {
            for (final Annotated<Class<?>> type : this.withAnnotations().getAllClasses()) {
                result.getWeavable(type.get()).addAnnotations(type.getAnnotations());
            }
        } else {
            for (final WeaveInterest interest : request.getInterests()) {
                final ElementType target = interest.target;
                switch (target) {
                case PACKAGE:
                    for (final Annotated<Package> pkg : this.withAnnotations().findAnnotatedPackages(
                        interest.annotationType)) {
                        result.getWeavable(pkg.get()).addAnnotations(pkg.getAnnotations());
                    }
                    break;
                case TYPE:
                    for (final Annotated<Class<?>> type : this.withAnnotations().findAnnotatedClasses(
                        interest.annotationType)) {
                        result.getWeavable(type.get()).addAnnotations(type.getAnnotations());
                    }
                    break;
                case METHOD:
                    for (final Annotated<Method> method : this.withAnnotations().findAnnotatedMethods(
                        interest.annotationType)) {
                        result.getWeavable(method.get()).addAnnotations(method.getAnnotations());
                    }
                    break;
                case CONSTRUCTOR:
                    for (final Annotated<Constructor<?>> ctor : this.withAnnotations().findAnnotatedConstructors(
                        interest.annotationType)) {
                        result.getWeavable(ctor.get()).addAnnotations(ctor.getAnnotations());
                    }
                    break;
                case FIELD:
                        for (final Annotated<Field> fld : this.withAnnotations()
                            .findAnnotatedFields(interest.annotationType)) {
                            result.getWeavable(fld.get()).addAnnotations(fld.getAnnotations());
                        }
                        break;
                case PARAMETER:
                    for (final Annotated<Parameter<Method>> parameter : this.withAnnotations()
                        .findAnnotatedMethodParameters(interest.annotationType)) {
                            result.getWeavable(parameter.get().getDeclaringExecutable())
                                .getWeavableParameter(parameter.get().getIndex())
                                .addAnnotations(parameter.getAnnotations());
                        }
                    for (final Annotated<Parameter<Constructor<?>>> parameter : this.withAnnotations()
                        .findAnnotatedConstructorParameters(interest.annotationType)) {
                            result.getWeavable(parameter.get().getDeclaringExecutable())
                                .getWeavableParameter(parameter.get().getIndex())
                                .addAnnotations(parameter.getAnnotations());
                        }
                    break;
                default:
                    // should we log something?
                    break;
                }
            }
            request.getSupertypes().stream().map(this.withAnnotations()::findAssignableTypes)
                .flatMap(Collection::stream)
                .forEach(type -> result.getWeavable(type.get()).addAnnotations(type.getAnnotations()));
        }
        return inflater.inflate(result);
    }","  public void test38()  throws Throwable  {
      Class<WeaveInterest>[] classArray0 = (Class<WeaveInterest>[]) Array.newInstance(Class.class, 8);
      ClassesArchive classesArchive0 = new ClassesArchive(classArray0);
      Finder finder0 = new Finder(classesArchive0);
      ScanRequest scanRequest0 = new ScanRequest();
      Class<Annotation> class0 = Annotation.class;
      ElementType elementType0 = ElementType.PACKAGE;
      WeaveInterest weaveInterest0 = WeaveInterest.of(class0, elementType0);
      ScanRequest scanRequest1 = scanRequest0.add(weaveInterest0);
      ScanResult scanResult0 = finder0.scan(scanRequest1);
}"
149,"    public ScanResult scan(final ScanRequest request) {
        final ScanResult result = new ScanResult();

        if (!request.isConstrained() || request.getSupertypes().contains(Object.class)) {
            for (final Annotated<Class<?>> type : this.withAnnotations().getAllClasses()) {
                result.getWeavable(type.get()).addAnnotations(type.getAnnotations());
            }
        } else {
            for (final WeaveInterest interest : request.getInterests()) {
                final ElementType target = interest.target;
                switch (target) {
                case PACKAGE:
                    for (final Annotated<Package> pkg : this.withAnnotations().findAnnotatedPackages(
                        interest.annotationType)) {
                        result.getWeavable(pkg.get()).addAnnotations(pkg.getAnnotations());
                    }
                    break;
                case TYPE:
                    for (final Annotated<Class<?>> type : this.withAnnotations().findAnnotatedClasses(
                        interest.annotationType)) {
                        result.getWeavable(type.get()).addAnnotations(type.getAnnotations());
                    }
                    break;
                case METHOD:
                    for (final Annotated<Method> method : this.withAnnotations().findAnnotatedMethods(
                        interest.annotationType)) {
                        result.getWeavable(method.get()).addAnnotations(method.getAnnotations());
                    }
                    break;
                case CONSTRUCTOR:
                    for (final Annotated<Constructor<?>> ctor : this.withAnnotations().findAnnotatedConstructors(
                        interest.annotationType)) {
                        result.getWeavable(ctor.get()).addAnnotations(ctor.getAnnotations());
                    }
                    break;
                case FIELD:
                        for (final Annotated<Field> fld : this.withAnnotations()
                            .findAnnotatedFields(interest.annotationType)) {
                            result.getWeavable(fld.get()).addAnnotations(fld.getAnnotations());
                        }
                        break;
                case PARAMETER:
                    for (final Annotated<Parameter<Method>> parameter : this.withAnnotations()
                        .findAnnotatedMethodParameters(interest.annotationType)) {
                            result.getWeavable(parameter.get().getDeclaringExecutable())
                                .getWeavableParameter(parameter.get().getIndex())
                                .addAnnotations(parameter.getAnnotations());
                        }
                    for (final Annotated<Parameter<Constructor<?>>> parameter : this.withAnnotations()
                        .findAnnotatedConstructorParameters(interest.annotationType)) {
                            result.getWeavable(parameter.get().getDeclaringExecutable())
                                .getWeavableParameter(parameter.get().getIndex())
                                .addAnnotations(parameter.getAnnotations());
                        }
                    break;
                default:
                    // should we log something?
                    break;
                }
            }
            request.getSupertypes().stream().map(this.withAnnotations()::findAssignableTypes)
                .flatMap(Collection::stream)
                .forEach(type -> result.getWeavable(type.get()).addAnnotations(type.getAnnotations()));
        }
        return inflater.inflate(result);
    }","  public void test39()  throws Throwable  {
      Class<WeaveInterest>[] classArray0 = (Class<WeaveInterest>[]) Array.newInstance(Class.class, 8);
      ClassesArchive classesArchive0 = new ClassesArchive(classArray0);
      Finder finder0 = new Finder(classesArchive0);
      ScanRequest scanRequest0 = new ScanRequest();
      Class<Annotation> class0 = Annotation.class;
      ElementType elementType0 = ElementType.CONSTRUCTOR;
      WeaveInterest weaveInterest0 = WeaveInterest.of(class0, elementType0);
      ScanRequest scanRequest1 = scanRequest0.add(weaveInterest0);
      ScanResult scanResult0 = finder0.scan(scanRequest1);
}"
150,"    public ScanResult scan(final ScanRequest request) {
        final ScanResult result = new ScanResult();

        if (!request.isConstrained() || request.getSupertypes().contains(Object.class)) {
            for (final Annotated<Class<?>> type : this.withAnnotations().getAllClasses()) {
                result.getWeavable(type.get()).addAnnotations(type.getAnnotations());
            }
        } else {
            for (final WeaveInterest interest : request.getInterests()) {
                final ElementType target = interest.target;
                switch (target) {
                case PACKAGE:
                    for (final Annotated<Package> pkg : this.withAnnotations().findAnnotatedPackages(
                        interest.annotationType)) {
                        result.getWeavable(pkg.get()).addAnnotations(pkg.getAnnotations());
                    }
                    break;
                case TYPE:
                    for (final Annotated<Class<?>> type : this.withAnnotations().findAnnotatedClasses(
                        interest.annotationType)) {
                        result.getWeavable(type.get()).addAnnotations(type.getAnnotations());
                    }
                    break;
                case METHOD:
                    for (final Annotated<Method> method : this.withAnnotations().findAnnotatedMethods(
                        interest.annotationType)) {
                        result.getWeavable(method.get()).addAnnotations(method.getAnnotations());
                    }
                    break;
                case CONSTRUCTOR:
                    for (final Annotated<Constructor<?>> ctor : this.withAnnotations().findAnnotatedConstructors(
                        interest.annotationType)) {
                        result.getWeavable(ctor.get()).addAnnotations(ctor.getAnnotations());
                    }
                    break;
                case FIELD:
                        for (final Annotated<Field> fld : this.withAnnotations()
                            .findAnnotatedFields(interest.annotationType)) {
                            result.getWeavable(fld.get()).addAnnotations(fld.getAnnotations());
                        }
                        break;
                case PARAMETER:
                    for (final Annotated<Parameter<Method>> parameter : this.withAnnotations()
                        .findAnnotatedMethodParameters(interest.annotationType)) {
                            result.getWeavable(parameter.get().getDeclaringExecutable())
                                .getWeavableParameter(parameter.get().getIndex())
                                .addAnnotations(parameter.getAnnotations());
                        }
                    for (final Annotated<Parameter<Constructor<?>>> parameter : this.withAnnotations()
                        .findAnnotatedConstructorParameters(interest.annotationType)) {
                            result.getWeavable(parameter.get().getDeclaringExecutable())
                                .getWeavableParameter(parameter.get().getIndex())
                                .addAnnotations(parameter.getAnnotations());
                        }
                    break;
                default:
                    // should we log something?
                    break;
                }
            }
            request.getSupertypes().stream().map(this.withAnnotations()::findAssignableTypes)
                .flatMap(Collection::stream)
                .forEach(type -> result.getWeavable(type.get()).addAnnotations(type.getAnnotations()));
        }
        return inflater.inflate(result);
    }","  public void test40()  throws Throwable  {
      Class<String>[] classArray0 = (Class<String>[]) Array.newInstance(Class.class, 3);
      ClassesArchive classesArchive0 = new ClassesArchive(classArray0);
      Finder finder0 = new Finder(classesArchive0);
      ScanRequest scanRequest0 = new ScanRequest();
      Class<Annotation> class0 = Annotation.class;
      ElementType elementType0 = ElementType.METHOD;
      WeaveInterest weaveInterest0 = WeaveInterest.of(class0, elementType0);
      ScanRequest scanRequest1 = scanRequest0.add(weaveInterest0);
      ScanResult scanResult0 = finder0.scan(scanRequest1);
}"
151,"    public ScanResult scan(final ScanRequest request) {
        final ScanResult result = new ScanResult();

        if (!request.isConstrained() || request.getSupertypes().contains(Object.class)) {
            for (final Annotated<Class<?>> type : this.withAnnotations().getAllClasses()) {
                result.getWeavable(type.get()).addAnnotations(type.getAnnotations());
            }
        } else {
            for (final WeaveInterest interest : request.getInterests()) {
                final ElementType target = interest.target;
                switch (target) {
                case PACKAGE:
                    for (final Annotated<Package> pkg : this.withAnnotations().findAnnotatedPackages(
                        interest.annotationType)) {
                        result.getWeavable(pkg.get()).addAnnotations(pkg.getAnnotations());
                    }
                    break;
                case TYPE:
                    for (final Annotated<Class<?>> type : this.withAnnotations().findAnnotatedClasses(
                        interest.annotationType)) {
                        result.getWeavable(type.get()).addAnnotations(type.getAnnotations());
                    }
                    break;
                case METHOD:
                    for (final Annotated<Method> method : this.withAnnotations().findAnnotatedMethods(
                        interest.annotationType)) {
                        result.getWeavable(method.get()).addAnnotations(method.getAnnotations());
                    }
                    break;
                case CONSTRUCTOR:
                    for (final Annotated<Constructor<?>> ctor : this.withAnnotations().findAnnotatedConstructors(
                        interest.annotationType)) {
                        result.getWeavable(ctor.get()).addAnnotations(ctor.getAnnotations());
                    }
                    break;
                case FIELD:
                        for (final Annotated<Field> fld : this.withAnnotations()
                            .findAnnotatedFields(interest.annotationType)) {
                            result.getWeavable(fld.get()).addAnnotations(fld.getAnnotations());
                        }
                        break;
                case PARAMETER:
                    for (final Annotated<Parameter<Method>> parameter : this.withAnnotations()
                        .findAnnotatedMethodParameters(interest.annotationType)) {
                            result.getWeavable(parameter.get().getDeclaringExecutable())
                                .getWeavableParameter(parameter.get().getIndex())
                                .addAnnotations(parameter.getAnnotations());
                        }
                    for (final Annotated<Parameter<Constructor<?>>> parameter : this.withAnnotations()
                        .findAnnotatedConstructorParameters(interest.annotationType)) {
                            result.getWeavable(parameter.get().getDeclaringExecutable())
                                .getWeavableParameter(parameter.get().getIndex())
                                .addAnnotations(parameter.getAnnotations());
                        }
                    break;
                default:
                    // should we log something?
                    break;
                }
            }
            request.getSupertypes().stream().map(this.withAnnotations()::findAssignableTypes)
                .flatMap(Collection::stream)
                .forEach(type -> result.getWeavable(type.get()).addAnnotations(type.getAnnotations()));
        }
        return inflater.inflate(result);
    }","  public void test41()  throws Throwable  {
      Class<String>[] classArray0 = (Class<String>[]) Array.newInstance(Class.class, 3);
      ClassesArchive classesArchive0 = new ClassesArchive(classArray0);
      Finder finder0 = new Finder(classesArchive0);
      ScanRequest scanRequest0 = new ScanRequest();
      Class<Annotation> class0 = Annotation.class;
      ElementType elementType0 = ElementType.PARAMETER;
      WeaveInterest weaveInterest0 = WeaveInterest.of(class0, elementType0);
      ScanRequest scanRequest1 = scanRequest0.add(weaveInterest0);
      ScanResult scanResult0 = finder0.scan(scanRequest1);
}"
152,"    public AnnotationFinder select(final Class<?>... arg0) {
        throw new UnsupportedOperationException();
    }","  public void test42()  throws Throwable  {
      Class<AnnotationFinder.MethodInfo>[] classArray0 = (Class<AnnotationFinder.MethodInfo>[]) Array.newInstance(Class.class, 8);
      ClassesArchive classesArchive0 = new ClassesArchive(classArray0);
      Finder finder0 = new Finder(classesArchive0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      // Undeclared exception!
      try { 
        finder0.select((Iterable<String>) linkedList0);
        fail(""Expecting exception: UnsupportedOperationException"");
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.weaver.Finder"", e);
      }
  }"
153,"    public AnnotationFinder select(final Class<?>... arg0) {
        throw new UnsupportedOperationException();
    }","  public void test43()  throws Throwable  {
      Class<WeaveInterest>[] classArray0 = (Class<WeaveInterest>[]) Array.newInstance(Class.class, 8);
      ClassesArchive classesArchive0 = new ClassesArchive(classArray0);
      Finder finder0 = new Finder(classesArchive0);
      String[] stringArray0 = new String[18];
      // Undeclared exception!
      try { 
        finder0.select(stringArray0);
        fail(""Expecting exception: UnsupportedOperationException"");
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.weaver.Finder"", e);
      }
  }"
154,"    public AnnotationFinder select(final Class<?>... arg0) {
        throw new UnsupportedOperationException();
    }","  public void test44()  throws Throwable  {
      Class<WeaveInterest>[] classArray0 = (Class<WeaveInterest>[]) Array.newInstance(Class.class, 0);
      ClassesArchive classesArchive0 = new ClassesArchive(classArray0);
      Finder finder0 = new Finder(classesArchive0);
      // Undeclared exception!
      try { 
        finder0.select(classArray0);
        fail(""Expecting exception: UnsupportedOperationException"");
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.weaver.Finder"", e);
      }
  }"
155,"    public WithAnnotations withAnnotations() {
        return withAnnotations;
    }","  public void test45()  throws Throwable  {
      Class<String>[] classArray0 = (Class<String>[]) Array.newInstance(Class.class, 3);
      ClassesArchive classesArchive0 = new ClassesArchive(classArray0);
      Finder finder0 = new Finder(classesArchive0);
      Class<Annotation> class0 = Annotation.class;
      Finder.WithAnnotations finder_WithAnnotations0 = finder0.withAnnotations();
      List<Annotated<Field>> list0 = finder_WithAnnotations0.findAnnotatedFields(class0);
}"
156,"    public ScanResult scan(final ScanRequest request) {
        final ScanResult result = new ScanResult();

        if (!request.isConstrained() || request.getSupertypes().contains(Object.class)) {
            for (final Annotated<Class<?>> type : this.withAnnotations().getAllClasses()) {
                result.getWeavable(type.get()).addAnnotations(type.getAnnotations());
            }
        } else {
            for (final WeaveInterest interest : request.getInterests()) {
                final ElementType target = interest.target;
                switch (target) {
                case PACKAGE:
                    for (final Annotated<Package> pkg : this.withAnnotations().findAnnotatedPackages(
                        interest.annotationType)) {
                        result.getWeavable(pkg.get()).addAnnotations(pkg.getAnnotations());
                    }
                    break;
                case TYPE:
                    for (final Annotated<Class<?>> type : this.withAnnotations().findAnnotatedClasses(
                        interest.annotationType)) {
                        result.getWeavable(type.get()).addAnnotations(type.getAnnotations());
                    }
                    break;
                case METHOD:
                    for (final Annotated<Method> method : this.withAnnotations().findAnnotatedMethods(
                        interest.annotationType)) {
                        result.getWeavable(method.get()).addAnnotations(method.getAnnotations());
                    }
                    break;
                case CONSTRUCTOR:
                    for (final Annotated<Constructor<?>> ctor : this.withAnnotations().findAnnotatedConstructors(
                        interest.annotationType)) {
                        result.getWeavable(ctor.get()).addAnnotations(ctor.getAnnotations());
                    }
                    break;
                case FIELD:
                        for (final Annotated<Field> fld : this.withAnnotations()
                            .findAnnotatedFields(interest.annotationType)) {
                            result.getWeavable(fld.get()).addAnnotations(fld.getAnnotations());
                        }
                        break;
                case PARAMETER:
                    for (final Annotated<Parameter<Method>> parameter : this.withAnnotations()
                        .findAnnotatedMethodParameters(interest.annotationType)) {
                            result.getWeavable(parameter.get().getDeclaringExecutable())
                                .getWeavableParameter(parameter.get().getIndex())
                                .addAnnotations(parameter.getAnnotations());
                        }
                    for (final Annotated<Parameter<Constructor<?>>> parameter : this.withAnnotations()
                        .findAnnotatedConstructorParameters(interest.annotationType)) {
                            result.getWeavable(parameter.get().getDeclaringExecutable())
                                .getWeavableParameter(parameter.get().getIndex())
                                .addAnnotations(parameter.getAnnotations());
                        }
                    break;
                default:
                    // should we log something?
                    break;
                }
            }
            request.getSupertypes().stream().map(this.withAnnotations()::findAssignableTypes)
                .flatMap(Collection::stream)
                .forEach(type -> result.getWeavable(type.get()).addAnnotations(type.getAnnotations()));
        }
        return inflater.inflate(result);
    }","  public void test46()  throws Throwable  {
      Class<AnnotationFinder.MethodInfo>[] classArray0 = (Class<AnnotationFinder.MethodInfo>[]) Array.newInstance(Class.class, 8);
      Class<AnnotationFinder.MethodInfo> class0 = AnnotationFinder.MethodInfo.class;
      classArray0[1] = class0;
      ClassesArchive classesArchive0 = new ClassesArchive(classArray0);
      Finder finder0 = new Finder(classesArchive0);
      ScanRequest scanRequest0 = new ScanRequest();
      ScanResult scanResult0 = finder0.scan(scanRequest0);
}"
157,"    public WeaveProcessor(final List<String> classpath, final File target, final Properties configuration) {
        super(classpath, target, configuration, getServiceInstances(Weaver.class));
    }","  public void test0()  throws Throwable  {
      Vector<String> vector0 = new Vector<String>();
      TreeSet<TestWeaver> treeSet0 = new TreeSet<TestWeaver>();
      LinkedList<Weaver> linkedList0 = new LinkedList<Weaver>(treeSet0);
      WeaveProcessor weaveProcessor0 = null;
      try {
        weaveProcessor0 = new WeaveProcessor(vector0, (File) null, (Properties) null, linkedList0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // target
         //
         verifyException(""org.apache.commons.lang3.Validate"", e);
      }
  }"
158,"    public WeaveProcessor(final List<String> classpath, final File target, final Properties configuration) {
        super(classpath, target, configuration, getServiceInstances(Weaver.class));
    }","  public void test1()  throws Throwable  {
      List<String> list0 = ResourceBundle.Control.FORMAT_CLASS;
      MockFile mockFile0 = new MockFile(""ti"");
      mockFile0.createNewFile();
      Properties properties0 = new Properties();
      Vector<Weaver> vector0 = new Vector<Weaver>();
      WeaveProcessor weaveProcessor0 = null;
      try {
        weaveProcessor0 = new WeaveProcessor(list0, mockFile0, properties0, vector0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // ti is not a directory
         //
         verifyException(""org.apache.commons.lang3.Validate"", e);
      }
  }"
159,"    public WeaveProcessor(final List<String> classpath, final File target, final Properties configuration) {
        super(classpath, target, configuration, getServiceInstances(Weaver.class));
    }","  public void test2()  throws Throwable  {
      Properties properties0 = new Properties();
      WeaveProcessor weaveProcessor0 = null;
      try {
        weaveProcessor0 = new WeaveProcessor((List<String>) null, (File) null, properties0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // classpath
         //
         verifyException(""org.apache.commons.lang3.Validate"", e);
      }
  }"
160,"    public void weave() {
        if (!target.exists()) {
            log.warning(() -> String.format(""Target directory %s does not exist; nothing to do!"", target));
        }
        for (final Weaver weaver : providers) {
            final WeaveEnvironment env = new LocalWeaveEnvironment(target, classLoader, configuration,
                Logger.getLogger(weaver.getClass().getName()));
            weaver.process(env, finder);
        }
    }","  public void test3()  throws Throwable  {
      LinkedList<Weaver> linkedList0 = new LinkedList<Weaver>();
      Stack<String> stack0 = new Stack<String>();
      MockFile mockFile0 = new MockFile(""4Uij@V\u0005,(bC?=T"");
      Properties properties0 = new Properties();
      WeaveProcessor weaveProcessor0 = new WeaveProcessor(stack0, mockFile0, properties0, linkedList0);
      weaveProcessor0.weave();
  }"
161,"    public void weave() {
        if (!target.exists()) {
            log.warning(() -> String.format(""Target directory %s does not exist; nothing to do!"", target));
        }
        for (final Weaver weaver : providers) {
            final WeaveEnvironment env = new LocalWeaveEnvironment(target, classLoader, configuration,
                Logger.getLogger(weaver.getClass().getName()));
            weaver.process(env, finder);
        }
    }","  public void test4()  throws Throwable  {
      List<String> list0 = ResourceBundle.Control.FORMAT_DEFAULT;
      MockFile mockFile0 = new MockFile("""");
      Properties properties0 = new Properties();
      WeaveProcessor weaveProcessor0 = new WeaveProcessor(list0, mockFile0, properties0);
      // Undeclared exception!
      try { 
        weaveProcessor0.weave();
        fail(""Expecting exception: AssertionError"");
      } catch(AssertionError e) {
         //
         // expected:<1> but was:<0>
         //
      }
  }"
162,"    public WeaveProcessor(final List<String> classpath, final File target, final Properties configuration) {
        super(classpath, target, configuration, getServiceInstances(Weaver.class));
    }","  public void test5()  throws Throwable  {
      Stack<String> stack0 = new Stack<String>();
      MockFile mockFile0 = new MockFile("""", """");
      Properties properties0 = new Properties();
      Class<Weaver> class0 = Weaver.class;
      WeaveProcessor weaveProcessor0 = new WeaveProcessor(stack0, mockFile0, properties0);
      URLClassLoader uRLClassLoader0 = (URLClassLoader)weaveProcessor0.classLoader;
      ServiceLoader<Weaver> serviceLoader0 = ServiceLoader.load(class0, (ClassLoader) uRLClassLoader0);
      WeaveProcessor weaveProcessor1 = null;
      try {
        weaveProcessor1 = new WeaveProcessor(stack0, mockFile0, properties0, serviceLoader0);
        fail(""Expecting exception: ServiceConfigurationError"");
      } catch(ServiceConfigurationError e) {
         //
         // org.apache.commons.weaver.spi.Weaver: Provider org.apache.commons.weaver.test.weaver.TestWeaver not a subtype
         //
         verifyException(""java.util.ServiceLoader"", e);
      }
  }"
163,"    public WeaveProcessor(final List<String> classpath, final File target, final Properties configuration) {
        super(classpath, target, configuration, getServiceInstances(Weaver.class));
    }","  public void test6()  throws Throwable  {
      List<String> list0 = ResourceBundle.Control.FORMAT_CLASS;
      File file0 = MockFile.createTempFile(""dy&{[B\"""", ""FilterList{filters="");
      Properties properties0 = new Properties();
      WeaveProcessor weaveProcessor0 = null;
      try {
        weaveProcessor0 = new WeaveProcessor(list0, file0, properties0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // /tmp/dy&{[B\""0FilterList{filters= is not a directory
         //
         verifyException(""org.apache.commons.lang3.Validate"", e);
      }
  }"
164,"    Inflater(final Map<Info, List<Annotation>> annotationMap) {
        super();

        this.packageAnnotations = subMap(annotationMap, new InfoMatcher(PackageInfo.class));
        this.classAnnotations = subMap(annotationMap, new InfoMatcher(ClassInfo.class));
        this.fieldAnnotations = subMap(annotationMap, new InfoMatcher(FieldInfo.class));
        this.ctorAnnotations = subMap(annotationMap, new MethodMatcher(true));
        this.methodAnnotations = subMap(annotationMap, new MethodMatcher(false));
        this.ctorParameterAnnotations = subMap(annotationMap, new ParameterMatcher(true));
        this.methodParameterAnnotations = subMap(annotationMap, new ParameterMatcher(false));
    }","  public void test0()  throws Throwable  {
      Inflater inflater0 = null;
      try {
        inflater0 = new Inflater((Map<AnnotationFinder.Info, List<Annotation>>) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.weaver.Inflater"", e);
      }
  }"
165,"    ScanResult inflate(final ScanResult scanResult) {
        for (final WeavablePackage pkg : scanResult.getPackages()) {
            packageAnnotations.forEach((k, v) -> {
                if (k.getName().equals(pkg.getTarget().getName())) {
                    pkg.addAnnotations(v);
                }
            });
            for (final WeavableClass<?> cls : pkg.getClasses()) {
                classAnnotations.forEach((k, v) -> {
                    if (k.getName().equals(cls.getTarget().getName())) {
                        cls.addAnnotations(v);
                    }
                });
                for (final WeavableField<?> fld : cls.getFields()) {
                    fieldAnnotations.forEach((k, v) -> {
                        try {
                            if (k.get().equals(fld.getTarget())) {
                                fld.addAnnotations(v);
                            }
                        } catch (final ClassNotFoundException ignored) {
                        }
                    });
                }
                for (final WeavableConstructor<?> ctor : cls.getConstructors()) {
                    ctorAnnotations.forEach((k, v) -> {
                        try {
                            if (k.get().equals(ctor.getTarget())) {
                                ctor.addAnnotations(v);
                            }
                        } catch (final ClassNotFoundException ignored) {
                        }
                    });
                    for (final WeavableConstructorParameter<?> param : ctor.getParameters()) {
                        ctorParameterAnnotations.forEach((k, v) -> {
                            try {
                                final Parameter<?> parameter = k.get();
                                if (parameter.getDeclaringExecutable().equals(ctor.getTarget())
                                    && param.getTarget().intValue() == parameter.getIndex()) {
                                    param.addAnnotations(v);
                                }
                            } catch (final ClassNotFoundException ignored) {
                            }
                        });
                    }
                }
                for (final WeavableMethod<?> methd : cls.getMethods()) {
                    methodAnnotations.forEach((k, v) -> {
                        try {
                            if (k.get().equals(methd.getTarget())) {
                                methd.addAnnotations(v);
                            }
                        } catch (final ClassNotFoundException ignored) {
                        }
                    });
                    for (final WeavableMethodParameter<?> param : methd.getParameters()) {
                        methodParameterAnnotations.forEach((k, v) -> {
                            try {
                                final Parameter<?> parameter = k.get();
                                if (parameter.getDeclaringExecutable().equals(methd.getTarget())
                                    && param.getTarget().intValue() == parameter.getIndex()) {
                                    param.addAnnotations(v);
                                }
                            } catch (final ClassNotFoundException ignored) {
                            }
                        });
                    }
                }
            }
        }
        return scanResult;
    }","  public void test1()  throws Throwable  {
      ScanResult scanResult0 = new ScanResult();
      Class<AnnotationFinder.ClassInfo> class0 = AnnotationFinder.ClassInfo.class;
      scanResult0.getWeavable(class0);
      HashMap<AnnotationFinder.Info, List<Annotation>> hashMap0 = new HashMap<AnnotationFinder.Info, List<Annotation>>();
      Inflater inflater0 = new Inflater(hashMap0);
      ScanResult scanResult1 = inflater0.inflate(scanResult0);
}"
166,"    Inflater(final Map<Info, List<Annotation>> annotationMap) {
        super();

        this.packageAnnotations = subMap(annotationMap, new InfoMatcher(PackageInfo.class));
        this.classAnnotations = subMap(annotationMap, new InfoMatcher(ClassInfo.class));
        this.fieldAnnotations = subMap(annotationMap, new InfoMatcher(FieldInfo.class));
        this.ctorAnnotations = subMap(annotationMap, new MethodMatcher(true));
        this.methodAnnotations = subMap(annotationMap, new MethodMatcher(false));
        this.ctorParameterAnnotations = subMap(annotationMap, new ParameterMatcher(true));
        this.methodParameterAnnotations = subMap(annotationMap, new ParameterMatcher(false));
    }","  public void test2()  throws Throwable  {
      HashMap<AnnotationFinder.Info, List<Annotation>> hashMap0 = new HashMap<AnnotationFinder.Info, List<Annotation>>();
      Class<ClassesArchive>[] classArray0 = (Class<ClassesArchive>[]) Array.newInstance(Class.class, 4);
      ClassesArchive classesArchive0 = new ClassesArchive(classArray0);
      AnnotationFinder annotationFinder0 = new AnnotationFinder(classesArchive0, false);
      AnnotationFinder.ClassInfo annotationFinder_ClassInfo0 = annotationFinder0.new ClassInfo(""(P`iN0{=[jS"", ""(P`iN0{=[jS"");
      AnnotationFinder.MethodInfo annotationFinder_MethodInfo0 = annotationFinder0.new MethodInfo(annotationFinder_ClassInfo0, ""(P`iN0{=[jS"", ""(P`iN0{=[jS"");
      AnnotationFinder.ParameterInfo annotationFinder_ParameterInfo0 = annotationFinder0.new ParameterInfo(annotationFinder_MethodInfo0, 89);
      Stack<Annotation> stack0 = new Stack<Annotation>();
      hashMap0.put(annotationFinder_ParameterInfo0, stack0);
      Inflater inflater0 = new Inflater(hashMap0);
  }"
167,"    Inflater(final Map<Info, List<Annotation>> annotationMap) {
        super();

        this.packageAnnotations = subMap(annotationMap, new InfoMatcher(PackageInfo.class));
        this.classAnnotations = subMap(annotationMap, new InfoMatcher(ClassInfo.class));
        this.fieldAnnotations = subMap(annotationMap, new InfoMatcher(FieldInfo.class));
        this.ctorAnnotations = subMap(annotationMap, new MethodMatcher(true));
        this.methodAnnotations = subMap(annotationMap, new MethodMatcher(false));
        this.ctorParameterAnnotations = subMap(annotationMap, new ParameterMatcher(true));
        this.methodParameterAnnotations = subMap(annotationMap, new ParameterMatcher(false));
    }","  public void test3()  throws Throwable  {
      HashMap<AnnotationFinder.Info, List<Annotation>> hashMap0 = new HashMap<AnnotationFinder.Info, List<Annotation>>();
      Class<ClassesArchive>[] classArray0 = (Class<ClassesArchive>[]) Array.newInstance(Class.class, 4);
      ClassesArchive classesArchive0 = new ClassesArchive(classArray0);
      AnnotationFinder annotationFinder0 = new AnnotationFinder(classesArchive0, false);
      AnnotationFinder.ClassInfo annotationFinder_ClassInfo0 = annotationFinder0.new ClassInfo(""(P`iN0{=[jS"", ""(P`iN0{=[jS"");
      AnnotationFinder.MethodInfo annotationFinder_MethodInfo0 = annotationFinder0.new MethodInfo(annotationFinder_ClassInfo0, ""(P`iN0{=[jS"", ""(P`iN0{=[jS"");
      LinkedList<Annotation> linkedList0 = new LinkedList<Annotation>();
      hashMap0.put(annotationFinder_MethodInfo0, linkedList0);
      Inflater inflater0 = new Inflater(hashMap0);
  }"
168,"    ScanResult inflate(final ScanResult scanResult) {
        for (final WeavablePackage pkg : scanResult.getPackages()) {
            packageAnnotations.forEach((k, v) -> {
                if (k.getName().equals(pkg.getTarget().getName())) {
                    pkg.addAnnotations(v);
                }
            });
            for (final WeavableClass<?> cls : pkg.getClasses()) {
                classAnnotations.forEach((k, v) -> {
                    if (k.getName().equals(cls.getTarget().getName())) {
                        cls.addAnnotations(v);
                    }
                });
                for (final WeavableField<?> fld : cls.getFields()) {
                    fieldAnnotations.forEach((k, v) -> {
                        try {
                            if (k.get().equals(fld.getTarget())) {
                                fld.addAnnotations(v);
                            }
                        } catch (final ClassNotFoundException ignored) {
                        }
                    });
                }
                for (final WeavableConstructor<?> ctor : cls.getConstructors()) {
                    ctorAnnotations.forEach((k, v) -> {
                        try {
                            if (k.get().equals(ctor.getTarget())) {
                                ctor.addAnnotations(v);
                            }
                        } catch (final ClassNotFoundException ignored) {
                        }
                    });
                    for (final WeavableConstructorParameter<?> param : ctor.getParameters()) {
                        ctorParameterAnnotations.forEach((k, v) -> {
                            try {
                                final Parameter<?> parameter = k.get();
                                if (parameter.getDeclaringExecutable().equals(ctor.getTarget())
                                    && param.getTarget().intValue() == parameter.getIndex()) {
                                    param.addAnnotations(v);
                                }
                            } catch (final ClassNotFoundException ignored) {
                            }
                        });
                    }
                }
                for (final WeavableMethod<?> methd : cls.getMethods()) {
                    methodAnnotations.forEach((k, v) -> {
                        try {
                            if (k.get().equals(methd.getTarget())) {
                                methd.addAnnotations(v);
                            }
                        } catch (final ClassNotFoundException ignored) {
                        }
                    });
                    for (final WeavableMethodParameter<?> param : methd.getParameters()) {
                        methodParameterAnnotations.forEach((k, v) -> {
                            try {
                                final Parameter<?> parameter = k.get();
                                if (parameter.getDeclaringExecutable().equals(methd.getTarget())
                                    && param.getTarget().intValue() == parameter.getIndex()) {
                                    param.addAnnotations(v);
                                }
                            } catch (final ClassNotFoundException ignored) {
                            }
                        });
                    }
                }
            }
        }
        return scanResult;
    }","  public void test4()  throws Throwable  {
      HashMap<AnnotationFinder.Info, List<Annotation>> hashMap0 = new HashMap<AnnotationFinder.Info, List<Annotation>>();
      Inflater inflater0 = new Inflater(hashMap0);
      // Undeclared exception!
      try { 
        inflater0.inflate((ScanResult) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.weaver.Inflater"", e);
      }
  }"
169,"    static <T> Iterable<T> getServiceInstances(final Class<T> type) {
        Validate.notNull(type);
        final List<T> result = new ArrayList<>();
        final ClassLoader typeLoader = type.getClassLoader();
        if (!Thread.currentThread().getContextClassLoader().equals(typeLoader)) {
            for (final T t : ServiceLoader.load(type, typeLoader)) {
                result.add(t);
            }
        }
        for (final T t : ServiceLoader.load(type)) {
            result.add(t);
        }
        return Collections.unmodifiableList(result);
    }","  public void test0()  throws Throwable  {
      // Undeclared exception!
      try { 
        ProcessorBase.getServiceInstances((Class<Object>) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // The validated object is null
         //
         verifyException(""org.apache.commons.lang3.Validate"", e);
      }
  }"
170,"    protected ProcessorBase(final List<String> classpath, final File target, final Properties configuration,
        final Iterable<P> providers) {
        this.classpath = Validate.notNull(classpath, ""classpath"");
        this.target = Validate.notNull(target, ""target"");
        Validate.isTrue(!target.exists() || target.isDirectory(), ""%s is not a directory"", target);
        this.configuration = Validate.notNull(configuration, ""configuration"");
        this.providers = Providers.sort(providers);
        this.classLoader = createClassLoader();
        this.finder = new Finder(new FileArchive(classLoader, target));
    }","  public void test1()  throws Throwable  {
      List<String> list0 = ResourceBundle.Control.FORMAT_CLASS;
      MockFile mockFile0 = new MockFile(""X"", ""X"");
      Properties properties0 = new Properties();
      ProvidersTest providersTest0 = new ProvidersTest();
      ArrayDeque<ProvidersTest.Monkeywrench> arrayDeque0 = new ArrayDeque<ProvidersTest.Monkeywrench>();
      ProvidersTest.Monkeywrench providersTest_Monkeywrench0 = providersTest0.new Monkeywrench();
      arrayDeque0.add(providersTest_Monkeywrench0);
      ProcessorBase<ProvidersTest.Monkeywrench> processorBase0 = null;
      try {
        processorBase0 = new ProcessorBase<ProvidersTest.Monkeywrench>(list0, mockFile0, properties0, arrayDeque0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.weaver.utils.Providers$SortWorker"", e);
      }
  }"
171,"    protected ProcessorBase(final List<String> classpath, final File target, final Properties configuration,
        final Iterable<P> providers) {
        this.classpath = Validate.notNull(classpath, ""classpath"");
        this.target = Validate.notNull(target, ""target"");
        Validate.isTrue(!target.exists() || target.isDirectory(), ""%s is not a directory"", target);
        this.configuration = Validate.notNull(configuration, ""configuration"");
        this.providers = Providers.sort(providers);
        this.classLoader = createClassLoader();
        this.finder = new Finder(new FileArchive(classLoader, target));
    }","  public void test2()  throws Throwable  {
      Vector<String> vector0 = new Vector<String>();
      Properties properties0 = new Properties();
      LinkedHashSet<ProvidersTest.Monkeywrench> linkedHashSet0 = new LinkedHashSet<ProvidersTest.Monkeywrench>(1285);
      ProcessorBase<ProvidersTest.Monkeywrench> processorBase0 = null;
      try {
        processorBase0 = new ProcessorBase<ProvidersTest.Monkeywrench>(vector0, (File) null, properties0, linkedHashSet0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // target
         //
         verifyException(""org.apache.commons.lang3.Validate"", e);
      }
  }"
172,"    protected ProcessorBase(final List<String> classpath, final File target, final Properties configuration,
        final Iterable<P> providers) {
        this.classpath = Validate.notNull(classpath, ""classpath"");
        this.target = Validate.notNull(target, ""target"");
        Validate.isTrue(!target.exists() || target.isDirectory(), ""%s is not a directory"", target);
        this.configuration = Validate.notNull(configuration, ""configuration"");
        this.providers = Providers.sort(providers);
        this.classLoader = createClassLoader();
        this.finder = new Finder(new FileArchive(classLoader, target));
    }","  public void test3()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      File file0 = MockFile.createTempFile("";J0xS6qqlbHV``,7Xy"", "";J0xS6qqlbHV``,7Xy"");
      Stack<ProvidersTest.Monkeywrench> stack0 = new Stack<ProvidersTest.Monkeywrench>();
      ProcessorBase<ProvidersTest.Monkeywrench> processorBase0 = null;
      try {
        processorBase0 = new ProcessorBase<ProvidersTest.Monkeywrench>(arrayList0, file0, (Properties) null, stack0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // /tmp/;J0xS6qqlbHV``,7Xy0;J0xS6qqlbHV``,7Xy is not a directory
         //
         verifyException(""org.apache.commons.lang3.Validate"", e);
      }
  }"
173,"    protected ProcessorBase(final List<String> classpath, final File target, final Properties configuration,
        final Iterable<P> providers) {
        this.classpath = Validate.notNull(classpath, ""classpath"");
        this.target = Validate.notNull(target, ""target"");
        Validate.isTrue(!target.exists() || target.isDirectory(), ""%s is not a directory"", target);
        this.configuration = Validate.notNull(configuration, ""configuration"");
        this.providers = Providers.sort(providers);
        this.classLoader = createClassLoader();
        this.finder = new Finder(new FileArchive(classLoader, target));
    }","  public void test4()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      MockFile mockFile0 = new MockFile("""", """");
      Properties properties0 = new Properties();
      Class<ProvidersTest.W> class0 = ProvidersTest.W.class;
      Iterable<ProvidersTest.W> iterable0 = ProcessorBase.getServiceInstances(class0);
      ProcessorBase<ProvidersTest.W> processorBase0 = new ProcessorBase<ProvidersTest.W>(linkedList0, mockFile0, properties0, iterable0);
  }"
174,"    static <T> Iterable<T> getServiceInstances(final Class<T> type) {
        Validate.notNull(type);
        final List<T> result = new ArrayList<>();
        final ClassLoader typeLoader = type.getClassLoader();
        if (!Thread.currentThread().getContextClassLoader().equals(typeLoader)) {
            for (final T t : ServiceLoader.load(type, typeLoader)) {
                result.add(t);
            }
        }
        for (final T t : ServiceLoader.load(type)) {
            result.add(t);
        }
        return Collections.unmodifiableList(result);
    }","  public void test5()  throws Throwable  {
      Class<Proxy.Type> class0 = Proxy.Type.class;
      Iterable<Proxy.Type> iterable0 = ProcessorBase.getServiceInstances(class0);
}"
175,"    public CleanProcessor(final List<String> classpath, final File target, final Properties configuration) {
        this(classpath, target, configuration, getServiceInstances(Cleaner.class));
    }","  public void test0()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      MockFile mockFile0 = new MockFile("""");
      Properties properties0 = new Properties();
      CleanProcessor cleanProcessor0 = null;
      try {
        cleanProcessor0 = new CleanProcessor(linkedList0, mockFile0, properties0, (Iterable<Cleaner>) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // The validated object is null
         //
         verifyException(""org.apache.commons.lang3.Validate"", e);
      }
  }"
176,"    public CleanProcessor(final List<String> classpath, final File target, final Properties configuration) {
        this(classpath, target, configuration, getServiceInstances(Cleaner.class));
    }","  public void test1()  throws Throwable  {
      Stack<Locale.LanguageRange> stack0 = new Stack<Locale.LanguageRange>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) stack0, (Collection<String>) null);
      File file0 = MockFile.createTempFile(""|3C>.Q.#Y$nVN"", ""|3C>.Q.#Y$nVN"");
      TreeSet<TestCleaner> treeSet0 = new TreeSet<TestCleaner>();
      LinkedList<Cleaner> linkedList0 = new LinkedList<Cleaner>(treeSet0);
      CleanProcessor cleanProcessor0 = null;
      try {
        cleanProcessor0 = new CleanProcessor(list0, file0, (Properties) null, linkedList0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // /tmp/|3C>.Q.#Y$nVN0|3C>.Q.#Y$nVN is not a directory
         //
         verifyException(""org.apache.commons.lang3.Validate"", e);
      }
  }"
177,"    public CleanProcessor(final List<String> classpath, final File target, final Properties configuration) {
        this(classpath, target, configuration, getServiceInstances(Cleaner.class));
    }","  public void test2()  throws Throwable  {
      Properties properties0 = new Properties();
      CleanProcessor cleanProcessor0 = null;
      try {
        cleanProcessor0 = new CleanProcessor((List<String>) null, (File) null, properties0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // classpath
         //
         verifyException(""org.apache.commons.lang3.Validate"", e);
      }
  }"
178,"    public CleanProcessor(final List<String> classpath, final File target, final Properties configuration) {
        this(classpath, target, configuration, getServiceInstances(Cleaner.class));
    }","  public void test3()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      MockFile mockFile0 = new MockFile(""1sqZj9c"", ""8BpRp>6GT_Hb?"");
      File file0 = MockFile.createTempFile(""8BpRp>6GT_Hb?"", """", (File) mockFile0);
      Properties properties0 = new Properties();
      CleanProcessor cleanProcessor0 = null;
      try {
        cleanProcessor0 = new CleanProcessor(linkedList0, file0, properties0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // /media/FSE_USER/extradrive1/toga-eval-FSE_USER-2023/toga-eval/artifacts/commons-weaver-2.0-src/processor/1sqZj9c/8BpRp>6GT_Hb?/8BpRp>6GT_Hb?0 is not a directory
         //
         verifyException(""org.apache.commons.lang3.Validate"", e);
      }
  }"
179,"    public void clean() {
        if (!target.exists()) {
            log.warning(() -> String.format(""Target directory %s does not exist; nothing to do!"", target));
        }
        for (final Cleaner cleaner : providers) {
            final WeaveEnvironment env = new LocalWeaveEnvironment(target, classLoader, configuration,
                Logger.getLogger(cleaner.getClass().getName()));
            cleaner.clean(env, finder);
        }
    }","  public void test4()  throws Throwable  {
      List<String> list0 = ResourceBundle.Control.FORMAT_CLASS;
      MockFile mockFile0 = new MockFile("""");
      mockFile0.delete();
      Properties properties0 = new Properties();
      CleanProcessor cleanProcessor0 = new CleanProcessor(list0, mockFile0, properties0);
      cleanProcessor0.clean();
  }"
180,"    public void clean() {
        if (!target.exists()) {
            log.warning(() -> String.format(""Target directory %s does not exist; nothing to do!"", target));
        }
        for (final Cleaner cleaner : providers) {
            final WeaveEnvironment env = new LocalWeaveEnvironment(target, classLoader, configuration,
                Logger.getLogger(cleaner.getClass().getName()));
            cleaner.clean(env, finder);
        }
    }","  public void test5()  throws Throwable  {
      List<String> list0 = ResourceBundle.Control.FORMAT_PROPERTIES;
      MockFile mockFile0 = new MockFile(""3o~:p!6) 7oI>zCW"", ""3o~:p!6) 7oI>zCW"");
      Properties properties0 = new Properties();
      MockFile.createTempFile(""3o~:p!6) 7oI>zCW"", ""3o~:p!6) 7oI>zCW"", (File) mockFile0);
      CleanProcessor cleanProcessor0 = new CleanProcessor(list0, mockFile0, properties0);
      cleanProcessor0.clean();
  }"
181,"    public CleanProcessor(final List<String> classpath, final File target, final Properties configuration) {
        this(classpath, target, configuration, getServiceInstances(Cleaner.class));
    }","  public void test6()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      MockFile mockFile0 = new MockFile("""", """");
      Properties properties0 = new Properties();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      PriorityQueue<Cleaner> priorityQueue0 = new PriorityQueue<Cleaner>(76, comparator0);
      CleanProcessor cleanProcessor0 = new CleanProcessor(arrayList0, mockFile0, properties0, priorityQueue0);
  }"
182,"    public ScanRequest addSupertypes(final Class<?>... types) {
        Collections.addAll(supertypes, Validate.noNullElements(types, ""null element at [%s]""));
        return this;
    }","  public void test0()  throws Throwable  {
      ScanRequest scanRequest0 = new ScanRequest();
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 0);
      ScanRequest scanRequest1 = scanRequest0.addSupertypes(classArray0);
}"
183,"    public ScanRequest addSupertypes(final Class<?>... types) {
        Collections.addAll(supertypes, Validate.noNullElements(types, ""null element at [%s]""));
        return this;
    }","  public void test1()  throws Throwable  {
      ScanRequest scanRequest0 = new ScanRequest();
      // Undeclared exception!
      try { 
        scanRequest0.addSupertypes((Class<?>[]) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // The validated object is null
         //
         verifyException(""org.apache.commons.lang3.Validate"", e);
      }
  }"
184,"    public boolean isConstrained() {
        return !interests.isEmpty() || !supertypes.isEmpty();
    }","  public void test2()  throws Throwable  {
      ScanRequest scanRequest0 = new ScanRequest();
}"
185,"    public boolean isConstrained() {
        return !interests.isEmpty() || !supertypes.isEmpty();
    }","  public void test3()  throws Throwable  {
      ScanRequest scanRequest0 = new ScanRequest();
      Class<String>[] classArray0 = (Class<String>[]) Array.newInstance(Class.class, 1);
      Class<String> class0 = String.class;
      classArray0[0] = class0;
      ScanRequest scanRequest1 = scanRequest0.addSupertypes(classArray0);
      boolean boolean0 = scanRequest1.isConstrained();
}"
186,"    public boolean isConstrained() {
        return !interests.isEmpty() || !supertypes.isEmpty();
    }","  public void test4()  throws Throwable  {
      ScanRequest scanRequest0 = new ScanRequest();
      boolean boolean0 = scanRequest0.isConstrained();
}"
187,"    public ScanRequest add(final WeaveInterest interest) {
        if (interest == null) {
            throw new NullPointerException();
        }
        interests.add(interest);
        return this;
    }","  public void test5()  throws Throwable  {
      ScanRequest scanRequest0 = new ScanRequest();
      // Undeclared exception!
      try { 
        scanRequest0.add((WeaveInterest) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.weaver.model.ScanRequest"", e);
      }
  }"
188,"    public boolean isConstrained() {
        return !interests.isEmpty() || !supertypes.isEmpty();
    }","  public void test6()  throws Throwable  {
      ScanRequest scanRequest0 = new ScanRequest();
}"
189,"    public boolean isConstrained() {
        return !interests.isEmpty() || !supertypes.isEmpty();
    }","  public void test7()  throws Throwable  {
      ScanRequest scanRequest0 = new ScanRequest();
      Class<Annotation> class0 = Annotation.class;
      ElementType elementType0 = ElementType.LOCAL_VARIABLE;
      WeaveInterest weaveInterest0 = WeaveInterest.of(class0, elementType0);
      scanRequest0.add(weaveInterest0);
      boolean boolean0 = scanRequest0.isConstrained();
}"
190,"    public Iterable<WeaveInterest> getInterests() {
        return Collections.unmodifiableList(interests);
    }","  public void test8()  throws Throwable  {
      ScanRequest scanRequest0 = new ScanRequest();
      Iterable<WeaveInterest> iterable0 = scanRequest0.getInterests();
}"
191,"    public Set<Class<?>> getSupertypes() {
        return Collections.unmodifiableSet(supertypes);
    }","  public void test9()  throws Throwable  {
      ScanRequest scanRequest0 = new ScanRequest();
      Set<Class<?>> set0 = scanRequest0.getSupertypes();
}"
192,"    public ScanRequest addSupertypes(final Class<?>... types) {
        Collections.addAll(supertypes, Validate.noNullElements(types, ""null element at [%s]""));
        return this;
    }","  public void test10()  throws Throwable  {
      ScanRequest scanRequest0 = new ScanRequest();
      Class<String>[] classArray0 = (Class<String>[]) Array.newInstance(Class.class, 7);
      // Undeclared exception!
      try { 
        scanRequest0.addSupertypes(classArray0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // null element at [0]
         //
         verifyException(""org.apache.commons.lang3.Validate"", e);
      }
  }"
193,,"  public void test0()  throws Throwable  {
      WeavableConstructor<Locale.FilteringMode> weavableConstructor0 = null;
      try {
        weavableConstructor0 = new WeavableConstructor<Locale.FilteringMode>((Constructor<Locale.FilteringMode>) null, (WeavableClass<Locale.FilteringMode>) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.weaver.model.WeavableConstructor"", e);
      }
  }"
194,"    public int compareTo(final WeavablePackage arg0) {
        return CMP.compare(this, arg0);
    }","  public void test0()  throws Throwable  {
      WeavablePackage weavablePackage0 = new WeavablePackage((Package) null);
      int int0 = weavablePackage0.compareTo((WeavablePackage) null);
}"
195,"    public synchronized <T> WeavableClass<T> getWeavable(final Class<T> cls) {
        return (WeavableClass<T>) clazzes.computeIfAbsent(cls.getName(), k -> new WeavableClass<>(cls, this));
    }","  public void test1()  throws Throwable  {
      WeavablePackage weavablePackage0 = new WeavablePackage((Package) null);
      // Undeclared exception!
      try { 
        weavablePackage0.getWeavable((Class<Locale.Category>) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.weaver.model.WeavablePackage"", e);
      }
  }"
196,"    public String toString() {
        if (getTarget() == null) {
            return ""Weavable default package"";
        }
        return super.toString();
    }","  public void test2()  throws Throwable  {
      WeavablePackage weavablePackage0 = new WeavablePackage((Package) null);
      String string0 = weavablePackage0.toString();
}"
197,"    public int compareTo(final WeavablePackage arg0) {
        return CMP.compare(this, arg0);
    }","  public void test3()  throws Throwable  {
      WeavablePackage weavablePackage0 = new WeavablePackage((Package) null);
      int int0 = weavablePackage0.compareTo(weavablePackage0);
}"
198,"    public synchronized <T> WeavableClass<T> getWeavable(final Class<T> cls) {
        return (WeavableClass<T>) clazzes.computeIfAbsent(cls.getName(), k -> new WeavableClass<>(cls, this));
    }","  public void test4()  throws Throwable  {
      WeavablePackage weavablePackage0 = new WeavablePackage((Package) null);
      Class<String> class0 = String.class;
      WeavableClass<String> weavableClass0 = weavablePackage0.getWeavable(class0);
}"
199,"    public Iterable<WeavableClass<?>> getClasses() {
        return Collections.unmodifiableCollection(clazzes.values());
    }","  public void test5()  throws Throwable  {
      WeavablePackage weavablePackage0 = new WeavablePackage((Package) null);
      Iterable<WeavableClass<?>> iterable0 = weavablePackage0.getClasses();
}"
200,"    public WeavableConstructor(final Constructor<T> target, final WeavableClass<T> parent) {
        super(target, parent);
    }","  public void test0()  throws Throwable  {
      WeavablePackage weavablePackage0 = new WeavablePackage((Package) null);
      Class<Annotation> class0 = Annotation.class;
      WeavableClass<Annotation> weavableClass0 = weavablePackage0.getWeavable(class0);
      WeavableConstructor<Annotation> weavableConstructor0 = null;
      try {
        weavableConstructor0 = new WeavableConstructor<Annotation>((Constructor<Annotation>) null, weavableClass0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.weaver.model.WeavableConstructor"", e);
      }
  }"
201,"    public WeavableConstructorParameter(final Integer target, final WeavableConstructor<T> parent) {
        super(target, parent);
    }","  public void test0()  throws Throwable  {
      Integer integer0 = new Integer(0);
      WeavableConstructorParameter<Locale.FilteringMode> weavableConstructorParameter0 = new WeavableConstructorParameter<Locale.FilteringMode>(integer0, (WeavableConstructor<Locale.FilteringMode>) null);
  }"
202,"    protected static String getResourceName(final String classname) {
        return classname.replace('.', '/') + "".class"";
    }","  public void test0()  throws Throwable  {
      String string0 = WeaveEnvironment.getResourceName("""");
}"
203,,"  public void test1()  throws Throwable  {
      WeaveEnvironment weaveEnvironment0 = mock(WeaveEnvironment.class, CALLS_REAL_METHODS);
      WeaveEnvironment.Resource weaveEnvironment_Resource0 = weaveEnvironment0.new Resource(""org.apache.commons.weaver.Inflatr$MethodMatcher"");
      String string0 = weaveEnvironment_Resource0.getName();
}"
204,"    protected abstract OutputStream getOutputStream(String resourceName) throws IOException;
}
","  public void test2()  throws Throwable  {
      WeaveEnvironment weaveEnvironment0 = mock(WeaveEnvironment.class, CALLS_REAL_METHODS);
      doReturn((OutputStream) null).when(weaveEnvironment0).getOutputStream(anyString());
      WeaveEnvironment.Resource weaveEnvironment_Resource0 = weaveEnvironment0.new Resource("""");
      OutputStream outputStream0 = weaveEnvironment_Resource0.getOutputStream();
}"
205,,"  public void test3()  throws Throwable  {
      WeaveEnvironment weaveEnvironment0 = mock(WeaveEnvironment.class, CALLS_REAL_METHODS);
      WeaveEnvironment.Resource weaveEnvironment_Resource0 = weaveEnvironment0.new Resource("""");
      // Undeclared exception!
      try { 
        weaveEnvironment_Resource0.getInputStream();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.weaver.model.WeaveEnvironment$Resource"", e);
      }
  }"
206,,"  public void test4()  throws Throwable  {
      WeaveEnvironment weaveEnvironment0 = mock(WeaveEnvironment.class, CALLS_REAL_METHODS);
      WeaveEnvironment.Resource weaveEnvironment_Resource0 = weaveEnvironment0.new Resource("""");
      String string0 = weaveEnvironment_Resource0.getContentType();
}"
207,"    protected static String getResourceName(final String classname) {
        return classname.replace('.', '/') + "".class"";
    }","  public void test5()  throws Throwable  {
      // Undeclared exception!
      try { 
        WeaveEnvironment.getResourceName((String) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.weaver.model.WeaveEnvironment"", e);
      }
  }"
208,"    protected int localCompareTo(final WeavableClass<T> obj) {
        return obj == null ? 1 : CLASS_COMPARATOR.compare(getTarget(), obj.getTarget());
    }","  public void test0()  throws Throwable  {
      WeavablePackage weavablePackage0 = new WeavablePackage((Package) null);
      Class<Integer> class0 = Integer.TYPE;
      WeavableClass<Integer> weavableClass0 = new WeavableClass<Integer>(class0, weavablePackage0);
      Class<Integer> class1 = Integer.class;
      WeavableClass<Integer> weavableClass1 = new WeavableClass<Integer>(class1, weavablePackage0);
      int int0 = weavableClass0.localCompareTo(weavableClass1);
}"
209,"    protected int localCompareTo(final WeavableClass<T> obj) {
        return obj == null ? 1 : CLASS_COMPARATOR.compare(getTarget(), obj.getTarget());
    }","  public void test1()  throws Throwable  {
      WeavableClass<WeavablePackage> weavableClass0 = new WeavableClass<WeavablePackage>((Class<WeavablePackage>) null, (WeavablePackage) null);
      // Undeclared exception!
      try { 
        weavableClass0.localCompareTo(weavableClass0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.util.Comparator"", e);
      }
  }"
210,"    protected int localCompareTo(final WeavableClass<T> obj) {
        return obj == null ? 1 : CLASS_COMPARATOR.compare(getTarget(), obj.getTarget());
    }","  public void test2()  throws Throwable  {
      WeavablePackage weavablePackage0 = new WeavablePackage((Package) null);
      Class<Locale.Category> class0 = Locale.Category.class;
      WeavableClass<Locale.Category> weavableClass0 = new WeavableClass<Locale.Category>(class0, weavablePackage0);
      int int0 = weavableClass0.localCompareTo((WeavableClass<Locale.Category>) null);
}"
211,"    protected int localCompareTo(final WeavableClass<T> obj) {
        return obj == null ? 1 : CLASS_COMPARATOR.compare(getTarget(), obj.getTarget());
    }","  public void test3()  throws Throwable  {
      Class<WeavablePackage> class0 = WeavablePackage.class;
      WeavableClass<WeavablePackage> weavableClass0 = new WeavableClass<WeavablePackage>(class0, (WeavablePackage) null);
      int int0 = weavableClass0.localCompareTo(weavableClass0);
}"
212,"    public WeavableField<T> getWeavable(final Field fld) {
        return fields.computeIfAbsent(fld.getName(), k -> new WeavableField<>(fld, this));
    }","  public void test4()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      WeavableClass<Annotation> weavableClass0 = new WeavableClass<Annotation>(class0, (WeavablePackage) null);
      // Undeclared exception!
      try { 
        weavableClass0.getWeavable((Method) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.util.concurrent.ConcurrentSkipListMap"", e);
      }
  }"
213,"    public Iterable<WeavableField<T>> getFields() {
        return Collections.unmodifiableCollection(fields.values());
    }","  public void test5()  throws Throwable  {
      WeavablePackage weavablePackage0 = new WeavablePackage((Package) null);
      Class<Integer> class0 = Integer.class;
      WeavableClass<Integer> weavableClass0 = weavablePackage0.getWeavable(class0);
      Iterable<WeavableField<Integer>> iterable0 = weavableClass0.getFields();
}"
214,"    public WeavableField<T> getWeavable(final Field fld) {
        return fields.computeIfAbsent(fld.getName(), k -> new WeavableField<>(fld, this));
    }","  public void test6()  throws Throwable  {
      WeavablePackage weavablePackage0 = new WeavablePackage((Package) null);
      Class<Object> class0 = Object.class;
      WeavableClass<Object> weavableClass0 = weavablePackage0.getWeavable(class0);
      // Undeclared exception!
      try { 
        weavableClass0.getWeavable((Field) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.weaver.model.WeavableClass"", e);
      }
  }"
215,"    public Iterable<WeavableMethod<T>> getMethods() {
        return Collections.unmodifiableCollection(methods.values());
    }","  public void test7()  throws Throwable  {
      WeavablePackage weavablePackage0 = new WeavablePackage((Package) null);
      Class<Object> class0 = Object.class;
      WeavableClass<Object> weavableClass0 = weavablePackage0.getWeavable(class0);
      Iterable<WeavableMethod<Object>> iterable0 = weavableClass0.getMethods();
}"
216,"    public Iterable<WeavableConstructor<T>> getConstructors() {
        return Collections.unmodifiableCollection(ctors.values());
    }","  public void test8()  throws Throwable  {
      WeavablePackage weavablePackage0 = new WeavablePackage((Package) null);
      Class<Locale.Category> class0 = Locale.Category.class;
      WeavableClass<Locale.Category> weavableClass0 = new WeavableClass<Locale.Category>(class0, weavablePackage0);
      Iterable<WeavableConstructor<Locale.Category>> iterable0 = weavableClass0.getConstructors();
}"
217,"    public WeavableField<T> getWeavable(final Field fld) {
        return fields.computeIfAbsent(fld.getName(), k -> new WeavableField<>(fld, this));
    }","  public void test9()  throws Throwable  {
      WeavablePackage weavablePackage0 = new WeavablePackage((Package) null);
      Class<Package> class0 = Package.class;
      WeavableClass<Package> weavableClass0 = weavablePackage0.getWeavable(class0);
      // Undeclared exception!
      try { 
        weavableClass0.getWeavable((Constructor<Package>) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.util.concurrent.ConcurrentSkipListMap"", e);
      }
  }"
218,"    public WeavableMethodParameter(final Integer target, final WeavableMethod<T> parent) {
        super(target, parent);
    }","  public void test0()  throws Throwable  {
      Integer integer0 = Integer.getInteger(""UW|>x<'.2}R#%, >Tv"", 1);
      WeavableMethodParameter<Integer> weavableMethodParameter0 = new WeavableMethodParameter<Integer>(integer0, (WeavableMethod<Integer>) null);
  }"
219,"    public final Annotation[] getDeclaredAnnotations() {
        return getAnnotations();
    }","  public void test0()  throws Throwable  {
      WeavablePackage weavablePackage0 = new WeavablePackage((Package) null);
      Annotation[] annotationArray0 = weavablePackage0.getDeclaredAnnotations();
}"
220,"    public String toString() {
        return ""Weavable "" + getTarget().toString();
    }","  public void test1()  throws Throwable  {
      WeavablePackage weavablePackage0 = new WeavablePackage((Package) null);
      WeavableClass<AccessibleObject> weavableClass0 = new WeavableClass<AccessibleObject>((Class<AccessibleObject>) null, weavablePackage0);
      // Undeclared exception!
      try { 
        weavableClass0.toString();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.evosuite.runtime.System"", e);
      }
  }"
221,"    public final boolean addAnnotations(final Annotation... toAdd) {
        Validate.noNullElements(toAdd);
        return addAnnotations(Arrays.asList(toAdd));
    }","  public void test2()  throws Throwable  {
      WeavablePackage weavablePackage0 = new WeavablePackage((Package) null);
      // Undeclared exception!
      try { 
        weavablePackage0.addAnnotations((Annotation[]) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // The validated object is null
         //
         verifyException(""org.apache.commons.lang3.Validate"", e);
      }
  }"
222,"    public final boolean addAnnotations(final Annotation... toAdd) {
        Validate.noNullElements(toAdd);
        return addAnnotations(Arrays.asList(toAdd));
    }","  public void test3()  throws Throwable  {
      Class<Parameter> class0 = Parameter.class;
      WeavablePackage weavablePackage0 = new WeavablePackage((Package) null);
      WeavableClass<Parameter> weavableClass0 = new WeavableClass<Parameter>(class0, weavablePackage0);
      Annotation[] annotationArray0 = new Annotation[8];
      // Undeclared exception!
      try { 
        weavableClass0.addAnnotations(annotationArray0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // The validated array contains null element at index: 0
         //
         verifyException(""org.apache.commons.lang3.Validate"", e);
      }
  }"
223,"    public synchronized <T extends Annotation> T getAnnotation(final Class<T> annotationClass) {
        if (annotations == null) {
            return null;
        }
        for (final Annotation prospect : annotations) {
            if (annotationClass.equals(prospect.annotationType())) {
                @SuppressWarnings(""unchecked"")
                final T result = (T) prospect;
                return result;
            }
        }
        return null;
    }","  public void test4()  throws Throwable  {
      WeavablePackage weavablePackage0 = new WeavablePackage((Package) null);
      Class<Annotation> class0 = Annotation.class;
      Annotation annotation0 = weavablePackage0.getAnnotation(class0);
}"
224,"    public final synchronized Annotation[] getAnnotations() {
        if (annotations == null) {
            return EMPTY_ANNOTATION_ARRAY; //NOPMD - no problem sharing zero-length array
        }
        return annotations.toArray(new Annotation[0]);
    }","  public void test5()  throws Throwable  {
      WeavablePackage weavablePackage0 = new WeavablePackage((Package) null);
      Class<Proxy.Type> class0 = Proxy.Type.class;
      WeavableClass<Proxy.Type> weavableClass0 = weavablePackage0.getWeavable(class0);
      Annotation[] annotationArray0 = weavableClass0.getAnnotations();
}"
225,"    public final boolean addAnnotations(final Annotation... toAdd) {
        Validate.noNullElements(toAdd);
        return addAnnotations(Arrays.asList(toAdd));
    }","  public void test6()  throws Throwable  {
      WeavablePackage weavablePackage0 = new WeavablePackage((Package) null);
      Annotation[] annotationArray0 = new Annotation[0];
      boolean boolean0 = weavablePackage0.addAnnotations(annotationArray0);
}"
226,,"  public void test7()  throws Throwable  {
      WeavablePackage weavablePackage0 = new WeavablePackage((Package) null);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) weavablePackage0);
      WeavablePackage weavablePackage1 = new WeavablePackage((Package) null);
      // Undeclared exception!
      try { 
        predicate0.test(weavablePackage1);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.weaver.model.Weavable"", e);
      }
  }"
227,,"  public void test8()  throws Throwable  {
      WeavablePackage weavablePackage0 = new WeavablePackage((Package) null);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) weavablePackage0);
      boolean boolean0 = predicate0.test(weavablePackage0);
}"
228,,"  public void test9()  throws Throwable  {
      WeavablePackage weavablePackage0 = new WeavablePackage((Package) null);
      Vector<Annotation> vector0 = new Vector<Annotation>();
      vector0.add((Annotation) null);
      Predicate<Annotation> predicate0 = Predicate.isEqual((Object) weavablePackage0);
      boolean boolean0 = vector0.removeIf(predicate0);
}"
229,,"  public void test10()  throws Throwable  {
      WeavablePackage weavablePackage0 = new WeavablePackage((Package) null);
      Vector<Annotation> vector0 = new Vector<Annotation>();
      vector0.add((Annotation) null);
      Predicate<Annotation> predicate0 = Predicate.isEqual((Object) weavablePackage0);
      boolean boolean0 = vector0.removeIf(predicate0);
}"
230,"    public boolean isAnnotationPresent(final Class<? extends Annotation> annotationClass) {
        return getAnnotation(annotationClass) != null;
    }","  public void test11()  throws Throwable  {
      WeavablePackage weavablePackage0 = new WeavablePackage((Package) null);
      Class<Annotation> class0 = Annotation.class;
      boolean boolean0 = weavablePackage0.isAnnotationPresent(class0);
}"
231,"    public synchronized <T extends Annotation> T getAnnotation(final Class<T> annotationClass) {
        if (annotations == null) {
            return null;
        }
        for (final Annotation prospect : annotations) {
            if (annotationClass.equals(prospect.annotationType())) {
                @SuppressWarnings(""unchecked"")
                final T result = (T) prospect;
                return result;
            }
        }
        return null;
    }","  public void test12()  throws Throwable  {
      WeavablePackage weavablePackage0 = new WeavablePackage((Package) null);
      Vector<Annotation> vector0 = new Vector<Annotation>();
      weavablePackage0.addAnnotations((Iterable<Annotation>) vector0);
      Class<Annotation> class0 = Annotation.class;
      Annotation annotation0 = weavablePackage0.getAnnotation(class0);
}"
232,"    public final synchronized Annotation[] getAnnotations() {
        if (annotations == null) {
            return EMPTY_ANNOTATION_ARRAY; //NOPMD - no problem sharing zero-length array
        }
        return annotations.toArray(new Annotation[0]);
    }","  public void test13()  throws Throwable  {
      WeavablePackage weavablePackage0 = new WeavablePackage((Package) null);
      Annotation[] annotationArray0 = weavablePackage0.getAnnotations();
}"
233,"    public final boolean addAnnotations(final Annotation... toAdd) {
        Validate.noNullElements(toAdd);
        return addAnnotations(Arrays.asList(toAdd));
    }","  public void test14()  throws Throwable  {
      WeavablePackage weavablePackage0 = new WeavablePackage((Package) null);
      Vector<Annotation> vector0 = new Vector<Annotation>();
      vector0.add((Annotation) null);
      boolean boolean0 = weavablePackage0.addAnnotations((Iterable<Annotation>) vector0);
}"
234,"    public final boolean addAnnotations(final Annotation... toAdd) {
        Validate.noNullElements(toAdd);
        return addAnnotations(Arrays.asList(toAdd));
    }","  public void test15()  throws Throwable  {
      WeavablePackage weavablePackage0 = new WeavablePackage((Package) null);
      Class<AccessibleObject> class0 = AccessibleObject.class;
      WeavableClass<AccessibleObject> weavableClass0 = new WeavableClass<AccessibleObject>(class0, weavablePackage0);
      PriorityQueue<Annotation> priorityQueue0 = new PriorityQueue<Annotation>();
      boolean boolean0 = weavableClass0.addAnnotations((Iterable<Annotation>) priorityQueue0);
}"
235,"    public final boolean addAnnotations(final Annotation... toAdd) {
        Validate.noNullElements(toAdd);
        return addAnnotations(Arrays.asList(toAdd));
    }","  public void test16()  throws Throwable  {
      WeavablePackage weavablePackage0 = new WeavablePackage((Package) null);
      Class<Annotation> class0 = Annotation.class;
      WeavableClass<Annotation> weavableClass0 = new WeavableClass<Annotation>(class0, weavablePackage0);
      boolean boolean0 = weavableClass0.addAnnotations((Iterable<Annotation>) null);
}"
236,"    public int hashCode() {
        return new HashCodeBuilder().append(getTarget()).toHashCode();
    }","  public void test17()  throws Throwable  {
      WeavablePackage weavablePackage0 = new WeavablePackage((Package) null);
      weavablePackage0.hashCode();
  }"
237,"    public String toString() {
        return ""Weavable "" + getTarget().toString();
    }","  public void test18()  throws Throwable  {
      WeavablePackage weavablePackage0 = new WeavablePackage((Package) null);
      Class<AccessibleObject> class0 = AccessibleObject.class;
      WeavableClass<AccessibleObject> weavableClass0 = new WeavableClass<AccessibleObject>(class0, weavablePackage0);
      String string0 = weavableClass0.toString();
}"
238,"    public WeavablePackage getWeavable(final Package pkg) {
        final String key =
            Optional.ofNullable(pkg).map(Package::getName).orElse("""");

        if (packages.containsKey(key)) {
            return packages.get(key);
        }
        final WeavablePackage result = new WeavablePackage(pkg);
        final WeavablePackage faster = packages.putIfAbsent(key, result);
        return faster == null ? result : faster;
    }","  public void test0()  throws Throwable  {
      ScanResult scanResult0 = new ScanResult();
      // Undeclared exception!
      try { 
        scanResult0.getWeavable((Class<WeavablePackage>) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.weaver.model.ScanResult"", e);
      }
  }"
239,"    public AnnotatedElements<WeavableClass<?>> getClassesAssignableTo(final Class<?> supertype) {
        Validate.notNull(supertype, ""supertype"");

        return new Projection<WeavablePackage, WeavableClass<?>>(getPackages()) {

            @Override
            protected Iterable<WeavableClass<?>> childrenOf(final WeavablePackage parent) {
                return parent.getClasses();
            }

            @Override
            public Iterator<WeavableClass<?>> iterator() {
                final Iterator<WeavableClass<?>> toWrap = super.iterator();
                return new Iterator<WeavableClass<?>>() {
                    {
                        read();
                    }

                    private WeavableClass<?> next;

                    private void read() {
                        while (toWrap.hasNext()) {
                            final WeavableClass<?> test = toWrap.next();
                            if (supertype.isAssignableFrom(test.getTarget())) {
                                next = test;
                                return;
                            }
                        }
                        next = null;
                    }

                    @Override
                    public boolean hasNext() {
                        return next != null;
                    }

                    @Override
                    public WeavableClass<?> next() {
                        try {
                            return next;
                        } finally {
                            read();
                        }
                    }

                    @Override
                    public void remove() {
                        toWrap.remove();
                    }
                };
            }
        };
    }","  public void test1()  throws Throwable  {
      ScanResult scanResult0 = new ScanResult();
      // Undeclared exception!
      try { 
        scanResult0.getClassesAssignableTo((Class<?>) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // supertype
         //
         verifyException(""org.apache.commons.lang3.Validate"", e);
      }
  }"
240,"    public AnnotatedElements<WeavableClass<?>> getClasses() {
        return new Projection<WeavablePackage, WeavableClass<?>>(getPackages()) {

            @Override
            protected Iterable<WeavableClass<?>> childrenOf(final WeavablePackage parent) {
                return parent.getClasses();
            }
        };
    }","  public void test2()  throws Throwable  {
      ScanResult scanResult0 = new ScanResult();
      AnnotatedElements<WeavableClass<?>> annotatedElements0 = scanResult0.getClasses();
}"
241,"    public AnnotatedElements<WeavableMethod<?>> getMethods() {
        return new Projection<WeavableClass<?>, WeavableMethod<?>>(getClasses()) {

            @Override
            protected Iterable<WeavableMethod<?>> childrenOf(final WeavableClass<?> parent) {
                @SuppressWarnings({ ""unchecked"", ""rawtypes"" })
                final Iterable<WeavableMethod<?>> result = ((WeavableClass) parent).getMethods();
                return result;
            }
        };
    }","  public void test3()  throws Throwable  {
      ScanResult scanResult0 = new ScanResult();
      AnnotatedElements<WeavableMethod<?>> annotatedElements0 = scanResult0.getMethods();
}"
242,"    public AnnotatedElements<WeavablePackage> getPackages() {
        return new AnnotatedElements<WeavablePackage>() {

            @Override
            public Iterator<WeavablePackage> iterator() {
                return packages.values().iterator();
            }

            @Override
            public AnnotatedElements<WeavablePackage> with(final Class<? extends Annotation> annotationType) {
                return new AnnotatedWith<>(packages.values(), annotationType);
            }
        };
    }","  public void test4()  throws Throwable  {
      ScanResult scanResult0 = new ScanResult();
      AnnotatedElements<WeavablePackage> annotatedElements0 = scanResult0.getPackages();
}"
243,"    public AnnotatedElements<WeavableConstructor<?>> getConstructors() {
        return new Projection<WeavableClass<?>, WeavableConstructor<?>>(getClasses()) {

            @Override
            protected Iterable<WeavableConstructor<?>> childrenOf(final WeavableClass<?> parent) {
                @SuppressWarnings({ ""unchecked"", ""rawtypes"" })
                final Iterable<WeavableConstructor<?>> result = ((WeavableClass) parent).getConstructors();
                return result;
            }
        };
    }","  public void test5()  throws Throwable  {
      ScanResult scanResult0 = new ScanResult();
      AnnotatedElements<WeavableConstructor<?>> annotatedElements0 = scanResult0.getConstructors();
}"
244,"    public WeavablePackage getWeavable(final Package pkg) {
        final String key =
            Optional.ofNullable(pkg).map(Package::getName).orElse("""");

        if (packages.containsKey(key)) {
            return packages.get(key);
        }
        final WeavablePackage result = new WeavablePackage(pkg);
        final WeavablePackage faster = packages.putIfAbsent(key, result);
        return faster == null ? result : faster;
    }","  public void test6()  throws Throwable  {
      ScanResult scanResult0 = new ScanResult();
      WeavablePackage weavablePackage0 = scanResult0.getWeavable((Package) null);
      WeavablePackage weavablePackage1 = scanResult0.getWeavable((Package) null);
}"
245,"    public WeavablePackage getWeavable(final Package pkg) {
        final String key =
            Optional.ofNullable(pkg).map(Package::getName).orElse("""");

        if (packages.containsKey(key)) {
            return packages.get(key);
        }
        final WeavablePackage result = new WeavablePackage(pkg);
        final WeavablePackage faster = packages.putIfAbsent(key, result);
        return faster == null ? result : faster;
    }","  public void test7()  throws Throwable  {
      ScanResult scanResult0 = new ScanResult();
      // Undeclared exception!
      try { 
        scanResult0.getWeavable((Constructor<WeavableConstructor<String>>) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.weaver.model.ScanResult"", e);
      }
  }"
246,"    public WeavablePackage getWeavable(final Package pkg) {
        final String key =
            Optional.ofNullable(pkg).map(Package::getName).orElse("""");

        if (packages.containsKey(key)) {
            return packages.get(key);
        }
        final WeavablePackage result = new WeavablePackage(pkg);
        final WeavablePackage faster = packages.putIfAbsent(key, result);
        return faster == null ? result : faster;
    }","  public void test8()  throws Throwable  {
      ScanResult scanResult0 = new ScanResult();
      Class<String> class0 = String.class;
      WeavableClass<String> weavableClass0 = scanResult0.getWeavable(class0);
}"
247,"    public WeavablePackage getWeavable(final Package pkg) {
        final String key =
            Optional.ofNullable(pkg).map(Package::getName).orElse("""");

        if (packages.containsKey(key)) {
            return packages.get(key);
        }
        final WeavablePackage result = new WeavablePackage(pkg);
        final WeavablePackage faster = packages.putIfAbsent(key, result);
        return faster == null ? result : faster;
    }","  public void test9()  throws Throwable  {
      ScanResult scanResult0 = new ScanResult();
      // Undeclared exception!
      try { 
        scanResult0.getWeavable((Method) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.weaver.model.ScanResult"", e);
      }
  }"
248,"    public WeavablePackage getWeavable(final Package pkg) {
        final String key =
            Optional.ofNullable(pkg).map(Package::getName).orElse("""");

        if (packages.containsKey(key)) {
            return packages.get(key);
        }
        final WeavablePackage result = new WeavablePackage(pkg);
        final WeavablePackage faster = packages.putIfAbsent(key, result);
        return faster == null ? result : faster;
    }","  public void test10()  throws Throwable  {
      ScanResult scanResult0 = new ScanResult();
      // Undeclared exception!
      try { 
        scanResult0.getWeavable((Field) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.weaver.model.ScanResult"", e);
      }
  }"
249,"    public AnnotatedElements<WeavableField<?>> getFields() {
        return new Projection<WeavableClass<?>, WeavableField<?>>(getClasses()) {

            @Override
            protected Iterable<WeavableField<?>> childrenOf(final WeavableClass<?> parent) {
                @SuppressWarnings({ ""unchecked"", ""rawtypes"" })
                final Iterable<WeavableField<?>> result = ((WeavableClass) parent).getFields();
                return result;
            }
        };
    }","  public void test11()  throws Throwable  {
      ScanResult scanResult0 = new ScanResult();
      AnnotatedElements<WeavableField<?>> annotatedElements0 = scanResult0.getFields();
}"
250,"    public AnnotatedElements<WeavableClass<?>> getClassesAssignableTo(final Class<?> supertype) {
        Validate.notNull(supertype, ""supertype"");

        return new Projection<WeavablePackage, WeavableClass<?>>(getPackages()) {

            @Override
            protected Iterable<WeavableClass<?>> childrenOf(final WeavablePackage parent) {
                return parent.getClasses();
            }

            @Override
            public Iterator<WeavableClass<?>> iterator() {
                final Iterator<WeavableClass<?>> toWrap = super.iterator();
                return new Iterator<WeavableClass<?>>() {
                    {
                        read();
                    }

                    private WeavableClass<?> next;

                    private void read() {
                        while (toWrap.hasNext()) {
                            final WeavableClass<?> test = toWrap.next();
                            if (supertype.isAssignableFrom(test.getTarget())) {
                                next = test;
                                return;
                            }
                        }
                        next = null;
                    }

                    @Override
                    public boolean hasNext() {
                        return next != null;
                    }

                    @Override
                    public WeavableClass<?> next() {
                        try {
                            return next;
                        } finally {
                            read();
                        }
                    }

                    @Override
                    public void remove() {
                        toWrap.remove();
                    }
                };
            }
        };
    }","  public void test12()  throws Throwable  {
      ScanResult scanResult0 = new ScanResult();
      Class<String> class0 = String.class;
      AnnotatedElements<WeavableClass<?>> annotatedElements0 = scanResult0.getClassesAssignableTo(class0);
}"
251,"    public AnnotatedElements<WeavableConstructorParameter<?>> getConstructorParameters() {

        return new Projection<WeavableConstructor<?>, WeavableConstructorParameter<?>>(getConstructors()) {

            @Override
            protected Iterable<WeavableConstructorParameter<?>> childrenOf(final WeavableConstructor<?> parent) {
                @SuppressWarnings({ ""unchecked"", ""rawtypes"" })
                final Iterable<WeavableConstructorParameter<?>> result = ((WeavableConstructor) parent).getParameters();
                return result;
            }
        };
    }","  public void test13()  throws Throwable  {
      ScanResult scanResult0 = new ScanResult();
      AnnotatedElements<WeavableConstructorParameter<?>> annotatedElements0 = scanResult0.getConstructorParameters();
}"
252,"    public AnnotatedElements<WeavableMethodParameter<?>> getMethodParameters() {
        return new Projection<WeavableMethod<?>, WeavableMethodParameter<?>>(getMethods()) {

            @Override
            protected Iterable<WeavableMethodParameter<?>> childrenOf(final WeavableMethod<?> parent) {
                @SuppressWarnings({ ""unchecked"", ""rawtypes"" })
                final Iterable<WeavableMethodParameter<?>> result = ((WeavableMethod) parent).getParameters();
                return result;
            }
        };
    }","  public void test14()  throws Throwable  {
      ScanResult scanResult0 = new ScanResult();
      AnnotatedElements<WeavableMethodParameter<?>> annotatedElements0 = scanResult0.getMethodParameters();
}"
253,"    public WeavableMethod(final Method target, final WeavableClass<T> parent) {
        super(target, parent);
    }","  public void test0()  throws Throwable  {
      WeavableMethod<Integer> weavableMethod0 = null;
      try {
        weavableMethod0 = new WeavableMethod<Integer>((Method) null, (WeavableClass<Integer>) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.weaver.model.WeavableMethod"", e);
      }
  }"
254,"    protected int localCompareTo(final WeavableField<T> obj) {
        return getTarget().getName().compareTo(obj.getTarget().getName());
    }","  public void test0()  throws Throwable  {
      WeavablePackage weavablePackage0 = new WeavablePackage((Package) null);
      Class<Object> class0 = Object.class;
      WeavableClass<Object> weavableClass0 = weavablePackage0.getWeavable(class0);
      WeavableField<Object> weavableField0 = new WeavableField<Object>((Field) null, weavableClass0);
      // Undeclared exception!
      try { 
        weavableField0.localCompareTo(weavableField0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.weaver.model.WeavableField"", e);
      }
  }"
255,"    public final int compareTo(final SELF obj) {
        final int result = getParent().compareTo(obj.getParent());
        return result == 0 ? localCompareTo(obj) : result;
    }","  public void test0()  throws Throwable  {
      Class<String> class0 = String.class;
      WeavablePackage weavablePackage0 = new WeavablePackage((Package) null);
      WeavableClass<String> weavableClass0 = new WeavableClass<String>(class0, weavablePackage0);
      WeavableClass<String> weavableClass1 = weavablePackage0.getWeavable(class0);
      int int0 = weavableClass1.compareTo(weavableClass0);
}"
256,"    public final int compareTo(final SELF obj) {
        final int result = getParent().compareTo(obj.getParent());
        return result == 0 ? localCompareTo(obj) : result;
    }","  public void test1()  throws Throwable  {
      Class<String> class0 = String.class;
      WeavableClass<String> weavableClass0 = new WeavableClass<String>(class0, (WeavablePackage) null);
      WeavablePackage weavablePackage0 = new WeavablePackage((Package) null);
      WeavableClass<String> weavableClass1 = weavablePackage0.getWeavable(class0);
      int int0 = weavableClass1.compareTo(weavableClass0);
}"
257,"    public final int compareTo(final SELF obj) {
        final int result = getParent().compareTo(obj.getParent());
        return result == 0 ? localCompareTo(obj) : result;
    }","  public void test2()  throws Throwable  {
      Class<String> class0 = String.class;
      WeavableClass<String> weavableClass0 = new WeavableClass<String>(class0, (WeavablePackage) null);
      // Undeclared exception!
      try { 
        weavableClass0.compareTo(weavableClass0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.weaver.model.NestedWeavable"", e);
      }
  }"
258,"    public static WeaveInterest of(final Class<? extends Annotation> annotationType, final ElementType target) {
        return new WeaveInterest(annotationType, target);
    }","  public void test0()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      ElementType elementType0 = ElementType.TYPE;
      WeaveInterest weaveInterest0 = WeaveInterest.of(class0, elementType0);
}"
259,"    public static <P extends WeaveLifecycleProvider<?>> Iterable<P> sort(final Iterable<P> providers) {
        return new SortWorker<P>().sort(providers);
    }","  public void test0()  throws Throwable  {
      // Undeclared exception!
      try { 
        Providers.sort((Iterable<ProvidersTest.Z>) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // The validated object is null
         //
         verifyException(""org.apache.commons.lang3.Validate"", e);
      }
  }"
260,"    public static <P extends WeaveLifecycleProvider<?>> Iterable<P> sort(final Iterable<P> providers) {
        return new SortWorker<P>().sort(providers);
    }","  public void test1()  throws Throwable  {
      ArrayList<ProvidersTest.A> arrayList0 = new ArrayList<ProvidersTest.A>();
      arrayList0.add((ProvidersTest.A) null);
      // Undeclared exception!
      try { 
        Providers.sort((Iterable<ProvidersTest.A>) arrayList0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // The validated collection contains null element at index: 0
         //
         verifyException(""org.apache.commons.lang3.Validate"", e);
      }
  }"
261,"    public static <P extends WeaveLifecycleProvider<?>> Iterable<P> sort(final Iterable<P> providers) {
        return new SortWorker<P>().sort(providers);
    }","  public void test2()  throws Throwable  {
      Stack<ProvidersTest.X> stack0 = new Stack<ProvidersTest.X>();
      ProvidersTest providersTest0 = new ProvidersTest();
      ProvidersTest.X providersTest_X0 = providersTest0.new X();
      stack0.add(providersTest_X0);
      // Undeclared exception!
      try { 
        Providers.sort((Iterable<ProvidersTest.X>) stack0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.weaver.utils.Providers$SortWorker"", e);
      }
  }"
262,"    public static <A extends Annotation> A instanceOf(final Class<A> annotationType, final Map<String, ?> elements) {
        final ClassLoader proxyClassLoader = Validate.notNull(annotationType, ""annotationType"").getClassLoader();
        final InvocationHandler invocationHandler = new InvocationHandler() {

            @Override
            @SuppressWarnings(""PMD.UseVarargs"") // overridden method
            public Object invoke(final Object proxy, final Method method, final Object[] args) throws Throwable {
                if (method.getDeclaringClass().equals(annotationType)) {
                    if (elements.containsKey(method.getName())) {
                        return elements.get(method.getName());
                    }
                    return method.getDefaultValue();
                }
                if (""annotationType"".equals(method.getName()) && method.getParameterTypes().length == 0) {
                    return annotationType;
                }
                if (""equals"".equals(method.getName())
                    && Arrays.equals(method.getParameterTypes(), new Class[] { Object.class })) {
                    return AnnotationUtils.equals((Annotation) proxy, (Annotation) args[0]);
                }
                if (""hashCode"".equals(method.getName()) && method.getParameterTypes().length == 0) {
                    return AnnotationUtils.hashCode((Annotation) proxy);
                }
                if (""toString"".equals(method.getName()) && method.getParameterTypes().length == 0) {
                    return AnnotationUtils.toString((Annotation) proxy);
                }
                throw new UnsupportedOperationException();
            }
        };
        @SuppressWarnings(""unchecked"")
        final A result =
            (A) Proxy.newProxyInstance(proxyClassLoader, new Class[] { annotationType }, invocationHandler);
        return result;
    }","  public void test0()  throws Throwable  {
      HashMap<String, Annotation> hashMap0 = new HashMap<String, Annotation>();
      // Undeclared exception!
      try { 
        Annotations.instanceOf((Class<Annotation>) null, (Map<String, ?>) hashMap0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // annotationType
         //
         verifyException(""org.apache.commons.lang3.Validate"", e);
      }
  }"
263,"    public static <A extends Annotation> A instanceOf(final Class<A> annotationType, final Map<String, ?> elements) {
        final ClassLoader proxyClassLoader = Validate.notNull(annotationType, ""annotationType"").getClassLoader();
        final InvocationHandler invocationHandler = new InvocationHandler() {

            @Override
            @SuppressWarnings(""PMD.UseVarargs"") // overridden method
            public Object invoke(final Object proxy, final Method method, final Object[] args) throws Throwable {
                if (method.getDeclaringClass().equals(annotationType)) {
                    if (elements.containsKey(method.getName())) {
                        return elements.get(method.getName());
                    }
                    return method.getDefaultValue();
                }
                if (""annotationType"".equals(method.getName()) && method.getParameterTypes().length == 0) {
                    return annotationType;
                }
                if (""equals"".equals(method.getName())
                    && Arrays.equals(method.getParameterTypes(), new Class[] { Object.class })) {
                    return AnnotationUtils.equals((Annotation) proxy, (Annotation) args[0]);
                }
                if (""hashCode"".equals(method.getName()) && method.getParameterTypes().length == 0) {
                    return AnnotationUtils.hashCode((Annotation) proxy);
                }
                if (""toString"".equals(method.getName()) && method.getParameterTypes().length == 0) {
                    return AnnotationUtils.toString((Annotation) proxy);
                }
                throw new UnsupportedOperationException();
            }
        };
        @SuppressWarnings(""unchecked"")
        final A result =
            (A) Proxy.newProxyInstance(proxyClassLoader, new Class[] { annotationType }, invocationHandler);
        return result;
    }","  public void test1()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Proxy proxy0 = (Proxy)Annotations.instanceOf(class0, (Map<String, ?>) hashMap0);
      // Undeclared exception!
      try { 
        hashMap0.remove((Object) proxy0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.evosuite.runtime.util.ReflectionUtils"", e);
      }
  }"
264,"    public static <A extends Annotation> A instanceOf(final Class<A> annotationType, final Map<String, ?> elements) {
        final ClassLoader proxyClassLoader = Validate.notNull(annotationType, ""annotationType"").getClassLoader();
        final InvocationHandler invocationHandler = new InvocationHandler() {

            @Override
            @SuppressWarnings(""PMD.UseVarargs"") // overridden method
            public Object invoke(final Object proxy, final Method method, final Object[] args) throws Throwable {
                if (method.getDeclaringClass().equals(annotationType)) {
                    if (elements.containsKey(method.getName())) {
                        return elements.get(method.getName());
                    }
                    return method.getDefaultValue();
                }
                if (""annotationType"".equals(method.getName()) && method.getParameterTypes().length == 0) {
                    return annotationType;
                }
                if (""equals"".equals(method.getName())
                    && Arrays.equals(method.getParameterTypes(), new Class[] { Object.class })) {
                    return AnnotationUtils.equals((Annotation) proxy, (Annotation) args[0]);
                }
                if (""hashCode"".equals(method.getName()) && method.getParameterTypes().length == 0) {
                    return AnnotationUtils.hashCode((Annotation) proxy);
                }
                if (""toString"".equals(method.getName()) && method.getParameterTypes().length == 0) {
                    return AnnotationUtils.toString((Annotation) proxy);
                }
                throw new UnsupportedOperationException();
            }
        };
        @SuppressWarnings(""unchecked"")
        final A result =
            (A) Proxy.newProxyInstance(proxyClassLoader, new Class[] { annotationType }, invocationHandler);
        return result;
    }","  public void test2()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Class<Annotation> class0 = Annotation.class;
      Proxy proxy0 = (Proxy)Annotations.instanceOf(class0, (Map<String, ?>) hashMap0);
      hashMap0.put(""annotationType"", ""annotationType"");
      // Undeclared exception!
      try { 
        hashMap0.remove((Object) proxy0);
        fail(""Expecting exception: ClassCastException"");
      } catch(ClassCastException e) {
      }
  }"
265,"    public static <A extends Annotation> A instanceOf(final Class<A> annotationType, final Map<String, ?> elements) {
        final ClassLoader proxyClassLoader = Validate.notNull(annotationType, ""annotationType"").getClassLoader();
        final InvocationHandler invocationHandler = new InvocationHandler() {

            @Override
            @SuppressWarnings(""PMD.UseVarargs"") // overridden method
            public Object invoke(final Object proxy, final Method method, final Object[] args) throws Throwable {
                if (method.getDeclaringClass().equals(annotationType)) {
                    if (elements.containsKey(method.getName())) {
                        return elements.get(method.getName());
                    }
                    return method.getDefaultValue();
                }
                if (""annotationType"".equals(method.getName()) && method.getParameterTypes().length == 0) {
                    return annotationType;
                }
                if (""equals"".equals(method.getName())
                    && Arrays.equals(method.getParameterTypes(), new Class[] { Object.class })) {
                    return AnnotationUtils.equals((Annotation) proxy, (Annotation) args[0]);
                }
                if (""hashCode"".equals(method.getName()) && method.getParameterTypes().length == 0) {
                    return AnnotationUtils.hashCode((Annotation) proxy);
                }
                if (""toString"".equals(method.getName()) && method.getParameterTypes().length == 0) {
                    return AnnotationUtils.toString((Annotation) proxy);
                }
                throw new UnsupportedOperationException();
            }
        };
        @SuppressWarnings(""unchecked"")
        final A result =
            (A) Proxy.newProxyInstance(proxyClassLoader, new Class[] { annotationType }, invocationHandler);
        return result;
    }","  public void test3()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Proxy proxy0 = (Proxy)Annotations.instanceOf(class0, (Map<String, ?>) hashMap0);
      hashMap0.put(""hashCode"", proxy0);
      // Undeclared exception!
      try { 
        hashMap0.replace(""hashCode"", (Object) class0, (Object) ""hashCode"");
        fail(""Expecting exception: ClassCastException"");
      } catch(ClassCastException e) {
         //
         // java.lang.Class cannot be cast to java.lang.annotation.Annotation
         //
         verifyException(""org.apache.commons.weaver.utils.Annotations$1"", e);
      }
  }"
266,"    public static int compare(final Class<?>[] paramTypes1, final Class<?>[] paramTypes2) {
        for (int param = 0; param < paramTypes1.length; param++) {
            if (param >= paramTypes2.length) {
                return 1;
            }
            final int test = paramTypes1[param].getName().compareTo(paramTypes2[param].getName());
            if (test == 0) {
                continue;
            }
            return test;
        }
        if (paramTypes1.length == paramTypes2.length) {
            return 0;
        }
        return -1;
    }","  public void test0()  throws Throwable  {
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 1);
      Class<Object> class0 = Object.class;
      classArray0[0] = class0;
      Class<String>[] classArray1 = (Class<String>[]) Array.newInstance(Class.class, 3);
      Class<String> class1 = String.class;
      classArray1[0] = class1;
      int int0 = Args.compare(classArray0, classArray1);
}"
267,"    public static int compare(final Class<?>[] paramTypes1, final Class<?>[] paramTypes2) {
        for (int param = 0; param < paramTypes1.length; param++) {
            if (param >= paramTypes2.length) {
                return 1;
            }
            final int test = paramTypes1[param].getName().compareTo(paramTypes2[param].getName());
            if (test == 0) {
                continue;
            }
            return test;
        }
        if (paramTypes1.length == paramTypes2.length) {
            return 0;
        }
        return -1;
    }","  public void test1()  throws Throwable  {
      Class<String>[] classArray0 = (Class<String>[]) Array.newInstance(Class.class, 1);
      Class<String> class0 = String.class;
      classArray0[0] = class0;
      Class<String>[] classArray1 = (Class<String>[]) Array.newInstance(Class.class, 2);
      classArray1[0] = class0;
      int int0 = Args.compare(classArray0, classArray1);
}"
268,"    public static int compare(final Class<?>[] paramTypes1, final Class<?>[] paramTypes2) {
        for (int param = 0; param < paramTypes1.length; param++) {
            if (param >= paramTypes2.length) {
                return 1;
            }
            final int test = paramTypes1[param].getName().compareTo(paramTypes2[param].getName());
            if (test == 0) {
                continue;
            }
            return test;
        }
        if (paramTypes1.length == paramTypes2.length) {
            return 0;
        }
        return -1;
    }","  public void test2()  throws Throwable  {
      Class<String>[] classArray0 = (Class<String>[]) Array.newInstance(Class.class, 1);
      Class<String> class0 = String.class;
      classArray0[0] = class0;
      int int0 = Args.compare(classArray0, classArray0);
}"
269,"    public static int compare(final Class<?>[] paramTypes1, final Class<?>[] paramTypes2) {
        for (int param = 0; param < paramTypes1.length; param++) {
            if (param >= paramTypes2.length) {
                return 1;
            }
            final int test = paramTypes1[param].getName().compareTo(paramTypes2[param].getName());
            if (test == 0) {
                continue;
            }
            return test;
        }
        if (paramTypes1.length == paramTypes2.length) {
            return 0;
        }
        return -1;
    }","  public void test3()  throws Throwable  {
      Class<String>[] classArray0 = (Class<String>[]) Array.newInstance(Class.class, 1);
      Class<String> class0 = String.class;
      classArray0[0] = class0;
      Class<Object>[] classArray1 = (Class<Object>[]) Array.newInstance(Class.class, 5);
      Class<Object> class1 = Object.class;
      classArray1[0] = class1;
      int int0 = Args.compare(classArray0, classArray1);
}"
270,"    public static int compare(final Class<?>[] paramTypes1, final Class<?>[] paramTypes2) {
        for (int param = 0; param < paramTypes1.length; param++) {
            if (param >= paramTypes2.length) {
                return 1;
            }
            final int test = paramTypes1[param].getName().compareTo(paramTypes2[param].getName());
            if (test == 0) {
                continue;
            }
            return test;
        }
        if (paramTypes1.length == paramTypes2.length) {
            return 0;
        }
        return -1;
    }","  public void test4()  throws Throwable  {
      Class<String>[] classArray0 = (Class<String>[]) Array.newInstance(Class.class, 1);
      // Undeclared exception!
      try { 
        Args.compare(classArray0, classArray0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.weaver.utils.Args"", e);
      }
  }"
271,"    public static int compare(final Class<?>[] paramTypes1, final Class<?>[] paramTypes2) {
        for (int param = 0; param < paramTypes1.length; param++) {
            if (param >= paramTypes2.length) {
                return 1;
            }
            final int test = paramTypes1[param].getName().compareTo(paramTypes2[param].getName());
            if (test == 0) {
                continue;
            }
            return test;
        }
        if (paramTypes1.length == paramTypes2.length) {
            return 0;
        }
        return -1;
    }","  public void test5()  throws Throwable  {
      Class<String>[] classArray0 = (Class<String>[]) Array.newInstance(Class.class, 0);
      Class<String>[] classArray1 = (Class<String>[]) Array.newInstance(Class.class, 2);
      int int0 = Args.compare(classArray1, classArray0);
}"
272,,"  public void test0()  throws Throwable  {
      WeaveLifecycleToken weaveLifecycleToken0 = new WeaveLifecycleToken();
  }"
273,,"  public void test1()  throws Throwable  {
      WeaveLifecycleToken.Clean weaveLifecycleToken_Clean0 = new WeaveLifecycleToken.Clean();
  }"
274,,"  public void test2()  throws Throwable  {
      WeaveLifecycleToken.Weave weaveLifecycleToken_Weave0 = new WeaveLifecycleToken.Weave();
  }"
275,"    public void execute() {
        try {
            final WeaverSettings settings = Validate.notNull(getSettings(), ""settings"");
            new CleanProcessor(settings.getClasspathEntries(), settings.getTarget(), settings.getProperties()).clean();
        } catch (final Exception e) {
            throw new BuildException(e);
        }
    }","  public void test0()  throws Throwable  {
      CleanTask cleanTask0 = new CleanTask((Project) null);
      cleanTask0.setSettingsRef((String) null);
      // Undeclared exception!
      try { 
        cleanTask0.execute();
        fail(""Expecting exception: BuildException"");
      } catch(BuildException e) {
         //
         // No Project specified
         //
         verifyException(""org.apache.commons.weaver.ant.CleanTask"", e);
      }
  }"
276,"    public void setSettingsRef(final String refid) {
        final WeaverSettings settings = new WeaverSettings(getProject());
        settings.setRefid(new Reference(getProject(), refid));
        add(settings);
    }","  public void test0()  throws Throwable  {
      Project project0 = new Project();
      WeaveTask weaveTask0 = new WeaveTask(project0);
      WeaverSettings weaverSettings0 = new WeaverSettings(project0);
      weaveTask0.add(weaverSettings0);
      // Undeclared exception!
      try { 
        weaveTask0.setSettingsRef(""org.apache.commons.weaver.Inflater$MethodMatcher"");
        fail(""Expecting exception: BuildException"");
      } catch(BuildException e) {
         //
         // settings already specified
         //
         verifyException(""org.apache.commons.weaver.ant.AbstractWeaverTask"", e);
      }
  }"
277,"    public WeaverSettings getSettings() {
        return settings;
    }","  public void test1()  throws Throwable  {
      WeaveTask weaveTask0 = new WeaveTask((Project) null);
      WeaverSettings weaverSettings0 = weaveTask0.getSettings();
}"
278,"    public void add(final WeaverSettings settings) {
        if (this.settings != null) {
            throw new BuildException(""settings already specified"");
        }
        this.settings = settings;
    }","  public void test2()  throws Throwable  {
      WeaveTask weaveTask0 = new WeaveTask((Project) null);
      WeaverSettings weaverSettings0 = new WeaverSettings((Project) null);
      weaveTask0.setSettingsRef(""org.apache.commons.weaver.ant.AbstractWeaverTask"");
      // Undeclared exception!
      try { 
        weaveTask0.add(weaverSettings0);
        fail(""Expecting exception: BuildException"");
      } catch(BuildException e) {
         //
         // settings already specified
         //
         verifyException(""org.apache.commons.weaver.ant.AbstractWeaverTask"", e);
      }
  }"
279,"    public WeaverSettings getSettings() {
        return settings;
    }","  public void test3()  throws Throwable  {
      WeaveTask weaveTask0 = new WeaveTask((Project) null);
      weaveTask0.setSettingsRef("""");
      WeaverSettings weaverSettings0 = weaveTask0.getSettings();
}"
280,"    public InlineProperty createDynamicElement(final String uri, final String localName, final String qName) {
        return new InlineProperty(localName);
    }","  public void test0()  throws Throwable  {
      InlineProperties inlineProperties0 = new InlineProperties();
      InlineProperties.InlineProperty inlineProperties_InlineProperty0 = inlineProperties0.createDynamicElement(""org.apache.commons.weaver.Inflater$InfoMatcher"", ""org.apache.commons.weaver.Inflater$ParameterMatcher"", ""org.apache.commons.weaver.Inflater$InfoMatcher"");
}"
281,"    public InlineProperty createDynamicElement(final String uri, final String localName, final String qName) {
        return new InlineProperty(localName);
    }","  public void test1()  throws Throwable  {
      InlineProperties inlineProperties0 = new InlineProperties();
      InlineProperties.InlineProperty inlineProperties_InlineProperty0 = inlineProperties0.createDynamicElement("""", """", """");
      inlineProperties_InlineProperty0.addText("">|rGO8"");
      inlineProperties_InlineProperty0.addText(""org.apache.commons.weaver.ant.InlineProperties$1"");
  }"
282,"    public void execute() {
        try {
            final WeaverSettings settings = Validate.notNull(getSettings(), ""settings"");
            new WeaveProcessor(settings.getClasspathEntries(), settings.getTarget(), settings.getProperties()).weave();
        } catch (final Exception e) {
            throw new BuildException(e);
        }
    }","  public void test0()  throws Throwable  {
      WeaveTask weaveTask0 = new WeaveTask((Project) null);
      WeaverSettings weaverSettings0 = new WeaverSettings((Project) null);
      MockFile mockFile0 = new MockFile(""-:{"");
      weaverSettings0.setTarget(mockFile0);
      weaveTask0.add(weaverSettings0);
      weaveTask0.execute();
  }"
283,"    public void execute() {
        try {
            final WeaverSettings settings = Validate.notNull(getSettings(), ""settings"");
            new WeaveProcessor(settings.getClasspathEntries(), settings.getTarget(), settings.getProperties()).weave();
        } catch (final Exception e) {
            throw new BuildException(e);
        }
    }","  public void test1()  throws Throwable  {
      WeaveTask weaveTask0 = new WeaveTask((Project) null);
      WeaverSettings weaverSettings0 = new WeaverSettings((Project) null);
      weaveTask0.add(weaverSettings0);
      // Undeclared exception!
      try { 
        weaveTask0.execute();
        fail(""Expecting exception: BuildException"");
      } catch(BuildException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: target
         //
         verifyException(""org.apache.commons.weaver.ant.WeaveTask"", e);
      }
  }"
