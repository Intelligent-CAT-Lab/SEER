18030
Test: public void test137() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test137"); com.google.javascript.jscomp.LightweightMessageFormatter lightweightMessageFormatter0 = com.google.javascript.jscomp.LightweightMessageFormatter.withoutSource(); lightweightMessageFormatter0.setColorize(true); com.google.javascript.jscomp.CheckLevel checkLevel6 = com.google.javascript.jscomp.CheckLevel.WARNING; com.google.javascript.jscomp.DiagnosticType diagnosticType9 = com.google.javascript.jscomp.DiagnosticType.warning("", ""); java.lang.String[] strArray16 = new java.lang.String[] { "hi!", "hi!", "", "hi!", "", ": hi!" }; com.google.javascript.jscomp.JSError jSError17 = com.google.javascript.jscomp.JSError.make(": hi!", (int) (short) 1, (int) (short) 1, checkLevel6, diagnosticType9, strArray16); com.google.javascript.rhino.Node node18 = jSError17.node; boolean boolean20 = jSError17.equals((java.lang.Object) ": hi!"); com.google.javascript.jscomp.CheckLevel checkLevel21 = com.google.javascript.jscomp.CheckLevel.WARNING; com.google.javascript.jscomp.LightweightMessageFormatter lightweightMessageFormatter22 = com.google.javascript.jscomp.LightweightMessageFormatter.withoutSource(); com.google.javascript.jscomp.CheckLevel checkLevel26 = com.google.javascript.jscomp.CheckLevel.WARNING; com.google.javascript.jscomp.DiagnosticType diagnosticType29 = com.google.javascript.jscomp.DiagnosticType.warning("", ""); java.lang.String[] strArray36 = new java.lang.String[] { "hi!", "hi!", "", "hi!", "", ": hi!" }; com.google.javascript.jscomp.JSError jSError37 = com.google.javascript.jscomp.JSError.make(": hi!", (int) (short) 1, (int) (short) 1, checkLevel26, diagnosticType29, strArray36); com.google.javascript.rhino.Node node38 = jSError37.node; boolean boolean40 = jSError37.equals((java.lang.Object) ": hi!"); com.google.javascript.jscomp.CheckLevel checkLevel41 = jSError37.level; java.lang.String str42 = lightweightMessageFormatter22.getLevelName(checkLevel41); com.google.javascript.jscomp.CheckLevel checkLevel46 = com.google.javascript.jscomp.CheckLevel.WARNING; com.google.javascript.jscomp.DiagnosticType diagnosticType49 = com.google.javascript.jscomp.DiagnosticType.warning("", ""); java.lang.String[] strArray56 = new java.lang.String[] { "hi!", "hi!", "", "hi!", "", ": hi!" }; com.google.javascript.jscomp.JSError jSError57 = com.google.javascript.jscomp.JSError.make(": hi!", (int) (short) 1, (int) (short) 1, checkLevel46, diagnosticType49, strArray56); com.google.javascript.rhino.Node node58 = jSError57.node; java.lang.String str59 = lightweightMessageFormatter22.formatError(jSError57); java.lang.String str60 = jSError17.format(checkLevel21, (com.google.javascript.jscomp.MessageFormatter) lightweightMessageFormatter22); com.google.javascript.jscomp.CheckLevel checkLevel61 = jSError17.level; com.google.javascript.jscomp.CheckLevel checkLevel62 = jSError17.level; java.lang.String str63 = lightweightMessageFormatter0.formatWarning(jSError17); }
Code: private String format(JSError error, boolean warning) { SourceExcerptProvider source = getSource(); String sourceExcerpt = source == null ? null : excerpt.get( source, error.sourceName, error.lineNumber, excerptFormatter); StringBuilder b = new StringBuilder(); if (error.sourceName != null) { b.append(error.sourceName); if (error.lineNumber > 0) { b.append(':'); b.append(error.lineNumber); } b.append(": "); } b.append(getLevelName(warning ? CheckLevel.WARNING : CheckLevel.ERROR)); b.append(" - "); b.append(error.description); b.append('\n'); if (sourceExcerpt != null) { b.append(sourceExcerpt); b.append('\n'); int charno = error.getCharno(); if (excerpt.equals(LINE) && 0 <= charno && charno < sourceExcerpt.length()) { for (int i = 0; i < charno; i++) { char c = sourceExcerpt.charAt(i); if (Character.isWhitespace(c)) { b.append(c); } else { b.append(' '); } } b.append("^\n"); } } return b.toString(); }
tensor([[0.0096, 0.0075, 0.0052,  ..., 0.0066, 0.0164, 0.0030],
        [0.0077, 0.0069, 0.0049,  ..., 0.0064, 0.0122, 0.0026],
        [0.0083, 0.0069, 0.0034,  ..., 0.0056, 0.0140, 0.0020],
        ...,
        [0.0086, 0.0075, 0.0035,  ..., 0.0056, 0.0153, 0.0025],
        [0.0090, 0.0081, 0.0033,  ..., 0.0064, 0.0135, 0.0019],
        [0.0072, 0.0082, 0.0042,  ..., 0.0100, 0.0163, 0.0026]])