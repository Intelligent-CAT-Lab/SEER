62145
Test: public void test0597() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0597"); org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.TDF; org.apache.commons.csv.CSVFormat cSVFormat2 = cSVFormat0.withNullString("hi!"); cSVFormat2.validate(); org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat2.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat2.withCommentStart('\037'); org.apache.commons.csv.CSVFormat cSVFormat8 = org.apache.commons.csv.CSVFormat.TDF; cSVFormat8.validate(); org.apache.commons.csv.CSVFormat cSVFormat10 = org.apache.commons.csv.CSVFormat.TDF; cSVFormat10.validate(); org.apache.commons.csv.Quote quote12 = null; org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat10.withQuotePolicy(quote12); org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat13.withEscape((java.lang.Character) 'a'); java.lang.Object[] objArray17 = new java.lang.Object[] { 'a', (byte) 0 }; java.lang.String str18 = cSVFormat8.format(objArray17); org.apache.commons.csv.CSVFormat cSVFormat19 = org.apache.commons.csv.CSVFormat.TDF; cSVFormat19.validate(); org.apache.commons.csv.CSVFormat cSVFormat22 = cSVFormat19.withIgnoreEmptyLines(true); java.lang.String[] strArray25 = new java.lang.String[] { "hi!", "a\t0" }; org.apache.commons.csv.CSVFormat cSVFormat26 = cSVFormat19.withHeader(strArray25); java.lang.String str27 = cSVFormat8.format((java.lang.Object[]) strArray25); org.apache.commons.csv.CSVFormat cSVFormat28 = cSVFormat7.withHeader(strArray25); org.apache.commons.csv.CSVFormat cSVFormat30 = cSVFormat28.withCommentStart((java.lang.Character) '\t'); org.apache.commons.csv.CSVFormat cSVFormat32 = cSVFormat28.withEscape((java.lang.Character) '\037'); org.apache.commons.csv.CSVFormat cSVFormat34 = cSVFormat28.withSkipHeaderRecord(true); org.apache.commons.csv.CSVFormat cSVFormat36 = cSVFormat28.withQuoteChar('4'); java.lang.String str37 = cSVFormat28.getNullString(); org.apache.commons.csv.CSVFormat cSVFormat38 = org.apache.commons.csv.CSVFormat.TDF; org.apache.commons.csv.CSVFormat cSVFormat40 = cSVFormat38.withNullString("hi!"); cSVFormat40.validate(); org.apache.commons.csv.CSVFormat cSVFormat43 = cSVFormat40.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat45 = cSVFormat40.withCommentStart('\037'); java.lang.String str46 = cSVFormat40.toString(); org.apache.commons.csv.CSVFormat cSVFormat48 = cSVFormat40.withIgnoreEmptyLines(true); org.apache.commons.csv.CSVFormat cSVFormat50 = cSVFormat48.withRecordSeparator(' '); java.lang.Character char51 = cSVFormat48.getCommentStart(); org.apache.commons.csv.CSVFormat cSVFormat53 = cSVFormat48.withCommentStart('\t'); org.apache.commons.csv.CSVFormat cSVFormat55 = cSVFormat53.withQuoteChar((java.lang.Character) '\036'); org.apache.commons.csv.CSVFormat cSVFormat57 = cSVFormat53.withNullString("hi!\t\"a\t0\"hi!,a\t0"); org.apache.commons.csv.CSVFormat cSVFormat59 = cSVFormat53.withRecordSeparator("Delimiter=<\t> QuoteChar=<,> CommentStart=<\f> RecordSeparator=<\r\n> EmptyLines:ignored SurroundingSpaces:ignored SkipHeaderRecord:false"); boolean boolean60 = cSVFormat28.equals((java.lang.Object) cSVFormat53); }
Code: public String toString() { final StringBuilder sb = new StringBuilder(); sb.append("Delimiter=<").append(delimiter).append('>'); if (isEscaping()) { sb.append(' '); sb.append("Escape=<").append(escape).append('>'); } if (isQuoting()) { sb.append(' '); sb.append("QuoteChar=<").append(quoteChar).append('>'); } if (isCommentingEnabled()) { ; sb.append("CommentStart=<").append(commentStart).append('>'); } if (isNullHandling()) { sb.append(' '); sb.append("NullString=<").append(nullString).append('>'); } if(true) { sb.append(' '); sb.append("RecordSeparator=<").append(recordSeparator).append('>'); } if (true) { sb.append(" EmptyLines:ignored"); } if (getIgnoreSurroundingSpaces()) { ; } sb.append(" SkipHeaderRecord:").append(skipHeaderRecord); if (true) { sb.append(' '); sb.append("Header:").append(Arrays.toString(header)); } return sb.toString(); }
tensor([[0.0079, 0.0096, 0.0081,  ..., 0.0091, 0.0297, 0.0042],
        [0.0076, 0.0082, 0.0079,  ..., 0.0081, 0.0378, 0.0035],
        [0.0051, 0.0078, 0.0040,  ..., 0.0079, 0.0371, 0.0033],
        ...,
        [0.0051, 0.0073, 0.0038,  ..., 0.0068, 0.0398, 0.0035],
        [0.0055, 0.0089, 0.0056,  ..., 0.0094, 0.0341, 0.0034],
        [0.0052, 0.0094, 0.0088,  ..., 0.0124, 0.0336, 0.0035]])