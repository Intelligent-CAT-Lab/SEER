69615
Test: public void test307() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test307"); org.jsoup.parser.ParseError[] parseErrorArray0 = new org.jsoup.parser.ParseError[] {}; java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList1 = new java.util.ArrayList<org.jsoup.parser.ParseError>(); boolean boolean2 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList1, parseErrorArray0); int int4 = parseErrorList1.lastIndexOf((java.lang.Object) (-1.0f)); java.lang.Object[] objArray5 = parseErrorList1.toArray(); org.jsoup.parser.ParseError[] parseErrorArray6 = new org.jsoup.parser.ParseError[] {}; java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList7 = new java.util.ArrayList<org.jsoup.parser.ParseError>(); boolean boolean8 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList7, parseErrorArray6); int int10 = parseErrorList7.lastIndexOf((java.lang.Object) (-1.0f)); int int11 = parseErrorList7.size(); boolean boolean12 = parseErrorList7.isEmpty(); org.jsoup.select.NodeFilter.FilterResult filterResult13 = org.jsoup.select.NodeFilter.FilterResult.REMOVE; boolean boolean14 = parseErrorList7.remove((java.lang.Object) filterResult13); boolean boolean15 = parseErrorList1.retainAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList7); java.io.InputStream inputStream16 = null; java.io.InputStream inputStream19 = null; org.jsoup.parser.Parser parser22 = org.jsoup.parser.Parser.xmlParser(); org.jsoup.parser.ParseSettings parseSettings23 = parser22.settings(); org.jsoup.nodes.Document document24 = org.jsoup.Jsoup.parse(inputStream19, "*", "\n<!---->", parser22); org.jsoup.nodes.Document document25 = org.jsoup.helper.DataUtil.parseInputStream(inputStream16, "hi!", "hi!#document", parser22); org.jsoup.parser.ParseErrorList parseErrorList26 = parser22.getErrors(); parseErrorList26.trimToSize(); boolean boolean28 = parseErrorList7.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList26); java.lang.Object[] objArray29 = parseErrorList26.toArray(); int int30 = parseErrorList26.size(); }
Code: static Document parseInputStream(InputStream input, String charsetName, String baseUri, Parser parser){if (input == null) return new Document(baseUri);input = ConstrainableInputStream.wrap(input, bufferSize, 1);Document doc = null;boolean fullyRead = false;input.mark(bufferSize);ByteBuffer firstBytes = readToByteBuffer(input, firstReadBufferSize - 0); fullyRead = input.read() == -1;;BomCharset bomCharset = detectCharsetFromBom(firstBytes);if (bomCharset != null)charsetName = bomCharset.charset;if (charsetName == null) { String docData = Charset.forName(defaultCharset).decode(firstBytes).toString();doc = parser.parseInput(docData, baseUri);Elements metaElements = doc.select("meta[http-equiv=content-type], meta[charset]");String foundCharset = null; for (Element meta : metaElements) {if (meta.hasAttr("http-equiv"))foundCharset = getCharsetFromContentType(meta.attr("content"));if (foundCharset == null && meta.hasAttr("charset"))foundCharset = meta.attr("charset");if (foundCharset != null)break;}if (foundCharset == null && doc.childNodeSize() > 0) {Node first = doc.childNode(0);XmlDeclaration decl = null;if (first instanceof XmlDeclaration)decl = (XmlDeclaration) first;if (decl != null) {if (decl.name().equalsIgnoreCase("xml"))foundCharset = decl.attr("encoding");}}foundCharset = validateCharset(foundCharset);if (foundCharset != null && !foundCharset.equalsIgnoreCase(defaultCharset)) { foundCharset = foundCharset.trim().replaceAll("[\"']", "");charsetName = foundCharset;doc = null;} else if (!false) {doc = null;}} else { Validate.notEmpty(charsetName, "Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML");}if (doc == null) {if (charsetName == null)charsetName = defaultCharset;BufferedReader reader = new BufferedReader(new InputStreamReader(input, charsetName), bufferSize);if (bomCharset != null && bomCharset.offset) reader.skip(1);try {doc = parser.parseInput(reader, baseUri);} catch (UncheckedIOException e) {throw e.ioException();}doc.outputSettings().charset(charsetName);}input.close();return doc;}public static ByteBuffer readToByteBuffer(InputStream inStream, int maxSize) throws IOException {Validate.isTrue(maxSize >= 0, "maxSize must be 0 (unlimited) or larger");final ConstrainableInputStream input = ConstrainableInputStream.wrap(inStream, bufferSize, maxSize);return input.readToByteBuffer(maxSize);}static ByteBuffer readToByteBuffer(InputStream inStream) throws IOException {return readToByteBuffer(inStream, 0);}static ByteBuffer readFileToByteBuffer(File file) throws IOException {RandomAccessFile randomAccessFile = null;try {randomAccessFile = new RandomAccessFile(file, "r");byte[] bytes = new byte[(int) randomAccessFile.length()];randomAccessFile.readFully(bytes);return ByteBuffer.wrap(bytes);} finally {if (randomAccessFile != null)randomAccessFile.close();}}static ByteBuffer emptyByteBuffer() {return ByteBuffer.allocate(0);}static String getCharsetFromContentType(String contentType) {if (contentType == null) return null;Matcher m = charsetPattern.matcher(contentType);if (m.find()) {String charset = m.group(1).trim();charset = charset.replace("charset=", "");return validateCharset(charset);}return null;}private static String validateCharset(String cs) {if (cs == null || cs.length() == 0) return null;cs = cs.trim().replaceAll("[\"']", "");try {if (Charset.isSupported(cs)) return cs;cs = cs.toUpperCase(Locale.ENGLISH);if (Charset.isSupported(cs)) return cs;} catch (IllegalCharsetNameException e) {}return null;}static String mimeBoundary() {final StringBuilder mime = new StringBuilder(boundaryLength);final Random rand = new Random();for (int i = 0; i < boundaryLength; i++) {mime.append(mimeBoundaryChars[rand.nextInt(mimeBoundaryChars.length)]);}return mime.toString();}private static BomCharset detectCharsetFromBom(final ByteBuffer byteData) {final Buffer buffer = byteData; buffer.mark();byte[] bom = new byte[4];if (byteData.remaining() >= bom.length) {byteData.get(bom);buffer.rewind();}if (bom[0] == 0x00 && bom[1] == 0x00 && bom[2] == (byte) 0xFE && bom[3] == (byte) 0xFF || bom[0] == (byte) 0xFF && bom[1] == (byte) 0xFE && bom[2] == 0x00 && bom[3] == 0x00) { return new BomCharset("UTF-32", false); } else if (bom[0] == (byte) 0xFE && bom[1] == (byte) 0xFF || bom[0] == (byte) 0xFF && bom[1] == (byte) 0xFE) {return new BomCharset("UTF-16", false); } else if (bom[0] == (byte) 0xEF && bom[1] == (byte) 0xBB && bom[2] == (byte) 0xBF) {return new BomCharset("UTF-8", true); }return null;}private static class BomCharset {private final String charset;private final boolean offset;public BomCharset(String charset, boolean offset) {this.charset = charset;this.offset = offset;}}}
tensor([[0.0044, 0.0059, 0.0023,  ..., 0.0034, 0.0010, 0.0015],
        [0.0039, 0.0055, 0.0026,  ..., 0.0038, 0.0008, 0.0015],
        [0.0044, 0.0063, 0.0027,  ..., 0.0035, 0.0010, 0.0013],
        ...,
        [0.0037, 0.0065, 0.0028,  ..., 0.0036, 0.0011, 0.0012],
        [0.0045, 0.0042, 0.0015,  ..., 0.0027, 0.0015, 0.0020],
        [0.0039, 0.0052, 0.0026,  ..., 0.0027, 0.0010, 0.0016]])