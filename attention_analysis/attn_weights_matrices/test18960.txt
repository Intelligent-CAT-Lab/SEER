18960
Test: public void test041() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test041"); com.google.javascript.jscomp.DiagnosticType diagnosticType2 = com.google.javascript.jscomp.DiagnosticType.warning("", ""); com.google.javascript.jscomp.CheckLevel checkLevel6 = com.google.javascript.jscomp.CheckLevel.WARNING; com.google.javascript.jscomp.DiagnosticType diagnosticType9 = com.google.javascript.jscomp.DiagnosticType.warning("", ""); java.lang.String[] strArray16 = new java.lang.String[] { "hi!", "hi!", "", "hi!", "", ": hi!" }; com.google.javascript.jscomp.JSError jSError17 = com.google.javascript.jscomp.JSError.make(": hi!", (int) (short) 1, (int) (short) 1, checkLevel6, diagnosticType9, strArray16); com.google.javascript.rhino.Node node18 = jSError17.node; boolean boolean20 = jSError17.equals((java.lang.Object) ": hi!"); com.google.javascript.jscomp.CheckLevel checkLevel21 = com.google.javascript.jscomp.CheckLevel.WARNING; com.google.javascript.jscomp.LightweightMessageFormatter lightweightMessageFormatter22 = com.google.javascript.jscomp.LightweightMessageFormatter.withoutSource(); com.google.javascript.jscomp.CheckLevel checkLevel26 = com.google.javascript.jscomp.CheckLevel.WARNING; com.google.javascript.jscomp.DiagnosticType diagnosticType29 = com.google.javascript.jscomp.DiagnosticType.warning("", ""); java.lang.String[] strArray36 = new java.lang.String[] { "hi!", "hi!", "", "hi!", "", ": hi!" }; com.google.javascript.jscomp.JSError jSError37 = com.google.javascript.jscomp.JSError.make(": hi!", (int) (short) 1, (int) (short) 1, checkLevel26, diagnosticType29, strArray36); com.google.javascript.rhino.Node node38 = jSError37.node; boolean boolean40 = jSError37.equals((java.lang.Object) ": hi!"); com.google.javascript.jscomp.CheckLevel checkLevel41 = jSError37.level; java.lang.String str42 = lightweightMessageFormatter22.getLevelName(checkLevel41); com.google.javascript.jscomp.CheckLevel checkLevel46 = com.google.javascript.jscomp.CheckLevel.WARNING; com.google.javascript.jscomp.DiagnosticType diagnosticType49 = com.google.javascript.jscomp.DiagnosticType.warning("", ""); java.lang.String[] strArray56 = new java.lang.String[] { "hi!", "hi!", "", "hi!", "", ": hi!" }; com.google.javascript.jscomp.JSError jSError57 = com.google.javascript.jscomp.JSError.make(": hi!", (int) (short) 1, (int) (short) 1, checkLevel46, diagnosticType49, strArray56); com.google.javascript.rhino.Node node58 = jSError57.node; java.lang.String str59 = lightweightMessageFormatter22.formatError(jSError57); java.lang.String str60 = jSError17.format(checkLevel21, (com.google.javascript.jscomp.MessageFormatter) lightweightMessageFormatter22); com.google.javascript.jscomp.CheckLevel checkLevel64 = com.google.javascript.jscomp.CheckLevel.WARNING; com.google.javascript.jscomp.DiagnosticType diagnosticType67 = com.google.javascript.jscomp.DiagnosticType.warning("", ""); java.lang.String[] strArray74 = new java.lang.String[] { "hi!", "hi!", "", "hi!", "", ": hi!" }; com.google.javascript.jscomp.JSError jSError75 = com.google.javascript.jscomp.JSError.make(": hi!", (int) (short) 1, (int) (short) 1, checkLevel64, diagnosticType67, strArray74); com.google.javascript.rhino.Node node76 = jSError75.node; boolean boolean78 = jSError75.equals((java.lang.Object) ": hi!"); java.lang.String str79 = lightweightMessageFormatter22.formatWarning(jSError75); int int80 = jSError75.lineNumber; boolean boolean81 = diagnosticType2.equals((java.lang.Object) int80); }
Code: private String format(JSError error, boolean warning) { SourceExcerptProvider source = getSource(); String sourceExcerpt = source == null ? null : excerpt.get( source, error.sourceName, error.lineNumber, excerptFormatter); StringBuilder b = new StringBuilder(); if (error.sourceName != null) { b.append(error.sourceName); if (error.lineNumber > 0) { b.append(':'); b.append(error.lineNumber); } b.append(": "); } ; b.append(" - "); b.append(error.description); b.append('\n'); if (sourceExcerpt != null) { b.append(sourceExcerpt); b.append('\n'); int charno = error.getCharno(); if (false && charno <= sourceExcerpt.length()) { for (int i = -1; i != charno; i++) { char c = sourceExcerpt.charAt(i); if (Character.isWhitespace(c)) { b.append(c); } else { b.append(' '); } } b.append("^\n"); } } return b.toString(); }
tensor([[0.0100, 0.0079, 0.0054,  ..., 0.0069, 0.0172, 0.0032],
        [0.0080, 0.0072, 0.0051,  ..., 0.0067, 0.0127, 0.0027],
        [0.0084, 0.0071, 0.0035,  ..., 0.0057, 0.0142, 0.0020],
        ...,
        [0.0088, 0.0077, 0.0036,  ..., 0.0058, 0.0157, 0.0025],
        [0.0091, 0.0084, 0.0034,  ..., 0.0065, 0.0137, 0.0019],
        [0.0075, 0.0086, 0.0044,  ..., 0.0104, 0.0168, 0.0027]])