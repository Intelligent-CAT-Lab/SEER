61061
Test: public void test539() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test539"); org.apache.commons.csv.CSVFormat cSVFormat1 = org.apache.commons.csv.CSVFormat.DEFAULT; org.apache.commons.csv.Quote quote2 = null; org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormat1.withQuotePolicy(quote2); org.apache.commons.csv.CSVParser cSVParser4 = org.apache.commons.csv.CSVParser.parse("\u2029", cSVFormat3); java.util.Map<java.lang.String, java.lang.Integer> strMap5 = cSVParser4.getHeaderMap(); org.apache.commons.csv.CSVFormat cSVFormat7 = org.apache.commons.csv.CSVFormat.DEFAULT; org.apache.commons.csv.CSVParser cSVParser8 = org.apache.commons.csv.CSVParser.parse("Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false", cSVFormat7); long long9 = cSVParser8.getRecordNumber(); org.apache.commons.csv.CSVRecord cSVRecord10 = cSVParser8.nextRecord(); long long11 = cSVParser8.getRecordNumber(); long long12 = cSVParser8.getCurrentLineNumber(); org.apache.commons.csv.CSVFormat cSVFormat14 = org.apache.commons.csv.CSVFormat.DEFAULT; org.apache.commons.csv.CSVParser cSVParser15 = org.apache.commons.csv.CSVParser.parse("Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false", cSVFormat14); java.util.Map<java.lang.String, java.lang.Integer> strMap16 = cSVParser15.getHeaderMap(); java.lang.String[] strArray22 = new java.lang.String[] { "\u2029", "\u2029", "hi!", "\u2029", "\u2029" }; java.util.Map<java.lang.String, java.lang.Integer> strMap23 = null; org.apache.commons.csv.CSVRecord cSVRecord26 = new org.apache.commons.csv.CSVRecord(strArray22, strMap23, "hi!", (long) (byte) 100); boolean boolean27 = cSVRecord26.isConsistent(); boolean boolean29 = cSVRecord26.isMapped("\u2029"); java.lang.String[] strArray30 = cSVRecord26.values(); java.lang.String[] strArray36 = new java.lang.String[] { "\u2029", "\u2029", "hi!", "\u2029", "\u2029" }; java.util.Map<java.lang.String, java.lang.Integer> strMap37 = null; org.apache.commons.csv.CSVRecord cSVRecord40 = new org.apache.commons.csv.CSVRecord(strArray36, strMap37, "hi!", (long) (byte) 100); boolean boolean41 = cSVRecord40.isConsistent(); org.apache.commons.csv.CSVRecord[] cSVRecordArray42 = new org.apache.commons.csv.CSVRecord[] { cSVRecord26, cSVRecord40 }; java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList43 = new java.util.ArrayList<org.apache.commons.csv.CSVRecord>(); boolean boolean44 = java.util.Collections.addAll((java.util.Collection<org.apache.commons.csv.CSVRecord>) cSVRecordList43, cSVRecordArray42); java.util.List<org.apache.commons.csv.CSVRecord> cSVRecordList45 = cSVParser15.getRecords((java.util.List<org.apache.commons.csv.CSVRecord>) cSVRecordList43); java.util.ArrayList<org.apache.commons.csv.CSVRecord> cSVRecordList46 = cSVParser8.getRecords(cSVRecordList43); java.util.AbstractList<org.apache.commons.csv.CSVRecord> cSVRecordList47 = cSVParser4.getRecords((java.util.AbstractList<org.apache.commons.csv.CSVRecord>) cSVRecordList43); java.util.Iterator<org.apache.commons.csv.CSVRecord> cSVRecordItor48 = cSVParser4.iterator(); }
Code: public Iterator<String> iterator() { return toList().iterator(); }
tensor([[0.1813, 0.1146, 0.1325, 0.1826, 0.1922, 0.1325, 0.0643],
        [0.1662, 0.1128, 0.1148, 0.2453, 0.2159, 0.1035, 0.0414],
        [0.1723, 0.1287, 0.1312, 0.2159, 0.2193, 0.0800, 0.0526],
        [0.1557, 0.1429, 0.1240, 0.1918, 0.1869, 0.1218, 0.0770],
        [0.1444, 0.1463, 0.1421, 0.1901, 0.2254, 0.0949, 0.0568],
        [0.1528, 0.1383, 0.1063, 0.2174, 0.2435, 0.0927, 0.0490],
        [0.1342, 0.1430, 0.0991, 0.2273, 0.2592, 0.0825, 0.0546]])