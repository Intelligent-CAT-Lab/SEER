,method,test
0,"    public LazyDynaBean() {
        this(new LazyDynaClass());
    }","  public void test0()  throws Throwable  {
      LazyDynaBean lazyDynaBean0 = null;
      try {
        lazyDynaBean0 = new LazyDynaBean((DynaClass) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.beanutils.LazyDynaBean"", e);
      }
  }"
1,"    public LazyDynaBean() {
        this(new LazyDynaClass());
    }","  public void test1()  throws Throwable  {
      LazyDynaBean lazyDynaBean0 = new LazyDynaBean();
  }"
2,"    public LazyDynaBean() {
        this(new LazyDynaClass());
    }","  public void test2()  throws Throwable  {
      Class<ConvertingWrapDynaBean> class0 = ConvertingWrapDynaBean.class;
      WrapDynaClass wrapDynaClass0 = WrapDynaClass.createDynaClass(class0);
      LazyDynaBean lazyDynaBean0 = new LazyDynaBean(wrapDynaClass0);
  }"
3,"    public LazyDynaBean() {
        this(new LazyDynaClass());
    }","  public void test3()  throws Throwable  {
      LazyDynaBean lazyDynaBean0 = new LazyDynaBean("""");
  }"
4,"    public Class<?> getTargetClass() {
        return currentClass;
    }","  public void test0()  throws Throwable  {
      DefaultIntrospectionContext defaultIntrospectionContext0 = new DefaultIntrospectionContext((Class<?>) null);
      Class<?> class0 = defaultIntrospectionContext0.getTargetClass();
}"
5,"    public Class<?> getTargetClass() {
        return currentClass;
    }","  public void test1()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      DefaultIntrospectionContext defaultIntrospectionContext0 = new DefaultIntrospectionContext(class0);
      Class<?> class1 = defaultIntrospectionContext0.getTargetClass();
}"
6,"    public PropertyDescriptor[] getPropertyDescriptors() {
        return descriptors.values().toArray(EMPTY_DESCRIPTORS);
    }","  public void test2()  throws Throwable  {
      Class<Object> class0 = Object.class;
      DefaultIntrospectionContext defaultIntrospectionContext0 = new DefaultIntrospectionContext(class0);
      PropertyDescriptor propertyDescriptor0 = new PropertyDescriptor(""Property descriptor must not be null!"", class0, (String) null, (String) null);
      defaultIntrospectionContext0.addPropertyDescriptor(propertyDescriptor0);
      PropertyDescriptor[] propertyDescriptorArray0 = defaultIntrospectionContext0.getPropertyDescriptors();
}"
7,"    public PropertyDescriptor getPropertyDescriptor(final String name) {
        return descriptors.get(name);
    }","  public void test3()  throws Throwable  {
      Class<Object> class0 = Object.class;
      DefaultIntrospectionContext defaultIntrospectionContext0 = new DefaultIntrospectionContext(class0);
      PropertyDescriptor propertyDescriptor0 = new PropertyDescriptor("" y%"", class0, (String) null, (String) null);
      propertyDescriptor0.setPreferred(true);
      defaultIntrospectionContext0.addPropertyDescriptor(propertyDescriptor0);
      PropertyDescriptor propertyDescriptor1 = defaultIntrospectionContext0.getPropertyDescriptor("" y%"");
}"
8,"    public PropertyDescriptor getPropertyDescriptor(final String name) {
        return descriptors.get(name);
    }","  public void test4()  throws Throwable  {
      Class<Object> class0 = Object.class;
      DefaultIntrospectionContext defaultIntrospectionContext0 = new DefaultIntrospectionContext(class0);
      PropertyDescriptor propertyDescriptor0 = new PropertyDescriptor(""Property descriptor must not be null!"", class0, (String) null, (String) null);
      propertyDescriptor0.setHidden(true);
      defaultIntrospectionContext0.addPropertyDescriptor(propertyDescriptor0);
      PropertyDescriptor propertyDescriptor1 = defaultIntrospectionContext0.getPropertyDescriptor(""Property descriptor must not be null!"");
}"
9,"    public PropertyDescriptor getPropertyDescriptor(final String name) {
        return descriptors.get(name);
    }","  public void test5()  throws Throwable  {
      Class<Object> class0 = Object.class;
      DefaultIntrospectionContext defaultIntrospectionContext0 = new DefaultIntrospectionContext(class0);
      PropertyDescriptor propertyDescriptor0 = new PropertyDescriptor("" y%"", class0, (String) null, (String) null);
      propertyDescriptor0.setExpert(true);
      defaultIntrospectionContext0.addPropertyDescriptor(propertyDescriptor0);
      PropertyDescriptor propertyDescriptor1 = defaultIntrospectionContext0.getPropertyDescriptor("" y%"");
}"
10,"    public PropertyDescriptor getPropertyDescriptor(final String name) {
        return descriptors.get(name);
    }","  public void test6()  throws Throwable  {
      Class<Object> class0 = Object.class;
      DefaultIntrospectionContext defaultIntrospectionContext0 = new DefaultIntrospectionContext(class0);
      PropertyDescriptor propertyDescriptor0 = new PropertyDescriptor(""M y%"", class0, (String) null, (String) null);
      propertyDescriptor0.setConstrained(true);
      defaultIntrospectionContext0.addPropertyDescriptor(propertyDescriptor0);
      PropertyDescriptor propertyDescriptor1 = defaultIntrospectionContext0.getPropertyDescriptor(""M y%"");
}"
11,"    public PropertyDescriptor getPropertyDescriptor(final String name) {
        return descriptors.get(name);
    }","  public void test7()  throws Throwable  {
      Class<String> class0 = String.class;
      DefaultIntrospectionContext defaultIntrospectionContext0 = new DefaultIntrospectionContext(class0);
      PropertyDescriptor propertyDescriptor0 = new PropertyDescriptor(""ZQg;=UTsN%3L"", (Method) null, (Method) null);
      propertyDescriptor0.setBound(true);
      defaultIntrospectionContext0.addPropertyDescriptor(propertyDescriptor0);
      PropertyDescriptor propertyDescriptor1 = defaultIntrospectionContext0.getPropertyDescriptor(""ZQg;=UTsN%3L"");
}"
12,"    public boolean hasProperty(final String name) {
        return descriptors.containsKey(name);
    }","  public void test8()  throws Throwable  {
      Class<Object> class0 = Object.class;
      DefaultIntrospectionContext defaultIntrospectionContext0 = new DefaultIntrospectionContext(class0);
      boolean boolean0 = defaultIntrospectionContext0.hasProperty((String) null);
}"
13,"    public void addPropertyDescriptors(final PropertyDescriptor[] descs) {
        if (descs == null) {
            throw new IllegalArgumentException(
                    ""Array with descriptors must not be null!"");
        }

        for (PropertyDescriptor desc : descs) {
            addPropertyDescriptor(desc);
        }
    }","  public void test9()  throws Throwable  {
      Class<Object> class0 = Object.class;
      DefaultIntrospectionContext defaultIntrospectionContext0 = new DefaultIntrospectionContext(class0);
      PropertyDescriptor[] propertyDescriptorArray0 = new PropertyDescriptor[2];
      // Undeclared exception!
      try { 
        defaultIntrospectionContext0.addPropertyDescriptors(propertyDescriptorArray0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Property descriptor must not be null!
         //
         verifyException(""org.apache.commons.beanutils.DefaultIntrospectionContext"", e);
      }
  }"
14,"    public void addPropertyDescriptors(final PropertyDescriptor[] descs) {
        if (descs == null) {
            throw new IllegalArgumentException(
                    ""Array with descriptors must not be null!"");
        }

        for (PropertyDescriptor desc : descs) {
            addPropertyDescriptor(desc);
        }
    }","  public void test10()  throws Throwable  {
      Class<String> class0 = String.class;
      DefaultIntrospectionContext defaultIntrospectionContext0 = new DefaultIntrospectionContext(class0);
      // Undeclared exception!
      try { 
        defaultIntrospectionContext0.addPropertyDescriptors((PropertyDescriptor[]) null);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Array with descriptors must not be null!
         //
         verifyException(""org.apache.commons.beanutils.DefaultIntrospectionContext"", e);
      }
  }"
15,"    public void addPropertyDescriptor(final PropertyDescriptor desc) {
        if (desc == null) {
            throw new IllegalArgumentException(
                    ""Property descriptor must not be null!"");
        }
        descriptors.put(desc.getName(), desc);
    }","  public void test11()  throws Throwable  {
      Class<Object> class0 = Object.class;
      DefaultIntrospectionContext defaultIntrospectionContext0 = new DefaultIntrospectionContext(class0);
      // Undeclared exception!
      try { 
        defaultIntrospectionContext0.addPropertyDescriptor((PropertyDescriptor) null);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Property descriptor must not be null!
         //
         verifyException(""org.apache.commons.beanutils.DefaultIntrospectionContext"", e);
      }
  }"
16,"    public boolean hasProperty(final String name) {
        return descriptors.containsKey(name);
    }","  public void test12()  throws Throwable  {
      Class<Object> class0 = Object.class;
      DefaultIntrospectionContext defaultIntrospectionContext0 = new DefaultIntrospectionContext(class0);
      PropertyDescriptor propertyDescriptor0 = new PropertyDescriptor(""y%"", class0, (String) null, (String) null);
      defaultIntrospectionContext0.addPropertyDescriptor(propertyDescriptor0);
      boolean boolean0 = defaultIntrospectionContext0.hasProperty(""y%"");
}"
17,"    public void addPropertyDescriptors(final PropertyDescriptor[] descs) {
        if (descs == null) {
            throw new IllegalArgumentException(
                    ""Array with descriptors must not be null!"");
        }

        for (PropertyDescriptor desc : descs) {
            addPropertyDescriptor(desc);
        }
    }","  public void test13()  throws Throwable  {
      Class<Object> class0 = Object.class;
      DefaultIntrospectionContext defaultIntrospectionContext0 = new DefaultIntrospectionContext(class0);
      PropertyDescriptor[] propertyDescriptorArray0 = defaultIntrospectionContext0.getPropertyDescriptors();
      defaultIntrospectionContext0.addPropertyDescriptors(propertyDescriptorArray0);
}"
18,"    public Set<String> propertyNames() {
        return descriptors.keySet();
    }","  public void test14()  throws Throwable  {
      Class<Object> class0 = Object.class;
      DefaultIntrospectionContext defaultIntrospectionContext0 = new DefaultIntrospectionContext(class0);
      Set<String> set0 = defaultIntrospectionContext0.propertyNames();
}"
19,"    public PropertyDescriptor getPropertyDescriptor(final String name) {
        return descriptors.get(name);
    }","  public void test15()  throws Throwable  {
      Class<Object> class0 = Object.class;
      DefaultIntrospectionContext defaultIntrospectionContext0 = new DefaultIntrospectionContext(class0);
      PropertyDescriptor propertyDescriptor0 = defaultIntrospectionContext0.getPropertyDescriptor((String) null);
}"
20,"    public Class<?> getTargetClass() {
        return currentClass;
    }","  public void test16()  throws Throwable  {
      Class<Object> class0 = Object.class;
      DefaultIntrospectionContext defaultIntrospectionContext0 = new DefaultIntrospectionContext(class0);
      Class<?> class1 = defaultIntrospectionContext0.getTargetClass();
}"
21,"    public void removePropertyDescriptor(final String name) {
        descriptors.remove(name);
    }","  public void test17()  throws Throwable  {
      Class<Object> class0 = Object.class;
      DefaultIntrospectionContext defaultIntrospectionContext0 = new DefaultIntrospectionContext(class0);
      defaultIntrospectionContext0.removePropertyDescriptor((String) null);
  }"
22,"    public NestedNullException() {
        super();
    }","  public void test0()  throws Throwable  {
      NestedNullException nestedNullException0 = new NestedNullException(""Tx97nEP7t_@/1"");
  }"
23,"    public NestedNullException() {
        super();
    }","  public void test1()  throws Throwable  {
      NestedNullException nestedNullException0 = new NestedNullException();
  }"
24,"    public static void copyProperty(final Object bean, final String name, final Object value)
        throws IllegalAccessException, InvocationTargetException {

        BeanUtilsBean.getInstance().copyProperty(bean, name, value);
    }","  public void test0()  throws Throwable  {
      WeakFastHashMap<Object, String> weakFastHashMap0 = new WeakFastHashMap<Object, String>();
      BeanUtils.copyProperty(""+xN;AD'wb=sVZ*o3"", ""+xN;AD'wb=sVZ*o3"", weakFastHashMap0);
}"
25,"    public static boolean initCause(final Throwable throwable, final Throwable cause) {
        return BeanUtilsBean.getInstance().initCause(throwable, cause);
    }","  public void test1()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable();
      MockThrowable mockThrowable1 = new MockThrowable(""Exception during introspection"");
      boolean boolean0 = BeanUtils.initCause(mockThrowable0, mockThrowable1);
}"
26,"    public static String getProperty(final Object bean, final String name)
            throws IllegalAccessException, InvocationTargetException,
            NoSuchMethodException {

        return BeanUtilsBean.getInstance().getProperty(bean, name);

    }","  public void test2()  throws Throwable  {
      Map<Integer, Object> map0 = BeanUtils.createCache();
      String string0 = BeanUtils.getProperty(map0, """");
}"
27,"    public static String getProperty(final Object bean, final String name)
            throws IllegalAccessException, InvocationTargetException,
            NoSuchMethodException {

        return BeanUtilsBean.getInstance().getProperty(bean, name);

    }","  public void test3()  throws Throwable  {
      WeakFastHashMap<String, String> weakFastHashMap0 = new WeakFastHashMap<String, String>();
      weakFastHashMap0.put(""<NULL>"", """");
      String string0 = BeanUtils.getProperty(weakFastHashMap0, ""<NULL>"");
}"
28,"    public static String getNestedProperty(final Object bean, final String name)
            throws IllegalAccessException, InvocationTargetException,
            NoSuchMethodException {

        return BeanUtilsBean.getInstance().getNestedProperty(bean, name);

    }","  public void test4()  throws Throwable  {
      WeakFastHashMap<String, Object> weakFastHashMap0 = new WeakFastHashMap<String, Object>();
      Integer integer0 = new Integer(0);
      weakFastHashMap0.put("""", integer0);
      String string0 = BeanUtils.getNestedProperty(weakFastHashMap0, """");
}"
29,"    public static int getDebug() {
        return (debug);
    }","  public void test5()  throws Throwable  {
      BeanUtils.setDebug(1);
      int int0 = BeanUtils.getDebug();
}"
30,"    public static int getDebug() {
        return (debug);
    }","  public void test6()  throws Throwable  {
      BeanUtils.setDebug((-434));
      int int0 = BeanUtils.getDebug();
}"
31,"    public static boolean getCacheFast(final Map<?, ?> map) {
        if (map instanceof WeakFastHashMap) {
            return ((WeakFastHashMap<?, ?>) map).getFast();
        } else {
            return false;
        }
    }","  public void test7()  throws Throwable  {
      WeakFastHashMap<Object, Integer> weakFastHashMap0 = new WeakFastHashMap<Object, Integer>();
      weakFastHashMap0.setFast(true);
      boolean boolean0 = BeanUtils.getCacheFast(weakFastHashMap0);
}"
32,"    public static String[] getArrayProperty(final Object bean, final String name)
            throws IllegalAccessException, InvocationTargetException,
            NoSuchMethodException {

        return BeanUtilsBean.getInstance().getArrayProperty(bean, name);
    }","  public void test8()  throws Throwable  {
      WeakFastHashMap<String, Object> weakFastHashMap0 = new WeakFastHashMap<String, Object>(0);
      weakFastHashMap0.put(""Bv]l]X:o1bP136L^K-"", ""Bv]l]X:o1bP136L^K-"");
      String[] stringArray0 = BeanUtils.getArrayProperty(weakFastHashMap0, ""Bv]l]X:o1bP136L^K-"");
}"
33,"    public static Map<String, String> describe(final Object bean)
            throws IllegalAccessException, InvocationTargetException,
            NoSuchMethodException {

        return BeanUtilsBean.getInstance().describe(bean);
    }","  public void test9()  throws Throwable  {
      Map<String, String> map0 = BeanUtils.describe(""Bv]l]X:o1bP136L^K-"");
}"
34,"    public static void setProperty(final Object bean, final String name, final Object value)
        throws IllegalAccessException, InvocationTargetException {

        BeanUtilsBean.getInstance().setProperty(bean, name, value);
    }","  public void test10()  throws Throwable  {
      WeakFastHashMap<Object, String> weakFastHashMap0 = new WeakFastHashMap<Object, String>();
      Integer integer0 = new Integer(0);
      // Undeclared exception!
      try { 
        BeanUtils.setProperty(weakFastHashMap0, (String) null, integer0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // No name specified for bean class 'class org.apache.commons.beanutils.WeakFastHashMap'
         //
         verifyException(""org.apache.commons.beanutils.PropertyUtilsBean"", e);
      }
  }"
35,"    public static void populate(final Object bean, final Map<String, ? extends Object> properties)
        throws IllegalAccessException, InvocationTargetException {

        BeanUtilsBean.getInstance().populate(bean, properties);
    }","  public void test11()  throws Throwable  {
      WeakFastHashMap<String, Object> weakFastHashMap0 = new WeakFastHashMap<String, Object>(3195, 3195);
      weakFastHashMap0.put(""|Vmi;6_wO=0QS(Psl3A"", ""|Vmi;6_wO=0QS(Psl3A"");
      // Undeclared exception!
      try { 
        BeanUtils.populate(""org.apache.commons.beanutils.BeanUtils"", weakFastHashMap0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Missing End Delimiter
         //
         verifyException(""org.apache.commons.beanutils.expression.DefaultResolver"", e);
      }
  }"
36,"    public static String getSimpleProperty(final Object bean, final String name)
            throws IllegalAccessException, InvocationTargetException,
            NoSuchMethodException {

        return BeanUtilsBean.getInstance().getSimpleProperty(bean, name);

    }","  public void test12()  throws Throwable  {
      Integer integer0 = new Integer(0);
      // Undeclared exception!
      try { 
        BeanUtils.getSimpleProperty(integer0, ""org.apache.commons.beanutils.BeanUtils"");
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Nested property names are not allowed: Property 'org.apache.commons.beanutils.BeanUtils' on bean class 'class java.lang.Integer'
         //
         verifyException(""org.apache.commons.beanutils.PropertyUtilsBean"", e);
      }
  }"
37,"    public static String getProperty(final Object bean, final String name)
            throws IllegalAccessException, InvocationTargetException,
            NoSuchMethodException {

        return BeanUtilsBean.getInstance().getProperty(bean, name);

    }","  public void test13()  throws Throwable  {
      Map<String, String> map0 = BeanUtils.createCache();
      WeakFastHashMap<String, Object> weakFastHashMap0 = new WeakFastHashMap<String, Object>(map0);
      Object object0 = BeanUtils.cloneBean(weakFastHashMap0);
      // Undeclared exception!
      try { 
        BeanUtils.getProperty(object0, ""Yfq y; =.w"");
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Null property value for 'Yfq y; =.w' on bean class 'class org.apache.commons.beanutils.WeakFastHashMap'
         //
         verifyException(""org.apache.commons.beanutils.PropertyUtilsBean"", e);
      }
  }"
38,"    public static String getProperty(final Object bean, final String name)
            throws IllegalAccessException, InvocationTargetException,
            NoSuchMethodException {

        return BeanUtilsBean.getInstance().getProperty(bean, name);

    }","  public void test14()  throws Throwable  {
      Object object0 = new Object();
      try { 
        BeanUtils.getProperty(object0, ""Zr"");
        fail(""Expecting exception: NoSuchMethodException"");
      } catch(NoSuchMethodException e) {
         //
         // Unknown property 'Zr' on class 'class java.lang.Object'
         //
         verifyException(""org.apache.commons.beanutils.PropertyUtilsBean"", e);
      }
  }"
39,"    public static String getNestedProperty(final Object bean, final String name)
            throws IllegalAccessException, InvocationTargetException,
            NoSuchMethodException {

        return BeanUtilsBean.getInstance().getNestedProperty(bean, name);

    }","  public void test15()  throws Throwable  {
      Map<Object, String> map0 = BeanUtils.createCache();
      // Undeclared exception!
      try { 
        BeanUtils.getNestedProperty(map0, ""q.^`ArOO"");
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Null property value for 'q.^`ArOO' on bean class 'class org.apache.commons.beanutils.WeakFastHashMap'
         //
         verifyException(""org.apache.commons.beanutils.PropertyUtilsBean"", e);
      }
  }"
40,"    public static String getNestedProperty(final Object bean, final String name)
            throws IllegalAccessException, InvocationTargetException,
            NoSuchMethodException {

        return BeanUtilsBean.getInstance().getNestedProperty(bean, name);

    }","  public void test16()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable();
      try { 
        BeanUtils.getNestedProperty(mockThrowable0, ""6PD|M$SUADLX^sM<MO="");
        fail(""Expecting exception: NoSuchMethodException"");
      } catch(NoSuchMethodException e) {
         //
         // Unknown property '6PD|M$SUADLX^sM<MO=' on class 'class org.evosuite.runtime.mock.java.lang.MockThrowable'
         //
         verifyException(""org.apache.commons.beanutils.PropertyUtilsBean"", e);
      }
  }"
41,"    public static String getNestedProperty(final Object bean, final String name)
            throws IllegalAccessException, InvocationTargetException,
            NoSuchMethodException {

        return BeanUtilsBean.getInstance().getNestedProperty(bean, name);

    }","  public void test17()  throws Throwable  {
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        BeanUtils.getNestedProperty(object0, (String) null);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // No name specified for bean class 'class java.lang.Object'
         //
         verifyException(""org.apache.commons.beanutils.PropertyUtilsBean"", e);
      }
  }"
42,"    public static String getMappedProperty(final Object bean, final String name)
            throws IllegalAccessException, InvocationTargetException,
            NoSuchMethodException {

        return BeanUtilsBean.getInstance().getMappedProperty(bean, name);

    }","  public void test18()  throws Throwable  {
      WeakFastHashMap<String, Object> weakFastHashMap0 = new WeakFastHashMap<String, Object>();
      WeakFastHashMap<Object, Object> weakFastHashMap1 = new WeakFastHashMap<Object, Object>(weakFastHashMap0);
      // Undeclared exception!
      try { 
        BeanUtils.getMappedProperty((Object) weakFastHashMap1, ""."", """");
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Null property value for '' on bean class 'class org.apache.commons.beanutils.WeakFastHashMap'
         //
         verifyException(""org.apache.commons.beanutils.PropertyUtilsBean"", e);
      }
  }"
43,"    public static String getMappedProperty(final Object bean, final String name)
            throws IllegalAccessException, InvocationTargetException,
            NoSuchMethodException {

        return BeanUtilsBean.getInstance().getMappedProperty(bean, name);

    }","  public void test19()  throws Throwable  {
      Object object0 = new Object();
      try { 
        BeanUtils.getMappedProperty(object0, ""uCc"", ""uCc"");
        fail(""Expecting exception: NoSuchMethodException"");
      } catch(NoSuchMethodException e) {
         //
         // Unknown property 'uCc'+ on bean class 'class java.lang.Object'
         //
         verifyException(""org.apache.commons.beanutils.PropertyUtilsBean"", e);
      }
  }"
44,"    public static String getMappedProperty(final Object bean, final String name)
            throws IllegalAccessException, InvocationTargetException,
            NoSuchMethodException {

        return BeanUtilsBean.getInstance().getMappedProperty(bean, name);

    }","  public void test20()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable();
      try { 
        BeanUtils.getMappedProperty((Object) mockThrowable0, ""Error getting the Throwable initCause() method"");
        fail(""Expecting exception: NoSuchMethodException"");
      } catch(NoSuchMethodException e) {
         //
         // Unknown property 'Error getting the Throwable initCause'+ on bean class 'class org.evosuite.runtime.mock.java.lang.MockThrowable'
         //
         verifyException(""org.apache.commons.beanutils.PropertyUtilsBean"", e);
      }
  }"
45,"    public static String getIndexedProperty(final Object bean, final String name)
            throws IllegalAccessException, InvocationTargetException,
            NoSuchMethodException {

        return BeanUtilsBean.getInstance().getIndexedProperty(bean, name);

    }","  public void test21()  throws Throwable  {
      Integer integer0 = new Integer(783);
      try { 
        BeanUtils.getIndexedProperty((Object) integer0, ""Udl5:WaM|*`6Hv~/`"", 783);
        fail(""Expecting exception: NoSuchMethodException"");
      } catch(NoSuchMethodException e) {
         //
         // Unknown property 'Udl5:WaM|*`6Hv~/`' on bean class 'class java.lang.Integer'
         //
         verifyException(""org.apache.commons.beanutils.PropertyUtilsBean"", e);
      }
  }"
46,"    public static String getIndexedProperty(final Object bean, final String name)
            throws IllegalAccessException, InvocationTargetException,
            NoSuchMethodException {

        return BeanUtilsBean.getInstance().getIndexedProperty(bean, name);

    }","  public void test22()  throws Throwable  {
      WeakFastHashMap<Object, String> weakFastHashMap0 = new WeakFastHashMap<Object, String>(2644, 2644);
      // Undeclared exception!
      try { 
        BeanUtils.getIndexedProperty((Object) weakFastHashMap0, (String) null, (-2135));
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // No name specified for bean class 'class org.apache.commons.beanutils.WeakFastHashMap'
         //
         verifyException(""org.apache.commons.beanutils.PropertyUtilsBean"", e);
      }
  }"
47,"    public static String[] getArrayProperty(final Object bean, final String name)
            throws IllegalAccessException, InvocationTargetException,
            NoSuchMethodException {

        return BeanUtilsBean.getInstance().getArrayProperty(bean, name);
    }","  public void test23()  throws Throwable  {
      WeakFastHashMap<String, Object> weakFastHashMap0 = new WeakFastHashMap<String, Object>(1548, 3195);
      // Undeclared exception!
      try { 
        BeanUtils.getArrayProperty(weakFastHashMap0, ""org.apache.commons.beanutils.BeanUtils"");
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Null property value for 'org.apache.commons.beanutils.BeanUtils' on bean class 'class org.apache.commons.beanutils.WeakFastHashMap'
         //
         verifyException(""org.apache.commons.beanutils.PropertyUtilsBean"", e);
      }
  }"
48,"    public static String[] getArrayProperty(final Object bean, final String name)
            throws IllegalAccessException, InvocationTargetException,
            NoSuchMethodException {

        return BeanUtilsBean.getInstance().getArrayProperty(bean, name);
    }","  public void test24()  throws Throwable  {
      Integer integer0 = new Integer((-10));
      try { 
        BeanUtils.getArrayProperty(integer0, ""S5k#_bJb%|N+BI{s&"");
        fail(""Expecting exception: NoSuchMethodException"");
      } catch(NoSuchMethodException e) {
         //
         // Unknown property 'S5k#_bJb%|N+BI{s&' on class 'class java.lang.Integer'
         //
         verifyException(""org.apache.commons.beanutils.PropertyUtilsBean"", e);
      }
  }"
49,"    public static String[] getArrayProperty(final Object bean, final String name)
            throws IllegalAccessException, InvocationTargetException,
            NoSuchMethodException {

        return BeanUtilsBean.getInstance().getArrayProperty(bean, name);
    }","  public void test25()  throws Throwable  {
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        BeanUtils.getArrayProperty(object0, (String) null);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // No name specified for bean class 'class java.lang.Object'
         //
         verifyException(""org.apache.commons.beanutils.PropertyUtilsBean"", e);
      }
  }"
50,"    public static void copyProperties(final Object dest, final Object orig)
        throws IllegalAccessException, InvocationTargetException {

        BeanUtilsBean.getInstance().copyProperties(dest, orig);
    }","  public void test26()  throws Throwable  {
      // Undeclared exception!
      try { 
        BeanUtils.copyProperties((Object) null, (Object) null);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // No destination bean specified
         //
         verifyException(""org.apache.commons.beanutils.BeanUtilsBean"", e);
      }
  }"
51,"    public static void copyProperties(final Object dest, final Object orig)
        throws IllegalAccessException, InvocationTargetException {

        BeanUtilsBean.getInstance().copyProperties(dest, orig);
    }","  public void test27()  throws Throwable  {
      WeakFastHashMap<Object, String> weakFastHashMap0 = new WeakFastHashMap<Object, String>();
      WeakFastHashMap<String, Integer> weakFastHashMap1 = new WeakFastHashMap<String, Integer>(0);
      Object object0 = BeanUtils.cloneBean(weakFastHashMap1);
      weakFastHashMap0.put(object0, ""JieT"");
      // Undeclared exception!
      try { 
        BeanUtils.copyProperties("" "", weakFastHashMap0);
        fail(""Expecting exception: ClassCastException"");
      } catch(ClassCastException e) {
         //
         // org.apache.commons.beanutils.WeakFastHashMap cannot be cast to java.lang.String
         //
         verifyException(""org.apache.commons.beanutils.BeanUtilsBean"", e);
      }
  }"
52,"    public static Object cloneBean(final Object bean)
            throws IllegalAccessException, InstantiationException,
            InvocationTargetException, NoSuchMethodException {

        return BeanUtilsBean.getInstance().cloneBean(bean);

    }","  public void test28()  throws Throwable  {
      WeakFastHashMap<String, Object> weakFastHashMap0 = new WeakFastHashMap<String, Object>(32, 32);
      weakFastHashMap0.put("".~}~SCqiU1Ph-f"", (Object) null);
      // Undeclared exception!
      try { 
        BeanUtils.cloneBean(weakFastHashMap0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Null property value for '' on bean class 'class org.apache.commons.beanutils.WeakFastHashMap'
         //
         verifyException(""org.apache.commons.beanutils.PropertyUtilsBean"", e);
      }
  }"
53,"    public static Object cloneBean(final Object bean)
            throws IllegalAccessException, InstantiationException,
            InvocationTargetException, NoSuchMethodException {

        return BeanUtilsBean.getInstance().cloneBean(bean);

    }","  public void test29()  throws Throwable  {
      // Undeclared exception!
      try { 
        BeanUtils.cloneBean((Object) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.beanutils.BeanUtilsBean"", e);
      }
  }"
54,"    public static Object cloneBean(final Object bean)
            throws IllegalAccessException, InstantiationException,
            InvocationTargetException, NoSuchMethodException {

        return BeanUtilsBean.getInstance().cloneBean(bean);

    }","  public void test30()  throws Throwable  {
      Integer integer0 = new Integer(0);
      try { 
        BeanUtils.cloneBean(integer0);
        fail(""Expecting exception: InstantiationException"");
      } catch(InstantiationException e) {
      }
  }"
55,"    public static Object cloneBean(final Object bean)
            throws IllegalAccessException, InstantiationException,
            InvocationTargetException, NoSuchMethodException {

        return BeanUtilsBean.getInstance().cloneBean(bean);

    }","  public void test31()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      WeakFastHashMap<Integer, String> weakFastHashMap0 = new WeakFastHashMap<Integer, String>(0);
      BiFunction<Object, Object, Integer> biFunction0 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap0.merge((Object) null, weakFastHashMap0, biFunction0);
      // Undeclared exception!
      try { 
        BeanUtils.cloneBean(hashMap0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // No name specified for bean class 'class java.util.HashMap'
         //
         verifyException(""org.apache.commons.beanutils.PropertyUtilsBean"", e);
      }
  }"
56,"    public static Object cloneBean(final Object bean)
            throws IllegalAccessException, InstantiationException,
            InvocationTargetException, NoSuchMethodException {

        return BeanUtilsBean.getInstance().cloneBean(bean);

    }","  public void test32()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable();
      WeakFastHashMap<Object, String> weakFastHashMap0 = new WeakFastHashMap<Object, String>(0);
      weakFastHashMap0.put(mockThrowable0, ""Exception during introspection"");
      // Undeclared exception!
      try { 
        BeanUtils.cloneBean(weakFastHashMap0);
        fail(""Expecting exception: ClassCastException"");
      } catch(ClassCastException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable cannot be cast to java.lang.String
         //
         verifyException(""org.apache.commons.beanutils.PropertyUtilsBean"", e);
      }
  }"
57,"    public static void setCacheFast(final Map<?, ?> map, final boolean fast) {
        if (map instanceof WeakFastHashMap) {
            ((WeakFastHashMap<?, ?>)map).setFast(fast);
        }
    }","  public void test33()  throws Throwable  {
      WeakFastHashMap<Object, Object> weakFastHashMap0 = new WeakFastHashMap<Object, Object>(0);
      BeanUtils.setCacheFast(weakFastHashMap0, false);
}"
58,"    public static void setCacheFast(final Map<?, ?> map, final boolean fast) {
        if (map instanceof WeakFastHashMap) {
            ((WeakFastHashMap<?, ?>)map).setFast(fast);
        }
    }","  public void test34()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      BeanUtils.setCacheFast(hashMap0, false);
}"
59,"    public static boolean getCacheFast(final Map<?, ?> map) {
        if (map instanceof WeakFastHashMap) {
            return ((WeakFastHashMap<?, ?>) map).getFast();
        } else {
            return false;
        }
    }","  public void test35()  throws Throwable  {
      Map<WeakFastHashMap<Integer, Object>, Integer> map0 = BeanUtils.createCache();
      boolean boolean0 = BeanUtils.getCacheFast(map0);
}"
60,"    public static boolean getCacheFast(final Map<?, ?> map) {
        if (map instanceof WeakFastHashMap) {
            return ((WeakFastHashMap<?, ?>) map).getFast();
        } else {
            return false;
        }
    }","  public void test36()  throws Throwable  {
      boolean boolean0 = BeanUtils.getCacheFast((Map<?, ?>) null);
}"
61,"    public static String getSimpleProperty(final Object bean, final String name)
            throws IllegalAccessException, InvocationTargetException,
            NoSuchMethodException {

        return BeanUtilsBean.getInstance().getSimpleProperty(bean, name);

    }","  public void test37()  throws Throwable  {
      try { 
        BeanUtils.getSimpleProperty(""CZj'"", ""^{_6vB"");
        fail(""Expecting exception: NoSuchMethodException"");
      } catch(NoSuchMethodException e) {
         //
         // Unknown property '^{_6vB' on class 'class java.lang.String'
         //
         verifyException(""org.apache.commons.beanutils.PropertyUtilsBean"", e);
      }
  }"
62,"    public static int getDebug() {
        return (debug);
    }","  public void test38()  throws Throwable  {
      int int0 = BeanUtils.getDebug();
}"
63,"    public static int getDebug() {
        return (debug);
    }","  public void test39()  throws Throwable  {
      BeanUtils beanUtils0 = new BeanUtils();
}"
64,"    public static boolean initCause(final Throwable throwable, final Throwable cause) {
        return BeanUtilsBean.getInstance().initCause(throwable, cause);
    }","  public void test40()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable();
      boolean boolean0 = BeanUtils.initCause(mockThrowable0, mockThrowable0);
}"
65,"    public static void populate(final Object bean, final Map<String, ? extends Object> properties)
        throws IllegalAccessException, InvocationTargetException {

        BeanUtilsBean.getInstance().populate(bean, properties);
    }","  public void test41()  throws Throwable  {
      Integer integer0 = new Integer(3195);
      BeanUtils.populate(integer0, (Map<String, ?>) null);
  }"
66,"    public static String[] getArrayProperty(final Object bean, final String name)
            throws IllegalAccessException, InvocationTargetException,
            NoSuchMethodException {

        return BeanUtilsBean.getInstance().getArrayProperty(bean, name);
    }","  public void test42()  throws Throwable  {
      WeakFastHashMap<Integer, String> weakFastHashMap0 = new WeakFastHashMap<Integer, String>(0);
      String[] stringArray0 = BeanUtils.getArrayProperty(weakFastHashMap0, ""' is null, so skipping ths setter"");
}"
67,"    public static Map<String, String> describe(final Object bean)
            throws IllegalAccessException, InvocationTargetException,
            NoSuchMethodException {

        return BeanUtilsBean.getInstance().describe(bean);
    }","  public void test43()  throws Throwable  {
      Integer integer0 = new Integer(783);
      Map<String, String> map0 = BeanUtils.describe(integer0);
}"
68,"    public static void copyProperties(final Object dest, final Object orig)
        throws IllegalAccessException, InvocationTargetException {

        BeanUtilsBean.getInstance().copyProperties(dest, orig);
    }","  public void test44()  throws Throwable  {
      WeakFastHashMap<Object, String> weakFastHashMap0 = new WeakFastHashMap<Object, String>();
      BeanUtils.copyProperties("" "", weakFastHashMap0);
}"
69,"    public static String getMappedProperty(final Object bean, final String name)
            throws IllegalAccessException, InvocationTargetException,
            NoSuchMethodException {

        return BeanUtilsBean.getInstance().getMappedProperty(bean, name);

    }","  public void test45()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable();
      // Undeclared exception!
      try { 
        BeanUtils.getMappedProperty((Object) mockThrowable0, ""Tq"");
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Invalid mapped property 'Tq' on bean class 'class org.evosuite.runtime.mock.java.lang.MockThrowable'
         //
         verifyException(""org.apache.commons.beanutils.PropertyUtilsBean"", e);
      }
  }"
70,"    public static void setProperty(final Object bean, final String name, final Object value)
        throws IllegalAccessException, InvocationTargetException {

        BeanUtilsBean.getInstance().setProperty(bean, name, value);
    }","  public void test46()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable();
      BeanUtils.setProperty(mockThrowable0, ""UIxxZ\""xn7$"", ""UIxxZ\""xn7$"");
}"
71,"    public static String getNestedProperty(final Object bean, final String name)
            throws IllegalAccessException, InvocationTargetException,
            NoSuchMethodException {

        return BeanUtilsBean.getInstance().getNestedProperty(bean, name);

    }","  public void test47()  throws Throwable  {
      WeakFastHashMap<Integer, String> weakFastHashMap0 = new WeakFastHashMap<Integer, String>(0);
      String string0 = BeanUtils.getNestedProperty(weakFastHashMap0, ""' is null, so skipping ths setter"");
}"
72,"    public static String getProperty(final Object bean, final String name)
            throws IllegalAccessException, InvocationTargetException,
            NoSuchMethodException {

        return BeanUtilsBean.getInstance().getProperty(bean, name);

    }","  public void test48()  throws Throwable  {
      // Undeclared exception!
      try { 
        BeanUtils.getProperty("""", (String) null);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // No name specified for bean class 'class java.lang.String'
         //
         verifyException(""org.apache.commons.beanutils.PropertyUtilsBean"", e);
      }
  }"
73,"    public static String getMappedProperty(final Object bean, final String name)
            throws IllegalAccessException, InvocationTargetException,
            NoSuchMethodException {

        return BeanUtilsBean.getInstance().getMappedProperty(bean, name);

    }","  public void test49()  throws Throwable  {
      // Undeclared exception!
      try { 
        BeanUtils.getMappedProperty((Object) null, (String) null, """");
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // No bean specified
         //
         verifyException(""org.apache.commons.beanutils.PropertyUtilsBean"", e);
      }
  }"
74,"    public static String getIndexedProperty(final Object bean, final String name)
            throws IllegalAccessException, InvocationTargetException,
            NoSuchMethodException {

        return BeanUtilsBean.getInstance().getIndexedProperty(bean, name);

    }","  public void test50()  throws Throwable  {
      // Undeclared exception!
      try { 
        BeanUtils.getIndexedProperty((Object) """", ""ROVZ&/T#dky"");
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Invalid indexed property 'ROVZ&/T#dky' on bean class 'class java.lang.String'
         //
         verifyException(""org.apache.commons.beanutils.PropertyUtilsBean"", e);
      }
  }"
75,"    public static String getIndexedProperty(final Object bean, final String name)
            throws IllegalAccessException, InvocationTargetException,
            NoSuchMethodException {

        return BeanUtilsBean.getInstance().getIndexedProperty(bean, name);

    }","  public void test51()  throws Throwable  {
      Map<String, String> map0 = BeanUtils.createCache();
      WeakFastHashMap<String, String> weakFastHashMap0 = new WeakFastHashMap<String, String>(map0);
      // Undeclared exception!
      try { 
        BeanUtils.getIndexedProperty((Object) weakFastHashMap0, ""org.apache.commons.beanutils.BeanUtils"", (-2470));
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Null property value for 'org' on bean class 'class org.apache.commons.beanutils.WeakFastHashMap'
         //
         verifyException(""org.apache.commons.beanutils.PropertyUtilsBean"", e);
      }
  }"
76,"    public static void copyProperty(final Object bean, final String name, final Object value)
        throws IllegalAccessException, InvocationTargetException {

        BeanUtilsBean.getInstance().copyProperty(bean, name, value);
    }","  public void test52()  throws Throwable  {
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        BeanUtils.copyProperty("""", ""1G}5<O$_#(=Pyq|iWUz"", object0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Missing End Delimiter
         //
         verifyException(""org.apache.commons.beanutils.expression.DefaultResolver"", e);
      }
  }"
77,,"  public void test0()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = WrapDynaClass.dynaClasses;
      // Undeclared exception!
      try { 
        hashMap0.put((Object) null, ""<:6"");
        fail(""Expecting exception: ClassCastException"");
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to org.apache.commons.beanutils.WrapDynaClass
         //
         verifyException(""org.apache.commons.beanutils.WrapDynaClass$2"", e);
      }
  }"
78,"    public String getName() {

        return beanClassName;

    }","  public void test1()  throws Throwable  {
      Class<DynaProperty> class0 = DynaProperty.class;
      WrapDynaClass wrapDynaClass0 = WrapDynaClass.createDynaClass(class0);
      wrapDynaClass0.introspect();
}"
79,"    protected PropertyUtilsBean getPropertyUtilsBean() {
        return propertyUtilsBean;
    }","  public void test2()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      WrapDynaClass wrapDynaClass0 = WrapDynaClass.createDynaClass(class0);
      PropertyUtilsBean propertyUtilsBean0 = wrapDynaClass0.getPropertyUtilsBean();
}"
80,"    public String getName() {

        return beanClassName;

    }","  public void test3()  throws Throwable  {
      Class<DynaProperty> class0 = DynaProperty.class;
      WrapDynaClass wrapDynaClass0 = WrapDynaClass.createDynaClass(class0);
      wrapDynaClass0.getDynaProperty("""");
}"
81,"    public DynaProperty[] getDynaProperties() {

        return (properties);

    }","  public void test4()  throws Throwable  {
      Class<PropertyDescriptor> class0 = PropertyDescriptor.class;
      WrapDynaClass wrapDynaClass0 = WrapDynaClass.createDynaClass(class0);
      DynaProperty[] dynaPropertyArray0 = wrapDynaClass0.getDynaProperties();
}"
82,"    protected Class<?> getBeanClass() {
        return beanClassRef.get();
    }","  public void test5()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      WrapDynaClass wrapDynaClass0 = WrapDynaClass.createDynaClass(class0);
      Class<?> class1 = wrapDynaClass0.getBeanClass();
}"
83,"    public DynaBean newInstance()
            throws IllegalAccessException, InstantiationException {

        return new WrapDynaBean(getBeanClass().newInstance());

    }","  public void test6()  throws Throwable  {
      Class<DynaProperty> class0 = DynaProperty.class;
      WrapDynaClass wrapDynaClass0 = WrapDynaClass.createDynaClass(class0);
      try { 
        wrapDynaClass0.newInstance();
        fail(""Expecting exception: InstantiationException"");
      } catch(InstantiationException e) {
      }
  }"
84,"    public PropertyDescriptor getPropertyDescriptor(final String name) {

        return (descriptorsMap.get(name));

    }","  public void test7()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      WrapDynaClass wrapDynaClass0 = WrapDynaClass.createDynaClass(class0);
      PropertyDescriptor propertyDescriptor0 = wrapDynaClass0.getPropertyDescriptor("""");
}"
85,"    public DynaProperty getDynaProperty(final String name) {

        if (name == null) {
            throw new IllegalArgumentException
                    (""No property name specified"");
        }
        return (propertiesMap.get(name));

    }","  public void test8()  throws Throwable  {
      Class<WrapDynaClass> class0 = WrapDynaClass.class;
      WrapDynaClass wrapDynaClass0 = WrapDynaClass.createDynaClass(class0);
      DynaProperty dynaProperty0 = wrapDynaClass0.getDynaProperty("""");
}"
86,"    public static WrapDynaClass createDynaClass(final Class<?> beanClass) {

        return createDynaClass(beanClass, null);

    }","  public void test9()  throws Throwable  {
      PropertyUtilsBean propertyUtilsBean0 = PropertyUtilsBean.getInstance();
      // Undeclared exception!
      try { 
        WrapDynaClass.createDynaClass((Class<?>) null, propertyUtilsBean0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.beanutils.WrapDynaClass"", e);
      }
  }"
87,"    public static WrapDynaClass createDynaClass(final Class<?> beanClass) {

        return createDynaClass(beanClass, null);

    }","  public void test10()  throws Throwable  {
      // Undeclared exception!
      try { 
        WrapDynaClass.createDynaClass((Class<?>) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.beanutils.WrapDynaClass"", e);
      }
  }"
88,"    public DynaProperty getDynaProperty(final String name) {

        if (name == null) {
            throw new IllegalArgumentException
                    (""No property name specified"");
        }
        return (propertiesMap.get(name));

    }","  public void test11()  throws Throwable  {
      Class<PropertyDescriptor> class0 = PropertyDescriptor.class;
      HashMap<Object, Object> hashMap0 = WrapDynaClass.dynaClasses;
      WrapDynaClass wrapDynaClass0 = WrapDynaClass.createDynaClass(class0, (PropertyUtilsBean) null);
      DynaProperty dynaProperty0 = wrapDynaClass0.getDynaProperty(""(kC"");
}"
89,"    protected Class<?> getBeanClass() {
        return beanClassRef.get();
    }","  public void test12()  throws Throwable  {
      Class<Object> class0 = Object.class;
      PropertyUtilsBean propertyUtilsBean0 = new PropertyUtilsBean();
      WrapDynaClass wrapDynaClass0 = WrapDynaClass.createDynaClass(class0, propertyUtilsBean0);
      Class<?> class1 = wrapDynaClass0.getBeanClass();
}"
90,"    public DynaProperty getDynaProperty(final String name) {

        if (name == null) {
            throw new IllegalArgumentException
                    (""No property name specified"");
        }
        return (propertiesMap.get(name));

    }","  public void test13()  throws Throwable  {
      Class<PropertyDescriptor> class0 = PropertyDescriptor.class;
      WrapDynaClass wrapDynaClass0 = WrapDynaClass.createDynaClass(class0);
      // Undeclared exception!
      try { 
        wrapDynaClass0.getDynaProperty((String) null);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // No property name specified
         //
         verifyException(""org.apache.commons.beanutils.WrapDynaClass"", e);
      }
  }"
91,"    public DynaProperty getDynaProperty(final String name) {

        if (name == null) {
            throw new IllegalArgumentException
                    (""No property name specified"");
        }
        return (propertiesMap.get(name));

    }","  public void test14()  throws Throwable  {
      Class<PropertyDescriptor> class0 = PropertyDescriptor.class;
      WrapDynaClass wrapDynaClass0 = WrapDynaClass.createDynaClass(class0, (PropertyUtilsBean) null);
      DynaProperty dynaProperty0 = wrapDynaClass0.getDynaProperty(""(kC"");
}"
92,,"  public void test15()  throws Throwable  {
      Class<PropertyDescriptor> class0 = PropertyDescriptor.class;
      HashMap<Object, Object> hashMap0 = WrapDynaClass.dynaClasses;
      Set<Object> set0 = hashMap0.keySet();
}"
93,,"  public void test16()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = WrapDynaClass.dynaClasses;
      Object object0 = hashMap0.clone();
}"
94,,"  public void test17()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = WrapDynaClass.dynaClasses;
      Collection<Object> collection0 = hashMap0.values();
}"
95,,"  public void test18()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = WrapDynaClass.dynaClasses;
      HashMap<Annotation, PropertyDescriptor> hashMap1 = new HashMap<Annotation, PropertyDescriptor>();
      hashMap1.put((Annotation) null, (PropertyDescriptor) null);
      hashMap0.putAll(hashMap1);
}"
96,,"  public void test19()  throws Throwable  {
      PropertyUtilsBean propertyUtilsBean0 = new PropertyUtilsBean();
      HashMap<Object, Object> hashMap0 = WrapDynaClass.dynaClasses;
      Object object0 = propertyUtilsBean0.getPropertyOfMapBean(hashMap0, ""e%"");
}"
97,,"  public void test20()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = WrapDynaClass.dynaClasses;
      Set<Map.Entry<Object, Object>> set0 = (Set<Map.Entry<Object, Object>>)hashMap0.entrySet();
}"
98,,"  public void test21()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = WrapDynaClass.dynaClasses;
      Object object0 = hashMap0.remove((Object) null);
}"
99,"    public DynaBean newInstance()
            throws IllegalAccessException, InstantiationException {

        return new WrapDynaBean(getBeanClass().newInstance());

    }","  public void test22()  throws Throwable  {
      Class<Object> class0 = Object.class;
      WrapDynaClass wrapDynaClass0 = WrapDynaClass.createDynaClass(class0, (PropertyUtilsBean) null);
      DynaBean dynaBean0 = wrapDynaClass0.newInstance();
}"
100,"    public static void clear() {

        getClassesCache().clear();

    }","  public void test23()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = WrapDynaClass.dynaClasses;
      hashMap0.clear();
  }"
101,"    public static void clear() {

        getClassesCache().clear();

    }","  public void test24()  throws Throwable  {
      WrapDynaClass.clear();
  }"
102,"    public String getName() {

        return beanClassName;

    }","  public void test25()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      WrapDynaClass wrapDynaClass0 = WrapDynaClass.createDynaClass(class0);
      String string0 = wrapDynaClass0.getName();
}"
103,"    public DynaProperty[] getDynaProperties() {

        return (properties);

    }","  public void test26()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      WrapDynaClass wrapDynaClass0 = WrapDynaClass.createDynaClass(class0);
      DynaProperty[] dynaPropertyArray0 = wrapDynaClass0.getDynaProperties();
}"
104,"    protected void advance() throws SQLException {

        if (!current && !eof) {
            if (dynaClass.getResultSet().next()) {
                current = true;
                eof = false;
            } else {
                current = false;
                eof = true;
            }
        }

    }","  public void test0()  throws Throwable  {
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      doReturn(false).when(resultSet0).next();
      ResultSetDynaClass resultSetDynaClass0 = new ResultSetDynaClass(resultSet0, true, true);
      ResultSetIterator resultSetIterator0 = new ResultSetIterator(resultSetDynaClass0);
      resultSetIterator0.advance();
  }"
105,"    public boolean hasNext() {

        try {
            advance();
            return (!eof);
        } catch (final SQLException e) {
            throw new RuntimeException(""hasNext():  SQLException:  "" + e);
        }

    }","  public void test1()  throws Throwable  {
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      doReturn(true).when(resultSet0).next();
      ResultSetDynaClass resultSetDynaClass0 = new ResultSetDynaClass(resultSet0, false, false);
      ResultSetIterator resultSetIterator0 = new ResultSetIterator(resultSetDynaClass0);
      boolean boolean0 = resultSetIterator0.hasNext();
}"
106,"    public DynaClass getDynaClass() {

        return (this.dynaClass);

    }","  public void test2()  throws Throwable  {
      ResultSetIterator resultSetIterator0 = new ResultSetIterator((ResultSetDynaClass) null);
      DynaClass dynaClass0 = resultSetIterator0.getDynaClass();
}"
107,"    public void set(final String name, final Object value) {

        if (dynaClass.getDynaProperty(name) == null) {
            throw new IllegalArgumentException(name);
        }
        try {
            dynaClass.getResultSet().updateObject(name, value);
        } catch (final SQLException e) {
            throw new RuntimeException
                (""set("" + name + ""): SQLException: "" + e);
        }

    }","  public void test3()  throws Throwable  {
      ResultSetIterator resultSetIterator0 = new ResultSetIterator((ResultSetDynaClass) null);
      // Undeclared exception!
      try { 
        resultSetIterator0.set(""0Z"", (Object) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.beanutils.ResultSetIterator"", e);
      }
  }"
108,"    public DynaBean next() {

        try {
            advance();
            if (eof) {
                throw new NoSuchElementException();
            }
            current = false;
            return (this);
        } catch (final SQLException e) {
            throw new RuntimeException(""next():  SQLException:  "" + e);
        }

    }","  public void test4()  throws Throwable  {
      ResultSetIterator resultSetIterator0 = new ResultSetIterator((ResultSetDynaClass) null);
      // Undeclared exception!
      try { 
        resultSetIterator0.next();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.beanutils.ResultSetIterator"", e);
      }
  }"
109,"    public boolean hasNext() {

        try {
            advance();
            return (!eof);
        } catch (final SQLException e) {
            throw new RuntimeException(""hasNext():  SQLException:  "" + e);
        }

    }","  public void test5()  throws Throwable  {
      ResultSetIterator resultSetIterator0 = new ResultSetIterator((ResultSetDynaClass) null);
      // Undeclared exception!
      try { 
        resultSetIterator0.hasNext();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.beanutils.ResultSetIterator"", e);
      }
  }"
110,"    public Object get(final String name) {

        if (dynaClass.getDynaProperty(name) == null) {
            throw new IllegalArgumentException(name);
        }
        try {
            return dynaClass.getObjectFromResultSet(name);
        } catch (final SQLException e) {
            throw new RuntimeException
                (""get("" + name + ""): SQLException: "" + e);
        }

    }","  public void test6()  throws Throwable  {
      ResultSetIterator resultSetIterator0 = new ResultSetIterator((ResultSetDynaClass) null);
      // Undeclared exception!
      try { 
        resultSetIterator0.get((String) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.beanutils.ResultSetIterator"", e);
      }
  }"
111,"    protected void advance() throws SQLException {

        if (!current && !eof) {
            if (dynaClass.getResultSet().next()) {
                current = true;
                eof = false;
            } else {
                current = false;
                eof = true;
            }
        }

    }","  public void test7()  throws Throwable  {
      ResultSetIterator resultSetIterator0 = new ResultSetIterator((ResultSetDynaClass) null);
      // Undeclared exception!
      try { 
        resultSetIterator0.advance();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.beanutils.ResultSetIterator"", e);
      }
  }"
112,"    public DynaBean next() {

        try {
            advance();
            if (eof) {
                throw new NoSuchElementException();
            }
            current = false;
            return (this);
        } catch (final SQLException e) {
            throw new RuntimeException(""next():  SQLException:  "" + e);
        }

    }","  public void test8()  throws Throwable  {
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      doReturn(false).when(resultSet0).next();
      ResultSetDynaClass resultSetDynaClass0 = new ResultSetDynaClass(resultSet0, true);
      ResultSetIterator resultSetIterator0 = new ResultSetIterator(resultSetDynaClass0);
      // Undeclared exception!
      try { 
        resultSetIterator0.next();
        fail(""Expecting exception: NoSuchElementException"");
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.beanutils.ResultSetIterator"", e);
      }
  }"
113,"    public DynaBean next() {

        try {
            advance();
            if (eof) {
                throw new NoSuchElementException();
            }
            current = false;
            return (this);
        } catch (final SQLException e) {
            throw new RuntimeException(""next():  SQLException:  "" + e);
        }

    }","  public void test9()  throws Throwable  {
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      doReturn(false).when(resultSet0).next();
      ResultSetDynaClass resultSetDynaClass0 = new ResultSetDynaClass(resultSet0, false, false);
      ResultSetIterator resultSetIterator0 = new ResultSetIterator(resultSetDynaClass0);
      // Undeclared exception!
      try { 
        resultSetIterator0.next();
        fail(""Expecting exception: NoSuchElementException"");
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.beanutils.ResultSetIterator"", e);
      }
  }"
114,"    ResultSetIterator(final ResultSetDynaClass dynaClass) {

        this.dynaClass = dynaClass;

    }","  public void test10()  throws Throwable  {
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn((-2745)).when(resultSetMetaData0).getColumnCount();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      ResultSetDynaClass resultSetDynaClass0 = new ResultSetDynaClass(resultSet0, true, true);
      ResultSet resultSet1 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(true, false).when(resultSet1).next();
      resultSetDynaClass0.resultSet = resultSet1;
      ResultSetIterator resultSetIterator0 = new ResultSetIterator(resultSetDynaClass0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      resultSetIterator0.forEachRemaining(consumer0);
  }"
115,"    public boolean hasNext() {

        try {
            advance();
            return (!eof);
        } catch (final SQLException e) {
            throw new RuntimeException(""hasNext():  SQLException:  "" + e);
        }

    }","  public void test11()  throws Throwable  {
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn((-2745)).when(resultSetMetaData0).getColumnCount();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      doReturn(false).when(resultSet0).next();
      ResultSetDynaClass resultSetDynaClass0 = new ResultSetDynaClass(resultSet0, true, true);
      ResultSetIterator resultSetIterator0 = new ResultSetIterator(resultSetDynaClass0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      resultSetIterator0.forEachRemaining(consumer0);
      boolean boolean0 = resultSetIterator0.hasNext();
}"
116,"    public void set(final String name, final Object value) {

        if (dynaClass.getDynaProperty(name) == null) {
            throw new IllegalArgumentException(name);
        }
        try {
            dynaClass.getResultSet().updateObject(name, value);
        } catch (final SQLException e) {
            throw new RuntimeException
                (""set("" + name + ""): SQLException: "" + e);
        }

    }","  public void test12()  throws Throwable  {
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      ResultSetDynaClass resultSetDynaClass0 = new ResultSetDynaClass(resultSet0, false);
      ResultSetIterator resultSetIterator0 = new ResultSetIterator(resultSetDynaClass0);
      // Undeclared exception!
      try { 
        resultSetIterator0.set(""i ?AU>q"", (Object) ""i ?AU>q"");
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // i ?AU>q
         //
         verifyException(""org.apache.commons.beanutils.ResultSetIterator"", e);
      }
  }"
117,"    public Object get(final String name) {

        if (dynaClass.getDynaProperty(name) == null) {
            throw new IllegalArgumentException(name);
        }
        try {
            return dynaClass.getObjectFromResultSet(name);
        } catch (final SQLException e) {
            throw new RuntimeException
                (""get("" + name + ""): SQLException: "" + e);
        }

    }","  public void test13()  throws Throwable  {
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      ResultSetDynaClass resultSetDynaClass0 = new ResultSetDynaClass(resultSet0, false, false);
      ResultSetIterator resultSetIterator0 = new ResultSetIterator(resultSetDynaClass0);
      // Undeclared exception!
      try { 
        resultSetIterator0.get(""4"");
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // 4
         //
         verifyException(""org.apache.commons.beanutils.ResultSetIterator"", e);
      }
  }"
118,"    public void remove(final String name, final String key) {

        throw new UnsupportedOperationException
            (""FIXME - mapped operations not currently supported"");

    }","  public void test14()  throws Throwable  {
      ResultSetIterator resultSetIterator0 = new ResultSetIterator((ResultSetDynaClass) null);
      // Undeclared exception!
      try { 
        resultSetIterator0.remove();
        fail(""Expecting exception: UnsupportedOperationException"");
      } catch(UnsupportedOperationException e) {
         //
         // remove()
         //
         verifyException(""org.apache.commons.beanutils.ResultSetIterator"", e);
      }
  }"
119,"    public boolean contains(final String name, final String key) {

        throw new UnsupportedOperationException
            (""FIXME - mapped properties not currently supported"");

    }","  public void test15()  throws Throwable  {
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn((-2745)).when(resultSetMetaData0).getColumnCount();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      ResultSetDynaClass resultSetDynaClass0 = new ResultSetDynaClass(resultSet0, true, true);
      ResultSetIterator resultSetIterator0 = new ResultSetIterator(resultSetDynaClass0);
      String string0 = null;
      // Undeclared exception!
      try { 
        resultSetIterator0.contains(string0, string0);
        fail(""Expecting exception: UnsupportedOperationException"");
      } catch(UnsupportedOperationException e) {
         //
         // FIXME - mapped properties not currently supported
         //
         verifyException(""org.apache.commons.beanutils.ResultSetIterator"", e);
      }
  }"
120,"    public void set(final String name, final Object value) {

        if (dynaClass.getDynaProperty(name) == null) {
            throw new IllegalArgumentException(name);
        }
        try {
            dynaClass.getResultSet().updateObject(name, value);
        } catch (final SQLException e) {
            throw new RuntimeException
                (""set("" + name + ""): SQLException: "" + e);
        }

    }","  public void test16()  throws Throwable  {
      ResultSetIterator resultSetIterator0 = new ResultSetIterator((ResultSetDynaClass) null);
      // Undeclared exception!
      try { 
        resultSetIterator0.set("""", """", (Object) """");
        fail(""Expecting exception: UnsupportedOperationException"");
      } catch(UnsupportedOperationException e) {
         //
         // FIXME - mapped properties not currently supported
         //
         verifyException(""org.apache.commons.beanutils.ResultSetIterator"", e);
      }
  }"
121,"    public DynaClass getDynaClass() {

        return (this.dynaClass);

    }","  public void test17()  throws Throwable  {
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      ResultSetDynaClass resultSetDynaClass0 = new ResultSetDynaClass(resultSet0, true);
      ResultSetIterator resultSetIterator0 = new ResultSetIterator(resultSetDynaClass0);
      DynaClass dynaClass0 = resultSetIterator0.getDynaClass();
}"
122,"    public Object get(final String name) {

        if (dynaClass.getDynaProperty(name) == null) {
            throw new IllegalArgumentException(name);
        }
        try {
            return dynaClass.getObjectFromResultSet(name);
        } catch (final SQLException e) {
            throw new RuntimeException
                (""get("" + name + ""): SQLException: "" + e);
        }

    }","  public void test18()  throws Throwable  {
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      ResultSetDynaClass resultSetDynaClass0 = new ResultSetDynaClass(resultSet0, false, false);
      ResultSetIterator resultSetIterator0 = new ResultSetIterator(resultSetDynaClass0);
      // Undeclared exception!
      try { 
        resultSetIterator0.get("""", 0);
        fail(""Expecting exception: UnsupportedOperationException"");
      } catch(UnsupportedOperationException e) {
         //
         // FIXME - indexed properties not currently supported
         //
         verifyException(""org.apache.commons.beanutils.ResultSetIterator"", e);
      }
  }"
123,"    public Object get(final String name) {

        if (dynaClass.getDynaProperty(name) == null) {
            throw new IllegalArgumentException(name);
        }
        try {
            return dynaClass.getObjectFromResultSet(name);
        } catch (final SQLException e) {
            throw new RuntimeException
                (""get("" + name + ""): SQLException: "" + e);
        }

    }","  public void test19()  throws Throwable  {
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      ResultSetDynaClass resultSetDynaClass0 = new ResultSetDynaClass(resultSet0, true);
      ResultSetIterator resultSetIterator0 = new ResultSetIterator(resultSetDynaClass0);
      // Undeclared exception!
      try { 
        resultSetIterator0.get("""", """");
        fail(""Expecting exception: UnsupportedOperationException"");
      } catch(UnsupportedOperationException e) {
         //
         // FIXME - mapped properties not currently supported
         //
         verifyException(""org.apache.commons.beanutils.ResultSetIterator"", e);
      }
  }"
124,"    public void set(final String name, final Object value) {

        if (dynaClass.getDynaProperty(name) == null) {
            throw new IllegalArgumentException(name);
        }
        try {
            dynaClass.getResultSet().updateObject(name, value);
        } catch (final SQLException e) {
            throw new RuntimeException
                (""set("" + name + ""): SQLException: "" + e);
        }

    }","  public void test20()  throws Throwable  {
      ResultSetIterator resultSetIterator0 = new ResultSetIterator((ResultSetDynaClass) null);
      BasicDynaBean basicDynaBean0 = new BasicDynaBean((DynaClass) null);
      // Undeclared exception!
      try { 
        resultSetIterator0.set((String) null, (-9), (Object) basicDynaBean0);
        fail(""Expecting exception: UnsupportedOperationException"");
      } catch(UnsupportedOperationException e) {
         //
         // FIXME - indexed properties not currently supported
         //
         verifyException(""org.apache.commons.beanutils.ResultSetIterator"", e);
      }
  }"
125,"    public void remove(final String name, final String key) {

        throw new UnsupportedOperationException
            (""FIXME - mapped operations not currently supported"");

    }","  public void test21()  throws Throwable  {
      ResultSetIterator resultSetIterator0 = new ResultSetIterator((ResultSetDynaClass) null);
      // Undeclared exception!
      try { 
        resultSetIterator0.remove(""'JwI!dpiZZp_,T6<|ms"", ""'JwI!dpiZZp_,T6<|ms"");
        fail(""Expecting exception: UnsupportedOperationException"");
      } catch(UnsupportedOperationException e) {
         //
         // FIXME - mapped operations not currently supported
         //
         verifyException(""org.apache.commons.beanutils.ResultSetIterator"", e);
      }
  }"
126,"    public void set(final String name, final Object value) {

        try {
            getPropertyUtils().setSimpleProperty(instance, name, value);
        } catch (final InvocationTargetException ite) {
            final Throwable cause = ite.getTargetException();
            throw new IllegalArgumentException
                    (""Error setting property '"" + name +
                              ""' nested exception -"" + cause);
        } catch (final Throwable t) {
            throw new IllegalArgumentException
                    (""Error setting property '"" + name +
                              ""', exception - "" + t);
        }

    }","  public void test0()  throws Throwable  {
      Class<PropertyDescriptor> class0 = PropertyDescriptor.class;
      DynaProperty dynaProperty0 = new DynaProperty(""Error setting mapped property '"", class0, class0);
      WrapDynaBean wrapDynaBean0 = new WrapDynaBean(dynaProperty0);
      DynaClass dynaClass0 = wrapDynaBean0.getDynaClass();
      // Undeclared exception!
      try { 
        wrapDynaBean0.set(""a=rjEjYO.NNWHH"", ""xT}"", (Object) dynaClass0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Error setting mapped property 'a=rjEjYO.NNWHH', exception - java.lang.NoSuchMethodException: Unknown property 'a=rjEjYO' on class 'class org.apache.commons.beanutils.DynaProperty'
         //
         verifyException(""org.apache.commons.beanutils.WrapDynaBean"", e);
      }
  }"
127,"    public void set(final String name, final Object value) {

        try {
            getPropertyUtils().setSimpleProperty(instance, name, value);
        } catch (final InvocationTargetException ite) {
            final Throwable cause = ite.getTargetException();
            throw new IllegalArgumentException
                    (""Error setting property '"" + name +
                              ""' nested exception -"" + cause);
        } catch (final Throwable t) {
            throw new IllegalArgumentException
                    (""Error setting property '"" + name +
                              ""', exception - "" + t);
        }

    }","  public void test1()  throws Throwable  {
      Class<String> class0 = String.class;
      WrapDynaClass wrapDynaClass0 = WrapDynaClass.createDynaClass(class0, (PropertyUtilsBean) null);
      WrapDynaBean wrapDynaBean0 = new WrapDynaBean(wrapDynaClass0, wrapDynaClass0);
      // Undeclared exception!
      try { 
        wrapDynaBean0.set("""", 795, (Object) """");
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Error setting indexed property '', exception - java.lang.NoSuchMethodException: Unknown property '' on bean class 'class org.apache.commons.beanutils.WrapDynaClass'
         //
         verifyException(""org.apache.commons.beanutils.WrapDynaBean"", e);
      }
  }"
128,"    public Object get(final String name) {

        Object value = null;
        try {
            value = getPropertyUtils().getSimpleProperty(instance, name);
        } catch (final InvocationTargetException ite) {
            final Throwable cause = ite.getTargetException();
            throw new IllegalArgumentException
                    (""Error reading property '"" + name +
                              ""' nested exception - "" + cause);
        } catch (final Throwable t) {
            throw new IllegalArgumentException
                    (""Error reading property '"" + name +
                              ""', exception - "" + t);
        }
        return (value);

    }","  public void test2()  throws Throwable  {
      WrapDynaBean wrapDynaBean0 = new WrapDynaBean(""q@|"");
      // Undeclared exception!
      try { 
        wrapDynaBean0.get(""q@|"", """");
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Error reading mapped property 'q@|', exception - java.lang.NoSuchMethodException: Unknown property 'q@|'+ on bean class 'class java.lang.String'
         //
         verifyException(""org.apache.commons.beanutils.WrapDynaBean"", e);
      }
  }"
129,"    public Object getInstance() {
        return instance;
    }","  public void test3()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      DynaProperty dynaProperty0 = new DynaProperty("""", class0);
      Class<DynaProperty> class1 = DynaProperty.class;
      PropertyUtilsBean propertyUtilsBean0 = PropertyUtilsBean.getInstance();
      WrapDynaClass wrapDynaClass0 = WrapDynaClass.createDynaClass(class1, propertyUtilsBean0);
      WrapDynaBean wrapDynaBean0 = new WrapDynaBean(dynaProperty0, wrapDynaClass0);
      Object object0 = wrapDynaBean0.getInstance();
}"
130,"    public DynaClass getDynaClass() {

        if (dynaClass == null) {
            dynaClass = WrapDynaClass.createDynaClass(instance.getClass());
        }

        return (this.dynaClass);

    }","  public void test4()  throws Throwable  {
      WrapDynaBean wrapDynaBean0 = new WrapDynaBean("""");
      wrapDynaBean0.instance = (Object) null;
      wrapDynaBean0.dynaClass = null;
      // Undeclared exception!
      try { 
        wrapDynaBean0.getDynaClass();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.beanutils.WrapDynaBean"", e);
      }
  }"
131,"    public WrapDynaBean(final Object instance) {

        this(instance, null);

    }","  public void test5()  throws Throwable  {
      WrapDynaBean wrapDynaBean0 = null;
      try {
        wrapDynaBean0 = new WrapDynaBean((Object) null, (WrapDynaClass) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.beanutils.WrapDynaBean"", e);
      }
  }"
132,"    public WrapDynaBean(final Object instance) {

        this(instance, null);

    }","  public void test6()  throws Throwable  {
      WrapDynaBean wrapDynaBean0 = null;
      try {
        wrapDynaBean0 = new WrapDynaBean((Object) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.beanutils.WrapDynaBean"", e);
      }
  }"
133,"    public Object get(final String name) {

        Object value = null;
        try {
            value = getPropertyUtils().getSimpleProperty(instance, name);
        } catch (final InvocationTargetException ite) {
            final Throwable cause = ite.getTargetException();
            throw new IllegalArgumentException
                    (""Error reading property '"" + name +
                              ""' nested exception - "" + cause);
        } catch (final Throwable t) {
            throw new IllegalArgumentException
                    (""Error reading property '"" + name +
                              ""', exception - "" + t);
        }
        return (value);

    }","  public void test7()  throws Throwable  {
      WrapDynaBean wrapDynaBean0 = new WrapDynaBean("""");
      wrapDynaBean0.dynaClass = null;
      // Undeclared exception!
      try { 
        wrapDynaBean0.get("""", (-43));
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Error reading indexed property '', exception - java.lang.NoSuchMethodException: Unknown property '' on bean class 'class java.lang.String'
         //
         verifyException(""org.apache.commons.beanutils.WrapDynaBean"", e);
      }
  }"
134,"    protected DynaProperty getDynaProperty(final String name) {

        final DynaProperty descriptor = getDynaClass().getDynaProperty(name);
        if (descriptor == null) {
            throw new IllegalArgumentException
                    (""Invalid property name '"" + name + ""'"");
        }
        return (descriptor);

    }","  public void test8()  throws Throwable  {
      Object object0 = new Object();
      WrapDynaBean wrapDynaBean0 = new WrapDynaBean(object0);
      // Undeclared exception!
      try { 
        wrapDynaBean0.getDynaProperty(""\""/9@eQm"");
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Invalid property name '\""/9@eQm'
         //
         verifyException(""org.apache.commons.beanutils.WrapDynaBean"", e);
      }
  }"
135,"    public void set(final String name, final Object value) {

        try {
            getPropertyUtils().setSimpleProperty(instance, name, value);
        } catch (final InvocationTargetException ite) {
            final Throwable cause = ite.getTargetException();
            throw new IllegalArgumentException
                    (""Error setting property '"" + name +
                              ""' nested exception -"" + cause);
        } catch (final Throwable t) {
            throw new IllegalArgumentException
                    (""Error setting property '"" + name +
                              ""', exception - "" + t);
        }

    }","  public void test9()  throws Throwable  {
      Object object0 = new Object();
      WrapDynaBean wrapDynaBean0 = new WrapDynaBean(object0);
      // Undeclared exception!
      try { 
        wrapDynaBean0.set(""No origin bean specified"", (Object) null);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Error setting property 'No origin bean specified', exception - java.lang.NoSuchMethodException: Unknown property 'No origin bean specified' on class 'class java.lang.Object'
         //
         verifyException(""org.apache.commons.beanutils.WrapDynaBean"", e);
      }
  }"
136,"    public Object getInstance() {
        return instance;
    }","  public void test10()  throws Throwable  {
      Class<String> class0 = String.class;
      WrapDynaClass wrapDynaClass0 = WrapDynaClass.createDynaClass(class0);
      WrapDynaBean wrapDynaBean0 = new WrapDynaBean((Object) null, wrapDynaClass0);
      Object object0 = wrapDynaBean0.getInstance();
}"
137,"    public Object get(final String name) {

        Object value = null;
        try {
            value = getPropertyUtils().getSimpleProperty(instance, name);
        } catch (final InvocationTargetException ite) {
            final Throwable cause = ite.getTargetException();
            throw new IllegalArgumentException
                    (""Error reading property '"" + name +
                              ""' nested exception - "" + cause);
        } catch (final Throwable t) {
            throw new IllegalArgumentException
                    (""Error reading property '"" + name +
                              ""', exception - "" + t);
        }
        return (value);

    }","  public void test11()  throws Throwable  {
      PropertyUtilsBean propertyUtilsBean0 = new PropertyUtilsBean();
      WrapDynaBean wrapDynaBean0 = new WrapDynaBean(propertyUtilsBean0);
      // Undeclared exception!
      try { 
        wrapDynaBean0.get("""");
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Error reading property '', exception - java.lang.NoSuchMethodException: Unknown property '' on class 'class org.apache.commons.beanutils.PropertyUtilsBean'
         //
         verifyException(""org.apache.commons.beanutils.WrapDynaBean"", e);
      }
  }"
138,"    public boolean contains(final String name, final String key) {

        throw new UnsupportedOperationException
                (""WrapDynaBean does not support contains()"");

    }","  public void test12()  throws Throwable  {
      Class<Object> class0 = Object.class;
      WrapDynaClass wrapDynaClass0 = WrapDynaClass.createDynaClass(class0);
      WrapDynaBean wrapDynaBean0 = new WrapDynaBean((Object) null, wrapDynaClass0);
      // Undeclared exception!
      try { 
        wrapDynaBean0.contains(""v4=a^E=SY.8[x6|a{bX"", ""v4=a^E=SY.8[x6|a{bX"");
        fail(""Expecting exception: UnsupportedOperationException"");
      } catch(UnsupportedOperationException e) {
         //
         // WrapDynaBean does not support contains()
         //
         verifyException(""org.apache.commons.beanutils.WrapDynaBean"", e);
      }
  }"
139,"    public void remove(final String name, final String key) {


        throw new UnsupportedOperationException
                (""WrapDynaBean does not support remove()"");

    }","  public void test13()  throws Throwable  {
      Class<String> class0 = String.class;
      PropertyUtilsBean propertyUtilsBean0 = PropertyUtilsBean.getInstance();
      WrapDynaClass wrapDynaClass0 = WrapDynaClass.createDynaClass(class0, propertyUtilsBean0);
      WrapDynaBean wrapDynaBean0 = new WrapDynaBean("""", wrapDynaClass0);
      // Undeclared exception!
      try { 
        wrapDynaBean0.remove("""", """");
        fail(""Expecting exception: UnsupportedOperationException"");
      } catch(UnsupportedOperationException e) {
         //
         // WrapDynaBean does not support remove()
         //
         verifyException(""org.apache.commons.beanutils.WrapDynaBean"", e);
      }
  }"
140,"    public boolean initCause(final Throwable throwable, final Throwable cause) {
        if (INIT_CAUSE_METHOD != null && cause != null) {
            try {
                INIT_CAUSE_METHOD.invoke(throwable, new Object[] { cause });
                return true;
            } catch (final Throwable e) {
                return false; // can't initialize cause
            }
        }
        return false;
    }","  public void test0()  throws Throwable  {
      BeanUtilsBean beanUtilsBean0 = BeanUtilsBean.getInstance();
      MockThrowable mockThrowable0 = new MockThrowable();
      MockThrowable mockThrowable1 = new MockThrowable("""", mockThrowable0);
      boolean boolean0 = beanUtilsBean0.initCause(mockThrowable0, mockThrowable1);
}"
141,"    public PropertyUtilsBean getPropertyUtils() {
        return propertyUtilsBean;
    }","  public void test1()  throws Throwable  {
      ConvertUtilsBean convertUtilsBean0 = new ConvertUtilsBean();
      BeanUtilsBean beanUtilsBean0 = new BeanUtilsBean(convertUtilsBean0, (PropertyUtilsBean) null);
      PropertyUtilsBean propertyUtilsBean0 = beanUtilsBean0.getPropertyUtils();
}"
142,"    public String getProperty(final Object bean, final String name)
            throws IllegalAccessException, InvocationTargetException,
            NoSuchMethodException {

        return (getNestedProperty(bean, name));

    }","  public void test2()  throws Throwable  {
      ConvertUtilsBean convertUtilsBean0 = new ConvertUtilsBean();
      BeanUtilsBean beanUtilsBean0 = new BeanUtilsBean(convertUtilsBean0);
      String string0 = beanUtilsBean0.getProperty(convertUtilsBean0, ""defaultByte"");
}"
143,"    public String getSimpleProperty(final Object bean, final String name)
            throws IllegalAccessException, InvocationTargetException,
            NoSuchMethodException {

        final Object value = getPropertyUtils().getSimpleProperty(bean, name);
        return (getConvertUtils().convert(value));

    }","  public void test3()  throws Throwable  {
      BeanUtilsBean beanUtilsBean0 = BeanUtilsBean.getInstance();
      Integer integer0 = LazyDynaBean.Integer_ZERO;
      try { 
        beanUtilsBean0.getSimpleProperty(integer0, ""|Z/T?ItB<W,)!bS:l%"");
        fail(""Expecting exception: NoSuchMethodException"");
      } catch(NoSuchMethodException e) {
         //
         // Unknown property '|Z/T?ItB<W,)!bS:l%' on class 'class java.lang.Integer'
         //
         verifyException(""org.apache.commons.beanutils.PropertyUtilsBean"", e);
      }
  }"
144,"    public String getSimpleProperty(final Object bean, final String name)
            throws IllegalAccessException, InvocationTargetException,
            NoSuchMethodException {

        final Object value = getPropertyUtils().getSimpleProperty(bean, name);
        return (getConvertUtils().convert(value));

    }","  public void test4()  throws Throwable  {
      BeanUtilsBean beanUtilsBean0 = new BeanUtilsBean();
      try { 
        beanUtilsBean0.getSimpleProperty(""    Target name = "", """");
        fail(""Expecting exception: NoSuchMethodException"");
      } catch(NoSuchMethodException e) {
         //
         // Unknown property '' on class 'class java.lang.String'
         //
         verifyException(""org.apache.commons.beanutils.PropertyUtilsBean"", e);
      }
  }"
145,"    public String getNestedProperty(final Object bean, final String name)
            throws IllegalAccessException, InvocationTargetException,
            NoSuchMethodException {

        final Object value = getPropertyUtils().getNestedProperty(bean, name);
        return (getConvertUtils().convert(value));

    }","  public void test5()  throws Throwable  {
      BeanUtilsBean beanUtilsBean0 = BeanUtilsBean.getInstance();
      // Undeclared exception!
      try { 
        beanUtilsBean0.getNestedProperty((Object) null, (String) null);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // No bean specified
         //
         verifyException(""org.apache.commons.beanutils.PropertyUtilsBean"", e);
      }
  }"
146,"    public String getMappedProperty(final Object bean, final String name)
            throws IllegalAccessException, InvocationTargetException,
            NoSuchMethodException {

        final Object value = getPropertyUtils().getMappedProperty(bean, name);
        return (getConvertUtils().convert(value));

    }","  public void test6()  throws Throwable  {
      ConvertUtilsBean convertUtilsBean0 = ConvertUtilsBean.getInstance();
      BeanUtilsBean beanUtilsBean0 = new BeanUtilsBean(convertUtilsBean0);
      // Undeclared exception!
      try { 
        beanUtilsBean0.getMappedProperty((Object) ""u*TL[PE?Z6]eSp91p6"", (String) null, ""get("");
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // No name specified for bean class 'class java.lang.String'
         //
         verifyException(""org.apache.commons.beanutils.PropertyUtilsBean"", e);
      }
  }"
147,"    public String getMappedProperty(final Object bean, final String name)
            throws IllegalAccessException, InvocationTargetException,
            NoSuchMethodException {

        final Object value = getPropertyUtils().getMappedProperty(bean, name);
        return (getConvertUtils().convert(value));

    }","  public void test7()  throws Throwable  {
      ConvertUtilsBean convertUtilsBean0 = new ConvertUtilsBean();
      BeanUtilsBean beanUtilsBean0 = new BeanUtilsBean(convertUtilsBean0);
      Map<String, Integer> map0 = BeanUtils.createCache();
      String string0 = ""Throwable does not have initCause() method in JDK 1.3"";
      try { 
        beanUtilsBean0.getMappedProperty((Object) map0, string0);
        fail(""Expecting exception: NoSuchMethodException"");
      } catch(NoSuchMethodException e) {
         //
         // Unknown property 'Throwable does not have initCause'+ on bean class 'class org.apache.commons.beanutils.WeakFastHashMap'
         //
         verifyException(""org.apache.commons.beanutils.PropertyUtilsBean"", e);
      }
  }"
148,"    public String getIndexedProperty(final Object bean, final String name)
            throws IllegalAccessException, InvocationTargetException,
            NoSuchMethodException {

        final Object value = getPropertyUtils().getIndexedProperty(bean, name);
        return (getConvertUtils().convert(value));

    }","  public void test8()  throws Throwable  {
      BeanUtilsBean beanUtilsBean0 = new BeanUtilsBean((ConvertUtilsBean) null, (PropertyUtilsBean) null);
      Integer integer0 = LazyDynaBean.Integer_ZERO;
      // Undeclared exception!
      try { 
        beanUtilsBean0.getIndexedProperty((Object) integer0, ""S:&fm3Nr"", (-1120));
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.beanutils.BeanUtilsBean"", e);
      }
  }"
149,"    public String getIndexedProperty(final Object bean, final String name)
            throws IllegalAccessException, InvocationTargetException,
            NoSuchMethodException {

        final Object value = getPropertyUtils().getIndexedProperty(bean, name);
        return (getConvertUtils().convert(value));

    }","  public void test9()  throws Throwable  {
      ConvertUtilsBean convertUtilsBean0 = new ConvertUtilsBean();
      BeanUtilsBean beanUtilsBean0 = new BeanUtilsBean(convertUtilsBean0);
      try { 
        beanUtilsBean0.getIndexedProperty((Object) convertUtilsBean0, """", (-1754));
        fail(""Expecting exception: NoSuchMethodException"");
      } catch(NoSuchMethodException e) {
         //
         // Unknown property '' on bean class 'class org.apache.commons.beanutils.ConvertUtilsBean'
         //
         verifyException(""org.apache.commons.beanutils.PropertyUtilsBean"", e);
      }
  }"
150,"    public String getIndexedProperty(final Object bean, final String name)
            throws IllegalAccessException, InvocationTargetException,
            NoSuchMethodException {

        final Object value = getPropertyUtils().getIndexedProperty(bean, name);
        return (getConvertUtils().convert(value));

    }","  public void test10()  throws Throwable  {
      ConvertUtilsBean convertUtilsBean0 = ConvertUtilsBean.getInstance();
      PropertyUtilsBean propertyUtilsBean0 = new PropertyUtilsBean();
      BeanUtilsBean beanUtilsBean0 = new BeanUtilsBean(convertUtilsBean0, propertyUtilsBean0);
      // Undeclared exception!
      try { 
        beanUtilsBean0.getIndexedProperty((Object) convertUtilsBean0, (String) null);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // No name specified for bean class 'class org.apache.commons.beanutils.ConvertUtilsBean'
         //
         verifyException(""org.apache.commons.beanutils.PropertyUtilsBean"", e);
      }
  }"
151,"    public String[] getArrayProperty(final Object bean, final String name)
            throws IllegalAccessException, InvocationTargetException,
            NoSuchMethodException {

        final Object value = getPropertyUtils().getProperty(bean, name);
        if (value == null) {
            return (null);
        } else if (value instanceof Collection) {
            final ArrayList<String> values = new ArrayList<String>();
            for (final Object item : (Collection<?>) value) {
                if (item == null) {
                    values.add(null);
                } else {
                    // convert to string using convert utils
                    values.add(getConvertUtils().convert(item));
                }
            }
            return (values.toArray(new String[values.size()]));
        } else if (value.getClass().isArray()) {
            final int n = Array.getLength(value);
            final String[] results = new String[n];
            for (int i = 0; i < n; i++) {
                final Object item = Array.get(value, i);
                if (item == null) {
                    results[i] = null;
                } else {
                    // convert to string using convert utils
                    results[i] = getConvertUtils().convert(item);
                }
            }
            return (results);
        } else {
            final String[] results = new String[1];
            results[0] = getConvertUtils().convert(value);
            return (results);
        }

    }","  public void test11()  throws Throwable  {
      BeanUtilsBean beanUtilsBean0 = new BeanUtilsBean();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      // Undeclared exception!
      try { 
        beanUtilsBean0.getArrayProperty(hashMap0, ""?@,.4D^Z"");
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Null property value for '?@,.4D^Z' on bean class 'class java.util.HashMap'
         //
         verifyException(""org.apache.commons.beanutils.PropertyUtilsBean"", e);
      }
  }"
152,"    public String[] getArrayProperty(final Object bean, final String name)
            throws IllegalAccessException, InvocationTargetException,
            NoSuchMethodException {

        final Object value = getPropertyUtils().getProperty(bean, name);
        if (value == null) {
            return (null);
        } else if (value instanceof Collection) {
            final ArrayList<String> values = new ArrayList<String>();
            for (final Object item : (Collection<?>) value) {
                if (item == null) {
                    values.add(null);
                } else {
                    // convert to string using convert utils
                    values.add(getConvertUtils().convert(item));
                }
            }
            return (values.toArray(new String[values.size()]));
        } else if (value.getClass().isArray()) {
            final int n = Array.getLength(value);
            final String[] results = new String[n];
            for (int i = 0; i < n; i++) {
                final Object item = Array.get(value, i);
                if (item == null) {
                    results[i] = null;
                } else {
                    // convert to string using convert utils
                    results[i] = getConvertUtils().convert(item);
                }
            }
            return (results);
        } else {
            final String[] results = new String[1];
            results[0] = getConvertUtils().convert(value);
            return (results);
        }

    }","  public void test12()  throws Throwable  {
      BeanUtilsBean beanUtilsBean0 = new BeanUtilsBean();
      try { 
        beanUtilsBean0.getArrayProperty(beanUtilsBean0, """");
        fail(""Expecting exception: NoSuchMethodException"");
      } catch(NoSuchMethodException e) {
         //
         // Unknown property '' on class 'class org.apache.commons.beanutils.BeanUtilsBean'
         //
         verifyException(""org.apache.commons.beanutils.PropertyUtilsBean"", e);
      }
  }"
153,"    public void copyProperty(final Object bean, String name, Object value)
        throws IllegalAccessException, InvocationTargetException {

        // Trace logging (if enabled)
        if (log.isTraceEnabled()) {
            final StringBuilder sb = new StringBuilder(""  copyProperty("");
            sb.append(bean);
            sb.append("", "");
            sb.append(name);
            sb.append("", "");
            if (value == null) {
                sb.append(""<NULL>"");
            } else if (value instanceof String) {
                sb.append((String) value);
            } else if (value instanceof String[]) {
                final String[] values = (String[]) value;
                sb.append('[');
                for (int i = 0; i < values.length; i++) {
                    if (i > 0) {
                        sb.append(',');
                    }
                    sb.append(values[i]);
                }
                sb.append(']');
            } else {
                sb.append(value.toString());
            }
            sb.append(')');
            log.trace(sb.toString());
        }

        // Resolve any nested expression to get the actual target bean
        Object target = bean;
        final Resolver resolver = getPropertyUtils().getResolver();
        while (resolver.hasNested(name)) {
            try {
                target = getPropertyUtils().getProperty(target, resolver.next(name));
                name = resolver.remove(name);
            } catch (final NoSuchMethodException e) {
                return; // Skip this property setter
            }
        }
        if (log.isTraceEnabled()) {
            log.trace(""    Target bean = "" + target);
            log.trace(""    Target name = "" + name);
        }

        // Declare local variables we will require
        final String propName = resolver.getProperty(name); // Simple name of target property
        Class<?> type = null;                         // Java type of target property
        final int index  = resolver.getIndex(name);         // Indexed subscript value (if any)
        final String key = resolver.getKey(name);           // Mapped key value (if any)

        // Calculate the target property type
        if (target instanceof DynaBean) {
            final DynaClass dynaClass = ((DynaBean) target).getDynaClass();
            final DynaProperty dynaProperty = dynaClass.getDynaProperty(propName);
            if (dynaProperty == null) {
                return; // Skip this property setter
            }
            type = dynaPropertyType(dynaProperty, value);
        } else {
            PropertyDescriptor descriptor = null;
            try {
                descriptor =
                    getPropertyUtils().getPropertyDescriptor(target, name);
                if (descriptor == null) {
                    return; // Skip this property setter
                }
            } catch (final NoSuchMethodException e) {
                return; // Skip this property setter
            }
            type = descriptor.getPropertyType();
            if (type == null) {
                // Most likely an indexed setter on a POJB only
                if (log.isTraceEnabled()) {
                    log.trace(""    target type for property '"" +
                              propName + ""' is null, so skipping ths setter"");
                }
                return;
            }
        }
        if (log.isTraceEnabled()) {
            log.trace(""    target propName="" + propName + "", type="" +
                      type + "", index="" + index + "", key="" + key);
        }

        // Convert the specified value to the required type and store it
        if (index >= 0) {                    // Destination must be indexed
            value = convertForCopy(value, type.getComponentType());
            try {
                getPropertyUtils().setIndexedProperty(target, propName,
                                                 index, value);
            } catch (final NoSuchMethodException e) {
                throw new InvocationTargetException
                    (e, ""Cannot set "" + propName);
            }
        } else if (key != null) {            // Destination must be mapped
            // Maps do not know what the preferred data type is,
            // so perform no conversions at all
            // FIXME - should we create or support a TypedMap?
            try {
                getPropertyUtils().setMappedProperty(target, propName,
                                                key, value);
            } catch (final NoSuchMethodException e) {
                throw new InvocationTargetException
                    (e, ""Cannot set "" + propName);
            }
        } else {                             // Destination must be simple
            value = convertForCopy(value, type);
            try {
                getPropertyUtils().setSimpleProperty(target, propName, value);
            } catch (final NoSuchMethodException e) {
                throw new InvocationTargetException
                    (e, ""Cannot set "" + propName);
            }
        }

    }","  public void test13()  throws Throwable  {
      BeanUtilsBean beanUtilsBean0 = new BeanUtilsBean();
      BeanUtils beanUtils0 = new BeanUtils();
      try { 
        beanUtilsBean0.copyProperty(beanUtilsBean0, ""convertUtils"", beanUtils0);
        fail(""Expecting exception: InvocationTargetException"");
      } catch(InvocationTargetException e) {
         //
         // Cannot set convertUtils
         //
         verifyException(""org.apache.commons.beanutils.BeanUtilsBean"", e);
      }
  }"
154,"    public void copyProperty(final Object bean, String name, Object value)
        throws IllegalAccessException, InvocationTargetException {

        // Trace logging (if enabled)
        if (log.isTraceEnabled()) {
            final StringBuilder sb = new StringBuilder(""  copyProperty("");
            sb.append(bean);
            sb.append("", "");
            sb.append(name);
            sb.append("", "");
            if (value == null) {
                sb.append(""<NULL>"");
            } else if (value instanceof String) {
                sb.append((String) value);
            } else if (value instanceof String[]) {
                final String[] values = (String[]) value;
                sb.append('[');
                for (int i = 0; i < values.length; i++) {
                    if (i > 0) {
                        sb.append(',');
                    }
                    sb.append(values[i]);
                }
                sb.append(']');
            } else {
                sb.append(value.toString());
            }
            sb.append(')');
            log.trace(sb.toString());
        }

        // Resolve any nested expression to get the actual target bean
        Object target = bean;
        final Resolver resolver = getPropertyUtils().getResolver();
        while (resolver.hasNested(name)) {
            try {
                target = getPropertyUtils().getProperty(target, resolver.next(name));
                name = resolver.remove(name);
            } catch (final NoSuchMethodException e) {
                return; // Skip this property setter
            }
        }
        if (log.isTraceEnabled()) {
            log.trace(""    Target bean = "" + target);
            log.trace(""    Target name = "" + name);
        }

        // Declare local variables we will require
        final String propName = resolver.getProperty(name); // Simple name of target property
        Class<?> type = null;                         // Java type of target property
        final int index  = resolver.getIndex(name);         // Indexed subscript value (if any)
        final String key = resolver.getKey(name);           // Mapped key value (if any)

        // Calculate the target property type
        if (target instanceof DynaBean) {
            final DynaClass dynaClass = ((DynaBean) target).getDynaClass();
            final DynaProperty dynaProperty = dynaClass.getDynaProperty(propName);
            if (dynaProperty == null) {
                return; // Skip this property setter
            }
            type = dynaPropertyType(dynaProperty, value);
        } else {
            PropertyDescriptor descriptor = null;
            try {
                descriptor =
                    getPropertyUtils().getPropertyDescriptor(target, name);
                if (descriptor == null) {
                    return; // Skip this property setter
                }
            } catch (final NoSuchMethodException e) {
                return; // Skip this property setter
            }
            type = descriptor.getPropertyType();
            if (type == null) {
                // Most likely an indexed setter on a POJB only
                if (log.isTraceEnabled()) {
                    log.trace(""    target type for property '"" +
                              propName + ""' is null, so skipping ths setter"");
                }
                return;
            }
        }
        if (log.isTraceEnabled()) {
            log.trace(""    target propName="" + propName + "", type="" +
                      type + "", index="" + index + "", key="" + key);
        }

        // Convert the specified value to the required type and store it
        if (index >= 0) {                    // Destination must be indexed
            value = convertForCopy(value, type.getComponentType());
            try {
                getPropertyUtils().setIndexedProperty(target, propName,
                                                 index, value);
            } catch (final NoSuchMethodException e) {
                throw new InvocationTargetException
                    (e, ""Cannot set "" + propName);
            }
        } else if (key != null) {            // Destination must be mapped
            // Maps do not know what the preferred data type is,
            // so perform no conversions at all
            // FIXME - should we create or support a TypedMap?
            try {
                getPropertyUtils().setMappedProperty(target, propName,
                                                key, value);
            } catch (final NoSuchMethodException e) {
                throw new InvocationTargetException
                    (e, ""Cannot set "" + propName);
            }
        } else {                             // Destination must be simple
            value = convertForCopy(value, type);
            try {
                getPropertyUtils().setSimpleProperty(target, propName, value);
            } catch (final NoSuchMethodException e) {
                throw new InvocationTargetException
                    (e, ""Cannot set "" + propName);
            }
        }

    }","  public void test14()  throws Throwable  {
      BeanUtilsBean beanUtilsBean0 = new BeanUtilsBean();
      BasicDynaBean basicDynaBean0 = new BasicDynaBean((DynaClass) null);
      // Undeclared exception!
      try { 
        beanUtilsBean0.copyProperty(basicDynaBean0, ""G`m;pOEpUmWZ,"", basicDynaBean0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.beanutils.BeanUtilsBean"", e);
      }
  }"
155,"    public void copyProperties(final Object dest, final Object orig)
        throws IllegalAccessException, InvocationTargetException {

        // Validate existence of the specified beans
        if (dest == null) {
            throw new IllegalArgumentException
                    (""No destination bean specified"");
        }
        if (orig == null) {
            throw new IllegalArgumentException(""No origin bean specified"");
        }
        if (log.isDebugEnabled()) {
            log.debug(""BeanUtils.copyProperties("" + dest + "", "" +
                      orig + "")"");
        }

        // Copy the properties, converting as necessary
        if (orig instanceof DynaBean) {
            final DynaProperty[] origDescriptors =
                ((DynaBean) orig).getDynaClass().getDynaProperties();
            for (DynaProperty origDescriptor : origDescriptors) {
                final String name = origDescriptor.getName();
                // Need to check isReadable() for WrapDynaBean
                // (see Jira issue# BEANUTILS-61)
                if (getPropertyUtils().isReadable(orig, name) &&
                    getPropertyUtils().isWriteable(dest, name)) {
                    final Object value = ((DynaBean) orig).get(name);
                    copyProperty(dest, name, value);
                }
            }
        } else if (orig instanceof Map) {
            @SuppressWarnings(""unchecked"")
            final
            // Map properties are always of type <String, Object>
            Map<String, Object> propMap = (Map<String, Object>) orig;
            for (final Map.Entry<String, Object> entry : propMap.entrySet()) {
                final String name = entry.getKey();
                if (getPropertyUtils().isWriteable(dest, name)) {
                    copyProperty(dest, name, entry.getValue());
                }
            }
        } else /* if (orig is a standard JavaBean) */ {
            final PropertyDescriptor[] origDescriptors =
                getPropertyUtils().getPropertyDescriptors(orig);
            for (PropertyDescriptor origDescriptor : origDescriptors) {
                final String name = origDescriptor.getName();
                if (""class"".equals(name)) {
                    continue; // No point in trying to set an object's class
                }
                if (getPropertyUtils().isReadable(orig, name) &&
                    getPropertyUtils().isWriteable(dest, name)) {
                    try {
                        final Object value =
                            getPropertyUtils().getSimpleProperty(orig, name);
                        copyProperty(dest, name, value);
                    } catch (final NoSuchMethodException e) {
                        // Should not happen
                    }
                }
            }
        }

    }","  public void test15()  throws Throwable  {
      ConvertUtilsBean convertUtilsBean0 = new ConvertUtilsBean();
      BeanUtilsBean beanUtilsBean0 = new BeanUtilsBean(convertUtilsBean0);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      try { 
        beanUtilsBean0.copyProperties(rowSetMetaDataImpl0, rowSetMetaDataImpl0);
        fail(""Expecting exception: InvocationTargetException"");
      } catch(InvocationTargetException e) {
      }
  }"
156,"    protected Object convert(final Object value, final Class<?> type) {
        final Converter converter = getConvertUtils().lookup(type);
        if (converter != null) {
            log.trace(""        USING CONVERTER "" + converter);
            return converter.convert(type, value);
        } else {
            return value;
        }
    }","  public void test16()  throws Throwable  {
      BeanUtilsBean beanUtilsBean0 = BeanUtilsBean.getInstance();
      ConvertUtilsBean convertUtilsBean0 = beanUtilsBean0.getConvertUtils();
      Class<LazyDynaBean> class0 = LazyDynaBean.class;
      ConvertUtilsBean convertUtilsBean1 = (ConvertUtilsBean)beanUtilsBean0.convert(convertUtilsBean0, class0);
}"
157,"    public Object cloneBean(final Object bean)
            throws IllegalAccessException, InstantiationException,
            InvocationTargetException, NoSuchMethodException {

        if (log.isDebugEnabled()) {
            log.debug(""Cloning bean: "" + bean.getClass().getName());
        }
        Object newBean = null;
        if (bean instanceof DynaBean) {
            newBean = ((DynaBean) bean).getDynaClass().newInstance();
        } else {
            newBean = bean.getClass().newInstance();
        }
        getPropertyUtils().copyProperties(newBean, bean);
        return (newBean);

    }","  public void test17()  throws Throwable  {
      ConvertUtilsBean convertUtilsBean0 = new ConvertUtilsBean();
      BeanUtilsBean beanUtilsBean0 = new BeanUtilsBean(convertUtilsBean0);
      MockThrowable mockThrowable0 = new MockThrowable();
      mockThrowable0.setOriginForDelegate((StackTraceElement) null);
      try { 
        beanUtilsBean0.cloneBean(mockThrowable0);
        fail(""Expecting exception: InvocationTargetException"");
      } catch(InvocationTargetException e) {
      }
  }"
158,"    public Object cloneBean(final Object bean)
            throws IllegalAccessException, InstantiationException,
            InvocationTargetException, NoSuchMethodException {

        if (log.isDebugEnabled()) {
            log.debug(""Cloning bean: "" + bean.getClass().getName());
        }
        Object newBean = null;
        if (bean instanceof DynaBean) {
            newBean = ((DynaBean) bean).getDynaClass().newInstance();
        } else {
            newBean = bean.getClass().newInstance();
        }
        getPropertyUtils().copyProperties(newBean, bean);
        return (newBean);

    }","  public void test18()  throws Throwable  {
      BeanUtilsBean beanUtilsBean0 = new BeanUtilsBean();
      Class<MappedPropertyDescriptor> class0 = MappedPropertyDescriptor.class;
      try { 
        beanUtilsBean0.cloneBean(class0);
        fail(""Expecting exception: IllegalAccessException"");
      } catch(IllegalAccessException e) {
      }
  }"
159,"    public boolean initCause(final Throwable throwable, final Throwable cause) {
        if (INIT_CAUSE_METHOD != null && cause != null) {
            try {
                INIT_CAUSE_METHOD.invoke(throwable, new Object[] { cause });
                return true;
            } catch (final Throwable e) {
                return false; // can't initialize cause
            }
        }
        return false;
    }","  public void test19()  throws Throwable  {
      BeanUtilsBean beanUtilsBean0 = new BeanUtilsBean();
      boolean boolean0 = beanUtilsBean0.initCause((Throwable) null, (Throwable) null);
}"
160,"    public String getProperty(final Object bean, final String name)
            throws IllegalAccessException, InvocationTargetException,
            NoSuchMethodException {

        return (getNestedProperty(bean, name));

    }","  public void test20()  throws Throwable  {
      BeanUtilsBean beanUtilsBean0 = BeanUtilsBean.getInstance();
      ConvertingWrapDynaBean convertingWrapDynaBean0 = new ConvertingWrapDynaBean(beanUtilsBean0);
      beanUtilsBean0.describe(convertingWrapDynaBean0);
      String string0 = ""cc<u "";
      try { 
        beanUtilsBean0.getProperty(convertingWrapDynaBean0, string0);
        fail(""Expecting exception: NoSuchMethodException"");
      } catch(NoSuchMethodException e) {
         //
         // Unknown property 'cc<u ' on dynaclass 'org.apache.commons.beanutils.WrapDynaClass@7'
         //
         verifyException(""org.apache.commons.beanutils.PropertyUtilsBean"", e);
      }
  }"
161,"    public static void setInstance(final BeanUtilsBean newInstance) {
        BEANS_BY_CLASSLOADER.set(newInstance);
    }","  public void test21()  throws Throwable  {
      BeanUtilsBean beanUtilsBean0 = BeanUtilsBean.getInstance();
      BeanUtilsBean.setInstance(beanUtilsBean0);
  }"
162,"    public String getIndexedProperty(final Object bean, final String name)
            throws IllegalAccessException, InvocationTargetException,
            NoSuchMethodException {

        final Object value = getPropertyUtils().getIndexedProperty(bean, name);
        return (getConvertUtils().convert(value));

    }","  public void test22()  throws Throwable  {
      BeanUtilsBean beanUtilsBean0 = new BeanUtilsBean((ConvertUtilsBean) null, (PropertyUtilsBean) null);
      // Undeclared exception!
      try { 
        beanUtilsBean0.getIndexedProperty((Object) null, ""sQlL,:zhL6"");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.beanutils.BeanUtilsBean"", e);
      }
  }"
163,"    public String getProperty(final Object bean, final String name)
            throws IllegalAccessException, InvocationTargetException,
            NoSuchMethodException {

        return (getNestedProperty(bean, name));

    }","  public void test23()  throws Throwable  {
      ConvertUtilsBean convertUtilsBean0 = new ConvertUtilsBean();
      BeanUtilsBean beanUtilsBean0 = new BeanUtilsBean(convertUtilsBean0, (PropertyUtilsBean) null);
      // Undeclared exception!
      try { 
        beanUtilsBean0.getProperty(convertUtilsBean0, (String) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.beanutils.BeanUtilsBean"", e);
      }
  }"
164,"    public String getMappedProperty(final Object bean, final String name)
            throws IllegalAccessException, InvocationTargetException,
            NoSuchMethodException {

        final Object value = getPropertyUtils().getMappedProperty(bean, name);
        return (getConvertUtils().convert(value));

    }","  public void test24()  throws Throwable  {
      PropertyUtilsBean propertyUtilsBean0 = new PropertyUtilsBean();
      BeanUtilsBean beanUtilsBean0 = new BeanUtilsBean((ConvertUtilsBean) null, propertyUtilsBean0);
      // Undeclared exception!
      try { 
        beanUtilsBean0.getMappedProperty((Object) ""&Qa6;"", ""propertyUtils"");
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Invalid mapped property 'propertyUtils' on bean class 'class java.lang.String'
         //
         verifyException(""org.apache.commons.beanutils.PropertyUtilsBean"", e);
      }
  }"
165,"    public void copyProperty(final Object bean, String name, Object value)
        throws IllegalAccessException, InvocationTargetException {

        // Trace logging (if enabled)
        if (log.isTraceEnabled()) {
            final StringBuilder sb = new StringBuilder(""  copyProperty("");
            sb.append(bean);
            sb.append("", "");
            sb.append(name);
            sb.append("", "");
            if (value == null) {
                sb.append(""<NULL>"");
            } else if (value instanceof String) {
                sb.append((String) value);
            } else if (value instanceof String[]) {
                final String[] values = (String[]) value;
                sb.append('[');
                for (int i = 0; i < values.length; i++) {
                    if (i > 0) {
                        sb.append(',');
                    }
                    sb.append(values[i]);
                }
                sb.append(']');
            } else {
                sb.append(value.toString());
            }
            sb.append(')');
            log.trace(sb.toString());
        }

        // Resolve any nested expression to get the actual target bean
        Object target = bean;
        final Resolver resolver = getPropertyUtils().getResolver();
        while (resolver.hasNested(name)) {
            try {
                target = getPropertyUtils().getProperty(target, resolver.next(name));
                name = resolver.remove(name);
            } catch (final NoSuchMethodException e) {
                return; // Skip this property setter
            }
        }
        if (log.isTraceEnabled()) {
            log.trace(""    Target bean = "" + target);
            log.trace(""    Target name = "" + name);
        }

        // Declare local variables we will require
        final String propName = resolver.getProperty(name); // Simple name of target property
        Class<?> type = null;                         // Java type of target property
        final int index  = resolver.getIndex(name);         // Indexed subscript value (if any)
        final String key = resolver.getKey(name);           // Mapped key value (if any)

        // Calculate the target property type
        if (target instanceof DynaBean) {
            final DynaClass dynaClass = ((DynaBean) target).getDynaClass();
            final DynaProperty dynaProperty = dynaClass.getDynaProperty(propName);
            if (dynaProperty == null) {
                return; // Skip this property setter
            }
            type = dynaPropertyType(dynaProperty, value);
        } else {
            PropertyDescriptor descriptor = null;
            try {
                descriptor =
                    getPropertyUtils().getPropertyDescriptor(target, name);
                if (descriptor == null) {
                    return; // Skip this property setter
                }
            } catch (final NoSuchMethodException e) {
                return; // Skip this property setter
            }
            type = descriptor.getPropertyType();
            if (type == null) {
                // Most likely an indexed setter on a POJB only
                if (log.isTraceEnabled()) {
                    log.trace(""    target type for property '"" +
                              propName + ""' is null, so skipping ths setter"");
                }
                return;
            }
        }
        if (log.isTraceEnabled()) {
            log.trace(""    target propName="" + propName + "", type="" +
                      type + "", index="" + index + "", key="" + key);
        }

        // Convert the specified value to the required type and store it
        if (index >= 0) {                    // Destination must be indexed
            value = convertForCopy(value, type.getComponentType());
            try {
                getPropertyUtils().setIndexedProperty(target, propName,
                                                 index, value);
            } catch (final NoSuchMethodException e) {
                throw new InvocationTargetException
                    (e, ""Cannot set "" + propName);
            }
        } else if (key != null) {            // Destination must be mapped
            // Maps do not know what the preferred data type is,
            // so perform no conversions at all
            // FIXME - should we create or support a TypedMap?
            try {
                getPropertyUtils().setMappedProperty(target, propName,
                                                key, value);
            } catch (final NoSuchMethodException e) {
                throw new InvocationTargetException
                    (e, ""Cannot set "" + propName);
            }
        } else {                             // Destination must be simple
            value = convertForCopy(value, type);
            try {
                getPropertyUtils().setSimpleProperty(target, propName, value);
            } catch (final NoSuchMethodException e) {
                throw new InvocationTargetException
                    (e, ""Cannot set "" + propName);
            }
        }

    }","  public void test25()  throws Throwable  {
      BeanUtilsBean beanUtilsBean0 = new BeanUtilsBean();
      ConvertUtilsBean convertUtilsBean0 = beanUtilsBean0.getConvertUtils();
      // Undeclared exception!
      try { 
        beanUtilsBean0.copyProperty(convertUtilsBean0, ""defaultLong"", (Object) null);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Cannot invoke org.apache.commons.beanutils.ConvertUtilsBean.setDefaultLong on bean class 'class org.apache.commons.beanutils.ConvertUtilsBean' - null - had objects of type \""<null>\"" but expected signature \""long\""
         //
         verifyException(""org.apache.commons.beanutils.PropertyUtilsBean"", e);
      }
  }"
166,"    public void setProperty(final Object bean, String name, final Object value)
        throws IllegalAccessException, InvocationTargetException {

        // Trace logging (if enabled)
        if (log.isTraceEnabled()) {
            final StringBuilder sb = new StringBuilder(""  setProperty("");
            sb.append(bean);
            sb.append("", "");
            sb.append(name);
            sb.append("", "");
            if (value == null) {
                sb.append(""<NULL>"");
            } else if (value instanceof String) {
                sb.append((String) value);
            } else if (value instanceof String[]) {
                final String[] values = (String[]) value;
                sb.append('[');
                for (int i = 0; i < values.length; i++) {
                    if (i > 0) {
                        sb.append(',');
                    }
                    sb.append(values[i]);
                }
                sb.append(']');
            } else {
                sb.append(value.toString());
            }
            sb.append(')');
            log.trace(sb.toString());
        }

        // Resolve any nested expression to get the actual target bean
        Object target = bean;
        final Resolver resolver = getPropertyUtils().getResolver();
        while (resolver.hasNested(name)) {
            try {
                target = getPropertyUtils().getProperty(target, resolver.next(name));
                if (target == null) { // the value of a nested property is null
                    return;
                }
                name = resolver.remove(name);
            } catch (final NoSuchMethodException e) {
                return; // Skip this property setter
            }
        }
        if (log.isTraceEnabled()) {
            log.trace(""    Target bean = "" + target);
            log.trace(""    Target name = "" + name);
        }

        // Declare local variables we will require
        final String propName = resolver.getProperty(name); // Simple name of target property
        Class<?> type = null;                         // Java type of target property
        final int index  = resolver.getIndex(name);         // Indexed subscript value (if any)
        final String key = resolver.getKey(name);           // Mapped key value (if any)

        // Calculate the property type
        if (target instanceof DynaBean) {
            final DynaClass dynaClass = ((DynaBean) target).getDynaClass();
            final DynaProperty dynaProperty = dynaClass.getDynaProperty(propName);
            if (dynaProperty == null) {
                return; // Skip this property setter
            }
            type = dynaPropertyType(dynaProperty, value);
            if (index >= 0 && List.class.isAssignableFrom(type)) {
            	type = Object.class;
            }
        } else if (target instanceof Map) {
            type = Object.class;
        } else if (target != null && target.getClass().isArray() && index >= 0) {
            type = Array.get(target, index).getClass();
        } else {
            PropertyDescriptor descriptor = null;
            try {
                descriptor =
                    getPropertyUtils().getPropertyDescriptor(target, name);
                if (descriptor == null) {
                    return; // Skip this property setter
                }
            } catch (final NoSuchMethodException e) {
                return; // Skip this property setter
            }
            if (descriptor instanceof MappedPropertyDescriptor) {
                if (((MappedPropertyDescriptor) descriptor).getMappedWriteMethod() == null) {
                    if (log.isDebugEnabled()) {
                        log.debug(""Skipping read-only property"");
                    }
                    return; // Read-only, skip this property setter
                }
                type = ((MappedPropertyDescriptor) descriptor).
                    getMappedPropertyType();
            } else if (index >= 0 && descriptor instanceof IndexedPropertyDescriptor) {
                if (((IndexedPropertyDescriptor) descriptor).getIndexedWriteMethod() == null) {
                    if (log.isDebugEnabled()) {
                        log.debug(""Skipping read-only property"");
                    }
                    return; // Read-only, skip this property setter
                }
                type = ((IndexedPropertyDescriptor) descriptor).
                    getIndexedPropertyType();
            } else if (index >= 0 && List.class.isAssignableFrom(descriptor.getPropertyType())) {
                type = Object.class;
            } else if (key != null) {
                if (descriptor.getReadMethod() == null) {
                    if (log.isDebugEnabled()) {
                        log.debug(""Skipping read-only property"");
                    }
                    return; // Read-only, skip this property setter
                }
                type = (value == null) ? Object.class : value.getClass();
            } else {
                if (descriptor.getWriteMethod() == null) {
                    if (log.isDebugEnabled()) {
                        log.debug(""Skipping read-only property"");
                    }
                    return; // Read-only, skip this property setter
                }
                type = descriptor.getPropertyType();
            }
        }

        // Convert the specified value to the required type
        Object newValue = null;
        if (type.isArray() && (index < 0)) { // Scalar value into array
            if (value == null) {
                final String[] values = new String[1];
                values[0] = null;
                newValue = getConvertUtils().convert(values, type);
            } else if (value instanceof String) {
                newValue = getConvertUtils().convert(value, type);
            } else if (value instanceof String[]) {
                newValue = getConvertUtils().convert((String[]) value, type);
            } else {
                newValue = convert(value, type);
            }
        } else if (type.isArray()) {         // Indexed value into array
            if (value instanceof String || value == null) {
                newValue = getConvertUtils().convert((String) value,
                                                type.getComponentType());
            } else if (value instanceof String[]) {
                newValue = getConvertUtils().convert(((String[]) value)[0],
                                                type.getComponentType());
            } else {
                newValue = convert(value, type.getComponentType());
            }
        } else {                             // Value into scalar
            if (value instanceof String) {
                newValue = getConvertUtils().convert((String) value, type);
            } else if (value instanceof String[]) {
                newValue = getConvertUtils().convert(((String[]) value)[0],
                                                type);
            } else {
                newValue = convert(value, type);
            }
        }

        // Invoke the setter method
        try {
          getPropertyUtils().setProperty(target, name, newValue);
        } catch (final NoSuchMethodException e) {
            throw new InvocationTargetException
                (e, ""Cannot set "" + propName);
        }

    }","  public void test26()  throws Throwable  {
      BeanUtilsBean beanUtilsBean0 = new BeanUtilsBean();
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      // Undeclared exception!
      try { 
        beanUtilsBean0.setProperty(map0, ""B@,x4M1Z"", map0);
        fail(""Expecting exception: UnsupportedOperationException"");
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.util.Collections$UnmodifiableMap"", e);
      }
  }"
167,"    public void setProperty(final Object bean, String name, final Object value)
        throws IllegalAccessException, InvocationTargetException {

        // Trace logging (if enabled)
        if (log.isTraceEnabled()) {
            final StringBuilder sb = new StringBuilder(""  setProperty("");
            sb.append(bean);
            sb.append("", "");
            sb.append(name);
            sb.append("", "");
            if (value == null) {
                sb.append(""<NULL>"");
            } else if (value instanceof String) {
                sb.append((String) value);
            } else if (value instanceof String[]) {
                final String[] values = (String[]) value;
                sb.append('[');
                for (int i = 0; i < values.length; i++) {
                    if (i > 0) {
                        sb.append(',');
                    }
                    sb.append(values[i]);
                }
                sb.append(']');
            } else {
                sb.append(value.toString());
            }
            sb.append(')');
            log.trace(sb.toString());
        }

        // Resolve any nested expression to get the actual target bean
        Object target = bean;
        final Resolver resolver = getPropertyUtils().getResolver();
        while (resolver.hasNested(name)) {
            try {
                target = getPropertyUtils().getProperty(target, resolver.next(name));
                if (target == null) { // the value of a nested property is null
                    return;
                }
                name = resolver.remove(name);
            } catch (final NoSuchMethodException e) {
                return; // Skip this property setter
            }
        }
        if (log.isTraceEnabled()) {
            log.trace(""    Target bean = "" + target);
            log.trace(""    Target name = "" + name);
        }

        // Declare local variables we will require
        final String propName = resolver.getProperty(name); // Simple name of target property
        Class<?> type = null;                         // Java type of target property
        final int index  = resolver.getIndex(name);         // Indexed subscript value (if any)
        final String key = resolver.getKey(name);           // Mapped key value (if any)

        // Calculate the property type
        if (target instanceof DynaBean) {
            final DynaClass dynaClass = ((DynaBean) target).getDynaClass();
            final DynaProperty dynaProperty = dynaClass.getDynaProperty(propName);
            if (dynaProperty == null) {
                return; // Skip this property setter
            }
            type = dynaPropertyType(dynaProperty, value);
            if (index >= 0 && List.class.isAssignableFrom(type)) {
            	type = Object.class;
            }
        } else if (target instanceof Map) {
            type = Object.class;
        } else if (target != null && target.getClass().isArray() && index >= 0) {
            type = Array.get(target, index).getClass();
        } else {
            PropertyDescriptor descriptor = null;
            try {
                descriptor =
                    getPropertyUtils().getPropertyDescriptor(target, name);
                if (descriptor == null) {
                    return; // Skip this property setter
                }
            } catch (final NoSuchMethodException e) {
                return; // Skip this property setter
            }
            if (descriptor instanceof MappedPropertyDescriptor) {
                if (((MappedPropertyDescriptor) descriptor).getMappedWriteMethod() == null) {
                    if (log.isDebugEnabled()) {
                        log.debug(""Skipping read-only property"");
                    }
                    return; // Read-only, skip this property setter
                }
                type = ((MappedPropertyDescriptor) descriptor).
                    getMappedPropertyType();
            } else if (index >= 0 && descriptor instanceof IndexedPropertyDescriptor) {
                if (((IndexedPropertyDescriptor) descriptor).getIndexedWriteMethod() == null) {
                    if (log.isDebugEnabled()) {
                        log.debug(""Skipping read-only property"");
                    }
                    return; // Read-only, skip this property setter
                }
                type = ((IndexedPropertyDescriptor) descriptor).
                    getIndexedPropertyType();
            } else if (index >= 0 && List.class.isAssignableFrom(descriptor.getPropertyType())) {
                type = Object.class;
            } else if (key != null) {
                if (descriptor.getReadMethod() == null) {
                    if (log.isDebugEnabled()) {
                        log.debug(""Skipping read-only property"");
                    }
                    return; // Read-only, skip this property setter
                }
                type = (value == null) ? Object.class : value.getClass();
            } else {
                if (descriptor.getWriteMethod() == null) {
                    if (log.isDebugEnabled()) {
                        log.debug(""Skipping read-only property"");
                    }
                    return; // Read-only, skip this property setter
                }
                type = descriptor.getPropertyType();
            }
        }

        // Convert the specified value to the required type
        Object newValue = null;
        if (type.isArray() && (index < 0)) { // Scalar value into array
            if (value == null) {
                final String[] values = new String[1];
                values[0] = null;
                newValue = getConvertUtils().convert(values, type);
            } else if (value instanceof String) {
                newValue = getConvertUtils().convert(value, type);
            } else if (value instanceof String[]) {
                newValue = getConvertUtils().convert((String[]) value, type);
            } else {
                newValue = convert(value, type);
            }
        } else if (type.isArray()) {         // Indexed value into array
            if (value instanceof String || value == null) {
                newValue = getConvertUtils().convert((String) value,
                                                type.getComponentType());
            } else if (value instanceof String[]) {
                newValue = getConvertUtils().convert(((String[]) value)[0],
                                                type.getComponentType());
            } else {
                newValue = convert(value, type.getComponentType());
            }
        } else {                             // Value into scalar
            if (value instanceof String) {
                newValue = getConvertUtils().convert((String) value, type);
            } else if (value instanceof String[]) {
                newValue = getConvertUtils().convert(((String[]) value)[0],
                                                type);
            } else {
                newValue = convert(value, type);
            }
        }

        // Invoke the setter method
        try {
          getPropertyUtils().setProperty(target, name, newValue);
        } catch (final NoSuchMethodException e) {
            throw new InvocationTargetException
                (e, ""Cannot set "" + propName);
        }

    }","  public void test27()  throws Throwable  {
      ConvertUtilsBean convertUtilsBean0 = new ConvertUtilsBean();
      BeanUtilsBean beanUtilsBean0 = new BeanUtilsBean(convertUtilsBean0);
      beanUtilsBean0.setProperty(convertUtilsBean0, ""defaultInteger"", ""defaultInteger"");
}"
168,"    public void setProperty(final Object bean, String name, final Object value)
        throws IllegalAccessException, InvocationTargetException {

        // Trace logging (if enabled)
        if (log.isTraceEnabled()) {
            final StringBuilder sb = new StringBuilder(""  setProperty("");
            sb.append(bean);
            sb.append("", "");
            sb.append(name);
            sb.append("", "");
            if (value == null) {
                sb.append(""<NULL>"");
            } else if (value instanceof String) {
                sb.append((String) value);
            } else if (value instanceof String[]) {
                final String[] values = (String[]) value;
                sb.append('[');
                for (int i = 0; i < values.length; i++) {
                    if (i > 0) {
                        sb.append(',');
                    }
                    sb.append(values[i]);
                }
                sb.append(']');
            } else {
                sb.append(value.toString());
            }
            sb.append(')');
            log.trace(sb.toString());
        }

        // Resolve any nested expression to get the actual target bean
        Object target = bean;
        final Resolver resolver = getPropertyUtils().getResolver();
        while (resolver.hasNested(name)) {
            try {
                target = getPropertyUtils().getProperty(target, resolver.next(name));
                if (target == null) { // the value of a nested property is null
                    return;
                }
                name = resolver.remove(name);
            } catch (final NoSuchMethodException e) {
                return; // Skip this property setter
            }
        }
        if (log.isTraceEnabled()) {
            log.trace(""    Target bean = "" + target);
            log.trace(""    Target name = "" + name);
        }

        // Declare local variables we will require
        final String propName = resolver.getProperty(name); // Simple name of target property
        Class<?> type = null;                         // Java type of target property
        final int index  = resolver.getIndex(name);         // Indexed subscript value (if any)
        final String key = resolver.getKey(name);           // Mapped key value (if any)

        // Calculate the property type
        if (target instanceof DynaBean) {
            final DynaClass dynaClass = ((DynaBean) target).getDynaClass();
            final DynaProperty dynaProperty = dynaClass.getDynaProperty(propName);
            if (dynaProperty == null) {
                return; // Skip this property setter
            }
            type = dynaPropertyType(dynaProperty, value);
            if (index >= 0 && List.class.isAssignableFrom(type)) {
            	type = Object.class;
            }
        } else if (target instanceof Map) {
            type = Object.class;
        } else if (target != null && target.getClass().isArray() && index >= 0) {
            type = Array.get(target, index).getClass();
        } else {
            PropertyDescriptor descriptor = null;
            try {
                descriptor =
                    getPropertyUtils().getPropertyDescriptor(target, name);
                if (descriptor == null) {
                    return; // Skip this property setter
                }
            } catch (final NoSuchMethodException e) {
                return; // Skip this property setter
            }
            if (descriptor instanceof MappedPropertyDescriptor) {
                if (((MappedPropertyDescriptor) descriptor).getMappedWriteMethod() == null) {
                    if (log.isDebugEnabled()) {
                        log.debug(""Skipping read-only property"");
                    }
                    return; // Read-only, skip this property setter
                }
                type = ((MappedPropertyDescriptor) descriptor).
                    getMappedPropertyType();
            } else if (index >= 0 && descriptor instanceof IndexedPropertyDescriptor) {
                if (((IndexedPropertyDescriptor) descriptor).getIndexedWriteMethod() == null) {
                    if (log.isDebugEnabled()) {
                        log.debug(""Skipping read-only property"");
                    }
                    return; // Read-only, skip this property setter
                }
                type = ((IndexedPropertyDescriptor) descriptor).
                    getIndexedPropertyType();
            } else if (index >= 0 && List.class.isAssignableFrom(descriptor.getPropertyType())) {
                type = Object.class;
            } else if (key != null) {
                if (descriptor.getReadMethod() == null) {
                    if (log.isDebugEnabled()) {
                        log.debug(""Skipping read-only property"");
                    }
                    return; // Read-only, skip this property setter
                }
                type = (value == null) ? Object.class : value.getClass();
            } else {
                if (descriptor.getWriteMethod() == null) {
                    if (log.isDebugEnabled()) {
                        log.debug(""Skipping read-only property"");
                    }
                    return; // Read-only, skip this property setter
                }
                type = descriptor.getPropertyType();
            }
        }

        // Convert the specified value to the required type
        Object newValue = null;
        if (type.isArray() && (index < 0)) { // Scalar value into array
            if (value == null) {
                final String[] values = new String[1];
                values[0] = null;
                newValue = getConvertUtils().convert(values, type);
            } else if (value instanceof String) {
                newValue = getConvertUtils().convert(value, type);
            } else if (value instanceof String[]) {
                newValue = getConvertUtils().convert((String[]) value, type);
            } else {
                newValue = convert(value, type);
            }
        } else if (type.isArray()) {         // Indexed value into array
            if (value instanceof String || value == null) {
                newValue = getConvertUtils().convert((String) value,
                                                type.getComponentType());
            } else if (value instanceof String[]) {
                newValue = getConvertUtils().convert(((String[]) value)[0],
                                                type.getComponentType());
            } else {
                newValue = convert(value, type.getComponentType());
            }
        } else {                             // Value into scalar
            if (value instanceof String) {
                newValue = getConvertUtils().convert((String) value, type);
            } else if (value instanceof String[]) {
                newValue = getConvertUtils().convert(((String[]) value)[0],
                                                type);
            } else {
                newValue = convert(value, type);
            }
        }

        // Invoke the setter method
        try {
          getPropertyUtils().setProperty(target, name, newValue);
        } catch (final NoSuchMethodException e) {
            throw new InvocationTargetException
                (e, ""Cannot set "" + propName);
        }

    }","  public void test28()  throws Throwable  {
      BeanUtilsBean beanUtilsBean0 = new BeanUtilsBean();
      Integer integer0 = LazyDynaBean.Integer_ZERO;
      // Undeclared exception!
      try { 
        beanUtilsBean0.setProperty((Object) null, "" does not implement DynaBean"", integer0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // No bean specified
         //
         verifyException(""org.apache.commons.beanutils.PropertyUtilsBean"", e);
      }
  }"
169,"    public void populate(final Object bean, final Map<String, ? extends Object> properties)
        throws IllegalAccessException, InvocationTargetException {

        // Do nothing unless both arguments have been specified
        if ((bean == null) || (properties == null)) {
            return;
        }
        if (log.isDebugEnabled()) {
            log.debug(""BeanUtils.populate("" + bean + "", "" +
                    properties + "")"");
        }

        // Loop through the property name/value pairs to be set
        for(final Map.Entry<String, ? extends Object> entry : properties.entrySet()) {
            // Identify the property name and value(s) to be assigned
            final String name = entry.getKey();
            if (name == null) {
                continue;
            }

            // Perform the assignment for this property
            setProperty(bean, name, entry.getValue());

        }

    }","  public void test29()  throws Throwable  {
      ConvertUtilsBean convertUtilsBean0 = new ConvertUtilsBean();
      BeanUtilsBean beanUtilsBean0 = new BeanUtilsBean(convertUtilsBean0);
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      // Undeclared exception!
      try { 
        beanUtilsBean0.populate(map0, map0);
        fail(""Expecting exception: UnsupportedOperationException"");
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.util.Collections$UnmodifiableMap"", e);
      }
  }"
170,"    public void setProperty(final Object bean, String name, final Object value)
        throws IllegalAccessException, InvocationTargetException {

        // Trace logging (if enabled)
        if (log.isTraceEnabled()) {
            final StringBuilder sb = new StringBuilder(""  setProperty("");
            sb.append(bean);
            sb.append("", "");
            sb.append(name);
            sb.append("", "");
            if (value == null) {
                sb.append(""<NULL>"");
            } else if (value instanceof String) {
                sb.append((String) value);
            } else if (value instanceof String[]) {
                final String[] values = (String[]) value;
                sb.append('[');
                for (int i = 0; i < values.length; i++) {
                    if (i > 0) {
                        sb.append(',');
                    }
                    sb.append(values[i]);
                }
                sb.append(']');
            } else {
                sb.append(value.toString());
            }
            sb.append(')');
            log.trace(sb.toString());
        }

        // Resolve any nested expression to get the actual target bean
        Object target = bean;
        final Resolver resolver = getPropertyUtils().getResolver();
        while (resolver.hasNested(name)) {
            try {
                target = getPropertyUtils().getProperty(target, resolver.next(name));
                if (target == null) { // the value of a nested property is null
                    return;
                }
                name = resolver.remove(name);
            } catch (final NoSuchMethodException e) {
                return; // Skip this property setter
            }
        }
        if (log.isTraceEnabled()) {
            log.trace(""    Target bean = "" + target);
            log.trace(""    Target name = "" + name);
        }

        // Declare local variables we will require
        final String propName = resolver.getProperty(name); // Simple name of target property
        Class<?> type = null;                         // Java type of target property
        final int index  = resolver.getIndex(name);         // Indexed subscript value (if any)
        final String key = resolver.getKey(name);           // Mapped key value (if any)

        // Calculate the property type
        if (target instanceof DynaBean) {
            final DynaClass dynaClass = ((DynaBean) target).getDynaClass();
            final DynaProperty dynaProperty = dynaClass.getDynaProperty(propName);
            if (dynaProperty == null) {
                return; // Skip this property setter
            }
            type = dynaPropertyType(dynaProperty, value);
            if (index >= 0 && List.class.isAssignableFrom(type)) {
            	type = Object.class;
            }
        } else if (target instanceof Map) {
            type = Object.class;
        } else if (target != null && target.getClass().isArray() && index >= 0) {
            type = Array.get(target, index).getClass();
        } else {
            PropertyDescriptor descriptor = null;
            try {
                descriptor =
                    getPropertyUtils().getPropertyDescriptor(target, name);
                if (descriptor == null) {
                    return; // Skip this property setter
                }
            } catch (final NoSuchMethodException e) {
                return; // Skip this property setter
            }
            if (descriptor instanceof MappedPropertyDescriptor) {
                if (((MappedPropertyDescriptor) descriptor).getMappedWriteMethod() == null) {
                    if (log.isDebugEnabled()) {
                        log.debug(""Skipping read-only property"");
                    }
                    return; // Read-only, skip this property setter
                }
                type = ((MappedPropertyDescriptor) descriptor).
                    getMappedPropertyType();
            } else if (index >= 0 && descriptor instanceof IndexedPropertyDescriptor) {
                if (((IndexedPropertyDescriptor) descriptor).getIndexedWriteMethod() == null) {
                    if (log.isDebugEnabled()) {
                        log.debug(""Skipping read-only property"");
                    }
                    return; // Read-only, skip this property setter
                }
                type = ((IndexedPropertyDescriptor) descriptor).
                    getIndexedPropertyType();
            } else if (index >= 0 && List.class.isAssignableFrom(descriptor.getPropertyType())) {
                type = Object.class;
            } else if (key != null) {
                if (descriptor.getReadMethod() == null) {
                    if (log.isDebugEnabled()) {
                        log.debug(""Skipping read-only property"");
                    }
                    return; // Read-only, skip this property setter
                }
                type = (value == null) ? Object.class : value.getClass();
            } else {
                if (descriptor.getWriteMethod() == null) {
                    if (log.isDebugEnabled()) {
                        log.debug(""Skipping read-only property"");
                    }
                    return; // Read-only, skip this property setter
                }
                type = descriptor.getPropertyType();
            }
        }

        // Convert the specified value to the required type
        Object newValue = null;
        if (type.isArray() && (index < 0)) { // Scalar value into array
            if (value == null) {
                final String[] values = new String[1];
                values[0] = null;
                newValue = getConvertUtils().convert(values, type);
            } else if (value instanceof String) {
                newValue = getConvertUtils().convert(value, type);
            } else if (value instanceof String[]) {
                newValue = getConvertUtils().convert((String[]) value, type);
            } else {
                newValue = convert(value, type);
            }
        } else if (type.isArray()) {         // Indexed value into array
            if (value instanceof String || value == null) {
                newValue = getConvertUtils().convert((String) value,
                                                type.getComponentType());
            } else if (value instanceof String[]) {
                newValue = getConvertUtils().convert(((String[]) value)[0],
                                                type.getComponentType());
            } else {
                newValue = convert(value, type.getComponentType());
            }
        } else {                             // Value into scalar
            if (value instanceof String) {
                newValue = getConvertUtils().convert((String) value, type);
            } else if (value instanceof String[]) {
                newValue = getConvertUtils().convert(((String[]) value)[0],
                                                type);
            } else {
                newValue = convert(value, type);
            }
        }

        // Invoke the setter method
        try {
          getPropertyUtils().setProperty(target, name, newValue);
        } catch (final NoSuchMethodException e) {
            throw new InvocationTargetException
                (e, ""Cannot set "" + propName);
        }

    }","  public void test30()  throws Throwable  {
      BeanUtilsBean beanUtilsBean0 = new BeanUtilsBean();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      beanUtilsBean0.setProperty(hashMap0, ""?@,.4D^Z"", hashMap0);
}"
171,"    public void populate(final Object bean, final Map<String, ? extends Object> properties)
        throws IllegalAccessException, InvocationTargetException {

        // Do nothing unless both arguments have been specified
        if ((bean == null) || (properties == null)) {
            return;
        }
        if (log.isDebugEnabled()) {
            log.debug(""BeanUtils.populate("" + bean + "", "" +
                    properties + "")"");
        }

        // Loop through the property name/value pairs to be set
        for(final Map.Entry<String, ? extends Object> entry : properties.entrySet()) {
            // Identify the property name and value(s) to be assigned
            final String name = entry.getKey();
            if (name == null) {
                continue;
            }

            // Perform the assignment for this property
            setProperty(bean, name, entry.getValue());

        }

    }","  public void test31()  throws Throwable  {
      BeanUtilsBean beanUtilsBean0 = new BeanUtilsBean();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put((String) null, (String) null);
      beanUtilsBean0.populate(hashMap0, hashMap0);
}"
172,"    public void populate(final Object bean, final Map<String, ? extends Object> properties)
        throws IllegalAccessException, InvocationTargetException {

        // Do nothing unless both arguments have been specified
        if ((bean == null) || (properties == null)) {
            return;
        }
        if (log.isDebugEnabled()) {
            log.debug(""BeanUtils.populate("" + bean + "", "" +
                    properties + "")"");
        }

        // Loop through the property name/value pairs to be set
        for(final Map.Entry<String, ? extends Object> entry : properties.entrySet()) {
            // Identify the property name and value(s) to be assigned
            final String name = entry.getKey();
            if (name == null) {
                continue;
            }

            // Perform the assignment for this property
            setProperty(bean, name, entry.getValue());

        }

    }","  public void test32()  throws Throwable  {
      ConvertUtilsBean convertUtilsBean0 = new ConvertUtilsBean();
      BeanUtilsBean beanUtilsBean0 = new BeanUtilsBean(convertUtilsBean0);
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      beanUtilsBean0.populate(convertUtilsBean0, map0);
}"
173,"    public void populate(final Object bean, final Map<String, ? extends Object> properties)
        throws IllegalAccessException, InvocationTargetException {

        // Do nothing unless both arguments have been specified
        if ((bean == null) || (properties == null)) {
            return;
        }
        if (log.isDebugEnabled()) {
            log.debug(""BeanUtils.populate("" + bean + "", "" +
                    properties + "")"");
        }

        // Loop through the property name/value pairs to be set
        for(final Map.Entry<String, ? extends Object> entry : properties.entrySet()) {
            // Identify the property name and value(s) to be assigned
            final String name = entry.getKey();
            if (name == null) {
                continue;
            }

            // Perform the assignment for this property
            setProperty(bean, name, entry.getValue());

        }

    }","  public void test33()  throws Throwable  {
      BeanUtilsBean beanUtilsBean0 = BeanUtilsBean.getInstance();
      HashMap<String, IndexedPropertyDescriptor> hashMap0 = new HashMap<String, IndexedPropertyDescriptor>();
      beanUtilsBean0.populate((Object) null, hashMap0);
}"
174,"    public String[] getArrayProperty(final Object bean, final String name)
            throws IllegalAccessException, InvocationTargetException,
            NoSuchMethodException {

        final Object value = getPropertyUtils().getProperty(bean, name);
        if (value == null) {
            return (null);
        } else if (value instanceof Collection) {
            final ArrayList<String> values = new ArrayList<String>();
            for (final Object item : (Collection<?>) value) {
                if (item == null) {
                    values.add(null);
                } else {
                    // convert to string using convert utils
                    values.add(getConvertUtils().convert(item));
                }
            }
            return (values.toArray(new String[values.size()]));
        } else if (value.getClass().isArray()) {
            final int n = Array.getLength(value);
            final String[] results = new String[n];
            for (int i = 0; i < n; i++) {
                final Object item = Array.get(value, i);
                if (item == null) {
                    results[i] = null;
                } else {
                    // convert to string using convert utils
                    results[i] = getConvertUtils().convert(item);
                }
            }
            return (results);
        } else {
            final String[] results = new String[1];
            results[0] = getConvertUtils().convert(value);
            return (results);
        }

    }","  public void test34()  throws Throwable  {
      ConvertUtilsBean convertUtilsBean0 = new ConvertUtilsBean();
      BeanUtilsBean beanUtilsBean0 = new BeanUtilsBean();
      String[] stringArray0 = beanUtilsBean0.getArrayProperty(convertUtilsBean0, ""defaultFloat"");
}"
175,"    public String[] getArrayProperty(final Object bean, final String name)
            throws IllegalAccessException, InvocationTargetException,
            NoSuchMethodException {

        final Object value = getPropertyUtils().getProperty(bean, name);
        if (value == null) {
            return (null);
        } else if (value instanceof Collection) {
            final ArrayList<String> values = new ArrayList<String>();
            for (final Object item : (Collection<?>) value) {
                if (item == null) {
                    values.add(null);
                } else {
                    // convert to string using convert utils
                    values.add(getConvertUtils().convert(item));
                }
            }
            return (values.toArray(new String[values.size()]));
        } else if (value.getClass().isArray()) {
            final int n = Array.getLength(value);
            final String[] results = new String[n];
            for (int i = 0; i < n; i++) {
                final Object item = Array.get(value, i);
                if (item == null) {
                    results[i] = null;
                } else {
                    // convert to string using convert utils
                    results[i] = getConvertUtils().convert(item);
                }
            }
            return (results);
        } else {
            final String[] results = new String[1];
            results[0] = getConvertUtils().convert(value);
            return (results);
        }

    }","  public void test35()  throws Throwable  {
      ConvertUtilsBean convertUtilsBean0 = ConvertUtilsBean.getInstance();
      PropertyUtilsBean propertyUtilsBean0 = PropertyUtilsBean.getInstance();
      BeanUtilsBean beanUtilsBean0 = new BeanUtilsBean(convertUtilsBean0, propertyUtilsBean0);
      String[] stringArray0 = beanUtilsBean0.getArrayProperty(convertUtilsBean0, ""defaultFloat"");
}"
176,"    public void populate(final Object bean, final Map<String, ? extends Object> properties)
        throws IllegalAccessException, InvocationTargetException {

        // Do nothing unless both arguments have been specified
        if ((bean == null) || (properties == null)) {
            return;
        }
        if (log.isDebugEnabled()) {
            log.debug(""BeanUtils.populate("" + bean + "", "" +
                    properties + "")"");
        }

        // Loop through the property name/value pairs to be set
        for(final Map.Entry<String, ? extends Object> entry : properties.entrySet()) {
            // Identify the property name and value(s) to be assigned
            final String name = entry.getKey();
            if (name == null) {
                continue;
            }

            // Perform the assignment for this property
            setProperty(bean, name, entry.getValue());

        }

    }","  public void test36()  throws Throwable  {
      BeanUtilsBean beanUtilsBean0 = new BeanUtilsBean();
      MockThrowable mockThrowable0 = new MockThrowable();
      Map<String, String> map0 = beanUtilsBean0.describe(mockThrowable0);
      // Undeclared exception!
      try { 
        beanUtilsBean0.populate(mockThrowable0, map0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Cannot invoke org.evosuite.runtime.mock.java.lang.MockThrowable.setStackTrace on bean class 'class org.evosuite.runtime.mock.java.lang.MockThrowable' - java.lang.ClassCastException@3e571519 - had objects of type \""java.lang.String\"" but expected signature \""[Ljava.lang.StackTraceElement;\""
         //
         verifyException(""org.apache.commons.beanutils.PropertyUtilsBean"", e);
      }
  }"
177,"    public Map<String, String> describe(final Object bean)
            throws IllegalAccessException, InvocationTargetException,
            NoSuchMethodException {

        if (bean == null) {
        //            return (Collections.EMPTY_MAP);
            return (new java.util.HashMap<String, String>());
        }

        if (log.isDebugEnabled()) {
            log.debug(""Describing bean: "" + bean.getClass().getName());
        }

        final Map<String, String> description = new HashMap<String, String>();
        if (bean instanceof DynaBean) {
            final DynaProperty[] descriptors =
                ((DynaBean) bean).getDynaClass().getDynaProperties();
            for (DynaProperty descriptor : descriptors) {
                final String name = descriptor.getName();
                description.put(name, getProperty(bean, name));
            }
        } else {
            final PropertyDescriptor[] descriptors =
                getPropertyUtils().getPropertyDescriptors(bean);
            final Class<?> clazz = bean.getClass();
            for (PropertyDescriptor descriptor : descriptors) {
                final String name = descriptor.getName();
                if (getPropertyUtils().getReadMethod(clazz, descriptor) != null) {
                    description.put(name, getProperty(bean, name));
                }
            }
        }
        return (description);

    }","  public void test37()  throws Throwable  {
      ConvertUtilsBean convertUtilsBean0 = new ConvertUtilsBean();
      BeanUtilsBean beanUtilsBean0 = new BeanUtilsBean(convertUtilsBean0);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      beanUtilsBean0.describe(resultSet0);
  }"
178,"    public void copyProperty(final Object bean, String name, Object value)
        throws IllegalAccessException, InvocationTargetException {

        // Trace logging (if enabled)
        if (log.isTraceEnabled()) {
            final StringBuilder sb = new StringBuilder(""  copyProperty("");
            sb.append(bean);
            sb.append("", "");
            sb.append(name);
            sb.append("", "");
            if (value == null) {
                sb.append(""<NULL>"");
            } else if (value instanceof String) {
                sb.append((String) value);
            } else if (value instanceof String[]) {
                final String[] values = (String[]) value;
                sb.append('[');
                for (int i = 0; i < values.length; i++) {
                    if (i > 0) {
                        sb.append(',');
                    }
                    sb.append(values[i]);
                }
                sb.append(']');
            } else {
                sb.append(value.toString());
            }
            sb.append(')');
            log.trace(sb.toString());
        }

        // Resolve any nested expression to get the actual target bean
        Object target = bean;
        final Resolver resolver = getPropertyUtils().getResolver();
        while (resolver.hasNested(name)) {
            try {
                target = getPropertyUtils().getProperty(target, resolver.next(name));
                name = resolver.remove(name);
            } catch (final NoSuchMethodException e) {
                return; // Skip this property setter
            }
        }
        if (log.isTraceEnabled()) {
            log.trace(""    Target bean = "" + target);
            log.trace(""    Target name = "" + name);
        }

        // Declare local variables we will require
        final String propName = resolver.getProperty(name); // Simple name of target property
        Class<?> type = null;                         // Java type of target property
        final int index  = resolver.getIndex(name);         // Indexed subscript value (if any)
        final String key = resolver.getKey(name);           // Mapped key value (if any)

        // Calculate the target property type
        if (target instanceof DynaBean) {
            final DynaClass dynaClass = ((DynaBean) target).getDynaClass();
            final DynaProperty dynaProperty = dynaClass.getDynaProperty(propName);
            if (dynaProperty == null) {
                return; // Skip this property setter
            }
            type = dynaPropertyType(dynaProperty, value);
        } else {
            PropertyDescriptor descriptor = null;
            try {
                descriptor =
                    getPropertyUtils().getPropertyDescriptor(target, name);
                if (descriptor == null) {
                    return; // Skip this property setter
                }
            } catch (final NoSuchMethodException e) {
                return; // Skip this property setter
            }
            type = descriptor.getPropertyType();
            if (type == null) {
                // Most likely an indexed setter on a POJB only
                if (log.isTraceEnabled()) {
                    log.trace(""    target type for property '"" +
                              propName + ""' is null, so skipping ths setter"");
                }
                return;
            }
        }
        if (log.isTraceEnabled()) {
            log.trace(""    target propName="" + propName + "", type="" +
                      type + "", index="" + index + "", key="" + key);
        }

        // Convert the specified value to the required type and store it
        if (index >= 0) {                    // Destination must be indexed
            value = convertForCopy(value, type.getComponentType());
            try {
                getPropertyUtils().setIndexedProperty(target, propName,
                                                 index, value);
            } catch (final NoSuchMethodException e) {
                throw new InvocationTargetException
                    (e, ""Cannot set "" + propName);
            }
        } else if (key != null) {            // Destination must be mapped
            // Maps do not know what the preferred data type is,
            // so perform no conversions at all
            // FIXME - should we create or support a TypedMap?
            try {
                getPropertyUtils().setMappedProperty(target, propName,
                                                key, value);
            } catch (final NoSuchMethodException e) {
                throw new InvocationTargetException
                    (e, ""Cannot set "" + propName);
            }
        } else {                             // Destination must be simple
            value = convertForCopy(value, type);
            try {
                getPropertyUtils().setSimpleProperty(target, propName, value);
            } catch (final NoSuchMethodException e) {
                throw new InvocationTargetException
                    (e, ""Cannot set "" + propName);
            }
        }

    }","  public void test38()  throws Throwable  {
      PropertyUtilsBean propertyUtilsBean0 = new PropertyUtilsBean();
      BeanUtilsBean beanUtilsBean0 = new BeanUtilsBean((ConvertUtilsBean) null, propertyUtilsBean0);
      Class<LazyDynaBean> class0 = LazyDynaBean.class;
      beanUtilsBean0.copyProperty(class0, ""' has no mapped getter method on bean class '"", ""!XZ|uwT"");
  }"
179,"    public void copyProperty(final Object bean, String name, Object value)
        throws IllegalAccessException, InvocationTargetException {

        // Trace logging (if enabled)
        if (log.isTraceEnabled()) {
            final StringBuilder sb = new StringBuilder(""  copyProperty("");
            sb.append(bean);
            sb.append("", "");
            sb.append(name);
            sb.append("", "");
            if (value == null) {
                sb.append(""<NULL>"");
            } else if (value instanceof String) {
                sb.append((String) value);
            } else if (value instanceof String[]) {
                final String[] values = (String[]) value;
                sb.append('[');
                for (int i = 0; i < values.length; i++) {
                    if (i > 0) {
                        sb.append(',');
                    }
                    sb.append(values[i]);
                }
                sb.append(']');
            } else {
                sb.append(value.toString());
            }
            sb.append(')');
            log.trace(sb.toString());
        }

        // Resolve any nested expression to get the actual target bean
        Object target = bean;
        final Resolver resolver = getPropertyUtils().getResolver();
        while (resolver.hasNested(name)) {
            try {
                target = getPropertyUtils().getProperty(target, resolver.next(name));
                name = resolver.remove(name);
            } catch (final NoSuchMethodException e) {
                return; // Skip this property setter
            }
        }
        if (log.isTraceEnabled()) {
            log.trace(""    Target bean = "" + target);
            log.trace(""    Target name = "" + name);
        }

        // Declare local variables we will require
        final String propName = resolver.getProperty(name); // Simple name of target property
        Class<?> type = null;                         // Java type of target property
        final int index  = resolver.getIndex(name);         // Indexed subscript value (if any)
        final String key = resolver.getKey(name);           // Mapped key value (if any)

        // Calculate the target property type
        if (target instanceof DynaBean) {
            final DynaClass dynaClass = ((DynaBean) target).getDynaClass();
            final DynaProperty dynaProperty = dynaClass.getDynaProperty(propName);
            if (dynaProperty == null) {
                return; // Skip this property setter
            }
            type = dynaPropertyType(dynaProperty, value);
        } else {
            PropertyDescriptor descriptor = null;
            try {
                descriptor =
                    getPropertyUtils().getPropertyDescriptor(target, name);
                if (descriptor == null) {
                    return; // Skip this property setter
                }
            } catch (final NoSuchMethodException e) {
                return; // Skip this property setter
            }
            type = descriptor.getPropertyType();
            if (type == null) {
                // Most likely an indexed setter on a POJB only
                if (log.isTraceEnabled()) {
                    log.trace(""    target type for property '"" +
                              propName + ""' is null, so skipping ths setter"");
                }
                return;
            }
        }
        if (log.isTraceEnabled()) {
            log.trace(""    target propName="" + propName + "", type="" +
                      type + "", index="" + index + "", key="" + key);
        }

        // Convert the specified value to the required type and store it
        if (index >= 0) {                    // Destination must be indexed
            value = convertForCopy(value, type.getComponentType());
            try {
                getPropertyUtils().setIndexedProperty(target, propName,
                                                 index, value);
            } catch (final NoSuchMethodException e) {
                throw new InvocationTargetException
                    (e, ""Cannot set "" + propName);
            }
        } else if (key != null) {            // Destination must be mapped
            // Maps do not know what the preferred data type is,
            // so perform no conversions at all
            // FIXME - should we create or support a TypedMap?
            try {
                getPropertyUtils().setMappedProperty(target, propName,
                                                key, value);
            } catch (final NoSuchMethodException e) {
                throw new InvocationTargetException
                    (e, ""Cannot set "" + propName);
            }
        } else {                             // Destination must be simple
            value = convertForCopy(value, type);
            try {
                getPropertyUtils().setSimpleProperty(target, propName, value);
            } catch (final NoSuchMethodException e) {
                throw new InvocationTargetException
                    (e, ""Cannot set "" + propName);
            }
        }

    }","  public void test39()  throws Throwable  {
      ConvertUtilsBean convertUtilsBean0 = new ConvertUtilsBean();
      BeanUtilsBean beanUtilsBean0 = new BeanUtilsBean(convertUtilsBean0);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      ResultSetDynaClass resultSetDynaClass0 = new ResultSetDynaClass(resultSet0);
      ResultSetIterator resultSetIterator0 = new ResultSetIterator(resultSetDynaClass0);
      beanUtilsBean0.copyProperty(resultSetIterator0, """", ""L~.tQSoBIS?LMdq"");
  }"
180,"    public void copyProperties(final Object dest, final Object orig)
        throws IllegalAccessException, InvocationTargetException {

        // Validate existence of the specified beans
        if (dest == null) {
            throw new IllegalArgumentException
                    (""No destination bean specified"");
        }
        if (orig == null) {
            throw new IllegalArgumentException(""No origin bean specified"");
        }
        if (log.isDebugEnabled()) {
            log.debug(""BeanUtils.copyProperties("" + dest + "", "" +
                      orig + "")"");
        }

        // Copy the properties, converting as necessary
        if (orig instanceof DynaBean) {
            final DynaProperty[] origDescriptors =
                ((DynaBean) orig).getDynaClass().getDynaProperties();
            for (DynaProperty origDescriptor : origDescriptors) {
                final String name = origDescriptor.getName();
                // Need to check isReadable() for WrapDynaBean
                // (see Jira issue# BEANUTILS-61)
                if (getPropertyUtils().isReadable(orig, name) &&
                    getPropertyUtils().isWriteable(dest, name)) {
                    final Object value = ((DynaBean) orig).get(name);
                    copyProperty(dest, name, value);
                }
            }
        } else if (orig instanceof Map) {
            @SuppressWarnings(""unchecked"")
            final
            // Map properties are always of type <String, Object>
            Map<String, Object> propMap = (Map<String, Object>) orig;
            for (final Map.Entry<String, Object> entry : propMap.entrySet()) {
                final String name = entry.getKey();
                if (getPropertyUtils().isWriteable(dest, name)) {
                    copyProperty(dest, name, entry.getValue());
                }
            }
        } else /* if (orig is a standard JavaBean) */ {
            final PropertyDescriptor[] origDescriptors =
                getPropertyUtils().getPropertyDescriptors(orig);
            for (PropertyDescriptor origDescriptor : origDescriptors) {
                final String name = origDescriptor.getName();
                if (""class"".equals(name)) {
                    continue; // No point in trying to set an object's class
                }
                if (getPropertyUtils().isReadable(orig, name) &&
                    getPropertyUtils().isWriteable(dest, name)) {
                    try {
                        final Object value =
                            getPropertyUtils().getSimpleProperty(orig, name);
                        copyProperty(dest, name, value);
                    } catch (final NoSuchMethodException e) {
                        // Should not happen
                    }
                }
            }
        }

    }","  public void test40()  throws Throwable  {
      ConvertUtilsBean convertUtilsBean0 = new ConvertUtilsBean();
      BeanUtilsBean beanUtilsBean0 = new BeanUtilsBean(convertUtilsBean0);
      MockThrowable mockThrowable0 = new MockThrowable(""defaultInteger"");
      beanUtilsBean0.copyProperties(convertUtilsBean0, mockThrowable0);
}"
181,"    public void copyProperties(final Object dest, final Object orig)
        throws IllegalAccessException, InvocationTargetException {

        // Validate existence of the specified beans
        if (dest == null) {
            throw new IllegalArgumentException
                    (""No destination bean specified"");
        }
        if (orig == null) {
            throw new IllegalArgumentException(""No origin bean specified"");
        }
        if (log.isDebugEnabled()) {
            log.debug(""BeanUtils.copyProperties("" + dest + "", "" +
                      orig + "")"");
        }

        // Copy the properties, converting as necessary
        if (orig instanceof DynaBean) {
            final DynaProperty[] origDescriptors =
                ((DynaBean) orig).getDynaClass().getDynaProperties();
            for (DynaProperty origDescriptor : origDescriptors) {
                final String name = origDescriptor.getName();
                // Need to check isReadable() for WrapDynaBean
                // (see Jira issue# BEANUTILS-61)
                if (getPropertyUtils().isReadable(orig, name) &&
                    getPropertyUtils().isWriteable(dest, name)) {
                    final Object value = ((DynaBean) orig).get(name);
                    copyProperty(dest, name, value);
                }
            }
        } else if (orig instanceof Map) {
            @SuppressWarnings(""unchecked"")
            final
            // Map properties are always of type <String, Object>
            Map<String, Object> propMap = (Map<String, Object>) orig;
            for (final Map.Entry<String, Object> entry : propMap.entrySet()) {
                final String name = entry.getKey();
                if (getPropertyUtils().isWriteable(dest, name)) {
                    copyProperty(dest, name, entry.getValue());
                }
            }
        } else /* if (orig is a standard JavaBean) */ {
            final PropertyDescriptor[] origDescriptors =
                getPropertyUtils().getPropertyDescriptors(orig);
            for (PropertyDescriptor origDescriptor : origDescriptors) {
                final String name = origDescriptor.getName();
                if (""class"".equals(name)) {
                    continue; // No point in trying to set an object's class
                }
                if (getPropertyUtils().isReadable(orig, name) &&
                    getPropertyUtils().isWriteable(dest, name)) {
                    try {
                        final Object value =
                            getPropertyUtils().getSimpleProperty(orig, name);
                        copyProperty(dest, name, value);
                    } catch (final NoSuchMethodException e) {
                        // Should not happen
                    }
                }
            }
        }

    }","  public void test41()  throws Throwable  {
      ConvertUtilsBean convertUtilsBean0 = new ConvertUtilsBean();
      BeanUtilsBean beanUtilsBean0 = new BeanUtilsBean(convertUtilsBean0);
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      beanUtilsBean0.copyProperties(convertUtilsBean0, map0);
}"
182,"    public void copyProperties(final Object dest, final Object orig)
        throws IllegalAccessException, InvocationTargetException {

        // Validate existence of the specified beans
        if (dest == null) {
            throw new IllegalArgumentException
                    (""No destination bean specified"");
        }
        if (orig == null) {
            throw new IllegalArgumentException(""No origin bean specified"");
        }
        if (log.isDebugEnabled()) {
            log.debug(""BeanUtils.copyProperties("" + dest + "", "" +
                      orig + "")"");
        }

        // Copy the properties, converting as necessary
        if (orig instanceof DynaBean) {
            final DynaProperty[] origDescriptors =
                ((DynaBean) orig).getDynaClass().getDynaProperties();
            for (DynaProperty origDescriptor : origDescriptors) {
                final String name = origDescriptor.getName();
                // Need to check isReadable() for WrapDynaBean
                // (see Jira issue# BEANUTILS-61)
                if (getPropertyUtils().isReadable(orig, name) &&
                    getPropertyUtils().isWriteable(dest, name)) {
                    final Object value = ((DynaBean) orig).get(name);
                    copyProperty(dest, name, value);
                }
            }
        } else if (orig instanceof Map) {
            @SuppressWarnings(""unchecked"")
            final
            // Map properties are always of type <String, Object>
            Map<String, Object> propMap = (Map<String, Object>) orig;
            for (final Map.Entry<String, Object> entry : propMap.entrySet()) {
                final String name = entry.getKey();
                if (getPropertyUtils().isWriteable(dest, name)) {
                    copyProperty(dest, name, entry.getValue());
                }
            }
        } else /* if (orig is a standard JavaBean) */ {
            final PropertyDescriptor[] origDescriptors =
                getPropertyUtils().getPropertyDescriptors(orig);
            for (PropertyDescriptor origDescriptor : origDescriptors) {
                final String name = origDescriptor.getName();
                if (""class"".equals(name)) {
                    continue; // No point in trying to set an object's class
                }
                if (getPropertyUtils().isReadable(orig, name) &&
                    getPropertyUtils().isWriteable(dest, name)) {
                    try {
                        final Object value =
                            getPropertyUtils().getSimpleProperty(orig, name);
                        copyProperty(dest, name, value);
                    } catch (final NoSuchMethodException e) {
                        // Should not happen
                    }
                }
            }
        }

    }","  public void test42()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      BeanUtilsBean beanUtilsBean0 = new BeanUtilsBean();
      // Undeclared exception!
      try { 
        beanUtilsBean0.copyProperties(class0, (Object) null);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // No origin bean specified
         //
         verifyException(""org.apache.commons.beanutils.BeanUtilsBean"", e);
      }
  }"
183,"    public void copyProperties(final Object dest, final Object orig)
        throws IllegalAccessException, InvocationTargetException {

        // Validate existence of the specified beans
        if (dest == null) {
            throw new IllegalArgumentException
                    (""No destination bean specified"");
        }
        if (orig == null) {
            throw new IllegalArgumentException(""No origin bean specified"");
        }
        if (log.isDebugEnabled()) {
            log.debug(""BeanUtils.copyProperties("" + dest + "", "" +
                      orig + "")"");
        }

        // Copy the properties, converting as necessary
        if (orig instanceof DynaBean) {
            final DynaProperty[] origDescriptors =
                ((DynaBean) orig).getDynaClass().getDynaProperties();
            for (DynaProperty origDescriptor : origDescriptors) {
                final String name = origDescriptor.getName();
                // Need to check isReadable() for WrapDynaBean
                // (see Jira issue# BEANUTILS-61)
                if (getPropertyUtils().isReadable(orig, name) &&
                    getPropertyUtils().isWriteable(dest, name)) {
                    final Object value = ((DynaBean) orig).get(name);
                    copyProperty(dest, name, value);
                }
            }
        } else if (orig instanceof Map) {
            @SuppressWarnings(""unchecked"")
            final
            // Map properties are always of type <String, Object>
            Map<String, Object> propMap = (Map<String, Object>) orig;
            for (final Map.Entry<String, Object> entry : propMap.entrySet()) {
                final String name = entry.getKey();
                if (getPropertyUtils().isWriteable(dest, name)) {
                    copyProperty(dest, name, entry.getValue());
                }
            }
        } else /* if (orig is a standard JavaBean) */ {
            final PropertyDescriptor[] origDescriptors =
                getPropertyUtils().getPropertyDescriptors(orig);
            for (PropertyDescriptor origDescriptor : origDescriptors) {
                final String name = origDescriptor.getName();
                if (""class"".equals(name)) {
                    continue; // No point in trying to set an object's class
                }
                if (getPropertyUtils().isReadable(orig, name) &&
                    getPropertyUtils().isWriteable(dest, name)) {
                    try {
                        final Object value =
                            getPropertyUtils().getSimpleProperty(orig, name);
                        copyProperty(dest, name, value);
                    } catch (final NoSuchMethodException e) {
                        // Should not happen
                    }
                }
            }
        }

    }","  public void test43()  throws Throwable  {
      ConvertUtilsBean convertUtilsBean0 = new ConvertUtilsBean();
      BeanUtilsBean beanUtilsBean0 = new BeanUtilsBean(convertUtilsBean0);
      beanUtilsBean0.copyProperties(convertUtilsBean0, convertUtilsBean0);
}"
184,"    public Object cloneBean(final Object bean)
            throws IllegalAccessException, InstantiationException,
            InvocationTargetException, NoSuchMethodException {

        if (log.isDebugEnabled()) {
            log.debug(""Cloning bean: "" + bean.getClass().getName());
        }
        Object newBean = null;
        if (bean instanceof DynaBean) {
            newBean = ((DynaBean) bean).getDynaClass().newInstance();
        } else {
            newBean = bean.getClass().newInstance();
        }
        getPropertyUtils().copyProperties(newBean, bean);
        return (newBean);

    }","  public void test44()  throws Throwable  {
      ConvertUtilsBean convertUtilsBean0 = new ConvertUtilsBean();
      BeanUtilsBean beanUtilsBean0 = BeanUtilsBean.getInstance();
      Object object0 = beanUtilsBean0.cloneBean(convertUtilsBean0);
}"
185,"    public String getIndexedProperty(final Object bean, final String name)
            throws IllegalAccessException, InvocationTargetException,
            NoSuchMethodException {

        final Object value = getPropertyUtils().getIndexedProperty(bean, name);
        return (getConvertUtils().convert(value));

    }","  public void test45()  throws Throwable  {
      ConvertUtilsBean convertUtilsBean0 = new ConvertUtilsBean();
      Class<BasicDynaBean> class0 = BasicDynaBean.class;
      WrapDynaClass wrapDynaClass0 = WrapDynaClass.createDynaClass(class0);
      PropertyUtilsBean propertyUtilsBean0 = wrapDynaClass0.getPropertyUtilsBean();
      BeanUtilsBean beanUtilsBean0 = new BeanUtilsBean(convertUtilsBean0, propertyUtilsBean0);
      beanUtilsBean0.getConvertUtils();
      Map<String, Integer> map0 = null;
      propertyUtilsBean0.getPropertyType(convertUtilsBean0, """");
      beanUtilsBean0.populate(convertUtilsBean0, (Map<String, ?>) null);
      // Undeclared exception!
      try { 
        beanUtilsBean0.getIndexedProperty((Object) null, """", (-1587));
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // No bean specified
         //
         verifyException(""org.apache.commons.beanutils.PropertyUtilsBean"", e);
      }
  }"
186,"    public Map<String, String> describe(final Object bean)
            throws IllegalAccessException, InvocationTargetException,
            NoSuchMethodException {

        if (bean == null) {
        //            return (Collections.EMPTY_MAP);
            return (new java.util.HashMap<String, String>());
        }

        if (log.isDebugEnabled()) {
            log.debug(""Describing bean: "" + bean.getClass().getName());
        }

        final Map<String, String> description = new HashMap<String, String>();
        if (bean instanceof DynaBean) {
            final DynaProperty[] descriptors =
                ((DynaBean) bean).getDynaClass().getDynaProperties();
            for (DynaProperty descriptor : descriptors) {
                final String name = descriptor.getName();
                description.put(name, getProperty(bean, name));
            }
        } else {
            final PropertyDescriptor[] descriptors =
                getPropertyUtils().getPropertyDescriptors(bean);
            final Class<?> clazz = bean.getClass();
            for (PropertyDescriptor descriptor : descriptors) {
                final String name = descriptor.getName();
                if (getPropertyUtils().getReadMethod(clazz, descriptor) != null) {
                    description.put(name, getProperty(bean, name));
                }
            }
        }
        return (description);

    }","  public void test46()  throws Throwable  {
      ConvertUtilsBean convertUtilsBean0 = ConvertUtilsBean.getInstance();
      BeanUtilsBean beanUtilsBean0 = new BeanUtilsBean(convertUtilsBean0);
      Map<String, String> map0 = beanUtilsBean0.describe(convertUtilsBean0);
}"
187,"    public void copyProperties(final Object dest, final Object orig)
        throws IllegalAccessException, InvocationTargetException {

        // Validate existence of the specified beans
        if (dest == null) {
            throw new IllegalArgumentException
                    (""No destination bean specified"");
        }
        if (orig == null) {
            throw new IllegalArgumentException(""No origin bean specified"");
        }
        if (log.isDebugEnabled()) {
            log.debug(""BeanUtils.copyProperties("" + dest + "", "" +
                      orig + "")"");
        }

        // Copy the properties, converting as necessary
        if (orig instanceof DynaBean) {
            final DynaProperty[] origDescriptors =
                ((DynaBean) orig).getDynaClass().getDynaProperties();
            for (DynaProperty origDescriptor : origDescriptors) {
                final String name = origDescriptor.getName();
                // Need to check isReadable() for WrapDynaBean
                // (see Jira issue# BEANUTILS-61)
                if (getPropertyUtils().isReadable(orig, name) &&
                    getPropertyUtils().isWriteable(dest, name)) {
                    final Object value = ((DynaBean) orig).get(name);
                    copyProperty(dest, name, value);
                }
            }
        } else if (orig instanceof Map) {
            @SuppressWarnings(""unchecked"")
            final
            // Map properties are always of type <String, Object>
            Map<String, Object> propMap = (Map<String, Object>) orig;
            for (final Map.Entry<String, Object> entry : propMap.entrySet()) {
                final String name = entry.getKey();
                if (getPropertyUtils().isWriteable(dest, name)) {
                    copyProperty(dest, name, entry.getValue());
                }
            }
        } else /* if (orig is a standard JavaBean) */ {
            final PropertyDescriptor[] origDescriptors =
                getPropertyUtils().getPropertyDescriptors(orig);
            for (PropertyDescriptor origDescriptor : origDescriptors) {
                final String name = origDescriptor.getName();
                if (""class"".equals(name)) {
                    continue; // No point in trying to set an object's class
                }
                if (getPropertyUtils().isReadable(orig, name) &&
                    getPropertyUtils().isWriteable(dest, name)) {
                    try {
                        final Object value =
                            getPropertyUtils().getSimpleProperty(orig, name);
                        copyProperty(dest, name, value);
                    } catch (final NoSuchMethodException e) {
                        // Should not happen
                    }
                }
            }
        }

    }","  public void test47()  throws Throwable  {
      BeanUtilsBean beanUtilsBean0 = BeanUtilsBean.getInstance();
      // Undeclared exception!
      try { 
        beanUtilsBean0.copyProperties((Object) null, (Object) null);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // No destination bean specified
         //
         verifyException(""org.apache.commons.beanutils.BeanUtilsBean"", e);
      }
  }"
188,"    public void copyProperty(final Object bean, String name, Object value)
        throws IllegalAccessException, InvocationTargetException {

        // Trace logging (if enabled)
        if (log.isTraceEnabled()) {
            final StringBuilder sb = new StringBuilder(""  copyProperty("");
            sb.append(bean);
            sb.append("", "");
            sb.append(name);
            sb.append("", "");
            if (value == null) {
                sb.append(""<NULL>"");
            } else if (value instanceof String) {
                sb.append((String) value);
            } else if (value instanceof String[]) {
                final String[] values = (String[]) value;
                sb.append('[');
                for (int i = 0; i < values.length; i++) {
                    if (i > 0) {
                        sb.append(',');
                    }
                    sb.append(values[i]);
                }
                sb.append(']');
            } else {
                sb.append(value.toString());
            }
            sb.append(')');
            log.trace(sb.toString());
        }

        // Resolve any nested expression to get the actual target bean
        Object target = bean;
        final Resolver resolver = getPropertyUtils().getResolver();
        while (resolver.hasNested(name)) {
            try {
                target = getPropertyUtils().getProperty(target, resolver.next(name));
                name = resolver.remove(name);
            } catch (final NoSuchMethodException e) {
                return; // Skip this property setter
            }
        }
        if (log.isTraceEnabled()) {
            log.trace(""    Target bean = "" + target);
            log.trace(""    Target name = "" + name);
        }

        // Declare local variables we will require
        final String propName = resolver.getProperty(name); // Simple name of target property
        Class<?> type = null;                         // Java type of target property
        final int index  = resolver.getIndex(name);         // Indexed subscript value (if any)
        final String key = resolver.getKey(name);           // Mapped key value (if any)

        // Calculate the target property type
        if (target instanceof DynaBean) {
            final DynaClass dynaClass = ((DynaBean) target).getDynaClass();
            final DynaProperty dynaProperty = dynaClass.getDynaProperty(propName);
            if (dynaProperty == null) {
                return; // Skip this property setter
            }
            type = dynaPropertyType(dynaProperty, value);
        } else {
            PropertyDescriptor descriptor = null;
            try {
                descriptor =
                    getPropertyUtils().getPropertyDescriptor(target, name);
                if (descriptor == null) {
                    return; // Skip this property setter
                }
            } catch (final NoSuchMethodException e) {
                return; // Skip this property setter
            }
            type = descriptor.getPropertyType();
            if (type == null) {
                // Most likely an indexed setter on a POJB only
                if (log.isTraceEnabled()) {
                    log.trace(""    target type for property '"" +
                              propName + ""' is null, so skipping ths setter"");
                }
                return;
            }
        }
        if (log.isTraceEnabled()) {
            log.trace(""    target propName="" + propName + "", type="" +
                      type + "", index="" + index + "", key="" + key);
        }

        // Convert the specified value to the required type and store it
        if (index >= 0) {                    // Destination must be indexed
            value = convertForCopy(value, type.getComponentType());
            try {
                getPropertyUtils().setIndexedProperty(target, propName,
                                                 index, value);
            } catch (final NoSuchMethodException e) {
                throw new InvocationTargetException
                    (e, ""Cannot set "" + propName);
            }
        } else if (key != null) {            // Destination must be mapped
            // Maps do not know what the preferred data type is,
            // so perform no conversions at all
            // FIXME - should we create or support a TypedMap?
            try {
                getPropertyUtils().setMappedProperty(target, propName,
                                                key, value);
            } catch (final NoSuchMethodException e) {
                throw new InvocationTargetException
                    (e, ""Cannot set "" + propName);
            }
        } else {                             // Destination must be simple
            value = convertForCopy(value, type);
            try {
                getPropertyUtils().setSimpleProperty(target, propName, value);
            } catch (final NoSuchMethodException e) {
                throw new InvocationTargetException
                    (e, ""Cannot set "" + propName);
            }
        }

    }","  public void test48()  throws Throwable  {
      BeanUtilsBean beanUtilsBean0 = new BeanUtilsBean();
      beanUtilsBean0.copyProperty(""+*PZ}z.A"", ""+*PZ}z.A"", ""+*PZ}z.A"");
  }"
189,"    public boolean isIgnoreNull() {
        return ignoreNull;
    }","  public void test0()  throws Throwable  {
      BeanToPropertyValueTransformer beanToPropertyValueTransformer0 = new BeanToPropertyValueTransformer(""`_!"");
      boolean boolean0 = beanToPropertyValueTransformer0.isIgnoreNull();
}"
190,"    public BeanToPropertyValueTransformer(final String propertyName) {
        this(propertyName, false);
    }","  public void test1()  throws Throwable  {
      BeanToPropertyValueTransformer beanToPropertyValueTransformer0 = null;
      try {
        beanToPropertyValueTransformer0 = new BeanToPropertyValueTransformer((String) null, false);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // propertyName cannot be null or empty
         //
         verifyException(""org.apache.commons.beanutils.BeanToPropertyValueTransformer"", e);
      }
  }"
191,"    public BeanToPropertyValueTransformer(final String propertyName) {
        this(propertyName, false);
    }","  public void test2()  throws Throwable  {
      BeanToPropertyValueTransformer beanToPropertyValueTransformer0 = null;
      try {
        beanToPropertyValueTransformer0 = new BeanToPropertyValueTransformer("""", true);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // propertyName cannot be null or empty
         //
         verifyException(""org.apache.commons.beanutils.BeanToPropertyValueTransformer"", e);
      }
  }"
192,"    public Object transform(final Object object) {

        Object propertyValue = null;

        try {
            propertyValue = PropertyUtils.getProperty(object, propertyName);
        } catch (final IllegalArgumentException e) {
            final String errorMsg = ""Problem during transformation. Null value encountered in property path..."";

            if (ignoreNull) {
                log.warn(""WARNING: "" + errorMsg + e);
            } else {
                final IllegalArgumentException iae = new IllegalArgumentException(errorMsg);
                if (!BeanUtils.initCause(iae, e)) {
                    log.error(errorMsg, e);
                }
                throw iae;
            }
        } catch (final IllegalAccessException e) {
            final String errorMsg = ""Unable to access the property provided."";
            final IllegalArgumentException iae = new IllegalArgumentException(errorMsg);
            if (!BeanUtils.initCause(iae, e)) {
                log.error(errorMsg, e);
            }
            throw iae;
        } catch (final InvocationTargetException e) {
            final String errorMsg = ""Exception occurred in property's getter"";
            final IllegalArgumentException iae = new IllegalArgumentException(errorMsg);
            if (!BeanUtils.initCause(iae, e)) {
                log.error(errorMsg, e);
            }
            throw iae;
        } catch (final NoSuchMethodException e) {
            final String errorMsg = ""No property found for name ["" +
                propertyName + ""]"";
            final IllegalArgumentException iae = new IllegalArgumentException(errorMsg);
            if (!BeanUtils.initCause(iae, e)) {
                log.error(errorMsg, e);
            }
            throw iae;
        }

        return propertyValue;
    }","  public void test3()  throws Throwable  {
      BeanToPropertyValueTransformer beanToPropertyValueTransformer0 = new BeanToPropertyValueTransformer(""DcAtti"");
      // Undeclared exception!
      try { 
        beanToPropertyValueTransformer0.transform(""DcAtti"");
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // No property found for name [DcAtti]
         //
         verifyException(""org.apache.commons.beanutils.BeanToPropertyValueTransformer"", e);
      }
  }"
193,"    public Object transform(final Object object) {

        Object propertyValue = null;

        try {
            propertyValue = PropertyUtils.getProperty(object, propertyName);
        } catch (final IllegalArgumentException e) {
            final String errorMsg = ""Problem during transformation. Null value encountered in property path..."";

            if (ignoreNull) {
                log.warn(""WARNING: "" + errorMsg + e);
            } else {
                final IllegalArgumentException iae = new IllegalArgumentException(errorMsg);
                if (!BeanUtils.initCause(iae, e)) {
                    log.error(errorMsg, e);
                }
                throw iae;
            }
        } catch (final IllegalAccessException e) {
            final String errorMsg = ""Unable to access the property provided."";
            final IllegalArgumentException iae = new IllegalArgumentException(errorMsg);
            if (!BeanUtils.initCause(iae, e)) {
                log.error(errorMsg, e);
            }
            throw iae;
        } catch (final InvocationTargetException e) {
            final String errorMsg = ""Exception occurred in property's getter"";
            final IllegalArgumentException iae = new IllegalArgumentException(errorMsg);
            if (!BeanUtils.initCause(iae, e)) {
                log.error(errorMsg, e);
            }
            throw iae;
        } catch (final NoSuchMethodException e) {
            final String errorMsg = ""No property found for name ["" +
                propertyName + ""]"";
            final IllegalArgumentException iae = new IllegalArgumentException(errorMsg);
            if (!BeanUtils.initCause(iae, e)) {
                log.error(errorMsg, e);
            }
            throw iae;
        }

        return propertyValue;
    }","  public void test4()  throws Throwable  {
      BeanToPropertyValueTransformer beanToPropertyValueTransformer0 = new BeanToPropertyValueTransformer(""No propertyfoundfor name ["", true);
      Object object0 = beanToPropertyValueTransformer0.transform(""No propertyfoundfor name ["");
}"
194,"    public Object transform(final Object object) {

        Object propertyValue = null;

        try {
            propertyValue = PropertyUtils.getProperty(object, propertyName);
        } catch (final IllegalArgumentException e) {
            final String errorMsg = ""Problem during transformation. Null value encountered in property path..."";

            if (ignoreNull) {
                log.warn(""WARNING: "" + errorMsg + e);
            } else {
                final IllegalArgumentException iae = new IllegalArgumentException(errorMsg);
                if (!BeanUtils.initCause(iae, e)) {
                    log.error(errorMsg, e);
                }
                throw iae;
            }
        } catch (final IllegalAccessException e) {
            final String errorMsg = ""Unable to access the property provided."";
            final IllegalArgumentException iae = new IllegalArgumentException(errorMsg);
            if (!BeanUtils.initCause(iae, e)) {
                log.error(errorMsg, e);
            }
            throw iae;
        } catch (final InvocationTargetException e) {
            final String errorMsg = ""Exception occurred in property's getter"";
            final IllegalArgumentException iae = new IllegalArgumentException(errorMsg);
            if (!BeanUtils.initCause(iae, e)) {
                log.error(errorMsg, e);
            }
            throw iae;
        } catch (final NoSuchMethodException e) {
            final String errorMsg = ""No property found for name ["" +
                propertyName + ""]"";
            final IllegalArgumentException iae = new IllegalArgumentException(errorMsg);
            if (!BeanUtils.initCause(iae, e)) {
                log.error(errorMsg, e);
            }
            throw iae;
        }

        return propertyValue;
    }","  public void test5()  throws Throwable  {
      BeanToPropertyValueTransformer beanToPropertyValueTransformer0 = new BeanToPropertyValueTransformer(""No propertyfoundfor name ["", true);
      BeanToPropertyValueTransformer beanToPropertyValueTransformer1 = new BeanToPropertyValueTransformer(""No propertyfoundfor name ["");
      // Undeclared exception!
      try { 
        beanToPropertyValueTransformer1.transform(beanToPropertyValueTransformer0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Problem during transformation. Null value encountered in property path...
         //
         verifyException(""org.apache.commons.beanutils.BeanToPropertyValueTransformer"", e);
      }
  }"
195,"    public BeanToPropertyValueTransformer(final String propertyName) {
        this(propertyName, false);
    }","  public void test6()  throws Throwable  {
      BeanToPropertyValueTransformer beanToPropertyValueTransformer0 = null;
      try {
        beanToPropertyValueTransformer0 = new BeanToPropertyValueTransformer((String) null);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // propertyName cannot be null or empty
         //
         verifyException(""org.apache.commons.beanutils.BeanToPropertyValueTransformer"", e);
      }
  }"
196,"    public boolean isIgnoreNull() {
        return ignoreNull;
    }","  public void test7()  throws Throwable  {
      BeanToPropertyValueTransformer beanToPropertyValueTransformer0 = new BeanToPropertyValueTransformer(""No propertyfoundfor name ["", true);
      boolean boolean0 = beanToPropertyValueTransformer0.isIgnoreNull();
}"
197,"    public boolean isIgnoreNull() {
        return ignoreNull;
    }","  public void test8()  throws Throwable  {
      BeanToPropertyValueTransformer beanToPropertyValueTransformer0 = new BeanToPropertyValueTransformer(""No propertyfoundfor name ["", true);
      beanToPropertyValueTransformer0.getPropertyName();
}"
198,"    public String getName() {

        return (this.name);

    }","  public void test0()  throws Throwable  {
      Class<LazyDynaMap> class0 = LazyDynaMap.class;
      BasicDynaClass basicDynaClass0 = new BasicDynaClass((String) null, class0);
}"
199,"    public String getName() {

        return (this.name);

    }","  public void test1()  throws Throwable  {
      DynaProperty[] dynaPropertyArray0 = new DynaProperty[0];
      BasicDynaClass basicDynaClass0 = new BasicDynaClass(""TIH=ls"", (Class<?>) null, dynaPropertyArray0);
}"
200,"    public BasicDynaClass() {

        this(null, null, null);

    }","  public void test2()  throws Throwable  {
      Class<LazyDynaClass> class0 = LazyDynaClass.class;
      BasicDynaClass basicDynaClass0 = null;
      try {
        basicDynaClass0 = new BasicDynaClass((String) null, class0, (DynaProperty[]) null);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Class org.apache.commons.beanutils.LazyDynaClass does not implement DynaBean
         //
         verifyException(""org.apache.commons.beanutils.BasicDynaClass"", e);
      }
  }"
201,"    public String getName() {

        return (this.name);

    }","  public void test3()  throws Throwable  {
      BasicDynaClass basicDynaClass0 = new BasicDynaClass();
}"
202,"    public void set(final String name, final Object value) {

        final DynaProperty descriptor = getDynaProperty(name);
        if (value == null) {
            if (descriptor.getType().isPrimitive()) {
                throw new NullPointerException
                        (""Primitive value for '"" + name + ""'"");
            }
        } else if (!isAssignable(descriptor.getType(), value.getClass())) {
            throw new ConversionException
                    (""Cannot assign value of type '"" +
                    value.getClass().getName() +
                    ""' to property '"" + name + ""' of type '"" +
                    descriptor.getType().getName() + ""'"");
        }
        values.put(name, value);

    }","  public void test0()  throws Throwable  {
      BasicDynaBean basicDynaBean0 = new BasicDynaBean((DynaClass) null);
      // Undeclared exception!
      try { 
        basicDynaBean0.set(""Q)f-"", ""cUsS"", (Object) ""Q)f-"");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // No mapped value for 'Q)f-(cUsS)'
         //
         verifyException(""org.apache.commons.beanutils.BasicDynaBean"", e);
      }
  }"
203,"    public void remove(final String name, final String key) {

        final Object value = values.get(name);
        if (value == null) {
            throw new NullPointerException
                    (""No mapped value for '"" + name + ""("" + key + "")'"");
        } else if (value instanceof Map) {
            ((Map<?, ?>) value).remove(key);
        } else {
            throw new IllegalArgumentException
                    (""Non-mapped property for '"" + name + ""("" + key + "")'"");
        }

    }","  public void test1()  throws Throwable  {
      BasicDynaBean basicDynaBean0 = new BasicDynaBean((DynaClass) null);
      // Undeclared exception!
      try { 
        basicDynaBean0.remove(""No mapped value for '"", ""$:f2wK$'QZ&"");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // No mapped value for 'No mapped value for '($:f2wK$'QZ&)'
         //
         verifyException(""org.apache.commons.beanutils.BasicDynaBean"", e);
      }
  }"
204,"    public void set(final String name, final Object value) {

        final DynaProperty descriptor = getDynaProperty(name);
        if (value == null) {
            if (descriptor.getType().isPrimitive()) {
                throw new NullPointerException
                        (""Primitive value for '"" + name + ""'"");
            }
        } else if (!isAssignable(descriptor.getType(), value.getClass())) {
            throw new ConversionException
                    (""Cannot assign value of type '"" +
                    value.getClass().getName() +
                    ""' to property '"" + name + ""' of type '"" +
                    descriptor.getType().getName() + ""'"");
        }
        values.put(name, value);

    }","  public void test2()  throws Throwable  {
      Class<Character> class0 = Character.class;
      WrapDynaClass wrapDynaClass0 = WrapDynaClass.createDynaClass(class0);
      BasicDynaBean basicDynaBean0 = new BasicDynaBean(wrapDynaClass0);
      basicDynaBean0.values = null;
      // Undeclared exception!
      try { 
        basicDynaBean0.set(""Non-indexed property for '"", ""Non-indexed property for '"", (Object) basicDynaBean0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.beanutils.BasicDynaBean"", e);
      }
  }"
205,"    public void set(final String name, final Object value) {

        final DynaProperty descriptor = getDynaProperty(name);
        if (value == null) {
            if (descriptor.getType().isPrimitive()) {
                throw new NullPointerException
                        (""Primitive value for '"" + name + ""'"");
            }
        } else if (!isAssignable(descriptor.getType(), value.getClass())) {
            throw new ConversionException
                    (""Cannot assign value of type '"" +
                    value.getClass().getName() +
                    ""' to property '"" + name + ""' of type '"" +
                    descriptor.getType().getName() + ""'"");
        }
        values.put(name, value);

    }","  public void test3()  throws Throwable  {
      BasicDynaBean basicDynaBean0 = new BasicDynaBean((DynaClass) null);
      // Undeclared exception!
      try { 
        basicDynaBean0.set(""wb9aM"", (Object) ""wb9aM"");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.beanutils.BasicDynaBean"", e);
      }
  }"
206,"    public void set(final String name, final Object value) {

        final DynaProperty descriptor = getDynaProperty(name);
        if (value == null) {
            if (descriptor.getType().isPrimitive()) {
                throw new NullPointerException
                        (""Primitive value for '"" + name + ""'"");
            }
        } else if (!isAssignable(descriptor.getType(), value.getClass())) {
            throw new ConversionException
                    (""Cannot assign value of type '"" +
                    value.getClass().getName() +
                    ""' to property '"" + name + ""' of type '"" +
                    descriptor.getType().getName() + ""'"");
        }
        values.put(name, value);

    }","  public void test4()  throws Throwable  {
      BasicDynaBean basicDynaBean0 = new BasicDynaBean((DynaClass) null);
      basicDynaBean0.values = null;
      Float float0 = new Float((float) (-840));
      // Undeclared exception!
      try { 
        basicDynaBean0.set(""S'3pkTGCoxe6tk"", (-840), (Object) float0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.beanutils.BasicDynaBean"", e);
      }
  }"
207,"    public void remove(final String name, final String key) {

        final Object value = values.get(name);
        if (value == null) {
            throw new NullPointerException
                    (""No mapped value for '"" + name + ""("" + key + "")'"");
        } else if (value instanceof Map) {
            ((Map<?, ?>) value).remove(key);
        } else {
            throw new IllegalArgumentException
                    (""Non-mapped property for '"" + name + ""("" + key + "")'"");
        }

    }","  public void test5()  throws Throwable  {
      BasicDynaBean basicDynaBean0 = new BasicDynaBean((DynaClass) null);
      basicDynaBean0.values = null;
      // Undeclared exception!
      try { 
        basicDynaBean0.remove(""% lOs-"", ""v30Iri_y"");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.beanutils.BasicDynaBean"", e);
      }
  }"
208,"    protected boolean isAssignable(final Class<?> dest, final Class<?> source) {

        if (dest.isAssignableFrom(source) ||
                ((dest == Boolean.TYPE) && (source == Boolean.class)) ||
                ((dest == Byte.TYPE) && (source == Byte.class)) ||
                ((dest == Character.TYPE) && (source == Character.class)) ||
                ((dest == Double.TYPE) && (source == Double.class)) ||
                ((dest == Float.TYPE) && (source == Float.class)) ||
                ((dest == Integer.TYPE) && (source == Integer.class)) ||
                ((dest == Long.TYPE) && (source == Long.class)) ||
                ((dest == Short.TYPE) && (source == Short.class))) {
            return (true);
        } else {
            return (false);
        }

    }","  public void test6()  throws Throwable  {
      Class<Boolean> class0 = Boolean.TYPE;
      WrapDynaClass wrapDynaClass0 = WrapDynaClass.createDynaClass(class0);
      BasicDynaBean basicDynaBean0 = new BasicDynaBean(wrapDynaClass0);
      // Undeclared exception!
      try { 
        basicDynaBean0.isAssignable((Class<?>) null, (Class<?>) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.beanutils.BasicDynaBean"", e);
      }
  }"
209,"    protected DynaProperty getDynaProperty(final String name) {

        final DynaProperty descriptor = getDynaClass().getDynaProperty(name);
        if (descriptor == null) {
            throw new IllegalArgumentException
                    (""Invalid property name '"" + name + ""'"");
        }
        return (descriptor);

    }","  public void test7()  throws Throwable  {
      Class<Boolean> class0 = Boolean.TYPE;
      WrapDynaClass wrapDynaClass0 = WrapDynaClass.createDynaClass(class0);
      BasicDynaBean basicDynaBean0 = new BasicDynaBean(wrapDynaClass0);
      // Undeclared exception!
      try { 
        basicDynaBean0.getDynaProperty(""L"");
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Invalid property name 'L'
         //
         verifyException(""org.apache.commons.beanutils.BasicDynaBean"", e);
      }
  }"
210,"    public Object get(final String name) {

        // Return any non-null value for the specified property
        final Object value = values.get(name);
        if (value != null) {
            return (value);
        }

        // Return a null value for a non-primitive property
        final Class<?> type = getDynaProperty(name).getType();
        if (!type.isPrimitive()) {
            return (value);
        }

        // Manufacture default values for primitive properties
        if (type == Boolean.TYPE) {
            return (Boolean.FALSE);
        } else if (type == Byte.TYPE) {
            return (new Byte((byte) 0));
        } else if (type == Character.TYPE) {
            return (new Character((char) 0));
        } else if (type == Double.TYPE) {
            return (new Double(0.0));
        } else if (type == Float.TYPE) {
            return (new Float((float) 0.0));
        } else if (type == Integer.TYPE) {
            return (new Integer(0));
        } else if (type == Long.TYPE) {
            return (new Long(0));
        } else if (type == Short.TYPE) {
            return (new Short((short) 0));
        } else {
            return (null);
        }

    }","  public void test8()  throws Throwable  {
      BasicDynaBean basicDynaBean0 = new BasicDynaBean((DynaClass) null);
      basicDynaBean0.values = null;
      // Undeclared exception!
      try { 
        basicDynaBean0.get(""se3"", ""-CVteE4"");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.beanutils.BasicDynaBean"", e);
      }
  }"
211,"    public Object get(final String name) {

        // Return any non-null value for the specified property
        final Object value = values.get(name);
        if (value != null) {
            return (value);
        }

        // Return a null value for a non-primitive property
        final Class<?> type = getDynaProperty(name).getType();
        if (!type.isPrimitive()) {
            return (value);
        }

        // Manufacture default values for primitive properties
        if (type == Boolean.TYPE) {
            return (Boolean.FALSE);
        } else if (type == Byte.TYPE) {
            return (new Byte((byte) 0));
        } else if (type == Character.TYPE) {
            return (new Character((char) 0));
        } else if (type == Double.TYPE) {
            return (new Double(0.0));
        } else if (type == Float.TYPE) {
            return (new Float((float) 0.0));
        } else if (type == Integer.TYPE) {
            return (new Integer(0));
        } else if (type == Long.TYPE) {
            return (new Long(0));
        } else if (type == Short.TYPE) {
            return (new Short((short) 0));
        } else {
            return (null);
        }

    }","  public void test9()  throws Throwable  {
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      doReturn(false).when(resultSet0).next();
      RowSetDynaClass rowSetDynaClass0 = new RowSetDynaClass(resultSet0, true, (-1), true);
      BasicDynaBean basicDynaBean0 = new BasicDynaBean(rowSetDynaClass0);
      basicDynaBean0.values = null;
      // Undeclared exception!
      try { 
        basicDynaBean0.get(""s8t7;}5"", 79);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.beanutils.BasicDynaBean"", e);
      }
  }"
212,"    public Object get(final String name) {

        // Return any non-null value for the specified property
        final Object value = values.get(name);
        if (value != null) {
            return (value);
        }

        // Return a null value for a non-primitive property
        final Class<?> type = getDynaProperty(name).getType();
        if (!type.isPrimitive()) {
            return (value);
        }

        // Manufacture default values for primitive properties
        if (type == Boolean.TYPE) {
            return (Boolean.FALSE);
        } else if (type == Byte.TYPE) {
            return (new Byte((byte) 0));
        } else if (type == Character.TYPE) {
            return (new Character((char) 0));
        } else if (type == Double.TYPE) {
            return (new Double(0.0));
        } else if (type == Float.TYPE) {
            return (new Float((float) 0.0));
        } else if (type == Integer.TYPE) {
            return (new Integer(0));
        } else if (type == Long.TYPE) {
            return (new Long(0));
        } else if (type == Short.TYPE) {
            return (new Short((short) 0));
        } else {
            return (null);
        }

    }","  public void test10()  throws Throwable  {
      BasicDynaBean basicDynaBean0 = new BasicDynaBean((DynaClass) null);
      // Undeclared exception!
      try { 
        basicDynaBean0.get(""("");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.beanutils.BasicDynaBean"", e);
      }
  }"
213,"    public boolean contains(final String name, final String key) {

        final Object value = values.get(name);
        if (value == null) {
            throw new NullPointerException
                    (""No mapped value for '"" + name + ""("" + key + "")'"");
        } else if (value instanceof Map) {
            return (((Map<?, ?>) value).containsKey(key));
        } else {
            throw new IllegalArgumentException
                    (""Non-mapped property for '"" + name + ""("" + key + "")'"");
        }

    }","  public void test11()  throws Throwable  {
      BasicDynaBean basicDynaBean0 = new BasicDynaBean((DynaClass) null);
      basicDynaBean0.values = null;
      // Undeclared exception!
      try { 
        basicDynaBean0.contains("""", ""o~"");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.beanutils.BasicDynaBean"", e);
      }
  }"
214,"    public void set(final String name, final Object value) {

        final DynaProperty descriptor = getDynaProperty(name);
        if (value == null) {
            if (descriptor.getType().isPrimitive()) {
                throw new NullPointerException
                        (""Primitive value for '"" + name + ""'"");
            }
        } else if (!isAssignable(descriptor.getType(), value.getClass())) {
            throw new ConversionException
                    (""Cannot assign value of type '"" +
                    value.getClass().getName() +
                    ""' to property '"" + name + ""' of type '"" +
                    descriptor.getType().getName() + ""'"");
        }
        values.put(name, value);

    }","  public void test12()  throws Throwable  {
      BasicDynaBean basicDynaBean0 = new BasicDynaBean((DynaClass) null);
      Long long0 = new Long(1032);
      // Undeclared exception!
      try { 
        basicDynaBean0.set(""org.apache.commons.beanutils.BasicDynaBean"", 1032, (Object) long0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // No indexed value for 'org.apache.commons.beanutils.BasicDynaBean[1032]'
         //
         verifyException(""org.apache.commons.beanutils.BasicDynaBean"", e);
      }
  }"
215,"    public DynaClass getDynaClass() {

        return (this.dynaClass);

    }","  public void test13()  throws Throwable  {
      BasicDynaBean basicDynaBean0 = new BasicDynaBean((DynaClass) null);
      DynaClass dynaClass0 = basicDynaBean0.getDynaClass();
}"
216,"    protected boolean isAssignable(final Class<?> dest, final Class<?> source) {

        if (dest.isAssignableFrom(source) ||
                ((dest == Boolean.TYPE) && (source == Boolean.class)) ||
                ((dest == Byte.TYPE) && (source == Byte.class)) ||
                ((dest == Character.TYPE) && (source == Character.class)) ||
                ((dest == Double.TYPE) && (source == Double.class)) ||
                ((dest == Float.TYPE) && (source == Float.class)) ||
                ((dest == Integer.TYPE) && (source == Integer.class)) ||
                ((dest == Long.TYPE) && (source == Long.class)) ||
                ((dest == Short.TYPE) && (source == Short.class))) {
            return (true);
        } else {
            return (false);
        }

    }","  public void test14()  throws Throwable  {
      Class<Boolean> class0 = Boolean.TYPE;
      WrapDynaClass wrapDynaClass0 = WrapDynaClass.createDynaClass(class0);
      BasicDynaBean basicDynaBean0 = new BasicDynaBean(wrapDynaClass0);
      Class<Short> class1 = Short.TYPE;
      Class<Short> class2 = Short.class;
      boolean boolean0 = basicDynaBean0.isAssignable(class1, class2);
}"
217,"    protected boolean isAssignable(final Class<?> dest, final Class<?> source) {

        if (dest.isAssignableFrom(source) ||
                ((dest == Boolean.TYPE) && (source == Boolean.class)) ||
                ((dest == Byte.TYPE) && (source == Byte.class)) ||
                ((dest == Character.TYPE) && (source == Character.class)) ||
                ((dest == Double.TYPE) && (source == Double.class)) ||
                ((dest == Float.TYPE) && (source == Float.class)) ||
                ((dest == Integer.TYPE) && (source == Integer.class)) ||
                ((dest == Long.TYPE) && (source == Long.class)) ||
                ((dest == Short.TYPE) && (source == Short.class))) {
            return (true);
        } else {
            return (false);
        }

    }","  public void test15()  throws Throwable  {
      Class<Boolean> class0 = Boolean.TYPE;
      WrapDynaClass wrapDynaClass0 = WrapDynaClass.createDynaClass(class0);
      BasicDynaBean basicDynaBean0 = new BasicDynaBean(wrapDynaClass0);
      Class<Short> class1 = Short.TYPE;
      boolean boolean0 = basicDynaBean0.isAssignable(class0, class1);
}"
218,"    protected boolean isAssignable(final Class<?> dest, final Class<?> source) {

        if (dest.isAssignableFrom(source) ||
                ((dest == Boolean.TYPE) && (source == Boolean.class)) ||
                ((dest == Byte.TYPE) && (source == Byte.class)) ||
                ((dest == Character.TYPE) && (source == Character.class)) ||
                ((dest == Double.TYPE) && (source == Double.class)) ||
                ((dest == Float.TYPE) && (source == Float.class)) ||
                ((dest == Integer.TYPE) && (source == Integer.class)) ||
                ((dest == Long.TYPE) && (source == Long.class)) ||
                ((dest == Short.TYPE) && (source == Short.class))) {
            return (true);
        } else {
            return (false);
        }

    }","  public void test16()  throws Throwable  {
      Class<Boolean> class0 = Boolean.TYPE;
      WrapDynaClass wrapDynaClass0 = WrapDynaClass.createDynaClass(class0);
      BasicDynaBean basicDynaBean0 = new BasicDynaBean(wrapDynaClass0);
      Class<Short> class1 = Short.TYPE;
      boolean boolean0 = basicDynaBean0.isAssignable(class1, class0);
}"
219,"    protected boolean isAssignable(final Class<?> dest, final Class<?> source) {

        if (dest.isAssignableFrom(source) ||
                ((dest == Boolean.TYPE) && (source == Boolean.class)) ||
                ((dest == Byte.TYPE) && (source == Byte.class)) ||
                ((dest == Character.TYPE) && (source == Character.class)) ||
                ((dest == Double.TYPE) && (source == Double.class)) ||
                ((dest == Float.TYPE) && (source == Float.class)) ||
                ((dest == Integer.TYPE) && (source == Integer.class)) ||
                ((dest == Long.TYPE) && (source == Long.class)) ||
                ((dest == Short.TYPE) && (source == Short.class))) {
            return (true);
        } else {
            return (false);
        }

    }","  public void test17()  throws Throwable  {
      Class<Boolean> class0 = Boolean.TYPE;
      WrapDynaClass wrapDynaClass0 = WrapDynaClass.createDynaClass(class0);
      BasicDynaBean basicDynaBean0 = new BasicDynaBean(wrapDynaClass0);
      Class<Boolean> class1 = Boolean.class;
      boolean boolean0 = basicDynaBean0.isAssignable(class0, class1);
}"
220,"    public Object get(final String name) {

        // Return any non-null value for the specified property
        final Object value = values.get(name);
        if (value != null) {
            return (value);
        }

        // Return a null value for a non-primitive property
        final Class<?> type = getDynaProperty(name).getType();
        if (!type.isPrimitive()) {
            return (value);
        }

        // Manufacture default values for primitive properties
        if (type == Boolean.TYPE) {
            return (Boolean.FALSE);
        } else if (type == Byte.TYPE) {
            return (new Byte((byte) 0));
        } else if (type == Character.TYPE) {
            return (new Character((char) 0));
        } else if (type == Double.TYPE) {
            return (new Double(0.0));
        } else if (type == Float.TYPE) {
            return (new Float((float) 0.0));
        } else if (type == Integer.TYPE) {
            return (new Integer(0));
        } else if (type == Long.TYPE) {
            return (new Long(0));
        } else if (type == Short.TYPE) {
            return (new Short((short) 0));
        } else {
            return (null);
        }

    }","  public void test18()  throws Throwable  {
      BasicDynaBean basicDynaBean0 = new BasicDynaBean((DynaClass) null);
      // Undeclared exception!
      try { 
        basicDynaBean0.get(""}srwPt/33k27]"", ""}srwPt/33k27]"");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // No mapped value for '}srwPt/33k27](}srwPt/33k27])'
         //
         verifyException(""org.apache.commons.beanutils.BasicDynaBean"", e);
      }
  }"
221,"    public Object get(final String name) {

        // Return any non-null value for the specified property
        final Object value = values.get(name);
        if (value != null) {
            return (value);
        }

        // Return a null value for a non-primitive property
        final Class<?> type = getDynaProperty(name).getType();
        if (!type.isPrimitive()) {
            return (value);
        }

        // Manufacture default values for primitive properties
        if (type == Boolean.TYPE) {
            return (Boolean.FALSE);
        } else if (type == Byte.TYPE) {
            return (new Byte((byte) 0));
        } else if (type == Character.TYPE) {
            return (new Character((char) 0));
        } else if (type == Double.TYPE) {
            return (new Double(0.0));
        } else if (type == Float.TYPE) {
            return (new Float((float) 0.0));
        } else if (type == Integer.TYPE) {
            return (new Integer(0));
        } else if (type == Long.TYPE) {
            return (new Long(0));
        } else if (type == Short.TYPE) {
            return (new Short((short) 0));
        } else {
            return (null);
        }

    }","  public void test19()  throws Throwable  {
      Class<Object> class0 = Object.class;
      WrapDynaClass wrapDynaClass0 = WrapDynaClass.createDynaClass(class0);
      BasicDynaBean basicDynaBean0 = new BasicDynaBean(wrapDynaClass0);
      // Undeclared exception!
      try { 
        basicDynaBean0.get(""qo(;AYgjBbw~>N_Fb"", (-1884));
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // No indexed value for 'qo(;AYgjBbw~>N_Fb[-1884]'
         //
         verifyException(""org.apache.commons.beanutils.BasicDynaBean"", e);
      }
  }"
222,"    public boolean contains(final String name, final String key) {

        final Object value = values.get(name);
        if (value == null) {
            throw new NullPointerException
                    (""No mapped value for '"" + name + ""("" + key + "")'"");
        } else if (value instanceof Map) {
            return (((Map<?, ?>) value).containsKey(key));
        } else {
            throw new IllegalArgumentException
                    (""Non-mapped property for '"" + name + ""("" + key + "")'"");
        }

    }","  public void test20()  throws Throwable  {
      BasicDynaBean basicDynaBean0 = new BasicDynaBean((DynaClass) null);
      // Undeclared exception!
      try { 
        basicDynaBean0.contains(""K"", ""K"");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // No mapped value for 'K(K)'
         //
         verifyException(""org.apache.commons.beanutils.BasicDynaBean"", e);
      }
  }"
223,"    public Map<String, Object> getMap() {

        // cache the Map
        if (mapDecorator == null) {
            mapDecorator = new DynaBeanPropertyMapDecorator(this);
        }
        return mapDecorator;

    }","  public void test21()  throws Throwable  {
      BasicDynaBean basicDynaBean0 = new BasicDynaBean((DynaClass) null);
      Map<String, Object> map0 = basicDynaBean0.getMap();
      Map<String, Object> map1 = basicDynaBean0.getMap();
}"
224,"    protected DynaProperty getDynaProperty(final String name) {

        final DynaProperty descriptor = getDynaClass().getDynaProperty(name);
        if (descriptor == null) {
            throw new IllegalArgumentException
                    (""Invalid property name '"" + name + ""'"");
        }
        return (descriptor);

    }","  public void test22()  throws Throwable  {
      BasicDynaBean basicDynaBean0 = new BasicDynaBean((DynaClass) null);
      // Undeclared exception!
      try { 
        basicDynaBean0.getDynaProperty(""]'"");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.beanutils.BasicDynaBean"", e);
      }
  }"
225,"    public BeanMap() {
    }","  public void test0()  throws Throwable  {
      BeanMap beanMap0 = new BeanMap();
      BeanMap beanMap1 = new BeanMap((Object) null);
      ExceptionFactory exceptionFactory0 = (ExceptionFactory)ExceptionFactory.INSTANCE;
      FactoryTransformer factoryTransformer0 = new FactoryTransformer(exceptionFactory0);
      BeanMap.Entry beanMap_Entry0 = new BeanMap.Entry(beanMap1, beanMap1, factoryTransformer0);
      beanMap_Entry0.setValue(beanMap0);
  }"
226,"    public void putAllWriteable(final BeanMap map) {
        final Iterator<?> readableKeys = map.readMethods.keySet().iterator();
        while (readableKeys.hasNext()) {
            final Object key = readableKeys.next();
            if (getWriteMethod(key) != null) {
                this.put(key, map.get(key));
            }
        }
    }","  public void test1()  throws Throwable  {
      BeanMap beanMap0 = new BeanMap();
      BeanMap beanMap1 = new BeanMap(beanMap0);
      beanMap0.setBean(beanMap1);
      // Undeclared exception!
      try { 
        beanMap1.putAllWriteable(beanMap0);
        fail(""Expecting exception: ConcurrentModificationException"");
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.util.HashMap$HashIterator"", e);
      }
  }"
227,"    protected void reinitialise() {
        readMethods.clear();
        writeMethods.clear();
        types.clear();
        initialise();
    }","  public void test2()  throws Throwable  {
      BeanMap beanMap0 = new BeanMap();
      beanMap0.reinitialise();
  }"
228,"    protected void firePropertyChange( final Object key, final Object oldValue, final Object newValue ) {
    }","  public void test3()  throws Throwable  {
      BeanMap beanMap0 = new BeanMap();
      Set<Map.Entry<Object, Object>> set0 = (Set<Map.Entry<Object, Object>>)beanMap0.entrySet();
      beanMap0.firePropertyChange((Object) null, set0, (Object) null);
  }"
229,"    public boolean containsValue(final Object value) {
        // use default implementation
        return super.containsValue(value);
    }","  public void test4()  throws Throwable  {
      LinkedList<ConstantTransformer> linkedList0 = new LinkedList<ConstantTransformer>();
      BeanMap beanMap0 = new BeanMap(linkedList0);
      Class<ConstantTransformer>[] classArray0 = (Class<ConstantTransformer>[]) Array.newInstance(Class.class, 5);
      InstantiateTransformer instantiateTransformer0 = new InstantiateTransformer(classArray0, classArray0);
      beanMap0.containsValue(instantiateTransformer0);
  }"
230,"    public void clear() {
        if(bean == null) {
            return;
        }

        Class<? extends Object> beanClass = null;
        try {
            beanClass = bean.getClass();
            bean = beanClass.newInstance();
        }
        catch (final Exception e) {
            final UnsupportedOperationException uoe =
                new UnsupportedOperationException(""Could not create new instance of class: "" + beanClass);
            BeanUtils.initCause(uoe, e);
            throw uoe;
        }
    }","  public void test5()  throws Throwable  {
      BeanMap beanMap0 = new BeanMap();
      beanMap0.setBean("""");
      beanMap0.clear();
  }"
231,"    public int size() {
        return readMethods.size();
    }","  public void test6()  throws Throwable  {
      BeanMap beanMap0 = new BeanMap();
      BeanMap beanMap1 = new BeanMap(beanMap0);
      beanMap1.size();
  }"
232,"    public Object put(final Object name, final Object value) throws IllegalArgumentException, ClassCastException {
        if ( bean != null ) {
            final Object oldValue = get( name );
            final Method method = getWriteMethod( name );
            if ( method == null ) {
                throw new IllegalArgumentException( ""The bean of type: ""+
                        bean.getClass().getName() + "" has no property called: "" + name );
            }
            try {
                final Object[] arguments = createWriteMethodArguments( method, value );
                method.invoke( bean, arguments );

                final Object newValue = get( name );
                firePropertyChange( name, oldValue, newValue );
            }
            catch ( final InvocationTargetException e ) {
                final IllegalArgumentException iae = new IllegalArgumentException(e.getMessage());
                if (BeanUtils.initCause(iae, e) == false) {
                    logInfo(e);
                }
                throw iae;
            }
            catch ( final IllegalAccessException e ) {
                final IllegalArgumentException iae = new IllegalArgumentException(e.getMessage());
                if (BeanUtils.initCause(iae, e) == false) {
                    logInfo(e);
                }
                throw iae;
            }
            return oldValue;
        }
        return null;
    }","  public void test7()  throws Throwable  {
      BeanMap beanMap0 = new BeanMap();
      Object object0 = new Object();
      beanMap0.put((Object) null, object0);
  }"
233,"    public Object getBean() {
        return bean;
    }","  public void test8()  throws Throwable  {
      BeanMap beanMap0 = new BeanMap();
      Collection<Object> collection0 = beanMap0.values();
      beanMap0.setBean(collection0);
      beanMap0.getBean();
  }"
234,"    public boolean containsValue(final Object value) {
        // use default implementation
        return super.containsValue(value);
    }","  public void test9()  throws Throwable  {
      BeanMap beanMap0 = new BeanMap();
      BeanMap beanMap1 = new BeanMap(beanMap0);
      beanMap1.containsValue((Object) null);
  }"
235,"    public void putAllWriteable(final BeanMap map) {
        final Iterator<?> readableKeys = map.readMethods.keySet().iterator();
        while (readableKeys.hasNext()) {
            final Object key = readableKeys.next();
            if (getWriteMethod(key) != null) {
                this.put(key, map.get(key));
            }
        }
    }","  public void test10()  throws Throwable  {
      BeanMap beanMap0 = new BeanMap();
      // Undeclared exception!
      try { 
        beanMap0.putAllWriteable((BeanMap) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.beanutils.BeanMap"", e);
      }
  }"
236,"    public Object put(final Object name, final Object value) throws IllegalArgumentException, ClassCastException {
        if ( bean != null ) {
            final Object oldValue = get( name );
            final Method method = getWriteMethod( name );
            if ( method == null ) {
                throw new IllegalArgumentException( ""The bean of type: ""+
                        bean.getClass().getName() + "" has no property called: "" + name );
            }
            try {
                final Object[] arguments = createWriteMethodArguments( method, value );
                method.invoke( bean, arguments );

                final Object newValue = get( name );
                firePropertyChange( name, oldValue, newValue );
            }
            catch ( final InvocationTargetException e ) {
                final IllegalArgumentException iae = new IllegalArgumentException(e.getMessage());
                if (BeanUtils.initCause(iae, e) == false) {
                    logInfo(e);
                }
                throw iae;
            }
            catch ( final IllegalAccessException e ) {
                final IllegalArgumentException iae = new IllegalArgumentException(e.getMessage());
                if (BeanUtils.initCause(iae, e) == false) {
                    logInfo(e);
                }
                throw iae;
            }
            return oldValue;
        }
        return null;
    }","  public void test11()  throws Throwable  {
      Class<ExceptionTransformer>[] classArray0 = (Class<ExceptionTransformer>[]) Array.newInstance(Class.class, 5);
      InstantiateTransformer instantiateTransformer0 = new InstantiateTransformer(classArray0, classArray0);
      BeanMap beanMap0 = new BeanMap(instantiateTransformer0);
      try { 
        beanMap0.put(""fiqwv"", classArray0[0]);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // The bean of type: org.apache.commons.collections.functors.InstantiateTransformer has no property called: fiqwv
         //
         verifyException(""org.apache.commons.beanutils.BeanMap"", e);
      }
  }"
237,"    protected void logWarn(final Exception ex) {
        // Deliberately do not use LOG4J or Commons Logging to avoid dependencies
        System.out.println( ""WARN: Exception: "" + ex );
        ex.printStackTrace();
    }","  public void test12()  throws Throwable  {
      BeanMap beanMap0 = new BeanMap();
      // Undeclared exception!
      try { 
        beanMap0.logWarn((Exception) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.beanutils.BeanMap"", e);
      }
  }"
238,"    protected Object convertType( final Class<?> newType, final Object value )
        throws InstantiationException, IllegalAccessException, IllegalArgumentException, InvocationTargetException {

        // try call constructor
        final Class<?>[] types = { value.getClass() };
        try {
            final Constructor<?> constructor = newType.getConstructor( types );
            final Object[] arguments = { value };
            return constructor.newInstance( arguments );
        }
        catch ( final NoSuchMethodException e ) {
            // try using the transformers
            final Transformer transformer = getTypeTransformer( newType );
            if ( transformer != null ) {
                return transformer.transform( value );
            }
            return value;
        }
    }","  public void test13()  throws Throwable  {
      BeanMap beanMap0 = new BeanMap();
      Class<Integer> class0 = Integer.class;
      try { 
        beanMap0.convertType(class0, ""o"");
        fail(""Expecting exception: InvocationTargetException"");
      } catch(InvocationTargetException e) {
      }
  }"
239,"    protected Object convertType( final Class<?> newType, final Object value )
        throws InstantiationException, IllegalAccessException, IllegalArgumentException, InvocationTargetException {

        // try call constructor
        final Class<?>[] types = { value.getClass() };
        try {
            final Constructor<?> constructor = newType.getConstructor( types );
            final Object[] arguments = { value };
            return constructor.newInstance( arguments );
        }
        catch ( final NoSuchMethodException e ) {
            // try using the transformers
            final Transformer transformer = getTypeTransformer( newType );
            if ( transformer != null ) {
                return transformer.transform( value );
            }
            return value;
        }
    }","  public void test14()  throws Throwable  {
      Factory factory0 = ExceptionFactory.getInstance();
      FactoryTransformer factoryTransformer0 = new FactoryTransformer(factory0);
      BeanMap beanMap0 = new BeanMap(factoryTransformer0);
      Class<ClosureTransformer> class0 = ClosureTransformer.class;
      // Undeclared exception!
      try { 
        beanMap0.convertType(class0, (Object) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.beanutils.BeanMap"", e);
      }
  }"
240,"    public BeanMap() {
    }","  public void test15()  throws Throwable  {
      BeanMap beanMap0 = new BeanMap();
      Transformer transformer0 = NOPTransformer.getInstance();
      TransformerPredicate transformerPredicate0 = new TransformerPredicate(transformer0);
      PredicateTransformer predicateTransformer0 = new PredicateTransformer(transformerPredicate0);
      Object object0 = beanMap0.getOrDefault(predicateTransformer0, (Object) null);
}"
241,"    public int size() {
        return readMethods.size();
    }","  public void test16()  throws Throwable  {
      BeanMap beanMap0 = new BeanMap();
      BeanMap beanMap1 = new BeanMap(beanMap0);
      ConstantTransformer constantTransformer0 = new ConstantTransformer((Object) null);
      beanMap1.get(constantTransformer0);
}"
242,"    public Method getWriteMethod(final String name) {
        return writeMethods.get(name);
    }","  public void test17()  throws Throwable  {
      BeanMap beanMap0 = new BeanMap();
      ConstantTransformer constantTransformer0 = new ConstantTransformer(beanMap0);
      Method method0 = beanMap0.getWriteMethod((Object) constantTransformer0);
}"
243,"    protected Object[] createWriteMethodArguments( final Method method, Object value )
        throws IllegalAccessException, ClassCastException {
        try {
            if ( value != null ) {
                final Class<? extends Object>[] types = method.getParameterTypes();
                if ( types != null && types.length > 0 ) {
                    final Class<? extends Object> paramType = types[0];
                    if ( ! paramType.isAssignableFrom( value.getClass() ) ) {
                        value = convertType( paramType, value );
                    }
                }
            }
            final Object[] answer = { value };
            return answer;
        }
        catch ( final InvocationTargetException e ) {
            final IllegalArgumentException iae = new IllegalArgumentException(e.getMessage());
            if (BeanUtils.initCause(iae, e) == false) {
                logInfo(e);
            }
            throw iae;
        }
        catch ( final InstantiationException e ) {
            final IllegalArgumentException iae = new IllegalArgumentException(e.getMessage());
            if (BeanUtils.initCause(iae, e) == false) {
                logInfo(e);
            }
            BeanUtils.initCause(iae, e);
            throw iae;
        }
    }","  public void test18()  throws Throwable  {
      BeanMap beanMap0 = new BeanMap();
      Iterator<Map.Entry<Object, Object>> iterator0 = (Iterator<Map.Entry<Object, Object>>)beanMap0.entryIterator();
      // Undeclared exception!
      try { 
        beanMap0.createWriteMethodArguments((Method) null, iterator0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.beanutils.BeanMap"", e);
      }
  }"
244,"    public int size() {
        return readMethods.size();
    }","  public void test19()  throws Throwable  {
      BeanMap beanMap0 = new BeanMap();
      int int0 = beanMap0.size();
}"
245,"    public Object getBean() {
        return bean;
    }","  public void test20()  throws Throwable  {
      BeanMap beanMap0 = new BeanMap();
      Object object0 = beanMap0.getBean();
}"
246,"    public Iterator<String> keyIterator() {
        return readMethods.keySet().iterator();
    }","  public void test21()  throws Throwable  {
      BeanMap beanMap0 = new BeanMap();
      Iterator<String> iterator0 = beanMap0.keyIterator();
}"
247,"    public Method getReadMethod(final String name) {
        return readMethods.get(name);
    }","  public void test22()  throws Throwable  {
      BeanMap beanMap0 = new BeanMap();
      Method method0 = beanMap0.getReadMethod((Object) null);
}"
248,"    public int size() {
        return readMethods.size();
    }","  public void test23()  throws Throwable  {
      Class<BeanMap>[] classArray0 = (Class<BeanMap>[]) Array.newInstance(Class.class, 8);
      Class<BeanMap> class0 = BeanMap.class;
      InstantiateTransformer instantiateTransformer0 = new InstantiateTransformer(classArray0, classArray0);
      BeanMap beanMap0 = new BeanMap(instantiateTransformer0);
      Class<ChainedTransformer> class1 = ChainedTransformer.class;
      beanMap0.convertType(class1, class0);
}"
249,"    protected Object[] createWriteMethodArguments( final Method method, Object value )
        throws IllegalAccessException, ClassCastException {
        try {
            if ( value != null ) {
                final Class<? extends Object>[] types = method.getParameterTypes();
                if ( types != null && types.length > 0 ) {
                    final Class<? extends Object> paramType = types[0];
                    if ( ! paramType.isAssignableFrom( value.getClass() ) ) {
                        value = convertType( paramType, value );
                    }
                }
            }
            final Object[] answer = { value };
            return answer;
        }
        catch ( final InvocationTargetException e ) {
            final IllegalArgumentException iae = new IllegalArgumentException(e.getMessage());
            if (BeanUtils.initCause(iae, e) == false) {
                logInfo(e);
            }
            throw iae;
        }
        catch ( final InstantiationException e ) {
            final IllegalArgumentException iae = new IllegalArgumentException(e.getMessage());
            if (BeanUtils.initCause(iae, e) == false) {
                logInfo(e);
            }
            BeanUtils.initCause(iae, e);
            throw iae;
        }
    }","  public void test24()  throws Throwable  {
      BeanMap beanMap0 = new BeanMap();
      Object[] objectArray0 = beanMap0.createWriteMethodArguments((Method) null, (Object) null);
}"
250,"    public int size() {
        return readMethods.size();
    }","  public void test25()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable(""o"");
      BeanMap beanMap0 = new BeanMap(mockThrowable0);
}"
251,"    public int size() {
        return readMethods.size();
    }","  public void test26()  throws Throwable  {
      BeanMap beanMap0 = new BeanMap();
      beanMap0.clear();
}"
252,"    public void clear() {
        if(bean == null) {
            return;
        }

        Class<? extends Object> beanClass = null;
        try {
            beanClass = bean.getClass();
            bean = beanClass.newInstance();
        }
        catch (final Exception e) {
            final UnsupportedOperationException uoe =
                new UnsupportedOperationException(""Could not create new instance of class: "" + beanClass);
            BeanUtils.initCause(uoe, e);
            throw uoe;
        }
    }","  public void test27()  throws Throwable  {
      Predicate[] predicateArray0 = new Predicate[9];
      OnePredicate onePredicate0 = new OnePredicate(predicateArray0);
      PredicateTransformer predicateTransformer0 = new PredicateTransformer(onePredicate0);
      BeanMap beanMap0 = new BeanMap(predicateTransformer0);
      // Undeclared exception!
      try { 
        beanMap0.clear();
        fail(""Expecting exception: UnsupportedOperationException"");
      } catch(UnsupportedOperationException e) {
         //
         // Could not create new instance of class: class org.apache.commons.collections.functors.PredicateTransformer
         //
         verifyException(""org.apache.commons.beanutils.BeanMap"", e);
      }
  }"
253,"    public int size() {
        return readMethods.size();
    }","  public void test28()  throws Throwable  {
      BeanMap beanMap0 = new BeanMap();
      beanMap0.putAllWriteable(beanMap0);
}"
254,"    public Object clone() throws CloneNotSupportedException {
        final BeanMap newMap = (BeanMap)super.clone();

        if(bean == null) {
            // no bean, just an empty bean map at the moment.  return a newly
            // cloned and empty bean map.
            return newMap;
        }

        Object newBean = null;
        final Class<? extends Object> beanClass = bean.getClass(); // Cannot throw Exception
        try {
            newBean = beanClass.newInstance();
        } catch (final Exception e) {
            // unable to instantiate
            final CloneNotSupportedException cnse = new CloneNotSupportedException
                (""Unable to instantiate the underlying bean \"""" +
                 beanClass.getName() + ""\"": "" + e);
            BeanUtils.initCause(cnse, e);
            throw cnse;
        }

        try {
            newMap.setBean(newBean);
        } catch (final Exception exception) {
            final CloneNotSupportedException cnse = new CloneNotSupportedException
                (""Unable to set bean in the cloned bean map: "" +
                 exception);
            BeanUtils.initCause(cnse, exception);
            throw cnse;
        }

        try {
            // copy only properties that are readable and writable.  If its
            // not readable, we can't get the value from the old map.  If
            // its not writable, we can't write a value into the new map.
            final Iterator<?> readableKeys = readMethods.keySet().iterator();
            while(readableKeys.hasNext()) {
                final Object key = readableKeys.next();
                if(getWriteMethod(key) != null) {
                    newMap.put(key, get(key));
                }
            }
        } catch (final Exception exception) {
            final CloneNotSupportedException cnse = new CloneNotSupportedException
                (""Unable to copy bean values to cloned bean map: "" +
                 exception);
            BeanUtils.initCause(cnse, exception);
            throw cnse;
        }

        return newMap;
    }","  public void test29()  throws Throwable  {
      BeanMap beanMap0 = new BeanMap();
      Object object0 = beanMap0.clone();
}"
255,"    public Object clone() throws CloneNotSupportedException {
        final BeanMap newMap = (BeanMap)super.clone();

        if(bean == null) {
            // no bean, just an empty bean map at the moment.  return a newly
            // cloned and empty bean map.
            return newMap;
        }

        Object newBean = null;
        final Class<? extends Object> beanClass = bean.getClass(); // Cannot throw Exception
        try {
            newBean = beanClass.newInstance();
        } catch (final Exception e) {
            // unable to instantiate
            final CloneNotSupportedException cnse = new CloneNotSupportedException
                (""Unable to instantiate the underlying bean \"""" +
                 beanClass.getName() + ""\"": "" + e);
            BeanUtils.initCause(cnse, e);
            throw cnse;
        }

        try {
            newMap.setBean(newBean);
        } catch (final Exception exception) {
            final CloneNotSupportedException cnse = new CloneNotSupportedException
                (""Unable to set bean in the cloned bean map: "" +
                 exception);
            BeanUtils.initCause(cnse, exception);
            throw cnse;
        }

        try {
            // copy only properties that are readable and writable.  If its
            // not readable, we can't get the value from the old map.  If
            // its not writable, we can't write a value into the new map.
            final Iterator<?> readableKeys = readMethods.keySet().iterator();
            while(readableKeys.hasNext()) {
                final Object key = readableKeys.next();
                if(getWriteMethod(key) != null) {
                    newMap.put(key, get(key));
                }
            }
        } catch (final Exception exception) {
            final CloneNotSupportedException cnse = new CloneNotSupportedException
                (""Unable to copy bean values to cloned bean map: "" +
                 exception);
            BeanUtils.initCause(cnse, exception);
            throw cnse;
        }

        return newMap;
    }","  public void test30()  throws Throwable  {
      Class<BeanMap>[] classArray0 = (Class<BeanMap>[]) Array.newInstance(Class.class, 8);
      InstantiateTransformer instantiateTransformer0 = new InstantiateTransformer(classArray0, classArray0);
      BeanMap beanMap0 = new BeanMap(instantiateTransformer0);
      try { 
        beanMap0.clone();
        fail(""Expecting exception: CloneNotSupportedException"");
      } catch(CloneNotSupportedException e) {
         //
         // Unable to instantiate the underlying bean \""org.apache.commons.collections.functors.InstantiateTransformer\"": java.lang.IllegalAccessException: Class org.apache.commons.beanutils.BeanMap can not access a member of class org.apache.commons.collections.functors.InstantiateTransformer with modifiers \""private\""
         //
         verifyException(""org.apache.commons.beanutils.BeanMap"", e);
      }
  }"
256,"    public Set<Map.Entry<Object, Object>> entrySet() {
        return Collections.unmodifiableSet(new AbstractSet<Map.Entry<Object, Object>>() {
            @Override
            public Iterator<Map.Entry<Object, Object>> iterator() {
                return entryIterator();
            }
            @Override
            public int size() {
              return BeanMap.this.readMethods.size();
            }
        });
    }","  public void test31()  throws Throwable  {
      BeanMap beanMap0 = new BeanMap();
      Set<Map.Entry<Object, Object>> set0 = (Set<Map.Entry<Object, Object>>)beanMap0.entrySet();
      Predicate predicate0 = NonePredicate.getInstance((Collection) set0);
}"
257,"    public int size() {
        return readMethods.size();
    }","  public void test32()  throws Throwable  {
      BeanMap beanMap0 = new BeanMap();
      beanMap0.putAll(BeanMap.defaultTransformers);
}"
258,"    protected Transformer getTypeTransformer( final Class<?> aType ) {
        return typeTransformers.get( aType );
    }","  public void test33()  throws Throwable  {
      BeanMap beanMap0 = new BeanMap();
      Class<ExceptionTransformer> class0 = ExceptionTransformer.class;
      Transformer transformer0 = beanMap0.getTypeTransformer(class0);
}"
259,"    public int size() {
        return readMethods.size();
    }","  public void test34()  throws Throwable  {
      Class<BeanMap>[] classArray0 = (Class<BeanMap>[]) Array.newInstance(Class.class, 8);
      InstantiateTransformer instantiateTransformer0 = new InstantiateTransformer(classArray0, classArray0);
      BeanMap beanMap0 = new BeanMap(instantiateTransformer0);
      beanMap0.values();
}"
260,"    public int size() {
        return readMethods.size();
    }","  public void test35()  throws Throwable  {
      BeanMap beanMap0 = new BeanMap();
      MockThrowable mockThrowable0 = new MockThrowable(""o"");
      MockException mockException0 = new MockException(mockThrowable0);
      beanMap0.logWarn(mockException0);
}"
261,"    public int size() {
        return readMethods.size();
    }","  public void test36()  throws Throwable  {
      BeanMap beanMap0 = new BeanMap();
      beanMap0.setBean(beanMap0);
      boolean boolean0 = beanMap0.containsKey(beanMap0);
}"
262,"    public boolean containsKey(final Object name) {
        final Method method = getReadMethod(name);
        return method != null;
    }","  public void test37()  throws Throwable  {
      BeanMap beanMap0 = new BeanMap();
      beanMap0.setBean(beanMap0);
      boolean boolean0 = beanMap0.containsKey(beanMap0);
}"
263,"    public Class<?> getType(final String name) {
        return types.get( name );
    }","  public void test38()  throws Throwable  {
      BeanMap beanMap0 = new BeanMap();
      Class<?> class0 = beanMap0.getType((String) null);
}"
264,"    public int size() {
        return readMethods.size();
    }","  public void test39()  throws Throwable  {
      BeanMap beanMap0 = new BeanMap();
      Set<Object> set0 = beanMap0.keySet();
}"
265,"    public int size() {
        return readMethods.size();
    }","  public void test40()  throws Throwable  {
      BeanMap beanMap0 = new BeanMap();
      MockThrowable mockThrowable0 = new MockThrowable(""o"");
      MockException mockException0 = new MockException(mockThrowable0);
      beanMap0.logInfo(mockException0);
}"
266,"    public String toString() {
        return ""BeanMap<"" + String.valueOf(bean) + "">"";
    }","  public void test41()  throws Throwable  {
      BeanMap beanMap0 = new BeanMap();
      String string0 = beanMap0.toString();
}"
267,"    public Method getReadMethod(final String name) {
        return readMethods.get(name);
    }","  public void test42()  throws Throwable  {
      BeanMap beanMap0 = new BeanMap();
      Method method0 = beanMap0.getReadMethod(""BO4Ib0JtVziaN2"");
}"
268,"    public Method getWriteMethod(final String name) {
        return writeMethods.get(name);
    }","  public void test43()  throws Throwable  {
      BeanMap beanMap0 = new BeanMap();
      Method method0 = beanMap0.getWriteMethod(""o-;$A"");
}"
269,"    public boolean containsValue(final Object value) {
        // use default implementation
        return super.containsValue(value);
    }","  public void test44()  throws Throwable  {
      BeanMap beanMap0 = new BeanMap();
      Iterator<Object> iterator0 = beanMap0.valueIterator();
      boolean boolean0 = beanMap0.containsValue(iterator0);
}"
270,"    public boolean getFast() {
        return (this.fast);
    }","  public void test0()  throws Throwable  {
      WeakFastHashMap<String, Object> weakFastHashMap0 = new WeakFastHashMap<String, Object>(2268);
      WeakFastHashMap<Integer, AbstractMap.SimpleImmutableEntry<String, String>> weakFastHashMap1 = new WeakFastHashMap<Integer, AbstractMap.SimpleImmutableEntry<String, String>>(2268);
      Integer integer0 = new Integer(2268);
      AbstractMap.SimpleImmutableEntry<String, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, String>(""org.apache.commons.beanutils.WeakFastHashMap$EntrySet"", ""org.apache.commons.beanutils.WeakFastHashMap$EntrySet"");
      weakFastHashMap1.put(integer0, abstractMap_SimpleImmutableEntry0);
      weakFastHashMap1.setFast(true);
      boolean boolean0 = weakFastHashMap1.equals(weakFastHashMap0);
}"
271,"    public boolean getFast() {
        return (this.fast);
    }","  public void test1()  throws Throwable  {
      WeakFastHashMap<String, Object> weakFastHashMap0 = new WeakFastHashMap<String, Object>(2268);
      WeakFastHashMap<Integer, AbstractMap.SimpleImmutableEntry<String, String>> weakFastHashMap1 = new WeakFastHashMap<Integer, AbstractMap.SimpleImmutableEntry<String, String>>(2268);
      Integer integer0 = new Integer(2268);
      AbstractMap.SimpleImmutableEntry<String, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, String>(""org.apache.commons.beanutils.WeakFastHashMap$EntrySet"", ""org.apache.commons.beanutils.WeakFastHashMap$EntrySet"");
      weakFastHashMap1.put(integer0, abstractMap_SimpleImmutableEntry0);
      weakFastHashMap1.setFast(true);
      boolean boolean0 = weakFastHashMap1.equals(weakFastHashMap0);
}"
272,"    public boolean equals(final Object o) {
        // Simple tests that require no synchronization
        if (o == this) {
            return (true);
        } else if (!(o instanceof Map)) {
            return (false);
        }
        final Map<?, ?> mo = (Map<?, ?>) o;

        // Compare the two maps for equality
        if (fast) {
            if (mo.size() != map.size()) {
                return (false);
            }
            for (final Map.Entry<K, V> e : map.entrySet()) {
                final K key = e.getKey();
                final V value = e.getValue();
                if (value == null) {
                    if (!(mo.get(key) == null && mo.containsKey(key))) {
                        return (false);
                    }
                } else {
                    if (!value.equals(mo.get(key))) {
                        return (false);
                    }
                }
            }
            return (true);

        } else {
            synchronized (map) {
                if (mo.size() != map.size()) {
                    return (false);
                }
                for (final Map.Entry<K, V> e : map.entrySet()) {
                    final K key = e.getKey();
                    final V value = e.getValue();
                    if (value == null) {
                        if (!(mo.get(key) == null && mo.containsKey(key))) {
                            return (false);
                        }
                    } else {
                        if (!value.equals(mo.get(key))) {
                            return (false);
                        }
                    }
                }
                return (true);
            }
        }
    }","  public void test2()  throws Throwable  {
      WeakFastHashMap<String, Object> weakFastHashMap0 = new WeakFastHashMap<String, Object>(2268);
      WeakFastHashMap<Integer, AbstractMap.SimpleImmutableEntry<String, String>> weakFastHashMap1 = new WeakFastHashMap<Integer, AbstractMap.SimpleImmutableEntry<String, String>>(2268);
      Integer integer0 = new Integer(2268);
      AbstractMap.SimpleImmutableEntry<String, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, String>(""org.apache.commons.beanutils.WeakFastHashMap$EntrySet"", ""org.apache.commons.beanutils.WeakFastHashMap$EntrySet"");
      weakFastHashMap1.put(integer0, abstractMap_SimpleImmutableEntry0);
      weakFastHashMap1.setFast(true);
      boolean boolean0 = weakFastHashMap1.equals(weakFastHashMap0);
}"
273,"    public boolean getFast() {
        return (this.fast);
    }","  public void test3()  throws Throwable  {
      WeakFastHashMap<Integer, Integer> weakFastHashMap0 = new WeakFastHashMap<Integer, Integer>();
      weakFastHashMap0.createMap(weakFastHashMap0);
}"
274,"    public boolean getFast() {
        return (this.fast);
    }","  public void test4()  throws Throwable  {
      WeakFastHashMap<AbstractMap.SimpleEntry<Object, String>, Integer> weakFastHashMap0 = new WeakFastHashMap<AbstractMap.SimpleEntry<Object, String>, Integer>(4128, 945.96277F);
      weakFastHashMap0.createMap(0, 4128);
}"
275,"    public boolean getFast() {
        return (this.fast);
    }","  public void test5()  throws Throwable  {
      WeakFastHashMap<AbstractMap.SimpleImmutableEntry<String, String>, Object> weakFastHashMap0 = new WeakFastHashMap<AbstractMap.SimpleImmutableEntry<String, String>, Object>(0);
      weakFastHashMap0.createMap(0);
}"
276,"    public boolean getFast() {
        return (this.fast);
    }","  public void test6()  throws Throwable  {
      WeakFastHashMap<Integer, Integer> weakFastHashMap0 = new WeakFastHashMap<Integer, Integer>();
      weakFastHashMap0.cloneMap(weakFastHashMap0);
}"
277,"    public boolean getFast() {
        return (this.fast);
    }","  public void test7()  throws Throwable  {
      WeakFastHashMap<HashMap<String, Object>, AbstractMap.SimpleEntry<String, String>> weakFastHashMap0 = new WeakFastHashMap<HashMap<String, Object>, AbstractMap.SimpleEntry<String, String>>();
      weakFastHashMap0.createMap();
}"
278,"    public boolean getFast() {
        return (this.fast);
    }","  public void test8()  throws Throwable  {
      WeakFastHashMap<Object, AbstractMap.SimpleEntry<String, Object>> weakFastHashMap0 = new WeakFastHashMap<Object, AbstractMap.SimpleEntry<String, Object>>(4635);
      weakFastHashMap0.clear();
}"
279,"    public boolean getFast() {
        return (this.fast);
    }","  public void test9()  throws Throwable  {
      WeakFastHashMap<Object, Integer> weakFastHashMap0 = new WeakFastHashMap<Object, Integer>();
      WeakFastHashMap<AbstractMap.SimpleImmutableEntry<Object, Object>, Object> weakFastHashMap1 = new WeakFastHashMap<AbstractMap.SimpleImmutableEntry<Object, Object>, Object>(2061);
      WeakFastHashMap weakFastHashMap2 = (WeakFastHashMap)weakFastHashMap1.clone();
      Integer integer0 = new Integer(3002);
      BiFunction<Object, Integer, Integer> biFunction0 = (BiFunction<Object, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn(integer0).when(biFunction0).apply(any() , anyInt());
      weakFastHashMap0.compute(weakFastHashMap2, biFunction0);
}"
280,"    public boolean getFast() {
        return (this.fast);
    }","  public void test10()  throws Throwable  {
      WeakFastHashMap<Object, Integer> weakFastHashMap0 = new WeakFastHashMap<Object, Integer>();
      WeakFastHashMap<AbstractMap.SimpleImmutableEntry<Object, Object>, Object> weakFastHashMap1 = new WeakFastHashMap<AbstractMap.SimpleImmutableEntry<Object, Object>, Object>(2061);
      WeakFastHashMap weakFastHashMap2 = (WeakFastHashMap)weakFastHashMap1.clone();
      Integer integer0 = new Integer(3002);
      BiFunction<Object, Integer, Integer> biFunction0 = (BiFunction<Object, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn(integer0).when(biFunction0).apply(any() , anyInt());
      weakFastHashMap0.compute(weakFastHashMap2, biFunction0);
}"
281,"    public boolean getFast() {
        return (this.fast);
    }","  public void test11()  throws Throwable  {
      WeakFastHashMap<Integer, Object> weakFastHashMap0 = new WeakFastHashMap<Integer, Object>();
      boolean boolean0 = weakFastHashMap0.equals(weakFastHashMap0);
}"
282,"    public boolean equals(final Object o) {
        // Simple tests that require no synchronization
        if (o == this) {
            return (true);
        } else if (!(o instanceof Map)) {
            return (false);
        }
        final Map<?, ?> mo = (Map<?, ?>) o;

        // Compare the two maps for equality
        if (fast) {
            if (mo.size() != map.size()) {
                return (false);
            }
            for (final Map.Entry<K, V> e : map.entrySet()) {
                final K key = e.getKey();
                final V value = e.getValue();
                if (value == null) {
                    if (!(mo.get(key) == null && mo.containsKey(key))) {
                        return (false);
                    }
                } else {
                    if (!value.equals(mo.get(key))) {
                        return (false);
                    }
                }
            }
            return (true);

        } else {
            synchronized (map) {
                if (mo.size() != map.size()) {
                    return (false);
                }
                for (final Map.Entry<K, V> e : map.entrySet()) {
                    final K key = e.getKey();
                    final V value = e.getValue();
                    if (value == null) {
                        if (!(mo.get(key) == null && mo.containsKey(key))) {
                            return (false);
                        }
                    } else {
                        if (!value.equals(mo.get(key))) {
                            return (false);
                        }
                    }
                }
                return (true);
            }
        }
    }","  public void test12()  throws Throwable  {
      WeakFastHashMap<Integer, Object> weakFastHashMap0 = new WeakFastHashMap<Integer, Object>();
      boolean boolean0 = weakFastHashMap0.equals(weakFastHashMap0);
}"
283,"    public boolean getFast() {
        return (this.fast);
    }","  public void test13()  throws Throwable  {
      WeakFastHashMap<HashMap<Object, Object>, String> weakFastHashMap0 = new WeakFastHashMap<HashMap<Object, Object>, String>(0);
      Set<HashMap<Object, Object>> set0 = weakFastHashMap0.keySet();
      HashMap<Object, Integer> hashMap0 = new HashMap<Object, Integer>();
      WeakFastHashMap<Object, Integer> weakFastHashMap1 = new WeakFastHashMap<Object, Integer>(hashMap0);
      WeakFastHashMap<Object, Object> weakFastHashMap2 = new WeakFastHashMap<Object, Object>(0);
      weakFastHashMap2.put(set0, weakFastHashMap1);
}"
284,"    public boolean getFast() {
        return (this.fast);
    }","  public void test14()  throws Throwable  {
      WeakFastHashMap<HashMap<Object, Object>, String> weakFastHashMap0 = new WeakFastHashMap<HashMap<Object, Object>, String>(0);
      Set<HashMap<Object, Object>> set0 = weakFastHashMap0.keySet();
      HashMap<Object, Integer> hashMap0 = new HashMap<Object, Integer>();
      WeakFastHashMap<Object, Integer> weakFastHashMap1 = new WeakFastHashMap<Object, Integer>(hashMap0);
      WeakFastHashMap<Object, Object> weakFastHashMap2 = new WeakFastHashMap<Object, Object>(0);
      weakFastHashMap2.put(set0, weakFastHashMap1);
      weakFastHashMap2.size();
}"
285,"    public boolean isEmpty() {
        if (fast) {
            return (map.isEmpty());
        } else {
            synchronized (map) {
                return (map.isEmpty());
            }
        }
    }","  public void test15()  throws Throwable  {
      WeakFastHashMap<String, String> weakFastHashMap0 = new WeakFastHashMap<String, String>(0);
      WeakFastHashMap<Object, String> weakFastHashMap1 = new WeakFastHashMap<Object, String>(weakFastHashMap0);
      weakFastHashMap1.put((Object) null, ""`M*Qg[p)em~~#2|H1;~"");
      weakFastHashMap1.remove((Object) null);
}"
286,"    public int size() {
        if (fast) {
            return (map.size());
        } else {
            synchronized (map) {
                return (map.size());
            }
        }
    }","  public void test16()  throws Throwable  {
      WeakFastHashMap<String, String> weakFastHashMap0 = new WeakFastHashMap<String, String>(0);
      weakFastHashMap0.put("""", ""hoVF"");
      weakFastHashMap0.put("""", ""4My5/<HH@]86el|YdgB"");
}"
287,"    public boolean getFast() {
        return (this.fast);
    }","  public void test17()  throws Throwable  {
      WeakFastHashMap<Integer, String> weakFastHashMap0 = new WeakFastHashMap<Integer, String>(271);
}"
288,"    public boolean getFast() {
        return (this.fast);
    }","  public void test18()  throws Throwable  {
      WeakFastHashMap<Integer, String> weakFastHashMap0 = new WeakFastHashMap<Integer, String>(271);
      weakFastHashMap0.setFast(true);
      boolean boolean0 = weakFastHashMap0.getFast();
}"
289,"    public void putAll(final Map<? extends K, ? extends V> in) {
        if (fast) {
            synchronized (this) {
                final Map<K, V> temp =  cloneMap(map);
                temp.putAll(in);
                map = temp;
            }
        } else {
            synchronized (map) {
                map.putAll(in);
            }
        }
    }","  public void test19()  throws Throwable  {
      WeakFastHashMap<String, String> weakFastHashMap0 = new WeakFastHashMap<String, String>();
      // Undeclared exception!
      try { 
        weakFastHashMap0.putAll((Map<? extends String, ? extends String>) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.util.WeakHashMap"", e);
      }
  }"
290,"    protected Map<K, V> createMap() {
        return new WeakHashMap<K, V>();
    }","  public void test20()  throws Throwable  {
      WeakFastHashMap<Object, Integer> weakFastHashMap0 = new WeakFastHashMap<Object, Integer>();
      // Undeclared exception!
      try { 
        weakFastHashMap0.createMap((Map<?, ? extends Integer>) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.util.WeakHashMap"", e);
      }
  }"
291,"    protected Map<K, V> createMap() {
        return new WeakHashMap<K, V>();
    }","  public void test21()  throws Throwable  {
      WeakFastHashMap<String, String> weakFastHashMap0 = new WeakFastHashMap<String, String>(1, 1);
      // Undeclared exception!
      try { 
        weakFastHashMap0.createMap(2908, 0.0F);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Illegal Load factor: 0.0
         //
         verifyException(""java.util.WeakHashMap"", e);
      }
  }"
292,"    protected Map<K, V> createMap() {
        return new WeakHashMap<K, V>();
    }","  public void test22()  throws Throwable  {
      WeakFastHashMap<AbstractMap.SimpleImmutableEntry<Object, Integer>, AbstractMap.SimpleEntry<Integer, Object>> weakFastHashMap0 = new WeakFastHashMap<AbstractMap.SimpleImmutableEntry<Object, Integer>, AbstractMap.SimpleEntry<Integer, Object>>();
      // Undeclared exception!
      try { 
        weakFastHashMap0.createMap((-165));
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Illegal Initial Capacity: -165
         //
         verifyException(""java.util.WeakHashMap"", e);
      }
  }"
293,"    protected Map<K, V> cloneMap(final Map<? extends K, ? extends V> map) {
        return createMap(map);
    }","  public void test23()  throws Throwable  {
      WeakFastHashMap<Integer, Object> weakFastHashMap0 = new WeakFastHashMap<Integer, Object>();
      // Undeclared exception!
      try { 
        weakFastHashMap0.cloneMap((Map<? extends Integer, ?>) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.util.WeakHashMap"", e);
      }
  }"
294,"    public WeakFastHashMap() {
        super();
        this.map = createMap();
    }","  public void test24()  throws Throwable  {
      WeakFastHashMap<Integer, String> weakFastHashMap0 = null;
      try {
        weakFastHashMap0 = new WeakFastHashMap<Integer, String>((Map<? extends Integer, ? extends String>) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.util.WeakHashMap"", e);
      }
  }"
295,"    public WeakFastHashMap() {
        super();
        this.map = createMap();
    }","  public void test25()  throws Throwable  {
      WeakFastHashMap<Object, Integer> weakFastHashMap0 = null;
      try {
        weakFastHashMap0 = new WeakFastHashMap<Object, Integer>(0, 0.0F);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Illegal Load factor: 0.0
         //
         verifyException(""java.util.WeakHashMap"", e);
      }
  }"
296,"    public WeakFastHashMap() {
        super();
        this.map = createMap();
    }","  public void test26()  throws Throwable  {
      WeakFastHashMap<AbstractMap.SimpleImmutableEntry<Object, Object>, HashMap<String, String>> weakFastHashMap0 = null;
      try {
        weakFastHashMap0 = new WeakFastHashMap<AbstractMap.SimpleImmutableEntry<Object, Object>, HashMap<String, String>>((-2));
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Illegal Initial Capacity: -2
         //
         verifyException(""java.util.WeakHashMap"", e);
      }
  }"
297,"    public boolean getFast() {
        return (this.fast);
    }","  public void test27()  throws Throwable  {
      WeakFastHashMap<String, String> weakFastHashMap0 = new WeakFastHashMap<String, String>();
      weakFastHashMap0.put(""##yV"", ""##yV"");
      weakFastHashMap0.hashCode();
}"
298,"    public boolean getFast() {
        return (this.fast);
    }","  public void test28()  throws Throwable  {
      WeakFastHashMap<Object, String> weakFastHashMap0 = new WeakFastHashMap<Object, String>(3961, 3961);
}"
299,"    public boolean getFast() {
        return (this.fast);
    }","  public void test29()  throws Throwable  {
      WeakFastHashMap<Object, String> weakFastHashMap0 = new WeakFastHashMap<Object, String>(3961, 3961);
      weakFastHashMap0.setFast(true);
      weakFastHashMap0.put(""0jr$|qo-w"", """");
      Object object0 = weakFastHashMap0.clone();
      WeakFastHashMap<AbstractMap.SimpleEntry<Object, Integer>, AbstractMap.SimpleImmutableEntry<Object, Object>> weakFastHashMap1 = new WeakFastHashMap<AbstractMap.SimpleEntry<Object, Integer>, AbstractMap.SimpleImmutableEntry<Object, Object>>();
      weakFastHashMap1.remove(object0, (Object) null);
}"
300,"    public boolean getFast() {
        return (this.fast);
    }","  public void test30()  throws Throwable  {
      WeakFastHashMap<Object, String> weakFastHashMap0 = new WeakFastHashMap<Object, String>(3961, 3961);
      weakFastHashMap0.setFast(true);
      weakFastHashMap0.put(""0jr$|qo-w"", """");
      Object object0 = weakFastHashMap0.clone();
      WeakFastHashMap<AbstractMap.SimpleEntry<Object, Integer>, AbstractMap.SimpleImmutableEntry<Object, Object>> weakFastHashMap1 = new WeakFastHashMap<AbstractMap.SimpleEntry<Object, Integer>, AbstractMap.SimpleImmutableEntry<Object, Object>>();
      weakFastHashMap1.remove(object0, (Object) null);
}"
301,"    public boolean getFast() {
        return (this.fast);
    }","  public void test31()  throws Throwable  {
      WeakFastHashMap<AbstractMap.SimpleImmutableEntry<Object, String>, Integer> weakFastHashMap0 = new WeakFastHashMap<AbstractMap.SimpleImmutableEntry<Object, String>, Integer>();
      WeakFastHashMap<String, String> weakFastHashMap1 = new WeakFastHashMap<String, String>(1);
      weakFastHashMap1.equals(weakFastHashMap0);
}"
302,"    public boolean getFast() {
        return (this.fast);
    }","  public void test32()  throws Throwable  {
      WeakFastHashMap<AbstractMap.SimpleImmutableEntry<Object, String>, Integer> weakFastHashMap0 = new WeakFastHashMap<AbstractMap.SimpleImmutableEntry<Object, String>, Integer>();
      WeakFastHashMap<String, String> weakFastHashMap1 = new WeakFastHashMap<String, String>(1);
      weakFastHashMap1.equals(weakFastHashMap0);
}"
303,"    public boolean equals(final Object o) {
        // Simple tests that require no synchronization
        if (o == this) {
            return (true);
        } else if (!(o instanceof Map)) {
            return (false);
        }
        final Map<?, ?> mo = (Map<?, ?>) o;

        // Compare the two maps for equality
        if (fast) {
            if (mo.size() != map.size()) {
                return (false);
            }
            for (final Map.Entry<K, V> e : map.entrySet()) {
                final K key = e.getKey();
                final V value = e.getValue();
                if (value == null) {
                    if (!(mo.get(key) == null && mo.containsKey(key))) {
                        return (false);
                    }
                } else {
                    if (!value.equals(mo.get(key))) {
                        return (false);
                    }
                }
            }
            return (true);

        } else {
            synchronized (map) {
                if (mo.size() != map.size()) {
                    return (false);
                }
                for (final Map.Entry<K, V> e : map.entrySet()) {
                    final K key = e.getKey();
                    final V value = e.getValue();
                    if (value == null) {
                        if (!(mo.get(key) == null && mo.containsKey(key))) {
                            return (false);
                        }
                    } else {
                        if (!value.equals(mo.get(key))) {
                            return (false);
                        }
                    }
                }
                return (true);
            }
        }
    }","  public void test33()  throws Throwable  {
      WeakFastHashMap<String, WeakHashMap<Integer, Integer>> weakFastHashMap0 = new WeakFastHashMap<String, WeakHashMap<Integer, Integer>>(1937, 796);
      boolean boolean0 = weakFastHashMap0.equals((Object) null);
}"
304,"    public boolean getFast() {
        return (this.fast);
    }","  public void test34()  throws Throwable  {
      WeakFastHashMap<String, WeakHashMap<Integer, Integer>> weakFastHashMap0 = new WeakFastHashMap<String, WeakHashMap<Integer, Integer>>(1937, 796);
      boolean boolean0 = weakFastHashMap0.equals((Object) null);
}"
305,"    public boolean getFast() {
        return (this.fast);
    }","  public void test35()  throws Throwable  {
      WeakFastHashMap<AbstractMap.SimpleEntry<Object, String>, Object> weakFastHashMap0 = new WeakFastHashMap<AbstractMap.SimpleEntry<Object, String>, Object>(1);
      weakFastHashMap0.size();
}"
306,"    public boolean getFast() {
        return (this.fast);
    }","  public void test36()  throws Throwable  {
      WeakFastHashMap<Integer, Integer> weakFastHashMap0 = new WeakFastHashMap<Integer, Integer>();
}"
307,"    public boolean getFast() {
        return (this.fast);
    }","  public void test37()  throws Throwable  {
      WeakFastHashMap<Integer, Integer> weakFastHashMap0 = new WeakFastHashMap<Integer, Integer>();
      weakFastHashMap0.setFast(true);
      weakFastHashMap0.size();
}"
308,"    public boolean getFast() {
        return (this.fast);
    }","  public void test38()  throws Throwable  {
      WeakFastHashMap<AbstractMap.SimpleImmutableEntry<String, String>, String> weakFastHashMap0 = new WeakFastHashMap<AbstractMap.SimpleImmutableEntry<String, String>, String>(0);
      boolean boolean0 = weakFastHashMap0.getFast();
}"
309,"    public boolean getFast() {
        return (this.fast);
    }","  public void test39()  throws Throwable  {
      WeakFastHashMap<Integer, String> weakFastHashMap0 = new WeakFastHashMap<Integer, String>();
      Set<Integer> set0 = weakFastHashMap0.keySet();
}"
310,"    public boolean getFast() {
        return (this.fast);
    }","  public void test40()  throws Throwable  {
      WeakFastHashMap<Integer, String> weakFastHashMap0 = new WeakFastHashMap<Integer, String>();
      Set<Integer> set0 = weakFastHashMap0.keySet();
      weakFastHashMap0.setFast(true);
      WeakFastHashMap<Object, String> weakFastHashMap1 = new WeakFastHashMap<Object, String>(weakFastHashMap0);
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      weakFastHashMap1.computeIfPresent(set0, biFunction0);
}"
311,"    public boolean getFast() {
        return (this.fast);
    }","  public void test41()  throws Throwable  {
      WeakFastHashMap<Integer, String> weakFastHashMap0 = new WeakFastHashMap<Integer, String>(271);
      Integer integer0 = new Integer(271);
      weakFastHashMap0.put(integer0, """");
      Set<Integer> set0 = weakFastHashMap0.keySet();
      weakFastHashMap0.remove((Object) set0);
}"
312,"    public V remove(final Object key) {
        if (fast) {
            synchronized (this) {
                final Map<K, V> temp = cloneMap(map);
                final V result = temp.remove(key);
                map = temp;
                return (result);
            }
        } else {
            synchronized (map) {
                return (map.remove(key));
            }
        }
    }","  public void test42()  throws Throwable  {
      WeakFastHashMap<Integer, String> weakFastHashMap0 = new WeakFastHashMap<Integer, String>(271);
      Integer integer0 = new Integer(271);
      weakFastHashMap0.put(integer0, """");
      Set<Integer> set0 = weakFastHashMap0.keySet();
      weakFastHashMap0.remove((Object) set0);
}"
313,"    public boolean isEmpty() {
        if (fast) {
            return (map.isEmpty());
        } else {
            synchronized (map) {
                return (map.isEmpty());
            }
        }
    }","  public void test43()  throws Throwable  {
      WeakFastHashMap<Integer, String> weakFastHashMap0 = new WeakFastHashMap<Integer, String>(271);
      Integer integer0 = new Integer(271);
      weakFastHashMap0.put(integer0, """");
      weakFastHashMap0.setFast(true);
      weakFastHashMap0.remove((Object) weakFastHashMap0);
}"
314,"    public boolean getFast() {
        return (this.fast);
    }","  public void test44()  throws Throwable  {
      WeakFastHashMap<String, Object> weakFastHashMap0 = new WeakFastHashMap<String, Object>(2245);
      weakFastHashMap0.put(""'f76~$qaq|w"", (Object) null);
      WeakFastHashMap<Integer, AbstractMap.SimpleImmutableEntry<String, String>> weakFastHashMap1 = new WeakFastHashMap<Integer, AbstractMap.SimpleImmutableEntry<String, String>>(2245);
      weakFastHashMap1.setFast(true);
      boolean boolean0 = weakFastHashMap1.equals(weakFastHashMap0);
}"
315,"    public boolean getFast() {
        return (this.fast);
    }","  public void test45()  throws Throwable  {
      WeakFastHashMap<String, Object> weakFastHashMap0 = new WeakFastHashMap<String, Object>(2245);
      weakFastHashMap0.put(""'f76~$qaq|w"", (Object) null);
      WeakFastHashMap<Integer, AbstractMap.SimpleImmutableEntry<String, String>> weakFastHashMap1 = new WeakFastHashMap<Integer, AbstractMap.SimpleImmutableEntry<String, String>>(2245);
      weakFastHashMap1.setFast(true);
      boolean boolean0 = weakFastHashMap1.equals(weakFastHashMap0);
}"
316,"    public boolean equals(final Object o) {
        // Simple tests that require no synchronization
        if (o == this) {
            return (true);
        } else if (!(o instanceof Map)) {
            return (false);
        }
        final Map<?, ?> mo = (Map<?, ?>) o;

        // Compare the two maps for equality
        if (fast) {
            if (mo.size() != map.size()) {
                return (false);
            }
            for (final Map.Entry<K, V> e : map.entrySet()) {
                final K key = e.getKey();
                final V value = e.getValue();
                if (value == null) {
                    if (!(mo.get(key) == null && mo.containsKey(key))) {
                        return (false);
                    }
                } else {
                    if (!value.equals(mo.get(key))) {
                        return (false);
                    }
                }
            }
            return (true);

        } else {
            synchronized (map) {
                if (mo.size() != map.size()) {
                    return (false);
                }
                for (final Map.Entry<K, V> e : map.entrySet()) {
                    final K key = e.getKey();
                    final V value = e.getValue();
                    if (value == null) {
                        if (!(mo.get(key) == null && mo.containsKey(key))) {
                            return (false);
                        }
                    } else {
                        if (!value.equals(mo.get(key))) {
                            return (false);
                        }
                    }
                }
                return (true);
            }
        }
    }","  public void test46()  throws Throwable  {
      WeakFastHashMap<String, Object> weakFastHashMap0 = new WeakFastHashMap<String, Object>(2245);
      weakFastHashMap0.put(""'f76~$qaq|w"", (Object) null);
      WeakFastHashMap<Integer, AbstractMap.SimpleImmutableEntry<String, String>> weakFastHashMap1 = new WeakFastHashMap<Integer, AbstractMap.SimpleImmutableEntry<String, String>>(2245);
      weakFastHashMap1.setFast(true);
      boolean boolean0 = weakFastHashMap1.equals(weakFastHashMap0);
}"
317,"    public boolean getFast() {
        return (this.fast);
    }","  public void test47()  throws Throwable  {
      WeakFastHashMap<String, Object> weakFastHashMap0 = new WeakFastHashMap<String, Object>(2268);
      WeakFastHashMap<Integer, AbstractMap.SimpleImmutableEntry<String, String>> weakFastHashMap1 = new WeakFastHashMap<Integer, AbstractMap.SimpleImmutableEntry<String, String>>(2268);
      weakFastHashMap1.setFast(true);
      boolean boolean0 = weakFastHashMap1.equals(weakFastHashMap0);
}"
318,"    public boolean getFast() {
        return (this.fast);
    }","  public void test48()  throws Throwable  {
      WeakFastHashMap<String, Object> weakFastHashMap0 = new WeakFastHashMap<String, Object>(2268);
      WeakFastHashMap<Integer, AbstractMap.SimpleImmutableEntry<String, String>> weakFastHashMap1 = new WeakFastHashMap<Integer, AbstractMap.SimpleImmutableEntry<String, String>>(2268);
      weakFastHashMap1.setFast(true);
      boolean boolean0 = weakFastHashMap1.equals(weakFastHashMap0);
}"
319,"    public boolean equals(final Object o) {
        // Simple tests that require no synchronization
        if (o == this) {
            return (true);
        } else if (!(o instanceof Map)) {
            return (false);
        }
        final Map<?, ?> mo = (Map<?, ?>) o;

        // Compare the two maps for equality
        if (fast) {
            if (mo.size() != map.size()) {
                return (false);
            }
            for (final Map.Entry<K, V> e : map.entrySet()) {
                final K key = e.getKey();
                final V value = e.getValue();
                if (value == null) {
                    if (!(mo.get(key) == null && mo.containsKey(key))) {
                        return (false);
                    }
                } else {
                    if (!value.equals(mo.get(key))) {
                        return (false);
                    }
                }
            }
            return (true);

        } else {
            synchronized (map) {
                if (mo.size() != map.size()) {
                    return (false);
                }
                for (final Map.Entry<K, V> e : map.entrySet()) {
                    final K key = e.getKey();
                    final V value = e.getValue();
                    if (value == null) {
                        if (!(mo.get(key) == null && mo.containsKey(key))) {
                            return (false);
                        }
                    } else {
                        if (!value.equals(mo.get(key))) {
                            return (false);
                        }
                    }
                }
                return (true);
            }
        }
    }","  public void test49()  throws Throwable  {
      WeakFastHashMap<String, Object> weakFastHashMap0 = new WeakFastHashMap<String, Object>(2268);
      WeakFastHashMap<Integer, AbstractMap.SimpleImmutableEntry<String, String>> weakFastHashMap1 = new WeakFastHashMap<Integer, AbstractMap.SimpleImmutableEntry<String, String>>(2268);
      weakFastHashMap1.setFast(true);
      boolean boolean0 = weakFastHashMap1.equals(weakFastHashMap0);
}"
320,"    public boolean isEmpty() {
        if (fast) {
            return (map.isEmpty());
        } else {
            synchronized (map) {
                return (map.isEmpty());
            }
        }
    }","  public void test50()  throws Throwable  {
      WeakFastHashMap<Integer, String> weakFastHashMap0 = new WeakFastHashMap<Integer, String>(271);
      Integer integer0 = new Integer(271);
      weakFastHashMap0.put(integer0, """");
      weakFastHashMap0.remove((Object) weakFastHashMap0);
}"
321,"    public boolean equals(final Object o) {
        // Simple tests that require no synchronization
        if (o == this) {
            return (true);
        } else if (!(o instanceof Map)) {
            return (false);
        }
        final Map<?, ?> mo = (Map<?, ?>) o;

        // Compare the two maps for equality
        if (fast) {
            if (mo.size() != map.size()) {
                return (false);
            }
            for (final Map.Entry<K, V> e : map.entrySet()) {
                final K key = e.getKey();
                final V value = e.getValue();
                if (value == null) {
                    if (!(mo.get(key) == null && mo.containsKey(key))) {
                        return (false);
                    }
                } else {
                    if (!value.equals(mo.get(key))) {
                        return (false);
                    }
                }
            }
            return (true);

        } else {
            synchronized (map) {
                if (mo.size() != map.size()) {
                    return (false);
                }
                for (final Map.Entry<K, V> e : map.entrySet()) {
                    final K key = e.getKey();
                    final V value = e.getValue();
                    if (value == null) {
                        if (!(mo.get(key) == null && mo.containsKey(key))) {
                            return (false);
                        }
                    } else {
                        if (!value.equals(mo.get(key))) {
                            return (false);
                        }
                    }
                }
                return (true);
            }
        }
    }","  public void test51()  throws Throwable  {
      WeakFastHashMap<Comparable<Object>, WeakFastHashMap<Integer, Object>> weakFastHashMap0 = new WeakFastHashMap<Comparable<Object>, WeakFastHashMap<Integer, Object>>(2245, 164.5414F);
      WeakFastHashMap<String, Object> weakFastHashMap1 = new WeakFastHashMap<String, Object>(2245);
      weakFastHashMap1.put(""'f76~$qaq|w"", (Object) null);
      boolean boolean0 = weakFastHashMap0.equals(weakFastHashMap1);
}"
322,"    public boolean getFast() {
        return (this.fast);
    }","  public void test52()  throws Throwable  {
      WeakFastHashMap<Comparable<Object>, WeakFastHashMap<Integer, Object>> weakFastHashMap0 = new WeakFastHashMap<Comparable<Object>, WeakFastHashMap<Integer, Object>>(2245, 164.5414F);
      WeakFastHashMap<String, Object> weakFastHashMap1 = new WeakFastHashMap<String, Object>(2245);
      weakFastHashMap1.put(""'f76~$qaq|w"", (Object) null);
      boolean boolean0 = weakFastHashMap0.equals(weakFastHashMap1);
}"
323,"    public boolean getFast() {
        return (this.fast);
    }","  public void test53()  throws Throwable  {
      WeakFastHashMap<Comparable<Object>, WeakFastHashMap<Integer, Object>> weakFastHashMap0 = new WeakFastHashMap<Comparable<Object>, WeakFastHashMap<Integer, Object>>(2245, 164.5414F);
      WeakFastHashMap<String, Object> weakFastHashMap1 = new WeakFastHashMap<String, Object>(2245);
      weakFastHashMap1.put(""'f76~$qaq|w"", (Object) null);
      boolean boolean0 = weakFastHashMap0.equals(weakFastHashMap1);
}"
324,"    public boolean getFast() {
        return (this.fast);
    }","  public void test54()  throws Throwable  {
      WeakFastHashMap<Integer, Object> weakFastHashMap0 = new WeakFastHashMap<Integer, Object>();
}"
325,"    public boolean getFast() {
        return (this.fast);
    }","  public void test55()  throws Throwable  {
      WeakFastHashMap<Integer, Object> weakFastHashMap0 = new WeakFastHashMap<Integer, Object>();
      weakFastHashMap0.setFast(true);
      weakFastHashMap0.clear();
}"
326,"    public boolean getFast() {
        return (this.fast);
    }","  public void test56()  throws Throwable  {
      WeakFastHashMap<Object, String> weakFastHashMap0 = new WeakFastHashMap<Object, String>(3961, 3961);
}"
327,"    public boolean getFast() {
        return (this.fast);
    }","  public void test57()  throws Throwable  {
      WeakFastHashMap<Object, String> weakFastHashMap0 = new WeakFastHashMap<Object, String>(3961, 3961);
      weakFastHashMap0.setFast(true);
      WeakFastHashMap<String, String> weakFastHashMap1 = new WeakFastHashMap<String, String>(3961);
      weakFastHashMap0.putAll(weakFastHashMap1);
}"
328,"    public boolean getFast() {
        return (this.fast);
    }","  public void test58()  throws Throwable  {
      WeakFastHashMap<Integer, Integer> weakFastHashMap0 = new WeakFastHashMap<Integer, Integer>(739);
      Integer integer0 = new Integer((-1110));
      weakFastHashMap0.put(integer0, integer0);
      boolean boolean0 = weakFastHashMap0.containsValue(integer0);
}"
329,"    public boolean containsValue(final Object value) {
        if (fast) {
            return (map.containsValue(value));
        } else {
            synchronized (map) {
                return (map.containsValue(value));
            }
        }
    }","  public void test59()  throws Throwable  {
      WeakFastHashMap<Integer, Integer> weakFastHashMap0 = new WeakFastHashMap<Integer, Integer>(739);
      Integer integer0 = new Integer((-1110));
      weakFastHashMap0.put(integer0, integer0);
      boolean boolean0 = weakFastHashMap0.containsValue(integer0);
}"
330,"    public boolean getFast() {
        return (this.fast);
    }","  public void test60()  throws Throwable  {
      WeakFastHashMap<Comparable<Object>, WeakFastHashMap<Integer, Object>> weakFastHashMap0 = new WeakFastHashMap<Comparable<Object>, WeakFastHashMap<Integer, Object>>(2268, 164.5414F);
      WeakFastHashMap<Integer, AbstractMap.SimpleImmutableEntry<String, String>> weakFastHashMap1 = new WeakFastHashMap<Integer, AbstractMap.SimpleImmutableEntry<String, String>>(2268);
}"
331,"    public boolean getFast() {
        return (this.fast);
    }","  public void test61()  throws Throwable  {
      WeakFastHashMap<Comparable<Object>, WeakFastHashMap<Integer, Object>> weakFastHashMap0 = new WeakFastHashMap<Comparable<Object>, WeakFastHashMap<Integer, Object>>(2268, 164.5414F);
      WeakFastHashMap<Integer, AbstractMap.SimpleImmutableEntry<String, String>> weakFastHashMap1 = new WeakFastHashMap<Integer, AbstractMap.SimpleImmutableEntry<String, String>>(2268);
      weakFastHashMap1.setFast(true);
      boolean boolean0 = weakFastHashMap1.containsValue(weakFastHashMap0);
}"
332,"    public boolean containsValue(final Object value) {
        if (fast) {
            return (map.containsValue(value));
        } else {
            synchronized (map) {
                return (map.containsValue(value));
            }
        }
    }","  public void test62()  throws Throwable  {
      WeakFastHashMap<Comparable<Object>, WeakFastHashMap<Integer, Object>> weakFastHashMap0 = new WeakFastHashMap<Comparable<Object>, WeakFastHashMap<Integer, Object>>(2268, 164.5414F);
      WeakFastHashMap<Integer, AbstractMap.SimpleImmutableEntry<String, String>> weakFastHashMap1 = new WeakFastHashMap<Integer, AbstractMap.SimpleImmutableEntry<String, String>>(2268);
      weakFastHashMap1.setFast(true);
      boolean boolean0 = weakFastHashMap1.containsValue(weakFastHashMap0);
}"
333,"    public boolean getFast() {
        return (this.fast);
    }","  public void test63()  throws Throwable  {
      WeakFastHashMap<Integer, String> weakFastHashMap0 = new WeakFastHashMap<Integer, String>();
      WeakFastHashMap<AbstractMap.SimpleEntry<Object, String>, AbstractMap.SimpleImmutableEntry<String, Object>> weakFastHashMap1 = new WeakFastHashMap<AbstractMap.SimpleEntry<Object, String>, AbstractMap.SimpleImmutableEntry<String, Object>>(301, 301);
      boolean boolean0 = weakFastHashMap1.containsValue(weakFastHashMap0);
}"
334,"    public boolean getFast() {
        return (this.fast);
    }","  public void test64()  throws Throwable  {
      WeakFastHashMap<Integer, String> weakFastHashMap0 = new WeakFastHashMap<Integer, String>();
      WeakFastHashMap<AbstractMap.SimpleEntry<Object, String>, AbstractMap.SimpleImmutableEntry<String, Object>> weakFastHashMap1 = new WeakFastHashMap<AbstractMap.SimpleEntry<Object, String>, AbstractMap.SimpleImmutableEntry<String, Object>>(301, 301);
      boolean boolean0 = weakFastHashMap1.containsValue(weakFastHashMap0);
}"
335,"    public boolean containsValue(final Object value) {
        if (fast) {
            return (map.containsValue(value));
        } else {
            synchronized (map) {
                return (map.containsValue(value));
            }
        }
    }","  public void test65()  throws Throwable  {
      WeakFastHashMap<Integer, String> weakFastHashMap0 = new WeakFastHashMap<Integer, String>();
      WeakFastHashMap<AbstractMap.SimpleEntry<Object, String>, AbstractMap.SimpleImmutableEntry<String, Object>> weakFastHashMap1 = new WeakFastHashMap<AbstractMap.SimpleEntry<Object, String>, AbstractMap.SimpleImmutableEntry<String, Object>>(301, 301);
      boolean boolean0 = weakFastHashMap1.containsValue(weakFastHashMap0);
}"
336,"    public boolean getFast() {
        return (this.fast);
    }","  public void test66()  throws Throwable  {
      WeakFastHashMap<HashMap<Object, Object>, Integer> weakFastHashMap0 = new WeakFastHashMap<HashMap<Object, Object>, Integer>();
      WeakFastHashMap<Integer, Object> weakFastHashMap1 = new WeakFastHashMap<Integer, Object>(0);
      WeakFastHashMap<Object, Object> weakFastHashMap2 = new WeakFastHashMap<Object, Object>();
      Integer integer0 = new Integer(0);
      weakFastHashMap0.put(weakFastHashMap2, integer0);
      WeakFastHashMap weakFastHashMap3 = (WeakFastHashMap)weakFastHashMap1.clone();
      boolean boolean0 = weakFastHashMap0.containsKey(weakFastHashMap3);
}"
337,"    public boolean getFast() {
        return (this.fast);
    }","  public void test67()  throws Throwable  {
      WeakFastHashMap<HashMap<Object, Object>, Integer> weakFastHashMap0 = new WeakFastHashMap<HashMap<Object, Object>, Integer>();
      WeakFastHashMap<Integer, Object> weakFastHashMap1 = new WeakFastHashMap<Integer, Object>(0);
      WeakFastHashMap<Object, Object> weakFastHashMap2 = new WeakFastHashMap<Object, Object>();
      Integer integer0 = new Integer(0);
      weakFastHashMap0.put(weakFastHashMap2, integer0);
      WeakFastHashMap weakFastHashMap3 = (WeakFastHashMap)weakFastHashMap1.clone();
      boolean boolean0 = weakFastHashMap0.containsKey(weakFastHashMap3);
}"
338,"    public boolean containsKey(final Object key) {
        if (fast) {
            return (map.containsKey(key));
        } else {
            synchronized (map) {
                return (map.containsKey(key));
            }
        }
    }","  public void test68()  throws Throwable  {
      WeakFastHashMap<HashMap<Object, Object>, Integer> weakFastHashMap0 = new WeakFastHashMap<HashMap<Object, Object>, Integer>();
      WeakFastHashMap<Integer, Object> weakFastHashMap1 = new WeakFastHashMap<Integer, Object>(0);
      WeakFastHashMap<Object, Object> weakFastHashMap2 = new WeakFastHashMap<Object, Object>();
      Integer integer0 = new Integer(0);
      weakFastHashMap0.put(weakFastHashMap2, integer0);
      WeakFastHashMap weakFastHashMap3 = (WeakFastHashMap)weakFastHashMap1.clone();
      boolean boolean0 = weakFastHashMap0.containsKey(weakFastHashMap3);
}"
339,"    public boolean getFast() {
        return (this.fast);
    }","  public void test69()  throws Throwable  {
      WeakFastHashMap<String, Integer> weakFastHashMap0 = new WeakFastHashMap<String, Integer>();
}"
340,"    public boolean getFast() {
        return (this.fast);
    }","  public void test70()  throws Throwable  {
      WeakFastHashMap<String, Integer> weakFastHashMap0 = new WeakFastHashMap<String, Integer>();
      weakFastHashMap0.setFast(true);
      Integer integer0 = new Integer((-2));
      boolean boolean0 = weakFastHashMap0.containsKey(integer0);
}"
341,"    public boolean containsKey(final Object key) {
        if (fast) {
            return (map.containsKey(key));
        } else {
            synchronized (map) {
                return (map.containsKey(key));
            }
        }
    }","  public void test71()  throws Throwable  {
      WeakFastHashMap<String, Integer> weakFastHashMap0 = new WeakFastHashMap<String, Integer>();
      weakFastHashMap0.setFast(true);
      Integer integer0 = new Integer((-2));
      boolean boolean0 = weakFastHashMap0.containsKey(integer0);
}"
342,"    public boolean getFast() {
        return (this.fast);
    }","  public void test72()  throws Throwable  {
      WeakFastHashMap<Integer, Integer> weakFastHashMap0 = new WeakFastHashMap<Integer, Integer>(2459);
      Integer integer0 = new Integer(2459);
      boolean boolean0 = weakFastHashMap0.containsKey(integer0);
}"
343,"    public boolean containsKey(final Object key) {
        if (fast) {
            return (map.containsKey(key));
        } else {
            synchronized (map) {
                return (map.containsKey(key));
            }
        }
    }","  public void test73()  throws Throwable  {
      WeakFastHashMap<Integer, Integer> weakFastHashMap0 = new WeakFastHashMap<Integer, Integer>(2459);
      Integer integer0 = new Integer(2459);
      boolean boolean0 = weakFastHashMap0.containsKey(integer0);
}"
344,"    public boolean isEmpty() {
        if (fast) {
            return (map.isEmpty());
        } else {
            synchronized (map) {
                return (map.isEmpty());
            }
        }
    }","  public void test74()  throws Throwable  {
      WeakFastHashMap<WeakFastHashMap<Object, String>, Object> weakFastHashMap0 = new WeakFastHashMap<WeakFastHashMap<Object, String>, Object>();
}"
345,"    public boolean isEmpty() {
        if (fast) {
            return (map.isEmpty());
        } else {
            synchronized (map) {
                return (map.isEmpty());
            }
        }
    }","  public void test75()  throws Throwable  {
      WeakFastHashMap<WeakFastHashMap<Object, String>, Object> weakFastHashMap0 = new WeakFastHashMap<WeakFastHashMap<Object, String>, Object>();
      weakFastHashMap0.put((WeakFastHashMap<Object, String>) null, ""_As"");
      boolean boolean0 = weakFastHashMap0.isEmpty();
}"
346,"    public boolean getFast() {
        return (this.fast);
    }","  public void test76()  throws Throwable  {
      WeakFastHashMap<String, Integer> weakFastHashMap0 = new WeakFastHashMap<String, Integer>(13);
}"
347,"    public boolean getFast() {
        return (this.fast);
    }","  public void test77()  throws Throwable  {
      WeakFastHashMap<String, Integer> weakFastHashMap0 = new WeakFastHashMap<String, Integer>(13);
      weakFastHashMap0.setFast(true);
      boolean boolean0 = weakFastHashMap0.isEmpty();
}"
348,"    public boolean isEmpty() {
        if (fast) {
            return (map.isEmpty());
        } else {
            synchronized (map) {
                return (map.isEmpty());
            }
        }
    }","  public void test78()  throws Throwable  {
      WeakFastHashMap<String, Integer> weakFastHashMap0 = new WeakFastHashMap<String, Integer>(13);
      weakFastHashMap0.setFast(true);
      boolean boolean0 = weakFastHashMap0.isEmpty();
}"
349,"    public boolean isEmpty() {
        if (fast) {
            return (map.isEmpty());
        } else {
            synchronized (map) {
                return (map.isEmpty());
            }
        }
    }","  public void test79()  throws Throwable  {
      WeakFastHashMap<Comparable<Object>, WeakFastHashMap<Integer, Object>> weakFastHashMap0 = new WeakFastHashMap<Comparable<Object>, WeakFastHashMap<Integer, Object>>(2268, 164.5414F);
      boolean boolean0 = weakFastHashMap0.isEmpty();
}"
350,"    public boolean getFast() {
        return (this.fast);
    }","  public void test80()  throws Throwable  {
      WeakFastHashMap<Comparable<Object>, WeakFastHashMap<Integer, Object>> weakFastHashMap0 = new WeakFastHashMap<Comparable<Object>, WeakFastHashMap<Integer, Object>>(2268, 164.5414F);
      boolean boolean0 = weakFastHashMap0.isEmpty();
}"
351,"    public boolean getFast() {
        return (this.fast);
    }","  public void test81()  throws Throwable  {
      WeakFastHashMap<String, Integer> weakFastHashMap0 = new WeakFastHashMap<String, Integer>();
}"
352,"    public boolean getFast() {
        return (this.fast);
    }","  public void test82()  throws Throwable  {
      WeakFastHashMap<String, Integer> weakFastHashMap0 = new WeakFastHashMap<String, Integer>();
      weakFastHashMap0.setFast(true);
      WeakFastHashMap<Comparable<String>, Object> weakFastHashMap1 = new WeakFastHashMap<Comparable<String>, Object>(1, 13);
      weakFastHashMap1.putAll(weakFastHashMap0);
}"
353,"    public boolean getFast() {
        return (this.fast);
    }","  public void test83()  throws Throwable  {
      WeakFastHashMap<String, String> weakFastHashMap0 = new WeakFastHashMap<String, String>();
      Set<Map.Entry<String, String>> set0 = (Set<Map.Entry<String, String>>)weakFastHashMap0.entrySet();
      WeakFastHashMap<Integer, Object> weakFastHashMap1 = new WeakFastHashMap<Integer, Object>();
      weakFastHashMap1.setFast(true);
      weakFastHashMap1.get(set0);
}"
354,"    public boolean getFast() {
        return (this.fast);
    }","  public void test84()  throws Throwable  {
      WeakFastHashMap<String, String> weakFastHashMap0 = new WeakFastHashMap<String, String>();
      Set<Map.Entry<String, String>> set0 = (Set<Map.Entry<String, String>>)weakFastHashMap0.entrySet();
      WeakFastHashMap<Integer, Object> weakFastHashMap1 = new WeakFastHashMap<Integer, Object>();
      weakFastHashMap1.setFast(true);
      weakFastHashMap1.get(set0);
}"
355,"    public boolean isEmpty() {
        if (fast) {
            return (map.isEmpty());
        } else {
            synchronized (map) {
                return (map.isEmpty());
            }
        }
    }","  public void test85()  throws Throwable  {
      WeakFastHashMap<String, Integer> weakFastHashMap0 = new WeakFastHashMap<String, Integer>();
      weakFastHashMap0.setFast(true);
      Integer integer0 = new Integer((-2));
      weakFastHashMap0.put("""", integer0);
      boolean boolean0 = weakFastHashMap0.isEmpty();
}"
356,"    public boolean getFast() {
        return (this.fast);
    }","  public void test86()  throws Throwable  {
      WeakFastHashMap<HashMap<Integer, String>, AbstractMap.SimpleImmutableEntry<Object, Object>> weakFastHashMap0 = new WeakFastHashMap<HashMap<Integer, String>, AbstractMap.SimpleImmutableEntry<Object, Object>>();
      Collection<AbstractMap.SimpleImmutableEntry<Object, Object>> collection0 = weakFastHashMap0.values();
      weakFastHashMap0.remove((Object) collection0);
}"
357,"    public boolean getFast() {
        return (this.fast);
    }","  public void test87()  throws Throwable  {
      WeakFastHashMap<String, String> weakFastHashMap0 = new WeakFastHashMap<String, String>(0);
      WeakFastHashMap<Object, String> weakFastHashMap1 = new WeakFastHashMap<Object, String>(weakFastHashMap0);
      weakFastHashMap1.put((Object) null, ""`M*Qg[p)em~~#2|H1;~"");
      WeakFastHashMap<Object, String> weakFastHashMap2 = new WeakFastHashMap<Object, String>(weakFastHashMap1);
}"
358,"    public boolean getFast() {
        return (this.fast);
    }","  public void test88()  throws Throwable  {
      WeakFastHashMap<String, String> weakFastHashMap0 = new WeakFastHashMap<String, String>(0);
      WeakFastHashMap<Object, String> weakFastHashMap1 = new WeakFastHashMap<Object, String>(weakFastHashMap0);
      weakFastHashMap1.put((Object) null, ""`M*Qg[p)em~~#2|H1;~"");
      WeakFastHashMap<Object, String> weakFastHashMap2 = new WeakFastHashMap<Object, String>(weakFastHashMap1);
}"
359,"    public boolean getFast() {
        return (this.fast);
    }","  public void test89()  throws Throwable  {
      WeakFastHashMap<String, String> weakFastHashMap0 = new WeakFastHashMap<String, String>();
      Set<Map.Entry<String, String>> set0 = (Set<Map.Entry<String, String>>)weakFastHashMap0.entrySet();
      WeakFastHashMap<Integer, Object> weakFastHashMap1 = new WeakFastHashMap<Integer, Object>();
      weakFastHashMap1.get(set0);
}"
360,"    public void introspect(final IntrospectionContext icontext) throws IntrospectionException {
        for (final String property : getSuppressedProperties()) {
            icontext.removePropertyDescriptor(property);
        }
    }","  public void test0()  throws Throwable  {
      SuppressPropertiesBeanIntrospector suppressPropertiesBeanIntrospector0 = SuppressPropertiesBeanIntrospector.SUPPRESS_CLASS;
      // Undeclared exception!
      try { 
        suppressPropertiesBeanIntrospector0.introspect((IntrospectionContext) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.beanutils.SuppressPropertiesBeanIntrospector"", e);
      }
  }"
361,"    public SuppressPropertiesBeanIntrospector(final Collection<String> propertiesToSuppress) {
        if (propertiesToSuppress == null) {
            throw new IllegalArgumentException(""Property names must not be null!"");
        }

        propertyNames = Collections.unmodifiableSet(new HashSet<String>(
                propertiesToSuppress));
    }","  public void test1()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      List<String> list0 = linkedList0.subList(0, 0);
      linkedList0.add(""IW)rBG"");
      SuppressPropertiesBeanIntrospector suppressPropertiesBeanIntrospector0 = null;
      try {
        suppressPropertiesBeanIntrospector0 = new SuppressPropertiesBeanIntrospector(list0);
        fail(""Expecting exception: ConcurrentModificationException"");
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.util.SubList"", e);
      }
  }"
362,"    public Set<String> getSuppressedProperties() {
        return propertyNames;
    }","  public void test2()  throws Throwable  {
      SuppressPropertiesBeanIntrospector suppressPropertiesBeanIntrospector0 = SuppressPropertiesBeanIntrospector.SUPPRESS_CLASS;
      Set<String> set0 = suppressPropertiesBeanIntrospector0.getSuppressedProperties();
}"
363,"    public SuppressPropertiesBeanIntrospector(final Collection<String> propertiesToSuppress) {
        if (propertiesToSuppress == null) {
            throw new IllegalArgumentException(""Property names must not be null!"");
        }

        propertyNames = Collections.unmodifiableSet(new HashSet<String>(
                propertiesToSuppress));
    }","  public void test3()  throws Throwable  {
      SuppressPropertiesBeanIntrospector suppressPropertiesBeanIntrospector0 = null;
      try {
        suppressPropertiesBeanIntrospector0 = new SuppressPropertiesBeanIntrospector((Collection<String>) null);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Property names must not be null!
         //
         verifyException(""org.apache.commons.beanutils.SuppressPropertiesBeanIntrospector"", e);
      }
  }"
364,"    public void introspect(final IntrospectionContext icontext) throws IntrospectionException {
        for (final String property : getSuppressedProperties()) {
            icontext.removePropertyDescriptor(property);
        }
    }","  public void test4()  throws Throwable  {
      Class<Object> class0 = Object.class;
      DefaultIntrospectionContext defaultIntrospectionContext0 = new DefaultIntrospectionContext(class0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      SuppressPropertiesBeanIntrospector suppressPropertiesBeanIntrospector0 = new SuppressPropertiesBeanIntrospector(linkedList0);
      suppressPropertiesBeanIntrospector0.SUPPRESS_CLASS.introspect(defaultIntrospectionContext0);
  }"
365,"    public boolean isIgnoreNull() {
        return ignoreNull;
    }","  public void test0()  throws Throwable  {
      BeanPropertyValueChangeClosure beanPropertyValueChangeClosure0 = new BeanPropertyValueChangeClosure(""zs)|SLx{gP/&}lMF<yk"", ""zs)|SLx{gP/&}lMF<yk"");
      boolean boolean0 = beanPropertyValueChangeClosure0.isIgnoreNull();
}"
366,"    public Object getPropertyValue() {
        return propertyValue;
    }","  public void test1()  throws Throwable  {
      BeanPropertyValueChangeClosure beanPropertyValueChangeClosure0 = new BeanPropertyValueChangeClosure("" "", (Object) null, true);
      Object object0 = beanPropertyValueChangeClosure0.getPropertyValue();
}"
367,"    public BeanPropertyValueChangeClosure(final String propertyName, final Object propertyValue) {
        this(propertyName, propertyValue, false);
    }","  public void test2()  throws Throwable  {
      BeanPropertyValueChangeClosure beanPropertyValueChangeClosure0 = null;
      try {
        beanPropertyValueChangeClosure0 = new BeanPropertyValueChangeClosure((String) null, (Object) null, true);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // propertyName cannot be null or empty
         //
         verifyException(""org.apache.commons.beanutils.BeanPropertyValueChangeClosure"", e);
      }
  }"
368,"    public BeanPropertyValueChangeClosure(final String propertyName, final Object propertyValue) {
        this(propertyName, propertyValue, false);
    }","  public void test3()  throws Throwable  {
      BeanPropertyValueChangeClosure beanPropertyValueChangeClosure0 = null;
      try {
        beanPropertyValueChangeClosure0 = new BeanPropertyValueChangeClosure("""", """", true);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // propertyName cannot be null or empty
         //
         verifyException(""org.apache.commons.beanutils.BeanPropertyValueChangeClosure"", e);
      }
  }"
369,"    public void execute(final Object object) {

        try {
            PropertyUtils.setProperty(object, propertyName, propertyValue);
        } catch (final IllegalArgumentException e) {
            final String errorMsg = ""Unable to execute Closure. Null value encountered in property path..."";

            if (ignoreNull) {
                log.warn(""WARNING: "" + errorMsg + e);
            } else {
                final IllegalArgumentException iae = new IllegalArgumentException(errorMsg);
                if (!BeanUtils.initCause(iae, e)) {
                    log.error(errorMsg, e);
                }
                throw iae;
            }
        } catch (final IllegalAccessException e) {
            final String errorMsg = ""Unable to access the property provided."";
            final IllegalArgumentException iae = new IllegalArgumentException(errorMsg);
            if (!BeanUtils.initCause(iae, e)) {
                log.error(errorMsg, e);
            }
            throw iae;
        } catch (final InvocationTargetException e) {
            final String errorMsg = ""Exception occurred in property's getter"";
            final IllegalArgumentException iae = new IllegalArgumentException(errorMsg);
            if (!BeanUtils.initCause(iae, e)) {
                log.error(errorMsg, e);
            }
            throw iae;
        } catch (final NoSuchMethodException e) {
            final String errorMsg = ""Property not found"";
            final IllegalArgumentException iae = new IllegalArgumentException(errorMsg);
            if (!BeanUtils.initCause(iae, e)) {
                log.error(errorMsg, e);
            }
            throw iae;
        }
    }","  public void test4()  throws Throwable  {
      BeanPropertyValueChangeClosure beanPropertyValueChangeClosure0 = new BeanPropertyValueChangeClosure(""setSimpleProperty: Invoking m'thod "", ""setSimpleProperty: Invoking m'thod "");
      // Undeclared exception!
      try { 
        beanPropertyValueChangeClosure0.execute(""setSimpleProperty: Invoking m'thod "");
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Property not found
         //
         verifyException(""org.apache.commons.beanutils.BeanPropertyValueChangeClosure"", e);
      }
  }"
370,"    public boolean isIgnoreNull() {
        return ignoreNull;
    }","  public void test5()  throws Throwable  {
      BeanPropertyValueChangeClosure beanPropertyValueChangeClosure0 = new BeanPropertyValueChangeClosure(""aM=\""(ybr%nJ"", ""aM=\""(ybr%nJ"", true);
      beanPropertyValueChangeClosure0.execute(""aM=\""(ybr%nJ"");
}"
371,"    public void execute(final Object object) {

        try {
            PropertyUtils.setProperty(object, propertyName, propertyValue);
        } catch (final IllegalArgumentException e) {
            final String errorMsg = ""Unable to execute Closure. Null value encountered in property path..."";

            if (ignoreNull) {
                log.warn(""WARNING: "" + errorMsg + e);
            } else {
                final IllegalArgumentException iae = new IllegalArgumentException(errorMsg);
                if (!BeanUtils.initCause(iae, e)) {
                    log.error(errorMsg, e);
                }
                throw iae;
            }
        } catch (final IllegalAccessException e) {
            final String errorMsg = ""Unable to access the property provided."";
            final IllegalArgumentException iae = new IllegalArgumentException(errorMsg);
            if (!BeanUtils.initCause(iae, e)) {
                log.error(errorMsg, e);
            }
            throw iae;
        } catch (final InvocationTargetException e) {
            final String errorMsg = ""Exception occurred in property's getter"";
            final IllegalArgumentException iae = new IllegalArgumentException(errorMsg);
            if (!BeanUtils.initCause(iae, e)) {
                log.error(errorMsg, e);
            }
            throw iae;
        } catch (final NoSuchMethodException e) {
            final String errorMsg = ""Property not found"";
            final IllegalArgumentException iae = new IllegalArgumentException(errorMsg);
            if (!BeanUtils.initCause(iae, e)) {
                log.error(errorMsg, e);
            }
            throw iae;
        }
    }","  public void test6()  throws Throwable  {
      BeanPropertyValueChangeClosure beanPropertyValueChangeClosure0 = new BeanPropertyValueChangeClosure(""(XuR M"", ""(XuR M"");
      // Undeclared exception!
      try { 
        beanPropertyValueChangeClosure0.execute(""(XuR M"");
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Unable to execute Closure. Null value encountered in property path...
         //
         verifyException(""org.apache.commons.beanutils.BeanPropertyValueChangeClosure"", e);
      }
  }"
372,"    public BeanPropertyValueChangeClosure(final String propertyName, final Object propertyValue) {
        this(propertyName, propertyValue, false);
    }","  public void test7()  throws Throwable  {
      BeanPropertyValueChangeClosure beanPropertyValueChangeClosure0 = null;
      try {
        beanPropertyValueChangeClosure0 = new BeanPropertyValueChangeClosure((String) null, (Object) null);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // propertyName cannot be null or empty
         //
         verifyException(""org.apache.commons.beanutils.BeanPropertyValueChangeClosure"", e);
      }
  }"
373,"    public boolean isIgnoreNull() {
        return ignoreNull;
    }","  public void test8()  throws Throwable  {
      BeanPropertyValueChangeClosure beanPropertyValueChangeClosure0 = new BeanPropertyValueChangeClosure(""aM=\""(ybr%nJ"", ""aM=\""(ybr%nJ"", true);
      boolean boolean0 = beanPropertyValueChangeClosure0.isIgnoreNull();
}"
374,"    public boolean isIgnoreNull() {
        return ignoreNull;
    }","  public void test9()  throws Throwable  {
      BeanPropertyValueChangeClosure beanPropertyValueChangeClosure0 = new BeanPropertyValueChangeClosure(""aM=\""(ybr%nJ"", ""aM=\""(ybr%nJ"", true);
      beanPropertyValueChangeClosure0.getPropertyName();
}"
375,"    public boolean isIgnoreNull() {
        return ignoreNull;
    }","  public void test10()  throws Throwable  {
      BeanPropertyValueChangeClosure beanPropertyValueChangeClosure0 = new BeanPropertyValueChangeClosure(""aM=\""(ybr%nJ"", ""aM=\""(ybr%nJ"", true);
      beanPropertyValueChangeClosure0.getPropertyValue();
}"
376,"    protected void copy(final ResultSet resultSet) throws SQLException {

        int cnt = 0;
        while (resultSet.next() && (limit < 0  || cnt++ < limit) ) {
            final DynaBean bean = createDynaBean();
            for (DynaProperty propertie : properties) {
                final String name = propertie.getName();
                final Object value = getObject(resultSet, name);
                bean.set(name, value);
            }
            rows.add(bean);
        }

    }","  public void test0()  throws Throwable  {
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn((-374)).when(resultSetMetaData0).getColumnCount();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      doReturn(true, false).when(resultSet0).next();
      RowSetDynaClass rowSetDynaClass0 = new RowSetDynaClass(resultSet0, (-1120));
      rowSetDynaClass0.createDynaBean();
      boolean boolean0 = false;
      rowSetDynaClass0.lowerCase = boolean0;
      boolean boolean1 = true;
      ResultSet resultSet1 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(boolean1, false).when(resultSet1).next();
      rowSetDynaClass0.createDynaBean();
      rowSetDynaClass0.copy(resultSet1);
  }"
377,"    public RowSetDynaClass(final ResultSet resultSet) throws SQLException {

        this(resultSet, true, -1);

    }","  public void test1()  throws Throwable  {
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(resultSetMetaData0).getColumnClassName(anyInt());
      doReturn(1148).when(resultSetMetaData0).getColumnCount();
      doReturn("""", (String) null).when(resultSetMetaData0).getColumnName(anyInt());
      doReturn(0).when(resultSetMetaData0).getColumnType(anyInt());
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      RowSetDynaClass rowSetDynaClass0 = null;
      try {
        rowSetDynaClass0 = new RowSetDynaClass(resultSet0, false, 0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.beanutils.JDBCDynaClass"", e);
      }
  }"
378,"    public RowSetDynaClass(final ResultSet resultSet) throws SQLException {

        this(resultSet, true, -1);

    }","  public void test2()  throws Throwable  {
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn((-4162)).when(resultSetMetaData0).getColumnCount();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      doReturn(true, false).when(resultSet0).next();
      boolean boolean0 = true;
      RowSetDynaClass rowSetDynaClass0 = new RowSetDynaClass(resultSet0, true);
  }"
379,"    protected void copy(final ResultSet resultSet) throws SQLException {

        int cnt = 0;
        while (resultSet.next() && (limit < 0  || cnt++ < limit) ) {
            final DynaBean bean = createDynaBean();
            for (DynaProperty propertie : properties) {
                final String name = propertie.getName();
                final Object value = getObject(resultSet, name);
                bean.set(name, value);
            }
            rows.add(bean);
        }

    }","  public void test3()  throws Throwable  {
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      doReturn(true, true, false).when(resultSet0).next();
      RowSetDynaClass rowSetDynaClass0 = new RowSetDynaClass(resultSet0);
      rowSetDynaClass0.getRows();
      ResultSet resultSet1 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet1).getMetaData();
      rowSetDynaClass0.createDynaBean();
      rowSetDynaClass0.introspect(resultSet1);
      rowSetDynaClass0.lowerCase = false;
      rowSetDynaClass0.createDynaBean();
      rowSetDynaClass0.createDynaBean();
      rowSetDynaClass0.createDynaBean();
      ResultSet resultSet2 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(resultSet2).next();
      rowSetDynaClass0.copy(resultSet2);
      try { 
        rowSetDynaClass0.loadClass("" 0q5G7-"");
        fail(""Expecting exception: SQLException"");
      } catch(SQLException e) {
         //
         // Cannot load column class ' 0q5G7-': java.lang.ClassNotFoundException: Class ' 0q5G7-.class' should be in target project, but could not be found!
         //
         verifyException(""org.apache.commons.beanutils.JDBCDynaClass"", e);
      }
  }"
380,"    public RowSetDynaClass(final ResultSet resultSet) throws SQLException {

        this(resultSet, true, -1);

    }","  public void test4()  throws Throwable  {
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      doReturn(true, false).when(resultSet0).next();
      RowSetDynaClass rowSetDynaClass0 = new RowSetDynaClass(resultSet0, false, (-1295));
  }"
381,"    public RowSetDynaClass(final ResultSet resultSet) throws SQLException {

        this(resultSet, true, -1);

    }","  public void test5()  throws Throwable  {
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      doReturn(true, false).when(resultSet0).next();
      RowSetDynaClass rowSetDynaClass0 = new RowSetDynaClass(resultSet0);
  }"
382,"    protected void copy(final ResultSet resultSet) throws SQLException {

        int cnt = 0;
        while (resultSet.next() && (limit < 0  || cnt++ < limit) ) {
            final DynaBean bean = createDynaBean();
            for (DynaProperty propertie : properties) {
                final String name = propertie.getName();
                final Object value = getObject(resultSet, name);
                bean.set(name, value);
            }
            rows.add(bean);
        }

    }","  public void test6()  throws Throwable  {
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(resultSetMetaData0).getColumnCount();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      doReturn(false).when(resultSet0).next();
      RowSetDynaClass rowSetDynaClass0 = new RowSetDynaClass(resultSet0, true, true);
      ResultSetMetaData resultSetMetaData1 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn((-3)).when(resultSetMetaData1).getColumnCount();
      ResultSet resultSet1 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData1).when(resultSet1).getMetaData();
      rowSetDynaClass0.introspect(resultSet1);
      rowSetDynaClass0.getRows();
      ResultSet resultSet2 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(resultSet2).next();
      ResultSet resultSet3 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(true, false).when(resultSet3).next();
      rowSetDynaClass0.copy(resultSet3);
      rowSetDynaClass0.copy(resultSet2);
      boolean boolean0 = true;
      ResultSet resultSet4 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(boolean0, false).when(resultSet4).next();
      rowSetDynaClass0.createDynaBean();
      rowSetDynaClass0.createDynaBean();
      rowSetDynaClass0.copy(resultSet4);
  }"
383,"    public RowSetDynaClass(final ResultSet resultSet) throws SQLException {

        this(resultSet, true, -1);

    }","  public void test7()  throws Throwable  {
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      doReturn(false).when(resultSet0).next();
      RowSetDynaClass rowSetDynaClass0 = new RowSetDynaClass(resultSet0, true, 0, false);
  }"
384,"    public RowSetDynaClass(final ResultSet resultSet) throws SQLException {

        this(resultSet, true, -1);

    }","  public void test8()  throws Throwable  {
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      doReturn(true, false).when(resultSet0).next();
      RowSetDynaClass rowSetDynaClass0 = new RowSetDynaClass(resultSet0, true, true);
  }"
385,"    public List<DynaBean> getRows() {

        return (this.rows);

    }","  public void test9()  throws Throwable  {
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(resultSetMetaData0).getColumnCount();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      doReturn(false).when(resultSet0).next();
      RowSetDynaClass rowSetDynaClass0 = new RowSetDynaClass(resultSet0, true);
      HashMap<String, DynaProperty> hashMap0 = new HashMap<String, DynaProperty>();
      rowSetDynaClass0.propertiesMap = (Map<String, DynaProperty>) hashMap0;
      rowSetDynaClass0.createDynaBean();
      rowSetDynaClass0.getRows();
      rowSetDynaClass0.getRows();
  }"
386,"    public RowSetDynaClass(final ResultSet resultSet) throws SQLException {

        this(resultSet, true, -1);

    }","  public void test10()  throws Throwable  {
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      doReturn(false).when(resultSet0).next();
      RowSetDynaClass rowSetDynaClass0 = new RowSetDynaClass(resultSet0, false, 896);
  }"
387,"    protected void copy(final ResultSet resultSet) throws SQLException {

        int cnt = 0;
        while (resultSet.next() && (limit < 0  || cnt++ < limit) ) {
            final DynaBean bean = createDynaBean();
            for (DynaProperty propertie : properties) {
                final String name = propertie.getName();
                final Object value = getObject(resultSet, name);
                bean.set(name, value);
            }
            rows.add(bean);
        }

    }","  public void test11()  throws Throwable  {
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      doReturn(false).when(resultSet0).next();
      RowSetDynaClass rowSetDynaClass0 = new RowSetDynaClass(resultSet0, true, true);
      List<DynaBean> list0 = rowSetDynaClass0.rows;
      ResultSet resultSet1 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(resultSet1).next();
      rowSetDynaClass0.copy(resultSet1);
      rowSetDynaClass0.rows = list0;
      ResultSet resultSet2 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(resultSet2).next();
      rowSetDynaClass0.copy(resultSet2);
      ResultSet resultSet3 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(resultSet3).next();
      rowSetDynaClass0.copy(resultSet3);
      rowSetDynaClass0.createDynaBean();
      ResultSet resultSet4 = null;
      // Undeclared exception!
      try { 
        rowSetDynaClass0.copy((ResultSet) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.beanutils.RowSetDynaClass"", e);
      }
  }"
388,"    public RowSetDynaClass(final ResultSet resultSet) throws SQLException {

        this(resultSet, true, -1);

    }","  public void test12()  throws Throwable  {
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      doReturn(false).when(resultSet0).next();
      RowSetDynaClass rowSetDynaClass0 = new RowSetDynaClass(resultSet0, false, true);
  }"
389,"    public RowSetDynaClass(final ResultSet resultSet) throws SQLException {

        this(resultSet, true, -1);

    }","  public void test13()  throws Throwable  {
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      doReturn(false).when(resultSet0).next();
      RowSetDynaClass rowSetDynaClass0 = new RowSetDynaClass(resultSet0, 1);
      ResultSet resultSet1 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        rowSetDynaClass0.getObject(resultSet1, ""org.apache.commons.beanutils.RowSetDynaClass"");
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Invalid name 'org.apache.commons.beanutils.RowSetDynaClass'
         //
         verifyException(""org.apache.commons.beanutils.JDBCDynaClass"", e);
      }
  }"
390,"    public List<DynaBean> getRows() {

        return (this.rows);

    }","  public void test14()  throws Throwable  {
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      doReturn(false).when(resultSet0).next();
      RowSetDynaClass rowSetDynaClass0 = new RowSetDynaClass(resultSet0);
      rowSetDynaClass0.getRows();
  }"
391,"    public RowSetDynaClass(final ResultSet resultSet) throws SQLException {

        this(resultSet, true, -1);

    }","  public void test15()  throws Throwable  {
      int int0 = 0;
      RowSetDynaClass rowSetDynaClass0 = null;
      try {
        rowSetDynaClass0 = new RowSetDynaClass((ResultSet) null, 0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.beanutils.RowSetDynaClass"", e);
      }
  }"
392,"    public RowSetDynaClass(final ResultSet resultSet) throws SQLException {

        this(resultSet, true, -1);

    }","  public void test16()  throws Throwable  {
      ResultSet resultSet0 = null;
      RowSetDynaClass rowSetDynaClass0 = null;
      try {
        rowSetDynaClass0 = new RowSetDynaClass((ResultSet) null, true, 523, true);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.beanutils.RowSetDynaClass"", e);
      }
  }"
393,"    public RowSetDynaClass(final ResultSet resultSet) throws SQLException {

        this(resultSet, true, -1);

    }","  public void test17()  throws Throwable  {
      ResultSet resultSet0 = null;
      boolean boolean0 = false;
      RowSetDynaClass rowSetDynaClass0 = null;
      try {
        rowSetDynaClass0 = new RowSetDynaClass((ResultSet) null, false, 0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.beanutils.RowSetDynaClass"", e);
      }
  }"
394,"    public RowSetDynaClass(final ResultSet resultSet) throws SQLException {

        this(resultSet, true, -1);

    }","  public void test18()  throws Throwable  {
      RowSetDynaClass rowSetDynaClass0 = null;
      try {
        rowSetDynaClass0 = new RowSetDynaClass((ResultSet) null, true, true);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.beanutils.RowSetDynaClass"", e);
      }
  }"
395,"    public RowSetDynaClass(final ResultSet resultSet) throws SQLException {

        this(resultSet, true, -1);

    }","  public void test19()  throws Throwable  {
      ResultSet resultSet0 = null;
      RowSetDynaClass rowSetDynaClass0 = null;
      try {
        rowSetDynaClass0 = new RowSetDynaClass((ResultSet) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.beanutils.RowSetDynaClass"", e);
      }
  }"
396,"    public RowSetDynaClass(final ResultSet resultSet) throws SQLException {

        this(resultSet, true, -1);

    }","  public void test20()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      RowSetDynaClass rowSetDynaClass0 = null;
      try {
        rowSetDynaClass0 = new RowSetDynaClass(resultSet0, true, true);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.beanutils.JDBCDynaClass"", e);
      }
  }"
397,"    public RowSetDynaClass(final ResultSet resultSet) throws SQLException {

        this(resultSet, true, -1);

    }","  public void test21()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      boolean boolean0 = false;
      RowSetDynaClass rowSetDynaClass0 = null;
      try {
        rowSetDynaClass0 = new RowSetDynaClass(resultSet0, false, 285, false);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.beanutils.JDBCDynaClass"", e);
      }
  }"
398,"    public RowSetDynaClass(final ResultSet resultSet) throws SQLException {

        this(resultSet, true, -1);

    }","  public void test22()  throws Throwable  {
      ResultSet resultSet0 = null;
      RowSetDynaClass rowSetDynaClass0 = null;
      try {
        rowSetDynaClass0 = new RowSetDynaClass((ResultSet) null, true);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.beanutils.RowSetDynaClass"", e);
      }
  }"
399,"    public RowSetDynaClass(final ResultSet resultSet) throws SQLException {

        this(resultSet, true, -1);

    }","  public void test23()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      RowSetDynaClass rowSetDynaClass0 = null;
      try {
        rowSetDynaClass0 = new RowSetDynaClass(resultSet0, false, 0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.beanutils.JDBCDynaClass"", e);
      }
  }"
400,"    public RowSetDynaClass(final ResultSet resultSet) throws SQLException {

        this(resultSet, true, -1);

    }","  public void test24()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      RowSetDynaClass rowSetDynaClass0 = null;
      try {
        rowSetDynaClass0 = new RowSetDynaClass(resultSet0, false);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.beanutils.JDBCDynaClass"", e);
      }
  }"
401,"    public RowSetDynaClass(final ResultSet resultSet) throws SQLException {

        this(resultSet, true, -1);

    }","  public void test25()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      RowSetDynaClass rowSetDynaClass0 = null;
      try {
        rowSetDynaClass0 = new RowSetDynaClass(resultSet0, 790);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.beanutils.JDBCDynaClass"", e);
      }
  }"
402,"    public RowSetDynaClass(final ResultSet resultSet) throws SQLException {

        this(resultSet, true, -1);

    }","  public void test26()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      RowSetDynaClass rowSetDynaClass0 = null;
      try {
        rowSetDynaClass0 = new RowSetDynaClass(resultSet0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.beanutils.JDBCDynaClass"", e);
      }
  }"
403,"    public RowSetDynaClass(final ResultSet resultSet) throws SQLException {

        this(resultSet, true, -1);

    }","  public void test27()  throws Throwable  {
      RowSetDynaClass rowSetDynaClass0 = null;
      try {
        rowSetDynaClass0 = new RowSetDynaClass((ResultSet) null, (-1));
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.beanutils.RowSetDynaClass"", e);
      }
  }"
404,"    public RowSetDynaClass(final ResultSet resultSet) throws SQLException {

        this(resultSet, true, -1);

    }","  public void test28()  throws Throwable  {
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn((-56)).when(resultSetMetaData0).getColumnCount();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      ResultSet resultSet1 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet1).getMetaData();
      doReturn(true, false).when(resultSet1).next();
      RowSetDynaClass rowSetDynaClass0 = new RowSetDynaClass(resultSet1, 919);
  }"
405,"    public RowSetDynaClass(final ResultSet resultSet) throws SQLException {

        this(resultSet, true, -1);

    }","  public void test29()  throws Throwable  {
      RowSetDynaClass rowSetDynaClass0 = null;
      try {
        rowSetDynaClass0 = new RowSetDynaClass((ResultSet) null, false);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.beanutils.RowSetDynaClass"", e);
      }
  }"
406,"    protected void copy(final ResultSet resultSet) throws SQLException {

        int cnt = 0;
        while (resultSet.next() && (limit < 0  || cnt++ < limit) ) {
            final DynaBean bean = createDynaBean();
            for (DynaProperty propertie : properties) {
                final String name = propertie.getName();
                final Object value = getObject(resultSet, name);
                bean.set(name, value);
            }
            rows.add(bean);
        }

    }","  public void test30()  throws Throwable  {
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      doReturn(true, false).when(resultSet0).next();
      RowSetDynaClass rowSetDynaClass0 = new RowSetDynaClass(resultSet0);
      rowSetDynaClass0.getRows();
      ResultSet resultSet1 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet1).getMetaData();
      rowSetDynaClass0.createDynaBean();
      rowSetDynaClass0.introspect(resultSet1);
      boolean boolean0 = false;
      rowSetDynaClass0.lowerCase = boolean0;
      rowSetDynaClass0.createDynaBean();
      rowSetDynaClass0.createDynaBean();
      rowSetDynaClass0.createDynaBean();
      ResultSet resultSet2 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(resultSet2).next();
      rowSetDynaClass0.copy(resultSet2);
      String string0 = "" 0q5G7-"";
      try { 
        rowSetDynaClass0.loadClass(string0);
        fail(""Expecting exception: SQLException"");
      } catch(SQLException e) {
         //
         // Cannot load column class ' 0q5G7-': java.lang.ClassNotFoundException: Class ' 0q5G7-.class' should be in target project, but could not be found!
         //
         verifyException(""org.apache.commons.beanutils.JDBCDynaClass"", e);
      }
  }"
407,"    protected void copy(final ResultSet resultSet) throws SQLException {

        int cnt = 0;
        while (resultSet.next() && (limit < 0  || cnt++ < limit) ) {
            final DynaBean bean = createDynaBean();
            for (DynaProperty propertie : properties) {
                final String name = propertie.getName();
                final Object value = getObject(resultSet, name);
                bean.set(name, value);
            }
            rows.add(bean);
        }

    }","  public void test31()  throws Throwable  {
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(resultSetMetaData0).getColumnCount();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      doReturn(false).when(resultSet0).next();
      RowSetDynaClass rowSetDynaClass0 = new RowSetDynaClass(resultSet0, false, false);
      ResultSet resultSet1 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(resultSet1).next();
      rowSetDynaClass0.copy(resultSet1);
      ResultSet resultSet2 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      ResultSet resultSet3 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
  }"
408,,"  public void test32()  throws Throwable  {
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      ResultSet resultSet1 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
  }"
409,"    protected DynaBean createDynaBean() {

        return (new BasicDynaBean(this));

    }","  public void test33()  throws Throwable  {
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn((-2071)).when(resultSetMetaData0).getColumnCount();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      doReturn(false).when(resultSet0).next();
      RowSetDynaClass rowSetDynaClass0 = new RowSetDynaClass(resultSet0, false, 0);
      rowSetDynaClass0.createDynaBean();
      ResultSet resultSet1 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(resultSet1).next();
      rowSetDynaClass0.copy(resultSet1);
      DynaBean dynaBean0 = rowSetDynaClass0.createDynaBean();
      rowSetDynaClass0.getRows();
      rowSetDynaClass0.getRows();
      rowSetDynaClass0.getRows();
      DynaBean dynaBean1 = rowSetDynaClass0.createDynaBean();
}"
410,"    protected Object convert(final Object value, final Class<?> type) {
        return getConvertUtils().convert(value, type);
    }","  public void test0()  throws Throwable  {
      BeanUtilsBean2 beanUtilsBean2_0 = new BeanUtilsBean2();
      Class<Object> class0 = Object.class;
      Class class1 = (Class)beanUtilsBean2_0.convert(class0, class0);
}"
411,"    protected Object convert(final Object value, final Class<?> type) {
        return getConvertUtils().convert(value, type);
    }","  public void test1()  throws Throwable  {
      BeanUtilsBean2 beanUtilsBean2_0 = new BeanUtilsBean2();
      Class<Object> class0 = Object.class;
      Object object0 = beanUtilsBean2_0.convert((Object) null, class0);
}"
412,"    public PropertyDescriptor[] getDescriptors() {
        return descriptors;
    }","  public void test0()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      BeanIntrospectionData beanIntrospectionData0 = new BeanIntrospectionData((PropertyDescriptor[]) null, hashMap0);
      PropertyDescriptor[] propertyDescriptorArray0 = beanIntrospectionData0.getDescriptors();
}"
413,"    public PropertyDescriptor[] getDescriptors() {
        return descriptors;
    }","  public void test1()  throws Throwable  {
      PropertyDescriptor[] propertyDescriptorArray0 = new PropertyDescriptor[6];
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      BeanIntrospectionData beanIntrospectionData0 = new BeanIntrospectionData(propertyDescriptorArray0, hashMap0);
      PropertyDescriptor[] propertyDescriptorArray1 = beanIntrospectionData0.getDescriptors();
}"
414,"    public PropertyDescriptor getDescriptor(final String name) {
        for (final PropertyDescriptor pd : getDescriptors()) {
            if (name.equals(pd.getName())) {
                return pd;
            }
        }
        return null;
    }","  public void test2()  throws Throwable  {
      PropertyDescriptor[] propertyDescriptorArray0 = new PropertyDescriptor[2];
      PropertyDescriptor propertyDescriptor0 = new PropertyDescriptor(""F]@AF|Xk+lJzpk"", (Method) null, (Method) null);
      propertyDescriptorArray0[0] = propertyDescriptor0;
      propertyDescriptor0.setPreferred(true);
      propertyDescriptorArray0[1] = propertyDescriptor0;
      BeanIntrospectionData beanIntrospectionData0 = new BeanIntrospectionData(propertyDescriptorArray0);
      PropertyDescriptor propertyDescriptor1 = beanIntrospectionData0.getDescriptor(""F]@AF|Xk+lJzpk"");
}"
415,"    public PropertyDescriptor getDescriptor(final String name) {
        for (final PropertyDescriptor pd : getDescriptors()) {
            if (name.equals(pd.getName())) {
                return pd;
            }
        }
        return null;
    }","  public void test3()  throws Throwable  {
      PropertyDescriptor[] propertyDescriptorArray0 = new PropertyDescriptor[2];
      PropertyDescriptor propertyDescriptor0 = new PropertyDescriptor(""F]@AF|Xk+lJzpk"", (Method) null, (Method) null);
      propertyDescriptorArray0[0] = propertyDescriptor0;
      propertyDescriptor0.setHidden(true);
      propertyDescriptorArray0[1] = propertyDescriptor0;
      BeanIntrospectionData beanIntrospectionData0 = new BeanIntrospectionData(propertyDescriptorArray0);
      PropertyDescriptor propertyDescriptor1 = beanIntrospectionData0.getDescriptor(""F]@AF|Xk+lJzpk"");
}"
416,"    public PropertyDescriptor getDescriptor(final String name) {
        for (final PropertyDescriptor pd : getDescriptors()) {
            if (name.equals(pd.getName())) {
                return pd;
            }
        }
        return null;
    }","  public void test4()  throws Throwable  {
      PropertyDescriptor[] propertyDescriptorArray0 = new PropertyDescriptor[2];
      PropertyDescriptor propertyDescriptor0 = new PropertyDescriptor(""F]@AF|Xk+lJzpk"", (Method) null, (Method) null);
      propertyDescriptorArray0[0] = propertyDescriptor0;
      PropertyDescriptor propertyDescriptor1 = new PropertyDescriptor(""tDf1^:MbOuY>!b "", (Method) null, (Method) null);
      propertyDescriptorArray0[1] = propertyDescriptor1;
      BeanIntrospectionData beanIntrospectionData0 = new BeanIntrospectionData(propertyDescriptorArray0);
      propertyDescriptor1.setExpert(true);
      PropertyDescriptor propertyDescriptor2 = beanIntrospectionData0.getDescriptor(""tDf1^:MbOuY>!b "");
}"
417,"    public PropertyDescriptor getDescriptor(final String name) {
        for (final PropertyDescriptor pd : getDescriptors()) {
            if (name.equals(pd.getName())) {
                return pd;
            }
        }
        return null;
    }","  public void test5()  throws Throwable  {
      PropertyDescriptor[] propertyDescriptorArray0 = new PropertyDescriptor[2];
      PropertyDescriptor propertyDescriptor0 = new PropertyDescriptor(""F]@AF|Xk+lJzpk"", (Method) null, (Method) null);
      propertyDescriptorArray0[0] = propertyDescriptor0;
      PropertyDescriptor propertyDescriptor1 = new PropertyDescriptor(""tDf1^:MbOuY>!b "", (Method) null, (Method) null);
      propertyDescriptorArray0[1] = propertyDescriptor1;
      BeanIntrospectionData beanIntrospectionData0 = new BeanIntrospectionData(propertyDescriptorArray0);
      propertyDescriptor1.setExpert(true);
      PropertyDescriptor propertyDescriptor2 = beanIntrospectionData0.getDescriptor(""tDf1^:MbOuY>!b "");
}"
418,"    public PropertyDescriptor getDescriptor(final String name) {
        for (final PropertyDescriptor pd : getDescriptors()) {
            if (name.equals(pd.getName())) {
                return pd;
            }
        }
        return null;
    }","  public void test6()  throws Throwable  {
      PropertyDescriptor[] propertyDescriptorArray0 = new PropertyDescriptor[2];
      PropertyDescriptor propertyDescriptor0 = new PropertyDescriptor(""F]@AF|Xk+lJzpk"", (Method) null, (Method) null);
      propertyDescriptorArray0[0] = propertyDescriptor0;
      PropertyDescriptor propertyDescriptor1 = new PropertyDescriptor(""tDf1^:MbOuY>!b "", (Method) null, (Method) null);
      propertyDescriptorArray0[1] = propertyDescriptor1;
      BeanIntrospectionData beanIntrospectionData0 = new BeanIntrospectionData(propertyDescriptorArray0);
      propertyDescriptor1.setConstrained(true);
      PropertyDescriptor propertyDescriptor2 = beanIntrospectionData0.getDescriptor(""tDf1^:MbOuY>!b "");
}"
419,"    public PropertyDescriptor getDescriptor(final String name) {
        for (final PropertyDescriptor pd : getDescriptors()) {
            if (name.equals(pd.getName())) {
                return pd;
            }
        }
        return null;
    }","  public void test7()  throws Throwable  {
      PropertyDescriptor[] propertyDescriptorArray0 = new PropertyDescriptor[2];
      PropertyDescriptor propertyDescriptor0 = new PropertyDescriptor(""F]@AF|Xk+lJzpk"", (Method) null, (Method) null);
      propertyDescriptorArray0[0] = propertyDescriptor0;
      PropertyDescriptor propertyDescriptor1 = new PropertyDescriptor(""tDf1^:MbOuY>!b "", (Method) null, (Method) null);
      propertyDescriptorArray0[1] = propertyDescriptor1;
      BeanIntrospectionData beanIntrospectionData0 = new BeanIntrospectionData(propertyDescriptorArray0);
      propertyDescriptor1.setConstrained(true);
      PropertyDescriptor propertyDescriptor2 = beanIntrospectionData0.getDescriptor(""tDf1^:MbOuY>!b "");
}"
420,"    public PropertyDescriptor getDescriptor(final String name) {
        for (final PropertyDescriptor pd : getDescriptors()) {
            if (name.equals(pd.getName())) {
                return pd;
            }
        }
        return null;
    }","  public void test8()  throws Throwable  {
      PropertyDescriptor[] propertyDescriptorArray0 = new PropertyDescriptor[2];
      PropertyDescriptor propertyDescriptor0 = new PropertyDescriptor(""F]@AF|Xk+lJzpk"", (Method) null, (Method) null);
      propertyDescriptorArray0[0] = propertyDescriptor0;
      propertyDescriptor0.setBound(true);
      propertyDescriptorArray0[1] = propertyDescriptor0;
      BeanIntrospectionData beanIntrospectionData0 = new BeanIntrospectionData(propertyDescriptorArray0);
      PropertyDescriptor propertyDescriptor1 = beanIntrospectionData0.getDescriptor(""F]@AF|Xk+lJzpk"");
}"
421,"    public Method getWriteMethod(final Class<?> beanCls, final PropertyDescriptor desc) {
        Method method = desc.getWriteMethod();
        if (method == null) {
            final String methodName = writeMethodNames.get(desc.getName());
            if (methodName != null) {
                method = MethodUtils.getAccessibleMethod(beanCls, methodName,
                        desc.getPropertyType());
                if (method != null) {
                    try {
                        desc.setWriteMethod(method);
                    } catch (final IntrospectionException e) {
                        // ignore, in this case the method is not cached
                    }
                }
            }
        }

        return method;
    }","  public void test9()  throws Throwable  {
      PropertyDescriptor[] propertyDescriptorArray0 = new PropertyDescriptor[0];
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      BeanIntrospectionData beanIntrospectionData0 = new BeanIntrospectionData(propertyDescriptorArray0, hashMap0);
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        beanIntrospectionData0.getWriteMethod(class0, (PropertyDescriptor) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.beanutils.BeanIntrospectionData"", e);
      }
  }"
422,"    public Method getWriteMethod(final Class<?> beanCls, final PropertyDescriptor desc) {
        Method method = desc.getWriteMethod();
        if (method == null) {
            final String methodName = writeMethodNames.get(desc.getName());
            if (methodName != null) {
                method = MethodUtils.getAccessibleMethod(beanCls, methodName,
                        desc.getPropertyType());
                if (method != null) {
                    try {
                        desc.setWriteMethod(method);
                    } catch (final IntrospectionException e) {
                        // ignore, in this case the method is not cached
                    }
                }
            }
        }

        return method;
    }","  public void test10()  throws Throwable  {
      PropertyDescriptor[] propertyDescriptorArray0 = new PropertyDescriptor[2];
      PropertyDescriptor propertyDescriptor0 = new PropertyDescriptor(""tDf1^:MbOuY>!b "", (Method) null, (Method) null);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put(""tDf1^:MbOuY>!b "", ""tDf1^:MbOuY>!b "");
      BeanIntrospectionData beanIntrospectionData0 = new BeanIntrospectionData(propertyDescriptorArray0, hashMap0);
      // Undeclared exception!
      try { 
        beanIntrospectionData0.getWriteMethod((Class<?>) null, propertyDescriptor0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Class cannot be null
         //
         verifyException(""org.apache.commons.beanutils.MethodUtils$MethodDescriptor"", e);
      }
  }"
423,"    public PropertyDescriptor getDescriptor(final String name) {
        for (final PropertyDescriptor pd : getDescriptors()) {
            if (name.equals(pd.getName())) {
                return pd;
            }
        }
        return null;
    }","  public void test11()  throws Throwable  {
      PropertyDescriptor[] propertyDescriptorArray0 = new PropertyDescriptor[4];
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      BeanIntrospectionData beanIntrospectionData0 = new BeanIntrospectionData(propertyDescriptorArray0, hashMap0);
      // Undeclared exception!
      try { 
        beanIntrospectionData0.getDescriptor("" is not assignable from "");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.beanutils.BeanIntrospectionData"", e);
      }
  }"
424,"    public PropertyDescriptor[] getDescriptors() {
        return descriptors;
    }","  public void test12()  throws Throwable  {
      PropertyDescriptor[] propertyDescriptorArray0 = new PropertyDescriptor[0];
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      BeanIntrospectionData beanIntrospectionData0 = new BeanIntrospectionData(propertyDescriptorArray0, hashMap0);
      PropertyDescriptor[] propertyDescriptorArray1 = beanIntrospectionData0.getDescriptors();
}"
425,"    public Method getWriteMethod(final Class<?> beanCls, final PropertyDescriptor desc) {
        Method method = desc.getWriteMethod();
        if (method == null) {
            final String methodName = writeMethodNames.get(desc.getName());
            if (methodName != null) {
                method = MethodUtils.getAccessibleMethod(beanCls, methodName,
                        desc.getPropertyType());
                if (method != null) {
                    try {
                        desc.setWriteMethod(method);
                    } catch (final IntrospectionException e) {
                        // ignore, in this case the method is not cached
                    }
                }
            }
        }

        return method;
    }","  public void test13()  throws Throwable  {
      PropertyDescriptor[] propertyDescriptorArray0 = new PropertyDescriptor[1];
      PropertyDescriptor propertyDescriptor0 = new PropertyDescriptor(""tDf1^:MbOuY>!b "", (Method) null, (Method) null);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put(""tDf1^:MbOuY>!b "", ""tDf1^:MbOuY>!b "");
      BeanIntrospectionData beanIntrospectionData0 = new BeanIntrospectionData(propertyDescriptorArray0, hashMap0);
      Class<Annotation> class0 = Annotation.class;
      Method method0 = beanIntrospectionData0.getWriteMethod(class0, propertyDescriptor0);
}"
426,"    public Method getWriteMethod(final Class<?> beanCls, final PropertyDescriptor desc) {
        Method method = desc.getWriteMethod();
        if (method == null) {
            final String methodName = writeMethodNames.get(desc.getName());
            if (methodName != null) {
                method = MethodUtils.getAccessibleMethod(beanCls, methodName,
                        desc.getPropertyType());
                if (method != null) {
                    try {
                        desc.setWriteMethod(method);
                    } catch (final IntrospectionException e) {
                        // ignore, in this case the method is not cached
                    }
                }
            }
        }

        return method;
    }","  public void test14()  throws Throwable  {
      PropertyDescriptor[] propertyDescriptorArray0 = new PropertyDescriptor[2];
      PropertyDescriptor propertyDescriptor0 = new PropertyDescriptor(""xi%Z<AsF(]_nl"", (Method) null, (Method) null);
      propertyDescriptorArray0[0] = propertyDescriptor0;
      propertyDescriptorArray0[1] = propertyDescriptor0;
      BeanIntrospectionData beanIntrospectionData0 = new BeanIntrospectionData(propertyDescriptorArray0);
      Class<String> class0 = String.class;
      Method method0 = beanIntrospectionData0.getWriteMethod(class0, propertyDescriptor0);
}"
427,"    public PropertyDescriptor getDescriptor(final String name) {
        for (final PropertyDescriptor pd : getDescriptors()) {
            if (name.equals(pd.getName())) {
                return pd;
            }
        }
        return null;
    }","  public void test15()  throws Throwable  {
      PropertyDescriptor[] propertyDescriptorArray0 = new PropertyDescriptor[1];
      PropertyDescriptor propertyDescriptor0 = new PropertyDescriptor(""tDf1^:MbOuY>!b "", (Method) null, (Method) null);
      propertyDescriptorArray0[0] = propertyDescriptor0;
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      BeanIntrospectionData beanIntrospectionData0 = new BeanIntrospectionData(propertyDescriptorArray0, hashMap0);
      PropertyDescriptor propertyDescriptor1 = beanIntrospectionData0.getDescriptor(""tDf1^:MbOuY?!b "");
}"
428,"    public BeanIntrospectionData(final PropertyDescriptor[] descs) {
        this(descs, setUpWriteMethodNames(descs));
    }","  public void test16()  throws Throwable  {
      PropertyDescriptor[] propertyDescriptorArray0 = new PropertyDescriptor[2];
      BeanIntrospectionData beanIntrospectionData0 = null;
      try {
        beanIntrospectionData0 = new BeanIntrospectionData(propertyDescriptorArray0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.beanutils.BeanIntrospectionData"", e);
      }
  }"
429,"    public int compare( final T o1, final T o2 ) {

        if ( property == null ) {
            // compare the actual objects
            return internalCompare( o1, o2 );
        }

        try {
            final Object value1 = PropertyUtils.getProperty( o1, property );
            final Object value2 = PropertyUtils.getProperty( o2, property );
            return internalCompare( value1, value2 );
        }
        catch ( final IllegalAccessException iae ) {
            throw new RuntimeException( ""IllegalAccessException: "" + iae.toString() );
        }
        catch ( final InvocationTargetException ite ) {
            throw new RuntimeException( ""InvocationTargetException: "" + ite.toString() );
        }
        catch ( final NoSuchMethodException nsme ) {
            throw new RuntimeException( ""NoSuchMethodException: "" + nsme.toString() );
        }
    }","  public void test0()  throws Throwable  {
      BeanComparator<BeanComparator<String>> beanComparator0 = new BeanComparator<BeanComparator<String>>();
      BeanComparator<Integer> beanComparator1 = new BeanComparator<Integer>();
      ToLongFunction<Integer> toLongFunction0 = (ToLongFunction<Integer>) mock(ToLongFunction.class, new ViolatedAssumptionAnswer());
      Comparator<Integer> comparator0 = beanComparator1.thenComparingLong(toLongFunction0);
      BeanComparator<Object> beanComparator2 = new BeanComparator<Object>("""", beanComparator0);
      // Undeclared exception!
      try { 
        beanComparator2.compare(comparator0, beanComparator1);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // NoSuchMethodException: java.lang.NoSuchMethodException: Unknown property '' on class 'class java.util.Comparator$$Lambda$44/354158692'
         //
         verifyException(""org.apache.commons.beanutils.BeanComparator"", e);
      }
  }"
430,"    public String getProperty() {
        return property;
    }","  public void test1()  throws Throwable  {
      BeanComparator<Object> beanComparator0 = new BeanComparator<Object>();
      String string0 = beanComparator0.getProperty();
}"
431,"    public String getProperty() {
        return property;
    }","  public void test2()  throws Throwable  {
      BeanComparator<BeanComparator<Integer>> beanComparator0 = new BeanComparator<BeanComparator<Integer>>(""Bwkv:LE{)>M,e^[N]Bp"");
      BeanComparator<BeanComparator<String>> beanComparator1 = new BeanComparator<BeanComparator<String>>(""Bwkv:LE{)>M,e^[N]Bp"", beanComparator0);
      String string0 = beanComparator1.getProperty();
}"
432,"    public int compare( final T o1, final T o2 ) {

        if ( property == null ) {
            // compare the actual objects
            return internalCompare( o1, o2 );
        }

        try {
            final Object value1 = PropertyUtils.getProperty( o1, property );
            final Object value2 = PropertyUtils.getProperty( o2, property );
            return internalCompare( value1, value2 );
        }
        catch ( final IllegalAccessException iae ) {
            throw new RuntimeException( ""IllegalAccessException: "" + iae.toString() );
        }
        catch ( final InvocationTargetException ite ) {
            throw new RuntimeException( ""InvocationTargetException: "" + ite.toString() );
        }
        catch ( final NoSuchMethodException nsme ) {
            throw new RuntimeException( ""NoSuchMethodException: "" + nsme.toString() );
        }
    }","  public void test3()  throws Throwable  {
      BeanComparator<Object> beanComparator0 = new BeanComparator<Object>();
      BeanComparator<Integer> beanComparator1 = new BeanComparator<Integer>((String) null, beanComparator0);
      Integer integer0 = new Integer((-1605));
      int int0 = beanComparator1.compare(integer0, integer0);
}"
433,"    public int compare( final T o1, final T o2 ) {

        if ( property == null ) {
            // compare the actual objects
            return internalCompare( o1, o2 );
        }

        try {
            final Object value1 = PropertyUtils.getProperty( o1, property );
            final Object value2 = PropertyUtils.getProperty( o2, property );
            return internalCompare( value1, value2 );
        }
        catch ( final IllegalAccessException iae ) {
            throw new RuntimeException( ""IllegalAccessException: "" + iae.toString() );
        }
        catch ( final InvocationTargetException ite ) {
            throw new RuntimeException( ""InvocationTargetException: "" + ite.toString() );
        }
        catch ( final NoSuchMethodException nsme ) {
            throw new RuntimeException( ""NoSuchMethodException: "" + nsme.toString() );
        }
    }","  public void test4()  throws Throwable  {
      BeanComparator<String> beanComparator0 = new BeanComparator<String>();
      int int0 = beanComparator0.compare(""Bwkv:LE{)>M,e^[N]Bp"", ""0:3x4.;\""Hyb2"");
}"
434,"    public int compare( final T o1, final T o2 ) {

        if ( property == null ) {
            // compare the actual objects
            return internalCompare( o1, o2 );
        }

        try {
            final Object value1 = PropertyUtils.getProperty( o1, property );
            final Object value2 = PropertyUtils.getProperty( o2, property );
            return internalCompare( value1, value2 );
        }
        catch ( final IllegalAccessException iae ) {
            throw new RuntimeException( ""IllegalAccessException: "" + iae.toString() );
        }
        catch ( final InvocationTargetException ite ) {
            throw new RuntimeException( ""InvocationTargetException: "" + ite.toString() );
        }
        catch ( final NoSuchMethodException nsme ) {
            throw new RuntimeException( ""NoSuchMethodException: "" + nsme.toString() );
        }
    }","  public void test5()  throws Throwable  {
      BeanComparator<Integer> beanComparator0 = new BeanComparator<Integer>();
      Integer integer0 = new Integer((-920));
      Integer integer1 = new Integer((-176));
      int int0 = beanComparator0.compare(integer0, integer1);
}"
435,"    public int compare( final T o1, final T o2 ) {

        if ( property == null ) {
            // compare the actual objects
            return internalCompare( o1, o2 );
        }

        try {
            final Object value1 = PropertyUtils.getProperty( o1, property );
            final Object value2 = PropertyUtils.getProperty( o2, property );
            return internalCompare( value1, value2 );
        }
        catch ( final IllegalAccessException iae ) {
            throw new RuntimeException( ""IllegalAccessException: "" + iae.toString() );
        }
        catch ( final InvocationTargetException ite ) {
            throw new RuntimeException( ""InvocationTargetException: "" + ite.toString() );
        }
        catch ( final NoSuchMethodException nsme ) {
            throw new RuntimeException( ""NoSuchMethodException: "" + nsme.toString() );
        }
    }","  public void test6()  throws Throwable  {
      BeanComparator<Object> beanComparator0 = new BeanComparator<Object>();
      BeanComparator<Comparable<String>> beanComparator1 = new BeanComparator<Comparable<String>>(""r&:w;1"", beanComparator0);
      // Undeclared exception!
      try { 
        beanComparator1.compare((Comparable<String>) null, (Comparable<String>) null);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // No bean specified
         //
         verifyException(""org.apache.commons.beanutils.PropertyUtilsBean"", e);
      }
  }"
436,"    public int compare( final T o1, final T o2 ) {

        if ( property == null ) {
            // compare the actual objects
            return internalCompare( o1, o2 );
        }

        try {
            final Object value1 = PropertyUtils.getProperty( o1, property );
            final Object value2 = PropertyUtils.getProperty( o2, property );
            return internalCompare( value1, value2 );
        }
        catch ( final IllegalAccessException iae ) {
            throw new RuntimeException( ""IllegalAccessException: "" + iae.toString() );
        }
        catch ( final InvocationTargetException ite ) {
            throw new RuntimeException( ""InvocationTargetException: "" + ite.toString() );
        }
        catch ( final NoSuchMethodException nsme ) {
            throw new RuntimeException( ""NoSuchMethodException: "" + nsme.toString() );
        }
    }","  public void test7()  throws Throwable  {
      BeanComparator<Comparable<String>> beanComparator0 = new BeanComparator<Comparable<String>>();
      BeanComparator<Object> beanComparator1 = new BeanComparator<Object>();
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        beanComparator1.compare(object0, beanComparator0);
        fail(""Expecting exception: ClassCastException"");
      } catch(ClassCastException e) {
         //
         // java.lang.Object cannot be cast to java.lang.Comparable
         //
         verifyException(""org.apache.commons.collections.comparators.ComparableComparator"", e);
      }
  }"
437,"    public String getProperty() {
        return property;
    }","  public void test8()  throws Throwable  {
      BeanComparator<BeanComparator<Integer>> beanComparator0 = new BeanComparator<BeanComparator<Integer>>(""Bwkv:LE{)>M,e^[N]Bp"");
      beanComparator0.setProperty(""Bwkv:LE{)>M,e^[N]Bp"");
}"
438,"    public boolean equals(final Object o) {
        if (this == o) {
            return true;
        }
        if (!(o instanceof BeanComparator)) {
            return false;
        }

        final BeanComparator<?> beanComparator = (BeanComparator<?>) o;

        if (!comparator.equals(beanComparator.comparator)) {
            return false;
        }
        if (property != null)
        {
            if (!property.equals(beanComparator.property)) {
                return false;
            }
        }
        else
        {
            return (beanComparator.property == null);
        }

        return true;
    }","  public void test9()  throws Throwable  {
      BeanComparator<String> beanComparator0 = new BeanComparator<String>();
      BeanComparator<Object> beanComparator1 = new BeanComparator<Object>("""");
      boolean boolean0 = beanComparator0.equals(beanComparator1);
}"
439,"    public boolean equals(final Object o) {
        if (this == o) {
            return true;
        }
        if (!(o instanceof BeanComparator)) {
            return false;
        }

        final BeanComparator<?> beanComparator = (BeanComparator<?>) o;

        if (!comparator.equals(beanComparator.comparator)) {
            return false;
        }
        if (property != null)
        {
            if (!property.equals(beanComparator.property)) {
                return false;
            }
        }
        else
        {
            return (beanComparator.property == null);
        }

        return true;
    }","  public void test10()  throws Throwable  {
      BeanComparator<BeanComparator<Integer>> beanComparator0 = new BeanComparator<BeanComparator<Integer>>(""Bwkv:LE{)>M,e^[N]Bp"");
      BeanComparator<BeanComparator<String>> beanComparator1 = new BeanComparator<BeanComparator<String>>(""Bwkv:LE{)>M,e^[N]Bp"", beanComparator0);
      BeanComparator<Object> beanComparator2 = new BeanComparator<Object>(""' is null, so skipping ths setter"", beanComparator0);
      boolean boolean0 = beanComparator2.equals(beanComparator1);
}"
440,"    public boolean equals(final Object o) {
        if (this == o) {
            return true;
        }
        if (!(o instanceof BeanComparator)) {
            return false;
        }

        final BeanComparator<?> beanComparator = (BeanComparator<?>) o;

        if (!comparator.equals(beanComparator.comparator)) {
            return false;
        }
        if (property != null)
        {
            if (!property.equals(beanComparator.property)) {
                return false;
            }
        }
        else
        {
            return (beanComparator.property == null);
        }

        return true;
    }","  public void test11()  throws Throwable  {
      BeanComparator<BeanComparator<Object>> beanComparator0 = new BeanComparator<BeanComparator<Object>>("""");
      BeanComparator<Comparable<String>> beanComparator1 = new BeanComparator<Comparable<String>>("""", beanComparator0);
      BeanComparator<Object> beanComparator2 = new BeanComparator<Object>("""", beanComparator0);
      boolean boolean0 = beanComparator2.equals(beanComparator1);
}"
441,"    public boolean equals(final Object o) {
        if (this == o) {
            return true;
        }
        if (!(o instanceof BeanComparator)) {
            return false;
        }

        final BeanComparator<?> beanComparator = (BeanComparator<?>) o;

        if (!comparator.equals(beanComparator.comparator)) {
            return false;
        }
        if (property != null)
        {
            if (!property.equals(beanComparator.property)) {
                return false;
            }
        }
        else
        {
            return (beanComparator.property == null);
        }

        return true;
    }","  public void test12()  throws Throwable  {
      BeanComparator<String> beanComparator0 = new BeanComparator<String>();
      BeanComparator<Object> beanComparator1 = new BeanComparator<Object>("""");
      BeanComparator<Object> beanComparator2 = new BeanComparator<Object>("""", beanComparator1);
      boolean boolean0 = beanComparator0.equals(beanComparator2);
}"
442,"    public boolean equals(final Object o) {
        if (this == o) {
            return true;
        }
        if (!(o instanceof BeanComparator)) {
            return false;
        }

        final BeanComparator<?> beanComparator = (BeanComparator<?>) o;

        if (!comparator.equals(beanComparator.comparator)) {
            return false;
        }
        if (property != null)
        {
            if (!property.equals(beanComparator.property)) {
                return false;
            }
        }
        else
        {
            return (beanComparator.property == null);
        }

        return true;
    }","  public void test13()  throws Throwable  {
      BeanComparator<String> beanComparator0 = new BeanComparator<String>();
      BeanComparator<Object> beanComparator1 = new BeanComparator<Object>("""");
      BeanComparator<Object> beanComparator2 = new BeanComparator<Object>("""", beanComparator1);
      boolean boolean0 = beanComparator0.equals(beanComparator2);
}"
443,"    public boolean equals(final Object o) {
        if (this == o) {
            return true;
        }
        if (!(o instanceof BeanComparator)) {
            return false;
        }

        final BeanComparator<?> beanComparator = (BeanComparator<?>) o;

        if (!comparator.equals(beanComparator.comparator)) {
            return false;
        }
        if (property != null)
        {
            if (!property.equals(beanComparator.property)) {
                return false;
            }
        }
        else
        {
            return (beanComparator.property == null);
        }

        return true;
    }","  public void test14()  throws Throwable  {
      BeanComparator<Object> beanComparator0 = new BeanComparator<Object>();
      BeanComparator<Object> beanComparator1 = new BeanComparator<Object>();
      boolean boolean0 = beanComparator0.equals(beanComparator1);
}"
444,"    public boolean equals(final Object o) {
        if (this == o) {
            return true;
        }
        if (!(o instanceof BeanComparator)) {
            return false;
        }

        final BeanComparator<?> beanComparator = (BeanComparator<?>) o;

        if (!comparator.equals(beanComparator.comparator)) {
            return false;
        }
        if (property != null)
        {
            if (!property.equals(beanComparator.property)) {
                return false;
            }
        }
        else
        {
            return (beanComparator.property == null);
        }

        return true;
    }","  public void test15()  throws Throwable  {
      BeanComparator<Integer> beanComparator0 = new BeanComparator<Integer>();
      BeanComparator<Object> beanComparator1 = new BeanComparator<Object>("""", beanComparator0);
      Object object0 = new Object();
      boolean boolean0 = beanComparator1.equals(object0);
}"
445,"    public String getProperty() {
        return property;
    }","  public void test16()  throws Throwable  {
      BeanComparator<Integer> beanComparator0 = new BeanComparator<Integer>(""3"", (Comparator<?>) null);
}"
446,"    public int compare( final T o1, final T o2 ) {

        if ( property == null ) {
            // compare the actual objects
            return internalCompare( o1, o2 );
        }

        try {
            final Object value1 = PropertyUtils.getProperty( o1, property );
            final Object value2 = PropertyUtils.getProperty( o2, property );
            return internalCompare( value1, value2 );
        }
        catch ( final IllegalAccessException iae ) {
            throw new RuntimeException( ""IllegalAccessException: "" + iae.toString() );
        }
        catch ( final InvocationTargetException ite ) {
            throw new RuntimeException( ""InvocationTargetException: "" + ite.toString() );
        }
        catch ( final NoSuchMethodException nsme ) {
            throw new RuntimeException( ""NoSuchMethodException: "" + nsme.toString() );
        }
    }","  public void test17()  throws Throwable  {
      Comparator<Comparable<Object>> comparator0 = Comparator.naturalOrder();
      BeanComparator<String> beanComparator0 = new BeanComparator<String>((String) null, comparator0);
      // Undeclared exception!
      try { 
        beanComparator0.compare((String) null, (String) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.util.Comparators$NaturalOrderComparator"", e);
      }
  }"
447,"    public int hashCode() {
        int result;
        result = comparator.hashCode();
        return result;
    }","  public void test18()  throws Throwable  {
      BeanComparator<Integer> beanComparator0 = new BeanComparator<Integer>();
      BeanComparator<Object> beanComparator1 = new BeanComparator<Object>("""", beanComparator0);
      beanComparator1.hashCode();
  }"
448,"    public String getProperty() {
        return property;
    }","  public void test19()  throws Throwable  {
      BeanComparator<Integer> beanComparator0 = new BeanComparator<Integer>();
      BeanComparator<Object> beanComparator1 = new BeanComparator<Object>("""", beanComparator0);
      String string0 = beanComparator1.getProperty();
}"
449,"    public Comparator<?> getComparator() {
        return comparator;
    }","  public void test20()  throws Throwable  {
      BeanComparator<Integer> beanComparator0 = new BeanComparator<Integer>();
      Comparator<?> comparator0 = beanComparator0.getComparator();
}"
450,"    public boolean isReturnNull() {
        return returnNull;
    }","  public void test0()  throws Throwable  {
      DynaProperty[] dynaPropertyArray0 = new DynaProperty[0];
      LazyDynaMap lazyDynaMap0 = new LazyDynaMap(dynaPropertyArray0);
}"
451,"    public String getName() {
        return this.name;
    }","  public void test1()  throws Throwable  {
      DynaProperty[] dynaPropertyArray0 = new DynaProperty[0];
      LazyDynaMap lazyDynaMap0 = new LazyDynaMap(dynaPropertyArray0);
}"
452,"    public String getName() {
        return this.name;
    }","  public void test2()  throws Throwable  {
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      doReturn(false).when(resultSet0).next();
      RowSetDynaClass rowSetDynaClass0 = new RowSetDynaClass(resultSet0, true, true);
      LazyDynaMap lazyDynaMap0 = new LazyDynaMap(rowSetDynaClass0);
}"
453,"    public boolean isReturnNull() {
        return returnNull;
    }","  public void test3()  throws Throwable  {
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      doReturn(false).when(resultSet0).next();
      RowSetDynaClass rowSetDynaClass0 = new RowSetDynaClass(resultSet0, true, true);
      LazyDynaMap lazyDynaMap0 = new LazyDynaMap(rowSetDynaClass0);
}"
454,"    public boolean isReturnNull() {
        return returnNull;
    }","  public void test4()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      LazyDynaMap lazyDynaMap0 = new LazyDynaMap(hashMap0);
}"
455,"    public String getName() {
        return this.name;
    }","  public void test5()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      LazyDynaMap lazyDynaMap0 = new LazyDynaMap(hashMap0);
}"
456,"    public LazyDynaMap() {
        this(null, (Map<String, Object>)null);
    }","  public void test6()  throws Throwable  {
      DynaProperty[] dynaPropertyArray0 = new DynaProperty[3];
      LazyDynaMap lazyDynaMap0 = null;
      try {
        lazyDynaMap0 = new LazyDynaMap(""'T}C##nQV%4C7Fe9P#"", dynaPropertyArray0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.beanutils.LazyDynaMap"", e);
      }
  }"
457,"    public String getName() {
        return this.name;
    }","  public void test7()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      LazyDynaMap lazyDynaMap0 = new LazyDynaMap(""]fGE<U\""I3Jc"", hashMap0);
}"
458,"    public boolean isReturnNull() {
        return returnNull;
    }","  public void test8()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      LazyDynaMap lazyDynaMap0 = new LazyDynaMap(""]fGE<U\""I3Jc"", hashMap0);
}"
459,"    public String getName() {
        return this.name;
    }","  public void test9()  throws Throwable  {
      LazyDynaMap lazyDynaMap0 = new LazyDynaMap("""");
}"
460,"    public boolean isReturnNull() {
        return returnNull;
    }","  public void test10()  throws Throwable  {
      LazyDynaMap lazyDynaMap0 = new LazyDynaMap("""");
}"
461,"    public String getName() {
        return this.name;
    }","  public void test11()  throws Throwable  {
      LazyDynaMap lazyDynaMap0 = new LazyDynaMap();
}"
462,"    public boolean isReturnNull() {
        return returnNull;
    }","  public void test12()  throws Throwable  {
      LazyDynaMap lazyDynaMap0 = new LazyDynaMap();
}"
463,"    public LazyDynaMap() {
        this(null, (Map<String, Object>)null);
    }","  public void test13()  throws Throwable  {
      LazyDynaMap lazyDynaMap0 = null;
      try {
        lazyDynaMap0 = new LazyDynaMap((DynaClass) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.beanutils.LazyDynaMap"", e);
      }
  }"
464,"    public boolean isIgnoreNull() {
        return ignoreNull;
    }","  public void test0()  throws Throwable  {
      BeanPropertyValueEqualsPredicate beanPropertyValueEqualsPredicate0 = new BeanPropertyValueEqualsPredicate(""s]9Q35b[r.z!- p~Q{"", ""s]9Q35b[r.z!- p~Q{"", true);
      boolean boolean0 = beanPropertyValueEqualsPredicate0.isIgnoreNull();
}"
465,"    public Object getPropertyValue() {
        return propertyValue;
    }","  public void test1()  throws Throwable  {
      BeanPropertyValueEqualsPredicate beanPropertyValueEqualsPredicate0 = new BeanPropertyValueEqualsPredicate(""PE?u;?{fc6kL"", (Object) null);
      Object object0 = beanPropertyValueEqualsPredicate0.getPropertyValue();
}"
466,"    public BeanPropertyValueEqualsPredicate(final String propertyName, final Object propertyValue) {
        this(propertyName, propertyValue, false);
    }","  public void test2()  throws Throwable  {
      Object object0 = new Object();
      BeanPropertyValueEqualsPredicate beanPropertyValueEqualsPredicate0 = null;
      try {
        beanPropertyValueEqualsPredicate0 = new BeanPropertyValueEqualsPredicate("""", object0, true);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // propertyName cannot be null or empty
         //
         verifyException(""org.apache.commons.beanutils.BeanPropertyValueEqualsPredicate"", e);
      }
  }"
467,"    public BeanPropertyValueEqualsPredicate(final String propertyName, final Object propertyValue) {
        this(propertyName, propertyValue, false);
    }","  public void test3()  throws Throwable  {
      BeanPropertyValueEqualsPredicate beanPropertyValueEqualsPredicate0 = null;
      try {
        beanPropertyValueEqualsPredicate0 = new BeanPropertyValueEqualsPredicate((String) null, (Object) null, true);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // propertyName cannot be null or empty
         //
         verifyException(""org.apache.commons.beanutils.BeanPropertyValueEqualsPredicate"", e);
      }
  }"
468,"    protected boolean evaluateValue(final Object expected, final Object actual) {
        return (expected == actual) || ((expected != null) && expected.equals(actual));
    }","  public void test4()  throws Throwable  {
      Object object0 = new Object();
      BeanPropertyValueEqualsPredicate beanPropertyValueEqualsPredicate0 = new BeanPropertyValueEqualsPredicate(""Bnable to acceu the pa%pertwprovided."", object0);
      boolean boolean0 = beanPropertyValueEqualsPredicate0.evaluateValue((Object) null, ""Bnable to acceu the pa%pertwprovided."");
}"
469,"    protected boolean evaluateValue(final Object expected, final Object actual) {
        return (expected == actual) || ((expected != null) && expected.equals(actual));
    }","  public void test5()  throws Throwable  {
      BeanPropertyValueEqualsPredicate beanPropertyValueEqualsPredicate0 = new BeanPropertyValueEqualsPredicate(""Convet null vl-e  tyUe '"", ""Convet null vl-e  tyUe '"");
      Object object0 = new Object();
      boolean boolean0 = beanPropertyValueEqualsPredicate0.evaluateValue(""Convet null vl-e  tyUe '"", object0);
}"
470,"    protected boolean evaluateValue(final Object expected, final Object actual) {
        return (expected == actual) || ((expected != null) && expected.equals(actual));
    }","  public void test6()  throws Throwable  {
      BeanPropertyValueEqualsPredicate beanPropertyValueEqualsPredicate0 = new BeanPropertyValueEqualsPredicate(""Convet null vl-e  tyUe '"", ""Convet null vl-e  tyUe '"");
      boolean boolean0 = beanPropertyValueEqualsPredicate0.evaluateValue(""Convet null vl-e  tyUe '"", ""Convet null vl-e  tyUe '"");
}"
471,"    public boolean evaluate(final Object object) {

        boolean evaluation = false;

        try {
            evaluation = evaluateValue(propertyValue,
                    PropertyUtils.getProperty(object, propertyName));
        } catch (final IllegalArgumentException e) {
            final String errorMsg = ""Problem during evaluation. Null value encountered in property path..."";

            if (ignoreNull) {
                log.warn(""WARNING: "" + errorMsg + e);
            } else {
                final IllegalArgumentException iae = new IllegalArgumentException(errorMsg);
                if (!BeanUtils.initCause(iae, e)) {
                    log.error(errorMsg, e);
                }
                throw iae;
            }
        } catch (final IllegalAccessException e) {
            final String errorMsg = ""Unable to access the property provided."";
            final IllegalArgumentException iae = new IllegalArgumentException(errorMsg);
            if (!BeanUtils.initCause(iae, e)) {
                log.error(errorMsg, e);
            }
            throw iae;
        } catch (final InvocationTargetException e) {
            final String errorMsg = ""Exception occurred in property's getter"";
            final IllegalArgumentException iae = new IllegalArgumentException(errorMsg);
            if (!BeanUtils.initCause(iae, e)) {
                log.error(errorMsg, e);
            }
            throw iae;
        } catch (final NoSuchMethodException e) {
            final String errorMsg = ""Property not found."";
            final IllegalArgumentException iae = new IllegalArgumentException(errorMsg);
            if (!BeanUtils.initCause(iae, e)) {
                log.error(errorMsg, e);
            }
            throw iae;
        }

        return evaluation;
    }","  public void test7()  throws Throwable  {
      BeanPropertyValueEqualsPredicate beanPropertyValueEqualsPredicate0 = new BeanPropertyValueEqualsPredicate(""Convet null vl-e  tyUe '"", ""Convet null vl-e  tyUe '"");
      // Undeclared exception!
      try { 
        beanPropertyValueEqualsPredicate0.evaluate(""Convet null vl-e  tyUe '"");
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Property not found.
         //
         verifyException(""org.apache.commons.beanutils.BeanPropertyValueEqualsPredicate"", e);
      }
  }"
472,"    public boolean isIgnoreNull() {
        return ignoreNull;
    }","  public void test8()  throws Throwable  {
      BeanPropertyValueEqualsPredicate beanPropertyValueEqualsPredicate0 = new BeanPropertyValueEqualsPredicate(""C|V7(`z`75W~phis"", ""C|V7(`z`75W~phis"", true);
}"
473,"    public boolean evaluate(final Object object) {

        boolean evaluation = false;

        try {
            evaluation = evaluateValue(propertyValue,
                    PropertyUtils.getProperty(object, propertyName));
        } catch (final IllegalArgumentException e) {
            final String errorMsg = ""Problem during evaluation. Null value encountered in property path..."";

            if (ignoreNull) {
                log.warn(""WARNING: "" + errorMsg + e);
            } else {
                final IllegalArgumentException iae = new IllegalArgumentException(errorMsg);
                if (!BeanUtils.initCause(iae, e)) {
                    log.error(errorMsg, e);
                }
                throw iae;
            }
        } catch (final IllegalAccessException e) {
            final String errorMsg = ""Unable to access the property provided."";
            final IllegalArgumentException iae = new IllegalArgumentException(errorMsg);
            if (!BeanUtils.initCause(iae, e)) {
                log.error(errorMsg, e);
            }
            throw iae;
        } catch (final InvocationTargetException e) {
            final String errorMsg = ""Exception occurred in property's getter"";
            final IllegalArgumentException iae = new IllegalArgumentException(errorMsg);
            if (!BeanUtils.initCause(iae, e)) {
                log.error(errorMsg, e);
            }
            throw iae;
        } catch (final NoSuchMethodException e) {
            final String errorMsg = ""Property not found."";
            final IllegalArgumentException iae = new IllegalArgumentException(errorMsg);
            if (!BeanUtils.initCause(iae, e)) {
                log.error(errorMsg, e);
            }
            throw iae;
        }

        return evaluation;
    }","  public void test9()  throws Throwable  {
      BeanPropertyValueEqualsPredicate beanPropertyValueEqualsPredicate0 = new BeanPropertyValueEqualsPredicate(""C|V7(`z`75W~phis"", ""C|V7(`z`75W~phis"", true);
      Object object0 = new Object();
      boolean boolean0 = beanPropertyValueEqualsPredicate0.evaluate(object0);
}"
474,"    public boolean evaluate(final Object object) {

        boolean evaluation = false;

        try {
            evaluation = evaluateValue(propertyValue,
                    PropertyUtils.getProperty(object, propertyName));
        } catch (final IllegalArgumentException e) {
            final String errorMsg = ""Problem during evaluation. Null value encountered in property path..."";

            if (ignoreNull) {
                log.warn(""WARNING: "" + errorMsg + e);
            } else {
                final IllegalArgumentException iae = new IllegalArgumentException(errorMsg);
                if (!BeanUtils.initCause(iae, e)) {
                    log.error(errorMsg, e);
                }
                throw iae;
            }
        } catch (final IllegalAccessException e) {
            final String errorMsg = ""Unable to access the property provided."";
            final IllegalArgumentException iae = new IllegalArgumentException(errorMsg);
            if (!BeanUtils.initCause(iae, e)) {
                log.error(errorMsg, e);
            }
            throw iae;
        } catch (final InvocationTargetException e) {
            final String errorMsg = ""Exception occurred in property's getter"";
            final IllegalArgumentException iae = new IllegalArgumentException(errorMsg);
            if (!BeanUtils.initCause(iae, e)) {
                log.error(errorMsg, e);
            }
            throw iae;
        } catch (final NoSuchMethodException e) {
            final String errorMsg = ""Property not found."";
            final IllegalArgumentException iae = new IllegalArgumentException(errorMsg);
            if (!BeanUtils.initCause(iae, e)) {
                log.error(errorMsg, e);
            }
            throw iae;
        }

        return evaluation;
    }","  public void test10()  throws Throwable  {
      BeanPropertyValueEqualsPredicate beanPropertyValueEqualsPredicate0 = new BeanPropertyValueEqualsPredicate(""(e4f+$p"", ""(e4f+$p"");
      // Undeclared exception!
      try { 
        beanPropertyValueEqualsPredicate0.evaluate(""(e4f+$p"");
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Problem during evaluation. Null value encountered in property path...
         //
         verifyException(""org.apache.commons.beanutils.BeanPropertyValueEqualsPredicate"", e);
      }
  }"
475,"    public BeanPropertyValueEqualsPredicate(final String propertyName, final Object propertyValue) {
        this(propertyName, propertyValue, false);
    }","  public void test11()  throws Throwable  {
      BeanPropertyValueEqualsPredicate beanPropertyValueEqualsPredicate0 = null;
      try {
        beanPropertyValueEqualsPredicate0 = new BeanPropertyValueEqualsPredicate((String) null, (Object) null);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // propertyName cannot be null or empty
         //
         verifyException(""org.apache.commons.beanutils.BeanPropertyValueEqualsPredicate"", e);
      }
  }"
476,"    public boolean isIgnoreNull() {
        return ignoreNull;
    }","  public void test12()  throws Throwable  {
      BeanPropertyValueEqualsPredicate beanPropertyValueEqualsPredicate0 = new BeanPropertyValueEqualsPredicate(""Convet null vl-e  tyUe '"", ""Convet null vl-e  tyUe '"");
      boolean boolean0 = beanPropertyValueEqualsPredicate0.isIgnoreNull();
}"
477,"    public boolean isIgnoreNull() {
        return ignoreNull;
    }","  public void test13()  throws Throwable  {
      BeanPropertyValueEqualsPredicate beanPropertyValueEqualsPredicate0 = new BeanPropertyValueEqualsPredicate(""Convet null vl-e  tyUe '"", ""Convet null vl-e  tyUe '"");
      beanPropertyValueEqualsPredicate0.getPropertyName();
}"
478,"    public boolean isIgnoreNull() {
        return ignoreNull;
    }","  public void test14()  throws Throwable  {
      BeanPropertyValueEqualsPredicate beanPropertyValueEqualsPredicate0 = new BeanPropertyValueEqualsPredicate(""C|V7(`z`75W~phis"", ""C|V7(`z`75W~phis"", true);
      beanPropertyValueEqualsPredicate0.getPropertyValue();
}"
479,"    public static <T> T invokeConstructor(final Class<T> klass, final Object arg)
        throws
            NoSuchMethodException,
            IllegalAccessException,
            InvocationTargetException,
            InstantiationException {

        final Object[] args = toArray(arg);
        return invokeConstructor(klass, args);
    }","  public void test0()  throws Throwable  {
      Class<String> class0 = String.class;
      try { 
        ConstructorUtils.invokeConstructor(class0, (Object) class0);
        fail(""Expecting exception: NoSuchMethodException"");
      } catch(NoSuchMethodException e) {
         //
         // No such accessible constructor on object: java.lang.String
         //
         verifyException(""org.apache.commons.beanutils.ConstructorUtils"", e);
      }
  }"
480,"    public static <T> T invokeExactConstructor(final Class<T> klass, final Object arg)
        throws
            NoSuchMethodException,
            IllegalAccessException,
            InvocationTargetException,
            InstantiationException {

        final Object[] args = toArray(arg);
        return invokeExactConstructor(klass, args);
    }","  public void test1()  throws Throwable  {
      Class<String> class0 = String.class;
      String string0 = ConstructorUtils.invokeExactConstructor(class0, (Object) null);
}"
481,"    public static <T> Constructor<T> getAccessibleConstructor(
        final Class<T> klass,
        final Class<?> parameterType) {

        final Class<?>[] parameterTypes = { parameterType };
        return getAccessibleConstructor(klass, parameterTypes);
    }","  public void test2()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Constructor<Object> constructor0 = ConstructorUtils.getAccessibleConstructor(class0, (Class<?>[]) null);
      constructor0.setAccessible(true);
      Constructor<Object> constructor1 = ConstructorUtils.getAccessibleConstructor(constructor0);
}"
482,"    public static <T> Constructor<T> getAccessibleConstructor(
        final Class<T> klass,
        final Class<?> parameterType) {

        final Class<?>[] parameterTypes = { parameterType };
        return getAccessibleConstructor(klass, parameterTypes);
    }","  public void test3()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Constructor<Integer> constructor0 = ConstructorUtils.getAccessibleConstructor(class0, (Class<?>[]) null);
}"
483,"    public static <T> Constructor<T> getAccessibleConstructor(
        final Class<T> klass,
        final Class<?> parameterType) {

        final Class<?>[] parameterTypes = { parameterType };
        return getAccessibleConstructor(klass, parameterTypes);
    }","  public void test4()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Class<String> class1 = String.class;
      Constructor<Integer> constructor0 = ConstructorUtils.getAccessibleConstructor(class0, (Class<?>) class1);
}"
484,"    public static <T> Constructor<T> getAccessibleConstructor(
        final Class<T> klass,
        final Class<?> parameterType) {

        final Class<?>[] parameterTypes = { parameterType };
        return getAccessibleConstructor(klass, parameterTypes);
    }","  public void test5()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Class<String> class1 = String.class;
      Constructor<Integer> constructor0 = ConstructorUtils.getAccessibleConstructor(class0, (Class<?>) class1);
}"
485,"    public static <T> T invokeExactConstructor(final Class<T> klass, final Object arg)
        throws
            NoSuchMethodException,
            IllegalAccessException,
            InvocationTargetException,
            InstantiationException {

        final Object[] args = toArray(arg);
        return invokeExactConstructor(klass, args);
    }","  public void test6()  throws Throwable  {
      // Undeclared exception!
      try { 
        ConstructorUtils.invokeExactConstructor((Class<Object>) null, (Object[]) null, (Class<?>[]) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.beanutils.ConstructorUtils"", e);
      }
  }"
486,"    public static <T> T invokeExactConstructor(final Class<T> klass, final Object arg)
        throws
            NoSuchMethodException,
            IllegalAccessException,
            InvocationTargetException,
            InstantiationException {

        final Object[] args = toArray(arg);
        return invokeExactConstructor(klass, args);
    }","  public void test7()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Object[] objectArray0 = new Object[9];
      // Undeclared exception!
      try { 
        ConstructorUtils.invokeExactConstructor(class0, objectArray0, (Class<?>[]) null);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
      }
  }"
487,"    public static <T> T invokeExactConstructor(final Class<T> klass, final Object arg)
        throws
            NoSuchMethodException,
            IllegalAccessException,
            InvocationTargetException,
            InstantiationException {

        final Object[] args = toArray(arg);
        return invokeExactConstructor(klass, args);
    }","  public void test8()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) """";
      try { 
        ConstructorUtils.invokeExactConstructor(class0, objectArray0);
        fail(""Expecting exception: InvocationTargetException"");
      } catch(InvocationTargetException e) {
      }
  }"
488,"    public static <T> T invokeExactConstructor(final Class<T> klass, final Object arg)
        throws
            NoSuchMethodException,
            IllegalAccessException,
            InvocationTargetException,
            InstantiationException {

        final Object[] args = toArray(arg);
        return invokeExactConstructor(klass, args);
    }","  public void test9()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        ConstructorUtils.invokeExactConstructor(class0, objectArray0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.beanutils.ConstructorUtils"", e);
      }
  }"
489,"    public static <T> T invokeExactConstructor(final Class<T> klass, final Object arg)
        throws
            NoSuchMethodException,
            IllegalAccessException,
            InvocationTargetException,
            InstantiationException {

        final Object[] args = toArray(arg);
        return invokeExactConstructor(klass, args);
    }","  public void test10()  throws Throwable  {
      // Undeclared exception!
      try { 
        ConstructorUtils.invokeExactConstructor((Class<Integer>) null, (Object) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.beanutils.ConstructorUtils"", e);
      }
  }"
490,"    public static <T> T invokeExactConstructor(final Class<T> klass, final Object arg)
        throws
            NoSuchMethodException,
            IllegalAccessException,
            InvocationTargetException,
            InstantiationException {

        final Object[] args = toArray(arg);
        return invokeExactConstructor(klass, args);
    }","  public void test11()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      try { 
        ConstructorUtils.invokeExactConstructor(class0, (Object) class0);
        fail(""Expecting exception: NoSuchMethodException"");
      } catch(NoSuchMethodException e) {
         //
         // No such accessible constructor on object: java.lang.Integer
         //
         verifyException(""org.apache.commons.beanutils.ConstructorUtils"", e);
      }
  }"
491,"    public static <T> T invokeConstructor(final Class<T> klass, final Object arg)
        throws
            NoSuchMethodException,
            IllegalAccessException,
            InvocationTargetException,
            InstantiationException {

        final Object[] args = toArray(arg);
        return invokeConstructor(klass, args);
    }","  public void test12()  throws Throwable  {
      Class<String> class0 = String.class;
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 1);
      // Undeclared exception!
      try { 
        ConstructorUtils.invokeConstructor(class0, (Object[]) classArray0, (Class<?>[]) classArray0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
492,"    public static <T> T invokeConstructor(final Class<T> klass, final Object arg)
        throws
            NoSuchMethodException,
            IllegalAccessException,
            InvocationTargetException,
            InstantiationException {

        final Object[] args = toArray(arg);
        return invokeConstructor(klass, args);
    }","  public void test13()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        ConstructorUtils.invokeConstructor(class0, objectArray0, (Class<?>[]) null);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
      }
  }"
493,"    public static <T> T invokeConstructor(final Class<T> klass, final Object arg)
        throws
            NoSuchMethodException,
            IllegalAccessException,
            InvocationTargetException,
            InstantiationException {

        final Object[] args = toArray(arg);
        return invokeConstructor(klass, args);
    }","  public void test14()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) class0;
      objectArray0[1] = (Object) class0;
      objectArray0[2] = (Object) class0;
      objectArray0[3] = (Object) class0;
      objectArray0[4] = (Object) class0;
      objectArray0[5] = (Object) class0;
      objectArray0[6] = (Object) class0;
      try { 
        ConstructorUtils.invokeConstructor(class0, objectArray0);
        fail(""Expecting exception: NoSuchMethodException"");
      } catch(NoSuchMethodException e) {
         //
         // No such accessible constructor on object: java.lang.Object
         //
         verifyException(""org.apache.commons.beanutils.ConstructorUtils"", e);
      }
  }"
494,"    public static <T> T invokeConstructor(final Class<T> klass, final Object arg)
        throws
            NoSuchMethodException,
            IllegalAccessException,
            InvocationTargetException,
            InstantiationException {

        final Object[] args = toArray(arg);
        return invokeConstructor(klass, args);
    }","  public void test15()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      try { 
        ConstructorUtils.invokeConstructor(class0, (Object) ""[<XM!`W"");
        fail(""Expecting exception: InvocationTargetException"");
      } catch(InvocationTargetException e) {
      }
  }"
495,"    public static <T> T invokeConstructor(final Class<T> klass, final Object arg)
        throws
            NoSuchMethodException,
            IllegalAccessException,
            InvocationTargetException,
            InstantiationException {

        final Object[] args = toArray(arg);
        return invokeConstructor(klass, args);
    }","  public void test16()  throws Throwable  {
      // Undeclared exception!
      try { 
        ConstructorUtils.invokeConstructor((Class<String>) null, (Object) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.beanutils.ConstructorUtils"", e);
      }
  }"
496,"    public static <T> Constructor<T> getAccessibleConstructor(
        final Class<T> klass,
        final Class<?> parameterType) {

        final Class<?>[] parameterTypes = { parameterType };
        return getAccessibleConstructor(klass, parameterTypes);
    }","  public void test17()  throws Throwable  {
      // Undeclared exception!
      try { 
        ConstructorUtils.getAccessibleConstructor((Class<Integer>) null, (Class<?>[]) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.beanutils.ConstructorUtils"", e);
      }
  }"
497,"    public static <T> Constructor<T> getAccessibleConstructor(
        final Class<T> klass,
        final Class<?> parameterType) {

        final Class<?>[] parameterTypes = { parameterType };
        return getAccessibleConstructor(klass, parameterTypes);
    }","  public void test18()  throws Throwable  {
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        ConstructorUtils.getAccessibleConstructor((Class<Integer>) null, (Class<?>) class0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.beanutils.ConstructorUtils"", e);
      }
  }"
498,"    public static <T> T invokeExactConstructor(final Class<T> klass, final Object arg)
        throws
            NoSuchMethodException,
            IllegalAccessException,
            InvocationTargetException,
            InstantiationException {

        final Object[] args = toArray(arg);
        return invokeExactConstructor(klass, args);
    }","  public void test19()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 1);
      try { 
        ConstructorUtils.invokeExactConstructor(class0, (Object[]) null, (Class<?>[]) classArray0);
        fail(""Expecting exception: NoSuchMethodException"");
      } catch(NoSuchMethodException e) {
         //
         // No such accessible constructor on object: java.lang.Integer
         //
         verifyException(""org.apache.commons.beanutils.ConstructorUtils"", e);
      }
  }"
499,"    public static <T> T invokeExactConstructor(final Class<T> klass, final Object arg)
        throws
            NoSuchMethodException,
            IllegalAccessException,
            InvocationTargetException,
            InstantiationException {

        final Object[] args = toArray(arg);
        return invokeExactConstructor(klass, args);
    }","  public void test20()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 0);
      Object object0 = ConstructorUtils.invokeExactConstructor(class0, (Object[]) classArray0, (Class<?>[]) classArray0);
}"
500,"    public static <T> T invokeConstructor(final Class<T> klass, final Object arg)
        throws
            NoSuchMethodException,
            IllegalAccessException,
            InvocationTargetException,
            InstantiationException {

        final Object[] args = toArray(arg);
        return invokeConstructor(klass, args);
    }","  public void test21()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Object object0 = ConstructorUtils.invokeConstructor(class0, (Object[]) null);
}"
501,"    public static <T> T invokeConstructor(final Class<T> klass, final Object arg)
        throws
            NoSuchMethodException,
            IllegalAccessException,
            InvocationTargetException,
            InstantiationException {

        final Object[] args = toArray(arg);
        return invokeConstructor(klass, args);
    }","  public void test22()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Object[] objectArray0 = new Object[7];
      // Undeclared exception!
      try { 
        ConstructorUtils.invokeConstructor(class0, objectArray0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.beanutils.ConstructorUtils"", e);
      }
  }"
502,"    public static <T> Constructor<T> getAccessibleConstructor(
        final Class<T> klass,
        final Class<?> parameterType) {

        final Class<?>[] parameterTypes = { parameterType };
        return getAccessibleConstructor(klass, parameterTypes);
    }","  public void test23()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Constructor<Object> constructor0 = ConstructorUtils.getAccessibleConstructor(class0, (Class<?>[]) null);
      Constructor<Object> constructor1 = ConstructorUtils.getAccessibleConstructor(constructor0);
}"
503,"    public static <T> T invokeConstructor(final Class<T> klass, final Object arg)
        throws
            NoSuchMethodException,
            IllegalAccessException,
            InvocationTargetException,
            InstantiationException {

        final Object[] args = toArray(arg);
        return invokeConstructor(klass, args);
    }","  public void test24()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Integer integer0 = new Integer((-191));
      Integer integer1 = ConstructorUtils.invokeConstructor(class0, (Object) integer0);
}"
504,"    public static <T> Constructor<T> getAccessibleConstructor(
        final Class<T> klass,
        final Class<?> parameterType) {

        final Class<?>[] parameterTypes = { parameterType };
        return getAccessibleConstructor(klass, parameterTypes);
    }","  public void test25()  throws Throwable  {
      Constructor<Object> constructor0 = ConstructorUtils.getAccessibleConstructor((Constructor<Object>) null);
}"
505,"    public static <T> T invokeExactConstructor(final Class<T> klass, final Object arg)
        throws
            NoSuchMethodException,
            IllegalAccessException,
            InvocationTargetException,
            InstantiationException {

        final Object[] args = toArray(arg);
        return invokeExactConstructor(klass, args);
    }","  public void test26()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Object object0 = ConstructorUtils.invokeExactConstructor(class0, (Object[]) null);
}"
506,"    public static <T> T invokeConstructor(final Class<T> klass, final Object arg)
        throws
            NoSuchMethodException,
            IllegalAccessException,
            InvocationTargetException,
            InstantiationException {

        final Object[] args = toArray(arg);
        return invokeConstructor(klass, args);
    }","  public void test27()  throws Throwable  {
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 4);
      Class<Object> class0 = Object.class;
      classArray0[0] = class0;
      Class<String> class1 = String.class;
      try { 
        ConstructorUtils.invokeConstructor(class1, (Object[]) classArray0, (Class<?>[]) classArray0);
        fail(""Expecting exception: NoSuchMethodException"");
      } catch(NoSuchMethodException e) {
         //
         // No such accessible constructor on object: java.lang.String
         //
         verifyException(""org.apache.commons.beanutils.ConstructorUtils"", e);
      }
  }"
507,"    public static <T> T invokeConstructor(final Class<T> klass, final Object arg)
        throws
            NoSuchMethodException,
            IllegalAccessException,
            InvocationTargetException,
            InstantiationException {

        final Object[] args = toArray(arg);
        return invokeConstructor(klass, args);
    }","  public void test28()  throws Throwable  {
      Class<String> class0 = String.class;
      String string0 = ConstructorUtils.invokeConstructor(class0, (Object[]) null, (Class<?>[]) null);
}"
508,"    public static <T> Constructor<T> getAccessibleConstructor(
        final Class<T> klass,
        final Class<?> parameterType) {

        final Class<?>[] parameterTypes = { parameterType };
        return getAccessibleConstructor(klass, parameterTypes);
    }","  public void test29()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Class<Object> class1 = Object.class;
      Constructor<Integer> constructor0 = ConstructorUtils.getAccessibleConstructor(class0, (Class<?>) class1);
}"
509,"    public static <T> T invokeExactConstructor(final Class<T> klass, final Object arg)
        throws
            NoSuchMethodException,
            IllegalAccessException,
            InvocationTargetException,
            InstantiationException {

        final Object[] args = toArray(arg);
        return invokeExactConstructor(klass, args);
    }","  public void test30()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      try { 
        ConstructorUtils.invokeExactConstructor(class0, (Object) """");
        fail(""Expecting exception: InvocationTargetException"");
      } catch(InvocationTargetException e) {
      }
  }"
510,,"  public void test31()  throws Throwable  {
      ConstructorUtils constructorUtils0 = new ConstructorUtils();
  }"
511,"    public static <T> T invokeExactConstructor(final Class<T> klass, final Object arg)
        throws
            NoSuchMethodException,
            IllegalAccessException,
            InvocationTargetException,
            InstantiationException {

        final Object[] args = toArray(arg);
        return invokeExactConstructor(klass, args);
    }","  public void test32()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) class0;
      try { 
        ConstructorUtils.invokeExactConstructor(class0, objectArray0);
        fail(""Expecting exception: NoSuchMethodException"");
      } catch(NoSuchMethodException e) {
         //
         // No such accessible constructor on object: java.lang.annotation.Annotation
         //
         verifyException(""org.apache.commons.beanutils.ConstructorUtils"", e);
      }
  }"
512,"    protected String convertKey(final String propertyName) {
        return propertyName;
    }","  public void test0()  throws Throwable  {
      LazyDynaClass lazyDynaClass0 = new LazyDynaClass();
      DynaBean dynaBean0 = lazyDynaClass0.newInstance();
      DynaBeanPropertyMapDecorator dynaBeanPropertyMapDecorator0 = new DynaBeanPropertyMapDecorator(dynaBean0);
      String string0 = dynaBeanPropertyMapDecorator0.convertKey((String) null);
}"
513,"    protected String convertKey(final String propertyName) {
        return propertyName;
    }","  public void test1()  throws Throwable  {
      LazyDynaMap lazyDynaMap0 = new LazyDynaMap(""n8f6S$5L"");
      DynaBeanPropertyMapDecorator dynaBeanPropertyMapDecorator0 = new DynaBeanPropertyMapDecorator(lazyDynaMap0);
      String string0 = dynaBeanPropertyMapDecorator0.convertKey("""");
}"
514,"    public DynaBeanPropertyMapDecorator(final DynaBean dynaBean, final boolean readOnly) {
        super(dynaBean, readOnly);
    }","  public void test2()  throws Throwable  {
      LazyDynaMap lazyDynaMap0 = new LazyDynaMap();
      DynaBeanPropertyMapDecorator dynaBeanPropertyMapDecorator0 = new DynaBeanPropertyMapDecorator(lazyDynaMap0, true);
}"
515,"    protected String convertKey(final String propertyName) {
        return propertyName;
    }","  public void test3()  throws Throwable  {
      LazyDynaClass lazyDynaClass0 = new LazyDynaClass();
      DynaBean dynaBean0 = lazyDynaClass0.newInstance();
      DynaBeanPropertyMapDecorator dynaBeanPropertyMapDecorator0 = new DynaBeanPropertyMapDecorator(dynaBean0);
      String string0 = dynaBeanPropertyMapDecorator0.convertKey(""org.apache.commons.beanutils.BaseDynaBeanMapDecorator"");
}"
516,"    public DynaBeanPropertyMapDecorator(final DynaBean dynaBean, final boolean readOnly) {
        super(dynaBean, readOnly);
    }","  public void test4()  throws Throwable  {
      DynaBeanPropertyMapDecorator dynaBeanPropertyMapDecorator0 = null;
      try {
        dynaBeanPropertyMapDecorator0 = new DynaBeanPropertyMapDecorator((DynaBean) null, true);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // DynaBean is null
         //
         verifyException(""org.apache.commons.beanutils.BaseDynaBeanMapDecorator"", e);
      }
  }"
517,"    public DynaBeanPropertyMapDecorator(final DynaBean dynaBean, final boolean readOnly) {
        super(dynaBean, readOnly);
    }","  public void test5()  throws Throwable  {
      DynaBeanPropertyMapDecorator dynaBeanPropertyMapDecorator0 = null;
      try {
        dynaBeanPropertyMapDecorator0 = new DynaBeanPropertyMapDecorator((DynaBean) null);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // DynaBean is null
         //
         verifyException(""org.apache.commons.beanutils.BaseDynaBeanMapDecorator"", e);
      }
  }"
518,"    public static Class<?> toNonPrimitiveClass(final Class<?> clazz) {
        if (clazz.isPrimitive()) {
            final Class<?> primitiveClazz = MethodUtils.getPrimitiveWrapper(clazz);
            // the above method returns
            if (primitiveClazz != null) {
                return primitiveClazz;
            } else {
                return clazz;
            }
        } else {
            return clazz;
        }
    }","  public void test0()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      Class<?> class1 = MethodUtils.toNonPrimitiveClass(class0);
}"
519,"    public static Object invokeMethod(
            final Object object,
            final String methodName,
            final Object arg)
            throws
            NoSuchMethodException,
            IllegalAccessException,
            InvocationTargetException {

        final Object[] args = toArray(arg);
        return invokeMethod(object, methodName, args);
    }","  public void test1()  throws Throwable  {
      Double double0 = new Double(1.0);
      Object[] objectArray0 = new Object[0];
      Class<Double>[] classArray0 = (Class<Double>[]) Array.newInstance(Class.class, 0);
      Object object0 = MethodUtils.invokeMethod((Object) double0, ""hashCode"", objectArray0, (Class<?>[]) classArray0);
}"
520,"    public static Object invokeMethod(
            final Object object,
            final String methodName,
            final Object arg)
            throws
            NoSuchMethodException,
            IllegalAccessException,
            InvocationTargetException {

        final Object[] args = toArray(arg);
        return invokeMethod(object, methodName, args);
    }","  public void test2()  throws Throwable  {
      Double double0 = new Double(0.0);
      Object[] objectArray0 = new Object[0];
      Object object0 = MethodUtils.invokeMethod((Object) double0, ""byteValue"", objectArray0);
}"
521,"    public static Object invokeExactMethod(
            final Object object,
            final String methodName,
            final Object arg)
            throws
            NoSuchMethodException,
            IllegalAccessException,
            InvocationTargetException {

        final Object[] args = toArray(arg);
        return invokeExactMethod(object, methodName, args);
    }","  public void test3()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-78));
      Object[] objectArray0 = new Object[0];
      Object object0 = MethodUtils.invokeExactMethod((Object) byte0, ""hashCode"", objectArray0);
}"
522,"    public static Object invokeExactMethod(
            final Object object,
            final String methodName,
            final Object arg)
            throws
            NoSuchMethodException,
            IllegalAccessException,
            InvocationTargetException {

        final Object[] args = toArray(arg);
        return invokeExactMethod(object, methodName, args);
    }","  public void test4()  throws Throwable  {
      Float float0 = new Float(1.0);
      Object object0 = MethodUtils.invokeExactMethod((Object) float0, ""hashCode"", (Object) null);
}"
523,"    public static Method getAccessibleMethod(
            final Class<?> clazz,
            final String methodName,
            final Class<?> parameterType) {

        final Class<?>[] parameterTypes = {parameterType};
        return getAccessibleMethod(clazz, methodName, parameterTypes);
    }","  public void test5()  throws Throwable  {
      Class<Double> class0 = Double.class;
      Method method0 = MethodUtils.getMatchingAccessibleMethod(class0, ""notifyAll"", (Class<?>[]) null);
      Method method1 = MethodUtils.getAccessibleMethod(method0);
}"
524,"    public static Method getAccessibleMethod(
            final Class<?> clazz,
            final String methodName,
            final Class<?> parameterType) {

        final Class<?>[] parameterTypes = {parameterType};
        return getAccessibleMethod(clazz, methodName, parameterTypes);
    }","  public void test6()  throws Throwable  {
      Class<Double> class0 = Double.class;
      Method method0 = MethodUtils.getMatchingAccessibleMethod(class0, ""notifyAll"", (Class<?>[]) null);
      Method method1 = MethodUtils.getAccessibleMethod(class0, method0);
}"
525,"    public static Method getAccessibleMethod(
            final Class<?> clazz,
            final String methodName,
            final Class<?> parameterType) {

        final Class<?>[] parameterTypes = {parameterType};
        return getAccessibleMethod(clazz, methodName, parameterTypes);
    }","  public void test7()  throws Throwable  {
      Class<Double> class0 = Double.class;
      Method method0 = MethodUtils.getMatchingAccessibleMethod(class0, ""notifyAll"", (Class<?>[]) null);
      Method method1 = MethodUtils.getAccessibleMethod(class0, method0);
}"
526,"    public static Method getAccessibleMethod(
            final Class<?> clazz,
            final String methodName,
            final Class<?> parameterType) {

        final Class<?>[] parameterTypes = {parameterType};
        return getAccessibleMethod(clazz, methodName, parameterTypes);
    }","  public void test8()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Class<MethodUtils>[] classArray0 = (Class<MethodUtils>[]) Array.newInstance(Class.class, 1);
      Method method0 = MethodUtils.getAccessibleMethod(class0, ""hashCode"", classArray0);
}"
527,"    public static Method getAccessibleMethod(
            final Class<?> clazz,
            final String methodName,
            final Class<?> parameterType) {

        final Class<?>[] parameterTypes = {parameterType};
        return getAccessibleMethod(clazz, methodName, parameterTypes);
    }","  public void test9()  throws Throwable  {
      Class<String> class0 = String.class;
      Method method0 = MethodUtils.getAccessibleMethod(class0, ""matches"", class0);
}"
528,"    public static synchronized int clearCache() {
        final int size = cache.size();
        cache.clear();
        return size;
    }","  public void test10()  throws Throwable  {
      MethodUtils methodUtils0 = new MethodUtils();
      String string0 = ""Log4J 1.2 not available"";
      Object[] objectArray0 = new Object[9];
      Class<Short>[] classArray0 = null;
      MethodUtils.setCacheMethods(true);
      MethodUtils.clearCache();
      objectArray0[1] = (Object) ""Log4J 1.2 not available"";
      objectArray0[2] = (Object) methodUtils0;
      objectArray0[3] = (Object) methodUtils0;
      AccessibleObject[] accessibleObjectArray0 = new AccessibleObject[7];
      // Undeclared exception!
      try { 
        AccessibleObject.setAccessible(accessibleObjectArray0, true);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
529,"    public static Class<?> toNonPrimitiveClass(final Class<?> clazz) {
        if (clazz.isPrimitive()) {
            final Class<?> primitiveClazz = MethodUtils.getPrimitiveWrapper(clazz);
            // the above method returns
            if (primitiveClazz != null) {
                return primitiveClazz;
            } else {
                return clazz;
            }
        } else {
            return clazz;
        }
    }","  public void test11()  throws Throwable  {
      Class<String>[] classArray0 = (Class<String>[]) Array.newInstance(Class.class, 5);
      // Undeclared exception!
      try { 
        MethodUtils.toNonPrimitiveClass(classArray0[1]);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.beanutils.MethodUtils"", e);
      }
  }"
530,"    public static final boolean isAssignmentCompatible(final Class<?> parameterType, final Class<?> parameterization) {
        // try plain assignment
        if (parameterType.isAssignableFrom(parameterization)) {
            return true;
        }

        if (parameterType.isPrimitive()) {
            // this method does *not* do widening - you must specify exactly
            // is this the right behaviour?
            final Class<?> parameterWrapperClazz = getPrimitiveWrapper(parameterType);
            if (parameterWrapperClazz != null) {
                return parameterWrapperClazz.equals(parameterization);
            }
        }

        return false;
    }","  public void test12()  throws Throwable  {
      Class<String> class0 = String.class;
      // Undeclared exception!
      try { 
        MethodUtils.isAssignmentCompatible((Class<?>) null, class0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.beanutils.MethodUtils"", e);
      }
  }"
531,"    public static Object invokeStaticMethod(
            final Class<?> objectClass,
            final String methodName,
            final Object arg)
            throws
            NoSuchMethodException,
            IllegalAccessException,
            InvocationTargetException {

        final Object[] args = toArray(arg);
        return invokeStaticMethod (objectClass, methodName, args);
    }","  public void test13()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 2);
      classArray0[0] = class0;
      classArray0[1] = class0;
      // Undeclared exception!
      try { 
        MethodUtils.invokeStaticMethod((Class<?>) class0, ""min"", (Object[]) classArray0, (Class<?>[]) classArray0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
      }
  }"
532,"    public static Object invokeStaticMethod(
            final Class<?> objectClass,
            final String methodName,
            final Object arg)
            throws
            NoSuchMethodException,
            IllegalAccessException,
            InvocationTargetException {

        final Object[] args = toArray(arg);
        return invokeStaticMethod (objectClass, methodName, args);
    }","  public void test14()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Object[] objectArray0 = new Object[7];
      Class<Double>[] classArray0 = (Class<Double>[]) Array.newInstance(Class.class, 2);
      // Undeclared exception!
      try { 
        MethodUtils.invokeStaticMethod(class0, (String) null, objectArray0, classArray0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Method Name cannot be null
         //
         verifyException(""org.apache.commons.beanutils.MethodUtils$MethodDescriptor"", e);
      }
  }"
533,"    public static Object invokeStaticMethod(
            final Class<?> objectClass,
            final String methodName,
            final Object arg)
            throws
            NoSuchMethodException,
            IllegalAccessException,
            InvocationTargetException {

        final Object[] args = toArray(arg);
        return invokeStaticMethod (objectClass, methodName, args);
    }","  public void test15()  throws Throwable  {
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 3);
      Class<Object> class0 = Object.class;
      classArray0[0] = class0;
      classArray0[1] = classArray0[0];
      classArray0[2] = classArray0[0];
      try { 
        MethodUtils.invokeStaticMethod((Class<?>) classArray0[0], ""]"", (Object[]) classArray0);
        fail(""Expecting exception: NoSuchMethodException"");
      } catch(NoSuchMethodException e) {
         //
         // No such accessible method: ]() on class: java.lang.Object
         //
         verifyException(""org.apache.commons.beanutils.MethodUtils"", e);
      }
  }"
534,"    public static Object invokeStaticMethod(
            final Class<?> objectClass,
            final String methodName,
            final Object arg)
            throws
            NoSuchMethodException,
            IllegalAccessException,
            InvocationTargetException {

        final Object[] args = toArray(arg);
        return invokeStaticMethod (objectClass, methodName, args);
    }","  public void test16()  throws Throwable  {
      Class<Byte> class0 = Byte.class;
      try { 
        MethodUtils.invokeStaticMethod((Class<?>) class0, ""valueOf"", (Object) ""valueOf"");
        fail(""Expecting exception: InvocationTargetException"");
      } catch(InvocationTargetException e) {
      }
  }"
535,"    public static Object invokeStaticMethod(
            final Class<?> objectClass,
            final String methodName,
            final Object arg)
            throws
            NoSuchMethodException,
            IllegalAccessException,
            InvocationTargetException {

        final Object[] args = toArray(arg);
        return invokeStaticMethod (objectClass, methodName, args);
    }","  public void test17()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      Boolean boolean0 = Boolean.valueOf(""eqj|]b0+&Y\""FT{,&["");
      // Undeclared exception!
      try { 
        MethodUtils.invokeStaticMethod((Class<?>) class0, ""compareTo"", (Object) boolean0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
      }
  }"
536,"    public static Object invokeStaticMethod(
            final Class<?> objectClass,
            final String methodName,
            final Object arg)
            throws
            NoSuchMethodException,
            IllegalAccessException,
            InvocationTargetException {

        final Object[] args = toArray(arg);
        return invokeStaticMethod (objectClass, methodName, args);
    }","  public void test18()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      Boolean boolean0 = new Boolean("" @>"");
      // Undeclared exception!
      try { 
        MethodUtils.invokeStaticMethod((Class<?>) class0, (String) null, (Object) boolean0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Method Name cannot be null
         //
         verifyException(""org.apache.commons.beanutils.MethodUtils$MethodDescriptor"", e);
      }
  }"
537,"    public static Object invokeMethod(
            final Object object,
            final String methodName,
            final Object arg)
            throws
            NoSuchMethodException,
            IllegalAccessException,
            InvocationTargetException {

        final Object[] args = toArray(arg);
        return invokeMethod(object, methodName, args);
    }","  public void test19()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 6);
      // Undeclared exception!
      try { 
        MethodUtils.invokeMethod((Object) null, ""Matching name="", objectArray0, classArray0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.beanutils.MethodUtils"", e);
      }
  }"
538,"    public static Object invokeMethod(
            final Object object,
            final String methodName,
            final Object arg)
            throws
            NoSuchMethodException,
            IllegalAccessException,
            InvocationTargetException {

        final Object[] args = toArray(arg);
        return invokeMethod(object, methodName, args);
    }","  public void test20()  throws Throwable  {
      MethodUtils methodUtils0 = new MethodUtils();
      Object[] objectArray0 = new Object[9];
      // Undeclared exception!
      try { 
        MethodUtils.invokeMethod((Object) methodUtils0, ""wait"", objectArray0, (Class<?>[]) null);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
      }
  }"
539,"    public static Object invokeMethod(
            final Object object,
            final String methodName,
            final Object arg)
            throws
            NoSuchMethodException,
            IllegalAccessException,
            InvocationTargetException {

        final Object[] args = toArray(arg);
        return invokeMethod(object, methodName, args);
    }","  public void test21()  throws Throwable  {
      Class<MethodUtils>[] classArray0 = (Class<MethodUtils>[]) Array.newInstance(Class.class, 2);
      Character character0 = Character.valueOf('y');
      // Undeclared exception!
      try { 
        MethodUtils.invokeMethod((Object) character0, (String) null, (Object[]) classArray0, (Class<?>[]) classArray0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Method Name cannot be null
         //
         verifyException(""org.apache.commons.beanutils.MethodUtils$MethodDescriptor"", e);
      }
  }"
540,"    public static Object invokeMethod(
            final Object object,
            final String methodName,
            final Object arg)
            throws
            NoSuchMethodException,
            IllegalAccessException,
            InvocationTargetException {

        final Object[] args = toArray(arg);
        return invokeMethod(object, methodName, args);
    }","  public void test22()  throws Throwable  {
      try { 
        MethodUtils.invokeMethod((Object) ""N[xT?k:|va"", ""notifyAll"", (Object[]) null);
        fail(""Expecting exception: InvocationTargetException"");
      } catch(InvocationTargetException e) {
      }
  }"
541,"    public static Object invokeMethod(
            final Object object,
            final String methodName,
            final Object arg)
            throws
            NoSuchMethodException,
            IllegalAccessException,
            InvocationTargetException {

        final Object[] args = toArray(arg);
        return invokeMethod(object, methodName, args);
    }","  public void test23()  throws Throwable  {
      Boolean boolean0 = new Boolean(false);
      Object[] objectArray0 = new Object[2];
      // Undeclared exception!
      try { 
        MethodUtils.invokeMethod((Object) boolean0, """", objectArray0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.beanutils.MethodUtils"", e);
      }
  }"
542,"    public static Object invokeMethod(
            final Object object,
            final String methodName,
            final Object arg)
            throws
            NoSuchMethodException,
            IllegalAccessException,
            InvocationTargetException {

        final Object[] args = toArray(arg);
        return invokeMethod(object, methodName, args);
    }","  public void test24()  throws Throwable  {
      Short short0 = new Short((short)2);
      try { 
        MethodUtils.invokeMethod((Object) short0, ""notifyAll"", (Object) null);
        fail(""Expecting exception: InvocationTargetException"");
      } catch(InvocationTargetException e) {
      }
  }"
543,"    public static Object invokeMethod(
            final Object object,
            final String methodName,
            final Object arg)
            throws
            NoSuchMethodException,
            IllegalAccessException,
            InvocationTargetException {

        final Object[] args = toArray(arg);
        return invokeMethod(object, methodName, args);
    }","  public void test25()  throws Throwable  {
      // Undeclared exception!
      try { 
        MethodUtils.invokeMethod((Object) null, ""<\""+V"", (Object) ""<\""+V"");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.beanutils.MethodUtils"", e);
      }
  }"
544,"    public static Object invokeMethod(
            final Object object,
            final String methodName,
            final Object arg)
            throws
            NoSuchMethodException,
            IllegalAccessException,
            InvocationTargetException {

        final Object[] args = toArray(arg);
        return invokeMethod(object, methodName, args);
    }","  public void test26()  throws Throwable  {
      Float float0 = new Float(1820.8485F);
      // Undeclared exception!
      try { 
        MethodUtils.invokeMethod((Object) float0, (String) null, (Object) null);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Method Name cannot be null
         //
         verifyException(""org.apache.commons.beanutils.MethodUtils$MethodDescriptor"", e);
      }
  }"
545,"    public static Object invokeExactStaticMethod(
            final Class<?> objectClass,
            final String methodName,
            Object[] args,
            Class<?>[] parameterTypes)
            throws
            NoSuchMethodException,
            IllegalAccessException,
            InvocationTargetException {

        if (args == null) {
            args = EMPTY_OBJECT_ARRAY;
        }

        if (parameterTypes == null) {
            parameterTypes = EMPTY_CLASS_PARAMETERS;
        }

        final Method method = getAccessibleMethod(
                objectClass,
                methodName,
                parameterTypes);
        if (method == null) {
            throw new NoSuchMethodException(""No such accessible method: "" +
                    methodName + ""() on class: "" + objectClass.getName());
        }
        return method.invoke(null, args);
    }","  public void test27()  throws Throwable  {
      Class<Short>[] classArray0 = (Class<Short>[]) Array.newInstance(Class.class, 4);
      // Undeclared exception!
      try { 
        MethodUtils.invokeExactStaticMethod((Class<?>) null, ""2sV(B"", (Object[]) null, classArray0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Class cannot be null
         //
         verifyException(""org.apache.commons.beanutils.MethodUtils$MethodDescriptor"", e);
      }
  }"
546,"    public static Object invokeExactStaticMethod(
            final Class<?> objectClass,
            final String methodName,
            Object[] args,
            Class<?>[] parameterTypes)
            throws
            NoSuchMethodException,
            IllegalAccessException,
            InvocationTargetException {

        if (args == null) {
            args = EMPTY_OBJECT_ARRAY;
        }

        if (parameterTypes == null) {
            parameterTypes = EMPTY_CLASS_PARAMETERS;
        }

        final Method method = getAccessibleMethod(
                objectClass,
                methodName,
                parameterTypes);
        if (method == null) {
            throw new NoSuchMethodException(""No such accessible method: "" +
                    methodName + ""() on class: "" + objectClass.getName());
        }
        return method.invoke(null, args);
    }","  public void test28()  throws Throwable  {
      Class<Boolean> class0 = Boolean.TYPE;
      try { 
        MethodUtils.invokeExactStaticMethod(class0, ""java.specification.version"", (Object[]) null);
        fail(""Expecting exception: NoSuchMethodException"");
      } catch(NoSuchMethodException e) {
         //
         // No such accessible method: java.specification.version() on class: boolean
         //
         verifyException(""org.apache.commons.beanutils.MethodUtils"", e);
      }
  }"
547,"    public static Object invokeExactStaticMethod(
            final Class<?> objectClass,
            final String methodName,
            Object[] args,
            Class<?>[] parameterTypes)
            throws
            NoSuchMethodException,
            IllegalAccessException,
            InvocationTargetException {

        if (args == null) {
            args = EMPTY_OBJECT_ARRAY;
        }

        if (parameterTypes == null) {
            parameterTypes = EMPTY_CLASS_PARAMETERS;
        }

        final Method method = getAccessibleMethod(
                objectClass,
                methodName,
                parameterTypes);
        if (method == null) {
            throw new NoSuchMethodException(""No such accessible method: "" +
                    methodName + ""() on class: "" + objectClass.getName());
        }
        return method.invoke(null, args);
    }","  public void test29()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      // Undeclared exception!
      try { 
        MethodUtils.invokeExactStaticMethod((Class<?>) class0, ""wait"", (Object) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
      }
  }"
548,"    public static Object invokeExactStaticMethod(
            final Class<?> objectClass,
            final String methodName,
            Object[] args,
            Class<?>[] parameterTypes)
            throws
            NoSuchMethodException,
            IllegalAccessException,
            InvocationTargetException {

        if (args == null) {
            args = EMPTY_OBJECT_ARRAY;
        }

        if (parameterTypes == null) {
            parameterTypes = EMPTY_CLASS_PARAMETERS;
        }

        final Method method = getAccessibleMethod(
                objectClass,
                methodName,
                parameterTypes);
        if (method == null) {
            throw new NoSuchMethodException(""No such accessible method: "" +
                    methodName + ""() on class: "" + objectClass.getName());
        }
        return method.invoke(null, args);
    }","  public void test30()  throws Throwable  {
      Class<Short> class0 = Short.class;
      Float float0 = new Float(1.0F);
      // Undeclared exception!
      try { 
        MethodUtils.invokeExactStaticMethod((Class<?>) class0, (String) null, (Object) float0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Method Name cannot be null
         //
         verifyException(""org.apache.commons.beanutils.MethodUtils$MethodDescriptor"", e);
      }
  }"
549,"    public static Object invokeExactMethod(
            final Object object,
            final String methodName,
            final Object arg)
            throws
            NoSuchMethodException,
            IllegalAccessException,
            InvocationTargetException {

        final Object[] args = toArray(arg);
        return invokeExactMethod(object, methodName, args);
    }","  public void test31()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Class<Float>[] classArray0 = (Class<Float>[]) Array.newInstance(Class.class, 3);
      // Undeclared exception!
      try { 
        MethodUtils.invokeExactMethod((Object) null, ""isEmpty"", objectArray0, classArray0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.beanutils.MethodUtils"", e);
      }
  }"
550,"    public static Object invokeExactMethod(
            final Object object,
            final String methodName,
            final Object arg)
            throws
            NoSuchMethodException,
            IllegalAccessException,
            InvocationTargetException {

        final Object[] args = toArray(arg);
        return invokeExactMethod(object, methodName, args);
    }","  public void test32()  throws Throwable  {
      Double double0 = new Double(0.0);
      Object[] objectArray0 = new Object[8];
      // Undeclared exception!
      try { 
        MethodUtils.invokeExactMethod((Object) double0, (String) null, objectArray0, (Class<?>[]) null);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Method Name cannot be null
         //
         verifyException(""org.apache.commons.beanutils.MethodUtils$MethodDescriptor"", e);
      }
  }"
551,"    public static Object invokeExactMethod(
            final Object object,
            final String methodName,
            final Object arg)
            throws
            NoSuchMethodException,
            IllegalAccessException,
            InvocationTargetException {

        final Object[] args = toArray(arg);
        return invokeExactMethod(object, methodName, args);
    }","  public void test33()  throws Throwable  {
      Class<Character> class0 = Character.TYPE;
      Class<String>[] classArray0 = (Class<String>[]) Array.newInstance(Class.class, 0);
      try { 
        MethodUtils.invokeExactMethod((Object) class0, ""notifyAll"", (Object[]) classArray0);
        fail(""Expecting exception: InvocationTargetException"");
      } catch(InvocationTargetException e) {
      }
  }"
552,"    public static Object invokeExactMethod(
            final Object object,
            final String methodName,
            final Object arg)
            throws
            NoSuchMethodException,
            IllegalAccessException,
            InvocationTargetException {

        final Object[] args = toArray(arg);
        return invokeExactMethod(object, methodName, args);
    }","  public void test34()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      Boolean boolean0 = Boolean.valueOf(""eqj|]b0+&Y\""FT{,U&["");
      Object object0 = MethodUtils.invokeStaticMethod((Class<?>) class0, ""hashCode"", (Object) boolean0);
      Object[] objectArray0 = new Object[5];
      // Undeclared exception!
      try { 
        MethodUtils.invokeExactMethod(object0, (String) null, objectArray0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.beanutils.MethodUtils"", e);
      }
  }"
553,"    public static Object invokeExactMethod(
            final Object object,
            final String methodName,
            final Object arg)
            throws
            NoSuchMethodException,
            IllegalAccessException,
            InvocationTargetException {

        final Object[] args = toArray(arg);
        return invokeExactMethod(object, methodName, args);
    }","  public void test35()  throws Throwable  {
      try { 
        MethodUtils.invokeExactMethod((Object) ""wait"", ""wait"", (Object) null);
        fail(""Expecting exception: InvocationTargetException"");
      } catch(InvocationTargetException e) {
      }
  }"
554,"    public static Object invokeExactMethod(
            final Object object,
            final String methodName,
            final Object arg)
            throws
            NoSuchMethodException,
            IllegalAccessException,
            InvocationTargetException {

        final Object[] args = toArray(arg);
        return invokeExactMethod(object, methodName, args);
    }","  public void test36()  throws Throwable  {
      Byte byte0 = new Byte((byte)0);
      // Undeclared exception!
      try { 
        MethodUtils.invokeExactMethod((Object) byte0, (String) null, (Object) byte0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Method Name cannot be null
         //
         verifyException(""org.apache.commons.beanutils.MethodUtils$MethodDescriptor"", e);
      }
  }"
555,"    public static Method getMatchingAccessibleMethod(
                                                final Class<?> clazz,
                                                final String methodName,
                                                final Class<?>[] parameterTypes) {
        // trace logging
        final Log log = LogFactory.getLog(MethodUtils.class);
        if (log.isTraceEnabled()) {
            log.trace(""Matching name="" + methodName + "" on "" + clazz);
        }
        final MethodDescriptor md = new MethodDescriptor(clazz, methodName, parameterTypes, false);

        // see if we can find the method directly
        // most of the time this works and it's much faster
        try {
            // Check the cache first
            Method method = getCachedMethod(md);
            if (method != null) {
                return method;
            }

            method = clazz.getMethod(methodName, parameterTypes);
            if (log.isTraceEnabled()) {
                log.trace(""Found straight match: "" + method);
                log.trace(""isPublic:"" + Modifier.isPublic(method.getModifiers()));
            }

            setMethodAccessible(method); // Default access superclass workaround

            cacheMethod(md, method);
            return method;

        } catch (final NoSuchMethodException e) { /* SWALLOW */ }

        // search through all methods
        final int paramSize = parameterTypes.length;
        Method bestMatch = null;
        final Method[] methods = clazz.getMethods();
        float bestMatchCost = Float.MAX_VALUE;
        float myCost = Float.MAX_VALUE;
        for (Method method2 : methods) {
            if (method2.getName().equals(methodName)) {
                // log some trace information
                if (log.isTraceEnabled()) {
                    log.trace(""Found matching name:"");
                    log.trace(method2);
                }

                // compare parameters
                final Class<?>[] methodsParams = method2.getParameterTypes();
                final int methodParamSize = methodsParams.length;
                if (methodParamSize == paramSize) {
                    boolean match = true;
                    for (int n = 0 ; n < methodParamSize; n++) {
                        if (log.isTraceEnabled()) {
                            log.trace(""Param="" + parameterTypes[n].getName());
                            log.trace(""Method="" + methodsParams[n].getName());
                        }
                        if (!isAssignmentCompatible(methodsParams[n], parameterTypes[n])) {
                            if (log.isTraceEnabled()) {
                                log.trace(methodsParams[n] + "" is not assignable from ""
                                            + parameterTypes[n]);
                            }
                            match = false;
                            break;
                        }
                    }

                    if (match) {
                        // get accessible version of method
                        final Method method = getAccessibleMethod(clazz, method2);
                        if (method != null) {
                            if (log.isTraceEnabled()) {
                                log.trace(method + "" accessible version of ""
                                            + method2);
                            }
                            setMethodAccessible(method); // Default access superclass workaround
                            myCost = getTotalTransformationCost(parameterTypes,method.getParameterTypes());
                            if ( myCost < bestMatchCost ) {
                               bestMatch = method;
                               bestMatchCost = myCost;
                            }
                        }

                        log.trace(""Couldn't find accessible method."");
                    }
                }
            }
        }
        if ( bestMatch != null ){
                 cacheMethod(md, bestMatch);
        } else {
        // didn't find a match
               log.trace(""No match found."");
        }

        return bestMatch;
    }","  public void test37()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      // Undeclared exception!
      try { 
        MethodUtils.getMatchingAccessibleMethod(class0, """", (Class<?>[]) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.beanutils.MethodUtils"", e);
      }
  }"
556,"    public static Method getMatchingAccessibleMethod(
                                                final Class<?> clazz,
                                                final String methodName,
                                                final Class<?>[] parameterTypes) {
        // trace logging
        final Log log = LogFactory.getLog(MethodUtils.class);
        if (log.isTraceEnabled()) {
            log.trace(""Matching name="" + methodName + "" on "" + clazz);
        }
        final MethodDescriptor md = new MethodDescriptor(clazz, methodName, parameterTypes, false);

        // see if we can find the method directly
        // most of the time this works and it's much faster
        try {
            // Check the cache first
            Method method = getCachedMethod(md);
            if (method != null) {
                return method;
            }

            method = clazz.getMethod(methodName, parameterTypes);
            if (log.isTraceEnabled()) {
                log.trace(""Found straight match: "" + method);
                log.trace(""isPublic:"" + Modifier.isPublic(method.getModifiers()));
            }

            setMethodAccessible(method); // Default access superclass workaround

            cacheMethod(md, method);
            return method;

        } catch (final NoSuchMethodException e) { /* SWALLOW */ }

        // search through all methods
        final int paramSize = parameterTypes.length;
        Method bestMatch = null;
        final Method[] methods = clazz.getMethods();
        float bestMatchCost = Float.MAX_VALUE;
        float myCost = Float.MAX_VALUE;
        for (Method method2 : methods) {
            if (method2.getName().equals(methodName)) {
                // log some trace information
                if (log.isTraceEnabled()) {
                    log.trace(""Found matching name:"");
                    log.trace(method2);
                }

                // compare parameters
                final Class<?>[] methodsParams = method2.getParameterTypes();
                final int methodParamSize = methodsParams.length;
                if (methodParamSize == paramSize) {
                    boolean match = true;
                    for (int n = 0 ; n < methodParamSize; n++) {
                        if (log.isTraceEnabled()) {
                            log.trace(""Param="" + parameterTypes[n].getName());
                            log.trace(""Method="" + methodsParams[n].getName());
                        }
                        if (!isAssignmentCompatible(methodsParams[n], parameterTypes[n])) {
                            if (log.isTraceEnabled()) {
                                log.trace(methodsParams[n] + "" is not assignable from ""
                                            + parameterTypes[n]);
                            }
                            match = false;
                            break;
                        }
                    }

                    if (match) {
                        // get accessible version of method
                        final Method method = getAccessibleMethod(clazz, method2);
                        if (method != null) {
                            if (log.isTraceEnabled()) {
                                log.trace(method + "" accessible version of ""
                                            + method2);
                            }
                            setMethodAccessible(method); // Default access superclass workaround
                            myCost = getTotalTransformationCost(parameterTypes,method.getParameterTypes());
                            if ( myCost < bestMatchCost ) {
                               bestMatch = method;
                               bestMatchCost = myCost;
                            }
                        }

                        log.trace(""Couldn't find accessible method."");
                    }
                }
            }
        }
        if ( bestMatch != null ){
                 cacheMethod(md, bestMatch);
        } else {
        // didn't find a match
               log.trace(""No match found."");
        }

        return bestMatch;
    }","  public void test38()  throws Throwable  {
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 2);
      // Undeclared exception!
      try { 
        MethodUtils.getMatchingAccessibleMethod((Class<?>) null, """", classArray0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Class cannot be null
         //
         verifyException(""org.apache.commons.beanutils.MethodUtils$MethodDescriptor"", e);
      }
  }"
557,"    public static Method getAccessibleMethod(
            final Class<?> clazz,
            final String methodName,
            final Class<?> parameterType) {

        final Class<?>[] parameterTypes = {parameterType};
        return getAccessibleMethod(clazz, methodName, parameterTypes);
    }","  public void test39()  throws Throwable  {
      Class<Method> class0 = Method.class;
      Class<Long> class1 = Long.class;
      // Undeclared exception!
      try { 
        MethodUtils.getAccessibleMethod(class1, (String) null, class0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Method Name cannot be null
         //
         verifyException(""org.apache.commons.beanutils.MethodUtils$MethodDescriptor"", e);
      }
  }"
558,"    public static Class<?> getPrimitiveWrapper(final Class<?> primitiveType) {
        // does anyone know a better strategy than comparing names?
        if (boolean.class.equals(primitiveType)) {
            return Boolean.class;
        } else if (float.class.equals(primitiveType)) {
            return Float.class;
        } else if (long.class.equals(primitiveType)) {
            return Long.class;
        } else if (int.class.equals(primitiveType)) {
            return Integer.class;
        } else if (short.class.equals(primitiveType)) {
            return Short.class;
        } else if (byte.class.equals(primitiveType)) {
            return Byte.class;
        } else if (double.class.equals(primitiveType)) {
            return Double.class;
        } else if (char.class.equals(primitiveType)) {
            return Character.class;
        } else {

            return null;
        }
    }","  public void test40()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      Class<?> class1 = MethodUtils.getPrimitiveWrapper(class0);
}"
559,"    public static Class<?> getPrimitiveWrapper(final Class<?> primitiveType) {
        // does anyone know a better strategy than comparing names?
        if (boolean.class.equals(primitiveType)) {
            return Boolean.class;
        } else if (float.class.equals(primitiveType)) {
            return Float.class;
        } else if (long.class.equals(primitiveType)) {
            return Long.class;
        } else if (int.class.equals(primitiveType)) {
            return Integer.class;
        } else if (short.class.equals(primitiveType)) {
            return Short.class;
        } else if (byte.class.equals(primitiveType)) {
            return Byte.class;
        } else if (double.class.equals(primitiveType)) {
            return Double.class;
        } else if (char.class.equals(primitiveType)) {
            return Character.class;
        } else {

            return null;
        }
    }","  public void test41()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      Class<?> class1 = MethodUtils.getPrimitiveWrapper(class0);
}"
560,"    public static Class<?> getPrimitiveWrapper(final Class<?> primitiveType) {
        // does anyone know a better strategy than comparing names?
        if (boolean.class.equals(primitiveType)) {
            return Boolean.class;
        } else if (float.class.equals(primitiveType)) {
            return Float.class;
        } else if (long.class.equals(primitiveType)) {
            return Long.class;
        } else if (int.class.equals(primitiveType)) {
            return Integer.class;
        } else if (short.class.equals(primitiveType)) {
            return Short.class;
        } else if (byte.class.equals(primitiveType)) {
            return Byte.class;
        } else if (double.class.equals(primitiveType)) {
            return Double.class;
        } else if (char.class.equals(primitiveType)) {
            return Character.class;
        } else {

            return null;
        }
    }","  public void test42()  throws Throwable  {
      Class<Byte> class0 = Byte.TYPE;
      Class<?> class1 = MethodUtils.getPrimitiveWrapper(class0);
}"
561,"    public static Class<?> getPrimitiveWrapper(final Class<?> primitiveType) {
        // does anyone know a better strategy than comparing names?
        if (boolean.class.equals(primitiveType)) {
            return Boolean.class;
        } else if (float.class.equals(primitiveType)) {
            return Float.class;
        } else if (long.class.equals(primitiveType)) {
            return Long.class;
        } else if (int.class.equals(primitiveType)) {
            return Integer.class;
        } else if (short.class.equals(primitiveType)) {
            return Short.class;
        } else if (byte.class.equals(primitiveType)) {
            return Byte.class;
        } else if (double.class.equals(primitiveType)) {
            return Double.class;
        } else if (char.class.equals(primitiveType)) {
            return Character.class;
        } else {

            return null;
        }
    }","  public void test43()  throws Throwable  {
      Class<Byte> class0 = Byte.TYPE;
      Class<?> class1 = MethodUtils.getPrimitiveWrapper(class0);
}"
562,"    public static Class<?> getPrimitiveWrapper(final Class<?> primitiveType) {
        // does anyone know a better strategy than comparing names?
        if (boolean.class.equals(primitiveType)) {
            return Boolean.class;
        } else if (float.class.equals(primitiveType)) {
            return Float.class;
        } else if (long.class.equals(primitiveType)) {
            return Long.class;
        } else if (int.class.equals(primitiveType)) {
            return Integer.class;
        } else if (short.class.equals(primitiveType)) {
            return Short.class;
        } else if (byte.class.equals(primitiveType)) {
            return Byte.class;
        } else if (double.class.equals(primitiveType)) {
            return Double.class;
        } else if (char.class.equals(primitiveType)) {
            return Character.class;
        } else {

            return null;
        }
    }","  public void test44()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      Class<?> class1 = MethodUtils.getPrimitiveWrapper(class0);
}"
563,"    public static Class<?> getPrimitiveWrapper(final Class<?> primitiveType) {
        // does anyone know a better strategy than comparing names?
        if (boolean.class.equals(primitiveType)) {
            return Boolean.class;
        } else if (float.class.equals(primitiveType)) {
            return Float.class;
        } else if (long.class.equals(primitiveType)) {
            return Long.class;
        } else if (int.class.equals(primitiveType)) {
            return Integer.class;
        } else if (short.class.equals(primitiveType)) {
            return Short.class;
        } else if (byte.class.equals(primitiveType)) {
            return Byte.class;
        } else if (double.class.equals(primitiveType)) {
            return Double.class;
        } else if (char.class.equals(primitiveType)) {
            return Character.class;
        } else {

            return null;
        }
    }","  public void test45()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      Class<?> class1 = MethodUtils.getPrimitiveWrapper(class0);
}"
564,"    public static Class<?> getPrimitiveWrapper(final Class<?> primitiveType) {
        // does anyone know a better strategy than comparing names?
        if (boolean.class.equals(primitiveType)) {
            return Boolean.class;
        } else if (float.class.equals(primitiveType)) {
            return Float.class;
        } else if (long.class.equals(primitiveType)) {
            return Long.class;
        } else if (int.class.equals(primitiveType)) {
            return Integer.class;
        } else if (short.class.equals(primitiveType)) {
            return Short.class;
        } else if (byte.class.equals(primitiveType)) {
            return Byte.class;
        } else if (double.class.equals(primitiveType)) {
            return Double.class;
        } else if (char.class.equals(primitiveType)) {
            return Character.class;
        } else {

            return null;
        }
    }","  public void test46()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Class<?> class1 = MethodUtils.getPrimitiveType(class0);
      Class<?> class2 = MethodUtils.getPrimitiveWrapper(class1);
}"
565,"    public static Class<?> getPrimitiveWrapper(final Class<?> primitiveType) {
        // does anyone know a better strategy than comparing names?
        if (boolean.class.equals(primitiveType)) {
            return Boolean.class;
        } else if (float.class.equals(primitiveType)) {
            return Float.class;
        } else if (long.class.equals(primitiveType)) {
            return Long.class;
        } else if (int.class.equals(primitiveType)) {
            return Integer.class;
        } else if (short.class.equals(primitiveType)) {
            return Short.class;
        } else if (byte.class.equals(primitiveType)) {
            return Byte.class;
        } else if (double.class.equals(primitiveType)) {
            return Double.class;
        } else if (char.class.equals(primitiveType)) {
            return Character.class;
        } else {

            return null;
        }
    }","  public void test47()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Class<?> class1 = MethodUtils.getPrimitiveType(class0);
      Class<?> class2 = MethodUtils.getPrimitiveWrapper(class1);
}"
566,"    public static Class<?> getPrimitiveWrapper(final Class<?> primitiveType) {
        // does anyone know a better strategy than comparing names?
        if (boolean.class.equals(primitiveType)) {
            return Boolean.class;
        } else if (float.class.equals(primitiveType)) {
            return Float.class;
        } else if (long.class.equals(primitiveType)) {
            return Long.class;
        } else if (int.class.equals(primitiveType)) {
            return Integer.class;
        } else if (short.class.equals(primitiveType)) {
            return Short.class;
        } else if (byte.class.equals(primitiveType)) {
            return Byte.class;
        } else if (double.class.equals(primitiveType)) {
            return Double.class;
        } else if (char.class.equals(primitiveType)) {
            return Character.class;
        } else {

            return null;
        }
    }","  public void test48()  throws Throwable  {
      Class<Long> class0 = Long.TYPE;
      Class<?> class1 = MethodUtils.getPrimitiveWrapper(class0);
}"
567,"    public static Class<?> getPrimitiveWrapper(final Class<?> primitiveType) {
        // does anyone know a better strategy than comparing names?
        if (boolean.class.equals(primitiveType)) {
            return Boolean.class;
        } else if (float.class.equals(primitiveType)) {
            return Float.class;
        } else if (long.class.equals(primitiveType)) {
            return Long.class;
        } else if (int.class.equals(primitiveType)) {
            return Integer.class;
        } else if (short.class.equals(primitiveType)) {
            return Short.class;
        } else if (byte.class.equals(primitiveType)) {
            return Byte.class;
        } else if (double.class.equals(primitiveType)) {
            return Double.class;
        } else if (char.class.equals(primitiveType)) {
            return Character.class;
        } else {

            return null;
        }
    }","  public void test49()  throws Throwable  {
      Class<Long> class0 = Long.TYPE;
      Class<?> class1 = MethodUtils.getPrimitiveWrapper(class0);
}"
568,"    public static Class<?> getPrimitiveWrapper(final Class<?> primitiveType) {
        // does anyone know a better strategy than comparing names?
        if (boolean.class.equals(primitiveType)) {
            return Boolean.class;
        } else if (float.class.equals(primitiveType)) {
            return Float.class;
        } else if (long.class.equals(primitiveType)) {
            return Long.class;
        } else if (int.class.equals(primitiveType)) {
            return Integer.class;
        } else if (short.class.equals(primitiveType)) {
            return Short.class;
        } else if (byte.class.equals(primitiveType)) {
            return Byte.class;
        } else if (double.class.equals(primitiveType)) {
            return Double.class;
        } else if (char.class.equals(primitiveType)) {
            return Character.class;
        } else {

            return null;
        }
    }","  public void test50()  throws Throwable  {
      Class<Float> class0 = Float.TYPE;
      Class<?> class1 = MethodUtils.getPrimitiveWrapper(class0);
}"
569,"    public static Class<?> getPrimitiveWrapper(final Class<?> primitiveType) {
        // does anyone know a better strategy than comparing names?
        if (boolean.class.equals(primitiveType)) {
            return Boolean.class;
        } else if (float.class.equals(primitiveType)) {
            return Float.class;
        } else if (long.class.equals(primitiveType)) {
            return Long.class;
        } else if (int.class.equals(primitiveType)) {
            return Integer.class;
        } else if (short.class.equals(primitiveType)) {
            return Short.class;
        } else if (byte.class.equals(primitiveType)) {
            return Byte.class;
        } else if (double.class.equals(primitiveType)) {
            return Double.class;
        } else if (char.class.equals(primitiveType)) {
            return Character.class;
        } else {

            return null;
        }
    }","  public void test51()  throws Throwable  {
      Class<Float> class0 = Float.TYPE;
      Class<?> class1 = MethodUtils.getPrimitiveWrapper(class0);
}"
570,"    public static Class<?> getPrimitiveWrapper(final Class<?> primitiveType) {
        // does anyone know a better strategy than comparing names?
        if (boolean.class.equals(primitiveType)) {
            return Boolean.class;
        } else if (float.class.equals(primitiveType)) {
            return Float.class;
        } else if (long.class.equals(primitiveType)) {
            return Long.class;
        } else if (int.class.equals(primitiveType)) {
            return Integer.class;
        } else if (short.class.equals(primitiveType)) {
            return Short.class;
        } else if (byte.class.equals(primitiveType)) {
            return Byte.class;
        } else if (double.class.equals(primitiveType)) {
            return Double.class;
        } else if (char.class.equals(primitiveType)) {
            return Character.class;
        } else {

            return null;
        }
    }","  public void test52()  throws Throwable  {
      Class<Boolean> class0 = Boolean.TYPE;
      Class<?> class1 = MethodUtils.getPrimitiveWrapper(class0);
}"
571,"    public static Class<?> getPrimitiveWrapper(final Class<?> primitiveType) {
        // does anyone know a better strategy than comparing names?
        if (boolean.class.equals(primitiveType)) {
            return Boolean.class;
        } else if (float.class.equals(primitiveType)) {
            return Float.class;
        } else if (long.class.equals(primitiveType)) {
            return Long.class;
        } else if (int.class.equals(primitiveType)) {
            return Integer.class;
        } else if (short.class.equals(primitiveType)) {
            return Short.class;
        } else if (byte.class.equals(primitiveType)) {
            return Byte.class;
        } else if (double.class.equals(primitiveType)) {
            return Double.class;
        } else if (char.class.equals(primitiveType)) {
            return Character.class;
        } else {

            return null;
        }
    }","  public void test53()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      Class<?> class1 = MethodUtils.getPrimitiveWrapper(class0);
}"
572,"    public static final boolean isAssignmentCompatible(final Class<?> parameterType, final Class<?> parameterization) {
        // try plain assignment
        if (parameterType.isAssignableFrom(parameterization)) {
            return true;
        }

        if (parameterType.isPrimitive()) {
            // this method does *not* do widening - you must specify exactly
            // is this the right behaviour?
            final Class<?> parameterWrapperClazz = getPrimitiveWrapper(parameterType);
            if (parameterWrapperClazz != null) {
                return parameterWrapperClazz.equals(parameterization);
            }
        }

        return false;
    }","  public void test54()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      boolean boolean0 = MethodUtils.isAssignmentCompatible(class0, class0);
}"
573,"    public static Method getMatchingAccessibleMethod(
                                                final Class<?> clazz,
                                                final String methodName,
                                                final Class<?>[] parameterTypes) {
        // trace logging
        final Log log = LogFactory.getLog(MethodUtils.class);
        if (log.isTraceEnabled()) {
            log.trace(""Matching name="" + methodName + "" on "" + clazz);
        }
        final MethodDescriptor md = new MethodDescriptor(clazz, methodName, parameterTypes, false);

        // see if we can find the method directly
        // most of the time this works and it's much faster
        try {
            // Check the cache first
            Method method = getCachedMethod(md);
            if (method != null) {
                return method;
            }

            method = clazz.getMethod(methodName, parameterTypes);
            if (log.isTraceEnabled()) {
                log.trace(""Found straight match: "" + method);
                log.trace(""isPublic:"" + Modifier.isPublic(method.getModifiers()));
            }

            setMethodAccessible(method); // Default access superclass workaround

            cacheMethod(md, method);
            return method;

        } catch (final NoSuchMethodException e) { /* SWALLOW */ }

        // search through all methods
        final int paramSize = parameterTypes.length;
        Method bestMatch = null;
        final Method[] methods = clazz.getMethods();
        float bestMatchCost = Float.MAX_VALUE;
        float myCost = Float.MAX_VALUE;
        for (Method method2 : methods) {
            if (method2.getName().equals(methodName)) {
                // log some trace information
                if (log.isTraceEnabled()) {
                    log.trace(""Found matching name:"");
                    log.trace(method2);
                }

                // compare parameters
                final Class<?>[] methodsParams = method2.getParameterTypes();
                final int methodParamSize = methodsParams.length;
                if (methodParamSize == paramSize) {
                    boolean match = true;
                    for (int n = 0 ; n < methodParamSize; n++) {
                        if (log.isTraceEnabled()) {
                            log.trace(""Param="" + parameterTypes[n].getName());
                            log.trace(""Method="" + methodsParams[n].getName());
                        }
                        if (!isAssignmentCompatible(methodsParams[n], parameterTypes[n])) {
                            if (log.isTraceEnabled()) {
                                log.trace(methodsParams[n] + "" is not assignable from ""
                                            + parameterTypes[n]);
                            }
                            match = false;
                            break;
                        }
                    }

                    if (match) {
                        // get accessible version of method
                        final Method method = getAccessibleMethod(clazz, method2);
                        if (method != null) {
                            if (log.isTraceEnabled()) {
                                log.trace(method + "" accessible version of ""
                                            + method2);
                            }
                            setMethodAccessible(method); // Default access superclass workaround
                            myCost = getTotalTransformationCost(parameterTypes,method.getParameterTypes());
                            if ( myCost < bestMatchCost ) {
                               bestMatch = method;
                               bestMatchCost = myCost;
                            }
                        }

                        log.trace(""Couldn't find accessible method."");
                    }
                }
            }
        }
        if ( bestMatch != null ){
                 cacheMethod(md, bestMatch);
        } else {
        // didn't find a match
               log.trace(""No match found."");
        }

        return bestMatch;
    }","  public void test55()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 1);
      Class<Object> class1 = Object.class;
      classArray0[0] = class1;
      Method method0 = MethodUtils.getMatchingAccessibleMethod(class0, ""lowestOneBit"", classArray0);
}"
574,"    public static Method getMatchingAccessibleMethod(
                                                final Class<?> clazz,
                                                final String methodName,
                                                final Class<?>[] parameterTypes) {
        // trace logging
        final Log log = LogFactory.getLog(MethodUtils.class);
        if (log.isTraceEnabled()) {
            log.trace(""Matching name="" + methodName + "" on "" + clazz);
        }
        final MethodDescriptor md = new MethodDescriptor(clazz, methodName, parameterTypes, false);

        // see if we can find the method directly
        // most of the time this works and it's much faster
        try {
            // Check the cache first
            Method method = getCachedMethod(md);
            if (method != null) {
                return method;
            }

            method = clazz.getMethod(methodName, parameterTypes);
            if (log.isTraceEnabled()) {
                log.trace(""Found straight match: "" + method);
                log.trace(""isPublic:"" + Modifier.isPublic(method.getModifiers()));
            }

            setMethodAccessible(method); // Default access superclass workaround

            cacheMethod(md, method);
            return method;

        } catch (final NoSuchMethodException e) { /* SWALLOW */ }

        // search through all methods
        final int paramSize = parameterTypes.length;
        Method bestMatch = null;
        final Method[] methods = clazz.getMethods();
        float bestMatchCost = Float.MAX_VALUE;
        float myCost = Float.MAX_VALUE;
        for (Method method2 : methods) {
            if (method2.getName().equals(methodName)) {
                // log some trace information
                if (log.isTraceEnabled()) {
                    log.trace(""Found matching name:"");
                    log.trace(method2);
                }

                // compare parameters
                final Class<?>[] methodsParams = method2.getParameterTypes();
                final int methodParamSize = methodsParams.length;
                if (methodParamSize == paramSize) {
                    boolean match = true;
                    for (int n = 0 ; n < methodParamSize; n++) {
                        if (log.isTraceEnabled()) {
                            log.trace(""Param="" + parameterTypes[n].getName());
                            log.trace(""Method="" + methodsParams[n].getName());
                        }
                        if (!isAssignmentCompatible(methodsParams[n], parameterTypes[n])) {
                            if (log.isTraceEnabled()) {
                                log.trace(methodsParams[n] + "" is not assignable from ""
                                            + parameterTypes[n]);
                            }
                            match = false;
                            break;
                        }
                    }

                    if (match) {
                        // get accessible version of method
                        final Method method = getAccessibleMethod(clazz, method2);
                        if (method != null) {
                            if (log.isTraceEnabled()) {
                                log.trace(method + "" accessible version of ""
                                            + method2);
                            }
                            setMethodAccessible(method); // Default access superclass workaround
                            myCost = getTotalTransformationCost(parameterTypes,method.getParameterTypes());
                            if ( myCost < bestMatchCost ) {
                               bestMatch = method;
                               bestMatchCost = myCost;
                            }
                        }

                        log.trace(""Couldn't find accessible method."");
                    }
                }
            }
        }
        if ( bestMatch != null ){
                 cacheMethod(md, bestMatch);
        } else {
        // didn't find a match
               log.trace(""No match found."");
        }

        return bestMatch;
    }","  public void test56()  throws Throwable  {
      Class<Long> class0 = Long.class;
      Class<Long>[] classArray0 = (Class<Long>[]) Array.newInstance(Class.class, 3);
      Method method0 = MethodUtils.getMatchingAccessibleMethod(class0, ""numberOfTrailingZeros"", classArray0);
}"
575,"    public static Object invokeStaticMethod(
            final Class<?> objectClass,
            final String methodName,
            final Object arg)
            throws
            NoSuchMethodException,
            IllegalAccessException,
            InvocationTargetException {

        final Object[] args = toArray(arg);
        return invokeStaticMethod (objectClass, methodName, args);
    }","  public void test57()  throws Throwable  {
      Character character0 = new Character('9');
      Character.highSurrogate(3267);
      String string0 = ""toString"";
      Class<Short>[] classArray0 = null;
      MethodUtils.invokeExactMethod((Object) character0, ""toString"", (Object[]) null, (Class<?>[]) null);
      Class<Method> class0 = Method.class;
      MethodUtils.getAccessibleMethod(class0, ""toString"", (Class<?>[]) null);
      try { 
        MethodUtils.invokeStaticMethod((Class<?>) class0, ""NoCaFqK"", (Object[]) null, (Class<?>[]) null);
        fail(""Expecting exception: NoSuchMethodException"");
      } catch(NoSuchMethodException e) {
         //
         // No such accessible method: NoCaFqK() on class: java.lang.reflect.Method
         //
         verifyException(""org.apache.commons.beanutils.MethodUtils"", e);
      }
  }"
576,"    public static Object invokeExactStaticMethod(
            final Class<?> objectClass,
            final String methodName,
            Object[] args,
            Class<?>[] parameterTypes)
            throws
            NoSuchMethodException,
            IllegalAccessException,
            InvocationTargetException {

        if (args == null) {
            args = EMPTY_OBJECT_ARRAY;
        }

        if (parameterTypes == null) {
            parameterTypes = EMPTY_CLASS_PARAMETERS;
        }

        final Method method = getAccessibleMethod(
                objectClass,
                methodName,
                parameterTypes);
        if (method == null) {
            throw new NoSuchMethodException(""No such accessible method: "" +
                    methodName + ""() on class: "" + objectClass.getName());
        }
        return method.invoke(null, args);
    }","  public void test58()  throws Throwable  {
      // Undeclared exception!
      try { 
        MethodUtils.invokeExactStaticMethod((Class<?>) null, "")=n@z"", (Object[]) null);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Class cannot be null
         //
         verifyException(""org.apache.commons.beanutils.MethodUtils$MethodDescriptor"", e);
      }
  }"
577,"    public static Object invokeStaticMethod(
            final Class<?> objectClass,
            final String methodName,
            final Object arg)
            throws
            NoSuchMethodException,
            IllegalAccessException,
            InvocationTargetException {

        final Object[] args = toArray(arg);
        return invokeStaticMethod (objectClass, methodName, args);
    }","  public void test59()  throws Throwable  {
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        MethodUtils.invokeStaticMethod(class0, (String) null, (Object[]) null);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Method Name cannot be null
         //
         verifyException(""org.apache.commons.beanutils.MethodUtils$MethodDescriptor"", e);
      }
  }"
578,"    public static Object invokeExactMethod(
            final Object object,
            final String methodName,
            final Object arg)
            throws
            NoSuchMethodException,
            IllegalAccessException,
            InvocationTargetException {

        final Object[] args = toArray(arg);
        return invokeExactMethod(object, methodName, args);
    }","  public void test60()  throws Throwable  {
      Class<Double>[] classArray0 = (Class<Double>[]) Array.newInstance(Class.class, 2);
      try { 
        MethodUtils.invokeExactMethod((Object) ""A`Dq/Xx=)BXDwF"", """", (Object[]) null, (Class<?>[]) classArray0);
        fail(""Expecting exception: NoSuchMethodException"");
      } catch(NoSuchMethodException e) {
         //
         // No such accessible method: () on object: java.lang.String
         //
         verifyException(""org.apache.commons.beanutils.MethodUtils"", e);
      }
  }"
579,"    public static Object invokeExactMethod(
            final Object object,
            final String methodName,
            final Object arg)
            throws
            NoSuchMethodException,
            IllegalAccessException,
            InvocationTargetException {

        final Object[] args = toArray(arg);
        return invokeExactMethod(object, methodName, args);
    }","  public void test61()  throws Throwable  {
      try { 
        MethodUtils.invokeExactMethod((Object) ""wait"", ""^SwCgY#6p'+d^."", (Object[]) null);
        fail(""Expecting exception: NoSuchMethodException"");
      } catch(NoSuchMethodException e) {
         //
         // No such accessible method: ^SwCgY#6p'+d^.() on object: java.lang.String
         //
         verifyException(""org.apache.commons.beanutils.MethodUtils"", e);
      }
  }"
580,"    public static Object invokeMethod(
            final Object object,
            final String methodName,
            final Object arg)
            throws
            NoSuchMethodException,
            IllegalAccessException,
            InvocationTargetException {

        final Object[] args = toArray(arg);
        return invokeMethod(object, methodName, args);
    }","  public void test62()  throws Throwable  {
      Long long0 = new Long((-237L));
      Class<String>[] classArray0 = (Class<String>[]) Array.newInstance(Class.class, 3);
      try { 
        MethodUtils.invokeMethod((Object) long0, ""II{wUz@iY}Xcdx -q|"", (Object[]) null, (Class<?>[]) classArray0);
        fail(""Expecting exception: NoSuchMethodException"");
      } catch(NoSuchMethodException e) {
         //
         // No such accessible method: II{wUz@iY}Xcdx -q|() on object: java.lang.Long
         //
         verifyException(""org.apache.commons.beanutils.MethodUtils"", e);
      }
  }"
581,"    public static Object invokeMethod(
            final Object object,
            final String methodName,
            final Object arg)
            throws
            NoSuchMethodException,
            IllegalAccessException,
            InvocationTargetException {

        final Object[] args = toArray(arg);
        return invokeMethod(object, methodName, args);
    }","  public void test63()  throws Throwable  {
      Byte byte0 = new Byte((byte)27);
      // Undeclared exception!
      try { 
        MethodUtils.invokeMethod((Object) byte0, (String) null, (Object[]) null);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Method Name cannot be null
         //
         verifyException(""org.apache.commons.beanutils.MethodUtils$MethodDescriptor"", e);
      }
  }"
582,"    public static Object invokeExactMethod(
            final Object object,
            final String methodName,
            final Object arg)
            throws
            NoSuchMethodException,
            IllegalAccessException,
            InvocationTargetException {

        final Object[] args = toArray(arg);
        return invokeExactMethod(object, methodName, args);
    }","  public void test64()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      Boolean boolean0 = Boolean.valueOf(""eqj|]b0+&Y\""FT{,U&["");
      Object object0 = MethodUtils.invokeStaticMethod((Class<?>) class0, ""hashCode"", (Object) boolean0);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) class0;
      objectArray0[1] = (Object) boolean0;
      objectArray0[2] = object0;
      objectArray0[3] = (Object) ""hashCode"";
      objectArray0[4] = (Object) class0;
      // Undeclared exception!
      try { 
        MethodUtils.invokeExactMethod(object0, (String) null, objectArray0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Method Name cannot be null
         //
         verifyException(""org.apache.commons.beanutils.MethodUtils$MethodDescriptor"", e);
      }
  }"
583,"    public static Method getAccessibleMethod(
            final Class<?> clazz,
            final String methodName,
            final Class<?> parameterType) {

        final Class<?>[] parameterTypes = {parameterType};
        return getAccessibleMethod(clazz, methodName, parameterTypes);
    }","  public void test65()  throws Throwable  {
      Class<Short>[] classArray0 = (Class<Short>[]) Array.newInstance(Class.class, 4);
      // Undeclared exception!
      try { 
        MethodUtils.getAccessibleMethod((Class<?>) null, ""+ZUoR`X@3}|=F"", classArray0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Class cannot be null
         //
         verifyException(""org.apache.commons.beanutils.MethodUtils$MethodDescriptor"", e);
      }
  }"
584,"    public static Object invokeStaticMethod(
            final Class<?> objectClass,
            final String methodName,
            final Object arg)
            throws
            NoSuchMethodException,
            IllegalAccessException,
            InvocationTargetException {

        final Object[] args = toArray(arg);
        return invokeStaticMethod (objectClass, methodName, args);
    }","  public void test66()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Class<?> class1 = MethodUtils.toNonPrimitiveClass(class0);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) ""decode"";
      try { 
        MethodUtils.invokeStaticMethod(class1, ""decode"", objectArray0);
        fail(""Expecting exception: InvocationTargetException"");
      } catch(InvocationTargetException e) {
      }
  }"
585,"    public static Class<?> getPrimitiveWrapper(final Class<?> primitiveType) {
        // does anyone know a better strategy than comparing names?
        if (boolean.class.equals(primitiveType)) {
            return Boolean.class;
        } else if (float.class.equals(primitiveType)) {
            return Float.class;
        } else if (long.class.equals(primitiveType)) {
            return Long.class;
        } else if (int.class.equals(primitiveType)) {
            return Integer.class;
        } else if (short.class.equals(primitiveType)) {
            return Short.class;
        } else if (byte.class.equals(primitiveType)) {
            return Byte.class;
        } else if (double.class.equals(primitiveType)) {
            return Double.class;
        } else if (char.class.equals(primitiveType)) {
            return Character.class;
        } else {

            return null;
        }
    }","  public void test67()  throws Throwable  {
      Class<Character> class0 = Character.class;
      Class<?> class1 = MethodUtils.getPrimitiveType(class0);
      Class<?> class2 = MethodUtils.getPrimitiveWrapper(class1);
}"
586,"    public static Class<?> getPrimitiveWrapper(final Class<?> primitiveType) {
        // does anyone know a better strategy than comparing names?
        if (boolean.class.equals(primitiveType)) {
            return Boolean.class;
        } else if (float.class.equals(primitiveType)) {
            return Float.class;
        } else if (long.class.equals(primitiveType)) {
            return Long.class;
        } else if (int.class.equals(primitiveType)) {
            return Integer.class;
        } else if (short.class.equals(primitiveType)) {
            return Short.class;
        } else if (byte.class.equals(primitiveType)) {
            return Byte.class;
        } else if (double.class.equals(primitiveType)) {
            return Double.class;
        } else if (char.class.equals(primitiveType)) {
            return Character.class;
        } else {

            return null;
        }
    }","  public void test68()  throws Throwable  {
      Class<Character> class0 = Character.class;
      Class<?> class1 = MethodUtils.getPrimitiveType(class0);
      Class<?> class2 = MethodUtils.getPrimitiveWrapper(class1);
}"
587,"    public static Class<?> getPrimitiveType(final Class<?> wrapperType) {
        // does anyone know a better strategy than comparing names?
        if (Boolean.class.equals(wrapperType)) {
            return boolean.class;
        } else if (Float.class.equals(wrapperType)) {
            return float.class;
        } else if (Long.class.equals(wrapperType)) {
            return long.class;
        } else if (Integer.class.equals(wrapperType)) {
            return int.class;
        } else if (Short.class.equals(wrapperType)) {
            return short.class;
        } else if (Byte.class.equals(wrapperType)) {
            return byte.class;
        } else if (Double.class.equals(wrapperType)) {
            return double.class;
        } else if (Character.class.equals(wrapperType)) {
            return char.class;
        } else {
            final Log log = LogFactory.getLog(MethodUtils.class);
            if (log.isDebugEnabled()) {
                log.debug(""Not a known primitive wrapper class: "" + wrapperType);
            }
            return null;
        }
    }","  public void test69()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      Class<?> class1 = MethodUtils.getPrimitiveType(class0);
}"
588,"    public static Class<?> getPrimitiveType(final Class<?> wrapperType) {
        // does anyone know a better strategy than comparing names?
        if (Boolean.class.equals(wrapperType)) {
            return boolean.class;
        } else if (Float.class.equals(wrapperType)) {
            return float.class;
        } else if (Long.class.equals(wrapperType)) {
            return long.class;
        } else if (Integer.class.equals(wrapperType)) {
            return int.class;
        } else if (Short.class.equals(wrapperType)) {
            return short.class;
        } else if (Byte.class.equals(wrapperType)) {
            return byte.class;
        } else if (Double.class.equals(wrapperType)) {
            return double.class;
        } else if (Character.class.equals(wrapperType)) {
            return char.class;
        } else {
            final Log log = LogFactory.getLog(MethodUtils.class);
            if (log.isDebugEnabled()) {
                log.debug(""Not a known primitive wrapper class: "" + wrapperType);
            }
            return null;
        }
    }","  public void test70()  throws Throwable  {
      Class<Byte> class0 = Byte.class;
      Class<?> class1 = MethodUtils.getPrimitiveType(class0);
}"
589,"    public static Class<?> getPrimitiveType(final Class<?> wrapperType) {
        // does anyone know a better strategy than comparing names?
        if (Boolean.class.equals(wrapperType)) {
            return boolean.class;
        } else if (Float.class.equals(wrapperType)) {
            return float.class;
        } else if (Long.class.equals(wrapperType)) {
            return long.class;
        } else if (Integer.class.equals(wrapperType)) {
            return int.class;
        } else if (Short.class.equals(wrapperType)) {
            return short.class;
        } else if (Byte.class.equals(wrapperType)) {
            return byte.class;
        } else if (Double.class.equals(wrapperType)) {
            return double.class;
        } else if (Character.class.equals(wrapperType)) {
            return char.class;
        } else {
            final Log log = LogFactory.getLog(MethodUtils.class);
            if (log.isDebugEnabled()) {
                log.debug(""Not a known primitive wrapper class: "" + wrapperType);
            }
            return null;
        }
    }","  public void test71()  throws Throwable  {
      Class<Byte> class0 = Byte.class;
      Class<?> class1 = MethodUtils.getPrimitiveType(class0);
}"
590,"    public static Object invokeStaticMethod(
            final Class<?> objectClass,
            final String methodName,
            final Object arg)
            throws
            NoSuchMethodException,
            IllegalAccessException,
            InvocationTargetException {

        final Object[] args = toArray(arg);
        return invokeStaticMethod (objectClass, methodName, args);
    }","  public void test72()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Class<?> class1 = MethodUtils.getPrimitiveType(class0);
      Object[] objectArray0 = new Object[1];
      // Undeclared exception!
      try { 
        MethodUtils.invokeStaticMethod(class1, ""decode"", objectArray0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
591,"    public static Class<?> getPrimitiveType(final Class<?> wrapperType) {
        // does anyone know a better strategy than comparing names?
        if (Boolean.class.equals(wrapperType)) {
            return boolean.class;
        } else if (Float.class.equals(wrapperType)) {
            return float.class;
        } else if (Long.class.equals(wrapperType)) {
            return long.class;
        } else if (Integer.class.equals(wrapperType)) {
            return int.class;
        } else if (Short.class.equals(wrapperType)) {
            return short.class;
        } else if (Byte.class.equals(wrapperType)) {
            return byte.class;
        } else if (Double.class.equals(wrapperType)) {
            return double.class;
        } else if (Character.class.equals(wrapperType)) {
            return char.class;
        } else {
            final Log log = LogFactory.getLog(MethodUtils.class);
            if (log.isDebugEnabled()) {
                log.debug(""Not a known primitive wrapper class: "" + wrapperType);
            }
            return null;
        }
    }","  public void test73()  throws Throwable  {
      Class<Long> class0 = Long.class;
      Class<?> class1 = MethodUtils.getPrimitiveType(class0);
}"
592,"    public static Class<?> getPrimitiveType(final Class<?> wrapperType) {
        // does anyone know a better strategy than comparing names?
        if (Boolean.class.equals(wrapperType)) {
            return boolean.class;
        } else if (Float.class.equals(wrapperType)) {
            return float.class;
        } else if (Long.class.equals(wrapperType)) {
            return long.class;
        } else if (Integer.class.equals(wrapperType)) {
            return int.class;
        } else if (Short.class.equals(wrapperType)) {
            return short.class;
        } else if (Byte.class.equals(wrapperType)) {
            return byte.class;
        } else if (Double.class.equals(wrapperType)) {
            return double.class;
        } else if (Character.class.equals(wrapperType)) {
            return char.class;
        } else {
            final Log log = LogFactory.getLog(MethodUtils.class);
            if (log.isDebugEnabled()) {
                log.debug(""Not a known primitive wrapper class: "" + wrapperType);
            }
            return null;
        }
    }","  public void test74()  throws Throwable  {
      Class<Long> class0 = Long.class;
      Class<?> class1 = MethodUtils.getPrimitiveType(class0);
}"
593,"    public static Class<?> getPrimitiveType(final Class<?> wrapperType) {
        // does anyone know a better strategy than comparing names?
        if (Boolean.class.equals(wrapperType)) {
            return boolean.class;
        } else if (Float.class.equals(wrapperType)) {
            return float.class;
        } else if (Long.class.equals(wrapperType)) {
            return long.class;
        } else if (Integer.class.equals(wrapperType)) {
            return int.class;
        } else if (Short.class.equals(wrapperType)) {
            return short.class;
        } else if (Byte.class.equals(wrapperType)) {
            return byte.class;
        } else if (Double.class.equals(wrapperType)) {
            return double.class;
        } else if (Character.class.equals(wrapperType)) {
            return char.class;
        } else {
            final Log log = LogFactory.getLog(MethodUtils.class);
            if (log.isDebugEnabled()) {
                log.debug(""Not a known primitive wrapper class: "" + wrapperType);
            }
            return null;
        }
    }","  public void test75()  throws Throwable  {
      Class<Float> class0 = Float.class;
      Class<?> class1 = MethodUtils.getPrimitiveType(class0);
}"
594,"    public static Class<?> getPrimitiveType(final Class<?> wrapperType) {
        // does anyone know a better strategy than comparing names?
        if (Boolean.class.equals(wrapperType)) {
            return boolean.class;
        } else if (Float.class.equals(wrapperType)) {
            return float.class;
        } else if (Long.class.equals(wrapperType)) {
            return long.class;
        } else if (Integer.class.equals(wrapperType)) {
            return int.class;
        } else if (Short.class.equals(wrapperType)) {
            return short.class;
        } else if (Byte.class.equals(wrapperType)) {
            return byte.class;
        } else if (Double.class.equals(wrapperType)) {
            return double.class;
        } else if (Character.class.equals(wrapperType)) {
            return char.class;
        } else {
            final Log log = LogFactory.getLog(MethodUtils.class);
            if (log.isDebugEnabled()) {
                log.debug(""Not a known primitive wrapper class: "" + wrapperType);
            }
            return null;
        }
    }","  public void test76()  throws Throwable  {
      Class<Float> class0 = Float.class;
      Class<?> class1 = MethodUtils.getPrimitiveType(class0);
}"
595,"    public static Class<?> getPrimitiveType(final Class<?> wrapperType) {
        // does anyone know a better strategy than comparing names?
        if (Boolean.class.equals(wrapperType)) {
            return boolean.class;
        } else if (Float.class.equals(wrapperType)) {
            return float.class;
        } else if (Long.class.equals(wrapperType)) {
            return long.class;
        } else if (Integer.class.equals(wrapperType)) {
            return int.class;
        } else if (Short.class.equals(wrapperType)) {
            return short.class;
        } else if (Byte.class.equals(wrapperType)) {
            return byte.class;
        } else if (Double.class.equals(wrapperType)) {
            return double.class;
        } else if (Character.class.equals(wrapperType)) {
            return char.class;
        } else {
            final Log log = LogFactory.getLog(MethodUtils.class);
            if (log.isDebugEnabled()) {
                log.debug(""Not a known primitive wrapper class: "" + wrapperType);
            }
            return null;
        }
    }","  public void test77()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      Class<?> class1 = MethodUtils.getPrimitiveType(class0);
}"
596,"    public static Class<?> toNonPrimitiveClass(final Class<?> clazz) {
        if (clazz.isPrimitive()) {
            final Class<?> primitiveClazz = MethodUtils.getPrimitiveWrapper(clazz);
            // the above method returns
            if (primitiveClazz != null) {
                return primitiveClazz;
            } else {
                return clazz;
            }
        } else {
            return clazz;
        }
    }","  public void test78()  throws Throwable  {
      Class<Character> class0 = Character.TYPE;
      Class<?> class1 = MethodUtils.toNonPrimitiveClass(class0);
}"
597,"    public static Object invokeMethod(
            final Object object,
            final String methodName,
            final Object arg)
            throws
            NoSuchMethodException,
            IllegalAccessException,
            InvocationTargetException {

        final Object[] args = toArray(arg);
        return invokeMethod(object, methodName, args);
    }","  public void test79()  throws Throwable  {
      Double double0 = new Double(1.0);
      try { 
        MethodUtils.invokeMethod((Object) double0, ""doubleToRawLongBits"", (Object) ""doubleToRawLongBits"");
        fail(""Expecting exception: NoSuchMethodException"");
      } catch(NoSuchMethodException e) {
         //
         // No such accessible method: doubleToRawLongBits() on object: java.lang.Double
         //
         verifyException(""org.apache.commons.beanutils.MethodUtils"", e);
      }
  }"
598,"    public static final boolean isAssignmentCompatible(final Class<?> parameterType, final Class<?> parameterization) {
        // try plain assignment
        if (parameterType.isAssignableFrom(parameterization)) {
            return true;
        }

        if (parameterType.isPrimitive()) {
            // this method does *not* do widening - you must specify exactly
            // is this the right behaviour?
            final Class<?> parameterWrapperClazz = getPrimitiveWrapper(parameterType);
            if (parameterWrapperClazz != null) {
                return parameterWrapperClazz.equals(parameterization);
            }
        }

        return false;
    }","  public void test80()  throws Throwable  {
      Class<Byte> class0 = Byte.TYPE;
      Class<Short> class1 = Short.class;
      boolean boolean0 = MethodUtils.isAssignmentCompatible(class0, class1);
}"
599,"    public static Class<?> getPrimitiveType(final Class<?> wrapperType) {
        // does anyone know a better strategy than comparing names?
        if (Boolean.class.equals(wrapperType)) {
            return boolean.class;
        } else if (Float.class.equals(wrapperType)) {
            return float.class;
        } else if (Long.class.equals(wrapperType)) {
            return long.class;
        } else if (Integer.class.equals(wrapperType)) {
            return int.class;
        } else if (Short.class.equals(wrapperType)) {
            return short.class;
        } else if (Byte.class.equals(wrapperType)) {
            return byte.class;
        } else if (Double.class.equals(wrapperType)) {
            return double.class;
        } else if (Character.class.equals(wrapperType)) {
            return char.class;
        } else {
            final Log log = LogFactory.getLog(MethodUtils.class);
            if (log.isDebugEnabled()) {
                log.debug(""Not a known primitive wrapper class: "" + wrapperType);
            }
            return null;
        }
    }","  public void test81()  throws Throwable  {
      Class<Short> class0 = Short.class;
      Class<?> class1 = MethodUtils.getPrimitiveType(class0);
}"
600,"    public static Class<?> toNonPrimitiveClass(final Class<?> clazz) {
        if (clazz.isPrimitive()) {
            final Class<?> primitiveClazz = MethodUtils.getPrimitiveWrapper(clazz);
            // the above method returns
            if (primitiveClazz != null) {
                return primitiveClazz;
            } else {
                return clazz;
            }
        } else {
            return clazz;
        }
    }","  public void test82()  throws Throwable  {
      Class<Short> class0 = Short.class;
      Class<?> class1 = MethodUtils.getPrimitiveType(class0);
      Class<?> class2 = MethodUtils.toNonPrimitiveClass(class1);
}"
601,"    public static Class<?> toNonPrimitiveClass(final Class<?> clazz) {
        if (clazz.isPrimitive()) {
            final Class<?> primitiveClazz = MethodUtils.getPrimitiveWrapper(clazz);
            // the above method returns
            if (primitiveClazz != null) {
                return primitiveClazz;
            } else {
                return clazz;
            }
        } else {
            return clazz;
        }
    }","  public void test83()  throws Throwable  {
      Class<Double> class0 = Double.class;
      Method method0 = MethodUtils.getMatchingAccessibleMethod(class0, ""notifyAll"", (Class<?>[]) null);
      Class class1 = (Class)method0.getGenericReturnType();
      Class<?> class2 = MethodUtils.toNonPrimitiveClass(class1);
}"
602,"    public static Class<?> toNonPrimitiveClass(final Class<?> clazz) {
        if (clazz.isPrimitive()) {
            final Class<?> primitiveClazz = MethodUtils.getPrimitiveWrapper(clazz);
            // the above method returns
            if (primitiveClazz != null) {
                return primitiveClazz;
            } else {
                return clazz;
            }
        } else {
            return clazz;
        }
    }","  public void test84()  throws Throwable  {
      Class<Double> class0 = Double.class;
      Method method0 = MethodUtils.getMatchingAccessibleMethod(class0, ""notifyAll"", (Class<?>[]) null);
      Class class1 = (Class)method0.getGenericReturnType();
      Class<?> class2 = MethodUtils.toNonPrimitiveClass(class1);
}"
603,"    public static Object invokeMethod(
            final Object object,
            final String methodName,
            final Object arg)
            throws
            NoSuchMethodException,
            IllegalAccessException,
            InvocationTargetException {

        final Object[] args = toArray(arg);
        return invokeMethod(object, methodName, args);
    }","  public void test85()  throws Throwable  {
      Class<MethodUtils>[] classArray0 = (Class<MethodUtils>[]) Array.newInstance(Class.class, 1);
      Class<MethodUtils> class0 = MethodUtils.class;
      classArray0[0] = class0;
      Float float0 = new Float(0.0);
      try { 
        MethodUtils.invokeMethod((Object) float0, ""hashCode"", (Object[]) classArray0);
        fail(""Expecting exception: NoSuchMethodException"");
      } catch(NoSuchMethodException e) {
         //
         // No such accessible method: hashCode() on object: java.lang.Float
         //
         verifyException(""org.apache.commons.beanutils.MethodUtils"", e);
      }
  }"
604,"    public static final boolean isAssignmentCompatible(final Class<?> parameterType, final Class<?> parameterization) {
        // try plain assignment
        if (parameterType.isAssignableFrom(parameterization)) {
            return true;
        }

        if (parameterType.isPrimitive()) {
            // this method does *not* do widening - you must specify exactly
            // is this the right behaviour?
            final Class<?> parameterWrapperClazz = getPrimitiveWrapper(parameterType);
            if (parameterWrapperClazz != null) {
                return parameterWrapperClazz.equals(parameterization);
            }
        }

        return false;
    }","  public void test86()  throws Throwable  {
      Class<Byte> class0 = Byte.class;
      Class<Short> class1 = Short.TYPE;
      boolean boolean0 = MethodUtils.isAssignmentCompatible(class0, class1);
}"
605,"    public static Object invokeMethod(
            final Object object,
            final String methodName,
            final Object arg)
            throws
            NoSuchMethodException,
            IllegalAccessException,
            InvocationTargetException {

        final Object[] args = toArray(arg);
        return invokeMethod(object, methodName, args);
    }","  public void test87()  throws Throwable  {
      MethodUtils methodUtils0 = new MethodUtils();
      Object[] objectArray0 = new Object[9];
      Byte byte0 = new Byte((byte)64);
      Object object0 = MethodUtils.invokeMethod((Object) methodUtils0, ""equals"", (Object) byte0);
}"
606,"    public static Class<?> getPrimitiveType(final Class<?> wrapperType) {
        // does anyone know a better strategy than comparing names?
        if (Boolean.class.equals(wrapperType)) {
            return boolean.class;
        } else if (Float.class.equals(wrapperType)) {
            return float.class;
        } else if (Long.class.equals(wrapperType)) {
            return long.class;
        } else if (Integer.class.equals(wrapperType)) {
            return int.class;
        } else if (Short.class.equals(wrapperType)) {
            return short.class;
        } else if (Byte.class.equals(wrapperType)) {
            return byte.class;
        } else if (Double.class.equals(wrapperType)) {
            return double.class;
        } else if (Character.class.equals(wrapperType)) {
            return char.class;
        } else {
            final Log log = LogFactory.getLog(MethodUtils.class);
            if (log.isDebugEnabled()) {
                log.debug(""Not a known primitive wrapper class: "" + wrapperType);
            }
            return null;
        }
    }","  public void test88()  throws Throwable  {
      MethodUtils methodUtils0 = new MethodUtils();
      Object[] objectArray0 = new Object[9];
      Byte byte0 = new Byte((byte)64);
      Object object0 = MethodUtils.invokeMethod((Object) methodUtils0, ""equals"", (Object) byte0);
      Class<Double> class0 = Double.class;
      Class<?> class1 = MethodUtils.getPrimitiveType(class0);
}"
607,"    public static Class<?> getPrimitiveType(final Class<?> wrapperType) {
        // does anyone know a better strategy than comparing names?
        if (Boolean.class.equals(wrapperType)) {
            return boolean.class;
        } else if (Float.class.equals(wrapperType)) {
            return float.class;
        } else if (Long.class.equals(wrapperType)) {
            return long.class;
        } else if (Integer.class.equals(wrapperType)) {
            return int.class;
        } else if (Short.class.equals(wrapperType)) {
            return short.class;
        } else if (Byte.class.equals(wrapperType)) {
            return byte.class;
        } else if (Double.class.equals(wrapperType)) {
            return double.class;
        } else if (Character.class.equals(wrapperType)) {
            return char.class;
        } else {
            final Log log = LogFactory.getLog(MethodUtils.class);
            if (log.isDebugEnabled()) {
                log.debug(""Not a known primitive wrapper class: "" + wrapperType);
            }
            return null;
        }
    }","  public void test89()  throws Throwable  {
      MethodUtils methodUtils0 = new MethodUtils();
      Object[] objectArray0 = new Object[9];
      Byte byte0 = new Byte((byte)64);
      Object object0 = MethodUtils.invokeMethod((Object) methodUtils0, ""equals"", (Object) byte0);
      Class<Double> class0 = Double.class;
      Class<?> class1 = MethodUtils.getPrimitiveType(class0);
}"
608,"    public static Object invokeStaticMethod(
            final Class<?> objectClass,
            final String methodName,
            final Object arg)
            throws
            NoSuchMethodException,
            IllegalAccessException,
            InvocationTargetException {

        final Object[] args = toArray(arg);
        return invokeStaticMethod (objectClass, methodName, args);
    }","  public void test90()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      Class<?> class1 = MethodUtils.toNonPrimitiveClass(class0);
      try { 
        MethodUtils.invokeStaticMethod(class1, ""wait"", (Object) class0);
        fail(""Expecting exception: NoSuchMethodException"");
      } catch(NoSuchMethodException e) {
         //
         // No such accessible method: wait() on class: java.lang.Integer
         //
         verifyException(""org.apache.commons.beanutils.MethodUtils"", e);
      }
  }"
609,"    public static Method getAccessibleMethod(
            final Class<?> clazz,
            final String methodName,
            final Class<?> parameterType) {

        final Class<?>[] parameterTypes = {parameterType};
        return getAccessibleMethod(clazz, methodName, parameterTypes);
    }","  public void test91()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      Method method0 = MethodUtils.getAccessibleMethod(class0, ""notifyAll"", (Class<?>[]) null);
      Method method1 = MethodUtils.getAccessibleMethod(class0, method0);
}"
610,"    public static Method getAccessibleMethod(
            final Class<?> clazz,
            final String methodName,
            final Class<?> parameterType) {

        final Class<?>[] parameterTypes = {parameterType};
        return getAccessibleMethod(clazz, methodName, parameterTypes);
    }","  public void test92()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      Method method0 = MethodUtils.getAccessibleMethod(class0, ""notifyAll"", (Class<?>[]) null);
      Method method1 = MethodUtils.getAccessibleMethod(class0, method0);
}"
611,"    public static Method getAccessibleMethod(
            final Class<?> clazz,
            final String methodName,
            final Class<?> parameterType) {

        final Class<?>[] parameterTypes = {parameterType};
        return getAccessibleMethod(clazz, methodName, parameterTypes);
    }","  public void test93()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      Method method0 = MethodUtils.getAccessibleMethod(class0, ""notifyAll"", (Class<?>[]) null);
      Method method1 = MethodUtils.getAccessibleMethod(class0, method0);
}"
612,"    public static Method getAccessibleMethod(
            final Class<?> clazz,
            final String methodName,
            final Class<?> parameterType) {

        final Class<?>[] parameterTypes = {parameterType};
        return getAccessibleMethod(clazz, methodName, parameterTypes);
    }","  public void test94()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 2);
      classArray0[0] = class0;
      classArray0[1] = class0;
      Method method0 = MethodUtils.getMatchingAccessibleMethod(class0, ""min"", classArray0);
      Class<String> class1 = String.class;
      // Undeclared exception!
      try { 
        MethodUtils.getAccessibleMethod(class1, method0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // java.lang.String is not assignable from java.lang.Integer
         //
         verifyException(""org.apache.commons.beanutils.MethodUtils"", e);
      }
  }"
613,"    public static Method getAccessibleMethod(
            final Class<?> clazz,
            final String methodName,
            final Class<?> parameterType) {

        final Class<?>[] parameterTypes = {parameterType};
        return getAccessibleMethod(clazz, methodName, parameterTypes);
    }","  public void test95()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      Method method0 = MethodUtils.getAccessibleMethod(class0, ""notifyAll"", (Class<?>[]) null);
      Method method1 = MethodUtils.getAccessibleMethod((Class<?>) null, method0);
}"
614,"    public static Method getAccessibleMethod(
            final Class<?> clazz,
            final String methodName,
            final Class<?> parameterType) {

        final Class<?>[] parameterTypes = {parameterType};
        return getAccessibleMethod(clazz, methodName, parameterTypes);
    }","  public void test96()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      Method method0 = MethodUtils.getAccessibleMethod(class0, ""notifyAll"", (Class<?>[]) null);
      Method method1 = MethodUtils.getAccessibleMethod((Class<?>) null, method0);
}"
615,"    public static Method getAccessibleMethod(
            final Class<?> clazz,
            final String methodName,
            final Class<?> parameterType) {

        final Class<?>[] parameterTypes = {parameterType};
        return getAccessibleMethod(clazz, methodName, parameterTypes);
    }","  public void test97()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      Method method0 = MethodUtils.getAccessibleMethod(class0, (Method) null);
}"
616,"    public static Method getAccessibleMethod(
            final Class<?> clazz,
            final String methodName,
            final Class<?> parameterType) {

        final Class<?>[] parameterTypes = {parameterType};
        return getAccessibleMethod(clazz, methodName, parameterTypes);
    }","  public void test98()  throws Throwable  {
      Method method0 = MethodUtils.getAccessibleMethod((Method) null);
}"
617,"    public static Method getAccessibleMethod(
            final Class<?> clazz,
            final String methodName,
            final Class<?> parameterType) {

        final Class<?>[] parameterTypes = {parameterType};
        return getAccessibleMethod(clazz, methodName, parameterTypes);
    }","  public void test99()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      Method method0 = MethodUtils.getAccessibleMethod(class0, ""notifyAll"", (Class<?>[]) null);
      Method method1 = MethodUtils.getAccessibleMethod(method0);
}"
618,"    public static Method getAccessibleMethod(
            final Class<?> clazz,
            final String methodName,
            final Class<?> parameterType) {

        final Class<?>[] parameterTypes = {parameterType};
        return getAccessibleMethod(clazz, methodName, parameterTypes);
    }","  public void test100()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      Method method0 = MethodUtils.getAccessibleMethod(class0, ""notifyAll"", (Class<?>[]) null);
      Method method1 = MethodUtils.getAccessibleMethod(method0);
}"
619,"    public static Object invokeExactStaticMethod(
            final Class<?> objectClass,
            final String methodName,
            Object[] args,
            Class<?>[] parameterTypes)
            throws
            NoSuchMethodException,
            IllegalAccessException,
            InvocationTargetException {

        if (args == null) {
            args = EMPTY_OBJECT_ARRAY;
        }

        if (parameterTypes == null) {
            parameterTypes = EMPTY_CLASS_PARAMETERS;
        }

        final Method method = getAccessibleMethod(
                objectClass,
                methodName,
                parameterTypes);
        if (method == null) {
            throw new NoSuchMethodException(""No such accessible method: "" +
                    methodName + ""() on class: "" + objectClass.getName());
        }
        return method.invoke(null, args);
    }","  public void test101()  throws Throwable  {
      Class<Double> class0 = Double.class;
      Object[] objectArray0 = new Object[1];
      // Undeclared exception!
      try { 
        MethodUtils.invokeExactStaticMethod(class0, ""pS8X"", objectArray0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.beanutils.MethodUtils"", e);
      }
  }"
620,"    public static Object invokeStaticMethod(
            final Class<?> objectClass,
            final String methodName,
            final Object arg)
            throws
            NoSuchMethodException,
            IllegalAccessException,
            InvocationTargetException {

        final Object[] args = toArray(arg);
        return invokeStaticMethod (objectClass, methodName, args);
    }","  public void test102()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      Class<Boolean> class0 = Boolean.class;
      // Undeclared exception!
      try { 
        MethodUtils.invokeStaticMethod(class0, ""notifyAll"", objectArray0, (Class<?>[]) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
      }
  }"
621,"    public static Object invokeExactStaticMethod(
            final Class<?> objectClass,
            final String methodName,
            Object[] args,
            Class<?>[] parameterTypes)
            throws
            NoSuchMethodException,
            IllegalAccessException,
            InvocationTargetException {

        if (args == null) {
            args = EMPTY_OBJECT_ARRAY;
        }

        if (parameterTypes == null) {
            parameterTypes = EMPTY_CLASS_PARAMETERS;
        }

        final Method method = getAccessibleMethod(
                objectClass,
                methodName,
                parameterTypes);
        if (method == null) {
            throw new NoSuchMethodException(""No such accessible method: "" +
                    methodName + ""() on class: "" + objectClass.getName());
        }
        return method.invoke(null, args);
    }","  public void test103()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      Class<Boolean> class0 = Boolean.class;
      // Undeclared exception!
      try { 
        MethodUtils.invokeExactStaticMethod(class0, ""notifyAll"", objectArray0, (Class<?>[]) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
      }
  }"
622,"    public static Object invokeExactStaticMethod(
            final Class<?> objectClass,
            final String methodName,
            Object[] args,
            Class<?>[] parameterTypes)
            throws
            NoSuchMethodException,
            IllegalAccessException,
            InvocationTargetException {

        if (args == null) {
            args = EMPTY_OBJECT_ARRAY;
        }

        if (parameterTypes == null) {
            parameterTypes = EMPTY_CLASS_PARAMETERS;
        }

        final Method method = getAccessibleMethod(
                objectClass,
                methodName,
                parameterTypes);
        if (method == null) {
            throw new NoSuchMethodException(""No such accessible method: "" +
                    methodName + ""() on class: "" + objectClass.getName());
        }
        return method.invoke(null, args);
    }","  public void test104()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      Class<Short>[] classArray0 = (Class<Short>[]) Array.newInstance(Class.class, 3);
      try { 
        MethodUtils.invokeExactStaticMethod(class0, ""2eV(6"", (Object[]) null, classArray0);
        fail(""Expecting exception: NoSuchMethodException"");
      } catch(NoSuchMethodException e) {
         //
         // No such accessible method: 2eV(6() on class: java.lang.Boolean
         //
         verifyException(""org.apache.commons.beanutils.MethodUtils"", e);
      }
  }"
623,"    public static Object invokeExactMethod(
            final Object object,
            final String methodName,
            final Object arg)
            throws
            NoSuchMethodException,
            IllegalAccessException,
            InvocationTargetException {

        final Object[] args = toArray(arg);
        return invokeExactMethod(object, methodName, args);
    }","  public void test105()  throws Throwable  {
      Character character0 = new Character('*');
      try { 
        MethodUtils.invokeExactMethod((Object) character0, ""notifyAll"", (Object[]) null, (Class<?>[]) null);
        fail(""Expecting exception: InvocationTargetException"");
      } catch(InvocationTargetException e) {
      }
  }"
624,"    public static Object invokeExactMethod(
            final Object object,
            final String methodName,
            final Object arg)
            throws
            NoSuchMethodException,
            IllegalAccessException,
            InvocationTargetException {

        final Object[] args = toArray(arg);
        return invokeExactMethod(object, methodName, args);
    }","  public void test106()  throws Throwable  {
      // Undeclared exception!
      try { 
        MethodUtils.invokeExactMethod((Object) null, """", (Object) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.beanutils.MethodUtils"", e);
      }
  }"
625,"    public static Object invokeMethod(
            final Object object,
            final String methodName,
            final Object arg)
            throws
            NoSuchMethodException,
            IllegalAccessException,
            InvocationTargetException {

        final Object[] args = toArray(arg);
        return invokeMethod(object, methodName, args);
    }","  public void test107()  throws Throwable  {
      MethodUtils methodUtils0 = new MethodUtils();
      try { 
        MethodUtils.invokeMethod((Object) methodUtils0, ""notifyAll"", (Object[]) null, (Class<?>[]) null);
        fail(""Expecting exception: InvocationTargetException"");
      } catch(InvocationTargetException e) {
      }
  }"
626,"    public static Method getMatchingAccessibleMethod(
                                                final Class<?> clazz,
                                                final String methodName,
                                                final Class<?>[] parameterTypes) {
        // trace logging
        final Log log = LogFactory.getLog(MethodUtils.class);
        if (log.isTraceEnabled()) {
            log.trace(""Matching name="" + methodName + "" on "" + clazz);
        }
        final MethodDescriptor md = new MethodDescriptor(clazz, methodName, parameterTypes, false);

        // see if we can find the method directly
        // most of the time this works and it's much faster
        try {
            // Check the cache first
            Method method = getCachedMethod(md);
            if (method != null) {
                return method;
            }

            method = clazz.getMethod(methodName, parameterTypes);
            if (log.isTraceEnabled()) {
                log.trace(""Found straight match: "" + method);
                log.trace(""isPublic:"" + Modifier.isPublic(method.getModifiers()));
            }

            setMethodAccessible(method); // Default access superclass workaround

            cacheMethod(md, method);
            return method;

        } catch (final NoSuchMethodException e) { /* SWALLOW */ }

        // search through all methods
        final int paramSize = parameterTypes.length;
        Method bestMatch = null;
        final Method[] methods = clazz.getMethods();
        float bestMatchCost = Float.MAX_VALUE;
        float myCost = Float.MAX_VALUE;
        for (Method method2 : methods) {
            if (method2.getName().equals(methodName)) {
                // log some trace information
                if (log.isTraceEnabled()) {
                    log.trace(""Found matching name:"");
                    log.trace(method2);
                }

                // compare parameters
                final Class<?>[] methodsParams = method2.getParameterTypes();
                final int methodParamSize = methodsParams.length;
                if (methodParamSize == paramSize) {
                    boolean match = true;
                    for (int n = 0 ; n < methodParamSize; n++) {
                        if (log.isTraceEnabled()) {
                            log.trace(""Param="" + parameterTypes[n].getName());
                            log.trace(""Method="" + methodsParams[n].getName());
                        }
                        if (!isAssignmentCompatible(methodsParams[n], parameterTypes[n])) {
                            if (log.isTraceEnabled()) {
                                log.trace(methodsParams[n] + "" is not assignable from ""
                                            + parameterTypes[n]);
                            }
                            match = false;
                            break;
                        }
                    }

                    if (match) {
                        // get accessible version of method
                        final Method method = getAccessibleMethod(clazz, method2);
                        if (method != null) {
                            if (log.isTraceEnabled()) {
                                log.trace(method + "" accessible version of ""
                                            + method2);
                            }
                            setMethodAccessible(method); // Default access superclass workaround
                            myCost = getTotalTransformationCost(parameterTypes,method.getParameterTypes());
                            if ( myCost < bestMatchCost ) {
                               bestMatch = method;
                               bestMatchCost = myCost;
                            }
                        }

                        log.trace(""Couldn't find accessible method."");
                    }
                }
            }
        }
        if ( bestMatch != null ){
                 cacheMethod(md, bestMatch);
        } else {
        // didn't find a match
               log.trace(""No match found."");
        }

        return bestMatch;
    }","  public void test108()  throws Throwable  {
      MethodUtils.setCacheMethods(false);
      Class<Double> class0 = Double.class;
      Method method0 = MethodUtils.getMatchingAccessibleMethod(class0, ""notifyAll"", (Class<?>[]) null);
}"
627,"    public static Method getMatchingAccessibleMethod(
                                                final Class<?> clazz,
                                                final String methodName,
                                                final Class<?>[] parameterTypes) {
        // trace logging
        final Log log = LogFactory.getLog(MethodUtils.class);
        if (log.isTraceEnabled()) {
            log.trace(""Matching name="" + methodName + "" on "" + clazz);
        }
        final MethodDescriptor md = new MethodDescriptor(clazz, methodName, parameterTypes, false);

        // see if we can find the method directly
        // most of the time this works and it's much faster
        try {
            // Check the cache first
            Method method = getCachedMethod(md);
            if (method != null) {
                return method;
            }

            method = clazz.getMethod(methodName, parameterTypes);
            if (log.isTraceEnabled()) {
                log.trace(""Found straight match: "" + method);
                log.trace(""isPublic:"" + Modifier.isPublic(method.getModifiers()));
            }

            setMethodAccessible(method); // Default access superclass workaround

            cacheMethod(md, method);
            return method;

        } catch (final NoSuchMethodException e) { /* SWALLOW */ }

        // search through all methods
        final int paramSize = parameterTypes.length;
        Method bestMatch = null;
        final Method[] methods = clazz.getMethods();
        float bestMatchCost = Float.MAX_VALUE;
        float myCost = Float.MAX_VALUE;
        for (Method method2 : methods) {
            if (method2.getName().equals(methodName)) {
                // log some trace information
                if (log.isTraceEnabled()) {
                    log.trace(""Found matching name:"");
                    log.trace(method2);
                }

                // compare parameters
                final Class<?>[] methodsParams = method2.getParameterTypes();
                final int methodParamSize = methodsParams.length;
                if (methodParamSize == paramSize) {
                    boolean match = true;
                    for (int n = 0 ; n < methodParamSize; n++) {
                        if (log.isTraceEnabled()) {
                            log.trace(""Param="" + parameterTypes[n].getName());
                            log.trace(""Method="" + methodsParams[n].getName());
                        }
                        if (!isAssignmentCompatible(methodsParams[n], parameterTypes[n])) {
                            if (log.isTraceEnabled()) {
                                log.trace(methodsParams[n] + "" is not assignable from ""
                                            + parameterTypes[n]);
                            }
                            match = false;
                            break;
                        }
                    }

                    if (match) {
                        // get accessible version of method
                        final Method method = getAccessibleMethod(clazz, method2);
                        if (method != null) {
                            if (log.isTraceEnabled()) {
                                log.trace(method + "" accessible version of ""
                                            + method2);
                            }
                            setMethodAccessible(method); // Default access superclass workaround
                            myCost = getTotalTransformationCost(parameterTypes,method.getParameterTypes());
                            if ( myCost < bestMatchCost ) {
                               bestMatch = method;
                               bestMatchCost = myCost;
                            }
                        }

                        log.trace(""Couldn't find accessible method."");
                    }
                }
            }
        }
        if ( bestMatch != null ){
                 cacheMethod(md, bestMatch);
        } else {
        // didn't find a match
               log.trace(""No match found."");
        }

        return bestMatch;
    }","  public void test109()  throws Throwable  {
      MethodUtils.setCacheMethods(false);
      Class<Double> class0 = Double.class;
      Method method0 = MethodUtils.getMatchingAccessibleMethod(class0, ""notifyAll"", (Class<?>[]) null);
}"
628,"    public static Object invokeExactMethod(
            final Object object,
            final String methodName,
            final Object arg)
            throws
            NoSuchMethodException,
            IllegalAccessException,
            InvocationTargetException {

        final Object[] args = toArray(arg);
        return invokeExactMethod(object, methodName, args);
    }","  public void test110()  throws Throwable  {
      Class<Method> class0 = Method.class;
      try { 
        MethodUtils.invokeExactMethod((Object) ""lAKl.oeRM#YZs^"", ""org.apache.commons.logging.impl.Log4JLogger"", (Object) class0);
        fail(""Expecting exception: NoSuchMethodException"");
      } catch(NoSuchMethodException e) {
         //
         // No such accessible method: org.apache.commons.logging.impl.Log4JLogger() on object: java.lang.String
         //
         verifyException(""org.apache.commons.beanutils.MethodUtils"", e);
      }
  }"
629,"    public static Object invokeExactStaticMethod(
            final Class<?> objectClass,
            final String methodName,
            Object[] args,
            Class<?>[] parameterTypes)
            throws
            NoSuchMethodException,
            IllegalAccessException,
            InvocationTargetException {

        if (args == null) {
            args = EMPTY_OBJECT_ARRAY;
        }

        if (parameterTypes == null) {
            parameterTypes = EMPTY_CLASS_PARAMETERS;
        }

        final Method method = getAccessibleMethod(
                objectClass,
                methodName,
                parameterTypes);
        if (method == null) {
            throw new NoSuchMethodException(""No such accessible method: "" +
                    methodName + ""() on class: "" + objectClass.getName());
        }
        return method.invoke(null, args);
    }","  public void test111()  throws Throwable  {
      Class<MethodUtils> class0 = MethodUtils.class;
      try { 
        MethodUtils.invokeExactStaticMethod(class0, ""utg3Y&x@M,6n~P"", (Object) null);
        fail(""Expecting exception: NoSuchMethodException"");
      } catch(NoSuchMethodException e) {
         //
         // No such accessible method: utg3Y&x@M,6n~P() on class: org.apache.commons.beanutils.MethodUtils
         //
         verifyException(""org.apache.commons.beanutils.MethodUtils"", e);
      }
  }"
630,"    public static Object invokeMethod(
            final Object object,
            final String methodName,
            final Object arg)
            throws
            NoSuchMethodException,
            IllegalAccessException,
            InvocationTargetException {

        final Object[] args = toArray(arg);
        return invokeMethod(object, methodName, args);
    }","  public void test112()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      Object object0 = MethodUtils.invokeMethod((Object) class0, ""hashCode"", (Object) null);
      try { 
        MethodUtils.invokeMethod((Object) class0, ""hashCode"", object0);
        fail(""Expecting exception: NoSuchMethodException"");
      } catch(NoSuchMethodException e) {
         //
         // No such accessible method: hashCode() on object: java.lang.Class
         //
         verifyException(""org.apache.commons.beanutils.MethodUtils"", e);
      }
  }"
631,"    public static Method getAccessibleMethod(
            final Class<?> clazz,
            final String methodName,
            final Class<?> parameterType) {

        final Class<?>[] parameterTypes = {parameterType};
        return getAccessibleMethod(clazz, methodName, parameterTypes);
    }","  public void test113()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      Method method0 = MethodUtils.getAccessibleMethod(class0, ""hashCode"", class0);
}"
632,"    public static Object invokeExactMethod(
            final Object object,
            final String methodName,
            final Object arg)
            throws
            NoSuchMethodException,
            IllegalAccessException,
            InvocationTargetException {

        final Object[] args = toArray(arg);
        return invokeExactMethod(object, methodName, args);
    }","  public void test114()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-1));
      Object[] objectArray0 = new Object[1];
      // Undeclared exception!
      try { 
        MethodUtils.invokeExactMethod((Object) byte0, ""notifyAll"", objectArray0, (Class<?>[]) null);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
      }
  }"
633,"    public int size() {
        return getDynaProperties().length;
    }","  public void test0()  throws Throwable  {
      Class<Object> class0 = Object.class;
      WrapDynaClass wrapDynaClass0 = WrapDynaClass.createDynaClass(class0);
      DynaBean dynaBean0 = wrapDynaClass0.newInstance();
      DynaBeanPropertyMapDecorator dynaBeanPropertyMapDecorator0 = new DynaBeanPropertyMapDecorator(dynaBean0, false);
      int int0 = dynaBeanPropertyMapDecorator0.size();
}"
634,"    public int size() {
        return getDynaProperties().length;
    }","  public void test1()  throws Throwable  {
      Class<Object> class0 = Object.class;
      WrapDynaClass wrapDynaClass0 = WrapDynaClass.createDynaClass(class0);
      ConvertingWrapDynaBean convertingWrapDynaBean0 = new ConvertingWrapDynaBean(wrapDynaClass0);
      DynaBeanPropertyMapDecorator dynaBeanPropertyMapDecorator0 = new DynaBeanPropertyMapDecorator(convertingWrapDynaBean0, false);
      int int0 = dynaBeanPropertyMapDecorator0.size();
}"
635,"    public Object put(final K key, final Object value) {
        if (isReadOnly()) {
            throw new UnsupportedOperationException(""Map is read only"");
        }
        final String property = toString(key);
        final Object previous = getDynaBean().get(property);
        getDynaBean().set(property, value);
        return previous;
    }","  public void test2()  throws Throwable  {
      LazyDynaMap lazyDynaMap0 = new LazyDynaMap();
      DynaBeanPropertyMapDecorator dynaBeanPropertyMapDecorator0 = new DynaBeanPropertyMapDecorator(lazyDynaMap0, false);
      Object object0 = dynaBeanPropertyMapDecorator0.put(""DynaClass is currently restricted. No properties can be removed."", lazyDynaMap0);
}"
636,"    public boolean isReadOnly() {
        return readOnly;
    }","  public void test3()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      PropertyUtilsBean propertyUtilsBean0 = PropertyUtilsBean.getInstance();
      WrapDynaClass wrapDynaClass0 = WrapDynaClass.createDynaClass(class0, propertyUtilsBean0);
      WrapDynaBean wrapDynaBean0 = new WrapDynaBean(class0, wrapDynaClass0);
      DynaBeanPropertyMapDecorator dynaBeanPropertyMapDecorator0 = new DynaBeanPropertyMapDecorator(wrapDynaBean0);
      boolean boolean0 = dynaBeanPropertyMapDecorator0.isReadOnly();
}"
637,"    public Object get(final Object key) {
        return getDynaBean().get(toString(key));
    }","  public void test4()  throws Throwable  {
      LazyDynaMap lazyDynaMap0 = new LazyDynaMap();
      Class<DynaProperty> class0 = DynaProperty.class;
      DynaBeanPropertyMapDecorator dynaBeanPropertyMapDecorator0 = new DynaBeanPropertyMapDecorator(lazyDynaMap0, false);
      Object object0 = dynaBeanPropertyMapDecorator0.get(class0);
}"
638,"    public boolean containsKey(final Object key) {
        final DynaClass dynaClass = getDynaBean().getDynaClass();
        final DynaProperty dynaProperty = dynaClass.getDynaProperty(toString(key));
        return (dynaProperty == null ? false : true);
    }","  public void test5()  throws Throwable  {
      LazyDynaMap lazyDynaMap0 = new LazyDynaMap("""", (DynaProperty[]) null);
      DynaBeanPropertyMapDecorator dynaBeanPropertyMapDecorator0 = new DynaBeanPropertyMapDecorator(lazyDynaMap0, true);
      Object object0 = new Object();
      boolean boolean0 = dynaBeanPropertyMapDecorator0.containsKey(object0);
}"
639,"    public Collection<Object> values() {
        final DynaProperty[] properties = getDynaProperties();
        final List<Object> values = new ArrayList<Object>(properties.length);
        for (DynaProperty propertie : properties) {
            final String key = propertie.getName();
            final Object value = getDynaBean().get(key);
            values.add(value);
        }
        return Collections.unmodifiableList(values);
    }","  public void test6()  throws Throwable  {
      WrapDynaBean wrapDynaBean0 = new WrapDynaBean("""");
      DynaBeanPropertyMapDecorator dynaBeanPropertyMapDecorator0 = new DynaBeanPropertyMapDecorator(wrapDynaBean0);
      Class<LazyDynaMap> class0 = LazyDynaMap.class;
      WrapDynaClass wrapDynaClass0 = WrapDynaClass.createDynaClass(class0);
      wrapDynaBean0.dynaClass = wrapDynaClass0;
      // Undeclared exception!
      try { 
        dynaBeanPropertyMapDecorator0.values();
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Error reading property 'dynaProperties', exception - java.lang.NoSuchMethodException: Unknown property 'dynaProperties' on class 'class java.lang.String'
         //
         verifyException(""org.apache.commons.beanutils.WrapDynaBean"", e);
      }
  }"
640,"    public void putAll(final Map<? extends K, ? extends Object> map) {
        if (isReadOnly()) {
            throw new UnsupportedOperationException(""Map is read only"");
        }
        for (final Map.Entry<? extends K, ?> e : map.entrySet()) {
            put(e.getKey(), e.getValue());
        }
    }","  public void test7()  throws Throwable  {
      Class<Object> class0 = Object.class;
      WrapDynaClass wrapDynaClass0 = WrapDynaClass.createDynaClass(class0);
      DynaBean dynaBean0 = wrapDynaClass0.newInstance();
      DynaBeanPropertyMapDecorator dynaBeanPropertyMapDecorator0 = new DynaBeanPropertyMapDecorator(dynaBean0, false);
      // Undeclared exception!
      try { 
        dynaBeanPropertyMapDecorator0.putAll((Map<? extends String, ?>) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.beanutils.BaseDynaBeanMapDecorator"", e);
      }
  }"
641,"    public Object put(final K key, final Object value) {
        if (isReadOnly()) {
            throw new UnsupportedOperationException(""Map is read only"");
        }
        final String property = toString(key);
        final Object previous = getDynaBean().get(property);
        getDynaBean().set(property, value);
        return previous;
    }","  public void test8()  throws Throwable  {
      Class<Object> class0 = Object.class;
      WrapDynaClass wrapDynaClass0 = WrapDynaClass.createDynaClass(class0);
      DynaBean dynaBean0 = wrapDynaClass0.newInstance();
      DynaBeanPropertyMapDecorator dynaBeanPropertyMapDecorator0 = new DynaBeanPropertyMapDecorator(dynaBean0, true);
      // Undeclared exception!
      try { 
        dynaBeanPropertyMapDecorator0.put("""", (Object) null);
        fail(""Expecting exception: UnsupportedOperationException"");
      } catch(UnsupportedOperationException e) {
         //
         // Map is read only
         //
         verifyException(""org.apache.commons.beanutils.BaseDynaBeanMapDecorator"", e);
      }
  }"
642,"    public Object put(final K key, final Object value) {
        if (isReadOnly()) {
            throw new UnsupportedOperationException(""Map is read only"");
        }
        final String property = toString(key);
        final Object previous = getDynaBean().get(property);
        getDynaBean().set(property, value);
        return previous;
    }","  public void test9()  throws Throwable  {
      Object object0 = new Object();
      ResultSetIterator resultSetIterator0 = new ResultSetIterator((ResultSetDynaClass) null);
      DynaBeanPropertyMapDecorator dynaBeanPropertyMapDecorator0 = new DynaBeanPropertyMapDecorator(resultSetIterator0, false);
      // Undeclared exception!
      try { 
        dynaBeanPropertyMapDecorator0.put("""", object0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.beanutils.ResultSetIterator"", e);
      }
  }"
643,"    public Set<K> keySet() {
        if (keySet != null) {
            return keySet;
        }

        // Create a Set of the keys
        final DynaProperty[] properties = getDynaProperties();
        Set<K> set = new HashSet<K>(properties.length);
        for (DynaProperty propertie : properties) {
            set.add(convertKey(propertie.getName()));
        }
        set = Collections.unmodifiableSet(set);

        // Cache the keySet if Not a MutableDynaClass
        final DynaClass dynaClass = getDynaBean().getDynaClass();
        if (!(dynaClass instanceof MutableDynaClass)) {
            keySet = set;
        }

        return set;

    }","  public void test10()  throws Throwable  {
      ResultSetIterator resultSetIterator0 = new ResultSetIterator((ResultSetDynaClass) null);
      DynaBeanPropertyMapDecorator dynaBeanPropertyMapDecorator0 = new DynaBeanPropertyMapDecorator(resultSetIterator0, false);
      // Undeclared exception!
      try { 
        dynaBeanPropertyMapDecorator0.keySet();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.beanutils.BaseDynaBeanMapDecorator"", e);
      }
  }"
644,"    public Object get(final Object key) {
        return getDynaBean().get(toString(key));
    }","  public void test11()  throws Throwable  {
      Integer integer0 = LazyDynaBean.Integer_ZERO;
      ConvertingWrapDynaBean convertingWrapDynaBean0 = new ConvertingWrapDynaBean(integer0);
      DynaBeanPropertyMapDecorator dynaBeanPropertyMapDecorator0 = new DynaBeanPropertyMapDecorator(convertingWrapDynaBean0, false);
      // Undeclared exception!
      try { 
        dynaBeanPropertyMapDecorator0.get(integer0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Error reading property 'java.lang.Integer@0000000006', exception - org.evosuite.runtime.mock.java.lang.MockThrowable: Nested property names are not allowed: Property 'java.lang.Integer@0000000006' on bean class 'class java.lang.Integer'
         //
         verifyException(""org.apache.commons.beanutils.WrapDynaBean"", e);
      }
  }"
645,"    public Set<Map.Entry<K, Object>> entrySet() {
        final DynaProperty[] properties = getDynaProperties();
        final Set<Map.Entry<K, Object>> set = new HashSet<Map.Entry<K, Object>>(properties.length);
        for (DynaProperty propertie : properties) {
            final K key = convertKey(propertie.getName());
            final Object value = getDynaBean().get(propertie.getName());
            set.add(new MapEntry<K>(key, value));
        }
        return Collections.unmodifiableSet(set);
    }","  public void test12()  throws Throwable  {
      Class<Object> class0 = Object.class;
      WrapDynaClass wrapDynaClass0 = WrapDynaClass.createDynaClass(class0);
      WrapDynaBean wrapDynaBean0 = new WrapDynaBean((Object) null, wrapDynaClass0);
      Class<String> class1 = String.class;
      WrapDynaClass wrapDynaClass1 = WrapDynaClass.createDynaClass(class1);
      wrapDynaBean0.dynaClass = wrapDynaClass1;
      DynaBeanPropertyMapDecorator dynaBeanPropertyMapDecorator0 = new DynaBeanPropertyMapDecorator(wrapDynaBean0, true);
      // Undeclared exception!
      try { 
        dynaBeanPropertyMapDecorator0.entrySet();
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Error reading property 'bytes', exception - org.evosuite.runtime.mock.java.lang.MockThrowable: No bean specified
         //
         verifyException(""org.apache.commons.beanutils.WrapDynaBean"", e);
      }
  }"
646,"    public boolean containsValue(final Object value) {
        final DynaProperty[] properties = getDynaProperties();
        for (DynaProperty propertie : properties) {
            final String key = propertie.getName();
            final Object prop = getDynaBean().get(key);
            if (value == null) {
                if (prop == null) {
                    return true;
                }
            } else {
                if (value.equals(prop)) {
                    return true;
                }
            }
        }
        return false;
    }","  public void test13()  throws Throwable  {
      ResultSetIterator resultSetIterator0 = new ResultSetIterator((ResultSetDynaClass) null);
      DynaBeanPropertyMapDecorator dynaBeanPropertyMapDecorator0 = new DynaBeanPropertyMapDecorator(resultSetIterator0);
      // Undeclared exception!
      try { 
        dynaBeanPropertyMapDecorator0.containsValue(resultSetIterator0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.beanutils.BaseDynaBeanMapDecorator"", e);
      }
  }"
647,"    public boolean containsValue(final Object value) {
        final DynaProperty[] properties = getDynaProperties();
        for (DynaProperty propertie : properties) {
            final String key = propertie.getName();
            final Object prop = getDynaBean().get(key);
            if (value == null) {
                if (prop == null) {
                    return true;
                }
            } else {
                if (value.equals(prop)) {
                    return true;
                }
            }
        }
        return false;
    }","  public void test14()  throws Throwable  {
      Class<Object> class0 = Object.class;
      WrapDynaClass wrapDynaClass0 = WrapDynaClass.createDynaClass(class0);
      WrapDynaBean wrapDynaBean0 = new WrapDynaBean((Object) null, wrapDynaClass0);
      Class<String> class1 = String.class;
      WrapDynaClass wrapDynaClass1 = WrapDynaClass.createDynaClass(class1);
      wrapDynaBean0.dynaClass = wrapDynaClass1;
      DynaBeanPropertyMapDecorator dynaBeanPropertyMapDecorator0 = new DynaBeanPropertyMapDecorator(wrapDynaBean0, true);
      // Undeclared exception!
      try { 
        dynaBeanPropertyMapDecorator0.containsValue((Object) null);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Error reading property 'bytes', exception - org.evosuite.runtime.mock.java.lang.MockThrowable: No bean specified
         //
         verifyException(""org.apache.commons.beanutils.WrapDynaBean"", e);
      }
  }"
648,"    public Set<K> keySet() {
        if (keySet != null) {
            return keySet;
        }

        // Create a Set of the keys
        final DynaProperty[] properties = getDynaProperties();
        Set<K> set = new HashSet<K>(properties.length);
        for (DynaProperty propertie : properties) {
            set.add(convertKey(propertie.getName()));
        }
        set = Collections.unmodifiableSet(set);

        // Cache the keySet if Not a MutableDynaClass
        final DynaClass dynaClass = getDynaBean().getDynaClass();
        if (!(dynaClass instanceof MutableDynaClass)) {
            keySet = set;
        }

        return set;

    }","  public void test15()  throws Throwable  {
      Class<Object> class0 = Object.class;
      WrapDynaClass wrapDynaClass0 = WrapDynaClass.createDynaClass(class0);
      WrapDynaBean wrapDynaBean0 = new WrapDynaBean((Object) null, wrapDynaClass0);
      Class<String> class1 = String.class;
      WrapDynaClass wrapDynaClass1 = WrapDynaClass.createDynaClass(class1);
      wrapDynaBean0.dynaClass = wrapDynaClass1;
      DynaBeanPropertyMapDecorator dynaBeanPropertyMapDecorator0 = new DynaBeanPropertyMapDecorator(wrapDynaBean0, true);
      Set<String> set0 = dynaBeanPropertyMapDecorator0.keySet();
}"
649,"    public int size() {
        return getDynaProperties().length;
    }","  public void test16()  throws Throwable  {
      Class<Object> class0 = Object.class;
      WrapDynaClass wrapDynaClass0 = WrapDynaClass.createDynaClass(class0);
      WrapDynaBean wrapDynaBean0 = new WrapDynaBean((Object) null, wrapDynaClass0);
      Class<String> class1 = String.class;
      WrapDynaClass wrapDynaClass1 = WrapDynaClass.createDynaClass(class1);
      wrapDynaBean0.dynaClass = wrapDynaClass1;
      DynaBeanPropertyMapDecorator dynaBeanPropertyMapDecorator0 = new DynaBeanPropertyMapDecorator(wrapDynaBean0, true);
      Set<String> set0 = dynaBeanPropertyMapDecorator0.keySet();
}"
650,"    public DynaBean getDynaBean() {
        return dynaBean;
    }","  public void test17()  throws Throwable  {
      Class<Object> class0 = Object.class;
      WrapDynaClass wrapDynaClass0 = WrapDynaClass.createDynaClass(class0);
      DynaBean dynaBean0 = wrapDynaClass0.newInstance();
      DynaBeanPropertyMapDecorator dynaBeanPropertyMapDecorator0 = new DynaBeanPropertyMapDecorator(dynaBean0, false);
      DynaBean dynaBean1 = dynaBeanPropertyMapDecorator0.getDynaBean();
}"
651,"    public boolean isReadOnly() {
        return readOnly;
    }","  public void test18()  throws Throwable  {
      Class<Object> class0 = Object.class;
      WrapDynaClass wrapDynaClass0 = WrapDynaClass.createDynaClass(class0);
      DynaBean dynaBean0 = wrapDynaClass0.newInstance();
      DynaBeanPropertyMapDecorator dynaBeanPropertyMapDecorator0 = new DynaBeanPropertyMapDecorator(dynaBean0, false);
      boolean boolean0 = dynaBeanPropertyMapDecorator0.isReadOnly();
}"
652,"    public int size() {
        return getDynaProperties().length;
    }","  public void test19()  throws Throwable  {
      Class<PropertyDescriptor> class0 = PropertyDescriptor.class;
      WrapDynaClass wrapDynaClass0 = WrapDynaClass.createDynaClass(class0);
      BasicDynaBean basicDynaBean0 = new BasicDynaBean(wrapDynaClass0);
      DynaBeanPropertyMapDecorator dynaBeanPropertyMapDecorator0 = new DynaBeanPropertyMapDecorator(basicDynaBean0);
      Set<Map.Entry<String, Object>> set0 = (Set<Map.Entry<String, Object>>)dynaBeanPropertyMapDecorator0.entrySet();
}"
653,"    public boolean containsKey(final Object key) {
        final DynaClass dynaClass = getDynaBean().getDynaClass();
        final DynaProperty dynaProperty = dynaClass.getDynaProperty(toString(key));
        return (dynaProperty == null ? false : true);
    }","  public void test20()  throws Throwable  {
      WrapDynaBean wrapDynaBean0 = new WrapDynaBean(""H:o"");
      DynaBeanPropertyMapDecorator dynaBeanPropertyMapDecorator0 = new DynaBeanPropertyMapDecorator(wrapDynaBean0);
      // Undeclared exception!
      try { 
        dynaBeanPropertyMapDecorator0.containsKey((Object) null);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // No property name specified
         //
         verifyException(""org.apache.commons.beanutils.WrapDynaClass"", e);
      }
  }"
654,"    public Collection<Object> values() {
        final DynaProperty[] properties = getDynaProperties();
        final List<Object> values = new ArrayList<Object>(properties.length);
        for (DynaProperty propertie : properties) {
            final String key = propertie.getName();
            final Object value = getDynaBean().get(key);
            values.add(value);
        }
        return Collections.unmodifiableList(values);
    }","  public void test21()  throws Throwable  {
      LazyDynaBean lazyDynaBean0 = new LazyDynaBean();
      lazyDynaBean0.get("""", """");
      DynaBeanPropertyMapDecorator dynaBeanPropertyMapDecorator0 = new DynaBeanPropertyMapDecorator(lazyDynaBean0);
      Collection<Object> collection0 = dynaBeanPropertyMapDecorator0.values();
}"
655,"    public boolean isEmpty() {
        return (getDynaProperties().length == 0);
    }","  public void test22()  throws Throwable  {
      LazyDynaMap lazyDynaMap0 = new LazyDynaMap();
      DynaBeanPropertyMapDecorator dynaBeanPropertyMapDecorator0 = new DynaBeanPropertyMapDecorator(lazyDynaMap0, false);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put(""Unknown property '"", ""Unknown property '"");
      dynaBeanPropertyMapDecorator0.putAll(hashMap0);
}"
656,"    public void putAll(final Map<? extends K, ? extends Object> map) {
        if (isReadOnly()) {
            throw new UnsupportedOperationException(""Map is read only"");
        }
        for (final Map.Entry<? extends K, ?> e : map.entrySet()) {
            put(e.getKey(), e.getValue());
        }
    }","  public void test23()  throws Throwable  {
      Class<Object> class0 = Object.class;
      WrapDynaClass wrapDynaClass0 = WrapDynaClass.createDynaClass(class0);
      DynaBean dynaBean0 = wrapDynaClass0.newInstance();
      DynaBeanPropertyMapDecorator dynaBeanPropertyMapDecorator0 = new DynaBeanPropertyMapDecorator(dynaBean0, true);
      // Undeclared exception!
      try { 
        dynaBeanPropertyMapDecorator0.putAll(dynaBeanPropertyMapDecorator0);
        fail(""Expecting exception: UnsupportedOperationException"");
      } catch(UnsupportedOperationException e) {
         //
         // Map is read only
         //
         verifyException(""org.apache.commons.beanutils.BaseDynaBeanMapDecorator"", e);
      }
  }"
657,"    public Object put(final K key, final Object value) {
        if (isReadOnly()) {
            throw new UnsupportedOperationException(""Map is read only"");
        }
        final String property = toString(key);
        final Object previous = getDynaBean().get(property);
        getDynaBean().set(property, value);
        return previous;
    }","  public void test24()  throws Throwable  {
      Class<Object> class0 = Object.class;
      WrapDynaClass wrapDynaClass0 = WrapDynaClass.createDynaClass(class0);
      DynaBean dynaBean0 = wrapDynaClass0.newInstance();
      DynaBeanPropertyMapDecorator dynaBeanPropertyMapDecorator0 = new DynaBeanPropertyMapDecorator(dynaBean0, false);
      // Undeclared exception!
      try { 
        dynaBeanPropertyMapDecorator0.put("""", (Object) null);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Error reading property 'java.lang.String@0000000007', exception - org.evosuite.runtime.mock.java.lang.MockThrowable: Nested property names are not allowed: Property 'java.lang.String@0000000007' on bean class 'class java.lang.Object'
         //
         verifyException(""org.apache.commons.beanutils.WrapDynaBean"", e);
      }
  }"
658,"    public boolean isReadOnly() {
        return readOnly;
    }","  public void test25()  throws Throwable  {
      LazyDynaMap lazyDynaMap0 = new LazyDynaMap();
      DynaBeanPropertyMapDecorator dynaBeanPropertyMapDecorator0 = new DynaBeanPropertyMapDecorator(lazyDynaMap0, false);
      Set<String> set0 = dynaBeanPropertyMapDecorator0.keySet();
}"
659,"    public Set<K> keySet() {
        if (keySet != null) {
            return keySet;
        }

        // Create a Set of the keys
        final DynaProperty[] properties = getDynaProperties();
        Set<K> set = new HashSet<K>(properties.length);
        for (DynaProperty propertie : properties) {
            set.add(convertKey(propertie.getName()));
        }
        set = Collections.unmodifiableSet(set);

        // Cache the keySet if Not a MutableDynaClass
        final DynaClass dynaClass = getDynaBean().getDynaClass();
        if (!(dynaClass instanceof MutableDynaClass)) {
            keySet = set;
        }

        return set;

    }","  public void test26()  throws Throwable  {
      LazyDynaMap lazyDynaMap0 = new LazyDynaMap();
      DynaBeanPropertyMapDecorator dynaBeanPropertyMapDecorator0 = new DynaBeanPropertyMapDecorator(lazyDynaMap0, false);
      Set<String> set0 = dynaBeanPropertyMapDecorator0.keySet();
}"
660,"    public boolean isReadOnly() {
        return readOnly;
    }","  public void test27()  throws Throwable  {
      Class<Object> class0 = Object.class;
      WrapDynaClass wrapDynaClass0 = WrapDynaClass.createDynaClass(class0);
      DynaBean dynaBean0 = wrapDynaClass0.newInstance();
      DynaBeanPropertyMapDecorator dynaBeanPropertyMapDecorator0 = new DynaBeanPropertyMapDecorator(dynaBean0, false);
      Set<String> set0 = dynaBeanPropertyMapDecorator0.keySet();
      Set<String> set1 = dynaBeanPropertyMapDecorator0.keySet();
}"
661,"    public Set<K> keySet() {
        if (keySet != null) {
            return keySet;
        }

        // Create a Set of the keys
        final DynaProperty[] properties = getDynaProperties();
        Set<K> set = new HashSet<K>(properties.length);
        for (DynaProperty propertie : properties) {
            set.add(convertKey(propertie.getName()));
        }
        set = Collections.unmodifiableSet(set);

        // Cache the keySet if Not a MutableDynaClass
        final DynaClass dynaClass = getDynaBean().getDynaClass();
        if (!(dynaClass instanceof MutableDynaClass)) {
            keySet = set;
        }

        return set;

    }","  public void test28()  throws Throwable  {
      Class<Object> class0 = Object.class;
      WrapDynaClass wrapDynaClass0 = WrapDynaClass.createDynaClass(class0);
      DynaBean dynaBean0 = wrapDynaClass0.newInstance();
      DynaBeanPropertyMapDecorator dynaBeanPropertyMapDecorator0 = new DynaBeanPropertyMapDecorator(dynaBean0, false);
      Set<String> set0 = dynaBeanPropertyMapDecorator0.keySet();
      Set<String> set1 = dynaBeanPropertyMapDecorator0.keySet();
}"
662,"    public Set<K> keySet() {
        if (keySet != null) {
            return keySet;
        }

        // Create a Set of the keys
        final DynaProperty[] properties = getDynaProperties();
        Set<K> set = new HashSet<K>(properties.length);
        for (DynaProperty propertie : properties) {
            set.add(convertKey(propertie.getName()));
        }
        set = Collections.unmodifiableSet(set);

        // Cache the keySet if Not a MutableDynaClass
        final DynaClass dynaClass = getDynaBean().getDynaClass();
        if (!(dynaClass instanceof MutableDynaClass)) {
            keySet = set;
        }

        return set;

    }","  public void test29()  throws Throwable  {
      Class<Object> class0 = Object.class;
      WrapDynaClass wrapDynaClass0 = WrapDynaClass.createDynaClass(class0);
      DynaBean dynaBean0 = wrapDynaClass0.newInstance();
      DynaBeanPropertyMapDecorator dynaBeanPropertyMapDecorator0 = new DynaBeanPropertyMapDecorator(dynaBean0, false);
      Set<String> set0 = dynaBeanPropertyMapDecorator0.keySet();
      Set<String> set1 = dynaBeanPropertyMapDecorator0.keySet();
}"
663,"    public boolean isReadOnly() {
        return readOnly;
    }","  public void test30()  throws Throwable  {
      Class<Object> class0 = Object.class;
      WrapDynaClass wrapDynaClass0 = WrapDynaClass.createDynaClass(class0);
      DynaBean dynaBean0 = wrapDynaClass0.newInstance();
      DynaBeanPropertyMapDecorator dynaBeanPropertyMapDecorator0 = new DynaBeanPropertyMapDecorator(dynaBean0, false);
      boolean boolean0 = dynaBeanPropertyMapDecorator0.isEmpty();
}"
664,"    public boolean isEmpty() {
        return (getDynaProperties().length == 0);
    }","  public void test31()  throws Throwable  {
      Class<Object> class0 = Object.class;
      WrapDynaClass wrapDynaClass0 = WrapDynaClass.createDynaClass(class0);
      DynaBean dynaBean0 = wrapDynaClass0.newInstance();
      DynaBeanPropertyMapDecorator dynaBeanPropertyMapDecorator0 = new DynaBeanPropertyMapDecorator(dynaBean0, false);
      boolean boolean0 = dynaBeanPropertyMapDecorator0.isEmpty();
}"
665,"    public boolean isEmpty() {
        return (getDynaProperties().length == 0);
    }","  public void test32()  throws Throwable  {
      Class<Object> class0 = Object.class;
      WrapDynaClass wrapDynaClass0 = WrapDynaClass.createDynaClass(class0);
      ConvertingWrapDynaBean convertingWrapDynaBean0 = new ConvertingWrapDynaBean(wrapDynaClass0);
      DynaBeanPropertyMapDecorator dynaBeanPropertyMapDecorator0 = new DynaBeanPropertyMapDecorator(convertingWrapDynaBean0, false);
      boolean boolean0 = dynaBeanPropertyMapDecorator0.isEmpty();
}"
666,"    public boolean isReadOnly() {
        return readOnly;
    }","  public void test33()  throws Throwable  {
      Class<Object> class0 = Object.class;
      WrapDynaClass wrapDynaClass0 = WrapDynaClass.createDynaClass(class0);
      ConvertingWrapDynaBean convertingWrapDynaBean0 = new ConvertingWrapDynaBean(wrapDynaClass0);
      DynaBeanPropertyMapDecorator dynaBeanPropertyMapDecorator0 = new DynaBeanPropertyMapDecorator(convertingWrapDynaBean0, false);
      boolean boolean0 = dynaBeanPropertyMapDecorator0.isEmpty();
}"
667,"    public boolean containsValue(final Object value) {
        final DynaProperty[] properties = getDynaProperties();
        for (DynaProperty propertie : properties) {
            final String key = propertie.getName();
            final Object prop = getDynaBean().get(key);
            if (value == null) {
                if (prop == null) {
                    return true;
                }
            } else {
                if (value.equals(prop)) {
                    return true;
                }
            }
        }
        return false;
    }","  public void test34()  throws Throwable  {
      Class<Object> class0 = Object.class;
      WrapDynaClass wrapDynaClass0 = WrapDynaClass.createDynaClass(class0);
      ConvertingWrapDynaBean convertingWrapDynaBean0 = new ConvertingWrapDynaBean(wrapDynaClass0);
      DynaBeanPropertyMapDecorator dynaBeanPropertyMapDecorator0 = new DynaBeanPropertyMapDecorator(convertingWrapDynaBean0, false);
      boolean boolean0 = dynaBeanPropertyMapDecorator0.containsValue((Object) null);
}"
668,"    public boolean isReadOnly() {
        return readOnly;
    }","  public void test35()  throws Throwable  {
      Class<Object> class0 = Object.class;
      WrapDynaClass wrapDynaClass0 = WrapDynaClass.createDynaClass(class0);
      ConvertingWrapDynaBean convertingWrapDynaBean0 = new ConvertingWrapDynaBean(wrapDynaClass0);
      DynaBeanPropertyMapDecorator dynaBeanPropertyMapDecorator0 = new DynaBeanPropertyMapDecorator(convertingWrapDynaBean0, false);
      boolean boolean0 = dynaBeanPropertyMapDecorator0.containsValue((Object) null);
}"
669,"    public boolean containsValue(final Object value) {
        final DynaProperty[] properties = getDynaProperties();
        for (DynaProperty propertie : properties) {
            final String key = propertie.getName();
            final Object prop = getDynaBean().get(key);
            if (value == null) {
                if (prop == null) {
                    return true;
                }
            } else {
                if (value.equals(prop)) {
                    return true;
                }
            }
        }
        return false;
    }","  public void test36()  throws Throwable  {
      WrapDynaBean wrapDynaBean0 = new WrapDynaBean(""H:o"");
      DynaBeanPropertyMapDecorator dynaBeanPropertyMapDecorator0 = new DynaBeanPropertyMapDecorator(wrapDynaBean0);
      Object object0 = new Object();
      boolean boolean0 = dynaBeanPropertyMapDecorator0.containsValue(object0);
}"
670,"    public boolean isReadOnly() {
        return readOnly;
    }","  public void test37()  throws Throwable  {
      WrapDynaBean wrapDynaBean0 = new WrapDynaBean(""H:o"");
      DynaBeanPropertyMapDecorator dynaBeanPropertyMapDecorator0 = new DynaBeanPropertyMapDecorator(wrapDynaBean0);
      Object object0 = new Object();
      boolean boolean0 = dynaBeanPropertyMapDecorator0.containsValue(object0);
}"
671,"    public boolean containsKey(final Object key) {
        final DynaClass dynaClass = getDynaBean().getDynaClass();
        final DynaProperty dynaProperty = dynaClass.getDynaProperty(toString(key));
        return (dynaProperty == null ? false : true);
    }","  public void test38()  throws Throwable  {
      WrapDynaBean wrapDynaBean0 = new WrapDynaBean(""H:o"");
      DynaBeanPropertyMapDecorator dynaBeanPropertyMapDecorator0 = new DynaBeanPropertyMapDecorator(wrapDynaBean0);
      boolean boolean0 = dynaBeanPropertyMapDecorator0.containsKey(""H:o"");
}"
672,"    public boolean isReadOnly() {
        return readOnly;
    }","  public void test39()  throws Throwable  {
      WrapDynaBean wrapDynaBean0 = new WrapDynaBean(""H:o"");
      DynaBeanPropertyMapDecorator dynaBeanPropertyMapDecorator0 = new DynaBeanPropertyMapDecorator(wrapDynaBean0);
      boolean boolean0 = dynaBeanPropertyMapDecorator0.containsKey(""H:o"");
}"
673,,"  public void test40()  throws Throwable  {
      DynaBeanPropertyMapDecorator dynaBeanPropertyMapDecorator0 = null;
      try {
        dynaBeanPropertyMapDecorator0 = new DynaBeanPropertyMapDecorator((DynaBean) null);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // DynaBean is null
         //
         verifyException(""org.apache.commons.beanutils.BaseDynaBeanMapDecorator"", e);
      }
  }"
674,,"  public void test41()  throws Throwable  {
      WrapDynaBean wrapDynaBean0 = new WrapDynaBean(""HG+2Fo"");
      DynaBeanPropertyMapDecorator dynaBeanPropertyMapDecorator0 = new DynaBeanPropertyMapDecorator(wrapDynaBean0);
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn(""HG+2Fo"").when(biFunction0).apply(any() , any());
      // Undeclared exception!
      try { 
        dynaBeanPropertyMapDecorator0.replaceAll(biFunction0);
        fail(""Expecting exception: UnsupportedOperationException"");
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.beanutils.BaseDynaBeanMapDecorator$MapEntry"", e);
      }
  }"
675,"    public int size() {
        return getDynaProperties().length;
    }","  public void test42()  throws Throwable  {
      BasicDynaBean basicDynaBean0 = new BasicDynaBean((DynaClass) null);
      DynaBeanPropertyMapDecorator dynaBeanPropertyMapDecorator0 = new DynaBeanPropertyMapDecorator(basicDynaBean0);
      // Undeclared exception!
      try { 
        dynaBeanPropertyMapDecorator0.size();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.beanutils.BaseDynaBeanMapDecorator"", e);
      }
  }"
676,"    public Object remove(final Object key) {
        throw new UnsupportedOperationException();
    }","  public void test43()  throws Throwable  {
      Object object0 = new Object();
      ConvertingWrapDynaBean convertingWrapDynaBean0 = new ConvertingWrapDynaBean(object0);
      WrapDynaClass wrapDynaClass0 = convertingWrapDynaBean0.dynaClass;
      DynaBeanPropertyMapDecorator dynaBeanPropertyMapDecorator0 = new DynaBeanPropertyMapDecorator(convertingWrapDynaBean0, true);
      // Undeclared exception!
      try { 
        dynaBeanPropertyMapDecorator0.remove((Object) wrapDynaClass0);
        fail(""Expecting exception: UnsupportedOperationException"");
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.beanutils.BaseDynaBeanMapDecorator"", e);
      }
  }"
677,"    public void clear() {
        throw new UnsupportedOperationException();
    }","  public void test44()  throws Throwable  {
      Class<Object> class0 = Object.class;
      WrapDynaClass wrapDynaClass0 = WrapDynaClass.createDynaClass(class0);
      ConvertingWrapDynaBean convertingWrapDynaBean0 = new ConvertingWrapDynaBean(wrapDynaClass0);
      DynaBeanPropertyMapDecorator dynaBeanPropertyMapDecorator0 = new DynaBeanPropertyMapDecorator(convertingWrapDynaBean0, true);
      // Undeclared exception!
      try { 
        dynaBeanPropertyMapDecorator0.clear();
        fail(""Expecting exception: UnsupportedOperationException"");
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.beanutils.BaseDynaBeanMapDecorator"", e);
      }
  }"
678,"    public MappedPropertyDescriptor(final String propertyName, final Class<?> beanClass)
            throws IntrospectionException {

        super(propertyName, null, null);

        if (propertyName == null || propertyName.length() == 0) {
            throw new IntrospectionException(""bad property name: "" +
                    propertyName + "" on class: "" + beanClass.getClass().getName());
        }

        setName(propertyName);
        final String base = capitalizePropertyName(propertyName);

        // Look for mapped read method and matching write method
        Method mappedReadMethod = null;
        Method mappedWriteMethod = null;
        try {
            try {
                mappedReadMethod = getMethod(beanClass, ""get"" + base,
                        STRING_CLASS_PARAMETER);
            } catch (final IntrospectionException e) {
                mappedReadMethod = getMethod(beanClass, ""is"" + base,
                        STRING_CLASS_PARAMETER);
            }
            final Class<?>[] params = { String.class, mappedReadMethod.getReturnType() };
            mappedWriteMethod = getMethod(beanClass, ""set"" + base, params);
        } catch (final IntrospectionException e) {
            /* Swallow IntrospectionException
             * TODO: Why?
             */
        }

        // If there's no read method, then look for just a write method
        if (mappedReadMethod == null) {
            mappedWriteMethod = getMethod(beanClass, ""set"" + base, 2);
        }

        if ((mappedReadMethod == null) && (mappedWriteMethod == null)) {
            throw new IntrospectionException(""Property '"" + propertyName +
                    ""' not found on "" +
                    beanClass.getName());
        }
        mappedReadMethodRef  = new MappedMethodReference(mappedReadMethod);
        mappedWriteMethodRef = new MappedMethodReference(mappedWriteMethod);

        findMappedPropertyType();
    }","  public void test0()  throws Throwable  {
      Class<String> class0 = String.class;
      MappedPropertyDescriptor mappedPropertyDescriptor0 = null;
      try {
        mappedPropertyDescriptor0 = new MappedPropertyDescriptor(""%q32n6p1bV)J"", class0, (String) null, ""getBytes"");
        fail(""Expecting exception: IntrospectionException"");
      } catch(Throwable e) {
         //
         // No method \""getBytes\"" with 2 parameter(s)
         //
         verifyException(""org.apache.commons.beanutils.MappedPropertyDescriptor"", e);
      }
  }"
679,"    public Method getMappedWriteMethod() {
        return mappedWriteMethodRef.get();
    }","  public void test1()  throws Throwable  {
      Class<String> class0 = String.class;
      MappedPropertyDescriptor mappedPropertyDescriptor0 = new MappedPropertyDescriptor(""org.apache.commons.beanutils.MappedPropertyDescriptor"", class0, (String) null, (String) null);
      Method method0 = mappedPropertyDescriptor0.getMappedWriteMethod();
}"
680,"    public Method getMappedWriteMethod() {
        return mappedWriteMethodRef.get();
    }","  public void test2()  throws Throwable  {
      Class<String> class0 = String.class;
      MappedPropertyDescriptor mappedPropertyDescriptor0 = new MappedPropertyDescriptor("" accessible version of "", class0, ""lastIndexOf"", ""lastIndexOf"");
      Method method0 = mappedPropertyDescriptor0.getMappedWriteMethod();
}"
681,"    public Method getMappedWriteMethod() {
        return mappedWriteMethodRef.get();
    }","  public void test3()  throws Throwable  {
      Class<String> class0 = String.class;
      MappedPropertyDescriptor mappedPropertyDescriptor0 = new MappedPropertyDescriptor("" accessible version of "", class0, ""lastIndexOf"", ""lastIndexOf"");
      Method method0 = mappedPropertyDescriptor0.getMappedWriteMethod();
}"
682,"    public Method getMappedReadMethod() {
        return mappedReadMethodRef.get();
    }","  public void test4()  throws Throwable  {
      Class<String> class0 = String.class;
      MappedPropertyDescriptor mappedPropertyDescriptor0 = new MappedPropertyDescriptor("" accessible version of "", class0, ""lastIndexOf"", ""lastIndexOf"");
      mappedPropertyDescriptor0.getMappedReadMethod();
}"
683,"    public Class<?> getMappedPropertyType() {
        return mappedPropertyTypeRef.get();
    }","  public void test5()  throws Throwable  {
      Class<String> class0 = String.class;
      MappedPropertyDescriptor mappedPropertyDescriptor0 = new MappedPropertyDescriptor(""org.apache.commons.beanutils.MappedPropertyDescriptor"", class0, (String) null, (String) null);
      Class<?> class1 = mappedPropertyDescriptor0.getMappedPropertyType();
}"
684,"    public Class<?> getMappedPropertyType() {
        return mappedPropertyTypeRef.get();
    }","  public void test6()  throws Throwable  {
      Class<String> class0 = String.class;
      MappedPropertyDescriptor mappedPropertyDescriptor0 = new MappedPropertyDescriptor(""replaceAll"", class0, (String) null, ""replaceAll"");
      Class<?> class1 = mappedPropertyDescriptor0.getMappedPropertyType();
}"
685,"    public Class<?> getMappedPropertyType() {
        return mappedPropertyTypeRef.get();
    }","  public void test7()  throws Throwable  {
      Class<String> class0 = String.class;
      MappedPropertyDescriptor mappedPropertyDescriptor0 = new MappedPropertyDescriptor(""replaceAll"", class0, (String) null, ""replaceAll"");
      Class<?> class1 = mappedPropertyDescriptor0.getMappedPropertyType();
}"
686,"    public MappedPropertyDescriptor(final String propertyName, final Class<?> beanClass)
            throws IntrospectionException {

        super(propertyName, null, null);

        if (propertyName == null || propertyName.length() == 0) {
            throw new IntrospectionException(""bad property name: "" +
                    propertyName + "" on class: "" + beanClass.getClass().getName());
        }

        setName(propertyName);
        final String base = capitalizePropertyName(propertyName);

        // Look for mapped read method and matching write method
        Method mappedReadMethod = null;
        Method mappedWriteMethod = null;
        try {
            try {
                mappedReadMethod = getMethod(beanClass, ""get"" + base,
                        STRING_CLASS_PARAMETER);
            } catch (final IntrospectionException e) {
                mappedReadMethod = getMethod(beanClass, ""is"" + base,
                        STRING_CLASS_PARAMETER);
            }
            final Class<?>[] params = { String.class, mappedReadMethod.getReturnType() };
            mappedWriteMethod = getMethod(beanClass, ""set"" + base, params);
        } catch (final IntrospectionException e) {
            /* Swallow IntrospectionException
             * TODO: Why?
             */
        }

        // If there's no read method, then look for just a write method
        if (mappedReadMethod == null) {
            mappedWriteMethod = getMethod(beanClass, ""set"" + base, 2);
        }

        if ((mappedReadMethod == null) && (mappedWriteMethod == null)) {
            throw new IntrospectionException(""Property '"" + propertyName +
                    ""' not found on "" +
                    beanClass.getName());
        }
        mappedReadMethodRef  = new MappedMethodReference(mappedReadMethod);
        mappedWriteMethodRef = new MappedMethodReference(mappedWriteMethod);

        findMappedPropertyType();
    }","  public void test8()  throws Throwable  {
      MappedPropertyDescriptor mappedPropertyDescriptor0 = null;
      try {
        mappedPropertyDescriptor0 = new MappedPropertyDescriptor("""", (Method) null, (Method) null);
        fail(""Expecting exception: IntrospectionException"");
      } catch(Throwable e) {
         //
         // bad property name
         //
         verifyException(""java.beans.PropertyDescriptor"", e);
      }
  }"
687,"    public MappedPropertyDescriptor(final String propertyName, final Class<?> beanClass)
            throws IntrospectionException {

        super(propertyName, null, null);

        if (propertyName == null || propertyName.length() == 0) {
            throw new IntrospectionException(""bad property name: "" +
                    propertyName + "" on class: "" + beanClass.getClass().getName());
        }

        setName(propertyName);
        final String base = capitalizePropertyName(propertyName);

        // Look for mapped read method and matching write method
        Method mappedReadMethod = null;
        Method mappedWriteMethod = null;
        try {
            try {
                mappedReadMethod = getMethod(beanClass, ""get"" + base,
                        STRING_CLASS_PARAMETER);
            } catch (final IntrospectionException e) {
                mappedReadMethod = getMethod(beanClass, ""is"" + base,
                        STRING_CLASS_PARAMETER);
            }
            final Class<?>[] params = { String.class, mappedReadMethod.getReturnType() };
            mappedWriteMethod = getMethod(beanClass, ""set"" + base, params);
        } catch (final IntrospectionException e) {
            /* Swallow IntrospectionException
             * TODO: Why?
             */
        }

        // If there's no read method, then look for just a write method
        if (mappedReadMethod == null) {
            mappedWriteMethod = getMethod(beanClass, ""set"" + base, 2);
        }

        if ((mappedReadMethod == null) && (mappedWriteMethod == null)) {
            throw new IntrospectionException(""Property '"" + propertyName +
                    ""' not found on "" +
                    beanClass.getName());
        }
        mappedReadMethodRef  = new MappedMethodReference(mappedReadMethod);
        mappedWriteMethodRef = new MappedMethodReference(mappedWriteMethod);

        findMappedPropertyType();
    }","  public void test9()  throws Throwable  {
      MappedPropertyDescriptor mappedPropertyDescriptor0 = null;
      try {
        mappedPropertyDescriptor0 = new MappedPropertyDescriptor(""F@0{ih9^"", (Class<?>) null, (String) null, ""getClass"");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.evosuite.runtime.util.ReflectionUtils"", e);
      }
  }"
688,"    public MappedPropertyDescriptor(final String propertyName, final Class<?> beanClass)
            throws IntrospectionException {

        super(propertyName, null, null);

        if (propertyName == null || propertyName.length() == 0) {
            throw new IntrospectionException(""bad property name: "" +
                    propertyName + "" on class: "" + beanClass.getClass().getName());
        }

        setName(propertyName);
        final String base = capitalizePropertyName(propertyName);

        // Look for mapped read method and matching write method
        Method mappedReadMethod = null;
        Method mappedWriteMethod = null;
        try {
            try {
                mappedReadMethod = getMethod(beanClass, ""get"" + base,
                        STRING_CLASS_PARAMETER);
            } catch (final IntrospectionException e) {
                mappedReadMethod = getMethod(beanClass, ""is"" + base,
                        STRING_CLASS_PARAMETER);
            }
            final Class<?>[] params = { String.class, mappedReadMethod.getReturnType() };
            mappedWriteMethod = getMethod(beanClass, ""set"" + base, params);
        } catch (final IntrospectionException e) {
            /* Swallow IntrospectionException
             * TODO: Why?
             */
        }

        // If there's no read method, then look for just a write method
        if (mappedReadMethod == null) {
            mappedWriteMethod = getMethod(beanClass, ""set"" + base, 2);
        }

        if ((mappedReadMethod == null) && (mappedWriteMethod == null)) {
            throw new IntrospectionException(""Property '"" + propertyName +
                    ""' not found on "" +
                    beanClass.getName());
        }
        mappedReadMethodRef  = new MappedMethodReference(mappedReadMethod);
        mappedWriteMethodRef = new MappedMethodReference(mappedWriteMethod);

        findMappedPropertyType();
    }","  public void test10()  throws Throwable  {
      MappedPropertyDescriptor mappedPropertyDescriptor0 = null;
      try {
        mappedPropertyDescriptor0 = new MappedPropertyDescriptor(""mc"", (Class<?>) null, ""mc"", ""mc"");
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Class cannot be null
         //
         verifyException(""org.apache.commons.beanutils.MethodUtils$MethodDescriptor"", e);
      }
  }"
689,"    public MappedPropertyDescriptor(final String propertyName, final Class<?> beanClass)
            throws IntrospectionException {

        super(propertyName, null, null);

        if (propertyName == null || propertyName.length() == 0) {
            throw new IntrospectionException(""bad property name: "" +
                    propertyName + "" on class: "" + beanClass.getClass().getName());
        }

        setName(propertyName);
        final String base = capitalizePropertyName(propertyName);

        // Look for mapped read method and matching write method
        Method mappedReadMethod = null;
        Method mappedWriteMethod = null;
        try {
            try {
                mappedReadMethod = getMethod(beanClass, ""get"" + base,
                        STRING_CLASS_PARAMETER);
            } catch (final IntrospectionException e) {
                mappedReadMethod = getMethod(beanClass, ""is"" + base,
                        STRING_CLASS_PARAMETER);
            }
            final Class<?>[] params = { String.class, mappedReadMethod.getReturnType() };
            mappedWriteMethod = getMethod(beanClass, ""set"" + base, params);
        } catch (final IntrospectionException e) {
            /* Swallow IntrospectionException
             * TODO: Why?
             */
        }

        // If there's no read method, then look for just a write method
        if (mappedReadMethod == null) {
            mappedWriteMethod = getMethod(beanClass, ""set"" + base, 2);
        }

        if ((mappedReadMethod == null) && (mappedWriteMethod == null)) {
            throw new IntrospectionException(""Property '"" + propertyName +
                    ""' not found on "" +
                    beanClass.getName());
        }
        mappedReadMethodRef  = new MappedMethodReference(mappedReadMethod);
        mappedWriteMethodRef = new MappedMethodReference(mappedWriteMethod);

        findMappedPropertyType();
    }","  public void test11()  throws Throwable  {
      MappedPropertyDescriptor mappedPropertyDescriptor0 = null;
      try {
        mappedPropertyDescriptor0 = new MappedPropertyDescriptor(""Y*%^:gFN`]K's*Xiz\"""", (Class<?>) null);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Class cannot be null
         //
         verifyException(""org.apache.commons.beanutils.MethodUtils$MethodDescriptor"", e);
      }
  }"
690,"    public MappedPropertyDescriptor(final String propertyName, final Class<?> beanClass)
            throws IntrospectionException {

        super(propertyName, null, null);

        if (propertyName == null || propertyName.length() == 0) {
            throw new IntrospectionException(""bad property name: "" +
                    propertyName + "" on class: "" + beanClass.getClass().getName());
        }

        setName(propertyName);
        final String base = capitalizePropertyName(propertyName);

        // Look for mapped read method and matching write method
        Method mappedReadMethod = null;
        Method mappedWriteMethod = null;
        try {
            try {
                mappedReadMethod = getMethod(beanClass, ""get"" + base,
                        STRING_CLASS_PARAMETER);
            } catch (final IntrospectionException e) {
                mappedReadMethod = getMethod(beanClass, ""is"" + base,
                        STRING_CLASS_PARAMETER);
            }
            final Class<?>[] params = { String.class, mappedReadMethod.getReturnType() };
            mappedWriteMethod = getMethod(beanClass, ""set"" + base, params);
        } catch (final IntrospectionException e) {
            /* Swallow IntrospectionException
             * TODO: Why?
             */
        }

        // If there's no read method, then look for just a write method
        if (mappedReadMethod == null) {
            mappedWriteMethod = getMethod(beanClass, ""set"" + base, 2);
        }

        if ((mappedReadMethod == null) && (mappedWriteMethod == null)) {
            throw new IntrospectionException(""Property '"" + propertyName +
                    ""' not found on "" +
                    beanClass.getName());
        }
        mappedReadMethodRef  = new MappedMethodReference(mappedReadMethod);
        mappedWriteMethodRef = new MappedMethodReference(mappedWriteMethod);

        findMappedPropertyType();
    }","  public void test12()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      MappedPropertyDescriptor mappedPropertyDescriptor0 = null;
      try {
        mappedPropertyDescriptor0 = new MappedPropertyDescriptor(""Matching name="", class0);
        fail(""Expecting exception: IntrospectionException"");
      } catch(Throwable e) {
         //
         // No method \""setMatching name=\"" with 2 parameter(s)
         //
         verifyException(""org.apache.commons.beanutils.MappedPropertyDescriptor"", e);
      }
  }"
691,"    public Method getMappedReadMethod() {
        return mappedReadMethodRef.get();
    }","  public void test13()  throws Throwable  {
      Class<String> class0 = String.class;
      MappedPropertyDescriptor mappedPropertyDescriptor0 = new MappedPropertyDescriptor(""replaceAll"", class0, (String) null, ""replaceAll"");
      Method method0 = mappedPropertyDescriptor0.getMappedReadMethod();
}"
692,"    public void setMappedReadMethod(final Method mappedGetter)
            throws IntrospectionException {
        mappedReadMethodRef = new MappedMethodReference(mappedGetter);
        findMappedPropertyType();
    }","  public void test14()  throws Throwable  {
      Class<String> class0 = String.class;
      MappedPropertyDescriptor mappedPropertyDescriptor0 = new MappedPropertyDescriptor(""codePointCount"", class0, (String) null, ""codePointCount"");
      Method method0 = mappedPropertyDescriptor0.getMappedWriteMethod();
      try { 
        mappedPropertyDescriptor0.setMappedReadMethod(method0);
        fail(""Expecting exception: IntrospectionException"");
      } catch(IntrospectionException e) {
         //
         // bad mapped read method arg count
         //
         verifyException(""org.apache.commons.beanutils.MappedPropertyDescriptor"", e);
      }
  }"
693,"    public Class<?> getMappedPropertyType() {
        return mappedPropertyTypeRef.get();
    }","  public void test15()  throws Throwable  {
      Class<String> class0 = String.class;
      MappedPropertyDescriptor mappedPropertyDescriptor0 = new MappedPropertyDescriptor("" accessible version of "", class0, ""lastIndexOf"", ""lastIndexOf"");
      Class<?> class1 = mappedPropertyDescriptor0.getMappedPropertyType();
}"
694,"    public Class<?> getMappedPropertyType() {
        return mappedPropertyTypeRef.get();
    }","  public void test16()  throws Throwable  {
      Class<String> class0 = String.class;
      MappedPropertyDescriptor mappedPropertyDescriptor0 = new MappedPropertyDescriptor("" accessible version of "", class0, ""lastIndexOf"", ""lastIndexOf"");
      Class<?> class1 = mappedPropertyDescriptor0.getMappedPropertyType();
}"
695,"    public void setMappedWriteMethod(final Method mappedSetter)
            throws IntrospectionException {
        mappedWriteMethodRef = new MappedMethodReference(mappedSetter);
        findMappedPropertyType();
    }","  public void test17()  throws Throwable  {
      MappedPropertyDescriptor mappedPropertyDescriptor0 = new MappedPropertyDescriptor(""e"", (Method) null, (Method) null);
      mappedPropertyDescriptor0.setMappedWriteMethod((Method) null);
}"
696,"    public void setMappedReadMethod(final Method mappedGetter)
            throws IntrospectionException {
        mappedReadMethodRef = new MappedMethodReference(mappedGetter);
        findMappedPropertyType();
    }","  public void test18()  throws Throwable  {
      Class<String> class0 = String.class;
      MappedPropertyDescriptor mappedPropertyDescriptor0 = new MappedPropertyDescriptor("" accessible version of "", class0, ""lastIndexOf"", ""lastIndexOf"");
      mappedPropertyDescriptor0.setMappedReadMethod((Method) null);
}"
697,"    protected Object getObject(final ResultSet resultSet, final String name) throws SQLException {

        final DynaProperty property = getDynaProperty(name);
        if (property == null) {
            throw new IllegalArgumentException(""Invalid name '"" + name + ""'"");
        }
        final String columnName = getColumnName(name);
        final Class<?> type = property.getType();

        // java.sql.Date
        if (type.equals(Date.class)) {
            return resultSet.getDate(columnName);
        }

        // java.sql.Timestamp
        if (type.equals(Timestamp.class)) {
            return resultSet.getTimestamp(columnName);
        }

        // java.sql.Time
        if (type.equals(Time.class)) {
            return resultSet.getTime(columnName);
        }

        return resultSet.getObject(columnName);
    }","  public void test0()  throws Throwable  {
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(resultSetMetaData0).getColumnClassName(anyInt());
      doReturn(1).when(resultSetMetaData0).getColumnCount();
      doReturn("".+&RqtpCa%j >?Bc"").when(resultSetMetaData0).getColumnLabel(anyInt());
      doReturn(1).when(resultSetMetaData0).getColumnType(anyInt());
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      doReturn((Object) null).when(resultSet0).getObject(anyString());
      doReturn(true, false).when(resultSet0).next();
      RowSetDynaClass rowSetDynaClass0 = new RowSetDynaClass(resultSet0, true, true);
  }"
698,"    protected String getColumnName(final String name) {
        if (columnNameXref != null && columnNameXref.containsKey(name)) {
            return columnNameXref.get(name);
        } else {
            return name;
        }
    }","  public void test1()  throws Throwable  {
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(""J>GE/o#]p#N?9P3!j"").when(resultSetMetaData0).getColumnClassName(anyInt());
      doReturn(3115).when(resultSetMetaData0).getColumnCount();
      doReturn(""Invalid name '"", ""/#k-*>@(f}[-WR2"").when(resultSetMetaData0).getColumnName(anyInt());
      doReturn(91, 3115).when(resultSetMetaData0).getColumnType(anyInt());
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      ResultSetDynaClass resultSetDynaClass0 = null;
      try {
        resultSetDynaClass0 = new ResultSetDynaClass(resultSet0, true, false);
        fail(""Expecting exception: SQLException"");
      } catch(Throwable e) {
         //
         // Cannot load column class 'J>GE/o#]p#N?9P3!j': java.lang.ClassNotFoundException: Class 'J>GE/o#]p#N?9P3!j.class' should be in target project, but could not be found!
         //
         verifyException(""org.apache.commons.beanutils.ResultSetDynaClass"", e);
      }
  }"
699,"    protected void introspect(final ResultSet resultSet) throws SQLException {

        // Accumulate an ordered list of DynaProperties
        final ArrayList<DynaProperty> list = new ArrayList<DynaProperty>();
        final ResultSetMetaData metadata = resultSet.getMetaData();
        final int n = metadata.getColumnCount();
        for (int i = 1; i <= n; i++) { // JDBC is one-relative!
            final DynaProperty dynaProperty = createDynaProperty(metadata, i);
            if (dynaProperty != null) {
                    list.add(dynaProperty);
            }
        }

        // Convert this list into the internal data structures we need
        properties =
            list.toArray(new DynaProperty[list.size()]);
        for (DynaProperty propertie : properties) {
            propertiesMap.put(propertie.getName(), propertie);
        }

    }","  public void test2()  throws Throwable  {
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0, rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      ResultSetDynaClass resultSetDynaClass0 = new ResultSetDynaClass(resultSet0, false, false);
      ResultSet resultSet1 = resultSetDynaClass0.getResultSet();
      resultSetDynaClass0.introspect(resultSet1);
}"
700,"    public void setUseColumnLabel(final boolean useColumnLabel) {
        this.useColumnLabel = useColumnLabel;
    }","  public void test3()  throws Throwable  {
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(resultSetMetaData0).getColumnClassName(anyInt());
      doReturn(1).when(resultSetMetaData0).getColumnCount();
      doReturn("""").when(resultSetMetaData0).getColumnLabel(anyInt());
      doReturn("""").when(resultSetMetaData0).getColumnName(anyInt());
      doReturn(1).when(resultSetMetaData0).getColumnType(anyInt());
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      doReturn((Object) null).when(resultSet0).getObject(anyString());
      doReturn(true, false).when(resultSet0).next();
      RowSetDynaClass rowSetDynaClass0 = new RowSetDynaClass(resultSet0, true, true);
      rowSetDynaClass0.setUseColumnLabel(true);
  }"
701,"    protected Object getObject(final ResultSet resultSet, final String name) throws SQLException {

        final DynaProperty property = getDynaProperty(name);
        if (property == null) {
            throw new IllegalArgumentException(""Invalid name '"" + name + ""'"");
        }
        final String columnName = getColumnName(name);
        final Class<?> type = property.getType();

        // java.sql.Date
        if (type.equals(Date.class)) {
            return resultSet.getDate(columnName);
        }

        // java.sql.Timestamp
        if (type.equals(Timestamp.class)) {
            return resultSet.getTimestamp(columnName);
        }

        // java.sql.Time
        if (type.equals(Time.class)) {
            return resultSet.getTime(columnName);
        }

        return resultSet.getObject(columnName);
    }","  public void test4()  throws Throwable  {
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(resultSetMetaData0).getColumnClassName(anyInt());
      doReturn(1).when(resultSetMetaData0).getColumnCount();
      doReturn("""").when(resultSetMetaData0).getColumnLabel(anyInt());
      doReturn("""").when(resultSetMetaData0).getColumnName(anyInt());
      doReturn(1).when(resultSetMetaData0).getColumnType(anyInt());
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      doReturn((Object) null).when(resultSet0).getObject(anyString());
      doReturn(true, false).when(resultSet0).next();
      RowSetDynaClass rowSetDynaClass0 = new RowSetDynaClass(resultSet0, true, true);
      ResultSet resultSet1 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(resultSet1).getObject(anyString());
      Object object0 = rowSetDynaClass0.getObject(resultSet1, """");
}"
702,"    public DynaProperty getDynaProperty(final String name) {

        if (name == null) {
            throw new IllegalArgumentException(""No property name specified"");
        }
        return (propertiesMap.get(name));

    }","  public void test5()  throws Throwable  {
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      doReturn(false).when(resultSet0).next();
      RowSetDynaClass rowSetDynaClass0 = new RowSetDynaClass(resultSet0, true, 0, true);
      DynaProperty dynaProperty0 = rowSetDynaClass0.getDynaProperty(""x;x`%^e\t9z,r'hM(}"");
}"
703,"    public DynaProperty[] getDynaProperties() {

        return (properties);

    }","  public void test6()  throws Throwable  {
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      doReturn(false).when(resultSet0).next();
      RowSetDynaClass rowSetDynaClass0 = new RowSetDynaClass(resultSet0, false);
      rowSetDynaClass0.properties = null;
      DynaProperty[] dynaPropertyArray0 = rowSetDynaClass0.getDynaProperties();
}"
704,"    protected String getColumnName(final String name) {
        if (columnNameXref != null && columnNameXref.containsKey(name)) {
            return columnNameXref.get(name);
        } else {
            return name;
        }
    }","  public void test7()  throws Throwable  {
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(resultSetMetaData0).getColumnClassName(anyInt());
      doReturn(3100).when(resultSetMetaData0).getColumnCount();
      doReturn((String) null, (String) null).when(resultSetMetaData0).getColumnLabel(anyInt());
      doReturn(""'"", (String) null).when(resultSetMetaData0).getColumnName(anyInt());
      doReturn(0).when(resultSetMetaData0).getColumnType(anyInt());
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      ResultSetDynaClass resultSetDynaClass0 = null;
      try {
        resultSetDynaClass0 = new ResultSetDynaClass(resultSet0, false, true);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
      }
  }"
705,"    protected String getColumnName(final String name) {
        if (columnNameXref != null && columnNameXref.containsKey(name)) {
            return columnNameXref.get(name);
        } else {
            return name;
        }
    }","  public void test8()  throws Throwable  {
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(resultSetMetaData0).getColumnCount();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      ResultSetDynaClass resultSetDynaClass0 = new ResultSetDynaClass(resultSet0);
      String string0 = resultSetDynaClass0.getColumnName((String) null);
}"
706,"    protected String getColumnName(final String name) {
        if (columnNameXref != null && columnNameXref.containsKey(name)) {
            return columnNameXref.get(name);
        } else {
            return name;
        }
    }","  public void test9()  throws Throwable  {
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(resultSetMetaData0).getColumnCount();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      doReturn(false).when(resultSet0).next();
      RowSetDynaClass rowSetDynaClass0 = new RowSetDynaClass(resultSet0, 33);
      String string0 = rowSetDynaClass0.getColumnName("""");
}"
707,"    protected String getColumnName(final String name) {
        if (columnNameXref != null && columnNameXref.containsKey(name)) {
            return columnNameXref.get(name);
        } else {
            return name;
        }
    }","  public void test10()  throws Throwable  {
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(resultSetMetaData0).getColumnClassName(anyInt());
      doReturn(739).when(resultSetMetaData0).getColumnCount();
      doReturn(""*CJ!p&U_9/0<E+"", (String) null).when(resultSetMetaData0).getColumnName(anyInt());
      doReturn(0).when(resultSetMetaData0).getColumnType(anyInt());
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      ResultSetDynaClass resultSetDynaClass0 = null;
      try {
        resultSetDynaClass0 = new ResultSetDynaClass(resultSet0, true);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.beanutils.JDBCDynaClass"", e);
      }
  }"
708,"    protected void introspect(final ResultSet resultSet) throws SQLException {

        // Accumulate an ordered list of DynaProperties
        final ArrayList<DynaProperty> list = new ArrayList<DynaProperty>();
        final ResultSetMetaData metadata = resultSet.getMetaData();
        final int n = metadata.getColumnCount();
        for (int i = 1; i <= n; i++) { // JDBC is one-relative!
            final DynaProperty dynaProperty = createDynaProperty(metadata, i);
            if (dynaProperty != null) {
                    list.add(dynaProperty);
            }
        }

        // Convert this list into the internal data structures we need
        properties =
            list.toArray(new DynaProperty[list.size()]);
        for (DynaProperty propertie : properties) {
            propertiesMap.put(propertie.getName(), propertie);
        }

    }","  public void test11()  throws Throwable  {
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(resultSetMetaData0).getColumnClassName(anyInt());
      doReturn(11).when(resultSetMetaData0).getColumnCount();
      doReturn("".+&RqtpCa%j >?Bc"", "".+&RqtpCa%j >?Bc"", "".+&RqtpCa%j >?Bc"", ""newInstance() not supported"", ""No property name specified"").when(resultSetMetaData0).getColumnLabel(anyInt());
      doReturn(11, 11, 93, 93, 93).when(resultSetMetaData0).getColumnType(anyInt());
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      doReturn((Timestamp) null, (Timestamp) null, (Timestamp) null, (Timestamp) null, (Timestamp) null).when(resultSet0).getTimestamp(anyString());
      doReturn(true, false).when(resultSet0).next();
      RowSetDynaClass rowSetDynaClass0 = new RowSetDynaClass(resultSet0, true, true);
      ResultSet resultSet1 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet1).getMetaData();
      // Undeclared exception!
      try { 
        rowSetDynaClass0.introspect(resultSet1);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.beanutils.JDBCDynaClass"", e);
      }
  }"
709,"    protected DynaProperty createDynaProperty(
                                    final ResultSetMetaData metadata,
                                    final int i)
                                    throws SQLException {

        String columnName = null;
        if (useColumnLabel) {
            columnName = metadata.getColumnLabel(i);
        }
        if (columnName == null || columnName.trim().length() == 0) {
            columnName = metadata.getColumnName(i);
        }
        final String name = lowerCase ? columnName.toLowerCase() : columnName;
        if (!name.equals(columnName)) {
            if (columnNameXref == null) {
                columnNameXref = new HashMap<String, String>();
            }
            columnNameXref.put(name, columnName);
        }
        String className = null;
        try {
            final int sqlType = metadata.getColumnType(i);
            switch (sqlType) {
                case java.sql.Types.DATE:
                    return new DynaProperty(name, java.sql.Date.class);
                case java.sql.Types.TIMESTAMP:
                    return new DynaProperty(name, java.sql.Timestamp.class);
                case java.sql.Types.TIME:
                    return new DynaProperty(name, java.sql.Time.class);
                default:
                    className = metadata.getColumnClassName(i);
            }
        } catch (final SQLException e) {
            // this is a patch for HsqlDb to ignore exceptions
            // thrown by its metadata implementation
        }

        // Default to Object type if no class name could be retrieved
        // from the metadata
        Class<?> clazz = Object.class;
        if (className != null) {
            clazz = loadClass(className);
        }
        return new DynaProperty(name, clazz);

    }","  public void test12()  throws Throwable  {
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      doReturn(false).when(resultSet0).next();
      RowSetDynaClass rowSetDynaClass0 = new RowSetDynaClass(resultSet0);
      // Undeclared exception!
      try { 
        rowSetDynaClass0.createDynaProperty((ResultSetMetaData) null, (-1309));
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.beanutils.JDBCDynaClass"", e);
      }
  }"
710,"    protected Object getObject(final ResultSet resultSet, final String name) throws SQLException {

        final DynaProperty property = getDynaProperty(name);
        if (property == null) {
            throw new IllegalArgumentException(""Invalid name '"" + name + ""'"");
        }
        final String columnName = getColumnName(name);
        final Class<?> type = property.getType();

        // java.sql.Date
        if (type.equals(Date.class)) {
            return resultSet.getDate(columnName);
        }

        // java.sql.Timestamp
        if (type.equals(Timestamp.class)) {
            return resultSet.getTimestamp(columnName);
        }

        // java.sql.Time
        if (type.equals(Time.class)) {
            return resultSet.getTime(columnName);
        }

        return resultSet.getObject(columnName);
    }","  public void test13()  throws Throwable  {
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(resultSetMetaData0).getColumnCount();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      doReturn(false).when(resultSet0).next();
      RowSetDynaClass rowSetDynaClass0 = new RowSetDynaClass(resultSet0, (-249));
      ResultSet resultSet1 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        rowSetDynaClass0.getObject(resultSet1, ""Invalid primitive type. Check version of beanutils used to serialize is compatible."");
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Invalid name 'Invalid primitive type. Check version of beanutils used to serialize is compatible.'
         //
         verifyException(""org.apache.commons.beanutils.JDBCDynaClass"", e);
      }
  }"
711,"    protected String getColumnName(final String name) {
        if (columnNameXref != null && columnNameXref.containsKey(name)) {
            return columnNameXref.get(name);
        } else {
            return name;
        }
    }","  public void test14()  throws Throwable  {
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(resultSetMetaData0).getColumnClassName(anyInt());
      doReturn(11).when(resultSetMetaData0).getColumnCount();
      doReturn("".+&RqtpCa%j >?Bc"", "".+&RqtpCa%j >?Bc"", "".+&RqtpCa%j >?Bc"", ""newInstance() not supported"", ""No property name specified"").when(resultSetMetaData0).getColumnLabel(anyInt());
      doReturn(11, 11, 93, 93, 93).when(resultSetMetaData0).getColumnType(anyInt());
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      doReturn((Timestamp) null, (Timestamp) null, (Timestamp) null, (Timestamp) null, (Timestamp) null).when(resultSet0).getTimestamp(anyString());
      doReturn(true, false).when(resultSet0).next();
      RowSetDynaClass rowSetDynaClass0 = new RowSetDynaClass(resultSet0, true, true);
      String string0 = rowSetDynaClass0.getColumnName("")'"");
}"
712,"    protected String getColumnName(final String name) {
        if (columnNameXref != null && columnNameXref.containsKey(name)) {
            return columnNameXref.get(name);
        } else {
            return name;
        }
    }","  public void test15()  throws Throwable  {
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(""J>GE/o#]p#N9P3!"").when(resultSetMetaData0).getColumnClassName(anyInt());
      doReturn(3114).when(resultSetMetaData0).getColumnCount();
      doReturn(""Invalid name '"", ""J>GE/o#]p#N9P3!"").when(resultSetMetaData0).getColumnName(anyInt());
      doReturn(92, 3114).when(resultSetMetaData0).getColumnType(anyInt());
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      ResultSetDynaClass resultSetDynaClass0 = null;
      try {
        resultSetDynaClass0 = new ResultSetDynaClass(resultSet0, false, false);
        fail(""Expecting exception: SQLException"");
      } catch(Throwable e) {
         //
         // Cannot load column class 'J>GE/o#]p#N9P3!': java.lang.ClassNotFoundException: Class 'J>GE/o#]p#N9P3!.class' should be in target project, but could not be found!
         //
         verifyException(""org.apache.commons.beanutils.ResultSetDynaClass"", e);
      }
  }"
713,"    protected String getColumnName(final String name) {
        if (columnNameXref != null && columnNameXref.containsKey(name)) {
            return columnNameXref.get(name);
        } else {
            return name;
        }
    }","  public void test16()  throws Throwable  {
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(1).when(resultSetMetaData0).getColumnCount();
      doReturn((String) null).when(resultSetMetaData0).getColumnLabel(anyInt());
      doReturn((String) null).when(resultSetMetaData0).getColumnName(anyInt());
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      RowSetDynaClass rowSetDynaClass0 = null;
      try {
        rowSetDynaClass0 = new RowSetDynaClass(resultSet0, true, true);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.beanutils.JDBCDynaClass"", e);
      }
  }"
714,"    protected DynaProperty createDynaProperty(
                                    final ResultSetMetaData metadata,
                                    final int i)
                                    throws SQLException {

        String columnName = null;
        if (useColumnLabel) {
            columnName = metadata.getColumnLabel(i);
        }
        if (columnName == null || columnName.trim().length() == 0) {
            columnName = metadata.getColumnName(i);
        }
        final String name = lowerCase ? columnName.toLowerCase() : columnName;
        if (!name.equals(columnName)) {
            if (columnNameXref == null) {
                columnNameXref = new HashMap<String, String>();
            }
            columnNameXref.put(name, columnName);
        }
        String className = null;
        try {
            final int sqlType = metadata.getColumnType(i);
            switch (sqlType) {
                case java.sql.Types.DATE:
                    return new DynaProperty(name, java.sql.Date.class);
                case java.sql.Types.TIMESTAMP:
                    return new DynaProperty(name, java.sql.Timestamp.class);
                case java.sql.Types.TIME:
                    return new DynaProperty(name, java.sql.Time.class);
                default:
                    className = metadata.getColumnClassName(i);
            }
        } catch (final SQLException e) {
            // this is a patch for HsqlDb to ignore exceptions
            // thrown by its metadata implementation
        }

        // Default to Object type if no class name could be retrieved
        // from the metadata
        Class<?> clazz = Object.class;
        if (className != null) {
            clazz = loadClass(className);
        }
        return new DynaProperty(name, clazz);

    }","  public void test17()  throws Throwable  {
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(resultSetMetaData0).getColumnCount();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      doReturn(false).when(resultSet0).next();
      RowSetDynaClass rowSetDynaClass0 = new RowSetDynaClass(resultSet0);
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      try { 
        rowSetDynaClass0.createDynaProperty(rowSetMetaDataImpl0, 0);
        fail(""Expecting exception: SQLException"");
      } catch(SQLException e) {
         //
         // Invalid column index :0
         //
         verifyException(""javax.sql.rowset.RowSetMetaDataImpl"", e);
      }
  }"
715,"    protected Class<?> loadClass(final String className) throws SQLException {

        try {
            ClassLoader cl = Thread.currentThread().getContextClassLoader();
            if (cl == null) {
                    cl = this.getClass().getClassLoader();
            }
            // use Class.forName() - see BEANUTILS-327
            return Class.forName(className, false, cl);
        } catch (final Exception e) {
            throw new SQLException(
                    ""Cannot load column class '"" + className + ""': "" + e);
        }

    }","  public void test18()  throws Throwable  {
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      doReturn(true, true).when(resultSet0).next();
      RowSetDynaClass rowSetDynaClass0 = new RowSetDynaClass(resultSet0, true, 1);
      Class<?> class0 = rowSetDynaClass0.loadClass(""org.apache.commons.beanutils.ResultSetIterator"");
}"
716,"    public DynaProperty getDynaProperty(final String name) {

        if (name == null) {
            throw new IllegalArgumentException(""No property name specified"");
        }
        return (propertiesMap.get(name));

    }","  public void test19()  throws Throwable  {
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      doReturn(false).when(resultSet0).next();
      RowSetDynaClass rowSetDynaClass0 = new RowSetDynaClass(resultSet0, false, 899, false);
      // Undeclared exception!
      try { 
        rowSetDynaClass0.getDynaProperty((String) null);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // No property name specified
         //
         verifyException(""org.apache.commons.beanutils.JDBCDynaClass"", e);
      }
  }"
717,"    protected Object getObject(final ResultSet resultSet, final String name) throws SQLException {

        final DynaProperty property = getDynaProperty(name);
        if (property == null) {
            throw new IllegalArgumentException(""Invalid name '"" + name + ""'"");
        }
        final String columnName = getColumnName(name);
        final Class<?> type = property.getType();

        // java.sql.Date
        if (type.equals(Date.class)) {
            return resultSet.getDate(columnName);
        }

        // java.sql.Timestamp
        if (type.equals(Timestamp.class)) {
            return resultSet.getTimestamp(columnName);
        }

        // java.sql.Time
        if (type.equals(Time.class)) {
            return resultSet.getTime(columnName);
        }

        return resultSet.getObject(columnName);
    }","  public void test20()  throws Throwable  {
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(resultSetMetaData0).getColumnClassName(anyInt());
      doReturn(1).when(resultSetMetaData0).getColumnCount();
      doReturn("""").when(resultSetMetaData0).getColumnLabel(anyInt());
      doReturn("""").when(resultSetMetaData0).getColumnName(anyInt());
      doReturn(1).when(resultSetMetaData0).getColumnType(anyInt());
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      doReturn((Object) null).when(resultSet0).getObject(anyString());
      doReturn(true, false).when(resultSet0).next();
      RowSetDynaClass rowSetDynaClass0 = new RowSetDynaClass(resultSet0, true, true);
      ResultSet resultSet1 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(""QMwWqvl74.x_"").when(resultSet1).getObject(anyString());
      Object object0 = rowSetDynaClass0.getObject(resultSet1, """");
}"
718,"    public DynaProperty[] getDynaProperties() {

        return (properties);

    }","  public void test21()  throws Throwable  {
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      doReturn(true, true).when(resultSet0).next();
      RowSetDynaClass rowSetDynaClass0 = new RowSetDynaClass(resultSet0, true, 1);
      DynaProperty[] dynaPropertyArray0 = rowSetDynaClass0.getDynaProperties();
}"
719,"    public String getName() {

        return (this.getClass().getName());

    }","  public void test22()  throws Throwable  {
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      doReturn(false).when(resultSet0).next();
      RowSetDynaClass rowSetDynaClass0 = new RowSetDynaClass(resultSet0);
      String string0 = rowSetDynaClass0.getName();
}"
720,"    public DynaBean newInstance()
            throws IllegalAccessException, InstantiationException {

        throw new UnsupportedOperationException(""newInstance() not supported"");

    }","  public void test23()  throws Throwable  {
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      doReturn(false).when(resultSet0).next();
      RowSetDynaClass rowSetDynaClass0 = new RowSetDynaClass(resultSet0);
      // Undeclared exception!
      try { 
        rowSetDynaClass0.newInstance();
        fail(""Expecting exception: UnsupportedOperationException"");
      } catch(UnsupportedOperationException e) {
         //
         // newInstance() not supported
         //
         verifyException(""org.apache.commons.beanutils.JDBCDynaClass"", e);
      }
  }"
721,"    public DynaBeanMapDecorator(final DynaBean dynaBean, final boolean readOnly) {
        super(dynaBean, readOnly);
    }","  public void test0()  throws Throwable  {
      DynaBeanMapDecorator dynaBeanMapDecorator0 = null;
      try {
        dynaBeanMapDecorator0 = new DynaBeanMapDecorator((DynaBean) null);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // DynaBean is null
         //
         verifyException(""org.apache.commons.beanutils.BaseDynaBeanMapDecorator"", e);
      }
  }"
722,"    public DynaBeanMapDecorator(final DynaBean dynaBean, final boolean readOnly) {
        super(dynaBean, readOnly);
    }","  public void test1()  throws Throwable  {
      DynaBeanMapDecorator dynaBeanMapDecorator0 = null;
      try {
        dynaBeanMapDecorator0 = new DynaBeanMapDecorator((DynaBean) null, true);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // DynaBean is null
         //
         verifyException(""org.apache.commons.beanutils.BaseDynaBeanMapDecorator"", e);
      }
  }"
723,"    protected Class<?> loadClass(final String className) throws SQLException {

        try {
            return getClass().getClassLoader().loadClass(className);
        }
        catch (final Exception e) {
            throw new SQLException(""Cannot load column class '"" +
                                   className + ""': "" + e);
        }
    }","  public void test0()  throws Throwable  {
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(resultSetMetaData0).getColumnCount();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      ResultSetDynaClass resultSetDynaClass0 = new ResultSetDynaClass(resultSet0, false, false);
      Class<?> class0 = resultSetDynaClass0.loadClass(""org.apache.commons.beanutils.converters.ClassConverter"");
}"
724,"    public Object getObjectFromResultSet(final String name) throws SQLException {
        return getObject(getResultSet(), name);
    }","  public void test1()  throws Throwable  {
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn((-4294)).when(resultSetMetaData0).getColumnCount();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn("""").when(resultSet0).toString();
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      ResultSetDynaClass resultSetDynaClass0 = new ResultSetDynaClass(resultSet0, false);
      resultSetDynaClass0.propertiesMap = null;
      // Undeclared exception!
      try { 
        resultSetDynaClass0.getObjectFromResultSet(""n)s?Tj9i;e18"");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.beanutils.JDBCDynaClass"", e);
      }
  }"
725,"    public ResultSetDynaClass(final ResultSet resultSet) throws SQLException {

        this(resultSet, true);

    }","  public void test2()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      ResultSetDynaClass resultSetDynaClass0 = null;
      try {
        resultSetDynaClass0 = new ResultSetDynaClass(resultSet0, false);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.beanutils.JDBCDynaClass"", e);
      }
  }"
726,"    public ResultSetDynaClass(final ResultSet resultSet) throws SQLException {

        this(resultSet, true);

    }","  public void test3()  throws Throwable  {
      ResultSetDynaClass resultSetDynaClass0 = null;
      try {
        resultSetDynaClass0 = new ResultSetDynaClass((ResultSet) null, false);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.beanutils.ResultSetDynaClass"", e);
      }
  }"
727,"    public ResultSetDynaClass(final ResultSet resultSet) throws SQLException {

        this(resultSet, true);

    }","  public void test4()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      ResultSetDynaClass resultSetDynaClass0 = null;
      try {
        resultSetDynaClass0 = new ResultSetDynaClass(resultSet0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.beanutils.JDBCDynaClass"", e);
      }
  }"
728,"    public ResultSetDynaClass(final ResultSet resultSet) throws SQLException {

        this(resultSet, true);

    }","  public void test5()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      ResultSetDynaClass resultSetDynaClass0 = null;
      try {
        resultSetDynaClass0 = new ResultSetDynaClass(resultSet0, true, false);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.beanutils.JDBCDynaClass"", e);
      }
  }"
729,"    public ResultSetDynaClass(final ResultSet resultSet) throws SQLException {

        this(resultSet, true);

    }","  public void test6()  throws Throwable  {
      ResultSetDynaClass resultSetDynaClass0 = null;
      try {
        resultSetDynaClass0 = new ResultSetDynaClass((ResultSet) null, false, true);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.beanutils.ResultSetDynaClass"", e);
      }
  }"
730,"    public ResultSetDynaClass(final ResultSet resultSet) throws SQLException {

        this(resultSet, true);

    }","  public void test7()  throws Throwable  {
      ResultSetDynaClass resultSetDynaClass0 = null;
      try {
        resultSetDynaClass0 = new ResultSetDynaClass((ResultSet) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.beanutils.ResultSetDynaClass"", e);
      }
  }"
731,"    public Object getObjectFromResultSet(final String name) throws SQLException {
        return getObject(getResultSet(), name);
    }","  public void test8()  throws Throwable  {
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn((-4294)).when(resultSetMetaData0).getColumnCount();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn("""").when(resultSet0).toString();
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      ResultSetDynaClass resultSetDynaClass0 = new ResultSetDynaClass(resultSet0, false);
      // Undeclared exception!
      try { 
        resultSetDynaClass0.getObjectFromResultSet(""n)s?Tj9i;e18"");
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Invalid name 'n)s?Tj9i;e18'
         //
         verifyException(""org.apache.commons.beanutils.JDBCDynaClass"", e);
      }
  }"
732,"    ResultSet getResultSet() {

        return (this.resultSet);

    }","  public void test9()  throws Throwable  {
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(resultSetMetaData0).getColumnCount();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(resultSet0).toString();
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      ResultSetDynaClass resultSetDynaClass0 = new ResultSetDynaClass(resultSet0);
      ResultSet resultSet1 = resultSetDynaClass0.getResultSet();
}"
733,"    public Iterator<DynaBean> iterator() {

        return (new ResultSetIterator(this));

    }","  public void test10()  throws Throwable  {
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(resultSetMetaData0).getColumnCount();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      ResultSetDynaClass resultSetDynaClass0 = new ResultSetDynaClass(resultSet0);
      Iterator<DynaBean> iterator0 = resultSetDynaClass0.iterator();
}"
734,"    protected Class<?> loadClass(final String className) throws SQLException {

        try {
            return getClass().getClassLoader().loadClass(className);
        }
        catch (final Exception e) {
            throw new SQLException(""Cannot load column class '"" +
                                   className + ""': "" + e);
        }
    }","  public void test11()  throws Throwable  {
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(resultSetMetaData0).getColumnCount();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      ResultSetDynaClass resultSetDynaClass0 = new ResultSetDynaClass(resultSet0);
      try { 
        resultSetDynaClass0.loadClass("">[^Fq_]<"");
        fail(""Expecting exception: SQLException"");
      } catch(SQLException e) {
         //
         // Cannot load column class '>[^Fq_]<': java.lang.ClassNotFoundException: Class '>[^Fq_]<.class' should be in target project, but could not be found!
         //
         verifyException(""org.apache.commons.beanutils.ResultSetDynaClass"", e);
      }
  }"
735,"    protected T initialValue() {
        return null;
    }","  public void test0()  throws Throwable  {
      ContextClassLoaderLocal<Object> contextClassLoaderLocal0 = new ContextClassLoaderLocal<Object>();
      Object object0 = contextClassLoaderLocal0.initialValue();
}"
736,"    public synchronized void unset() {
        try {

            final ClassLoader contextClassLoader = Thread.currentThread().getContextClassLoader();
            unset(contextClassLoader);

        } catch (final SecurityException e) { /* SWALLOW - should we log this? */ }
    }","  public void test1()  throws Throwable  {
      ContextClassLoaderLocal<Integer> contextClassLoaderLocal0 = new ContextClassLoaderLocal<Integer>();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      contextClassLoaderLocal0.unset(classLoader0);
  }"
737,"    public synchronized void set(final T value) {
        // synchronizing the whole method is a bit slower
        // but guarentees no subtle threading problems

        // make sure that the map is given a change to purge itself
        valueByClassLoader.isEmpty();
        try {

            final ClassLoader contextClassLoader = Thread.currentThread().getContextClassLoader();
            if (contextClassLoader != null) {
                valueByClassLoader.put(contextClassLoader, value);
                return;
            }

        } catch (final SecurityException e) { /* SWALLOW - should we log this? */ }

        // if in doubt, set the global value
        globalValue = value;
        globalValueInitialized = true;
    }","  public void test2()  throws Throwable  {
      ContextClassLoaderLocal<String> contextClassLoaderLocal0 = new ContextClassLoaderLocal<String>();
      contextClassLoaderLocal0.set(""s"");
      contextClassLoaderLocal0.set(""s"");
  }"
738,"    public synchronized T get() {
        // synchronizing the whole method is a bit slower
        // but guarantees no subtle threading problems, and there's no
        // need to synchronize valueByClassLoader

        // make sure that the map is given a change to purge itself
        valueByClassLoader.isEmpty();
        try {

            final ClassLoader contextClassLoader = Thread.currentThread().getContextClassLoader();
            if (contextClassLoader != null) {

                T value = valueByClassLoader.get(contextClassLoader);
                if ((value == null)
                && !valueByClassLoader.containsKey(contextClassLoader)) {
                    value = initialValue();
                    valueByClassLoader.put(contextClassLoader, value);
                }
                return value;

            }

        } catch (final SecurityException e) { /* SWALLOW - should we log this? */ }

        // if none or exception, return the globalValue
        if (!globalValueInitialized) {
            globalValue = initialValue();
            globalValueInitialized = true;
        }//else already set
        return globalValue;
    }","  public void test3()  throws Throwable  {
      ContextClassLoaderLocal<String> contextClassLoaderLocal0 = new ContextClassLoaderLocal<String>();
      contextClassLoaderLocal0.set(""s"");
      String string0 = contextClassLoaderLocal0.get();
}"
739,"    public synchronized void unset() {
        try {

            final ClassLoader contextClassLoader = Thread.currentThread().getContextClassLoader();
            unset(contextClassLoader);

        } catch (final SecurityException e) { /* SWALLOW - should we log this? */ }
    }","  public void test4()  throws Throwable  {
      ContextClassLoaderLocal<Object> contextClassLoaderLocal0 = new ContextClassLoaderLocal<Object>();
      contextClassLoaderLocal0.unset();
  }"
740,"    public synchronized T get() {
        // synchronizing the whole method is a bit slower
        // but guarantees no subtle threading problems, and there's no
        // need to synchronize valueByClassLoader

        // make sure that the map is given a change to purge itself
        valueByClassLoader.isEmpty();
        try {

            final ClassLoader contextClassLoader = Thread.currentThread().getContextClassLoader();
            if (contextClassLoader != null) {

                T value = valueByClassLoader.get(contextClassLoader);
                if ((value == null)
                && !valueByClassLoader.containsKey(contextClassLoader)) {
                    value = initialValue();
                    valueByClassLoader.put(contextClassLoader, value);
                }
                return value;

            }

        } catch (final SecurityException e) { /* SWALLOW - should we log this? */ }

        // if none or exception, return the globalValue
        if (!globalValueInitialized) {
            globalValue = initialValue();
            globalValueInitialized = true;
        }//else already set
        return globalValue;
    }","  public void test5()  throws Throwable  {
      ContextClassLoaderLocal<Object> contextClassLoaderLocal0 = new ContextClassLoaderLocal<Object>();
      contextClassLoaderLocal0.get();
      Object object0 = contextClassLoaderLocal0.get();
}"
741,"    public float getDefaultFloat() {
        return (defaultFloat.floatValue());
    }","  public void test0()  throws Throwable  {
      ConvertUtilsBean convertUtilsBean0 = new ConvertUtilsBean();
      convertUtilsBean0.register(false, true, 430);
}"
742,"    public int getDefaultInteger() {
        return (defaultInteger.intValue());
    }","  public void test1()  throws Throwable  {
      ConvertUtilsBean convertUtilsBean0 = new ConvertUtilsBean();
      convertUtilsBean0.register(false, true, 430);
}"
743,"    public double getDefaultDouble() {
        return (defaultDouble.doubleValue());
    }","  public void test2()  throws Throwable  {
      ConvertUtilsBean convertUtilsBean0 = new ConvertUtilsBean();
      convertUtilsBean0.register(false, true, 430);
}"
744,"    public long getDefaultLong() {
        return (defaultLong.longValue());
    }","  public void test3()  throws Throwable  {
      ConvertUtilsBean convertUtilsBean0 = new ConvertUtilsBean();
      convertUtilsBean0.register(false, true, 430);
}"
745,"    public char getDefaultCharacter() {
        return (defaultCharacter.charValue());
    }","  public void test4()  throws Throwable  {
      ConvertUtilsBean convertUtilsBean0 = new ConvertUtilsBean();
      convertUtilsBean0.register(false, true, 430);
}"
746,"    public short getDefaultShort() {
        return (defaultShort.shortValue());
    }","  public void test5()  throws Throwable  {
      ConvertUtilsBean convertUtilsBean0 = ConvertUtilsBean.getInstance();
      convertUtilsBean0.setDefaultShort((short)4066);
      ConvertUtilsBean convertUtilsBean1 = ConvertUtilsBean.getInstance();
}"
747,"    public short getDefaultShort() {
        return (defaultShort.shortValue());
    }","  public void test6()  throws Throwable  {
      ConvertUtilsBean convertUtilsBean0 = ConvertUtilsBean.getInstance();
      convertUtilsBean0.setDefaultShort((short) (-302));
      ConvertUtilsBean convertUtilsBean1 = ConvertUtilsBean.getInstance();
}"
748,"    public short getDefaultShort() {
        return (defaultShort.shortValue());
    }","  public void test7()  throws Throwable  {
      ConvertUtilsBean convertUtilsBean0 = new ConvertUtilsBean();
      convertUtilsBean0.setDefaultShort((short)1484);
      short short0 = convertUtilsBean0.getDefaultShort();
}"
749,"    public float getDefaultFloat() {
        return (defaultFloat.floatValue());
    }","  public void test8()  throws Throwable  {
      ConvertUtilsBean convertUtilsBean0 = ConvertUtilsBean.getInstance();
      convertUtilsBean0.setDefaultFloat(0.0F);
      convertUtilsBean0.getDefaultDouble();
      convertUtilsBean0.setDefaultBoolean(true);
      convertUtilsBean0.setDefaultDouble(0.0);
      Locale locale0 = Locale.ROOT;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      Class<Object> class0 = Object.class;
      convertUtilsBean0.convert((Object) mockGregorianCalendar0, (Class<?>) class0);
}"
750,"    public boolean getDefaultBoolean() {
        return (defaultBoolean.booleanValue());
    }","  public void test9()  throws Throwable  {
      ConvertUtilsBean convertUtilsBean0 = ConvertUtilsBean.getInstance();
      convertUtilsBean0.setDefaultFloat(0.0F);
      convertUtilsBean0.getDefaultDouble();
      convertUtilsBean0.setDefaultBoolean(true);
      convertUtilsBean0.setDefaultDouble(0.0);
      Locale locale0 = Locale.ROOT;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      Class<Object> class0 = Object.class;
      convertUtilsBean0.convert((Object) mockGregorianCalendar0, (Class<?>) class0);
}"
751,"    public double getDefaultDouble() {
        return (defaultDouble.doubleValue());
    }","  public void test10()  throws Throwable  {
      ConvertUtilsBean convertUtilsBean0 = ConvertUtilsBean.getInstance();
      convertUtilsBean0.setDefaultFloat(0.0F);
      convertUtilsBean0.getDefaultDouble();
      convertUtilsBean0.setDefaultBoolean(true);
      convertUtilsBean0.setDefaultDouble(0.0);
      Locale locale0 = Locale.ROOT;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      Class<Object> class0 = Object.class;
      convertUtilsBean0.convert((Object) mockGregorianCalendar0, (Class<?>) class0);
}"
752,"    public float getDefaultFloat() {
        return (defaultFloat.floatValue());
    }","  public void test11()  throws Throwable  {
      ConvertUtilsBean convertUtilsBean0 = new ConvertUtilsBean();
      convertUtilsBean0.getDefaultByte();
}"
753,"    public char getDefaultCharacter() {
        return (defaultCharacter.charValue());
    }","  public void test12()  throws Throwable  {
      ConvertUtilsBean convertUtilsBean0 = new ConvertUtilsBean();
      convertUtilsBean0.getDefaultByte();
}"
754,"    public byte getDefaultByte() {
        return (defaultByte.byteValue());
    }","  public void test13()  throws Throwable  {
      ConvertUtilsBean convertUtilsBean0 = ConvertUtilsBean.getInstance();
      Class<StringConverter> class0 = StringConverter.class;
      convertUtilsBean0.lookup(class0, class0);
      convertUtilsBean0.getDefaultFloat();
      Class<URL> class1 = URL.class;
      convertUtilsBean0.lookup(class1, class0);
      convertUtilsBean0.setDefaultLong(0L);
      convertUtilsBean0.getDefaultLong();
      Class<DateConverter> class2 = DateConverter.class;
      convertUtilsBean0.lookup(class0);
      convertUtilsBean0.lookup(class2);
      convertUtilsBean0.getDefaultInteger();
      byte byte0 = convertUtilsBean0.getDefaultByte();
}"
755,"    public String convert(Object value) {

        if (value == null) {
            return null;
        } else if (value.getClass().isArray()) {
            if (Array.getLength(value) < 1) {
                return (null);
            }
            value = Array.get(value, 0);
            if (value == null) {
                return null;
            } else {
                final Converter converter = lookup(String.class);
                return (converter.convert(String.class, value));
            }
        } else {
            final Converter converter = lookup(String.class);
            return (converter.convert(String.class, value));
        }

    }","  public void test14()  throws Throwable  {
      ConvertUtilsBean convertUtilsBean0 = new ConvertUtilsBean();
      String[] stringArray0 = new String[1];
      Class<MockGregorianCalendar> class0 = MockGregorianCalendar.class;
      // Undeclared exception!
      try { 
        convertUtilsBean0.convert(stringArray0, class0);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // Default conversion to org.evosuite.runtime.mock.java.util.MockGregorianCalendar failed.
         //
         verifyException(""org.apache.commons.beanutils.converters.AbstractConverter"", e);
      }
  }"
756,"    public String convert(Object value) {

        if (value == null) {
            return null;
        } else if (value.getClass().isArray()) {
            if (Array.getLength(value) < 1) {
                return (null);
            }
            value = Array.get(value, 0);
            if (value == null) {
                return null;
            } else {
                final Converter converter = lookup(String.class);
                return (converter.convert(String.class, value));
            }
        } else {
            final Converter converter = lookup(String.class);
            return (converter.convert(String.class, value));
        }

    }","  public void test15()  throws Throwable  {
      ConvertUtilsBean convertUtilsBean0 = ConvertUtilsBean.getInstance();
      Class<Double> class0 = Double.class;
      // Undeclared exception!
      try { 
        convertUtilsBean0.convert((String[]) null, class0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.beanutils.ConvertUtilsBean"", e);
      }
  }"
757,"    public String convert(Object value) {

        if (value == null) {
            return null;
        } else if (value.getClass().isArray()) {
            if (Array.getLength(value) < 1) {
                return (null);
            }
            value = Array.get(value, 0);
            if (value == null) {
                return null;
            } else {
                final Converter converter = lookup(String.class);
                return (converter.convert(String.class, value));
            }
        } else {
            final Converter converter = lookup(String.class);
            return (converter.convert(String.class, value));
        }

    }","  public void test16()  throws Throwable  {
      ConvertUtilsBean convertUtilsBean0 = ConvertUtilsBean.getInstance();
      Class<ByteConverter> class0 = ByteConverter.class;
      // Undeclared exception!
      try { 
        convertUtilsBean0.convert("""", class0);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // Default conversion to ByteConverter failed.
         //
         verifyException(""org.apache.commons.beanutils.converters.AbstractConverter"", e);
      }
  }"
758,"    public String convert(Object value) {

        if (value == null) {
            return null;
        } else if (value.getClass().isArray()) {
            if (Array.getLength(value) < 1) {
                return (null);
            }
            value = Array.get(value, 0);
            if (value == null) {
                return null;
            } else {
                final Converter converter = lookup(String.class);
                return (converter.convert(String.class, value));
            }
        } else {
            final Converter converter = lookup(String.class);
            return (converter.convert(String.class, value));
        }

    }","  public void test17()  throws Throwable  {
      ConvertUtilsBean convertUtilsBean0 = new ConvertUtilsBean();
      StringConverter stringConverter0 = new StringConverter();
      Class<URL> class0 = URL.class;
      // Undeclared exception!
      try { 
        convertUtilsBean0.convert((Object) stringConverter0, (Class<?>) class0);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // Error converting from 'StringConverter' to 'java.net.URL' no protocol: org.apache.commons.beanutils.converters.StringConverter@0000000143
         //
         verifyException(""org.apache.commons.beanutils.converters.AbstractConverter"", e);
      }
  }"
759,"    public String convert(Object value) {

        if (value == null) {
            return null;
        } else if (value.getClass().isArray()) {
            if (Array.getLength(value) < 1) {
                return (null);
            }
            value = Array.get(value, 0);
            if (value == null) {
                return null;
            } else {
                final Converter converter = lookup(String.class);
                return (converter.convert(String.class, value));
            }
        } else {
            final Converter converter = lookup(String.class);
            return (converter.convert(String.class, value));
        }

    }","  public void test18()  throws Throwable  {
      ConvertUtilsBean convertUtilsBean0 = ConvertUtilsBean.getInstance();
      // Undeclared exception!
      try { 
        convertUtilsBean0.convert((Object) null, (Class<?>) null);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Target type is missing
         //
         verifyException(""org.apache.commons.beanutils.ConvertUtilsBean"", e);
      }
  }"
760,"    public String convert(Object value) {

        if (value == null) {
            return null;
        } else if (value.getClass().isArray()) {
            if (Array.getLength(value) < 1) {
                return (null);
            }
            value = Array.get(value, 0);
            if (value == null) {
                return null;
            } else {
                final Converter converter = lookup(String.class);
                return (converter.convert(String.class, value));
            }
        } else {
            final Converter converter = lookup(String.class);
            return (converter.convert(String.class, value));
        }

    }","  public void test19()  throws Throwable  {
      ConvertUtilsBean convertUtilsBean0 = new ConvertUtilsBean();
      Class<String> class0 = String.class;
      convertUtilsBean0.deregister(class0);
      // Undeclared exception!
      try { 
        convertUtilsBean0.convert((Object) ""org.apache.commons.beanutils.converters.FloatConverter@0000000143"");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.beanutils.ConvertUtilsBean"", e);
      }
  }"
761,"    public float getDefaultFloat() {
        return (defaultFloat.floatValue());
    }","  public void test20()  throws Throwable  {
      ConvertUtilsBean convertUtilsBean0 = new ConvertUtilsBean();
      Class<Integer> class0 = Integer.class;
      Class<String> class1 = String.class;
      convertUtilsBean0.lookup(class0, class1);
}"
762,"    public byte getDefaultByte() {
        return (defaultByte.byteValue());
    }","  public void test21()  throws Throwable  {
      ConvertUtilsBean convertUtilsBean0 = new ConvertUtilsBean();
      Class<Integer> class0 = Integer.class;
      Class<String> class1 = String.class;
      convertUtilsBean0.lookup(class0, class1);
}"
763,"    public char getDefaultCharacter() {
        return (defaultCharacter.charValue());
    }","  public void test22()  throws Throwable  {
      ConvertUtilsBean convertUtilsBean0 = new ConvertUtilsBean();
      Class<Integer> class0 = Integer.class;
      Class<String> class1 = String.class;
      convertUtilsBean0.lookup(class0, class1);
}"
764,"    public Converter lookup(final Class<?> clazz) {

        return (converters.get(clazz));

    }","  public void test23()  throws Throwable  {
      ConvertUtilsBean convertUtilsBean0 = ConvertUtilsBean.getInstance();
      Class<BooleanConverter> class0 = BooleanConverter.class;
      Class<String> class1 = String.class;
      Converter converter0 = convertUtilsBean0.lookup(class0, class1);
}"
765,"    public Converter lookup(final Class<?> clazz) {

        return (converters.get(clazz));

    }","  public void test24()  throws Throwable  {
      ConvertUtilsBean convertUtilsBean0 = ConvertUtilsBean.getInstance();
      Class<CalendarConverter> class0 = CalendarConverter.class;
      Converter converter0 = convertUtilsBean0.lookup((Class<?>) null, class0);
}"
766,"    public String convert(Object value) {

        if (value == null) {
            return null;
        } else if (value.getClass().isArray()) {
            if (Array.getLength(value) < 1) {
                return (null);
            }
            value = Array.get(value, 0);
            if (value == null) {
                return null;
            } else {
                final Converter converter = lookup(String.class);
                return (converter.convert(String.class, value));
            }
        } else {
            final Converter converter = lookup(String.class);
            return (converter.convert(String.class, value));
        }

    }","  public void test25()  throws Throwable  {
      ConvertUtilsBean convertUtilsBean0 = ConvertUtilsBean.getInstance();
      Class<ConverterFacade> class0 = ConverterFacade.class;
      Object object0 = convertUtilsBean0.convert((Object) null, (Class<?>) class0);
}"
767,"    public double getDefaultDouble() {
        return (defaultDouble.doubleValue());
    }","  public void test26()  throws Throwable  {
      ConvertUtilsBean convertUtilsBean0 = ConvertUtilsBean.getInstance();
      Class<Long> class0 = Long.class;
      convertUtilsBean0.register((Converter) null, class0);
}"
768,"    public long getDefaultLong() {
        return (defaultLong.longValue());
    }","  public void test27()  throws Throwable  {
      ConvertUtilsBean convertUtilsBean0 = ConvertUtilsBean.getInstance();
      convertUtilsBean0.deregister();
}"
769,"    public Converter lookup(final Class<?> clazz) {

        return (converters.get(clazz));

    }","  public void test28()  throws Throwable  {
      ConvertUtilsBean convertUtilsBean0 = ConvertUtilsBean.getInstance();
      Class<String> class0 = String.class;
      Converter converter0 = convertUtilsBean0.lookup(class0);
}"
770,"    public Converter lookup(final Class<?> clazz) {

        return (converters.get(clazz));

    }","  public void test29()  throws Throwable  {
      ConvertUtilsBean convertUtilsBean0 = ConvertUtilsBean.getInstance();
      Class<BooleanConverter> class0 = BooleanConverter.class;
      // Undeclared exception!
      try { 
        convertUtilsBean0.lookup(class0, (Class<?>) null);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Target type is missing
         //
         verifyException(""org.apache.commons.beanutils.ConvertUtilsBean"", e);
      }
  }"
771,"    public byte getDefaultByte() {
        return (defaultByte.byteValue());
    }","  public void test30()  throws Throwable  {
      ConvertUtilsBean convertUtilsBean0 = new ConvertUtilsBean();
      convertUtilsBean0.register(true, true, (-596));
}"
772,"    public char getDefaultCharacter() {
        return (defaultCharacter.charValue());
    }","  public void test31()  throws Throwable  {
      ConvertUtilsBean convertUtilsBean0 = new ConvertUtilsBean();
      convertUtilsBean0.register(true, true, (-596));
}"
773,"    public long getDefaultLong() {
        return (defaultLong.longValue());
    }","  public void test32()  throws Throwable  {
      ConvertUtilsBean convertUtilsBean0 = new ConvertUtilsBean();
      convertUtilsBean0.register(true, true, (-596));
}"
774,"    public float getDefaultFloat() {
        return (defaultFloat.floatValue());
    }","  public void test33()  throws Throwable  {
      ConvertUtilsBean convertUtilsBean0 = new ConvertUtilsBean();
      convertUtilsBean0.register(true, true, (-596));
}"
775,"    public double getDefaultDouble() {
        return (defaultDouble.doubleValue());
    }","  public void test34()  throws Throwable  {
      ConvertUtilsBean convertUtilsBean0 = new ConvertUtilsBean();
      convertUtilsBean0.register(true, true, (-596));
}"
776,"    public long getDefaultLong() {
        return (defaultLong.longValue());
    }","  public void test35()  throws Throwable  {
      ConvertUtilsBean convertUtilsBean0 = new ConvertUtilsBean();
      BigDecimalConverter bigDecimalConverter0 = new BigDecimalConverter();
      Class<String> class0 = String.class;
      convertUtilsBean0.deregister(class0);
      convertUtilsBean0.convert((Object) bigDecimalConverter0, (Class<?>) class0);
}"
777,"    public char getDefaultCharacter() {
        return (defaultCharacter.charValue());
    }","  public void test36()  throws Throwable  {
      ConvertUtilsBean convertUtilsBean0 = new ConvertUtilsBean();
      BigDecimalConverter bigDecimalConverter0 = new BigDecimalConverter();
      Class<String> class0 = String.class;
      convertUtilsBean0.deregister(class0);
      convertUtilsBean0.convert((Object) bigDecimalConverter0, (Class<?>) class0);
}"
778,"    public float getDefaultFloat() {
        return (defaultFloat.floatValue());
    }","  public void test37()  throws Throwable  {
      ConvertUtilsBean convertUtilsBean0 = new ConvertUtilsBean();
      BigDecimalConverter bigDecimalConverter0 = new BigDecimalConverter();
      Class<String> class0 = String.class;
      convertUtilsBean0.deregister(class0);
      convertUtilsBean0.convert((Object) bigDecimalConverter0, (Class<?>) class0);
}"
779,"    public int getDefaultInteger() {
        return (defaultInteger.intValue());
    }","  public void test38()  throws Throwable  {
      ConvertUtilsBean convertUtilsBean0 = new ConvertUtilsBean();
      BigDecimalConverter bigDecimalConverter0 = new BigDecimalConverter();
      Class<String> class0 = String.class;
      convertUtilsBean0.deregister(class0);
      convertUtilsBean0.convert((Object) bigDecimalConverter0, (Class<?>) class0);
}"
780,"    public double getDefaultDouble() {
        return (defaultDouble.doubleValue());
    }","  public void test39()  throws Throwable  {
      ConvertUtilsBean convertUtilsBean0 = new ConvertUtilsBean();
      BigDecimalConverter bigDecimalConverter0 = new BigDecimalConverter();
      Class<String> class0 = String.class;
      convertUtilsBean0.deregister(class0);
      convertUtilsBean0.convert((Object) bigDecimalConverter0, (Class<?>) class0);
}"
781,"    public byte getDefaultByte() {
        return (defaultByte.byteValue());
    }","  public void test40()  throws Throwable  {
      ConvertUtilsBean convertUtilsBean0 = new ConvertUtilsBean();
      Class<String> class0 = String.class;
      convertUtilsBean0.convert((Object) null, class0);
}"
782,"    public char getDefaultCharacter() {
        return (defaultCharacter.charValue());
    }","  public void test41()  throws Throwable  {
      ConvertUtilsBean convertUtilsBean0 = new ConvertUtilsBean();
      Class<String> class0 = String.class;
      convertUtilsBean0.convert((Object) null, class0);
}"
783,"    public double getDefaultDouble() {
        return (defaultDouble.doubleValue());
    }","  public void test42()  throws Throwable  {
      ConvertUtilsBean convertUtilsBean0 = new ConvertUtilsBean();
      Class<String> class0 = String.class;
      convertUtilsBean0.convert((Object) null, class0);
}"
784,"    public long getDefaultLong() {
        return (defaultLong.longValue());
    }","  public void test43()  throws Throwable  {
      ConvertUtilsBean convertUtilsBean0 = new ConvertUtilsBean();
      Class<String> class0 = String.class;
      convertUtilsBean0.convert((Object) null, class0);
}"
785,"    public String convert(Object value) {

        if (value == null) {
            return null;
        } else if (value.getClass().isArray()) {
            if (Array.getLength(value) < 1) {
                return (null);
            }
            value = Array.get(value, 0);
            if (value == null) {
                return null;
            } else {
                final Converter converter = lookup(String.class);
                return (converter.convert(String.class, value));
            }
        } else {
            final Converter converter = lookup(String.class);
            return (converter.convert(String.class, value));
        }

    }","  public void test44()  throws Throwable  {
      ConvertUtilsBean convertUtilsBean0 = ConvertUtilsBean.getInstance();
      Class<String> class0 = String.class;
      Byte byte0 = new Byte((byte)10);
      Object object0 = convertUtilsBean0.convert((Object) byte0, (Class<?>) class0);
}"
786,"    public String convert(Object value) {

        if (value == null) {
            return null;
        } else if (value.getClass().isArray()) {
            if (Array.getLength(value) < 1) {
                return (null);
            }
            value = Array.get(value, 0);
            if (value == null) {
                return null;
            } else {
                final Converter converter = lookup(String.class);
                return (converter.convert(String.class, value));
            }
        } else {
            final Converter converter = lookup(String.class);
            return (converter.convert(String.class, value));
        }

    }","  public void test45()  throws Throwable  {
      ConvertUtilsBean convertUtilsBean0 = ConvertUtilsBean.getInstance();
      Class<CalendarConverter> class0 = CalendarConverter.class;
      String[] stringArray0 = new String[0];
      Object object0 = convertUtilsBean0.convert(stringArray0, class0);
      Class<String> class1 = String.class;
      Object object1 = convertUtilsBean0.convert(object0, class1);
}"
787,"    public byte getDefaultByte() {
        return (defaultByte.byteValue());
    }","  public void test46()  throws Throwable  {
      ConvertUtilsBean convertUtilsBean0 = new ConvertUtilsBean();
      Class<String> class0 = String.class;
      convertUtilsBean0.convert("""", class0);
}"
788,"    public float getDefaultFloat() {
        return (defaultFloat.floatValue());
    }","  public void test47()  throws Throwable  {
      ConvertUtilsBean convertUtilsBean0 = new ConvertUtilsBean();
      Class<String> class0 = String.class;
      convertUtilsBean0.convert("""", class0);
}"
789,"    public double getDefaultDouble() {
        return (defaultDouble.doubleValue());
    }","  public void test48()  throws Throwable  {
      ConvertUtilsBean convertUtilsBean0 = new ConvertUtilsBean();
      Class<String> class0 = String.class;
      convertUtilsBean0.convert("""", class0);
}"
790,"    public char getDefaultCharacter() {
        return (defaultCharacter.charValue());
    }","  public void test49()  throws Throwable  {
      ConvertUtilsBean convertUtilsBean0 = new ConvertUtilsBean();
      Class<String> class0 = String.class;
      convertUtilsBean0.convert("""", class0);
}"
791,"    public char getDefaultCharacter() {
        return (defaultCharacter.charValue());
    }","  public void test50()  throws Throwable  {
      ConvertUtilsBean convertUtilsBean0 = new ConvertUtilsBean();
      String[] stringArray0 = new String[4];
      stringArray0[0] = ""qU7jcc?!~=->8"";
      Class<String> class0 = String.class;
      Object object0 = convertUtilsBean0.convert(stringArray0, class0);
      String string0 = convertUtilsBean0.convert(object0);
}"
792,"    public float getDefaultFloat() {
        return (defaultFloat.floatValue());
    }","  public void test51()  throws Throwable  {
      ConvertUtilsBean convertUtilsBean0 = new ConvertUtilsBean();
      String[] stringArray0 = new String[4];
      stringArray0[0] = ""qU7jcc?!~=->8"";
      Class<String> class0 = String.class;
      Object object0 = convertUtilsBean0.convert(stringArray0, class0);
      String string0 = convertUtilsBean0.convert(object0);
}"
793,"    public String convert(Object value) {

        if (value == null) {
            return null;
        } else if (value.getClass().isArray()) {
            if (Array.getLength(value) < 1) {
                return (null);
            }
            value = Array.get(value, 0);
            if (value == null) {
                return null;
            } else {
                final Converter converter = lookup(String.class);
                return (converter.convert(String.class, value));
            }
        } else {
            final Converter converter = lookup(String.class);
            return (converter.convert(String.class, value));
        }

    }","  public void test52()  throws Throwable  {
      ConvertUtilsBean convertUtilsBean0 = new ConvertUtilsBean();
      String[] stringArray0 = new String[4];
      stringArray0[0] = ""qU7jcc?!~=->8"";
      Class<String> class0 = String.class;
      Object object0 = convertUtilsBean0.convert(stringArray0, class0);
      String string0 = convertUtilsBean0.convert(object0);
}"
794,"    public double getDefaultDouble() {
        return (defaultDouble.doubleValue());
    }","  public void test53()  throws Throwable  {
      ConvertUtilsBean convertUtilsBean0 = new ConvertUtilsBean();
      String[] stringArray0 = new String[4];
      stringArray0[0] = ""qU7jcc?!~=->8"";
      Class<String> class0 = String.class;
      Object object0 = convertUtilsBean0.convert(stringArray0, class0);
      String string0 = convertUtilsBean0.convert(object0);
}"
795,"    public long getDefaultLong() {
        return (defaultLong.longValue());
    }","  public void test54()  throws Throwable  {
      ConvertUtilsBean convertUtilsBean0 = new ConvertUtilsBean();
      String[] stringArray0 = new String[4];
      stringArray0[0] = ""qU7jcc?!~=->8"";
      Class<String> class0 = String.class;
      Object object0 = convertUtilsBean0.convert(stringArray0, class0);
      String string0 = convertUtilsBean0.convert(object0);
}"
796,"    public String convert(Object value) {

        if (value == null) {
            return null;
        } else if (value.getClass().isArray()) {
            if (Array.getLength(value) < 1) {
                return (null);
            }
            value = Array.get(value, 0);
            if (value == null) {
                return null;
            } else {
                final Converter converter = lookup(String.class);
                return (converter.convert(String.class, value));
            }
        } else {
            final Converter converter = lookup(String.class);
            return (converter.convert(String.class, value));
        }

    }","  public void test55()  throws Throwable  {
      ConvertUtilsBean convertUtilsBean0 = ConvertUtilsBean.getInstance();
      String[] stringArray0 = new String[0];
      Class<Date> class0 = Date.class;
      Object object0 = convertUtilsBean0.convert(stringArray0, class0);
      String string0 = convertUtilsBean0.convert(object0);
}"
797,"    public double getDefaultDouble() {
        return (defaultDouble.doubleValue());
    }","  public void test56()  throws Throwable  {
      ConvertUtilsBean convertUtilsBean0 = new ConvertUtilsBean();
      String[] stringArray0 = new String[4];
      Class<String> class0 = String.class;
      Object object0 = convertUtilsBean0.convert(stringArray0, class0);
      convertUtilsBean0.convert(object0);
}"
798,"    public byte getDefaultByte() {
        return (defaultByte.byteValue());
    }","  public void test57()  throws Throwable  {
      ConvertUtilsBean convertUtilsBean0 = new ConvertUtilsBean();
      String[] stringArray0 = new String[4];
      Class<String> class0 = String.class;
      Object object0 = convertUtilsBean0.convert(stringArray0, class0);
      convertUtilsBean0.convert(object0);
}"
799,"    public char getDefaultCharacter() {
        return (defaultCharacter.charValue());
    }","  public void test58()  throws Throwable  {
      ConvertUtilsBean convertUtilsBean0 = new ConvertUtilsBean();
      String[] stringArray0 = new String[4];
      Class<String> class0 = String.class;
      Object object0 = convertUtilsBean0.convert(stringArray0, class0);
      convertUtilsBean0.convert(object0);
}"
800,"    public float getDefaultFloat() {
        return (defaultFloat.floatValue());
    }","  public void test59()  throws Throwable  {
      ConvertUtilsBean convertUtilsBean0 = new ConvertUtilsBean();
      String[] stringArray0 = new String[4];
      Class<String> class0 = String.class;
      Object object0 = convertUtilsBean0.convert(stringArray0, class0);
      convertUtilsBean0.convert(object0);
}"
801,"    public int getDefaultInteger() {
        return (defaultInteger.intValue());
    }","  public void test60()  throws Throwable  {
      ConvertUtilsBean convertUtilsBean0 = new ConvertUtilsBean();
      String[] stringArray0 = new String[4];
      Class<String> class0 = String.class;
      Object object0 = convertUtilsBean0.convert(stringArray0, class0);
      convertUtilsBean0.convert(object0);
}"
802,"    public long getDefaultLong() {
        return (defaultLong.longValue());
    }","  public void test61()  throws Throwable  {
      ConvertUtilsBean convertUtilsBean0 = new ConvertUtilsBean();
      convertUtilsBean0.convert((Object) null);
}"
803,"    public int getDefaultInteger() {
        return (defaultInteger.intValue());
    }","  public void test62()  throws Throwable  {
      ConvertUtilsBean convertUtilsBean0 = new ConvertUtilsBean();
      convertUtilsBean0.convert((Object) null);
}"
804,"    public char getDefaultCharacter() {
        return (defaultCharacter.charValue());
    }","  public void test63()  throws Throwable  {
      ConvertUtilsBean convertUtilsBean0 = new ConvertUtilsBean();
      convertUtilsBean0.convert((Object) null);
}"
805,"    public float getDefaultFloat() {
        return (defaultFloat.floatValue());
    }","  public void test64()  throws Throwable  {
      ConvertUtilsBean convertUtilsBean0 = new ConvertUtilsBean();
      convertUtilsBean0.convert((Object) null);
}"
806,"    public byte getDefaultByte() {
        return (defaultByte.byteValue());
    }","  public void test65()  throws Throwable  {
      ConvertUtilsBean convertUtilsBean0 = new ConvertUtilsBean();
      convertUtilsBean0.convert((Object) null);
}"
807,"    public boolean getDefaultBoolean() {
        return (defaultBoolean.booleanValue());
    }","  public void test66()  throws Throwable  {
      ConvertUtilsBean convertUtilsBean0 = ConvertUtilsBean.getInstance();
      convertUtilsBean0.setDefaultBoolean(false);
}"
808,"    public int getDefaultInteger() {
        return (defaultInteger.intValue());
    }","  public void test67()  throws Throwable  {
      ConvertUtilsBean convertUtilsBean0 = new ConvertUtilsBean();
      convertUtilsBean0.setDefaultInteger((-2233));
}"
809,"    public char getDefaultCharacter() {
        return (defaultCharacter.charValue());
    }","  public void test68()  throws Throwable  {
      ConvertUtilsBean convertUtilsBean0 = ConvertUtilsBean.getInstance();
      convertUtilsBean0.setDefaultCharacter('Z');
}"
810,"    public short getDefaultShort() {
        return (defaultShort.shortValue());
    }","  public void test69()  throws Throwable  {
      ConvertUtilsBean convertUtilsBean0 = ConvertUtilsBean.getInstance();
      convertUtilsBean0.setDefaultShort((short) (-1648));
      short short0 = convertUtilsBean0.getDefaultShort();
}"
811,"    public boolean getDefaultBoolean() {
        return (defaultBoolean.booleanValue());
    }","  public void test70()  throws Throwable  {
      ConvertUtilsBean convertUtilsBean0 = ConvertUtilsBean.getInstance();
      boolean boolean0 = convertUtilsBean0.getDefaultBoolean();
}"
812,"    public boolean getDefaultBoolean() {
        return (defaultBoolean.booleanValue());
    }","  public void test71()  throws Throwable  {
      ConvertUtilsBean convertUtilsBean0 = ConvertUtilsBean.getInstance();
      convertUtilsBean0.register(false, false, (-909));
}"
813,"    public short getDefaultShort() {
        return (defaultShort.shortValue());
    }","  public void test72()  throws Throwable  {
      ConvertUtilsBean convertUtilsBean0 = ConvertUtilsBean.getInstance();
      short short0 = convertUtilsBean0.getDefaultShort();
}"
814,"    public String convert(Object value) {

        if (value == null) {
            return null;
        } else if (value.getClass().isArray()) {
            if (Array.getLength(value) < 1) {
                return (null);
            }
            value = Array.get(value, 0);
            if (value == null) {
                return null;
            } else {
                final Converter converter = lookup(String.class);
                return (converter.convert(String.class, value));
            }
        } else {
            final Converter converter = lookup(String.class);
            return (converter.convert(String.class, value));
        }

    }","  public void test73()  throws Throwable  {
      ConvertUtilsBean convertUtilsBean0 = new ConvertUtilsBean();
      Class<String> class0 = String.class;
      convertUtilsBean0.deregister(class0);
      // Undeclared exception!
      try { 
        convertUtilsBean0.convert("""", class0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.beanutils.ConvertUtilsBean"", e);
      }
  }"
815,"    public byte getDefaultByte() {
        return (defaultByte.byteValue());
    }","  public void test74()  throws Throwable  {
      ConvertUtilsBean convertUtilsBean0 = new ConvertUtilsBean();
      convertUtilsBean0.setDefaultByte((byte) (-53));
}"
816,"    public ConversionException(final String message) {

        super(message);

    }","  public void test0()  throws Throwable  {
      ConversionException conversionException0 = null;
      try {
        conversionException0 = new ConversionException((Throwable) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.beanutils.ConversionException"", e);
      }
  }"
817,"    public ConversionException(final String message) {

        super(message);

    }","  public void test1()  throws Throwable  {
      ConversionException conversionException0 = new ConversionException(""*^[8IWS@"");
  }"
818,"    public Throwable getCause() {
        return (this.cause);
    }","  public void test2()  throws Throwable  {
      ConversionException conversionException0 = new ConversionException("""", (Throwable) null);
      MockThrowable mockThrowable0 = new MockThrowable("""", conversionException0);
      ConversionException conversionException1 = new ConversionException(mockThrowable0);
      Throwable throwable0 = conversionException1.getCause();
}"
819,"    public Throwable getCause() {
        return (this.cause);
    }","  public void test3()  throws Throwable  {
      ConversionException conversionException0 = new ConversionException("""", (Throwable) null);
      Throwable throwable0 = conversionException0.getCause();
}"
820,"    public void set(final String name, final Object value) {

        try {
            BeanUtils.copyProperty(instance, name, value);
        } catch (final InvocationTargetException ite) {
            final Throwable cause = ite.getTargetException();
            throw new IllegalArgumentException
                    (""Error setting property '"" + name +
                              ""' nested exception - "" + cause);
        } catch (final Throwable t) {
            final IllegalArgumentException iae = new IllegalArgumentException
                    (""Error setting property '"" + name +
                              ""', exception - "" + t);
            BeanUtils.initCause(iae, t);
            throw iae;
        }

    }","  public void test0()  throws Throwable  {
      Object object0 = new Object();
      ConvertingWrapDynaBean convertingWrapDynaBean0 = new ConvertingWrapDynaBean(object0);
      convertingWrapDynaBean0.set("" G6l&$54s^B]?Wy>@+"", object0);
  }"
821,"    public ConvertingWrapDynaBean(final Object instance) {

        super(instance);

    }","  public void test1()  throws Throwable  {
      ConvertingWrapDynaBean convertingWrapDynaBean0 = null;
      try {
        convertingWrapDynaBean0 = new ConvertingWrapDynaBean((Object) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.beanutils.WrapDynaBean"", e);
      }
  }"
822,"    public void set(final String name, final Object value) {

        try {
            BeanUtils.copyProperty(instance, name, value);
        } catch (final InvocationTargetException ite) {
            final Throwable cause = ite.getTargetException();
            throw new IllegalArgumentException
                    (""Error setting property '"" + name +
                              ""' nested exception - "" + cause);
        } catch (final Throwable t) {
            final IllegalArgumentException iae = new IllegalArgumentException
                    (""Error setting property '"" + name +
                              ""', exception - "" + t);
            BeanUtils.initCause(iae, t);
            throw iae;
        }

    }","  public void test2()  throws Throwable  {
      ConvertingWrapDynaBean convertingWrapDynaBean0 = new ConvertingWrapDynaBean(""5s,3w>1[oWr6v"");
      // Undeclared exception!
      try { 
        convertingWrapDynaBean0.set(""5s,3w>1[oWr6v"", (Object) ""5s,3w>1[oWr6v"");
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Error setting property '5s,3w>1[oWr6v', exception - org.evosuite.runtime.mock.java.lang.MockThrowable: Missing End Delimiter
         //
         verifyException(""org.apache.commons.beanutils.ConvertingWrapDynaBean"", e);
      }
  }"
823,"    public void introspect(final IntrospectionContext icontext) {
        BeanInfo beanInfo = null;
        try {
            beanInfo = Introspector.getBeanInfo(icontext.getTargetClass());
        } catch (final IntrospectionException e) {
            // no descriptors are added to the context
            log.error(
                    ""Error when inspecting class "" + icontext.getTargetClass(),
                    e);
            return;
        }

        PropertyDescriptor[] descriptors = beanInfo.getPropertyDescriptors();
        if (descriptors == null) {
            descriptors = new PropertyDescriptor[0];
        }

        handleIndexedPropertyDescriptors(icontext.getTargetClass(),
                descriptors);
        icontext.addPropertyDescriptors(descriptors);
    }","  public void test0()  throws Throwable  {
      DefaultBeanIntrospector defaultBeanIntrospector0 = (DefaultBeanIntrospector)DefaultBeanIntrospector.INSTANCE;
      // Undeclared exception!
      try { 
        defaultBeanIntrospector0.introspect((IntrospectionContext) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.beanutils.DefaultBeanIntrospector"", e);
      }
  }"
824,"    public void introspect(final IntrospectionContext icontext) {
        BeanInfo beanInfo = null;
        try {
            beanInfo = Introspector.getBeanInfo(icontext.getTargetClass());
        } catch (final IntrospectionException e) {
            // no descriptors are added to the context
            log.error(
                    ""Error when inspecting class "" + icontext.getTargetClass(),
                    e);
            return;
        }

        PropertyDescriptor[] descriptors = beanInfo.getPropertyDescriptors();
        if (descriptors == null) {
            descriptors = new PropertyDescriptor[0];
        }

        handleIndexedPropertyDescriptors(icontext.getTargetClass(),
                descriptors);
        icontext.addPropertyDescriptors(descriptors);
    }","  public void test1()  throws Throwable  {
      DefaultBeanIntrospector defaultBeanIntrospector0 = (DefaultBeanIntrospector)DefaultBeanIntrospector.INSTANCE;
      Class<Object> class0 = Object.class;
      DefaultIntrospectionContext defaultIntrospectionContext0 = new DefaultIntrospectionContext(class0);
      defaultBeanIntrospector0.introspect(defaultIntrospectionContext0);
  }"
825,"    public void setSimpleProperty(final Object bean,
                                         final String name, final Object value)
            throws IllegalAccessException, InvocationTargetException,
            NoSuchMethodException {

        if (bean == null) {
            throw new IllegalArgumentException(""No bean specified"");
        }
        if (name == null) {
            throw new IllegalArgumentException(""No name specified for bean class '"" +
                    bean.getClass() + ""'"");
        }

        // Validate the syntax of the property name
        if (resolver.hasNested(name)) {
            throw new IllegalArgumentException
                    (""Nested property names are not allowed: Property '"" +
                    name + ""' on bean class '"" + bean.getClass() + ""'"");
        } else if (resolver.isIndexed(name)) {
            throw new IllegalArgumentException
                    (""Indexed property names are not allowed: Property '"" +
                    name + ""' on bean class '"" + bean.getClass() + ""'"");
        } else if (resolver.isMapped(name)) {
            throw new IllegalArgumentException
                    (""Mapped property names are not allowed: Property '"" +
                    name + ""' on bean class '"" + bean.getClass() + ""'"");
        }

        // Handle DynaBean instances specially
        if (bean instanceof DynaBean) {
            final DynaProperty descriptor =
                    ((DynaBean) bean).getDynaClass().getDynaProperty(name);
            if (descriptor == null) {
                throw new NoSuchMethodException(""Unknown property '"" +
                        name + ""' on dynaclass '"" +
                        ((DynaBean) bean).getDynaClass() + ""'"" );
            }
            ((DynaBean) bean).set(name, value);
            return;
        }

        // Retrieve the property setter method for the specified property
        final PropertyDescriptor descriptor =
                getPropertyDescriptor(bean, name);
        if (descriptor == null) {
            throw new NoSuchMethodException(""Unknown property '"" +
                    name + ""' on class '"" + bean.getClass() + ""'"" );
        }
        final Method writeMethod = getWriteMethod(bean.getClass(), descriptor);
        if (writeMethod == null) {
            throw new NoSuchMethodException(""Property '"" + name +
                    ""' has no setter method in class '"" + bean.getClass() + ""'"");
        }

        // Call the property setter method
        final Object[] values = new Object[1];
        values[0] = value;
        if (log.isTraceEnabled()) {
            final String valueClassName =
                value == null ? ""<null>"" : value.getClass().getName();
            log.trace(""setSimpleProperty: Invoking method "" + writeMethod
                      + "" with value "" + value + "" (class "" + valueClassName + "")"");
        }
        invokeMethod(writeMethod, bean, values);

    }","  public void test0()  throws Throwable  {
      Class<Object> class0 = Object.class;
      PropertyUtilsBean propertyUtilsBean0 = PropertyUtilsBean.getInstance();
      IndexOutOfBoundsException indexOutOfBoundsException0 = new IndexOutOfBoundsException();
      // Undeclared exception!
      try { 
        propertyUtilsBean0.setSimpleProperty(class0, (String) null, indexOutOfBoundsException0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // No name specified for bean class 'class java.lang.Class'
         //
         verifyException(""org.apache.commons.beanutils.PropertyUtilsBean"", e);
      }
  }"
826,"    public void setMappedProperty(final Object bean, String name,
                                         final Object value)
            throws IllegalAccessException, InvocationTargetException,
            NoSuchMethodException {

        if (bean == null) {
            throw new IllegalArgumentException(""No bean specified"");
        }
        if (name == null) {
            throw new IllegalArgumentException(""No name specified for bean class '"" +
                    bean.getClass() + ""'"");
        }

        // Identify the key of the requested individual property
        String key  = null;
        try {
            key = resolver.getKey(name);
        } catch (final IllegalArgumentException e) {
            throw new IllegalArgumentException
                    (""Invalid mapped property '"" + name +
                    ""' on bean class '"" + bean.getClass() + ""'"");
        }
        if (key == null) {
            throw new IllegalArgumentException
                    (""Invalid mapped property '"" + name +
                    ""' on bean class '"" + bean.getClass() + ""'"");
        }

        // Isolate the name
        name = resolver.getProperty(name);

        // Request the specified indexed property value
        setMappedProperty(bean, name, key, value);

    }","  public void test1()  throws Throwable  {
      Class<PropertyDescriptor> class0 = PropertyDescriptor.class;
      WrapDynaClass wrapDynaClass0 = WrapDynaClass.createDynaClass(class0);
      PropertyUtilsBean propertyUtilsBean0 = wrapDynaClass0.getPropertyUtilsBean();
      BasicDynaBean basicDynaBean0 = new BasicDynaBean((DynaClass) null);
      BasicDynaBean basicDynaBean1 = new BasicDynaBean(wrapDynaClass0);
      // Undeclared exception!
      try { 
        propertyUtilsBean0.setMappedProperty((Object) basicDynaBean0, ""AUS/jEf+u)e^fo/Z"", """", (Object) basicDynaBean1);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.beanutils.PropertyUtilsBean"", e);
      }
  }"
827,"    public void copyProperties(final Object dest, final Object orig)
            throws IllegalAccessException, InvocationTargetException,
            NoSuchMethodException {

        if (dest == null) {
            throw new IllegalArgumentException
                    (""No destination bean specified"");
        }
        if (orig == null) {
            throw new IllegalArgumentException(""No origin bean specified"");
        }

        if (orig instanceof DynaBean) {
            final DynaProperty[] origDescriptors =
                ((DynaBean) orig).getDynaClass().getDynaProperties();
            for (DynaProperty origDescriptor : origDescriptors) {
                final String name = origDescriptor.getName();
                if (isReadable(orig, name) && isWriteable(dest, name)) {
                    try {
                        final Object value = ((DynaBean) orig).get(name);
                        if (dest instanceof DynaBean) {
                            ((DynaBean) dest).set(name, value);
                        } else {
                                setSimpleProperty(dest, name, value);
                        }
                    } catch (final NoSuchMethodException e) {
                        if (log.isDebugEnabled()) {
                            log.debug(""Error writing to '"" + name + ""' on class '"" + dest.getClass() + ""'"", e);
                        }
                    }
                }
            }
        } else if (orig instanceof Map) {
            final Iterator<?> entries = ((Map<?, ?>) orig).entrySet().iterator();
            while (entries.hasNext()) {
                final Map.Entry<?, ?> entry = (Entry<?, ?>) entries.next();
                final String name = (String)entry.getKey();
                if (isWriteable(dest, name)) {
                    try {
                        if (dest instanceof DynaBean) {
                            ((DynaBean) dest).set(name, entry.getValue());
                        } else {
                            setSimpleProperty(dest, name, entry.getValue());
                        }
                    } catch (final NoSuchMethodException e) {
                        if (log.isDebugEnabled()) {
                            log.debug(""Error writing to '"" + name + ""' on class '"" + dest.getClass() + ""'"", e);
                        }
                    }
                }
            }
        } else /* if (orig is a standard JavaBean) */ {
            final PropertyDescriptor[] origDescriptors =
                getPropertyDescriptors(orig);
            for (PropertyDescriptor origDescriptor : origDescriptors) {
                final String name = origDescriptor.getName();
                if (isReadable(orig, name) && isWriteable(dest, name)) {
                    try {
                        final Object value = getSimpleProperty(orig, name);
                        if (dest instanceof DynaBean) {
                            ((DynaBean) dest).set(name, value);
                        } else {
                                setSimpleProperty(dest, name, value);
                        }
                    } catch (final NoSuchMethodException e) {
                        if (log.isDebugEnabled()) {
                            log.debug(""Error writing to '"" + name + ""' on class '"" + dest.getClass() + ""'"", e);
                        }
                    }
                }
            }
        }

    }","  public void test2()  throws Throwable  {
      PropertyUtilsBean propertyUtilsBean0 = PropertyUtilsBean.getInstance();
      ConvertingWrapDynaBean convertingWrapDynaBean0 = new ConvertingWrapDynaBean(propertyUtilsBean0);
      WrapDynaClass wrapDynaClass0 = convertingWrapDynaBean0.dynaClass;
      WrapDynaBean wrapDynaBean0 = new WrapDynaBean(convertingWrapDynaBean0, wrapDynaClass0);
      propertyUtilsBean0.copyProperties(wrapDynaBean0, convertingWrapDynaBean0);
  }"
828,"    public void copyProperties(final Object dest, final Object orig)
            throws IllegalAccessException, InvocationTargetException,
            NoSuchMethodException {

        if (dest == null) {
            throw new IllegalArgumentException
                    (""No destination bean specified"");
        }
        if (orig == null) {
            throw new IllegalArgumentException(""No origin bean specified"");
        }

        if (orig instanceof DynaBean) {
            final DynaProperty[] origDescriptors =
                ((DynaBean) orig).getDynaClass().getDynaProperties();
            for (DynaProperty origDescriptor : origDescriptors) {
                final String name = origDescriptor.getName();
                if (isReadable(orig, name) && isWriteable(dest, name)) {
                    try {
                        final Object value = ((DynaBean) orig).get(name);
                        if (dest instanceof DynaBean) {
                            ((DynaBean) dest).set(name, value);
                        } else {
                                setSimpleProperty(dest, name, value);
                        }
                    } catch (final NoSuchMethodException e) {
                        if (log.isDebugEnabled()) {
                            log.debug(""Error writing to '"" + name + ""' on class '"" + dest.getClass() + ""'"", e);
                        }
                    }
                }
            }
        } else if (orig instanceof Map) {
            final Iterator<?> entries = ((Map<?, ?>) orig).entrySet().iterator();
            while (entries.hasNext()) {
                final Map.Entry<?, ?> entry = (Entry<?, ?>) entries.next();
                final String name = (String)entry.getKey();
                if (isWriteable(dest, name)) {
                    try {
                        if (dest instanceof DynaBean) {
                            ((DynaBean) dest).set(name, entry.getValue());
                        } else {
                            setSimpleProperty(dest, name, entry.getValue());
                        }
                    } catch (final NoSuchMethodException e) {
                        if (log.isDebugEnabled()) {
                            log.debug(""Error writing to '"" + name + ""' on class '"" + dest.getClass() + ""'"", e);
                        }
                    }
                }
            }
        } else /* if (orig is a standard JavaBean) */ {
            final PropertyDescriptor[] origDescriptors =
                getPropertyDescriptors(orig);
            for (PropertyDescriptor origDescriptor : origDescriptors) {
                final String name = origDescriptor.getName();
                if (isReadable(orig, name) && isWriteable(dest, name)) {
                    try {
                        final Object value = getSimpleProperty(orig, name);
                        if (dest instanceof DynaBean) {
                            ((DynaBean) dest).set(name, value);
                        } else {
                                setSimpleProperty(dest, name, value);
                        }
                    } catch (final NoSuchMethodException e) {
                        if (log.isDebugEnabled()) {
                            log.debug(""Error writing to '"" + name + ""' on class '"" + dest.getClass() + ""'"", e);
                        }
                    }
                }
            }
        }

    }","  public void test3()  throws Throwable  {
      Class<LazyDynaBean> class0 = LazyDynaBean.class;
      WrapDynaClass wrapDynaClass0 = WrapDynaClass.createDynaClass(class0);
      PropertyUtilsBean propertyUtilsBean0 = wrapDynaClass0.getPropertyUtilsBean();
      PropertyUtils propertyUtils0 = new PropertyUtils();
      propertyUtilsBean0.copyProperties(propertyUtils0, propertyUtils0);
}"
829,"    public void copyProperties(final Object dest, final Object orig)
            throws IllegalAccessException, InvocationTargetException,
            NoSuchMethodException {

        if (dest == null) {
            throw new IllegalArgumentException
                    (""No destination bean specified"");
        }
        if (orig == null) {
            throw new IllegalArgumentException(""No origin bean specified"");
        }

        if (orig instanceof DynaBean) {
            final DynaProperty[] origDescriptors =
                ((DynaBean) orig).getDynaClass().getDynaProperties();
            for (DynaProperty origDescriptor : origDescriptors) {
                final String name = origDescriptor.getName();
                if (isReadable(orig, name) && isWriteable(dest, name)) {
                    try {
                        final Object value = ((DynaBean) orig).get(name);
                        if (dest instanceof DynaBean) {
                            ((DynaBean) dest).set(name, value);
                        } else {
                                setSimpleProperty(dest, name, value);
                        }
                    } catch (final NoSuchMethodException e) {
                        if (log.isDebugEnabled()) {
                            log.debug(""Error writing to '"" + name + ""' on class '"" + dest.getClass() + ""'"", e);
                        }
                    }
                }
            }
        } else if (orig instanceof Map) {
            final Iterator<?> entries = ((Map<?, ?>) orig).entrySet().iterator();
            while (entries.hasNext()) {
                final Map.Entry<?, ?> entry = (Entry<?, ?>) entries.next();
                final String name = (String)entry.getKey();
                if (isWriteable(dest, name)) {
                    try {
                        if (dest instanceof DynaBean) {
                            ((DynaBean) dest).set(name, entry.getValue());
                        } else {
                            setSimpleProperty(dest, name, entry.getValue());
                        }
                    } catch (final NoSuchMethodException e) {
                        if (log.isDebugEnabled()) {
                            log.debug(""Error writing to '"" + name + ""' on class '"" + dest.getClass() + ""'"", e);
                        }
                    }
                }
            }
        } else /* if (orig is a standard JavaBean) */ {
            final PropertyDescriptor[] origDescriptors =
                getPropertyDescriptors(orig);
            for (PropertyDescriptor origDescriptor : origDescriptors) {
                final String name = origDescriptor.getName();
                if (isReadable(orig, name) && isWriteable(dest, name)) {
                    try {
                        final Object value = getSimpleProperty(orig, name);
                        if (dest instanceof DynaBean) {
                            ((DynaBean) dest).set(name, value);
                        } else {
                                setSimpleProperty(dest, name, value);
                        }
                    } catch (final NoSuchMethodException e) {
                        if (log.isDebugEnabled()) {
                            log.debug(""Error writing to '"" + name + ""' on class '"" + dest.getClass() + ""'"", e);
                        }
                    }
                }
            }
        }

    }","  public void test4()  throws Throwable  {
      PropertyUtilsBean propertyUtilsBean0 = PropertyUtilsBean.getInstance();
      // Undeclared exception!
      try { 
        PropertyUtils.copyProperties(propertyUtilsBean0, (Object) null);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // No origin bean specified
         //
         verifyException(""org.apache.commons.beanutils.PropertyUtilsBean"", e);
      }
  }"
830,"    public boolean removeBeanIntrospector(final BeanIntrospector introspector) {
        return introspectors.remove(introspector);
    }","  public void test5()  throws Throwable  {
      Class<ConvertingWrapDynaBean> class0 = ConvertingWrapDynaBean.class;
      WrapDynaClass wrapDynaClass0 = WrapDynaClass.createDynaClass(class0);
      PropertyUtilsBean propertyUtilsBean0 = wrapDynaClass0.getPropertyUtilsBean();
      SuppressPropertiesBeanIntrospector suppressPropertiesBeanIntrospector0 = SuppressPropertiesBeanIntrospector.SUPPRESS_CLASS;
      boolean boolean0 = propertyUtilsBean0.removeBeanIntrospector(suppressPropertiesBeanIntrospector0);
}"
831,"    public Method getReadMethod(final PropertyDescriptor descriptor) {

        return (MethodUtils.getAccessibleMethod(descriptor.getReadMethod()));

    }","  public void test6()  throws Throwable  {
      PropertyUtilsBean propertyUtilsBean0 = PropertyUtilsBean.getInstance();
      Class<ConvertingWrapDynaBean> class0 = ConvertingWrapDynaBean.class;
      PropertyDescriptor propertyDescriptor0 = new PropertyDescriptor(""\"")If"", (Method) null, (Method) null);
      Method method0 = propertyUtilsBean0.getReadMethod(class0, propertyDescriptor0);
}"
832,"    protected Object getPropertyOfMapBean(final Map<?, ?> bean, String propertyName)
        throws IllegalArgumentException, IllegalAccessException,
        InvocationTargetException, NoSuchMethodException {

        if (resolver.isMapped(propertyName)) {
            final String name = resolver.getProperty(propertyName);
            if (name == null || name.length() == 0) {
                propertyName = resolver.getKey(propertyName);
            }
        }

        if (resolver.isIndexed(propertyName) ||
            resolver.isMapped(propertyName)) {
            throw new IllegalArgumentException(
                    ""Indexed or mapped properties are not supported on""
                    + "" objects of type Map: "" + propertyName);
        }

        return bean.get(propertyName);
    }","  public void test7()  throws Throwable  {
      Class<FluentPropertyBeanIntrospector> class0 = FluentPropertyBeanIntrospector.class;
      WrapDynaClass wrapDynaClass0 = WrapDynaClass.createDynaClass(class0);
      PropertyUtilsBean propertyUtilsBean0 = wrapDynaClass0.getPropertyUtilsBean();
      FastHashMap fastHashMap0 = new FastHashMap();
      Object object0 = propertyUtilsBean0.getPropertyOfMapBean(fastHashMap0, ""w~TUun%G)074dgv"");
}"
833,"    protected Object getPropertyOfMapBean(final Map<?, ?> bean, String propertyName)
        throws IllegalArgumentException, IllegalAccessException,
        InvocationTargetException, NoSuchMethodException {

        if (resolver.isMapped(propertyName)) {
            final String name = resolver.getProperty(propertyName);
            if (name == null || name.length() == 0) {
                propertyName = resolver.getKey(propertyName);
            }
        }

        if (resolver.isIndexed(propertyName) ||
            resolver.isMapped(propertyName)) {
            throw new IllegalArgumentException(
                    ""Indexed or mapped properties are not supported on""
                    + "" objects of type Map: "" + propertyName);
        }

        return bean.get(propertyName);
    }","  public void test8()  throws Throwable  {
      PropertyUtilsBean propertyUtilsBean0 = new PropertyUtilsBean();
      FastHashMap fastHashMap0 = new FastHashMap();
      SuppressPropertiesBeanIntrospector suppressPropertiesBeanIntrospector0 = SuppressPropertiesBeanIntrospector.SUPPRESS_CLASS;
      ConvertingWrapDynaBean convertingWrapDynaBean0 = new ConvertingWrapDynaBean(suppressPropertiesBeanIntrospector0);
      fastHashMap0.put(""+mDVIVFHI3"", convertingWrapDynaBean0);
      Object object0 = propertyUtilsBean0.getPropertyOfMapBean(fastHashMap0, ""+mDVIVFHI3"");
}"
834,"    public PropertyDescriptor[]
            getPropertyDescriptors(final Class<?> beanClass) {

        return getIntrospectionData(beanClass).getDescriptors();

    }","  public void test9()  throws Throwable  {
      PropertyUtilsBean propertyUtilsBean0 = new PropertyUtilsBean();
      PropertyUtils propertyUtils0 = new PropertyUtils();
      PropertyDescriptor[] propertyDescriptorArray0 = propertyUtilsBean0.getPropertyDescriptors((Object) propertyUtils0);
}"
835,"    public PropertyDescriptor[]
            getPropertyDescriptors(final Class<?> beanClass) {

        return getIntrospectionData(beanClass).getDescriptors();

    }","  public void test10()  throws Throwable  {
      PropertyUtilsBean propertyUtilsBean0 = PropertyUtilsBean.getInstance();
      Class<LazyDynaMap> class0 = LazyDynaMap.class;
      PropertyDescriptor[] propertyDescriptorArray0 = propertyUtilsBean0.getPropertyDescriptors(class0);
}"
836,"    public PropertyDescriptor[]
            getPropertyDescriptors(final Class<?> beanClass) {

        return getIntrospectionData(beanClass).getDescriptors();

    }","  public void test11()  throws Throwable  {
      PropertyUtilsBean propertyUtilsBean0 = new PropertyUtilsBean();
      Class<Integer> class0 = Integer.class;
      PropertyDescriptor[] propertyDescriptorArray0 = propertyUtilsBean0.getPropertyDescriptors(class0);
}"
837,"    public Object getNestedProperty(Object bean, String name)
            throws IllegalAccessException, InvocationTargetException,
            NoSuchMethodException {

        if (bean == null) {
            throw new IllegalArgumentException(""No bean specified"");
        }
        if (name == null) {
            throw new IllegalArgumentException(""No name specified for bean class '"" +
                    bean.getClass() + ""'"");
        }

        // Resolve nested references
        while (resolver.hasNested(name)) {
            final String next = resolver.next(name);
            Object nestedBean = null;
            if (bean instanceof Map) {
                nestedBean = getPropertyOfMapBean((Map<?, ?>) bean, next);
            } else if (resolver.isMapped(next)) {
                nestedBean = getMappedProperty(bean, next);
            } else if (resolver.isIndexed(next)) {
                nestedBean = getIndexedProperty(bean, next);
            } else {
                nestedBean = getSimpleProperty(bean, next);
            }
            if (nestedBean == null) {
                throw new NestedNullException
                        (""Null property value for '"" + name +
                        ""' on bean class '"" + bean.getClass() + ""'"");
            }
            bean = nestedBean;
            name = resolver.remove(name);
        }

        if (bean instanceof Map) {
            bean = getPropertyOfMapBean((Map<?, ?>) bean, name);
        } else if (resolver.isMapped(name)) {
            bean = getMappedProperty(bean, name);
        } else if (resolver.isIndexed(name)) {
            bean = getIndexedProperty(bean, name);
        } else {
            bean = getSimpleProperty(bean, name);
        }
        return bean;

    }","  public void test12()  throws Throwable  {
      PropertyUtilsBean propertyUtilsBean0 = new PropertyUtilsBean();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      propertyUtilsBean0.setPropertyOfMapBean(hashMap0, """", """");
      Object object0 = propertyUtilsBean0.getNestedProperty(hashMap0, """");
}"
838,"    public FastHashMap getMappedPropertyDescriptors(final Class<?> beanClass) {

        if (beanClass == null) {
            return null;
        }

        // Look up any cached descriptors for this bean class
        return mappedDescriptorsCache.get(beanClass);

    }","  public void test13()  throws Throwable  {
      Class<PropertyUtils> class0 = PropertyUtils.class;
      PropertyUtilsBean propertyUtilsBean0 = new PropertyUtilsBean();
      FastHashMap fastHashMap0 = propertyUtilsBean0.getMappedPropertyDescriptors((Object) class0);
}"
839,"    protected void setPropertyOfMapBean(final Map<String, Object> bean, String propertyName, final Object value)
        throws IllegalArgumentException, IllegalAccessException,
        InvocationTargetException, NoSuchMethodException {

        if (resolver.isMapped(propertyName)) {
            final String name = resolver.getProperty(propertyName);
            if (name == null || name.length() == 0) {
                propertyName = resolver.getKey(propertyName);
            }
        }

        if (resolver.isIndexed(propertyName) ||
            resolver.isMapped(propertyName)) {
            throw new IllegalArgumentException(
                    ""Indexed or mapped properties are not supported on""
                    + "" objects of type Map: "" + propertyName);
        }

        bean.put(propertyName, value);
    }","  public void test14()  throws Throwable  {
      PropertyUtilsBean propertyUtilsBean0 = PropertyUtilsBean.getInstance();
      Integer integer0 = LazyDynaBean.Integer_ZERO;
      // Undeclared exception!
      try { 
        propertyUtilsBean0.setPropertyOfMapBean((Map<String, Object>) null, ""aw4?U@K"", integer0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.beanutils.PropertyUtilsBean"", e);
      }
  }"
840,"    public void setNestedProperty(Object bean,
                                         String name, final Object value)
            throws IllegalAccessException, InvocationTargetException,
            NoSuchMethodException {

        if (bean == null) {
            throw new IllegalArgumentException(""No bean specified"");
        }
        if (name == null) {
            throw new IllegalArgumentException(""No name specified for bean class '"" +
                    bean.getClass() + ""'"");
        }

        // Resolve nested references
        while (resolver.hasNested(name)) {
            final String next = resolver.next(name);
            Object nestedBean = null;
            if (bean instanceof Map) {
                nestedBean = getPropertyOfMapBean((Map<?, ?>)bean, next);
            } else if (resolver.isMapped(next)) {
                nestedBean = getMappedProperty(bean, next);
            } else if (resolver.isIndexed(next)) {
                nestedBean = getIndexedProperty(bean, next);
            } else {
                nestedBean = getSimpleProperty(bean, next);
            }
            if (nestedBean == null) {
                throw new NestedNullException
                        (""Null property value for '"" + name +
                         ""' on bean class '"" + bean.getClass() + ""'"");
            }
            bean = nestedBean;
            name = resolver.remove(name);
        }

        if (bean instanceof Map) {
            setPropertyOfMapBean(toPropertyMap(bean), name, value);
        } else if (resolver.isMapped(name)) {
            setMappedProperty(bean, name, value);
        } else if (resolver.isIndexed(name)) {
            setIndexedProperty(bean, name, value);
        } else {
            setSimpleProperty(bean, name, value);
        }

    }","  public void test15()  throws Throwable  {
      PropertyUtilsBean propertyUtilsBean0 = new PropertyUtilsBean();
      ResultSetIterator resultSetIterator0 = new ResultSetIterator((ResultSetDynaClass) null);
      SuppressPropertiesBeanIntrospector suppressPropertiesBeanIntrospector0 = SuppressPropertiesBeanIntrospector.SUPPRESS_CLASS;
      // Undeclared exception!
      try { 
        propertyUtilsBean0.setNestedProperty(resultSetIterator0, ""initCause"", suppressPropertiesBeanIntrospector0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.beanutils.PropertyUtilsBean"", e);
      }
  }"
841,"    public void setIndexedProperty(final Object bean, String name,
                                          final Object value)
            throws IllegalAccessException, InvocationTargetException,
            NoSuchMethodException {

        if (bean == null) {
            throw new IllegalArgumentException(""No bean specified"");
        }
        if (name == null) {
            throw new IllegalArgumentException(""No name specified for bean class '"" +
                    bean.getClass() + ""'"");
        }

        // Identify the index of the requested individual property
        int index = -1;
        try {
            index = resolver.getIndex(name);
        } catch (final IllegalArgumentException e) {
            throw new IllegalArgumentException(""Invalid indexed property '"" +
                    name + ""' on bean class '"" + bean.getClass() + ""'"");
        }
        if (index < 0) {
            throw new IllegalArgumentException(""Invalid indexed property '"" +
                    name + ""' on bean class '"" + bean.getClass() + ""'"");
        }

        // Isolate the name
        name = resolver.getProperty(name);

        // Set the specified indexed property value
        setIndexedProperty(bean, name, index, value);

    }","  public void test16()  throws Throwable  {
      PropertyUtilsBean propertyUtilsBean0 = new PropertyUtilsBean();
      FastHashMap fastHashMap0 = new FastHashMap(15, 15);
      // Undeclared exception!
      try { 
        propertyUtilsBean0.setIndexedProperty((Object) fastHashMap0, ""org.apache.commons.beanutils.MappedPropertyDescriptor"", 15, (Object) propertyUtilsBean0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Null property value for 'org' on bean class 'class org.apache.commons.collections.FastHashMap'
         //
         verifyException(""org.apache.commons.beanutils.PropertyUtilsBean"", e);
      }
  }"
842,"    public void setIndexedProperty(final Object bean, String name,
                                          final Object value)
            throws IllegalAccessException, InvocationTargetException,
            NoSuchMethodException {

        if (bean == null) {
            throw new IllegalArgumentException(""No bean specified"");
        }
        if (name == null) {
            throw new IllegalArgumentException(""No name specified for bean class '"" +
                    bean.getClass() + ""'"");
        }

        // Identify the index of the requested individual property
        int index = -1;
        try {
            index = resolver.getIndex(name);
        } catch (final IllegalArgumentException e) {
            throw new IllegalArgumentException(""Invalid indexed property '"" +
                    name + ""' on bean class '"" + bean.getClass() + ""'"");
        }
        if (index < 0) {
            throw new IllegalArgumentException(""Invalid indexed property '"" +
                    name + ""' on bean class '"" + bean.getClass() + ""'"");
        }

        // Isolate the name
        name = resolver.getProperty(name);

        // Set the specified indexed property value
        setIndexedProperty(bean, name, index, value);

    }","  public void test17()  throws Throwable  {
      PropertyUtilsBean propertyUtilsBean0 = PropertyUtilsBean.getInstance();
      ResultSetIterator resultSetIterator0 = new ResultSetIterator((ResultSetDynaClass) null);
      // Undeclared exception!
      try { 
        propertyUtilsBean0.setIndexedProperty((Object) resultSetIterator0, ""user"", 536, (Object) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.beanutils.PropertyUtilsBean"", e);
      }
  }"
843,"    public boolean isWriteable(Object bean, String name) {

        // Validate method parameters
        if (bean == null) {
            throw new IllegalArgumentException(""No bean specified"");
        }
        if (name == null) {
            throw new IllegalArgumentException(""No name specified for bean class '"" +
                    bean.getClass() + ""'"");
        }

        // Resolve nested references
        while (resolver.hasNested(name)) {
            final String next = resolver.next(name);
            Object nestedBean = null;
            try {
                nestedBean = getProperty(bean, next);
            } catch (final IllegalAccessException e) {
                return false;
            } catch (final InvocationTargetException e) {
                return false;
            } catch (final NoSuchMethodException e) {
                return false;
            }
            if (nestedBean == null) {
                throw new NestedNullException
                        (""Null property value for '"" + next +
                        ""' on bean class '"" + bean.getClass() + ""'"");
            }
            bean = nestedBean;
            name = resolver.remove(name);
        }

        // Remove any subscript from the final name value
        name = resolver.getProperty(name);

        // Treat WrapDynaBean as special case - may be a read-only property
        // (see Jira issue# BEANUTILS-61)
        if (bean instanceof WrapDynaBean) {
            bean = ((WrapDynaBean)bean).getInstance();
        }

        // Return the requested result
        if (bean instanceof DynaBean) {
            // All DynaBean properties are writeable
            return (((DynaBean) bean).getDynaClass().getDynaProperty(name) != null);
        } else {
            try {
                final PropertyDescriptor desc =
                    getPropertyDescriptor(bean, name);
                if (desc != null) {
                    Method writeMethod = getWriteMethod(bean.getClass(), desc);
                    if (writeMethod == null) {
                        if (desc instanceof IndexedPropertyDescriptor) {
                            writeMethod = ((IndexedPropertyDescriptor) desc).getIndexedWriteMethod();
                        } else if (desc instanceof MappedPropertyDescriptor) {
                            writeMethod = ((MappedPropertyDescriptor) desc).getMappedWriteMethod();
                        }
                        writeMethod = MethodUtils.getAccessibleMethod(bean.getClass(), writeMethod);
                    }
                    return (writeMethod != null);
                } else {
                    return (false);
                }
            } catch (final IllegalAccessException e) {
                return (false);
            } catch (final InvocationTargetException e) {
                return (false);
            } catch (final NoSuchMethodException e) {
                return (false);
            }
        }

    }","  public void test18()  throws Throwable  {
      PropertyUtilsBean propertyUtilsBean0 = PropertyUtilsBean.getInstance();
      BasicDynaBean basicDynaBean0 = new BasicDynaBean((DynaClass) null);
      // Undeclared exception!
      try { 
        propertyUtilsBean0.isWriteable(basicDynaBean0, ""org.apache.commons.beanutils.converters.BigDecimalConverter"");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.beanutils.PropertyUtilsBean"", e);
      }
  }"
844,"    public Method getWriteMethod(final PropertyDescriptor descriptor) {

        return (MethodUtils.getAccessibleMethod(descriptor.getWriteMethod()));

    }","  public void test19()  throws Throwable  {
      Class<WrapDynaBean> class0 = WrapDynaBean.class;
      WrapDynaClass wrapDynaClass0 = WrapDynaClass.createDynaClass(class0);
      PropertyUtilsBean propertyUtilsBean0 = wrapDynaClass0.getPropertyUtilsBean();
      // Undeclared exception!
      try { 
        propertyUtilsBean0.getWriteMethod((Class<?>) null, (PropertyDescriptor) null);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // No bean class specified
         //
         verifyException(""org.apache.commons.beanutils.PropertyUtilsBean"", e);
      }
  }"
845,"    public Method getWriteMethod(final PropertyDescriptor descriptor) {

        return (MethodUtils.getAccessibleMethod(descriptor.getWriteMethod()));

    }","  public void test20()  throws Throwable  {
      PropertyUtilsBean propertyUtilsBean0 = new PropertyUtilsBean();
      // Undeclared exception!
      try { 
        propertyUtilsBean0.getWriteMethod((PropertyDescriptor) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.beanutils.PropertyUtilsBean"", e);
      }
  }"
846,"    public Object getSimpleProperty(final Object bean, final String name)
            throws IllegalAccessException, InvocationTargetException,
            NoSuchMethodException {

        if (bean == null) {
            throw new IllegalArgumentException(""No bean specified"");
        }
        if (name == null) {
            throw new IllegalArgumentException(""No name specified for bean class '"" +
                    bean.getClass() + ""'"");
        }

        // Validate the syntax of the property name
        if (resolver.hasNested(name)) {
            throw new IllegalArgumentException
                    (""Nested property names are not allowed: Property '"" +
                    name + ""' on bean class '"" + bean.getClass() + ""'"");
        } else if (resolver.isIndexed(name)) {
            throw new IllegalArgumentException
                    (""Indexed property names are not allowed: Property '"" +
                    name + ""' on bean class '"" + bean.getClass() + ""'"");
        } else if (resolver.isMapped(name)) {
            throw new IllegalArgumentException
                    (""Mapped property names are not allowed: Property '"" +
                    name + ""' on bean class '"" + bean.getClass() + ""'"");
        }

        // Handle DynaBean instances specially
        if (bean instanceof DynaBean) {
            final DynaProperty descriptor =
                    ((DynaBean) bean).getDynaClass().getDynaProperty(name);
            if (descriptor == null) {
                throw new NoSuchMethodException(""Unknown property '"" +
                        name + ""' on dynaclass '"" +
                        ((DynaBean) bean).getDynaClass() + ""'"" );
            }
            return (((DynaBean) bean).get(name));
        }

        // Retrieve the property getter method for the specified property
        final PropertyDescriptor descriptor =
                getPropertyDescriptor(bean, name);
        if (descriptor == null) {
            throw new NoSuchMethodException(""Unknown property '"" +
                    name + ""' on class '"" + bean.getClass() + ""'"" );
        }
        final Method readMethod = getReadMethod(bean.getClass(), descriptor);
        if (readMethod == null) {
            throw new NoSuchMethodException(""Property '"" + name +
                    ""' has no getter method in class '"" + bean.getClass() + ""'"");
        }

        // Call the property getter and return the value
        final Object value = invokeMethod(readMethod, bean, EMPTY_OBJECT_ARRAY);
        return (value);

    }","  public void test21()  throws Throwable  {
      PropertyUtilsBean propertyUtilsBean0 = new PropertyUtilsBean();
      ResultSetIterator resultSetIterator0 = new ResultSetIterator((ResultSetDynaClass) null);
      // Undeclared exception!
      try { 
        propertyUtilsBean0.getSimpleProperty(resultSetIterator0, ""sQ9Y^m"");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.beanutils.PropertyUtilsBean"", e);
      }
  }"
847,"    public Method getReadMethod(final PropertyDescriptor descriptor) {

        return (MethodUtils.getAccessibleMethod(descriptor.getReadMethod()));

    }","  public void test22()  throws Throwable  {
      Class<BasicDynaBean> class0 = BasicDynaBean.class;
      WrapDynaClass wrapDynaClass0 = WrapDynaClass.createDynaClass(class0);
      PropertyUtilsBean propertyUtilsBean0 = wrapDynaClass0.getPropertyUtilsBean();
      // Undeclared exception!
      try { 
        propertyUtilsBean0.getReadMethod((PropertyDescriptor) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.beanutils.PropertyUtilsBean"", e);
      }
  }"
848,"    protected Object getPropertyOfMapBean(final Map<?, ?> bean, String propertyName)
        throws IllegalArgumentException, IllegalAccessException,
        InvocationTargetException, NoSuchMethodException {

        if (resolver.isMapped(propertyName)) {
            final String name = resolver.getProperty(propertyName);
            if (name == null || name.length() == 0) {
                propertyName = resolver.getKey(propertyName);
            }
        }

        if (resolver.isIndexed(propertyName) ||
            resolver.isMapped(propertyName)) {
            throw new IllegalArgumentException(
                    ""Indexed or mapped properties are not supported on""
                    + "" objects of type Map: "" + propertyName);
        }

        return bean.get(propertyName);
    }","  public void test23()  throws Throwable  {
      PropertyUtilsBean propertyUtilsBean0 = PropertyUtilsBean.getInstance();
      // Undeclared exception!
      try { 
        propertyUtilsBean0.getPropertyOfMapBean((Map<?, ?>) null, "":;wj;%L"");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.beanutils.PropertyUtilsBean"", e);
      }
  }"
849,"    public Object getProperty(final Object bean, final String name)
            throws IllegalAccessException, InvocationTargetException,
            NoSuchMethodException {

        return (getNestedProperty(bean, name));

    }","  public void test24()  throws Throwable  {
      PropertyUtilsBean propertyUtilsBean0 = PropertyUtilsBean.getInstance();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      doReturn(false).when(resultSet0).next();
      RowSetDynaClass rowSetDynaClass0 = new RowSetDynaClass(resultSet0);
      BasicDynaBean basicDynaBean0 = new BasicDynaBean(rowSetDynaClass0);
      try { 
        propertyUtilsBean0.getProperty(basicDynaBean0, """");
        fail(""Expecting exception: NoSuchMethodException"");
      } catch(NoSuchMethodException e) {
         //
         // Unknown property '' on dynaclass 'org.apache.commons.beanutils.RowSetDynaClass@2'
         //
         verifyException(""org.apache.commons.beanutils.PropertyUtilsBean"", e);
      }
  }"
850,"    public Object getMappedProperty(final Object bean, String name)
            throws IllegalAccessException, InvocationTargetException,
            NoSuchMethodException {

        if (bean == null) {
            throw new IllegalArgumentException(""No bean specified"");
        }
        if (name == null) {
            throw new IllegalArgumentException(""No name specified for bean class '"" +
                    bean.getClass() + ""'"");
        }

        // Identify the key of the requested individual property
        String key  = null;
        try {
            key = resolver.getKey(name);
        } catch (final IllegalArgumentException e) {
            throw new IllegalArgumentException
                    (""Invalid mapped property '"" + name +
                    ""' on bean class '"" + bean.getClass() + ""' "" + e.getMessage());
        }
        if (key == null) {
            throw new IllegalArgumentException(""Invalid mapped property '"" +
                    name + ""' on bean class '"" + bean.getClass() + ""'"");
        }

        // Isolate the name
        name = resolver.getProperty(name);

        // Request the specified indexed property value
        return (getMappedProperty(bean, name, key));

    }","  public void test25()  throws Throwable  {
      PropertyUtilsBean propertyUtilsBean0 = PropertyUtilsBean.getInstance();
      ResultSetIterator resultSetIterator0 = new ResultSetIterator((ResultSetDynaClass) null);
      // Undeclared exception!
      try { 
        propertyUtilsBean0.getMappedProperty((Object) resultSetIterator0, ""D?B~Y,"", ""D?B~Y,"");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.beanutils.PropertyUtilsBean"", e);
      }
  }"
851,"    public Map<String, Object> describe(final Object bean)
            throws IllegalAccessException, InvocationTargetException,
            NoSuchMethodException {

        if (bean == null) {
            throw new IllegalArgumentException(""No bean specified"");
        }
        final Map<String, Object> description = new HashMap<String, Object>();
        if (bean instanceof DynaBean) {
            final DynaProperty[] descriptors =
                ((DynaBean) bean).getDynaClass().getDynaProperties();
            for (DynaProperty descriptor : descriptors) {
                final String name = descriptor.getName();
                description.put(name, getProperty(bean, name));
            }
        } else {
            final PropertyDescriptor[] descriptors =
                getPropertyDescriptors(bean);
            for (PropertyDescriptor descriptor : descriptors) {
                final String name = descriptor.getName();
                if (descriptor.getReadMethod() != null) {
                    description.put(name, getProperty(bean, name));
                }
            }
        }
        return (description);

    }","  public void test26()  throws Throwable  {
      PropertyUtilsBean propertyUtilsBean0 = new PropertyUtilsBean();
      Class<ConvertingWrapDynaBean> class0 = ConvertingWrapDynaBean.class;
      DefaultIntrospectionContext defaultIntrospectionContext0 = new DefaultIntrospectionContext(class0);
      try { 
        propertyUtilsBean0.describe(defaultIntrospectionContext0);
        fail(""Expecting exception: NoSuchMethodException"");
      } catch(NoSuchMethodException e) {
         //
         // Property 'propertyDescriptors' has no getter method in class 'class org.apache.commons.beanutils.DefaultIntrospectionContext'
         //
         verifyException(""org.apache.commons.beanutils.PropertyUtilsBean"", e);
      }
  }"
852,"    public void copyProperties(final Object dest, final Object orig)
            throws IllegalAccessException, InvocationTargetException,
            NoSuchMethodException {

        if (dest == null) {
            throw new IllegalArgumentException
                    (""No destination bean specified"");
        }
        if (orig == null) {
            throw new IllegalArgumentException(""No origin bean specified"");
        }

        if (orig instanceof DynaBean) {
            final DynaProperty[] origDescriptors =
                ((DynaBean) orig).getDynaClass().getDynaProperties();
            for (DynaProperty origDescriptor : origDescriptors) {
                final String name = origDescriptor.getName();
                if (isReadable(orig, name) && isWriteable(dest, name)) {
                    try {
                        final Object value = ((DynaBean) orig).get(name);
                        if (dest instanceof DynaBean) {
                            ((DynaBean) dest).set(name, value);
                        } else {
                                setSimpleProperty(dest, name, value);
                        }
                    } catch (final NoSuchMethodException e) {
                        if (log.isDebugEnabled()) {
                            log.debug(""Error writing to '"" + name + ""' on class '"" + dest.getClass() + ""'"", e);
                        }
                    }
                }
            }
        } else if (orig instanceof Map) {
            final Iterator<?> entries = ((Map<?, ?>) orig).entrySet().iterator();
            while (entries.hasNext()) {
                final Map.Entry<?, ?> entry = (Entry<?, ?>) entries.next();
                final String name = (String)entry.getKey();
                if (isWriteable(dest, name)) {
                    try {
                        if (dest instanceof DynaBean) {
                            ((DynaBean) dest).set(name, entry.getValue());
                        } else {
                            setSimpleProperty(dest, name, entry.getValue());
                        }
                    } catch (final NoSuchMethodException e) {
                        if (log.isDebugEnabled()) {
                            log.debug(""Error writing to '"" + name + ""' on class '"" + dest.getClass() + ""'"", e);
                        }
                    }
                }
            }
        } else /* if (orig is a standard JavaBean) */ {
            final PropertyDescriptor[] origDescriptors =
                getPropertyDescriptors(orig);
            for (PropertyDescriptor origDescriptor : origDescriptors) {
                final String name = origDescriptor.getName();
                if (isReadable(orig, name) && isWriteable(dest, name)) {
                    try {
                        final Object value = getSimpleProperty(orig, name);
                        if (dest instanceof DynaBean) {
                            ((DynaBean) dest).set(name, value);
                        } else {
                                setSimpleProperty(dest, name, value);
                        }
                    } catch (final NoSuchMethodException e) {
                        if (log.isDebugEnabled()) {
                            log.debug(""Error writing to '"" + name + ""' on class '"" + dest.getClass() + ""'"", e);
                        }
                    }
                }
            }
        }

    }","  public void test27()  throws Throwable  {
      PropertyUtilsBean propertyUtilsBean0 = new PropertyUtilsBean();
      ResultSetIterator resultSetIterator0 = new ResultSetIterator((ResultSetDynaClass) null);
      // Undeclared exception!
      try { 
        propertyUtilsBean0.copyProperties(resultSetIterator0, resultSetIterator0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.beanutils.PropertyUtilsBean"", e);
      }
  }"
853,"    public void setSimpleProperty(final Object bean,
                                         final String name, final Object value)
            throws IllegalAccessException, InvocationTargetException,
            NoSuchMethodException {

        if (bean == null) {
            throw new IllegalArgumentException(""No bean specified"");
        }
        if (name == null) {
            throw new IllegalArgumentException(""No name specified for bean class '"" +
                    bean.getClass() + ""'"");
        }

        // Validate the syntax of the property name
        if (resolver.hasNested(name)) {
            throw new IllegalArgumentException
                    (""Nested property names are not allowed: Property '"" +
                    name + ""' on bean class '"" + bean.getClass() + ""'"");
        } else if (resolver.isIndexed(name)) {
            throw new IllegalArgumentException
                    (""Indexed property names are not allowed: Property '"" +
                    name + ""' on bean class '"" + bean.getClass() + ""'"");
        } else if (resolver.isMapped(name)) {
            throw new IllegalArgumentException
                    (""Mapped property names are not allowed: Property '"" +
                    name + ""' on bean class '"" + bean.getClass() + ""'"");
        }

        // Handle DynaBean instances specially
        if (bean instanceof DynaBean) {
            final DynaProperty descriptor =
                    ((DynaBean) bean).getDynaClass().getDynaProperty(name);
            if (descriptor == null) {
                throw new NoSuchMethodException(""Unknown property '"" +
                        name + ""' on dynaclass '"" +
                        ((DynaBean) bean).getDynaClass() + ""'"" );
            }
            ((DynaBean) bean).set(name, value);
            return;
        }

        // Retrieve the property setter method for the specified property
        final PropertyDescriptor descriptor =
                getPropertyDescriptor(bean, name);
        if (descriptor == null) {
            throw new NoSuchMethodException(""Unknown property '"" +
                    name + ""' on class '"" + bean.getClass() + ""'"" );
        }
        final Method writeMethod = getWriteMethod(bean.getClass(), descriptor);
        if (writeMethod == null) {
            throw new NoSuchMethodException(""Property '"" + name +
                    ""' has no setter method in class '"" + bean.getClass() + ""'"");
        }

        // Call the property setter method
        final Object[] values = new Object[1];
        values[0] = value;
        if (log.isTraceEnabled()) {
            final String valueClassName =
                value == null ? ""<null>"" : value.getClass().getName();
            log.trace(""setSimpleProperty: Invoking method "" + writeMethod
                      + "" with value "" + value + "" (class "" + valueClassName + "")"");
        }
        invokeMethod(writeMethod, bean, values);

    }","  public void test28()  throws Throwable  {
      Class<BasicDynaBean> class0 = BasicDynaBean.class;
      WrapDynaClass wrapDynaClass0 = WrapDynaClass.createDynaClass(class0);
      PropertyUtilsBean propertyUtilsBean0 = wrapDynaClass0.getPropertyUtilsBean();
      try { 
        propertyUtilsBean0.setSimpleProperty(wrapDynaClass0, """", class0);
        fail(""Expecting exception: NoSuchMethodException"");
      } catch(NoSuchMethodException e) {
         //
         // Unknown property '' on class 'class org.apache.commons.beanutils.WrapDynaClass'
         //
         verifyException(""org.apache.commons.beanutils.PropertyUtilsBean"", e);
      }
  }"
854,"    public void setSimpleProperty(final Object bean,
                                         final String name, final Object value)
            throws IllegalAccessException, InvocationTargetException,
            NoSuchMethodException {

        if (bean == null) {
            throw new IllegalArgumentException(""No bean specified"");
        }
        if (name == null) {
            throw new IllegalArgumentException(""No name specified for bean class '"" +
                    bean.getClass() + ""'"");
        }

        // Validate the syntax of the property name
        if (resolver.hasNested(name)) {
            throw new IllegalArgumentException
                    (""Nested property names are not allowed: Property '"" +
                    name + ""' on bean class '"" + bean.getClass() + ""'"");
        } else if (resolver.isIndexed(name)) {
            throw new IllegalArgumentException
                    (""Indexed property names are not allowed: Property '"" +
                    name + ""' on bean class '"" + bean.getClass() + ""'"");
        } else if (resolver.isMapped(name)) {
            throw new IllegalArgumentException
                    (""Mapped property names are not allowed: Property '"" +
                    name + ""' on bean class '"" + bean.getClass() + ""'"");
        }

        // Handle DynaBean instances specially
        if (bean instanceof DynaBean) {
            final DynaProperty descriptor =
                    ((DynaBean) bean).getDynaClass().getDynaProperty(name);
            if (descriptor == null) {
                throw new NoSuchMethodException(""Unknown property '"" +
                        name + ""' on dynaclass '"" +
                        ((DynaBean) bean).getDynaClass() + ""'"" );
            }
            ((DynaBean) bean).set(name, value);
            return;
        }

        // Retrieve the property setter method for the specified property
        final PropertyDescriptor descriptor =
                getPropertyDescriptor(bean, name);
        if (descriptor == null) {
            throw new NoSuchMethodException(""Unknown property '"" +
                    name + ""' on class '"" + bean.getClass() + ""'"" );
        }
        final Method writeMethod = getWriteMethod(bean.getClass(), descriptor);
        if (writeMethod == null) {
            throw new NoSuchMethodException(""Property '"" + name +
                    ""' has no setter method in class '"" + bean.getClass() + ""'"");
        }

        // Call the property setter method
        final Object[] values = new Object[1];
        values[0] = value;
        if (log.isTraceEnabled()) {
            final String valueClassName =
                value == null ? ""<null>"" : value.getClass().getName();
            log.trace(""setSimpleProperty: Invoking method "" + writeMethod
                      + "" with value "" + value + "" (class "" + valueClassName + "")"");
        }
        invokeMethod(writeMethod, bean, values);

    }","  public void test29()  throws Throwable  {
      PropertyUtilsBean propertyUtilsBean0 = PropertyUtilsBean.getInstance();
      Integer integer0 = LazyDynaBean.Integer_ZERO;
      // Undeclared exception!
      try { 
        propertyUtilsBean0.setSimpleProperty(integer0, ""[Z3L34\""!zp<F0v^a "", ""[Z3L34\""!zp<F0v^a "");
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Indexed property names are not allowed: Property '[Z3L34\""!zp<F0v^a ' on bean class 'class java.lang.Integer'
         //
         verifyException(""org.apache.commons.beanutils.PropertyUtilsBean"", e);
      }
  }"
855,"    public void setNestedProperty(Object bean,
                                         String name, final Object value)
            throws IllegalAccessException, InvocationTargetException,
            NoSuchMethodException {

        if (bean == null) {
            throw new IllegalArgumentException(""No bean specified"");
        }
        if (name == null) {
            throw new IllegalArgumentException(""No name specified for bean class '"" +
                    bean.getClass() + ""'"");
        }

        // Resolve nested references
        while (resolver.hasNested(name)) {
            final String next = resolver.next(name);
            Object nestedBean = null;
            if (bean instanceof Map) {
                nestedBean = getPropertyOfMapBean((Map<?, ?>)bean, next);
            } else if (resolver.isMapped(next)) {
                nestedBean = getMappedProperty(bean, next);
            } else if (resolver.isIndexed(next)) {
                nestedBean = getIndexedProperty(bean, next);
            } else {
                nestedBean = getSimpleProperty(bean, next);
            }
            if (nestedBean == null) {
                throw new NestedNullException
                        (""Null property value for '"" + name +
                         ""' on bean class '"" + bean.getClass() + ""'"");
            }
            bean = nestedBean;
            name = resolver.remove(name);
        }

        if (bean instanceof Map) {
            setPropertyOfMapBean(toPropertyMap(bean), name, value);
        } else if (resolver.isMapped(name)) {
            setMappedProperty(bean, name, value);
        } else if (resolver.isIndexed(name)) {
            setIndexedProperty(bean, name, value);
        } else {
            setSimpleProperty(bean, name, value);
        }

    }","  public void test30()  throws Throwable  {
      PropertyUtilsBean propertyUtilsBean0 = PropertyUtilsBean.getInstance();
      FastHashMap fastHashMap0 = new FastHashMap(8);
      propertyUtilsBean0.setNestedProperty(fastHashMap0, "")}>s><M} s;p%a?^M"", fastHashMap0);
}"
856,"    public void setNestedProperty(Object bean,
                                         String name, final Object value)
            throws IllegalAccessException, InvocationTargetException,
            NoSuchMethodException {

        if (bean == null) {
            throw new IllegalArgumentException(""No bean specified"");
        }
        if (name == null) {
            throw new IllegalArgumentException(""No name specified for bean class '"" +
                    bean.getClass() + ""'"");
        }

        // Resolve nested references
        while (resolver.hasNested(name)) {
            final String next = resolver.next(name);
            Object nestedBean = null;
            if (bean instanceof Map) {
                nestedBean = getPropertyOfMapBean((Map<?, ?>)bean, next);
            } else if (resolver.isMapped(next)) {
                nestedBean = getMappedProperty(bean, next);
            } else if (resolver.isIndexed(next)) {
                nestedBean = getIndexedProperty(bean, next);
            } else {
                nestedBean = getSimpleProperty(bean, next);
            }
            if (nestedBean == null) {
                throw new NestedNullException
                        (""Null property value for '"" + name +
                         ""' on bean class '"" + bean.getClass() + ""'"");
            }
            bean = nestedBean;
            name = resolver.remove(name);
        }

        if (bean instanceof Map) {
            setPropertyOfMapBean(toPropertyMap(bean), name, value);
        } else if (resolver.isMapped(name)) {
            setMappedProperty(bean, name, value);
        } else if (resolver.isIndexed(name)) {
            setIndexedProperty(bean, name, value);
        } else {
            setSimpleProperty(bean, name, value);
        }

    }","  public void test31()  throws Throwable  {
      FastHashMap fastHashMap0 = new FastHashMap();
      PropertyUtilsBean propertyUtilsBean0 = PropertyUtilsBean.getInstance();
      // Undeclared exception!
      try { 
        propertyUtilsBean0.setNestedProperty(fastHashMap0, ""+cl."", (Object) null);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Null property value for '+cl.' on bean class 'class org.apache.commons.collections.FastHashMap'
         //
         verifyException(""org.apache.commons.beanutils.PropertyUtilsBean"", e);
      }
  }"
857,"    public void setNestedProperty(Object bean,
                                         String name, final Object value)
            throws IllegalAccessException, InvocationTargetException,
            NoSuchMethodException {

        if (bean == null) {
            throw new IllegalArgumentException(""No bean specified"");
        }
        if (name == null) {
            throw new IllegalArgumentException(""No name specified for bean class '"" +
                    bean.getClass() + ""'"");
        }

        // Resolve nested references
        while (resolver.hasNested(name)) {
            final String next = resolver.next(name);
            Object nestedBean = null;
            if (bean instanceof Map) {
                nestedBean = getPropertyOfMapBean((Map<?, ?>)bean, next);
            } else if (resolver.isMapped(next)) {
                nestedBean = getMappedProperty(bean, next);
            } else if (resolver.isIndexed(next)) {
                nestedBean = getIndexedProperty(bean, next);
            } else {
                nestedBean = getSimpleProperty(bean, next);
            }
            if (nestedBean == null) {
                throw new NestedNullException
                        (""Null property value for '"" + name +
                         ""' on bean class '"" + bean.getClass() + ""'"");
            }
            bean = nestedBean;
            name = resolver.remove(name);
        }

        if (bean instanceof Map) {
            setPropertyOfMapBean(toPropertyMap(bean), name, value);
        } else if (resolver.isMapped(name)) {
            setMappedProperty(bean, name, value);
        } else if (resolver.isIndexed(name)) {
            setIndexedProperty(bean, name, value);
        } else {
            setSimpleProperty(bean, name, value);
        }

    }","  public void test32()  throws Throwable  {
      Class<Object> class0 = Object.class;
      PropertyUtilsBean propertyUtilsBean0 = PropertyUtilsBean.getInstance();
      WrapDynaClass wrapDynaClass0 = WrapDynaClass.createDynaClass(class0, propertyUtilsBean0);
      // Undeclared exception!
      try { 
        propertyUtilsBean0.setNestedProperty(wrapDynaClass0, (String) null, (Object) null);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // No name specified for bean class 'class org.apache.commons.beanutils.WrapDynaClass'
         //
         verifyException(""org.apache.commons.beanutils.PropertyUtilsBean"", e);
      }
  }"
858,"    public void setNestedProperty(Object bean,
                                         String name, final Object value)
            throws IllegalAccessException, InvocationTargetException,
            NoSuchMethodException {

        if (bean == null) {
            throw new IllegalArgumentException(""No bean specified"");
        }
        if (name == null) {
            throw new IllegalArgumentException(""No name specified for bean class '"" +
                    bean.getClass() + ""'"");
        }

        // Resolve nested references
        while (resolver.hasNested(name)) {
            final String next = resolver.next(name);
            Object nestedBean = null;
            if (bean instanceof Map) {
                nestedBean = getPropertyOfMapBean((Map<?, ?>)bean, next);
            } else if (resolver.isMapped(next)) {
                nestedBean = getMappedProperty(bean, next);
            } else if (resolver.isIndexed(next)) {
                nestedBean = getIndexedProperty(bean, next);
            } else {
                nestedBean = getSimpleProperty(bean, next);
            }
            if (nestedBean == null) {
                throw new NestedNullException
                        (""Null property value for '"" + name +
                         ""' on bean class '"" + bean.getClass() + ""'"");
            }
            bean = nestedBean;
            name = resolver.remove(name);
        }

        if (bean instanceof Map) {
            setPropertyOfMapBean(toPropertyMap(bean), name, value);
        } else if (resolver.isMapped(name)) {
            setMappedProperty(bean, name, value);
        } else if (resolver.isIndexed(name)) {
            setIndexedProperty(bean, name, value);
        } else {
            setSimpleProperty(bean, name, value);
        }

    }","  public void test33()  throws Throwable  {
      PropertyUtilsBean propertyUtilsBean0 = new PropertyUtilsBean();
      // Undeclared exception!
      try { 
        propertyUtilsBean0.setNestedProperty((Object) null, ""' has no setter method in class '"", (Object) null);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // No bean specified
         //
         verifyException(""org.apache.commons.beanutils.PropertyUtilsBean"", e);
      }
  }"
859,"    public void setIndexedProperty(final Object bean, String name,
                                          final Object value)
            throws IllegalAccessException, InvocationTargetException,
            NoSuchMethodException {

        if (bean == null) {
            throw new IllegalArgumentException(""No bean specified"");
        }
        if (name == null) {
            throw new IllegalArgumentException(""No name specified for bean class '"" +
                    bean.getClass() + ""'"");
        }

        // Identify the index of the requested individual property
        int index = -1;
        try {
            index = resolver.getIndex(name);
        } catch (final IllegalArgumentException e) {
            throw new IllegalArgumentException(""Invalid indexed property '"" +
                    name + ""' on bean class '"" + bean.getClass() + ""'"");
        }
        if (index < 0) {
            throw new IllegalArgumentException(""Invalid indexed property '"" +
                    name + ""' on bean class '"" + bean.getClass() + ""'"");
        }

        // Isolate the name
        name = resolver.getProperty(name);

        // Set the specified indexed property value
        setIndexedProperty(bean, name, index, value);

    }","  public void test34()  throws Throwable  {
      PropertyUtilsBean propertyUtilsBean0 = new PropertyUtilsBean();
      Class<ResultSetIterator> class0 = ResultSetIterator.class;
      WrapDynaClass wrapDynaClass0 = WrapDynaClass.createDynaClass(class0);
      // Undeclared exception!
      try { 
        propertyUtilsBean0.setIndexedProperty((Object) wrapDynaClass0, (String) null, 592, (Object) null);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // No name specified for bean class 'class org.apache.commons.beanutils.WrapDynaClass'
         //
         verifyException(""org.apache.commons.beanutils.PropertyUtilsBean"", e);
      }
  }"
860,"    public boolean isWriteable(Object bean, String name) {

        // Validate method parameters
        if (bean == null) {
            throw new IllegalArgumentException(""No bean specified"");
        }
        if (name == null) {
            throw new IllegalArgumentException(""No name specified for bean class '"" +
                    bean.getClass() + ""'"");
        }

        // Resolve nested references
        while (resolver.hasNested(name)) {
            final String next = resolver.next(name);
            Object nestedBean = null;
            try {
                nestedBean = getProperty(bean, next);
            } catch (final IllegalAccessException e) {
                return false;
            } catch (final InvocationTargetException e) {
                return false;
            } catch (final NoSuchMethodException e) {
                return false;
            }
            if (nestedBean == null) {
                throw new NestedNullException
                        (""Null property value for '"" + next +
                        ""' on bean class '"" + bean.getClass() + ""'"");
            }
            bean = nestedBean;
            name = resolver.remove(name);
        }

        // Remove any subscript from the final name value
        name = resolver.getProperty(name);

        // Treat WrapDynaBean as special case - may be a read-only property
        // (see Jira issue# BEANUTILS-61)
        if (bean instanceof WrapDynaBean) {
            bean = ((WrapDynaBean)bean).getInstance();
        }

        // Return the requested result
        if (bean instanceof DynaBean) {
            // All DynaBean properties are writeable
            return (((DynaBean) bean).getDynaClass().getDynaProperty(name) != null);
        } else {
            try {
                final PropertyDescriptor desc =
                    getPropertyDescriptor(bean, name);
                if (desc != null) {
                    Method writeMethod = getWriteMethod(bean.getClass(), desc);
                    if (writeMethod == null) {
                        if (desc instanceof IndexedPropertyDescriptor) {
                            writeMethod = ((IndexedPropertyDescriptor) desc).getIndexedWriteMethod();
                        } else if (desc instanceof MappedPropertyDescriptor) {
                            writeMethod = ((MappedPropertyDescriptor) desc).getMappedWriteMethod();
                        }
                        writeMethod = MethodUtils.getAccessibleMethod(bean.getClass(), writeMethod);
                    }
                    return (writeMethod != null);
                } else {
                    return (false);
                }
            } catch (final IllegalAccessException e) {
                return (false);
            } catch (final InvocationTargetException e) {
                return (false);
            } catch (final NoSuchMethodException e) {
                return (false);
            }
        }

    }","  public void test35()  throws Throwable  {
      PropertyUtilsBean propertyUtilsBean0 = PropertyUtilsBean.getInstance();
      ConvertingWrapDynaBean convertingWrapDynaBean0 = new ConvertingWrapDynaBean(propertyUtilsBean0);
      boolean boolean0 = propertyUtilsBean0.isWriteable(convertingWrapDynaBean0, ""<null>"");
}"
861,"    public boolean isWriteable(Object bean, String name) {

        // Validate method parameters
        if (bean == null) {
            throw new IllegalArgumentException(""No bean specified"");
        }
        if (name == null) {
            throw new IllegalArgumentException(""No name specified for bean class '"" +
                    bean.getClass() + ""'"");
        }

        // Resolve nested references
        while (resolver.hasNested(name)) {
            final String next = resolver.next(name);
            Object nestedBean = null;
            try {
                nestedBean = getProperty(bean, next);
            } catch (final IllegalAccessException e) {
                return false;
            } catch (final InvocationTargetException e) {
                return false;
            } catch (final NoSuchMethodException e) {
                return false;
            }
            if (nestedBean == null) {
                throw new NestedNullException
                        (""Null property value for '"" + next +
                        ""' on bean class '"" + bean.getClass() + ""'"");
            }
            bean = nestedBean;
            name = resolver.remove(name);
        }

        // Remove any subscript from the final name value
        name = resolver.getProperty(name);

        // Treat WrapDynaBean as special case - may be a read-only property
        // (see Jira issue# BEANUTILS-61)
        if (bean instanceof WrapDynaBean) {
            bean = ((WrapDynaBean)bean).getInstance();
        }

        // Return the requested result
        if (bean instanceof DynaBean) {
            // All DynaBean properties are writeable
            return (((DynaBean) bean).getDynaClass().getDynaProperty(name) != null);
        } else {
            try {
                final PropertyDescriptor desc =
                    getPropertyDescriptor(bean, name);
                if (desc != null) {
                    Method writeMethod = getWriteMethod(bean.getClass(), desc);
                    if (writeMethod == null) {
                        if (desc instanceof IndexedPropertyDescriptor) {
                            writeMethod = ((IndexedPropertyDescriptor) desc).getIndexedWriteMethod();
                        } else if (desc instanceof MappedPropertyDescriptor) {
                            writeMethod = ((MappedPropertyDescriptor) desc).getMappedWriteMethod();
                        }
                        writeMethod = MethodUtils.getAccessibleMethod(bean.getClass(), writeMethod);
                    }
                    return (writeMethod != null);
                } else {
                    return (false);
                }
            } catch (final IllegalAccessException e) {
                return (false);
            } catch (final InvocationTargetException e) {
                return (false);
            } catch (final NoSuchMethodException e) {
                return (false);
            }
        }

    }","  public void test36()  throws Throwable  {
      Class<Object> class0 = Object.class;
      PropertyUtilsBean propertyUtilsBean0 = new PropertyUtilsBean();
      WrapDynaClass wrapDynaClass0 = WrapDynaClass.createDynaClass(class0, propertyUtilsBean0);
      BasicDynaBean basicDynaBean0 = new BasicDynaBean(wrapDynaClass0);
      boolean boolean0 = propertyUtilsBean0.isWriteable(basicDynaBean0, """");
}"
862,"    public boolean isReadable(Object bean, String name) {

        // Validate method parameters
        if (bean == null) {
            throw new IllegalArgumentException(""No bean specified"");
        }
        if (name == null) {
            throw new IllegalArgumentException(""No name specified for bean class '"" +
                    bean.getClass() + ""'"");
        }

        // Resolve nested references
        while (resolver.hasNested(name)) {
            final String next = resolver.next(name);
            Object nestedBean = null;
            try {
                nestedBean = getProperty(bean, next);
            } catch (final IllegalAccessException e) {
                return false;
            } catch (final InvocationTargetException e) {
                return false;
            } catch (final NoSuchMethodException e) {
                return false;
            }
            if (nestedBean == null) {
                throw new NestedNullException
                        (""Null property value for '"" + next +
                        ""' on bean class '"" + bean.getClass() + ""'"");
            }
            bean = nestedBean;
            name = resolver.remove(name);
        }

        // Remove any subscript from the final name value
        name = resolver.getProperty(name);

        // Treat WrapDynaBean as special case - may be a write-only property
        // (see Jira issue# BEANUTILS-61)
        if (bean instanceof WrapDynaBean) {
            bean = ((WrapDynaBean)bean).getInstance();
        }

        // Return the requested result
        if (bean instanceof DynaBean) {
            // All DynaBean properties are readable
            return (((DynaBean) bean).getDynaClass().getDynaProperty(name) != null);
        } else {
            try {
                final PropertyDescriptor desc =
                    getPropertyDescriptor(bean, name);
                if (desc != null) {
                    Method readMethod = getReadMethod(bean.getClass(), desc);
                    if (readMethod == null) {
                        if (desc instanceof IndexedPropertyDescriptor) {
                            readMethod = ((IndexedPropertyDescriptor) desc).getIndexedReadMethod();
                        } else if (desc instanceof MappedPropertyDescriptor) {
                            readMethod = ((MappedPropertyDescriptor) desc).getMappedReadMethod();
                        }
                        readMethod = MethodUtils.getAccessibleMethod(bean.getClass(), readMethod);
                    }
                    return (readMethod != null);
                } else {
                    return (false);
                }
            } catch (final IllegalAccessException e) {
                return (false);
            } catch (final InvocationTargetException e) {
                return (false);
            } catch (final NoSuchMethodException e) {
                return (false);
            }
        }

    }","  public void test37()  throws Throwable  {
      PropertyUtilsBean propertyUtilsBean0 = new PropertyUtilsBean();
      WrapDynaBean wrapDynaBean0 = new WrapDynaBean(propertyUtilsBean0, (WrapDynaClass) null);
      boolean boolean0 = propertyUtilsBean0.isReadable(wrapDynaBean0, "",9H&@0 p"");
}"
863,"    public boolean isReadable(Object bean, String name) {

        // Validate method parameters
        if (bean == null) {
            throw new IllegalArgumentException(""No bean specified"");
        }
        if (name == null) {
            throw new IllegalArgumentException(""No name specified for bean class '"" +
                    bean.getClass() + ""'"");
        }

        // Resolve nested references
        while (resolver.hasNested(name)) {
            final String next = resolver.next(name);
            Object nestedBean = null;
            try {
                nestedBean = getProperty(bean, next);
            } catch (final IllegalAccessException e) {
                return false;
            } catch (final InvocationTargetException e) {
                return false;
            } catch (final NoSuchMethodException e) {
                return false;
            }
            if (nestedBean == null) {
                throw new NestedNullException
                        (""Null property value for '"" + next +
                        ""' on bean class '"" + bean.getClass() + ""'"");
            }
            bean = nestedBean;
            name = resolver.remove(name);
        }

        // Remove any subscript from the final name value
        name = resolver.getProperty(name);

        // Treat WrapDynaBean as special case - may be a write-only property
        // (see Jira issue# BEANUTILS-61)
        if (bean instanceof WrapDynaBean) {
            bean = ((WrapDynaBean)bean).getInstance();
        }

        // Return the requested result
        if (bean instanceof DynaBean) {
            // All DynaBean properties are readable
            return (((DynaBean) bean).getDynaClass().getDynaProperty(name) != null);
        } else {
            try {
                final PropertyDescriptor desc =
                    getPropertyDescriptor(bean, name);
                if (desc != null) {
                    Method readMethod = getReadMethod(bean.getClass(), desc);
                    if (readMethod == null) {
                        if (desc instanceof IndexedPropertyDescriptor) {
                            readMethod = ((IndexedPropertyDescriptor) desc).getIndexedReadMethod();
                        } else if (desc instanceof MappedPropertyDescriptor) {
                            readMethod = ((MappedPropertyDescriptor) desc).getMappedReadMethod();
                        }
                        readMethod = MethodUtils.getAccessibleMethod(bean.getClass(), readMethod);
                    }
                    return (readMethod != null);
                } else {
                    return (false);
                }
            } catch (final IllegalAccessException e) {
                return (false);
            } catch (final InvocationTargetException e) {
                return (false);
            } catch (final NoSuchMethodException e) {
                return (false);
            }
        }

    }","  public void test38()  throws Throwable  {
      PropertyUtilsBean propertyUtilsBean0 = new PropertyUtilsBean();
      // Undeclared exception!
      try { 
        propertyUtilsBean0.isReadable((Object) null, ""Qrror reading in5exed property '"");
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // No bean specified
         //
         verifyException(""org.apache.commons.beanutils.PropertyUtilsBean"", e);
      }
  }"
864,"    public Object getSimpleProperty(final Object bean, final String name)
            throws IllegalAccessException, InvocationTargetException,
            NoSuchMethodException {

        if (bean == null) {
            throw new IllegalArgumentException(""No bean specified"");
        }
        if (name == null) {
            throw new IllegalArgumentException(""No name specified for bean class '"" +
                    bean.getClass() + ""'"");
        }

        // Validate the syntax of the property name
        if (resolver.hasNested(name)) {
            throw new IllegalArgumentException
                    (""Nested property names are not allowed: Property '"" +
                    name + ""' on bean class '"" + bean.getClass() + ""'"");
        } else if (resolver.isIndexed(name)) {
            throw new IllegalArgumentException
                    (""Indexed property names are not allowed: Property '"" +
                    name + ""' on bean class '"" + bean.getClass() + ""'"");
        } else if (resolver.isMapped(name)) {
            throw new IllegalArgumentException
                    (""Mapped property names are not allowed: Property '"" +
                    name + ""' on bean class '"" + bean.getClass() + ""'"");
        }

        // Handle DynaBean instances specially
        if (bean instanceof DynaBean) {
            final DynaProperty descriptor =
                    ((DynaBean) bean).getDynaClass().getDynaProperty(name);
            if (descriptor == null) {
                throw new NoSuchMethodException(""Unknown property '"" +
                        name + ""' on dynaclass '"" +
                        ((DynaBean) bean).getDynaClass() + ""'"" );
            }
            return (((DynaBean) bean).get(name));
        }

        // Retrieve the property getter method for the specified property
        final PropertyDescriptor descriptor =
                getPropertyDescriptor(bean, name);
        if (descriptor == null) {
            throw new NoSuchMethodException(""Unknown property '"" +
                    name + ""' on class '"" + bean.getClass() + ""'"" );
        }
        final Method readMethod = getReadMethod(bean.getClass(), descriptor);
        if (readMethod == null) {
            throw new NoSuchMethodException(""Property '"" + name +
                    ""' has no getter method in class '"" + bean.getClass() + ""'"");
        }

        // Call the property getter and return the value
        final Object value = invokeMethod(readMethod, bean, EMPTY_OBJECT_ARRAY);
        return (value);

    }","  public void test39()  throws Throwable  {
      PropertyUtilsBean propertyUtilsBean0 = PropertyUtilsBean.getInstance();
      PropertyDescriptor[] propertyDescriptorArray0 = new PropertyDescriptor[0];
      FastHashMap fastHashMap0 = new FastHashMap(551);
      BeanIntrospectionData beanIntrospectionData0 = new BeanIntrospectionData(propertyDescriptorArray0, fastHashMap0);
      try { 
        propertyUtilsBean0.getSimpleProperty(beanIntrospectionData0, """");
        fail(""Expecting exception: NoSuchMethodException"");
      } catch(NoSuchMethodException e) {
         //
         // Unknown property '' on class 'class org.apache.commons.beanutils.BeanIntrospectionData'
         //
         verifyException(""org.apache.commons.beanutils.PropertyUtilsBean"", e);
      }
  }"
865,"    public Class<?> getPropertyEditorClass(final Object bean, final String name)
            throws IllegalAccessException, InvocationTargetException,
            NoSuchMethodException {

        if (bean == null) {
            throw new IllegalArgumentException(""No bean specified"");
        }
        if (name == null) {
            throw new IllegalArgumentException(""No name specified for bean class '"" +
                    bean.getClass() + ""'"");
        }

        final PropertyDescriptor descriptor =
                getPropertyDescriptor(bean, name);
        if (descriptor != null) {
            return (descriptor.getPropertyEditorClass());
        } else {
            return (null);
        }

    }","  public void test40()  throws Throwable  {
      Class<BeanIntrospectionData> class0 = BeanIntrospectionData.class;
      WrapDynaClass wrapDynaClass0 = WrapDynaClass.createDynaClass(class0);
      PropertyUtilsBean propertyUtilsBean0 = wrapDynaClass0.getPropertyUtilsBean();
      try { 
        propertyUtilsBean0.getPropertyEditorClass(""bXy14qTM`_"", ""e3Ic x]4T."");
        fail(""Expecting exception: NoSuchMethodException"");
      } catch(NoSuchMethodException e) {
         //
         // Unknown property 'e3Ic x]4T' on class 'class java.lang.String'
         //
         verifyException(""org.apache.commons.beanutils.PropertyUtilsBean"", e);
      }
  }"
866,"    public PropertyDescriptor[]
            getPropertyDescriptors(final Class<?> beanClass) {

        return getIntrospectionData(beanClass).getDescriptors();

    }","  public void test41()  throws Throwable  {
      Class<ConvertingWrapDynaBean> class0 = ConvertingWrapDynaBean.class;
      PropertyUtilsBean propertyUtilsBean0 = PropertyUtilsBean.getInstance();
      WrapDynaClass wrapDynaClass0 = WrapDynaClass.createDynaClass(class0, propertyUtilsBean0);
      PropertyDescriptor[] propertyDescriptorArray0 = propertyUtilsBean0.getPropertyDescriptors((Object) wrapDynaClass0);
}"
867,"    public PropertyDescriptor getPropertyDescriptor(Object bean,
                                                           String name)
            throws IllegalAccessException, InvocationTargetException,
            NoSuchMethodException {

        if (bean == null) {
            throw new IllegalArgumentException(""No bean specified"");
        }
        if (name == null) {
            throw new IllegalArgumentException(""No name specified for bean class '"" +
                    bean.getClass() + ""'"");
        }

        // Resolve nested references
        while (resolver.hasNested(name)) {
            final String next = resolver.next(name);
            final Object nestedBean = getProperty(bean, next);
            if (nestedBean == null) {
                throw new NestedNullException
                        (""Null property value for '"" + next +
                        ""' on bean class '"" + bean.getClass() + ""'"");
            }
            bean = nestedBean;
            name = resolver.remove(name);
        }

        // Remove any subscript from the final name value
        name = resolver.getProperty(name);

        // Look up and return this property from our cache
        // creating and adding it to the cache if not found.
        if (name == null) {
            return (null);
        }

        final BeanIntrospectionData data = getIntrospectionData(bean.getClass());
        PropertyDescriptor result = data.getDescriptor(name);
        if (result != null) {
            return result;
        }

        FastHashMap mappedDescriptors =
                getMappedPropertyDescriptors(bean);
        if (mappedDescriptors == null) {
            mappedDescriptors = new FastHashMap();
            mappedDescriptors.setFast(true);
            mappedDescriptorsCache.put(bean.getClass(), mappedDescriptors);
        }
        result = (PropertyDescriptor) mappedDescriptors.get(name);
        if (result == null) {
            // not found, try to create it
            try {
                result = new MappedPropertyDescriptor(name, bean.getClass());
            } catch (final IntrospectionException ie) {
                /* Swallow IntrospectionException
                 * TODO: Why?
                 */
            }
            if (result != null) {
                mappedDescriptors.put(name, result);
            }
        }

        return result;

    }","  public void test42()  throws Throwable  {
      Class<WrapDynaBean> class0 = WrapDynaBean.class;
      WrapDynaClass wrapDynaClass0 = WrapDynaClass.createDynaClass(class0);
      PropertyUtilsBean propertyUtilsBean0 = wrapDynaClass0.getPropertyUtilsBean();
      try { 
        propertyUtilsBean0.getPropertyDescriptor(wrapDynaClass0, "".t%Br1n2}b!"");
        fail(""Expecting exception: NoSuchMethodException"");
      } catch(NoSuchMethodException e) {
         //
         // Unknown property '' on class 'class org.apache.commons.beanutils.WrapDynaClass'
         //
         verifyException(""org.apache.commons.beanutils.PropertyUtilsBean"", e);
      }
  }"
868,"    public PropertyDescriptor getPropertyDescriptor(Object bean,
                                                           String name)
            throws IllegalAccessException, InvocationTargetException,
            NoSuchMethodException {

        if (bean == null) {
            throw new IllegalArgumentException(""No bean specified"");
        }
        if (name == null) {
            throw new IllegalArgumentException(""No name specified for bean class '"" +
                    bean.getClass() + ""'"");
        }

        // Resolve nested references
        while (resolver.hasNested(name)) {
            final String next = resolver.next(name);
            final Object nestedBean = getProperty(bean, next);
            if (nestedBean == null) {
                throw new NestedNullException
                        (""Null property value for '"" + next +
                        ""' on bean class '"" + bean.getClass() + ""'"");
            }
            bean = nestedBean;
            name = resolver.remove(name);
        }

        // Remove any subscript from the final name value
        name = resolver.getProperty(name);

        // Look up and return this property from our cache
        // creating and adding it to the cache if not found.
        if (name == null) {
            return (null);
        }

        final BeanIntrospectionData data = getIntrospectionData(bean.getClass());
        PropertyDescriptor result = data.getDescriptor(name);
        if (result != null) {
            return result;
        }

        FastHashMap mappedDescriptors =
                getMappedPropertyDescriptors(bean);
        if (mappedDescriptors == null) {
            mappedDescriptors = new FastHashMap();
            mappedDescriptors.setFast(true);
            mappedDescriptorsCache.put(bean.getClass(), mappedDescriptors);
        }
        result = (PropertyDescriptor) mappedDescriptors.get(name);
        if (result == null) {
            // not found, try to create it
            try {
                result = new MappedPropertyDescriptor(name, bean.getClass());
            } catch (final IntrospectionException ie) {
                /* Swallow IntrospectionException
                 * TODO: Why?
                 */
            }
            if (result != null) {
                mappedDescriptors.put(name, result);
            }
        }

        return result;

    }","  public void test43()  throws Throwable  {
      PropertyUtilsBean propertyUtilsBean0 = PropertyUtilsBean.getInstance();
      // Undeclared exception!
      try { 
        propertyUtilsBean0.getPropertyDescriptor((Object) null, ""0;}tych"");
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // No bean specified
         //
         verifyException(""org.apache.commons.beanutils.PropertyUtilsBean"", e);
      }
  }"
869,"    protected Object getPropertyOfMapBean(final Map<?, ?> bean, String propertyName)
        throws IllegalArgumentException, IllegalAccessException,
        InvocationTargetException, NoSuchMethodException {

        if (resolver.isMapped(propertyName)) {
            final String name = resolver.getProperty(propertyName);
            if (name == null || name.length() == 0) {
                propertyName = resolver.getKey(propertyName);
            }
        }

        if (resolver.isIndexed(propertyName) ||
            resolver.isMapped(propertyName)) {
            throw new IllegalArgumentException(
                    ""Indexed or mapped properties are not supported on""
                    + "" objects of type Map: "" + propertyName);
        }

        return bean.get(propertyName);
    }","  public void test44()  throws Throwable  {
      Class<PropertyDescriptor> class0 = PropertyDescriptor.class;
      WrapDynaClass wrapDynaClass0 = WrapDynaClass.createDynaClass(class0);
      PropertyUtilsBean propertyUtilsBean0 = wrapDynaClass0.getPropertyUtilsBean();
      FastHashMap fastHashMap0 = new FastHashMap();
      try { 
        propertyUtilsBean0.getPropertyOfMapBean(fastHashMap0, ""(:v.'RtaU6Mp"");
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Missing End Delimiter
         //
         verifyException(""org.apache.commons.beanutils.expression.DefaultResolver"", e);
      }
  }"
870,"    public Object getNestedProperty(Object bean, String name)
            throws IllegalAccessException, InvocationTargetException,
            NoSuchMethodException {

        if (bean == null) {
            throw new IllegalArgumentException(""No bean specified"");
        }
        if (name == null) {
            throw new IllegalArgumentException(""No name specified for bean class '"" +
                    bean.getClass() + ""'"");
        }

        // Resolve nested references
        while (resolver.hasNested(name)) {
            final String next = resolver.next(name);
            Object nestedBean = null;
            if (bean instanceof Map) {
                nestedBean = getPropertyOfMapBean((Map<?, ?>) bean, next);
            } else if (resolver.isMapped(next)) {
                nestedBean = getMappedProperty(bean, next);
            } else if (resolver.isIndexed(next)) {
                nestedBean = getIndexedProperty(bean, next);
            } else {
                nestedBean = getSimpleProperty(bean, next);
            }
            if (nestedBean == null) {
                throw new NestedNullException
                        (""Null property value for '"" + name +
                        ""' on bean class '"" + bean.getClass() + ""'"");
            }
            bean = nestedBean;
            name = resolver.remove(name);
        }

        if (bean instanceof Map) {
            bean = getPropertyOfMapBean((Map<?, ?>) bean, name);
        } else if (resolver.isMapped(name)) {
            bean = getMappedProperty(bean, name);
        } else if (resolver.isIndexed(name)) {
            bean = getIndexedProperty(bean, name);
        } else {
            bean = getSimpleProperty(bean, name);
        }
        return bean;

    }","  public void test45()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      PropertyUtilsBean propertyUtilsBean0 = PropertyUtilsBean.getInstance();
      // Undeclared exception!
      propertyUtilsBean0.getNestedProperty(resultSet0, ""shutdown"");
  }"
871,"    public Object getNestedProperty(Object bean, String name)
            throws IllegalAccessException, InvocationTargetException,
            NoSuchMethodException {

        if (bean == null) {
            throw new IllegalArgumentException(""No bean specified"");
        }
        if (name == null) {
            throw new IllegalArgumentException(""No name specified for bean class '"" +
                    bean.getClass() + ""'"");
        }

        // Resolve nested references
        while (resolver.hasNested(name)) {
            final String next = resolver.next(name);
            Object nestedBean = null;
            if (bean instanceof Map) {
                nestedBean = getPropertyOfMapBean((Map<?, ?>) bean, next);
            } else if (resolver.isMapped(next)) {
                nestedBean = getMappedProperty(bean, next);
            } else if (resolver.isIndexed(next)) {
                nestedBean = getIndexedProperty(bean, next);
            } else {
                nestedBean = getSimpleProperty(bean, next);
            }
            if (nestedBean == null) {
                throw new NestedNullException
                        (""Null property value for '"" + name +
                        ""' on bean class '"" + bean.getClass() + ""'"");
            }
            bean = nestedBean;
            name = resolver.remove(name);
        }

        if (bean instanceof Map) {
            bean = getPropertyOfMapBean((Map<?, ?>) bean, name);
        } else if (resolver.isMapped(name)) {
            bean = getMappedProperty(bean, name);
        } else if (resolver.isIndexed(name)) {
            bean = getIndexedProperty(bean, name);
        } else {
            bean = getSimpleProperty(bean, name);
        }
        return bean;

    }","  public void test46()  throws Throwable  {
      Class<FastHashMap> class0 = FastHashMap.class;
      PropertyUtilsBean propertyUtilsBean0 = new PropertyUtilsBean();
      // Undeclared exception!
      try { 
        propertyUtilsBean0.getNestedProperty(class0, ""mu0;(6"");
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Invalid mapped property 'mu0;(6' on bean class 'class java.lang.Class' Missing End Delimiter
         //
         verifyException(""org.apache.commons.beanutils.PropertyUtilsBean"", e);
      }
  }"
872,"    public Object getNestedProperty(Object bean, String name)
            throws IllegalAccessException, InvocationTargetException,
            NoSuchMethodException {

        if (bean == null) {
            throw new IllegalArgumentException(""No bean specified"");
        }
        if (name == null) {
            throw new IllegalArgumentException(""No name specified for bean class '"" +
                    bean.getClass() + ""'"");
        }

        // Resolve nested references
        while (resolver.hasNested(name)) {
            final String next = resolver.next(name);
            Object nestedBean = null;
            if (bean instanceof Map) {
                nestedBean = getPropertyOfMapBean((Map<?, ?>) bean, next);
            } else if (resolver.isMapped(next)) {
                nestedBean = getMappedProperty(bean, next);
            } else if (resolver.isIndexed(next)) {
                nestedBean = getIndexedProperty(bean, next);
            } else {
                nestedBean = getSimpleProperty(bean, next);
            }
            if (nestedBean == null) {
                throw new NestedNullException
                        (""Null property value for '"" + name +
                        ""' on bean class '"" + bean.getClass() + ""'"");
            }
            bean = nestedBean;
            name = resolver.remove(name);
        }

        if (bean instanceof Map) {
            bean = getPropertyOfMapBean((Map<?, ?>) bean, name);
        } else if (resolver.isMapped(name)) {
            bean = getMappedProperty(bean, name);
        } else if (resolver.isIndexed(name)) {
            bean = getIndexedProperty(bean, name);
        } else {
            bean = getSimpleProperty(bean, name);
        }
        return bean;

    }","  public void test47()  throws Throwable  {
      PropertyUtilsBean propertyUtilsBean0 = PropertyUtilsBean.getInstance();
      Integer integer0 = LazyDynaBean.Integer_ZERO;
      Map<String, Object> map0 = propertyUtilsBean0.describe(integer0);
      Object object0 = propertyUtilsBean0.getNestedProperty(map0, ""0;}tych"");
}"
873,"    public Object getNestedProperty(Object bean, String name)
            throws IllegalAccessException, InvocationTargetException,
            NoSuchMethodException {

        if (bean == null) {
            throw new IllegalArgumentException(""No bean specified"");
        }
        if (name == null) {
            throw new IllegalArgumentException(""No name specified for bean class '"" +
                    bean.getClass() + ""'"");
        }

        // Resolve nested references
        while (resolver.hasNested(name)) {
            final String next = resolver.next(name);
            Object nestedBean = null;
            if (bean instanceof Map) {
                nestedBean = getPropertyOfMapBean((Map<?, ?>) bean, next);
            } else if (resolver.isMapped(next)) {
                nestedBean = getMappedProperty(bean, next);
            } else if (resolver.isIndexed(next)) {
                nestedBean = getIndexedProperty(bean, next);
            } else {
                nestedBean = getSimpleProperty(bean, next);
            }
            if (nestedBean == null) {
                throw new NestedNullException
                        (""Null property value for '"" + name +
                        ""' on bean class '"" + bean.getClass() + ""'"");
            }
            bean = nestedBean;
            name = resolver.remove(name);
        }

        if (bean instanceof Map) {
            bean = getPropertyOfMapBean((Map<?, ?>) bean, name);
        } else if (resolver.isMapped(name)) {
            bean = getMappedProperty(bean, name);
        } else if (resolver.isIndexed(name)) {
            bean = getIndexedProperty(bean, name);
        } else {
            bean = getSimpleProperty(bean, name);
        }
        return bean;

    }","  public void test48()  throws Throwable  {
      PropertyUtilsBean propertyUtilsBean0 = PropertyUtilsBean.getInstance();
      // Undeclared exception!
      try { 
        propertyUtilsBean0.getNestedProperty((Object) null, ""org.apache.commons.beanutils.ConvertingWrapDynaBean"");
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // No bean specified
         //
         verifyException(""org.apache.commons.beanutils.PropertyUtilsBean"", e);
      }
  }"
874,"    public Object getMappedProperty(final Object bean, String name)
            throws IllegalAccessException, InvocationTargetException,
            NoSuchMethodException {

        if (bean == null) {
            throw new IllegalArgumentException(""No bean specified"");
        }
        if (name == null) {
            throw new IllegalArgumentException(""No name specified for bean class '"" +
                    bean.getClass() + ""'"");
        }

        // Identify the key of the requested individual property
        String key  = null;
        try {
            key = resolver.getKey(name);
        } catch (final IllegalArgumentException e) {
            throw new IllegalArgumentException
                    (""Invalid mapped property '"" + name +
                    ""' on bean class '"" + bean.getClass() + ""' "" + e.getMessage());
        }
        if (key == null) {
            throw new IllegalArgumentException(""Invalid mapped property '"" +
                    name + ""' on bean class '"" + bean.getClass() + ""'"");
        }

        // Isolate the name
        name = resolver.getProperty(name);

        // Request the specified indexed property value
        return (getMappedProperty(bean, name, key));

    }","  public void test49()  throws Throwable  {
      PropertyUtilsBean propertyUtilsBean0 = new PropertyUtilsBean();
      Class<BeanIntrospectionData> class0 = BeanIntrospectionData.class;
      try { 
        propertyUtilsBean0.getMappedProperty((Object) class0, """", """");
        fail(""Expecting exception: NoSuchMethodException"");
      } catch(NoSuchMethodException e) {
         //
         // Unknown property ''+ on bean class 'class java.lang.Class'
         //
         verifyException(""org.apache.commons.beanutils.PropertyUtilsBean"", e);
      }
  }"
875,"    public Object getMappedProperty(final Object bean, String name)
            throws IllegalAccessException, InvocationTargetException,
            NoSuchMethodException {

        if (bean == null) {
            throw new IllegalArgumentException(""No bean specified"");
        }
        if (name == null) {
            throw new IllegalArgumentException(""No name specified for bean class '"" +
                    bean.getClass() + ""'"");
        }

        // Identify the key of the requested individual property
        String key  = null;
        try {
            key = resolver.getKey(name);
        } catch (final IllegalArgumentException e) {
            throw new IllegalArgumentException
                    (""Invalid mapped property '"" + name +
                    ""' on bean class '"" + bean.getClass() + ""' "" + e.getMessage());
        }
        if (key == null) {
            throw new IllegalArgumentException(""Invalid mapped property '"" +
                    name + ""' on bean class '"" + bean.getClass() + ""'"");
        }

        // Isolate the name
        name = resolver.getProperty(name);

        // Request the specified indexed property value
        return (getMappedProperty(bean, name, key));

    }","  public void test50()  throws Throwable  {
      Class<Object> class0 = Object.class;
      WrapDynaClass wrapDynaClass0 = WrapDynaClass.createDynaClass(class0);
      PropertyUtilsBean propertyUtilsBean0 = wrapDynaClass0.getPropertyUtilsBean();
      // Undeclared exception!
      try { 
        propertyUtilsBean0.getMappedProperty((Object) class0, (String) null, ""org.apache.commons.beanutils.expression.DefaultResolver"");
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // No name specified for bean class 'class java.lang.Class'
         //
         verifyException(""org.apache.commons.beanutils.PropertyUtilsBean"", e);
      }
  }"
876,"    public Map<String, Object> describe(final Object bean)
            throws IllegalAccessException, InvocationTargetException,
            NoSuchMethodException {

        if (bean == null) {
            throw new IllegalArgumentException(""No bean specified"");
        }
        final Map<String, Object> description = new HashMap<String, Object>();
        if (bean instanceof DynaBean) {
            final DynaProperty[] descriptors =
                ((DynaBean) bean).getDynaClass().getDynaProperties();
            for (DynaProperty descriptor : descriptors) {
                final String name = descriptor.getName();
                description.put(name, getProperty(bean, name));
            }
        } else {
            final PropertyDescriptor[] descriptors =
                getPropertyDescriptors(bean);
            for (PropertyDescriptor descriptor : descriptors) {
                final String name = descriptor.getName();
                if (descriptor.getReadMethod() != null) {
                    description.put(name, getProperty(bean, name));
                }
            }
        }
        return (description);

    }","  public void test51()  throws Throwable  {
      PropertyUtilsBean propertyUtilsBean0 = PropertyUtilsBean.getInstance();
      PropertyUtils propertyUtils0 = new PropertyUtils();
      Map<String, Object> map0 = propertyUtilsBean0.describe(propertyUtils0);
}"
877,"    public void copyProperties(final Object dest, final Object orig)
            throws IllegalAccessException, InvocationTargetException,
            NoSuchMethodException {

        if (dest == null) {
            throw new IllegalArgumentException
                    (""No destination bean specified"");
        }
        if (orig == null) {
            throw new IllegalArgumentException(""No origin bean specified"");
        }

        if (orig instanceof DynaBean) {
            final DynaProperty[] origDescriptors =
                ((DynaBean) orig).getDynaClass().getDynaProperties();
            for (DynaProperty origDescriptor : origDescriptors) {
                final String name = origDescriptor.getName();
                if (isReadable(orig, name) && isWriteable(dest, name)) {
                    try {
                        final Object value = ((DynaBean) orig).get(name);
                        if (dest instanceof DynaBean) {
                            ((DynaBean) dest).set(name, value);
                        } else {
                                setSimpleProperty(dest, name, value);
                        }
                    } catch (final NoSuchMethodException e) {
                        if (log.isDebugEnabled()) {
                            log.debug(""Error writing to '"" + name + ""' on class '"" + dest.getClass() + ""'"", e);
                        }
                    }
                }
            }
        } else if (orig instanceof Map) {
            final Iterator<?> entries = ((Map<?, ?>) orig).entrySet().iterator();
            while (entries.hasNext()) {
                final Map.Entry<?, ?> entry = (Entry<?, ?>) entries.next();
                final String name = (String)entry.getKey();
                if (isWriteable(dest, name)) {
                    try {
                        if (dest instanceof DynaBean) {
                            ((DynaBean) dest).set(name, entry.getValue());
                        } else {
                            setSimpleProperty(dest, name, entry.getValue());
                        }
                    } catch (final NoSuchMethodException e) {
                        if (log.isDebugEnabled()) {
                            log.debug(""Error writing to '"" + name + ""' on class '"" + dest.getClass() + ""'"", e);
                        }
                    }
                }
            }
        } else /* if (orig is a standard JavaBean) */ {
            final PropertyDescriptor[] origDescriptors =
                getPropertyDescriptors(orig);
            for (PropertyDescriptor origDescriptor : origDescriptors) {
                final String name = origDescriptor.getName();
                if (isReadable(orig, name) && isWriteable(dest, name)) {
                    try {
                        final Object value = getSimpleProperty(orig, name);
                        if (dest instanceof DynaBean) {
                            ((DynaBean) dest).set(name, value);
                        } else {
                                setSimpleProperty(dest, name, value);
                        }
                    } catch (final NoSuchMethodException e) {
                        if (log.isDebugEnabled()) {
                            log.debug(""Error writing to '"" + name + ""' on class '"" + dest.getClass() + ""'"", e);
                        }
                    }
                }
            }
        }

    }","  public void test52()  throws Throwable  {
      PropertyUtilsBean propertyUtilsBean0 = new PropertyUtilsBean();
      IndexOutOfBoundsException indexOutOfBoundsException0 = new IndexOutOfBoundsException();
      propertyUtilsBean0.copyProperties(indexOutOfBoundsException0, indexOutOfBoundsException0);
}"
878,"    public void setResolver(final Resolver resolver) {
        if (resolver == null) {
            this.resolver = new DefaultResolver();
        } else {
            this.resolver = resolver;
        }
    }","  public void test53()  throws Throwable  {
      Class<BasicDynaBean> class0 = BasicDynaBean.class;
      WrapDynaClass wrapDynaClass0 = WrapDynaClass.createDynaClass(class0);
      PropertyUtilsBean propertyUtilsBean0 = wrapDynaClass0.getPropertyUtilsBean();
      Resolver resolver0 = propertyUtilsBean0.getResolver();
      propertyUtilsBean0.setResolver(resolver0);
  }"
879,"    public Method getReadMethod(final PropertyDescriptor descriptor) {

        return (MethodUtils.getAccessibleMethod(descriptor.getReadMethod()));

    }","  public void test54()  throws Throwable  {
      Class<Object> class0 = Object.class;
      WrapDynaClass wrapDynaClass0 = WrapDynaClass.createDynaClass(class0);
      PropertyUtilsBean propertyUtilsBean0 = wrapDynaClass0.getPropertyUtilsBean();
      // Undeclared exception!
      try { 
        propertyUtilsBean0.getReadMethod(class0, (PropertyDescriptor) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.beanutils.PropertyUtilsBean"", e);
      }
  }"
880,"    public Method getWriteMethod(final PropertyDescriptor descriptor) {

        return (MethodUtils.getAccessibleMethod(descriptor.getWriteMethod()));

    }","  public void test55()  throws Throwable  {
      PropertyUtilsBean propertyUtilsBean0 = PropertyUtilsBean.getInstance();
      PropertyDescriptor propertyDescriptor0 = new PropertyDescriptor(""\"")If"", (Method) null, (Method) null);
      Class<LazyDynaBean> class0 = LazyDynaBean.class;
      Method method0 = propertyUtilsBean0.getWriteMethod(class0, propertyDescriptor0);
}"
881,"    public PropertyDescriptor[]
            getPropertyDescriptors(final Class<?> beanClass) {

        return getIntrospectionData(beanClass).getDescriptors();

    }","  public void test56()  throws Throwable  {
      PropertyUtilsBean propertyUtilsBean0 = PropertyUtilsBean.getInstance();
      // Undeclared exception!
      try { 
        propertyUtilsBean0.getPropertyDescriptors((Class<?>) null);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // No bean class specified
         //
         verifyException(""org.apache.commons.beanutils.PropertyUtilsBean"", e);
      }
  }"
882,"    public void setNestedProperty(Object bean,
                                         String name, final Object value)
            throws IllegalAccessException, InvocationTargetException,
            NoSuchMethodException {

        if (bean == null) {
            throw new IllegalArgumentException(""No bean specified"");
        }
        if (name == null) {
            throw new IllegalArgumentException(""No name specified for bean class '"" +
                    bean.getClass() + ""'"");
        }

        // Resolve nested references
        while (resolver.hasNested(name)) {
            final String next = resolver.next(name);
            Object nestedBean = null;
            if (bean instanceof Map) {
                nestedBean = getPropertyOfMapBean((Map<?, ?>)bean, next);
            } else if (resolver.isMapped(next)) {
                nestedBean = getMappedProperty(bean, next);
            } else if (resolver.isIndexed(next)) {
                nestedBean = getIndexedProperty(bean, next);
            } else {
                nestedBean = getSimpleProperty(bean, next);
            }
            if (nestedBean == null) {
                throw new NestedNullException
                        (""Null property value for '"" + name +
                         ""' on bean class '"" + bean.getClass() + ""'"");
            }
            bean = nestedBean;
            name = resolver.remove(name);
        }

        if (bean instanceof Map) {
            setPropertyOfMapBean(toPropertyMap(bean), name, value);
        } else if (resolver.isMapped(name)) {
            setMappedProperty(bean, name, value);
        } else if (resolver.isIndexed(name)) {
            setIndexedProperty(bean, name, value);
        } else {
            setSimpleProperty(bean, name, value);
        }

    }","  public void test57()  throws Throwable  {
      PropertyUtilsBean propertyUtilsBean0 = PropertyUtilsBean.getInstance();
      ConvertingWrapDynaBean convertingWrapDynaBean0 = new ConvertingWrapDynaBean(propertyUtilsBean0);
      try { 
        propertyUtilsBean0.setNestedProperty(convertingWrapDynaBean0, """", convertingWrapDynaBean0);
        fail(""Expecting exception: NoSuchMethodException"");
      } catch(NoSuchMethodException e) {
         //
         // Unknown property '' on dynaclass 'org.apache.commons.beanutils.WrapDynaClass@a'
         //
         verifyException(""org.apache.commons.beanutils.PropertyUtilsBean"", e);
      }
  }"
883,"    public void setSimpleProperty(final Object bean,
                                         final String name, final Object value)
            throws IllegalAccessException, InvocationTargetException,
            NoSuchMethodException {

        if (bean == null) {
            throw new IllegalArgumentException(""No bean specified"");
        }
        if (name == null) {
            throw new IllegalArgumentException(""No name specified for bean class '"" +
                    bean.getClass() + ""'"");
        }

        // Validate the syntax of the property name
        if (resolver.hasNested(name)) {
            throw new IllegalArgumentException
                    (""Nested property names are not allowed: Property '"" +
                    name + ""' on bean class '"" + bean.getClass() + ""'"");
        } else if (resolver.isIndexed(name)) {
            throw new IllegalArgumentException
                    (""Indexed property names are not allowed: Property '"" +
                    name + ""' on bean class '"" + bean.getClass() + ""'"");
        } else if (resolver.isMapped(name)) {
            throw new IllegalArgumentException
                    (""Mapped property names are not allowed: Property '"" +
                    name + ""' on bean class '"" + bean.getClass() + ""'"");
        }

        // Handle DynaBean instances specially
        if (bean instanceof DynaBean) {
            final DynaProperty descriptor =
                    ((DynaBean) bean).getDynaClass().getDynaProperty(name);
            if (descriptor == null) {
                throw new NoSuchMethodException(""Unknown property '"" +
                        name + ""' on dynaclass '"" +
                        ((DynaBean) bean).getDynaClass() + ""'"" );
            }
            ((DynaBean) bean).set(name, value);
            return;
        }

        // Retrieve the property setter method for the specified property
        final PropertyDescriptor descriptor =
                getPropertyDescriptor(bean, name);
        if (descriptor == null) {
            throw new NoSuchMethodException(""Unknown property '"" +
                    name + ""' on class '"" + bean.getClass() + ""'"" );
        }
        final Method writeMethod = getWriteMethod(bean.getClass(), descriptor);
        if (writeMethod == null) {
            throw new NoSuchMethodException(""Property '"" + name +
                    ""' has no setter method in class '"" + bean.getClass() + ""'"");
        }

        // Call the property setter method
        final Object[] values = new Object[1];
        values[0] = value;
        if (log.isTraceEnabled()) {
            final String valueClassName =
                value == null ? ""<null>"" : value.getClass().getName();
            log.trace(""setSimpleProperty: Invoking method "" + writeMethod
                      + "" with value "" + value + "" (class "" + valueClassName + "")"");
        }
        invokeMethod(writeMethod, bean, values);

    }","  public void test58()  throws Throwable  {
      PropertyUtilsBean propertyUtilsBean0 = PropertyUtilsBean.getInstance();
      // Undeclared exception!
      try { 
        propertyUtilsBean0.setSimpleProperty(propertyUtilsBean0, "")(\""ux-/<-iqb+9H}[:<"", propertyUtilsBean0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Mapped property names are not allowed: Property ')(\""ux-/<-iqb+9H}[:<' on bean class 'class org.apache.commons.beanutils.PropertyUtilsBean'
         //
         verifyException(""org.apache.commons.beanutils.PropertyUtilsBean"", e);
      }
  }"
884,"    public void setSimpleProperty(final Object bean,
                                         final String name, final Object value)
            throws IllegalAccessException, InvocationTargetException,
            NoSuchMethodException {

        if (bean == null) {
            throw new IllegalArgumentException(""No bean specified"");
        }
        if (name == null) {
            throw new IllegalArgumentException(""No name specified for bean class '"" +
                    bean.getClass() + ""'"");
        }

        // Validate the syntax of the property name
        if (resolver.hasNested(name)) {
            throw new IllegalArgumentException
                    (""Nested property names are not allowed: Property '"" +
                    name + ""' on bean class '"" + bean.getClass() + ""'"");
        } else if (resolver.isIndexed(name)) {
            throw new IllegalArgumentException
                    (""Indexed property names are not allowed: Property '"" +
                    name + ""' on bean class '"" + bean.getClass() + ""'"");
        } else if (resolver.isMapped(name)) {
            throw new IllegalArgumentException
                    (""Mapped property names are not allowed: Property '"" +
                    name + ""' on bean class '"" + bean.getClass() + ""'"");
        }

        // Handle DynaBean instances specially
        if (bean instanceof DynaBean) {
            final DynaProperty descriptor =
                    ((DynaBean) bean).getDynaClass().getDynaProperty(name);
            if (descriptor == null) {
                throw new NoSuchMethodException(""Unknown property '"" +
                        name + ""' on dynaclass '"" +
                        ((DynaBean) bean).getDynaClass() + ""'"" );
            }
            ((DynaBean) bean).set(name, value);
            return;
        }

        // Retrieve the property setter method for the specified property
        final PropertyDescriptor descriptor =
                getPropertyDescriptor(bean, name);
        if (descriptor == null) {
            throw new NoSuchMethodException(""Unknown property '"" +
                    name + ""' on class '"" + bean.getClass() + ""'"" );
        }
        final Method writeMethod = getWriteMethod(bean.getClass(), descriptor);
        if (writeMethod == null) {
            throw new NoSuchMethodException(""Property '"" + name +
                    ""' has no setter method in class '"" + bean.getClass() + ""'"");
        }

        // Call the property setter method
        final Object[] values = new Object[1];
        values[0] = value;
        if (log.isTraceEnabled()) {
            final String valueClassName =
                value == null ? ""<null>"" : value.getClass().getName();
            log.trace(""setSimpleProperty: Invoking method "" + writeMethod
                      + "" with value "" + value + "" (class "" + valueClassName + "")"");
        }
        invokeMethod(writeMethod, bean, values);

    }","  public void test59()  throws Throwable  {
      PropertyUtilsBean propertyUtilsBean0 = new PropertyUtilsBean();
      FastHashMap fastHashMap0 = new FastHashMap();
      // Undeclared exception!
      try { 
        propertyUtilsBean0.setSimpleProperty(""xrg.apache.commons.collectio-s.Fast ash~ap"", ""xrg.apache.commons.collectio-s.Fast ash~ap"", fastHashMap0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Nested property names are not allowed: Property 'xrg.apache.commons.collectio-s.Fast ash~ap' on bean class 'class java.lang.String'
         //
         verifyException(""org.apache.commons.beanutils.PropertyUtilsBean"", e);
      }
  }"
885,"    public void setSimpleProperty(final Object bean,
                                         final String name, final Object value)
            throws IllegalAccessException, InvocationTargetException,
            NoSuchMethodException {

        if (bean == null) {
            throw new IllegalArgumentException(""No bean specified"");
        }
        if (name == null) {
            throw new IllegalArgumentException(""No name specified for bean class '"" +
                    bean.getClass() + ""'"");
        }

        // Validate the syntax of the property name
        if (resolver.hasNested(name)) {
            throw new IllegalArgumentException
                    (""Nested property names are not allowed: Property '"" +
                    name + ""' on bean class '"" + bean.getClass() + ""'"");
        } else if (resolver.isIndexed(name)) {
            throw new IllegalArgumentException
                    (""Indexed property names are not allowed: Property '"" +
                    name + ""' on bean class '"" + bean.getClass() + ""'"");
        } else if (resolver.isMapped(name)) {
            throw new IllegalArgumentException
                    (""Mapped property names are not allowed: Property '"" +
                    name + ""' on bean class '"" + bean.getClass() + ""'"");
        }

        // Handle DynaBean instances specially
        if (bean instanceof DynaBean) {
            final DynaProperty descriptor =
                    ((DynaBean) bean).getDynaClass().getDynaProperty(name);
            if (descriptor == null) {
                throw new NoSuchMethodException(""Unknown property '"" +
                        name + ""' on dynaclass '"" +
                        ((DynaBean) bean).getDynaClass() + ""'"" );
            }
            ((DynaBean) bean).set(name, value);
            return;
        }

        // Retrieve the property setter method for the specified property
        final PropertyDescriptor descriptor =
                getPropertyDescriptor(bean, name);
        if (descriptor == null) {
            throw new NoSuchMethodException(""Unknown property '"" +
                    name + ""' on class '"" + bean.getClass() + ""'"" );
        }
        final Method writeMethod = getWriteMethod(bean.getClass(), descriptor);
        if (writeMethod == null) {
            throw new NoSuchMethodException(""Property '"" + name +
                    ""' has no setter method in class '"" + bean.getClass() + ""'"");
        }

        // Call the property setter method
        final Object[] values = new Object[1];
        values[0] = value;
        if (log.isTraceEnabled()) {
            final String valueClassName =
                value == null ? ""<null>"" : value.getClass().getName();
            log.trace(""setSimpleProperty: Invoking method "" + writeMethod
                      + "" with value "" + value + "" (class "" + valueClassName + "")"");
        }
        invokeMethod(writeMethod, bean, values);

    }","  public void test60()  throws Throwable  {
      PropertyUtilsBean propertyUtilsBean0 = PropertyUtilsBean.getInstance();
      FluentPropertyBeanIntrospector fluentPropertyBeanIntrospector0 = new FluentPropertyBeanIntrospector(""uer"");
      // Undeclared exception!
      try { 
        propertyUtilsBean0.setSimpleProperty((Object) null, ""HFfsLp"", fluentPropertyBeanIntrospector0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // No bean specified
         //
         verifyException(""org.apache.commons.beanutils.PropertyUtilsBean"", e);
      }
  }"
886,"    protected void setPropertyOfMapBean(final Map<String, Object> bean, String propertyName, final Object value)
        throws IllegalArgumentException, IllegalAccessException,
        InvocationTargetException, NoSuchMethodException {

        if (resolver.isMapped(propertyName)) {
            final String name = resolver.getProperty(propertyName);
            if (name == null || name.length() == 0) {
                propertyName = resolver.getKey(propertyName);
            }
        }

        if (resolver.isIndexed(propertyName) ||
            resolver.isMapped(propertyName)) {
            throw new IllegalArgumentException(
                    ""Indexed or mapped properties are not supported on""
                    + "" objects of type Map: "" + propertyName);
        }

        bean.put(propertyName, value);
    }","  public void test61()  throws Throwable  {
      PropertyUtilsBean propertyUtilsBean0 = new PropertyUtilsBean();
      Class<Integer> class0 = Integer.class;
      try { 
        propertyUtilsBean0.setPropertyOfMapBean((Map<String, Object>) null, ""C:Z%PJH>l^fww,=[C}"", class0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Indexed or mapped properties are not supported on objects of type Map: C:Z%PJH>l^fww,=[C}
         //
         verifyException(""org.apache.commons.beanutils.PropertyUtilsBean"", e);
      }
  }"
887,"    public void setNestedProperty(Object bean,
                                         String name, final Object value)
            throws IllegalAccessException, InvocationTargetException,
            NoSuchMethodException {

        if (bean == null) {
            throw new IllegalArgumentException(""No bean specified"");
        }
        if (name == null) {
            throw new IllegalArgumentException(""No name specified for bean class '"" +
                    bean.getClass() + ""'"");
        }

        // Resolve nested references
        while (resolver.hasNested(name)) {
            final String next = resolver.next(name);
            Object nestedBean = null;
            if (bean instanceof Map) {
                nestedBean = getPropertyOfMapBean((Map<?, ?>)bean, next);
            } else if (resolver.isMapped(next)) {
                nestedBean = getMappedProperty(bean, next);
            } else if (resolver.isIndexed(next)) {
                nestedBean = getIndexedProperty(bean, next);
            } else {
                nestedBean = getSimpleProperty(bean, next);
            }
            if (nestedBean == null) {
                throw new NestedNullException
                        (""Null property value for '"" + name +
                         ""' on bean class '"" + bean.getClass() + ""'"");
            }
            bean = nestedBean;
            name = resolver.remove(name);
        }

        if (bean instanceof Map) {
            setPropertyOfMapBean(toPropertyMap(bean), name, value);
        } else if (resolver.isMapped(name)) {
            setMappedProperty(bean, name, value);
        } else if (resolver.isIndexed(name)) {
            setIndexedProperty(bean, name, value);
        } else {
            setSimpleProperty(bean, name, value);
        }

    }","  public void test62()  throws Throwable  {
      PropertyUtilsBean propertyUtilsBean0 = new PropertyUtilsBean();
      SuppressPropertiesBeanIntrospector suppressPropertiesBeanIntrospector0 = SuppressPropertiesBeanIntrospector.SUPPRESS_CLASS;
      // Undeclared exception!
      try { 
        propertyUtilsBean0.setNestedProperty("" with value "", ""["", suppressPropertiesBeanIntrospector0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Invalid indexed property '[' on bean class 'class java.lang.String'
         //
         verifyException(""org.apache.commons.beanutils.PropertyUtilsBean"", e);
      }
  }"
888,"    public void setNestedProperty(Object bean,
                                         String name, final Object value)
            throws IllegalAccessException, InvocationTargetException,
            NoSuchMethodException {

        if (bean == null) {
            throw new IllegalArgumentException(""No bean specified"");
        }
        if (name == null) {
            throw new IllegalArgumentException(""No name specified for bean class '"" +
                    bean.getClass() + ""'"");
        }

        // Resolve nested references
        while (resolver.hasNested(name)) {
            final String next = resolver.next(name);
            Object nestedBean = null;
            if (bean instanceof Map) {
                nestedBean = getPropertyOfMapBean((Map<?, ?>)bean, next);
            } else if (resolver.isMapped(next)) {
                nestedBean = getMappedProperty(bean, next);
            } else if (resolver.isIndexed(next)) {
                nestedBean = getIndexedProperty(bean, next);
            } else {
                nestedBean = getSimpleProperty(bean, next);
            }
            if (nestedBean == null) {
                throw new NestedNullException
                        (""Null property value for '"" + name +
                         ""' on bean class '"" + bean.getClass() + ""'"");
            }
            bean = nestedBean;
            name = resolver.remove(name);
        }

        if (bean instanceof Map) {
            setPropertyOfMapBean(toPropertyMap(bean), name, value);
        } else if (resolver.isMapped(name)) {
            setMappedProperty(bean, name, value);
        } else if (resolver.isIndexed(name)) {
            setIndexedProperty(bean, name, value);
        } else {
            setSimpleProperty(bean, name, value);
        }

    }","  public void test63()  throws Throwable  {
      Class<ResultSetIterator> class0 = ResultSetIterator.class;
      WrapDynaClass wrapDynaClass0 = WrapDynaClass.createDynaClass(class0);
      PropertyUtilsBean propertyUtilsBean0 = wrapDynaClass0.getPropertyUtilsBean();
      PropertyUtils propertyUtils0 = new PropertyUtils();
      // Undeclared exception!
      try { 
        propertyUtilsBean0.setNestedProperty(wrapDynaClass0, ""LZI>OZ:v~xON6({"", propertyUtils0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Invalid mapped property 'LZI>OZ:v~xON6({' on bean class 'class org.apache.commons.beanutils.WrapDynaClass'
         //
         verifyException(""org.apache.commons.beanutils.PropertyUtilsBean"", e);
      }
  }"
889,"    public void setProperty(final Object bean, final String name, final Object value)
            throws IllegalAccessException, InvocationTargetException,
            NoSuchMethodException {

        setNestedProperty(bean, name, value);

    }","  public void test64()  throws Throwable  {
      PropertyUtilsBean propertyUtilsBean0 = PropertyUtilsBean.getInstance();
      IndexOutOfBoundsException indexOutOfBoundsException0 = new IndexOutOfBoundsException("""");
      Integer integer0 = LazyDynaBean.Integer_ZERO;
      ConvertingWrapDynaBean convertingWrapDynaBean0 = new ConvertingWrapDynaBean(integer0);
      try { 
        propertyUtilsBean0.setProperty(indexOutOfBoundsException0, """", convertingWrapDynaBean0);
        fail(""Expecting exception: NoSuchMethodException"");
      } catch(NoSuchMethodException e) {
         //
         // Unknown property '' on class 'class java.lang.IndexOutOfBoundsException'
         //
         verifyException(""org.apache.commons.beanutils.PropertyUtilsBean"", e);
      }
  }"
890,"    public void setNestedProperty(Object bean,
                                         String name, final Object value)
            throws IllegalAccessException, InvocationTargetException,
            NoSuchMethodException {

        if (bean == null) {
            throw new IllegalArgumentException(""No bean specified"");
        }
        if (name == null) {
            throw new IllegalArgumentException(""No name specified for bean class '"" +
                    bean.getClass() + ""'"");
        }

        // Resolve nested references
        while (resolver.hasNested(name)) {
            final String next = resolver.next(name);
            Object nestedBean = null;
            if (bean instanceof Map) {
                nestedBean = getPropertyOfMapBean((Map<?, ?>)bean, next);
            } else if (resolver.isMapped(next)) {
                nestedBean = getMappedProperty(bean, next);
            } else if (resolver.isIndexed(next)) {
                nestedBean = getIndexedProperty(bean, next);
            } else {
                nestedBean = getSimpleProperty(bean, next);
            }
            if (nestedBean == null) {
                throw new NestedNullException
                        (""Null property value for '"" + name +
                         ""' on bean class '"" + bean.getClass() + ""'"");
            }
            bean = nestedBean;
            name = resolver.remove(name);
        }

        if (bean instanceof Map) {
            setPropertyOfMapBean(toPropertyMap(bean), name, value);
        } else if (resolver.isMapped(name)) {
            setMappedProperty(bean, name, value);
        } else if (resolver.isIndexed(name)) {
            setIndexedProperty(bean, name, value);
        } else {
            setSimpleProperty(bean, name, value);
        }

    }","  public void test65()  throws Throwable  {
      Class<LazyDynaMap> class0 = LazyDynaMap.class;
      WrapDynaClass wrapDynaClass0 = WrapDynaClass.createDynaClass(class0, (PropertyUtilsBean) null);
      PropertyUtilsBean propertyUtilsBean0 = wrapDynaClass0.getPropertyUtilsBean();
      SuppressPropertiesBeanIntrospector suppressPropertiesBeanIntrospector0 = SuppressPropertiesBeanIntrospector.SUPPRESS_CLASS;
      try { 
        propertyUtilsBean0.setNestedProperty(suppressPropertiesBeanIntrospector0, ""org.apache.log4j.Priority"", (Object) null);
        fail(""Expecting exception: NoSuchMethodException"");
      } catch(NoSuchMethodException e) {
         //
         // Unknown property 'org' on class 'class org.apache.commons.beanutils.SuppressPropertiesBeanIntrospector'
         //
         verifyException(""org.apache.commons.beanutils.PropertyUtilsBean"", e);
      }
  }"
891,"    public void setProperty(final Object bean, final String name, final Object value)
            throws IllegalAccessException, InvocationTargetException,
            NoSuchMethodException {

        setNestedProperty(bean, name, value);

    }","  public void test66()  throws Throwable  {
      Class<LazyDynaMap> class0 = LazyDynaMap.class;
      WrapDynaClass wrapDynaClass0 = WrapDynaClass.createDynaClass(class0, (PropertyUtilsBean) null);
      PropertyUtilsBean propertyUtilsBean0 = wrapDynaClass0.getPropertyUtilsBean();
      // Undeclared exception!
      try { 
        propertyUtilsBean0.setProperty((Object) null, ""  setProperty("", wrapDynaClass0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // No bean specified
         //
         verifyException(""org.apache.commons.beanutils.PropertyUtilsBean"", e);
      }
  }"
892,"    public void setProperty(final Object bean, final String name, final Object value)
            throws IllegalAccessException, InvocationTargetException,
            NoSuchMethodException {

        setNestedProperty(bean, name, value);

    }","  public void test67()  throws Throwable  {
      PropertyUtils propertyUtils0 = new PropertyUtils();
      WrapDynaBean wrapDynaBean0 = new WrapDynaBean(propertyUtils0);
      ConvertingWrapDynaBean convertingWrapDynaBean0 = new ConvertingWrapDynaBean(wrapDynaBean0);
      WrapDynaClass wrapDynaClass0 = convertingWrapDynaBean0.dynaClass;
      PropertyUtilsBean propertyUtilsBean0 = wrapDynaClass0.getPropertyUtilsBean();
      IndexOutOfBoundsException indexOutOfBoundsException0 = new IndexOutOfBoundsException();
      try { 
        propertyUtilsBean0.setProperty(indexOutOfBoundsException0, ""    Converted  to String using toString() '"", wrapDynaClass0);
        fail(""Expecting exception: NoSuchMethodException"");
      } catch(NoSuchMethodException e) {
         //
         // Unknown property '    Converted  to String using toString'+ on bean class 'class java.lang.IndexOutOfBoundsException'
         //
         verifyException(""org.apache.commons.beanutils.PropertyUtilsBean"", e);
      }
  }"
893,"    public void setMappedProperty(final Object bean, String name,
                                         final Object value)
            throws IllegalAccessException, InvocationTargetException,
            NoSuchMethodException {

        if (bean == null) {
            throw new IllegalArgumentException(""No bean specified"");
        }
        if (name == null) {
            throw new IllegalArgumentException(""No name specified for bean class '"" +
                    bean.getClass() + ""'"");
        }

        // Identify the key of the requested individual property
        String key  = null;
        try {
            key = resolver.getKey(name);
        } catch (final IllegalArgumentException e) {
            throw new IllegalArgumentException
                    (""Invalid mapped property '"" + name +
                    ""' on bean class '"" + bean.getClass() + ""'"");
        }
        if (key == null) {
            throw new IllegalArgumentException
                    (""Invalid mapped property '"" + name +
                    ""' on bean class '"" + bean.getClass() + ""'"");
        }

        // Isolate the name
        name = resolver.getProperty(name);

        // Request the specified indexed property value
        setMappedProperty(bean, name, key, value);

    }","  public void test68()  throws Throwable  {
      Class<PropertyDescriptor> class0 = PropertyDescriptor.class;
      WrapDynaClass wrapDynaClass0 = WrapDynaClass.createDynaClass(class0);
      PropertyUtilsBean propertyUtilsBean0 = wrapDynaClass0.getPropertyUtilsBean();
      BasicDynaBean basicDynaBean0 = new BasicDynaBean(wrapDynaClass0);
      try { 
        propertyUtilsBean0.setMappedProperty((Object) basicDynaBean0, ""AUS/jEf+u)e^fo/Z"", ""AUS/jEf+u)e^fo/Z"", (Object) basicDynaBean0);
        fail(""Expecting exception: NoSuchMethodException"");
      } catch(NoSuchMethodException e) {
         //
         // Unknown property 'AUS/jEf+u)e^fo/Z' on bean class 'class org.apache.commons.beanutils.BasicDynaBean'
         //
         verifyException(""org.apache.commons.beanutils.PropertyUtilsBean"", e);
      }
  }"
894,"    public void setMappedProperty(final Object bean, String name,
                                         final Object value)
            throws IllegalAccessException, InvocationTargetException,
            NoSuchMethodException {

        if (bean == null) {
            throw new IllegalArgumentException(""No bean specified"");
        }
        if (name == null) {
            throw new IllegalArgumentException(""No name specified for bean class '"" +
                    bean.getClass() + ""'"");
        }

        // Identify the key of the requested individual property
        String key  = null;
        try {
            key = resolver.getKey(name);
        } catch (final IllegalArgumentException e) {
            throw new IllegalArgumentException
                    (""Invalid mapped property '"" + name +
                    ""' on bean class '"" + bean.getClass() + ""'"");
        }
        if (key == null) {
            throw new IllegalArgumentException
                    (""Invalid mapped property '"" + name +
                    ""' on bean class '"" + bean.getClass() + ""'"");
        }

        // Isolate the name
        name = resolver.getProperty(name);

        // Request the specified indexed property value
        setMappedProperty(bean, name, key, value);

    }","  public void test69()  throws Throwable  {
      PropertyUtilsBean propertyUtilsBean0 = new PropertyUtilsBean();
      WrapDynaBean wrapDynaBean0 = new WrapDynaBean(propertyUtilsBean0);
      // Undeclared exception!
      try { 
        propertyUtilsBean0.setMappedProperty((Object) wrapDynaBean0, (String) null, (String) null, (Object) null);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // No name specified for bean class 'class org.apache.commons.beanutils.WrapDynaBean'
         //
         verifyException(""org.apache.commons.beanutils.PropertyUtilsBean"", e);
      }
  }"
895,"    public void setMappedProperty(final Object bean, String name,
                                         final Object value)
            throws IllegalAccessException, InvocationTargetException,
            NoSuchMethodException {

        if (bean == null) {
            throw new IllegalArgumentException(""No bean specified"");
        }
        if (name == null) {
            throw new IllegalArgumentException(""No name specified for bean class '"" +
                    bean.getClass() + ""'"");
        }

        // Identify the key of the requested individual property
        String key  = null;
        try {
            key = resolver.getKey(name);
        } catch (final IllegalArgumentException e) {
            throw new IllegalArgumentException
                    (""Invalid mapped property '"" + name +
                    ""' on bean class '"" + bean.getClass() + ""'"");
        }
        if (key == null) {
            throw new IllegalArgumentException
                    (""Invalid mapped property '"" + name +
                    ""' on bean class '"" + bean.getClass() + ""'"");
        }

        // Isolate the name
        name = resolver.getProperty(name);

        // Request the specified indexed property value
        setMappedProperty(bean, name, key, value);

    }","  public void test70()  throws Throwable  {
      PropertyUtilsBean propertyUtilsBean0 = new PropertyUtilsBean();
      // Undeclared exception!
      try { 
        propertyUtilsBean0.setMappedProperty((Object) null, ""h_e>"", "",qv!4'+Ap_lqxg"", (Object) ""h_e>"");
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // No bean specified
         //
         verifyException(""org.apache.commons.beanutils.PropertyUtilsBean"", e);
      }
  }"
896,"    public void setMappedProperty(final Object bean, String name,
                                         final Object value)
            throws IllegalAccessException, InvocationTargetException,
            NoSuchMethodException {

        if (bean == null) {
            throw new IllegalArgumentException(""No bean specified"");
        }
        if (name == null) {
            throw new IllegalArgumentException(""No name specified for bean class '"" +
                    bean.getClass() + ""'"");
        }

        // Identify the key of the requested individual property
        String key  = null;
        try {
            key = resolver.getKey(name);
        } catch (final IllegalArgumentException e) {
            throw new IllegalArgumentException
                    (""Invalid mapped property '"" + name +
                    ""' on bean class '"" + bean.getClass() + ""'"");
        }
        if (key == null) {
            throw new IllegalArgumentException
                    (""Invalid mapped property '"" + name +
                    ""' on bean class '"" + bean.getClass() + ""'"");
        }

        // Isolate the name
        name = resolver.getProperty(name);

        // Request the specified indexed property value
        setMappedProperty(bean, name, key, value);

    }","  public void test71()  throws Throwable  {
      PropertyUtilsBean propertyUtilsBean0 = new PropertyUtilsBean();
      try { 
        propertyUtilsBean0.setMappedProperty((Object) ""{)qCY:"", ""' has no getter method in class '"", ""CvX~1uL>LpQW5q-;"", (Object) ""CvX~1uL>LpQW5q-;"");
        fail(""Expecting exception: NoSuchMethodException"");
      } catch(NoSuchMethodException e) {
         //
         // Unknown property '' has no getter method in class '' on bean class 'class java.lang.String'
         //
         verifyException(""org.apache.commons.beanutils.PropertyUtilsBean"", e);
      }
  }"
897,"    public void setMappedProperty(final Object bean, String name,
                                         final Object value)
            throws IllegalAccessException, InvocationTargetException,
            NoSuchMethodException {

        if (bean == null) {
            throw new IllegalArgumentException(""No bean specified"");
        }
        if (name == null) {
            throw new IllegalArgumentException(""No name specified for bean class '"" +
                    bean.getClass() + ""'"");
        }

        // Identify the key of the requested individual property
        String key  = null;
        try {
            key = resolver.getKey(name);
        } catch (final IllegalArgumentException e) {
            throw new IllegalArgumentException
                    (""Invalid mapped property '"" + name +
                    ""' on bean class '"" + bean.getClass() + ""'"");
        }
        if (key == null) {
            throw new IllegalArgumentException
                    (""Invalid mapped property '"" + name +
                    ""' on bean class '"" + bean.getClass() + ""'"");
        }

        // Isolate the name
        name = resolver.getProperty(name);

        // Request the specified indexed property value
        setMappedProperty(bean, name, key, value);

    }","  public void test72()  throws Throwable  {
      PropertyUtilsBean propertyUtilsBean0 = PropertyUtilsBean.getInstance();
      Class<WrapDynaBean> class0 = WrapDynaBean.class;
      WrapDynaClass wrapDynaClass0 = WrapDynaClass.createDynaClass(class0, propertyUtilsBean0);
      BasicDynaBean basicDynaBean0 = new BasicDynaBean(wrapDynaClass0);
      // Undeclared exception!
      try { 
        propertyUtilsBean0.setMappedProperty((Object) class0, ""1WNF"", (Object) basicDynaBean0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Invalid mapped property '1WNF' on bean class 'class java.lang.Class'
         //
         verifyException(""org.apache.commons.beanutils.PropertyUtilsBean"", e);
      }
  }"
898,"    public void setMappedProperty(final Object bean, String name,
                                         final Object value)
            throws IllegalAccessException, InvocationTargetException,
            NoSuchMethodException {

        if (bean == null) {
            throw new IllegalArgumentException(""No bean specified"");
        }
        if (name == null) {
            throw new IllegalArgumentException(""No name specified for bean class '"" +
                    bean.getClass() + ""'"");
        }

        // Identify the key of the requested individual property
        String key  = null;
        try {
            key = resolver.getKey(name);
        } catch (final IllegalArgumentException e) {
            throw new IllegalArgumentException
                    (""Invalid mapped property '"" + name +
                    ""' on bean class '"" + bean.getClass() + ""'"");
        }
        if (key == null) {
            throw new IllegalArgumentException
                    (""Invalid mapped property '"" + name +
                    ""' on bean class '"" + bean.getClass() + ""'"");
        }

        // Isolate the name
        name = resolver.getProperty(name);

        // Request the specified indexed property value
        setMappedProperty(bean, name, key, value);

    }","  public void test73()  throws Throwable  {
      PropertyUtilsBean propertyUtilsBean0 = new PropertyUtilsBean();
      BasicDynaBean basicDynaBean0 = new BasicDynaBean((DynaClass) null);
      // Undeclared exception!
      try { 
        propertyUtilsBean0.setMappedProperty((Object) basicDynaBean0, (String) null, (Object) null);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // No name specified for bean class 'class org.apache.commons.beanutils.BasicDynaBean'
         //
         verifyException(""org.apache.commons.beanutils.PropertyUtilsBean"", e);
      }
  }"
899,"    public void setMappedProperty(final Object bean, String name,
                                         final Object value)
            throws IllegalAccessException, InvocationTargetException,
            NoSuchMethodException {

        if (bean == null) {
            throw new IllegalArgumentException(""No bean specified"");
        }
        if (name == null) {
            throw new IllegalArgumentException(""No name specified for bean class '"" +
                    bean.getClass() + ""'"");
        }

        // Identify the key of the requested individual property
        String key  = null;
        try {
            key = resolver.getKey(name);
        } catch (final IllegalArgumentException e) {
            throw new IllegalArgumentException
                    (""Invalid mapped property '"" + name +
                    ""' on bean class '"" + bean.getClass() + ""'"");
        }
        if (key == null) {
            throw new IllegalArgumentException
                    (""Invalid mapped property '"" + name +
                    ""' on bean class '"" + bean.getClass() + ""'"");
        }

        // Isolate the name
        name = resolver.getProperty(name);

        // Request the specified indexed property value
        setMappedProperty(bean, name, key, value);

    }","  public void test74()  throws Throwable  {
      PropertyUtilsBean propertyUtilsBean0 = PropertyUtilsBean.getInstance();
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        propertyUtilsBean0.setMappedProperty((Object) null, (String) null, (Object) class0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // No bean specified
         //
         verifyException(""org.apache.commons.beanutils.PropertyUtilsBean"", e);
      }
  }"
900,"    public void setIndexedProperty(final Object bean, String name,
                                          final Object value)
            throws IllegalAccessException, InvocationTargetException,
            NoSuchMethodException {

        if (bean == null) {
            throw new IllegalArgumentException(""No bean specified"");
        }
        if (name == null) {
            throw new IllegalArgumentException(""No name specified for bean class '"" +
                    bean.getClass() + ""'"");
        }

        // Identify the index of the requested individual property
        int index = -1;
        try {
            index = resolver.getIndex(name);
        } catch (final IllegalArgumentException e) {
            throw new IllegalArgumentException(""Invalid indexed property '"" +
                    name + ""' on bean class '"" + bean.getClass() + ""'"");
        }
        if (index < 0) {
            throw new IllegalArgumentException(""Invalid indexed property '"" +
                    name + ""' on bean class '"" + bean.getClass() + ""'"");
        }

        // Isolate the name
        name = resolver.getProperty(name);

        // Set the specified indexed property value
        setIndexedProperty(bean, name, index, value);

    }","  public void test75()  throws Throwable  {
      PropertyUtilsBean propertyUtilsBean0 = new PropertyUtilsBean();
      ConvertingWrapDynaBean convertingWrapDynaBean0 = new ConvertingWrapDynaBean(propertyUtilsBean0);
      try { 
        propertyUtilsBean0.setIndexedProperty((Object) convertingWrapDynaBean0, "" returns void"", (-2322), (Object) "" returns void"");
        fail(""Expecting exception: NoSuchMethodException"");
      } catch(NoSuchMethodException e) {
         //
         // Unknown property ' returns void' on bean class 'class org.apache.commons.beanutils.ConvertingWrapDynaBean'
         //
         verifyException(""org.apache.commons.beanutils.PropertyUtilsBean"", e);
      }
  }"
901,"    public void setIndexedProperty(final Object bean, String name,
                                          final Object value)
            throws IllegalAccessException, InvocationTargetException,
            NoSuchMethodException {

        if (bean == null) {
            throw new IllegalArgumentException(""No bean specified"");
        }
        if (name == null) {
            throw new IllegalArgumentException(""No name specified for bean class '"" +
                    bean.getClass() + ""'"");
        }

        // Identify the index of the requested individual property
        int index = -1;
        try {
            index = resolver.getIndex(name);
        } catch (final IllegalArgumentException e) {
            throw new IllegalArgumentException(""Invalid indexed property '"" +
                    name + ""' on bean class '"" + bean.getClass() + ""'"");
        }
        if (index < 0) {
            throw new IllegalArgumentException(""Invalid indexed property '"" +
                    name + ""' on bean class '"" + bean.getClass() + ""'"");
        }

        // Isolate the name
        name = resolver.getProperty(name);

        // Set the specified indexed property value
        setIndexedProperty(bean, name, index, value);

    }","  public void test76()  throws Throwable  {
      Class<ResultSetIterator> class0 = ResultSetIterator.class;
      WrapDynaClass wrapDynaClass0 = WrapDynaClass.createDynaClass(class0);
      PropertyUtilsBean propertyUtilsBean0 = wrapDynaClass0.getPropertyUtilsBean();
      IndexOutOfBoundsException indexOutOfBoundsException0 = new IndexOutOfBoundsException();
      try { 
        propertyUtilsBean0.setIndexedProperty((Object) class0, """", (-33), (Object) indexOutOfBoundsException0);
        fail(""Expecting exception: NoSuchMethodException"");
      } catch(NoSuchMethodException e) {
         //
         // Unknown property '' on bean class 'class java.lang.Class'
         //
         verifyException(""org.apache.commons.beanutils.PropertyUtilsBean"", e);
      }
  }"
902,"    public void setIndexedProperty(final Object bean, String name,
                                          final Object value)
            throws IllegalAccessException, InvocationTargetException,
            NoSuchMethodException {

        if (bean == null) {
            throw new IllegalArgumentException(""No bean specified"");
        }
        if (name == null) {
            throw new IllegalArgumentException(""No name specified for bean class '"" +
                    bean.getClass() + ""'"");
        }

        // Identify the index of the requested individual property
        int index = -1;
        try {
            index = resolver.getIndex(name);
        } catch (final IllegalArgumentException e) {
            throw new IllegalArgumentException(""Invalid indexed property '"" +
                    name + ""' on bean class '"" + bean.getClass() + ""'"");
        }
        if (index < 0) {
            throw new IllegalArgumentException(""Invalid indexed property '"" +
                    name + ""' on bean class '"" + bean.getClass() + ""'"");
        }

        // Isolate the name
        name = resolver.getProperty(name);

        // Set the specified indexed property value
        setIndexedProperty(bean, name, index, value);

    }","  public void test77()  throws Throwable  {
      PropertyUtilsBean propertyUtilsBean0 = new PropertyUtilsBean();
      // Undeclared exception!
      try { 
        propertyUtilsBean0.setIndexedProperty((Object) null, ""39nATi*fIywL"", (-715), (Object) propertyUtilsBean0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // No bean specified
         //
         verifyException(""org.apache.commons.beanutils.PropertyUtilsBean"", e);
      }
  }"
903,"    public void setIndexedProperty(final Object bean, String name,
                                          final Object value)
            throws IllegalAccessException, InvocationTargetException,
            NoSuchMethodException {

        if (bean == null) {
            throw new IllegalArgumentException(""No bean specified"");
        }
        if (name == null) {
            throw new IllegalArgumentException(""No name specified for bean class '"" +
                    bean.getClass() + ""'"");
        }

        // Identify the index of the requested individual property
        int index = -1;
        try {
            index = resolver.getIndex(name);
        } catch (final IllegalArgumentException e) {
            throw new IllegalArgumentException(""Invalid indexed property '"" +
                    name + ""' on bean class '"" + bean.getClass() + ""'"");
        }
        if (index < 0) {
            throw new IllegalArgumentException(""Invalid indexed property '"" +
                    name + ""' on bean class '"" + bean.getClass() + ""'"");
        }

        // Isolate the name
        name = resolver.getProperty(name);

        // Set the specified indexed property value
        setIndexedProperty(bean, name, index, value);

    }","  public void test78()  throws Throwable  {
      PropertyUtilsBean propertyUtilsBean0 = new PropertyUtilsBean();
      Class<String> class0 = String.class;
      FastHashMap fastHashMap0 = new FastHashMap();
      // Undeclared exception!
      try { 
        propertyUtilsBean0.setIndexedProperty((Object) fastHashMap0, ""org.apache.commons.collections.FastHaShMap"", (Object) class0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Invalid indexed property 'org.apache.commons.collections.FastHaShMap' on bean class 'class org.apache.commons.collections.FastHashMap'
         //
         verifyException(""org.apache.commons.beanutils.PropertyUtilsBean"", e);
      }
  }"
904,"    public void setIndexedProperty(final Object bean, String name,
                                          final Object value)
            throws IllegalAccessException, InvocationTargetException,
            NoSuchMethodException {

        if (bean == null) {
            throw new IllegalArgumentException(""No bean specified"");
        }
        if (name == null) {
            throw new IllegalArgumentException(""No name specified for bean class '"" +
                    bean.getClass() + ""'"");
        }

        // Identify the index of the requested individual property
        int index = -1;
        try {
            index = resolver.getIndex(name);
        } catch (final IllegalArgumentException e) {
            throw new IllegalArgumentException(""Invalid indexed property '"" +
                    name + ""' on bean class '"" + bean.getClass() + ""'"");
        }
        if (index < 0) {
            throw new IllegalArgumentException(""Invalid indexed property '"" +
                    name + ""' on bean class '"" + bean.getClass() + ""'"");
        }

        // Isolate the name
        name = resolver.getProperty(name);

        // Set the specified indexed property value
        setIndexedProperty(bean, name, index, value);

    }","  public void test79()  throws Throwable  {
      Class<LazyDynaMap> class0 = LazyDynaMap.class;
      WrapDynaClass wrapDynaClass0 = WrapDynaClass.createDynaClass(class0);
      HashMap<String, DynaProperty> hashMap0 = wrapDynaClass0.propertiesMap;
      PropertyUtilsBean propertyUtilsBean0 = wrapDynaClass0.getPropertyUtilsBean();
      // Undeclared exception!
      try { 
        propertyUtilsBean0.setIndexedProperty((Object) hashMap0, (String) null, (Object) wrapDynaClass0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // No name specified for bean class 'class java.util.HashMap'
         //
         verifyException(""org.apache.commons.beanutils.PropertyUtilsBean"", e);
      }
  }"
905,"    public void setIndexedProperty(final Object bean, String name,
                                          final Object value)
            throws IllegalAccessException, InvocationTargetException,
            NoSuchMethodException {

        if (bean == null) {
            throw new IllegalArgumentException(""No bean specified"");
        }
        if (name == null) {
            throw new IllegalArgumentException(""No name specified for bean class '"" +
                    bean.getClass() + ""'"");
        }

        // Identify the index of the requested individual property
        int index = -1;
        try {
            index = resolver.getIndex(name);
        } catch (final IllegalArgumentException e) {
            throw new IllegalArgumentException(""Invalid indexed property '"" +
                    name + ""' on bean class '"" + bean.getClass() + ""'"");
        }
        if (index < 0) {
            throw new IllegalArgumentException(""Invalid indexed property '"" +
                    name + ""' on bean class '"" + bean.getClass() + ""'"");
        }

        // Isolate the name
        name = resolver.getProperty(name);

        // Set the specified indexed property value
        setIndexedProperty(bean, name, index, value);

    }","  public void test80()  throws Throwable  {
      PropertyUtilsBean propertyUtilsBean0 = PropertyUtilsBean.getInstance();
      // Undeclared exception!
      try { 
        propertyUtilsBean0.setIndexedProperty((Object) null, ""8(LD"", (Object) null);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // No bean specified
         //
         verifyException(""org.apache.commons.beanutils.PropertyUtilsBean"", e);
      }
  }"
906,"    public boolean isWriteable(Object bean, String name) {

        // Validate method parameters
        if (bean == null) {
            throw new IllegalArgumentException(""No bean specified"");
        }
        if (name == null) {
            throw new IllegalArgumentException(""No name specified for bean class '"" +
                    bean.getClass() + ""'"");
        }

        // Resolve nested references
        while (resolver.hasNested(name)) {
            final String next = resolver.next(name);
            Object nestedBean = null;
            try {
                nestedBean = getProperty(bean, next);
            } catch (final IllegalAccessException e) {
                return false;
            } catch (final InvocationTargetException e) {
                return false;
            } catch (final NoSuchMethodException e) {
                return false;
            }
            if (nestedBean == null) {
                throw new NestedNullException
                        (""Null property value for '"" + next +
                        ""' on bean class '"" + bean.getClass() + ""'"");
            }
            bean = nestedBean;
            name = resolver.remove(name);
        }

        // Remove any subscript from the final name value
        name = resolver.getProperty(name);

        // Treat WrapDynaBean as special case - may be a read-only property
        // (see Jira issue# BEANUTILS-61)
        if (bean instanceof WrapDynaBean) {
            bean = ((WrapDynaBean)bean).getInstance();
        }

        // Return the requested result
        if (bean instanceof DynaBean) {
            // All DynaBean properties are writeable
            return (((DynaBean) bean).getDynaClass().getDynaProperty(name) != null);
        } else {
            try {
                final PropertyDescriptor desc =
                    getPropertyDescriptor(bean, name);
                if (desc != null) {
                    Method writeMethod = getWriteMethod(bean.getClass(), desc);
                    if (writeMethod == null) {
                        if (desc instanceof IndexedPropertyDescriptor) {
                            writeMethod = ((IndexedPropertyDescriptor) desc).getIndexedWriteMethod();
                        } else if (desc instanceof MappedPropertyDescriptor) {
                            writeMethod = ((MappedPropertyDescriptor) desc).getMappedWriteMethod();
                        }
                        writeMethod = MethodUtils.getAccessibleMethod(bean.getClass(), writeMethod);
                    }
                    return (writeMethod != null);
                } else {
                    return (false);
                }
            } catch (final IllegalAccessException e) {
                return (false);
            } catch (final InvocationTargetException e) {
                return (false);
            } catch (final NoSuchMethodException e) {
                return (false);
            }
        }

    }","  public void test81()  throws Throwable  {
      PropertyUtilsBean propertyUtilsBean0 = PropertyUtilsBean.getInstance();
      Class<ConvertingWrapDynaBean> class0 = ConvertingWrapDynaBean.class;
      // Undeclared exception!
      try { 
        propertyUtilsBean0.isWriteable(class0, (String) null);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // No name specified for bean class 'class java.lang.Class'
         //
         verifyException(""org.apache.commons.beanutils.PropertyUtilsBean"", e);
      }
  }"
907,"    public boolean isWriteable(Object bean, String name) {

        // Validate method parameters
        if (bean == null) {
            throw new IllegalArgumentException(""No bean specified"");
        }
        if (name == null) {
            throw new IllegalArgumentException(""No name specified for bean class '"" +
                    bean.getClass() + ""'"");
        }

        // Resolve nested references
        while (resolver.hasNested(name)) {
            final String next = resolver.next(name);
            Object nestedBean = null;
            try {
                nestedBean = getProperty(bean, next);
            } catch (final IllegalAccessException e) {
                return false;
            } catch (final InvocationTargetException e) {
                return false;
            } catch (final NoSuchMethodException e) {
                return false;
            }
            if (nestedBean == null) {
                throw new NestedNullException
                        (""Null property value for '"" + next +
                        ""' on bean class '"" + bean.getClass() + ""'"");
            }
            bean = nestedBean;
            name = resolver.remove(name);
        }

        // Remove any subscript from the final name value
        name = resolver.getProperty(name);

        // Treat WrapDynaBean as special case - may be a read-only property
        // (see Jira issue# BEANUTILS-61)
        if (bean instanceof WrapDynaBean) {
            bean = ((WrapDynaBean)bean).getInstance();
        }

        // Return the requested result
        if (bean instanceof DynaBean) {
            // All DynaBean properties are writeable
            return (((DynaBean) bean).getDynaClass().getDynaProperty(name) != null);
        } else {
            try {
                final PropertyDescriptor desc =
                    getPropertyDescriptor(bean, name);
                if (desc != null) {
                    Method writeMethod = getWriteMethod(bean.getClass(), desc);
                    if (writeMethod == null) {
                        if (desc instanceof IndexedPropertyDescriptor) {
                            writeMethod = ((IndexedPropertyDescriptor) desc).getIndexedWriteMethod();
                        } else if (desc instanceof MappedPropertyDescriptor) {
                            writeMethod = ((MappedPropertyDescriptor) desc).getMappedWriteMethod();
                        }
                        writeMethod = MethodUtils.getAccessibleMethod(bean.getClass(), writeMethod);
                    }
                    return (writeMethod != null);
                } else {
                    return (false);
                }
            } catch (final IllegalAccessException e) {
                return (false);
            } catch (final InvocationTargetException e) {
                return (false);
            } catch (final NoSuchMethodException e) {
                return (false);
            }
        }

    }","  public void test82()  throws Throwable  {
      PropertyUtilsBean propertyUtilsBean0 = PropertyUtilsBean.getInstance();
      // Undeclared exception!
      try { 
        propertyUtilsBean0.isWriteable((Object) null, (String) null);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // No bean specified
         //
         verifyException(""org.apache.commons.beanutils.PropertyUtilsBean"", e);
      }
  }"
908,"    public void copyProperties(final Object dest, final Object orig)
            throws IllegalAccessException, InvocationTargetException,
            NoSuchMethodException {

        if (dest == null) {
            throw new IllegalArgumentException
                    (""No destination bean specified"");
        }
        if (orig == null) {
            throw new IllegalArgumentException(""No origin bean specified"");
        }

        if (orig instanceof DynaBean) {
            final DynaProperty[] origDescriptors =
                ((DynaBean) orig).getDynaClass().getDynaProperties();
            for (DynaProperty origDescriptor : origDescriptors) {
                final String name = origDescriptor.getName();
                if (isReadable(orig, name) && isWriteable(dest, name)) {
                    try {
                        final Object value = ((DynaBean) orig).get(name);
                        if (dest instanceof DynaBean) {
                            ((DynaBean) dest).set(name, value);
                        } else {
                                setSimpleProperty(dest, name, value);
                        }
                    } catch (final NoSuchMethodException e) {
                        if (log.isDebugEnabled()) {
                            log.debug(""Error writing to '"" + name + ""' on class '"" + dest.getClass() + ""'"", e);
                        }
                    }
                }
            }
        } else if (orig instanceof Map) {
            final Iterator<?> entries = ((Map<?, ?>) orig).entrySet().iterator();
            while (entries.hasNext()) {
                final Map.Entry<?, ?> entry = (Entry<?, ?>) entries.next();
                final String name = (String)entry.getKey();
                if (isWriteable(dest, name)) {
                    try {
                        if (dest instanceof DynaBean) {
                            ((DynaBean) dest).set(name, entry.getValue());
                        } else {
                            setSimpleProperty(dest, name, entry.getValue());
                        }
                    } catch (final NoSuchMethodException e) {
                        if (log.isDebugEnabled()) {
                            log.debug(""Error writing to '"" + name + ""' on class '"" + dest.getClass() + ""'"", e);
                        }
                    }
                }
            }
        } else /* if (orig is a standard JavaBean) */ {
            final PropertyDescriptor[] origDescriptors =
                getPropertyDescriptors(orig);
            for (PropertyDescriptor origDescriptor : origDescriptors) {
                final String name = origDescriptor.getName();
                if (isReadable(orig, name) && isWriteable(dest, name)) {
                    try {
                        final Object value = getSimpleProperty(orig, name);
                        if (dest instanceof DynaBean) {
                            ((DynaBean) dest).set(name, value);
                        } else {
                                setSimpleProperty(dest, name, value);
                        }
                    } catch (final NoSuchMethodException e) {
                        if (log.isDebugEnabled()) {
                            log.debug(""Error writing to '"" + name + ""' on class '"" + dest.getClass() + ""'"", e);
                        }
                    }
                }
            }
        }

    }","  public void test83()  throws Throwable  {
      PropertyUtilsBean propertyUtilsBean0 = PropertyUtilsBean.getInstance();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      doReturn(false).when(resultSet0).next();
      RowSetDynaClass rowSetDynaClass0 = new RowSetDynaClass(resultSet0);
      BasicDynaBean basicDynaBean0 = new BasicDynaBean(rowSetDynaClass0);
      propertyUtilsBean0.copyProperties(basicDynaBean0, rowSetMetaDataImpl0);
  }"
909,"    public boolean isReadable(Object bean, String name) {

        // Validate method parameters
        if (bean == null) {
            throw new IllegalArgumentException(""No bean specified"");
        }
        if (name == null) {
            throw new IllegalArgumentException(""No name specified for bean class '"" +
                    bean.getClass() + ""'"");
        }

        // Resolve nested references
        while (resolver.hasNested(name)) {
            final String next = resolver.next(name);
            Object nestedBean = null;
            try {
                nestedBean = getProperty(bean, next);
            } catch (final IllegalAccessException e) {
                return false;
            } catch (final InvocationTargetException e) {
                return false;
            } catch (final NoSuchMethodException e) {
                return false;
            }
            if (nestedBean == null) {
                throw new NestedNullException
                        (""Null property value for '"" + next +
                        ""' on bean class '"" + bean.getClass() + ""'"");
            }
            bean = nestedBean;
            name = resolver.remove(name);
        }

        // Remove any subscript from the final name value
        name = resolver.getProperty(name);

        // Treat WrapDynaBean as special case - may be a write-only property
        // (see Jira issue# BEANUTILS-61)
        if (bean instanceof WrapDynaBean) {
            bean = ((WrapDynaBean)bean).getInstance();
        }

        // Return the requested result
        if (bean instanceof DynaBean) {
            // All DynaBean properties are readable
            return (((DynaBean) bean).getDynaClass().getDynaProperty(name) != null);
        } else {
            try {
                final PropertyDescriptor desc =
                    getPropertyDescriptor(bean, name);
                if (desc != null) {
                    Method readMethod = getReadMethod(bean.getClass(), desc);
                    if (readMethod == null) {
                        if (desc instanceof IndexedPropertyDescriptor) {
                            readMethod = ((IndexedPropertyDescriptor) desc).getIndexedReadMethod();
                        } else if (desc instanceof MappedPropertyDescriptor) {
                            readMethod = ((MappedPropertyDescriptor) desc).getMappedReadMethod();
                        }
                        readMethod = MethodUtils.getAccessibleMethod(bean.getClass(), readMethod);
                    }
                    return (readMethod != null);
                } else {
                    return (false);
                }
            } catch (final IllegalAccessException e) {
                return (false);
            } catch (final InvocationTargetException e) {
                return (false);
            } catch (final NoSuchMethodException e) {
                return (false);
            }
        }

    }","  public void test84()  throws Throwable  {
      Class<ResultSetIterator> class0 = ResultSetIterator.class;
      WrapDynaClass wrapDynaClass0 = WrapDynaClass.createDynaClass(class0);
      PropertyUtilsBean propertyUtilsBean0 = wrapDynaClass0.getPropertyUtilsBean();
      BasicDynaBean basicDynaBean0 = new BasicDynaBean(wrapDynaClass0);
      boolean boolean0 = propertyUtilsBean0.isReadable(basicDynaBean0, "" for property '"");
}"
910,"    public boolean isReadable(Object bean, String name) {

        // Validate method parameters
        if (bean == null) {
            throw new IllegalArgumentException(""No bean specified"");
        }
        if (name == null) {
            throw new IllegalArgumentException(""No name specified for bean class '"" +
                    bean.getClass() + ""'"");
        }

        // Resolve nested references
        while (resolver.hasNested(name)) {
            final String next = resolver.next(name);
            Object nestedBean = null;
            try {
                nestedBean = getProperty(bean, next);
            } catch (final IllegalAccessException e) {
                return false;
            } catch (final InvocationTargetException e) {
                return false;
            } catch (final NoSuchMethodException e) {
                return false;
            }
            if (nestedBean == null) {
                throw new NestedNullException
                        (""Null property value for '"" + next +
                        ""' on bean class '"" + bean.getClass() + ""'"");
            }
            bean = nestedBean;
            name = resolver.remove(name);
        }

        // Remove any subscript from the final name value
        name = resolver.getProperty(name);

        // Treat WrapDynaBean as special case - may be a write-only property
        // (see Jira issue# BEANUTILS-61)
        if (bean instanceof WrapDynaBean) {
            bean = ((WrapDynaBean)bean).getInstance();
        }

        // Return the requested result
        if (bean instanceof DynaBean) {
            // All DynaBean properties are readable
            return (((DynaBean) bean).getDynaClass().getDynaProperty(name) != null);
        } else {
            try {
                final PropertyDescriptor desc =
                    getPropertyDescriptor(bean, name);
                if (desc != null) {
                    Method readMethod = getReadMethod(bean.getClass(), desc);
                    if (readMethod == null) {
                        if (desc instanceof IndexedPropertyDescriptor) {
                            readMethod = ((IndexedPropertyDescriptor) desc).getIndexedReadMethod();
                        } else if (desc instanceof MappedPropertyDescriptor) {
                            readMethod = ((MappedPropertyDescriptor) desc).getMappedReadMethod();
                        }
                        readMethod = MethodUtils.getAccessibleMethod(bean.getClass(), readMethod);
                    }
                    return (readMethod != null);
                } else {
                    return (false);
                }
            } catch (final IllegalAccessException e) {
                return (false);
            } catch (final InvocationTargetException e) {
                return (false);
            } catch (final NoSuchMethodException e) {
                return (false);
            }
        }

    }","  public void test85()  throws Throwable  {
      PropertyUtilsBean propertyUtilsBean0 = PropertyUtilsBean.getInstance();
      HashMap<WrapDynaBean, String> hashMap0 = new HashMap<WrapDynaBean, String>();
      // Undeclared exception!
      try { 
        propertyUtilsBean0.isReadable(hashMap0, ""org.apache.commons.collections.FastHashMap"");
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Null property value for 'org' on bean class 'class java.util.HashMap'
         //
         verifyException(""org.apache.commons.beanutils.PropertyUtilsBean"", e);
      }
  }"
911,"    public boolean isReadable(Object bean, String name) {

        // Validate method parameters
        if (bean == null) {
            throw new IllegalArgumentException(""No bean specified"");
        }
        if (name == null) {
            throw new IllegalArgumentException(""No name specified for bean class '"" +
                    bean.getClass() + ""'"");
        }

        // Resolve nested references
        while (resolver.hasNested(name)) {
            final String next = resolver.next(name);
            Object nestedBean = null;
            try {
                nestedBean = getProperty(bean, next);
            } catch (final IllegalAccessException e) {
                return false;
            } catch (final InvocationTargetException e) {
                return false;
            } catch (final NoSuchMethodException e) {
                return false;
            }
            if (nestedBean == null) {
                throw new NestedNullException
                        (""Null property value for '"" + next +
                        ""' on bean class '"" + bean.getClass() + ""'"");
            }
            bean = nestedBean;
            name = resolver.remove(name);
        }

        // Remove any subscript from the final name value
        name = resolver.getProperty(name);

        // Treat WrapDynaBean as special case - may be a write-only property
        // (see Jira issue# BEANUTILS-61)
        if (bean instanceof WrapDynaBean) {
            bean = ((WrapDynaBean)bean).getInstance();
        }

        // Return the requested result
        if (bean instanceof DynaBean) {
            // All DynaBean properties are readable
            return (((DynaBean) bean).getDynaClass().getDynaProperty(name) != null);
        } else {
            try {
                final PropertyDescriptor desc =
                    getPropertyDescriptor(bean, name);
                if (desc != null) {
                    Method readMethod = getReadMethod(bean.getClass(), desc);
                    if (readMethod == null) {
                        if (desc instanceof IndexedPropertyDescriptor) {
                            readMethod = ((IndexedPropertyDescriptor) desc).getIndexedReadMethod();
                        } else if (desc instanceof MappedPropertyDescriptor) {
                            readMethod = ((MappedPropertyDescriptor) desc).getMappedReadMethod();
                        }
                        readMethod = MethodUtils.getAccessibleMethod(bean.getClass(), readMethod);
                    }
                    return (readMethod != null);
                } else {
                    return (false);
                }
            } catch (final IllegalAccessException e) {
                return (false);
            } catch (final InvocationTargetException e) {
                return (false);
            } catch (final NoSuchMethodException e) {
                return (false);
            }
        }

    }","  public void test86()  throws Throwable  {
      IndexOutOfBoundsException indexOutOfBoundsException0 = new IndexOutOfBoundsException(""Formatting"");
      ConvertingWrapDynaBean convertingWrapDynaBean0 = new ConvertingWrapDynaBean(indexOutOfBoundsException0);
      WrapDynaClass wrapDynaClass0 = convertingWrapDynaBean0.dynaClass;
      PropertyUtilsBean propertyUtilsBean0 = wrapDynaClass0.getPropertyUtilsBean();
      // Undeclared exception!
      try { 
        propertyUtilsBean0.isReadable(""Formatting"", (String) null);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // No name specified for bean class 'class java.lang.String'
         //
         verifyException(""org.apache.commons.beanutils.PropertyUtilsBean"", e);
      }
  }"
912,"    public Object getSimpleProperty(final Object bean, final String name)
            throws IllegalAccessException, InvocationTargetException,
            NoSuchMethodException {

        if (bean == null) {
            throw new IllegalArgumentException(""No bean specified"");
        }
        if (name == null) {
            throw new IllegalArgumentException(""No name specified for bean class '"" +
                    bean.getClass() + ""'"");
        }

        // Validate the syntax of the property name
        if (resolver.hasNested(name)) {
            throw new IllegalArgumentException
                    (""Nested property names are not allowed: Property '"" +
                    name + ""' on bean class '"" + bean.getClass() + ""'"");
        } else if (resolver.isIndexed(name)) {
            throw new IllegalArgumentException
                    (""Indexed property names are not allowed: Property '"" +
                    name + ""' on bean class '"" + bean.getClass() + ""'"");
        } else if (resolver.isMapped(name)) {
            throw new IllegalArgumentException
                    (""Mapped property names are not allowed: Property '"" +
                    name + ""' on bean class '"" + bean.getClass() + ""'"");
        }

        // Handle DynaBean instances specially
        if (bean instanceof DynaBean) {
            final DynaProperty descriptor =
                    ((DynaBean) bean).getDynaClass().getDynaProperty(name);
            if (descriptor == null) {
                throw new NoSuchMethodException(""Unknown property '"" +
                        name + ""' on dynaclass '"" +
                        ((DynaBean) bean).getDynaClass() + ""'"" );
            }
            return (((DynaBean) bean).get(name));
        }

        // Retrieve the property getter method for the specified property
        final PropertyDescriptor descriptor =
                getPropertyDescriptor(bean, name);
        if (descriptor == null) {
            throw new NoSuchMethodException(""Unknown property '"" +
                    name + ""' on class '"" + bean.getClass() + ""'"" );
        }
        final Method readMethod = getReadMethod(bean.getClass(), descriptor);
        if (readMethod == null) {
            throw new NoSuchMethodException(""Property '"" + name +
                    ""' has no getter method in class '"" + bean.getClass() + ""'"");
        }

        // Call the property getter and return the value
        final Object value = invokeMethod(readMethod, bean, EMPTY_OBJECT_ARRAY);
        return (value);

    }","  public void test87()  throws Throwable  {
      Class<String> class0 = String.class;
      WrapDynaClass wrapDynaClass0 = WrapDynaClass.createDynaClass(class0);
      PropertyUtilsBean propertyUtilsBean0 = wrapDynaClass0.getPropertyUtilsBean();
      FastHashMap fastHashMap0 = new FastHashMap(51);
      ConvertingWrapDynaBean convertingWrapDynaBean0 = new ConvertingWrapDynaBean(fastHashMap0);
      try { 
        propertyUtilsBean0.getSimpleProperty(convertingWrapDynaBean0, ""i0)s>g"");
        fail(""Expecting exception: NoSuchMethodException"");
      } catch(NoSuchMethodException e) {
         //
         // Unknown property 'i0)s>g' on dynaclass 'org.apache.commons.beanutils.WrapDynaClass@15'
         //
         verifyException(""org.apache.commons.beanutils.PropertyUtilsBean"", e);
      }
  }"
913,"    public Object getSimpleProperty(final Object bean, final String name)
            throws IllegalAccessException, InvocationTargetException,
            NoSuchMethodException {

        if (bean == null) {
            throw new IllegalArgumentException(""No bean specified"");
        }
        if (name == null) {
            throw new IllegalArgumentException(""No name specified for bean class '"" +
                    bean.getClass() + ""'"");
        }

        // Validate the syntax of the property name
        if (resolver.hasNested(name)) {
            throw new IllegalArgumentException
                    (""Nested property names are not allowed: Property '"" +
                    name + ""' on bean class '"" + bean.getClass() + ""'"");
        } else if (resolver.isIndexed(name)) {
            throw new IllegalArgumentException
                    (""Indexed property names are not allowed: Property '"" +
                    name + ""' on bean class '"" + bean.getClass() + ""'"");
        } else if (resolver.isMapped(name)) {
            throw new IllegalArgumentException
                    (""Mapped property names are not allowed: Property '"" +
                    name + ""' on bean class '"" + bean.getClass() + ""'"");
        }

        // Handle DynaBean instances specially
        if (bean instanceof DynaBean) {
            final DynaProperty descriptor =
                    ((DynaBean) bean).getDynaClass().getDynaProperty(name);
            if (descriptor == null) {
                throw new NoSuchMethodException(""Unknown property '"" +
                        name + ""' on dynaclass '"" +
                        ((DynaBean) bean).getDynaClass() + ""'"" );
            }
            return (((DynaBean) bean).get(name));
        }

        // Retrieve the property getter method for the specified property
        final PropertyDescriptor descriptor =
                getPropertyDescriptor(bean, name);
        if (descriptor == null) {
            throw new NoSuchMethodException(""Unknown property '"" +
                    name + ""' on class '"" + bean.getClass() + ""'"" );
        }
        final Method readMethod = getReadMethod(bean.getClass(), descriptor);
        if (readMethod == null) {
            throw new NoSuchMethodException(""Property '"" + name +
                    ""' has no getter method in class '"" + bean.getClass() + ""'"");
        }

        // Call the property getter and return the value
        final Object value = invokeMethod(readMethod, bean, EMPTY_OBJECT_ARRAY);
        return (value);

    }","  public void test88()  throws Throwable  {
      PropertyUtilsBean propertyUtilsBean0 = new PropertyUtilsBean();
      SuppressPropertiesBeanIntrospector suppressPropertiesBeanIntrospector0 = SuppressPropertiesBeanIntrospector.SUPPRESS_CLASS;
      // Undeclared exception!
      try { 
        propertyUtilsBean0.getSimpleProperty(suppressPropertiesBeanIntrospector0, ""T*bV{1R/Mer1{|(t"");
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Mapped property names are not allowed: Property 'T*bV{1R/Mer1{|(t' on bean class 'class org.apache.commons.beanutils.SuppressPropertiesBeanIntrospector'
         //
         verifyException(""org.apache.commons.beanutils.PropertyUtilsBean"", e);
      }
  }"
914,"    public Object getSimpleProperty(final Object bean, final String name)
            throws IllegalAccessException, InvocationTargetException,
            NoSuchMethodException {

        if (bean == null) {
            throw new IllegalArgumentException(""No bean specified"");
        }
        if (name == null) {
            throw new IllegalArgumentException(""No name specified for bean class '"" +
                    bean.getClass() + ""'"");
        }

        // Validate the syntax of the property name
        if (resolver.hasNested(name)) {
            throw new IllegalArgumentException
                    (""Nested property names are not allowed: Property '"" +
                    name + ""' on bean class '"" + bean.getClass() + ""'"");
        } else if (resolver.isIndexed(name)) {
            throw new IllegalArgumentException
                    (""Indexed property names are not allowed: Property '"" +
                    name + ""' on bean class '"" + bean.getClass() + ""'"");
        } else if (resolver.isMapped(name)) {
            throw new IllegalArgumentException
                    (""Mapped property names are not allowed: Property '"" +
                    name + ""' on bean class '"" + bean.getClass() + ""'"");
        }

        // Handle DynaBean instances specially
        if (bean instanceof DynaBean) {
            final DynaProperty descriptor =
                    ((DynaBean) bean).getDynaClass().getDynaProperty(name);
            if (descriptor == null) {
                throw new NoSuchMethodException(""Unknown property '"" +
                        name + ""' on dynaclass '"" +
                        ((DynaBean) bean).getDynaClass() + ""'"" );
            }
            return (((DynaBean) bean).get(name));
        }

        // Retrieve the property getter method for the specified property
        final PropertyDescriptor descriptor =
                getPropertyDescriptor(bean, name);
        if (descriptor == null) {
            throw new NoSuchMethodException(""Unknown property '"" +
                    name + ""' on class '"" + bean.getClass() + ""'"" );
        }
        final Method readMethod = getReadMethod(bean.getClass(), descriptor);
        if (readMethod == null) {
            throw new NoSuchMethodException(""Property '"" + name +
                    ""' has no getter method in class '"" + bean.getClass() + ""'"");
        }

        // Call the property getter and return the value
        final Object value = invokeMethod(readMethod, bean, EMPTY_OBJECT_ARRAY);
        return (value);

    }","  public void test89()  throws Throwable  {
      PropertyUtilsBean propertyUtilsBean0 = PropertyUtilsBean.getInstance();
      Class<ResultSetIterator> class0 = ResultSetIterator.class;
      WrapDynaClass wrapDynaClass0 = WrapDynaClass.createDynaClass(class0, propertyUtilsBean0);
      // Undeclared exception!
      try { 
        propertyUtilsBean0.getSimpleProperty(wrapDynaClass0, ""&|;%mY[hd|p'"");
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Indexed property names are not allowed: Property '&|;%mY[hd|p'' on bean class 'class org.apache.commons.beanutils.WrapDynaClass'
         //
         verifyException(""org.apache.commons.beanutils.PropertyUtilsBean"", e);
      }
  }"
915,"    public Object getSimpleProperty(final Object bean, final String name)
            throws IllegalAccessException, InvocationTargetException,
            NoSuchMethodException {

        if (bean == null) {
            throw new IllegalArgumentException(""No bean specified"");
        }
        if (name == null) {
            throw new IllegalArgumentException(""No name specified for bean class '"" +
                    bean.getClass() + ""'"");
        }

        // Validate the syntax of the property name
        if (resolver.hasNested(name)) {
            throw new IllegalArgumentException
                    (""Nested property names are not allowed: Property '"" +
                    name + ""' on bean class '"" + bean.getClass() + ""'"");
        } else if (resolver.isIndexed(name)) {
            throw new IllegalArgumentException
                    (""Indexed property names are not allowed: Property '"" +
                    name + ""' on bean class '"" + bean.getClass() + ""'"");
        } else if (resolver.isMapped(name)) {
            throw new IllegalArgumentException
                    (""Mapped property names are not allowed: Property '"" +
                    name + ""' on bean class '"" + bean.getClass() + ""'"");
        }

        // Handle DynaBean instances specially
        if (bean instanceof DynaBean) {
            final DynaProperty descriptor =
                    ((DynaBean) bean).getDynaClass().getDynaProperty(name);
            if (descriptor == null) {
                throw new NoSuchMethodException(""Unknown property '"" +
                        name + ""' on dynaclass '"" +
                        ((DynaBean) bean).getDynaClass() + ""'"" );
            }
            return (((DynaBean) bean).get(name));
        }

        // Retrieve the property getter method for the specified property
        final PropertyDescriptor descriptor =
                getPropertyDescriptor(bean, name);
        if (descriptor == null) {
            throw new NoSuchMethodException(""Unknown property '"" +
                    name + ""' on class '"" + bean.getClass() + ""'"" );
        }
        final Method readMethod = getReadMethod(bean.getClass(), descriptor);
        if (readMethod == null) {
            throw new NoSuchMethodException(""Property '"" + name +
                    ""' has no getter method in class '"" + bean.getClass() + ""'"");
        }

        // Call the property getter and return the value
        final Object value = invokeMethod(readMethod, bean, EMPTY_OBJECT_ARRAY);
        return (value);

    }","  public void test90()  throws Throwable  {
      Class<String> class0 = String.class;
      PropertyUtilsBean propertyUtilsBean0 = PropertyUtilsBean.getInstance();
      // Undeclared exception!
      try { 
        propertyUtilsBean0.getSimpleProperty(class0, ""org.apache.commons.collections.FastHashMap"");
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Nested property names are not allowed: Property 'org.apache.commons.collections.FastHashMap' on bean class 'class java.lang.Class'
         //
         verifyException(""org.apache.commons.beanutils.PropertyUtilsBean"", e);
      }
  }"
916,"    public Object getSimpleProperty(final Object bean, final String name)
            throws IllegalAccessException, InvocationTargetException,
            NoSuchMethodException {

        if (bean == null) {
            throw new IllegalArgumentException(""No bean specified"");
        }
        if (name == null) {
            throw new IllegalArgumentException(""No name specified for bean class '"" +
                    bean.getClass() + ""'"");
        }

        // Validate the syntax of the property name
        if (resolver.hasNested(name)) {
            throw new IllegalArgumentException
                    (""Nested property names are not allowed: Property '"" +
                    name + ""' on bean class '"" + bean.getClass() + ""'"");
        } else if (resolver.isIndexed(name)) {
            throw new IllegalArgumentException
                    (""Indexed property names are not allowed: Property '"" +
                    name + ""' on bean class '"" + bean.getClass() + ""'"");
        } else if (resolver.isMapped(name)) {
            throw new IllegalArgumentException
                    (""Mapped property names are not allowed: Property '"" +
                    name + ""' on bean class '"" + bean.getClass() + ""'"");
        }

        // Handle DynaBean instances specially
        if (bean instanceof DynaBean) {
            final DynaProperty descriptor =
                    ((DynaBean) bean).getDynaClass().getDynaProperty(name);
            if (descriptor == null) {
                throw new NoSuchMethodException(""Unknown property '"" +
                        name + ""' on dynaclass '"" +
                        ((DynaBean) bean).getDynaClass() + ""'"" );
            }
            return (((DynaBean) bean).get(name));
        }

        // Retrieve the property getter method for the specified property
        final PropertyDescriptor descriptor =
                getPropertyDescriptor(bean, name);
        if (descriptor == null) {
            throw new NoSuchMethodException(""Unknown property '"" +
                    name + ""' on class '"" + bean.getClass() + ""'"" );
        }
        final Method readMethod = getReadMethod(bean.getClass(), descriptor);
        if (readMethod == null) {
            throw new NoSuchMethodException(""Property '"" + name +
                    ""' has no getter method in class '"" + bean.getClass() + ""'"");
        }

        // Call the property getter and return the value
        final Object value = invokeMethod(readMethod, bean, EMPTY_OBJECT_ARRAY);
        return (value);

    }","  public void test91()  throws Throwable  {
      PropertyUtilsBean propertyUtilsBean0 = PropertyUtilsBean.getInstance();
      FluentPropertyBeanIntrospector fluentPropertyBeanIntrospector0 = new FluentPropertyBeanIntrospector(""N7@5`eh*&hve"");
      // Undeclared exception!
      try { 
        propertyUtilsBean0.getSimpleProperty(fluentPropertyBeanIntrospector0, (String) null);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // No name specified for bean class 'class org.apache.commons.beanutils.FluentPropertyBeanIntrospector'
         //
         verifyException(""org.apache.commons.beanutils.PropertyUtilsBean"", e);
      }
  }"
917,"    public Object getSimpleProperty(final Object bean, final String name)
            throws IllegalAccessException, InvocationTargetException,
            NoSuchMethodException {

        if (bean == null) {
            throw new IllegalArgumentException(""No bean specified"");
        }
        if (name == null) {
            throw new IllegalArgumentException(""No name specified for bean class '"" +
                    bean.getClass() + ""'"");
        }

        // Validate the syntax of the property name
        if (resolver.hasNested(name)) {
            throw new IllegalArgumentException
                    (""Nested property names are not allowed: Property '"" +
                    name + ""' on bean class '"" + bean.getClass() + ""'"");
        } else if (resolver.isIndexed(name)) {
            throw new IllegalArgumentException
                    (""Indexed property names are not allowed: Property '"" +
                    name + ""' on bean class '"" + bean.getClass() + ""'"");
        } else if (resolver.isMapped(name)) {
            throw new IllegalArgumentException
                    (""Mapped property names are not allowed: Property '"" +
                    name + ""' on bean class '"" + bean.getClass() + ""'"");
        }

        // Handle DynaBean instances specially
        if (bean instanceof DynaBean) {
            final DynaProperty descriptor =
                    ((DynaBean) bean).getDynaClass().getDynaProperty(name);
            if (descriptor == null) {
                throw new NoSuchMethodException(""Unknown property '"" +
                        name + ""' on dynaclass '"" +
                        ((DynaBean) bean).getDynaClass() + ""'"" );
            }
            return (((DynaBean) bean).get(name));
        }

        // Retrieve the property getter method for the specified property
        final PropertyDescriptor descriptor =
                getPropertyDescriptor(bean, name);
        if (descriptor == null) {
            throw new NoSuchMethodException(""Unknown property '"" +
                    name + ""' on class '"" + bean.getClass() + ""'"" );
        }
        final Method readMethod = getReadMethod(bean.getClass(), descriptor);
        if (readMethod == null) {
            throw new NoSuchMethodException(""Property '"" + name +
                    ""' has no getter method in class '"" + bean.getClass() + ""'"");
        }

        // Call the property getter and return the value
        final Object value = invokeMethod(readMethod, bean, EMPTY_OBJECT_ARRAY);
        return (value);

    }","  public void test92()  throws Throwable  {
      PropertyUtilsBean propertyUtilsBean0 = new PropertyUtilsBean();
      // Undeclared exception!
      try { 
        propertyUtilsBean0.getSimpleProperty((Object) null, """");
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // No bean specified
         //
         verifyException(""org.apache.commons.beanutils.PropertyUtilsBean"", e);
      }
  }"
918,"    public Class<?> getPropertyType(Object bean, String name)
            throws IllegalAccessException, InvocationTargetException,
            NoSuchMethodException {

        if (bean == null) {
            throw new IllegalArgumentException(""No bean specified"");
        }
        if (name == null) {
            throw new IllegalArgumentException(""No name specified for bean class '"" +
                    bean.getClass() + ""'"");
        }

        // Resolve nested references
        while (resolver.hasNested(name)) {
            final String next = resolver.next(name);
            final Object nestedBean = getProperty(bean, next);
            if (nestedBean == null) {
                throw new NestedNullException
                        (""Null property value for '"" + next +
                        ""' on bean class '"" + bean.getClass() + ""'"");
            }
            bean = nestedBean;
            name = resolver.remove(name);
        }

        // Remove any subscript from the final name value
        name = resolver.getProperty(name);

        // Special handling for DynaBeans
        if (bean instanceof DynaBean) {
            final DynaProperty descriptor =
                    ((DynaBean) bean).getDynaClass().getDynaProperty(name);
            if (descriptor == null) {
                return (null);
            }
            final Class<?> type = descriptor.getType();
            if (type == null) {
                return (null);
            } else if (type.isArray()) {
                return (type.getComponentType());
            } else {
                return (type);
            }
        }

        final PropertyDescriptor descriptor =
                getPropertyDescriptor(bean, name);
        if (descriptor == null) {
            return (null);
        } else if (descriptor instanceof IndexedPropertyDescriptor) {
            return (((IndexedPropertyDescriptor) descriptor).
                    getIndexedPropertyType());
        } else if (descriptor instanceof MappedPropertyDescriptor) {
            return (((MappedPropertyDescriptor) descriptor).
                    getMappedPropertyType());
        } else {
            return (descriptor.getPropertyType());
        }

    }","  public void test93()  throws Throwable  {
      PropertyUtilsBean propertyUtilsBean0 = PropertyUtilsBean.getInstance();
      ConvertingWrapDynaBean convertingWrapDynaBean0 = new ConvertingWrapDynaBean(propertyUtilsBean0);
      Class<?> class0 = propertyUtilsBean0.getPropertyType(convertingWrapDynaBean0, ""iOgq{>Q7I! FxP\"":bE\"""");
}"
919,"    public Class<?> getPropertyType(Object bean, String name)
            throws IllegalAccessException, InvocationTargetException,
            NoSuchMethodException {

        if (bean == null) {
            throw new IllegalArgumentException(""No bean specified"");
        }
        if (name == null) {
            throw new IllegalArgumentException(""No name specified for bean class '"" +
                    bean.getClass() + ""'"");
        }

        // Resolve nested references
        while (resolver.hasNested(name)) {
            final String next = resolver.next(name);
            final Object nestedBean = getProperty(bean, next);
            if (nestedBean == null) {
                throw new NestedNullException
                        (""Null property value for '"" + next +
                        ""' on bean class '"" + bean.getClass() + ""'"");
            }
            bean = nestedBean;
            name = resolver.remove(name);
        }

        // Remove any subscript from the final name value
        name = resolver.getProperty(name);

        // Special handling for DynaBeans
        if (bean instanceof DynaBean) {
            final DynaProperty descriptor =
                    ((DynaBean) bean).getDynaClass().getDynaProperty(name);
            if (descriptor == null) {
                return (null);
            }
            final Class<?> type = descriptor.getType();
            if (type == null) {
                return (null);
            } else if (type.isArray()) {
                return (type.getComponentType());
            } else {
                return (type);
            }
        }

        final PropertyDescriptor descriptor =
                getPropertyDescriptor(bean, name);
        if (descriptor == null) {
            return (null);
        } else if (descriptor instanceof IndexedPropertyDescriptor) {
            return (((IndexedPropertyDescriptor) descriptor).
                    getIndexedPropertyType());
        } else if (descriptor instanceof MappedPropertyDescriptor) {
            return (((MappedPropertyDescriptor) descriptor).
                    getMappedPropertyType());
        } else {
            return (descriptor.getPropertyType());
        }

    }","  public void test94()  throws Throwable  {
      PropertyUtilsBean propertyUtilsBean0 = new PropertyUtilsBean();
      SuppressPropertiesBeanIntrospector suppressPropertiesBeanIntrospector0 = SuppressPropertiesBeanIntrospector.SUPPRESS_CLASS;
      try { 
        propertyUtilsBean0.getPropertyType(suppressPropertiesBeanIntrospector0, ""org.apache.commons.beanutils.WrapDynaClass$CacheKey"");
        fail(""Expecting exception: NoSuchMethodException"");
      } catch(NoSuchMethodException e) {
         //
         // Unknown property 'org' on class 'class org.apache.commons.beanutils.SuppressPropertiesBeanIntrospector'
         //
         verifyException(""org.apache.commons.beanutils.PropertyUtilsBean"", e);
      }
  }"
920,"    public Class<?> getPropertyType(Object bean, String name)
            throws IllegalAccessException, InvocationTargetException,
            NoSuchMethodException {

        if (bean == null) {
            throw new IllegalArgumentException(""No bean specified"");
        }
        if (name == null) {
            throw new IllegalArgumentException(""No name specified for bean class '"" +
                    bean.getClass() + ""'"");
        }

        // Resolve nested references
        while (resolver.hasNested(name)) {
            final String next = resolver.next(name);
            final Object nestedBean = getProperty(bean, next);
            if (nestedBean == null) {
                throw new NestedNullException
                        (""Null property value for '"" + next +
                        ""' on bean class '"" + bean.getClass() + ""'"");
            }
            bean = nestedBean;
            name = resolver.remove(name);
        }

        // Remove any subscript from the final name value
        name = resolver.getProperty(name);

        // Special handling for DynaBeans
        if (bean instanceof DynaBean) {
            final DynaProperty descriptor =
                    ((DynaBean) bean).getDynaClass().getDynaProperty(name);
            if (descriptor == null) {
                return (null);
            }
            final Class<?> type = descriptor.getType();
            if (type == null) {
                return (null);
            } else if (type.isArray()) {
                return (type.getComponentType());
            } else {
                return (type);
            }
        }

        final PropertyDescriptor descriptor =
                getPropertyDescriptor(bean, name);
        if (descriptor == null) {
            return (null);
        } else if (descriptor instanceof IndexedPropertyDescriptor) {
            return (((IndexedPropertyDescriptor) descriptor).
                    getIndexedPropertyType());
        } else if (descriptor instanceof MappedPropertyDescriptor) {
            return (((MappedPropertyDescriptor) descriptor).
                    getMappedPropertyType());
        } else {
            return (descriptor.getPropertyType());
        }

    }","  public void test95()  throws Throwable  {
      PropertyUtilsBean propertyUtilsBean0 = PropertyUtilsBean.getInstance();
      Class<Integer> class0 = Integer.class;
      // Undeclared exception!
      try { 
        propertyUtilsBean0.getPropertyType(class0, (String) null);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // No name specified for bean class 'class java.lang.Class'
         //
         verifyException(""org.apache.commons.beanutils.PropertyUtilsBean"", e);
      }
  }"
921,"    public Class<?> getPropertyType(Object bean, String name)
            throws IllegalAccessException, InvocationTargetException,
            NoSuchMethodException {

        if (bean == null) {
            throw new IllegalArgumentException(""No bean specified"");
        }
        if (name == null) {
            throw new IllegalArgumentException(""No name specified for bean class '"" +
                    bean.getClass() + ""'"");
        }

        // Resolve nested references
        while (resolver.hasNested(name)) {
            final String next = resolver.next(name);
            final Object nestedBean = getProperty(bean, next);
            if (nestedBean == null) {
                throw new NestedNullException
                        (""Null property value for '"" + next +
                        ""' on bean class '"" + bean.getClass() + ""'"");
            }
            bean = nestedBean;
            name = resolver.remove(name);
        }

        // Remove any subscript from the final name value
        name = resolver.getProperty(name);

        // Special handling for DynaBeans
        if (bean instanceof DynaBean) {
            final DynaProperty descriptor =
                    ((DynaBean) bean).getDynaClass().getDynaProperty(name);
            if (descriptor == null) {
                return (null);
            }
            final Class<?> type = descriptor.getType();
            if (type == null) {
                return (null);
            } else if (type.isArray()) {
                return (type.getComponentType());
            } else {
                return (type);
            }
        }

        final PropertyDescriptor descriptor =
                getPropertyDescriptor(bean, name);
        if (descriptor == null) {
            return (null);
        } else if (descriptor instanceof IndexedPropertyDescriptor) {
            return (((IndexedPropertyDescriptor) descriptor).
                    getIndexedPropertyType());
        } else if (descriptor instanceof MappedPropertyDescriptor) {
            return (((MappedPropertyDescriptor) descriptor).
                    getMappedPropertyType());
        } else {
            return (descriptor.getPropertyType());
        }

    }","  public void test96()  throws Throwable  {
      PropertyUtilsBean propertyUtilsBean0 = PropertyUtilsBean.getInstance();
      // Undeclared exception!
      try { 
        propertyUtilsBean0.getPropertyType((Object) null, (String) null);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // No bean specified
         //
         verifyException(""org.apache.commons.beanutils.PropertyUtilsBean"", e);
      }
  }"
922,"    public Class<?> getPropertyType(Object bean, String name)
            throws IllegalAccessException, InvocationTargetException,
            NoSuchMethodException {

        if (bean == null) {
            throw new IllegalArgumentException(""No bean specified"");
        }
        if (name == null) {
            throw new IllegalArgumentException(""No name specified for bean class '"" +
                    bean.getClass() + ""'"");
        }

        // Resolve nested references
        while (resolver.hasNested(name)) {
            final String next = resolver.next(name);
            final Object nestedBean = getProperty(bean, next);
            if (nestedBean == null) {
                throw new NestedNullException
                        (""Null property value for '"" + next +
                        ""' on bean class '"" + bean.getClass() + ""'"");
            }
            bean = nestedBean;
            name = resolver.remove(name);
        }

        // Remove any subscript from the final name value
        name = resolver.getProperty(name);

        // Special handling for DynaBeans
        if (bean instanceof DynaBean) {
            final DynaProperty descriptor =
                    ((DynaBean) bean).getDynaClass().getDynaProperty(name);
            if (descriptor == null) {
                return (null);
            }
            final Class<?> type = descriptor.getType();
            if (type == null) {
                return (null);
            } else if (type.isArray()) {
                return (type.getComponentType());
            } else {
                return (type);
            }
        }

        final PropertyDescriptor descriptor =
                getPropertyDescriptor(bean, name);
        if (descriptor == null) {
            return (null);
        } else if (descriptor instanceof IndexedPropertyDescriptor) {
            return (((IndexedPropertyDescriptor) descriptor).
                    getIndexedPropertyType());
        } else if (descriptor instanceof MappedPropertyDescriptor) {
            return (((MappedPropertyDescriptor) descriptor).
                    getMappedPropertyType());
        } else {
            return (descriptor.getPropertyType());
        }

    }","  public void test97()  throws Throwable  {
      PropertyUtilsBean propertyUtilsBean0 = new PropertyUtilsBean();
      Class<?> class0 = propertyUtilsBean0.getPropertyType("" on bean clas "", ""{)qCY:"");
}"
923,"    public Class<?> getPropertyEditorClass(final Object bean, final String name)
            throws IllegalAccessException, InvocationTargetException,
            NoSuchMethodException {

        if (bean == null) {
            throw new IllegalArgumentException(""No bean specified"");
        }
        if (name == null) {
            throw new IllegalArgumentException(""No name specified for bean class '"" +
                    bean.getClass() + ""'"");
        }

        final PropertyDescriptor descriptor =
                getPropertyDescriptor(bean, name);
        if (descriptor != null) {
            return (descriptor.getPropertyEditorClass());
        } else {
            return (null);
        }

    }","  public void test98()  throws Throwable  {
      PropertyUtilsBean propertyUtilsBean0 = new PropertyUtilsBean();
      IndexOutOfBoundsException indexOutOfBoundsException0 = new IndexOutOfBoundsException((String) null);
      // Undeclared exception!
      try { 
        propertyUtilsBean0.getPropertyEditorClass(indexOutOfBoundsException0, (String) null);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // No name specified for bean class 'class java.lang.IndexOutOfBoundsException'
         //
         verifyException(""org.apache.commons.beanutils.PropertyUtilsBean"", e);
      }
  }"
924,"    public PropertyDescriptor[]
            getPropertyDescriptors(final Class<?> beanClass) {

        return getIntrospectionData(beanClass).getDescriptors();

    }","  public void test99()  throws Throwable  {
      PropertyUtilsBean propertyUtilsBean0 = new PropertyUtilsBean();
      // Undeclared exception!
      try { 
        propertyUtilsBean0.getPropertyDescriptors((Object) null);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // No bean specified
         //
         verifyException(""org.apache.commons.beanutils.PropertyUtilsBean"", e);
      }
  }"
925,"    public Map<String, Object> describe(final Object bean)
            throws IllegalAccessException, InvocationTargetException,
            NoSuchMethodException {

        if (bean == null) {
            throw new IllegalArgumentException(""No bean specified"");
        }
        final Map<String, Object> description = new HashMap<String, Object>();
        if (bean instanceof DynaBean) {
            final DynaProperty[] descriptors =
                ((DynaBean) bean).getDynaClass().getDynaProperties();
            for (DynaProperty descriptor : descriptors) {
                final String name = descriptor.getName();
                description.put(name, getProperty(bean, name));
            }
        } else {
            final PropertyDescriptor[] descriptors =
                getPropertyDescriptors(bean);
            for (PropertyDescriptor descriptor : descriptors) {
                final String name = descriptor.getName();
                if (descriptor.getReadMethod() != null) {
                    description.put(name, getProperty(bean, name));
                }
            }
        }
        return (description);

    }","  public void test100()  throws Throwable  {
      PropertyUtilsBean propertyUtilsBean0 = new PropertyUtilsBean();
      Class<WrapDynaBean> class0 = WrapDynaBean.class;
      ConvertingWrapDynaBean convertingWrapDynaBean0 = new ConvertingWrapDynaBean(class0);
      WrapDynaClass wrapDynaClass0 = WrapDynaClass.createDynaClass(class0);
      convertingWrapDynaBean0.dynaClass = wrapDynaClass0;
      // Undeclared exception!
      try { 
        propertyUtilsBean0.describe(convertingWrapDynaBean0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Error reading property 'instance', exception - java.lang.NoSuchMethodException: Property 'instance' has no getter method in class 'class java.lang.Class'
         //
         verifyException(""org.apache.commons.beanutils.WrapDynaBean"", e);
      }
  }"
926,"    public PropertyDescriptor getPropertyDescriptor(Object bean,
                                                           String name)
            throws IllegalAccessException, InvocationTargetException,
            NoSuchMethodException {

        if (bean == null) {
            throw new IllegalArgumentException(""No bean specified"");
        }
        if (name == null) {
            throw new IllegalArgumentException(""No name specified for bean class '"" +
                    bean.getClass() + ""'"");
        }

        // Resolve nested references
        while (resolver.hasNested(name)) {
            final String next = resolver.next(name);
            final Object nestedBean = getProperty(bean, next);
            if (nestedBean == null) {
                throw new NestedNullException
                        (""Null property value for '"" + next +
                        ""' on bean class '"" + bean.getClass() + ""'"");
            }
            bean = nestedBean;
            name = resolver.remove(name);
        }

        // Remove any subscript from the final name value
        name = resolver.getProperty(name);

        // Look up and return this property from our cache
        // creating and adding it to the cache if not found.
        if (name == null) {
            return (null);
        }

        final BeanIntrospectionData data = getIntrospectionData(bean.getClass());
        PropertyDescriptor result = data.getDescriptor(name);
        if (result != null) {
            return result;
        }

        FastHashMap mappedDescriptors =
                getMappedPropertyDescriptors(bean);
        if (mappedDescriptors == null) {
            mappedDescriptors = new FastHashMap();
            mappedDescriptors.setFast(true);
            mappedDescriptorsCache.put(bean.getClass(), mappedDescriptors);
        }
        result = (PropertyDescriptor) mappedDescriptors.get(name);
        if (result == null) {
            // not found, try to create it
            try {
                result = new MappedPropertyDescriptor(name, bean.getClass());
            } catch (final IntrospectionException ie) {
                /* Swallow IntrospectionException
                 * TODO: Why?
                 */
            }
            if (result != null) {
                mappedDescriptors.put(name, result);
            }
        }

        return result;

    }","  public void test101()  throws Throwable  {
      PropertyUtilsBean propertyUtilsBean0 = PropertyUtilsBean.getInstance();
      Integer integer0 = LazyDynaBean.Integer_ZERO;
      Map<String, Object> map0 = propertyUtilsBean0.describe(integer0);
      // Undeclared exception!
      try { 
        propertyUtilsBean0.getPropertyDescriptor(map0, (String) null);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // No name specified for bean class 'class java.util.HashMap'
         //
         verifyException(""org.apache.commons.beanutils.PropertyUtilsBean"", e);
      }
  }"
927,"    protected Object getPropertyOfMapBean(final Map<?, ?> bean, String propertyName)
        throws IllegalArgumentException, IllegalAccessException,
        InvocationTargetException, NoSuchMethodException {

        if (resolver.isMapped(propertyName)) {
            final String name = resolver.getProperty(propertyName);
            if (name == null || name.length() == 0) {
                propertyName = resolver.getKey(propertyName);
            }
        }

        if (resolver.isIndexed(propertyName) ||
            resolver.isMapped(propertyName)) {
            throw new IllegalArgumentException(
                    ""Indexed or mapped properties are not supported on""
                    + "" objects of type Map: "" + propertyName);
        }

        return bean.get(propertyName);
    }","  public void test102()  throws Throwable  {
      PropertyUtilsBean propertyUtilsBean0 = PropertyUtilsBean.getInstance();
      try { 
        propertyUtilsBean0.getPropertyOfMapBean((Map<?, ?>) null, ""fb[FL.:NY% ~Z/w"");
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Indexed or mapped properties are not supported on objects of type Map: fb[FL.:NY% ~Z/w
         //
         verifyException(""org.apache.commons.beanutils.PropertyUtilsBean"", e);
      }
  }"
928,"    protected Object getPropertyOfMapBean(final Map<?, ?> bean, String propertyName)
        throws IllegalArgumentException, IllegalAccessException,
        InvocationTargetException, NoSuchMethodException {

        if (resolver.isMapped(propertyName)) {
            final String name = resolver.getProperty(propertyName);
            if (name == null || name.length() == 0) {
                propertyName = resolver.getKey(propertyName);
            }
        }

        if (resolver.isIndexed(propertyName) ||
            resolver.isMapped(propertyName)) {
            throw new IllegalArgumentException(
                    ""Indexed or mapped properties are not supported on""
                    + "" objects of type Map: "" + propertyName);
        }

        return bean.get(propertyName);
    }","  public void test103()  throws Throwable  {
      Class<DefaultBeanIntrospector> class0 = DefaultBeanIntrospector.class;
      WrapDynaClass wrapDynaClass0 = WrapDynaClass.createDynaClass(class0);
      PropertyUtilsBean propertyUtilsBean0 = wrapDynaClass0.getPropertyUtilsBean();
      FastHashMap fastHashMap0 = new FastHashMap(0);
      try { 
        propertyUtilsBean0.getPropertyOfMapBean(fastHashMap0, "" (class "");
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Indexed or mapped properties are not supported on objects of type Map:  (class 
         //
         verifyException(""org.apache.commons.beanutils.PropertyUtilsBean"", e);
      }
  }"
929,"    public Object getNestedProperty(Object bean, String name)
            throws IllegalAccessException, InvocationTargetException,
            NoSuchMethodException {

        if (bean == null) {
            throw new IllegalArgumentException(""No bean specified"");
        }
        if (name == null) {
            throw new IllegalArgumentException(""No name specified for bean class '"" +
                    bean.getClass() + ""'"");
        }

        // Resolve nested references
        while (resolver.hasNested(name)) {
            final String next = resolver.next(name);
            Object nestedBean = null;
            if (bean instanceof Map) {
                nestedBean = getPropertyOfMapBean((Map<?, ?>) bean, next);
            } else if (resolver.isMapped(next)) {
                nestedBean = getMappedProperty(bean, next);
            } else if (resolver.isIndexed(next)) {
                nestedBean = getIndexedProperty(bean, next);
            } else {
                nestedBean = getSimpleProperty(bean, next);
            }
            if (nestedBean == null) {
                throw new NestedNullException
                        (""Null property value for '"" + name +
                        ""' on bean class '"" + bean.getClass() + ""'"");
            }
            bean = nestedBean;
            name = resolver.remove(name);
        }

        if (bean instanceof Map) {
            bean = getPropertyOfMapBean((Map<?, ?>) bean, name);
        } else if (resolver.isMapped(name)) {
            bean = getMappedProperty(bean, name);
        } else if (resolver.isIndexed(name)) {
            bean = getIndexedProperty(bean, name);
        } else {
            bean = getSimpleProperty(bean, name);
        }
        return bean;

    }","  public void test104()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      PropertyUtilsBean propertyUtilsBean0 = PropertyUtilsBean.getInstance();
      // Undeclared exception!
      try { 
        propertyUtilsBean0.getNestedProperty(fileSystemHandling0, ""2Xlh<[V~[I@x~oX:i"");
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Invalid indexed property '2Xlh<[V~[I@x~oX:i' on bean class 'class org.evosuite.runtime.testdata.FileSystemHandling' Missing End Delimiter
         //
         verifyException(""org.apache.commons.beanutils.PropertyUtilsBean"", e);
      }
  }"
930,"    public Map<String, Object> describe(final Object bean)
            throws IllegalAccessException, InvocationTargetException,
            NoSuchMethodException {

        if (bean == null) {
            throw new IllegalArgumentException(""No bean specified"");
        }
        final Map<String, Object> description = new HashMap<String, Object>();
        if (bean instanceof DynaBean) {
            final DynaProperty[] descriptors =
                ((DynaBean) bean).getDynaClass().getDynaProperties();
            for (DynaProperty descriptor : descriptors) {
                final String name = descriptor.getName();
                description.put(name, getProperty(bean, name));
            }
        } else {
            final PropertyDescriptor[] descriptors =
                getPropertyDescriptors(bean);
            for (PropertyDescriptor descriptor : descriptors) {
                final String name = descriptor.getName();
                if (descriptor.getReadMethod() != null) {
                    description.put(name, getProperty(bean, name));
                }
            }
        }
        return (description);

    }","  public void test105()  throws Throwable  {
      PropertyUtilsBean propertyUtilsBean0 = new PropertyUtilsBean();
      Class<WrapDynaBean> class0 = WrapDynaBean.class;
      ConvertingWrapDynaBean convertingWrapDynaBean0 = new ConvertingWrapDynaBean(class0);
      propertyUtilsBean0.describe(convertingWrapDynaBean0);
  }"
931,"    public Object getNestedProperty(Object bean, String name)
            throws IllegalAccessException, InvocationTargetException,
            NoSuchMethodException {

        if (bean == null) {
            throw new IllegalArgumentException(""No bean specified"");
        }
        if (name == null) {
            throw new IllegalArgumentException(""No name specified for bean class '"" +
                    bean.getClass() + ""'"");
        }

        // Resolve nested references
        while (resolver.hasNested(name)) {
            final String next = resolver.next(name);
            Object nestedBean = null;
            if (bean instanceof Map) {
                nestedBean = getPropertyOfMapBean((Map<?, ?>) bean, next);
            } else if (resolver.isMapped(next)) {
                nestedBean = getMappedProperty(bean, next);
            } else if (resolver.isIndexed(next)) {
                nestedBean = getIndexedProperty(bean, next);
            } else {
                nestedBean = getSimpleProperty(bean, next);
            }
            if (nestedBean == null) {
                throw new NestedNullException
                        (""Null property value for '"" + name +
                        ""' on bean class '"" + bean.getClass() + ""'"");
            }
            bean = nestedBean;
            name = resolver.remove(name);
        }

        if (bean instanceof Map) {
            bean = getPropertyOfMapBean((Map<?, ?>) bean, name);
        } else if (resolver.isMapped(name)) {
            bean = getMappedProperty(bean, name);
        } else if (resolver.isIndexed(name)) {
            bean = getIndexedProperty(bean, name);
        } else {
            bean = getSimpleProperty(bean, name);
        }
        return bean;

    }","  public void test106()  throws Throwable  {
      PropertyUtilsBean propertyUtilsBean0 = new PropertyUtilsBean();
      try { 
        propertyUtilsBean0.getNestedProperty(""EH 2"", ""org.apache.commons.beanutils.expression.DefaultResolver"");
        fail(""Expecting exception: NoSuchMethodException"");
      } catch(NoSuchMethodException e) {
         //
         // Unknown property 'org' on class 'class java.lang.String'
         //
         verifyException(""org.apache.commons.beanutils.PropertyUtilsBean"", e);
      }
  }"
932,"    public Object getNestedProperty(Object bean, String name)
            throws IllegalAccessException, InvocationTargetException,
            NoSuchMethodException {

        if (bean == null) {
            throw new IllegalArgumentException(""No bean specified"");
        }
        if (name == null) {
            throw new IllegalArgumentException(""No name specified for bean class '"" +
                    bean.getClass() + ""'"");
        }

        // Resolve nested references
        while (resolver.hasNested(name)) {
            final String next = resolver.next(name);
            Object nestedBean = null;
            if (bean instanceof Map) {
                nestedBean = getPropertyOfMapBean((Map<?, ?>) bean, next);
            } else if (resolver.isMapped(next)) {
                nestedBean = getMappedProperty(bean, next);
            } else if (resolver.isIndexed(next)) {
                nestedBean = getIndexedProperty(bean, next);
            } else {
                nestedBean = getSimpleProperty(bean, next);
            }
            if (nestedBean == null) {
                throw new NestedNullException
                        (""Null property value for '"" + name +
                        ""' on bean class '"" + bean.getClass() + ""'"");
            }
            bean = nestedBean;
            name = resolver.remove(name);
        }

        if (bean instanceof Map) {
            bean = getPropertyOfMapBean((Map<?, ?>) bean, name);
        } else if (resolver.isMapped(name)) {
            bean = getMappedProperty(bean, name);
        } else if (resolver.isIndexed(name)) {
            bean = getIndexedProperty(bean, name);
        } else {
            bean = getSimpleProperty(bean, name);
        }
        return bean;

    }","  public void test107()  throws Throwable  {
      PropertyUtilsBean propertyUtilsBean0 = PropertyUtilsBean.getInstance();
      String string0 = "".PKW?O@NZz"";
      String string1 = ""org.apa9he.commons.beanutils.ConvertingWrapDynaBean"";
      propertyUtilsBean0.isWriteable("".PKW?O@NZz"", ""org.apa9he.commons.beanutils.ConvertingWrapDynaBean"");
      Class<SuppressPropertiesBeanIntrospector> class0 = SuppressPropertiesBeanIntrospector.class;
      FastHashMap fastHashMap0 = propertyUtilsBean0.getMappedPropertyDescriptors(class0);
      String string2 = ""org.apache.commons.beanutils.WeakFastHashMap"";
      // Undeclared exception!
      try { 
        propertyUtilsBean0.getNestedProperty(fastHashMap0, ""org.apa9he.commons.beanutils.ConvertingWrapDynaBean"");
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Null property value for 'org.apa9he.commons.beanutils.ConvertingWrapDynaBean' on bean class 'class org.apache.commons.collections.FastHashMap'
         //
         verifyException(""org.apache.commons.beanutils.PropertyUtilsBean"", e);
      }
  }"
933,"    public Object getNestedProperty(Object bean, String name)
            throws IllegalAccessException, InvocationTargetException,
            NoSuchMethodException {

        if (bean == null) {
            throw new IllegalArgumentException(""No bean specified"");
        }
        if (name == null) {
            throw new IllegalArgumentException(""No name specified for bean class '"" +
                    bean.getClass() + ""'"");
        }

        // Resolve nested references
        while (resolver.hasNested(name)) {
            final String next = resolver.next(name);
            Object nestedBean = null;
            if (bean instanceof Map) {
                nestedBean = getPropertyOfMapBean((Map<?, ?>) bean, next);
            } else if (resolver.isMapped(next)) {
                nestedBean = getMappedProperty(bean, next);
            } else if (resolver.isIndexed(next)) {
                nestedBean = getIndexedProperty(bean, next);
            } else {
                nestedBean = getSimpleProperty(bean, next);
            }
            if (nestedBean == null) {
                throw new NestedNullException
                        (""Null property value for '"" + name +
                        ""' on bean class '"" + bean.getClass() + ""'"");
            }
            bean = nestedBean;
            name = resolver.remove(name);
        }

        if (bean instanceof Map) {
            bean = getPropertyOfMapBean((Map<?, ?>) bean, name);
        } else if (resolver.isMapped(name)) {
            bean = getMappedProperty(bean, name);
        } else if (resolver.isIndexed(name)) {
            bean = getIndexedProperty(bean, name);
        } else {
            bean = getSimpleProperty(bean, name);
        }
        return bean;

    }","  public void test108()  throws Throwable  {
      PropertyUtilsBean propertyUtilsBean0 = PropertyUtilsBean.getInstance();
      try { 
        propertyUtilsBean0.getNestedProperty(propertyUtilsBean0, "",qORTU(tKE2)j7"");
        fail(""Expecting exception: NoSuchMethodException"");
      } catch(NoSuchMethodException e) {
         //
         // Unknown property ',qORTU'+ on bean class 'class org.apache.commons.beanutils.PropertyUtilsBean'
         //
         verifyException(""org.apache.commons.beanutils.PropertyUtilsBean"", e);
      }
  }"
934,"    public Object getNestedProperty(Object bean, String name)
            throws IllegalAccessException, InvocationTargetException,
            NoSuchMethodException {

        if (bean == null) {
            throw new IllegalArgumentException(""No bean specified"");
        }
        if (name == null) {
            throw new IllegalArgumentException(""No name specified for bean class '"" +
                    bean.getClass() + ""'"");
        }

        // Resolve nested references
        while (resolver.hasNested(name)) {
            final String next = resolver.next(name);
            Object nestedBean = null;
            if (bean instanceof Map) {
                nestedBean = getPropertyOfMapBean((Map<?, ?>) bean, next);
            } else if (resolver.isMapped(next)) {
                nestedBean = getMappedProperty(bean, next);
            } else if (resolver.isIndexed(next)) {
                nestedBean = getIndexedProperty(bean, next);
            } else {
                nestedBean = getSimpleProperty(bean, next);
            }
            if (nestedBean == null) {
                throw new NestedNullException
                        (""Null property value for '"" + name +
                        ""' on bean class '"" + bean.getClass() + ""'"");
            }
            bean = nestedBean;
            name = resolver.remove(name);
        }

        if (bean instanceof Map) {
            bean = getPropertyOfMapBean((Map<?, ?>) bean, name);
        } else if (resolver.isMapped(name)) {
            bean = getMappedProperty(bean, name);
        } else if (resolver.isIndexed(name)) {
            bean = getIndexedProperty(bean, name);
        } else {
            bean = getSimpleProperty(bean, name);
        }
        return bean;

    }","  public void test109()  throws Throwable  {
      PropertyUtilsBean propertyUtilsBean0 = PropertyUtilsBean.getInstance();
      SuppressPropertiesBeanIntrospector suppressPropertiesBeanIntrospector0 = SuppressPropertiesBeanIntrospector.SUPPRESS_CLASS;
      // Undeclared exception!
      try { 
        propertyUtilsBean0.getNestedProperty(suppressPropertiesBeanIntrospector0, (String) null);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // No name specified for bean class 'class org.apache.commons.beanutils.SuppressPropertiesBeanIntrospector'
         //
         verifyException(""org.apache.commons.beanutils.PropertyUtilsBean"", e);
      }
  }"
935,"    public Object getProperty(final Object bean, final String name)
            throws IllegalAccessException, InvocationTargetException,
            NoSuchMethodException {

        return (getNestedProperty(bean, name));

    }","  public void test110()  throws Throwable  {
      PropertyUtilsBean propertyUtilsBean0 = new PropertyUtilsBean();
      // Undeclared exception!
      try { 
        propertyUtilsBean0.getProperty((Object) null, ""kPN"");
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // No bean specified
         //
         verifyException(""org.apache.commons.beanutils.PropertyUtilsBean"", e);
      }
  }"
936,"    public FastHashMap getMappedPropertyDescriptors(final Class<?> beanClass) {

        if (beanClass == null) {
            return null;
        }

        // Look up any cached descriptors for this bean class
        return mappedDescriptorsCache.get(beanClass);

    }","  public void test111()  throws Throwable  {
      PropertyUtilsBean propertyUtilsBean0 = PropertyUtilsBean.getInstance();
      FastHashMap fastHashMap0 = propertyUtilsBean0.getMappedPropertyDescriptors((Class<?>) null);
}"
937,"    public Object getMappedProperty(final Object bean, String name)
            throws IllegalAccessException, InvocationTargetException,
            NoSuchMethodException {

        if (bean == null) {
            throw new IllegalArgumentException(""No bean specified"");
        }
        if (name == null) {
            throw new IllegalArgumentException(""No name specified for bean class '"" +
                    bean.getClass() + ""'"");
        }

        // Identify the key of the requested individual property
        String key  = null;
        try {
            key = resolver.getKey(name);
        } catch (final IllegalArgumentException e) {
            throw new IllegalArgumentException
                    (""Invalid mapped property '"" + name +
                    ""' on bean class '"" + bean.getClass() + ""' "" + e.getMessage());
        }
        if (key == null) {
            throw new IllegalArgumentException(""Invalid mapped property '"" +
                    name + ""' on bean class '"" + bean.getClass() + ""'"");
        }

        // Isolate the name
        name = resolver.getProperty(name);

        // Request the specified indexed property value
        return (getMappedProperty(bean, name, key));

    }","  public void test112()  throws Throwable  {
      PropertyUtilsBean propertyUtilsBean0 = new PropertyUtilsBean();
      ConvertingWrapDynaBean convertingWrapDynaBean0 = new ConvertingWrapDynaBean(propertyUtilsBean0);
      try { 
        propertyUtilsBean0.getMappedProperty((Object) convertingWrapDynaBean0, ""a/(=U1?B'"", """");
        fail(""Expecting exception: NoSuchMethodException"");
      } catch(NoSuchMethodException e) {
         //
         // Unknown property 'a/(=U1?B''+ on bean class 'class org.apache.commons.beanutils.ConvertingWrapDynaBean'
         //
         verifyException(""org.apache.commons.beanutils.PropertyUtilsBean"", e);
      }
  }"
938,"    public Object getMappedProperty(final Object bean, String name)
            throws IllegalAccessException, InvocationTargetException,
            NoSuchMethodException {

        if (bean == null) {
            throw new IllegalArgumentException(""No bean specified"");
        }
        if (name == null) {
            throw new IllegalArgumentException(""No name specified for bean class '"" +
                    bean.getClass() + ""'"");
        }

        // Identify the key of the requested individual property
        String key  = null;
        try {
            key = resolver.getKey(name);
        } catch (final IllegalArgumentException e) {
            throw new IllegalArgumentException
                    (""Invalid mapped property '"" + name +
                    ""' on bean class '"" + bean.getClass() + ""' "" + e.getMessage());
        }
        if (key == null) {
            throw new IllegalArgumentException(""Invalid mapped property '"" +
                    name + ""' on bean class '"" + bean.getClass() + ""'"");
        }

        // Isolate the name
        name = resolver.getProperty(name);

        // Request the specified indexed property value
        return (getMappedProperty(bean, name, key));

    }","  public void test113()  throws Throwable  {
      PropertyUtilsBean propertyUtilsBean0 = PropertyUtilsBean.getInstance();
      FluentPropertyBeanIntrospector fluentPropertyBeanIntrospector0 = new FluentPropertyBeanIntrospector();
      // Undeclared exception!
      try { 
        propertyUtilsBean0.getMappedProperty((Object) fluentPropertyBeanIntrospector0, ""H*~ Va_i2"", (String) null);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // No key specified for property 'H*~ Va_i2' on bean class class org.apache.commons.beanutils.FluentPropertyBeanIntrospector'
         //
         verifyException(""org.apache.commons.beanutils.PropertyUtilsBean"", e);
      }
  }"
939,"    public Object getMappedProperty(final Object bean, String name)
            throws IllegalAccessException, InvocationTargetException,
            NoSuchMethodException {

        if (bean == null) {
            throw new IllegalArgumentException(""No bean specified"");
        }
        if (name == null) {
            throw new IllegalArgumentException(""No name specified for bean class '"" +
                    bean.getClass() + ""'"");
        }

        // Identify the key of the requested individual property
        String key  = null;
        try {
            key = resolver.getKey(name);
        } catch (final IllegalArgumentException e) {
            throw new IllegalArgumentException
                    (""Invalid mapped property '"" + name +
                    ""' on bean class '"" + bean.getClass() + ""' "" + e.getMessage());
        }
        if (key == null) {
            throw new IllegalArgumentException(""Invalid mapped property '"" +
                    name + ""' on bean class '"" + bean.getClass() + ""'"");
        }

        // Isolate the name
        name = resolver.getProperty(name);

        // Request the specified indexed property value
        return (getMappedProperty(bean, name, key));

    }","  public void test114()  throws Throwable  {
      PropertyUtilsBean propertyUtilsBean0 = new PropertyUtilsBean();
      // Undeclared exception!
      try { 
        propertyUtilsBean0.getMappedProperty((Object) null, ""z8n=_(|dbZ}gL"", ""z8n=_(|dbZ}gL"");
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // No bean specified
         //
         verifyException(""org.apache.commons.beanutils.PropertyUtilsBean"", e);
      }
  }"
940,"    public boolean isReadable(Object bean, String name) {

        // Validate method parameters
        if (bean == null) {
            throw new IllegalArgumentException(""No bean specified"");
        }
        if (name == null) {
            throw new IllegalArgumentException(""No name specified for bean class '"" +
                    bean.getClass() + ""'"");
        }

        // Resolve nested references
        while (resolver.hasNested(name)) {
            final String next = resolver.next(name);
            Object nestedBean = null;
            try {
                nestedBean = getProperty(bean, next);
            } catch (final IllegalAccessException e) {
                return false;
            } catch (final InvocationTargetException e) {
                return false;
            } catch (final NoSuchMethodException e) {
                return false;
            }
            if (nestedBean == null) {
                throw new NestedNullException
                        (""Null property value for '"" + next +
                        ""' on bean class '"" + bean.getClass() + ""'"");
            }
            bean = nestedBean;
            name = resolver.remove(name);
        }

        // Remove any subscript from the final name value
        name = resolver.getProperty(name);

        // Treat WrapDynaBean as special case - may be a write-only property
        // (see Jira issue# BEANUTILS-61)
        if (bean instanceof WrapDynaBean) {
            bean = ((WrapDynaBean)bean).getInstance();
        }

        // Return the requested result
        if (bean instanceof DynaBean) {
            // All DynaBean properties are readable
            return (((DynaBean) bean).getDynaClass().getDynaProperty(name) != null);
        } else {
            try {
                final PropertyDescriptor desc =
                    getPropertyDescriptor(bean, name);
                if (desc != null) {
                    Method readMethod = getReadMethod(bean.getClass(), desc);
                    if (readMethod == null) {
                        if (desc instanceof IndexedPropertyDescriptor) {
                            readMethod = ((IndexedPropertyDescriptor) desc).getIndexedReadMethod();
                        } else if (desc instanceof MappedPropertyDescriptor) {
                            readMethod = ((MappedPropertyDescriptor) desc).getMappedReadMethod();
                        }
                        readMethod = MethodUtils.getAccessibleMethod(bean.getClass(), readMethod);
                    }
                    return (readMethod != null);
                } else {
                    return (false);
                }
            } catch (final IllegalAccessException e) {
                return (false);
            } catch (final InvocationTargetException e) {
                return (false);
            } catch (final NoSuchMethodException e) {
                return (false);
            }
        }

    }","  public void test115()  throws Throwable  {
      Integer integer0 = LazyDynaBean.Integer_ZERO;
      boolean boolean0 = PropertyUtils.isReadable(integer0, ""    Converted  to String using toString() '"");
}"
941,"    public Object getMappedProperty(final Object bean, String name)
            throws IllegalAccessException, InvocationTargetException,
            NoSuchMethodException {

        if (bean == null) {
            throw new IllegalArgumentException(""No bean specified"");
        }
        if (name == null) {
            throw new IllegalArgumentException(""No name specified for bean class '"" +
                    bean.getClass() + ""'"");
        }

        // Identify the key of the requested individual property
        String key  = null;
        try {
            key = resolver.getKey(name);
        } catch (final IllegalArgumentException e) {
            throw new IllegalArgumentException
                    (""Invalid mapped property '"" + name +
                    ""' on bean class '"" + bean.getClass() + ""' "" + e.getMessage());
        }
        if (key == null) {
            throw new IllegalArgumentException(""Invalid mapped property '"" +
                    name + ""' on bean class '"" + bean.getClass() + ""'"");
        }

        // Isolate the name
        name = resolver.getProperty(name);

        // Request the specified indexed property value
        return (getMappedProperty(bean, name, key));

    }","  public void test116()  throws Throwable  {
      Integer integer0 = LazyDynaBean.Integer_ZERO;
      PropertyUtilsBean propertyUtilsBean0 = PropertyUtilsBean.getInstance();
      // Undeclared exception!
      try { 
        propertyUtilsBean0.getMappedProperty((Object) integer0, (String) null);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // No name specified for bean class 'class java.lang.Integer'
         //
         verifyException(""org.apache.commons.beanutils.PropertyUtilsBean"", e);
      }
  }"
942,"    public Object getMappedProperty(final Object bean, String name)
            throws IllegalAccessException, InvocationTargetException,
            NoSuchMethodException {

        if (bean == null) {
            throw new IllegalArgumentException(""No bean specified"");
        }
        if (name == null) {
            throw new IllegalArgumentException(""No name specified for bean class '"" +
                    bean.getClass() + ""'"");
        }

        // Identify the key of the requested individual property
        String key  = null;
        try {
            key = resolver.getKey(name);
        } catch (final IllegalArgumentException e) {
            throw new IllegalArgumentException
                    (""Invalid mapped property '"" + name +
                    ""' on bean class '"" + bean.getClass() + ""' "" + e.getMessage());
        }
        if (key == null) {
            throw new IllegalArgumentException(""Invalid mapped property '"" +
                    name + ""' on bean class '"" + bean.getClass() + ""'"");
        }

        // Isolate the name
        name = resolver.getProperty(name);

        // Request the specified indexed property value
        return (getMappedProperty(bean, name, key));

    }","  public void test117()  throws Throwable  {
      PropertyUtilsBean propertyUtilsBean0 = PropertyUtilsBean.getInstance();
      // Undeclared exception!
      try { 
        propertyUtilsBean0.getMappedProperty((Object) null, ""@JN<vTn]"");
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // No bean specified
         //
         verifyException(""org.apache.commons.beanutils.PropertyUtilsBean"", e);
      }
  }"
943,"    public Object getMappedProperty(final Object bean, String name)
            throws IllegalAccessException, InvocationTargetException,
            NoSuchMethodException {

        if (bean == null) {
            throw new IllegalArgumentException(""No bean specified"");
        }
        if (name == null) {
            throw new IllegalArgumentException(""No name specified for bean class '"" +
                    bean.getClass() + ""'"");
        }

        // Identify the key of the requested individual property
        String key  = null;
        try {
            key = resolver.getKey(name);
        } catch (final IllegalArgumentException e) {
            throw new IllegalArgumentException
                    (""Invalid mapped property '"" + name +
                    ""' on bean class '"" + bean.getClass() + ""' "" + e.getMessage());
        }
        if (key == null) {
            throw new IllegalArgumentException(""Invalid mapped property '"" +
                    name + ""' on bean class '"" + bean.getClass() + ""'"");
        }

        // Isolate the name
        name = resolver.getProperty(name);

        // Request the specified indexed property value
        return (getMappedProperty(bean, name, key));

    }","  public void test118()  throws Throwable  {
      Class<ConvertingWrapDynaBean> class0 = ConvertingWrapDynaBean.class;
      PropertyUtilsBean propertyUtilsBean0 = PropertyUtilsBean.getInstance();
      // Undeclared exception!
      try { 
        propertyUtilsBean0.getMappedProperty((Object) class0, """");
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Invalid mapped property '' on bean class 'class java.lang.Class'
         //
         verifyException(""org.apache.commons.beanutils.PropertyUtilsBean"", e);
      }
  }"
944,"    public Object getIndexedProperty(final Object bean, String name)
            throws IllegalAccessException, InvocationTargetException,
            NoSuchMethodException {

        if (bean == null) {
            throw new IllegalArgumentException(""No bean specified"");
        }
        if (name == null) {
            throw new IllegalArgumentException(""No name specified for bean class '"" +
                    bean.getClass() + ""'"");
        }

        // Identify the index of the requested individual property
        int index = -1;
        try {
            index = resolver.getIndex(name);
        } catch (final IllegalArgumentException e) {
            throw new IllegalArgumentException(""Invalid indexed property '"" +
                    name + ""' on bean class '"" + bean.getClass() + ""' "" +
                    e.getMessage());
        }
        if (index < 0) {
            throw new IllegalArgumentException(""Invalid indexed property '"" +
                    name + ""' on bean class '"" + bean.getClass() + ""'"");
        }

        // Isolate the name
        name = resolver.getProperty(name);

        // Request the specified indexed property value
        return (getIndexedProperty(bean, name, index));

    }","  public void test119()  throws Throwable  {
      PropertyUtils propertyUtils0 = new PropertyUtils();
      WrapDynaBean wrapDynaBean0 = new WrapDynaBean(propertyUtils0);
      ConvertingWrapDynaBean convertingWrapDynaBean0 = new ConvertingWrapDynaBean(wrapDynaBean0);
      WrapDynaClass wrapDynaClass0 = convertingWrapDynaBean0.dynaClass;
      PropertyUtilsBean propertyUtilsBean0 = wrapDynaClass0.getPropertyUtilsBean();
      try { 
        propertyUtilsBean0.getIndexedProperty((Object) wrapDynaBean0, "".=>0J!#nD;QUE%OD"", 4986);
        fail(""Expecting exception: NoSuchMethodException"");
      } catch(NoSuchMethodException e) {
         //
         // Unknown property '.=>0J!#nD;QUE%OD' on bean class 'class org.apache.commons.beanutils.WrapDynaBean'
         //
         verifyException(""org.apache.commons.beanutils.PropertyUtilsBean"", e);
      }
  }"
945,"    public Object getIndexedProperty(final Object bean, String name)
            throws IllegalAccessException, InvocationTargetException,
            NoSuchMethodException {

        if (bean == null) {
            throw new IllegalArgumentException(""No bean specified"");
        }
        if (name == null) {
            throw new IllegalArgumentException(""No name specified for bean class '"" +
                    bean.getClass() + ""'"");
        }

        // Identify the index of the requested individual property
        int index = -1;
        try {
            index = resolver.getIndex(name);
        } catch (final IllegalArgumentException e) {
            throw new IllegalArgumentException(""Invalid indexed property '"" +
                    name + ""' on bean class '"" + bean.getClass() + ""' "" +
                    e.getMessage());
        }
        if (index < 0) {
            throw new IllegalArgumentException(""Invalid indexed property '"" +
                    name + ""' on bean class '"" + bean.getClass() + ""'"");
        }

        // Isolate the name
        name = resolver.getProperty(name);

        // Request the specified indexed property value
        return (getIndexedProperty(bean, name, index));

    }","  public void test120()  throws Throwable  {
      PropertyUtilsBean propertyUtilsBean0 = new PropertyUtilsBean();
      IndexOutOfBoundsException indexOutOfBoundsException0 = new IndexOutOfBoundsException();
      try { 
        propertyUtilsBean0.getIndexedProperty((Object) indexOutOfBoundsException0, ""&{)|p*uH)J%m"", 10);
        fail(""Expecting exception: NoSuchMethodException"");
      } catch(NoSuchMethodException e) {
         //
         // Unknown property '&{)|p*uH)J%m' on bean class 'class java.lang.IndexOutOfBoundsException'
         //
         verifyException(""org.apache.commons.beanutils.PropertyUtilsBean"", e);
      }
  }"
946,"    public Object getIndexedProperty(final Object bean, String name)
            throws IllegalAccessException, InvocationTargetException,
            NoSuchMethodException {

        if (bean == null) {
            throw new IllegalArgumentException(""No bean specified"");
        }
        if (name == null) {
            throw new IllegalArgumentException(""No name specified for bean class '"" +
                    bean.getClass() + ""'"");
        }

        // Identify the index of the requested individual property
        int index = -1;
        try {
            index = resolver.getIndex(name);
        } catch (final IllegalArgumentException e) {
            throw new IllegalArgumentException(""Invalid indexed property '"" +
                    name + ""' on bean class '"" + bean.getClass() + ""' "" +
                    e.getMessage());
        }
        if (index < 0) {
            throw new IllegalArgumentException(""Invalid indexed property '"" +
                    name + ""' on bean class '"" + bean.getClass() + ""'"");
        }

        // Isolate the name
        name = resolver.getProperty(name);

        // Request the specified indexed property value
        return (getIndexedProperty(bean, name, index));

    }","  public void test121()  throws Throwable  {
      PropertyUtilsBean propertyUtilsBean0 = PropertyUtilsBean.getInstance();
      try { 
        propertyUtilsBean0.getIndexedProperty((Object) """", """", (-294));
        fail(""Expecting exception: NoSuchMethodException"");
      } catch(NoSuchMethodException e) {
         //
         // Unknown property '' on bean class 'class java.lang.String'
         //
         verifyException(""org.apache.commons.beanutils.PropertyUtilsBean"", e);
      }
  }"
947,"    public Object getIndexedProperty(final Object bean, String name)
            throws IllegalAccessException, InvocationTargetException,
            NoSuchMethodException {

        if (bean == null) {
            throw new IllegalArgumentException(""No bean specified"");
        }
        if (name == null) {
            throw new IllegalArgumentException(""No name specified for bean class '"" +
                    bean.getClass() + ""'"");
        }

        // Identify the index of the requested individual property
        int index = -1;
        try {
            index = resolver.getIndex(name);
        } catch (final IllegalArgumentException e) {
            throw new IllegalArgumentException(""Invalid indexed property '"" +
                    name + ""' on bean class '"" + bean.getClass() + ""' "" +
                    e.getMessage());
        }
        if (index < 0) {
            throw new IllegalArgumentException(""Invalid indexed property '"" +
                    name + ""' on bean class '"" + bean.getClass() + ""'"");
        }

        // Isolate the name
        name = resolver.getProperty(name);

        // Request the specified indexed property value
        return (getIndexedProperty(bean, name, index));

    }","  public void test122()  throws Throwable  {
      PropertyUtilsBean propertyUtilsBean0 = new PropertyUtilsBean();
      // Undeclared exception!
      try { 
        propertyUtilsBean0.getIndexedProperty((Object) null, ""="", 516);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // No bean specified
         //
         verifyException(""org.apache.commons.beanutils.PropertyUtilsBean"", e);
      }
  }"
948,"    public Object getIndexedProperty(final Object bean, String name)
            throws IllegalAccessException, InvocationTargetException,
            NoSuchMethodException {

        if (bean == null) {
            throw new IllegalArgumentException(""No bean specified"");
        }
        if (name == null) {
            throw new IllegalArgumentException(""No name specified for bean class '"" +
                    bean.getClass() + ""'"");
        }

        // Identify the index of the requested individual property
        int index = -1;
        try {
            index = resolver.getIndex(name);
        } catch (final IllegalArgumentException e) {
            throw new IllegalArgumentException(""Invalid indexed property '"" +
                    name + ""' on bean class '"" + bean.getClass() + ""' "" +
                    e.getMessage());
        }
        if (index < 0) {
            throw new IllegalArgumentException(""Invalid indexed property '"" +
                    name + ""' on bean class '"" + bean.getClass() + ""'"");
        }

        // Isolate the name
        name = resolver.getProperty(name);

        // Request the specified indexed property value
        return (getIndexedProperty(bean, name, index));

    }","  public void test123()  throws Throwable  {
      PropertyUtilsBean propertyUtilsBean0 = new PropertyUtilsBean();
      // Undeclared exception!
      try { 
        propertyUtilsBean0.getIndexedProperty((Object) "" on bean class '"", (String) null, (-294));
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // No name specified for bean class 'class java.lang.String'
         //
         verifyException(""org.apache.commons.beanutils.PropertyUtilsBean"", e);
      }
  }"
949,"    public Object getIndexedProperty(final Object bean, String name)
            throws IllegalAccessException, InvocationTargetException,
            NoSuchMethodException {

        if (bean == null) {
            throw new IllegalArgumentException(""No bean specified"");
        }
        if (name == null) {
            throw new IllegalArgumentException(""No name specified for bean class '"" +
                    bean.getClass() + ""'"");
        }

        // Identify the index of the requested individual property
        int index = -1;
        try {
            index = resolver.getIndex(name);
        } catch (final IllegalArgumentException e) {
            throw new IllegalArgumentException(""Invalid indexed property '"" +
                    name + ""' on bean class '"" + bean.getClass() + ""' "" +
                    e.getMessage());
        }
        if (index < 0) {
            throw new IllegalArgumentException(""Invalid indexed property '"" +
                    name + ""' on bean class '"" + bean.getClass() + ""'"");
        }

        // Isolate the name
        name = resolver.getProperty(name);

        // Request the specified indexed property value
        return (getIndexedProperty(bean, name, index));

    }","  public void test124()  throws Throwable  {
      Class<FastHashMap> class0 = FastHashMap.class;
      WrapDynaClass wrapDynaClass0 = WrapDynaClass.createDynaClass(class0);
      PropertyUtilsBean propertyUtilsBean0 = wrapDynaClass0.getPropertyUtilsBean();
      // Undeclared exception!
      try { 
        propertyUtilsBean0.getIndexedProperty((Object) wrapDynaClass0, ""Dd"");
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Invalid indexed property 'Dd' on bean class 'class org.apache.commons.beanutils.WrapDynaClass'
         //
         verifyException(""org.apache.commons.beanutils.PropertyUtilsBean"", e);
      }
  }"
950,"    public Object getIndexedProperty(final Object bean, String name)
            throws IllegalAccessException, InvocationTargetException,
            NoSuchMethodException {

        if (bean == null) {
            throw new IllegalArgumentException(""No bean specified"");
        }
        if (name == null) {
            throw new IllegalArgumentException(""No name specified for bean class '"" +
                    bean.getClass() + ""'"");
        }

        // Identify the index of the requested individual property
        int index = -1;
        try {
            index = resolver.getIndex(name);
        } catch (final IllegalArgumentException e) {
            throw new IllegalArgumentException(""Invalid indexed property '"" +
                    name + ""' on bean class '"" + bean.getClass() + ""' "" +
                    e.getMessage());
        }
        if (index < 0) {
            throw new IllegalArgumentException(""Invalid indexed property '"" +
                    name + ""' on bean class '"" + bean.getClass() + ""'"");
        }

        // Isolate the name
        name = resolver.getProperty(name);

        // Request the specified indexed property value
        return (getIndexedProperty(bean, name, index));

    }","  public void test125()  throws Throwable  {
      PropertyUtilsBean propertyUtilsBean0 = new PropertyUtilsBean();
      IndexOutOfBoundsException indexOutOfBoundsException0 = new IndexOutOfBoundsException();
      // Undeclared exception!
      try { 
        propertyUtilsBean0.getIndexedProperty((Object) indexOutOfBoundsException0, (String) null);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // No name specified for bean class 'class java.lang.IndexOutOfBoundsException'
         //
         verifyException(""org.apache.commons.beanutils.PropertyUtilsBean"", e);
      }
  }"
951,"    public Object getIndexedProperty(final Object bean, String name)
            throws IllegalAccessException, InvocationTargetException,
            NoSuchMethodException {

        if (bean == null) {
            throw new IllegalArgumentException(""No bean specified"");
        }
        if (name == null) {
            throw new IllegalArgumentException(""No name specified for bean class '"" +
                    bean.getClass() + ""'"");
        }

        // Identify the index of the requested individual property
        int index = -1;
        try {
            index = resolver.getIndex(name);
        } catch (final IllegalArgumentException e) {
            throw new IllegalArgumentException(""Invalid indexed property '"" +
                    name + ""' on bean class '"" + bean.getClass() + ""' "" +
                    e.getMessage());
        }
        if (index < 0) {
            throw new IllegalArgumentException(""Invalid indexed property '"" +
                    name + ""' on bean class '"" + bean.getClass() + ""'"");
        }

        // Isolate the name
        name = resolver.getProperty(name);

        // Request the specified indexed property value
        return (getIndexedProperty(bean, name, index));

    }","  public void test126()  throws Throwable  {
      Class<PropertyDescriptor> class0 = PropertyDescriptor.class;
      WrapDynaClass wrapDynaClass0 = WrapDynaClass.createDynaClass(class0);
      PropertyUtilsBean propertyUtilsBean0 = wrapDynaClass0.getPropertyUtilsBean();
      // Undeclared exception!
      try { 
        propertyUtilsBean0.getIndexedProperty((Object) null, ""+mDIViHI3^"");
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // No bean specified
         //
         verifyException(""org.apache.commons.beanutils.PropertyUtilsBean"", e);
      }
  }"
952,"    public Map<String, Object> describe(final Object bean)
            throws IllegalAccessException, InvocationTargetException,
            NoSuchMethodException {

        if (bean == null) {
            throw new IllegalArgumentException(""No bean specified"");
        }
        final Map<String, Object> description = new HashMap<String, Object>();
        if (bean instanceof DynaBean) {
            final DynaProperty[] descriptors =
                ((DynaBean) bean).getDynaClass().getDynaProperties();
            for (DynaProperty descriptor : descriptors) {
                final String name = descriptor.getName();
                description.put(name, getProperty(bean, name));
            }
        } else {
            final PropertyDescriptor[] descriptors =
                getPropertyDescriptors(bean);
            for (PropertyDescriptor descriptor : descriptors) {
                final String name = descriptor.getName();
                if (descriptor.getReadMethod() != null) {
                    description.put(name, getProperty(bean, name));
                }
            }
        }
        return (description);

    }","  public void test127()  throws Throwable  {
      PropertyUtilsBean propertyUtilsBean0 = new PropertyUtilsBean();
      // Undeclared exception!
      try { 
        propertyUtilsBean0.describe((Object) null);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // No bean specified
         //
         verifyException(""org.apache.commons.beanutils.PropertyUtilsBean"", e);
      }
  }"
953,"    public Map<String, Object> describe(final Object bean)
            throws IllegalAccessException, InvocationTargetException,
            NoSuchMethodException {

        if (bean == null) {
            throw new IllegalArgumentException(""No bean specified"");
        }
        final Map<String, Object> description = new HashMap<String, Object>();
        if (bean instanceof DynaBean) {
            final DynaProperty[] descriptors =
                ((DynaBean) bean).getDynaClass().getDynaProperties();
            for (DynaProperty descriptor : descriptors) {
                final String name = descriptor.getName();
                description.put(name, getProperty(bean, name));
            }
        } else {
            final PropertyDescriptor[] descriptors =
                getPropertyDescriptors(bean);
            for (PropertyDescriptor descriptor : descriptors) {
                final String name = descriptor.getName();
                if (descriptor.getReadMethod() != null) {
                    description.put(name, getProperty(bean, name));
                }
            }
        }
        return (description);

    }","  public void test128()  throws Throwable  {
      PropertyUtilsBean propertyUtilsBean0 = PropertyUtilsBean.getInstance();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      try { 
        propertyUtilsBean0.describe(linkedList0);
        fail(""Expecting exception: InvocationTargetException"");
      } catch(InvocationTargetException e) {
      }
  }"
954,"    public void copyProperties(final Object dest, final Object orig)
            throws IllegalAccessException, InvocationTargetException,
            NoSuchMethodException {

        if (dest == null) {
            throw new IllegalArgumentException
                    (""No destination bean specified"");
        }
        if (orig == null) {
            throw new IllegalArgumentException(""No origin bean specified"");
        }

        if (orig instanceof DynaBean) {
            final DynaProperty[] origDescriptors =
                ((DynaBean) orig).getDynaClass().getDynaProperties();
            for (DynaProperty origDescriptor : origDescriptors) {
                final String name = origDescriptor.getName();
                if (isReadable(orig, name) && isWriteable(dest, name)) {
                    try {
                        final Object value = ((DynaBean) orig).get(name);
                        if (dest instanceof DynaBean) {
                            ((DynaBean) dest).set(name, value);
                        } else {
                                setSimpleProperty(dest, name, value);
                        }
                    } catch (final NoSuchMethodException e) {
                        if (log.isDebugEnabled()) {
                            log.debug(""Error writing to '"" + name + ""' on class '"" + dest.getClass() + ""'"", e);
                        }
                    }
                }
            }
        } else if (orig instanceof Map) {
            final Iterator<?> entries = ((Map<?, ?>) orig).entrySet().iterator();
            while (entries.hasNext()) {
                final Map.Entry<?, ?> entry = (Entry<?, ?>) entries.next();
                final String name = (String)entry.getKey();
                if (isWriteable(dest, name)) {
                    try {
                        if (dest instanceof DynaBean) {
                            ((DynaBean) dest).set(name, entry.getValue());
                        } else {
                            setSimpleProperty(dest, name, entry.getValue());
                        }
                    } catch (final NoSuchMethodException e) {
                        if (log.isDebugEnabled()) {
                            log.debug(""Error writing to '"" + name + ""' on class '"" + dest.getClass() + ""'"", e);
                        }
                    }
                }
            }
        } else /* if (orig is a standard JavaBean) */ {
            final PropertyDescriptor[] origDescriptors =
                getPropertyDescriptors(orig);
            for (PropertyDescriptor origDescriptor : origDescriptors) {
                final String name = origDescriptor.getName();
                if (isReadable(orig, name) && isWriteable(dest, name)) {
                    try {
                        final Object value = getSimpleProperty(orig, name);
                        if (dest instanceof DynaBean) {
                            ((DynaBean) dest).set(name, value);
                        } else {
                                setSimpleProperty(dest, name, value);
                        }
                    } catch (final NoSuchMethodException e) {
                        if (log.isDebugEnabled()) {
                            log.debug(""Error writing to '"" + name + ""' on class '"" + dest.getClass() + ""'"", e);
                        }
                    }
                }
            }
        }

    }","  public void test129()  throws Throwable  {
      PropertyUtilsBean propertyUtilsBean0 = PropertyUtilsBean.getInstance();
      RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
      ResultSetDynaClass resultSetDynaClass0 = new ResultSetDynaClass(resultSet0, false, false);
      ResultSetIterator resultSetIterator0 = new ResultSetIterator(resultSetDynaClass0);
      // Undeclared exception!
      try { 
        propertyUtilsBean0.copyProperties((Object) null, resultSetIterator0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // No destination bean specified
         //
         verifyException(""org.apache.commons.beanutils.PropertyUtilsBean"", e);
      }
  }"
955,"    public void addBeanIntrospector(final BeanIntrospector introspector) {
        if (introspector == null) {
            throw new IllegalArgumentException(
                    ""BeanIntrospector must not be null!"");
        }
        introspectors.add(introspector);
    }","  public void test130()  throws Throwable  {
      Class<LazyDynaMap> class0 = LazyDynaMap.class;
      WrapDynaClass wrapDynaClass0 = WrapDynaClass.createDynaClass(class0, (PropertyUtilsBean) null);
      PropertyUtilsBean propertyUtilsBean0 = wrapDynaClass0.getPropertyUtilsBean();
      // Undeclared exception!
      try { 
        propertyUtilsBean0.addBeanIntrospector((BeanIntrospector) null);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // BeanIntrospector must not be null!
         //
         verifyException(""org.apache.commons.beanutils.PropertyUtilsBean"", e);
      }
  }"
956,"    public void addBeanIntrospector(final BeanIntrospector introspector) {
        if (introspector == null) {
            throw new IllegalArgumentException(
                    ""BeanIntrospector must not be null!"");
        }
        introspectors.add(introspector);
    }","  public void test131()  throws Throwable  {
      PropertyUtilsBean propertyUtilsBean0 = PropertyUtilsBean.getInstance();
      FluentPropertyBeanIntrospector fluentPropertyBeanIntrospector0 = new FluentPropertyBeanIntrospector();
      propertyUtilsBean0.addBeanIntrospector(fluentPropertyBeanIntrospector0);
}"
957,"    public void setResolver(final Resolver resolver) {
        if (resolver == null) {
            this.resolver = new DefaultResolver();
        } else {
            this.resolver = resolver;
        }
    }","  public void test132()  throws Throwable  {
      Class<WrapDynaBean> class0 = WrapDynaBean.class;
      WrapDynaClass wrapDynaClass0 = WrapDynaClass.createDynaClass(class0);
      PropertyUtilsBean propertyUtilsBean0 = wrapDynaClass0.getPropertyUtilsBean();
      propertyUtilsBean0.setResolver((Resolver) null);
  }"
958,"    public void clearDescriptors() {

        descriptorsCache.clear();
        mappedDescriptorsCache.clear();
        Introspector.flushCaches();

    }","  public void test133()  throws Throwable  {
      PropertyUtilsBean propertyUtilsBean0 = PropertyUtilsBean.getInstance();
      propertyUtilsBean0.clearDescriptors();
  }"
959,"    public Method getWriteMethod(final PropertyDescriptor descriptor) {

        return (MethodUtils.getAccessibleMethod(descriptor.getWriteMethod()));

    }","  public void test134()  throws Throwable  {
      PropertyUtilsBean propertyUtilsBean0 = PropertyUtilsBean.getInstance();
      IndexedPropertyDescriptor indexedPropertyDescriptor0 = new IndexedPropertyDescriptor(""\"")If"", (Method) null, (Method) null, (Method) null, (Method) null);
      Method method0 = propertyUtilsBean0.getWriteMethod((PropertyDescriptor) indexedPropertyDescriptor0);
}"
960,"    public Method getReadMethod(final PropertyDescriptor descriptor) {

        return (MethodUtils.getAccessibleMethod(descriptor.getReadMethod()));

    }","  public void test135()  throws Throwable  {
      PropertyUtilsBean propertyUtilsBean0 = PropertyUtilsBean.getInstance();
      PropertyDescriptor propertyDescriptor0 = new PropertyDescriptor(""\"")If"", (Method) null, (Method) null);
      Method method0 = propertyUtilsBean0.getReadMethod(propertyDescriptor0);
}"
961,"    public final void resetBeanIntrospectors() {
        introspectors.clear();
        introspectors.add(DefaultBeanIntrospector.INSTANCE);
        introspectors.add(SuppressPropertiesBeanIntrospector.SUPPRESS_CLASS);
    }","  public void test136()  throws Throwable  {
      PropertyUtilsBean propertyUtilsBean0 = PropertyUtilsBean.getInstance();
      propertyUtilsBean0.resetBeanIntrospectors();
  }"
962,"    public Object getProperty(final Object bean, final String name)
            throws IllegalAccessException, InvocationTargetException,
            NoSuchMethodException {

        return (getNestedProperty(bean, name));

    }","  public void test137()  throws Throwable  {
      PropertyUtilsBean propertyUtilsBean0 = PropertyUtilsBean.getInstance();
      ResultSetIterator resultSetIterator0 = new ResultSetIterator((ResultSetDynaClass) null);
      // Undeclared exception!
      try { 
        propertyUtilsBean0.getProperty(resultSetIterator0, "", Size: "");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.beanutils.PropertyUtilsBean"", e);
      }
  }"
963,"    public BeanAccessLanguageException() {
        super();
    }","  public void test0()  throws Throwable  {
      BeanAccessLanguageException beanAccessLanguageException0 = new BeanAccessLanguageException(""&"");
  }"
964,"    public BeanAccessLanguageException() {
        super();
    }","  public void test1()  throws Throwable  {
      BeanAccessLanguageException beanAccessLanguageException0 = new BeanAccessLanguageException();
  }"
965,"    public Class<?> getType() {
        return (this.type);
    }","  public void test0()  throws Throwable  {
      DynaProperty dynaProperty0 = new DynaProperty("""");
      dynaProperty0.type = null;
      Class<?> class0 = dynaProperty0.getType();
}"
966,"    public String getName() {
        return (this.name);
    }","  public void test1()  throws Throwable  {
      Class<String> class0 = String.class;
      DynaProperty dynaProperty0 = new DynaProperty(""^BJV"", class0, class0);
      String string0 = dynaProperty0.getName();
}"
967,"    public String getName() {
        return (this.name);
    }","  public void test2()  throws Throwable  {
      Class<String> class0 = String.class;
      DynaProperty dynaProperty0 = new DynaProperty("""", class0);
      String string0 = dynaProperty0.getName();
}"
968,"    public Class<?> getContentType() {
        return contentType;
    }","  public void test3()  throws Throwable  {
      Class<Object> class0 = Object.class;
      DynaProperty dynaProperty0 = new DynaProperty(""}"", class0, class0);
      Class<?> class1 = dynaProperty0.getContentType();
}"
969,"    public boolean isMapped() {

        if (type == null) {
            return (false);
        } else {
            return (Map.class.isAssignableFrom(type));
        }

    }","  public void test4()  throws Throwable  {
      Class<Object> class0 = Object.class;
      DynaProperty dynaProperty0 = new DynaProperty((String) null, class0);
      boolean boolean0 = dynaProperty0.isMapped();
}"
970,"    public boolean isMapped() {

        if (type == null) {
            return (false);
        } else {
            return (Map.class.isAssignableFrom(type));
        }

    }","  public void test5()  throws Throwable  {
      DynaProperty dynaProperty0 = new DynaProperty(""hu})4A8M^SKI4h"", (Class<?>) null);
      boolean boolean0 = dynaProperty0.isMapped();
}"
971,"    public boolean isIndexed() {

        if (type == null) {
            return (false);
        } else if (type.isArray()) {
            return (true);
        } else if (List.class.isAssignableFrom(type)) {
            return (true);
        } else {
            return (false);
        }

    }","  public void test6()  throws Throwable  {
      Class<Object> class0 = Object.class;
      DynaProperty dynaProperty0 = new DynaProperty((String) null, class0);
      boolean boolean0 = dynaProperty0.isIndexed();
}"
972,"    public int hashCode() {

       int result = 1;

       result = result * 31 + ((name == null) ? 0 : name.hashCode());
       result = result * 31 + ((type == null) ? 0 : type.hashCode());
       result = result * 31 + ((contentType == null) ? 0 : contentType.hashCode());

       return result;
    }","  public void test7()  throws Throwable  {
      Class<Object> class0 = Object.class;
      DynaProperty dynaProperty0 = new DynaProperty((String) null, class0);
      Class<String> class1 = String.class;
      dynaProperty0.contentType = class1;
      dynaProperty0.hashCode();
  }"
973,"    public int hashCode() {

       int result = 1;

       result = result * 31 + ((name == null) ? 0 : name.hashCode());
       result = result * 31 + ((type == null) ? 0 : type.hashCode());
       result = result * 31 + ((contentType == null) ? 0 : contentType.hashCode());

       return result;
    }","  public void test8()  throws Throwable  {
      DynaProperty dynaProperty0 = new DynaProperty(""DynaProperty[name=KD3#qM,B2{o[iv,type=class java.lang.Object]"", (Class<?>) null);
      dynaProperty0.hashCode();
  }"
974,"    public boolean equals(final Object obj) {

        boolean result = false;

        result = (obj == this);

        if ((!result) && obj instanceof DynaProperty) {
            final DynaProperty that = (DynaProperty) obj;
            result =
               ((this.name == null) ? (that.name == null) : (this.name.equals(that.name))) &&
               ((this.type == null) ? (that.type == null) : (this.type.equals(that.type))) &&
               ((this.contentType == null) ? (that.contentType == null) : (this.contentType.equals(that.contentType)));
        }

        return result;
    }","  public void test9()  throws Throwable  {
      DynaProperty dynaProperty0 = new DynaProperty(""HH]Fh\""U+\u0005"");
      Class<Object> class0 = Object.class;
      Class<String> class1 = String.class;
      DynaProperty dynaProperty1 = new DynaProperty(""HH]Fh\""U+\u0005"", class0, class1);
      boolean boolean0 = dynaProperty1.equals(dynaProperty0);
}"
975,"    public boolean equals(final Object obj) {

        boolean result = false;

        result = (obj == this);

        if ((!result) && obj instanceof DynaProperty) {
            final DynaProperty that = (DynaProperty) obj;
            result =
               ((this.name == null) ? (that.name == null) : (this.name.equals(that.name))) &&
               ((this.type == null) ? (that.type == null) : (this.type.equals(that.type))) &&
               ((this.contentType == null) ? (that.contentType == null) : (this.contentType.equals(that.contentType)));
        }

        return result;
    }","  public void test10()  throws Throwable  {
      DynaProperty dynaProperty0 = new DynaProperty(""HH]Fh\""U+\u0005"");
      Class<Object> class0 = Object.class;
      Class<String> class1 = String.class;
      DynaProperty dynaProperty1 = new DynaProperty(""HH]Fh\""U+\u0005"", class0, class1);
      boolean boolean0 = dynaProperty0.equals(dynaProperty1);
}"
976,"    public boolean equals(final Object obj) {

        boolean result = false;

        result = (obj == this);

        if ((!result) && obj instanceof DynaProperty) {
            final DynaProperty that = (DynaProperty) obj;
            result =
               ((this.name == null) ? (that.name == null) : (this.name.equals(that.name))) &&
               ((this.type == null) ? (that.type == null) : (this.type.equals(that.type))) &&
               ((this.contentType == null) ? (that.contentType == null) : (this.contentType.equals(that.contentType)));
        }

        return result;
    }","  public void test11()  throws Throwable  {
      Class<Object> class0 = Object.class;
      DynaProperty dynaProperty0 = new DynaProperty((String) null, class0);
      Class<String> class1 = String.class;
      dynaProperty0.contentType = class1;
      Class<DynaProperty> class2 = DynaProperty.class;
      dynaProperty0.type = class2;
      dynaProperty0.type = class2;
      dynaProperty0.type = class1;
      DynaProperty dynaProperty1 = new DynaProperty((String) null, class1, dynaProperty0.contentType);
      boolean boolean0 = dynaProperty0.equals(dynaProperty1);
}"
977,"    public boolean equals(final Object obj) {

        boolean result = false;

        result = (obj == this);

        if ((!result) && obj instanceof DynaProperty) {
            final DynaProperty that = (DynaProperty) obj;
            result =
               ((this.name == null) ? (that.name == null) : (this.name.equals(that.name))) &&
               ((this.type == null) ? (that.type == null) : (this.type.equals(that.type))) &&
               ((this.contentType == null) ? (that.contentType == null) : (this.contentType.equals(that.contentType)));
        }

        return result;
    }","  public void test12()  throws Throwable  {
      Class<Object> class0 = Object.class;
      DynaProperty dynaProperty0 = new DynaProperty((String) null, class0);
      Class<String> class1 = String.class;
      Class<DynaProperty> class2 = DynaProperty.class;
      dynaProperty0.type = class2;
      dynaProperty0.type = class2;
      dynaProperty0.type = class1;
      DynaProperty dynaProperty1 = new DynaProperty((String) null, class1, dynaProperty0.contentType);
      boolean boolean0 = dynaProperty0.equals(dynaProperty1);
}"
978,"    public boolean equals(final Object obj) {

        boolean result = false;

        result = (obj == this);

        if ((!result) && obj instanceof DynaProperty) {
            final DynaProperty that = (DynaProperty) obj;
            result =
               ((this.name == null) ? (that.name == null) : (this.name.equals(that.name))) &&
               ((this.type == null) ? (that.type == null) : (this.type.equals(that.type))) &&
               ((this.contentType == null) ? (that.contentType == null) : (this.contentType.equals(that.contentType)));
        }

        return result;
    }","  public void test13()  throws Throwable  {
      DynaProperty dynaProperty0 = new DynaProperty(""^"");
      dynaProperty0.type = null;
      DynaProperty dynaProperty1 = new DynaProperty(""^"");
      boolean boolean0 = dynaProperty0.equals(dynaProperty1);
}"
979,"    public boolean equals(final Object obj) {

        boolean result = false;

        result = (obj == this);

        if ((!result) && obj instanceof DynaProperty) {
            final DynaProperty that = (DynaProperty) obj;
            result =
               ((this.name == null) ? (that.name == null) : (this.name.equals(that.name))) &&
               ((this.type == null) ? (that.type == null) : (this.type.equals(that.type))) &&
               ((this.contentType == null) ? (that.contentType == null) : (this.contentType.equals(that.contentType)));
        }

        return result;
    }","  public void test14()  throws Throwable  {
      DynaProperty dynaProperty0 = new DynaProperty(""^"");
      dynaProperty0.type = null;
      DynaProperty dynaProperty1 = new DynaProperty(""^"");
      boolean boolean0 = dynaProperty0.equals(dynaProperty1);
}"
980,"    public boolean equals(final Object obj) {

        boolean result = false;

        result = (obj == this);

        if ((!result) && obj instanceof DynaProperty) {
            final DynaProperty that = (DynaProperty) obj;
            result =
               ((this.name == null) ? (that.name == null) : (this.name.equals(that.name))) &&
               ((this.type == null) ? (that.type == null) : (this.type.equals(that.type))) &&
               ((this.contentType == null) ? (that.contentType == null) : (this.contentType.equals(that.contentType)));
        }

        return result;
    }","  public void test15()  throws Throwable  {
      DynaProperty dynaProperty0 = new DynaProperty(""DynaProperty[name=KD3#qM,B2{o[iv,type=class java.lang.Object]"", (Class<?>) null);
      DynaProperty dynaProperty1 = new DynaProperty(""DynaProperty[name=KD3#qM,B2{o[iv,type=class java.lang.Object]"", (Class<?>) null, (Class<?>) null);
      boolean boolean0 = dynaProperty0.equals(dynaProperty1);
}"
981,"    public boolean equals(final Object obj) {

        boolean result = false;

        result = (obj == this);

        if ((!result) && obj instanceof DynaProperty) {
            final DynaProperty that = (DynaProperty) obj;
            result =
               ((this.name == null) ? (that.name == null) : (this.name.equals(that.name))) &&
               ((this.type == null) ? (that.type == null) : (this.type.equals(that.type))) &&
               ((this.contentType == null) ? (that.contentType == null) : (this.contentType.equals(that.contentType)));
        }

        return result;
    }","  public void test16()  throws Throwable  {
      DynaProperty dynaProperty0 = new DynaProperty((String) null);
      Class<Object> class0 = Object.class;
      DynaProperty dynaProperty1 = new DynaProperty(""DynaProperty[name=null,type=class java.lang.Object]"", class0);
      boolean boolean0 = dynaProperty0.equals(dynaProperty1);
}"
982,"    public boolean equals(final Object obj) {

        boolean result = false;

        result = (obj == this);

        if ((!result) && obj instanceof DynaProperty) {
            final DynaProperty that = (DynaProperty) obj;
            result =
               ((this.name == null) ? (that.name == null) : (this.name.equals(that.name))) &&
               ((this.type == null) ? (that.type == null) : (this.type.equals(that.type))) &&
               ((this.contentType == null) ? (that.contentType == null) : (this.contentType.equals(that.contentType)));
        }

        return result;
    }","  public void test17()  throws Throwable  {
      Class<Object> class0 = Object.class;
      DynaProperty dynaProperty0 = new DynaProperty((String) null, class0);
      Class<String> class1 = String.class;
      DynaProperty dynaProperty1 = new DynaProperty((String) null, class1, dynaProperty0.contentType);
      boolean boolean0 = dynaProperty0.equals(dynaProperty1);
}"
983,"    public boolean equals(final Object obj) {

        boolean result = false;

        result = (obj == this);

        if ((!result) && obj instanceof DynaProperty) {
            final DynaProperty that = (DynaProperty) obj;
            result =
               ((this.name == null) ? (that.name == null) : (this.name.equals(that.name))) &&
               ((this.type == null) ? (that.type == null) : (this.type.equals(that.type))) &&
               ((this.contentType == null) ? (that.contentType == null) : (this.contentType.equals(that.contentType)));
        }

        return result;
    }","  public void test18()  throws Throwable  {
      DynaProperty dynaProperty0 = new DynaProperty(""KD3#qM,B2{o[iv"");
      Object object0 = new Object();
      boolean boolean0 = dynaProperty0.equals(object0);
}"
984,"    public boolean equals(final Object obj) {

        boolean result = false;

        result = (obj == this);

        if ((!result) && obj instanceof DynaProperty) {
            final DynaProperty that = (DynaProperty) obj;
            result =
               ((this.name == null) ? (that.name == null) : (this.name.equals(that.name))) &&
               ((this.type == null) ? (that.type == null) : (this.type.equals(that.type))) &&
               ((this.contentType == null) ? (that.contentType == null) : (this.contentType.equals(that.contentType)));
        }

        return result;
    }","  public void test19()  throws Throwable  {
      DynaProperty dynaProperty0 = new DynaProperty(""KD3#qM,B2{o[iv"");
      boolean boolean0 = dynaProperty0.equals(dynaProperty0);
}"
985,"    public boolean equals(final Object obj) {

        boolean result = false;

        result = (obj == this);

        if ((!result) && obj instanceof DynaProperty) {
            final DynaProperty that = (DynaProperty) obj;
            result =
               ((this.name == null) ? (that.name == null) : (this.name.equals(that.name))) &&
               ((this.type == null) ? (that.type == null) : (this.type.equals(that.type))) &&
               ((this.contentType == null) ? (that.contentType == null) : (this.contentType.equals(that.contentType)));
        }

        return result;
    }","  public void test20()  throws Throwable  {
      DynaProperty dynaProperty0 = new DynaProperty(""KD3#qM,B2{o[iv"");
      DynaProperty dynaProperty1 = new DynaProperty(""DynaProperty[name=KD3#qM,B2{o[iv,type=class java.lang.Object]"", (Class<?>) null);
      boolean boolean0 = dynaProperty0.equals(dynaProperty1);
}"
986,"    public String toString() {

        final StringBuilder sb = new StringBuilder(""DynaProperty[name="");
        sb.append(this.name);
        sb.append("",type="");
        sb.append(this.type);
        if (isMapped() || isIndexed()) {
            sb.append("" <"").append(this.contentType).append("">"");
        }
        sb.append(""]"");
        return (sb.toString());

    }","  public void test21()  throws Throwable  {
      DynaProperty dynaProperty0 = new DynaProperty(""^"");
      dynaProperty0.type = null;
      String string0 = dynaProperty0.toString();
}"
987,"    public String toString() {

        final StringBuilder sb = new StringBuilder(""DynaProperty[name="");
        sb.append(this.name);
        sb.append("",type="");
        sb.append(this.type);
        if (isMapped() || isIndexed()) {
            sb.append("" <"").append(this.contentType).append("">"");
        }
        sb.append(""]"");
        return (sb.toString());

    }","  public void test22()  throws Throwable  {
      DynaProperty dynaProperty0 = new DynaProperty(""KD3#qM,B2{o[iv"");
      String string0 = dynaProperty0.toString();
}"
988,"    public boolean isIndexed() {

        if (type == null) {
            return (false);
        } else if (type.isArray()) {
            return (true);
        } else if (List.class.isAssignableFrom(type)) {
            return (true);
        } else {
            return (false);
        }

    }","  public void test23()  throws Throwable  {
      DynaProperty dynaProperty0 = new DynaProperty(""DynaProperty[name=KD3#qM,B2{o[iv,type=class java.lang.Object]"", (Class<?>) null);
      boolean boolean0 = dynaProperty0.isIndexed();
}"
989,"    public Class<?> getContentType() {
        return contentType;
    }","  public void test24()  throws Throwable  {
      DynaProperty dynaProperty0 = new DynaProperty(""KD3#qM,B2{o[iv"");
      Class<?> class0 = dynaProperty0.getContentType();
}"
990,"    public Class<?> getType() {
        return (this.type);
    }","  public void test25()  throws Throwable  {
      Class<Object> class0 = Object.class;
      DynaProperty dynaProperty0 = new DynaProperty((String) null, class0);
      Class<?> class1 = dynaProperty0.getType();
}"
991,"    public String getName() {
        return (this.name);
    }","  public void test26()  throws Throwable  {
      Class<Object> class0 = Object.class;
      DynaProperty dynaProperty0 = new DynaProperty((String) null, class0);
      String string0 = dynaProperty0.getName();
}"
992,"    public static short getDefaultShort() {
        return ConvertUtilsBean.getInstance().getDefaultShort();
    }","  public void test0()  throws Throwable  {
      ConvertUtils.setDefaultShort((short) (-397));
      short short0 = ConvertUtils.getDefaultShort();
}"
993,"    public static <T> Class<T> primitiveToWrapper(final Class<T> type) {
        if (type == null || !type.isPrimitive()) {
            return type;
        }

        if (type == Integer.TYPE) {
            return (Class<T>) Integer.class;
        } else if (type == Double.TYPE) {
            return (Class<T>) Double.class;
        } else if (type == Long.TYPE) {
            return (Class<T>) Long.class;
        } else if (type == Boolean.TYPE) {
            return (Class<T>) Boolean.class;
        } else if (type == Float.TYPE) {
            return (Class<T>) Float.class;
        } else if (type == Short.TYPE) {
            return (Class<T>) Short.class;
        } else if (type == Byte.TYPE) {
            return (Class<T>) Byte.class;
        } else if (type == Character.TYPE) {
            return (Class<T>) Character.class;
        } else {
            return type;
        }
    }","  public void test1()  throws Throwable  {
      Class<Float> class0 = Float.TYPE;
      ConvertUtils.getDefaultShort();
      ConvertUtils.getDefaultBoolean();
      ConvertUtils convertUtils0 = new ConvertUtils();
      ConvertUtils.getDefaultCharacter();
      Class<String> class1 = String.class;
      ConvertUtils.setDefaultDouble((short)0);
      ConvertUtils.lookup(class1, class1);
      ConvertUtils.setDefaultShort((short)0);
      Class<Float> class2 = ConvertUtils.primitiveToWrapper(class0);
}"
994,"    public static String convert(final Object value) {
        return ConvertUtilsBean.getInstance().convert(value);
    }","  public void test2()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Class<Object> class1 = Object.class;
      ConvertUtils.lookup(class0, class1);
      Object object0 = ConvertUtils.convert((Object) null, class1);
}"
995,"    public static String convert(final Object value) {
        return ConvertUtilsBean.getInstance().convert(value);
    }","  public void test3()  throws Throwable  {
      String string0 = ConvertUtils.convert((Object) null);
}"
996,"    public static Converter lookup(final Class<?> clazz) {
        return ConvertUtilsBean.getInstance().lookup(clazz);
    }","  public void test4()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      // Undeclared exception!
      try { 
        ConvertUtils.lookup(class0, (Class<?>) null);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Target type is missing
         //
         verifyException(""org.apache.commons.beanutils.ConvertUtilsBean"", e);
      }
  }"
997,"    public static String convert(final Object value) {
        return ConvertUtilsBean.getInstance().convert(value);
    }","  public void test5()  throws Throwable  {
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        ConvertUtils.convert((String[]) null, class0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.beanutils.ConvertUtilsBean"", e);
      }
  }"
998,"    public static String convert(final Object value) {
        return ConvertUtilsBean.getInstance().convert(value);
    }","  public void test6()  throws Throwable  {
      Byte byte0 = new Byte((byte)1);
      // Undeclared exception!
      try { 
        ConvertUtils.convert((Object) byte0, (Class<?>) null);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Target type is missing
         //
         verifyException(""org.apache.commons.beanutils.ConvertUtilsBean"", e);
      }
  }"
999,"    public static <T> Class<T> primitiveToWrapper(final Class<T> type) {
        if (type == null || !type.isPrimitive()) {
            return type;
        }

        if (type == Integer.TYPE) {
            return (Class<T>) Integer.class;
        } else if (type == Double.TYPE) {
            return (Class<T>) Double.class;
        } else if (type == Long.TYPE) {
            return (Class<T>) Long.class;
        } else if (type == Boolean.TYPE) {
            return (Class<T>) Boolean.class;
        } else if (type == Float.TYPE) {
            return (Class<T>) Float.class;
        } else if (type == Short.TYPE) {
            return (Class<T>) Short.class;
        } else if (type == Byte.TYPE) {
            return (Class<T>) Byte.class;
        } else if (type == Character.TYPE) {
            return (Class<T>) Character.class;
        } else {
            return type;
        }
    }","  public void test7()  throws Throwable  {
      Class<Character> class0 = Character.TYPE;
      Class<Character> class1 = ConvertUtils.primitiveToWrapper(class0);
}"
1000,"    public static <T> Class<T> primitiveToWrapper(final Class<T> type) {
        if (type == null || !type.isPrimitive()) {
            return type;
        }

        if (type == Integer.TYPE) {
            return (Class<T>) Integer.class;
        } else if (type == Double.TYPE) {
            return (Class<T>) Double.class;
        } else if (type == Long.TYPE) {
            return (Class<T>) Long.class;
        } else if (type == Boolean.TYPE) {
            return (Class<T>) Boolean.class;
        } else if (type == Float.TYPE) {
            return (Class<T>) Float.class;
        } else if (type == Short.TYPE) {
            return (Class<T>) Short.class;
        } else if (type == Byte.TYPE) {
            return (Class<T>) Byte.class;
        } else if (type == Character.TYPE) {
            return (Class<T>) Character.class;
        } else {
            return type;
        }
    }","  public void test8()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      Class<Short> class1 = ConvertUtils.primitiveToWrapper(class0);
}"
1001,"    public static <T> Class<T> primitiveToWrapper(final Class<T> type) {
        if (type == null || !type.isPrimitive()) {
            return type;
        }

        if (type == Integer.TYPE) {
            return (Class<T>) Integer.class;
        } else if (type == Double.TYPE) {
            return (Class<T>) Double.class;
        } else if (type == Long.TYPE) {
            return (Class<T>) Long.class;
        } else if (type == Boolean.TYPE) {
            return (Class<T>) Boolean.class;
        } else if (type == Float.TYPE) {
            return (Class<T>) Float.class;
        } else if (type == Short.TYPE) {
            return (Class<T>) Short.class;
        } else if (type == Byte.TYPE) {
            return (Class<T>) Byte.class;
        } else if (type == Character.TYPE) {
            return (Class<T>) Character.class;
        } else {
            return type;
        }
    }","  public void test9()  throws Throwable  {
      Class<Long> class0 = Long.TYPE;
      Class<Long> class1 = ConvertUtils.primitiveToWrapper(class0);
}"
1002,"    public static <T> Class<T> primitiveToWrapper(final Class<T> type) {
        if (type == null || !type.isPrimitive()) {
            return type;
        }

        if (type == Integer.TYPE) {
            return (Class<T>) Integer.class;
        } else if (type == Double.TYPE) {
            return (Class<T>) Double.class;
        } else if (type == Long.TYPE) {
            return (Class<T>) Long.class;
        } else if (type == Boolean.TYPE) {
            return (Class<T>) Boolean.class;
        } else if (type == Float.TYPE) {
            return (Class<T>) Float.class;
        } else if (type == Short.TYPE) {
            return (Class<T>) Short.class;
        } else if (type == Byte.TYPE) {
            return (Class<T>) Byte.class;
        } else if (type == Character.TYPE) {
            return (Class<T>) Character.class;
        } else {
            return type;
        }
    }","  public void test10()  throws Throwable  {
      Class<Long> class0 = Long.class;
      Class<Long> class1 = ConvertUtils.primitiveToWrapper(class0);
}"
1003,"    public static <T> Class<T> primitiveToWrapper(final Class<T> type) {
        if (type == null || !type.isPrimitive()) {
            return type;
        }

        if (type == Integer.TYPE) {
            return (Class<T>) Integer.class;
        } else if (type == Double.TYPE) {
            return (Class<T>) Double.class;
        } else if (type == Long.TYPE) {
            return (Class<T>) Long.class;
        } else if (type == Boolean.TYPE) {
            return (Class<T>) Boolean.class;
        } else if (type == Float.TYPE) {
            return (Class<T>) Float.class;
        } else if (type == Short.TYPE) {
            return (Class<T>) Short.class;
        } else if (type == Byte.TYPE) {
            return (Class<T>) Byte.class;
        } else if (type == Character.TYPE) {
            return (Class<T>) Character.class;
        } else {
            return type;
        }
    }","  public void test11()  throws Throwable  {
      Class<Byte> class0 = Byte.TYPE;
      Class<Byte> class1 = ConvertUtils.primitiveToWrapper(class0);
}"
1004,"    public static String convert(final Object value) {
        return ConvertUtilsBean.getInstance().convert(value);
    }","  public void test12()  throws Throwable  {
      Class<Character> class0 = Character.TYPE;
      ConvertUtils.convert("""", class0);
      Object object0 = new Object();
      ConvertUtils.primitiveToWrapper(class0);
      ConvertUtils.primitiveToWrapper((Class<String>) null);
      Boolean boolean0 = Boolean.valueOf("""");
      ConvertUtils.convert((Object) boolean0);
      Byte byte0 = new Byte((byte)1);
      // Undeclared exception!
      try { 
        ConvertUtils.convert((Object) byte0, (Class<?>) null);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Target type is missing
         //
         verifyException(""org.apache.commons.beanutils.ConvertUtilsBean"", e);
      }
  }"
1005,"    public static <T> Class<T> primitiveToWrapper(final Class<T> type) {
        if (type == null || !type.isPrimitive()) {
            return type;
        }

        if (type == Integer.TYPE) {
            return (Class<T>) Integer.class;
        } else if (type == Double.TYPE) {
            return (Class<T>) Double.class;
        } else if (type == Long.TYPE) {
            return (Class<T>) Long.class;
        } else if (type == Boolean.TYPE) {
            return (Class<T>) Boolean.class;
        } else if (type == Float.TYPE) {
            return (Class<T>) Float.class;
        } else if (type == Short.TYPE) {
            return (Class<T>) Short.class;
        } else if (type == Byte.TYPE) {
            return (Class<T>) Byte.class;
        } else if (type == Character.TYPE) {
            return (Class<T>) Character.class;
        } else {
            return type;
        }
    }","  public void test13()  throws Throwable  {
      Class<Boolean> class0 = Boolean.TYPE;
      Class<Boolean> class1 = ConvertUtils.primitiveToWrapper(class0);
}"
1006,"    public static <T> Class<T> primitiveToWrapper(final Class<T> type) {
        if (type == null || !type.isPrimitive()) {
            return type;
        }

        if (type == Integer.TYPE) {
            return (Class<T>) Integer.class;
        } else if (type == Double.TYPE) {
            return (Class<T>) Double.class;
        } else if (type == Long.TYPE) {
            return (Class<T>) Long.class;
        } else if (type == Boolean.TYPE) {
            return (Class<T>) Boolean.class;
        } else if (type == Float.TYPE) {
            return (Class<T>) Float.class;
        } else if (type == Short.TYPE) {
            return (Class<T>) Short.class;
        } else if (type == Byte.TYPE) {
            return (Class<T>) Byte.class;
        } else if (type == Character.TYPE) {
            return (Class<T>) Character.class;
        } else {
            return type;
        }
    }","  public void test14()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      Class<Double> class1 = ConvertUtils.primitiveToWrapper(class0);
}"
1007,"    public static <T> Class<T> primitiveToWrapper(final Class<T> type) {
        if (type == null || !type.isPrimitive()) {
            return type;
        }

        if (type == Integer.TYPE) {
            return (Class<T>) Integer.class;
        } else if (type == Double.TYPE) {
            return (Class<T>) Double.class;
        } else if (type == Long.TYPE) {
            return (Class<T>) Long.class;
        } else if (type == Boolean.TYPE) {
            return (Class<T>) Boolean.class;
        } else if (type == Float.TYPE) {
            return (Class<T>) Float.class;
        } else if (type == Short.TYPE) {
            return (Class<T>) Short.class;
        } else if (type == Byte.TYPE) {
            return (Class<T>) Byte.class;
        } else if (type == Character.TYPE) {
            return (Class<T>) Character.class;
        } else {
            return type;
        }
    }","  public void test15()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      Class<Integer> class1 = ConvertUtils.primitiveToWrapper(class0);
}"
1008,"    public static void setDefaultInteger(final int newDefaultInteger) {
        ConvertUtilsBean.getInstance().setDefaultInteger(newDefaultInteger);
    }","  public void test16()  throws Throwable  {
      ConvertUtils.setDefaultInteger((byte)60);
  }"
1009,"    public static Converter lookup(final Class<?> clazz) {
        return ConvertUtilsBean.getInstance().lookup(clazz);
    }","  public void test17()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Converter converter0 = ConvertUtils.lookup(class0);
}"
1010,"    public static String convert(final Object value) {
        return ConvertUtilsBean.getInstance().convert(value);
    }","  public void test18()  throws Throwable  {
      ConvertUtils.getDefaultByte();
      ConvertUtils.getDefaultCharacter();
      Class<Object> class0 = Object.class;
      ConvertUtils.convert((Object) null, class0);
      FileConverter fileConverter0 = new FileConverter((Object) null);
      fileConverter0.toString();
      fileConverter0.toString();
      Class<String> class1 = String.class;
      ConvertUtils.register(fileConverter0, class1);
      ConvertUtils.setDefaultShort((byte)9);
      ConvertUtils.getDefaultByte();
      ConvertUtils.getDefaultCharacter();
      ConvertUtils.setDefaultBoolean(false);
      ConvertUtils.getDefaultBoolean();
      ConvertUtils.convert(""org.apache.commons.beanutils.ConvertUtils"", class0);
      ConvertUtils.getDefaultInteger();
      Object object0 = ConvertUtils.convert("""", class0);
}"
1011,"    public static String convert(final Object value) {
        return ConvertUtilsBean.getInstance().convert(value);
    }","  public void test19()  throws Throwable  {
      Float float0 = new Float(0.0F);
      Class<Long> class0 = Long.TYPE;
      Object object0 = ConvertUtils.convert((Object) float0, (Class<?>) class0);
}"
1012,"    public static void deregister() {
        ConvertUtilsBean.getInstance().deregister();
    }","  public void test20()  throws Throwable  {
      Class<String> class0 = String.class;
      ConvertUtils.deregister(class0);
  }"
1013,"    public static double getDefaultDouble() {
        return ConvertUtilsBean.getInstance().getDefaultDouble();
    }","  public void test21()  throws Throwable  {
      double double0 = ConvertUtils.getDefaultDouble();
}"
1014,"    public static String convert(final Object value) {
        return ConvertUtilsBean.getInstance().convert(value);
    }","  public void test22()  throws Throwable  {
      Class<Long> class0 = Long.class;
      Object object0 = ConvertUtils.convert(""7le,W$qK-mE0~Nv"", class0);
}"
1015,"    public static void setDefaultFloat(final float newDefaultFloat) {
        ConvertUtilsBean.getInstance().setDefaultFloat(newDefaultFloat);
    }","  public void test23()  throws Throwable  {
      ConvertUtils.setDefaultFloat((-1.0F));
  }"
1016,"    public static void setDefaultLong(final long newDefaultLong) {
        ConvertUtilsBean.getInstance().setDefaultLong(newDefaultLong);
    }","  public void test24()  throws Throwable  {
      ConvertUtils.setDefaultLong(0L);
  }"
1017,"    public static String convert(final Object value) {
        return ConvertUtilsBean.getInstance().convert(value);
    }","  public void test25()  throws Throwable  {
      String[] stringArray0 = new String[5];
      Class<Short> class0 = Short.TYPE;
      Object object0 = ConvertUtils.convert(stringArray0, class0);
}"
1018,"    public static void deregister() {
        ConvertUtilsBean.getInstance().deregister();
    }","  public void test26()  throws Throwable  {
      ConvertUtils.deregister();
  }"
1019,"    public static long getDefaultLong() {
        return (ConvertUtilsBean.getInstance().getDefaultLong());
    }","  public void test27()  throws Throwable  {
      long long0 = ConvertUtils.getDefaultLong();
}"
1020,"    public static void setDefaultCharacter(final char newDefaultCharacter) {
        ConvertUtilsBean.getInstance().setDefaultCharacter(newDefaultCharacter);
    }","  public void test28()  throws Throwable  {
      ConvertUtils.setDefaultCharacter('I');
  }"
1021,"    public String convert(final Object value) {
        return (String)convert(value, String.class);
    }","  public void test0()  throws Throwable  {
      ConvertUtilsBean2 convertUtilsBean2_0 = new ConvertUtilsBean2();
      Class<Object> class0 = Object.class;
      Object object0 = convertUtilsBean2_0.convert((String[]) null, class0);
}"
1022,"    public String convert(final Object value) {
        return (String)convert(value, String.class);
    }","  public void test1()  throws Throwable  {
      ConvertUtilsBean2 convertUtilsBean2_0 = new ConvertUtilsBean2();
      Class<String> class0 = String.class;
      Object object0 = convertUtilsBean2_0.convert((String) null, class0);
}"
1023,"    public String convert(final Object value) {
        return (String)convert(value, String.class);
    }","  public void test2()  throws Throwable  {
      ConvertUtilsBean2 convertUtilsBean2_0 = new ConvertUtilsBean2();
      String string0 = convertUtilsBean2_0.convert((Object) null);
}"
1024,"    public String convert(final Object value) {
        return (String)convert(value, String.class);
    }","  public void test3()  throws Throwable  {
      ConvertUtilsBean2 convertUtilsBean2_0 = new ConvertUtilsBean2();
      Class<String> class0 = String.class;
      convertUtilsBean2_0.deregister(class0);
      String string0 = convertUtilsBean2_0.convert((Object) """");
}"
1025,"    public String convert(final Object value) {
        return (String)convert(value, String.class);
    }","  public void test4()  throws Throwable  {
      ConvertUtilsBean2 convertUtilsBean2_0 = new ConvertUtilsBean2();
      String[] stringArray0 = new String[8];
      convertUtilsBean2_0.register(true, true, 0);
      Class<Integer> class0 = Integer.class;
      // Undeclared exception!
      try { 
        convertUtilsBean2_0.convert(stringArray0, class0);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // No value specified for 'Integer'
         //
         verifyException(""org.apache.commons.beanutils.converters.AbstractConverter"", e);
      }
  }"
1026,"    public String convert(final Object value) {
        return (String)convert(value, String.class);
    }","  public void test5()  throws Throwable  {
      ConvertUtilsBean2 convertUtilsBean2_0 = new ConvertUtilsBean2();
      Class<Object> class0 = Object.class;
      SqlTimestampConverter sqlTimestampConverter0 = new SqlTimestampConverter();
      convertUtilsBean2_0.register((Converter) sqlTimestampConverter0, (Class<?>) class0);
      // Undeclared exception!
      try { 
        convertUtilsBean2_0.convert("""", class0);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // SqlTimestampConverter does not support default String to 'Object' conversion.
         //
         verifyException(""org.apache.commons.beanutils.converters.DateTimeConverter"", e);
      }
  }"
1027,"    public String convert(final Object value) {
        return (String)convert(value, String.class);
    }","  public void test6()  throws Throwable  {
      ConvertUtilsBean2 convertUtilsBean2_0 = new ConvertUtilsBean2();
      String string0 = convertUtilsBean2_0.convert((Object) """");
}"
1028,"    public String convert(final Object value) {
        return (String)convert(value, String.class);
    }","  public void test7()  throws Throwable  {
      ConvertUtilsBean2 convertUtilsBean2_0 = new ConvertUtilsBean2();
      Class<Integer> class0 = Integer.class;
      Object object0 = convertUtilsBean2_0.convert("""", class0);
}"
1029,"    public String convert(final Object value) {
        return (String)convert(value, String.class);
    }","  public void test8()  throws Throwable  {
      ConvertUtilsBean2 convertUtilsBean2_0 = new ConvertUtilsBean2();
      String[] stringArray0 = new String[8];
      Class<String> class0 = String.class;
      Object object0 = convertUtilsBean2_0.convert(stringArray0, class0);
}"
1030,"    public String getWriteMethodPrefix() {
        return writeMethodPrefix;
    }","  public void test0()  throws Throwable  {
      FluentPropertyBeanIntrospector fluentPropertyBeanIntrospector0 = new FluentPropertyBeanIntrospector("""");
      String string0 = fluentPropertyBeanIntrospector0.getWriteMethodPrefix();
}"
1031,"    public void introspect(final IntrospectionContext icontext)
            throws IntrospectionException {
        for (final Method m : icontext.getTargetClass().getMethods()) {
            if (m.getName().startsWith(getWriteMethodPrefix())) {
                final String propertyName = propertyName(m);
                final PropertyDescriptor pd = icontext
                        .getPropertyDescriptor(propertyName);
                try {
                    if (pd == null) {
                        icontext.addPropertyDescriptor(createFluentPropertyDescritor(
                                m, propertyName));
                    } else if (pd.getWriteMethod() == null) {
                        pd.setWriteMethod(m);
                    }
                } catch (final IntrospectionException e) {
                    log.info(""Error when creating PropertyDescriptor for "" + m
                            + ""! Ignoring this property."");
                    log.debug(""Exception is:"", e);
                }
            }
        }
    }","  public void test1()  throws Throwable  {
      FluentPropertyBeanIntrospector fluentPropertyBeanIntrospector0 = new FluentPropertyBeanIntrospector("""");
      // Undeclared exception!
      try { 
        fluentPropertyBeanIntrospector0.introspect((IntrospectionContext) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.beanutils.FluentPropertyBeanIntrospector"", e);
      }
  }"
1032,"    public String getWriteMethodPrefix() {
        return writeMethodPrefix;
    }","  public void test2()  throws Throwable  {
      FluentPropertyBeanIntrospector fluentPropertyBeanIntrospector0 = new FluentPropertyBeanIntrospector(""equals"");
      String string0 = fluentPropertyBeanIntrospector0.getWriteMethodPrefix();
}"
1033,"    public String getWriteMethodPrefix() {
        return writeMethodPrefix;
    }","  public void test3()  throws Throwable  {
      FluentPropertyBeanIntrospector fluentPropertyBeanIntrospector0 = new FluentPropertyBeanIntrospector(""p"");
      Class<Integer> class0 = Integer.class;
      DefaultIntrospectionContext defaultIntrospectionContext0 = new DefaultIntrospectionContext(class0);
      fluentPropertyBeanIntrospector0.introspect(defaultIntrospectionContext0);
}"
1034,"    public FluentPropertyBeanIntrospector(final String writePrefix) {
        if (writePrefix == null) {
            throw new IllegalArgumentException(
                    ""Prefix for write methods must not be null!"");
        }
        writeMethodPrefix = writePrefix;
    }","  public void test4()  throws Throwable  {
      FluentPropertyBeanIntrospector fluentPropertyBeanIntrospector0 = null;
      try {
        fluentPropertyBeanIntrospector0 = new FluentPropertyBeanIntrospector((String) null);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Prefix for write methods must not be null!
         //
         verifyException(""org.apache.commons.beanutils.FluentPropertyBeanIntrospector"", e);
      }
  }"
1035,"    public String getWriteMethodPrefix() {
        return writeMethodPrefix;
    }","  public void test5()  throws Throwable  {
      FluentPropertyBeanIntrospector fluentPropertyBeanIntrospector0 = new FluentPropertyBeanIntrospector(""equals"");
      Class<Object> class0 = Object.class;
      DefaultIntrospectionContext defaultIntrospectionContext0 = new DefaultIntrospectionContext(class0);
      fluentPropertyBeanIntrospector0.introspect(defaultIntrospectionContext0);
}"
1036,"    public String getWriteMethodPrefix() {
        return writeMethodPrefix;
    }","  public void test6()  throws Throwable  {
      FluentPropertyBeanIntrospector fluentPropertyBeanIntrospector0 = new FluentPropertyBeanIntrospector();
}"
1037,"    public boolean evaluate(final Object object) {

        boolean evaluation = false;

        try {
            final Object propValue = PropertyUtils.getProperty( object, propertyName );
            evaluation = predicate.evaluate(propValue);
        } catch (final IllegalArgumentException e) {
            final String errorMsg = ""Problem during evaluation."";
            log.error(""ERROR: "" + errorMsg, e);
            throw e;
        } catch (final IllegalAccessException e) {
            final String errorMsg = ""Unable to access the property provided."";
            log.error(errorMsg, e);
            throw new IllegalArgumentException(errorMsg);
        } catch (final InvocationTargetException e) {
            final String errorMsg = ""Exception occurred in property's getter"";
            log.error(errorMsg, e);
            throw new IllegalArgumentException(errorMsg);
        } catch (final NoSuchMethodException e) {
            final String errorMsg = ""Property not found."";
            log.error(errorMsg, e);
            throw new IllegalArgumentException(errorMsg);
        }

        return evaluation;
    }","  public void test0()  throws Throwable  {
      Predicate predicate0 = UniquePredicate.getInstance();
      BeanPredicate beanPredicate0 = new BeanPredicate((String) null, predicate0);
      beanPredicate0.setPropertyName(""f/PP1."");
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        beanPredicate0.evaluate(object0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Property not found.
         //
         verifyException(""org.apache.commons.beanutils.BeanPredicate"", e);
      }
  }"
1038,"    public String getPropertyName() {
        return propertyName;
    }","  public void test1()  throws Throwable  {
      Predicate predicate0 = UniquePredicate.getInstance();
      BeanPredicate beanPredicate0 = new BeanPredicate((String) null, predicate0);
      beanPredicate0.setPropertyName(""f/PP1."");
      String string0 = beanPredicate0.getPropertyName();
}"
1039,"    public String getPropertyName() {
        return propertyName;
    }","  public void test2()  throws Throwable  {
      Predicate predicate0 = NullPredicate.getInstance();
      BeanPredicate beanPredicate0 = new BeanPredicate("""", predicate0);
      String string0 = beanPredicate0.getPropertyName();
}"
1040,"    public Predicate getPredicate() {
        return predicate;
    }","  public void test3()  throws Throwable  {
      BeanPredicate beanPredicate0 = new BeanPredicate("";IhPc7T m"", (Predicate) null);
      Predicate predicate0 = beanPredicate0.getPredicate();
}"
1041,"    public boolean evaluate(final Object object) {

        boolean evaluation = false;

        try {
            final Object propValue = PropertyUtils.getProperty( object, propertyName );
            evaluation = predicate.evaluate(propValue);
        } catch (final IllegalArgumentException e) {
            final String errorMsg = ""Problem during evaluation."";
            log.error(""ERROR: "" + errorMsg, e);
            throw e;
        } catch (final IllegalAccessException e) {
            final String errorMsg = ""Unable to access the property provided."";
            log.error(errorMsg, e);
            throw new IllegalArgumentException(errorMsg);
        } catch (final InvocationTargetException e) {
            final String errorMsg = ""Exception occurred in property's getter"";
            log.error(errorMsg, e);
            throw new IllegalArgumentException(errorMsg);
        } catch (final NoSuchMethodException e) {
            final String errorMsg = ""Property not found."";
            log.error(errorMsg, e);
            throw new IllegalArgumentException(errorMsg);
        }

        return evaluation;
    }","  public void test4()  throws Throwable  {
      HashMap<Object, Integer> hashMap0 = new HashMap<Object, Integer>();
      Transformer transformer0 = SwitchTransformer.getInstance((Map) hashMap0);
      Predicate predicate0 = TransformerPredicate.getInstance(transformer0);
      BeanPredicate beanPredicate0 = new BeanPredicate("""", predicate0);
      // Undeclared exception!
      try { 
        beanPredicate0.evaluate(hashMap0);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // Transformer must return an instanceof Boolean, it was a null object
         //
         verifyException(""org.apache.commons.collections.functors.TransformerPredicate"", e);
      }
  }"
1042,"    public String getPropertyName() {
        return propertyName;
    }","  public void test5()  throws Throwable  {
      Predicate predicate0 = UniquePredicate.getInstance();
      BeanPredicate beanPredicate0 = new BeanPredicate((String) null, predicate0);
      String string0 = beanPredicate0.getPropertyName();
}"
1043,"    public Predicate getPredicate() {
        return predicate;
    }","  public void test6()  throws Throwable  {
      Predicate predicate0 = UniquePredicate.getInstance();
      BeanPredicate beanPredicate0 = new BeanPredicate((String) null, predicate0);
      Predicate predicate1 = beanPredicate0.getPredicate();
}"
1044,"    public String getPropertyName() {
        return propertyName;
    }","  public void test7()  throws Throwable  {
      Predicate predicate0 = UniquePredicate.getInstance();
      BeanPredicate beanPredicate0 = new BeanPredicate((String) null, predicate0);
      beanPredicate0.setPredicate(predicate0);
}"
1045,"    public boolean evaluate(final Object object) {

        boolean evaluation = false;

        try {
            final Object propValue = PropertyUtils.getProperty( object, propertyName );
            evaluation = predicate.evaluate(propValue);
        } catch (final IllegalArgumentException e) {
            final String errorMsg = ""Problem during evaluation."";
            log.error(""ERROR: "" + errorMsg, e);
            throw e;
        } catch (final IllegalAccessException e) {
            final String errorMsg = ""Unable to access the property provided."";
            log.error(errorMsg, e);
            throw new IllegalArgumentException(errorMsg);
        } catch (final InvocationTargetException e) {
            final String errorMsg = ""Exception occurred in property's getter"";
            log.error(errorMsg, e);
            throw new IllegalArgumentException(errorMsg);
        } catch (final NoSuchMethodException e) {
            final String errorMsg = ""Property not found."";
            log.error(errorMsg, e);
            throw new IllegalArgumentException(errorMsg);
        }

        return evaluation;
    }","  public void test8()  throws Throwable  {
      Predicate[] predicateArray0 = new Predicate[0];
      Predicate predicate0 = AllPredicate.getInstance(predicateArray0);
      BeanPredicate beanPredicate0 = new BeanPredicate(""rVZGiq"", predicate0);
      // Undeclared exception!
      try { 
        beanPredicate0.evaluate((Object) null);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // No bean specified
         //
         verifyException(""org.apache.commons.beanutils.PropertyUtilsBean"", e);
      }
  }"
1046,"    public static void setProperty(final Object bean, final String name, final Object value)
            throws IllegalAccessException, InvocationTargetException {

        LocaleBeanUtilsBean.getLocaleBeanUtilsInstance().setProperty(bean, name, value);
    }","  public void test0()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Class class1 = (Class)LocaleBeanUtils.convert(class0, 980, class0);
      Object object0 = new Object();
      LocaleBeanUtils.setProperty((Object) class1, ""3H>/]Ou8y:yo;nhL*"", object0, ""HEOAlM_F-"");
}"
1047,"    public static String getSimpleProperty(final Object bean, final String name, final String pattern)
            throws IllegalAccessException, InvocationTargetException,
            NoSuchMethodException {

        return LocaleBeanUtilsBean.getLocaleBeanUtilsInstance().getSimpleProperty(bean, name, pattern);
    }","  public void test1()  throws Throwable  {
      Integer integer0 = new Integer(0);
      try { 
        LocaleBeanUtils.getSimpleProperty((Object) integer0, """", ""] to class "");
        fail(""Expecting exception: NoSuchMethodException"");
      } catch(NoSuchMethodException e) {
         //
         // Unknown property '' on class 'class java.lang.Integer'
         //
         verifyException(""org.apache.commons.beanutils.PropertyUtilsBean"", e);
      }
  }"
1048,"    public static String getIndexedProperty(final Object bean, final String name, final String pattern)
            throws IllegalAccessException, InvocationTargetException,
            NoSuchMethodException {

        return LocaleBeanUtilsBean.getLocaleBeanUtilsInstance().getIndexedProperty(bean, name, pattern);
    }","  public void test2()  throws Throwable  {
      Object object0 = new Object();
      try { 
        LocaleBeanUtils.getIndexedProperty(object0, ""    Target name = "", 1, ""0F"");
        fail(""Expecting exception: NoSuchMethodException"");
      } catch(NoSuchMethodException e) {
         //
         // Unknown property '    Target name = ' on bean class 'class java.lang.Object'
         //
         verifyException(""org.apache.commons.beanutils.PropertyUtilsBean"", e);
      }
  }"
1049,"    protected static Object convert(final Class<?> type, final int index, final Object value, final String pattern) {

        return LocaleBeanUtilsBean.getLocaleBeanUtilsInstance().convert(type, index, value, pattern);
    }","  public void test3()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Object object0 = LocaleBeanUtils.convert(class0, (-941), (Object) null, ""|pjSO(sltvX-wK.X:/|"");
}"
1050,"    protected static Object convert(final Class<?> type, final int index, final Object value, final String pattern) {

        return LocaleBeanUtilsBean.getLocaleBeanUtilsInstance().convert(type, index, value, pattern);
    }","  public void test4()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Object object0 = LocaleBeanUtils.convert(class0, 1, (Object) null);
}"
1051,"    public static void setProperty(final Object bean, final String name, final Object value)
            throws IllegalAccessException, InvocationTargetException {

        LocaleBeanUtilsBean.getLocaleBeanUtilsInstance().setProperty(bean, name, value);
    }","  public void test5()  throws Throwable  {
      Integer integer0 = new Integer(93);
      // Undeclared exception!
      try { 
        LocaleBeanUtils.setProperty((Object) ""java.lang.String@0000000001"", ""oOdZ9A!((:76o9i"", (Object) integer0, ""oOdZ9A!((:76o9i"");
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Missing End Delimiter
         //
         verifyException(""org.apache.commons.beanutils.expression.DefaultResolver"", e);
      }
  }"
1052,"    public static void setProperty(final Object bean, final String name, final Object value)
            throws IllegalAccessException, InvocationTargetException {

        LocaleBeanUtilsBean.getLocaleBeanUtilsInstance().setProperty(bean, name, value);
    }","  public void test6()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocaleBeanUtils.setProperty((Object) ""9Uw9m@(;2`McUW\""&mdQ"", ""9Uw9m@(;2`McUW\""&mdQ"", (Object) ""9Uw9m@(;2`McUW\""&mdQ"");
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Missing End Delimiter
         //
         verifyException(""org.apache.commons.beanutils.expression.DefaultResolver"", e);
      }
  }"
1053,"    protected static void invokeSetter(final Object target, final String propName, final String key, final int index, final Object newValue)
            throws IllegalAccessException, InvocationTargetException {

       LocaleBeanUtilsBean.getLocaleBeanUtilsInstance().invokeSetter(target, propName, key, index, newValue);
    }","  public void test7()  throws Throwable  {
      Integer integer0 = new Integer((-3220));
      // Undeclared exception!
      try { 
        LocaleBeanUtils.invokeSetter((Object) null, ""3(Vw`L ):<"", """", (-3220), integer0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // No bean specified
         //
         verifyException(""org.apache.commons.beanutils.PropertyUtilsBean"", e);
      }
  }"
1054,"    public static String getSimpleProperty(final Object bean, final String name, final String pattern)
            throws IllegalAccessException, InvocationTargetException,
            NoSuchMethodException {

        return LocaleBeanUtilsBean.getLocaleBeanUtilsInstance().getSimpleProperty(bean, name, pattern);
    }","  public void test8()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocaleBeanUtils.getSimpleProperty((Object) null, ""4"", ""4"");
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // No bean specified
         //
         verifyException(""org.apache.commons.beanutils.PropertyUtilsBean"", e);
      }
  }"
1055,"    public static String getSimpleProperty(final Object bean, final String name, final String pattern)
            throws IllegalAccessException, InvocationTargetException,
            NoSuchMethodException {

        return LocaleBeanUtilsBean.getLocaleBeanUtilsInstance().getSimpleProperty(bean, name, pattern);
    }","  public void test9()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocaleBeanUtils.getSimpleProperty((Object) null, ""|pjSO(sltvX-wK.X:/|"");
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // No bean specified
         //
         verifyException(""org.apache.commons.beanutils.PropertyUtilsBean"", e);
      }
  }"
1056,"    public static String getProperty(final Object bean, final String name, final String pattern)
            throws IllegalAccessException, InvocationTargetException,
            NoSuchMethodException {

        return LocaleBeanUtilsBean.getLocaleBeanUtilsInstance().getProperty(bean, name, pattern);
    }","  public void test10()  throws Throwable  {
      Integer integer0 = new Integer(0);
      // Undeclared exception!
      try { 
        LocaleBeanUtils.getProperty((Object) integer0, (String) null, """");
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // No name specified for bean class 'class java.lang.Integer'
         //
         verifyException(""org.apache.commons.beanutils.PropertyUtilsBean"", e);
      }
  }"
1057,"    public static String getProperty(final Object bean, final String name, final String pattern)
            throws IllegalAccessException, InvocationTargetException,
            NoSuchMethodException {

        return LocaleBeanUtilsBean.getLocaleBeanUtilsInstance().getProperty(bean, name, pattern);
    }","  public void test11()  throws Throwable  {
      try { 
        LocaleBeanUtils.getProperty((Object) """", ""Mapped property names are not allowed: Property '"");
        fail(""Expecting exception: NoSuchMethodException"");
      } catch(NoSuchMethodException e) {
         //
         // Unknown property 'Mapped property names are not allowed: Property '' on class 'class java.lang.String'
         //
         verifyException(""org.apache.commons.beanutils.PropertyUtilsBean"", e);
      }
  }"
1058,"    public static String getNestedProperty(final Object bean, final String name, final String pattern)
            throws IllegalAccessException, InvocationTargetException,
            NoSuchMethodException {

        return LocaleBeanUtilsBean.getLocaleBeanUtilsInstance().getNestedProperty(bean, name, pattern);
    }","  public void test12()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocaleBeanUtils.getNestedProperty((Object) null, (String) null, (String) null);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // No bean specified
         //
         verifyException(""org.apache.commons.beanutils.PropertyUtilsBean"", e);
      }
  }"
1059,"    public static String getNestedProperty(final Object bean, final String name, final String pattern)
            throws IllegalAccessException, InvocationTargetException,
            NoSuchMethodException {

        return LocaleBeanUtilsBean.getLocaleBeanUtilsInstance().getNestedProperty(bean, name, pattern);
    }","  public void test13()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocaleBeanUtils.getNestedProperty((Object) null, """");
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // No bean specified
         //
         verifyException(""org.apache.commons.beanutils.PropertyUtilsBean"", e);
      }
  }"
1060,"    public static String getMappedPropertyLocale(final Object bean, final String name, final String pattern)
            throws IllegalAccessException, InvocationTargetException,
            NoSuchMethodException {

        return LocaleBeanUtilsBean.getLocaleBeanUtilsInstance().getMappedPropertyLocale(bean, name, pattern);
    }","  public void test14()  throws Throwable  {
      try { 
        LocaleBeanUtils.getMappedPropertyLocale(""F\""o3"", ""P`t(GnlAa#)!9}@y$gn"", ""G"");
        fail(""Expecting exception: NoSuchMethodException"");
      } catch(NoSuchMethodException e) {
         //
         // Unknown property 'P`t'+ on bean class 'class java.lang.String'
         //
         verifyException(""org.apache.commons.beanutils.PropertyUtilsBean"", e);
      }
  }"
1061,"    public static String getMappedProperty(final Object bean,
                                           final String name, final String key, final String pattern)
            throws IllegalAccessException, InvocationTargetException,
            NoSuchMethodException {

        return LocaleBeanUtilsBean.getLocaleBeanUtilsInstance().getMappedProperty(bean, name, key, pattern);
    }","  public void test15()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocaleBeanUtils.getMappedProperty((Object) null, ""org.apache.commons.beanutils.locale.LocaleBeanUtils$Descriptor"", ""org.apache.commons.beanutils.locale.LocaleBeanUtils$Descriptor"", """");
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // No bean specified
         //
         verifyException(""org.apache.commons.beanutils.PropertyUtilsBean"", e);
      }
  }"
1062,"    public static String getMappedProperty(final Object bean,
                                           final String name, final String key, final String pattern)
            throws IllegalAccessException, InvocationTargetException,
            NoSuchMethodException {

        return LocaleBeanUtilsBean.getLocaleBeanUtilsInstance().getMappedProperty(bean, name, key, pattern);
    }","  public void test16()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocaleBeanUtils.getMappedProperty((Object) null, (String) null, ""6v(Oz]s6<;gG`=xUM/"");
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // No bean specified
         //
         verifyException(""org.apache.commons.beanutils.PropertyUtilsBean"", e);
      }
  }"
1063,"    public static String getIndexedProperty(final Object bean, final String name, final String pattern)
            throws IllegalAccessException, InvocationTargetException,
            NoSuchMethodException {

        return LocaleBeanUtilsBean.getLocaleBeanUtilsInstance().getIndexedProperty(bean, name, pattern);
    }","  public void test17()  throws Throwable  {
      try { 
        LocaleBeanUtils.getIndexedProperty((Object) "":ww"", """", 2);
        fail(""Expecting exception: NoSuchMethodException"");
      } catch(NoSuchMethodException e) {
         //
         // Unknown property '' on bean class 'class java.lang.String'
         //
         verifyException(""org.apache.commons.beanutils.PropertyUtilsBean"", e);
      }
  }"
1064,"    protected static Class<?> definePropertyType(final Object target, final String name, final String propName)
            throws IllegalAccessException, InvocationTargetException {

        return LocaleBeanUtilsBean.getLocaleBeanUtilsInstance().definePropertyType(target, name, propName);
    }","  public void test18()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocaleBeanUtils.definePropertyType((Object) null, """", """");
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // No bean specified
         //
         verifyException(""org.apache.commons.beanutils.PropertyUtilsBean"", e);
      }
  }"
1065,"    protected static Object convert(final Class<?> type, final int index, final Object value, final String pattern) {

        return LocaleBeanUtilsBean.getLocaleBeanUtilsInstance().convert(type, index, value, pattern);
    }","  public void test19()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      // Undeclared exception!
      try { 
        LocaleBeanUtils.convert(class0, (-3274), ""'hsk8%rNgfUjU"", ""v/TGZ-<UqPMMEiyB<"");
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // Unparseable number: \""'hsk8%rNgfUjU\""
         //
         verifyException(""org.apache.commons.beanutils.locale.BaseLocaleConverter"", e);
      }
  }"
1066,"    protected static Object convert(final Class<?> type, final int index, final Object value, final String pattern) {

        return LocaleBeanUtilsBean.getLocaleBeanUtilsInstance().convert(type, index, value, pattern);
    }","  public void test20()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocaleBeanUtils.convert((Class<?>) null, 2595, """", """");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.beanutils.locale.LocaleBeanUtilsBean"", e);
      }
  }"
1067,"    protected static Object convert(final Class<?> type, final int index, final Object value, final String pattern) {

        return LocaleBeanUtilsBean.getLocaleBeanUtilsInstance().convert(type, index, value, pattern);
    }","  public void test21()  throws Throwable  {
      Integer integer0 = new Integer(1721);
      // Undeclared exception!
      try { 
        LocaleBeanUtils.convert((Class<?>) null, 0, integer0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.beanutils.locale.LocaleBeanUtilsBean"", e);
      }
  }"
1068,"    public static String getNestedProperty(final Object bean, final String name, final String pattern)
            throws IllegalAccessException, InvocationTargetException,
            NoSuchMethodException {

        return LocaleBeanUtilsBean.getLocaleBeanUtilsInstance().getNestedProperty(bean, name, pattern);
    }","  public void test22()  throws Throwable  {
      LocaleBeanUtils localeBeanUtils0 = new LocaleBeanUtils();
      try { 
        LocaleBeanUtils.getNestedProperty((Object) localeBeanUtils0, ""org.apache.commons.beanutils.locale.LocaleBeanUtils$Descriptor"");
        fail(""Expecting exception: NoSuchMethodException"");
      } catch(NoSuchMethodException e) {
         //
         // Unknown property 'org' on class 'class org.apache.commons.beanutils.locale.LocaleBeanUtils'
         //
         verifyException(""org.apache.commons.beanutils.PropertyUtilsBean"", e);
      }
  }"
1069,"    public static void setDefaultLocale(final Locale locale) {

        LocaleBeanUtilsBean.getLocaleBeanUtilsInstance().setDefaultLocale(locale);
    }","  public void test23()  throws Throwable  {
      Locale locale0 = Locale.CHINA;
      LocaleBeanUtils.setDefaultLocale(locale0);
}"
1070,"    public static void setApplyLocalized(final boolean newApplyLocalized) {

        LocaleBeanUtilsBean.getLocaleBeanUtilsInstance().setApplyLocalized(newApplyLocalized);
    }","  public void test24()  throws Throwable  {
      LocaleBeanUtils.setApplyLocalized(true);
  }"
1071,"    public static String getIndexedProperty(final Object bean, final String name, final String pattern)
            throws IllegalAccessException, InvocationTargetException,
            NoSuchMethodException {

        return LocaleBeanUtilsBean.getLocaleBeanUtilsInstance().getIndexedProperty(bean, name, pattern);
    }","  public void test25()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocaleBeanUtils.getIndexedProperty((Object) null, ""Method Name cannot be null"");
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // No bean specified
         //
         verifyException(""org.apache.commons.beanutils.PropertyUtilsBean"", e);
      }
  }"
1072,"    public static String getProperty(final Object bean, final String name, final String pattern)
            throws IllegalAccessException, InvocationTargetException,
            NoSuchMethodException {

        return LocaleBeanUtilsBean.getLocaleBeanUtilsInstance().getProperty(bean, name, pattern);
    }","  public void test26()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocaleBeanUtils.getProperty((Object) null, """");
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // No bean specified
         //
         verifyException(""org.apache.commons.beanutils.PropertyUtilsBean"", e);
      }
  }"
1073,"    public static String getMappedProperty(final Object bean,
                                           final String name, final String key, final String pattern)
            throws IllegalAccessException, InvocationTargetException,
            NoSuchMethodException {

        return LocaleBeanUtilsBean.getLocaleBeanUtilsInstance().getMappedProperty(bean, name, key, pattern);
    }","  public void test27()  throws Throwable  {
      Class<String> class0 = String.class;
      Object object0 = LocaleBeanUtils.convert(class0, 788, class0, ""eYw%6{"");
      // Undeclared exception!
      try { 
        LocaleBeanUtils.getMappedProperty(object0, ""eYw%6{"");
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Invalid mapped property 'eYw%6{' on bean class 'class java.lang.Class'
         //
         verifyException(""org.apache.commons.beanutils.PropertyUtilsBean"", e);
      }
  }"
1074,"    public static String getNestedProperty(final Object bean, final String name, final String pattern)
            throws IllegalAccessException, InvocationTargetException,
            NoSuchMethodException {

        return LocaleBeanUtilsBean.getLocaleBeanUtilsInstance().getNestedProperty(bean, name, pattern);
    }","  public void test28()  throws Throwable  {
      try { 
        LocaleBeanUtils.getNestedProperty((Object) """", ""#Kp*o#DSKk"", ""}EaQiMfYGd\""h-[=0V"");
        fail(""Expecting exception: NoSuchMethodException"");
      } catch(NoSuchMethodException e) {
         //
         // Unknown property '#Kp*o#DSKk' on class 'class java.lang.String'
         //
         verifyException(""org.apache.commons.beanutils.PropertyUtilsBean"", e);
      }
  }"
1075,"    public static void setProperty(final Object bean, final String name, final Object value)
            throws IllegalAccessException, InvocationTargetException {

        LocaleBeanUtilsBean.getLocaleBeanUtilsInstance().setProperty(bean, name, value);
    }","  public void test29()  throws Throwable  {
      Object object0 = new Object();
      Integer integer0 = new Integer(0);
      LocaleBeanUtils.setProperty(object0, """", (Object) integer0);
  }"
1076,"    public static boolean getApplyLocalized() {

        return LocaleBeanUtilsBean.getLocaleBeanUtilsInstance().getApplyLocalized();
    }","  public void test30()  throws Throwable  {
      boolean boolean0 = LocaleBeanUtils.getApplyLocalized();
}"
1077,"    public static String getIndexedProperty(final Object bean, final String name, final String pattern)
            throws IllegalAccessException, InvocationTargetException,
            NoSuchMethodException {

        return LocaleBeanUtilsBean.getLocaleBeanUtilsInstance().getIndexedProperty(bean, name, pattern);
    }","  public void test31()  throws Throwable  {
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        LocaleBeanUtils.getIndexedProperty(object0, ""@vn<[6NPd%]; n"", 0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Invalid indexed property '@vn<[6NPd%]' on bean class 'class java.lang.Object' Invalid index value '6NPd%'
         //
         verifyException(""org.apache.commons.beanutils.PropertyUtilsBean"", e);
      }
  }"
1078,"    public static String getMappedProperty(final Object bean,
                                           final String name, final String key, final String pattern)
            throws IllegalAccessException, InvocationTargetException,
            NoSuchMethodException {

        return LocaleBeanUtilsBean.getLocaleBeanUtilsInstance().getMappedProperty(bean, name, key, pattern);
    }","  public void test32()  throws Throwable  {
      Class<String> class0 = String.class;
      Object object0 = LocaleBeanUtils.convert(class0, 4626, class0, ""org.apache.commons.beanutils.locale.LocaleBeanUtils"");
      try { 
        LocaleBeanUtils.getMappedProperty(object0, ""org.apache.commons.beanutils.locale.LocaleBeanUtils"", "" using "");
        fail(""Expecting exception: NoSuchMethodException"");
      } catch(NoSuchMethodException e) {
         //
         // Unknown property 'org' on class 'class java.lang.Class'
         //
         verifyException(""org.apache.commons.beanutils.PropertyUtilsBean"", e);
      }
  }"
1079,"    public static String getSimpleProperty(final Object bean, final String name, final String pattern)
            throws IllegalAccessException, InvocationTargetException,
            NoSuchMethodException {

        return LocaleBeanUtilsBean.getLocaleBeanUtilsInstance().getSimpleProperty(bean, name, pattern);
    }","  public void test33()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Object object0 = LocaleBeanUtils.convert(class0, (-2398), class0, """");
      try { 
        LocaleBeanUtils.getSimpleProperty(object0, """");
        fail(""Expecting exception: NoSuchMethodException"");
      } catch(NoSuchMethodException e) {
         //
         // Unknown property '' on class 'class java.lang.Class'
         //
         verifyException(""org.apache.commons.beanutils.PropertyUtilsBean"", e);
      }
  }"
1080,"    protected static void invokeSetter(final Object target, final String propName, final String key, final int index, final Object newValue)
            throws IllegalAccessException, InvocationTargetException {

       LocaleBeanUtilsBean.getLocaleBeanUtilsInstance().invokeSetter(target, propName, key, index, newValue);
    }","  public void test34()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Object object0 = LocaleBeanUtils.convert(class0, (-103), class0, ""bRS:"");
      try { 
        LocaleBeanUtils.invokeSetter(object0, "":n1a"", """", (-103), ""java.lang.String@0000000001"");
        fail(""Expecting exception: InvocationTargetException"");
      } catch(InvocationTargetException e) {
         //
         // Cannot set :n1a
         //
         verifyException(""org.apache.commons.beanutils.locale.LocaleBeanUtilsBean"", e);
      }
  }"
1081,"    public static String getMappedProperty(final Object bean,
                                           final String name, final String key, final String pattern)
            throws IllegalAccessException, InvocationTargetException,
            NoSuchMethodException {

        return LocaleBeanUtilsBean.getLocaleBeanUtilsInstance().getMappedProperty(bean, name, key, pattern);
    }","  public void test35()  throws Throwable  {
      try { 
        LocaleBeanUtils.getMappedProperty((Object) """", ""L'*wndyM%UAw{QE"", """", "" Lr+a["");
        fail(""Expecting exception: NoSuchMethodException"");
      } catch(NoSuchMethodException e) {
         //
         // Unknown property 'L'*wndyM%UAw{QE'+ on bean class 'class java.lang.String'
         //
         verifyException(""org.apache.commons.beanutils.PropertyUtilsBean"", e);
      }
  }"
1082,"    public static String getMappedPropertyLocale(final Object bean, final String name, final String pattern)
            throws IllegalAccessException, InvocationTargetException,
            NoSuchMethodException {

        return LocaleBeanUtilsBean.getLocaleBeanUtilsInstance().getMappedPropertyLocale(bean, name, pattern);
    }","  public void test36()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocaleBeanUtils.getMappedPropertyLocale((Object) null, (String) null, (String) null);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // No bean specified
         //
         verifyException(""org.apache.commons.beanutils.PropertyUtilsBean"", e);
      }
  }"
1083,"    protected static Class<?> definePropertyType(final Object target, final String name, final String propName)
            throws IllegalAccessException, InvocationTargetException {

        return LocaleBeanUtilsBean.getLocaleBeanUtilsInstance().definePropertyType(target, name, propName);
    }","  public void test37()  throws Throwable  {
      Class<String> class0 = String.class;
      Object object0 = LocaleBeanUtils.convert(class0, 0, class0, ""org.apache.commons.beanutils.locale.LocaleBeanUtils"");
      Class<?> class1 = LocaleBeanUtils.definePropertyType(object0, ""a]T\""x)Qd/51|UFF,p"", """");
}"
1084,"    public static String getIndexedProperty(final Object bean, final String name, final String pattern)
            throws IllegalAccessException, InvocationTargetException,
            NoSuchMethodException {

        return LocaleBeanUtilsBean.getLocaleBeanUtilsInstance().getIndexedProperty(bean, name, pattern);
    }","  public void test38()  throws Throwable  {
      Locale locale0 = LocaleBeanUtils.getDefaultLocale();
      // Undeclared exception!
      try { 
        LocaleBeanUtils.getIndexedProperty((Object) locale0, (String) null, 0, (String) null);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // No name specified for bean class 'class java.util.Locale'
         //
         verifyException(""org.apache.commons.beanutils.PropertyUtilsBean"", e);
      }
  }"
1085,"    public static String getIndexedProperty(final Object bean, final String name, final String pattern)
            throws IllegalAccessException, InvocationTargetException,
            NoSuchMethodException {

        return LocaleBeanUtilsBean.getLocaleBeanUtilsInstance().getIndexedProperty(bean, name, pattern);
    }","  public void test39()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocaleBeanUtils.getIndexedProperty((Object) null, ""#;Zb~Ii'`,"", ""SPW"");
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // No bean specified
         //
         verifyException(""org.apache.commons.beanutils.PropertyUtilsBean"", e);
      }
  }"
1086,"    public static String getProperty(final Object bean, final String name, final String pattern)
            throws IllegalAccessException, InvocationTargetException,
            NoSuchMethodException {

        return LocaleBeanUtilsBean.getLocaleBeanUtilsInstance().getProperty(bean, name, pattern);
    }","  public void test40()  throws Throwable  {
      Integer integer0 = new Integer(6);
      try { 
        LocaleBeanUtils.getProperty((Object) integer0, ""org.apache.commons.beanutils.locale.LocaleBeanUtils$Descriptor"", (String) null);
        fail(""Expecting exception: NoSuchMethodException"");
      } catch(NoSuchMethodException e) {
         //
         // Unknown property 'org' on class 'class java.lang.Integer'
         //
         verifyException(""org.apache.commons.beanutils.PropertyUtilsBean"", e);
      }
  }"
1087,"    public String convert(final Object value) {
        return convert(value, defaultLocale, null);
    }","  public void test0()  throws Throwable  {
      LocaleConvertUtilsBean localeConvertUtilsBean0 = LocaleConvertUtilsBean.getInstance();
      Class<IntegerLocaleConverter> class0 = IntegerLocaleConverter.class;
      Locale locale0 = Locale.CHINA;
      localeConvertUtilsBean0.convert("""", class0, locale0, ""oB^Gd_"");
      localeConvertUtilsBean0.setDefaultLocale((Locale) null);
      localeConvertUtilsBean0.setApplyLocalized(false);
      localeConvertUtilsBean0.setApplyLocalized(false);
      BigDecimalLocaleConverter bigDecimalLocaleConverter0 = new BigDecimalLocaleConverter(localeConvertUtilsBean0, false);
      localeConvertUtilsBean0.lookup((Locale) null);
      Class<Locale> class1 = Locale.class;
      // Undeclared exception!
      try { 
        bigDecimalLocaleConverter0.convert(class1, (Object) class1, (String) null);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // Unsupported target type: class java.util.Locale
         //
         verifyException(""org.apache.commons.beanutils.locale.BaseLocaleConverter"", e);
      }
  }"
1088,"    public boolean getApplyLocalized() {
        return applyLocalized;
    }","  public void test1()  throws Throwable  {
      LocaleConvertUtilsBean localeConvertUtilsBean0 = new LocaleConvertUtilsBean();
      Class<Integer> class0 = Integer.class;
      Locale locale0 = Locale.ENGLISH;
      localeConvertUtilsBean0.lookup(class0, locale0);
}"
1089,"    public String convert(final Object value) {
        return convert(value, defaultLocale, null);
    }","  public void test2()  throws Throwable  {
      LocaleConvertUtilsBean localeConvertUtilsBean0 = LocaleConvertUtilsBean.getInstance();
      Class<Object> class0 = Object.class;
      String[] stringArray0 = new String[9];
      Object object0 = localeConvertUtilsBean0.convert(stringArray0, class0);
}"
1090,"    public String convert(final Object value) {
        return convert(value, defaultLocale, null);
    }","  public void test3()  throws Throwable  {
      LocaleConvertUtilsBean localeConvertUtilsBean0 = LocaleConvertUtilsBean.getInstance();
      Class<DoubleLocaleConverter> class0 = DoubleLocaleConverter.class;
      Locale locale0 = localeConvertUtilsBean0.getDefaultLocale();
      Object object0 = localeConvertUtilsBean0.convert((String) null, class0, locale0, "" to class "");
}"
1091,"    public String convert(final Object value) {
        return convert(value, defaultLocale, null);
    }","  public void test4()  throws Throwable  {
      LocaleConvertUtilsBean localeConvertUtilsBean0 = LocaleConvertUtilsBean.getInstance();
      Class<Integer> class0 = Integer.class;
      Object object0 = localeConvertUtilsBean0.convert((String) null, class0, "")'I.(!"");
}"
1092,"    public boolean getApplyLocalized() {
        return applyLocalized;
    }","  public void test5()  throws Throwable  {
      LocaleConvertUtilsBean localeConvertUtilsBean0 = new LocaleConvertUtilsBean();
      Class<LocaleConvertUtils> class0 = LocaleConvertUtils.class;
      localeConvertUtilsBean0.convert((String) null, class0);
}"
1093,"    public boolean getApplyLocalized() {
        return applyLocalized;
    }","  public void test6()  throws Throwable  {
      LocaleConvertUtilsBean localeConvertUtilsBean0 = new LocaleConvertUtilsBean();
      Locale locale0 = Locale.UK;
      localeConvertUtilsBean0.convert((Object) null, locale0, ""SPVWA5\""v'?"");
}"
1094,"    public String convert(final Object value) {
        return convert(value, defaultLocale, null);
    }","  public void test7()  throws Throwable  {
      LocaleConvertUtilsBean localeConvertUtilsBean0 = LocaleConvertUtilsBean.getInstance();
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      DoubleLocaleConverter doubleLocaleConverter0 = new DoubleLocaleConverter(locale0);
      String string0 = localeConvertUtilsBean0.convert((Object) doubleLocaleConverter0, locale0, (String) null);
}"
1095,"    public String convert(final Object value) {
        return convert(value, defaultLocale, null);
    }","  public void test8()  throws Throwable  {
      LocaleConvertUtilsBean localeConvertUtilsBean0 = LocaleConvertUtilsBean.getInstance();
      Locale locale0 = Locale.CHINESE;
      String string0 = localeConvertUtilsBean0.convert((Object) locale0, ""yyyy-MM-dd HH:mm:ss.S"");
}"
1096,"    public boolean getApplyLocalized() {
        return applyLocalized;
    }","  public void test9()  throws Throwable  {
      LocaleConvertUtilsBean localeConvertUtilsBean0 = new LocaleConvertUtilsBean();
      Timestamp timestamp0 = new Timestamp(720L);
      localeConvertUtilsBean0.convert((Object) timestamp0, """");
}"
1097,"    public String convert(final Object value) {
        return convert(value, defaultLocale, null);
    }","  public void test10()  throws Throwable  {
      LocaleConvertUtilsBean localeConvertUtilsBean0 = LocaleConvertUtilsBean.getInstance();
      String string0 = localeConvertUtilsBean0.convert((Object) null);
}"
1098,"    public String convert(final Object value) {
        return convert(value, defaultLocale, null);
    }","  public void test11()  throws Throwable  {
      LocaleConvertUtilsBean localeConvertUtilsBean0 = LocaleConvertUtilsBean.getInstance();
      Byte byte0 = new Byte((byte) (-47));
      String string0 = localeConvertUtilsBean0.convert((Object) byte0);
}"
1099,"    public boolean getApplyLocalized() {
        return applyLocalized;
    }","  public void test12()  throws Throwable  {
      LocaleConvertUtilsBean localeConvertUtilsBean0 = LocaleConvertUtilsBean.getInstance();
      DateLocaleConverter dateLocaleConverter0 = new DateLocaleConverter((Locale) null);
      Class<BigDecimal> class0 = BigDecimal.class;
      localeConvertUtilsBean0.register(dateLocaleConverter0, class0, (Locale) null);
}"
1100,"    public LocaleConverter lookup(final Class<?> clazz, final Locale locale) {

        final LocaleConverter converter = (LocaleConverter) lookup(locale).get(clazz);

        if (log.isTraceEnabled()) {
            log.trace(""LocaleConverter:"" + converter);
        }

        return converter;
    }","  public void test13()  throws Throwable  {
      LocaleConvertUtilsBean localeConvertUtilsBean0 = LocaleConvertUtilsBean.getInstance();
      Class<SqlDateLocaleConverter> class0 = SqlDateLocaleConverter.class;
      LocaleConverter localeConverter0 = localeConvertUtilsBean0.lookup(class0, (Locale) null);
}"
1101,"    public boolean getApplyLocalized() {
        return applyLocalized;
    }","  public void test14()  throws Throwable  {
      LocaleConvertUtilsBean localeConvertUtilsBean0 = LocaleConvertUtilsBean.getInstance();
      Class<Object> class0 = Object.class;
      localeConvertUtilsBean0.deregister(class0, (Locale) null);
}"
1102,"    public String convert(final Object value) {
        return convert(value, defaultLocale, null);
    }","  public void test15()  throws Throwable  {
      LocaleConvertUtilsBean localeConvertUtilsBean0 = new LocaleConvertUtilsBean();
      String string0 = localeConvertUtilsBean0.convert((Object) null, ""SPVWA5\""v'?"");
      Locale locale0 = Locale.UK;
      String[] stringArray0 = new String[9];
      stringArray0[0] = ""English"";
      Class<Timestamp> class0 = Timestamp.class;
      // Undeclared exception!
      try { 
        localeConvertUtilsBean0.convert(stringArray0, class0, locale0, string0);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // Error parsing date 'English' at position=0
         //
         verifyException(""org.apache.commons.beanutils.locale.converters.DateLocaleConverter"", e);
      }
  }"
1103,"    public String convert(final Object value) {
        return convert(value, defaultLocale, null);
    }","  public void test16()  throws Throwable  {
      LocaleConvertUtilsBean localeConvertUtilsBean0 = new LocaleConvertUtilsBean();
      Class<IntegerLocaleConverter> class0 = IntegerLocaleConverter.class;
      Locale locale0 = Locale.GERMANY;
      // Undeclared exception!
      try { 
        localeConvertUtilsBean0.convert((String[]) null, class0, locale0, ""~[K%&8h(v"");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.beanutils.locale.LocaleConvertUtilsBean"", e);
      }
  }"
1104,"    public String convert(final Object value) {
        return convert(value, defaultLocale, null);
    }","  public void test17()  throws Throwable  {
      LocaleConvertUtilsBean localeConvertUtilsBean0 = LocaleConvertUtilsBean.getInstance();
      String[] stringArray0 = new String[8];
      stringArray0[0] = """";
      Class<SqlTimeLocaleConverter> class0 = SqlTimeLocaleConverter.class;
      Locale locale0 = Locale.CHINA;
      // Undeclared exception!
      try { 
        localeConvertUtilsBean0.convert(stringArray0, class0, locale0, (String) null);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // array element type mismatch
         //
         verifyException(""java.lang.reflect.Array"", e);
      }
  }"
1105,"    public String convert(final Object value) {
        return convert(value, defaultLocale, null);
    }","  public void test18()  throws Throwable  {
      LocaleConvertUtilsBean localeConvertUtilsBean0 = new LocaleConvertUtilsBean();
      String[] stringArray0 = new String[9];
      stringArray0[0] = ""6og70=}z&0{Gg6m?ii"";
      Class<BigInteger> class0 = BigInteger.class;
      // Undeclared exception!
      try { 
        localeConvertUtilsBean0.convert(stringArray0, class0, ""'+ on bean class '"");
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // Unparseable number: \""6og70=}z&0{Gg6m?ii\""
         //
         verifyException(""org.apache.commons.beanutils.locale.BaseLocaleConverter"", e);
      }
  }"
1106,"    public String convert(final Object value) {
        return convert(value, defaultLocale, null);
    }","  public void test19()  throws Throwable  {
      LocaleConvertUtilsBean localeConvertUtilsBean0 = new LocaleConvertUtilsBean();
      Class<ByteLocaleConverter> class0 = ByteLocaleConverter.class;
      // Undeclared exception!
      try { 
        localeConvertUtilsBean0.convert((String[]) null, class0, """");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.beanutils.locale.LocaleConvertUtilsBean"", e);
      }
  }"
1107,"    public String convert(final Object value) {
        return convert(value, defaultLocale, null);
    }","  public void test20()  throws Throwable  {
      LocaleConvertUtilsBean localeConvertUtilsBean0 = LocaleConvertUtilsBean.getInstance();
      String[] stringArray0 = new String[5];
      stringArray0[0] = ""\""w="";
      Class<BigIntegerLocaleConverter> class0 = BigIntegerLocaleConverter.class;
      // Undeclared exception!
      try { 
        localeConvertUtilsBean0.convert(stringArray0, class0, """");
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // array element type mismatch
         //
         verifyException(""java.lang.reflect.Array"", e);
      }
  }"
1108,"    public String convert(final Object value) {
        return convert(value, defaultLocale, null);
    }","  public void test21()  throws Throwable  {
      LocaleConvertUtilsBean localeConvertUtilsBean0 = LocaleConvertUtilsBean.getInstance();
      Class<String> class0 = String.class;
      // Undeclared exception!
      try { 
        localeConvertUtilsBean0.convert((String[]) null, class0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.beanutils.locale.LocaleConvertUtilsBean"", e);
      }
  }"
1109,"    public String convert(final Object value) {
        return convert(value, defaultLocale, null);
    }","  public void test22()  throws Throwable  {
      LocaleConvertUtilsBean localeConvertUtilsBean0 = LocaleConvertUtilsBean.getInstance();
      Class<IntegerLocaleConverter> class0 = IntegerLocaleConverter.class;
      String[] stringArray0 = new String[7];
      stringArray0[0] = ""GLUBrKZfnO5os$_"";
      // Undeclared exception!
      try { 
        localeConvertUtilsBean0.convert(stringArray0, class0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // array element type mismatch
         //
         verifyException(""java.lang.reflect.Array"", e);
      }
  }"
1110,"    public String convert(final Object value) {
        return convert(value, defaultLocale, null);
    }","  public void test23()  throws Throwable  {
      LocaleConvertUtilsBean localeConvertUtilsBean0 = LocaleConvertUtilsBean.getInstance();
      Class<Short> class0 = Short.class;
      // Undeclared exception!
      try { 
        localeConvertUtilsBean0.convert("""", class0, ""org.apache.commons.beanutils.locale.converters.DecimalLocaleConverter"");
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // Multiple decimal separators in pattern \""org.apache.commons.beanutils.locale.converters.DecimalLocaleConverter\""
         //
         verifyException(""org.apache.commons.beanutils.locale.BaseLocaleConverter"", e);
      }
  }"
1111,"    public String convert(final Object value) {
        return convert(value, defaultLocale, null);
    }","  public void test24()  throws Throwable  {
      LocaleConvertUtilsBean localeConvertUtilsBean0 = new LocaleConvertUtilsBean();
      Class<Date> class0 = Date.class;
      // Undeclared exception!
      try { 
        localeConvertUtilsBean0.convert(""  setProperty("", class0);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // Error parsing date '  setProperty(' at position=0
         //
         verifyException(""org.apache.commons.beanutils.locale.converters.DateLocaleConverter"", e);
      }
  }"
1112,"    public String convert(final Object value) {
        return convert(value, defaultLocale, null);
    }","  public void test25()  throws Throwable  {
      LocaleConvertUtilsBean localeConvertUtilsBean0 = LocaleConvertUtilsBean.getInstance();
      Double double0 = new Double(1.0);
      Locale locale0 = Locale.ENGLISH;
      // Undeclared exception!
      try { 
        localeConvertUtilsBean0.convert((Object) double0, locale0, ""Illegal pattern character '"");
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // Malformed pattern \""Illegal pattern character '\""
         //
         verifyException(""org.apache.commons.beanutils.locale.BaseLocaleConverter"", e);
      }
  }"
1113,"    public String convert(final Object value) {
        return convert(value, defaultLocale, null);
    }","  public void test26()  throws Throwable  {
      LocaleConvertUtilsBean localeConvertUtilsBean0 = LocaleConvertUtilsBean.getInstance();
      Long long0 = new Long((-342L));
      // Undeclared exception!
      try { 
        localeConvertUtilsBean0.convert((Object) long0, ""P*<F|~k+0x' WB"");
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // Malformed pattern \""P*<F|~k+0x' WB\""
         //
         verifyException(""org.apache.commons.beanutils.locale.BaseLocaleConverter"", e);
      }
  }"
1114,"    public LocaleConverter lookup(final Class<?> clazz, final Locale locale) {

        final LocaleConverter converter = (LocaleConverter) lookup(locale).get(clazz);

        if (log.isTraceEnabled()) {
            log.trace(""LocaleConverter:"" + converter);
        }

        return converter;
    }","  public void test27()  throws Throwable  {
      LocaleConvertUtilsBean localeConvertUtilsBean0 = LocaleConvertUtilsBean.getInstance();
      Class<Integer> class0 = Integer.class;
      String string0 = ""*0PR)Q0[R1RpCR~"";
      Locale locale0 = new Locale(""*0PR)Q0[R1RpCR~"");
      Locale locale1 = Locale.CANADA_FRENCH;
      FastHashMap fastHashMap0 = localeConvertUtilsBean0.lookup(locale0);
      locale0.getDisplayLanguage(locale1);
      FastHashMap fastHashMap1 = localeConvertUtilsBean0.lookup(locale1);
}"
1115,"    public String convert(final Object value) {
        return convert(value, defaultLocale, null);
    }","  public void test28()  throws Throwable  {
      LocaleConvertUtilsBean localeConvertUtilsBean0 = LocaleConvertUtilsBean.getInstance();
      String[] stringArray0 = new String[8];
      Class<SqlTimeLocaleConverter> class0 = SqlTimeLocaleConverter.class;
      Locale locale0 = Locale.CHINA;
      Object object0 = localeConvertUtilsBean0.convert(stringArray0, class0, locale0, (String) null);
}"
1116,"    public String convert(final Object value) {
        return convert(value, defaultLocale, null);
    }","  public void test29()  throws Throwable  {
      LocaleConvertUtilsBean localeConvertUtilsBean0 = LocaleConvertUtilsBean.getInstance();
      Instant instant0 = MockInstant.now();
      Timestamp timestamp0 = Timestamp.from(instant0);
      Locale locale0 = Locale.ITALIAN;
      String string0 = localeConvertUtilsBean0.convert((Object) timestamp0, locale0, """");
}"
1117,"    public String convert(final Object value) {
        return convert(value, defaultLocale, null);
    }","  public void test30()  throws Throwable  {
      LocaleConvertUtilsBean localeConvertUtilsBean0 = LocaleConvertUtilsBean.getInstance();
      Locale locale0 = localeConvertUtilsBean0.getDefaultLocale();
      Class<Integer> class0 = Integer.class;
      // Undeclared exception!
      try { 
        localeConvertUtilsBean0.convert(""{G"", class0, locale0, ""[] using "");
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // Unparseable number: \""{G\""
         //
         verifyException(""org.apache.commons.beanutils.locale.BaseLocaleConverter"", e);
      }
  }"
1118,"    public boolean getApplyLocalized() {
        return applyLocalized;
    }","  public void test31()  throws Throwable  {
      LocaleConvertUtilsBean localeConvertUtilsBean0 = new LocaleConvertUtilsBean();
      localeConvertUtilsBean0.deregister();
}"
1119,"    public LocaleConverter lookup(final Class<?> clazz, final Locale locale) {

        final LocaleConverter converter = (LocaleConverter) lookup(locale).get(clazz);

        if (log.isTraceEnabled()) {
            log.trace(""LocaleConverter:"" + converter);
        }

        return converter;
    }","  public void test32()  throws Throwable  {
      LocaleConvertUtilsBean localeConvertUtilsBean0 = LocaleConvertUtilsBean.getInstance();
      Locale locale0 = Locale.GERMANY;
      Chronology chronology0 = Chronology.ofLocale(locale0);
      FastHashMap fastHashMap0 = localeConvertUtilsBean0.lookup(locale0);
      ResolverStyle resolverStyle0 = ResolverStyle.LENIENT;
      ChronoLocalDate chronoLocalDate0 = chronology0.resolveDate(fastHashMap0, resolverStyle0);
}"
1120,"    public boolean getApplyLocalized() {
        return applyLocalized;
    }","  public void test33()  throws Throwable  {
      LocaleConvertUtilsBean localeConvertUtilsBean0 = LocaleConvertUtilsBean.getInstance();
      Locale locale0 = Locale.GERMAN;
      localeConvertUtilsBean0.setDefaultLocale(locale0);
}"
1121,"    public LocaleConverter lookup(final Class<?> clazz, final Locale locale) {

        final LocaleConverter converter = (LocaleConverter) lookup(locale).get(clazz);

        if (log.isTraceEnabled()) {
            log.trace(""LocaleConverter:"" + converter);
        }

        return converter;
    }","  public void test34()  throws Throwable  {
      LocaleConvertUtilsBean localeConvertUtilsBean0 = LocaleConvertUtilsBean.getInstance();
      Locale locale0 = Locale.CHINESE;
      FastHashMap fastHashMap0 = localeConvertUtilsBean0.lookup(locale0);
      Collection collection0 = fastHashMap0.values();
}"
1122,"    public LocaleConverter lookup(final Class<?> clazz, final Locale locale) {

        final LocaleConverter converter = (LocaleConverter) lookup(locale).get(clazz);

        if (log.isTraceEnabled()) {
            log.trace(""LocaleConverter:"" + converter);
        }

        return converter;
    }","  public void test35()  throws Throwable  {
      LocaleConvertUtilsBean localeConvertUtilsBean0 = LocaleConvertUtilsBean.getInstance();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      FastHashMap fastHashMap0 = localeConvertUtilsBean0.lookup(locale0);
      fastHashMap0.putAll(fastHashMap0);
}"
1123,"    public LocaleConverter lookup(final Class<?> clazz, final Locale locale) {

        final LocaleConverter converter = (LocaleConverter) lookup(locale).get(clazz);

        if (log.isTraceEnabled()) {
            log.trace(""LocaleConverter:"" + converter);
        }

        return converter;
    }","  public void test36()  throws Throwable  {
      LocaleConvertUtilsBean localeConvertUtilsBean0 = LocaleConvertUtilsBean.getInstance();
      Locale locale0 = Locale.CHINESE;
      FastHashMap fastHashMap0 = localeConvertUtilsBean0.lookup(locale0);
      Object object0 = fastHashMap0.put(locale0, locale0);
}"
1124,"    public LocaleConverter lookup(final Class<?> clazz, final Locale locale) {

        final LocaleConverter converter = (LocaleConverter) lookup(locale).get(clazz);

        if (log.isTraceEnabled()) {
            log.trace(""LocaleConverter:"" + converter);
        }

        return converter;
    }","  public void test37()  throws Throwable  {
      LocaleConvertUtilsBean localeConvertUtilsBean0 = LocaleConvertUtilsBean.getInstance();
      Locale locale0 = Locale.CHINESE;
      FastHashMap fastHashMap0 = localeConvertUtilsBean0.lookup(locale0);
      Object object0 = fastHashMap0.clone();
}"
1125,"    protected FastHashMap create(final Locale locale) {

        final FastHashMap converter = new DelegateFastHashMap(BeanUtils.createCache());
        converter.setFast(false);

        converter.put(BigDecimal.class, new BigDecimalLocaleConverter(locale, applyLocalized));
        converter.put(BigInteger.class, new BigIntegerLocaleConverter(locale, applyLocalized));

        converter.put(Byte.class, new ByteLocaleConverter(locale, applyLocalized));
        converter.put(Byte.TYPE, new ByteLocaleConverter(locale, applyLocalized));

        converter.put(Double.class, new DoubleLocaleConverter(locale, applyLocalized));
        converter.put(Double.TYPE, new DoubleLocaleConverter(locale, applyLocalized));

        converter.put(Float.class, new FloatLocaleConverter(locale, applyLocalized));
        converter.put(Float.TYPE, new FloatLocaleConverter(locale, applyLocalized));

        converter.put(Integer.class, new IntegerLocaleConverter(locale, applyLocalized));
        converter.put(Integer.TYPE, new IntegerLocaleConverter(locale, applyLocalized));

        converter.put(Long.class, new LongLocaleConverter(locale, applyLocalized));
        converter.put(Long.TYPE, new LongLocaleConverter(locale, applyLocalized));

        converter.put(Short.class, new ShortLocaleConverter(locale, applyLocalized));
        converter.put(Short.TYPE, new ShortLocaleConverter(locale, applyLocalized));

        converter.put(String.class, new StringLocaleConverter(locale, applyLocalized));

        // conversion format patterns of java.sql.* types should correspond to default
        // behaviour of toString and valueOf methods of these classes
        converter.put(java.sql.Date.class, new SqlDateLocaleConverter(locale, ""yyyy-MM-dd""));
        converter.put(java.sql.Time.class, new SqlTimeLocaleConverter(locale, ""HH:mm:ss""));
        converter.put( java.sql.Timestamp.class,
                       new SqlTimestampLocaleConverter(locale, ""yyyy-MM-dd HH:mm:ss.S"")
                     );

        converter.setFast(true);

        return converter;
    }","  public void test38()  throws Throwable  {
      LocaleConvertUtilsBean localeConvertUtilsBean0 = LocaleConvertUtilsBean.getInstance();
      Locale locale0 = Locale.GERMAN;
      FastHashMap fastHashMap0 = localeConvertUtilsBean0.create(locale0);
      IntegerLocaleConverter integerLocaleConverter0 = new IntegerLocaleConverter((Object) null);
      SqlDateLocaleConverter sqlDateLocaleConverter0 = new SqlDateLocaleConverter(integerLocaleConverter0, locale0);
      boolean boolean0 = fastHashMap0.equals(sqlDateLocaleConverter0);
}"
1126,"    public LocaleConverter lookup(final Class<?> clazz, final Locale locale) {

        final LocaleConverter converter = (LocaleConverter) lookup(locale).get(clazz);

        if (log.isTraceEnabled()) {
            log.trace(""LocaleConverter:"" + converter);
        }

        return converter;
    }","  public void test39()  throws Throwable  {
      LocaleConvertUtilsBean localeConvertUtilsBean0 = LocaleConvertUtilsBean.getInstance();
      Locale locale0 = Locale.CHINESE;
      FastHashMap fastHashMap0 = localeConvertUtilsBean0.lookup(locale0);
      Set set0 = fastHashMap0.keySet();
}"
1127,"    public boolean getApplyLocalized() {
        return applyLocalized;
    }","  public void test40()  throws Throwable  {
      LocaleConvertUtilsBean localeConvertUtilsBean0 = new LocaleConvertUtilsBean();
      Class<DoubleLocaleConverter> class0 = DoubleLocaleConverter.class;
      Object object0 = localeConvertUtilsBean0.convert(""{j[d<`"", class0);
}"
1128,"    public String convert(final Object value) {
        return convert(value, defaultLocale, null);
    }","  public void test41()  throws Throwable  {
      LocaleConvertUtilsBean localeConvertUtilsBean0 = new LocaleConvertUtilsBean();
      Class<DoubleLocaleConverter> class0 = DoubleLocaleConverter.class;
      Object object0 = localeConvertUtilsBean0.convert(""{j[d<`"", class0);
}"
1129,"    public boolean getApplyLocalized() {
        return applyLocalized;
    }","  public void test42()  throws Throwable  {
      LocaleConvertUtilsBean localeConvertUtilsBean0 = LocaleConvertUtilsBean.getInstance();
      boolean boolean0 = localeConvertUtilsBean0.getApplyLocalized();
}"
1130,"    public String convert(final Object value) {
        return convert(value, defaultLocale, null);
    }","  public void test43()  throws Throwable  {
      LocaleConvertUtilsBean localeConvertUtilsBean0 = new LocaleConvertUtilsBean();
      Period period0 = Period.ofYears(1416);
      IsoChronology isoChronology0 = period0.getChronology();
      LocalDate localDate0 = MockIsoChronology.dateNow(isoChronology0);
      Date date0 = Date.valueOf(localDate0);
      // Undeclared exception!
      try { 
        localeConvertUtilsBean0.convert((Object) date0);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.beanutils.locale.BaseLocaleConverter"", e);
      }
  }"
1131,"    public String convert(final Object value) {
        return convert(value, defaultLocale, null);
    }","  public void test44()  throws Throwable  {
      LocaleConvertUtilsBean localeConvertUtilsBean0 = LocaleConvertUtilsBean.getInstance();
      Class<Integer> class0 = Integer.class;
      String[] stringArray0 = Locale.getISOCountries();
      // Undeclared exception!
      try { 
        localeConvertUtilsBean0.convert(stringArray0, class0);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // Unparseable number: \""AD\""
         //
         verifyException(""org.apache.commons.beanutils.locale.BaseLocaleConverter"", e);
      }
  }"
1132,"    public boolean getApplyLocalized() {
        return applyLocalized;
    }","  public void test45()  throws Throwable  {
      LocaleConvertUtilsBean localeConvertUtilsBean0 = new LocaleConvertUtilsBean();
      Class<ByteLocaleConverter> class0 = ByteLocaleConverter.class;
      localeConvertUtilsBean0.convert("""", class0, ""sHZIF{'"");
}"
1133,"    public boolean getApplyLocalized() {
        return applyLocalized;
    }","  public void test46()  throws Throwable  {
      LocaleConvertUtilsBean localeConvertUtilsBean0 = new LocaleConvertUtilsBean();
      String[] stringArray0 = new String[0];
      Class<SqlTimestampLocaleConverter> class0 = SqlTimestampLocaleConverter.class;
      localeConvertUtilsBean0.convert(stringArray0, class0, ""initCause"");
}"
1134,"    public boolean getApplyLocalized() {
        return applyLocalized;
    }","  public void test47()  throws Throwable  {
      LocaleConvertUtilsBean localeConvertUtilsBean0 = new LocaleConvertUtilsBean();
      Locale locale0 = Locale.JAPANESE;
      localeConvertUtilsBean0.deregister(locale0);
}"
1135,"    public Object convert(final Object value) {
        return convert(value, null);
    }","  public void test0()  throws Throwable  {
      Locale locale0 = Locale.UK;
      LongLocaleConverter longLocaleConverter0 = new LongLocaleConverter(""A`B2*"", locale0);
      Object object0 = longLocaleConverter0.convert((Object) locale0, ""A`B2*"");
}"
1136,"    public Object convert(final Object value) {
        return convert(value, null);
    }","  public void test1()  throws Throwable  {
      LongLocaleConverter longLocaleConverter0 = new LongLocaleConverter();
      Object object0 = longLocaleConverter0.convert((Object) null);
}"
1137,"    public Object convert(final Object value) {
        return convert(value, null);
    }","  public void test2()  throws Throwable  {
      Object object0 = new Object();
      DoubleLocaleConverter doubleLocaleConverter0 = new DoubleLocaleConverter(object0);
      Class<Object> class0 = Object.class;
      Object object1 = doubleLocaleConverter0.convert(class0, object0, """");
}"
1138,"    public Object convert(final Object value) {
        return convert(value, null);
    }","  public void test3()  throws Throwable  {
      FloatLocaleConverter floatLocaleConverter0 = new FloatLocaleConverter();
      SqlDateLocaleConverter sqlDateLocaleConverter0 = new SqlDateLocaleConverter(true);
      // Undeclared exception!
      try { 
        floatLocaleConverter0.convert((Object) sqlDateLocaleConverter0, """");
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // org.apache.commons.beanutils.locale.converters.SqlDateLocaleConverter cannot be cast to java.lang.String
         //
         verifyException(""org.apache.commons.beanutils.locale.BaseLocaleConverter"", e);
      }
  }"
1139,"    public Object convert(final Object value) {
        return convert(value, null);
    }","  public void test4()  throws Throwable  {
      Locale locale0 = Locale.TAIWAN;
      LongLocaleConverter longLocaleConverter0 = new LongLocaleConverter(true);
      FloatLocaleConverter floatLocaleConverter0 = new FloatLocaleConverter(locale0, true);
      SqlDateLocaleConverter sqlDateLocaleConverter0 = new SqlDateLocaleConverter(floatLocaleConverter0, locale0, """");
      // Undeclared exception!
      try { 
        longLocaleConverter0.convert((Object) sqlDateLocaleConverter0);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // org.apache.commons.beanutils.locale.converters.SqlDateLocaleConverter cannot be cast to java.lang.String
         //
         verifyException(""org.apache.commons.beanutils.locale.BaseLocaleConverter"", e);
      }
  }"
1140,"    public Object convert(final Object value) {
        return convert(value, null);
    }","  public void test5()  throws Throwable  {
      Object object0 = new Object();
      BigIntegerLocaleConverter bigIntegerLocaleConverter0 = new BigIntegerLocaleConverter(object0, false);
      Locale locale0 = Locale.FRENCH;
      ShortLocaleConverter shortLocaleConverter0 = new ShortLocaleConverter(bigIntegerLocaleConverter0, locale0, false);
      IntegerLocaleConverter integerLocaleConverter0 = new IntegerLocaleConverter(shortLocaleConverter0, false);
      Class<String> class0 = String.class;
      DoubleLocaleConverter doubleLocaleConverter0 = new DoubleLocaleConverter(locale0, false);
      // Undeclared exception!
      try { 
        integerLocaleConverter0.convert(class0, (Object) doubleLocaleConverter0);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // Unsupported target type: class java.lang.String
         //
         verifyException(""org.apache.commons.beanutils.locale.BaseLocaleConverter"", e);
      }
  }"
1141,"    public Object convert(final Object value) {
        return convert(value, null);
    }","  public void test6()  throws Throwable  {
      Locale locale0 = Locale.KOREAN;
      SqlDateLocaleConverter sqlDateLocaleConverter0 = new SqlDateLocaleConverter((Object) null, locale0);
      Class<DecimalLocaleConverter> class0 = DecimalLocaleConverter.class;
      Object object0 = new Object();
      DecimalLocaleConverter decimalLocaleConverter0 = sqlDateLocaleConverter0.convert(class0, object0, (String) null);
}"
1142,"    public Object convert(final Object value) {
        return convert(value, null);
    }","  public void test7()  throws Throwable  {
      Locale locale0 = Locale.FRENCH;
      ByteLocaleConverter byteLocaleConverter0 = new ByteLocaleConverter(locale0, """", true);
      ByteLocaleConverter byteLocaleConverter1 = new ByteLocaleConverter(byteLocaleConverter0, locale0, ""CUda@*5r_Mz'.92"", true);
      Class<LongLocaleConverter> class0 = LongLocaleConverter.class;
      // Undeclared exception!
      try { 
        byteLocaleConverter1.convert(class0, (Object) null, """");
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // Unsupported target type: class org.apache.commons.beanutils.locale.converters.LongLocaleConverter
         //
         verifyException(""org.apache.commons.beanutils.locale.BaseLocaleConverter"", e);
      }
  }"
1143,"    public Object convert(final Object value) {
        return convert(value, null);
    }","  public void test8()  throws Throwable  {
      Locale locale0 = Locale.TAIWAN;
      FloatLocaleConverter floatLocaleConverter0 = new FloatLocaleConverter(locale0, true);
      Class<LongLocaleConverter> class0 = LongLocaleConverter.class;
      LongLocaleConverter longLocaleConverter0 = floatLocaleConverter0.convert(class0, (Object) null, ""org.apache.commons.beanutils.locale.converters.DecimalLocaleConverter"");
}"
1144,"    public Object convert(final Object value) {
        return convert(value, null);
    }","  public void test9()  throws Throwable  {
      StringLocaleConverter stringLocaleConverter0 = new StringLocaleConverter(false);
      Class<BigDecimalLocaleConverter> class0 = BigDecimalLocaleConverter.class;
      DoubleLocaleConverter doubleLocaleConverter0 = new DoubleLocaleConverter(stringLocaleConverter0, true);
      // Undeclared exception!
      try { 
        stringLocaleConverter0.convert(class0, (Object) doubleLocaleConverter0, ""~I"");
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // Unsupported target type: class org.apache.commons.beanutils.locale.converters.BigDecimalLocaleConverter
         //
         verifyException(""org.apache.commons.beanutils.locale.BaseLocaleConverter"", e);
      }
  }"
1145,"    public Object convert(final Object value) {
        return convert(value, null);
    }","  public void test10()  throws Throwable  {
      Class<String> class0 = String.class;
      ByteLocaleConverter byteLocaleConverter0 = new ByteLocaleConverter();
      // Undeclared exception!
      try { 
        byteLocaleConverter0.convert(class0, (Object) class0, ""org.apache.commons.beanutils.locale.converters.ByteLocaleConverter@0000000002"");
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // Multiple decimal separators in pattern \""org.apache.commons.beanutils.locale.converters.ByteLocaleConverter@0000000002\""
         //
         verifyException(""org.apache.commons.beanutils.locale.BaseLocaleConverter"", e);
      }
  }"
1146,"    public Object convert(final Object value) {
        return convert(value, null);
    }","  public void test11()  throws Throwable  {
      DateLocaleConverter dateLocaleConverter0 = new DateLocaleConverter((Object) null);
      Class<BigDecimalLocaleConverter> class0 = BigDecimalLocaleConverter.class;
      BigDecimalLocaleConverter bigDecimalLocaleConverter0 = dateLocaleConverter0.convert(class0, (Object) null);
}"
1147,"    public Object convert(final Object value) {
        return convert(value, null);
    }","  public void test12()  throws Throwable  {
      StringLocaleConverter stringLocaleConverter0 = new StringLocaleConverter((Locale) null);
      Object object0 = stringLocaleConverter0.convert((Object) null, ""org.apache.commons.beanutils.locale.converters.ByteLocaleConverter@0000000002"");
}"
1148,"    public Object convert(final Object value) {
        return convert(value, null);
    }","  public void test13()  throws Throwable  {
      StringLocaleConverter stringLocaleConverter0 = new StringLocaleConverter((Locale) null);
      Class<String> class0 = String.class;
      ByteLocaleConverter byteLocaleConverter0 = new ByteLocaleConverter();
      String string0 = stringLocaleConverter0.convert(class0, (Object) byteLocaleConverter0);
}"
1149,"    public Object convert(final Object value) {
        return convert(value, null);
    }","  public void test14()  throws Throwable  {
      ByteLocaleConverter byteLocaleConverter0 = new ByteLocaleConverter();
      Locale locale0 = Locale.TAIWAN;
      SqlTimestampLocaleConverter sqlTimestampLocaleConverter0 = new SqlTimestampLocaleConverter(byteLocaleConverter0, locale0);
      BigDecimalLocaleConverter bigDecimalLocaleConverter0 = new BigDecimalLocaleConverter(sqlTimestampLocaleConverter0, locale0, ""org.apache.commons.beanutils.locale.converters.DecimalLocaleConverter"", false);
      Object object0 = bigDecimalLocaleConverter0.convert((Object) """");
}"
1150,"    protected void invokeSetter(final Object target, final String propName, final String key, final int index, final Object newValue)
            throws IllegalAccessException, InvocationTargetException {

        try {
            if (index >= 0) {
                getPropertyUtils().setIndexedProperty(target, propName,
                        index, newValue);
            }
            else if (key != null) {
                getPropertyUtils().setMappedProperty(target, propName,
                        key, newValue);
            }
            else {
                getPropertyUtils().setProperty(target, propName, newValue);
            }
        }
        catch (final NoSuchMethodException e) {
            throw new InvocationTargetException
                    (e, ""Cannot set "" + propName);
        }
    }","  public void test0()  throws Throwable  {
      PropertyUtilsBean propertyUtilsBean0 = new PropertyUtilsBean();
      LocaleBeanUtilsBean localeBeanUtilsBean0 = LocaleBeanUtilsBean.getLocaleBeanUtilsInstance();
      try { 
        localeBeanUtilsBean0.invokeSetter("""", ""    Target name = "", ""org.apache.commons.logging.impl.Jdk14Logger"", 17, propertyUtilsBean0);
        fail(""Expecting exception: InvocationTargetException"");
      } catch(InvocationTargetException e) {
         //
         // Cannot set     Target name = 
         //
         verifyException(""org.apache.commons.beanutils.locale.LocaleBeanUtilsBean"", e);
      }
  }"
1151,"    protected void invokeSetter(final Object target, final String propName, final String key, final int index, final Object newValue)
            throws IllegalAccessException, InvocationTargetException {

        try {
            if (index >= 0) {
                getPropertyUtils().setIndexedProperty(target, propName,
                        index, newValue);
            }
            else if (key != null) {
                getPropertyUtils().setMappedProperty(target, propName,
                        key, newValue);
            }
            else {
                getPropertyUtils().setProperty(target, propName, newValue);
            }
        }
        catch (final NoSuchMethodException e) {
            throw new InvocationTargetException
                    (e, ""Cannot set "" + propName);
        }
    }","  public void test1()  throws Throwable  {
      LocaleConvertUtilsBean localeConvertUtilsBean0 = new LocaleConvertUtilsBean();
      LocaleBeanUtilsBean localeBeanUtilsBean0 = new LocaleBeanUtilsBean(localeConvertUtilsBean0);
      // Undeclared exception!
      try { 
        localeBeanUtilsBean0.invokeSetter(localeConvertUtilsBean0, (String) null, ""O$lBUx"", (-12), ""O$lBUx"");
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // No name specified for bean class 'class org.apache.commons.beanutils.locale.LocaleConvertUtilsBean'
         //
         verifyException(""org.apache.commons.beanutils.PropertyUtilsBean"", e);
      }
  }"
1152,"    protected void invokeSetter(final Object target, final String propName, final String key, final int index, final Object newValue)
            throws IllegalAccessException, InvocationTargetException {

        try {
            if (index >= 0) {
                getPropertyUtils().setIndexedProperty(target, propName,
                        index, newValue);
            }
            else if (key != null) {
                getPropertyUtils().setMappedProperty(target, propName,
                        key, newValue);
            }
            else {
                getPropertyUtils().setProperty(target, propName, newValue);
            }
        }
        catch (final NoSuchMethodException e) {
            throw new InvocationTargetException
                    (e, ""Cannot set "" + propName);
        }
    }","  public void test2()  throws Throwable  {
      LocaleBeanUtilsBean localeBeanUtilsBean0 = new LocaleBeanUtilsBean();
      // Undeclared exception!
      try { 
        localeBeanUtilsBean0.invokeSetter((Object) null, ""v`*"", ""v`*"", 0, ""v`*"");
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // No bean specified
         //
         verifyException(""org.apache.commons.beanutils.PropertyUtilsBean"", e);
      }
  }"
1153,"    protected Class<?> definePropertyType(final Object target, final String name, final String propName)
            throws IllegalAccessException, InvocationTargetException {

        Class<?> type = null;               // Java type of target property

        if (target instanceof DynaBean) {
            final DynaClass dynaClass = ((DynaBean) target).getDynaClass();
            final DynaProperty dynaProperty = dynaClass.getDynaProperty(propName);
            if (dynaProperty == null) {
                return null; // Skip this property setter
            }
            type = dynaProperty.getType();
        }
        else {
            PropertyDescriptor descriptor = null;
            try {
                descriptor =
                        getPropertyUtils().getPropertyDescriptor(target, name);
                if (descriptor == null) {
                    return null; // Skip this property setter
                }
            }
            catch (final NoSuchMethodException e) {
                return null; // Skip this property setter
            }
            if (descriptor instanceof MappedPropertyDescriptor) {
                type = ((MappedPropertyDescriptor) descriptor).
                        getMappedPropertyType();
            }
            else if (descriptor instanceof IndexedPropertyDescriptor) {
                type = ((IndexedPropertyDescriptor) descriptor).
                        getIndexedPropertyType();
            }
            else {
                type = descriptor.getPropertyType();
            }
        }
        return type;
    }","  public void test3()  throws Throwable  {
      LocaleBeanUtilsBean localeBeanUtilsBean0 = LocaleBeanUtilsBean.getLocaleBeanUtilsInstance();
      LazyDynaClass lazyDynaClass0 = new LazyDynaClass(""  setProperty("", (DynaProperty[]) null);
      LazyDynaMap lazyDynaMap0 = new LazyDynaMap(lazyDynaClass0);
      Class<?> class0 = localeBeanUtilsBean0.definePropertyType(lazyDynaMap0, ""_|De{g"", """");
}"
1154,"    protected void invokeSetter(final Object target, final String propName, final String key, final int index, final Object newValue)
            throws IllegalAccessException, InvocationTargetException {

        try {
            if (index >= 0) {
                getPropertyUtils().setIndexedProperty(target, propName,
                        index, newValue);
            }
            else if (key != null) {
                getPropertyUtils().setMappedProperty(target, propName,
                        key, newValue);
            }
            else {
                getPropertyUtils().setProperty(target, propName, newValue);
            }
        }
        catch (final NoSuchMethodException e) {
            throw new InvocationTargetException
                    (e, ""Cannot set "" + propName);
        }
    }","  public void test4()  throws Throwable  {
      LocaleConvertUtilsBean localeConvertUtilsBean0 = LocaleConvertUtilsBean.getInstance();
      LocaleBeanUtilsBean localeBeanUtilsBean0 = new LocaleBeanUtilsBean(localeConvertUtilsBean0);
      LazyDynaMap lazyDynaMap0 = new LazyDynaMap(""sj%J/iZI+\""~;"");
      localeBeanUtilsBean0.invokeSetter(lazyDynaMap0, ""yt(=s#-zct.o$a[Q"", (String) null, 5022, lazyDynaMap0);
}"
1155,"    protected Class<?> definePropertyType(final Object target, final String name, final String propName)
            throws IllegalAccessException, InvocationTargetException {

        Class<?> type = null;               // Java type of target property

        if (target instanceof DynaBean) {
            final DynaClass dynaClass = ((DynaBean) target).getDynaClass();
            final DynaProperty dynaProperty = dynaClass.getDynaProperty(propName);
            if (dynaProperty == null) {
                return null; // Skip this property setter
            }
            type = dynaProperty.getType();
        }
        else {
            PropertyDescriptor descriptor = null;
            try {
                descriptor =
                        getPropertyUtils().getPropertyDescriptor(target, name);
                if (descriptor == null) {
                    return null; // Skip this property setter
                }
            }
            catch (final NoSuchMethodException e) {
                return null; // Skip this property setter
            }
            if (descriptor instanceof MappedPropertyDescriptor) {
                type = ((MappedPropertyDescriptor) descriptor).
                        getMappedPropertyType();
            }
            else if (descriptor instanceof IndexedPropertyDescriptor) {
                type = ((IndexedPropertyDescriptor) descriptor).
                        getIndexedPropertyType();
            }
            else {
                type = descriptor.getPropertyType();
            }
        }
        return type;
    }","  public void test5()  throws Throwable  {
      LocaleConvertUtilsBean localeConvertUtilsBean0 = LocaleConvertUtilsBean.getInstance();
      ConvertUtilsBean convertUtilsBean0 = new ConvertUtilsBean();
      PropertyUtilsBean propertyUtilsBean0 = new PropertyUtilsBean();
      LocaleBeanUtilsBean localeBeanUtilsBean0 = new LocaleBeanUtilsBean(localeConvertUtilsBean0, convertUtilsBean0, propertyUtilsBean0);
      Class<?> class0 = localeBeanUtilsBean0.definePropertyType(convertUtilsBean0, ""org.apache.commons.beanutils.locale.LocaleBeanUtilsBean"", ""org.apache.commons.beanutils.locale.LocaleBeanUtilsBean"");
}"
1156,"    public String getSimpleProperty(final Object bean, final String name, final String pattern)
            throws IllegalAccessException, InvocationTargetException,
            NoSuchMethodException {

        final Object value = getPropertyUtils().getSimpleProperty(bean, name);
        return getLocaleConvertUtils().convert(value, pattern);
    }","  public void test6()  throws Throwable  {
      LocaleConvertUtilsBean localeConvertUtilsBean0 = new LocaleConvertUtilsBean();
      ConvertUtilsBean convertUtilsBean0 = new ConvertUtilsBean();
      PropertyUtilsBean propertyUtilsBean0 = new PropertyUtilsBean();
      LocaleBeanUtilsBean localeBeanUtilsBean0 = new LocaleBeanUtilsBean(localeConvertUtilsBean0, convertUtilsBean0, propertyUtilsBean0);
      LazyDynaMap lazyDynaMap0 = new LazyDynaMap();
      String string0 = localeBeanUtilsBean0.getSimpleProperty((Object) lazyDynaMap0, """", (String) null);
}"
1157,"    public String getSimpleProperty(final Object bean, final String name, final String pattern)
            throws IllegalAccessException, InvocationTargetException,
            NoSuchMethodException {

        final Object value = getPropertyUtils().getSimpleProperty(bean, name);
        return getLocaleConvertUtils().convert(value, pattern);
    }","  public void test7()  throws Throwable  {
      LocaleConvertUtilsBean localeConvertUtilsBean0 = new LocaleConvertUtilsBean();
      LocaleBeanUtilsBean localeBeanUtilsBean0 = new LocaleBeanUtilsBean(localeConvertUtilsBean0);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Locale locale0 = Locale.PRC;
      hashMap0.put("", type="", locale0);
      LazyDynaMap lazyDynaMap0 = new LazyDynaMap("", type="", hashMap0);
      String string0 = localeBeanUtilsBean0.getSimpleProperty((Object) lazyDynaMap0, "", type="", "", type="");
}"
1158,"    public String getSimpleProperty(final Object bean, final String name, final String pattern)
            throws IllegalAccessException, InvocationTargetException,
            NoSuchMethodException {

        final Object value = getPropertyUtils().getSimpleProperty(bean, name);
        return getLocaleConvertUtils().convert(value, pattern);
    }","  public void test8()  throws Throwable  {
      LocaleBeanUtilsBean localeBeanUtilsBean0 = LocaleBeanUtilsBean.getLocaleBeanUtilsInstance();
      LazyDynaClass lazyDynaClass0 = new LazyDynaClass("""");
      BasicDynaBean basicDynaBean0 = new BasicDynaBean(lazyDynaClass0);
      basicDynaBean0.set("""", (Object) localeBeanUtilsBean0);
      String string0 = localeBeanUtilsBean0.getSimpleProperty((Object) basicDynaBean0, """");
}"
1159,"    public String getProperty(final Object bean, final String name, final String pattern)
                                throws
                                    IllegalAccessException,
                                    InvocationTargetException,
                                    NoSuchMethodException {

        return getNestedProperty(bean, name, pattern);
    }","  public void test9()  throws Throwable  {
      LocaleBeanUtilsBean localeBeanUtilsBean0 = LocaleBeanUtilsBean.getLocaleBeanUtilsInstance();
      LazyDynaClass lazyDynaClass0 = new LazyDynaClass(""    Target bean = "");
      BasicDynaBean basicDynaBean0 = new BasicDynaBean(lazyDynaClass0);
      String string0 = localeBeanUtilsBean0.getProperty((Object) basicDynaBean0, ""\""'P"", ""\""'P"");
}"
1160,"    public String getProperty(final Object bean, final String name, final String pattern)
                                throws
                                    IllegalAccessException,
                                    InvocationTargetException,
                                    NoSuchMethodException {

        return getNestedProperty(bean, name, pattern);
    }","  public void test10()  throws Throwable  {
      LocaleConvertUtilsBean localeConvertUtilsBean0 = new LocaleConvertUtilsBean();
      ConvertUtilsBean convertUtilsBean0 = new ConvertUtilsBean();
      PropertyUtilsBean propertyUtilsBean0 = new PropertyUtilsBean();
      LocaleBeanUtilsBean localeBeanUtilsBean0 = new LocaleBeanUtilsBean(localeConvertUtilsBean0, convertUtilsBean0, propertyUtilsBean0);
      DynaProperty[] dynaPropertyArray0 = new DynaProperty[0];
      LazyDynaMap lazyDynaMap0 = new LazyDynaMap(""!H;_"", dynaPropertyArray0);
      String string0 = localeBeanUtilsBean0.getProperty((Object) lazyDynaMap0, ""#miA|g$GkG="");
}"
1161,"    public String getProperty(final Object bean, final String name, final String pattern)
                                throws
                                    IllegalAccessException,
                                    InvocationTargetException,
                                    NoSuchMethodException {

        return getNestedProperty(bean, name, pattern);
    }","  public void test11()  throws Throwable  {
      LocaleBeanUtilsBean localeBeanUtilsBean0 = new LocaleBeanUtilsBean();
      Class<LazyDynaBean> class0 = LazyDynaBean.class;
      DynaProperty[] dynaPropertyArray0 = new DynaProperty[4];
      DynaProperty dynaProperty0 = new DynaProperty("""", class0);
      dynaPropertyArray0[0] = dynaProperty0;
      dynaPropertyArray0[1] = dynaPropertyArray0[0];
      dynaPropertyArray0[2] = dynaPropertyArray0[1];
      dynaPropertyArray0[3] = dynaProperty0;
      LazyDynaMap lazyDynaMap0 = new LazyDynaMap(dynaPropertyArray0);
      String string0 = localeBeanUtilsBean0.getProperty((Object) lazyDynaMap0, """");
}"
1162,"    public String getNestedProperty(
                                    final Object bean,
                                    final String name,
                                    final String pattern)
                                        throws
                                            IllegalAccessException,
                                            InvocationTargetException,
                                            NoSuchMethodException {

        final Object value = getPropertyUtils().getNestedProperty(bean, name);
        return getLocaleConvertUtils().convert(value, pattern);
    }","  public void test12()  throws Throwable  {
      LocaleConvertUtilsBean localeConvertUtilsBean0 = LocaleConvertUtilsBean.getInstance();
      LocaleBeanUtilsBean localeBeanUtilsBean0 = new LocaleBeanUtilsBean(localeConvertUtilsBean0);
      Class<LazyDynaBean> class0 = LazyDynaBean.class;
      LazyDynaMap lazyDynaMap0 = new LazyDynaMap();
      lazyDynaMap0.add(""p>{@XB\""S%yXJ"", class0);
      String string0 = localeBeanUtilsBean0.getNestedProperty((Object) lazyDynaMap0, ""p>{@XB\""S%yXJ"", ""Throwable does not have initCause() method in JDK 1.3"");
}"
1163,"    public String getNestedProperty(
                                    final Object bean,
                                    final String name,
                                    final String pattern)
                                        throws
                                            IllegalAccessException,
                                            InvocationTargetException,
                                            NoSuchMethodException {

        final Object value = getPropertyUtils().getNestedProperty(bean, name);
        return getLocaleConvertUtils().convert(value, pattern);
    }","  public void test13()  throws Throwable  {
      LocaleConvertUtilsBean localeConvertUtilsBean0 = LocaleConvertUtilsBean.getInstance();
      ConvertUtilsBean convertUtilsBean0 = new ConvertUtilsBean();
      PropertyUtilsBean propertyUtilsBean0 = new PropertyUtilsBean();
      LocaleBeanUtilsBean localeBeanUtilsBean0 = new LocaleBeanUtilsBean(localeConvertUtilsBean0, convertUtilsBean0, propertyUtilsBean0);
      DynaProperty[] dynaPropertyArray0 = new DynaProperty[7];
      LazyDynaMap lazyDynaMap0 = new LazyDynaMap(""r"");
      DynaProperty dynaProperty0 = lazyDynaMap0.getDynaProperty(""Qi1!"");
      dynaPropertyArray0[0] = dynaProperty0;
      dynaPropertyArray0[1] = dynaProperty0;
      dynaPropertyArray0[2] = dynaPropertyArray0[1];
      dynaPropertyArray0[3] = dynaProperty0;
      dynaPropertyArray0[4] = dynaProperty0;
      dynaPropertyArray0[5] = dynaPropertyArray0[0];
      Class<LazyDynaBean> class0 = LazyDynaBean.class;
      DynaProperty dynaProperty1 = new DynaProperty("""", class0, class0);
      dynaPropertyArray0[6] = dynaProperty1;
      LazyDynaMap lazyDynaMap1 = new LazyDynaMap(dynaPropertyArray0);
      String string0 = localeBeanUtilsBean0.getNestedProperty((Object) lazyDynaMap1, """");
}"
1164,"    public String getMappedProperty(
                                    final Object bean,
                                    final String name,
                                    final String key,
                                    final String pattern)
                                        throws
                                            IllegalAccessException,
                                            InvocationTargetException,
                                            NoSuchMethodException {

        final Object value = getPropertyUtils().getMappedProperty(bean, name, key);
        return getLocaleConvertUtils().convert(value, pattern);
    }","  public void test14()  throws Throwable  {
      LocaleBeanUtilsBean localeBeanUtilsBean0 = LocaleBeanUtilsBean.getLocaleBeanUtilsInstance();
      LazyDynaBean lazyDynaBean0 = new LazyDynaBean(""org.apache.commons.beanutils.converters.FileConverter"");
      String string0 = localeBeanUtilsBean0.getMappedProperty((Object) lazyDynaBean0, ""org.apache.commons.beanutils.converters.FileConverter"", ""org.apache.commons.beanutils.converters.FileConverter"", ""org.apache.commons.beanutils.converters.FileConverter"");
}"
1165,"    public String getMappedProperty(
                                    final Object bean,
                                    final String name,
                                    final String key,
                                    final String pattern)
                                        throws
                                            IllegalAccessException,
                                            InvocationTargetException,
                                            NoSuchMethodException {

        final Object value = getPropertyUtils().getMappedProperty(bean, name, key);
        return getLocaleConvertUtils().convert(value, pattern);
    }","  public void test15()  throws Throwable  {
      LocaleBeanUtilsBean localeBeanUtilsBean0 = new LocaleBeanUtilsBean();
      LazyDynaBean lazyDynaBean0 = new LazyDynaBean();
      String string0 = localeBeanUtilsBean0.getMappedProperty((Object) lazyDynaBean0, ""=s3NR%U#{_Y T(Zh"", ""=s3NR%U#{_Y T(Zh"");
}"
1166,"    public LocaleConvertUtilsBean getLocaleConvertUtils() {
        return localeConvertUtils;
    }","  public void test16()  throws Throwable  {
      ConvertUtilsBean convertUtilsBean0 = new ConvertUtilsBean();
      PropertyUtilsBean propertyUtilsBean0 = new PropertyUtilsBean();
      LocaleBeanUtilsBean localeBeanUtilsBean0 = new LocaleBeanUtilsBean((LocaleConvertUtilsBean) null, convertUtilsBean0, propertyUtilsBean0);
      LocaleConvertUtilsBean localeConvertUtilsBean0 = localeBeanUtilsBean0.getLocaleConvertUtils();
}"
1167,"    public String getNestedProperty(
                                    final Object bean,
                                    final String name,
                                    final String pattern)
                                        throws
                                            IllegalAccessException,
                                            InvocationTargetException,
                                            NoSuchMethodException {

        final Object value = getPropertyUtils().getNestedProperty(bean, name);
        return getLocaleConvertUtils().convert(value, pattern);
    }","  public void test17()  throws Throwable  {
      LocaleConvertUtilsBean localeConvertUtilsBean0 = LocaleConvertUtilsBean.getInstance();
      ConvertUtilsBean convertUtilsBean0 = new ConvertUtilsBean();
      PropertyUtilsBean propertyUtilsBean0 = new PropertyUtilsBean();
      LocaleBeanUtilsBean localeBeanUtilsBean0 = new LocaleBeanUtilsBean(localeConvertUtilsBean0, convertUtilsBean0, propertyUtilsBean0);
      Class<Integer> class0 = Integer.class;
      convertUtilsBean0.deregister();
      localeBeanUtilsBean0.convert(class0, 0, propertyUtilsBean0);
      localeBeanUtilsBean0.getLocaleConvertUtils();
      localeBeanUtilsBean0.getLocaleConvertUtils();
      Locale locale0 = Locale.CANADA_FRENCH;
      Locale locale1 = new Locale(""b"", ""]Den7mm(0"", ""b"");
      locale0.getDisplayCountry(locale1);
      localeBeanUtilsBean0.setDefaultLocale(locale0);
      String string0 = """";
      DynaProperty[] dynaPropertyArray0 = new DynaProperty[5];
      DynaProperty dynaProperty0 = new DynaProperty("""");
      dynaPropertyArray0[0] = dynaProperty0;
      LazyDynaClass lazyDynaClass0 = new LazyDynaClass("""");
      DynaProperty dynaProperty1 = lazyDynaClass0.getDynaProperty("""");
      dynaPropertyArray0[1] = dynaProperty1;
      String string1 = null;
      Class<Integer> class1 = Integer.class;
      DynaProperty dynaProperty2 = new DynaProperty((String) null, class1);
      dynaPropertyArray0[2] = dynaProperty2;
      Class<Integer> class2 = Integer.class;
      WrapDynaClass wrapDynaClass0 = WrapDynaClass.createDynaClass(class2);
      DynaProperty dynaProperty3 = wrapDynaClass0.getDynaProperty(string0);
      dynaPropertyArray0[3] = dynaProperty3;
      BasicDynaBean basicDynaBean0 = new BasicDynaBean(lazyDynaClass0);
      String string2 = ""5A]"";
      localeBeanUtilsBean0.getNestedProperty((Object) basicDynaBean0, string2);
      Class<LocaleBeanUtilsBean> class3 = LocaleBeanUtilsBean.class;
      DynaProperty dynaProperty4 = new DynaProperty(string1, class3);
      dynaPropertyArray0[4] = dynaProperty4;
      LazyDynaClass lazyDynaClass1 = null;
      try {
        lazyDynaClass1 = new LazyDynaClass(string0, dynaPropertyArray0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.beanutils.BasicDynaClass"", e);
      }
  }"
1168,"    public String getIndexedProperty(
                                    final Object bean,
                                    final String name,
                                    final String pattern)
                                        throws
                                            IllegalAccessException,
                                            InvocationTargetException,
                                            NoSuchMethodException {

        final Object value = getPropertyUtils().getIndexedProperty(bean, name);
        return getLocaleConvertUtils().convert(value, pattern);
    }","  public void test18()  throws Throwable  {
      LocaleBeanUtilsBean localeBeanUtilsBean0 = LocaleBeanUtilsBean.getLocaleBeanUtilsInstance();
      LazyDynaMap lazyDynaMap0 = new LazyDynaMap();
      String string0 = localeBeanUtilsBean0.getIndexedProperty((Object) lazyDynaMap0, """", 1115, ""Wm:V' D"");
}"
1169,"    protected Object convert(final Class<?> type, final int index, final Object value, final String pattern) {

        if (log.isTraceEnabled()) {
            log.trace(""Converting value '"" + value + ""' to type:"" + type);
        }

        Object newValue = null;

        if (type.isArray() && (index < 0)) { // Scalar value into array
            if (value instanceof String) {
                final String[] values = new String[1];
                values[0] = (String) value;
                newValue = getLocaleConvertUtils().convert(values, type, pattern);
            }
            else if (value instanceof String[]) {
                newValue = getLocaleConvertUtils().convert((String[]) value, type, pattern);
            }
            else {
                newValue = value;
            }
        }
        else if (type.isArray()) {         // Indexed value into array
            if (value instanceof String) {
                newValue = getLocaleConvertUtils().convert((String) value,
                        type.getComponentType(), pattern);
            }
            else if (value instanceof String[]) {
                newValue = getLocaleConvertUtils().convert(((String[]) value)[0],
                        type.getComponentType(), pattern);
            }
            else {
                newValue = value;
            }
        }
        else {                             // Value into scalar
            if (value instanceof String) {
                newValue = getLocaleConvertUtils().convert((String) value, type, pattern);
            }
            else if (value instanceof String[]) {
                newValue = getLocaleConvertUtils().convert(((String[]) value)[0],
                        type, pattern);
            }
            else {
                newValue = value;
            }
        }
        return newValue;
    }","  public void test19()  throws Throwable  {
      LocaleBeanUtilsBean localeBeanUtilsBean0 = LocaleBeanUtilsBean.getLocaleBeanUtilsInstance();
      Class<LocaleBeanUtilsBean> class0 = LocaleBeanUtilsBean.class;
      Object object0 = localeBeanUtilsBean0.convert(class0, (-315), localeBeanUtilsBean0, (String) null);
}"
1170,"    public void setProperty(final Object bean, final String name, final Object value)
                                throws
                                    IllegalAccessException,
                                    InvocationTargetException {

        setProperty(bean, name, value, null);
    }","  public void test20()  throws Throwable  {
      LocaleConvertUtilsBean localeConvertUtilsBean0 = LocaleConvertUtilsBean.getInstance();
      ConvertUtilsBean convertUtilsBean0 = new ConvertUtilsBean();
      PropertyUtilsBean propertyUtilsBean0 = new PropertyUtilsBean();
      LocaleBeanUtilsBean localeBeanUtilsBean0 = new LocaleBeanUtilsBean(localeConvertUtilsBean0, convertUtilsBean0, propertyUtilsBean0);
      LazyDynaMap lazyDynaMap0 = new LazyDynaMap(""Error parsing date '"");
      BasicDynaBean basicDynaBean0 = new BasicDynaBean(lazyDynaMap0);
      Map<String, Object> map0 = basicDynaBean0.getMap();
      LazyDynaMap lazyDynaMap1 = new LazyDynaMap(map0);
      // Undeclared exception!
      try { 
        localeBeanUtilsBean0.setProperty((Object) lazyDynaMap1, ""CM?Lgt|8?n-C\""V6 B"", (Object) propertyUtilsBean0, ""7JN>KYIg+7Kt_ZCx"");
        fail(""Expecting exception: UnsupportedOperationException"");
      } catch(UnsupportedOperationException e) {
         //
         // Map is read only
         //
         verifyException(""org.apache.commons.beanutils.BaseDynaBeanMapDecorator"", e);
      }
  }"
1171,"    public void setProperty(final Object bean, final String name, final Object value)
                                throws
                                    IllegalAccessException,
                                    InvocationTargetException {

        setProperty(bean, name, value, null);
    }","  public void test21()  throws Throwable  {
      LocaleConvertUtilsBean localeConvertUtilsBean0 = LocaleConvertUtilsBean.getInstance();
      ConvertUtilsBean convertUtilsBean0 = new ConvertUtilsBean();
      LocaleBeanUtilsBean localeBeanUtilsBean0 = new LocaleBeanUtilsBean(localeConvertUtilsBean0, convertUtilsBean0, (PropertyUtilsBean) null);
      // Undeclared exception!
      try { 
        localeBeanUtilsBean0.setProperty((Object) null, ""R{M^xH[%7%W%Bg]"", (Object) convertUtilsBean0, ""R{M^xH[%7%W%Bg]"");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.beanutils.locale.LocaleBeanUtilsBean"", e);
      }
  }"
1172,"    public void setProperty(final Object bean, final String name, final Object value)
                                throws
                                    IllegalAccessException,
                                    InvocationTargetException {

        setProperty(bean, name, value, null);
    }","  public void test22()  throws Throwable  {
      LocaleBeanUtilsBean localeBeanUtilsBean0 = new LocaleBeanUtilsBean();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      // Undeclared exception!
      try { 
        localeBeanUtilsBean0.setProperty((Object) hashMap0, ""Warning - null logger in constructor; possible log4j misconfiguration."", (Object) hashMap0, """");
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // No bean specified
         //
         verifyException(""org.apache.commons.beanutils.PropertyUtilsBean"", e);
      }
  }"
1173,"    public void setProperty(final Object bean, final String name, final Object value)
                                throws
                                    IllegalAccessException,
                                    InvocationTargetException {

        setProperty(bean, name, value, null);
    }","  public void test23()  throws Throwable  {
      LocaleConvertUtilsBean localeConvertUtilsBean0 = new LocaleConvertUtilsBean();
      ConvertUtilsBean convertUtilsBean0 = new ConvertUtilsBean();
      LocaleBeanUtilsBean localeBeanUtilsBean0 = new LocaleBeanUtilsBean(localeConvertUtilsBean0, convertUtilsBean0, (PropertyUtilsBean) null);
      LazyDynaMap lazyDynaMap0 = new LazyDynaMap();
      // Undeclared exception!
      try { 
        localeBeanUtilsBean0.setProperty((Object) lazyDynaMap0, ""org.apache.commons.beanutils.WrapDynaClass$CacheKey"", (Object) localeConvertUtilsBean0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.beanutils.locale.LocaleBeanUtilsBean"", e);
      }
  }"
1174,"    public void setProperty(final Object bean, final String name, final Object value)
                                throws
                                    IllegalAccessException,
                                    InvocationTargetException {

        setProperty(bean, name, value, null);
    }","  public void test24()  throws Throwable  {
      LocaleBeanUtilsBean localeBeanUtilsBean0 = new LocaleBeanUtilsBean();
      Class<ResultSetIterator> class0 = ResultSetIterator.class;
      Object object0 = localeBeanUtilsBean0.convert(class0, 0, class0);
      // Undeclared exception!
      try { 
        localeBeanUtilsBean0.setProperty((Object) ""Error when inspecting class "", "":OJL3Bi@(E_!9Ew.T"", object0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Missing End Delimiter
         //
         verifyException(""org.apache.commons.beanutils.expression.DefaultResolver"", e);
      }
  }"
1175,"    public void setDefaultLocale(final Locale locale) {

        getLocaleConvertUtils().setDefaultLocale(locale);
    }","  public void test25()  throws Throwable  {
      ConvertUtilsBean convertUtilsBean0 = new ConvertUtilsBean();
      PropertyUtilsBean propertyUtilsBean0 = new PropertyUtilsBean();
      LocaleBeanUtilsBean localeBeanUtilsBean0 = new LocaleBeanUtilsBean((LocaleConvertUtilsBean) null, convertUtilsBean0, propertyUtilsBean0);
      Locale locale0 = Locale.KOREA;
      // Undeclared exception!
      try { 
        localeBeanUtilsBean0.setDefaultLocale(locale0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.beanutils.locale.LocaleBeanUtilsBean"", e);
      }
  }"
1176,"    protected void invokeSetter(final Object target, final String propName, final String key, final int index, final Object newValue)
            throws IllegalAccessException, InvocationTargetException {

        try {
            if (index >= 0) {
                getPropertyUtils().setIndexedProperty(target, propName,
                        index, newValue);
            }
            else if (key != null) {
                getPropertyUtils().setMappedProperty(target, propName,
                        key, newValue);
            }
            else {
                getPropertyUtils().setProperty(target, propName, newValue);
            }
        }
        catch (final NoSuchMethodException e) {
            throw new InvocationTargetException
                    (e, ""Cannot set "" + propName);
        }
    }","  public void test26()  throws Throwable  {
      LocaleBeanUtilsBean localeBeanUtilsBean0 = LocaleBeanUtilsBean.getLocaleBeanUtilsInstance();
      BasicDynaBean basicDynaBean0 = new BasicDynaBean((DynaClass) null);
      Integer integer0 = new Integer(884);
      // Undeclared exception!
      try { 
        localeBeanUtilsBean0.invokeSetter(basicDynaBean0, ""| KQ^QZ< qu'%AMH^"", ""| KQ^QZ< qu'%AMH^"", 9, integer0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.beanutils.PropertyUtilsBean"", e);
      }
  }"
1177,"    protected void invokeSetter(final Object target, final String propName, final String key, final int index, final Object newValue)
            throws IllegalAccessException, InvocationTargetException {

        try {
            if (index >= 0) {
                getPropertyUtils().setIndexedProperty(target, propName,
                        index, newValue);
            }
            else if (key != null) {
                getPropertyUtils().setMappedProperty(target, propName,
                        key, newValue);
            }
            else {
                getPropertyUtils().setProperty(target, propName, newValue);
            }
        }
        catch (final NoSuchMethodException e) {
            throw new InvocationTargetException
                    (e, ""Cannot set "" + propName);
        }
    }","  public void test27()  throws Throwable  {
      LocaleBeanUtilsBean localeBeanUtilsBean0 = new LocaleBeanUtilsBean();
      Class<LazyDynaBean> class0 = LazyDynaBean.class;
      DynaProperty[] dynaPropertyArray0 = new DynaProperty[0];
      LazyDynaClass lazyDynaClass0 = new LazyDynaClass(""4Im_A6w"", class0, dynaPropertyArray0);
      BasicDynaBean basicDynaBean0 = new BasicDynaBean(lazyDynaClass0);
      // Undeclared exception!
      try { 
        localeBeanUtilsBean0.invokeSetter(basicDynaBean0, ""4Im_A6w"", ""CixmBD"", 787, class0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // No indexed value for '4Im_A6w[787]'
         //
         verifyException(""org.apache.commons.beanutils.BasicDynaBean"", e);
      }
  }"
1178,"    protected void invokeSetter(final Object target, final String propName, final String key, final int index, final Object newValue)
            throws IllegalAccessException, InvocationTargetException {

        try {
            if (index >= 0) {
                getPropertyUtils().setIndexedProperty(target, propName,
                        index, newValue);
            }
            else if (key != null) {
                getPropertyUtils().setMappedProperty(target, propName,
                        key, newValue);
            }
            else {
                getPropertyUtils().setProperty(target, propName, newValue);
            }
        }
        catch (final NoSuchMethodException e) {
            throw new InvocationTargetException
                    (e, ""Cannot set "" + propName);
        }
    }","  public void test28()  throws Throwable  {
      LocaleBeanUtilsBean localeBeanUtilsBean0 = new LocaleBeanUtilsBean();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      // Undeclared exception!
      try { 
        localeBeanUtilsBean0.invokeSetter(list0, """", (String) null, 91, set0);
        fail(""Expecting exception: IndexOutOfBoundsException"");
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 91, Size: 0
         //
         verifyException(""java.util.ArrayList"", e);
      }
  }"
1179,"    public String getSimpleProperty(final Object bean, final String name, final String pattern)
            throws IllegalAccessException, InvocationTargetException,
            NoSuchMethodException {

        final Object value = getPropertyUtils().getSimpleProperty(bean, name);
        return getLocaleConvertUtils().convert(value, pattern);
    }","  public void test29()  throws Throwable  {
      LocaleConvertUtilsBean localeConvertUtilsBean0 = LocaleConvertUtilsBean.getInstance();
      ConvertUtilsBean convertUtilsBean0 = new ConvertUtilsBean();
      LocaleBeanUtilsBean localeBeanUtilsBean0 = new LocaleBeanUtilsBean(localeConvertUtilsBean0, convertUtilsBean0, (PropertyUtilsBean) null);
      // Undeclared exception!
      try { 
        localeBeanUtilsBean0.getSimpleProperty((Object) convertUtilsBean0, ""\"" but expected signature \"""", ""^eSYibH,uw4"");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.beanutils.locale.LocaleBeanUtilsBean"", e);
      }
  }"
1180,"    public String getSimpleProperty(final Object bean, final String name, final String pattern)
            throws IllegalAccessException, InvocationTargetException,
            NoSuchMethodException {

        final Object value = getPropertyUtils().getSimpleProperty(bean, name);
        return getLocaleConvertUtils().convert(value, pattern);
    }","  public void test30()  throws Throwable  {
      LocaleBeanUtilsBean localeBeanUtilsBean0 = LocaleBeanUtilsBean.getLocaleBeanUtilsInstance();
      try { 
        localeBeanUtilsBean0.getSimpleProperty((Object) """", """", """");
        fail(""Expecting exception: NoSuchMethodException"");
      } catch(NoSuchMethodException e) {
         //
         // Unknown property '' on class 'class java.lang.String'
         //
         verifyException(""org.apache.commons.beanutils.PropertyUtilsBean"", e);
      }
  }"
1181,"    public String getSimpleProperty(final Object bean, final String name, final String pattern)
            throws IllegalAccessException, InvocationTargetException,
            NoSuchMethodException {

        final Object value = getPropertyUtils().getSimpleProperty(bean, name);
        return getLocaleConvertUtils().convert(value, pattern);
    }","  public void test31()  throws Throwable  {
      LocaleConvertUtilsBean localeConvertUtilsBean0 = LocaleConvertUtilsBean.getInstance();
      ConvertUtilsBean convertUtilsBean0 = new ConvertUtilsBean();
      LocaleBeanUtilsBean localeBeanUtilsBean0 = new LocaleBeanUtilsBean(localeConvertUtilsBean0, convertUtilsBean0, (PropertyUtilsBean) null);
      // Undeclared exception!
      try { 
        localeBeanUtilsBean0.getSimpleProperty((Object) convertUtilsBean0, ""&G6?3qf*<ltpV6MWS"");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.beanutils.locale.LocaleBeanUtilsBean"", e);
      }
  }"
1182,"    public String getSimpleProperty(final Object bean, final String name, final String pattern)
            throws IllegalAccessException, InvocationTargetException,
            NoSuchMethodException {

        final Object value = getPropertyUtils().getSimpleProperty(bean, name);
        return getLocaleConvertUtils().convert(value, pattern);
    }","  public void test32()  throws Throwable  {
      ConvertUtilsBean convertUtilsBean0 = new ConvertUtilsBean();
      PropertyUtilsBean propertyUtilsBean0 = new PropertyUtilsBean();
      LocaleBeanUtilsBean localeBeanUtilsBean0 = new LocaleBeanUtilsBean((LocaleConvertUtilsBean) null, convertUtilsBean0, propertyUtilsBean0);
      try { 
        localeBeanUtilsBean0.getSimpleProperty((Object) propertyUtilsBean0, ""Null 9roperty value for '"");
        fail(""Expecting exception: NoSuchMethodException"");
      } catch(NoSuchMethodException e) {
         //
         // Unknown property 'Null 9roperty value for '' on class 'class org.apache.commons.beanutils.PropertyUtilsBean'
         //
         verifyException(""org.apache.commons.beanutils.PropertyUtilsBean"", e);
      }
  }"
1183,"    public String getSimpleProperty(final Object bean, final String name, final String pattern)
            throws IllegalAccessException, InvocationTargetException,
            NoSuchMethodException {

        final Object value = getPropertyUtils().getSimpleProperty(bean, name);
        return getLocaleConvertUtils().convert(value, pattern);
    }","  public void test33()  throws Throwable  {
      LocaleConvertUtilsBean localeConvertUtilsBean0 = LocaleConvertUtilsBean.getInstance();
      LocaleBeanUtilsBean localeBeanUtilsBean0 = new LocaleBeanUtilsBean(localeConvertUtilsBean0);
      // Undeclared exception!
      try { 
        localeBeanUtilsBean0.getSimpleProperty((Object) null, """");
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // No bean specified
         //
         verifyException(""org.apache.commons.beanutils.PropertyUtilsBean"", e);
      }
  }"
1184,"    public String getProperty(final Object bean, final String name, final String pattern)
                                throws
                                    IllegalAccessException,
                                    InvocationTargetException,
                                    NoSuchMethodException {

        return getNestedProperty(bean, name, pattern);
    }","  public void test34()  throws Throwable  {
      LocaleBeanUtilsBean localeBeanUtilsBean0 = LocaleBeanUtilsBean.getLocaleBeanUtilsInstance();
      // Undeclared exception!
      try { 
        localeBeanUtilsBean0.getProperty((Object) null, ""org.apache.commons.beanutils.locale.LocaleBeanUtilsBean$1"", "", "");
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // No bean specified
         //
         verifyException(""org.apache.commons.beanutils.PropertyUtilsBean"", e);
      }
  }"
1185,"    public String getProperty(final Object bean, final String name, final String pattern)
                                throws
                                    IllegalAccessException,
                                    InvocationTargetException,
                                    NoSuchMethodException {

        return getNestedProperty(bean, name, pattern);
    }","  public void test35()  throws Throwable  {
      LocaleBeanUtilsBean localeBeanUtilsBean0 = LocaleBeanUtilsBean.getLocaleBeanUtilsInstance();
      DynaProperty[] dynaPropertyArray0 = new DynaProperty[3];
      DynaProperty dynaProperty0 = new DynaProperty(""Dp"");
      dynaPropertyArray0[0] = dynaProperty0;
      dynaPropertyArray0[1] = dynaPropertyArray0[0];
      dynaPropertyArray0[2] = dynaPropertyArray0[0];
      LazyDynaMap lazyDynaMap0 = new LazyDynaMap(""bY%ylxn.$94"", dynaPropertyArray0);
      // Undeclared exception!
      try { 
        localeBeanUtilsBean0.getProperty((Object) lazyDynaMap0, ""I^.g]X+Z:jD46MhEoJ"");
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Null property value for 'I^.g]X+Z:jD46MhEoJ' on bean class 'class org.apache.commons.beanutils.LazyDynaMap'
         //
         verifyException(""org.apache.commons.beanutils.PropertyUtilsBean"", e);
      }
  }"
1186,"    public String getProperty(final Object bean, final String name, final String pattern)
                                throws
                                    IllegalAccessException,
                                    InvocationTargetException,
                                    NoSuchMethodException {

        return getNestedProperty(bean, name, pattern);
    }","  public void test36()  throws Throwable  {
      LocaleConvertUtilsBean localeConvertUtilsBean0 = LocaleConvertUtilsBean.getInstance();
      ConvertUtilsBean convertUtilsBean0 = new ConvertUtilsBean();
      LocaleBeanUtilsBean localeBeanUtilsBean0 = new LocaleBeanUtilsBean(localeConvertUtilsBean0, convertUtilsBean0, (PropertyUtilsBean) null);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        localeBeanUtilsBean0.getProperty(object0, ""' to type:"");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.beanutils.locale.LocaleBeanUtilsBean"", e);
      }
  }"
1187,"    public String getProperty(final Object bean, final String name, final String pattern)
                                throws
                                    IllegalAccessException,
                                    InvocationTargetException,
                                    NoSuchMethodException {

        return getNestedProperty(bean, name, pattern);
    }","  public void test37()  throws Throwable  {
      LocaleBeanUtilsBean localeBeanUtilsBean0 = LocaleBeanUtilsBean.getLocaleBeanUtilsInstance();
      try { 
        localeBeanUtilsBean0.getProperty((Object) localeBeanUtilsBean0, ""org.apache.commons.beanutils.locale.LocaleBeanUtilsBean$Descriptor"");
        fail(""Expecting exception: NoSuchMethodException"");
      } catch(NoSuchMethodException e) {
         //
         // Unknown property 'org' on class 'class org.apache.commons.beanutils.locale.LocaleBeanUtilsBean'
         //
         verifyException(""org.apache.commons.beanutils.PropertyUtilsBean"", e);
      }
  }"
1188,"    public String getNestedProperty(
                                    final Object bean,
                                    final String name,
                                    final String pattern)
                                        throws
                                            IllegalAccessException,
                                            InvocationTargetException,
                                            NoSuchMethodException {

        final Object value = getPropertyUtils().getNestedProperty(bean, name);
        return getLocaleConvertUtils().convert(value, pattern);
    }","  public void test38()  throws Throwable  {
      LocaleBeanUtilsBean localeBeanUtilsBean0 = new LocaleBeanUtilsBean();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      LazyDynaMap lazyDynaMap0 = new LazyDynaMap(hashMap0);
      // Undeclared exception!
      try { 
        localeBeanUtilsBean0.getNestedProperty((Object) lazyDynaMap0, ""org.apache.commons.beanutils.locale.LocaleBeanUtilsBean$1"", ""org.apache.commons.beanutils.locale.LocaleBeanUtilsBean$1"");
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Null property value for 'org.apache.commons.beanutils.locale.LocaleBeanUtilsBean$1' on bean class 'class org.apache.commons.beanutils.LazyDynaMap'
         //
         verifyException(""org.apache.commons.beanutils.PropertyUtilsBean"", e);
      }
  }"
1189,"    public String getNestedProperty(
                                    final Object bean,
                                    final String name,
                                    final String pattern)
                                        throws
                                            IllegalAccessException,
                                            InvocationTargetException,
                                            NoSuchMethodException {

        final Object value = getPropertyUtils().getNestedProperty(bean, name);
        return getLocaleConvertUtils().convert(value, pattern);
    }","  public void test39()  throws Throwable  {
      LocaleBeanUtilsBean localeBeanUtilsBean0 = new LocaleBeanUtilsBean((LocaleConvertUtilsBean) null);
      LazyDynaBean lazyDynaBean0 = new LazyDynaBean();
      // Undeclared exception!
      try { 
        localeBeanUtilsBean0.getNestedProperty((Object) lazyDynaBean0, ""Gi$E7&*,eTFGSao"", ""Gi$E7&*,eTFGSao"");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.beanutils.locale.LocaleBeanUtilsBean"", e);
      }
  }"
1190,"    public String getNestedProperty(
                                    final Object bean,
                                    final String name,
                                    final String pattern)
                                        throws
                                            IllegalAccessException,
                                            InvocationTargetException,
                                            NoSuchMethodException {

        final Object value = getPropertyUtils().getNestedProperty(bean, name);
        return getLocaleConvertUtils().convert(value, pattern);
    }","  public void test40()  throws Throwable  {
      LocaleBeanUtilsBean localeBeanUtilsBean0 = LocaleBeanUtilsBean.getLocaleBeanUtilsInstance();
      // Undeclared exception!
      try { 
        localeBeanUtilsBean0.getNestedProperty((Object) null, ""w$$|yTsPAuVVxR"", (String) null);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // No bean specified
         //
         verifyException(""org.apache.commons.beanutils.PropertyUtilsBean"", e);
      }
  }"
1191,"    public String getNestedProperty(
                                    final Object bean,
                                    final String name,
                                    final String pattern)
                                        throws
                                            IllegalAccessException,
                                            InvocationTargetException,
                                            NoSuchMethodException {

        final Object value = getPropertyUtils().getNestedProperty(bean, name);
        return getLocaleConvertUtils().convert(value, pattern);
    }","  public void test41()  throws Throwable  {
      LocaleConvertUtilsBean localeConvertUtilsBean0 = LocaleConvertUtilsBean.getInstance();
      ConvertUtilsBean convertUtilsBean0 = new ConvertUtilsBean();
      LocaleBeanUtilsBean localeBeanUtilsBean0 = new LocaleBeanUtilsBean(localeConvertUtilsBean0, convertUtilsBean0, (PropertyUtilsBean) null);
      // Undeclared exception!
      try { 
        localeBeanUtilsBean0.getNestedProperty((Object) convertUtilsBean0, """");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.beanutils.locale.LocaleBeanUtilsBean"", e);
      }
  }"
1192,"    public String getNestedProperty(
                                    final Object bean,
                                    final String name,
                                    final String pattern)
                                        throws
                                            IllegalAccessException,
                                            InvocationTargetException,
                                            NoSuchMethodException {

        final Object value = getPropertyUtils().getNestedProperty(bean, name);
        return getLocaleConvertUtils().convert(value, pattern);
    }","  public void test42()  throws Throwable  {
      LocaleConvertUtilsBean localeConvertUtilsBean0 = LocaleConvertUtilsBean.getInstance();
      ConvertUtilsBean convertUtilsBean0 = new ConvertUtilsBean();
      PropertyUtilsBean propertyUtilsBean0 = new PropertyUtilsBean();
      LocaleBeanUtilsBean localeBeanUtilsBean0 = new LocaleBeanUtilsBean(localeConvertUtilsBean0, convertUtilsBean0, propertyUtilsBean0);
      try { 
        localeBeanUtilsBean0.getNestedProperty((Object) propertyUtilsBean0, ""_|De{g"");
        fail(""Expecting exception: NoSuchMethodException"");
      } catch(NoSuchMethodException e) {
         //
         // Unknown property '_|De{g' on class 'class org.apache.commons.beanutils.PropertyUtilsBean'
         //
         verifyException(""org.apache.commons.beanutils.PropertyUtilsBean"", e);
      }
  }"
1193,"    public String getNestedProperty(
                                    final Object bean,
                                    final String name,
                                    final String pattern)
                                        throws
                                            IllegalAccessException,
                                            InvocationTargetException,
                                            NoSuchMethodException {

        final Object value = getPropertyUtils().getNestedProperty(bean, name);
        return getLocaleConvertUtils().convert(value, pattern);
    }","  public void test43()  throws Throwable  {
      LocaleBeanUtilsBean localeBeanUtilsBean0 = new LocaleBeanUtilsBean();
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        localeBeanUtilsBean0.getNestedProperty(object0, ""Parsing elements, delimiter=["");
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Invalid indexed property 'Parsing elements, delimiter=[' on bean class 'class java.lang.Object' Missing End Delimiter
         //
         verifyException(""org.apache.commons.beanutils.PropertyUtilsBean"", e);
      }
  }"
1194,"    public String getMappedPropertyLocale(
                                        final Object bean,
                                        final String name,
                                        final String pattern)
                                            throws
                                                IllegalAccessException,
                                                InvocationTargetException,
                                                NoSuchMethodException {

        final Object value = getPropertyUtils().getMappedProperty(bean, name);
        return getLocaleConvertUtils().convert(value, pattern);
    }","  public void test44()  throws Throwable  {
      LocaleConvertUtilsBean localeConvertUtilsBean0 = new LocaleConvertUtilsBean();
      ConvertUtilsBean convertUtilsBean0 = new ConvertUtilsBean();
      LocaleBeanUtilsBean localeBeanUtilsBean0 = new LocaleBeanUtilsBean(localeConvertUtilsBean0, convertUtilsBean0, (PropertyUtilsBean) null);
      // Undeclared exception!
      try { 
        localeBeanUtilsBean0.getMappedPropertyLocale(convertUtilsBean0, ""  setProperty("", ""@Cqny"");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.beanutils.locale.LocaleBeanUtilsBean"", e);
      }
  }"
1195,"    public String getMappedProperty(
                                    final Object bean,
                                    final String name,
                                    final String key,
                                    final String pattern)
                                        throws
                                            IllegalAccessException,
                                            InvocationTargetException,
                                            NoSuchMethodException {

        final Object value = getPropertyUtils().getMappedProperty(bean, name, key);
        return getLocaleConvertUtils().convert(value, pattern);
    }","  public void test45()  throws Throwable  {
      LocaleBeanUtilsBean localeBeanUtilsBean0 = new LocaleBeanUtilsBean();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      // Undeclared exception!
      try { 
        localeBeanUtilsBean0.getMappedProperty((Object) hashMap0, "".[zFx~}r%.5+X/IU"", "".[zFx~}r%.5+X/IU"", "" returns void"");
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Null property value for '' on bean class 'class java.util.HashMap'
         //
         verifyException(""org.apache.commons.beanutils.PropertyUtilsBean"", e);
      }
  }"
1196,"    public String getMappedProperty(
                                    final Object bean,
                                    final String name,
                                    final String key,
                                    final String pattern)
                                        throws
                                            IllegalAccessException,
                                            InvocationTargetException,
                                            NoSuchMethodException {

        final Object value = getPropertyUtils().getMappedProperty(bean, name, key);
        return getLocaleConvertUtils().convert(value, pattern);
    }","  public void test46()  throws Throwable  {
      LocaleConvertUtilsBean localeConvertUtilsBean0 = new LocaleConvertUtilsBean();
      ConvertUtilsBean convertUtilsBean0 = new ConvertUtilsBean();
      LocaleBeanUtilsBean localeBeanUtilsBean0 = new LocaleBeanUtilsBean(localeConvertUtilsBean0, convertUtilsBean0, (PropertyUtilsBean) null);
      // Undeclared exception!
      try { 
        localeBeanUtilsBean0.getMappedProperty((Object) convertUtilsBean0, """", "", "", """");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.beanutils.locale.LocaleBeanUtilsBean"", e);
      }
  }"
1197,"    public String getMappedProperty(
                                    final Object bean,
                                    final String name,
                                    final String key,
                                    final String pattern)
                                        throws
                                            IllegalAccessException,
                                            InvocationTargetException,
                                            NoSuchMethodException {

        final Object value = getPropertyUtils().getMappedProperty(bean, name, key);
        return getLocaleConvertUtils().convert(value, pattern);
    }","  public void test47()  throws Throwable  {
      LocaleBeanUtilsBean localeBeanUtilsBean0 = LocaleBeanUtilsBean.getLocaleBeanUtilsInstance();
      PropertyUtilsBean propertyUtilsBean0 = new PropertyUtilsBean();
      Class<Object> class0 = Object.class;
      Object object0 = localeBeanUtilsBean0.convert(class0, 2217, class0);
      Map<String, Object> map0 = propertyUtilsBean0.describe(object0);
      LazyDynaMap lazyDynaMap0 = new LazyDynaMap(map0);
      BasicDynaBean basicDynaBean0 = new BasicDynaBean(lazyDynaMap0);
      // Undeclared exception!
      try { 
        localeBeanUtilsBean0.getMappedProperty((Object) basicDynaBean0, """", ""m"", ""m"");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // No mapped value for '(m)'
         //
         verifyException(""org.apache.commons.beanutils.BasicDynaBean"", e);
      }
  }"
1198,"    public String getMappedProperty(
                                    final Object bean,
                                    final String name,
                                    final String key,
                                    final String pattern)
                                        throws
                                            IllegalAccessException,
                                            InvocationTargetException,
                                            NoSuchMethodException {

        final Object value = getPropertyUtils().getMappedProperty(bean, name, key);
        return getLocaleConvertUtils().convert(value, pattern);
    }","  public void test48()  throws Throwable  {
      LocaleBeanUtilsBean localeBeanUtilsBean0 = LocaleBeanUtilsBean.getLocaleBeanUtilsInstance();
      // Undeclared exception!
      try { 
        localeBeanUtilsBean0.getMappedProperty((Object) null, (String) null, (String) null, (String) null);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // No bean specified
         //
         verifyException(""org.apache.commons.beanutils.PropertyUtilsBean"", e);
      }
  }"
1199,"    public String getMappedProperty(
                                    final Object bean,
                                    final String name,
                                    final String key,
                                    final String pattern)
                                        throws
                                            IllegalAccessException,
                                            InvocationTargetException,
                                            NoSuchMethodException {

        final Object value = getPropertyUtils().getMappedProperty(bean, name, key);
        return getLocaleConvertUtils().convert(value, pattern);
    }","  public void test49()  throws Throwable  {
      LocaleBeanUtilsBean localeBeanUtilsBean0 = new LocaleBeanUtilsBean((LocaleConvertUtilsBean) null);
      LazyDynaMap lazyDynaMap0 = new LazyDynaMap("""");
      // Undeclared exception!
      try { 
        localeBeanUtilsBean0.getMappedProperty((Object) lazyDynaMap0, """", "" c)eB)Rdh"");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.beanutils.locale.LocaleBeanUtilsBean"", e);
      }
  }"
1200,"    public String getMappedProperty(
                                    final Object bean,
                                    final String name,
                                    final String key,
                                    final String pattern)
                                        throws
                                            IllegalAccessException,
                                            InvocationTargetException,
                                            NoSuchMethodException {

        final Object value = getPropertyUtils().getMappedProperty(bean, name, key);
        return getLocaleConvertUtils().convert(value, pattern);
    }","  public void test50()  throws Throwable  {
      LocaleConvertUtilsBean localeConvertUtilsBean0 = LocaleConvertUtilsBean.getInstance();
      PropertyUtilsBean propertyUtilsBean0 = new PropertyUtilsBean();
      LocaleBeanUtilsBean localeBeanUtilsBean0 = new LocaleBeanUtilsBean(localeConvertUtilsBean0);
      try { 
        localeBeanUtilsBean0.getMappedProperty((Object) propertyUtilsBean0, """", """");
        fail(""Expecting exception: NoSuchMethodException"");
      } catch(NoSuchMethodException e) {
         //
         // Unknown property ''+ on bean class 'class org.apache.commons.beanutils.PropertyUtilsBean'
         //
         verifyException(""org.apache.commons.beanutils.PropertyUtilsBean"", e);
      }
  }"
1201,"    public String getMappedProperty(
                                    final Object bean,
                                    final String name,
                                    final String key,
                                    final String pattern)
                                        throws
                                            IllegalAccessException,
                                            InvocationTargetException,
                                            NoSuchMethodException {

        final Object value = getPropertyUtils().getMappedProperty(bean, name, key);
        return getLocaleConvertUtils().convert(value, pattern);
    }","  public void test51()  throws Throwable  {
      LocaleBeanUtilsBean localeBeanUtilsBean0 = new LocaleBeanUtilsBean();
      LazyDynaMap lazyDynaMap0 = new LazyDynaMap();
      // Undeclared exception!
      try { 
        localeBeanUtilsBean0.getMappedProperty((Object) lazyDynaMap0, (String) null, """");
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // No name specified for bean class 'class org.apache.commons.beanutils.LazyDynaMap'
         //
         verifyException(""org.apache.commons.beanutils.PropertyUtilsBean"", e);
      }
  }"
1202,"    public String getMappedProperty(
                                    final Object bean,
                                    final String name,
                                    final String key,
                                    final String pattern)
                                        throws
                                            IllegalAccessException,
                                            InvocationTargetException,
                                            NoSuchMethodException {

        final Object value = getPropertyUtils().getMappedProperty(bean, name, key);
        return getLocaleConvertUtils().convert(value, pattern);
    }","  public void test52()  throws Throwable  {
      LocaleConvertUtilsBean localeConvertUtilsBean0 = new LocaleConvertUtilsBean();
      ConvertUtilsBean convertUtilsBean0 = new ConvertUtilsBean();
      LocaleBeanUtilsBean localeBeanUtilsBean0 = new LocaleBeanUtilsBean(localeConvertUtilsBean0, convertUtilsBean0, (PropertyUtilsBean) null);
      // Undeclared exception!
      try { 
        localeBeanUtilsBean0.getMappedProperty((Object) null, ""Cannot set "");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.beanutils.locale.LocaleBeanUtilsBean"", e);
      }
  }"
1203,"    public String getMappedProperty(
                                    final Object bean,
                                    final String name,
                                    final String key,
                                    final String pattern)
                                        throws
                                            IllegalAccessException,
                                            InvocationTargetException,
                                            NoSuchMethodException {

        final Object value = getPropertyUtils().getMappedProperty(bean, name, key);
        return getLocaleConvertUtils().convert(value, pattern);
    }","  public void test53()  throws Throwable  {
      LocaleBeanUtilsBean localeBeanUtilsBean0 = new LocaleBeanUtilsBean();
      DynaProperty[] dynaPropertyArray0 = new DynaProperty[1];
      Class<LazyDynaBean> class0 = LazyDynaBean.class;
      LazyDynaClass lazyDynaClass0 = new LazyDynaClass(""Component Converter is missing."", class0);
      DynaProperty dynaProperty0 = lazyDynaClass0.getDynaProperty(""Throwable does not have initCause() method in JDK 1.3"");
      dynaPropertyArray0[0] = dynaProperty0;
      LazyDynaMap lazyDynaMap0 = new LazyDynaMap(dynaPropertyArray0);
      BasicDynaBean basicDynaBean0 = new BasicDynaBean(lazyDynaMap0);
      // Undeclared exception!
      try { 
        localeBeanUtilsBean0.getMappedProperty((Object) basicDynaBean0, ""Throwable does not have initCause() method in JDK 1.3"");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // No mapped value for 'Throwable does not have initCause()'
         //
         verifyException(""org.apache.commons.beanutils.BasicDynaBean"", e);
      }
  }"
1204,"    public String getMappedProperty(
                                    final Object bean,
                                    final String name,
                                    final String key,
                                    final String pattern)
                                        throws
                                            IllegalAccessException,
                                            InvocationTargetException,
                                            NoSuchMethodException {

        final Object value = getPropertyUtils().getMappedProperty(bean, name, key);
        return getLocaleConvertUtils().convert(value, pattern);
    }","  public void test54()  throws Throwable  {
      LocaleConvertUtilsBean localeConvertUtilsBean0 = LocaleConvertUtilsBean.getInstance();
      ConvertUtilsBean convertUtilsBean0 = new ConvertUtilsBean();
      LocaleBeanUtilsBean localeBeanUtilsBean0 = new LocaleBeanUtilsBean(localeConvertUtilsBean0);
      try { 
        localeBeanUtilsBean0.getMappedProperty((Object) convertUtilsBean0, "" parameter(s) of matching types."");
        fail(""Expecting exception: NoSuchMethodException"");
      } catch(NoSuchMethodException e) {
         //
         // Unknown property ' parameter'+ on bean class 'class org.apache.commons.beanutils.ConvertUtilsBean'
         //
         verifyException(""org.apache.commons.beanutils.PropertyUtilsBean"", e);
      }
  }"
1205,"    public String getMappedProperty(
                                    final Object bean,
                                    final String name,
                                    final String key,
                                    final String pattern)
                                        throws
                                            IllegalAccessException,
                                            InvocationTargetException,
                                            NoSuchMethodException {

        final Object value = getPropertyUtils().getMappedProperty(bean, name, key);
        return getLocaleConvertUtils().convert(value, pattern);
    }","  public void test55()  throws Throwable  {
      LocaleBeanUtilsBean localeBeanUtilsBean0 = LocaleBeanUtilsBean.getLocaleBeanUtilsInstance();
      LazyDynaMap lazyDynaMap0 = new LazyDynaMap();
      // Undeclared exception!
      try { 
        localeBeanUtilsBean0.getMappedProperty((Object) lazyDynaMap0, """");
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Invalid mapped property '' on bean class 'class org.apache.commons.beanutils.LazyDynaMap'
         //
         verifyException(""org.apache.commons.beanutils.PropertyUtilsBean"", e);
      }
  }"
1206,"    public String getIndexedProperty(
                                    final Object bean,
                                    final String name,
                                    final String pattern)
                                        throws
                                            IllegalAccessException,
                                            InvocationTargetException,
                                            NoSuchMethodException {

        final Object value = getPropertyUtils().getIndexedProperty(bean, name);
        return getLocaleConvertUtils().convert(value, pattern);
    }","  public void test56()  throws Throwable  {
      LocaleConvertUtilsBean localeConvertUtilsBean0 = new LocaleConvertUtilsBean();
      ConvertUtilsBean convertUtilsBean0 = new ConvertUtilsBean();
      LocaleBeanUtilsBean localeBeanUtilsBean0 = new LocaleBeanUtilsBean(localeConvertUtilsBean0, convertUtilsBean0, (PropertyUtilsBean) null);
      // Undeclared exception!
      try { 
        localeBeanUtilsBean0.getIndexedProperty((Object) convertUtilsBean0, ""    Target bean = "", ""n_a/aD fac$g@Q)P"");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.beanutils.locale.LocaleBeanUtilsBean"", e);
      }
  }"
1207,"    public String getIndexedProperty(
                                    final Object bean,
                                    final String name,
                                    final String pattern)
                                        throws
                                            IllegalAccessException,
                                            InvocationTargetException,
                                            NoSuchMethodException {

        final Object value = getPropertyUtils().getIndexedProperty(bean, name);
        return getLocaleConvertUtils().convert(value, pattern);
    }","  public void test57()  throws Throwable  {
      LocaleBeanUtilsBean localeBeanUtilsBean0 = LocaleBeanUtilsBean.getLocaleBeanUtilsInstance();
      BasicDynaBean basicDynaBean0 = new BasicDynaBean((DynaClass) null);
      // Undeclared exception!
      try { 
        localeBeanUtilsBean0.getIndexedProperty((Object) basicDynaBean0, """", 1643, """");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.beanutils.PropertyUtilsBean"", e);
      }
  }"
1208,"    public String getIndexedProperty(
                                    final Object bean,
                                    final String name,
                                    final String pattern)
                                        throws
                                            IllegalAccessException,
                                            InvocationTargetException,
                                            NoSuchMethodException {

        final Object value = getPropertyUtils().getIndexedProperty(bean, name);
        return getLocaleConvertUtils().convert(value, pattern);
    }","  public void test58()  throws Throwable  {
      LocaleConvertUtilsBean localeConvertUtilsBean0 = new LocaleConvertUtilsBean();
      LocaleBeanUtilsBean localeBeanUtilsBean0 = new LocaleBeanUtilsBean(localeConvertUtilsBean0);
      LazyDynaClass lazyDynaClass0 = new LazyDynaClass(""Wk0G?u?>nfm<"");
      BasicDynaBean basicDynaBean0 = new BasicDynaBean(lazyDynaClass0);
      // Undeclared exception!
      try { 
        localeBeanUtilsBean0.getIndexedProperty((Object) basicDynaBean0, ""Wk0G?u?>nfm<"", 2198, ""Wk0G?u?>nfm<"");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // No indexed value for 'Wk0G?u?>nfm<[2198]'
         //
         verifyException(""org.apache.commons.beanutils.BasicDynaBean"", e);
      }
  }"
1209,"    public String getIndexedProperty(
                                    final Object bean,
                                    final String name,
                                    final String pattern)
                                        throws
                                            IllegalAccessException,
                                            InvocationTargetException,
                                            NoSuchMethodException {

        final Object value = getPropertyUtils().getIndexedProperty(bean, name);
        return getLocaleConvertUtils().convert(value, pattern);
    }","  public void test59()  throws Throwable  {
      LocaleConvertUtilsBean localeConvertUtilsBean0 = LocaleConvertUtilsBean.getInstance();
      ConvertUtilsBean convertUtilsBean0 = new ConvertUtilsBean();
      PropertyUtilsBean propertyUtilsBean0 = new PropertyUtilsBean();
      LocaleBeanUtilsBean localeBeanUtilsBean0 = new LocaleBeanUtilsBean(localeConvertUtilsBean0, convertUtilsBean0, propertyUtilsBean0);
      try { 
        localeBeanUtilsBean0.getIndexedProperty((Object) localeConvertUtilsBean0, ""?n\""gB5\""I0tb"", (-317), ""?n\""gB5\""I0tb"");
        fail(""Expecting exception: NoSuchMethodException"");
      } catch(NoSuchMethodException e) {
         //
         // Unknown property '?n\""gB5\""I0tb' on bean class 'class org.apache.commons.beanutils.locale.LocaleConvertUtilsBean'
         //
         verifyException(""org.apache.commons.beanutils.PropertyUtilsBean"", e);
      }
  }"
1210,"    public String getIndexedProperty(
                                    final Object bean,
                                    final String name,
                                    final String pattern)
                                        throws
                                            IllegalAccessException,
                                            InvocationTargetException,
                                            NoSuchMethodException {

        final Object value = getPropertyUtils().getIndexedProperty(bean, name);
        return getLocaleConvertUtils().convert(value, pattern);
    }","  public void test60()  throws Throwable  {
      LocaleConvertUtilsBean localeConvertUtilsBean0 = LocaleConvertUtilsBean.getInstance();
      LocaleBeanUtilsBean localeBeanUtilsBean0 = new LocaleBeanUtilsBean(localeConvertUtilsBean0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      // Undeclared exception!
      try { 
        localeBeanUtilsBean0.getIndexedProperty((Object) linkedList0, (String) null, 0, ""cH~k"");
        fail(""Expecting exception: IndexOutOfBoundsException"");
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException(""java.util.LinkedList"", e);
      }
  }"
1211,"    public String getIndexedProperty(
                                    final Object bean,
                                    final String name,
                                    final String pattern)
                                        throws
                                            IllegalAccessException,
                                            InvocationTargetException,
                                            NoSuchMethodException {

        final Object value = getPropertyUtils().getIndexedProperty(bean, name);
        return getLocaleConvertUtils().convert(value, pattern);
    }","  public void test61()  throws Throwable  {
      LocaleBeanUtilsBean localeBeanUtilsBean0 = LocaleBeanUtilsBean.getLocaleBeanUtilsInstance();
      // Undeclared exception!
      try { 
        localeBeanUtilsBean0.getIndexedProperty((Object) null, ""S1sus6;hUUn.ukhY2"", 3891, ""S1sus6;hUUn.ukhY2"");
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // No bean specified
         //
         verifyException(""org.apache.commons.beanutils.PropertyUtilsBean"", e);
      }
  }"
1212,"    public String getIndexedProperty(
                                    final Object bean,
                                    final String name,
                                    final String pattern)
                                        throws
                                            IllegalAccessException,
                                            InvocationTargetException,
                                            NoSuchMethodException {

        final Object value = getPropertyUtils().getIndexedProperty(bean, name);
        return getLocaleConvertUtils().convert(value, pattern);
    }","  public void test62()  throws Throwable  {
      LocaleBeanUtilsBean localeBeanUtilsBean0 = new LocaleBeanUtilsBean();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      // Undeclared exception!
      try { 
        localeBeanUtilsBean0.getIndexedProperty((Object) hashMap0, ""org.apache.commons.beanutils.locale.converters.DecimalLocaleConverter"", 57);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Null property value for 'org' on bean class 'class java.util.HashMap'
         //
         verifyException(""org.apache.commons.beanutils.PropertyUtilsBean"", e);
      }
  }"
1213,"    public String getIndexedProperty(
                                    final Object bean,
                                    final String name,
                                    final String pattern)
                                        throws
                                            IllegalAccessException,
                                            InvocationTargetException,
                                            NoSuchMethodException {

        final Object value = getPropertyUtils().getIndexedProperty(bean, name);
        return getLocaleConvertUtils().convert(value, pattern);
    }","  public void test63()  throws Throwable  {
      LocaleConvertUtilsBean localeConvertUtilsBean0 = LocaleConvertUtilsBean.getInstance();
      ConvertUtilsBean convertUtilsBean0 = new ConvertUtilsBean();
      LocaleBeanUtilsBean localeBeanUtilsBean0 = new LocaleBeanUtilsBean(localeConvertUtilsBean0, convertUtilsBean0, (PropertyUtilsBean) null);
      // Undeclared exception!
      try { 
        localeBeanUtilsBean0.getIndexedProperty((Object) convertUtilsBean0, """", 0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.beanutils.locale.LocaleBeanUtilsBean"", e);
      }
  }"
1214,"    public String getIndexedProperty(
                                    final Object bean,
                                    final String name,
                                    final String pattern)
                                        throws
                                            IllegalAccessException,
                                            InvocationTargetException,
                                            NoSuchMethodException {

        final Object value = getPropertyUtils().getIndexedProperty(bean, name);
        return getLocaleConvertUtils().convert(value, pattern);
    }","  public void test64()  throws Throwable  {
      LocaleConvertUtilsBean localeConvertUtilsBean0 = LocaleConvertUtilsBean.getInstance();
      ConvertUtilsBean convertUtilsBean0 = new ConvertUtilsBean();
      PropertyUtilsBean propertyUtilsBean0 = new PropertyUtilsBean();
      LocaleBeanUtilsBean localeBeanUtilsBean0 = new LocaleBeanUtilsBean(localeConvertUtilsBean0, convertUtilsBean0, propertyUtilsBean0);
      LazyDynaMap lazyDynaMap0 = new LazyDynaMap("" cz`_i"");
      BasicDynaBean basicDynaBean0 = new BasicDynaBean(lazyDynaMap0);
      // Undeclared exception!
      try { 
        localeBeanUtilsBean0.getIndexedProperty((Object) basicDynaBean0, "" cz`_i"", (-1));
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // No indexed value for ' cz`_i[-1]'
         //
         verifyException(""org.apache.commons.beanutils.BasicDynaBean"", e);
      }
  }"
1215,"    public String getIndexedProperty(
                                    final Object bean,
                                    final String name,
                                    final String pattern)
                                        throws
                                            IllegalAccessException,
                                            InvocationTargetException,
                                            NoSuchMethodException {

        final Object value = getPropertyUtils().getIndexedProperty(bean, name);
        return getLocaleConvertUtils().convert(value, pattern);
    }","  public void test65()  throws Throwable  {
      LocaleBeanUtilsBean localeBeanUtilsBean0 = LocaleBeanUtilsBean.getLocaleBeanUtilsInstance();
      Object object0 = new Object();
      try { 
        localeBeanUtilsBean0.getIndexedProperty(object0, """", 0);
        fail(""Expecting exception: NoSuchMethodException"");
      } catch(NoSuchMethodException e) {
         //
         // Unknown property '' on bean class 'class java.lang.Object'
         //
         verifyException(""org.apache.commons.beanutils.PropertyUtilsBean"", e);
      }
  }"
1216,"    public String getIndexedProperty(
                                    final Object bean,
                                    final String name,
                                    final String pattern)
                                        throws
                                            IllegalAccessException,
                                            InvocationTargetException,
                                            NoSuchMethodException {

        final Object value = getPropertyUtils().getIndexedProperty(bean, name);
        return getLocaleConvertUtils().convert(value, pattern);
    }","  public void test66()  throws Throwable  {
      LocaleConvertUtilsBean localeConvertUtilsBean0 = LocaleConvertUtilsBean.getInstance();
      ConvertUtilsBean convertUtilsBean0 = new ConvertUtilsBean();
      PropertyUtilsBean propertyUtilsBean0 = new PropertyUtilsBean();
      LocaleBeanUtilsBean localeBeanUtilsBean0 = new LocaleBeanUtilsBean(localeConvertUtilsBean0, convertUtilsBean0, propertyUtilsBean0);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      // Undeclared exception!
      try { 
        localeBeanUtilsBean0.getIndexedProperty((Object) linkedList0, (String) null, 1580);
        fail(""Expecting exception: IndexOutOfBoundsException"");
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1580, Size: 0
         //
         verifyException(""java.util.LinkedList"", e);
      }
  }"
1217,"    public String getIndexedProperty(
                                    final Object bean,
                                    final String name,
                                    final String pattern)
                                        throws
                                            IllegalAccessException,
                                            InvocationTargetException,
                                            NoSuchMethodException {

        final Object value = getPropertyUtils().getIndexedProperty(bean, name);
        return getLocaleConvertUtils().convert(value, pattern);
    }","  public void test67()  throws Throwable  {
      LocaleBeanUtilsBean localeBeanUtilsBean0 = new LocaleBeanUtilsBean((LocaleConvertUtilsBean) null);
      // Undeclared exception!
      try { 
        localeBeanUtilsBean0.getIndexedProperty((Object) null, """", 10);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // No bean specified
         //
         verifyException(""org.apache.commons.beanutils.PropertyUtilsBean"", e);
      }
  }"
1218,"    public String getIndexedProperty(
                                    final Object bean,
                                    final String name,
                                    final String pattern)
                                        throws
                                            IllegalAccessException,
                                            InvocationTargetException,
                                            NoSuchMethodException {

        final Object value = getPropertyUtils().getIndexedProperty(bean, name);
        return getLocaleConvertUtils().convert(value, pattern);
    }","  public void test68()  throws Throwable  {
      LocaleBeanUtilsBean localeBeanUtilsBean0 = new LocaleBeanUtilsBean();
      LazyDynaBean lazyDynaBean0 = new LazyDynaBean();
      // Undeclared exception!
      try { 
        localeBeanUtilsBean0.getIndexedProperty((Object) lazyDynaBean0, ""QB--:i}3o"", (-1257));
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
1219,"    public String getIndexedProperty(
                                    final Object bean,
                                    final String name,
                                    final String pattern)
                                        throws
                                            IllegalAccessException,
                                            InvocationTargetException,
                                            NoSuchMethodException {

        final Object value = getPropertyUtils().getIndexedProperty(bean, name);
        return getLocaleConvertUtils().convert(value, pattern);
    }","  public void test69()  throws Throwable  {
      LocaleConvertUtilsBean localeConvertUtilsBean0 = LocaleConvertUtilsBean.getInstance();
      ConvertUtilsBean convertUtilsBean0 = new ConvertUtilsBean();
      LocaleBeanUtilsBean localeBeanUtilsBean0 = new LocaleBeanUtilsBean(localeConvertUtilsBean0, convertUtilsBean0, (PropertyUtilsBean) null);
      LazyDynaClass lazyDynaClass0 = new LazyDynaClass();
      BasicDynaBean basicDynaBean0 = new BasicDynaBean(lazyDynaClass0);
      // Undeclared exception!
      try { 
        localeBeanUtilsBean0.getIndexedProperty((Object) basicDynaBean0, "", Pattern="");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.beanutils.locale.LocaleBeanUtilsBean"", e);
      }
  }"
1220,"    protected Class<?> definePropertyType(final Object target, final String name, final String propName)
            throws IllegalAccessException, InvocationTargetException {

        Class<?> type = null;               // Java type of target property

        if (target instanceof DynaBean) {
            final DynaClass dynaClass = ((DynaBean) target).getDynaClass();
            final DynaProperty dynaProperty = dynaClass.getDynaProperty(propName);
            if (dynaProperty == null) {
                return null; // Skip this property setter
            }
            type = dynaProperty.getType();
        }
        else {
            PropertyDescriptor descriptor = null;
            try {
                descriptor =
                        getPropertyUtils().getPropertyDescriptor(target, name);
                if (descriptor == null) {
                    return null; // Skip this property setter
                }
            }
            catch (final NoSuchMethodException e) {
                return null; // Skip this property setter
            }
            if (descriptor instanceof MappedPropertyDescriptor) {
                type = ((MappedPropertyDescriptor) descriptor).
                        getMappedPropertyType();
            }
            else if (descriptor instanceof IndexedPropertyDescriptor) {
                type = ((IndexedPropertyDescriptor) descriptor).
                        getIndexedPropertyType();
            }
            else {
                type = descriptor.getPropertyType();
            }
        }
        return type;
    }","  public void test70()  throws Throwable  {
      LocaleConvertUtilsBean localeConvertUtilsBean0 = new LocaleConvertUtilsBean();
      ConvertUtilsBean convertUtilsBean0 = new ConvertUtilsBean();
      LocaleBeanUtilsBean localeBeanUtilsBean0 = new LocaleBeanUtilsBean(localeConvertUtilsBean0, convertUtilsBean0, (PropertyUtilsBean) null);
      // Undeclared exception!
      try { 
        localeBeanUtilsBean0.definePropertyType((Object) null, ""XB44Au"", ""    Target name = "");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.beanutils.locale.LocaleBeanUtilsBean"", e);
      }
  }"
1221,"    protected Class<?> definePropertyType(final Object target, final String name, final String propName)
            throws IllegalAccessException, InvocationTargetException {

        Class<?> type = null;               // Java type of target property

        if (target instanceof DynaBean) {
            final DynaClass dynaClass = ((DynaBean) target).getDynaClass();
            final DynaProperty dynaProperty = dynaClass.getDynaProperty(propName);
            if (dynaProperty == null) {
                return null; // Skip this property setter
            }
            type = dynaProperty.getType();
        }
        else {
            PropertyDescriptor descriptor = null;
            try {
                descriptor =
                        getPropertyUtils().getPropertyDescriptor(target, name);
                if (descriptor == null) {
                    return null; // Skip this property setter
                }
            }
            catch (final NoSuchMethodException e) {
                return null; // Skip this property setter
            }
            if (descriptor instanceof MappedPropertyDescriptor) {
                type = ((MappedPropertyDescriptor) descriptor).
                        getMappedPropertyType();
            }
            else if (descriptor instanceof IndexedPropertyDescriptor) {
                type = ((IndexedPropertyDescriptor) descriptor).
                        getIndexedPropertyType();
            }
            else {
                type = descriptor.getPropertyType();
            }
        }
        return type;
    }","  public void test71()  throws Throwable  {
      LocaleBeanUtilsBean localeBeanUtilsBean0 = new LocaleBeanUtilsBean((LocaleConvertUtilsBean) null);
      // Undeclared exception!
      try { 
        localeBeanUtilsBean0.definePropertyType((Object) null, ""x=cPP>gOD4.H"", ""x=cPP>gOD4.H"");
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // No bean specified
         //
         verifyException(""org.apache.commons.beanutils.PropertyUtilsBean"", e);
      }
  }"
1222,"    protected Object convert(final Class<?> type, final int index, final Object value, final String pattern) {

        if (log.isTraceEnabled()) {
            log.trace(""Converting value '"" + value + ""' to type:"" + type);
        }

        Object newValue = null;

        if (type.isArray() && (index < 0)) { // Scalar value into array
            if (value instanceof String) {
                final String[] values = new String[1];
                values[0] = (String) value;
                newValue = getLocaleConvertUtils().convert(values, type, pattern);
            }
            else if (value instanceof String[]) {
                newValue = getLocaleConvertUtils().convert((String[]) value, type, pattern);
            }
            else {
                newValue = value;
            }
        }
        else if (type.isArray()) {         // Indexed value into array
            if (value instanceof String) {
                newValue = getLocaleConvertUtils().convert((String) value,
                        type.getComponentType(), pattern);
            }
            else if (value instanceof String[]) {
                newValue = getLocaleConvertUtils().convert(((String[]) value)[0],
                        type.getComponentType(), pattern);
            }
            else {
                newValue = value;
            }
        }
        else {                             // Value into scalar
            if (value instanceof String) {
                newValue = getLocaleConvertUtils().convert((String) value, type, pattern);
            }
            else if (value instanceof String[]) {
                newValue = getLocaleConvertUtils().convert(((String[]) value)[0],
                        type, pattern);
            }
            else {
                newValue = value;
            }
        }
        return newValue;
    }","  public void test72()  throws Throwable  {
      LocaleBeanUtilsBean localeBeanUtilsBean0 = new LocaleBeanUtilsBean();
      Class<Integer> class0 = Integer.class;
      // Undeclared exception!
      try { 
        localeBeanUtilsBean0.convert(class0, (-423), ""java.lang.String@0000000038"", """");
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // Unparseable number: \""java.lang.String@0000000038\""
         //
         verifyException(""org.apache.commons.beanutils.locale.BaseLocaleConverter"", e);
      }
  }"
1223,"    protected Object convert(final Class<?> type, final int index, final Object value, final String pattern) {

        if (log.isTraceEnabled()) {
            log.trace(""Converting value '"" + value + ""' to type:"" + type);
        }

        Object newValue = null;

        if (type.isArray() && (index < 0)) { // Scalar value into array
            if (value instanceof String) {
                final String[] values = new String[1];
                values[0] = (String) value;
                newValue = getLocaleConvertUtils().convert(values, type, pattern);
            }
            else if (value instanceof String[]) {
                newValue = getLocaleConvertUtils().convert((String[]) value, type, pattern);
            }
            else {
                newValue = value;
            }
        }
        else if (type.isArray()) {         // Indexed value into array
            if (value instanceof String) {
                newValue = getLocaleConvertUtils().convert((String) value,
                        type.getComponentType(), pattern);
            }
            else if (value instanceof String[]) {
                newValue = getLocaleConvertUtils().convert(((String[]) value)[0],
                        type.getComponentType(), pattern);
            }
            else {
                newValue = value;
            }
        }
        else {                             // Value into scalar
            if (value instanceof String) {
                newValue = getLocaleConvertUtils().convert((String) value, type, pattern);
            }
            else if (value instanceof String[]) {
                newValue = getLocaleConvertUtils().convert(((String[]) value)[0],
                        type, pattern);
            }
            else {
                newValue = value;
            }
        }
        return newValue;
    }","  public void test73()  throws Throwable  {
      LocaleBeanUtilsBean localeBeanUtilsBean0 = new LocaleBeanUtilsBean((LocaleConvertUtilsBean) null);
      Class<ConvertingWrapDynaBean> class0 = ConvertingWrapDynaBean.class;
      // Undeclared exception!
      try { 
        localeBeanUtilsBean0.convert(class0, 0, """", """");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.beanutils.locale.LocaleBeanUtilsBean"", e);
      }
  }"
1224,"    public String getSimpleProperty(final Object bean, final String name, final String pattern)
            throws IllegalAccessException, InvocationTargetException,
            NoSuchMethodException {

        final Object value = getPropertyUtils().getSimpleProperty(bean, name);
        return getLocaleConvertUtils().convert(value, pattern);
    }","  public void test74()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      LocaleConvertUtilsBean localeConvertUtilsBean0 = LocaleConvertUtilsBean.getInstance();
      LocaleBeanUtilsBean localeBeanUtilsBean0 = new LocaleBeanUtilsBean(localeConvertUtilsBean0);
      // Undeclared exception!
      try { 
        localeBeanUtilsBean0.getSimpleProperty((Object) fileSystemHandling0, ""org.apache.commons.beanutils.BeanUtils"", (String) null);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Nested property names are not allowed: Property 'org.apache.commons.beanutils.BeanUtils' on bean class 'class org.evosuite.runtime.testdata.FileSystemHandling'
         //
         verifyException(""org.apache.commons.beanutils.PropertyUtilsBean"", e);
      }
  }"
1225,"    public String getProperty(final Object bean, final String name, final String pattern)
                                throws
                                    IllegalAccessException,
                                    InvocationTargetException,
                                    NoSuchMethodException {

        return getNestedProperty(bean, name, pattern);
    }","  public void test75()  throws Throwable  {
      ConvertUtilsBean convertUtilsBean0 = new ConvertUtilsBean();
      PropertyUtilsBean propertyUtilsBean0 = new PropertyUtilsBean();
      LocaleBeanUtilsBean localeBeanUtilsBean0 = new LocaleBeanUtilsBean((LocaleConvertUtilsBean) null, convertUtilsBean0, propertyUtilsBean0);
      DynaProperty[] dynaPropertyArray0 = new DynaProperty[7];
      Class<String> class0 = String.class;
      DynaProperty dynaProperty0 = new DynaProperty(""org.apache.commons.beanutils.converters.ConverterFacade"", class0);
      dynaPropertyArray0[0] = dynaProperty0;
      dynaPropertyArray0[1] = dynaProperty0;
      dynaPropertyArray0[2] = dynaPropertyArray0[1];
      dynaPropertyArray0[3] = dynaProperty0;
      dynaPropertyArray0[4] = dynaProperty0;
      dynaPropertyArray0[5] = dynaProperty0;
      dynaPropertyArray0[6] = dynaProperty0;
      LazyDynaMap lazyDynaMap0 = new LazyDynaMap(dynaPropertyArray0);
      // Undeclared exception!
      try { 
        localeBeanUtilsBean0.getProperty((Object) lazyDynaMap0, """", """");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.beanutils.locale.LocaleBeanUtilsBean"", e);
      }
  }"
1226,"    public String getNestedProperty(
                                    final Object bean,
                                    final String name,
                                    final String pattern)
                                        throws
                                            IllegalAccessException,
                                            InvocationTargetException,
                                            NoSuchMethodException {

        final Object value = getPropertyUtils().getNestedProperty(bean, name);
        return getLocaleConvertUtils().convert(value, pattern);
    }","  public void test76()  throws Throwable  {
      LocaleConvertUtilsBean localeConvertUtilsBean0 = LocaleConvertUtilsBean.getInstance();
      LocaleBeanUtilsBean localeBeanUtilsBean0 = new LocaleBeanUtilsBean(localeConvertUtilsBean0);
      LazyDynaMap lazyDynaMap0 = new LazyDynaMap();
      String string0 = localeBeanUtilsBean0.getNestedProperty((Object) lazyDynaMap0, ""p>{@XB\""S%yXJ"", ""Throwable does not have initCause() method in JDK 1.3"");
}"
1227,"    public String getMappedPropertyLocale(
                                        final Object bean,
                                        final String name,
                                        final String pattern)
                                            throws
                                                IllegalAccessException,
                                                InvocationTargetException,
                                                NoSuchMethodException {

        final Object value = getPropertyUtils().getMappedProperty(bean, name);
        return getLocaleConvertUtils().convert(value, pattern);
    }","  public void test77()  throws Throwable  {
      LocaleConvertUtilsBean localeConvertUtilsBean0 = new LocaleConvertUtilsBean();
      ConvertUtilsBean convertUtilsBean0 = new ConvertUtilsBean();
      PropertyUtilsBean propertyUtilsBean0 = new PropertyUtilsBean();
      LocaleBeanUtilsBean localeBeanUtilsBean0 = new LocaleBeanUtilsBean(localeConvertUtilsBean0, convertUtilsBean0, propertyUtilsBean0);
      // Undeclared exception!
      try { 
        localeBeanUtilsBean0.getMappedPropertyLocale((Object) null, (String) null, "", "");
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // No bean specified
         //
         verifyException(""org.apache.commons.beanutils.PropertyUtilsBean"", e);
      }
  }"
1228,"    public String getIndexedProperty(
                                    final Object bean,
                                    final String name,
                                    final String pattern)
                                        throws
                                            IllegalAccessException,
                                            InvocationTargetException,
                                            NoSuchMethodException {

        final Object value = getPropertyUtils().getIndexedProperty(bean, name);
        return getLocaleConvertUtils().convert(value, pattern);
    }","  public void test78()  throws Throwable  {
      LocaleBeanUtilsBean localeBeanUtilsBean0 = LocaleBeanUtilsBean.getLocaleBeanUtilsInstance();
      // Undeclared exception!
      try { 
        localeBeanUtilsBean0.getIndexedProperty((Object) null, ""a!_"", ""*"");
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // No bean specified
         //
         verifyException(""org.apache.commons.beanutils.PropertyUtilsBean"", e);
      }
  }"
1229,"    public String getNestedProperty(
                                    final Object bean,
                                    final String name,
                                    final String pattern)
                                        throws
                                            IllegalAccessException,
                                            InvocationTargetException,
                                            NoSuchMethodException {

        final Object value = getPropertyUtils().getNestedProperty(bean, name);
        return getLocaleConvertUtils().convert(value, pattern);
    }","  public void test79()  throws Throwable  {
      LocaleBeanUtilsBean localeBeanUtilsBean0 = LocaleBeanUtilsBean.getLocaleBeanUtilsInstance();
      LazyDynaMap lazyDynaMap0 = new LazyDynaMap((DynaProperty[]) null);
      // Undeclared exception!
      try { 
        localeBeanUtilsBean0.getNestedProperty((Object) lazyDynaMap0, ""BeanUtils.copyProperties("");
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Null property value for 'BeanUtils.copyProperties(' on bean class 'class org.apache.commons.beanutils.LazyDynaMap'
         //
         verifyException(""org.apache.commons.beanutils.PropertyUtilsBean"", e);
      }
  }"
1230,"    protected void invokeSetter(final Object target, final String propName, final String key, final int index, final Object newValue)
            throws IllegalAccessException, InvocationTargetException {

        try {
            if (index >= 0) {
                getPropertyUtils().setIndexedProperty(target, propName,
                        index, newValue);
            }
            else if (key != null) {
                getPropertyUtils().setMappedProperty(target, propName,
                        key, newValue);
            }
            else {
                getPropertyUtils().setProperty(target, propName, newValue);
            }
        }
        catch (final NoSuchMethodException e) {
            throw new InvocationTargetException
                    (e, ""Cannot set "" + propName);
        }
    }","  public void test80()  throws Throwable  {
      LocaleBeanUtilsBean localeBeanUtilsBean0 = new LocaleBeanUtilsBean();
      Map<String, String> map0 = localeBeanUtilsBean0.describe(localeBeanUtilsBean0);
      Class<Object> class0 = Object.class;
      Object object0 = localeBeanUtilsBean0.convert(class0, 44, map0);
      // Undeclared exception!
      try { 
        localeBeanUtilsBean0.invokeSetter(object0, ""LDhL.vy"", ""LDhL.vy"", 44, (Object) null);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Null property value for 'LDhL' on bean class 'class java.util.HashMap'
         //
         verifyException(""org.apache.commons.beanutils.PropertyUtilsBean"", e);
      }
  }"
1231,"    protected Object convert(final Class<?> type, final int index, final Object value, final String pattern) {

        if (log.isTraceEnabled()) {
            log.trace(""Converting value '"" + value + ""' to type:"" + type);
        }

        Object newValue = null;

        if (type.isArray() && (index < 0)) { // Scalar value into array
            if (value instanceof String) {
                final String[] values = new String[1];
                values[0] = (String) value;
                newValue = getLocaleConvertUtils().convert(values, type, pattern);
            }
            else if (value instanceof String[]) {
                newValue = getLocaleConvertUtils().convert((String[]) value, type, pattern);
            }
            else {
                newValue = value;
            }
        }
        else if (type.isArray()) {         // Indexed value into array
            if (value instanceof String) {
                newValue = getLocaleConvertUtils().convert((String) value,
                        type.getComponentType(), pattern);
            }
            else if (value instanceof String[]) {
                newValue = getLocaleConvertUtils().convert(((String[]) value)[0],
                        type.getComponentType(), pattern);
            }
            else {
                newValue = value;
            }
        }
        else {                             // Value into scalar
            if (value instanceof String) {
                newValue = getLocaleConvertUtils().convert((String) value, type, pattern);
            }
            else if (value instanceof String[]) {
                newValue = getLocaleConvertUtils().convert(((String[]) value)[0],
                        type, pattern);
            }
            else {
                newValue = value;
            }
        }
        return newValue;
    }","  public void test81()  throws Throwable  {
      LocaleBeanUtilsBean localeBeanUtilsBean0 = new LocaleBeanUtilsBean();
      Class<String> class0 = String.class;
      Object object0 = localeBeanUtilsBean0.convert(class0, 18, ""?"");
}"
1232,"    protected Object convert(final Class<?> type, final int index, final Object value, final String pattern) {

        if (log.isTraceEnabled()) {
            log.trace(""Converting value '"" + value + ""' to type:"" + type);
        }

        Object newValue = null;

        if (type.isArray() && (index < 0)) { // Scalar value into array
            if (value instanceof String) {
                final String[] values = new String[1];
                values[0] = (String) value;
                newValue = getLocaleConvertUtils().convert(values, type, pattern);
            }
            else if (value instanceof String[]) {
                newValue = getLocaleConvertUtils().convert((String[]) value, type, pattern);
            }
            else {
                newValue = value;
            }
        }
        else if (type.isArray()) {         // Indexed value into array
            if (value instanceof String) {
                newValue = getLocaleConvertUtils().convert((String) value,
                        type.getComponentType(), pattern);
            }
            else if (value instanceof String[]) {
                newValue = getLocaleConvertUtils().convert(((String[]) value)[0],
                        type.getComponentType(), pattern);
            }
            else {
                newValue = value;
            }
        }
        else {                             // Value into scalar
            if (value instanceof String) {
                newValue = getLocaleConvertUtils().convert((String) value, type, pattern);
            }
            else if (value instanceof String[]) {
                newValue = getLocaleConvertUtils().convert(((String[]) value)[0],
                        type, pattern);
            }
            else {
                newValue = value;
            }
        }
        return newValue;
    }","  public void test82()  throws Throwable  {
      LocaleConvertUtilsBean localeConvertUtilsBean0 = LocaleConvertUtilsBean.getInstance();
      LocaleBeanUtilsBean localeBeanUtilsBean0 = new LocaleBeanUtilsBean(localeConvertUtilsBean0);
      DynaProperty[] dynaPropertyArray0 = new DynaProperty[5];
      Class<MappedPropertyDescriptor> class0 = MappedPropertyDescriptor.class;
      Object object0 = localeBeanUtilsBean0.convert(class0, 5022, dynaPropertyArray0[1]);
}"
1233,"    public void setProperty(final Object bean, final String name, final Object value)
                                throws
                                    IllegalAccessException,
                                    InvocationTargetException {

        setProperty(bean, name, value, null);
    }","  public void test83()  throws Throwable  {
      LocaleConvertUtilsBean localeConvertUtilsBean0 = LocaleConvertUtilsBean.getInstance();
      LocaleBeanUtilsBean localeBeanUtilsBean0 = new LocaleBeanUtilsBean(localeConvertUtilsBean0);
      DynaProperty dynaProperty0 = new DynaProperty(""' to type:"");
      LazyDynaMap lazyDynaMap0 = new LazyDynaMap(""Converting value '"", (Map<String, Object>) null);
      localeBeanUtilsBean0.setProperty((Object) lazyDynaMap0, "" cannot handle conversion from '"", (Object) dynaProperty0, "" cannot handle conversion from '"");
}"
1234,"    public void populate(final Object bean, final Map<String, ? extends Object> properties)
        throws IllegalAccessException, InvocationTargetException {

        // Do nothing unless both arguments have been specified
        if ((bean == null) || (properties == null)) {
            return;
        }
        if (log.isDebugEnabled()) {
            log.debug(""BeanUtils.populate("" + bean + "", "" +
                    properties + "")"");
        }

        // Loop through the property name/value pairs to be set
        for(final Map.Entry<String, ? extends Object> entry : properties.entrySet()) {
            // Identify the property name and value(s) to be assigned
            final String name = entry.getKey();
            if (name == null) {
                continue;
            }

            // Perform the assignment for this property
            setProperty(bean, name, entry.getValue());

        }

    }","  public void test84()  throws Throwable  {
      LocaleBeanUtilsBean localeBeanUtilsBean0 = new LocaleBeanUtilsBean();
      Map<String, String> map0 = localeBeanUtilsBean0.describe(localeBeanUtilsBean0);
      // Undeclared exception!
      try { 
        localeBeanUtilsBean0.populate(localeBeanUtilsBean0, map0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Cannot invoke org.apache.commons.beanutils.locale.LocaleBeanUtilsBean.setDefaultLocale on bean class 'class org.apache.commons.beanutils.locale.LocaleBeanUtilsBean' - java.lang.ClassCastException@379ce24a - had objects of type \""java.lang.String\"" but expected signature \""java.util.Locale\""
         //
         verifyException(""org.apache.commons.beanutils.PropertyUtilsBean"", e);
      }
  }"
1235,"    public String getSimpleProperty(final Object bean, final String name, final String pattern)
            throws IllegalAccessException, InvocationTargetException,
            NoSuchMethodException {

        final Object value = getPropertyUtils().getSimpleProperty(bean, name);
        return getLocaleConvertUtils().convert(value, pattern);
    }","  public void test85()  throws Throwable  {
      LocaleBeanUtilsBean localeBeanUtilsBean0 = LocaleBeanUtilsBean.getLocaleBeanUtilsInstance();
      LazyDynaClass lazyDynaClass0 = new LazyDynaClass("""");
      BasicDynaBean basicDynaBean0 = new BasicDynaBean(lazyDynaClass0);
      String string0 = localeBeanUtilsBean0.getSimpleProperty((Object) basicDynaBean0, """");
}"
1236,"    public String getMappedProperty(
                                    final Object bean,
                                    final String name,
                                    final String key,
                                    final String pattern)
                                        throws
                                            IllegalAccessException,
                                            InvocationTargetException,
                                            NoSuchMethodException {

        final Object value = getPropertyUtils().getMappedProperty(bean, name, key);
        return getLocaleConvertUtils().convert(value, pattern);
    }","  public void test86()  throws Throwable  {
      LocaleBeanUtilsBean localeBeanUtilsBean0 = LocaleBeanUtilsBean.getLocaleBeanUtilsInstance();
      LazyDynaBean lazyDynaBean0 = new LazyDynaBean(""org.apache.commons.beanutils.converters.FileConverter"");
      String string0 = localeBeanUtilsBean0.getMappedProperty((Object) lazyDynaBean0, ""    (N.B. Converters can be configured to use default values to avoid throwing exceptions)"");
}"
1237,"    public String getIndexedProperty(
                                    final Object bean,
                                    final String name,
                                    final String pattern)
                                        throws
                                            IllegalAccessException,
                                            InvocationTargetException,
                                            NoSuchMethodException {

        final Object value = getPropertyUtils().getIndexedProperty(bean, name);
        return getLocaleConvertUtils().convert(value, pattern);
    }","  public void test87()  throws Throwable  {
      LocaleConvertUtilsBean localeConvertUtilsBean0 = LocaleConvertUtilsBean.getInstance();
      LocaleBeanUtilsBean localeBeanUtilsBean0 = new LocaleBeanUtilsBean(localeConvertUtilsBean0);
      LazyDynaMap lazyDynaMap0 = new LazyDynaMap();
      String string0 = localeBeanUtilsBean0.getIndexedProperty((Object) lazyDynaMap0, ""gO!wNaj. Q_BP`0im"", 6);
}"
1238,"    public boolean getApplyLocalized() {

        return getLocaleConvertUtils().getApplyLocalized();
    }","  public void test88()  throws Throwable  {
      LocaleBeanUtilsBean localeBeanUtilsBean0 = LocaleBeanUtilsBean.getLocaleBeanUtilsInstance();
      localeBeanUtilsBean0.setApplyLocalized(false);
}"
1239,"    public String getMappedProperty(
                                    final Object bean,
                                    final String name,
                                    final String key,
                                    final String pattern)
                                        throws
                                            IllegalAccessException,
                                            InvocationTargetException,
                                            NoSuchMethodException {

        final Object value = getPropertyUtils().getMappedProperty(bean, name, key);
        return getLocaleConvertUtils().convert(value, pattern);
    }","  public void test89()  throws Throwable  {
      LocaleBeanUtilsBean localeBeanUtilsBean0 = LocaleBeanUtilsBean.getLocaleBeanUtilsInstance();
      LazyDynaMap lazyDynaMap0 = new LazyDynaMap();
      BasicDynaBean basicDynaBean0 = new BasicDynaBean(lazyDynaMap0);
      // Undeclared exception!
      try { 
        localeBeanUtilsBean0.getMappedProperty((Object) basicDynaBean0, ""org.apache.commons.beanutils.converters.FileConverter"", ""p3 <"");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // No mapped value for 'org.apache.commons.beanutils.converters.FileConverter(p3 <)'
         //
         verifyException(""org.apache.commons.beanutils.BasicDynaBean"", e);
      }
  }"
1240,"    public String getIndexedProperty(
                                    final Object bean,
                                    final String name,
                                    final String pattern)
                                        throws
                                            IllegalAccessException,
                                            InvocationTargetException,
                                            NoSuchMethodException {

        final Object value = getPropertyUtils().getIndexedProperty(bean, name);
        return getLocaleConvertUtils().convert(value, pattern);
    }","  public void test90()  throws Throwable  {
      LocaleBeanUtilsBean localeBeanUtilsBean0 = new LocaleBeanUtilsBean();
      Map<String, String> map0 = localeBeanUtilsBean0.describe(localeBeanUtilsBean0);
      // Undeclared exception!
      try { 
        localeBeanUtilsBean0.getIndexedProperty((Object) map0, ""org.apache.commons.beanutils.converters.AbstractConverter"", 2778, (String) null);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Null property value for 'org' on bean class 'class java.util.HashMap'
         //
         verifyException(""org.apache.commons.beanutils.PropertyUtilsBean"", e);
      }
  }"
1241,"    public String getProperty(final Object bean, final String name, final String pattern)
                                throws
                                    IllegalAccessException,
                                    InvocationTargetException,
                                    NoSuchMethodException {

        return getNestedProperty(bean, name, pattern);
    }","  public void test91()  throws Throwable  {
      LocaleBeanUtilsBean localeBeanUtilsBean0 = LocaleBeanUtilsBean.getLocaleBeanUtilsInstance();
      LocaleConvertUtilsBean localeConvertUtilsBean0 = localeBeanUtilsBean0.getLocaleConvertUtils();
      // Undeclared exception!
      try { 
        localeBeanUtilsBean0.getProperty((Object) localeConvertUtilsBean0, ""  setProperty("");
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Invalid mapped property '  setProperty(' on bean class 'class org.apache.commons.beanutils.locale.LocaleConvertUtilsBean' Missing End Delimiter
         //
         verifyException(""org.apache.commons.beanutils.PropertyUtilsBean"", e);
      }
  }"
1242,"    public String getIndexedProperty(
                                    final Object bean,
                                    final String name,
                                    final String pattern)
                                        throws
                                            IllegalAccessException,
                                            InvocationTargetException,
                                            NoSuchMethodException {

        final Object value = getPropertyUtils().getIndexedProperty(bean, name);
        return getLocaleConvertUtils().convert(value, pattern);
    }","  public void test92()  throws Throwable  {
      LocaleBeanUtilsBean localeBeanUtilsBean0 = new LocaleBeanUtilsBean();
      // Undeclared exception!
      try { 
        localeBeanUtilsBean0.getIndexedProperty((Object) ""N"", ""N"");
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Invalid indexed property 'N' on bean class 'class java.lang.String'
         //
         verifyException(""org.apache.commons.beanutils.PropertyUtilsBean"", e);
      }
  }"
1243,"    public Locale getDefaultLocale() {

        return getLocaleConvertUtils().getDefaultLocale();
    }","  public void test93()  throws Throwable  {
      LocaleBeanUtilsBean localeBeanUtilsBean0 = LocaleBeanUtilsBean.getLocaleBeanUtilsInstance();
      Locale locale0 = localeBeanUtilsBean0.getDefaultLocale();
}"
1244,"    public SqlTimeLocaleConverter() {

        this(false);
    }","  public void test0()  throws Throwable  {
      Object object0 = new Object();
      Locale locale0 = new Locale("""", ""l0`_>|9PFPEI"", "") cC[|j&)B_S/AO<iZb"");
      SqlTimeLocaleConverter sqlTimeLocaleConverter0 = new SqlTimeLocaleConverter(object0, locale0, """", false);
}"
1245,"    public SqlTimeLocaleConverter() {

        this(false);
    }","  public void test1()  throws Throwable  {
      Object object0 = new Object();
      Locale locale0 = new Locale("""");
      SqlTimeLocaleConverter sqlTimeLocaleConverter0 = new SqlTimeLocaleConverter(object0, locale0, true);
}"
1246,"    public SqlTimeLocaleConverter() {

        this(false);
    }","  public void test2()  throws Throwable  {
      SqlTimeLocaleConverter sqlTimeLocaleConverter0 = new SqlTimeLocaleConverter((Object) null, false);
}"
1247,"    public SqlTimeLocaleConverter() {

        this(false);
    }","  public void test3()  throws Throwable  {
      Locale locale0 = Locale.CANADA;
      SqlTimeLocaleConverter sqlTimeLocaleConverter0 = new SqlTimeLocaleConverter(locale0, ""Error parsing date '"", true);
}"
1248,"    protected Object parse(final Object value, final String pattern) throws ParseException {

        return new Time(((java.util.Date) super.parse(value, pattern)).getTime());
    }","  public void test4()  throws Throwable  {
      Locale locale0 = Locale.ITALIAN;
      SqlTimeLocaleConverter sqlTimeLocaleConverter0 = new SqlTimeLocaleConverter(locale0, false);
      // Undeclared exception!
      try { 
        sqlTimeLocaleConverter0.parse(locale0, ""org.apache.commons.beanutils.locale.converters.SqlTimeLocaleConverter"");
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern character 'o'
         //
         verifyException(""java.text.SimpleDateFormat"", e);
      }
  }"
1249,"    public SqlTimeLocaleConverter() {

        this(false);
    }","  public void test5()  throws Throwable  {
      Locale locale0 = Locale.PRC;
      SqlTimeLocaleConverter sqlTimeLocaleConverter0 = new SqlTimeLocaleConverter(locale0, (String) null);
}"
1250,"    public SqlTimeLocaleConverter() {

        this(false);
    }","  public void test6()  throws Throwable  {
      Locale locale0 = Locale.CANADA;
      SqlTimeLocaleConverter sqlTimeLocaleConverter0 = new SqlTimeLocaleConverter(""'"", locale0);
}"
1251,"    protected Object parse(final Object value, final String pattern) throws ParseException {

        return new Time(((java.util.Date) super.parse(value, pattern)).getTime());
    }","  public void test7()  throws Throwable  {
      Locale locale0 = Locale.FRENCH;
      SqlTimeLocaleConverter sqlTimeLocaleConverter0 = new SqlTimeLocaleConverter(""Unsupported target type: "", locale0, """");
      // Undeclared exception!
      try { 
        sqlTimeLocaleConverter0.parse(""Unsupported target type: "", """");
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // Date 'Unsupported target type: ' contains unparsed characters from position=0
         //
         verifyException(""org.apache.commons.beanutils.locale.converters.DateLocaleConverter"", e);
      }
  }"
1252,"    public SqlTimeLocaleConverter() {

        this(false);
    }","  public void test8()  throws Throwable  {
      SqlTimeLocaleConverter sqlTimeLocaleConverter0 = new SqlTimeLocaleConverter();
}"
1253,"    protected Object parse(final Object value, final String pattern) throws ParseException {

        return new Time(((java.util.Date) super.parse(value, pattern)).getTime());
    }","  public void test9()  throws Throwable  {
      Locale locale0 = Locale.CHINA;
      SqlTimeLocaleConverter sqlTimeLocaleConverter0 = new SqlTimeLocaleConverter(locale0);
      // Undeclared exception!
      try { 
        sqlTimeLocaleConverter0.parse((Object) null, (String) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.evosuite.runtime.System"", e);
      }
  }"
1254,"    protected Object parse(final Object value, final String pattern) throws ParseException {

        return new Time(((java.util.Date) super.parse(value, pattern)).getTime());
    }","  public void test10()  throws Throwable  {
      SqlTimeLocaleConverter sqlTimeLocaleConverter0 = new SqlTimeLocaleConverter(false);
      MockDate mockDate0 = new MockDate((-2768), (-2768), (-2891), (-2891), 3285);
      Object object0 = sqlTimeLocaleConverter0.parse(mockDate0, ""(~V_"");
}"
1255,"    public SqlTimeLocaleConverter() {

        this(false);
    }","  public void test11()  throws Throwable  {
      Object object0 = new Object();
      SqlTimeLocaleConverter sqlTimeLocaleConverter0 = new SqlTimeLocaleConverter(object0);
}"
1256,"    protected Object parse(final Object value, String pattern) throws ParseException {

        // Handle Date
        if (value instanceof java.util.Date) {
            return value;
        }

        // Handle Calendar
        if (value instanceof java.util.Calendar) {
            return ((java.util.Calendar)value).getTime();
        }

         if (locPattern) {
             pattern = convertLocalizedPattern(pattern, locale);
         }

         // Create Formatter - use default if pattern is null
         final DateFormat formatter = pattern == null ? DateFormat.getDateInstance(DateFormat.SHORT, locale)
                                                : new SimpleDateFormat(pattern, locale);
         formatter.setLenient(isLenient);


         // Parse the Date
        final ParsePosition pos = new ParsePosition(0);
        final String strValue = value.toString();
        final Object parsedValue = formatter.parseObject(strValue, pos);
        if (pos.getErrorIndex() > -1) {
            throw new ConversionException(""Error parsing date '"" + value +
                    ""' at position=""+ pos.getErrorIndex());
        }
        if (pos.getIndex() < strValue.length()) {
            throw new ConversionException(""Date '"" + value +
                    ""' contains unparsed characters from position="" + pos.getIndex());
        }

        return parsedValue;
     }","  public void test0()  throws Throwable  {
      DateLocaleConverter dateLocaleConverter0 = new DateLocaleConverter(""D;L"");
      // Undeclared exception!
      try { 
        dateLocaleConverter0.parse((Object) null, ""D;L"");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.evosuite.runtime.System"", e);
      }
  }"
1257,"    protected Object parse(final Object value, String pattern) throws ParseException {

        // Handle Date
        if (value instanceof java.util.Date) {
            return value;
        }

        // Handle Calendar
        if (value instanceof java.util.Calendar) {
            return ((java.util.Calendar)value).getTime();
        }

         if (locPattern) {
             pattern = convertLocalizedPattern(pattern, locale);
         }

         // Create Formatter - use default if pattern is null
         final DateFormat formatter = pattern == null ? DateFormat.getDateInstance(DateFormat.SHORT, locale)
                                                : new SimpleDateFormat(pattern, locale);
         formatter.setLenient(isLenient);


         // Parse the Date
        final ParsePosition pos = new ParsePosition(0);
        final String strValue = value.toString();
        final Object parsedValue = formatter.parseObject(strValue, pos);
        if (pos.getErrorIndex() > -1) {
            throw new ConversionException(""Error parsing date '"" + value +
                    ""' at position=""+ pos.getErrorIndex());
        }
        if (pos.getIndex() < strValue.length()) {
            throw new ConversionException(""Date '"" + value +
                    ""' contains unparsed characters from position="" + pos.getIndex());
        }

        return parsedValue;
     }","  public void test1()  throws Throwable  {
      DateLocaleConverter dateLocaleConverter0 = new DateLocaleConverter();
      // Undeclared exception!
      try { 
        dateLocaleConverter0.parse((Object) null, ""mVa,"");
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern character 'V'
         //
         verifyException(""java.text.SimpleDateFormat"", e);
      }
  }"
1258,"    public boolean isLenient() {
        return isLenient;
    }","  public void test2()  throws Throwable  {
      Locale locale0 = Locale.GERMAN;
      DateLocaleConverter dateLocaleConverter0 = new DateLocaleConverter(locale0, locale0, true);
}"
1259,"    public boolean isLenient() {
        return isLenient;
    }","  public void test3()  throws Throwable  {
      Object object0 = new Object();
      DateLocaleConverter dateLocaleConverter0 = new DateLocaleConverter(object0, false);
}"
1260,"    protected Object parse(final Object value, String pattern) throws ParseException {

        // Handle Date
        if (value instanceof java.util.Date) {
            return value;
        }

        // Handle Calendar
        if (value instanceof java.util.Calendar) {
            return ((java.util.Calendar)value).getTime();
        }

         if (locPattern) {
             pattern = convertLocalizedPattern(pattern, locale);
         }

         // Create Formatter - use default if pattern is null
         final DateFormat formatter = pattern == null ? DateFormat.getDateInstance(DateFormat.SHORT, locale)
                                                : new SimpleDateFormat(pattern, locale);
         formatter.setLenient(isLenient);


         // Parse the Date
        final ParsePosition pos = new ParsePosition(0);
        final String strValue = value.toString();
        final Object parsedValue = formatter.parseObject(strValue, pos);
        if (pos.getErrorIndex() > -1) {
            throw new ConversionException(""Error parsing date '"" + value +
                    ""' at position=""+ pos.getErrorIndex());
        }
        if (pos.getIndex() < strValue.length()) {
            throw new ConversionException(""Date '"" + value +
                    ""' contains unparsed characters from position="" + pos.getIndex());
        }

        return parsedValue;
     }","  public void test4()  throws Throwable  {
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      DateLocaleConverter dateLocaleConverter0 = new DateLocaleConverter(locale0, "" m\""~zl^F.Ng#fEb-"", true);
      // Undeclared exception!
      try { 
        dateLocaleConverter0.parse("" m\""~zl^F.Ng#fEb-"", "" m\""~zl^F.Ng#fEb-"");
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // Error parsing date ' m\""~zl^F.Ng#fEb-' at position=0
         //
         verifyException(""org.apache.commons.beanutils.locale.converters.DateLocaleConverter"", e);
      }
  }"
1261,"    protected Object parse(final Object value, String pattern) throws ParseException {

        // Handle Date
        if (value instanceof java.util.Date) {
            return value;
        }

        // Handle Calendar
        if (value instanceof java.util.Calendar) {
            return ((java.util.Calendar)value).getTime();
        }

         if (locPattern) {
             pattern = convertLocalizedPattern(pattern, locale);
         }

         // Create Formatter - use default if pattern is null
         final DateFormat formatter = pattern == null ? DateFormat.getDateInstance(DateFormat.SHORT, locale)
                                                : new SimpleDateFormat(pattern, locale);
         formatter.setLenient(isLenient);


         // Parse the Date
        final ParsePosition pos = new ParsePosition(0);
        final String strValue = value.toString();
        final Object parsedValue = formatter.parseObject(strValue, pos);
        if (pos.getErrorIndex() > -1) {
            throw new ConversionException(""Error parsing date '"" + value +
                    ""' at position=""+ pos.getErrorIndex());
        }
        if (pos.getIndex() < strValue.length()) {
            throw new ConversionException(""Date '"" + value +
                    ""' contains unparsed characters from position="" + pos.getIndex());
        }

        return parsedValue;
     }","  public void test5()  throws Throwable  {
      Locale locale0 = Locale.GERMANY;
      DateLocaleConverter dateLocaleConverter0 = new DateLocaleConverter(locale0, true);
      // Undeclared exception!
      try { 
        dateLocaleConverter0.parse(locale0, ""' a~J plsit'1Con="");
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // Error parsing date 'de_DE' at position=0
         //
         verifyException(""org.apache.commons.beanutils.locale.converters.DateLocaleConverter"", e);
      }
  }"
1262,"    protected Object parse(final Object value, String pattern) throws ParseException {

        // Handle Date
        if (value instanceof java.util.Date) {
            return value;
        }

        // Handle Calendar
        if (value instanceof java.util.Calendar) {
            return ((java.util.Calendar)value).getTime();
        }

         if (locPattern) {
             pattern = convertLocalizedPattern(pattern, locale);
         }

         // Create Formatter - use default if pattern is null
         final DateFormat formatter = pattern == null ? DateFormat.getDateInstance(DateFormat.SHORT, locale)
                                                : new SimpleDateFormat(pattern, locale);
         formatter.setLenient(isLenient);


         // Parse the Date
        final ParsePosition pos = new ParsePosition(0);
        final String strValue = value.toString();
        final Object parsedValue = formatter.parseObject(strValue, pos);
        if (pos.getErrorIndex() > -1) {
            throw new ConversionException(""Error parsing date '"" + value +
                    ""' at position=""+ pos.getErrorIndex());
        }
        if (pos.getIndex() < strValue.length()) {
            throw new ConversionException(""Date '"" + value +
                    ""' contains unparsed characters from position="" + pos.getIndex());
        }

        return parsedValue;
     }","  public void test6()  throws Throwable  {
      Locale locale0 = Locale.FRANCE;
      DateLocaleConverter dateLocaleConverter0 = new DateLocaleConverter(locale0, ""D'D[1p=dcOcr"", true);
      // Undeclared exception!
      try { 
        dateLocaleConverter0.parse(""D'D[1p=dcOcr"", ""D'D[1p=dcOcr"");
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // Error parsing date 'D'D[1p=dcOcr' at position=0
         //
         verifyException(""org.apache.commons.beanutils.locale.converters.DateLocaleConverter"", e);
      }
  }"
1263,"    public Object convert(final Object value) {
        return convert(value, null);
    }","  public void test7()  throws Throwable  {
      Locale locale0 = Locale.PRC;
      DateLocaleConverter dateLocaleConverter0 = new DateLocaleConverter(locale0, ""GanjkHmsSEDFwWxhKzZ"", true);
      // Undeclared exception!
      try { 
        dateLocaleConverter0.convert((Object) dateLocaleConverter0);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // Error parsing date 'org.apache.commons.beanutils.locale.converters.DateLocaleConverter@1' at position=0
         //
         verifyException(""org.apache.commons.beanutils.locale.converters.DateLocaleConverter"", e);
      }
  }"
1264,"    protected Object parse(final Object value, String pattern) throws ParseException {

        // Handle Date
        if (value instanceof java.util.Date) {
            return value;
        }

        // Handle Calendar
        if (value instanceof java.util.Calendar) {
            return ((java.util.Calendar)value).getTime();
        }

         if (locPattern) {
             pattern = convertLocalizedPattern(pattern, locale);
         }

         // Create Formatter - use default if pattern is null
         final DateFormat formatter = pattern == null ? DateFormat.getDateInstance(DateFormat.SHORT, locale)
                                                : new SimpleDateFormat(pattern, locale);
         formatter.setLenient(isLenient);


         // Parse the Date
        final ParsePosition pos = new ParsePosition(0);
        final String strValue = value.toString();
        final Object parsedValue = formatter.parseObject(strValue, pos);
        if (pos.getErrorIndex() > -1) {
            throw new ConversionException(""Error parsing date '"" + value +
                    ""' at position=""+ pos.getErrorIndex());
        }
        if (pos.getIndex() < strValue.length()) {
            throw new ConversionException(""Date '"" + value +
                    ""' contains unparsed characters from position="" + pos.getIndex());
        }

        return parsedValue;
     }","  public void test8()  throws Throwable  {
      DateLocaleConverter dateLocaleConverter0 = new DateLocaleConverter(true);
      // Undeclared exception!
      try { 
        dateLocaleConverter0.parse(""^M'1cVt"", (String) null);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // Error parsing date '^M'1cVt' at position=0
         //
         verifyException(""org.apache.commons.beanutils.locale.converters.DateLocaleConverter"", e);
      }
  }"
1265,"    protected Object parse(final Object value, String pattern) throws ParseException {

        // Handle Date
        if (value instanceof java.util.Date) {
            return value;
        }

        // Handle Calendar
        if (value instanceof java.util.Calendar) {
            return ((java.util.Calendar)value).getTime();
        }

         if (locPattern) {
             pattern = convertLocalizedPattern(pattern, locale);
         }

         // Create Formatter - use default if pattern is null
         final DateFormat formatter = pattern == null ? DateFormat.getDateInstance(DateFormat.SHORT, locale)
                                                : new SimpleDateFormat(pattern, locale);
         formatter.setLenient(isLenient);


         // Parse the Date
        final ParsePosition pos = new ParsePosition(0);
        final String strValue = value.toString();
        final Object parsedValue = formatter.parseObject(strValue, pos);
        if (pos.getErrorIndex() > -1) {
            throw new ConversionException(""Error parsing date '"" + value +
                    ""' at position=""+ pos.getErrorIndex());
        }
        if (pos.getIndex() < strValue.length()) {
            throw new ConversionException(""Date '"" + value +
                    ""' contains unparsed characters from position="" + pos.getIndex());
        }

        return parsedValue;
     }","  public void test9()  throws Throwable  {
      DateLocaleConverter dateLocaleConverter0 = new DateLocaleConverter(true);
      // Undeclared exception!
      try { 
        dateLocaleConverter0.parse("""", """");
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // Date '' contains unparsed characters from position=0
         //
         verifyException(""org.apache.commons.beanutils.locale.converters.DateLocaleConverter"", e);
      }
  }"
1266,"    public boolean isLenient() {
        return isLenient;
    }","  public void test10()  throws Throwable  {
      Locale locale0 = Locale.PRC;
      DateLocaleConverter dateLocaleConverter0 = new DateLocaleConverter(locale0);
      DateLocaleConverter dateLocaleConverter1 = new DateLocaleConverter(dateLocaleConverter0, locale0, ""[AjV"", true);
      DateLocaleConverter dateLocaleConverter2 = (DateLocaleConverter)dateLocaleConverter1.convert((Object) ""[AjV"");
}"
1267,"    public boolean isLenient() {
        return isLenient;
    }","  public void test11()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      DateLocaleConverter dateLocaleConverter0 = new DateLocaleConverter(true);
      dateLocaleConverter0.parse(mockGregorianCalendar0, """");
}"
1268,"    public boolean isLenient() {
        return isLenient;
    }","  public void test12()  throws Throwable  {
      Locale locale0 = Locale.PRC;
      DateLocaleConverter dateLocaleConverter0 = new DateLocaleConverter(locale0);
}"
1269,"    public boolean isLenient() {
        return isLenient;
    }","  public void test13()  throws Throwable  {
      Locale locale0 = Locale.PRC;
      DateLocaleConverter dateLocaleConverter0 = new DateLocaleConverter(locale0);
      dateLocaleConverter0.setLenient(true);
      boolean boolean0 = dateLocaleConverter0.isLenient();
}"
1270,"    public boolean isLenient() {
        return isLenient;
    }","  public void test14()  throws Throwable  {
      Object object0 = new Object();
      DateLocaleConverter dateLocaleConverter0 = new DateLocaleConverter(object0, (Locale) null, ""GanjkHmsSEDFwWxhKzZ"");
}"
1271,"    public boolean isLenient() {
        return isLenient;
    }","  public void test15()  throws Throwable  {
      DateLocaleConverter dateLocaleConverter0 = new DateLocaleConverter(""D;L"");
      Class<Object> class0 = Object.class;
      Instant instant0 = MockInstant.ofEpochSecond(2664L);
      Date date0 = Date.from(instant0);
      dateLocaleConverter0.convert(class0, (Object) date0, ""D;L"");
}"
1272,"    public boolean isLenient() {
        return isLenient;
    }","  public void test16()  throws Throwable  {
      DateLocaleConverter dateLocaleConverter0 = new DateLocaleConverter();
      Locale locale0 = Locale.US;
      DateLocaleConverter dateLocaleConverter1 = new DateLocaleConverter(dateLocaleConverter0, locale0);
}"
1273,"    public boolean isLenient() {
        return isLenient;
    }","  public void test17()  throws Throwable  {
      DateLocaleConverter dateLocaleConverter0 = new DateLocaleConverter();
      Locale locale0 = Locale.US;
      DateLocaleConverter dateLocaleConverter1 = new DateLocaleConverter(dateLocaleConverter0, locale0);
}"
1274,"    public boolean isLenient() {
        return isLenient;
    }","  public void test18()  throws Throwable  {
      Locale locale0 = Locale.CANADA_FRENCH;
      DateLocaleConverter dateLocaleConverter0 = new DateLocaleConverter(locale0, ""P Sfgr "");
}"
1275,"    public boolean isLenient() {
        return isLenient;
    }","  public void test19()  throws Throwable  {
      Locale locale0 = Locale.CHINA;
      DateLocaleConverter dateLocaleConverter0 = new DateLocaleConverter(locale0);
      boolean boolean0 = dateLocaleConverter0.isLenient();
}"
1276,"    protected Object parse(final Object value, final String pattern) throws ParseException {
        final Number parsed = (Number) super.parse(value, pattern);
        if (parsed.longValue() != parsed.byteValue()) {
            throw new ConversionException(""Supplied number is not of type Byte: "" + parsed.longValue());
        }
        // now returns property Byte
        return new Byte(parsed.byteValue());
    }","  public void test0()  throws Throwable  {
      Locale locale0 = new Locale(""org.apache.commons.beanutils.locale.converters.ByteLocaleConverter"", ""QH>g"");
      ByteLocaleConverter byteLocaleConverter0 = new ByteLocaleConverter(locale0, """");
      try { 
        byteLocaleConverter0.parse(""org.apache.commons.beanutils.locale.converters.ByteLocaleConverter"", """");
        fail(""Expecting exception: ParseException"");
      } catch(ParseException e) {
         //
         // Unparseable number: \""org.apache.commons.beanutils.locale.converters.ByteLocaleConverter\""
         //
         verifyException(""java.text.NumberFormat"", e);
      }
  }"
1277,"    protected Object parse(final Object value, final String pattern) throws ParseException {
        final Number parsed = (Number) super.parse(value, pattern);
        if (parsed.longValue() != parsed.byteValue()) {
            throw new ConversionException(""Supplied number is not of type Byte: "" + parsed.longValue());
        }
        // now returns property Byte
        return new Byte(parsed.byteValue());
    }","  public void test1()  throws Throwable  {
      Double double0 = new Double((-1229.68245));
      Locale locale0 = Locale.ENGLISH;
      ByteLocaleConverter byteLocaleConverter0 = new ByteLocaleConverter(double0, locale0);
      // Undeclared exception!
      try { 
        byteLocaleConverter0.parse((Object) null, """");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.text.DecimalFormat"", e);
      }
  }"
1278,"    protected Object parse(final Object value, final String pattern) throws ParseException {
        final Number parsed = (Number) super.parse(value, pattern);
        if (parsed.longValue() != parsed.byteValue()) {
            throw new ConversionException(""Supplied number is not of type Byte: "" + parsed.longValue());
        }
        // now returns property Byte
        return new Byte(parsed.byteValue());
    }","  public void test2()  throws Throwable  {
      Locale locale0 = Locale.UK;
      ByteLocaleConverter byteLocaleConverter0 = new ByteLocaleConverter(locale0, ""'Ge"");
      // Undeclared exception!
      try { 
        byteLocaleConverter0.parse(""'Ge"", ""hwMbT|S(n4}T;V0rWq"");
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Unquoted special character ';' in pattern \""hwMbT|S(n4}T;V0rWq\""
         //
         verifyException(""java.text.DecimalFormat"", e);
      }
  }"
1279,"    public ByteLocaleConverter() {

        this(false);
    }","  public void test3()  throws Throwable  {
      ByteLocaleConverter byteLocaleConverter0 = new ByteLocaleConverter(false);
  }"
1280,"    public ByteLocaleConverter() {

        this(false);
    }","  public void test4()  throws Throwable  {
      Integer integer0 = new Integer((-1412));
      ByteLocaleConverter byteLocaleConverter0 = new ByteLocaleConverter(integer0, (Locale) null, ""b>.l1Bdr)e"", true);
  }"
1281,"    public ByteLocaleConverter() {

        this(false);
    }","  public void test5()  throws Throwable  {
      ByteLocaleConverter byteLocaleConverter0 = new ByteLocaleConverter((Locale) null, false);
  }"
1282,"    public ByteLocaleConverter() {

        this(false);
    }","  public void test6()  throws Throwable  {
      Double double0 = new Double((-1.0));
      Locale locale0 = Locale.GERMAN;
      ByteLocaleConverter byteLocaleConverter0 = new ByteLocaleConverter(double0, locale0, true);
  }"
1283,"    public ByteLocaleConverter() {

        this(false);
    }","  public void test7()  throws Throwable  {
      Locale locale0 = Locale.ROOT;
      ByteLocaleConverter byteLocaleConverter0 = new ByteLocaleConverter(locale0, """", true);
  }"
1284,"    protected Object parse(final Object value, final String pattern) throws ParseException {
        final Number parsed = (Number) super.parse(value, pattern);
        if (parsed.longValue() != parsed.byteValue()) {
            throw new ConversionException(""Supplied number is not of type Byte: "" + parsed.longValue());
        }
        // now returns property Byte
        return new Byte(parsed.byteValue());
    }","  public void test8()  throws Throwable  {
      ByteLocaleConverter byteLocaleConverter0 = new ByteLocaleConverter((Object) null, true);
      Float float0 = new Float(3122.0);
      // Undeclared exception!
      try { 
        byteLocaleConverter0.parse(float0, (String) null);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // Supplied number is not of type Byte: 3122
         //
         verifyException(""org.apache.commons.beanutils.locale.converters.ByteLocaleConverter"", e);
      }
  }"
1285,"    protected Object parse(final Object value, final String pattern) throws ParseException {
        final Number parsed = (Number) super.parse(value, pattern);
        if (parsed.longValue() != parsed.byteValue()) {
            throw new ConversionException(""Supplied number is not of type Byte: "" + parsed.longValue());
        }
        // now returns property Byte
        return new Byte(parsed.byteValue());
    }","  public void test9()  throws Throwable  {
      Float float0 = new Float((-1478.0F));
      Locale locale0 = Locale.GERMAN;
      ByteLocaleConverter byteLocaleConverter0 = new ByteLocaleConverter(float0, locale0);
      // Undeclared exception!
      try { 
        byteLocaleConverter0.parse(float0, ""Supplied number is not of type Byte: "");
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // Supplied number is not of type Byte: -1478
         //
         verifyException(""org.apache.commons.beanutils.locale.converters.ByteLocaleConverter"", e);
      }
  }"
1286,"    public ByteLocaleConverter() {

        this(false);
    }","  public void test10()  throws Throwable  {
      Float float0 = new Float((double) (byte) (-20));
      Locale locale0 = Locale.TAIWAN;
      ByteLocaleConverter byteLocaleConverter0 = new ByteLocaleConverter(float0, locale0, ""Tv"");
  }"
1287,"    public ByteLocaleConverter() {

        this(false);
    }","  public void test11()  throws Throwable  {
      Locale locale0 = Locale.FRENCH;
      ByteLocaleConverter byteLocaleConverter0 = new ByteLocaleConverter(locale0);
  }"
1288,"    public ByteLocaleConverter() {

        this(false);
    }","  public void test12()  throws Throwable  {
      Float float0 = Float.valueOf((-2.3368526F));
      ByteLocaleConverter byteLocaleConverter0 = new ByteLocaleConverter(float0);
  }"
1289,"    protected Object parse(final Object value, final String pattern) throws ParseException {
        final Number parsed = (Number) super.parse(value, pattern);
        if (parsed.longValue() != parsed.byteValue()) {
            throw new ConversionException(""Supplied number is not of type Byte: "" + parsed.longValue());
        }
        // now returns property Byte
        return new Byte(parsed.byteValue());
    }","  public void test13()  throws Throwable  {
      ByteLocaleConverter byteLocaleConverter0 = new ByteLocaleConverter();
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        byteLocaleConverter0.parse(object0, ""t[Tig#amj v)Af[T"");
        fail(""Expecting exception: ClassCastException"");
      } catch(ClassCastException e) {
         //
         // java.lang.Object cannot be cast to java.lang.String
         //
         verifyException(""org.apache.commons.beanutils.locale.converters.DecimalLocaleConverter"", e);
      }
  }"
1290,"    protected Object parse(final Object value, final String pattern) throws ParseException {
        final Number parsed = (Number) super.parse(value, pattern);
        if (parsed.longValue() != parsed.byteValue()) {
            throw new ConversionException(""Supplied number is not of type Byte: "" + parsed.longValue());
        }
        // now returns property Byte
        return new Byte(parsed.byteValue());
    }","  public void test14()  throws Throwable  {
      Double double0 = new Double((-1229.68245));
      Locale locale0 = Locale.ENGLISH;
      ByteLocaleConverter byteLocaleConverter0 = new ByteLocaleConverter(double0, locale0);
      Byte byte0 = new Byte((byte) (-38));
      Object object0 = byteLocaleConverter0.parse(byte0, """");
}"
1291,"    protected Object parse(final Object value, final String pattern) throws ParseException {

        if (value instanceof Number) {
            return value;
        }

        // Note that despite the ambiguous ""getInstance"" name, and despite the
        // fact that objects returned from this method have the same toString
        // representation, each call to getInstance actually returns a new
        // object.
        final DecimalFormat formatter = (DecimalFormat) DecimalFormat.getInstance(locale);

        // if some constructors default pattern to null, it makes only sense
        // to handle null pattern gracefully
        if (pattern != null) {
            if (locPattern) {
                formatter.applyLocalizedPattern(pattern);
            } else {
                formatter.applyPattern(pattern);
            }
        } else {
            log.debug(""No pattern provided, using default."");
        }

        return formatter.parse((String) value);
    }","  public void test0()  throws Throwable  {
      Object object0 = new Object();
      Locale locale0 = Locale.US;
      DecimalLocaleConverter decimalLocaleConverter0 = new DecimalLocaleConverter(object0, locale0, ""a.laQ"");
      // Undeclared exception!
      try { 
        decimalLocaleConverter0.parse((Object) null, ""a.laQ"");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.text.DecimalFormat"", e);
      }
  }"
1292,"    public DecimalLocaleConverter() {

        this(false);
    }","  public void test1()  throws Throwable  {
      Locale locale0 = Locale.ITALIAN;
      DecimalLocaleConverter decimalLocaleConverter0 = new DecimalLocaleConverter(locale0, false);
  }"
1293,"    public DecimalLocaleConverter() {

        this(false);
    }","  public void test2()  throws Throwable  {
      DecimalLocaleConverter decimalLocaleConverter0 = new DecimalLocaleConverter(false);
  }"
1294,"    public DecimalLocaleConverter() {

        this(false);
    }","  public void test3()  throws Throwable  {
      Locale locale0 = Locale.JAPANESE;
      DecimalLocaleConverter decimalLocaleConverter0 = new DecimalLocaleConverter(locale0, ""`sQ"", true);
  }"
1295,"    public DecimalLocaleConverter() {

        this(false);
    }","  public void test4()  throws Throwable  {
      Object object0 = new Object();
      DecimalLocaleConverter decimalLocaleConverter0 = new DecimalLocaleConverter(object0, (Locale) null, ""No pattern provided, using default."", true);
  }"
1296,"    protected Object parse(final Object value, final String pattern) throws ParseException {

        if (value instanceof Number) {
            return value;
        }

        // Note that despite the ambiguous ""getInstance"" name, and despite the
        // fact that objects returned from this method have the same toString
        // representation, each call to getInstance actually returns a new
        // object.
        final DecimalFormat formatter = (DecimalFormat) DecimalFormat.getInstance(locale);

        // if some constructors default pattern to null, it makes only sense
        // to handle null pattern gracefully
        if (pattern != null) {
            if (locPattern) {
                formatter.applyLocalizedPattern(pattern);
            } else {
                formatter.applyPattern(pattern);
            }
        } else {
            log.debug(""No pattern provided, using default."");
        }

        return formatter.parse((String) value);
    }","  public void test5()  throws Throwable  {
      Double double0 = new Double(1652.4999636184725);
      Locale locale0 = Locale.CHINA;
      DecimalLocaleConverter decimalLocaleConverter0 = new DecimalLocaleConverter(double0, locale0, false);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        decimalLocaleConverter0.parse(object0, ""11HBI{P(mF"");
        fail(""Expecting exception: ClassCastException"");
      } catch(ClassCastException e) {
         //
         // java.lang.Object cannot be cast to java.lang.String
         //
         verifyException(""org.apache.commons.beanutils.locale.converters.DecimalLocaleConverter"", e);
      }
  }"
1297,"    protected Object parse(final Object value, final String pattern) throws ParseException {

        if (value instanceof Number) {
            return value;
        }

        // Note that despite the ambiguous ""getInstance"" name, and despite the
        // fact that objects returned from this method have the same toString
        // representation, each call to getInstance actually returns a new
        // object.
        final DecimalFormat formatter = (DecimalFormat) DecimalFormat.getInstance(locale);

        // if some constructors default pattern to null, it makes only sense
        // to handle null pattern gracefully
        if (pattern != null) {
            if (locPattern) {
                formatter.applyLocalizedPattern(pattern);
            } else {
                formatter.applyPattern(pattern);
            }
        } else {
            log.debug(""No pattern provided, using default."");
        }

        return formatter.parse((String) value);
    }","  public void test6()  throws Throwable  {
      DecimalLocaleConverter decimalLocaleConverter0 = new DecimalLocaleConverter(""I"", true);
      try { 
        decimalLocaleConverter0.parse(""I"", ""I"");
        fail(""Expecting exception: ParseException"");
      } catch(ParseException e) {
         //
         // Unparseable number: \""I\""
         //
         verifyException(""java.text.NumberFormat"", e);
      }
  }"
1298,"    public Object convert(final Object value) {
        return convert(value, null);
    }","  public void test7()  throws Throwable  {
      DecimalLocaleConverter decimalLocaleConverter0 = new DecimalLocaleConverter(""I"", true);
      Object object0 = decimalLocaleConverter0.convert((Object) ""I"");
}"
1299,"    protected Object parse(final Object value, final String pattern) throws ParseException {

        if (value instanceof Number) {
            return value;
        }

        // Note that despite the ambiguous ""getInstance"" name, and despite the
        // fact that objects returned from this method have the same toString
        // representation, each call to getInstance actually returns a new
        // object.
        final DecimalFormat formatter = (DecimalFormat) DecimalFormat.getInstance(locale);

        // if some constructors default pattern to null, it makes only sense
        // to handle null pattern gracefully
        if (pattern != null) {
            if (locPattern) {
                formatter.applyLocalizedPattern(pattern);
            } else {
                formatter.applyPattern(pattern);
            }
        } else {
            log.debug(""No pattern provided, using default."");
        }

        return formatter.parse((String) value);
    }","  public void test8()  throws Throwable  {
      Locale locale0 = Locale.CHINESE;
      DecimalLocaleConverter decimalLocaleConverter0 = new DecimalLocaleConverter((Object) null, locale0);
      // Undeclared exception!
      try { 
        decimalLocaleConverter0.parse(""org.apache.commons.logging.impl.Log4JLogger"", ""org.apache.commons.logging.impl.Log4JLogger"");
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Multiple decimal separators in pattern \""org.apache.commons.logging.impl.Log4JLogger\""
         //
         verifyException(""java.text.DecimalFormat"", e);
      }
  }"
1300,"    public DecimalLocaleConverter() {

        this(false);
    }","  public void test9()  throws Throwable  {
      Locale locale0 = Locale.CANADA;
      DecimalLocaleConverter decimalLocaleConverter0 = new DecimalLocaleConverter(locale0, """");
  }"
1301,"    public DecimalLocaleConverter() {

        this(false);
    }","  public void test10()  throws Throwable  {
      DecimalLocaleConverter decimalLocaleConverter0 = new DecimalLocaleConverter("""");
  }"
1302,"    protected Object parse(final Object value, final String pattern) throws ParseException {

        if (value instanceof Number) {
            return value;
        }

        // Note that despite the ambiguous ""getInstance"" name, and despite the
        // fact that objects returned from this method have the same toString
        // representation, each call to getInstance actually returns a new
        // object.
        final DecimalFormat formatter = (DecimalFormat) DecimalFormat.getInstance(locale);

        // if some constructors default pattern to null, it makes only sense
        // to handle null pattern gracefully
        if (pattern != null) {
            if (locPattern) {
                formatter.applyLocalizedPattern(pattern);
            } else {
                formatter.applyPattern(pattern);
            }
        } else {
            log.debug(""No pattern provided, using default."");
        }

        return formatter.parse((String) value);
    }","  public void test11()  throws Throwable  {
      Locale locale0 = Locale.CHINESE;
      DecimalLocaleConverter decimalLocaleConverter0 = new DecimalLocaleConverter(locale0);
      Integer integer0 = new Integer(1439);
      Object object0 = decimalLocaleConverter0.parse(integer0, """");
}"
1303,"    public DecimalLocaleConverter() {

        this(false);
    }","  public void test12()  throws Throwable  {
      DecimalLocaleConverter decimalLocaleConverter0 = new DecimalLocaleConverter();
  }"
1304,"    protected Object parse(final Object value, final String pattern) throws ParseException {

        final Object result = super.parse(value, pattern);

        if (result == null || result instanceof BigDecimal) {
            return result;
        }

        try {
            return new BigDecimal(result.toString());
        }
        catch (final NumberFormatException ex) {
            throw new ConversionException(""Suplied number is not of type BigDecimal: "" + result);
        }

    }","  public void test0()  throws Throwable  {
      Object object0 = new Object();
      Locale locale0 = new Locale("""");
      BigDecimalLocaleConverter bigDecimalLocaleConverter0 = new BigDecimalLocaleConverter(object0, locale0);
      Integer integer0 = new Integer((-2246));
      // Undeclared exception!
      try { 
        bigDecimalLocaleConverter0.parse(integer0, """");
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // Suplied number is not of type BigDecimal: -2246
         //
         verifyException(""org.apache.commons.beanutils.locale.converters.BigDecimalLocaleConverter"", e);
      }
  }"
1305,"    protected Object parse(final Object value, final String pattern) throws ParseException {

        final Object result = super.parse(value, pattern);

        if (result == null || result instanceof BigDecimal) {
            return result;
        }

        try {
            return new BigDecimal(result.toString());
        }
        catch (final NumberFormatException ex) {
            throw new ConversionException(""Suplied number is not of type BigDecimal: "" + result);
        }

    }","  public void test1()  throws Throwable  {
      Locale locale0 = new Locale("""");
      BigDecimalLocaleConverter bigDecimalLocaleConverter0 = new BigDecimalLocaleConverter(locale0, """");
      try { 
        bigDecimalLocaleConverter0.parse("""", """");
        fail(""Expecting exception: ParseException"");
      } catch(ParseException e) {
         //
         // Unparseable number: \""\""
         //
         verifyException(""java.text.NumberFormat"", e);
      }
  }"
1306,"    protected Object parse(final Object value, final String pattern) throws ParseException {

        final Object result = super.parse(value, pattern);

        if (result == null || result instanceof BigDecimal) {
            return result;
        }

        try {
            return new BigDecimal(result.toString());
        }
        catch (final NumberFormatException ex) {
            throw new ConversionException(""Suplied number is not of type BigDecimal: "" + result);
        }

    }","  public void test2()  throws Throwable  {
      BigDecimalLocaleConverter bigDecimalLocaleConverter0 = new BigDecimalLocaleConverter((Locale) null);
      // Undeclared exception!
      try { 
        bigDecimalLocaleConverter0.parse((Object) null, """");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.text.DecimalFormat"", e);
      }
  }"
1307,"    protected Object parse(final Object value, final String pattern) throws ParseException {

        final Object result = super.parse(value, pattern);

        if (result == null || result instanceof BigDecimal) {
            return result;
        }

        try {
            return new BigDecimal(result.toString());
        }
        catch (final NumberFormatException ex) {
            throw new ConversionException(""Suplied number is not of type BigDecimal: "" + result);
        }

    }","  public void test3()  throws Throwable  {
      Object object0 = new Object();
      Locale locale0 = Locale.TAIWAN;
      BigDecimalLocaleConverter bigDecimalLocaleConverter0 = new BigDecimalLocaleConverter(object0, locale0, ""org.apache.commons.beanutils.locale.converters.DecimalLocaleConverter"");
      // Undeclared exception!
      try { 
        bigDecimalLocaleConverter0.parse(object0, ""Suplied number is not of type BigDecimal: "");
        fail(""Expecting exception: ClassCastException"");
      } catch(ClassCastException e) {
         //
         // java.lang.Object cannot be cast to java.lang.String
         //
         verifyException(""org.apache.commons.beanutils.locale.converters.DecimalLocaleConverter"", e);
      }
  }"
1308,"    public BigDecimalLocaleConverter() {

        this(false);
    }","  public void test4()  throws Throwable  {
      BigDecimalLocaleConverter bigDecimalLocaleConverter0 = new BigDecimalLocaleConverter(false);
  }"
1309,"    public BigDecimalLocaleConverter() {

        this(false);
    }","  public void test5()  throws Throwable  {
      BigDecimalLocaleConverter bigDecimalLocaleConverter0 = new BigDecimalLocaleConverter((Object) null, true);
  }"
1310,"    public BigDecimalLocaleConverter() {

        this(false);
    }","  public void test6()  throws Throwable  {
      Locale locale0 = Locale.GERMANY;
      BigDecimalLocaleConverter bigDecimalLocaleConverter0 = new BigDecimalLocaleConverter(locale0, true);
  }"
1311,"    public BigDecimalLocaleConverter() {

        this(false);
    }","  public void test7()  throws Throwable  {
      Object object0 = new Object();
      Locale locale0 = Locale.US;
      BigDecimalLocaleConverter bigDecimalLocaleConverter0 = new BigDecimalLocaleConverter(object0, locale0, true);
  }"
1312,"    public BigDecimalLocaleConverter() {

        this(false);
    }","  public void test8()  throws Throwable  {
      Locale locale0 = Locale.KOREAN;
      BigDecimalLocaleConverter bigDecimalLocaleConverter0 = new BigDecimalLocaleConverter(locale0, """", false);
  }"
1313,"    public BigDecimalLocaleConverter() {

        this(false);
    }","  public void test9()  throws Throwable  {
      Locale locale0 = Locale.CHINESE;
      BigDecimalLocaleConverter bigDecimalLocaleConverter0 = new BigDecimalLocaleConverter(locale0, locale0, (String) null, false);
  }"
1314,"    protected Object parse(final Object value, final String pattern) throws ParseException {

        final Object result = super.parse(value, pattern);

        if (result == null || result instanceof BigDecimal) {
            return result;
        }

        try {
            return new BigDecimal(result.toString());
        }
        catch (final NumberFormatException ex) {
            throw new ConversionException(""Suplied number is not of type BigDecimal: "" + result);
        }

    }","  public void test10()  throws Throwable  {
      Locale locale0 = Locale.CANADA_FRENCH;
      BigDecimalLocaleConverter bigDecimalLocaleConverter0 = new BigDecimalLocaleConverter(""6s?hu&tIw"", locale0);
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      BigDecimal bigDecimal1 = (BigDecimal)bigDecimalLocaleConverter0.parse(bigDecimal0, ""6s?hu&tIw"");
}"
1315,"    public BigDecimalLocaleConverter() {

        this(false);
    }","  public void test11()  throws Throwable  {
      Locale locale0 = Locale.CANADA_FRENCH;
      BigDecimalLocaleConverter bigDecimalLocaleConverter0 = new BigDecimalLocaleConverter(""6s?hu&tIw"", locale0);
      Object object0 = bigDecimalLocaleConverter0.convert((Object) ""6s?hu&tIw"");
}"
1316,"    protected Object parse(final Object value, final String pattern) throws ParseException {

        final Object result = super.parse(value, pattern);

        if (result == null || result instanceof BigDecimal) {
            return result;
        }

        try {
            return new BigDecimal(result.toString());
        }
        catch (final NumberFormatException ex) {
            throw new ConversionException(""Suplied number is not of type BigDecimal: "" + result);
        }

    }","  public void test12()  throws Throwable  {
      BigDecimalLocaleConverter bigDecimalLocaleConverter0 = new BigDecimalLocaleConverter();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.ITALY;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      // Undeclared exception!
      try { 
        bigDecimalLocaleConverter0.parse(list0, ""Null value specified for conversion, returing null"");
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Malformed pattern \""Null value specified for conversion, returing null\""
         //
         verifyException(""java.text.DecimalFormat"", e);
      }
  }"
1317,"    public BigDecimalLocaleConverter() {

        this(false);
    }","  public void test13()  throws Throwable  {
      Locale locale0 = Locale.ROOT;
      BigDecimalLocaleConverter bigDecimalLocaleConverter0 = new BigDecimalLocaleConverter((Object) locale0);
  }"
1318,"    protected Object parse(final Object value, final String pattern) throws ParseException {

        final Object result = super.parse(value, pattern);

        if (result == null || result instanceof Short) {
            return result;
        }

        final Number parsed = (Number)result;
        if (parsed.longValue() != parsed.shortValue()) {
            throw new ConversionException(""Supplied number is not of type Short: "" + parsed.longValue());
        }

        // now returns property Short
        return new Short(parsed.shortValue());
    }","  public void test0()  throws Throwable  {
      Double double0 = new Double(1.0);
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      ShortLocaleConverter shortLocaleConverter0 = new ShortLocaleConverter(double0, locale0);
      // Undeclared exception!
      try { 
        shortLocaleConverter0.parse((Object) null, ""org.apache.commons.beanutils.locale.BaseLocaleConverter"");
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Multiple decimal separators in pattern \""org.apache.commons.beanutils.locale.BaseLocaleConverter\""
         //
         verifyException(""java.text.DecimalFormat"", e);
      }
  }"
1319,"    protected Object parse(final Object value, final String pattern) throws ParseException {

        final Object result = super.parse(value, pattern);

        if (result == null || result instanceof Short) {
            return result;
        }

        final Number parsed = (Number)result;
        if (parsed.longValue() != parsed.shortValue()) {
            throw new ConversionException(""Supplied number is not of type Short: "" + parsed.longValue());
        }

        // now returns property Short
        return new Short(parsed.shortValue());
    }","  public void test1()  throws Throwable  {
      Locale locale0 = Locale.ITALIAN;
      ShortLocaleConverter shortLocaleConverter0 = new ShortLocaleConverter(locale0, ""`C0I]]qOR^"");
      // Undeclared exception!
      try { 
        shortLocaleConverter0.parse(locale0, ""znllZ"");
        fail(""Expecting exception: ClassCastException"");
      } catch(ClassCastException e) {
         //
         // java.util.Locale cannot be cast to java.lang.String
         //
         verifyException(""org.apache.commons.beanutils.locale.converters.DecimalLocaleConverter"", e);
      }
  }"
1320,"    public ShortLocaleConverter() {

        this(false);
    }","  public void test2()  throws Throwable  {
      ShortLocaleConverter shortLocaleConverter0 = new ShortLocaleConverter((Locale) null, """", true);
  }"
1321,"    public ShortLocaleConverter() {

        this(false);
    }","  public void test3()  throws Throwable  {
      Locale locale0 = Locale.CANADA_FRENCH;
      ShortLocaleConverter shortLocaleConverter0 = new ShortLocaleConverter(locale0, true);
  }"
1322,"    public ShortLocaleConverter() {

        this(false);
    }","  public void test4()  throws Throwable  {
      ShortLocaleConverter shortLocaleConverter0 = new ShortLocaleConverter(true);
  }"
1323,"    protected Object parse(final Object value, final String pattern) throws ParseException {

        final Object result = super.parse(value, pattern);

        if (result == null || result instanceof Short) {
            return result;
        }

        final Number parsed = (Number)result;
        if (parsed.longValue() != parsed.shortValue()) {
            throw new ConversionException(""Supplied number is not of type Short: "" + parsed.longValue());
        }

        // now returns property Short
        return new Short(parsed.shortValue());
    }","  public void test5()  throws Throwable  {
      Float float0 = new Float(544.9211259831899);
      Locale locale0 = Locale.CHINA;
      ShortLocaleConverter shortLocaleConverter0 = new ShortLocaleConverter(float0, locale0, ""Supplied number is not of type Short: "", false);
      try { 
        shortLocaleConverter0.parse(""Supplied number is not of type Short: "", ""hW^TjV"");
        fail(""Expecting exception: ParseException"");
      } catch(ParseException e) {
         //
         // Unparseable number: \""Supplied number is not of type Short: \""
         //
         verifyException(""java.text.NumberFormat"", e);
      }
  }"
1324,"    public ShortLocaleConverter() {

        this(false);
    }","  public void test6()  throws Throwable  {
      Float float0 = new Float((-53.04614F));
      ShortLocaleConverter shortLocaleConverter0 = new ShortLocaleConverter(float0, false);
  }"
1325,"    protected Object parse(final Object value, final String pattern) throws ParseException {

        final Object result = super.parse(value, pattern);

        if (result == null || result instanceof Short) {
            return result;
        }

        final Number parsed = (Number)result;
        if (parsed.longValue() != parsed.shortValue()) {
            throw new ConversionException(""Supplied number is not of type Short: "" + parsed.longValue());
        }

        // now returns property Short
        return new Short(parsed.shortValue());
    }","  public void test7()  throws Throwable  {
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      ShortLocaleConverter shortLocaleConverter0 = new ShortLocaleConverter((Object) null, locale0, false);
      // Undeclared exception!
      try { 
        shortLocaleConverter0.parse((Object) null, ""#I5D6=o[,s,0QD@6"");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.text.DecimalFormat"", e);
      }
  }"
1326,"    protected Object parse(final Object value, final String pattern) throws ParseException {

        final Object result = super.parse(value, pattern);

        if (result == null || result instanceof Short) {
            return result;
        }

        final Number parsed = (Number)result;
        if (parsed.longValue() != parsed.shortValue()) {
            throw new ConversionException(""Supplied number is not of type Short: "" + parsed.longValue());
        }

        // now returns property Short
        return new Short(parsed.shortValue());
    }","  public void test8()  throws Throwable  {
      Locale locale0 = Locale.ITALIAN;
      ShortLocaleConverter shortLocaleConverter0 = new ShortLocaleConverter(locale0, ""`C0I]]qOR^"");
      Long long0 = Long.valueOf(64183L);
      // Undeclared exception!
      try { 
        shortLocaleConverter0.parse(long0, ""`C0I]]qOR^"");
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // Supplied number is not of type Short: 64183
         //
         verifyException(""org.apache.commons.beanutils.locale.converters.ShortLocaleConverter"", e);
      }
  }"
1327,"    public ShortLocaleConverter() {

        this(false);
    }","  public void test9()  throws Throwable  {
      Locale locale0 = new Locale("""", """");
      ShortLocaleConverter shortLocaleConverter0 = new ShortLocaleConverter("""", locale0, """");
  }"
1328,"    protected Object parse(final Object value, final String pattern) throws ParseException {

        final Object result = super.parse(value, pattern);

        if (result == null || result instanceof Short) {
            return result;
        }

        final Number parsed = (Number)result;
        if (parsed.longValue() != parsed.shortValue()) {
            throw new ConversionException(""Supplied number is not of type Short: "" + parsed.longValue());
        }

        // now returns property Short
        return new Short(parsed.shortValue());
    }","  public void test10()  throws Throwable  {
      Locale locale0 = Locale.ITALIAN;
      ShortLocaleConverter shortLocaleConverter0 = new ShortLocaleConverter(locale0, ""`C0I]]qOR^"");
      Object object0 = shortLocaleConverter0.parse(""`C0I]]qOR^"", ""`C0I]]qOR^"");
      Object object1 = shortLocaleConverter0.parse(object0, ""`C0I]]qOR^"");
}"
1329,"    public ShortLocaleConverter() {

        this(false);
    }","  public void test11()  throws Throwable  {
      Locale locale0 = Locale.ROOT;
      ShortLocaleConverter shortLocaleConverter0 = new ShortLocaleConverter(locale0);
  }"
1330,"    public ShortLocaleConverter() {

        this(false);
    }","  public void test12()  throws Throwable  {
      Long long0 = new Long(0L);
      ShortLocaleConverter shortLocaleConverter0 = new ShortLocaleConverter(long0);
  }"
1331,"    public ShortLocaleConverter() {

        this(false);
    }","  public void test13()  throws Throwable  {
      ShortLocaleConverter shortLocaleConverter0 = new ShortLocaleConverter();
  }"
1332,"    protected Object parse(final Object value, final String pattern) throws ParseException {

        return new Timestamp(((java.util.Date) super.parse(value, pattern)).getTime());
    }","  public void test0()  throws Throwable  {
      Locale locale0 = new Locale("""", """");
      SqlTimestampLocaleConverter sqlTimestampLocaleConverter0 = new SqlTimestampLocaleConverter(locale0, ""k"");
      MockDate mockDate0 = new MockDate();
      Timestamp timestamp0 = (Timestamp)sqlTimestampLocaleConverter0.parse(mockDate0, """");
}"
1333,"    public SqlTimestampLocaleConverter() {

        this(false);
    }","  public void test1()  throws Throwable  {
      SqlTimestampLocaleConverter sqlTimestampLocaleConverter0 = new SqlTimestampLocaleConverter(true);
}"
1334,"    protected Object parse(final Object value, final String pattern) throws ParseException {

        return new Timestamp(((java.util.Date) super.parse(value, pattern)).getTime());
    }","  public void test2()  throws Throwable  {
      Locale locale0 = Locale.TAIWAN;
      SqlTimestampLocaleConverter sqlTimestampLocaleConverter0 = new SqlTimestampLocaleConverter(locale0, """");
      // Undeclared exception!
      try { 
        sqlTimestampLocaleConverter0.parse(locale0, ""' for "");
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Unterminated quote
         //
         verifyException(""java.text.SimpleDateFormat"", e);
      }
  }"
1335,"    public SqlTimestampLocaleConverter() {

        this(false);
    }","  public void test3()  throws Throwable  {
      SqlTimestampLocaleConverter sqlTimestampLocaleConverter0 = new SqlTimestampLocaleConverter((Locale) null, true);
}"
1336,"    protected Object parse(final Object value, final String pattern) throws ParseException {

        return new Timestamp(((java.util.Date) super.parse(value, pattern)).getTime());
    }","  public void test4()  throws Throwable  {
      Locale locale0 = Locale.UK;
      SqlTimestampLocaleConverter sqlTimestampLocaleConverter0 = new SqlTimestampLocaleConverter(locale0, ""CQX$>cw;"", false);
      // Undeclared exception!
      try { 
        sqlTimestampLocaleConverter0.parse((Object) null, """");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.evosuite.runtime.System"", e);
      }
  }"
1337,"    public SqlTimestampLocaleConverter() {

        this(false);
    }","  public void test5()  throws Throwable  {
      Object object0 = new Object();
      Locale locale0 = Locale.CANADA_FRENCH;
      SqlTimestampLocaleConverter sqlTimestampLocaleConverter0 = new SqlTimestampLocaleConverter(object0, locale0, false);
}"
1338,"    public SqlTimestampLocaleConverter() {

        this(false);
    }","  public void test6()  throws Throwable  {
      Locale locale0 = Locale.ROOT;
      SqlTimestampLocaleConverter sqlTimestampLocaleConverter0 = new SqlTimestampLocaleConverter("""", locale0, ""egCa$.D.=&ieGz]"", false);
}"
1339,"    public SqlTimestampLocaleConverter() {

        this(false);
    }","  public void test7()  throws Throwable  {
      Locale locale0 = Locale.PRC;
      SqlTimestampLocaleConverter sqlTimestampLocaleConverter0 = new SqlTimestampLocaleConverter(locale0, locale0);
}"
1340,"    public SqlTimestampLocaleConverter() {

        this(false);
    }","  public void test8()  throws Throwable  {
      SqlTimestampLocaleConverter sqlTimestampLocaleConverter0 = new SqlTimestampLocaleConverter((Locale) null);
}"
1341,"    public SqlTimestampLocaleConverter() {

        this(false);
    }","  public void test9()  throws Throwable  {
      Object object0 = new Object();
      SqlTimestampLocaleConverter sqlTimestampLocaleConverter0 = new SqlTimestampLocaleConverter(object0);
}"
1342,"    public SqlTimestampLocaleConverter() {

        this(false);
    }","  public void test10()  throws Throwable  {
      Object object0 = new Object();
      Locale locale0 = new Locale("""");
      SqlTimestampLocaleConverter sqlTimestampLocaleConverter0 = new SqlTimestampLocaleConverter(object0, locale0, """");
}"
1343,"    public SqlTimestampLocaleConverter() {

        this(false);
    }","  public void test11()  throws Throwable  {
      SqlTimestampLocaleConverter sqlTimestampLocaleConverter0 = new SqlTimestampLocaleConverter();
}"
1344,"    protected Object parse(final Object value, final String pattern) throws ParseException {

        return new Timestamp(((java.util.Date) super.parse(value, pattern)).getTime());
    }","  public void test12()  throws Throwable  {
      Object object0 = new Object();
      SqlTimestampLocaleConverter sqlTimestampLocaleConverter0 = new SqlTimestampLocaleConverter(object0, false);
      // Undeclared exception!
      try { 
        sqlTimestampLocaleConverter0.parse(object0, (String) null);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // Error parsing date 'java.lang.Object@2728e46c' at position=0
         //
         verifyException(""org.apache.commons.beanutils.locale.converters.DateLocaleConverter"", e);
      }
  }"
1345,"    protected Object parse(final Object value, final String pattern) throws ParseException {

        String result = null;

        if ((value instanceof Integer) ||
                (value instanceof Long) ||
                (value instanceof BigInteger) ||
                (value instanceof Byte) ||
                (value instanceof Short)) {

            result = getDecimalFormat(locale, pattern).format(((Number) value).longValue());
        }
        else if ((value instanceof Double) ||
                (value instanceof BigDecimal) ||
                (value instanceof Float)) {

            result = getDecimalFormat(locale, pattern).format(((Number) value).doubleValue());
        }
        else if (value instanceof Date) { // java.util.Date, java.sql.Date, java.sql.Time, java.sql.Timestamp

            final SimpleDateFormat dateFormat =
                    new SimpleDateFormat(pattern, locale);

            result = dateFormat.format(value);
        }
        else {
            result = value.toString();
        }

        return result;
    }","  public void test0()  throws Throwable  {
      StringLocaleConverter stringLocaleConverter0 = new StringLocaleConverter();
      MockDate mockDate0 = new MockDate();
      Object object0 = stringLocaleConverter0.parse(mockDate0, """");
}"
1346,"    public StringLocaleConverter() {

        this(false);
    }","  public void test1()  throws Throwable  {
      Locale locale0 = Locale.forLanguageTag("""");
      StringLocaleConverter stringLocaleConverter0 = new StringLocaleConverter((Object) null, locale0, true);
  }"
1347,"    public StringLocaleConverter() {

        this(false);
    }","  public void test2()  throws Throwable  {
      Locale locale0 = Locale.CANADA_FRENCH;
      StringLocaleConverter stringLocaleConverter0 = new StringLocaleConverter((Object) locale0, true);
  }"
1348,"    public StringLocaleConverter() {

        this(false);
    }","  public void test3()  throws Throwable  {
      Locale locale0 = Locale.PRC;
      StringLocaleConverter stringLocaleConverter0 = new StringLocaleConverter(locale0, ""org.apache.commons.beanutils.locale.BaseLocaleConverter"", true);
  }"
1349,"    public StringLocaleConverter() {

        this(false);
    }","  public void test4()  throws Throwable  {
      Locale locale0 = Locale.GERMANY;
      StringLocaleConverter stringLocaleConverter0 = new StringLocaleConverter(locale0, locale0, ""q[$k"", false);
  }"
1350,"    protected Object parse(final Object value, final String pattern) throws ParseException {

        String result = null;

        if ((value instanceof Integer) ||
                (value instanceof Long) ||
                (value instanceof BigInteger) ||
                (value instanceof Byte) ||
                (value instanceof Short)) {

            result = getDecimalFormat(locale, pattern).format(((Number) value).longValue());
        }
        else if ((value instanceof Double) ||
                (value instanceof BigDecimal) ||
                (value instanceof Float)) {

            result = getDecimalFormat(locale, pattern).format(((Number) value).doubleValue());
        }
        else if (value instanceof Date) { // java.util.Date, java.sql.Date, java.sql.Time, java.sql.Timestamp

            final SimpleDateFormat dateFormat =
                    new SimpleDateFormat(pattern, locale);

            result = dateFormat.format(value);
        }
        else {
            result = value.toString();
        }

        return result;
    }","  public void test5()  throws Throwable  {
      StringLocaleConverter stringLocaleConverter0 = new StringLocaleConverter();
      MockDate mockDate0 = new MockDate();
      // Undeclared exception!
      try { 
        stringLocaleConverter0.parse(mockDate0, ""(0?!=`Cn|1[MZ)"");
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern character 'C'
         //
         verifyException(""java.text.SimpleDateFormat"", e);
      }
  }"
1351,"    protected Object parse(final Object value, final String pattern) throws ParseException {

        String result = null;

        if ((value instanceof Integer) ||
                (value instanceof Long) ||
                (value instanceof BigInteger) ||
                (value instanceof Byte) ||
                (value instanceof Short)) {

            result = getDecimalFormat(locale, pattern).format(((Number) value).longValue());
        }
        else if ((value instanceof Double) ||
                (value instanceof BigDecimal) ||
                (value instanceof Float)) {

            result = getDecimalFormat(locale, pattern).format(((Number) value).doubleValue());
        }
        else if (value instanceof Date) { // java.util.Date, java.sql.Date, java.sql.Time, java.sql.Timestamp

            final SimpleDateFormat dateFormat =
                    new SimpleDateFormat(pattern, locale);

            result = dateFormat.format(value);
        }
        else {
            result = value.toString();
        }

        return result;
    }","  public void test6()  throws Throwable  {
      StringLocaleConverter stringLocaleConverter0 = new StringLocaleConverter(true);
      Object object0 = stringLocaleConverter0.parse(stringLocaleConverter0, """");
}"
1352,"    protected Object parse(final Object value, final String pattern) throws ParseException {

        String result = null;

        if ((value instanceof Integer) ||
                (value instanceof Long) ||
                (value instanceof BigInteger) ||
                (value instanceof Byte) ||
                (value instanceof Short)) {

            result = getDecimalFormat(locale, pattern).format(((Number) value).longValue());
        }
        else if ((value instanceof Double) ||
                (value instanceof BigDecimal) ||
                (value instanceof Float)) {

            result = getDecimalFormat(locale, pattern).format(((Number) value).doubleValue());
        }
        else if (value instanceof Date) { // java.util.Date, java.sql.Date, java.sql.Time, java.sql.Timestamp

            final SimpleDateFormat dateFormat =
                    new SimpleDateFormat(pattern, locale);

            result = dateFormat.format(value);
        }
        else {
            result = value.toString();
        }

        return result;
    }","  public void test7()  throws Throwable  {
      StringLocaleConverter stringLocaleConverter0 = new StringLocaleConverter();
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      Object object0 = stringLocaleConverter0.parse(bigDecimal0, ""VXn^m@BF/ld=./:"");
}"
1353,"    public Object convert(final Object value) {
        return convert(value, null);
    }","  public void test8()  throws Throwable  {
      Short short0 = new Short((short) (-1839));
      Locale locale0 = Locale.ROOT;
      StringLocaleConverter stringLocaleConverter0 = new StringLocaleConverter(short0, locale0, ""J&|DVXt*$"");
      Class<String> class0 = String.class;
      String string0 = stringLocaleConverter0.convert(class0, (Object) short0);
}"
1354,"    protected Object parse(final Object value, final String pattern) throws ParseException {

        String result = null;

        if ((value instanceof Integer) ||
                (value instanceof Long) ||
                (value instanceof BigInteger) ||
                (value instanceof Byte) ||
                (value instanceof Short)) {

            result = getDecimalFormat(locale, pattern).format(((Number) value).longValue());
        }
        else if ((value instanceof Double) ||
                (value instanceof BigDecimal) ||
                (value instanceof Float)) {

            result = getDecimalFormat(locale, pattern).format(((Number) value).doubleValue());
        }
        else if (value instanceof Date) { // java.util.Date, java.sql.Date, java.sql.Time, java.sql.Timestamp

            final SimpleDateFormat dateFormat =
                    new SimpleDateFormat(pattern, locale);

            result = dateFormat.format(value);
        }
        else {
            result = value.toString();
        }

        return result;
    }","  public void test9()  throws Throwable  {
      Locale locale0 = Locale.FRENCH;
      StringLocaleConverter stringLocaleConverter0 = new StringLocaleConverter(locale0, true);
      BigInteger bigInteger0 = BigInteger.TEN;
      Object object0 = stringLocaleConverter0.parse(bigInteger0, ""-Q32"");
}"
1355,"    protected Object parse(final Object value, final String pattern) throws ParseException {

        String result = null;

        if ((value instanceof Integer) ||
                (value instanceof Long) ||
                (value instanceof BigInteger) ||
                (value instanceof Byte) ||
                (value instanceof Short)) {

            result = getDecimalFormat(locale, pattern).format(((Number) value).longValue());
        }
        else if ((value instanceof Double) ||
                (value instanceof BigDecimal) ||
                (value instanceof Float)) {

            result = getDecimalFormat(locale, pattern).format(((Number) value).doubleValue());
        }
        else if (value instanceof Date) { // java.util.Date, java.sql.Date, java.sql.Time, java.sql.Timestamp

            final SimpleDateFormat dateFormat =
                    new SimpleDateFormat(pattern, locale);

            result = dateFormat.format(value);
        }
        else {
            result = value.toString();
        }

        return result;
    }","  public void test10()  throws Throwable  {
      Locale locale0 = Locale.FRENCH;
      StringLocaleConverter stringLocaleConverter0 = new StringLocaleConverter(locale0, true);
      Float float0 = new Float((double) (-32));
      Object object0 = stringLocaleConverter0.parse(float0, ""Q"");
}"
1356,"    protected Object parse(final Object value, final String pattern) throws ParseException {

        String result = null;

        if ((value instanceof Integer) ||
                (value instanceof Long) ||
                (value instanceof BigInteger) ||
                (value instanceof Byte) ||
                (value instanceof Short)) {

            result = getDecimalFormat(locale, pattern).format(((Number) value).longValue());
        }
        else if ((value instanceof Double) ||
                (value instanceof BigDecimal) ||
                (value instanceof Float)) {

            result = getDecimalFormat(locale, pattern).format(((Number) value).doubleValue());
        }
        else if (value instanceof Date) { // java.util.Date, java.sql.Date, java.sql.Time, java.sql.Timestamp

            final SimpleDateFormat dateFormat =
                    new SimpleDateFormat(pattern, locale);

            result = dateFormat.format(value);
        }
        else {
            result = value.toString();
        }

        return result;
    }","  public void test11()  throws Throwable  {
      Integer integer0 = new Integer((-32));
      Locale locale0 = Locale.FRENCH;
      StringLocaleConverter stringLocaleConverter0 = new StringLocaleConverter(locale0, true);
      Object object0 = stringLocaleConverter0.parse(integer0, ""Q"");
}"
1357,"    protected Object parse(final Object value, final String pattern) throws ParseException {

        String result = null;

        if ((value instanceof Integer) ||
                (value instanceof Long) ||
                (value instanceof BigInteger) ||
                (value instanceof Byte) ||
                (value instanceof Short)) {

            result = getDecimalFormat(locale, pattern).format(((Number) value).longValue());
        }
        else if ((value instanceof Double) ||
                (value instanceof BigDecimal) ||
                (value instanceof Float)) {

            result = getDecimalFormat(locale, pattern).format(((Number) value).doubleValue());
        }
        else if (value instanceof Date) { // java.util.Date, java.sql.Date, java.sql.Time, java.sql.Timestamp

            final SimpleDateFormat dateFormat =
                    new SimpleDateFormat(pattern, locale);

            result = dateFormat.format(value);
        }
        else {
            result = value.toString();
        }

        return result;
    }","  public void test12()  throws Throwable  {
      StringLocaleConverter stringLocaleConverter0 = new StringLocaleConverter();
      Byte byte0 = new Byte((byte)27);
      Object object0 = stringLocaleConverter0.parse(byte0, ""yEuxpcbY59cJfnh>00"");
}"
1358,"    public StringLocaleConverter() {

        this(false);
    }","  public void test13()  throws Throwable  {
      Locale locale0 = Locale.FRENCH;
      StringLocaleConverter stringLocaleConverter0 = new StringLocaleConverter(locale0, """");
  }"
1359,"    public StringLocaleConverter() {

        this(false);
    }","  public void test14()  throws Throwable  {
      StringLocaleConverter stringLocaleConverter0 = new StringLocaleConverter(true);
      Locale locale0 = new Locale("""", """");
      StringLocaleConverter stringLocaleConverter1 = new StringLocaleConverter(stringLocaleConverter0, locale0);
}"
1360,"    public StringLocaleConverter() {

        this(false);
    }","  public void test15()  throws Throwable  {
      Locale locale0 = Locale.FRENCH;
      StringLocaleConverter stringLocaleConverter0 = new StringLocaleConverter(locale0);
  }"
1361,"    protected Object parse(final Object value, final String pattern) throws ParseException {

        String result = null;

        if ((value instanceof Integer) ||
                (value instanceof Long) ||
                (value instanceof BigInteger) ||
                (value instanceof Byte) ||
                (value instanceof Short)) {

            result = getDecimalFormat(locale, pattern).format(((Number) value).longValue());
        }
        else if ((value instanceof Double) ||
                (value instanceof BigDecimal) ||
                (value instanceof Float)) {

            result = getDecimalFormat(locale, pattern).format(((Number) value).doubleValue());
        }
        else if (value instanceof Date) { // java.util.Date, java.sql.Date, java.sql.Time, java.sql.Timestamp

            final SimpleDateFormat dateFormat =
                    new SimpleDateFormat(pattern, locale);

            result = dateFormat.format(value);
        }
        else {
            result = value.toString();
        }

        return result;
    }","  public void test16()  throws Throwable  {
      Locale locale0 = Locale.FRENCH;
      StringLocaleConverter stringLocaleConverter0 = new StringLocaleConverter(locale0, true);
      Long long0 = new Long((-32));
      Object object0 = stringLocaleConverter0.parse(long0, ""-Q32"");
}"
1362,"    protected Object parse(final Object value, final String pattern) throws ParseException {

        String result = null;

        if ((value instanceof Integer) ||
                (value instanceof Long) ||
                (value instanceof BigInteger) ||
                (value instanceof Byte) ||
                (value instanceof Short)) {

            result = getDecimalFormat(locale, pattern).format(((Number) value).longValue());
        }
        else if ((value instanceof Double) ||
                (value instanceof BigDecimal) ||
                (value instanceof Float)) {

            result = getDecimalFormat(locale, pattern).format(((Number) value).doubleValue());
        }
        else if (value instanceof Date) { // java.util.Date, java.sql.Date, java.sql.Time, java.sql.Timestamp

            final SimpleDateFormat dateFormat =
                    new SimpleDateFormat(pattern, locale);

            result = dateFormat.format(value);
        }
        else {
            result = value.toString();
        }

        return result;
    }","  public void test17()  throws Throwable  {
      MockDate mockDate0 = new MockDate(2635, 1, 250, 1, 250, 2635);
      Locale locale0 = Locale.US;
      StringLocaleConverter stringLocaleConverter0 = new StringLocaleConverter(mockDate0, locale0, (String) null);
      // Undeclared exception!
      try { 
        stringLocaleConverter0.parse((Object) null, (String) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.evosuite.runtime.System"", e);
      }
  }"
1363,"    protected Object parse(final Object value, final String pattern) throws ParseException {

        String result = null;

        if ((value instanceof Integer) ||
                (value instanceof Long) ||
                (value instanceof BigInteger) ||
                (value instanceof Byte) ||
                (value instanceof Short)) {

            result = getDecimalFormat(locale, pattern).format(((Number) value).longValue());
        }
        else if ((value instanceof Double) ||
                (value instanceof BigDecimal) ||
                (value instanceof Float)) {

            result = getDecimalFormat(locale, pattern).format(((Number) value).doubleValue());
        }
        else if (value instanceof Date) { // java.util.Date, java.sql.Date, java.sql.Time, java.sql.Timestamp

            final SimpleDateFormat dateFormat =
                    new SimpleDateFormat(pattern, locale);

            result = dateFormat.format(value);
        }
        else {
            result = value.toString();
        }

        return result;
    }","  public void test18()  throws Throwable  {
      Double double0 = new Double((-2350.3406261772902));
      StringLocaleConverter stringLocaleConverter0 = new StringLocaleConverter(double0);
      Object object0 = stringLocaleConverter0.parse(double0, (String) null);
}"
1364,"    protected Object parse(final Object value, final String pattern) throws ParseException {

        String result = null;

        if ((value instanceof Integer) ||
                (value instanceof Long) ||
                (value instanceof BigInteger) ||
                (value instanceof Byte) ||
                (value instanceof Short)) {

            result = getDecimalFormat(locale, pattern).format(((Number) value).longValue());
        }
        else if ((value instanceof Double) ||
                (value instanceof BigDecimal) ||
                (value instanceof Float)) {

            result = getDecimalFormat(locale, pattern).format(((Number) value).doubleValue());
        }
        else if (value instanceof Date) { // java.util.Date, java.sql.Date, java.sql.Time, java.sql.Timestamp

            final SimpleDateFormat dateFormat =
                    new SimpleDateFormat(pattern, locale);

            result = dateFormat.format(value);
        }
        else {
            result = value.toString();
        }

        return result;
    }","  public void test19()  throws Throwable  {
      Double double0 = new Double((-2350.3406261772902));
      StringLocaleConverter stringLocaleConverter0 = new StringLocaleConverter(double0);
      Object object0 = stringLocaleConverter0.parse(double0, (String) null);
}"
1365,"    protected Object parse(final Object value, final String pattern) throws ParseException {

        return new Date(((java.util.Date) super.parse(value, pattern)).getTime());
    }","  public void test0()  throws Throwable  {
      SqlDateLocaleConverter sqlDateLocaleConverter0 = new SqlDateLocaleConverter((Object) null);
      // Undeclared exception!
      try { 
        sqlDateLocaleConverter0.parse((Object) null, """");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.evosuite.runtime.System"", e);
      }
  }"
1366,"    public SqlDateLocaleConverter() {

        this(false);
    }","  public void test1()  throws Throwable  {
      Object object0 = new Object();
      Locale locale0 = Locale.PRC;
      SqlDateLocaleConverter sqlDateLocaleConverter0 = new SqlDateLocaleConverter(object0, locale0, ""Q/Nc*5)6Rq"", true);
}"
1367,"    public SqlDateLocaleConverter() {

        this(false);
    }","  public void test2()  throws Throwable  {
      SqlDateLocaleConverter sqlDateLocaleConverter0 = new SqlDateLocaleConverter(false);
}"
1368,"    protected Object parse(final Object value, final String pattern) throws ParseException {

        return new Date(((java.util.Date) super.parse(value, pattern)).getTime());
    }","  public void test3()  throws Throwable  {
      Locale locale0 = Locale.CANADA_FRENCH;
      SqlDateLocaleConverter sqlDateLocaleConverter0 = new SqlDateLocaleConverter(locale0, false);
      // Undeclared exception!
      try { 
        sqlDateLocaleConverter0.parse(locale0, ""org.apache.commons.beanutils.ConversionException"");
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern character 'o'
         //
         verifyException(""java.text.SimpleDateFormat"", e);
      }
  }"
1369,"    public SqlDateLocaleConverter() {

        this(false);
    }","  public void test4()  throws Throwable  {
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      SqlDateLocaleConverter sqlDateLocaleConverter0 = new SqlDateLocaleConverter((Object) locale0, false);
}"
1370,"    public SqlDateLocaleConverter() {

        this(false);
    }","  public void test5()  throws Throwable  {
      Object object0 = new Object();
      Locale locale0 = Locale.GERMAN;
      SqlDateLocaleConverter sqlDateLocaleConverter0 = new SqlDateLocaleConverter(object0, locale0, false);
}"
1371,"    public SqlDateLocaleConverter() {

        this(false);
    }","  public void test6()  throws Throwable  {
      Locale locale0 = Locale.GERMAN;
      SqlDateLocaleConverter sqlDateLocaleConverter0 = new SqlDateLocaleConverter(locale0, ""|o"", false);
}"
1372,"    public SqlDateLocaleConverter() {

        this(false);
    }","  public void test7()  throws Throwable  {
      SqlDateLocaleConverter sqlDateLocaleConverter0 = new SqlDateLocaleConverter((Locale) null, (String) null);
}"
1373,"    public SqlDateLocaleConverter() {

        this(false);
    }","  public void test8()  throws Throwable  {
      Object object0 = new Object();
      Locale locale0 = new Locale("""");
      SqlDateLocaleConverter sqlDateLocaleConverter0 = new SqlDateLocaleConverter(object0, locale0, """");
}"
1374,"    public SqlDateLocaleConverter() {

        this(false);
    }","  public void test9()  throws Throwable  {
      Object object0 = new Object();
      Locale locale0 = Locale.TAIWAN;
      SqlDateLocaleConverter sqlDateLocaleConverter0 = new SqlDateLocaleConverter(object0, locale0);
}"
1375,"    protected Object parse(final Object value, final String pattern) throws ParseException {

        return new Date(((java.util.Date) super.parse(value, pattern)).getTime());
    }","  public void test10()  throws Throwable  {
      SqlDateLocaleConverter sqlDateLocaleConverter0 = new SqlDateLocaleConverter();
      MockDate mockDate0 = new MockDate();
      Object object0 = sqlDateLocaleConverter0.parse(mockDate0, ""!bb)<}H@|^kF]_Z=%D"");
}"
1376,"    public SqlDateLocaleConverter() {

        this(false);
    }","  public void test11()  throws Throwable  {
      Locale locale0 = Locale.GERMANY;
      SqlDateLocaleConverter sqlDateLocaleConverter0 = new SqlDateLocaleConverter(locale0);
}"
1377,"    protected Object parse(final Object value, final String pattern) throws ParseException {

        return new Date(((java.util.Date) super.parse(value, pattern)).getTime());
    }","  public void test12()  throws Throwable  {
      Object object0 = new Object();
      SqlDateLocaleConverter sqlDateLocaleConverter0 = new SqlDateLocaleConverter(object0);
      // Undeclared exception!
      try { 
        sqlDateLocaleConverter0.parse(object0, (String) null);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // Error parsing date 'java.lang.Object@7f8cb607' at position=0
         //
         verifyException(""org.apache.commons.beanutils.locale.converters.DateLocaleConverter"", e);
      }
  }"
1378,"    protected Object parse(final Object value, final String pattern) throws ParseException {

        final Object result = super.parse(value, pattern);

        if (result == null || result instanceof BigInteger) {
            return result;
        }

        if (result instanceof Number) {
            return BigInteger.valueOf(((Number)result).longValue());
        }

        try {
            return new BigInteger(result.toString());
        }
        catch (final NumberFormatException ex) {
            throw new ConversionException(""Suplied number is not of type BigInteger: "" + result);
        }

    }","  public void test0()  throws Throwable  {
      BigIntegerLocaleConverter bigIntegerLocaleConverter0 = new BigIntegerLocaleConverter((Object) null, true);
      // Undeclared exception!
      try { 
        bigIntegerLocaleConverter0.parse((Object) null, """");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.text.DecimalFormat"", e);
      }
  }"
1379,"    protected Object parse(final Object value, final String pattern) throws ParseException {

        final Object result = super.parse(value, pattern);

        if (result == null || result instanceof BigInteger) {
            return result;
        }

        if (result instanceof Number) {
            return BigInteger.valueOf(((Number)result).longValue());
        }

        try {
            return new BigInteger(result.toString());
        }
        catch (final NumberFormatException ex) {
            throw new ConversionException(""Suplied number is not of type BigInteger: "" + result);
        }

    }","  public void test1()  throws Throwable  {
      Locale locale0 = Locale.FRANCE;
      BigIntegerLocaleConverter bigIntegerLocaleConverter0 = new BigIntegerLocaleConverter(locale0, "")awgu8T<w:kk>:Ls-w"");
      // Undeclared exception!
      try { 
        bigIntegerLocaleConverter0.parse(locale0, ""QBk<A@F"");
        fail(""Expecting exception: ClassCastException"");
      } catch(ClassCastException e) {
         //
         // java.util.Locale cannot be cast to java.lang.String
         //
         verifyException(""org.apache.commons.beanutils.locale.converters.DecimalLocaleConverter"", e);
      }
  }"
1380,"    public BigIntegerLocaleConverter() {

        this(false);
    }","  public void test2()  throws Throwable  {
      Object object0 = new Object();
      Locale locale0 = Locale.CANADA;
      BigIntegerLocaleConverter bigIntegerLocaleConverter0 = new BigIntegerLocaleConverter(object0, locale0, true);
  }"
1381,"    public BigIntegerLocaleConverter() {

        this(false);
    }","  public void test3()  throws Throwable  {
      Locale locale0 = Locale.FRANCE;
      BigIntegerLocaleConverter bigIntegerLocaleConverter0 = new BigIntegerLocaleConverter(locale0, """", false);
  }"
1382,"    public BigIntegerLocaleConverter() {

        this(false);
    }","  public void test4()  throws Throwable  {
      Object object0 = new Object();
      Locale locale0 = Locale.JAPAN;
      BigIntegerLocaleConverter bigIntegerLocaleConverter0 = new BigIntegerLocaleConverter(object0, locale0, ""oYyQC)/K^BI#,`RS"", false);
  }"
1383,"    public BigIntegerLocaleConverter() {

        this(false);
    }","  public void test5()  throws Throwable  {
      Locale locale0 = Locale.forLanguageTag("""");
      BigIntegerLocaleConverter bigIntegerLocaleConverter0 = new BigIntegerLocaleConverter(locale0, true);
  }"
1384,"    protected Object parse(final Object value, final String pattern) throws ParseException {

        final Object result = super.parse(value, pattern);

        if (result == null || result instanceof BigInteger) {
            return result;
        }

        if (result instanceof Number) {
            return BigInteger.valueOf(((Number)result).longValue());
        }

        try {
            return new BigInteger(result.toString());
        }
        catch (final NumberFormatException ex) {
            throw new ConversionException(""Suplied number is not of type BigInteger: "" + result);
        }

    }","  public void test6()  throws Throwable  {
      BigIntegerLocaleConverter bigIntegerLocaleConverter0 = new BigIntegerLocaleConverter(false);
      try { 
        bigIntegerLocaleConverter0.parse("""", """");
        fail(""Expecting exception: ParseException"");
      } catch(ParseException e) {
         //
         // Unparseable number: \""\""
         //
         verifyException(""java.text.NumberFormat"", e);
      }
  }"
1385,"    protected Object parse(final Object value, final String pattern) throws ParseException {

        final Object result = super.parse(value, pattern);

        if (result == null || result instanceof BigInteger) {
            return result;
        }

        if (result instanceof Number) {
            return BigInteger.valueOf(((Number)result).longValue());
        }

        try {
            return new BigInteger(result.toString());
        }
        catch (final NumberFormatException ex) {
            throw new ConversionException(""Suplied number is not of type BigInteger: "" + result);
        }

    }","  public void test7()  throws Throwable  {
      Byte byte0 = new Byte((byte)103);
      BigIntegerLocaleConverter bigIntegerLocaleConverter0 = new BigIntegerLocaleConverter(byte0);
      Object object0 = bigIntegerLocaleConverter0.parse(byte0, ""u/O.<p>mQzz"");
      Object object1 = bigIntegerLocaleConverter0.parse(object0, ""u/O.<p>mQzz"");
}"
1386,"    public BigIntegerLocaleConverter() {

        this(false);
    }","  public void test8()  throws Throwable  {
      Locale locale0 = Locale.ITALIAN;
      BigIntegerLocaleConverter bigIntegerLocaleConverter0 = new BigIntegerLocaleConverter(locale0);
  }"
1387,"    protected Object parse(final Object value, final String pattern) throws ParseException {

        final Object result = super.parse(value, pattern);

        if (result == null || result instanceof BigInteger) {
            return result;
        }

        if (result instanceof Number) {
            return BigInteger.valueOf(((Number)result).longValue());
        }

        try {
            return new BigInteger(result.toString());
        }
        catch (final NumberFormatException ex) {
            throw new ConversionException(""Suplied number is not of type BigInteger: "" + result);
        }

    }","  public void test9()  throws Throwable  {
      BigIntegerLocaleConverter bigIntegerLocaleConverter0 = new BigIntegerLocaleConverter((Object) null);
      // Undeclared exception!
      try { 
        bigIntegerLocaleConverter0.parse((Object) null, ""85p?eZ$vMH?'Pj8j"");
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Malformed pattern \""85p?eZ$vMH?'Pj8j\""
         //
         verifyException(""java.text.DecimalFormat"", e);
      }
  }"
1388,"    public BigIntegerLocaleConverter() {

        this(false);
    }","  public void test10()  throws Throwable  {
      Byte byte0 = new Byte((byte)84);
      Locale locale0 = Locale.JAPANESE;
      BigIntegerLocaleConverter bigIntegerLocaleConverter0 = new BigIntegerLocaleConverter(byte0, locale0);
  }"
1389,"    public BigIntegerLocaleConverter() {

        this(false);
    }","  public void test11()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Locale locale0 = Locale.GERMAN;
      BigIntegerLocaleConverter bigIntegerLocaleConverter0 = new BigIntegerLocaleConverter(linkedList0, locale0, """");
  }"
1390,"    public BigIntegerLocaleConverter() {

        this(false);
    }","  public void test12()  throws Throwable  {
      BigIntegerLocaleConverter bigIntegerLocaleConverter0 = new BigIntegerLocaleConverter();
      BigInteger bigInteger0 = (BigInteger)bigIntegerLocaleConverter0.convert((Object) ""8C>rDl4=$1Z/gmg}0Gz"", ""8C>rDl4=$1Z/gmg}0Gz"");
}"
1391,"    protected Object parse(final Object value, final String pattern) throws ParseException {
        final Number result = (Number) super.parse(value, pattern);
        if (result instanceof Long) {
            return new Double(result.doubleValue());
        } else {
            return (result);
        }
    }","  public void test0()  throws Throwable  {
      Long long0 = new Long(1656L);
      Locale locale0 = Locale.CANADA_FRENCH;
      DoubleLocaleConverter doubleLocaleConverter0 = new DoubleLocaleConverter(long0, locale0);
      // Undeclared exception!
      try { 
        doubleLocaleConverter0.parse((Object) null, ""ti#P9#"");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.text.DecimalFormat"", e);
      }
  }"
1392,"    protected Object parse(final Object value, final String pattern) throws ParseException {
        final Number result = (Number) super.parse(value, pattern);
        if (result instanceof Long) {
            return new Double(result.doubleValue());
        } else {
            return (result);
        }
    }","  public void test1()  throws Throwable  {
      Double double0 = new Double(3993.9021);
      Locale locale0 = Locale.GERMAN;
      DoubleLocaleConverter doubleLocaleConverter0 = new DoubleLocaleConverter(double0, locale0);
      // Undeclared exception!
      try { 
        doubleLocaleConverter0.parse(locale0, ""O3p`)"");
        fail(""Expecting exception: ClassCastException"");
      } catch(ClassCastException e) {
         //
         // java.util.Locale cannot be cast to java.lang.String
         //
         verifyException(""org.apache.commons.beanutils.locale.converters.DecimalLocaleConverter"", e);
      }
  }"
1393,"    protected Object parse(final Object value, final String pattern) throws ParseException {
        final Number result = (Number) super.parse(value, pattern);
        if (result instanceof Long) {
            return new Double(result.doubleValue());
        } else {
            return (result);
        }
    }","  public void test2()  throws Throwable  {
      DoubleLocaleConverter doubleLocaleConverter0 = new DoubleLocaleConverter(""'SLQ"", (Locale) null, """", true);
      try { 
        doubleLocaleConverter0.parse("""", """");
        fail(""Expecting exception: ParseException"");
      } catch(ParseException e) {
         //
         // Unparseable number: \""\""
         //
         verifyException(""java.text.NumberFormat"", e);
      }
  }"
1394,"    public DoubleLocaleConverter() {

        this(false);
    }","  public void test3()  throws Throwable  {
      Object object0 = new Object();
      DoubleLocaleConverter doubleLocaleConverter0 = new DoubleLocaleConverter(object0, false);
  }"
1395,"    public DoubleLocaleConverter() {

        this(false);
    }","  public void test4()  throws Throwable  {
      Locale locale0 = Locale.GERMANY;
      DoubleLocaleConverter doubleLocaleConverter0 = new DoubleLocaleConverter(locale0, ""M"", true);
  }"
1396,"    public DoubleLocaleConverter() {

        this(false);
    }","  public void test5()  throws Throwable  {
      Short short0 = new Short((short) (-1));
      Locale locale0 = Locale.ENGLISH;
      DoubleLocaleConverter doubleLocaleConverter0 = new DoubleLocaleConverter(short0, locale0, false);
  }"
1397,"    public DoubleLocaleConverter() {

        this(false);
    }","  public void test6()  throws Throwable  {
      Locale locale0 = Locale.PRC;
      DoubleLocaleConverter doubleLocaleConverter0 = new DoubleLocaleConverter(locale0, true);
  }"
1398,"    protected Object parse(final Object value, final String pattern) throws ParseException {
        final Number result = (Number) super.parse(value, pattern);
        if (result instanceof Long) {
            return new Double(result.doubleValue());
        } else {
            return (result);
        }
    }","  public void test7()  throws Throwable  {
      DoubleLocaleConverter doubleLocaleConverter0 = new DoubleLocaleConverter(false);
      // Undeclared exception!
      try { 
        doubleLocaleConverter0.parse((Object) null, ""org.apache.commons.beanutils.locale.converters.DecimalLocaleConverter"");
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Multiple decimal separators in pattern \""org.apache.commons.beanutils.locale.converters.DecimalLocaleConverter\""
         //
         verifyException(""java.text.DecimalFormat"", e);
      }
  }"
1399,"    protected Object parse(final Object value, final String pattern) throws ParseException {
        final Number result = (Number) super.parse(value, pattern);
        if (result instanceof Long) {
            return new Double(result.doubleValue());
        } else {
            return (result);
        }
    }","  public void test8()  throws Throwable  {
      Locale locale0 = Locale.ITALY;
      DoubleLocaleConverter doubleLocaleConverter0 = new DoubleLocaleConverter(locale0);
      Object object0 = doubleLocaleConverter0.parse(""2j:?9i%d+MlobE"", """");
}"
1400,"    public DoubleLocaleConverter() {

        this(false);
    }","  public void test9()  throws Throwable  {
      DoubleLocaleConverter doubleLocaleConverter0 = new DoubleLocaleConverter();
  }"
1401,"    public DoubleLocaleConverter() {

        this(false);
    }","  public void test10()  throws Throwable  {
      Locale locale0 = Locale.GERMAN;
      DoubleLocaleConverter doubleLocaleConverter0 = new DoubleLocaleConverter(locale0, locale0, ""a.^YG"");
  }"
1402,"    public DoubleLocaleConverter() {

        this(false);
    }","  public void test11()  throws Throwable  {
      Object object0 = new Object();
      DoubleLocaleConverter doubleLocaleConverter0 = new DoubleLocaleConverter(object0);
  }"
1403,"    public DoubleLocaleConverter() {

        this(false);
    }","  public void test12()  throws Throwable  {
      Locale locale0 = Locale.JAPAN;
      DoubleLocaleConverter doubleLocaleConverter0 = new DoubleLocaleConverter(locale0, ""orRapach.commons.beanutils.locale-converters.DobleLcaleConerter"");
  }"
1404,"    protected Object parse(final Object value, final String pattern) throws ParseException {
        final Number result = (Number) super.parse(value, pattern);
        if (result instanceof Long) {
            return new Double(result.doubleValue());
        } else {
            return (result);
        }
    }","  public void test13()  throws Throwable  {
      Double double0 = new Double(3993.9021);
      Locale locale0 = Locale.GERMAN;
      DoubleLocaleConverter doubleLocaleConverter0 = new DoubleLocaleConverter(double0, locale0);
      Object object0 = doubleLocaleConverter0.parse(double0, """");
}"
1405,"    protected Object parse(final Object value, final String pattern) throws ParseException {

        final Object result = super.parse(value, pattern);

        if (result == null || result instanceof Long) {
            return result;
        }

        return new Long(((Number)result).longValue());

    }","  public void test0()  throws Throwable  {
      LongLocaleConverter longLocaleConverter0 = new LongLocaleConverter();
      Object object0 = longLocaleConverter0.parse(""18446744073709551615"", """");
}"
1406,"    protected Object parse(final Object value, final String pattern) throws ParseException {

        final Object result = super.parse(value, pattern);

        if (result == null || result instanceof Long) {
            return result;
        }

        return new Long(((Number)result).longValue());

    }","  public void test1()  throws Throwable  {
      Locale locale0 = Locale.US;
      LongLocaleConverter longLocaleConverter0 = new LongLocaleConverter(locale0, """", true);
      Object object0 = longLocaleConverter0.parse(""3~|"", (String) null);
}"
1407,"    protected Object parse(final Object value, final String pattern) throws ParseException {

        final Object result = super.parse(value, pattern);

        if (result == null || result instanceof Long) {
            return result;
        }

        return new Long(((Number)result).longValue());

    }","  public void test2()  throws Throwable  {
      Locale locale0 = Locale.PRC;
      LongLocaleConverter longLocaleConverter0 = new LongLocaleConverter(locale0, ""p Pp"");
      // Undeclared exception!
      try { 
        longLocaleConverter0.parse((Object) null, ""p Pp"");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.text.DecimalFormat"", e);
      }
  }"
1408,"    public LongLocaleConverter() {

        this(false);
    }","  public void test3()  throws Throwable  {
      Object object0 = new Object();
      LongLocaleConverter longLocaleConverter0 = new LongLocaleConverter(object0, true);
  }"
1409,"    protected Object parse(final Object value, final String pattern) throws ParseException {

        final Object result = super.parse(value, pattern);

        if (result == null || result instanceof Long) {
            return result;
        }

        return new Long(((Number)result).longValue());

    }","  public void test4()  throws Throwable  {
      Locale locale0 = Locale.ROOT;
      LongLocaleConverter longLocaleConverter0 = new LongLocaleConverter(locale0, true);
      // Undeclared exception!
      try { 
        longLocaleConverter0.parse(locale0, ""org.apache.commons.beanutils.ConversionException"");
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Multiple decimal separators in pattern \""org.apache.commons.beanutils.ConversionException\""
         //
         verifyException(""java.text.DecimalFormat"", e);
      }
  }"
1410,"    public LongLocaleConverter() {

        this(false);
    }","  public void test5()  throws Throwable  {
      Locale locale0 = Locale.FRENCH;
      LongLocaleConverter longLocaleConverter0 = new LongLocaleConverter((Object) null, locale0, ""cPskSyx0gs"", true);
  }"
1411,"    public LongLocaleConverter() {

        this(false);
    }","  public void test6()  throws Throwable  {
      Object object0 = new Object();
      Locale locale0 = Locale.forLanguageTag(""org.apache.commons.beanutils.locale.converters.LongLocaleConverter"");
      LongLocaleConverter longLocaleConverter0 = new LongLocaleConverter(object0, locale0, true);
  }"
1412,"    protected Object parse(final Object value, final String pattern) throws ParseException {

        final Object result = super.parse(value, pattern);

        if (result == null || result instanceof Long) {
            return result;
        }

        return new Long(((Number)result).longValue());

    }","  public void test7()  throws Throwable  {
      Locale locale0 = Locale.ROOT;
      LongLocaleConverter longLocaleConverter0 = new LongLocaleConverter(locale0, ""org.apache.commons.beanutils.locale.converters.LongLocaleConverter"", true);
      try { 
        longLocaleConverter0.parse(""org.apache.commons.beanutils.locale.converters.LongLocaleConverter"", """");
        fail(""Expecting exception: ParseException"");
      } catch(ParseException e) {
         //
         // Unparseable number: \""org.apache.commons.beanutils.locale.converters.LongLocaleConverter\""
         //
         verifyException(""java.text.NumberFormat"", e);
      }
  }"
1413,"    public LongLocaleConverter() {

        this(false);
    }","  public void test8()  throws Throwable  {
      LongLocaleConverter longLocaleConverter0 = new LongLocaleConverter(true);
  }"
1414,"    public LongLocaleConverter() {

        this(false);
    }","  public void test9()  throws Throwable  {
      Short short0 = new Short((short) (-2195));
      Locale locale0 = Locale.CANADA;
      LongLocaleConverter longLocaleConverter0 = new LongLocaleConverter(short0, locale0);
  }"
1415,"    public LongLocaleConverter() {

        this(false);
    }","  public void test10()  throws Throwable  {
      Locale locale0 = Locale.ITALY;
      LongLocaleConverter longLocaleConverter0 = new LongLocaleConverter(locale0);
  }"
1416,"    public LongLocaleConverter() {

        this(false);
    }","  public void test11()  throws Throwable  {
      Class<String> class0 = String.class;
      LongLocaleConverter longLocaleConverter0 = new LongLocaleConverter(class0);
      Byte byte0 = new Byte((byte) (-68));
      Object object0 = longLocaleConverter0.convert((Object) byte0);
}"
1417,"    public LongLocaleConverter() {

        this(false);
    }","  public void test12()  throws Throwable  {
      Locale locale0 = new Locale("""", """", """");
      LongLocaleConverter longLocaleConverter0 = new LongLocaleConverter("""", locale0, """");
  }"
1418,"    protected Object parse(final Object value, final String pattern) throws ParseException {

        final Object result = super.parse(value, pattern);

        if (result == null || result instanceof Long) {
            return result;
        }

        return new Long(((Number)result).longValue());

    }","  public void test13()  throws Throwable  {
      LongLocaleConverter longLocaleConverter0 = new LongLocaleConverter();
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        longLocaleConverter0.parse(object0, ""Zr.2Op 5Z>Yq"");
        fail(""Expecting exception: ClassCastException"");
      } catch(ClassCastException e) {
         //
         // java.lang.Object cannot be cast to java.lang.String
         //
         verifyException(""org.apache.commons.beanutils.locale.converters.DecimalLocaleConverter"", e);
      }
  }"
1419,"protected Object parse(final Object value, final String pattern) throws ParseException {
      final Number parsed = (Number) super.parse(value, pattern);
      final double doubleValue = parsed.doubleValue();
      final double posDouble = (doubleValue >= 0) ? doubleValue : (doubleValue * -1);
      if (posDouble != 0 && (posDouble < Float.MIN_VALUE || posDouble > Float.MAX_VALUE)) {
          throw new ConversionException(""Supplied number is not of type Float: ""+parsed);
      }
      return new Float(parsed.floatValue()); // unlike superclass it returns Float type
   }","  public void test0()  throws Throwable  {
      Double double0 = new Double(3.4028234663852886E38);
      FloatLocaleConverter floatLocaleConverter0 = new FloatLocaleConverter(double0);
      Object object0 = floatLocaleConverter0.parse(double0, ""a1i"");
}"
1420,"protected Object parse(final Object value, final String pattern) throws ParseException {
      final Number parsed = (Number) super.parse(value, pattern);
      final double doubleValue = parsed.doubleValue();
      final double posDouble = (doubleValue >= 0) ? doubleValue : (doubleValue * -1);
      if (posDouble != 0 && (posDouble < Float.MIN_VALUE || posDouble > Float.MAX_VALUE)) {
          throw new ConversionException(""Supplied number is not of type Float: ""+parsed);
      }
      return new Float(parsed.floatValue()); // unlike superclass it returns Float type
   }","  public void test1()  throws Throwable  {
      Locale locale0 = Locale.FRANCE;
      FloatLocaleConverter floatLocaleConverter0 = new FloatLocaleConverter(locale0, """");
      Double double0 = Double.valueOf(1.401298464324817E-45);
      Object object0 = floatLocaleConverter0.parse(double0, ""No pattern provided, using default."");
}"
1421,"protected Object parse(final Object value, final String pattern) throws ParseException {
      final Number parsed = (Number) super.parse(value, pattern);
      final double doubleValue = parsed.doubleValue();
      final double posDouble = (doubleValue >= 0) ? doubleValue : (doubleValue * -1);
      if (posDouble != 0 && (posDouble < Float.MIN_VALUE || posDouble > Float.MAX_VALUE)) {
          throw new ConversionException(""Supplied number is not of type Float: ""+parsed);
      }
      return new Float(parsed.floatValue()); // unlike superclass it returns Float type
   }","  public void test2()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-1));
      FloatLocaleConverter floatLocaleConverter0 = new FloatLocaleConverter(byte0);
      // Undeclared exception!
      try { 
        floatLocaleConverter0.parse((Object) null, """");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
1422,"protected Object parse(final Object value, final String pattern) throws ParseException {
      final Number parsed = (Number) super.parse(value, pattern);
      final double doubleValue = parsed.doubleValue();
      final double posDouble = (doubleValue >= 0) ? doubleValue : (doubleValue * -1);
      if (posDouble != 0 && (posDouble < Float.MIN_VALUE || posDouble > Float.MAX_VALUE)) {
          throw new ConversionException(""Supplied number is not of type Float: ""+parsed);
      }
      return new Float(parsed.floatValue()); // unlike superclass it returns Float type
   }","  public void test3()  throws Throwable  {
      FloatLocaleConverter floatLocaleConverter0 = new FloatLocaleConverter(true);
      try { 
        floatLocaleConverter0.parse("""", """");
        fail(""Expecting exception: ParseException"");
      } catch(ParseException e) {
         //
         // Unparseable number: \""\""
         //
         verifyException(""java.text.NumberFormat"", e);
      }
  }"
1423,"    public FloatLocaleConverter() {

        this(false);
    }","  public void test4()  throws Throwable  {
      Object object0 = new Object();
      Locale locale0 = Locale.CANADA;
      FloatLocaleConverter floatLocaleConverter0 = new FloatLocaleConverter(object0, locale0, (String) null, false);
  }"
1424,"    public FloatLocaleConverter() {

        this(false);
    }","  public void test5()  throws Throwable  {
      Double double0 = new Double((-1.0));
      FloatLocaleConverter floatLocaleConverter0 = new FloatLocaleConverter(double0, true);
  }"
1425,"    public FloatLocaleConverter() {

        this(false);
    }","  public void test6()  throws Throwable  {
      FloatLocaleConverter floatLocaleConverter0 = new FloatLocaleConverter((Locale) null, false);
  }"
1426,"protected Object parse(final Object value, final String pattern) throws ParseException {
      final Number parsed = (Number) super.parse(value, pattern);
      final double doubleValue = parsed.doubleValue();
      final double posDouble = (doubleValue >= 0) ? doubleValue : (doubleValue * -1);
      if (posDouble != 0 && (posDouble < Float.MIN_VALUE || posDouble > Float.MAX_VALUE)) {
          throw new ConversionException(""Supplied number is not of type Float: ""+parsed);
      }
      return new Float(parsed.floatValue()); // unlike superclass it returns Float type
   }","  public void test7()  throws Throwable  {
      Object object0 = new Object();
      Locale locale0 = Locale.CHINESE;
      FloatLocaleConverter floatLocaleConverter0 = new FloatLocaleConverter(object0, locale0, true);
      // Undeclared exception!
      try { 
        floatLocaleConverter0.parse(object0, ""'`"");
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Malformed pattern \""'`\""
         //
         verifyException(""java.text.DecimalFormat"", e);
      }
  }"
1427,"    public FloatLocaleConverter() {

        this(false);
    }","  public void test8()  throws Throwable  {
      Locale locale0 = Locale.GERMANY;
      FloatLocaleConverter floatLocaleConverter0 = new FloatLocaleConverter(locale0, (String) null, false);
  }"
1428,"protected Object parse(final Object value, final String pattern) throws ParseException {
      final Number parsed = (Number) super.parse(value, pattern);
      final double doubleValue = parsed.doubleValue();
      final double posDouble = (doubleValue >= 0) ? doubleValue : (doubleValue * -1);
      if (posDouble != 0 && (posDouble < Float.MIN_VALUE || posDouble > Float.MAX_VALUE)) {
          throw new ConversionException(""Supplied number is not of type Float: ""+parsed);
      }
      return new Float(parsed.floatValue()); // unlike superclass it returns Float type
   }","  public void test9()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-1));
      FloatLocaleConverter floatLocaleConverter0 = new FloatLocaleConverter(byte0);
      Byte byte1 = new Byte((byte)0);
      Object object0 = floatLocaleConverter0.parse(byte1, ""J]R*?o"");
}"
1429,"    public FloatLocaleConverter() {

        this(false);
    }","  public void test10()  throws Throwable  {
      Locale locale0 = Locale.CANADA_FRENCH;
      FloatLocaleConverter floatLocaleConverter0 = new FloatLocaleConverter(locale0);
  }"
1430,"    public FloatLocaleConverter() {

        this(false);
    }","  public void test11()  throws Throwable  {
      FloatLocaleConverter floatLocaleConverter0 = new FloatLocaleConverter();
  }"
1431,"protected Object parse(final Object value, final String pattern) throws ParseException {
      final Number parsed = (Number) super.parse(value, pattern);
      final double doubleValue = parsed.doubleValue();
      final double posDouble = (doubleValue >= 0) ? doubleValue : (doubleValue * -1);
      if (posDouble != 0 && (posDouble < Float.MIN_VALUE || posDouble > Float.MAX_VALUE)) {
          throw new ConversionException(""Supplied number is not of type Float: ""+parsed);
      }
      return new Float(parsed.floatValue()); // unlike superclass it returns Float type
   }","  public void test12()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-110));
      Locale locale0 = Locale.JAPANESE;
      FloatLocaleConverter floatLocaleConverter0 = new FloatLocaleConverter(byte0, locale0, """");
      // Undeclared exception!
      try { 
        floatLocaleConverter0.parse(locale0, """");
        fail(""Expecting exception: ClassCastException"");
      } catch(ClassCastException e) {
         //
         // java.util.Locale cannot be cast to java.lang.String
         //
         verifyException(""org.apache.commons.beanutils.locale.converters.DecimalLocaleConverter"", e);
      }
  }"
1432,"    public FloatLocaleConverter() {

        this(false);
    }","  public void test13()  throws Throwable  {
      Long long0 = new Long((-58L));
      Locale locale0 = Locale.CHINA;
      FloatLocaleConverter floatLocaleConverter0 = new FloatLocaleConverter(long0, locale0);
  }"
1433,"    public FloatLocaleConverter() {

        this(false);
    }","  public void test14()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-1));
      FloatLocaleConverter floatLocaleConverter0 = new FloatLocaleConverter(byte0);
      Object object0 = floatLocaleConverter0.convert((Object) byte0);
}"
1434,"    protected Object parse(final Object value, final String pattern) throws ParseException {
        final Number parsed = (Number) super.parse(value, pattern);
        if (parsed.longValue() != parsed.intValue()) {
            throw new ConversionException(""Suplied number is not of type Integer: "" + parsed.longValue());
        }
        return new Integer(parsed.intValue()); // unlike superclass it will return proper Integer
    }","  public void test0()  throws Throwable  {
      Double double0 = new Double((-2452.5988036908548));
      IntegerLocaleConverter integerLocaleConverter0 = new IntegerLocaleConverter(double0);
      Object object0 = integerLocaleConverter0.parse(double0, ""Z+ xP#)U=/(;7"");
}"
1435,"    protected Object parse(final Object value, final String pattern) throws ParseException {
        final Number parsed = (Number) super.parse(value, pattern);
        if (parsed.longValue() != parsed.intValue()) {
            throw new ConversionException(""Suplied number is not of type Integer: "" + parsed.longValue());
        }
        return new Integer(parsed.intValue()); // unlike superclass it will return proper Integer
    }","  public void test1()  throws Throwable  {
      Locale locale0 = Locale.forLanguageTag("""");
      IntegerLocaleConverter integerLocaleConverter0 = new IntegerLocaleConverter((Object) null, locale0);
      // Undeclared exception!
      try { 
        integerLocaleConverter0.parse((Object) null, """");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.text.DecimalFormat"", e);
      }
  }"
1436,"    protected Object parse(final Object value, final String pattern) throws ParseException {
        final Number parsed = (Number) super.parse(value, pattern);
        if (parsed.longValue() != parsed.intValue()) {
            throw new ConversionException(""Suplied number is not of type Integer: "" + parsed.longValue());
        }
        return new Integer(parsed.intValue()); // unlike superclass it will return proper Integer
    }","  public void test2()  throws Throwable  {
      Double double0 = new Double((-2452.5988036908548));
      IntegerLocaleConverter integerLocaleConverter0 = new IntegerLocaleConverter(double0);
      // Undeclared exception!
      try { 
        integerLocaleConverter0.parse((Object) null, ""]],)lT]t9][yl|O|8"");
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Malformed pattern \""]],)lT]t9][yl|O|8\""
         //
         verifyException(""java.text.DecimalFormat"", e);
      }
  }"
1437,"    protected Object parse(final Object value, final String pattern) throws ParseException {
        final Number parsed = (Number) super.parse(value, pattern);
        if (parsed.longValue() != parsed.intValue()) {
            throw new ConversionException(""Suplied number is not of type Integer: "" + parsed.longValue());
        }
        return new Integer(parsed.intValue()); // unlike superclass it will return proper Integer
    }","  public void test3()  throws Throwable  {
      Locale locale0 = Locale.ITALIAN;
      IntegerLocaleConverter integerLocaleConverter0 = new IntegerLocaleConverter("""", locale0);
      // Undeclared exception!
      try { 
        integerLocaleConverter0.parse(locale0, ""\"":+A%3!#A#B<rx"");
        fail(""Expecting exception: ClassCastException"");
      } catch(ClassCastException e) {
         //
         // java.util.Locale cannot be cast to java.lang.String
         //
         verifyException(""org.apache.commons.beanutils.locale.converters.DecimalLocaleConverter"", e);
      }
  }"
1438,"    public IntegerLocaleConverter() {

        this(false);
    }","  public void test4()  throws Throwable  {
      Locale locale0 = Locale.GERMANY;
      IntegerLocaleConverter integerLocaleConverter0 = new IntegerLocaleConverter(locale0, (String) null, true);
  }"
1439,"    public IntegerLocaleConverter() {

        this(false);
    }","  public void test5()  throws Throwable  {
      Byte byte0 = new Byte((byte)1);
      IntegerLocaleConverter integerLocaleConverter0 = new IntegerLocaleConverter(byte0, (Locale) null, true);
  }"
1440,"    public IntegerLocaleConverter() {

        this(false);
    }","  public void test6()  throws Throwable  {
      Locale locale0 = Locale.CHINA;
      IntegerLocaleConverter integerLocaleConverter0 = new IntegerLocaleConverter(locale0, false);
  }"
1441,"    public IntegerLocaleConverter() {

        this(false);
    }","  public void test7()  throws Throwable  {
      IntegerLocaleConverter integerLocaleConverter0 = new IntegerLocaleConverter(true);
  }"
1442,"    public IntegerLocaleConverter() {

        this(false);
    }","  public void test8()  throws Throwable  {
      Integer integer0 = new Integer((-1));
      IntegerLocaleConverter integerLocaleConverter0 = new IntegerLocaleConverter(integer0, true);
  }"
1443,"    public IntegerLocaleConverter() {

        this(false);
    }","  public void test9()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Locale locale0 = Locale.GERMAN;
      IntegerLocaleConverter integerLocaleConverter0 = new IntegerLocaleConverter(integer0, locale0, ""v7"", false);
  }"
1444,"    protected Object parse(final Object value, final String pattern) throws ParseException {
        final Number parsed = (Number) super.parse(value, pattern);
        if (parsed.longValue() != parsed.intValue()) {
            throw new ConversionException(""Suplied number is not of type Integer: "" + parsed.longValue());
        }
        return new Integer(parsed.intValue()); // unlike superclass it will return proper Integer
    }","  public void test10()  throws Throwable  {
      IntegerLocaleConverter integerLocaleConverter0 = new IntegerLocaleConverter((Locale) null, """");
      try { 
        integerLocaleConverter0.parse(""]-v|"", ""Oth}zhoE m4iuF<e!p"");
        fail(""Expecting exception: ParseException"");
      } catch(ParseException e) {
         //
         // Unparseable number: \""]-v|\""
         //
         verifyException(""java.text.NumberFormat"", e);
      }
  }"
1445,"    public IntegerLocaleConverter() {

        this(false);
    }","  public void test11()  throws Throwable  {
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      IntegerLocaleConverter integerLocaleConverter0 = new IntegerLocaleConverter(""N(z7-db;D[@lj.J"", locale0, ""N(z7-db;D[@lj.J"");
  }"
1446,"    public IntegerLocaleConverter() {

        this(false);
    }","  public void test12()  throws Throwable  {
      Locale locale0 = Locale.JAPAN;
      IntegerLocaleConverter integerLocaleConverter0 = new IntegerLocaleConverter(locale0);
  }"
1447,"    public IntegerLocaleConverter() {

        this(false);
    }","  public void test13()  throws Throwable  {
      IntegerLocaleConverter integerLocaleConverter0 = new IntegerLocaleConverter();
  }"
1448,"    public String remove(final String expression) {
        if (expression == null || expression.length() == 0) {
            return null;
        }
        final String property = next(expression);
        if (expression.length() == property.length()) {
            return null;
        }
        int start = property.length();
        if (expression.charAt(start) == NESTED) {
            start++;
        }
        return expression.substring(start);
    }","  public void test0()  throws Throwable  {
      DefaultResolver defaultResolver0 = new DefaultResolver();
      String string0 = defaultResolver0.remove(""(a-u=?'T)AY(rYhpm"");
}"
1449,"    public String remove(final String expression) {
        if (expression == null || expression.length() == 0) {
            return null;
        }
        final String property = next(expression);
        if (expression.length() == property.length()) {
            return null;
        }
        int start = property.length();
        if (expression.charAt(start) == NESTED) {
            start++;
        }
        return expression.substring(start);
    }","  public void test1()  throws Throwable  {
      DefaultResolver defaultResolver0 = new DefaultResolver();
      String string0 = defaultResolver0.remove(""(a-u=?'T)AY(rYhpm"");
}"
1450,"    public boolean isIndexed(final String expression) {
        if (expression == null || expression.length() == 0) {
            return false;
        }
        for (int i = 0; i < expression.length(); i++) {
            final char c = expression.charAt(i);
            if (c == NESTED || c == MAPPED_START) {
                return false;
            } else if (c == INDEXED_START) {
                return true;
            }
        }
        return false;
    }","  public void test2()  throws Throwable  {
      DefaultResolver defaultResolver0 = new DefaultResolver();
      boolean boolean0 = defaultResolver0.isIndexed(""jmdLF;@hI'i/R"");
}"
1451,"    public int getIndex(final String expression) {
        if (expression == null || expression.length() == 0) {
            return -1;
        }
        for (int i = 0; i < expression.length(); i++) {
            final char c = expression.charAt(i);
            if (c == NESTED || c == MAPPED_START) {
                return -1;
            } else if (c == INDEXED_START) {
                final int end = expression.indexOf(INDEXED_END, i);
                if (end < 0) {
                    throw new IllegalArgumentException(""Missing End Delimiter"");
                }
                final String value = expression.substring(i + 1, end);
                if (value.length() == 0) {
                    throw new IllegalArgumentException(""No Index Value"");
                }
                int index = 0;
                try {
                    index = Integer.parseInt(value, 10);
                } catch (final Exception e) {
                    throw new IllegalArgumentException(""Invalid index value '""
                            + value + ""'"");
                }
                return index;
            }
        }
        return -1;
    }","  public void test3()  throws Throwable  {
      DefaultResolver defaultResolver0 = new DefaultResolver();
      int int0 = defaultResolver0.getIndex(""\""`L"");
}"
1452,"    public int getIndex(final String expression) {
        if (expression == null || expression.length() == 0) {
            return -1;
        }
        for (int i = 0; i < expression.length(); i++) {
            final char c = expression.charAt(i);
            if (c == NESTED || c == MAPPED_START) {
                return -1;
            } else if (c == INDEXED_START) {
                final int end = expression.indexOf(INDEXED_END, i);
                if (end < 0) {
                    throw new IllegalArgumentException(""Missing End Delimiter"");
                }
                final String value = expression.substring(i + 1, end);
                if (value.length() == 0) {
                    throw new IllegalArgumentException(""No Index Value"");
                }
                int index = 0;
                try {
                    index = Integer.parseInt(value, 10);
                } catch (final Exception e) {
                    throw new IllegalArgumentException(""Invalid index value '""
                            + value + ""'"");
                }
                return index;
            }
        }
        return -1;
    }","  public void test4()  throws Throwable  {
      DefaultResolver defaultResolver0 = new DefaultResolver();
      // Undeclared exception!
      try { 
        defaultResolver0.getIndex(""oIJV[.a]L!y]<>c"");
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Invalid index value '.a'
         //
         verifyException(""org.apache.commons.beanutils.expression.DefaultResolver"", e);
      }
  }"
1453,"    public String getKey(final String expression) {
        if (expression == null || expression.length() == 0) {
            return null;
        }
        for (int i = 0; i < expression.length(); i++) {
            final char c = expression.charAt(i);
            if (c == NESTED || c == INDEXED_START) {
                return null;
            } else if (c == MAPPED_START) {
                final int end = expression.indexOf(MAPPED_END, i);
                if (end < 0) {
                    throw new IllegalArgumentException(""Missing End Delimiter"");
                }
                return expression.substring(i + 1, end);
            }
        }
        return null;
    }","  public void test5()  throws Throwable  {
      DefaultResolver defaultResolver0 = new DefaultResolver();
      String string0 = defaultResolver0.getKey(""*(Vmh@xb_gx)!"");
}"
1454,"    public String getKey(final String expression) {
        if (expression == null || expression.length() == 0) {
            return null;
        }
        for (int i = 0; i < expression.length(); i++) {
            final char c = expression.charAt(i);
            if (c == NESTED || c == INDEXED_START) {
                return null;
            } else if (c == MAPPED_START) {
                final int end = expression.indexOf(MAPPED_END, i);
                if (end < 0) {
                    throw new IllegalArgumentException(""Missing End Delimiter"");
                }
                return expression.substring(i + 1, end);
            }
        }
        return null;
    }","  public void test6()  throws Throwable  {
      DefaultResolver defaultResolver0 = new DefaultResolver();
      String string0 = defaultResolver0.getKey(""*(Vmh@xb_gx)!"");
}"
1455,"    public String remove(final String expression) {
        if (expression == null || expression.length() == 0) {
            return null;
        }
        final String property = next(expression);
        if (expression.length() == property.length()) {
            return null;
        }
        int start = property.length();
        if (expression.charAt(start) == NESTED) {
            start++;
        }
        return expression.substring(start);
    }","  public void test7()  throws Throwable  {
      DefaultResolver defaultResolver0 = new DefaultResolver();
      String string0 = defaultResolver0.remove(""H*JD#a_?."");
}"
1456,"    public String remove(final String expression) {
        if (expression == null || expression.length() == 0) {
            return null;
        }
        final String property = next(expression);
        if (expression.length() == property.length()) {
            return null;
        }
        int start = property.length();
        if (expression.charAt(start) == NESTED) {
            start++;
        }
        return expression.substring(start);
    }","  public void test8()  throws Throwable  {
      DefaultResolver defaultResolver0 = new DefaultResolver();
      String string0 = defaultResolver0.remove(""H*JD#a_?."");
}"
1457,"    public String remove(final String expression) {
        if (expression == null || expression.length() == 0) {
            return null;
        }
        final String property = next(expression);
        if (expression.length() == property.length()) {
            return null;
        }
        int start = property.length();
        if (expression.charAt(start) == NESTED) {
            start++;
        }
        return expression.substring(start);
    }","  public void test9()  throws Throwable  {
      DefaultResolver defaultResolver0 = new DefaultResolver();
      String string0 = defaultResolver0.remove(""(D,;|&ZrI`'YX{Km]"");
}"
1458,"    public String next(final String expression) {
        if (expression == null || expression.length() == 0) {
            return null;
        }
        boolean indexed = false;
        boolean mapped  = false;
        for (int i = 0; i < expression.length(); i++) {
            final char c = expression.charAt(i);
            if (indexed) {
                if (c == INDEXED_END) {
                    return expression.substring(0, i + 1);
                }
            } else if (mapped) {
                if (c == MAPPED_END) {
                    return expression.substring(0, i + 1);
                }
            } else {
                if (c == NESTED) {
                    return expression.substring(0, i);
                } else if (c == MAPPED_START) {
                    mapped = true;
                } else if (c == INDEXED_START) {
                    indexed = true;
                }
            }
        }
        return expression;
    }","  public void test10()  throws Throwable  {
      DefaultResolver defaultResolver0 = new DefaultResolver();
      String string0 = defaultResolver0.next(""U[].5W91K|Th#"");
}"
1459,"    public String remove(final String expression) {
        if (expression == null || expression.length() == 0) {
            return null;
        }
        final String property = next(expression);
        if (expression.length() == property.length()) {
            return null;
        }
        int start = property.length();
        if (expression.charAt(start) == NESTED) {
            start++;
        }
        return expression.substring(start);
    }","  public void test11()  throws Throwable  {
      DefaultResolver defaultResolver0 = new DefaultResolver();
      String string0 = defaultResolver0.remove(""*(Vmh@xb_gx)!"");
}"
1460,"    public String remove(final String expression) {
        if (expression == null || expression.length() == 0) {
            return null;
        }
        final String property = next(expression);
        if (expression.length() == property.length()) {
            return null;
        }
        int start = property.length();
        if (expression.charAt(start) == NESTED) {
            start++;
        }
        return expression.substring(start);
    }","  public void test12()  throws Throwable  {
      DefaultResolver defaultResolver0 = new DefaultResolver();
      String string0 = defaultResolver0.remove(""*(Vmh@xb_gx)!"");
}"
1461,"    public String remove(final String expression) {
        if (expression == null || expression.length() == 0) {
            return null;
        }
        final String property = next(expression);
        if (expression.length() == property.length()) {
            return null;
        }
        int start = property.length();
        if (expression.charAt(start) == NESTED) {
            start++;
        }
        return expression.substring(start);
    }","  public void test13()  throws Throwable  {
      DefaultResolver defaultResolver0 = new DefaultResolver();
      String string0 = defaultResolver0.remove("""");
}"
1462,"    public String remove(final String expression) {
        if (expression == null || expression.length() == 0) {
            return null;
        }
        final String property = next(expression);
        if (expression.length() == property.length()) {
            return null;
        }
        int start = property.length();
        if (expression.charAt(start) == NESTED) {
            start++;
        }
        return expression.substring(start);
    }","  public void test14()  throws Throwable  {
      DefaultResolver defaultResolver0 = new DefaultResolver();
      String string0 = defaultResolver0.remove((String) null);
}"
1463,"    public String next(final String expression) {
        if (expression == null || expression.length() == 0) {
            return null;
        }
        boolean indexed = false;
        boolean mapped  = false;
        for (int i = 0; i < expression.length(); i++) {
            final char c = expression.charAt(i);
            if (indexed) {
                if (c == INDEXED_END) {
                    return expression.substring(0, i + 1);
                }
            } else if (mapped) {
                if (c == MAPPED_END) {
                    return expression.substring(0, i + 1);
                }
            } else {
                if (c == NESTED) {
                    return expression.substring(0, i);
                } else if (c == MAPPED_START) {
                    mapped = true;
                } else if (c == INDEXED_START) {
                    indexed = true;
                }
            }
        }
        return expression;
    }","  public void test15()  throws Throwable  {
      DefaultResolver defaultResolver0 = new DefaultResolver();
      String string0 = defaultResolver0.next("".WeCX(zP6ZD"");
}"
1464,"    public String next(final String expression) {
        if (expression == null || expression.length() == 0) {
            return null;
        }
        boolean indexed = false;
        boolean mapped  = false;
        for (int i = 0; i < expression.length(); i++) {
            final char c = expression.charAt(i);
            if (indexed) {
                if (c == INDEXED_END) {
                    return expression.substring(0, i + 1);
                }
            } else if (mapped) {
                if (c == MAPPED_END) {
                    return expression.substring(0, i + 1);
                }
            } else {
                if (c == NESTED) {
                    return expression.substring(0, i);
                } else if (c == MAPPED_START) {
                    mapped = true;
                } else if (c == INDEXED_START) {
                    indexed = true;
                }
            }
        }
        return expression;
    }","  public void test16()  throws Throwable  {
      DefaultResolver defaultResolver0 = new DefaultResolver();
      String string0 = defaultResolver0.next(""G!)`4(~Y[)57`4"");
}"
1465,"    public boolean hasNested(final String expression) {
        if (expression == null || expression.length() == 0) {
            return false;
        } else {
            return (remove(expression) != null);
        }
    }","  public void test17()  throws Throwable  {
      DefaultResolver defaultResolver0 = new DefaultResolver();
      boolean boolean0 = defaultResolver0.hasNested(""uj(,3[Wh5\u0007Z=Y9"");
}"
1466,"    public String next(final String expression) {
        if (expression == null || expression.length() == 0) {
            return null;
        }
        boolean indexed = false;
        boolean mapped  = false;
        for (int i = 0; i < expression.length(); i++) {
            final char c = expression.charAt(i);
            if (indexed) {
                if (c == INDEXED_END) {
                    return expression.substring(0, i + 1);
                }
            } else if (mapped) {
                if (c == MAPPED_END) {
                    return expression.substring(0, i + 1);
                }
            } else {
                if (c == NESTED) {
                    return expression.substring(0, i);
                } else if (c == MAPPED_START) {
                    mapped = true;
                } else if (c == INDEXED_START) {
                    indexed = true;
                }
            }
        }
        return expression;
    }","  public void test18()  throws Throwable  {
      DefaultResolver defaultResolver0 = new DefaultResolver();
      String string0 = defaultResolver0.next(""[^Jgf(\"" ~F0/=_Q27W"");
}"
1467,"    public String next(final String expression) {
        if (expression == null || expression.length() == 0) {
            return null;
        }
        boolean indexed = false;
        boolean mapped  = false;
        for (int i = 0; i < expression.length(); i++) {
            final char c = expression.charAt(i);
            if (indexed) {
                if (c == INDEXED_END) {
                    return expression.substring(0, i + 1);
                }
            } else if (mapped) {
                if (c == MAPPED_END) {
                    return expression.substring(0, i + 1);
                }
            } else {
                if (c == NESTED) {
                    return expression.substring(0, i);
                } else if (c == MAPPED_START) {
                    mapped = true;
                } else if (c == INDEXED_START) {
                    indexed = true;
                }
            }
        }
        return expression;
    }","  public void test19()  throws Throwable  {
      DefaultResolver defaultResolver0 = new DefaultResolver();
      String string0 = defaultResolver0.next("""");
}"
1468,"    public String next(final String expression) {
        if (expression == null || expression.length() == 0) {
            return null;
        }
        boolean indexed = false;
        boolean mapped  = false;
        for (int i = 0; i < expression.length(); i++) {
            final char c = expression.charAt(i);
            if (indexed) {
                if (c == INDEXED_END) {
                    return expression.substring(0, i + 1);
                }
            } else if (mapped) {
                if (c == MAPPED_END) {
                    return expression.substring(0, i + 1);
                }
            } else {
                if (c == NESTED) {
                    return expression.substring(0, i);
                } else if (c == MAPPED_START) {
                    mapped = true;
                } else if (c == INDEXED_START) {
                    indexed = true;
                }
            }
        }
        return expression;
    }","  public void test20()  throws Throwable  {
      DefaultResolver defaultResolver0 = new DefaultResolver();
      String string0 = defaultResolver0.next((String) null);
}"
1469,"    public boolean isMapped(final String expression) {
        if (expression == null || expression.length() == 0) {
            return false;
        }
        for (int i = 0; i < expression.length(); i++) {
            final char c = expression.charAt(i);
            if (c == NESTED || c == INDEXED_START) {
                return false;
            } else if (c == MAPPED_START) {
                return true;
            }
        }
        return false;
    }","  public void test21()  throws Throwable  {
      DefaultResolver defaultResolver0 = new DefaultResolver();
      boolean boolean0 = defaultResolver0.isMapped(""uj(,3[Wh5\u0007Z=Y9"");
}"
1470,"    public boolean isMapped(final String expression) {
        if (expression == null || expression.length() == 0) {
            return false;
        }
        for (int i = 0; i < expression.length(); i++) {
            final char c = expression.charAt(i);
            if (c == NESTED || c == INDEXED_START) {
                return false;
            } else if (c == MAPPED_START) {
                return true;
            }
        }
        return false;
    }","  public void test22()  throws Throwable  {
      DefaultResolver defaultResolver0 = new DefaultResolver();
      boolean boolean0 = defaultResolver0.isMapped(""Q9J[N^.Z&"");
}"
1471,"    public boolean isMapped(final String expression) {
        if (expression == null || expression.length() == 0) {
            return false;
        }
        for (int i = 0; i < expression.length(); i++) {
            final char c = expression.charAt(i);
            if (c == NESTED || c == INDEXED_START) {
                return false;
            } else if (c == MAPPED_START) {
                return true;
            }
        }
        return false;
    }","  public void test23()  throws Throwable  {
      DefaultResolver defaultResolver0 = new DefaultResolver();
      boolean boolean0 = defaultResolver0.isMapped(""cF|.@/I_d]=1^K"");
}"
1472,"    public boolean isMapped(final String expression) {
        if (expression == null || expression.length() == 0) {
            return false;
        }
        for (int i = 0; i < expression.length(); i++) {
            final char c = expression.charAt(i);
            if (c == NESTED || c == INDEXED_START) {
                return false;
            } else if (c == MAPPED_START) {
                return true;
            }
        }
        return false;
    }","  public void test24()  throws Throwable  {
      DefaultResolver defaultResolver0 = new DefaultResolver();
      boolean boolean0 = defaultResolver0.isMapped("""");
}"
1473,"    public boolean isMapped(final String expression) {
        if (expression == null || expression.length() == 0) {
            return false;
        }
        for (int i = 0; i < expression.length(); i++) {
            final char c = expression.charAt(i);
            if (c == NESTED || c == INDEXED_START) {
                return false;
            } else if (c == MAPPED_START) {
                return true;
            }
        }
        return false;
    }","  public void test25()  throws Throwable  {
      DefaultResolver defaultResolver0 = new DefaultResolver();
      boolean boolean0 = defaultResolver0.isMapped(""rXdt&` qcOM*FwG!Y"");
}"
1474,"    public boolean isMapped(final String expression) {
        if (expression == null || expression.length() == 0) {
            return false;
        }
        for (int i = 0; i < expression.length(); i++) {
            final char c = expression.charAt(i);
            if (c == NESTED || c == INDEXED_START) {
                return false;
            } else if (c == MAPPED_START) {
                return true;
            }
        }
        return false;
    }","  public void test26()  throws Throwable  {
      DefaultResolver defaultResolver0 = new DefaultResolver();
      boolean boolean0 = defaultResolver0.isMapped((String) null);
}"
1475,"    public boolean isIndexed(final String expression) {
        if (expression == null || expression.length() == 0) {
            return false;
        }
        for (int i = 0; i < expression.length(); i++) {
            final char c = expression.charAt(i);
            if (c == NESTED || c == MAPPED_START) {
                return false;
            } else if (c == INDEXED_START) {
                return true;
            }
        }
        return false;
    }","  public void test27()  throws Throwable  {
      DefaultResolver defaultResolver0 = new DefaultResolver();
      boolean boolean0 = defaultResolver0.isIndexed(""Fa1@[F.C?F|N"");
}"
1476,"    public boolean isIndexed(final String expression) {
        if (expression == null || expression.length() == 0) {
            return false;
        }
        for (int i = 0; i < expression.length(); i++) {
            final char c = expression.charAt(i);
            if (c == NESTED || c == MAPPED_START) {
                return false;
            } else if (c == INDEXED_START) {
                return true;
            }
        }
        return false;
    }","  public void test28()  throws Throwable  {
      DefaultResolver defaultResolver0 = new DefaultResolver();
      boolean boolean0 = defaultResolver0.isIndexed(""FeT6(c"");
}"
1477,"    public boolean isIndexed(final String expression) {
        if (expression == null || expression.length() == 0) {
            return false;
        }
        for (int i = 0; i < expression.length(); i++) {
            final char c = expression.charAt(i);
            if (c == NESTED || c == MAPPED_START) {
                return false;
            } else if (c == INDEXED_START) {
                return true;
            }
        }
        return false;
    }","  public void test29()  throws Throwable  {
      DefaultResolver defaultResolver0 = new DefaultResolver();
      boolean boolean0 = defaultResolver0.isIndexed(""cF|.@/I_d]=1^K"");
}"
1478,"    public boolean isIndexed(final String expression) {
        if (expression == null || expression.length() == 0) {
            return false;
        }
        for (int i = 0; i < expression.length(); i++) {
            final char c = expression.charAt(i);
            if (c == NESTED || c == MAPPED_START) {
                return false;
            } else if (c == INDEXED_START) {
                return true;
            }
        }
        return false;
    }","  public void test30()  throws Throwable  {
      DefaultResolver defaultResolver0 = new DefaultResolver();
      boolean boolean0 = defaultResolver0.isIndexed("""");
}"
1479,"    public boolean isIndexed(final String expression) {
        if (expression == null || expression.length() == 0) {
            return false;
        }
        for (int i = 0; i < expression.length(); i++) {
            final char c = expression.charAt(i);
            if (c == NESTED || c == MAPPED_START) {
                return false;
            } else if (c == INDEXED_START) {
                return true;
            }
        }
        return false;
    }","  public void test31()  throws Throwable  {
      DefaultResolver defaultResolver0 = new DefaultResolver();
      boolean boolean0 = defaultResolver0.isIndexed((String) null);
}"
1480,"    public boolean hasNested(final String expression) {
        if (expression == null || expression.length() == 0) {
            return false;
        } else {
            return (remove(expression) != null);
        }
    }","  public void test32()  throws Throwable  {
      DefaultResolver defaultResolver0 = new DefaultResolver();
      boolean boolean0 = defaultResolver0.hasNested("""");
}"
1481,"    public boolean hasNested(final String expression) {
        if (expression == null || expression.length() == 0) {
            return false;
        } else {
            return (remove(expression) != null);
        }
    }","  public void test33()  throws Throwable  {
      DefaultResolver defaultResolver0 = new DefaultResolver();
      boolean boolean0 = defaultResolver0.hasNested(""U[].5W91K|Th#"");
}"
1482,"    public boolean hasNested(final String expression) {
        if (expression == null || expression.length() == 0) {
            return false;
        } else {
            return (remove(expression) != null);
        }
    }","  public void test34()  throws Throwable  {
      DefaultResolver defaultResolver0 = new DefaultResolver();
      boolean boolean0 = defaultResolver0.hasNested((String) null);
}"
1483,"    public String getProperty(final String expression) {
        if (expression == null || expression.length() == 0) {
            return expression;
        }
        for (int i = 0; i < expression.length(); i++) {
            final char c = expression.charAt(i);
            if (c == NESTED) {
                return expression.substring(0, i);
            } else if (c == MAPPED_START || c == INDEXED_START) {
                return expression.substring(0, i);
            }
        }
        return expression;
    }","  public void test35()  throws Throwable  {
      DefaultResolver defaultResolver0 = new DefaultResolver();
      String string0 = defaultResolver0.getProperty(""[^Jgf(\"" ~F0/=_Q27W"");
}"
1484,"    public String getProperty(final String expression) {
        if (expression == null || expression.length() == 0) {
            return expression;
        }
        for (int i = 0; i < expression.length(); i++) {
            final char c = expression.charAt(i);
            if (c == NESTED) {
                return expression.substring(0, i);
            } else if (c == MAPPED_START || c == INDEXED_START) {
                return expression.substring(0, i);
            }
        }
        return expression;
    }","  public void test36()  throws Throwable  {
      DefaultResolver defaultResolver0 = new DefaultResolver();
      String string0 = defaultResolver0.getProperty(""T(UO}P$^<V|D`"");
}"
1485,"    public String getProperty(final String expression) {
        if (expression == null || expression.length() == 0) {
            return expression;
        }
        for (int i = 0; i < expression.length(); i++) {
            final char c = expression.charAt(i);
            if (c == NESTED) {
                return expression.substring(0, i);
            } else if (c == MAPPED_START || c == INDEXED_START) {
                return expression.substring(0, i);
            }
        }
        return expression;
    }","  public void test37()  throws Throwable  {
      DefaultResolver defaultResolver0 = new DefaultResolver();
      String string0 = defaultResolver0.getProperty(""D7t s"");
}"
1486,"    public String getProperty(final String expression) {
        if (expression == null || expression.length() == 0) {
            return expression;
        }
        for (int i = 0; i < expression.length(); i++) {
            final char c = expression.charAt(i);
            if (c == NESTED) {
                return expression.substring(0, i);
            } else if (c == MAPPED_START || c == INDEXED_START) {
                return expression.substring(0, i);
            }
        }
        return expression;
    }","  public void test38()  throws Throwable  {
      DefaultResolver defaultResolver0 = new DefaultResolver();
      String string0 = defaultResolver0.getProperty("""");
}"
1487,"    public String getProperty(final String expression) {
        if (expression == null || expression.length() == 0) {
            return expression;
        }
        for (int i = 0; i < expression.length(); i++) {
            final char c = expression.charAt(i);
            if (c == NESTED) {
                return expression.substring(0, i);
            } else if (c == MAPPED_START || c == INDEXED_START) {
                return expression.substring(0, i);
            }
        }
        return expression;
    }","  public void test39()  throws Throwable  {
      DefaultResolver defaultResolver0 = new DefaultResolver();
      String string0 = defaultResolver0.getProperty(""0k-.MEV0si9xCUykB*"");
}"
1488,"    public String getProperty(final String expression) {
        if (expression == null || expression.length() == 0) {
            return expression;
        }
        for (int i = 0; i < expression.length(); i++) {
            final char c = expression.charAt(i);
            if (c == NESTED) {
                return expression.substring(0, i);
            } else if (c == MAPPED_START || c == INDEXED_START) {
                return expression.substring(0, i);
            }
        }
        return expression;
    }","  public void test40()  throws Throwable  {
      DefaultResolver defaultResolver0 = new DefaultResolver();
      String string0 = defaultResolver0.getProperty((String) null);
}"
1489,"    public String getKey(final String expression) {
        if (expression == null || expression.length() == 0) {
            return null;
        }
        for (int i = 0; i < expression.length(); i++) {
            final char c = expression.charAt(i);
            if (c == NESTED || c == INDEXED_START) {
                return null;
            } else if (c == MAPPED_START) {
                final int end = expression.indexOf(MAPPED_END, i);
                if (end < 0) {
                    throw new IllegalArgumentException(""Missing End Delimiter"");
                }
                return expression.substring(i + 1, end);
            }
        }
        return null;
    }","  public void test41()  throws Throwable  {
      DefaultResolver defaultResolver0 = new DefaultResolver();
      String string0 = defaultResolver0.getKey(""V()"");
}"
1490,"    public String getKey(final String expression) {
        if (expression == null || expression.length() == 0) {
            return null;
        }
        for (int i = 0; i < expression.length(); i++) {
            final char c = expression.charAt(i);
            if (c == NESTED || c == INDEXED_START) {
                return null;
            } else if (c == MAPPED_START) {
                final int end = expression.indexOf(MAPPED_END, i);
                if (end < 0) {
                    throw new IllegalArgumentException(""Missing End Delimiter"");
                }
                return expression.substring(i + 1, end);
            }
        }
        return null;
    }","  public void test42()  throws Throwable  {
      DefaultResolver defaultResolver0 = new DefaultResolver();
      String string0 = defaultResolver0.getKey(""V()"");
}"
1491,"    public String getKey(final String expression) {
        if (expression == null || expression.length() == 0) {
            return null;
        }
        for (int i = 0; i < expression.length(); i++) {
            final char c = expression.charAt(i);
            if (c == NESTED || c == INDEXED_START) {
                return null;
            } else if (c == MAPPED_START) {
                final int end = expression.indexOf(MAPPED_END, i);
                if (end < 0) {
                    throw new IllegalArgumentException(""Missing End Delimiter"");
                }
                return expression.substring(i + 1, end);
            }
        }
        return null;
    }","  public void test43()  throws Throwable  {
      DefaultResolver defaultResolver0 = new DefaultResolver();
      // Undeclared exception!
      try { 
        defaultResolver0.getKey(""Z`jthf(.{WU@;$oP"");
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Missing End Delimiter
         //
         verifyException(""org.apache.commons.beanutils.expression.DefaultResolver"", e);
      }
  }"
1492,"    public String getKey(final String expression) {
        if (expression == null || expression.length() == 0) {
            return null;
        }
        for (int i = 0; i < expression.length(); i++) {
            final char c = expression.charAt(i);
            if (c == NESTED || c == INDEXED_START) {
                return null;
            } else if (c == MAPPED_START) {
                final int end = expression.indexOf(MAPPED_END, i);
                if (end < 0) {
                    throw new IllegalArgumentException(""Missing End Delimiter"");
                }
                return expression.substring(i + 1, end);
            }
        }
        return null;
    }","  public void test44()  throws Throwable  {
      DefaultResolver defaultResolver0 = new DefaultResolver();
      String string0 = defaultResolver0.getKey(""Fa1@[F.C?F|N"");
}"
1493,"    public String getKey(final String expression) {
        if (expression == null || expression.length() == 0) {
            return null;
        }
        for (int i = 0; i < expression.length(); i++) {
            final char c = expression.charAt(i);
            if (c == NESTED || c == INDEXED_START) {
                return null;
            } else if (c == MAPPED_START) {
                final int end = expression.indexOf(MAPPED_END, i);
                if (end < 0) {
                    throw new IllegalArgumentException(""Missing End Delimiter"");
                }
                return expression.substring(i + 1, end);
            }
        }
        return null;
    }","  public void test45()  throws Throwable  {
      DefaultResolver defaultResolver0 = new DefaultResolver();
      String string0 = defaultResolver0.getKey(""org.aach.commons.beanutils.uxression.DefultResover"");
}"
1494,"    public String getKey(final String expression) {
        if (expression == null || expression.length() == 0) {
            return null;
        }
        for (int i = 0; i < expression.length(); i++) {
            final char c = expression.charAt(i);
            if (c == NESTED || c == INDEXED_START) {
                return null;
            } else if (c == MAPPED_START) {
                final int end = expression.indexOf(MAPPED_END, i);
                if (end < 0) {
                    throw new IllegalArgumentException(""Missing End Delimiter"");
                }
                return expression.substring(i + 1, end);
            }
        }
        return null;
    }","  public void test46()  throws Throwable  {
      DefaultResolver defaultResolver0 = new DefaultResolver();
      String string0 = defaultResolver0.getKey("""");
}"
1495,"    public String getKey(final String expression) {
        if (expression == null || expression.length() == 0) {
            return null;
        }
        for (int i = 0; i < expression.length(); i++) {
            final char c = expression.charAt(i);
            if (c == NESTED || c == INDEXED_START) {
                return null;
            } else if (c == MAPPED_START) {
                final int end = expression.indexOf(MAPPED_END, i);
                if (end < 0) {
                    throw new IllegalArgumentException(""Missing End Delimiter"");
                }
                return expression.substring(i + 1, end);
            }
        }
        return null;
    }","  public void test47()  throws Throwable  {
      DefaultResolver defaultResolver0 = new DefaultResolver();
      String string0 = defaultResolver0.getKey(""J~$rss')f:"");
}"
1496,"    public String getKey(final String expression) {
        if (expression == null || expression.length() == 0) {
            return null;
        }
        for (int i = 0; i < expression.length(); i++) {
            final char c = expression.charAt(i);
            if (c == NESTED || c == INDEXED_START) {
                return null;
            } else if (c == MAPPED_START) {
                final int end = expression.indexOf(MAPPED_END, i);
                if (end < 0) {
                    throw new IllegalArgumentException(""Missing End Delimiter"");
                }
                return expression.substring(i + 1, end);
            }
        }
        return null;
    }","  public void test48()  throws Throwable  {
      DefaultResolver defaultResolver0 = new DefaultResolver();
      String string0 = defaultResolver0.getKey((String) null);
}"
1497,"    public int getIndex(final String expression) {
        if (expression == null || expression.length() == 0) {
            return -1;
        }
        for (int i = 0; i < expression.length(); i++) {
            final char c = expression.charAt(i);
            if (c == NESTED || c == MAPPED_START) {
                return -1;
            } else if (c == INDEXED_START) {
                final int end = expression.indexOf(INDEXED_END, i);
                if (end < 0) {
                    throw new IllegalArgumentException(""Missing End Delimiter"");
                }
                final String value = expression.substring(i + 1, end);
                if (value.length() == 0) {
                    throw new IllegalArgumentException(""No Index Value"");
                }
                int index = 0;
                try {
                    index = Integer.parseInt(value, 10);
                } catch (final Exception e) {
                    throw new IllegalArgumentException(""Invalid index value '""
                            + value + ""'"");
                }
                return index;
            }
        }
        return -1;
    }","  public void test49()  throws Throwable  {
      DefaultResolver defaultResolver0 = new DefaultResolver();
      int int0 = defaultResolver0.getIndex(""[0],-T/{3[]N"");
}"
1498,"    public int getIndex(final String expression) {
        if (expression == null || expression.length() == 0) {
            return -1;
        }
        for (int i = 0; i < expression.length(); i++) {
            final char c = expression.charAt(i);
            if (c == NESTED || c == MAPPED_START) {
                return -1;
            } else if (c == INDEXED_START) {
                final int end = expression.indexOf(INDEXED_END, i);
                if (end < 0) {
                    throw new IllegalArgumentException(""Missing End Delimiter"");
                }
                final String value = expression.substring(i + 1, end);
                if (value.length() == 0) {
                    throw new IllegalArgumentException(""No Index Value"");
                }
                int index = 0;
                try {
                    index = Integer.parseInt(value, 10);
                } catch (final Exception e) {
                    throw new IllegalArgumentException(""Invalid index value '""
                            + value + ""'"");
                }
                return index;
            }
        }
        return -1;
    }","  public void test50()  throws Throwable  {
      DefaultResolver defaultResolver0 = new DefaultResolver();
      // Undeclared exception!
      try { 
        defaultResolver0.getIndex(""L[].mJ`h9F|2"");
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // No Index Value
         //
         verifyException(""org.apache.commons.beanutils.expression.DefaultResolver"", e);
      }
  }"
1499,"    public int getIndex(final String expression) {
        if (expression == null || expression.length() == 0) {
            return -1;
        }
        for (int i = 0; i < expression.length(); i++) {
            final char c = expression.charAt(i);
            if (c == NESTED || c == MAPPED_START) {
                return -1;
            } else if (c == INDEXED_START) {
                final int end = expression.indexOf(INDEXED_END, i);
                if (end < 0) {
                    throw new IllegalArgumentException(""Missing End Delimiter"");
                }
                final String value = expression.substring(i + 1, end);
                if (value.length() == 0) {
                    throw new IllegalArgumentException(""No Index Value"");
                }
                int index = 0;
                try {
                    index = Integer.parseInt(value, 10);
                } catch (final Exception e) {
                    throw new IllegalArgumentException(""Invalid index value '""
                            + value + ""'"");
                }
                return index;
            }
        }
        return -1;
    }","  public void test51()  throws Throwable  {
      DefaultResolver defaultResolver0 = new DefaultResolver();
      // Undeclared exception!
      try { 
        defaultResolver0.getIndex(""^ckv-[=[`0QOCmZ"");
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Missing End Delimiter
         //
         verifyException(""org.apache.commons.beanutils.expression.DefaultResolver"", e);
      }
  }"
1500,"    public int getIndex(final String expression) {
        if (expression == null || expression.length() == 0) {
            return -1;
        }
        for (int i = 0; i < expression.length(); i++) {
            final char c = expression.charAt(i);
            if (c == NESTED || c == MAPPED_START) {
                return -1;
            } else if (c == INDEXED_START) {
                final int end = expression.indexOf(INDEXED_END, i);
                if (end < 0) {
                    throw new IllegalArgumentException(""Missing End Delimiter"");
                }
                final String value = expression.substring(i + 1, end);
                if (value.length() == 0) {
                    throw new IllegalArgumentException(""No Index Value"");
                }
                int index = 0;
                try {
                    index = Integer.parseInt(value, 10);
                } catch (final Exception e) {
                    throw new IllegalArgumentException(""Invalid index value '""
                            + value + ""'"");
                }
                return index;
            }
        }
        return -1;
    }","  public void test52()  throws Throwable  {
      DefaultResolver defaultResolver0 = new DefaultResolver();
      int int0 = defaultResolver0.getIndex(""0k-.MEV0si9xCUykB*"");
}"
1501,"    public int getIndex(final String expression) {
        if (expression == null || expression.length() == 0) {
            return -1;
        }
        for (int i = 0; i < expression.length(); i++) {
            final char c = expression.charAt(i);
            if (c == NESTED || c == MAPPED_START) {
                return -1;
            } else if (c == INDEXED_START) {
                final int end = expression.indexOf(INDEXED_END, i);
                if (end < 0) {
                    throw new IllegalArgumentException(""Missing End Delimiter"");
                }
                final String value = expression.substring(i + 1, end);
                if (value.length() == 0) {
                    throw new IllegalArgumentException(""No Index Value"");
                }
                int index = 0;
                try {
                    index = Integer.parseInt(value, 10);
                } catch (final Exception e) {
                    throw new IllegalArgumentException(""Invalid index value '""
                            + value + ""'"");
                }
                return index;
            }
        }
        return -1;
    }","  public void test53()  throws Throwable  {
      DefaultResolver defaultResolver0 = new DefaultResolver();
      int int0 = defaultResolver0.getIndex("""");
}"
1502,"    public int getIndex(final String expression) {
        if (expression == null || expression.length() == 0) {
            return -1;
        }
        for (int i = 0; i < expression.length(); i++) {
            final char c = expression.charAt(i);
            if (c == NESTED || c == MAPPED_START) {
                return -1;
            } else if (c == INDEXED_START) {
                final int end = expression.indexOf(INDEXED_END, i);
                if (end < 0) {
                    throw new IllegalArgumentException(""Missing End Delimiter"");
                }
                final String value = expression.substring(i + 1, end);
                if (value.length() == 0) {
                    throw new IllegalArgumentException(""No Index Value"");
                }
                int index = 0;
                try {
                    index = Integer.parseInt(value, 10);
                } catch (final Exception e) {
                    throw new IllegalArgumentException(""Invalid index value '""
                            + value + ""'"");
                }
                return index;
            }
        }
        return -1;
    }","  public void test54()  throws Throwable  {
      DefaultResolver defaultResolver0 = new DefaultResolver();
      int int0 = defaultResolver0.getIndex(""(D,;|&ZrI`'YX{Km]"");
}"
1503,"    public int getIndex(final String expression) {
        if (expression == null || expression.length() == 0) {
            return -1;
        }
        for (int i = 0; i < expression.length(); i++) {
            final char c = expression.charAt(i);
            if (c == NESTED || c == MAPPED_START) {
                return -1;
            } else if (c == INDEXED_START) {
                final int end = expression.indexOf(INDEXED_END, i);
                if (end < 0) {
                    throw new IllegalArgumentException(""Missing End Delimiter"");
                }
                final String value = expression.substring(i + 1, end);
                if (value.length() == 0) {
                    throw new IllegalArgumentException(""No Index Value"");
                }
                int index = 0;
                try {
                    index = Integer.parseInt(value, 10);
                } catch (final Exception e) {
                    throw new IllegalArgumentException(""Invalid index value '""
                            + value + ""'"");
                }
                return index;
            }
        }
        return -1;
    }","  public void test55()  throws Throwable  {
      DefaultResolver defaultResolver0 = new DefaultResolver();
      int int0 = defaultResolver0.getIndex((String) null);
}"
1504,"    public LongConverter() {
        super(false);
    }","  public void test0()  throws Throwable  {
      Long long0 = new Long(0L);
      LongConverter longConverter0 = new LongConverter(long0);
}"
1505,"    protected Class<Long> getDefaultType() {
        return Long.class;
    }","  public void test1()  throws Throwable  {
      LongConverter longConverter0 = new LongConverter();
      Class<Long> class0 = longConverter0.getDefaultType();
}"
1506,"    public LongConverter() {
        super(false);
    }","  public void test2()  throws Throwable  {
      LongConverter longConverter0 = null;
      try {
        longConverter0 = new LongConverter(""]L0{~?mE"");
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // Error converting from 'String' to 'Long' For input string: \""java.lang.String@0000000002\""
         //
         verifyException(""org.apache.commons.beanutils.converters.AbstractConverter"", e);
      }
  }"
1507,"    public SqlDateConverter() {
        super();
    }","  public void test0()  throws Throwable  {
      SqlDateConverter sqlDateConverter0 = new SqlDateConverter((Object) null);
}"
1508,"    public SqlDateConverter() {
        super();
    }","  public void test1()  throws Throwable  {
      SqlDateConverter sqlDateConverter0 = null;
      try {
        sqlDateConverter0 = new SqlDateConverter(""4=I]{cf\""g@-c6LN"");
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // String must be in JDBC format [yyyy-MM-dd] to create a java.sql.Date
         //
         verifyException(""org.apache.commons.beanutils.converters.DateTimeConverter"", e);
      }
  }"
1509,"    protected Class<?> getDefaultType() {
        return Date.class;
    }","  public void test2()  throws Throwable  {
      SqlDateConverter sqlDateConverter0 = new SqlDateConverter();
      Class<?> class0 = sqlDateConverter0.getDefaultType();
}"
1510,"    public DateConverter() {
        super();
    }","  public void test0()  throws Throwable  {
      DateConverter dateConverter0 = new DateConverter((Object) null);
}"
1511,"    public DateConverter() {
        super();
    }","  public void test1()  throws Throwable  {
      Object object0 = new Object();
      DateConverter dateConverter0 = null;
      try {
        dateConverter0 = new DateConverter(object0);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // DateConverter does not support default String to 'Date' conversion.
         //
         verifyException(""org.apache.commons.beanutils.converters.DateTimeConverter"", e);
      }
  }"
1512,"    protected Class<?> getDefaultType() {
        return Date.class;
    }","  public void test2()  throws Throwable  {
      DateConverter dateConverter0 = new DateConverter();
      Class<?> class0 = dateConverter0.getDefaultType();
}"
1513,"    public ArrayConverter(final Class<?> defaultType, final Converter elementConverter) {
        super();
        if (defaultType == null) {
            throw new IllegalArgumentException(""Default type is missing"");
        }
        if (!defaultType.isArray()) {
            throw new IllegalArgumentException(""Default type must be an array."");
        }
        if (elementConverter == null) {
            throw new IllegalArgumentException(""Component Converter is missing."");
        }
        this.defaultType = defaultType;
        this.elementConverter = elementConverter;
    }","  public void test0()  throws Throwable  {
      Class<Object> class0 = Object.class;
      FloatConverter floatConverter0 = new FloatConverter();
      ArrayConverter arrayConverter0 = null;
      try {
        arrayConverter0 = new ArrayConverter(class0, floatConverter0, (-4582));
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Default type must be an array.
         //
         verifyException(""org.apache.commons.beanutils.converters.ArrayConverter"", e);
      }
  }"
1514,"    public ArrayConverter(final Class<?> defaultType, final Converter elementConverter) {
        super();
        if (defaultType == null) {
            throw new IllegalArgumentException(""Default type is missing"");
        }
        if (!defaultType.isArray()) {
            throw new IllegalArgumentException(""Default type must be an array."");
        }
        if (elementConverter == null) {
            throw new IllegalArgumentException(""Component Converter is missing."");
        }
        this.defaultType = defaultType;
        this.elementConverter = elementConverter;
    }","  public void test1()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      Byte byte0 = new Byte((byte) (-13));
      BigIntegerConverter bigIntegerConverter0 = new BigIntegerConverter(byte0);
      ArrayConverter arrayConverter0 = null;
      try {
        arrayConverter0 = new ArrayConverter(class0, bigIntegerConverter0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Default type must be an array.
         //
         verifyException(""org.apache.commons.beanutils.converters.ArrayConverter"", e);
      }
  }"
1515,"    public ArrayConverter(final Class<?> defaultType, final Converter elementConverter) {
        super();
        if (defaultType == null) {
            throw new IllegalArgumentException(""Default type is missing"");
        }
        if (!defaultType.isArray()) {
            throw new IllegalArgumentException(""Default type must be an array."");
        }
        if (elementConverter == null) {
            throw new IllegalArgumentException(""Component Converter is missing."");
        }
        this.defaultType = defaultType;
        this.elementConverter = elementConverter;
    }","  public void test2()  throws Throwable  {
      StringConverter stringConverter0 = new StringConverter();
      ArrayConverter arrayConverter0 = null;
      try {
        arrayConverter0 = new ArrayConverter((Class<?>) null, stringConverter0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Default type is missing
         //
         verifyException(""org.apache.commons.beanutils.converters.ArrayConverter"", e);
      }
  }"
1516,"    protected Class<?> getDefaultType() {
        return Calendar.class;
    }","  public void test0()  throws Throwable  {
      CalendarConverter calendarConverter0 = new CalendarConverter((Object) null);
      Class<?> class0 = calendarConverter0.getDefaultType();
}"
1517,"    public CalendarConverter() {
        super();
    }","  public void test1()  throws Throwable  {
      CalendarConverter calendarConverter0 = null;
      try {
        calendarConverter0 = new CalendarConverter(""=);HZ-s(3"");
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // CalendarConverter does not support default String to 'Calendar' conversion.
         //
         verifyException(""org.apache.commons.beanutils.converters.DateTimeConverter"", e);
      }
  }"
1518,"    public CalendarConverter() {
        super();
    }","  public void test2()  throws Throwable  {
      CalendarConverter calendarConverter0 = new CalendarConverter();
}"
1519,"    protected String convertToString(final Object value) {
        return (value instanceof Class) ? ((Class<?>)value).getName() : value.toString();
    }","  public void test0()  throws Throwable  {
      ClassConverter classConverter0 = new ClassConverter();
      // Undeclared exception!
      try { 
        classConverter0.convertToString((Object) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.evosuite.runtime.System"", e);
      }
  }"
1520,"    public ClassConverter() {
        super();
    }","  public void test1()  throws Throwable  {
      ClassConverter classConverter0 = new ClassConverter((Object) null);
}"
1521,"    protected <T> T convertToType(final Class<T> type, final Object value) throws Throwable {
        if (Class.class.equals(type)) {
            ClassLoader classLoader = Thread.currentThread()
                    .getContextClassLoader();
            if (classLoader != null) {
                try {
                    return type.cast(classLoader.loadClass(value.toString()));
                } catch (final ClassNotFoundException ex) {
                    // Don't fail, carry on and try this class's class loader
                    // (see issue# BEANUTILS-263)
                }
            }

            // Try this class's class loader
            classLoader = ClassConverter.class.getClassLoader();
            return type.cast(classLoader.loadClass(value.toString()));
        }

        throw conversionException(type, value);
    }","  public void test2()  throws Throwable  {
      ClassConverter classConverter0 = new ClassConverter();
      Class<Object> class0 = Object.class;
      try { 
        classConverter0.convertToType(class0, (Object) class0);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // Can't convert value 'class java.lang.Object' to type class java.lang.Object
         //
         verifyException(""org.apache.commons.beanutils.converters.AbstractConverter"", e);
      }
  }"
1522,"    protected String convertToString(final Object value) {
        return (value instanceof Class) ? ((Class<?>)value).getName() : value.toString();
    }","  public void test3()  throws Throwable  {
      ClassConverter classConverter0 = new ClassConverter();
      Class<String> class0 = String.class;
      String string0 = classConverter0.convertToString(class0);
}"
1523,"    public ClassConverter() {
        super();
    }","  public void test4()  throws Throwable  {
      ClassConverter classConverter0 = new ClassConverter();
      ClassConverter classConverter1 = null;
      try {
        classConverter1 = new ClassConverter(classConverter0);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // Error converting from 'ClassConverter' to 'Class' Class 'org/apache/commons/beanutils/converters/ClassConverter@0000000001.class' should be in target project, but could not be found!
         //
         verifyException(""org.apache.commons.beanutils.converters.AbstractConverter"", e);
      }
  }"
1524,"    protected Class<?> getDefaultType() {
        return Class.class;
    }","  public void test5()  throws Throwable  {
      ClassConverter classConverter0 = new ClassConverter();
      Class<?> class0 = classConverter0.getDefaultType();
}"
1525,"    public BigIntegerConverter() {
        super(false);
    }","  public void test0()  throws Throwable  {
      BigIntegerConverter bigIntegerConverter0 = new BigIntegerConverter((Object) null);
}"
1526,"    public BigIntegerConverter() {
        super(false);
    }","  public void test1()  throws Throwable  {
      BigIntegerConverter bigIntegerConverter0 = null;
      try {
        bigIntegerConverter0 = new BigIntegerConverter("""");
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // Error converting from 'String' to 'BigInteger' For input string: \""java.lang\""
         //
         verifyException(""org.apache.commons.beanutils.converters.AbstractConverter"", e);
      }
  }"
1527,"    protected Class<BigInteger> getDefaultType() {
        return BigInteger.class;
    }","  public void test2()  throws Throwable  {
      BigIntegerConverter bigIntegerConverter0 = new BigIntegerConverter();
      Class<BigInteger> class0 = bigIntegerConverter0.getDefaultType();
}"
1528,"    public BigDecimalConverter() {
        super(true);
    }","  public void test0()  throws Throwable  {
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      BigDecimalConverter bigDecimalConverter0 = new BigDecimalConverter(bigDecimal0);
}"
1529,"    protected Class<BigDecimal> getDefaultType() {
        return BigDecimal.class;
    }","  public void test1()  throws Throwable  {
      BigDecimalConverter bigDecimalConverter0 = new BigDecimalConverter();
      Class<BigDecimal> class0 = bigDecimalConverter0.getDefaultType();
}"
1530,"    public BigDecimalConverter() {
        super(true);
    }","  public void test2()  throws Throwable  {
      BigDecimalConverter bigDecimalConverter0 = null;
      try {
        bigDecimalConverter0 = new BigDecimalConverter(""E]-_iv#9`QJ]8X+"");
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // Error converting from 'String' to 'BigDecimal' null
         //
         verifyException(""org.apache.commons.beanutils.converters.AbstractConverter"", e);
      }
  }"
1531,"    public DoubleConverter() {
        super(true);
    }","  public void test0()  throws Throwable  {
      DoubleConverter doubleConverter0 = new DoubleConverter();
}"
1532,"    protected Class<Double> getDefaultType() {
        return Double.class;
    }","  public void test1()  throws Throwable  {
      DoubleConverter doubleConverter0 = new DoubleConverter((Object) null);
      Class<Double> class0 = doubleConverter0.getDefaultType();
}"
1533,"    public DoubleConverter() {
        super(true);
    }","  public void test2()  throws Throwable  {
      Object object0 = new Object();
      DoubleConverter doubleConverter0 = null;
      try {
        doubleConverter0 = new DoubleConverter(object0);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // Error converting from 'Object' to 'Double' For input string: \""java.lang.Object@0000000002\""
         //
         verifyException(""org.apache.commons.beanutils.converters.AbstractConverter"", e);
      }
  }"
1534,"    public <T> T convert(final Class<T> type, Object value) {

        if (type == null) {
            return convertToDefaultType(type, value);
        }

        Class<?> sourceType  = value == null ? null : value.getClass();
        final Class<T> targetType  = ConvertUtils.primitiveToWrapper(type);

        if (log().isDebugEnabled()) {
            log().debug(""Converting""
                    + (value == null ? """" : "" '"" + toString(sourceType) + ""'"")
                    + "" value '"" + value + ""' to type '"" + toString(targetType) + ""'"");
        }

        value = convertArray(value);

        // Missing Value
        if (value == null) {
            return handleMissing(targetType);
        }

        sourceType = value.getClass();

        try {
            // Convert --> String
            if (targetType.equals(String.class)) {
                return targetType.cast(convertToString(value));

            // No conversion necessary
            } else if (targetType.equals(sourceType)) {
                if (log().isDebugEnabled()) {
                    log().debug(""    No conversion required, value is already a ""
                                    + toString(targetType));
                }
                return targetType.cast(value);

            // Convert --> Type
            } else {
                final Object result = convertToType(targetType, value);
                if (log().isDebugEnabled()) {
                    log().debug(""    Converted to "" + toString(targetType) +
                                   "" value '"" + result + ""'"");
                }
                return targetType.cast(result);
            }
        } catch (final Throwable t) {
            return handleError(targetType, value, t);
        }

    }","  public void test0()  throws Throwable  {
      ClassConverter classConverter0 = new ClassConverter();
      classConverter0.setDefaultValue((Object) null);
      Integer integer0 = classConverter0.convert((Class<Integer>) null, (Object) classConverter0);
}"
1535,"    Log log() {
        if (log == null) {
            log = LogFactory.getLog(getClass());
        }
        return log;
    }","  public void test1()  throws Throwable  {
      BooleanConverter booleanConverter0 = new BooleanConverter((Object) null);
      Log log0 = booleanConverter0.log();
}"
1536,"    public boolean isUseDefault() {
        return useDefault;
    }","  public void test2()  throws Throwable  {
      CharacterConverter characterConverter0 = new CharacterConverter();
      boolean boolean0 = characterConverter0.isUseDefault();
}"
1537,"    protected <T> T handleError(final Class<T> type, final Object value, final Throwable cause) {
        if (log().isDebugEnabled()) {
            if (cause instanceof ConversionException) {
                log().debug(""    Conversion threw ConversionException: "" + cause.getMessage());
            } else {
                log().debug(""    Conversion threw "" + cause);
            }
        }

        if (useDefault) {
            return handleMissing(type);
        }

        ConversionException cex = null;
        if (cause instanceof ConversionException) {
            cex = (ConversionException)cause;
            if (log().isDebugEnabled()) {
                log().debug(""    Re-throwing ConversionException: "" + cex.getMessage());
                log().debug(""    "" + DEFAULT_CONFIG_MSG);
            }
        } else {
            final String msg = ""Error converting from '"" + toString(value.getClass()) +
                    ""' to '"" + toString(type) + ""' "" + cause.getMessage();
            cex = new ConversionException(msg, cause);
            if (log().isDebugEnabled()) {
                log().debug(""    Throwing ConversionException: "" + msg);
                log().debug(""    "" + DEFAULT_CONFIG_MSG);
            }
            BeanUtils.initCause(cex, cause);
        }

        throw cex;

    }","  public void test3()  throws Throwable  {
      FileConverter fileConverter0 = new FileConverter((Object) null);
      Class<Object> class0 = Object.class;
      MockThrowable mockThrowable0 = new MockThrowable((Throwable) null);
      ConversionException conversionException0 = new ConversionException(""a}+zn93rY`K7k.l"", mockThrowable0);
      Object object0 = fileConverter0.handleError(class0, (Object) conversionException0, (Throwable) null);
}"
1538,"    protected <T> T handleError(final Class<T> type, final Object value, final Throwable cause) {
        if (log().isDebugEnabled()) {
            if (cause instanceof ConversionException) {
                log().debug(""    Conversion threw ConversionException: "" + cause.getMessage());
            } else {
                log().debug(""    Conversion threw "" + cause);
            }
        }

        if (useDefault) {
            return handleMissing(type);
        }

        ConversionException cex = null;
        if (cause instanceof ConversionException) {
            cex = (ConversionException)cause;
            if (log().isDebugEnabled()) {
                log().debug(""    Re-throwing ConversionException: "" + cex.getMessage());
                log().debug(""    "" + DEFAULT_CONFIG_MSG);
            }
        } else {
            final String msg = ""Error converting from '"" + toString(value.getClass()) +
                    ""' to '"" + toString(type) + ""' "" + cause.getMessage();
            cex = new ConversionException(msg, cause);
            if (log().isDebugEnabled()) {
                log().debug(""    Throwing ConversionException: "" + msg);
                log().debug(""    "" + DEFAULT_CONFIG_MSG);
            }
            BeanUtils.initCause(cex, cause);
        }

        throw cex;

    }","  public void test4()  throws Throwable  {
      StringConverter stringConverter0 = new StringConverter(""G\""[PL{[Zq'Z}U"");
      Class<Object> class0 = Object.class;
      Integer integer0 = new Integer(187);
      MockThrowable mockThrowable0 = new MockThrowable(""B|4!Kuz_i _%.U$ n"");
      Object object0 = stringConverter0.handleError(class0, (Object) integer0, (Throwable) mockThrowable0);
}"
1539,"    public boolean isUseDefault() {
        return useDefault;
    }","  public void test5()  throws Throwable  {
      StringConverter stringConverter0 = new StringConverter();
      Class<String> class0 = String.class;
      stringConverter0.getDefault(class0);
}"
1540,"    protected Object getDefault(final Class<?> type) {
        if (type.equals(String.class)) {
            return null;
        } else  {
            return defaultValue;
        }
    }","  public void test6()  throws Throwable  {
      ConversionException conversionException0 = new ConversionException(""org.apache.commons.beanutils.converters."");
      FileConverter fileConverter0 = new FileConverter(conversionException0);
      Class<ConversionException> class0 = ConversionException.class;
      MockFile mockFile0 = (MockFile)fileConverter0.getDefault(class0);
}"
1541,"    protected String convertToString(final Object value) throws Throwable {
        return value.toString();
    }","  public void test7()  throws Throwable  {
      StringConverter stringConverter0 = new StringConverter((Object) null);
      Class<ConversionException> class0 = ConversionException.class;
      String string0 = stringConverter0.convertToString(class0);
}"
1542,"    public boolean isUseDefault() {
        return useDefault;
    }","  public void test8()  throws Throwable  {
      StringConverter stringConverter0 = new StringConverter();
      stringConverter0.convertArray((Object) null);
}"
1543,"    public boolean isUseDefault() {
        return useDefault;
    }","  public void test9()  throws Throwable  {
      SqlTimestampConverter sqlTimestampConverter0 = new SqlTimestampConverter();
      sqlTimestampConverter0.convertArray("""");
}"
1544,"    protected <T> T handleMissing(final Class<T> type) {

        if (useDefault || type.equals(String.class)) {
            Object value = getDefault(type);
            if (useDefault && value != null && !(type.equals(value.getClass()))) {
                try {
                    value = convertToType(type, defaultValue);
                } catch (final Throwable t) {
                    throw new ConversionException(""Default conversion to "" + toString(type)
                            + "" failed."", t);
                }
            }
            if (log().isDebugEnabled()) {
                log().debug(""    Using default ""
                        + (value == null ? """" : toString(value.getClass()) + "" "")
                        + ""value '"" + defaultValue + ""'"");
            }
            // value is now either null or of the desired target type
            return type.cast(value);
        }

        final ConversionException cex =  new ConversionException(""No value specified for '"" +
                toString(type) + ""'"");
        if (log().isDebugEnabled()) {
            log().debug(""    Throwing ConversionException: "" + cex.getMessage());
            log().debug(""    "" + DEFAULT_CONFIG_MSG);
        }
        throw cex;

    }","  public void test10()  throws Throwable  {
      SqlTimestampConverter sqlTimestampConverter0 = new SqlTimestampConverter();
      Class<ConversionException> class0 = ConversionException.class;
      // Undeclared exception!
      try { 
        sqlTimestampConverter0.handleMissing(class0);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // No value specified for 'org.apache.commons.beanutils.ConversionException'
         //
         verifyException(""org.apache.commons.beanutils.converters.AbstractConverter"", e);
      }
  }"
1545,"    protected <T> T handleMissing(final Class<T> type) {

        if (useDefault || type.equals(String.class)) {
            Object value = getDefault(type);
            if (useDefault && value != null && !(type.equals(value.getClass()))) {
                try {
                    value = convertToType(type, defaultValue);
                } catch (final Throwable t) {
                    throw new ConversionException(""Default conversion to "" + toString(type)
                            + "" failed."", t);
                }
            }
            if (log().isDebugEnabled()) {
                log().debug(""    Using default ""
                        + (value == null ? """" : toString(value.getClass()) + "" "")
                        + ""value '"" + defaultValue + ""'"");
            }
            // value is now either null or of the desired target type
            return type.cast(value);
        }

        final ConversionException cex =  new ConversionException(""No value specified for '"" +
                toString(type) + ""'"");
        if (log().isDebugEnabled()) {
            log().debug(""    Throwing ConversionException: "" + cex.getMessage());
            log().debug(""    "" + DEFAULT_CONFIG_MSG);
        }
        throw cex;

    }","  public void test11()  throws Throwable  {
      CharacterConverter characterConverter0 = new CharacterConverter();
      // Undeclared exception!
      try { 
        characterConverter0.handleMissing((Class<String>) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.beanutils.converters.AbstractConverter"", e);
      }
  }"
1546,"    protected <T> T handleError(final Class<T> type, final Object value, final Throwable cause) {
        if (log().isDebugEnabled()) {
            if (cause instanceof ConversionException) {
                log().debug(""    Conversion threw ConversionException: "" + cause.getMessage());
            } else {
                log().debug(""    Conversion threw "" + cause);
            }
        }

        if (useDefault) {
            return handleMissing(type);
        }

        ConversionException cex = null;
        if (cause instanceof ConversionException) {
            cex = (ConversionException)cause;
            if (log().isDebugEnabled()) {
                log().debug(""    Re-throwing ConversionException: "" + cex.getMessage());
                log().debug(""    "" + DEFAULT_CONFIG_MSG);
            }
        } else {
            final String msg = ""Error converting from '"" + toString(value.getClass()) +
                    ""' to '"" + toString(type) + ""' "" + cause.getMessage();
            cex = new ConversionException(msg, cause);
            if (log().isDebugEnabled()) {
                log().debug(""    Throwing ConversionException: "" + msg);
                log().debug(""    "" + DEFAULT_CONFIG_MSG);
            }
            BeanUtils.initCause(cex, cause);
        }

        throw cex;

    }","  public void test12()  throws Throwable  {
      FileConverter fileConverter0 = new FileConverter();
      Class<Object> class0 = Object.class;
      MockThrowable mockThrowable0 = new MockThrowable((String) null);
      // Undeclared exception!
      try { 
        fileConverter0.handleError(class0, (Object) class0, (Throwable) mockThrowable0);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // Error converting from 'Class' to 'Object' null
         //
         verifyException(""org.apache.commons.beanutils.converters.AbstractConverter"", e);
      }
  }"
1547,"    protected <T> T handleError(final Class<T> type, final Object value, final Throwable cause) {
        if (log().isDebugEnabled()) {
            if (cause instanceof ConversionException) {
                log().debug(""    Conversion threw ConversionException: "" + cause.getMessage());
            } else {
                log().debug(""    Conversion threw "" + cause);
            }
        }

        if (useDefault) {
            return handleMissing(type);
        }

        ConversionException cex = null;
        if (cause instanceof ConversionException) {
            cex = (ConversionException)cause;
            if (log().isDebugEnabled()) {
                log().debug(""    Re-throwing ConversionException: "" + cex.getMessage());
                log().debug(""    "" + DEFAULT_CONFIG_MSG);
            }
        } else {
            final String msg = ""Error converting from '"" + toString(value.getClass()) +
                    ""' to '"" + toString(type) + ""' "" + cause.getMessage();
            cex = new ConversionException(msg, cause);
            if (log().isDebugEnabled()) {
                log().debug(""    Throwing ConversionException: "" + msg);
                log().debug(""    "" + DEFAULT_CONFIG_MSG);
            }
            BeanUtils.initCause(cex, cause);
        }

        throw cex;

    }","  public void test13()  throws Throwable  {
      URLConverter uRLConverter0 = new URLConverter();
      BigIntegerConverter bigIntegerConverter0 = new BigIntegerConverter();
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        bigIntegerConverter0.handleError(class0, (Object) uRLConverter0, (Throwable) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.beanutils.converters.AbstractConverter"", e);
      }
  }"
1548,"    protected Object getDefault(final Class<?> type) {
        if (type.equals(String.class)) {
            return null;
        } else  {
            return defaultValue;
        }
    }","  public void test14()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = """";
      stringArray0[1] = """";
      stringArray0[2] = """";
      BooleanConverter booleanConverter0 = new BooleanConverter(stringArray0, stringArray0);
      // Undeclared exception!
      try { 
        booleanConverter0.getDefault((Class<?>) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.beanutils.converters.AbstractConverter"", e);
      }
  }"
1549,"    protected String convertToString(final Object value) throws Throwable {
        return value.toString();
    }","  public void test15()  throws Throwable  {
      SqlTimeConverter sqlTimeConverter0 = new SqlTimeConverter();
      try { 
        sqlTimeConverter0.convertToString((Object) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.evosuite.runtime.System"", e);
      }
  }"
1550,"    public String toString() {
        return toString(getClass()) + ""[UseDefault="" + useDefault + ""]"";
    }","  public void test16()  throws Throwable  {
      BigDecimalConverter bigDecimalConverter0 = new BigDecimalConverter();
      Class<BigDecimal> class0 = bigDecimalConverter0.getDefaultType();
      String string0 = bigDecimalConverter0.toString(class0);
}"
1551,"    public boolean isUseDefault() {
        return useDefault;
    }","  public void test17()  throws Throwable  {
      BigDecimalConverter bigDecimalConverter0 = new BigDecimalConverter();
      Class<BigDecimal> class0 = bigDecimalConverter0.getDefaultType();
      String string0 = bigDecimalConverter0.toString(class0);
}"
1552,"    public String toString() {
        return toString(getClass()) + ""[UseDefault="" + useDefault + ""]"";
    }","  public void test18()  throws Throwable  {
      ClassConverter classConverter0 = new ClassConverter();
      Class<Locale> class0 = Locale.class;
      String string0 = classConverter0.toString(class0);
}"
1553,"    public boolean isUseDefault() {
        return useDefault;
    }","  public void test19()  throws Throwable  {
      ClassConverter classConverter0 = new ClassConverter();
      Class<Locale> class0 = Locale.class;
      String string0 = classConverter0.toString(class0);
}"
1554,"    public boolean isUseDefault() {
        return useDefault;
    }","  public void test20()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ByteConverter byteConverter0 = new ByteConverter();
      String string0 = byteConverter0.toString(class0);
}"
1555,"    public String toString() {
        return toString(getClass()) + ""[UseDefault="" + useDefault + ""]"";
    }","  public void test21()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ByteConverter byteConverter0 = new ByteConverter();
      String string0 = byteConverter0.toString(class0);
}"
1556,"    public <T> T convert(final Class<T> type, Object value) {

        if (type == null) {
            return convertToDefaultType(type, value);
        }

        Class<?> sourceType  = value == null ? null : value.getClass();
        final Class<T> targetType  = ConvertUtils.primitiveToWrapper(type);

        if (log().isDebugEnabled()) {
            log().debug(""Converting""
                    + (value == null ? """" : "" '"" + toString(sourceType) + ""'"")
                    + "" value '"" + value + ""' to type '"" + toString(targetType) + ""'"");
        }

        value = convertArray(value);

        // Missing Value
        if (value == null) {
            return handleMissing(targetType);
        }

        sourceType = value.getClass();

        try {
            // Convert --> String
            if (targetType.equals(String.class)) {
                return targetType.cast(convertToString(value));

            // No conversion necessary
            } else if (targetType.equals(sourceType)) {
                if (log().isDebugEnabled()) {
                    log().debug(""    No conversion required, value is already a ""
                                    + toString(targetType));
                }
                return targetType.cast(value);

            // Convert --> Type
            } else {
                final Object result = convertToType(targetType, value);
                if (log().isDebugEnabled()) {
                    log().debug(""    Converted to "" + toString(targetType) +
                                   "" value '"" + result + ""'"");
                }
                return targetType.cast(result);
            }
        } catch (final Throwable t) {
            return handleError(targetType, value, t);
        }

    }","  public void test22()  throws Throwable  {
      StringConverter stringConverter0 = new StringConverter((Object) null);
      Class<String> class0 = String.class;
      Class<Object> class1 = Object.class;
      Object object0 = stringConverter0.convert(class1, (Object) class0);
}"
1557,"    public boolean isUseDefault() {
        return useDefault;
    }","  public void test23()  throws Throwable  {
      SqlDateConverter sqlDateConverter0 = new SqlDateConverter();
      Class<Object> class0 = Object.class;
      Object object0 = new Object();
      sqlDateConverter0.convert(class0, object0);
}"
1558,"    public boolean isUseDefault() {
        return useDefault;
    }","  public void test24()  throws Throwable  {
      Class<Object> class0 = Object.class;
      IntegerConverter integerConverter0 = new IntegerConverter();
      Class<String> class1 = String.class;
      integerConverter0.convert(class1, (Object) class0);
}"
1559,"    public <T> T convert(final Class<T> type, Object value) {

        if (type == null) {
            return convertToDefaultType(type, value);
        }

        Class<?> sourceType  = value == null ? null : value.getClass();
        final Class<T> targetType  = ConvertUtils.primitiveToWrapper(type);

        if (log().isDebugEnabled()) {
            log().debug(""Converting""
                    + (value == null ? """" : "" '"" + toString(sourceType) + ""'"")
                    + "" value '"" + value + ""' to type '"" + toString(targetType) + ""'"");
        }

        value = convertArray(value);

        // Missing Value
        if (value == null) {
            return handleMissing(targetType);
        }

        sourceType = value.getClass();

        try {
            // Convert --> String
            if (targetType.equals(String.class)) {
                return targetType.cast(convertToString(value));

            // No conversion necessary
            } else if (targetType.equals(sourceType)) {
                if (log().isDebugEnabled()) {
                    log().debug(""    No conversion required, value is already a ""
                                    + toString(targetType));
                }
                return targetType.cast(value);

            // Convert --> Type
            } else {
                final Object result = convertToType(targetType, value);
                if (log().isDebugEnabled()) {
                    log().debug(""    Converted to "" + toString(targetType) +
                                   "" value '"" + result + ""'"");
                }
                return targetType.cast(result);
            }
        } catch (final Throwable t) {
            return handleError(targetType, value, t);
        }

    }","  public void test25()  throws Throwable  {
      ClassConverter classConverter0 = new ClassConverter();
      Class<Integer> class0 = Integer.class;
      // Undeclared exception!
      try { 
        classConverter0.convert(class0, (Object) null);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // No value specified for 'Integer'
         //
         verifyException(""org.apache.commons.beanutils.converters.AbstractConverter"", e);
      }
  }"
1560,"    public String toString() {
        return toString(getClass()) + ""[UseDefault="" + useDefault + ""]"";
    }","  public void test26()  throws Throwable  {
      StringConverter stringConverter0 = new StringConverter("""");
      String string0 = stringConverter0.toString((Class<?>) null);
}"
1561,"    protected <T> T handleMissing(final Class<T> type) {

        if (useDefault || type.equals(String.class)) {
            Object value = getDefault(type);
            if (useDefault && value != null && !(type.equals(value.getClass()))) {
                try {
                    value = convertToType(type, defaultValue);
                } catch (final Throwable t) {
                    throw new ConversionException(""Default conversion to "" + toString(type)
                            + "" failed."", t);
                }
            }
            if (log().isDebugEnabled()) {
                log().debug(""    Using default ""
                        + (value == null ? """" : toString(value.getClass()) + "" "")
                        + ""value '"" + defaultValue + ""'"");
            }
            // value is now either null or of the desired target type
            return type.cast(value);
        }

        final ConversionException cex =  new ConversionException(""No value specified for '"" +
                toString(type) + ""'"");
        if (log().isDebugEnabled()) {
            log().debug(""    Throwing ConversionException: "" + cex.getMessage());
            log().debug(""    "" + DEFAULT_CONFIG_MSG);
        }
        throw cex;

    }","  public void test27()  throws Throwable  {
      IntegerConverter integerConverter0 = new IntegerConverter();
      Class<Integer> class0 = Integer.class;
      Integer integer0 = new Integer(1878);
      integerConverter0.setDefaultValue(integer0);
      Integer integer1 = integerConverter0.handleMissing(class0);
}"
1562,"    public boolean isUseDefault() {
        return useDefault;
    }","  public void test28()  throws Throwable  {
      SqlTimestampConverter sqlTimestampConverter0 = new SqlTimestampConverter();
      Class<String> class0 = String.class;
      sqlTimestampConverter0.handleMissing(class0);
}"
1563,"    protected void setDefaultValue(final Object defaultValue) {
        useDefault = false;
        if (log().isDebugEnabled()) {
            log().debug(""Setting default value: "" + defaultValue);
        }
        if (defaultValue == null) {
           this.defaultValue  = null;
        } else {
           this.defaultValue  = convert(getDefaultType(), defaultValue);
        }
        useDefault = true;
    }","  public void test29()  throws Throwable  {
      IntegerConverter integerConverter0 = new IntegerConverter();
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        integerConverter0.setDefaultValue(object0);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // Error converting from 'Object' to 'Integer' For input string: \""java.lang.Object@0000000003\""
         //
         verifyException(""org.apache.commons.beanutils.converters.AbstractConverter"", e);
      }
  }"
1564,"    public <T> T convert(final Class<T> type, Object value) {

        if (type == null) {
            return convertToDefaultType(type, value);
        }

        Class<?> sourceType  = value == null ? null : value.getClass();
        final Class<T> targetType  = ConvertUtils.primitiveToWrapper(type);

        if (log().isDebugEnabled()) {
            log().debug(""Converting""
                    + (value == null ? """" : "" '"" + toString(sourceType) + ""'"")
                    + "" value '"" + value + ""' to type '"" + toString(targetType) + ""'"");
        }

        value = convertArray(value);

        // Missing Value
        if (value == null) {
            return handleMissing(targetType);
        }

        sourceType = value.getClass();

        try {
            // Convert --> String
            if (targetType.equals(String.class)) {
                return targetType.cast(convertToString(value));

            // No conversion necessary
            } else if (targetType.equals(sourceType)) {
                if (log().isDebugEnabled()) {
                    log().debug(""    No conversion required, value is already a ""
                                    + toString(targetType));
                }
                return targetType.cast(value);

            // Convert --> Type
            } else {
                final Object result = convertToType(targetType, value);
                if (log().isDebugEnabled()) {
                    log().debug(""    Converted to "" + toString(targetType) +
                                   "" value '"" + result + ""'"");
                }
                return targetType.cast(result);
            }
        } catch (final Throwable t) {
            return handleError(targetType, value, t);
        }

    }","  public void test30()  throws Throwable  {
      FileConverter fileConverter0 = new FileConverter("""");
      Class<ConversionException> class0 = ConversionException.class;
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        fileConverter0.convert(class0, object0);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // Default conversion to org.apache.commons.beanutils.ConversionException failed.
         //
         verifyException(""org.apache.commons.beanutils.converters.AbstractConverter"", e);
      }
  }"
1565,,"  public void test31()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      linkedList0.add((Locale.LanguageRange) null);
      FloatConverter floatConverter0 = null;
      try {
        floatConverter0 = new FloatConverter(linkedList0);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // No value specified for 'Float'
         //
         verifyException(""org.apache.commons.beanutils.converters.AbstractConverter"", e);
      }
  }"
1566,,"  public void test32()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      FloatConverter floatConverter0 = null;
      try {
        floatConverter0 = new FloatConverter(linkedList0);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // No value specified for 'Float'
         //
         verifyException(""org.apache.commons.beanutils.converters.AbstractConverter"", e);
      }
  }"
1567,"    public boolean isUseDefault() {
        return useDefault;
    }","  public void test33()  throws Throwable  {
      ConversionException conversionException0 = new ConversionException(""org.apache.commons.beanutils.converters."");
      FileConverter fileConverter0 = new FileConverter(conversionException0);
      boolean boolean0 = fileConverter0.isUseDefault();
}"
1568,"    public String toString() {
        return toString(getClass()) + ""[UseDefault="" + useDefault + ""]"";
    }","  public void test34()  throws Throwable  {
      BooleanConverter booleanConverter0 = new BooleanConverter();
      String string0 = booleanConverter0.toString();
}"
1569,"    public boolean isUseDefault() {
        return useDefault;
    }","  public void test35()  throws Throwable  {
      ConversionException conversionException0 = new ConversionException(""org.apache.commons.beanutils.converters."");
      FileConverter fileConverter0 = new FileConverter(conversionException0);
      Class<Object> class0 = Object.class;
      fileConverter0.conversionException(class0, (Object) null);
}"
1570,,"  public void test36()  throws Throwable  {
      ConversionException conversionException0 = new ConversionException(""BooleanConverter[UseDefault=false]"");
      CalendarConverter calendarConverter0 = null;
      try {
        calendarConverter0 = new CalendarConverter(conversionException0);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // CalendarConverter does not support default String to 'Calendar' conversion.
         //
         verifyException(""org.apache.commons.beanutils.converters.DateTimeConverter"", e);
      }
  }"
1571,"    protected Class<Float> getDefaultType() {
        return Float.class;
    }","  public void test0()  throws Throwable  {
      FloatConverter floatConverter0 = new FloatConverter();
      Class<Float> class0 = floatConverter0.getDefaultType();
}"
1572,"    public FloatConverter() {
        super(true);
    }","  public void test1()  throws Throwable  {
      FloatConverter floatConverter0 = new FloatConverter((Object) null);
}"
1573,"    public FloatConverter() {
        super(true);
    }","  public void test2()  throws Throwable  {
      Object object0 = new Object();
      FloatConverter floatConverter0 = null;
      try {
        floatConverter0 = new FloatConverter(object0);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // Error converting from 'Object' to 'Float' For input string: \""java.lang.Object@0000000002\""
         //
         verifyException(""org.apache.commons.beanutils.converters.AbstractConverter"", e);
      }
  }"
1574,"    public Object convert(final Class type, final Object value) {

        // Deal with a null value
        if (value == null) {
            if (useDefault) {
                return (defaultValue);
            } else {
                throw new ConversionException(""No value specified"");
            }
        }

        // Deal with the no-conversion-needed case
        if (MODEL.getClass() == value.getClass()) {
            return (value);
        }

        // Deal with the input value as an int array
        if (INT_MODEL.getClass() == value.getClass())
        {
            final int[] values = (int[]) value;
            final String[] results = new String[values.length];
            for (int i = 0; i < values.length; i++)
            {
                results[i] = Integer.toString(values[i]);
            }

            return (results);
        }

        // Parse the input value as a String into elements
        // and convert to the appropriate type
        try {
            final List list = parseElements(value.toString());
            final String[] results = new String[list.size()];
            for (int i = 0; i < results.length; i++) {
                results[i] = (String) list.get(i);
            }
            return (results);
        } catch (final Exception e) {
            if (useDefault) {
                return (defaultValue);
            } else {
                throw new ConversionException(value.toString(), e);
            }
        }
    }","  public void test0()  throws Throwable  {
      StringArrayConverter stringArrayConverter0 = new StringArrayConverter((Object) null);
      Class<Object> class0 = Object.class;
      Object object0 = stringArrayConverter0.convert(class0, class0);
      Object object1 = stringArrayConverter0.convert(class0, object0);
}"
1575,"    public Object convert(final Class type, final Object value) {

        // Deal with a null value
        if (value == null) {
            if (useDefault) {
                return (defaultValue);
            } else {
                throw new ConversionException(""No value specified"");
            }
        }

        // Deal with the no-conversion-needed case
        if (MODEL.getClass() == value.getClass()) {
            return (value);
        }

        // Deal with the input value as an int array
        if (INT_MODEL.getClass() == value.getClass())
        {
            final int[] values = (int[]) value;
            final String[] results = new String[values.length];
            for (int i = 0; i < values.length; i++)
            {
                results[i] = Integer.toString(values[i]);
            }

            return (results);
        }

        // Parse the input value as a String into elements
        // and convert to the appropriate type
        try {
            final List list = parseElements(value.toString());
            final String[] results = new String[list.size()];
            for (int i = 0; i < results.length; i++) {
                results[i] = (String) list.get(i);
            }
            return (results);
        } catch (final Exception e) {
            if (useDefault) {
                return (defaultValue);
            } else {
                throw new ConversionException(value.toString(), e);
            }
        }
    }","  public void test1()  throws Throwable  {
      StringArrayConverter stringArrayConverter0 = new StringArrayConverter((Object) null);
      Class<Object> class0 = Object.class;
      Object object0 = stringArrayConverter0.convert(class0, class0);
      Object object1 = stringArrayConverter0.convert(class0, object0);
}"
1576,"    public Object convert(final Class type, final Object value) {

        // Deal with a null value
        if (value == null) {
            if (useDefault) {
                return (defaultValue);
            } else {
                throw new ConversionException(""No value specified"");
            }
        }

        // Deal with the no-conversion-needed case
        if (MODEL.getClass() == value.getClass()) {
            return (value);
        }

        // Deal with the input value as an int array
        if (INT_MODEL.getClass() == value.getClass())
        {
            final int[] values = (int[]) value;
            final String[] results = new String[values.length];
            for (int i = 0; i < values.length; i++)
            {
                results[i] = Integer.toString(values[i]);
            }

            return (results);
        }

        // Parse the input value as a String into elements
        // and convert to the appropriate type
        try {
            final List list = parseElements(value.toString());
            final String[] results = new String[list.size()];
            for (int i = 0; i < results.length; i++) {
                results[i] = (String) list.get(i);
            }
            return (results);
        } catch (final Exception e) {
            if (useDefault) {
                return (defaultValue);
            } else {
                throw new ConversionException(value.toString(), e);
            }
        }
    }","  public void test2()  throws Throwable  {
      Class<String> class0 = String.class;
      StringArrayConverter stringArrayConverter0 = new StringArrayConverter();
      // Undeclared exception!
      try { 
        stringArrayConverter0.convert(class0, (Object) null);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // No value specified
         //
         verifyException(""org.apache.commons.beanutils.converters.StringArrayConverter"", e);
      }
  }"
1577,"    public Object convert(final Class type, final Object value) {

        // Deal with a null value
        if (value == null) {
            if (useDefault) {
                return (defaultValue);
            } else {
                throw new ConversionException(""No value specified"");
            }
        }

        // Deal with the no-conversion-needed case
        if (MODEL.getClass() == value.getClass()) {
            return (value);
        }

        // Deal with the input value as an int array
        if (INT_MODEL.getClass() == value.getClass())
        {
            final int[] values = (int[]) value;
            final String[] results = new String[values.length];
            for (int i = 0; i < values.length; i++)
            {
                results[i] = Integer.toString(values[i]);
            }

            return (results);
        }

        // Parse the input value as a String into elements
        // and convert to the appropriate type
        try {
            final List list = parseElements(value.toString());
            final String[] results = new String[list.size()];
            for (int i = 0; i < results.length; i++) {
                results[i] = (String) list.get(i);
            }
            return (results);
        } catch (final Exception e) {
            if (useDefault) {
                return (defaultValue);
            } else {
                throw new ConversionException(value.toString(), e);
            }
        }
    }","  public void test3()  throws Throwable  {
      StringArrayConverter stringArrayConverter0 = new StringArrayConverter((Object) null);
      Class<Object> class0 = Object.class;
      Object object0 = stringArrayConverter0.convert(class0, (Object) null);
}"
1578,"    protected <T> T convertToType(final Class<T> targetType, final Object value) throws Exception {

        final Class<?> sourceType = value.getClass();

        // Handle java.sql.Timestamp
        if (value instanceof java.sql.Timestamp) {

            // ---------------------- JDK 1.3 Fix ----------------------
            // N.B. Prior to JDK 1.4 the Timestamp's getTime() method
            //      didn't include the milliseconds. The following code
            //      ensures it works consistently accross JDK versions
            final java.sql.Timestamp timestamp = (java.sql.Timestamp)value;
            long timeInMillis = ((timestamp.getTime() / 1000) * 1000);
            timeInMillis += timestamp.getNanos() / 1000000;
            // ---------------------- JDK 1.3 Fix ----------------------
            return toDate(targetType, timeInMillis);
        }

        // Handle Date (includes java.sql.Date & java.sql.Time)
        if (value instanceof Date) {
            final Date date = (Date)value;
            return toDate(targetType, date.getTime());
        }

        // Handle Calendar
        if (value instanceof Calendar) {
            final Calendar calendar = (Calendar)value;
            return toDate(targetType, calendar.getTime().getTime());
        }

        // Handle Long
        if (value instanceof Long) {
            final Long longObj = (Long)value;
            return toDate(targetType, longObj.longValue());
        }

        // Convert all other types to String & handle
        final String stringValue = value.toString().trim();
        if (stringValue.length() == 0) {
            return handleMissing(targetType);
        }

        // Parse the Date/Time
        if (useLocaleFormat) {
            Calendar calendar = null;
            if (patterns != null && patterns.length > 0) {
                calendar = parse(sourceType, targetType, stringValue);
            } else {
                final DateFormat format = getFormat(locale, timeZone);
                calendar = parse(sourceType, targetType, stringValue, format);
            }
            if (Calendar.class.isAssignableFrom(targetType)) {
                return targetType.cast(calendar);
            } else {
                return toDate(targetType, calendar.getTime().getTime());
            }
        }

        // Default String conversion
        return toDate(targetType, stringValue);

    }","  public void test0()  throws Throwable  {
      SqlTimeConverter sqlTimeConverter0 = new SqlTimeConverter();
      Class<Timestamp> class0 = Timestamp.class;
      String[] stringArray0 = new String[9];
      stringArray0[1] = ""X"";
      sqlTimeConverter0.setPatterns(stringArray0);
      try { 
        sqlTimeConverter0.convertToType(class0, (Object) class0);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // Error converting 'Class' to 'java.sql.Timestamp' using  patterns 'null, X, null, null, null, null, null, null, null'
         //
         verifyException(""org.apache.commons.beanutils.converters.DateTimeConverter"", e);
      }
  }"
1579,"    public TimeZone getTimeZone() {
        return timeZone;
    }","  public void test1()  throws Throwable  {
      DateConverter dateConverter0 = new DateConverter();
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-197), ""\""1me"");
      dateConverter0.setTimeZone(simpleTimeZone0);
      TimeZone timeZone0 = dateConverter0.getTimeZone();
}"
1580,"    public String toString() {
        final StringBuilder buffer = new StringBuilder();
        buffer.append(toString(getClass()));
        buffer.append(""[UseDefault="");
        buffer.append(isUseDefault());
        buffer.append("", UseLocaleFormat="");
        buffer.append(useLocaleFormat);
        if (displayPatterns != null) {
            buffer.append("", Patterns={"");
            buffer.append(displayPatterns);
            buffer.append('}');
        }
        if (locale != null) {
            buffer.append("", Locale="");
            buffer.append(locale);
        }
        if (timeZone != null) {
            buffer.append("", TimeZone="");
            buffer.append(timeZone);
        }
        buffer.append(']');
        return buffer.toString();
    }","  public void test2()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-4427), 65, 65, (-4427), (-4427));
      SqlTimeConverter sqlTimeConverter0 = new SqlTimeConverter(mockGregorianCalendar0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(65, """");
      sqlTimeConverter0.setTimeZone(simpleTimeZone0);
      TimeZone timeZone0 = sqlTimeConverter0.getTimeZone();
}"
1581,"    public String[] getPatterns() {
        return patterns;
    }","  public void test3()  throws Throwable  {
      DateConverter dateConverter0 = new DateConverter();
      String[] stringArray0 = new String[1];
      dateConverter0.setPatterns(stringArray0);
      String[] stringArray1 = dateConverter0.getPatterns();
}"
1582,"    public String[] getPatterns() {
        return patterns;
    }","  public void test4()  throws Throwable  {
      DateConverter dateConverter0 = new DateConverter();
      String[] stringArray0 = new String[0];
      dateConverter0.setPatterns(stringArray0);
      String[] stringArray1 = dateConverter0.getPatterns();
}"
1583,"    public Locale getLocale() {
        return locale;
    }","  public void test5()  throws Throwable  {
      DateConverter dateConverter0 = new DateConverter();
      Locale locale0 = Locale.KOREAN;
      dateConverter0.setLocale(locale0);
      Locale locale1 = dateConverter0.getLocale();
}"
1584,"    public String toString() {
        final StringBuilder buffer = new StringBuilder();
        buffer.append(toString(getClass()));
        buffer.append(""[UseDefault="");
        buffer.append(isUseDefault());
        buffer.append("", UseLocaleFormat="");
        buffer.append(useLocaleFormat);
        if (displayPatterns != null) {
            buffer.append("", Patterns={"");
            buffer.append(displayPatterns);
            buffer.append('}');
        }
        if (locale != null) {
            buffer.append("", Locale="");
            buffer.append(locale);
        }
        if (timeZone != null) {
            buffer.append("", TimeZone="");
            buffer.append(timeZone);
        }
        buffer.append(']');
        return buffer.toString();
    }","  public void test6()  throws Throwable  {
      SqlDateConverter sqlDateConverter0 = new SqlDateConverter();
      Class<Time> class0 = Time.class;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      Time time0 = sqlDateConverter0.convertToType(class0, (Object) mockGregorianCalendar0);
}"
1585,"    protected <T> T convertToType(final Class<T> targetType, final Object value) throws Exception {

        final Class<?> sourceType = value.getClass();

        // Handle java.sql.Timestamp
        if (value instanceof java.sql.Timestamp) {

            // ---------------------- JDK 1.3 Fix ----------------------
            // N.B. Prior to JDK 1.4 the Timestamp's getTime() method
            //      didn't include the milliseconds. The following code
            //      ensures it works consistently accross JDK versions
            final java.sql.Timestamp timestamp = (java.sql.Timestamp)value;
            long timeInMillis = ((timestamp.getTime() / 1000) * 1000);
            timeInMillis += timestamp.getNanos() / 1000000;
            // ---------------------- JDK 1.3 Fix ----------------------
            return toDate(targetType, timeInMillis);
        }

        // Handle Date (includes java.sql.Date & java.sql.Time)
        if (value instanceof Date) {
            final Date date = (Date)value;
            return toDate(targetType, date.getTime());
        }

        // Handle Calendar
        if (value instanceof Calendar) {
            final Calendar calendar = (Calendar)value;
            return toDate(targetType, calendar.getTime().getTime());
        }

        // Handle Long
        if (value instanceof Long) {
            final Long longObj = (Long)value;
            return toDate(targetType, longObj.longValue());
        }

        // Convert all other types to String & handle
        final String stringValue = value.toString().trim();
        if (stringValue.length() == 0) {
            return handleMissing(targetType);
        }

        // Parse the Date/Time
        if (useLocaleFormat) {
            Calendar calendar = null;
            if (patterns != null && patterns.length > 0) {
                calendar = parse(sourceType, targetType, stringValue);
            } else {
                final DateFormat format = getFormat(locale, timeZone);
                calendar = parse(sourceType, targetType, stringValue, format);
            }
            if (Calendar.class.isAssignableFrom(targetType)) {
                return targetType.cast(calendar);
            } else {
                return toDate(targetType, calendar.getTime().getTime());
            }
        }

        // Default String conversion
        return toDate(targetType, stringValue);

    }","  public void test7()  throws Throwable  {
      SqlDateConverter sqlDateConverter0 = new SqlDateConverter();
      Class<MockCalendar> class0 = MockCalendar.class;
      try { 
        sqlDateConverter0.convertToType(class0, (Object) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.beanutils.converters.DateTimeConverter"", e);
      }
  }"
1586,"    protected String convertToString(final Object value) throws Throwable {

        Date date = null;
        if (value instanceof Date) {
            date = (Date)value;
        } else if (value instanceof Calendar) {
            date = ((Calendar)value).getTime();
        } else if (value instanceof Long) {
            date = new Date(((Long)value).longValue());
        }

        String result = null;
        if (useLocaleFormat && date != null) {
            DateFormat format = null;
            if (patterns != null && patterns.length > 0) {
                format = getFormat(patterns[0]);
            } else {
                format = getFormat(locale, timeZone);
            }
            logFormat(""Formatting"", format);
            result = format.format(date);
            if (log().isDebugEnabled()) {
                log().debug(""    Converted  to String using format '"" + result + ""'"");
            }
        } else {
            result = value.toString();
            if (log().isDebugEnabled()) {
                log().debug(""    Converted  to String using toString() '"" + result + ""'"");
             }
        }
        return result;
    }","  public void test8()  throws Throwable  {
      SqlTimeConverter sqlTimeConverter0 = new SqlTimeConverter();
      try { 
        sqlTimeConverter0.convertToString((Object) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.evosuite.runtime.System"", e);
      }
  }"
1587,"    protected String convertToString(final Object value) throws Throwable {

        Date date = null;
        if (value instanceof Date) {
            date = (Date)value;
        } else if (value instanceof Calendar) {
            date = ((Calendar)value).getTime();
        } else if (value instanceof Long) {
            date = new Date(((Long)value).longValue());
        }

        String result = null;
        if (useLocaleFormat && date != null) {
            DateFormat format = null;
            if (patterns != null && patterns.length > 0) {
                format = getFormat(patterns[0]);
            } else {
                format = getFormat(locale, timeZone);
            }
            logFormat(""Formatting"", format);
            result = format.format(date);
            if (log().isDebugEnabled()) {
                log().debug(""    Converted  to String using format '"" + result + ""'"");
            }
        } else {
            result = value.toString();
            if (log().isDebugEnabled()) {
                log().debug(""    Converted  to String using toString() '"" + result + ""'"");
             }
        }
        return result;
    }","  public void test9()  throws Throwable  {
      DateConverter dateConverter0 = new DateConverter();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      String[] stringArray0 = new String[5];
      stringArray0[0] = ""    (N.B. Converters can be configured to use default values to avoid throwing exceptions)"";
      dateConverter0.setPatterns(stringArray0);
      try { 
        dateConverter0.convertToString(mockGregorianCalendar0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern character 'N'
         //
         verifyException(""java.text.SimpleDateFormat"", e);
      }
  }"
1588,"    public String toString() {
        final StringBuilder buffer = new StringBuilder();
        buffer.append(toString(getClass()));
        buffer.append(""[UseDefault="");
        buffer.append(isUseDefault());
        buffer.append("", UseLocaleFormat="");
        buffer.append(useLocaleFormat);
        if (displayPatterns != null) {
            buffer.append("", Patterns={"");
            buffer.append(displayPatterns);
            buffer.append('}');
        }
        if (locale != null) {
            buffer.append("", Locale="");
            buffer.append(locale);
        }
        if (timeZone != null) {
            buffer.append("", TimeZone="");
            buffer.append(timeZone);
        }
        buffer.append(']');
        return buffer.toString();
    }","  public void test10()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      SqlTimeConverter sqlTimeConverter0 = new SqlTimeConverter(mockGregorianCalendar0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-6), "">TI"");
      sqlTimeConverter0.setTimeZone(simpleTimeZone0);
      String string0 = sqlTimeConverter0.toString();
}"
1589,"    public String toString() {
        final StringBuilder buffer = new StringBuilder();
        buffer.append(toString(getClass()));
        buffer.append(""[UseDefault="");
        buffer.append(isUseDefault());
        buffer.append("", UseLocaleFormat="");
        buffer.append(useLocaleFormat);
        if (displayPatterns != null) {
            buffer.append("", Patterns={"");
            buffer.append(displayPatterns);
            buffer.append('}');
        }
        if (locale != null) {
            buffer.append("", Locale="");
            buffer.append(locale);
        }
        if (timeZone != null) {
            buffer.append("", TimeZone="");
            buffer.append(timeZone);
        }
        buffer.append(']');
        return buffer.toString();
    }","  public void test11()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      SqlTimeConverter sqlTimeConverter0 = new SqlTimeConverter(mockGregorianCalendar0);
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      sqlTimeConverter0.setLocale(locale0);
      String string0 = sqlTimeConverter0.toString();
}"
1590,"    public String toString() {
        final StringBuilder buffer = new StringBuilder();
        buffer.append(toString(getClass()));
        buffer.append(""[UseDefault="");
        buffer.append(isUseDefault());
        buffer.append("", UseLocaleFormat="");
        buffer.append(useLocaleFormat);
        if (displayPatterns != null) {
            buffer.append("", Patterns={"");
            buffer.append(displayPatterns);
            buffer.append('}');
        }
        if (locale != null) {
            buffer.append("", Locale="");
            buffer.append(locale);
        }
        if (timeZone != null) {
            buffer.append("", TimeZone="");
            buffer.append(timeZone);
        }
        buffer.append(']');
        return buffer.toString();
    }","  public void test12()  throws Throwable  {
      SqlTimestampConverter sqlTimestampConverter0 = new SqlTimestampConverter();
      String[] stringArray0 = new String[4];
      sqlTimestampConverter0.setPatterns(stringArray0);
      String string0 = sqlTimestampConverter0.toString();
}"
1591,"    protected <T> T convertToType(final Class<T> targetType, final Object value) throws Exception {

        final Class<?> sourceType = value.getClass();

        // Handle java.sql.Timestamp
        if (value instanceof java.sql.Timestamp) {

            // ---------------------- JDK 1.3 Fix ----------------------
            // N.B. Prior to JDK 1.4 the Timestamp's getTime() method
            //      didn't include the milliseconds. The following code
            //      ensures it works consistently accross JDK versions
            final java.sql.Timestamp timestamp = (java.sql.Timestamp)value;
            long timeInMillis = ((timestamp.getTime() / 1000) * 1000);
            timeInMillis += timestamp.getNanos() / 1000000;
            // ---------------------- JDK 1.3 Fix ----------------------
            return toDate(targetType, timeInMillis);
        }

        // Handle Date (includes java.sql.Date & java.sql.Time)
        if (value instanceof Date) {
            final Date date = (Date)value;
            return toDate(targetType, date.getTime());
        }

        // Handle Calendar
        if (value instanceof Calendar) {
            final Calendar calendar = (Calendar)value;
            return toDate(targetType, calendar.getTime().getTime());
        }

        // Handle Long
        if (value instanceof Long) {
            final Long longObj = (Long)value;
            return toDate(targetType, longObj.longValue());
        }

        // Convert all other types to String & handle
        final String stringValue = value.toString().trim();
        if (stringValue.length() == 0) {
            return handleMissing(targetType);
        }

        // Parse the Date/Time
        if (useLocaleFormat) {
            Calendar calendar = null;
            if (patterns != null && patterns.length > 0) {
                calendar = parse(sourceType, targetType, stringValue);
            } else {
                final DateFormat format = getFormat(locale, timeZone);
                calendar = parse(sourceType, targetType, stringValue, format);
            }
            if (Calendar.class.isAssignableFrom(targetType)) {
                return targetType.cast(calendar);
            } else {
                return toDate(targetType, calendar.getTime().getTime());
            }
        }

        // Default String conversion
        return toDate(targetType, stringValue);

    }","  public void test13()  throws Throwable  {
      SqlTimeConverter sqlTimeConverter0 = new SqlTimeConverter();
      TimeZone timeZone0 = TimeZone.getTimeZone("""");
      sqlTimeConverter0.setTimeZone(timeZone0);
      String[] stringArray0 = new String[3];
      stringArray0[1] = """";
      sqlTimeConverter0.setPatterns(stringArray0);
      Class<?> class0 = sqlTimeConverter0.getDefaultType();
      Class<Time> class1 = Time.class;
      try { 
        sqlTimeConverter0.convertToType(class1, (Object) class0);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // Error converting 'Class' to 'java.sql.Time' using  patterns 'null, , null'
         //
         verifyException(""org.apache.commons.beanutils.converters.DateTimeConverter"", e);
      }
  }"
1592,"    protected DateFormat getFormat(final Locale locale, final TimeZone timeZone) {
        DateFormat format = null;
        if (locale == null) {
            format = DateFormat.getDateInstance(DateFormat.SHORT);
        } else {
            format = DateFormat.getDateInstance(DateFormat.SHORT, locale);
        }
        if (timeZone != null) {
            format.setTimeZone(timeZone);
        }
        return format;
    }","  public void test14()  throws Throwable  {
      DateConverter dateConverter0 = new DateConverter();
      Locale locale0 = Locale.FRANCE;
      SimpleDateFormat simpleDateFormat0 = (SimpleDateFormat)dateConverter0.getFormat(locale0, (TimeZone) null);
}"
1593,,"  public void test15()  throws Throwable  {
      CalendarConverter calendarConverter0 = new CalendarConverter();
      SqlTimestampConverter sqlTimestampConverter0 = null;
      try {
        sqlTimestampConverter0 = new SqlTimestampConverter(calendarConverter0);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // String must be in JDBC format [yyyy-MM-dd HH:mm:ss.fffffffff] to create a java.sql.Timestamp
         //
         verifyException(""org.apache.commons.beanutils.converters.DateTimeConverter"", e);
      }
  }"
1594,,"  public void test16()  throws Throwable  {
      SqlTimestampConverter sqlTimestampConverter0 = new SqlTimestampConverter();
      SqlTimeConverter sqlTimeConverter0 = null;
      try {
        sqlTimeConverter0 = new SqlTimeConverter(sqlTimestampConverter0);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // String must be in JDBC format [HH:mm:ss] to create a java.sql.Time
         //
         verifyException(""org.apache.commons.beanutils.converters.DateTimeConverter"", e);
      }
  }"
1595,,"  public void test17()  throws Throwable  {
      SqlDateConverter sqlDateConverter0 = null;
      try {
        sqlDateConverter0 = new SqlDateConverter(""2/14/14"");
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // String must be in JDBC format [yyyy-MM-dd] to create a java.sql.Date
         //
         verifyException(""org.apache.commons.beanutils.converters.DateTimeConverter"", e);
      }
  }"
1596,"    public String toString() {
        final StringBuilder buffer = new StringBuilder();
        buffer.append(toString(getClass()));
        buffer.append(""[UseDefault="");
        buffer.append(isUseDefault());
        buffer.append("", UseLocaleFormat="");
        buffer.append(useLocaleFormat);
        if (displayPatterns != null) {
            buffer.append("", Patterns={"");
            buffer.append(displayPatterns);
            buffer.append('}');
        }
        if (locale != null) {
            buffer.append("", Locale="");
            buffer.append(locale);
        }
        if (timeZone != null) {
            buffer.append("", TimeZone="");
            buffer.append(timeZone);
        }
        buffer.append(']');
        return buffer.toString();
    }","  public void test18()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      SqlTimeConverter sqlTimeConverter0 = new SqlTimeConverter(mockGregorianCalendar0);
      Class<Timestamp> class0 = Timestamp.class;
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      sqlTimeConverter0.setLocale(locale0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-6), "">TI"");
      sqlTimeConverter0.setTimeZone(simpleTimeZone0);
      Class<Calendar> class1 = Calendar.class;
      Calendar calendar0 = sqlTimeConverter0.convert(class1, (Object) class0);
}"
1597,"    public void setTimeZone(final TimeZone timeZone) {
        this.timeZone = timeZone;
    }","  public void test19()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(45, 45, 45, 45, 45, 45);
      SqlTimeConverter sqlTimeConverter0 = new SqlTimeConverter(mockGregorianCalendar0);
      Class<Timestamp> class0 = Timestamp.class;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(45, """");
      sqlTimeConverter0.setTimeZone(simpleTimeZone0);
      Class<Calendar> class1 = Calendar.class;
      Calendar calendar0 = sqlTimeConverter0.convert(class1, (Object) class0);
}"
1598,,"  public void test20()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      SqlTimeConverter sqlTimeConverter0 = new SqlTimeConverter(mockGregorianCalendar0);
      Class<Timestamp> class0 = Timestamp.class;
      Timestamp timestamp0 = sqlTimeConverter0.handleMissing(class0);
}"
1599,,"  public void test21()  throws Throwable  {
      Time time0 = new Time(1723L);
      SqlDateConverter sqlDateConverter0 = new SqlDateConverter(time0);
}"
1600,"    protected <T> T convertToType(final Class<T> targetType, final Object value) throws Exception {

        final Class<?> sourceType = value.getClass();

        // Handle java.sql.Timestamp
        if (value instanceof java.sql.Timestamp) {

            // ---------------------- JDK 1.3 Fix ----------------------
            // N.B. Prior to JDK 1.4 the Timestamp's getTime() method
            //      didn't include the milliseconds. The following code
            //      ensures it works consistently accross JDK versions
            final java.sql.Timestamp timestamp = (java.sql.Timestamp)value;
            long timeInMillis = ((timestamp.getTime() / 1000) * 1000);
            timeInMillis += timestamp.getNanos() / 1000000;
            // ---------------------- JDK 1.3 Fix ----------------------
            return toDate(targetType, timeInMillis);
        }

        // Handle Date (includes java.sql.Date & java.sql.Time)
        if (value instanceof Date) {
            final Date date = (Date)value;
            return toDate(targetType, date.getTime());
        }

        // Handle Calendar
        if (value instanceof Calendar) {
            final Calendar calendar = (Calendar)value;
            return toDate(targetType, calendar.getTime().getTime());
        }

        // Handle Long
        if (value instanceof Long) {
            final Long longObj = (Long)value;
            return toDate(targetType, longObj.longValue());
        }

        // Convert all other types to String & handle
        final String stringValue = value.toString().trim();
        if (stringValue.length() == 0) {
            return handleMissing(targetType);
        }

        // Parse the Date/Time
        if (useLocaleFormat) {
            Calendar calendar = null;
            if (patterns != null && patterns.length > 0) {
                calendar = parse(sourceType, targetType, stringValue);
            } else {
                final DateFormat format = getFormat(locale, timeZone);
                calendar = parse(sourceType, targetType, stringValue, format);
            }
            if (Calendar.class.isAssignableFrom(targetType)) {
                return targetType.cast(calendar);
            } else {
                return toDate(targetType, calendar.getTime().getTime());
            }
        }

        // Default String conversion
        return toDate(targetType, stringValue);

    }","  public void test22()  throws Throwable  {
      CalendarConverter calendarConverter0 = new CalendarConverter();
      Class<String> class0 = String.class;
      String[] stringArray0 = new String[0];
      calendarConverter0.setPatterns(stringArray0);
      try { 
        calendarConverter0.convertToType(class0, (Object) class0);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // Error converting 'Class' to 'String' using pattern 'M/d/yy'
         //
         verifyException(""org.apache.commons.beanutils.converters.DateTimeConverter"", e);
      }
  }"
1601,"    public String toString() {
        final StringBuilder buffer = new StringBuilder();
        buffer.append(toString(getClass()));
        buffer.append(""[UseDefault="");
        buffer.append(isUseDefault());
        buffer.append("", UseLocaleFormat="");
        buffer.append(useLocaleFormat);
        if (displayPatterns != null) {
            buffer.append("", Patterns={"");
            buffer.append(displayPatterns);
            buffer.append('}');
        }
        if (locale != null) {
            buffer.append("", Locale="");
            buffer.append(locale);
        }
        if (timeZone != null) {
            buffer.append("", TimeZone="");
            buffer.append(timeZone);
        }
        buffer.append(']');
        return buffer.toString();
    }","  public void test23()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      SqlTimeConverter sqlTimeConverter0 = new SqlTimeConverter(mockGregorianCalendar0);
      Class<Timestamp> class0 = Timestamp.class;
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      sqlTimeConverter0.setLocale(locale0);
      Class<Calendar> class1 = Calendar.class;
      Calendar calendar0 = sqlTimeConverter0.convert(class1, (Object) class0);
}"
1602,"    protected <T> T convertToType(final Class<T> targetType, final Object value) throws Exception {

        final Class<?> sourceType = value.getClass();

        // Handle java.sql.Timestamp
        if (value instanceof java.sql.Timestamp) {

            // ---------------------- JDK 1.3 Fix ----------------------
            // N.B. Prior to JDK 1.4 the Timestamp's getTime() method
            //      didn't include the milliseconds. The following code
            //      ensures it works consistently accross JDK versions
            final java.sql.Timestamp timestamp = (java.sql.Timestamp)value;
            long timeInMillis = ((timestamp.getTime() / 1000) * 1000);
            timeInMillis += timestamp.getNanos() / 1000000;
            // ---------------------- JDK 1.3 Fix ----------------------
            return toDate(targetType, timeInMillis);
        }

        // Handle Date (includes java.sql.Date & java.sql.Time)
        if (value instanceof Date) {
            final Date date = (Date)value;
            return toDate(targetType, date.getTime());
        }

        // Handle Calendar
        if (value instanceof Calendar) {
            final Calendar calendar = (Calendar)value;
            return toDate(targetType, calendar.getTime().getTime());
        }

        // Handle Long
        if (value instanceof Long) {
            final Long longObj = (Long)value;
            return toDate(targetType, longObj.longValue());
        }

        // Convert all other types to String & handle
        final String stringValue = value.toString().trim();
        if (stringValue.length() == 0) {
            return handleMissing(targetType);
        }

        // Parse the Date/Time
        if (useLocaleFormat) {
            Calendar calendar = null;
            if (patterns != null && patterns.length > 0) {
                calendar = parse(sourceType, targetType, stringValue);
            } else {
                final DateFormat format = getFormat(locale, timeZone);
                calendar = parse(sourceType, targetType, stringValue, format);
            }
            if (Calendar.class.isAssignableFrom(targetType)) {
                return targetType.cast(calendar);
            } else {
                return toDate(targetType, calendar.getTime().getTime());
            }
        }

        // Default String conversion
        return toDate(targetType, stringValue);

    }","  public void test24()  throws Throwable  {
      CalendarConverter calendarConverter0 = new CalendarConverter();
      calendarConverter0.setPattern("""");
      Class<Object> class0 = Object.class;
      try { 
        calendarConverter0.convertToType(class0, (Object) """");
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // Error converting 'String' to 'Object' using pattern ''
         //
         verifyException(""org.apache.commons.beanutils.converters.DateTimeConverter"", e);
      }
  }"
1603,,"  public void test25()  throws Throwable  {
      CalendarConverter calendarConverter0 = new CalendarConverter();
      Class<Integer> class0 = Integer.class;
      Long long0 = new Long(1000L);
      // Undeclared exception!
      try { 
        calendarConverter0.convert(class0, (Object) long0);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // CalendarConverter cannot handle conversion to 'Integer'
         //
         verifyException(""org.apache.commons.beanutils.converters.DateTimeConverter"", e);
      }
  }"
1604,,"  public void test26()  throws Throwable  {
      DateConverter dateConverter0 = new DateConverter();
      Date date0 = new Date(1000L);
      dateConverter0.setDefaultValue(date0);
}"
1605,"    protected DateFormat getFormat(final Locale locale, final TimeZone timeZone) {
        DateFormat format = null;
        if (locale == null) {
            format = DateFormat.getDateInstance(DateFormat.SHORT);
        } else {
            format = DateFormat.getDateInstance(DateFormat.SHORT, locale);
        }
        if (timeZone != null) {
            format.setTimeZone(timeZone);
        }
        return format;
    }","  public void test27()  throws Throwable  {
      Timestamp timestamp0 = new Timestamp(1105L);
      CalendarConverter calendarConverter0 = new CalendarConverter(timestamp0);
      Locale locale0 = Locale.CHINA;
      TimeZone timeZone0 = TimeZone.getTimeZone(""CalendarConverter[UseDefault=true, UseLocaleFormat=false]"");
      SimpleDateFormat simpleDateFormat0 = (SimpleDateFormat)calendarConverter0.getFormat(locale0, timeZone0);
}"
1606,"    protected String convertToString(final Object value) throws Throwable {

        Date date = null;
        if (value instanceof Date) {
            date = (Date)value;
        } else if (value instanceof Calendar) {
            date = ((Calendar)value).getTime();
        } else if (value instanceof Long) {
            date = new Date(((Long)value).longValue());
        }

        String result = null;
        if (useLocaleFormat && date != null) {
            DateFormat format = null;
            if (patterns != null && patterns.length > 0) {
                format = getFormat(patterns[0]);
            } else {
                format = getFormat(locale, timeZone);
            }
            logFormat(""Formatting"", format);
            result = format.format(date);
            if (log().isDebugEnabled()) {
                log().debug(""    Converted  to String using format '"" + result + ""'"");
            }
        } else {
            result = value.toString();
            if (log().isDebugEnabled()) {
                log().debug(""    Converted  to String using toString() '"" + result + ""'"");
             }
        }
        return result;
    }","  public void test28()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(2506, 2506, 2506, 2506, 2506);
      CalendarConverter calendarConverter0 = new CalendarConverter();
      calendarConverter0.setPattern("""");
      String string0 = calendarConverter0.convertToString(mockGregorianCalendar0);
}"
1607,"    protected String convertToString(final Object value) throws Throwable {

        Date date = null;
        if (value instanceof Date) {
            date = (Date)value;
        } else if (value instanceof Calendar) {
            date = ((Calendar)value).getTime();
        } else if (value instanceof Long) {
            date = new Date(((Long)value).longValue());
        }

        String result = null;
        if (useLocaleFormat && date != null) {
            DateFormat format = null;
            if (patterns != null && patterns.length > 0) {
                format = getFormat(patterns[0]);
            } else {
                format = getFormat(locale, timeZone);
            }
            logFormat(""Formatting"", format);
            result = format.format(date);
            if (log().isDebugEnabled()) {
                log().debug(""    Converted  to String using format '"" + result + ""'"");
            }
        } else {
            result = value.toString();
            if (log().isDebugEnabled()) {
                log().debug(""    Converted  to String using toString() '"" + result + ""'"");
             }
        }
        return result;
    }","  public void test29()  throws Throwable  {
      DateConverter dateConverter0 = new DateConverter();
      dateConverter0.setUseLocaleFormat(true);
      MockDate mockDate0 = new MockDate();
      String string0 = dateConverter0.convertToString(mockDate0);
}"
1608,"    protected String convertToString(final Object value) throws Throwable {

        Date date = null;
        if (value instanceof Date) {
            date = (Date)value;
        } else if (value instanceof Calendar) {
            date = ((Calendar)value).getTime();
        } else if (value instanceof Long) {
            date = new Date(((Long)value).longValue());
        }

        String result = null;
        if (useLocaleFormat && date != null) {
            DateFormat format = null;
            if (patterns != null && patterns.length > 0) {
                format = getFormat(patterns[0]);
            } else {
                format = getFormat(locale, timeZone);
            }
            logFormat(""Formatting"", format);
            result = format.format(date);
            if (log().isDebugEnabled()) {
                log().debug(""    Converted  to String using format '"" + result + ""'"");
            }
        } else {
            result = value.toString();
            if (log().isDebugEnabled()) {
                log().debug(""    Converted  to String using toString() '"" + result + ""'"");
             }
        }
        return result;
    }","  public void test30()  throws Throwable  {
      CalendarConverter calendarConverter0 = new CalendarConverter();
      String[] stringArray0 = new String[0];
      calendarConverter0.setPatterns(stringArray0);
      Long long0 = new Long(988L);
      String string0 = calendarConverter0.convertToString(long0);
}"
1609,"    protected String convertToString(final Object value) throws Throwable {

        Date date = null;
        if (value instanceof Date) {
            date = (Date)value;
        } else if (value instanceof Calendar) {
            date = ((Calendar)value).getTime();
        } else if (value instanceof Long) {
            date = new Date(((Long)value).longValue());
        }

        String result = null;
        if (useLocaleFormat && date != null) {
            DateFormat format = null;
            if (patterns != null && patterns.length > 0) {
                format = getFormat(patterns[0]);
            } else {
                format = getFormat(locale, timeZone);
            }
            logFormat(""Formatting"", format);
            result = format.format(date);
            if (log().isDebugEnabled()) {
                log().debug(""    Converted  to String using format '"" + result + ""'"");
            }
        } else {
            result = value.toString();
            if (log().isDebugEnabled()) {
                log().debug(""    Converted  to String using toString() '"" + result + ""'"");
             }
        }
        return result;
    }","  public void test31()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      SqlTimeConverter sqlTimeConverter0 = new SqlTimeConverter(mockGregorianCalendar0);
      String string0 = sqlTimeConverter0.convertToString(""SqlTimeConverter[UseDefault=true, UseLocaleFormat=true, Locale=zh_TW, TimeZone=java.util.SimpleTimeZone[id=>TI,offset=-6,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]]"");
}"
1610,"    public void setPatterns(final String[] patterns) {
        this.patterns = patterns;
        if (patterns != null && patterns.length > 1) {
            final StringBuilder buffer = new StringBuilder();
            for (int i = 0; i < patterns.length; i++) {
                if (i > 0) {
                    buffer.append("", "");
                }
                buffer.append(patterns[i]);
            }
            displayPatterns = buffer.toString();
        }
        setUseLocaleFormat(true);
    }","  public void test32()  throws Throwable  {
      SqlTimestampConverter sqlTimestampConverter0 = new SqlTimestampConverter();
      sqlTimestampConverter0.setPatterns((String[]) null);
}"
1611,"    public String[] getPatterns() {
        return patterns;
    }","  public void test33()  throws Throwable  {
      DateConverter dateConverter0 = new DateConverter();
      String[] stringArray0 = dateConverter0.getPatterns();
}"
1612,"    protected String convertToString(final Object value) throws Throwable {

        Date date = null;
        if (value instanceof Date) {
            date = (Date)value;
        } else if (value instanceof Calendar) {
            date = ((Calendar)value).getTime();
        } else if (value instanceof Long) {
            date = new Date(((Long)value).longValue());
        }

        String result = null;
        if (useLocaleFormat && date != null) {
            DateFormat format = null;
            if (patterns != null && patterns.length > 0) {
                format = getFormat(patterns[0]);
            } else {
                format = getFormat(locale, timeZone);
            }
            logFormat(""Formatting"", format);
            result = format.format(date);
            if (log().isDebugEnabled()) {
                log().debug(""    Converted  to String using format '"" + result + ""'"");
            }
        } else {
            result = value.toString();
            if (log().isDebugEnabled()) {
                log().debug(""    Converted  to String using toString() '"" + result + ""'"");
             }
        }
        return result;
    }","  public void test34()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      SqlTimeConverter sqlTimeConverter0 = new SqlTimeConverter(mockGregorianCalendar0);
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      sqlTimeConverter0.setLocale(locale0);
      String string0 = sqlTimeConverter0.convertToString(""SqlTimeConverter[UseDefault=true, UseLocaleFormat=true, Locale=zh_TW, TimeZone=java.util.SimpleTimeZone[id=>TI,offset=-6,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]]"");
}"
1613,"    public TimeZone getTimeZone() {
        return timeZone;
    }","  public void test35()  throws Throwable  {
      SqlTimestampConverter sqlTimestampConverter0 = new SqlTimestampConverter();
      TimeZone timeZone0 = sqlTimestampConverter0.getTimeZone();
}"
1614,"    protected <T> T convertToType(final Class<T> targetType, final Object value) throws Exception {

        final Class<?> sourceType = value.getClass();

        // Handle java.sql.Timestamp
        if (value instanceof java.sql.Timestamp) {

            // ---------------------- JDK 1.3 Fix ----------------------
            // N.B. Prior to JDK 1.4 the Timestamp's getTime() method
            //      didn't include the milliseconds. The following code
            //      ensures it works consistently accross JDK versions
            final java.sql.Timestamp timestamp = (java.sql.Timestamp)value;
            long timeInMillis = ((timestamp.getTime() / 1000) * 1000);
            timeInMillis += timestamp.getNanos() / 1000000;
            // ---------------------- JDK 1.3 Fix ----------------------
            return toDate(targetType, timeInMillis);
        }

        // Handle Date (includes java.sql.Date & java.sql.Time)
        if (value instanceof Date) {
            final Date date = (Date)value;
            return toDate(targetType, date.getTime());
        }

        // Handle Calendar
        if (value instanceof Calendar) {
            final Calendar calendar = (Calendar)value;
            return toDate(targetType, calendar.getTime().getTime());
        }

        // Handle Long
        if (value instanceof Long) {
            final Long longObj = (Long)value;
            return toDate(targetType, longObj.longValue());
        }

        // Convert all other types to String & handle
        final String stringValue = value.toString().trim();
        if (stringValue.length() == 0) {
            return handleMissing(targetType);
        }

        // Parse the Date/Time
        if (useLocaleFormat) {
            Calendar calendar = null;
            if (patterns != null && patterns.length > 0) {
                calendar = parse(sourceType, targetType, stringValue);
            } else {
                final DateFormat format = getFormat(locale, timeZone);
                calendar = parse(sourceType, targetType, stringValue, format);
            }
            if (Calendar.class.isAssignableFrom(targetType)) {
                return targetType.cast(calendar);
            } else {
                return toDate(targetType, calendar.getTime().getTime());
            }
        }

        // Default String conversion
        return toDate(targetType, stringValue);

    }","  public void test36()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-4129), (-4129), (-4129));
      CalendarConverter calendarConverter0 = new CalendarConverter(mockGregorianCalendar0);
      calendarConverter0.setPattern(""L)a)L=sI"");
      Class<Object> class0 = Object.class;
      try { 
        calendarConverter0.convertToType(class0, (Object) ""L)a)L=sI"");
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern character 'I'
         //
         verifyException(""java.text.SimpleDateFormat"", e);
      }
  }"
1615,"    public Locale getLocale() {
        return locale;
    }","  public void test37()  throws Throwable  {
      SqlTimestampConverter sqlTimestampConverter0 = new SqlTimestampConverter();
      Locale locale0 = sqlTimestampConverter0.getLocale();
}"
1616,"    public Object convert(final Class type, final Object value) {

        // Deal with a null value
        if (value == null) {
            if (useDefault) {
                return (defaultValue);
            } else {
                throw new ConversionException(""No value specified"");
            }
        }

        // Deal with the no-conversion-needed case
        if (MODEL.getClass() == value.getClass()) {
            return (value);
        }

        // Deal with input value as a String array
        if (strings.getClass() == value.getClass()) {
            try {
                final String[] values = (String[]) value;
                final char[] results = new char[values.length];
                for (int i = 0; i < values.length; i++) {
                    results[i] = values[i].charAt(0);
                }
                return (results);
            } catch (final Exception e) {
                if (useDefault) {
                    return (defaultValue);
                } else {
                    throw new ConversionException(value.toString(), e);
                }
            }
        }

        // Parse the input value as a String into elements
        // and convert to the appropriate type
        try {
            final List list = parseElements(value.toString());
            final char[] results = new char[list.size()];
            for (int i = 0; i < results.length; i++) {
                results[i] = ((String) list.get(i)).charAt(0);
            }
            return (results);
        } catch (final Exception e) {
            if (useDefault) {
                return (defaultValue);
            } else {
                throw new ConversionException(value.toString(), e);
            }
        }

    }","  public void test0()  throws Throwable  {
      CharacterArrayConverter characterArrayConverter0 = new CharacterArrayConverter("""");
      Class<Object> class0 = Object.class;
      Object object0 = new Object();
      Object object1 = characterArrayConverter0.convert(class0, object0);
}"
1617,"    public Object convert(final Class type, final Object value) {

        // Deal with a null value
        if (value == null) {
            if (useDefault) {
                return (defaultValue);
            } else {
                throw new ConversionException(""No value specified"");
            }
        }

        // Deal with the no-conversion-needed case
        if (MODEL.getClass() == value.getClass()) {
            return (value);
        }

        // Deal with input value as a String array
        if (strings.getClass() == value.getClass()) {
            try {
                final String[] values = (String[]) value;
                final char[] results = new char[values.length];
                for (int i = 0; i < values.length; i++) {
                    results[i] = values[i].charAt(0);
                }
                return (results);
            } catch (final Exception e) {
                if (useDefault) {
                    return (defaultValue);
                } else {
                    throw new ConversionException(value.toString(), e);
                }
            }
        }

        // Parse the input value as a String into elements
        // and convert to the appropriate type
        try {
            final List list = parseElements(value.toString());
            final char[] results = new char[list.size()];
            for (int i = 0; i < results.length; i++) {
                results[i] = ((String) list.get(i)).charAt(0);
            }
            return (results);
        } catch (final Exception e) {
            if (useDefault) {
                return (defaultValue);
            } else {
                throw new ConversionException(value.toString(), e);
            }
        }

    }","  public void test1()  throws Throwable  {
      CharacterArrayConverter characterArrayConverter0 = new CharacterArrayConverter();
      Class<Integer> class0 = Integer.class;
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        characterArrayConverter0.convert(class0, object0);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // java.lang.Object@0000000002
         //
         verifyException(""org.apache.commons.beanutils.converters.CharacterArrayConverter"", e);
      }
  }"
1618,"    public Object convert(final Class type, final Object value) {

        // Deal with a null value
        if (value == null) {
            if (useDefault) {
                return (defaultValue);
            } else {
                throw new ConversionException(""No value specified"");
            }
        }

        // Deal with the no-conversion-needed case
        if (MODEL.getClass() == value.getClass()) {
            return (value);
        }

        // Deal with input value as a String array
        if (strings.getClass() == value.getClass()) {
            try {
                final String[] values = (String[]) value;
                final char[] results = new char[values.length];
                for (int i = 0; i < values.length; i++) {
                    results[i] = values[i].charAt(0);
                }
                return (results);
            } catch (final Exception e) {
                if (useDefault) {
                    return (defaultValue);
                } else {
                    throw new ConversionException(value.toString(), e);
                }
            }
        }

        // Parse the input value as a String into elements
        // and convert to the appropriate type
        try {
            final List list = parseElements(value.toString());
            final char[] results = new char[list.size()];
            for (int i = 0; i < results.length; i++) {
                results[i] = ((String) list.get(i)).charAt(0);
            }
            return (results);
        } catch (final Exception e) {
            if (useDefault) {
                return (defaultValue);
            } else {
                throw new ConversionException(value.toString(), e);
            }
        }

    }","  public void test2()  throws Throwable  {
      Class<String> class0 = String.class;
      CharacterArrayConverter characterArrayConverter0 = new CharacterArrayConverter(class0);
      Class class1 = (Class)characterArrayConverter0.convert(class0, (Object) null);
}"
1619,"    public Object convert(final Class type, final Object value) {

        // Deal with a null value
        if (value == null) {
            if (useDefault) {
                return (defaultValue);
            } else {
                throw new ConversionException(""No value specified"");
            }
        }

        // Deal with the no-conversion-needed case
        if (MODEL.getClass() == value.getClass()) {
            return (value);
        }

        // Deal with input value as a String array
        if (strings.getClass() == value.getClass()) {
            try {
                final String[] values = (String[]) value;
                final char[] results = new char[values.length];
                for (int i = 0; i < values.length; i++) {
                    results[i] = values[i].charAt(0);
                }
                return (results);
            } catch (final Exception e) {
                if (useDefault) {
                    return (defaultValue);
                } else {
                    throw new ConversionException(value.toString(), e);
                }
            }
        }

        // Parse the input value as a String into elements
        // and convert to the appropriate type
        try {
            final List list = parseElements(value.toString());
            final char[] results = new char[list.size()];
            for (int i = 0; i < results.length; i++) {
                results[i] = ((String) list.get(i)).charAt(0);
            }
            return (results);
        } catch (final Exception e) {
            if (useDefault) {
                return (defaultValue);
            } else {
                throw new ConversionException(value.toString(), e);
            }
        }

    }","  public void test3()  throws Throwable  {
      CharacterArrayConverter characterArrayConverter0 = new CharacterArrayConverter();
      Class<Integer> class0 = Integer.class;
      // Undeclared exception!
      try { 
        characterArrayConverter0.convert(class0, (Object) null);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // No value specified
         //
         verifyException(""org.apache.commons.beanutils.converters.CharacterArrayConverter"", e);
      }
  }"
1620,"    public Object convert(final Class type, final Object value) {

        // Deal with a null value
        if (value == null) {
            if (useDefault) {
                return (defaultValue);
            } else {
                throw new ConversionException(""No value specified"");
            }
        }

        // Deal with the no-conversion-needed case
        if (MODEL.getClass() == value.getClass()) {
            return (value);
        }

        // Deal with input value as a String array
        if (strings.getClass() == value.getClass()) {
            try {
                final String[] values = (String[]) value;
                final short[] results = new short[values.length];
                for (int i = 0; i < values.length; i++) {
                    results[i] = Short.parseShort(values[i]);
                }
                return (results);
            } catch (final Exception e) {
                if (useDefault) {
                    return (defaultValue);
                } else {
                    throw new ConversionException(value.toString(), e);
                }
            }
        }

        // Parse the input value as a String into elements
        // and convert to the appropriate type
        try {
            final List list = parseElements(value.toString());
            final short[] results = new short[list.size()];
            for (int i = 0; i < results.length; i++) {
                results[i] = Short.parseShort((String) list.get(i));
            }
            return (results);
        } catch (final Exception e) {
            if (useDefault) {
                return (defaultValue);
            } else {
                throw new ConversionException(value.toString(), e);
            }
        }

    }","  public void test0()  throws Throwable  {
      Object object0 = new Object();
      ShortArrayConverter shortArrayConverter0 = new ShortArrayConverter(object0);
      Class<String> class0 = String.class;
      Object object1 = shortArrayConverter0.convert(class0, class0);
}"
1621,"    public Object convert(final Class type, final Object value) {

        // Deal with a null value
        if (value == null) {
            if (useDefault) {
                return (defaultValue);
            } else {
                throw new ConversionException(""No value specified"");
            }
        }

        // Deal with the no-conversion-needed case
        if (MODEL.getClass() == value.getClass()) {
            return (value);
        }

        // Deal with input value as a String array
        if (strings.getClass() == value.getClass()) {
            try {
                final String[] values = (String[]) value;
                final short[] results = new short[values.length];
                for (int i = 0; i < values.length; i++) {
                    results[i] = Short.parseShort(values[i]);
                }
                return (results);
            } catch (final Exception e) {
                if (useDefault) {
                    return (defaultValue);
                } else {
                    throw new ConversionException(value.toString(), e);
                }
            }
        }

        // Parse the input value as a String into elements
        // and convert to the appropriate type
        try {
            final List list = parseElements(value.toString());
            final short[] results = new short[list.size()];
            for (int i = 0; i < results.length; i++) {
                results[i] = Short.parseShort((String) list.get(i));
            }
            return (results);
        } catch (final Exception e) {
            if (useDefault) {
                return (defaultValue);
            } else {
                throw new ConversionException(value.toString(), e);
            }
        }

    }","  public void test1()  throws Throwable  {
      Object object0 = new Object();
      ShortArrayConverter shortArrayConverter0 = new ShortArrayConverter(object0);
      Class<String> class0 = String.class;
      Object object1 = shortArrayConverter0.convert(class0, class0);
}"
1622,"    public Object convert(final Class type, final Object value) {

        // Deal with a null value
        if (value == null) {
            if (useDefault) {
                return (defaultValue);
            } else {
                throw new ConversionException(""No value specified"");
            }
        }

        // Deal with the no-conversion-needed case
        if (MODEL.getClass() == value.getClass()) {
            return (value);
        }

        // Deal with input value as a String array
        if (strings.getClass() == value.getClass()) {
            try {
                final String[] values = (String[]) value;
                final short[] results = new short[values.length];
                for (int i = 0; i < values.length; i++) {
                    results[i] = Short.parseShort(values[i]);
                }
                return (results);
            } catch (final Exception e) {
                if (useDefault) {
                    return (defaultValue);
                } else {
                    throw new ConversionException(value.toString(), e);
                }
            }
        }

        // Parse the input value as a String into elements
        // and convert to the appropriate type
        try {
            final List list = parseElements(value.toString());
            final short[] results = new short[list.size()];
            for (int i = 0; i < results.length; i++) {
                results[i] = Short.parseShort((String) list.get(i));
            }
            return (results);
        } catch (final Exception e) {
            if (useDefault) {
                return (defaultValue);
            } else {
                throw new ConversionException(value.toString(), e);
            }
        }

    }","  public void test2()  throws Throwable  {
      ShortArrayConverter shortArrayConverter0 = new ShortArrayConverter((Object) null);
      Class<Object> class0 = Object.class;
      Object object0 = shortArrayConverter0.convert(class0, (Object) null);
}"
1623,"    public Object convert(final Class type, final Object value) {

        // Deal with a null value
        if (value == null) {
            if (useDefault) {
                return (defaultValue);
            } else {
                throw new ConversionException(""No value specified"");
            }
        }

        // Deal with the no-conversion-needed case
        if (MODEL.getClass() == value.getClass()) {
            return (value);
        }

        // Deal with input value as a String array
        if (strings.getClass() == value.getClass()) {
            try {
                final String[] values = (String[]) value;
                final short[] results = new short[values.length];
                for (int i = 0; i < values.length; i++) {
                    results[i] = Short.parseShort(values[i]);
                }
                return (results);
            } catch (final Exception e) {
                if (useDefault) {
                    return (defaultValue);
                } else {
                    throw new ConversionException(value.toString(), e);
                }
            }
        }

        // Parse the input value as a String into elements
        // and convert to the appropriate type
        try {
            final List list = parseElements(value.toString());
            final short[] results = new short[list.size()];
            for (int i = 0; i < results.length; i++) {
                results[i] = Short.parseShort((String) list.get(i));
            }
            return (results);
        } catch (final Exception e) {
            if (useDefault) {
                return (defaultValue);
            } else {
                throw new ConversionException(value.toString(), e);
            }
        }

    }","  public void test3()  throws Throwable  {
      ShortArrayConverter shortArrayConverter0 = new ShortArrayConverter();
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        shortArrayConverter0.convert(class0, shortArrayConverter0);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // org.apache.commons.beanutils.converters.ShortArrayConverter@0000000001
         //
         verifyException(""org.apache.commons.beanutils.converters.ShortArrayConverter"", e);
      }
  }"
1624,"    public Object convert(final Class type, final Object value) {

        // Deal with a null value
        if (value == null) {
            if (useDefault) {
                return (defaultValue);
            } else {
                throw new ConversionException(""No value specified"");
            }
        }

        // Deal with the no-conversion-needed case
        if (MODEL.getClass() == value.getClass()) {
            return (value);
        }

        // Deal with input value as a String array
        if (strings.getClass() == value.getClass()) {
            try {
                final String[] values = (String[]) value;
                final short[] results = new short[values.length];
                for (int i = 0; i < values.length; i++) {
                    results[i] = Short.parseShort(values[i]);
                }
                return (results);
            } catch (final Exception e) {
                if (useDefault) {
                    return (defaultValue);
                } else {
                    throw new ConversionException(value.toString(), e);
                }
            }
        }

        // Parse the input value as a String into elements
        // and convert to the appropriate type
        try {
            final List list = parseElements(value.toString());
            final short[] results = new short[list.size()];
            for (int i = 0; i < results.length; i++) {
                results[i] = Short.parseShort((String) list.get(i));
            }
            return (results);
        } catch (final Exception e) {
            if (useDefault) {
                return (defaultValue);
            } else {
                throw new ConversionException(value.toString(), e);
            }
        }

    }","  public void test4()  throws Throwable  {
      Class<Object> class0 = Object.class;
      ShortArrayConverter shortArrayConverter0 = new ShortArrayConverter(class0);
      Class class1 = (Class)shortArrayConverter0.convert(class0, (Object) null);
}"
1625,"    public Object convert(final Class type, final Object value) {

        // Deal with a null value
        if (value == null) {
            if (useDefault) {
                return (defaultValue);
            } else {
                throw new ConversionException(""No value specified"");
            }
        }

        // Deal with the no-conversion-needed case
        if (MODEL.getClass() == value.getClass()) {
            return (value);
        }

        // Deal with input value as a String array
        if (strings.getClass() == value.getClass()) {
            try {
                final String[] values = (String[]) value;
                final short[] results = new short[values.length];
                for (int i = 0; i < values.length; i++) {
                    results[i] = Short.parseShort(values[i]);
                }
                return (results);
            } catch (final Exception e) {
                if (useDefault) {
                    return (defaultValue);
                } else {
                    throw new ConversionException(value.toString(), e);
                }
            }
        }

        // Parse the input value as a String into elements
        // and convert to the appropriate type
        try {
            final List list = parseElements(value.toString());
            final short[] results = new short[list.size()];
            for (int i = 0; i < results.length; i++) {
                results[i] = Short.parseShort((String) list.get(i));
            }
            return (results);
        } catch (final Exception e) {
            if (useDefault) {
                return (defaultValue);
            } else {
                throw new ConversionException(value.toString(), e);
            }
        }

    }","  public void test5()  throws Throwable  {
      ShortArrayConverter shortArrayConverter0 = new ShortArrayConverter();
      // Undeclared exception!
      try { 
        shortArrayConverter0.convert((Class) null, (Object) null);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // No value specified
         //
         verifyException(""org.apache.commons.beanutils.converters.ShortArrayConverter"", e);
      }
  }"
1626,"    protected Class<?> getDefaultType() {
        return Timestamp.class;
    }","  public void test0()  throws Throwable  {
      SqlTimestampConverter sqlTimestampConverter0 = new SqlTimestampConverter((Object) null);
      Class<?> class0 = sqlTimestampConverter0.getDefaultType();
}"
1627,"    protected DateFormat getFormat(final Locale locale, final TimeZone timeZone) {
        DateFormat format = null;
        if (locale == null) {
            format = DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.SHORT);
        } else {
            format = DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.SHORT, locale);
        }
        if (timeZone != null) {
            format.setTimeZone(timeZone);
        }
        return format;
    }","  public void test1()  throws Throwable  {
      SqlTimestampConverter sqlTimestampConverter0 = new SqlTimestampConverter();
      SimpleDateFormat simpleDateFormat0 = (SimpleDateFormat)sqlTimestampConverter0.getFormat((Locale) null, (TimeZone) null);
}"
1628,"    public SqlTimestampConverter() {
        super();
    }","  public void test2()  throws Throwable  {
      Object object0 = new Object();
      SqlTimestampConverter sqlTimestampConverter0 = null;
      try {
        sqlTimestampConverter0 = new SqlTimestampConverter(object0);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // String must be in JDBC format [yyyy-MM-dd HH:mm:ss.fffffffff] to create a java.sql.Timestamp
         //
         verifyException(""org.apache.commons.beanutils.converters.DateTimeConverter"", e);
      }
  }"
1629,"    protected DateFormat getFormat(final Locale locale, final TimeZone timeZone) {
        DateFormat format = null;
        if (locale == null) {
            format = DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.SHORT);
        } else {
            format = DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.SHORT, locale);
        }
        if (timeZone != null) {
            format.setTimeZone(timeZone);
        }
        return format;
    }","  public void test3()  throws Throwable  {
      SqlTimestampConverter sqlTimestampConverter0 = new SqlTimestampConverter();
      Locale locale0 = Locale.PRC;
      TimeZone timeZone0 = TimeZone.getDefault();
      SimpleDateFormat simpleDateFormat0 = (SimpleDateFormat)sqlTimestampConverter0.getFormat(locale0, timeZone0);
}"
1630,"    public Object convert(final Class type, final Object value) {

        // Deal with a null value
        if (value == null) {
            if (useDefault) {
                return (defaultValue);
            } else {
                throw new ConversionException(""No value specified"");
            }
        }

        // Deal with the no-conversion-needed case
        if (MODEL.getClass() == value.getClass()) {
            return (value);
        }

        // Deal with input value as a String array
        if (strings.getClass() == value.getClass()) {
            try {
                final String[] values = (String[]) value;
                final double[] results = new double[values.length];
                for (int i = 0; i < values.length; i++) {
                    results[i] = Double.parseDouble(values[i]);
                }
                return (results);
            } catch (final Exception e) {
                if (useDefault) {
                    return (defaultValue);
                } else {
                    throw new ConversionException(value.toString(), e);
                }
            }
        }

        // Parse the input value as a String into elements
        // and convert to the appropriate type
        try {
            final List list = parseElements(value.toString());
            final double[] results = new double[list.size()];
            for (int i = 0; i < results.length; i++) {
                results[i] = Double.parseDouble((String) list.get(i));
            }
            return (results);
        } catch (final Exception e) {
            if (useDefault) {
                return (defaultValue);
            } else {
                throw new ConversionException(value.toString(), e);
            }
        }

    }","  public void test0()  throws Throwable  {
      Object object0 = AbstractArrayConverter.NO_DEFAULT;
      DoubleArrayConverter doubleArrayConverter0 = new DoubleArrayConverter(object0);
      Class<Integer> class0 = Integer.class;
      Object object1 = doubleArrayConverter0.convert(class0, class0);
}"
1631,"    public Object convert(final Class type, final Object value) {

        // Deal with a null value
        if (value == null) {
            if (useDefault) {
                return (defaultValue);
            } else {
                throw new ConversionException(""No value specified"");
            }
        }

        // Deal with the no-conversion-needed case
        if (MODEL.getClass() == value.getClass()) {
            return (value);
        }

        // Deal with input value as a String array
        if (strings.getClass() == value.getClass()) {
            try {
                final String[] values = (String[]) value;
                final double[] results = new double[values.length];
                for (int i = 0; i < values.length; i++) {
                    results[i] = Double.parseDouble(values[i]);
                }
                return (results);
            } catch (final Exception e) {
                if (useDefault) {
                    return (defaultValue);
                } else {
                    throw new ConversionException(value.toString(), e);
                }
            }
        }

        // Parse the input value as a String into elements
        // and convert to the appropriate type
        try {
            final List list = parseElements(value.toString());
            final double[] results = new double[list.size()];
            for (int i = 0; i < results.length; i++) {
                results[i] = Double.parseDouble((String) list.get(i));
            }
            return (results);
        } catch (final Exception e) {
            if (useDefault) {
                return (defaultValue);
            } else {
                throw new ConversionException(value.toString(), e);
            }
        }

    }","  public void test1()  throws Throwable  {
      DoubleArrayConverter doubleArrayConverter0 = new DoubleArrayConverter();
      doubleArrayConverter0.useDefault = true;
      Class<Object> class0 = Object.class;
      Object object0 = doubleArrayConverter0.convert(class0, (Object) null);
}"
1632,"    public Object convert(final Class type, final Object value) {

        // Deal with a null value
        if (value == null) {
            if (useDefault) {
                return (defaultValue);
            } else {
                throw new ConversionException(""No value specified"");
            }
        }

        // Deal with the no-conversion-needed case
        if (MODEL.getClass() == value.getClass()) {
            return (value);
        }

        // Deal with input value as a String array
        if (strings.getClass() == value.getClass()) {
            try {
                final String[] values = (String[]) value;
                final double[] results = new double[values.length];
                for (int i = 0; i < values.length; i++) {
                    results[i] = Double.parseDouble(values[i]);
                }
                return (results);
            } catch (final Exception e) {
                if (useDefault) {
                    return (defaultValue);
                } else {
                    throw new ConversionException(value.toString(), e);
                }
            }
        }

        // Parse the input value as a String into elements
        // and convert to the appropriate type
        try {
            final List list = parseElements(value.toString());
            final double[] results = new double[list.size()];
            for (int i = 0; i < results.length; i++) {
                results[i] = Double.parseDouble((String) list.get(i));
            }
            return (results);
        } catch (final Exception e) {
            if (useDefault) {
                return (defaultValue);
            } else {
                throw new ConversionException(value.toString(), e);
            }
        }

    }","  public void test2()  throws Throwable  {
      Class<String> class0 = String.class;
      DoubleArrayConverter doubleArrayConverter0 = new DoubleArrayConverter(class0);
      Class class1 = (Class)doubleArrayConverter0.convert(class0, (Object) null);
}"
1633,"    public Object convert(final Class type, final Object value) {

        // Deal with a null value
        if (value == null) {
            if (useDefault) {
                return (defaultValue);
            } else {
                throw new ConversionException(""No value specified"");
            }
        }

        // Deal with the no-conversion-needed case
        if (MODEL.getClass() == value.getClass()) {
            return (value);
        }

        // Deal with input value as a String array
        if (strings.getClass() == value.getClass()) {
            try {
                final String[] values = (String[]) value;
                final double[] results = new double[values.length];
                for (int i = 0; i < values.length; i++) {
                    results[i] = Double.parseDouble(values[i]);
                }
                return (results);
            } catch (final Exception e) {
                if (useDefault) {
                    return (defaultValue);
                } else {
                    throw new ConversionException(value.toString(), e);
                }
            }
        }

        // Parse the input value as a String into elements
        // and convert to the appropriate type
        try {
            final List list = parseElements(value.toString());
            final double[] results = new double[list.size()];
            for (int i = 0; i < results.length; i++) {
                results[i] = Double.parseDouble((String) list.get(i));
            }
            return (results);
        } catch (final Exception e) {
            if (useDefault) {
                return (defaultValue);
            } else {
                throw new ConversionException(value.toString(), e);
            }
        }

    }","  public void test3()  throws Throwable  {
      DoubleArrayConverter doubleArrayConverter0 = new DoubleArrayConverter();
      Class<String> class0 = String.class;
      // Undeclared exception!
      try { 
        doubleArrayConverter0.convert(class0, (Object) null);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // No value specified
         //
         verifyException(""org.apache.commons.beanutils.converters.DoubleArrayConverter"", e);
      }
  }"
1634,"    public Object convert(final Class type, final Object value) {

        // Deal with a null value
        if (value == null) {
            if (useDefault) {
                return (defaultValue);
            } else {
                throw new ConversionException(""No value specified"");
            }
        }

        // Deal with the no-conversion-needed case
        if (MODEL.getClass() == value.getClass()) {
            return (value);
        }

        // Deal with input value as a String array
        if (strings.getClass() == value.getClass()) {
            try {
                final String[] values = (String[]) value;
                final byte[] results = new byte[values.length];
                for (int i = 0; i < values.length; i++) {
                    results[i] = Byte.parseByte(values[i]);
                }
                return (results);
            } catch (final Exception e) {
                if (useDefault) {
                    return (defaultValue);
                } else {
                    throw new ConversionException(value.toString(), e);
                }
            }
        }

        // Parse the input value as a String into elements
        // and convert to the appropriate type
        try {
            final List list = parseElements(value.toString());
            final byte[] results = new byte[list.size()];
            for (int i = 0; i < results.length; i++) {
                results[i] = Byte.parseByte((String) list.get(i));
            }
            return (results);
        } catch (final Exception e) {
            if (useDefault) {
                return (defaultValue);
            } else {
                throw new ConversionException(value.toString(), e);
            }
        }

    }","  public void test0()  throws Throwable  {
      ByteArrayConverter byteArrayConverter0 = new ByteArrayConverter(""pXR^.lZ`m22SR].0{"");
      Class<Object> class0 = Object.class;
      Object object0 = byteArrayConverter0.convert(class0, ""pXR^.lZ`m22SR].0{"");
}"
1635,"    public Object convert(final Class type, final Object value) {

        // Deal with a null value
        if (value == null) {
            if (useDefault) {
                return (defaultValue);
            } else {
                throw new ConversionException(""No value specified"");
            }
        }

        // Deal with the no-conversion-needed case
        if (MODEL.getClass() == value.getClass()) {
            return (value);
        }

        // Deal with input value as a String array
        if (strings.getClass() == value.getClass()) {
            try {
                final String[] values = (String[]) value;
                final byte[] results = new byte[values.length];
                for (int i = 0; i < values.length; i++) {
                    results[i] = Byte.parseByte(values[i]);
                }
                return (results);
            } catch (final Exception e) {
                if (useDefault) {
                    return (defaultValue);
                } else {
                    throw new ConversionException(value.toString(), e);
                }
            }
        }

        // Parse the input value as a String into elements
        // and convert to the appropriate type
        try {
            final List list = parseElements(value.toString());
            final byte[] results = new byte[list.size()];
            for (int i = 0; i < results.length; i++) {
                results[i] = Byte.parseByte((String) list.get(i));
            }
            return (results);
        } catch (final Exception e) {
            if (useDefault) {
                return (defaultValue);
            } else {
                throw new ConversionException(value.toString(), e);
            }
        }

    }","  public void test1()  throws Throwable  {
      ByteArrayConverter byteArrayConverter0 = new ByteArrayConverter((Object) null);
      Class<Object> class0 = Object.class;
      Object object0 = byteArrayConverter0.convert(class0, (Object) null);
}"
1636,"    public Object convert(final Class type, final Object value) {

        // Deal with a null value
        if (value == null) {
            if (useDefault) {
                return (defaultValue);
            } else {
                throw new ConversionException(""No value specified"");
            }
        }

        // Deal with the no-conversion-needed case
        if (MODEL.getClass() == value.getClass()) {
            return (value);
        }

        // Deal with input value as a String array
        if (strings.getClass() == value.getClass()) {
            try {
                final String[] values = (String[]) value;
                final byte[] results = new byte[values.length];
                for (int i = 0; i < values.length; i++) {
                    results[i] = Byte.parseByte(values[i]);
                }
                return (results);
            } catch (final Exception e) {
                if (useDefault) {
                    return (defaultValue);
                } else {
                    throw new ConversionException(value.toString(), e);
                }
            }
        }

        // Parse the input value as a String into elements
        // and convert to the appropriate type
        try {
            final List list = parseElements(value.toString());
            final byte[] results = new byte[list.size()];
            for (int i = 0; i < results.length; i++) {
                results[i] = Byte.parseByte((String) list.get(i));
            }
            return (results);
        } catch (final Exception e) {
            if (useDefault) {
                return (defaultValue);
            } else {
                throw new ConversionException(value.toString(), e);
            }
        }

    }","  public void test2()  throws Throwable  {
      ByteArrayConverter byteArrayConverter0 = new ByteArrayConverter();
      Class<Integer> class0 = Integer.class;
      // Undeclared exception!
      try { 
        byteArrayConverter0.convert(class0, (Object) null);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // No value specified
         //
         verifyException(""org.apache.commons.beanutils.converters.ByteArrayConverter"", e);
      }
  }"
1637,"    protected Class<Integer> getDefaultType() {
        return Integer.class;
    }","  public void test0()  throws Throwable  {
      IntegerConverter integerConverter0 = new IntegerConverter();
      Class<Integer> class0 = integerConverter0.getDefaultType();
}"
1638,"    public IntegerConverter() {
        super(false);
    }","  public void test1()  throws Throwable  {
      Integer integer0 = new Integer((-890));
      IntegerConverter integerConverter0 = new IntegerConverter(integer0);
}"
1639,"    public IntegerConverter() {
        super(false);
    }","  public void test2()  throws Throwable  {
      Object object0 = new Object();
      IntegerConverter integerConverter0 = null;
      try {
        integerConverter0 = new IntegerConverter(object0);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // Error converting from 'Object' to 'Integer' For input string: \""java.lang.Object@0000000002\""
         //
         verifyException(""org.apache.commons.beanutils.converters.AbstractConverter"", e);
      }
  }"
1640,"    public Object convert(final Class type, final Object value) {

        // Deal with a null value
        if (value == null) {
            if (useDefault) {
                return (defaultValue);
            } else {
                throw new ConversionException(""No value specified"");
            }
        }

        // Deal with the no-conversion-needed case
        if (MODEL.getClass() == value.getClass()) {
            return (value);
        }

        // Deal with input value as a String array
        if (strings.getClass() == value.getClass()) {
            try {
                final String[] values = (String[]) value;
                final int[] results = new int[values.length];
                for (int i = 0; i < values.length; i++) {
                    results[i] = Integer.parseInt(values[i]);
                }
                return (results);
            } catch (final Exception e) {
                if (useDefault) {
                    return (defaultValue);
                } else {
                    throw new ConversionException(value.toString(), e);
                }
            }
        }

        // Parse the input value as a String into elements
        // and convert to the appropriate type
        try {
            final List list = parseElements(value.toString());
            final int[] results = new int[list.size()];
            for (int i = 0; i < results.length; i++) {
                results[i] = Integer.parseInt((String) list.get(i));
            }
            return (results);
        } catch (final Exception e) {
            if (useDefault) {
                return (defaultValue);
            } else {
                throw new ConversionException(value.toString(), e);
            }
        }

    }","  public void test0()  throws Throwable  {
      Object object0 = new Object();
      IntegerArrayConverter integerArrayConverter0 = new IntegerArrayConverter(object0);
      Class<Object> class0 = Object.class;
      Object object1 = integerArrayConverter0.convert(class0, class0);
}"
1641,"    public Object convert(final Class type, final Object value) {

        // Deal with a null value
        if (value == null) {
            if (useDefault) {
                return (defaultValue);
            } else {
                throw new ConversionException(""No value specified"");
            }
        }

        // Deal with the no-conversion-needed case
        if (MODEL.getClass() == value.getClass()) {
            return (value);
        }

        // Deal with input value as a String array
        if (strings.getClass() == value.getClass()) {
            try {
                final String[] values = (String[]) value;
                final int[] results = new int[values.length];
                for (int i = 0; i < values.length; i++) {
                    results[i] = Integer.parseInt(values[i]);
                }
                return (results);
            } catch (final Exception e) {
                if (useDefault) {
                    return (defaultValue);
                } else {
                    throw new ConversionException(value.toString(), e);
                }
            }
        }

        // Parse the input value as a String into elements
        // and convert to the appropriate type
        try {
            final List list = parseElements(value.toString());
            final int[] results = new int[list.size()];
            for (int i = 0; i < results.length; i++) {
                results[i] = Integer.parseInt((String) list.get(i));
            }
            return (results);
        } catch (final Exception e) {
            if (useDefault) {
                return (defaultValue);
            } else {
                throw new ConversionException(value.toString(), e);
            }
        }

    }","  public void test1()  throws Throwable  {
      Object object0 = new Object();
      IntegerArrayConverter integerArrayConverter0 = new IntegerArrayConverter(object0);
      Class<Object> class0 = Object.class;
      Object object1 = integerArrayConverter0.convert(class0, class0);
}"
1642,"    public Object convert(final Class type, final Object value) {

        // Deal with a null value
        if (value == null) {
            if (useDefault) {
                return (defaultValue);
            } else {
                throw new ConversionException(""No value specified"");
            }
        }

        // Deal with the no-conversion-needed case
        if (MODEL.getClass() == value.getClass()) {
            return (value);
        }

        // Deal with input value as a String array
        if (strings.getClass() == value.getClass()) {
            try {
                final String[] values = (String[]) value;
                final int[] results = new int[values.length];
                for (int i = 0; i < values.length; i++) {
                    results[i] = Integer.parseInt(values[i]);
                }
                return (results);
            } catch (final Exception e) {
                if (useDefault) {
                    return (defaultValue);
                } else {
                    throw new ConversionException(value.toString(), e);
                }
            }
        }

        // Parse the input value as a String into elements
        // and convert to the appropriate type
        try {
            final List list = parseElements(value.toString());
            final int[] results = new int[list.size()];
            for (int i = 0; i < results.length; i++) {
                results[i] = Integer.parseInt((String) list.get(i));
            }
            return (results);
        } catch (final Exception e) {
            if (useDefault) {
                return (defaultValue);
            } else {
                throw new ConversionException(value.toString(), e);
            }
        }

    }","  public void test2()  throws Throwable  {
      IntegerArrayConverter integerArrayConverter0 = new IntegerArrayConverter();
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        integerArrayConverter0.convert(class0, class0);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // java.lang.Class@0000000002
         //
         verifyException(""org.apache.commons.beanutils.converters.IntegerArrayConverter"", e);
      }
  }"
1643,"    public Object convert(final Class type, final Object value) {

        // Deal with a null value
        if (value == null) {
            if (useDefault) {
                return (defaultValue);
            } else {
                throw new ConversionException(""No value specified"");
            }
        }

        // Deal with the no-conversion-needed case
        if (MODEL.getClass() == value.getClass()) {
            return (value);
        }

        // Deal with input value as a String array
        if (strings.getClass() == value.getClass()) {
            try {
                final String[] values = (String[]) value;
                final int[] results = new int[values.length];
                for (int i = 0; i < values.length; i++) {
                    results[i] = Integer.parseInt(values[i]);
                }
                return (results);
            } catch (final Exception e) {
                if (useDefault) {
                    return (defaultValue);
                } else {
                    throw new ConversionException(value.toString(), e);
                }
            }
        }

        // Parse the input value as a String into elements
        // and convert to the appropriate type
        try {
            final List list = parseElements(value.toString());
            final int[] results = new int[list.size()];
            for (int i = 0; i < results.length; i++) {
                results[i] = Integer.parseInt((String) list.get(i));
            }
            return (results);
        } catch (final Exception e) {
            if (useDefault) {
                return (defaultValue);
            } else {
                throw new ConversionException(value.toString(), e);
            }
        }

    }","  public void test3()  throws Throwable  {
      IntegerArrayConverter integerArrayConverter0 = new IntegerArrayConverter();
      integerArrayConverter0.useDefault = true;
      Class<Object> class0 = Object.class;
      Object object0 = integerArrayConverter0.convert(class0, (Object) null);
}"
1644,"    public Object convert(final Class type, final Object value) {

        // Deal with a null value
        if (value == null) {
            if (useDefault) {
                return (defaultValue);
            } else {
                throw new ConversionException(""No value specified"");
            }
        }

        // Deal with the no-conversion-needed case
        if (MODEL.getClass() == value.getClass()) {
            return (value);
        }

        // Deal with input value as a String array
        if (strings.getClass() == value.getClass()) {
            try {
                final String[] values = (String[]) value;
                final int[] results = new int[values.length];
                for (int i = 0; i < values.length; i++) {
                    results[i] = Integer.parseInt(values[i]);
                }
                return (results);
            } catch (final Exception e) {
                if (useDefault) {
                    return (defaultValue);
                } else {
                    throw new ConversionException(value.toString(), e);
                }
            }
        }

        // Parse the input value as a String into elements
        // and convert to the appropriate type
        try {
            final List list = parseElements(value.toString());
            final int[] results = new int[list.size()];
            for (int i = 0; i < results.length; i++) {
                results[i] = Integer.parseInt((String) list.get(i));
            }
            return (results);
        } catch (final Exception e) {
            if (useDefault) {
                return (defaultValue);
            } else {
                throw new ConversionException(value.toString(), e);
            }
        }

    }","  public void test4()  throws Throwable  {
      IntegerArrayConverter integerArrayConverter0 = new IntegerArrayConverter();
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        integerArrayConverter0.convert(class0, (Object) null);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // No value specified
         //
         verifyException(""org.apache.commons.beanutils.converters.IntegerArrayConverter"", e);
      }
  }"
1645,"    public String toString() {
        final StringBuilder buffer = new StringBuilder();
        buffer.append(toString(getClass()));
        buffer.append(""[UseDefault="");
        buffer.append(isUseDefault());
        buffer.append("", UseLocaleFormat="");
        buffer.append(useLocaleFormat);
        if (pattern != null) {
            buffer.append("", Pattern="");
            buffer.append(pattern);
        }
        if (locale != null) {
            buffer.append("", Locale="");
            buffer.append(locale);
        }
        buffer.append(']');
        return buffer.toString();
    }","  public void test0()  throws Throwable  {
      int int0 = 127;
      Integer integer0 = new Integer(127);
      ByteConverter byteConverter0 = new ByteConverter(integer0);
      byteConverter0.toString();
      LongConverter longConverter0 = null;
      try {
        longConverter0 = new LongConverter(byteConverter0);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // Error converting from 'ByteConverter' to 'Long' For input string: \""org.apache.commons.beanutils.converters.ByteConverter@0000000001\""
         //
         verifyException(""org.apache.commons.beanutils.converters.AbstractConverter"", e);
      }
  }"
1646,,"  public void test1()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ""olxV2>J"");
      BigDecimal bigDecimal0 = new BigDecimal(498286329856L);
      FileSystemHandling.shouldAllThrowIOExceptions();
      DoubleConverter doubleConverter0 = new DoubleConverter(bigDecimal0);
      Class<Short> class0 = Short.class;
      // Undeclared exception!
      try { 
        doubleConverter0.handleMissing(class0);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // Default conversion to Short failed.
         //
         verifyException(""org.apache.commons.beanutils.converters.AbstractConverter"", e);
      }
  }"
1647,"    public String toString() {
        final StringBuilder buffer = new StringBuilder();
        buffer.append(toString(getClass()));
        buffer.append(""[UseDefault="");
        buffer.append(isUseDefault());
        buffer.append("", UseLocaleFormat="");
        buffer.append(useLocaleFormat);
        if (pattern != null) {
            buffer.append("", Pattern="");
            buffer.append(pattern);
        }
        if (locale != null) {
            buffer.append("", Locale="");
            buffer.append(locale);
        }
        buffer.append(']');
        return buffer.toString();
    }","  public void test2()  throws Throwable  {
      LongConverter longConverter0 = new LongConverter();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      Locale locale0 = Locale.CANADA_FRENCH;
      longConverter0.setLocale(locale0);
      longConverter0.setPattern("""");
      System.setCurrentTimeMillis((-128L));
      longConverter0.toString();
      // Undeclared exception!
      try { 
        longConverter0.setDefaultValue(""LongConverter[UseDefault=false, UseLocaleFormat=true, Pattern=, Locale=fr_CA]"");
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // Error converting from 'String' to 'Long' Java heap space
         //
         verifyException(""org.apache.commons.beanutils.converters.AbstractConverter"", e);
      }
  }"
1648,,"  public void test3()  throws Throwable  {
      long long0 = 250084994080L;
      Long long1 = new Long(250084994080L);
      Long.min(250084994080L, 250084994080L);
      IntegerConverter integerConverter0 = null;
      try {
        integerConverter0 = new IntegerConverter(long1);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // Long value '250084994080' is too large for Integer
         //
         verifyException(""org.apache.commons.beanutils.converters.NumberConverter"", e);
      }
  }"
1649,"    protected String convertToString(final Object value) throws Throwable {

        String result = null;
        if (useLocaleFormat && value instanceof Number) {
            final NumberFormat format = getFormat();
            format.setGroupingUsed(false);
            result = format.format(value);
            if (log().isDebugEnabled()) {
                log().debug(""    Converted  to String using format '"" + result + ""'"");
            }

        } else {
            result = value.toString();
            if (log().isDebugEnabled()) {
                log().debug(""    Converted  to String using toString() '"" + result + ""'"");
            }
        }
        return result;

    }","  public void test4()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      FloatConverter floatConverter0 = new FloatConverter(boolean0);
      Boolean.logicalAnd(true, true);
      floatConverter0.isAllowDecimals();
      Locale locale0 = Locale.CHINA;
      locale0.getExtensionKeys();
      floatConverter0.setLocale(locale0);
      floatConverter0.toString();
      ByteConverter byteConverter0 = new ByteConverter(boolean0);
      byteConverter0.setPattern(""FloatConverter[UseDefault=true, UseLocaleFormat=true, Locale=zh_CN]"");
      byteConverter0.getDefaultType();
      byteConverter0.getDefaultType();
      floatConverter0.getLocale();
      DoubleConverter doubleConverter0 = new DoubleConverter();
      doubleConverter0.getDefaultType();
      floatConverter0.setPattern("")"");
      BigDecimalConverter bigDecimalConverter0 = new BigDecimalConverter();
      bigDecimalConverter0.getDefaultType();
      bigDecimalConverter0.getDefaultType();
      byteConverter0.toString();
      Class<Float> class0 = Float.class;
      Short short0 = new Short((short)0);
      Short.compare((short)0, (short)0);
      doubleConverter0.convertToType(class0, (Object) short0);
      floatConverter0.setUseLocaleFormat(false);
      Byte byte0 = new Byte((byte)1);
      try { 
        byteConverter0.convertToString(byte0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Malformed pattern \""FloatConverter[UseDefault=true, UseLocaleFormat=true, Locale=zh_CN]\""
         //
         verifyException(""java.text.DecimalFormat"", e);
      }
  }"
1650,"    protected String convertToString(final Object value) throws Throwable {

        String result = null;
        if (useLocaleFormat && value instanceof Number) {
            final NumberFormat format = getFormat();
            format.setGroupingUsed(false);
            result = format.format(value);
            if (log().isDebugEnabled()) {
                log().debug(""    Converted  to String using format '"" + result + ""'"");
            }

        } else {
            result = value.toString();
            if (log().isDebugEnabled()) {
                log().debug(""    Converted  to String using toString() '"" + result + ""'"");
            }
        }
        return result;

    }","  public void test5()  throws Throwable  {
      FloatConverter floatConverter0 = new FloatConverter();
      int int0 = 93;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ""lME&vJ.M*nk1>Ogu2G"");
      Random.setNextRandom(93);
      Long long0 = new Long(93);
      floatConverter0.convertToString(long0);
      BigDecimalConverter bigDecimalConverter0 = new BigDecimalConverter();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)68;
      byteArray0[1] = (byte) (-47);
      byteArray0[2] = (byte)19;
      byteArray0[3] = (byte) (-94);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)9;
      byteArray0[6] = (byte)1;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Class<BigDecimal> class0 = BigDecimal.class;
      Double double0 = new Double(93);
      // Undeclared exception!
      try { 
        floatConverter0.convert(class0, (Object) double0);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // Error converting from 'Double' to 'BigDecimal' null
         //
         verifyException(""org.apache.commons.beanutils.converters.AbstractConverter"", e);
      }
  }"
1651,"    protected <T> T convertToType(final Class<T> targetType, final Object value) throws Throwable {

        final Class<?> sourceType = value.getClass();
        // Handle Number
        if (value instanceof Number) {
            return toNumber(sourceType, targetType, (Number)value);
        }

        // Handle Boolean
        if (value instanceof Boolean) {
            return toNumber(sourceType, targetType, ((Boolean)value).booleanValue() ? ONE : ZERO);
        }

        // Handle Date --> Long
        if (value instanceof Date && Long.class.equals(targetType)) {
            return targetType.cast(new Long(((Date)value).getTime()));
        }

        // Handle Calendar --> Long
        if (value instanceof Calendar  && Long.class.equals(targetType)) {
            return targetType.cast(new Long(((Calendar)value).getTime().getTime()));
        }

        // Convert all other types to String & handle
        final String stringValue = value.toString().trim();
        if (stringValue.length() == 0) {
            return handleMissing(targetType);
        }

        // Convert/Parse a String
        Number number = null;
        if (useLocaleFormat) {
            final NumberFormat format = getFormat();
            number = parse(sourceType, targetType, stringValue, format);
        } else {
            if (log().isDebugEnabled()) {
                log().debug(""    No NumberFormat, using default conversion"");
            }
            number = toNumber(sourceType, targetType, stringValue);
        }

        // Ensure the correct number type is returned
        return toNumber(sourceType, targetType, number);

    }","  public void test6()  throws Throwable  {
      ByteConverter byteConverter0 = new ByteConverter();
      byteConverter0.getDefaultType();
      BigDecimalConverter bigDecimalConverter0 = new BigDecimalConverter();
      bigDecimalConverter0.getDefaultType();
      Class<Long> class0 = Long.class;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(4, 4, 4);
      mockGregorianCalendar0.getTimeInMillis();
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      byteConverter0.convertToType(class0, (Object) date0);
  }"
1652,"    public String getPattern() {
        return pattern;
    }","  public void test7()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      FloatConverter floatConverter0 = new FloatConverter(boolean0);
      Boolean.logicalAnd(true, true);
      floatConverter0.isAllowDecimals();
      Locale locale0 = Locale.CHINA;
      locale0.getExtensionKeys();
      floatConverter0.setLocale(locale0);
      floatConverter0.toString();
      ByteConverter byteConverter0 = new ByteConverter(boolean0);
      byteConverter0.setPattern("""");
      byteConverter0.getDefaultType();
      byteConverter0.getDefaultType();
      floatConverter0.getLocale();
      DoubleConverter doubleConverter0 = new DoubleConverter();
      doubleConverter0.getDefaultType();
      floatConverter0.setPattern("")"");
      BigDecimalConverter bigDecimalConverter0 = new BigDecimalConverter();
      bigDecimalConverter0.getDefaultType();
      bigDecimalConverter0.getDefaultType();
      byteConverter0.toString();
      Class<Float> class0 = Float.class;
      Short short0 = new Short((short)0);
      Short.compare((short)0, (short)0);
      doubleConverter0.convertToType(class0, (Object) short0);
      floatConverter0.setUseLocaleFormat(false);
      Byte byte0 = new Byte((byte)1);
      byteConverter0.convertToString(byte0);
      doubleConverter0.setLocale(locale0);
      Double double0 = new Double(0.0);
      BigIntegerConverter bigIntegerConverter0 = new BigIntegerConverter(double0);
      bigIntegerConverter0.getDefaultType();
      byteConverter0.getPattern();
  }"
1653,"    protected <T> T convertToType(final Class<T> targetType, final Object value) throws Throwable {

        final Class<?> sourceType = value.getClass();
        // Handle Number
        if (value instanceof Number) {
            return toNumber(sourceType, targetType, (Number)value);
        }

        // Handle Boolean
        if (value instanceof Boolean) {
            return toNumber(sourceType, targetType, ((Boolean)value).booleanValue() ? ONE : ZERO);
        }

        // Handle Date --> Long
        if (value instanceof Date && Long.class.equals(targetType)) {
            return targetType.cast(new Long(((Date)value).getTime()));
        }

        // Handle Calendar --> Long
        if (value instanceof Calendar  && Long.class.equals(targetType)) {
            return targetType.cast(new Long(((Calendar)value).getTime().getTime()));
        }

        // Convert all other types to String & handle
        final String stringValue = value.toString().trim();
        if (stringValue.length() == 0) {
            return handleMissing(targetType);
        }

        // Convert/Parse a String
        Number number = null;
        if (useLocaleFormat) {
            final NumberFormat format = getFormat();
            number = parse(sourceType, targetType, stringValue, format);
        } else {
            if (log().isDebugEnabled()) {
                log().debug(""    No NumberFormat, using default conversion"");
            }
            number = toNumber(sourceType, targetType, stringValue);
        }

        // Ensure the correct number type is returned
        return toNumber(sourceType, targetType, number);

    }","  public void test8()  throws Throwable  {
      ShortConverter shortConverter0 = new ShortConverter();
      int int0 = 0;
      shortConverter0.setPattern(""yb%i7K;L,>"");
      Integer integer0 = new Integer(0);
      int int1 = (-1732);
      Integer.divideUnsigned((-1732), (-1732));
      Integer.remainderUnsigned(0, 110);
      Class<BigDecimal> class0 = BigDecimal.class;
      DecimalFormat decimalFormat0 = new DecimalFormat();
      try { 
        shortConverter0.convertToType(class0, (Object) decimalFormat0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Unquoted special character ';' in pattern \""yb%i7K;L,>\""
         //
         verifyException(""java.text.DecimalFormat"", e);
      }
  }"
1654,"    public String toString() {
        final StringBuilder buffer = new StringBuilder();
        buffer.append(toString(getClass()));
        buffer.append(""[UseDefault="");
        buffer.append(isUseDefault());
        buffer.append("", UseLocaleFormat="");
        buffer.append(useLocaleFormat);
        if (pattern != null) {
            buffer.append("", Pattern="");
            buffer.append(pattern);
        }
        if (locale != null) {
            buffer.append("", Locale="");
            buffer.append(locale);
        }
        buffer.append(']');
        return buffer.toString();
    }","  public void test9()  throws Throwable  {
      LongConverter longConverter0 = new LongConverter();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      Locale locale0 = Locale.CANADA_FRENCH;
      longConverter0.setLocale(locale0);
      longConverter0.toString();
      // Undeclared exception!
      try { 
        longConverter0.setDefaultValue(""LongConverter[UseDefault=false, UseLocaleFormat=true, Locale=fr_CA]"");
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // Error converting from 'String' to 'Long' using pattern '#,##0.###' for locale=[fr_CA]
         //
         verifyException(""org.apache.commons.beanutils.converters.NumberConverter"", e);
      }
  }"
1655,"    public Locale getLocale() {
        return locale;
    }","  public void test10()  throws Throwable  {
      FloatConverter floatConverter0 = new FloatConverter();
      floatConverter0.getDefaultType();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      BigDecimalConverter bigDecimalConverter0 = new BigDecimalConverter();
      Class<BigInteger> class0 = BigInteger.class;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-121);
      byteArray0[3] = (byte)76;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)22;
      byteArray0[6] = (byte)0;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      bigInteger0.negate();
      bigInteger0.doubleValue();
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      bigDecimalConverter0.convertToType(class0, (Object) bigDecimal0);
      bigDecimalConverter0.toString();
      bigDecimalConverter0.isAllowDecimals();
      DoubleConverter doubleConverter0 = new DoubleConverter();
      Locale locale0 = Locale.ITALIAN;
      doubleConverter0.setLocale(locale0);
      doubleConverter0.getDefaultType();
      doubleConverter0.setUseLocaleFormat(true);
      bigDecimalConverter0.getDefaultType();
      doubleConverter0.getLocale();
      bigDecimalConverter0.getDefaultType();
  }"
1656,"    public void setLocale(final Locale locale) {
        this.locale = locale;
        setUseLocaleFormat(true);
    }","  public void test11()  throws Throwable  {
      BigIntegerConverter bigIntegerConverter0 = new BigIntegerConverter();
      bigIntegerConverter0.toString();
      Float float0 = new Float((-2215.579));
      Float.sum((-1.0F), 1524.21F);
      bigIntegerConverter0.convertArray(float0);
      Short short0 = new Short((short) (-796));
      bigIntegerConverter0.setDefaultValue(short0);
      Class<BigDecimal> class0 = BigDecimal.class;
      bigIntegerConverter0.convert(class0, (Object) class0);
      bigIntegerConverter0.setPattern(""@#x"");
      bigIntegerConverter0.setUseLocaleFormat(true);
      bigIntegerConverter0.toString();
      Locale locale0 = Locale.FRANCE;
      bigIntegerConverter0.setLocale(locale0);
  }"
1657,,"  public void test12()  throws Throwable  {
      float float0 = (-1409.1855F);
      Float float1 = new Float((-1409.1855F));
      float float2 = 1.0F;
      Float.sum((-1409.1855F), 1.0F);
      Float.isFinite((-1409.1855F));
      Float.min((-1409.1855F), (-1409.1855F));
      Float.isFinite((-1408.1855F));
      Float.min((-453.15F), 0.0F);
      Float.isFinite((-1408.1855F));
      Float.max((-1409.1855F), 1132.6129F);
      IntegerConverter integerConverter0 = new IntegerConverter(float1);
      Float float3 = new Float((-1409.1855F));
      ByteConverter byteConverter0 = null;
      try {
        byteConverter0 = new ByteConverter(float3);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // Float value '-1409.1855' is too small Byte
         //
         verifyException(""org.apache.commons.beanutils.converters.NumberConverter"", e);
      }
  }"
1658,,"  public void test13()  throws Throwable  {
      FloatConverter floatConverter0 = new FloatConverter();
      float float0 = (-1937.3F);
      Float float1 = new Float((-1937.3F));
      BigDecimalConverter bigDecimalConverter0 = null;
      try {
        bigDecimalConverter0 = new BigDecimalConverter(float1);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // Error converting from 'Float' to 'BigDecimal' null
         //
         verifyException(""org.apache.commons.beanutils.converters.AbstractConverter"", e);
      }
  }"
1659,"    public boolean isAllowDecimals() {
        return allowDecimals;
    }","  public void test14()  throws Throwable  {
      Short short0 = new Short((short) (-806));
      BigDecimalConverter bigDecimalConverter0 = new BigDecimalConverter(short0);
      bigDecimalConverter0.getPattern();
      bigDecimalConverter0.toString();
      bigDecimalConverter0.setPattern(""BigDecimalConverter[UseDefault=true, UseLocaleFormat=false]"");
      LongConverter longConverter0 = new LongConverter(short0);
      longConverter0.getDefaultType();
      Locale locale0 = Locale.US;
      Locale locale1 = Locale.CANADA_FRENCH;
      locale0.getDisplayVariant(locale1);
      bigDecimalConverter0.setLocale(locale0);
      bigDecimalConverter0.isAllowDecimals();
      ShortConverter shortConverter0 = new ShortConverter();
      shortConverter0.getDefaultType();
      longConverter0.getDefaultType();
  }"
1660,"    protected String convertToString(final Object value) throws Throwable {

        String result = null;
        if (useLocaleFormat && value instanceof Number) {
            final NumberFormat format = getFormat();
            format.setGroupingUsed(false);
            result = format.format(value);
            if (log().isDebugEnabled()) {
                log().debug(""    Converted  to String using format '"" + result + ""'"");
            }

        } else {
            result = value.toString();
            if (log().isDebugEnabled()) {
                log().debug(""    Converted  to String using toString() '"" + result + ""'"");
            }
        }
        return result;

    }","  public void test15()  throws Throwable  {
      Short short0 = new Short((short) (-1710));
      IntegerConverter integerConverter0 = new IntegerConverter(short0);
      integerConverter0.setDefaultValue((Object) null);
      integerConverter0.setUseLocaleFormat(false);
      integerConverter0.convertToString(short0);
      Boolean boolean0 = Boolean.TRUE;
      FloatConverter floatConverter0 = new FloatConverter(boolean0);
      Class<Object> class0 = Object.class;
      integerConverter0.handleError(class0, (Object) null, (Throwable) null);
      floatConverter0.getDefaultType();
      Short.compare((short) (-1710), (short) (-1710));
      Boolean.logicalOr(false, false);
      try { 
        integerConverter0.convertToString((Object) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.evosuite.runtime.System"", e);
      }
  }"
1661,"    protected String convertToString(final Object value) throws Throwable {

        String result = null;
        if (useLocaleFormat && value instanceof Number) {
            final NumberFormat format = getFormat();
            format.setGroupingUsed(false);
            result = format.format(value);
            if (log().isDebugEnabled()) {
                log().debug(""    Converted  to String using format '"" + result + ""'"");
            }

        } else {
            result = value.toString();
            if (log().isDebugEnabled()) {
                log().debug(""    Converted  to String using toString() '"" + result + ""'"");
            }
        }
        return result;

    }","  public void test16()  throws Throwable  {
      DoubleConverter doubleConverter0 = new DoubleConverter((Object) null);
      try { 
        doubleConverter0.convertToString((Object) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.evosuite.runtime.System"", e);
      }
  }"
1662,"    public String toString() {
        final StringBuilder buffer = new StringBuilder();
        buffer.append(toString(getClass()));
        buffer.append(""[UseDefault="");
        buffer.append(isUseDefault());
        buffer.append("", UseLocaleFormat="");
        buffer.append(useLocaleFormat);
        if (pattern != null) {
            buffer.append("", Pattern="");
            buffer.append(pattern);
        }
        if (locale != null) {
            buffer.append("", Locale="");
            buffer.append(locale);
        }
        buffer.append(']');
        return buffer.toString();
    }","  public void test17()  throws Throwable  {
      LongConverter longConverter0 = new LongConverter();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      Calendar.getAvailableCalendarTypes();
      longConverter0.setDefaultValue(mockGregorianCalendar0);
      longConverter0.toString();
      longConverter0.toString();
      Boolean boolean0 = new Boolean(""j"");
      BigIntegerConverter bigIntegerConverter0 = new BigIntegerConverter(boolean0);
      bigIntegerConverter0.getDefaultType();
  }"
1663,"    protected <T> T convertToType(final Class<T> targetType, final Object value) throws Throwable {

        final Class<?> sourceType = value.getClass();
        // Handle Number
        if (value instanceof Number) {
            return toNumber(sourceType, targetType, (Number)value);
        }

        // Handle Boolean
        if (value instanceof Boolean) {
            return toNumber(sourceType, targetType, ((Boolean)value).booleanValue() ? ONE : ZERO);
        }

        // Handle Date --> Long
        if (value instanceof Date && Long.class.equals(targetType)) {
            return targetType.cast(new Long(((Date)value).getTime()));
        }

        // Handle Calendar --> Long
        if (value instanceof Calendar  && Long.class.equals(targetType)) {
            return targetType.cast(new Long(((Calendar)value).getTime().getTime()));
        }

        // Convert all other types to String & handle
        final String stringValue = value.toString().trim();
        if (stringValue.length() == 0) {
            return handleMissing(targetType);
        }

        // Convert/Parse a String
        Number number = null;
        if (useLocaleFormat) {
            final NumberFormat format = getFormat();
            number = parse(sourceType, targetType, stringValue, format);
        } else {
            if (log().isDebugEnabled()) {
                log().debug(""    No NumberFormat, using default conversion"");
            }
            number = toNumber(sourceType, targetType, stringValue);
        }

        // Ensure the correct number type is returned
        return toNumber(sourceType, targetType, number);

    }","  public void test18()  throws Throwable  {
      BigIntegerConverter bigIntegerConverter0 = new BigIntegerConverter();
      boolean boolean0 = true;
      int int0 = (-1);
      Integer integer0 = new Integer((-1));
      Integer.getInteger(""nH^[tqRp"", (-1));
      bigIntegerConverter0.convertArray(integer0);
      bigIntegerConverter0.setUseLocaleFormat(true);
      bigIntegerConverter0.setUseLocaleFormat(false);
      Class<Long> class0 = Long.class;
      try { 
        bigIntegerConverter0.convertToType(class0, (Object) class0);
        fail(""Expecting exception: NumberFormatException"");
      } catch(NumberFormatException e) {
         //
         // For input string: \""java.lang.Class@0000000002\""
         //
         verifyException(""java.lang.NumberFormatException"", e);
      }
  }"
1664,"    public String toString() {
        final StringBuilder buffer = new StringBuilder();
        buffer.append(toString(getClass()));
        buffer.append(""[UseDefault="");
        buffer.append(isUseDefault());
        buffer.append("", UseLocaleFormat="");
        buffer.append(useLocaleFormat);
        if (pattern != null) {
            buffer.append("", Pattern="");
            buffer.append(pattern);
        }
        if (locale != null) {
            buffer.append("", Locale="");
            buffer.append(locale);
        }
        buffer.append(']');
        return buffer.toString();
    }","  public void test19()  throws Throwable  {
      boolean boolean0 = false;
      Boolean boolean1 = Boolean.valueOf(false);
      Boolean.getBoolean("""");
      IntegerConverter integerConverter0 = new IntegerConverter(boolean1);
      integerConverter0.toString();
      Class<Double> class0 = Double.class;
      integerConverter0.handleMissing(class0);
      Class<DecimalFormat> class1 = DecimalFormat.class;
      integerConverter0.toString();
      Boolean.logicalAnd(false, false);
      // Undeclared exception!
      try { 
        integerConverter0.convert(class1, (Object) class1);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // Default conversion to java.text.DecimalFormat failed.
         //
         verifyException(""org.apache.commons.beanutils.converters.AbstractConverter"", e);
      }
  }"
1665,"    protected String convertToString(final Object value) throws Throwable {

        String result = null;
        if (useLocaleFormat && value instanceof Number) {
            final NumberFormat format = getFormat();
            format.setGroupingUsed(false);
            result = format.format(value);
            if (log().isDebugEnabled()) {
                log().debug(""    Converted  to String using format '"" + result + ""'"");
            }

        } else {
            result = value.toString();
            if (log().isDebugEnabled()) {
                log().debug(""    Converted  to String using toString() '"" + result + ""'"");
            }
        }
        return result;

    }","  public void test20()  throws Throwable  {
      BigDecimalConverter bigDecimalConverter0 = new BigDecimalConverter();
      int int0 = 0;
      int int1 = 0;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 0, 0);
      mockGregorianCalendar0.getCalendarType();
      bigDecimalConverter0.convertArray(mockGregorianCalendar0);
      bigDecimalConverter0.getLocale();
      bigDecimalConverter0.setLocale((Locale) null);
      try { 
        bigDecimalConverter0.convertToString((Object) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.evosuite.runtime.System"", e);
      }
  }"
1666,"    protected <T> T convertToType(final Class<T> targetType, final Object value) throws Throwable {

        final Class<?> sourceType = value.getClass();
        // Handle Number
        if (value instanceof Number) {
            return toNumber(sourceType, targetType, (Number)value);
        }

        // Handle Boolean
        if (value instanceof Boolean) {
            return toNumber(sourceType, targetType, ((Boolean)value).booleanValue() ? ONE : ZERO);
        }

        // Handle Date --> Long
        if (value instanceof Date && Long.class.equals(targetType)) {
            return targetType.cast(new Long(((Date)value).getTime()));
        }

        // Handle Calendar --> Long
        if (value instanceof Calendar  && Long.class.equals(targetType)) {
            return targetType.cast(new Long(((Calendar)value).getTime().getTime()));
        }

        // Convert all other types to String & handle
        final String stringValue = value.toString().trim();
        if (stringValue.length() == 0) {
            return handleMissing(targetType);
        }

        // Convert/Parse a String
        Number number = null;
        if (useLocaleFormat) {
            final NumberFormat format = getFormat();
            number = parse(sourceType, targetType, stringValue, format);
        } else {
            if (log().isDebugEnabled()) {
                log().debug(""    No NumberFormat, using default conversion"");
            }
            number = toNumber(sourceType, targetType, stringValue);
        }

        // Ensure the correct number type is returned
        return toNumber(sourceType, targetType, number);

    }","  public void test21()  throws Throwable  {
      FloatConverter floatConverter0 = new FloatConverter();
      floatConverter0.isAllowDecimals();
      floatConverter0.toString();
      floatConverter0.getLocale();
      floatConverter0.setLocale((Locale) null);
      Locale.forLanguageTag(""FloatConverter[UseDefault=false, UseLocaleFormat=false]"");
      Class<DecimalFormat> class0 = DecimalFormat.class;
      try { 
        floatConverter0.convertToType(class0, (Object) class0);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // Error converting from 'Class' to 'java.text.DecimalFormat' using pattern '#,##0.###'
         //
         verifyException(""org.apache.commons.beanutils.converters.NumberConverter"", e);
      }
  }"
1667,"    public String toString() {
        final StringBuilder buffer = new StringBuilder();
        buffer.append(toString(getClass()));
        buffer.append(""[UseDefault="");
        buffer.append(isUseDefault());
        buffer.append("", UseLocaleFormat="");
        buffer.append(useLocaleFormat);
        if (pattern != null) {
            buffer.append("", Pattern="");
            buffer.append(pattern);
        }
        if (locale != null) {
            buffer.append("", Locale="");
            buffer.append(locale);
        }
        buffer.append(']');
        return buffer.toString();
    }","  public void test22()  throws Throwable  {
      LongConverter longConverter0 = new LongConverter();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      Locale.lookup(linkedList0, linkedList1);
      longConverter0.setLocale((Locale) null);
      longConverter0.toString();
      // Undeclared exception!
      try { 
        longConverter0.setDefaultValue(""LongConverter[UseDefault=false, UseLocaleFormat=true]"");
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // Error converting from 'String' to 'Long' using pattern '#,##0.###'
         //
         verifyException(""org.apache.commons.beanutils.converters.NumberConverter"", e);
      }
  }"
1668,"    protected <T> T convertToType(final Class<T> targetType, final Object value) throws Throwable {

        final Class<?> sourceType = value.getClass();
        // Handle Number
        if (value instanceof Number) {
            return toNumber(sourceType, targetType, (Number)value);
        }

        // Handle Boolean
        if (value instanceof Boolean) {
            return toNumber(sourceType, targetType, ((Boolean)value).booleanValue() ? ONE : ZERO);
        }

        // Handle Date --> Long
        if (value instanceof Date && Long.class.equals(targetType)) {
            return targetType.cast(new Long(((Date)value).getTime()));
        }

        // Handle Calendar --> Long
        if (value instanceof Calendar  && Long.class.equals(targetType)) {
            return targetType.cast(new Long(((Calendar)value).getTime().getTime()));
        }

        // Convert all other types to String & handle
        final String stringValue = value.toString().trim();
        if (stringValue.length() == 0) {
            return handleMissing(targetType);
        }

        // Convert/Parse a String
        Number number = null;
        if (useLocaleFormat) {
            final NumberFormat format = getFormat();
            number = parse(sourceType, targetType, stringValue, format);
        } else {
            if (log().isDebugEnabled()) {
                log().debug(""    No NumberFormat, using default conversion"");
            }
            number = toNumber(sourceType, targetType, stringValue);
        }

        // Ensure the correct number type is returned
        return toNumber(sourceType, targetType, number);

    }","  public void test23()  throws Throwable  {
      BigIntegerConverter bigIntegerConverter0 = new BigIntegerConverter();
      bigIntegerConverter0.toString();
      Class<String> class0 = String.class;
      Class<BigInteger> class1 = BigInteger.class;
      try { 
        bigIntegerConverter0.convertToType(class1, (Object) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.beanutils.converters.NumberConverter"", e);
      }
  }"
1669,,"  public void test24()  throws Throwable  {
      String string0 = "" failed."";
      ByteConverter byteConverter0 = null;
      try {
        byteConverter0 = new ByteConverter("" failed."");
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // Error converting from 'String' to 'Byte' For input string: \""java.lang.String@0000000002\""
         //
         verifyException(""org.apache.commons.beanutils.converters.AbstractConverter"", e);
      }
  }"
1670,"    public String toString() {
        final StringBuilder buffer = new StringBuilder();
        buffer.append(toString(getClass()));
        buffer.append(""[UseDefault="");
        buffer.append(isUseDefault());
        buffer.append("", UseLocaleFormat="");
        buffer.append(useLocaleFormat);
        if (pattern != null) {
            buffer.append("", Pattern="");
            buffer.append(pattern);
        }
        if (locale != null) {
            buffer.append("", Locale="");
            buffer.append(locale);
        }
        buffer.append(']');
        return buffer.toString();
    }","  public void test25()  throws Throwable  {
      ShortConverter shortConverter0 = new ShortConverter();
      shortConverter0.getDefaultType();
      Locale locale0 = Locale.FRANCE;
      Short short0 = new Short((short)1099);
      shortConverter0.convertToString(short0);
      shortConverter0.setDefaultValue(short0);
      shortConverter0.setLocale(locale0);
      shortConverter0.setLocale(locale0);
      shortConverter0.toString();
      FloatConverter floatConverter0 = new FloatConverter();
      floatConverter0.getDefaultType();
      BigDecimalConverter bigDecimalConverter0 = new BigDecimalConverter();
      bigDecimalConverter0.getDefaultType();
  }"
1671,"    protected String convertToString(final Object value) throws Throwable {

        String result = null;
        if (useLocaleFormat && value instanceof Number) {
            final NumberFormat format = getFormat();
            format.setGroupingUsed(false);
            result = format.format(value);
            if (log().isDebugEnabled()) {
                log().debug(""    Converted  to String using format '"" + result + ""'"");
            }

        } else {
            result = value.toString();
            if (log().isDebugEnabled()) {
                log().debug(""    Converted  to String using toString() '"" + result + ""'"");
            }
        }
        return result;

    }","  public void test26()  throws Throwable  {
      Byte byte0 = new Byte((byte)93);
      Byte.toUnsignedInt((byte)93);
      Byte.toUnsignedInt((byte)93);
      IntegerConverter integerConverter0 = new IntegerConverter(byte0);
      Byte.toUnsignedInt((byte)93);
      Byte.compare((byte)93, (byte)93);
      Byte.toUnsignedInt((byte)93);
      boolean boolean0 = true;
      Class<MockCalendar> class0 = MockCalendar.class;
      BigInteger bigInteger0 = BigInteger.TEN;
      integerConverter0.conversionException(class0, bigInteger0);
      integerConverter0.setUseLocaleFormat(true);
      integerConverter0.convertToString(byte0);
      integerConverter0.getDefaultType();
      integerConverter0.getDefaultType();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      FloatConverter floatConverter0 = null;
      try {
        floatConverter0 = new FloatConverter(mockGregorianCalendar0);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // Error converting from 'org.evosuite.runtime.mock.java.util.MockGregorianCalendar' to 'Float' For input string: \""org.evosuite.runtime.mock.java.util.MockGregorianCalendar@0000000004\""
         //
         verifyException(""org.apache.commons.beanutils.converters.AbstractConverter"", e);
      }
  }"
1672,"    protected <T> T convertToType(final Class<T> targetType, final Object value) throws Throwable {

        final Class<?> sourceType = value.getClass();
        // Handle Number
        if (value instanceof Number) {
            return toNumber(sourceType, targetType, (Number)value);
        }

        // Handle Boolean
        if (value instanceof Boolean) {
            return toNumber(sourceType, targetType, ((Boolean)value).booleanValue() ? ONE : ZERO);
        }

        // Handle Date --> Long
        if (value instanceof Date && Long.class.equals(targetType)) {
            return targetType.cast(new Long(((Date)value).getTime()));
        }

        // Handle Calendar --> Long
        if (value instanceof Calendar  && Long.class.equals(targetType)) {
            return targetType.cast(new Long(((Calendar)value).getTime().getTime()));
        }

        // Convert all other types to String & handle
        final String stringValue = value.toString().trim();
        if (stringValue.length() == 0) {
            return handleMissing(targetType);
        }

        // Convert/Parse a String
        Number number = null;
        if (useLocaleFormat) {
            final NumberFormat format = getFormat();
            number = parse(sourceType, targetType, stringValue, format);
        } else {
            if (log().isDebugEnabled()) {
                log().debug(""    No NumberFormat, using default conversion"");
            }
            number = toNumber(sourceType, targetType, stringValue);
        }

        // Ensure the correct number type is returned
        return toNumber(sourceType, targetType, number);

    }","  public void test27()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      bigDecimal0.precision();
      IntegerConverter integerConverter0 = new IntegerConverter(bigDecimal0);
      ShortConverter shortConverter0 = new ShortConverter();
      shortConverter0.getDefaultType();
      Class<Boolean> class0 = Boolean.class;
      try { 
        integerConverter0.convertToType(class0, (Object) bigInteger0);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // IntegerConverter cannot handle conversion to 'Boolean'
         //
         verifyException(""org.apache.commons.beanutils.converters.NumberConverter"", e);
      }
  }"
1673,,"  public void test28()  throws Throwable  {
      DecimalFormat decimalFormat0 = new DecimalFormat(""]"");
      LongConverter longConverter0 = null;
      try {
        longConverter0 = new LongConverter(decimalFormat0);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // Error converting from 'java.text.DecimalFormat' to 'Long' For input string: \""java.text.DecimalFormat@0000000002\""
         //
         verifyException(""org.apache.commons.beanutils.converters.AbstractConverter"", e);
      }
  }"
1674,,"  public void test29()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, (-1), 292, 2202, 3103);
      DoubleConverter doubleConverter0 = null;
      try {
        doubleConverter0 = new DoubleConverter(mockGregorianCalendar0);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // Error converting from 'org.evosuite.runtime.mock.java.util.MockGregorianCalendar' to 'Double' For input string: \""org.evosuite.runtime.mock.java.util.MockGregorianCalendar@0000000002\""
         //
         verifyException(""org.apache.commons.beanutils.converters.AbstractConverter"", e);
      }
  }"
1675,"    public boolean isAllowDecimals() {
        return allowDecimals;
    }","  public void test30()  throws Throwable  {
      Integer integer0 = new Integer(0);
      DoubleConverter doubleConverter0 = new DoubleConverter(integer0);
      doubleConverter0.isAllowDecimals();
  }"
1676,"    protected <T> T convertToType(final Class<T> targetType, final Object value) throws Throwable {

        final Class<?> sourceType = value.getClass();
        // Handle Number
        if (value instanceof Number) {
            return toNumber(sourceType, targetType, (Number)value);
        }

        // Handle Boolean
        if (value instanceof Boolean) {
            return toNumber(sourceType, targetType, ((Boolean)value).booleanValue() ? ONE : ZERO);
        }

        // Handle Date --> Long
        if (value instanceof Date && Long.class.equals(targetType)) {
            return targetType.cast(new Long(((Date)value).getTime()));
        }

        // Handle Calendar --> Long
        if (value instanceof Calendar  && Long.class.equals(targetType)) {
            return targetType.cast(new Long(((Calendar)value).getTime().getTime()));
        }

        // Convert all other types to String & handle
        final String stringValue = value.toString().trim();
        if (stringValue.length() == 0) {
            return handleMissing(targetType);
        }

        // Convert/Parse a String
        Number number = null;
        if (useLocaleFormat) {
            final NumberFormat format = getFormat();
            number = parse(sourceType, targetType, stringValue, format);
        } else {
            if (log().isDebugEnabled()) {
                log().debug(""    No NumberFormat, using default conversion"");
            }
            number = toNumber(sourceType, targetType, stringValue);
        }

        // Ensure the correct number type is returned
        return toNumber(sourceType, targetType, number);

    }","  public void test31()  throws Throwable  {
      BigIntegerConverter bigIntegerConverter0 = new BigIntegerConverter();
      bigIntegerConverter0.setPattern(""/ft#`|m{.3"");
      bigIntegerConverter0.setPattern(""/ft#`|m{.3"");
      Class<Date> class0 = Date.class;
      bigIntegerConverter0.toString(class0);
      bigIntegerConverter0.getPattern();
      BigDecimalConverter bigDecimalConverter0 = new BigDecimalConverter();
      bigDecimalConverter0.getDefaultType();
      Class<String> class1 = String.class;
      try { 
        bigDecimalConverter0.convertToType(class1, (Object) ""Date"");
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // BigDecimalConverter cannot handle conversion from 'String' to 'String'
         //
         verifyException(""org.apache.commons.beanutils.converters.NumberConverter"", e);
      }
  }"
1677,"    public void setPattern(final String pattern) {
        this.pattern = pattern;
        setUseLocaleFormat(true);
    }","  public void test32()  throws Throwable  {
      Byte byte0 = new Byte((byte)0);
      FloatConverter floatConverter0 = new FloatConverter(byte0);
      floatConverter0.convertToString(byte0);
      floatConverter0.setPattern(""java.lang.Byte@0000000002"");
      ShortConverter shortConverter0 = new ShortConverter(byte0);
      shortConverter0.getDefaultType();
      DoubleConverter doubleConverter0 = new DoubleConverter();
      doubleConverter0.getDefaultType();
      BigDecimalConverter bigDecimalConverter0 = new BigDecimalConverter();
      bigDecimalConverter0.getDefaultType();
      LongConverter longConverter0 = new LongConverter();
      longConverter0.getDefaultType();
  }"
1678,"    public String toString() {
        final StringBuilder buffer = new StringBuilder();
        buffer.append(toString(getClass()));
        buffer.append(""[UseDefault="");
        buffer.append(isUseDefault());
        buffer.append("", UseLocaleFormat="");
        buffer.append(useLocaleFormat);
        if (pattern != null) {
            buffer.append("", Pattern="");
            buffer.append(pattern);
        }
        if (locale != null) {
            buffer.append("", Locale="");
            buffer.append(locale);
        }
        buffer.append(']');
        return buffer.toString();
    }","  public void test33()  throws Throwable  {
      ShortConverter shortConverter0 = new ShortConverter();
      shortConverter0.toString();
      shortConverter0.setPattern(""ShortConverter[UseDefault=false, UseLocaleFormat=false]"");
      BigInteger bigInteger0 = BigInteger.ONE;
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      shortConverter0.convertArray(bigDecimal0);
      shortConverter0.toString();
      bigInteger0.bitLength();
      shortConverter0.setUseLocaleFormat(true);
      shortConverter0.setPattern(""ShortConverter[UseDefault=false, UseLocaleFormat=false]"");
      FloatConverter floatConverter0 = new FloatConverter(bigInteger0);
      floatConverter0.toString();
      floatConverter0.getDefaultType();
      shortConverter0.toString();
  }"
1679,"    public String toString() {
        final StringBuilder buffer = new StringBuilder();
        buffer.append(toString(getClass()));
        buffer.append(""[UseDefault="");
        buffer.append(isUseDefault());
        buffer.append("", UseLocaleFormat="");
        buffer.append(useLocaleFormat);
        if (pattern != null) {
            buffer.append("", Pattern="");
            buffer.append(pattern);
        }
        if (locale != null) {
            buffer.append("", Locale="");
            buffer.append(locale);
        }
        buffer.append(']');
        return buffer.toString();
    }","  public void test34()  throws Throwable  {
      IntegerConverter integerConverter0 = new IntegerConverter();
      Class<BigDecimal> class0 = BigDecimal.class;
      integerConverter0.toString(class0);
      integerConverter0.toString();
      integerConverter0.getDefaultType();
  }"
1680,"    public String getPattern() {
        return pattern;
    }","  public void test35()  throws Throwable  {
      BigIntegerConverter bigIntegerConverter0 = new BigIntegerConverter();
      Long long0 = new Long((-3264L));
      bigIntegerConverter0.setDefaultValue(long0);
      Long.max((-3264L), 0L);
      bigIntegerConverter0.convertToString(long0);
      bigIntegerConverter0.getDefaultType();
      FloatConverter floatConverter0 = new FloatConverter();
      boolean boolean0 = true;
      floatConverter0.setUseLocaleFormat(true);
      Class<Float> class0 = floatConverter0.getDefaultType();
      floatConverter0.getPattern();
      BigDecimalConverter bigDecimalConverter0 = null;
      try {
        bigDecimalConverter0 = new BigDecimalConverter(class0);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // Error converting from 'Class' to 'BigDecimal' null
         //
         verifyException(""org.apache.commons.beanutils.converters.AbstractConverter"", e);
      }
  }"
1681,"    public void setLocale(final Locale locale) {
        this.locale = locale;
        setUseLocaleFormat(true);
    }","  public void test36()  throws Throwable  {
      LongConverter longConverter0 = new LongConverter();
      longConverter0.setPattern(""!Fc*y7`"");
      longConverter0.isAllowDecimals();
      DoubleConverter doubleConverter0 = new DoubleConverter();
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      doubleConverter0.setLocale(locale0);
      doubleConverter0.getDefaultType();
  }"
1682,"    public void setPattern(final String pattern) {
        this.pattern = pattern;
        setUseLocaleFormat(true);
    }","  public void test37()  throws Throwable  {
      ByteConverter byteConverter0 = new ByteConverter();
      byteConverter0.setUseLocaleFormat(true);
      byteConverter0.getLocale();
      byteConverter0.setPattern("""");
  }"
1683,,"  public void test38()  throws Throwable  {
      ShortConverter shortConverter0 = new ShortConverter();
      BigDecimalConverter bigDecimalConverter0 = new BigDecimalConverter();
      Class<Float> class0 = Float.class;
      // Undeclared exception!
      try { 
        bigDecimalConverter0.convert(class0, (Object) class0);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // Error converting from 'Class' to 'Float' For input string: \""java.lang.Class@0000000003\""
         //
         verifyException(""org.apache.commons.beanutils.converters.AbstractConverter"", e);
      }
  }"
1684,"    protected <T> T convertToType(final Class<T> targetType, final Object value) throws Throwable {

        final Class<?> sourceType = value.getClass();
        // Handle Number
        if (value instanceof Number) {
            return toNumber(sourceType, targetType, (Number)value);
        }

        // Handle Boolean
        if (value instanceof Boolean) {
            return toNumber(sourceType, targetType, ((Boolean)value).booleanValue() ? ONE : ZERO);
        }

        // Handle Date --> Long
        if (value instanceof Date && Long.class.equals(targetType)) {
            return targetType.cast(new Long(((Date)value).getTime()));
        }

        // Handle Calendar --> Long
        if (value instanceof Calendar  && Long.class.equals(targetType)) {
            return targetType.cast(new Long(((Calendar)value).getTime().getTime()));
        }

        // Convert all other types to String & handle
        final String stringValue = value.toString().trim();
        if (stringValue.length() == 0) {
            return handleMissing(targetType);
        }

        // Convert/Parse a String
        Number number = null;
        if (useLocaleFormat) {
            final NumberFormat format = getFormat();
            number = parse(sourceType, targetType, stringValue, format);
        } else {
            if (log().isDebugEnabled()) {
                log().debug(""    No NumberFormat, using default conversion"");
            }
            number = toNumber(sourceType, targetType, stringValue);
        }

        // Ensure the correct number type is returned
        return toNumber(sourceType, targetType, number);

    }","  public void test39()  throws Throwable  {
      LongConverter longConverter0 = new LongConverter();
      Class<Integer> class0 = Integer.class;
      Object object0 = new Object();
      try { 
        longConverter0.convertToType(class0, object0);
        fail(""Expecting exception: NumberFormatException"");
      } catch(NumberFormatException e) {
         //
         // For input string: \""java.lang.Object@0000000002\""
         //
         verifyException(""java.lang.NumberFormatException"", e);
      }
  }"
1685,,"  public void test40()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      ShortConverter shortConverter0 = null;
      try {
        shortConverter0 = new ShortConverter(date0);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // Error converting from 'Date' to 'Short' For input string: \""java.util.Date@0000000002\""
         //
         verifyException(""org.apache.commons.beanutils.converters.AbstractConverter"", e);
      }
  }"
1686,,"  public void test41()  throws Throwable  {
      ShortConverter shortConverter0 = new ShortConverter();
      BigIntegerConverter bigIntegerConverter0 = null;
      try {
        bigIntegerConverter0 = new BigIntegerConverter(shortConverter0);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // Error converting from 'ShortConverter' to 'BigInteger' For input string: \""or\""
         //
         verifyException(""org.apache.commons.beanutils.converters.AbstractConverter"", e);
      }
  }"
1687,,"  public void test42()  throws Throwable  {
      Boolean boolean0 = new Boolean(""    (N.B. Converters can be configured to use default values to avoid throwing exceptions)"");
      FloatConverter floatConverter0 = new FloatConverter(boolean0);
  }"
1688,,"  public void test43()  throws Throwable  {
      Long long0 = new Long((-4522L));
      FloatConverter floatConverter0 = new FloatConverter(long0);
  }"
1689,,"  public void test44()  throws Throwable  {
      Long long0 = new Long(641L);
      ByteConverter byteConverter0 = null;
      try {
        byteConverter0 = new ByteConverter(long0);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // Long value '641' is too large for Byte
         //
         verifyException(""org.apache.commons.beanutils.converters.NumberConverter"", e);
      }
  }"
1690,"    public String toString() {
        final StringBuilder buffer = new StringBuilder();
        buffer.append(toString(getClass()));
        buffer.append(""[UseDefault="");
        buffer.append(isUseDefault());
        buffer.append("", UseLocaleFormat="");
        buffer.append(useLocaleFormat);
        if (pattern != null) {
            buffer.append("", Pattern="");
            buffer.append(pattern);
        }
        if (locale != null) {
            buffer.append("", Locale="");
            buffer.append(locale);
        }
        buffer.append(']');
        return buffer.toString();
    }","  public void test45()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[0] = (byte) (-83);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger1 = BigInteger.probablePrime(46, mockRandom0);
      bigInteger0.toString();
      ByteConverter byteConverter0 = new ByteConverter(bigInteger0);
      DoubleConverter doubleConverter0 = new DoubleConverter(bigInteger1);
      doubleConverter0.getDefaultType();
  }"
1691,,"  public void test46()  throws Throwable  {
      ByteConverter byteConverter0 = null;
      try {
        byteConverter0 = new ByteConverter("",4c"");
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // Error converting from 'String' to 'Byte' For input string: \""java.lang.String@0000000002\""
         //
         verifyException(""org.apache.commons.beanutils.converters.AbstractConverter"", e);
      }
  }"
1692,,"  public void test47()  throws Throwable  {
      int int0 = (-2145808542);
      Integer integer0 = Integer.valueOf((-2145808542));
      Random.setNextRandom((-2145808542));
      ShortConverter shortConverter0 = null;
      try {
        shortConverter0 = new ShortConverter(integer0);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // Integer value '-2145808542' is too small Short
         //
         verifyException(""org.apache.commons.beanutils.converters.NumberConverter"", e);
      }
  }"
1693,,"  public void test48()  throws Throwable  {
      Float float0 = new Float(3829.585190458);
      BigDecimalConverter bigDecimalConverter0 = null;
      try {
        bigDecimalConverter0 = new BigDecimalConverter(float0);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // Error converting from 'Float' to 'BigDecimal' null
         //
         verifyException(""org.apache.commons.beanutils.converters.AbstractConverter"", e);
      }
  }"
1694,"    protected <T> T convertToType(final Class<T> targetType, final Object value) throws Throwable {

        final Class<?> sourceType = value.getClass();
        // Handle Number
        if (value instanceof Number) {
            return toNumber(sourceType, targetType, (Number)value);
        }

        // Handle Boolean
        if (value instanceof Boolean) {
            return toNumber(sourceType, targetType, ((Boolean)value).booleanValue() ? ONE : ZERO);
        }

        // Handle Date --> Long
        if (value instanceof Date && Long.class.equals(targetType)) {
            return targetType.cast(new Long(((Date)value).getTime()));
        }

        // Handle Calendar --> Long
        if (value instanceof Calendar  && Long.class.equals(targetType)) {
            return targetType.cast(new Long(((Calendar)value).getTime().getTime()));
        }

        // Convert all other types to String & handle
        final String stringValue = value.toString().trim();
        if (stringValue.length() == 0) {
            return handleMissing(targetType);
        }

        // Convert/Parse a String
        Number number = null;
        if (useLocaleFormat) {
            final NumberFormat format = getFormat();
            number = parse(sourceType, targetType, stringValue, format);
        } else {
            if (log().isDebugEnabled()) {
                log().debug(""    No NumberFormat, using default conversion"");
            }
            number = toNumber(sourceType, targetType, stringValue);
        }

        // Ensure the correct number type is returned
        return toNumber(sourceType, targetType, number);

    }","  public void test49()  throws Throwable  {
      Class<BigInteger> class0 = BigInteger.class;
      BigDecimal bigDecimal0 = new BigDecimal(1191);
      BigIntegerConverter bigIntegerConverter0 = new BigIntegerConverter(bigDecimal0);
      Class<Object> class1 = Object.class;
      try { 
        bigIntegerConverter0.convertToType(class1, (Object) """");
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // BigIntegerConverter cannot handle conversion from 'String' to 'Object'
         //
         verifyException(""org.apache.commons.beanutils.converters.NumberConverter"", e);
      }
  }"
1695,,"  public void test50()  throws Throwable  {
      int int0 = 129;
      Integer integer0 = new Integer(129);
      ByteConverter byteConverter0 = null;
      try {
        byteConverter0 = new ByteConverter(integer0);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // Integer value '129' is too large for Byte
         //
         verifyException(""org.apache.commons.beanutils.converters.NumberConverter"", e);
      }
  }"
1696,,"  public void test51()  throws Throwable  {
      FloatConverter floatConverter0 = new FloatConverter();
      int int0 = 41;
      Random.setNextRandom(41);
      floatConverter0.log();
      Class<BigDecimal> class0 = BigDecimal.class;
      Double double0 = new Double(41);
      // Undeclared exception!
      try { 
        floatConverter0.convert(class0, (Object) double0);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // Error converting from 'Double' to 'BigDecimal' null
         //
         verifyException(""org.apache.commons.beanutils.converters.AbstractConverter"", e);
      }
  }"
1697,,"  public void test52()  throws Throwable  {
      BigDecimal bigDecimal0 = new BigDecimal(498286329856L);
      FileSystemHandling.shouldAllThrowIOExceptions();
      DoubleConverter doubleConverter0 = new DoubleConverter(bigDecimal0);
      Class<Short> class0 = Short.class;
      // Undeclared exception!
      try { 
        doubleConverter0.handleMissing(class0);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // Default conversion to Short failed.
         //
         verifyException(""org.apache.commons.beanutils.converters.AbstractConverter"", e);
      }
  }"
1698,,"  public void test53()  throws Throwable  {
      DoubleConverter doubleConverter0 = new DoubleConverter();
      MockDate mockDate0 = new MockDate(0, 0, 0, 0, 0);
      LongConverter longConverter0 = new LongConverter(mockDate0);
  }"
1699,,"  public void test54()  throws Throwable  {
      long long0 = 250084994129L;
      Long long1 = new Long(250084994129L);
      IntegerConverter integerConverter0 = null;
      try {
        integerConverter0 = new IntegerConverter(long1);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // Long value '250084994129' is too large for Integer
         //
         verifyException(""org.apache.commons.beanutils.converters.NumberConverter"", e);
      }
  }"
1700,,"  public void test55()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      LongConverter longConverter0 = new LongConverter(mockGregorianCalendar0);
  }"
1701,,"  public void test56()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      BigIntegerConverter bigIntegerConverter0 = null;
      try {
        bigIntegerConverter0 = new BigIntegerConverter(mockDate0);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // Error converting from 'org.evosuite.runtime.mock.java.util.MockDate' to 'BigInteger' For input string: \""o\""
         //
         verifyException(""org.apache.commons.beanutils.converters.AbstractConverter"", e);
      }
  }"
1702,"    public String toString() {
        final StringBuilder buffer = new StringBuilder();
        buffer.append(toString(getClass()));
        buffer.append(""[UseDefault="");
        buffer.append(isUseDefault());
        buffer.append("", UseLocaleFormat="");
        buffer.append(useLocaleFormat);
        if (pattern != null) {
            buffer.append("", Pattern="");
            buffer.append(pattern);
        }
        if (locale != null) {
            buffer.append("", Locale="");
            buffer.append(locale);
        }
        buffer.append(']');
        return buffer.toString();
    }","  public void test57()  throws Throwable  {
      LongConverter longConverter0 = new LongConverter();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.KOREAN;
      longConverter0.setLocale(locale0);
      longConverter0.setPattern(""/i"");
      longConverter0.toString();
      // Undeclared exception!
      try { 
        longConverter0.setDefaultValue(""LongConverter[UseDefault=false, UseLocaleFormat=true, Pattern=/i, Locale=ko]"");
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // Error converting from 'String' to 'Long' using pattern '/i#' for locale=[ko]
         //
         verifyException(""org.apache.commons.beanutils.converters.NumberConverter"", e);
      }
  }"
1703,"    public String toString() {
        final StringBuilder buffer = new StringBuilder();
        buffer.append(toString(getClass()));
        buffer.append(""[UseDefault="");
        buffer.append(isUseDefault());
        buffer.append("", UseLocaleFormat="");
        buffer.append(useLocaleFormat);
        if (pattern != null) {
            buffer.append("", Pattern="");
            buffer.append(pattern);
        }
        if (locale != null) {
            buffer.append("", Locale="");
            buffer.append(locale);
        }
        buffer.append(']');
        return buffer.toString();
    }","  public void test58()  throws Throwable  {
      LongConverter longConverter0 = new LongConverter();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      Locale locale0 = Locale.KOREAN;
      longConverter0.setLocale(locale0);
      longConverter0.setPattern("""");
      System.setCurrentTimeMillis((-1023L));
      longConverter0.toString();
      // Undeclared exception!
      try { 
        longConverter0.setDefaultValue(""LongConverter[UseDefault=false, UseLocaleFormat=true, Pattern=, Locale=ko]"");
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // Error converting from 'String' to 'Long' Java heap space
         //
         verifyException(""org.apache.commons.beanutils.converters.AbstractConverter"", e);
      }
  }"
1704,"    protected String convertToString(final Object value) throws Throwable {

        String result = null;
        if (useLocaleFormat && value instanceof Number) {
            final NumberFormat format = getFormat();
            format.setGroupingUsed(false);
            result = format.format(value);
            if (log().isDebugEnabled()) {
                log().debug(""    Converted  to String using format '"" + result + ""'"");
            }

        } else {
            result = value.toString();
            if (log().isDebugEnabled()) {
                log().debug(""    Converted  to String using toString() '"" + result + ""'"");
            }
        }
        return result;

    }","  public void test59()  throws Throwable  {
      Byte byte0 = new Byte((byte)93);
      Byte.toUnsignedInt((byte)93);
      IntegerConverter integerConverter0 = new IntegerConverter(byte0);
      Byte.toUnsignedInt((byte)93);
      Byte.compare((byte)93, (byte)93);
      Byte.toUnsignedInt((byte)93);
      boolean boolean0 = false;
      BigInteger bigInteger0 = BigInteger.TEN;
      integerConverter0.convertToString(byte0);
      integerConverter0.getDefaultType();
      integerConverter0.getDefaultType();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      FloatConverter floatConverter0 = null;
      try {
        floatConverter0 = new FloatConverter(mockGregorianCalendar0);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // Error converting from 'org.evosuite.runtime.mock.java.util.MockGregorianCalendar' to 'Float' For input string: \""org.evosuite.runtime.mock.java.util.MockGregorianCalendar@0000000004\""
         //
         verifyException(""org.apache.commons.beanutils.converters.AbstractConverter"", e);
      }
  }"
1705,"    public String toString() {
        final StringBuilder buffer = new StringBuilder();
        buffer.append(toString(getClass()));
        buffer.append(""[UseDefault="");
        buffer.append(isUseDefault());
        buffer.append("", UseLocaleFormat="");
        buffer.append(useLocaleFormat);
        if (pattern != null) {
            buffer.append("", Pattern="");
            buffer.append(pattern);
        }
        if (locale != null) {
            buffer.append("", Locale="");
            buffer.append(locale);
        }
        buffer.append(']');
        return buffer.toString();
    }","  public void test60()  throws Throwable  {
      boolean boolean0 = false;
      Boolean boolean1 = Boolean.valueOf(false);
      IntegerConverter integerConverter0 = new IntegerConverter(boolean1);
      integerConverter0.toString();
      Class<DecimalFormat> class0 = DecimalFormat.class;
      Double double0 = new Double(3.4028234663852886E38);
      FloatConverter floatConverter0 = new FloatConverter(double0);
      floatConverter0.getDefaultType();
      // Undeclared exception!
      try { 
        integerConverter0.convert(class0, (Object) class0);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // Default conversion to java.text.DecimalFormat failed.
         //
         verifyException(""org.apache.commons.beanutils.converters.AbstractConverter"", e);
      }
  }"
1706,"    protected <T> T convertToType(final Class<T> targetType, final Object value) throws Throwable {

        final Class<?> sourceType = value.getClass();
        // Handle Number
        if (value instanceof Number) {
            return toNumber(sourceType, targetType, (Number)value);
        }

        // Handle Boolean
        if (value instanceof Boolean) {
            return toNumber(sourceType, targetType, ((Boolean)value).booleanValue() ? ONE : ZERO);
        }

        // Handle Date --> Long
        if (value instanceof Date && Long.class.equals(targetType)) {
            return targetType.cast(new Long(((Date)value).getTime()));
        }

        // Handle Calendar --> Long
        if (value instanceof Calendar  && Long.class.equals(targetType)) {
            return targetType.cast(new Long(((Calendar)value).getTime().getTime()));
        }

        // Convert all other types to String & handle
        final String stringValue = value.toString().trim();
        if (stringValue.length() == 0) {
            return handleMissing(targetType);
        }

        // Convert/Parse a String
        Number number = null;
        if (useLocaleFormat) {
            final NumberFormat format = getFormat();
            number = parse(sourceType, targetType, stringValue, format);
        } else {
            if (log().isDebugEnabled()) {
                log().debug(""    No NumberFormat, using default conversion"");
            }
            number = toNumber(sourceType, targetType, stringValue);
        }

        // Ensure the correct number type is returned
        return toNumber(sourceType, targetType, number);

    }","  public void test61()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      FloatConverter floatConverter0 = new FloatConverter(boolean0);
      ByteConverter byteConverter0 = new ByteConverter(boolean0);
      byteConverter0.setPattern("""");
      byteConverter0.getDefaultType();
      floatConverter0.getLocale();
      DoubleConverter doubleConverter0 = new DoubleConverter();
      doubleConverter0.getDefaultType();
      floatConverter0.setPattern("")"");
      BigDecimalConverter bigDecimalConverter0 = new BigDecimalConverter();
      bigDecimalConverter0.getDefaultType();
      floatConverter0.setUseLocaleFormat(false);
      Byte byte0 = new Byte((byte)35);
      byteConverter0.convertToString(byte0);
      Double double0 = new Double(0.0);
      BigIntegerConverter bigIntegerConverter0 = new BigIntegerConverter(double0);
      byteConverter0.getPattern();
      Class<Long> class0 = Long.class;
      try { 
        floatConverter0.convertToType(class0, (Object) ""35"");
        fail(""Expecting exception: NumberFormatException"");
      } catch(NumberFormatException e) {
         //
         // For input string: \""java.lang.String@0000000006\""
         //
         verifyException(""java.lang.NumberFormatException"", e);
      }
  }"
1707,"    public boolean isAllowDecimals() {
        return allowDecimals;
    }","  public void test62()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Float.isFinite(4781.7817F);
      Boolean boolean0 = new Boolean(true);
      Boolean.logicalXor(false, true);
      LongConverter longConverter0 = new LongConverter(boolean0);
      longConverter0.getDefaultType();
}"
1708,"    protected String convertToString(final Object value) throws Throwable {

        String result = null;
        if (useLocaleFormat && value instanceof Number) {
            final NumberFormat format = getFormat();
            format.setGroupingUsed(false);
            result = format.format(value);
            if (log().isDebugEnabled()) {
                log().debug(""    Converted  to String using format '"" + result + ""'"");
            }

        } else {
            result = value.toString();
            if (log().isDebugEnabled()) {
                log().debug(""    Converted  to String using toString() '"" + result + ""'"");
            }
        }
        return result;

    }","  public void test63()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      ShortConverter shortConverter0 = new ShortConverter();
      shortConverter0.setPattern(""Setting default value: "");
      shortConverter0.convertToString(mockGregorianCalendar0);
      System.setCurrentTimeMillis((-26L));
      System.setCurrentTimeMillis(2295L);
      IntegerConverter integerConverter0 = null;
      try {
        integerConverter0 = new IntegerConverter(date0);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // Error converting from 'Date' to 'Integer' For input string: \""java.util.Date@0000000004\""
         //
         verifyException(""org.apache.commons.beanutils.converters.AbstractConverter"", e);
      }
  }"
1709,"    protected <T> T convertToType(final Class<T> targetType, final Object value) throws Throwable {

        final Class<?> sourceType = value.getClass();
        // Handle Number
        if (value instanceof Number) {
            return toNumber(sourceType, targetType, (Number)value);
        }

        // Handle Boolean
        if (value instanceof Boolean) {
            return toNumber(sourceType, targetType, ((Boolean)value).booleanValue() ? ONE : ZERO);
        }

        // Handle Date --> Long
        if (value instanceof Date && Long.class.equals(targetType)) {
            return targetType.cast(new Long(((Date)value).getTime()));
        }

        // Handle Calendar --> Long
        if (value instanceof Calendar  && Long.class.equals(targetType)) {
            return targetType.cast(new Long(((Calendar)value).getTime().getTime()));
        }

        // Convert all other types to String & handle
        final String stringValue = value.toString().trim();
        if (stringValue.length() == 0) {
            return handleMissing(targetType);
        }

        // Convert/Parse a String
        Number number = null;
        if (useLocaleFormat) {
            final NumberFormat format = getFormat();
            number = parse(sourceType, targetType, stringValue, format);
        } else {
            if (log().isDebugEnabled()) {
                log().debug(""    No NumberFormat, using default conversion"");
            }
            number = toNumber(sourceType, targetType, stringValue);
        }

        // Ensure the correct number type is returned
        return toNumber(sourceType, targetType, number);

    }","  public void test64()  throws Throwable  {
      BigDecimalConverter bigDecimalConverter0 = new BigDecimalConverter();
      Class<Long> class0 = Long.class;
      bigDecimalConverter0.setLocale((Locale) null);
      try { 
        bigDecimalConverter0.convertToType(class0, (Object) class0);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // Error converting from 'Class' to 'Long' using pattern '#,##0.###'
         //
         verifyException(""org.apache.commons.beanutils.converters.NumberConverter"", e);
      }
  }"
1710,,"  public void test65()  throws Throwable  {
      Float float0 = new Float((-1409.1855F));
      Float.isFinite((-1409.1855F));
      Float.min((-1409.1855F), (-1409.1855F));
      Boolean boolean0 = new Boolean(true);
      Float float1 = new Float((-453.15F));
      IntegerConverter integerConverter0 = new IntegerConverter(float0);
      ByteConverter byteConverter0 = null;
      try {
        byteConverter0 = new ByteConverter(float1);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // Float value '-453.15' is too small Byte
         //
         verifyException(""org.apache.commons.beanutils.converters.NumberConverter"", e);
      }
  }"
1711,,"  public void test66()  throws Throwable  {
      Byte byte0 = new Byte((byte)0);
      ShortConverter shortConverter0 = new ShortConverter(byte0);
      DoubleConverter doubleConverter0 = new DoubleConverter();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      BigDecimalConverter bigDecimalConverter0 = null;
      try {
        bigDecimalConverter0 = new BigDecimalConverter(shortConverter0);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // Error converting from 'ShortConverter' to 'BigDecimal' null
         //
         verifyException(""org.apache.commons.beanutils.converters.AbstractConverter"", e);
      }
  }"
1712,"    public boolean isAllowDecimals() {
        return allowDecimals;
    }","  public void test67()  throws Throwable  {
      DoubleConverter doubleConverter0 = new DoubleConverter();
}"
1713,"    public boolean isAllowDecimals() {
        return allowDecimals;
    }","  public void test68()  throws Throwable  {
      DoubleConverter doubleConverter0 = new DoubleConverter();
      Byte byte0 = new Byte((byte)0);
      BigDecimalConverter bigDecimalConverter0 = new BigDecimalConverter(byte0);
      Integer integer0 = new Integer(2);
      Short short0 = new Short((byte)0);
      bigDecimalConverter0.setUseLocaleFormat(true);
      bigDecimalConverter0.convertToString(short0);
      bigDecimalConverter0.getDefaultType();
      ShortConverter shortConverter0 = new ShortConverter(short0);
      shortConverter0.getDefaultType();
}"
1714,"    protected <T> T convertToType(final Class<T> targetType, final Object value) throws Throwable {

        final Class<?> sourceType = value.getClass();
        // Handle Number
        if (value instanceof Number) {
            return toNumber(sourceType, targetType, (Number)value);
        }

        // Handle Boolean
        if (value instanceof Boolean) {
            return toNumber(sourceType, targetType, ((Boolean)value).booleanValue() ? ONE : ZERO);
        }

        // Handle Date --> Long
        if (value instanceof Date && Long.class.equals(targetType)) {
            return targetType.cast(new Long(((Date)value).getTime()));
        }

        // Handle Calendar --> Long
        if (value instanceof Calendar  && Long.class.equals(targetType)) {
            return targetType.cast(new Long(((Calendar)value).getTime().getTime()));
        }

        // Convert all other types to String & handle
        final String stringValue = value.toString().trim();
        if (stringValue.length() == 0) {
            return handleMissing(targetType);
        }

        // Convert/Parse a String
        Number number = null;
        if (useLocaleFormat) {
            final NumberFormat format = getFormat();
            number = parse(sourceType, targetType, stringValue, format);
        } else {
            if (log().isDebugEnabled()) {
                log().debug(""    No NumberFormat, using default conversion"");
            }
            number = toNumber(sourceType, targetType, stringValue);
        }

        // Ensure the correct number type is returned
        return toNumber(sourceType, targetType, number);

    }","  public void test69()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      FloatConverter floatConverter0 = new FloatConverter(boolean0);
      floatConverter0.isAllowDecimals();
      Locale locale0 = Locale.CHINA;
      locale0.getExtensionKeys();
      floatConverter0.setLocale(locale0);
      ByteConverter byteConverter0 = new ByteConverter(boolean0);
      byteConverter0.setPattern("""");
      Class<Byte> class0 = byteConverter0.getDefaultType();
      byteConverter0.getDefaultType();
      floatConverter0.getLocale();
      DoubleConverter doubleConverter0 = new DoubleConverter();
      doubleConverter0.getDefaultType();
      byteConverter0.toString();
      Short.compare((short)0, (short)0);
      floatConverter0.setUseLocaleFormat(false);
      Byte byte0 = new Byte((byte)1);
      byteConverter0.convertToString(byte0);
      doubleConverter0.setLocale(locale0);
      Double double0 = new Double(0.0);
      BigIntegerConverter bigIntegerConverter0 = new BigIntegerConverter(double0);
      Class<BigInteger> class1 = bigIntegerConverter0.getDefaultType();
      try { 
        doubleConverter0.convertToType(class0, (Object) class1);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // Error converting from 'Class' to 'Byte' using pattern '#,##0.###' for locale=[zh_CN]
         //
         verifyException(""org.apache.commons.beanutils.converters.NumberConverter"", e);
      }
  }"
1715,"    public void setLocale(final Locale locale) {
        this.locale = locale;
        setUseLocaleFormat(true);
    }","  public void test70()  throws Throwable  {
      Double double0 = new Double((-0.30299905953041645));
      DoubleConverter doubleConverter0 = new DoubleConverter(double0);
      Boolean.logicalXor(false, false);
      Class<Byte> class0 = Byte.class;
      doubleConverter0.setUseLocaleFormat(false);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-122);
      Locale locale0 = Locale.ITALIAN;
      doubleConverter0.setLocale(locale0);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      Class<MockCalendar> class1 = MockCalendar.class;
      // Undeclared exception!
      try { 
        doubleConverter0.convert(class1, (Object) class0);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // Default conversion to org.evosuite.runtime.mock.java.util.MockCalendar failed.
         //
         verifyException(""org.apache.commons.beanutils.converters.AbstractConverter"", e);
      }
  }"
1716,"    public String toString() {
        final StringBuilder buffer = new StringBuilder();
        buffer.append(toString(getClass()));
        buffer.append(""[UseDefault="");
        buffer.append(isUseDefault());
        buffer.append("", UseLocaleFormat="");
        buffer.append(useLocaleFormat);
        if (pattern != null) {
            buffer.append("", Pattern="");
            buffer.append(pattern);
        }
        if (locale != null) {
            buffer.append("", Locale="");
            buffer.append(locale);
        }
        buffer.append(']');
        return buffer.toString();
    }","  public void test71()  throws Throwable  {
      Boolean.valueOf("""");
      Float float0 = new Float(0.0);
      Double.max((short)2725, (short)2725);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-122);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      bigInteger0.toString((int) (short)2725);
      BigDecimalConverter bigDecimalConverter0 = new BigDecimalConverter(bigInteger0);
      bigDecimalConverter0.getDefaultType();
      BigIntegerConverter bigIntegerConverter0 = new BigIntegerConverter();
      bigIntegerConverter0.getDefaultType();
      IntegerConverter integerConverter0 = new IntegerConverter();
      integerConverter0.getDefaultType();
      ShortConverter shortConverter0 = null;
      try {
        shortConverter0 = new ShortConverter(""-122"");
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // Error converting from 'String' to 'Short' For input string: \""java.lang.String@0000000005\""
         //
         verifyException(""org.apache.commons.beanutils.converters.AbstractConverter"", e);
      }
  }"
1717,,"  public void test72()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-94));
      Byte.compare((byte) (-94), (byte) (-94));
      MockDate mockDate0 = new MockDate((byte) (-8), 0, (byte) (-94), 0, 0, (byte)93);
      BigDecimalConverter bigDecimalConverter0 = new BigDecimalConverter(byte0);
      bigDecimalConverter0.getDefaultType();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1676, 0, (byte) (-94), 1676, (-1368), 1676);
      DoubleConverter doubleConverter0 = null;
      try {
        doubleConverter0 = new DoubleConverter(mockGregorianCalendar0);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // Error converting from 'org.evosuite.runtime.mock.java.util.MockGregorianCalendar' to 'Double' For input string: \""org.evosuite.runtime.mock.java.util.MockGregorianCalendar@0000000003\""
         //
         verifyException(""org.apache.commons.beanutils.converters.AbstractConverter"", e);
      }
  }"
1718,"    public ShortConverter() {
        super(false);
    }","  public void test0()  throws Throwable  {
      Short short0 = new Short((short) (-1));
      ShortConverter shortConverter0 = new ShortConverter(short0);
}"
1719,"    protected Class<Short> getDefaultType() {
        return Short.class;
    }","  public void test1()  throws Throwable  {
      ShortConverter shortConverter0 = new ShortConverter();
      Class<Short> class0 = shortConverter0.getDefaultType();
}"
1720,"    public ShortConverter() {
        super(false);
    }","  public void test2()  throws Throwable  {
      Object object0 = new Object();
      ShortConverter shortConverter0 = null;
      try {
        shortConverter0 = new ShortConverter(object0);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // Error converting from 'Object' to 'Short' For input string: \""java.lang.Object@0000000002\""
         //
         verifyException(""org.apache.commons.beanutils.converters.AbstractConverter"", e);
      }
  }"
1721,"    protected Class<?> getDefaultType() {
        return Time.class;
    }","  public void test0()  throws Throwable  {
      SqlTimeConverter sqlTimeConverter0 = new SqlTimeConverter((Object) null);
      Class<?> class0 = sqlTimeConverter0.getDefaultType();
}"
1722,"    protected DateFormat getFormat(final Locale locale, final TimeZone timeZone) {
        DateFormat format = null;
        if (locale == null) {
            format = DateFormat.getTimeInstance(DateFormat.SHORT);
        } else {
            format = DateFormat.getTimeInstance(DateFormat.SHORT, locale);
        }
        if (timeZone != null) {
            format.setTimeZone(timeZone);
        }
        return format;
    }","  public void test1()  throws Throwable  {
      SqlTimeConverter sqlTimeConverter0 = new SqlTimeConverter((Object) null);
      SimpleDateFormat simpleDateFormat0 = (SimpleDateFormat)sqlTimeConverter0.getFormat((Locale) null, (TimeZone) null);
}"
1723,"    protected DateFormat getFormat(final Locale locale, final TimeZone timeZone) {
        DateFormat format = null;
        if (locale == null) {
            format = DateFormat.getTimeInstance(DateFormat.SHORT);
        } else {
            format = DateFormat.getTimeInstance(DateFormat.SHORT, locale);
        }
        if (timeZone != null) {
            format.setTimeZone(timeZone);
        }
        return format;
    }","  public void test2()  throws Throwable  {
      SqlTimeConverter sqlTimeConverter0 = new SqlTimeConverter();
      Locale locale0 = Locale.CHINA;
      TimeZone timeZone0 = TimeZone.getDefault();
      SimpleDateFormat simpleDateFormat0 = (SimpleDateFormat)sqlTimeConverter0.getFormat(locale0, timeZone0);
}"
1724,"    public SqlTimeConverter() {
        super();
    }","  public void test3()  throws Throwable  {
      Object object0 = new Object();
      SqlTimeConverter sqlTimeConverter0 = null;
      try {
        sqlTimeConverter0 = new SqlTimeConverter(object0);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // String must be in JDBC format [HH:mm:ss] to create a java.sql.Time
         //
         verifyException(""org.apache.commons.beanutils.converters.DateTimeConverter"", e);
      }
  }"
1725,"    protected Class<?> getDefaultType() {
        return File.class;
    }","  public void test0()  throws Throwable  {
      FileConverter fileConverter0 = new FileConverter();
      Class<?> class0 = fileConverter0.getDefaultType();
}"
1726,"    protected <T> T convertToType(final Class<T> type, final Object value) throws Throwable {
        if (File.class.equals(type)) {
            return type.cast(new File(value.toString()));
        }

        throw conversionException(type, value);
    }","  public void test1()  throws Throwable  {
      FileConverter fileConverter0 = new FileConverter();
      Class<File> class0 = File.class;
      MockFile mockFile0 = (MockFile)fileConverter0.convertToType(class0, (Object) class0);
}"
1727,"    protected <T> T convertToType(final Class<T> type, final Object value) throws Throwable {
        if (File.class.equals(type)) {
            return type.cast(new File(value.toString()));
        }

        throw conversionException(type, value);
    }","  public void test2()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      FileConverter fileConverter0 = new FileConverter(class0);
      try { 
        fileConverter0.convertToType(class0, (Object) class0);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // Can't convert value 'class java.lang.Integer' to type class java.lang.Integer
         //
         verifyException(""org.apache.commons.beanutils.converters.AbstractConverter"", e);
      }
  }"
1728,"    protected <T> T convertToType(final Class<T> type, final Object value) throws Throwable {
        if (File.class.equals(type)) {
            return type.cast(new File(value.toString()));
        }

        throw conversionException(type, value);
    }","  public void test3()  throws Throwable  {
      FileConverter fileConverter0 = new FileConverter();
      Class<File> class0 = File.class;
      try { 
        fileConverter0.convertToType(class0, (Object) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.evosuite.runtime.System"", e);
      }
  }"
1729,"    public Object convert(final Class type, final Object value) {

        // Deal with a null value
        if (value == null) {
            if (useDefault) {
                return (defaultValue);
            } else {
                throw new ConversionException(""No value specified"");
            }
        }

        // Deal with the no-conversion-needed case
        if (MODEL == value.getClass()) {
            return (value);
        }

        // Deal with input value as a String array
        //
        // TODO: use if (value.getClass().isArray() instead...
        //  this requires casting to Object[], then using values[i].toString()
        if (strings.getClass() == value.getClass()) {
            try {
                final String[] values = (String[]) value;
                final boolean[] results = new boolean[values.length];
                for (int i = 0; i < values.length; i++) {
                    final String stringValue = values[i];
                    final Object result = booleanConverter.convert(Boolean.class, stringValue);
                    results[i] = ((Boolean) result).booleanValue();
                }
                return (results);
            } catch (final Exception e) {
                if (useDefault) {
                    return (defaultValue);
                } else {
                    throw new ConversionException(value.toString(), e);
                }
            }
        }

        // We only get here if the input value is not of type String[].
        // In this case, we assume value.toString() returns a comma-separated
        // sequence of values; see method AbstractArrayConverter.parseElements
        // for more information.
        try {
            final List list = parseElements(value.toString());
            final boolean[] results = new boolean[list.size()];
            for (int i = 0; i < results.length; i++) {
                final String stringValue = (String) list.get(i);
                final Object result = booleanConverter.convert(Boolean.class, stringValue);
                results[i] = ((Boolean) result).booleanValue();
            }
            return (results);
        } catch (final Exception e) {
            if (useDefault) {
                return (defaultValue);
            } else {
                throw new ConversionException(value.toString(), e);
            }
        }

    }","  public void test0()  throws Throwable  {
      BooleanArrayConverter booleanArrayConverter0 = new BooleanArrayConverter((BooleanConverter) null, (Object) null);
      Class<Integer> class0 = Integer.class;
      Class<Object> class1 = Object.class;
      Object object0 = booleanArrayConverter0.convert(class1, class0);
}"
1730,"    public Object convert(final Class type, final Object value) {

        // Deal with a null value
        if (value == null) {
            if (useDefault) {
                return (defaultValue);
            } else {
                throw new ConversionException(""No value specified"");
            }
        }

        // Deal with the no-conversion-needed case
        if (MODEL == value.getClass()) {
            return (value);
        }

        // Deal with input value as a String array
        //
        // TODO: use if (value.getClass().isArray() instead...
        //  this requires casting to Object[], then using values[i].toString()
        if (strings.getClass() == value.getClass()) {
            try {
                final String[] values = (String[]) value;
                final boolean[] results = new boolean[values.length];
                for (int i = 0; i < values.length; i++) {
                    final String stringValue = values[i];
                    final Object result = booleanConverter.convert(Boolean.class, stringValue);
                    results[i] = ((Boolean) result).booleanValue();
                }
                return (results);
            } catch (final Exception e) {
                if (useDefault) {
                    return (defaultValue);
                } else {
                    throw new ConversionException(value.toString(), e);
                }
            }
        }

        // We only get here if the input value is not of type String[].
        // In this case, we assume value.toString() returns a comma-separated
        // sequence of values; see method AbstractArrayConverter.parseElements
        // for more information.
        try {
            final List list = parseElements(value.toString());
            final boolean[] results = new boolean[list.size()];
            for (int i = 0; i < results.length; i++) {
                final String stringValue = (String) list.get(i);
                final Object result = booleanConverter.convert(Boolean.class, stringValue);
                results[i] = ((Boolean) result).booleanValue();
            }
            return (results);
        } catch (final Exception e) {
            if (useDefault) {
                return (defaultValue);
            } else {
                throw new ConversionException(value.toString(), e);
            }
        }

    }","  public void test1()  throws Throwable  {
      String[] stringArray0 = new String[0];
      Boolean boolean0 = Boolean.FALSE;
      BooleanConverter booleanConverter0 = new BooleanConverter(stringArray0, stringArray0, boolean0);
      BooleanArrayConverter booleanArrayConverter0 = new BooleanArrayConverter(booleanConverter0, boolean0);
      Class<String> class0 = String.class;
      Object object0 = booleanArrayConverter0.convert(class0, boolean0);
      Object object1 = booleanArrayConverter0.convert(class0, object0);
}"
1731,"    public Object convert(final Class type, final Object value) {

        // Deal with a null value
        if (value == null) {
            if (useDefault) {
                return (defaultValue);
            } else {
                throw new ConversionException(""No value specified"");
            }
        }

        // Deal with the no-conversion-needed case
        if (MODEL == value.getClass()) {
            return (value);
        }

        // Deal with input value as a String array
        //
        // TODO: use if (value.getClass().isArray() instead...
        //  this requires casting to Object[], then using values[i].toString()
        if (strings.getClass() == value.getClass()) {
            try {
                final String[] values = (String[]) value;
                final boolean[] results = new boolean[values.length];
                for (int i = 0; i < values.length; i++) {
                    final String stringValue = values[i];
                    final Object result = booleanConverter.convert(Boolean.class, stringValue);
                    results[i] = ((Boolean) result).booleanValue();
                }
                return (results);
            } catch (final Exception e) {
                if (useDefault) {
                    return (defaultValue);
                } else {
                    throw new ConversionException(value.toString(), e);
                }
            }
        }

        // We only get here if the input value is not of type String[].
        // In this case, we assume value.toString() returns a comma-separated
        // sequence of values; see method AbstractArrayConverter.parseElements
        // for more information.
        try {
            final List list = parseElements(value.toString());
            final boolean[] results = new boolean[list.size()];
            for (int i = 0; i < results.length; i++) {
                final String stringValue = (String) list.get(i);
                final Object result = booleanConverter.convert(Boolean.class, stringValue);
                results[i] = ((Boolean) result).booleanValue();
            }
            return (results);
        } catch (final Exception e) {
            if (useDefault) {
                return (defaultValue);
            } else {
                throw new ConversionException(value.toString(), e);
            }
        }

    }","  public void test2()  throws Throwable  {
      Class<Boolean> class0 = Boolean.TYPE;
      BooleanArrayConverter booleanArrayConverter0 = new BooleanArrayConverter();
      // Undeclared exception!
      try { 
        booleanArrayConverter0.convert(class0, (Object) null);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // No value specified
         //
         verifyException(""org.apache.commons.beanutils.converters.BooleanArrayConverter"", e);
      }
  }"
1732,"    public Object convert(final Class type, final Object value) {

        // Deal with a null value
        if (value == null) {
            if (useDefault) {
                return (defaultValue);
            } else {
                throw new ConversionException(""No value specified"");
            }
        }

        // Deal with the no-conversion-needed case
        if (MODEL == value.getClass()) {
            return (value);
        }

        // Deal with input value as a String array
        //
        // TODO: use if (value.getClass().isArray() instead...
        //  this requires casting to Object[], then using values[i].toString()
        if (strings.getClass() == value.getClass()) {
            try {
                final String[] values = (String[]) value;
                final boolean[] results = new boolean[values.length];
                for (int i = 0; i < values.length; i++) {
                    final String stringValue = values[i];
                    final Object result = booleanConverter.convert(Boolean.class, stringValue);
                    results[i] = ((Boolean) result).booleanValue();
                }
                return (results);
            } catch (final Exception e) {
                if (useDefault) {
                    return (defaultValue);
                } else {
                    throw new ConversionException(value.toString(), e);
                }
            }
        }

        // We only get here if the input value is not of type String[].
        // In this case, we assume value.toString() returns a comma-separated
        // sequence of values; see method AbstractArrayConverter.parseElements
        // for more information.
        try {
            final List list = parseElements(value.toString());
            final boolean[] results = new boolean[list.size()];
            for (int i = 0; i < results.length; i++) {
                final String stringValue = (String) list.get(i);
                final Object result = booleanConverter.convert(Boolean.class, stringValue);
                results[i] = ((Boolean) result).booleanValue();
            }
            return (results);
        } catch (final Exception e) {
            if (useDefault) {
                return (defaultValue);
            } else {
                throw new ConversionException(value.toString(), e);
            }
        }

    }","  public void test3()  throws Throwable  {
      BooleanArrayConverter booleanArrayConverter0 = new BooleanArrayConverter((Object) null);
      Class<Integer> class0 = Integer.class;
      Class<Object> class1 = Object.class;
      Object object0 = booleanArrayConverter0.convert(class1, class0);
      Object object1 = booleanArrayConverter0.convert(class1, object0);
}"
1733,"    public Object convert(final Class type, final Object value) {

        // Deal with a null value
        if (value == null) {
            if (useDefault) {
                return (defaultValue);
            } else {
                throw new ConversionException(""No value specified"");
            }
        }

        // Deal with the no-conversion-needed case
        if (MODEL == value.getClass()) {
            return (value);
        }

        // Deal with input value as a String array
        //
        // TODO: use if (value.getClass().isArray() instead...
        //  this requires casting to Object[], then using values[i].toString()
        if (strings.getClass() == value.getClass()) {
            try {
                final String[] values = (String[]) value;
                final boolean[] results = new boolean[values.length];
                for (int i = 0; i < values.length; i++) {
                    final String stringValue = values[i];
                    final Object result = booleanConverter.convert(Boolean.class, stringValue);
                    results[i] = ((Boolean) result).booleanValue();
                }
                return (results);
            } catch (final Exception e) {
                if (useDefault) {
                    return (defaultValue);
                } else {
                    throw new ConversionException(value.toString(), e);
                }
            }
        }

        // We only get here if the input value is not of type String[].
        // In this case, we assume value.toString() returns a comma-separated
        // sequence of values; see method AbstractArrayConverter.parseElements
        // for more information.
        try {
            final List list = parseElements(value.toString());
            final boolean[] results = new boolean[list.size()];
            for (int i = 0; i < results.length; i++) {
                final String stringValue = (String) list.get(i);
                final Object result = booleanConverter.convert(Boolean.class, stringValue);
                results[i] = ((Boolean) result).booleanValue();
            }
            return (results);
        } catch (final Exception e) {
            if (useDefault) {
                return (defaultValue);
            } else {
                throw new ConversionException(value.toString(), e);
            }
        }

    }","  public void test4()  throws Throwable  {
      BooleanArrayConverter booleanArrayConverter0 = new BooleanArrayConverter();
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        booleanArrayConverter0.convert(class0, class0);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // java.lang.Class@0000000002
         //
         verifyException(""org.apache.commons.beanutils.converters.BooleanArrayConverter"", e);
      }
  }"
1734,"    protected <T> T convertToType(final Class<T> type, final Object value) throws Throwable {

        if (Boolean.class.equals(type) || Boolean.TYPE.equals(type)) {
            // All the values in the trueStrings and falseStrings arrays are
            // guaranteed to be lower-case. By converting the input value
            // to lowercase too, we can use the efficient String.equals method
            // instead of the less-efficient String.equalsIgnoreCase method.
            final String stringValue = value.toString().toLowerCase();

            for (String trueString : trueStrings) {
                if (trueString.equals(stringValue)) {
                    return type.cast(Boolean.TRUE);
                }
            }

            for (String falseString : falseStrings) {
                if (falseString.equals(stringValue)) {
                    return type.cast(Boolean.FALSE);
                }
            }
        }

        throw conversionException(type, value);
    }","  public void test0()  throws Throwable  {
      Class<String> class0 = String.class;
      String[] stringArray0 = new String[4];
      stringArray0[0] = ""u+\""{Dj!"";
      stringArray0[1] = ""x%5|qq8Dox\""fonj4F"";
      stringArray0[2] = ""java.lang.string@0000000003"";
      stringArray0[3] = ""org.apache.commons.logging.impl.Jdk14Logger"";
      BooleanConverter booleanConverter0 = new BooleanConverter(stringArray0, stringArray0);
      Boolean boolean0 = Boolean.valueOf(false);
      booleanConverter0.conversionException(class0, boolean0);
      Class<Boolean> class1 = booleanConverter0.getDefaultType();
      Boolean boolean1 = booleanConverter0.convertToType(class1, (Object) ""org.apache.commons.logging.impl.Jdk14Logger"");
}"
1735,"    protected <T> T convertToType(final Class<T> type, final Object value) throws Throwable {

        if (Boolean.class.equals(type) || Boolean.TYPE.equals(type)) {
            // All the values in the trueStrings and falseStrings arrays are
            // guaranteed to be lower-case. By converting the input value
            // to lowercase too, we can use the efficient String.equals method
            // instead of the less-efficient String.equalsIgnoreCase method.
            final String stringValue = value.toString().toLowerCase();

            for (String trueString : trueStrings) {
                if (trueString.equals(stringValue)) {
                    return type.cast(Boolean.TRUE);
                }
            }

            for (String falseString : falseStrings) {
                if (falseString.equals(stringValue)) {
                    return type.cast(Boolean.FALSE);
                }
            }
        }

        throw conversionException(type, value);
    }","  public void test1()  throws Throwable  {
      BooleanConverter booleanConverter0 = new BooleanConverter((Object) null);
      Class<Boolean> class0 = Boolean.class;
      try { 
        booleanConverter0.convertToType(class0, (Object) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.evosuite.runtime.System"", e);
      }
  }"
1736,"    public BooleanConverter() {
        super();
    }","  public void test2()  throws Throwable  {
      Object object0 = BooleanConverter.NO_DEFAULT;
      BooleanConverter booleanConverter0 = null;
      try {
        booleanConverter0 = new BooleanConverter((String[]) null, (String[]) null, object0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.beanutils.converters.BooleanConverter"", e);
      }
  }"
1737,"    public BooleanConverter() {
        super();
    }","  public void test3()  throws Throwable  {
      Object object0 = new Object();
      BooleanConverter booleanConverter0 = null;
      try {
        booleanConverter0 = new BooleanConverter(object0);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // Can't convert value 'java.lang.Object@3af62469' to type class java.lang.Boolean
         //
         verifyException(""org.apache.commons.beanutils.converters.AbstractConverter"", e);
      }
  }"
1738,"    protected <T> T convertToType(final Class<T> type, final Object value) throws Throwable {

        if (Boolean.class.equals(type) || Boolean.TYPE.equals(type)) {
            // All the values in the trueStrings and falseStrings arrays are
            // guaranteed to be lower-case. By converting the input value
            // to lowercase too, we can use the efficient String.equals method
            // instead of the less-efficient String.equalsIgnoreCase method.
            final String stringValue = value.toString().toLowerCase();

            for (String trueString : trueStrings) {
                if (trueString.equals(stringValue)) {
                    return type.cast(Boolean.TRUE);
                }
            }

            for (String falseString : falseStrings) {
                if (falseString.equals(stringValue)) {
                    return type.cast(Boolean.FALSE);
                }
            }
        }

        throw conversionException(type, value);
    }","  public void test4()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = ""yes"";
      stringArray0[1] = """";
      stringArray0[2] = ""J~bL8Rlrgd8IF;$HE!;"";
      stringArray0[3] = """";
      stringArray0[4] = """";
      BooleanConverter booleanConverter0 = new BooleanConverter(stringArray0, stringArray0, (Object) null);
      Class<String> class0 = String.class;
      try { 
        booleanConverter0.convertToType(class0, (Object) """");
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // Can't convert value '' to type class java.lang.String
         //
         verifyException(""org.apache.commons.beanutils.converters.AbstractConverter"", e);
      }
  }"
1739,"    public BooleanConverter() {
        super();
    }","  public void test5()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = ""java.lang.string@0000000006"";
      BooleanConverter booleanConverter0 = null;
      try {
        booleanConverter0 = new BooleanConverter(stringArray0, stringArray0, ""java.lang.string@0000000006"");
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // Can't convert value 'java.lang.string@0000000006' to type class java.lang.Boolean
         //
         verifyException(""org.apache.commons.beanutils.converters.AbstractConverter"", e);
      }
  }"
1740,"    protected <T> T convertToType(final Class<T> type, final Object value) throws Throwable {

        if (Boolean.class.equals(type) || Boolean.TYPE.equals(type)) {
            // All the values in the trueStrings and falseStrings arrays are
            // guaranteed to be lower-case. By converting the input value
            // to lowercase too, we can use the efficient String.equals method
            // instead of the less-efficient String.equalsIgnoreCase method.
            final String stringValue = value.toString().toLowerCase();

            for (String trueString : trueStrings) {
                if (trueString.equals(stringValue)) {
                    return type.cast(Boolean.TRUE);
                }
            }

            for (String falseString : falseStrings) {
                if (falseString.equals(stringValue)) {
                    return type.cast(Boolean.FALSE);
                }
            }
        }

        throw conversionException(type, value);
    }","  public void test6()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = ""gv-^g0p6erf;"";
      Object object0 = BooleanConverter.NO_DEFAULT;
      BooleanConverter booleanConverter0 = new BooleanConverter(stringArray0, stringArray0, object0);
      Class<Boolean> class0 = Boolean.TYPE;
      try { 
        booleanConverter0.convertToType(class0, (Object) ""gv-^g0p6erf;"");
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // Can't convert value 'gv-^g0p6erf;' to type boolean
         //
         verifyException(""org.apache.commons.beanutils.converters.AbstractConverter"", e);
      }
  }"
1741,"    public BooleanConverter() {
        super();
    }","  public void test7()  throws Throwable  {
      BooleanConverter booleanConverter0 = new BooleanConverter();
}"
1742,"    public BooleanConverter() {
        super();
    }","  public void test8()  throws Throwable  {
      String[] stringArray0 = new String[1];
      BooleanConverter booleanConverter0 = null;
      try {
        booleanConverter0 = new BooleanConverter(stringArray0, stringArray0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.beanutils.converters.BooleanConverter"", e);
      }
  }"
1743,"    protected Class<Boolean> getDefaultType() {
        return Boolean.class;
    }","  public void test9()  throws Throwable  {
      Object object0 = BooleanConverter.NO_DEFAULT;
      BooleanConverter booleanConverter0 = new BooleanConverter(object0);
      Class<Boolean> class0 = booleanConverter0.getDefaultType();
}"
1744,"    public <T> T convert(final Class<T> type, final Object value) {
        return converter.convert(type, value);
    }","  public void test0()  throws Throwable  {
      FileConverter fileConverter0 = new FileConverter((Object) null);
      ConverterFacade converterFacade0 = new ConverterFacade(fileConverter0);
      Class<String> class0 = String.class;
      String string0 = converterFacade0.convert(class0, (Object) null);
}"
1745,"    public <T> T convert(final Class<T> type, final Object value) {
        return converter.convert(type, value);
    }","  public void test1()  throws Throwable  {
      SqlTimestampConverter sqlTimestampConverter0 = new SqlTimestampConverter();
      ConverterFacade converterFacade0 = new ConverterFacade(sqlTimestampConverter0);
      Class<String> class0 = String.class;
      Class<Object> class1 = Object.class;
      // Undeclared exception!
      try { 
        converterFacade0.convert(class1, (Object) class0);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // SqlTimestampConverter does not support default String to 'Object' conversion.
         //
         verifyException(""org.apache.commons.beanutils.converters.DateTimeConverter"", e);
      }
  }"
1746,"    public ConverterFacade(final Converter converter) {
        if (converter == null) {
            throw new IllegalArgumentException(""Converter is missing"");
        }
        this.converter = converter;
    }","  public void test2()  throws Throwable  {
      ConverterFacade converterFacade0 = null;
      try {
        converterFacade0 = new ConverterFacade((Converter) null);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Converter is missing
         //
         verifyException(""org.apache.commons.beanutils.converters.ConverterFacade"", e);
      }
  }"
1747,"    public <T> T convert(final Class<T> type, final Object value) {
        return converter.convert(type, value);
    }","  public void test3()  throws Throwable  {
      FileConverter fileConverter0 = new FileConverter();
      ConverterFacade converterFacade0 = new ConverterFacade(fileConverter0);
      Class<String> class0 = String.class;
      String string0 = converterFacade0.convert(class0, (Object) converterFacade0);
}"
1748,"    public String toString() {
        return ""ConverterFacade["" + converter.toString() + ""]"";
    }","  public void test4()  throws Throwable  {
      FileConverter fileConverter0 = new FileConverter();
      ConverterFacade converterFacade0 = new ConverterFacade(fileConverter0);
      String string0 = converterFacade0.toString();
}"
1749,"    public Object convert(final Class type, final Object value) {

        // Deal with a null value
        if (value == null) {
            if (useDefault) {
                return (defaultValue);
            } else {
                throw new ConversionException(""No value specified"");
            }
        }

        // Deal with the no-conversion-needed case
        if (MODEL.getClass() == value.getClass()) {
            return (value);
        }

        // Deal with input value as a String array
        if (strings.getClass() == value.getClass()) {
            try {
                final String[] values = (String[]) value;
                final float[] results = new float[values.length];
                for (int i = 0; i < values.length; i++) {
                    results[i] = Float.parseFloat(values[i]);
                }
                return (results);
            } catch (final Exception e) {
                if (useDefault) {
                    return (defaultValue);
                } else {
                    throw new ConversionException(value.toString(), e);
                }
            }
        }

        // Parse the input value as a String into elements
        // and convert to the appropriate type
        try {
            final List list = parseElements(value.toString());
            final float[] results = new float[list.size()];
            for (int i = 0; i < results.length; i++) {
                results[i] = Float.parseFloat((String) list.get(i));
            }
            return (results);
        } catch (final Exception e) {
            if (useDefault) {
                return (defaultValue);
            } else {
                throw new ConversionException(value.toString(), e);
            }
        }

    }","  public void test0()  throws Throwable  {
      Object object0 = AbstractArrayConverter.NO_DEFAULT;
      FloatArrayConverter floatArrayConverter0 = new FloatArrayConverter(object0);
      Class<Object> class0 = Object.class;
      Object object1 = floatArrayConverter0.convert(class0, floatArrayConverter0);
}"
1750,"    public Object convert(final Class type, final Object value) {

        // Deal with a null value
        if (value == null) {
            if (useDefault) {
                return (defaultValue);
            } else {
                throw new ConversionException(""No value specified"");
            }
        }

        // Deal with the no-conversion-needed case
        if (MODEL.getClass() == value.getClass()) {
            return (value);
        }

        // Deal with input value as a String array
        if (strings.getClass() == value.getClass()) {
            try {
                final String[] values = (String[]) value;
                final float[] results = new float[values.length];
                for (int i = 0; i < values.length; i++) {
                    results[i] = Float.parseFloat(values[i]);
                }
                return (results);
            } catch (final Exception e) {
                if (useDefault) {
                    return (defaultValue);
                } else {
                    throw new ConversionException(value.toString(), e);
                }
            }
        }

        // Parse the input value as a String into elements
        // and convert to the appropriate type
        try {
            final List list = parseElements(value.toString());
            final float[] results = new float[list.size()];
            for (int i = 0; i < results.length; i++) {
                results[i] = Float.parseFloat((String) list.get(i));
            }
            return (results);
        } catch (final Exception e) {
            if (useDefault) {
                return (defaultValue);
            } else {
                throw new ConversionException(value.toString(), e);
            }
        }

    }","  public void test1()  throws Throwable  {
      FloatArrayConverter floatArrayConverter0 = new FloatArrayConverter((Object) null);
      Class<Object> class0 = Object.class;
      Object object0 = floatArrayConverter0.convert(class0, (Object) null);
}"
1751,"    public Object convert(final Class type, final Object value) {

        // Deal with a null value
        if (value == null) {
            if (useDefault) {
                return (defaultValue);
            } else {
                throw new ConversionException(""No value specified"");
            }
        }

        // Deal with the no-conversion-needed case
        if (MODEL.getClass() == value.getClass()) {
            return (value);
        }

        // Deal with input value as a String array
        if (strings.getClass() == value.getClass()) {
            try {
                final String[] values = (String[]) value;
                final float[] results = new float[values.length];
                for (int i = 0; i < values.length; i++) {
                    results[i] = Float.parseFloat(values[i]);
                }
                return (results);
            } catch (final Exception e) {
                if (useDefault) {
                    return (defaultValue);
                } else {
                    throw new ConversionException(value.toString(), e);
                }
            }
        }

        // Parse the input value as a String into elements
        // and convert to the appropriate type
        try {
            final List list = parseElements(value.toString());
            final float[] results = new float[list.size()];
            for (int i = 0; i < results.length; i++) {
                results[i] = Float.parseFloat((String) list.get(i));
            }
            return (results);
        } catch (final Exception e) {
            if (useDefault) {
                return (defaultValue);
            } else {
                throw new ConversionException(value.toString(), e);
            }
        }

    }","  public void test2()  throws Throwable  {
      FloatArrayConverter floatArrayConverter0 = new FloatArrayConverter();
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        floatArrayConverter0.convert(class0, class0);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // java.lang.Class@0000000002
         //
         verifyException(""org.apache.commons.beanutils.converters.FloatArrayConverter"", e);
      }
  }"
1752,"    public Object convert(final Class type, final Object value) {

        // Deal with a null value
        if (value == null) {
            if (useDefault) {
                return (defaultValue);
            } else {
                throw new ConversionException(""No value specified"");
            }
        }

        // Deal with the no-conversion-needed case
        if (MODEL.getClass() == value.getClass()) {
            return (value);
        }

        // Deal with input value as a String array
        if (strings.getClass() == value.getClass()) {
            try {
                final String[] values = (String[]) value;
                final float[] results = new float[values.length];
                for (int i = 0; i < values.length; i++) {
                    results[i] = Float.parseFloat(values[i]);
                }
                return (results);
            } catch (final Exception e) {
                if (useDefault) {
                    return (defaultValue);
                } else {
                    throw new ConversionException(value.toString(), e);
                }
            }
        }

        // Parse the input value as a String into elements
        // and convert to the appropriate type
        try {
            final List list = parseElements(value.toString());
            final float[] results = new float[list.size()];
            for (int i = 0; i < results.length; i++) {
                results[i] = Float.parseFloat((String) list.get(i));
            }
            return (results);
        } catch (final Exception e) {
            if (useDefault) {
                return (defaultValue);
            } else {
                throw new ConversionException(value.toString(), e);
            }
        }

    }","  public void test3()  throws Throwable  {
      Class<Object> class0 = Object.class;
      FloatArrayConverter floatArrayConverter0 = new FloatArrayConverter(class0);
      Class class1 = (Class)floatArrayConverter0.convert(class0, (Object) null);
}"
1753,"    public Object convert(final Class type, final Object value) {

        // Deal with a null value
        if (value == null) {
            if (useDefault) {
                return (defaultValue);
            } else {
                throw new ConversionException(""No value specified"");
            }
        }

        // Deal with the no-conversion-needed case
        if (MODEL.getClass() == value.getClass()) {
            return (value);
        }

        // Deal with input value as a String array
        if (strings.getClass() == value.getClass()) {
            try {
                final String[] values = (String[]) value;
                final float[] results = new float[values.length];
                for (int i = 0; i < values.length; i++) {
                    results[i] = Float.parseFloat(values[i]);
                }
                return (results);
            } catch (final Exception e) {
                if (useDefault) {
                    return (defaultValue);
                } else {
                    throw new ConversionException(value.toString(), e);
                }
            }
        }

        // Parse the input value as a String into elements
        // and convert to the appropriate type
        try {
            final List list = parseElements(value.toString());
            final float[] results = new float[list.size()];
            for (int i = 0; i < results.length; i++) {
                results[i] = Float.parseFloat((String) list.get(i));
            }
            return (results);
        } catch (final Exception e) {
            if (useDefault) {
                return (defaultValue);
            } else {
                throw new ConversionException(value.toString(), e);
            }
        }

    }","  public void test4()  throws Throwable  {
      FloatArrayConverter floatArrayConverter0 = new FloatArrayConverter();
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        floatArrayConverter0.convert(class0, (Object) null);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // No value specified
         //
         verifyException(""org.apache.commons.beanutils.converters.FloatArrayConverter"", e);
      }
  }"
1754,"    protected Class<?> getDefaultType() {
        return String.class;
    }","  public void test0()  throws Throwable  {
      Object object0 = new Object();
      StringConverter stringConverter0 = new StringConverter(object0);
      Class<?> class0 = stringConverter0.getDefaultType();
}"
1755,"    protected <T> T convertToType(final Class<T> type, final Object value) throws Throwable {
        // We have to support Object, too, because this class is sometimes
        // used for a standard to Object conversion
        if (String.class.equals(type) || Object.class.equals(type)) {
            return type.cast(value.toString());
        }
        throw conversionException(type, value);
    }","  public void test1()  throws Throwable  {
      StringConverter stringConverter0 = new StringConverter();
      Class<String> class0 = String.class;
      String string0 = stringConverter0.convertToType(class0, (Object) class0);
}"
1756,"    public StringConverter() {
        super();
    }","  public void test2()  throws Throwable  {
      Object object0 = new Object();
      StringConverter stringConverter0 = new StringConverter(object0);
      Class<Object> class0 = Object.class;
      Object object1 = stringConverter0.handleMissing(class0);
}"
1757,"    protected <T> T convertToType(final Class<T> type, final Object value) throws Throwable {
        // We have to support Object, too, because this class is sometimes
        // used for a standard to Object conversion
        if (String.class.equals(type) || Object.class.equals(type)) {
            return type.cast(value.toString());
        }
        throw conversionException(type, value);
    }","  public void test3()  throws Throwable  {
      Object object0 = new Object();
      StringConverter stringConverter0 = new StringConverter(object0);
      Class<String> class0 = String.class;
      try { 
        stringConverter0.convertToType(class0, (Object) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.evosuite.runtime.System"", e);
      }
  }"
1758,"    protected <T> T convertToType(final Class<T> type, final Object value) throws Throwable {
        // We have to support Object, too, because this class is sometimes
        // used for a standard to Object conversion
        if (String.class.equals(type) || Object.class.equals(type)) {
            return type.cast(value.toString());
        }
        throw conversionException(type, value);
    }","  public void test4()  throws Throwable  {
      StringConverter stringConverter0 = new StringConverter();
      Class<Integer> class0 = Integer.class;
      try { 
        stringConverter0.convertToType(class0, (Object) stringConverter0);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // Can't convert value 'StringConverter[UseDefault=false]' to type class java.lang.Integer
         //
         verifyException(""org.apache.commons.beanutils.converters.AbstractConverter"", e);
      }
  }"
1759,"    protected Class<?> getDefaultType() {
        return Character.class;
    }","  public void test0()  throws Throwable  {
      CharacterConverter characterConverter0 = new CharacterConverter();
      Class<?> class0 = characterConverter0.getDefaultType();
}"
1760,"    protected <T> T convertToType(final Class<T> type, final Object value) throws Exception {
        if (Character.class.equals(type) || Character.TYPE.equals(type)) {
            return type.cast(new Character(value.toString().charAt(0)));
        }

        throw conversionException(type, value);
    }","  public void test1()  throws Throwable  {
      CharacterConverter characterConverter0 = new CharacterConverter();
      Class<Character> class0 = Character.class;
      Character character0 = characterConverter0.convertToType(class0, (Object) class0);
}"
1761,"    protected <T> T convertToType(final Class<T> type, final Object value) throws Exception {
        if (Character.class.equals(type) || Character.TYPE.equals(type)) {
            return type.cast(new Character(value.toString().charAt(0)));
        }

        throw conversionException(type, value);
    }","  public void test2()  throws Throwable  {
      CharacterConverter characterConverter0 = new CharacterConverter();
      Class<Character> class0 = Character.class;
      try { 
        characterConverter0.convertToType(class0, (Object) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.evosuite.runtime.System"", e);
      }
  }"
1762,"    protected String convertToString(final Object value) {
        final String strValue = value.toString();
        return strValue.length() == 0 ? """" : strValue.substring(0, 1);
    }","  public void test3()  throws Throwable  {
      CharacterConverter characterConverter0 = new CharacterConverter();
      // Undeclared exception!
      try { 
        characterConverter0.convertToString((Object) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.evosuite.runtime.System"", e);
      }
  }"
1763,"    protected <T> T convertToType(final Class<T> type, final Object value) throws Exception {
        if (Character.class.equals(type) || Character.TYPE.equals(type)) {
            return type.cast(new Character(value.toString().charAt(0)));
        }

        throw conversionException(type, value);
    }","  public void test4()  throws Throwable  {
      CharacterConverter characterConverter0 = new CharacterConverter();
      Class<Character> class0 = Character.TYPE;
      try { 
        characterConverter0.convertToType(class0, (Object) class0);
        fail(""Expecting exception: ClassCastException"");
      } catch(ClassCastException e) {
      }
  }"
1764,"    protected <T> T convertToType(final Class<T> type, final Object value) throws Exception {
        if (Character.class.equals(type) || Character.TYPE.equals(type)) {
            return type.cast(new Character(value.toString().charAt(0)));
        }

        throw conversionException(type, value);
    }","  public void test5()  throws Throwable  {
      Object object0 = new Object();
      CharacterConverter characterConverter0 = new CharacterConverter(object0);
      Class<Character> class0 = Character.TYPE;
      try { 
        characterConverter0.convertToType(class0, object0);
        fail(""Expecting exception: ClassCastException"");
      } catch(ClassCastException e) {
      }
  }"
1765,"    protected String convertToString(final Object value) {
        final String strValue = value.toString();
        return strValue.length() == 0 ? """" : strValue.substring(0, 1);
    }","  public void test6()  throws Throwable  {
      CharacterConverter characterConverter0 = new CharacterConverter();
      Object object0 = new Object();
      String string0 = characterConverter0.convertToString(object0);
}"
1766,"    protected <T> T convertToType(final Class<T> type, final Object value) throws Exception {
        if (Character.class.equals(type) || Character.TYPE.equals(type)) {
            return type.cast(new Character(value.toString().charAt(0)));
        }

        throw conversionException(type, value);
    }","  public void test7()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      CharacterConverter characterConverter0 = new CharacterConverter(class0);
      try { 
        characterConverter0.convertToType(class0, (Object) ""j"");
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // Can't convert value 'j' to type class java.lang.Integer
         //
         verifyException(""org.apache.commons.beanutils.converters.AbstractConverter"", e);
      }
  }"
1767,"    protected Class<?> getDefaultType() {
        return URL.class;
    }","  public void test0()  throws Throwable  {
      URLConverter uRLConverter0 = new URLConverter();
      Class<?> class0 = uRLConverter0.getDefaultType();
}"
1768,"    protected <T> T convertToType(final Class<T> type, final Object value) throws Throwable {
        if (URL.class.equals(type)) {
            return type.cast(new URL(value.toString()));
        }

        throw conversionException(type, value);
    }","  public void test1()  throws Throwable  {
      URLConverter uRLConverter0 = new URLConverter();
      Class<URL> class0 = URL.class;
      try { 
        uRLConverter0.convertToType(class0, (Object) class0);
        fail(""Expecting exception: MalformedURLException"");
      } catch(MalformedURLException e) {
         //
         // no protocol: java.lang.Class@0000000002
         //
         verifyException(""java.net.URL"", e);
      }
  }"
1769,"    protected <T> T convertToType(final Class<T> type, final Object value) throws Throwable {
        if (URL.class.equals(type)) {
            return type.cast(new URL(value.toString()));
        }

        throw conversionException(type, value);
    }","  public void test2()  throws Throwable  {
      URLConverter uRLConverter0 = new URLConverter();
      Class<URL> class0 = URL.class;
      try { 
        uRLConverter0.convertToType(class0, (Object) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.evosuite.runtime.System"", e);
      }
  }"
1770,"    public URLConverter() {
        super();
    }","  public void test3()  throws Throwable  {
      URLConverter uRLConverter0 = new URLConverter((Object) null);
}"
1771,"    protected <T> T convertToType(final Class<T> type, final Object value) throws Throwable {
        if (URL.class.equals(type)) {
            return type.cast(new URL(value.toString()));
        }

        throw conversionException(type, value);
    }","  public void test4()  throws Throwable  {
      URLConverter uRLConverter0 = new URLConverter();
      Class<Integer> class0 = Integer.class;
      try { 
        uRLConverter0.convertToType(class0, (Object) null);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // Can't convert value 'null' to type class java.lang.Integer
         //
         verifyException(""org.apache.commons.beanutils.converters.AbstractConverter"", e);
      }
  }"
1772,"    public URLConverter() {
        super();
    }","  public void test5()  throws Throwable  {
      Object object0 = new Object();
      URLConverter uRLConverter0 = null;
      try {
        uRLConverter0 = new URLConverter(object0);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // Error converting from 'Object' to 'java.net.URL' no protocol: java.lang.Object@0000000001
         //
         verifyException(""org.apache.commons.beanutils.converters.AbstractConverter"", e);
      }
  }"
1773,"    protected Class<Byte> getDefaultType() {
        return Byte.class;
    }","  public void test0()  throws Throwable  {
      ByteConverter byteConverter0 = new ByteConverter();
      Class<Byte> class0 = byteConverter0.getDefaultType();
}"
1774,"    public ByteConverter() {
        super(false);
    }","  public void test1()  throws Throwable  {
      Byte byte0 = new Byte((byte)0);
      ByteConverter byteConverter0 = new ByteConverter(byte0);
}"
1775,"    public ByteConverter() {
        super(false);
    }","  public void test2()  throws Throwable  {
      Object object0 = new Object();
      ByteConverter byteConverter0 = null;
      try {
        byteConverter0 = new ByteConverter(object0);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // Error converting from 'Object' to 'Byte' For input string: \""java.lang.Object@0000000002\""
         //
         verifyException(""org.apache.commons.beanutils.converters.AbstractConverter"", e);
      }
  }"
1776,"    public Object convert(final Class type, final Object value) {

        // Deal with a null value
        if (value == null) {
            if (useDefault) {
                return (defaultValue);
            } else {
                throw new ConversionException(""No value specified"");
            }
        }

        // Deal with the no-conversion-needed case
        if (MODEL.getClass() == value.getClass()) {
            return (value);
        }

        // Deal with input value as a String array
        if (strings.getClass() == value.getClass()) {
            try {
                final String[] values = (String[]) value;
                final long[] results = new long[values.length];
                for (int i = 0; i < values.length; i++) {
                    results[i] = Long.parseLong(values[i]);
                }
                return (results);
            } catch (final Exception e) {
                if (useDefault) {
                    return (defaultValue);
                } else {
                    throw new ConversionException(value.toString(), e);
                }
            }
        }

        // Parse the input value as a String into elements
        // and convert to the appropriate type
        try {
            final List list = parseElements(value.toString());
            final long[] results = new long[list.size()];
            for (int i = 0; i < results.length; i++) {
                results[i] = Long.parseLong((String) list.get(i));
            }
            return (results);
        } catch (final Exception e) {
            if (useDefault) {
                return (defaultValue);
            } else {
                throw new ConversionException(value.toString(), e);
            }
        }

    }","  public void test0()  throws Throwable  {
      LongArrayConverter longArrayConverter0 = new LongArrayConverter(""org.apache.commons.beanutils.ConversionException"");
      Class<Object> class0 = Object.class;
      Object object0 = longArrayConverter0.convert(class0, ""org.apache.commons.beanutils.ConversionException"");
}"
1777,"    public Object convert(final Class type, final Object value) {

        // Deal with a null value
        if (value == null) {
            if (useDefault) {
                return (defaultValue);
            } else {
                throw new ConversionException(""No value specified"");
            }
        }

        // Deal with the no-conversion-needed case
        if (MODEL.getClass() == value.getClass()) {
            return (value);
        }

        // Deal with input value as a String array
        if (strings.getClass() == value.getClass()) {
            try {
                final String[] values = (String[]) value;
                final long[] results = new long[values.length];
                for (int i = 0; i < values.length; i++) {
                    results[i] = Long.parseLong(values[i]);
                }
                return (results);
            } catch (final Exception e) {
                if (useDefault) {
                    return (defaultValue);
                } else {
                    throw new ConversionException(value.toString(), e);
                }
            }
        }

        // Parse the input value as a String into elements
        // and convert to the appropriate type
        try {
            final List list = parseElements(value.toString());
            final long[] results = new long[list.size()];
            for (int i = 0; i < results.length; i++) {
                results[i] = Long.parseLong((String) list.get(i));
            }
            return (results);
        } catch (final Exception e) {
            if (useDefault) {
                return (defaultValue);
            } else {
                throw new ConversionException(value.toString(), e);
            }
        }

    }","  public void test1()  throws Throwable  {
      LongArrayConverter longArrayConverter0 = new LongArrayConverter();
      Class<String> class0 = String.class;
      // Undeclared exception!
      try { 
        longArrayConverter0.convert(class0, ""TmU u2"");
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // java.lang.String@0000000002
         //
         verifyException(""org.apache.commons.beanutils.converters.LongArrayConverter"", e);
      }
  }"
1778,"    public Object convert(final Class type, final Object value) {

        // Deal with a null value
        if (value == null) {
            if (useDefault) {
                return (defaultValue);
            } else {
                throw new ConversionException(""No value specified"");
            }
        }

        // Deal with the no-conversion-needed case
        if (MODEL.getClass() == value.getClass()) {
            return (value);
        }

        // Deal with input value as a String array
        if (strings.getClass() == value.getClass()) {
            try {
                final String[] values = (String[]) value;
                final long[] results = new long[values.length];
                for (int i = 0; i < values.length; i++) {
                    results[i] = Long.parseLong(values[i]);
                }
                return (results);
            } catch (final Exception e) {
                if (useDefault) {
                    return (defaultValue);
                } else {
                    throw new ConversionException(value.toString(), e);
                }
            }
        }

        // Parse the input value as a String into elements
        // and convert to the appropriate type
        try {
            final List list = parseElements(value.toString());
            final long[] results = new long[list.size()];
            for (int i = 0; i < results.length; i++) {
                results[i] = Long.parseLong((String) list.get(i));
            }
            return (results);
        } catch (final Exception e) {
            if (useDefault) {
                return (defaultValue);
            } else {
                throw new ConversionException(value.toString(), e);
            }
        }

    }","  public void test2()  throws Throwable  {
      LongArrayConverter longArrayConverter0 = new LongArrayConverter((Object) null);
      Class<String> class0 = String.class;
      Object object0 = longArrayConverter0.convert(class0, (Object) null);
}"
1779,"    public Object convert(final Class type, final Object value) {

        // Deal with a null value
        if (value == null) {
            if (useDefault) {
                return (defaultValue);
            } else {
                throw new ConversionException(""No value specified"");
            }
        }

        // Deal with the no-conversion-needed case
        if (MODEL.getClass() == value.getClass()) {
            return (value);
        }

        // Deal with input value as a String array
        if (strings.getClass() == value.getClass()) {
            try {
                final String[] values = (String[]) value;
                final long[] results = new long[values.length];
                for (int i = 0; i < values.length; i++) {
                    results[i] = Long.parseLong(values[i]);
                }
                return (results);
            } catch (final Exception e) {
                if (useDefault) {
                    return (defaultValue);
                } else {
                    throw new ConversionException(value.toString(), e);
                }
            }
        }

        // Parse the input value as a String into elements
        // and convert to the appropriate type
        try {
            final List list = parseElements(value.toString());
            final long[] results = new long[list.size()];
            for (int i = 0; i < results.length; i++) {
                results[i] = Long.parseLong((String) list.get(i));
            }
            return (results);
        } catch (final Exception e) {
            if (useDefault) {
                return (defaultValue);
            } else {
                throw new ConversionException(value.toString(), e);
            }
        }

    }","  public void test3()  throws Throwable  {
      LongArrayConverter longArrayConverter0 = new LongArrayConverter();
      Class<String> class0 = String.class;
      // Undeclared exception!
      try { 
        longArrayConverter0.convert(class0, (Object) null);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // No value specified
         //
         verifyException(""org.apache.commons.beanutils.converters.LongArrayConverter"", e);
      }
  }"
