15148
Test: public void testExampleAnt() throws IOException, OptionException { final DefaultOptionBuilder obuilder = new DefaultOptionBuilder(); final ArgumentBuilder abuilder = new ArgumentBuilder(); final GroupBuilder gbuilder = new GroupBuilder(); Option help = obuilder .withShortName("help") .withShortName("h") .withDescription("print this message") .create(); Option projecthelp = obuilder .withShortName("projecthelp") .withShortName("p") .withDescription("print project help information") .create(); Option version = obuilder .withShortName("version") .withDescription("print the version information and exit") .create(); Option diagnostics = obuilder .withShortName("diagnostics") .withDescription("print information that might be helpful to diagnose or report problems.") .create(); Option quiet = obuilder .withShortName("quiet") .withShortName("q") .withDescription("be extra quiet") .create(); Option verbose = obuilder .withShortName("verbose") .withShortName("v") .withDescription("be extra verbose") .create(); Option debug = obuilder .withShortName("debug") .withShortName("d") .withDescription("print debugging information") .create(); Option emacs = obuilder .withShortName("emacs") .withShortName("e") .withDescription("produce logging information without adornments") .create(); Option lib = obuilder .withShortName("lib") .withDescription("specifies a path to search for jars and classes") .withArgument( abuilder .withName("path") .withMinimum(1) .withMaximum(1) .create()) .create(); Option logfile = obuilder .withShortName("logfile") .withShortName("l") .withDescription("use given file for log") .withArgument( abuilder .withName("file") .withMinimum(1) .withMaximum(1) .create()) .create(); Option logger = obuilder .withShortName("logger") .withDescription("the class which is to perform logging") .withArgument( abuilder .withName("classname") .withMinimum(1) .withMaximum(1) .create()) .create(); Option listener = obuilder .withShortName("listener") .withDescription("add an instance of class as a project listener") .withArgument( abuilder .withName("classname") .withMinimum(1) .withMaximum(1) .create()) .create(); Option noinput = obuilder .withShortName("noinput") .withDescription("do not allow interactive input") .create(); Option buildfile = obuilder .withShortName("buildfile") .withShortName("file") .withShortName("f") .withDescription("use given buildfile") .withArgument( abuilder .withName("file") .withMinimum(1) .withMaximum(1) .create()) .create(); Option property = new PropertyOption(); Option propertyfile = obuilder .withShortName("propertyfile") .withDescription("load all properties from file with -D properties taking precedence") .withArgument( abuilder .withName("name") .withMinimum(1) .withMaximum(1) .create()) .create(); Option inputhandler = obuilder .withShortName("inputhandler") .withDescription("the class which will handle input requests") .withArgument( abuilder .withName("class") .withMinimum(1) .withMaximum(1) .create()) .create(); Option find = obuilder .withShortName("find") .withShortName("s") .withDescription("search for buildfile towards the root of the filesystem and use it") .withArgument( abuilder .withName("file") .withMinimum(1) .withMaximum(1) .create()) .create(); Option targets = abuilder.withName("target").create(); Group options = gbuilder .withName("options") .withOption(help) .withOption(projecthelp) .withOption(version) .withOption(diagnostics) .withOption(quiet) .withOption(verbose) .withOption(debug) .withOption(emacs) .withOption(lib) .withOption(logfile) .withOption(logger) .withOption(listener) .withOption(noinput) .withOption(buildfile) .withOption(property) .withOption(propertyfile) .withOption(inputhandler) .withOption(find) .withOption(targets) .create(); String[] args = new String[]{}; Parser parser = new Parser(); parser.setGroup(options); CommandLine cl = parser.parse(args); if(cl.hasOption(help)) { return; } if(cl.hasOption("-version")) { return; } if(cl.hasOption(logfile)) { String file = (String)cl.getValue(logfile); } List targetList = cl.getValues(targets); for (Iterator i = targetList.iterator(); i.hasNext();) { String target = (String) i.next(); } HelpFormatter hf = new HelpFormatter(); hf.setShellCommand("ant"); hf.getFullUsageSettings().add(DisplaySetting.DISPLAY_GROUP_NAME); hf.getFullUsageSettings().add(DisplaySetting.DISPLAY_GROUP_ARGUMENT); hf.getFullUsageSettings().remove(DisplaySetting.DISPLAY_GROUP_EXPANDED); hf.getLineUsageSettings().add(DisplaySetting.DISPLAY_PROPERTY_OPTION); hf.getLineUsageSettings().add(DisplaySetting.DISPLAY_PARENT_ARGUMENT); hf.getLineUsageSettings().add(DisplaySetting.DISPLAY_ARGUMENT_BRACKETED); hf.getDisplaySettings().remove(DisplaySetting.DISPLAY_GROUP_ARGUMENT); hf.setGroup(options); hf.setPrintWriter(new PrintWriter(new StringWriter())); hf.print(); }
Code: public List getValues(final Option option, List defaultValues) { List valueList = (List) values.get(option); if (defaultValues == null || defaultValues.isEmpty()) { defaultValues = (List) this.defaultValues.get(option); } if (defaultValues != null && !defaultValues.isEmpty()) { if (valueList == null || valueList.isEmpty()) { valueList = defaultValues; } else { if (defaultValues.size() > valueList.size()) { valueList = new ArrayList(valueList); for (int i=valueList.size(); i<defaultValues.size(); i++) { valueList.add(defaultValues.get(i)); } } } } return valueList == null ? Collections.EMPTY_LIST : valueList; }
tensor([[0.0090, 0.0117, 0.0205,  ..., 0.0090, 0.0143, 0.0042],
        [0.0062, 0.0092, 0.0201,  ..., 0.0063, 0.0113, 0.0032],
        [0.0068, 0.0114, 0.0176,  ..., 0.0070, 0.0091, 0.0031],
        ...,
        [0.0093, 0.0128, 0.0206,  ..., 0.0067, 0.0113, 0.0052],
        [0.0058, 0.0081, 0.0174,  ..., 0.0054, 0.0110, 0.0032],
        [0.0060, 0.0101, 0.0190,  ..., 0.0061, 0.0110, 0.0037]])