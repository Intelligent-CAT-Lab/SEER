67221
Test: public void test062() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test062"); com.fasterxml.jackson.databind.node.DoubleNode doubleNode1 = new com.fasterxml.jackson.databind.node.DoubleNode((double) 1); com.fasterxml.jackson.core.ObjectCodec objectCodec2 = null; com.fasterxml.jackson.core.JsonParser jsonParser3 = doubleNode1.traverse(objectCodec2); com.fasterxml.jackson.databind.util.TokenBuffer tokenBuffer4 = new com.fasterxml.jackson.databind.util.TokenBuffer(jsonParser3); tokenBuffer4.writeBoolean(false); com.fasterxml.jackson.core.ObjectCodec objectCodec7 = tokenBuffer4._objectCodec; tokenBuffer4.writeOmittedField(""); com.fasterxml.jackson.databind.node.DoubleNode doubleNode11 = new com.fasterxml.jackson.databind.node.DoubleNode((double) 1); com.fasterxml.jackson.databind.MappingJsonFactory mappingJsonFactory12 = new com.fasterxml.jackson.databind.MappingJsonFactory(); boolean boolean13 = doubleNode11.equals((java.lang.Object) mappingJsonFactory12); int int14 = doubleNode11.asInt(); java.math.BigDecimal bigDecimal15 = doubleNode11.decimalValue(); tokenBuffer4.writeNumber(bigDecimal15); com.fasterxml.jackson.databind.node.DoubleNode doubleNode18 = new com.fasterxml.jackson.databind.node.DoubleNode((double) 1); com.fasterxml.jackson.core.ObjectCodec objectCodec19 = null; com.fasterxml.jackson.core.JsonParser jsonParser20 = doubleNode18.traverse(objectCodec19); com.fasterxml.jackson.databind.util.TokenBuffer tokenBuffer21 = new com.fasterxml.jackson.databind.util.TokenBuffer(jsonParser20); tokenBuffer21.writeBoolean(false); byte[] byteArray28 = new byte[] { (byte) 100, (byte) 10, (byte) 10, (byte) 10 }; tokenBuffer21.writeBinary(byteArray28); com.fasterxml.jackson.databind.node.BinaryNode binaryNode30 = new com.fasterxml.jackson.databind.node.BinaryNode(byteArray28); boolean boolean32 = binaryNode30.equals((java.lang.Object) 13); com.fasterxml.jackson.core.JsonToken jsonToken33 = binaryNode30.asToken(); com.fasterxml.jackson.databind.node.TextNode textNode35 = new com.fasterxml.jackson.databind.node.TextNode("1.0"); com.fasterxml.jackson.databind.node.DoubleNode doubleNode37 = new com.fasterxml.jackson.databind.node.DoubleNode((double) 1); com.fasterxml.jackson.core.ObjectCodec objectCodec38 = null; com.fasterxml.jackson.core.JsonParser jsonParser39 = doubleNode37.traverse(objectCodec38); com.fasterxml.jackson.databind.util.TokenBuffer tokenBuffer40 = new com.fasterxml.jackson.databind.util.TokenBuffer(jsonParser39); tokenBuffer40._forceBigDecimal = false; int int43 = tokenBuffer40.getFeatureMask(); com.fasterxml.jackson.databind.SerializerProvider serializerProvider44 = null; textNode35.serialize((com.fasterxml.jackson.core.JsonGenerator) tokenBuffer40, serializerProvider44); tokenBuffer40.writeObject((java.lang.Object) (-1.0d)); com.fasterxml.jackson.core.JsonParser jsonParser48 = tokenBuffer40.asParser(); tokenBuffer4._append(jsonToken33, (java.lang.Object) tokenBuffer40); }
Code: public void writeBoolean(boolean state) throws IOException { _appendValue(state ? JsonToken.VALUE_TRUE : JsonToken.VALUE_FALSE); }
tensor([[0.0606, 0.0504, 0.0803, 0.0751, 0.1350, 0.0343, 0.0924, 0.1095, 0.0970,
         0.0936, 0.0608, 0.0826, 0.0284],
        [0.0479, 0.0432, 0.0944, 0.0621, 0.1680, 0.0284, 0.0900, 0.1156, 0.0992,
         0.1166, 0.0432, 0.0642, 0.0271],
        [0.0458, 0.0347, 0.0699, 0.0961, 0.1745, 0.0300, 0.0810, 0.1129, 0.1066,
         0.0914, 0.0385, 0.1002, 0.0183],
        [0.0688, 0.0542, 0.0537, 0.0658, 0.1316, 0.0380, 0.0848, 0.1057, 0.1154,
         0.1022, 0.0535, 0.1019, 0.0245],
        [0.0389, 0.0385, 0.0606, 0.0664, 0.1829, 0.0260, 0.1003, 0.1254, 0.1061,
         0.1113, 0.0481, 0.0763, 0.0192],
        [0.0481, 0.0385, 0.0642, 0.0838, 0.1835, 0.0289, 0.0934, 0.1117, 0.0998,
         0.0938, 0.0420, 0.0929, 0.0193],
        [0.0605, 0.0527, 0.0851, 0.0767, 0.1071, 0.0405, 0.0964, 0.1053, 0.0790,
         0.1190, 0.0495, 0.0942, 0.0341],
        [0.0512, 0.0437, 0.0719, 0.0839, 0.1650, 0.0350, 0.0979, 0.1082, 0.0928,
         0.0994, 0.0408, 0.0834, 0.0268],
        [0.0467, 0.0331, 0.0922, 0.0678, 0.1329, 0.0306, 0.1216, 0.1053, 0.0987,
         0.1258, 0.0507, 0.0719, 0.0227],
        [0.0551, 0.0384, 0.0650, 0.0833, 0.1443, 0.0312, 0.0943, 0.1102, 0.0972,
         0.1173, 0.0465, 0.0871, 0.0301],
        [0.0563, 0.0448, 0.0583, 0.0706, 0.1275, 0.0394, 0.0930, 0.1025, 0.1177,
         0.1356, 0.0402, 0.0827, 0.0314],
        [0.0566, 0.0567, 0.0855, 0.0604, 0.1342, 0.0280, 0.0961, 0.1192, 0.0969,
         0.1244, 0.0394, 0.0766, 0.0260],
        [0.0415, 0.0388, 0.0535, 0.0741, 0.1746, 0.0339, 0.1100, 0.1072, 0.1027,
         0.1116, 0.0397, 0.0889, 0.0235]])