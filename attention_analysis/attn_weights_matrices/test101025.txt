101025
Test: public void test0032() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0032"); org.joda.time.DateTimeField dateTimeField0 = null; org.joda.time.DateTimeZone dateTimeZone1 = null; org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeUtils.getZone(dateTimeZone1); int int4 = dateTimeZone2.getOffset((long) 'a'); org.joda.time.chrono.ISOChronology iSOChronology5 = org.joda.time.chrono.ISOChronology.getInstance(); org.joda.time.chrono.ISOChronology iSOChronology6 = org.joda.time.chrono.ISOChronology.getInstance(); boolean boolean7 = iSOChronology5.equals((java.lang.Object) iSOChronology6); org.joda.time.DateTimeField dateTimeField8 = iSOChronology5.hourOfDay(); org.joda.time.DateTimeZone dateTimeZone9 = null; org.joda.time.Chronology chronology10 = iSOChronology5.withZone(dateTimeZone9); org.joda.time.DurationField durationField11 = iSOChronology5.millis(); org.joda.time.DurationField durationField12 = null; org.joda.time.chrono.GJChronology gJChronology13 = org.joda.time.chrono.GJChronology.getInstanceUTC(); org.joda.time.DateTimeField dateTimeField14 = gJChronology13.yearOfCentury(); org.joda.time.DateTimeField dateTimeField15 = gJChronology13.yearOfEra(); org.joda.time.DurationField durationField16 = gJChronology13.hours(); long long19 = durationField16.getMillis((long) (byte) 100, (long) 100); try { org.joda.time.chrono.ZonedChronology.ZonedDateTimeField zonedDateTimeField20 = new org.joda.time.chrono.ZonedChronology.ZonedDateTimeField(dateTimeField0, dateTimeZone2, durationField11, durationField12, durationField16); } catch (java.lang.NullPointerException e) { } }
Code: public static synchronized GJChronology getInstance( DateTimeZone zone, ReadableInstant gregorianCutover, int minDaysInFirstWeek) { zone = DateTimeUtils.getZone(zone); Instant cutoverInstant; if (gregorianCutover == null) { cutoverInstant = DEFAULT_CUTOVER; } else { cutoverInstant = gregorianCutover.toInstant(); LocalDate cutoverDate = new LocalDate(cutoverInstant.getMillis(), GregorianChronology.getInstance(zone)); if (cutoverDate.getYear() <= 0) { throw new IllegalArgumentException("Cutover too early. Must be on or after 0001-01-01."); } } GJChronology chrono; synchronized (cCache) { ArrayList<GJChronology> chronos = cCache.get(zone); if (chronos == null) { chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); } else { for (int i = chronos.size(); --i >= 0;) { chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) { return chrono; } } } if (zone == DateTimeZone.UTC) { chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); } else { chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); } chronos.add(chrono); } return chrono; }
tensor([[0.0047, 0.0152, 0.0087,  ..., 0.0052, 0.0273, 0.0021],
        [0.0049, 0.0137, 0.0096,  ..., 0.0047, 0.0174, 0.0025],
        [0.0042, 0.0178, 0.0092,  ..., 0.0055, 0.0235, 0.0017],
        ...,
        [0.0030, 0.0148, 0.0096,  ..., 0.0042, 0.0273, 0.0017],
        [0.0040, 0.0147, 0.0094,  ..., 0.0047, 0.0236, 0.0020],
        [0.0034, 0.0141, 0.0105,  ..., 0.0073, 0.0177, 0.0018]])