15150
Test: public void testAnt() throws OptionException { final DefaultOptionBuilder obuilder = new DefaultOptionBuilder(); final ArgumentBuilder abuilder = new ArgumentBuilder(); final GroupBuilder gbuilder = new GroupBuilder(); final Group options = gbuilder .withName("ant") .withOption( obuilder .withShortName("help") .withDescription("print this message") .create()) .withOption( obuilder .withShortName("projecthelp") .withDescription("print project help information") .create()) .withOption( obuilder .withShortName("version") .withDescription("print the version information and exit") .create()) .withOption( obuilder .withShortName("diagnostics") .withDescription("print information that might be helpful to diagnose or report problems.") .create()) .withOption( obuilder .withShortName("quiet") .withShortName("q") .withDescription("be extra quiet") .create()) .withOption( obuilder .withShortName("verbose") .withShortName("v") .withDescription("be extra verbose") .create()) .withOption( obuilder .withShortName("debug") .withDescription("print debugging information") .create()) .withOption( obuilder .withShortName("emacs") .withDescription("produce logging information without adornments") .create()) .withOption( obuilder .withShortName("logfile") .withShortName("l") .withDescription("use given file for log") .withArgument( abuilder .withName("file") .withMinimum(1) .withMaximum(1) .create()) .create()) .withOption( obuilder .withShortName("logger") .withDescription("the class which is to perform logging") .withArgument( abuilder .withName("classname") .withMinimum(1) .withMaximum(1) .create()) .create()) .withOption( obuilder .withShortName("listener") .withDescription("add an instance of class as a project listener") .withArgument( abuilder .withName("classname") .withMinimum(1) .withMaximum(1) .create()) .create()) .withOption( obuilder .withShortName("buildfile") .withShortName("file") .withShortName("f") .withDescription("use given buildfile") .withArgument( abuilder .withName("file") .withMinimum(1) .withMaximum(1) .create()) .create()) .withOption(PropertyOption.INSTANCE) .withOption( obuilder .withShortName("propertyfile") .withDescription("load all properties from file with -D properties taking precedence") .withArgument( abuilder .withName("name") .withMinimum(1) .withMaximum(1) .create()) .create()) .withOption( obuilder .withShortName("inputhandler") .withDescription("the class which will handle input requests") .withArgument( abuilder .withName("class") .withMinimum(1) .withMaximum(1) .create()) .create()) .withOption( obuilder .withShortName("find") .withDescription("search for buildfile towards the root of the filesystem and use it") .withArgument( abuilder .withName("file") .withMinimum(1) .withMaximum(1) .create()) .create()) .withOption(abuilder.withName("target").create()) .create(); Parser parser = new Parser(); parser.setGroup(options); CommandLine line = parser.parse( new String[] { "-buildfile", "mybuild.xml", "-Dproperty=value", "-Dproperty1=value1", "-projecthelp", "compile", "docs" }); final List targets = new ArrayList(); targets.add("compile"); targets.add("docs"); }
Code: public List getValues(final Option option, List defaultValues) { List valueList = (List) values.get(option); if (defaultValues == null || defaultValues.isEmpty()) { defaultValues = (List) this.defaultValues.get(option); } if (defaultValues != null && !defaultValues.isEmpty()) { if (valueList == null || valueList.isEmpty()) { valueList = defaultValues; } else { if (defaultValues.size() > valueList.size()) { valueList = new ArrayList(valueList); for (int i=valueList.size(); i<defaultValues.size(); i++) { valueList.add(defaultValues.get(i)); } } } } return valueList == null ? Collections.EMPTY_LIST : valueList; }
tensor([[0.0090, 0.0117, 0.0205,  ..., 0.0090, 0.0143, 0.0042],
        [0.0062, 0.0092, 0.0201,  ..., 0.0063, 0.0113, 0.0032],
        [0.0068, 0.0114, 0.0176,  ..., 0.0070, 0.0091, 0.0031],
        ...,
        [0.0093, 0.0128, 0.0206,  ..., 0.0067, 0.0113, 0.0052],
        [0.0058, 0.0081, 0.0174,  ..., 0.0054, 0.0110, 0.0032],
        [0.0060, 0.0101, 0.0190,  ..., 0.0061, 0.0110, 0.0037]])