101207
Test: public void test0409() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0409"); org.joda.time.chrono.GJChronology gJChronology1 = org.joda.time.chrono.GJChronology.getInstanceUTC(); org.joda.time.DateTimeField dateTimeField2 = gJChronology1.yearOfCentury(); org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology1); org.joda.time.DurationField durationField4 = gJChronology1.eras(); org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) 0, (org.joda.time.Chronology) gJChronology1); org.joda.time.ReadablePeriod readablePeriod6 = null; org.joda.time.LocalDate localDate8 = localDate5.withPeriodAdded(readablePeriod6, (-28800000)); org.joda.time.LocalDate.Property property9 = localDate5.dayOfMonth(); org.joda.time.LocalDate localDate11 = property9.addWrapFieldToCopy(818); org.joda.time.DateTimeZone dateTimeZone12 = null; org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeUtils.getZone(dateTimeZone12); org.joda.time.chrono.ISOChronology iSOChronology14 = org.joda.time.chrono.ISOChronology.getInstance(); org.joda.time.DateTimeField dateTimeField15 = iSOChronology14.yearOfEra(); org.joda.time.DateTime dateTime16 = org.joda.time.DateTime.now((org.joda.time.Chronology) iSOChronology14); int int17 = dateTimeZone13.getOffset((org.joda.time.ReadableInstant) dateTime16); org.joda.time.DateTime dateTime18 = localDate11.toDateTimeAtMidnight(dateTimeZone13); org.joda.time.chrono.GJChronology gJChronology20 = org.joda.time.chrono.GJChronology.getInstanceUTC(); org.joda.time.DateTimeField dateTimeField21 = gJChronology20.yearOfCentury(); org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology20); org.joda.time.DurationField durationField23 = gJChronology20.eras(); org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate((long) 0, (org.joda.time.Chronology) gJChronology20); org.joda.time.ReadablePeriod readablePeriod25 = null; org.joda.time.LocalDate localDate27 = localDate24.withPeriodAdded(readablePeriod25, (-28800000)); org.joda.time.LocalDate.Property property28 = localDate24.dayOfMonth(); org.joda.time.Instant instant30 = new org.joda.time.Instant((long) (short) -1); org.joda.time.chrono.GJChronology gJChronology31 = org.joda.time.chrono.GJChronology.getInstanceUTC(); org.joda.time.DateTimeField dateTimeField32 = gJChronology31.yearOfCentury(); org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology31); int int34 = dateTime33.getEra(); int int35 = dateTime33.getYear(); boolean boolean36 = instant30.isBefore((org.joda.time.ReadableInstant) dateTime33); org.joda.time.DateTime dateTime38 = dateTime33.withMillis((long) (-25200000)); org.joda.time.ReadablePeriod readablePeriod39 = null; org.joda.time.DateTime dateTime40 = dateTime38.plus(readablePeriod39); int int41 = dateTime38.getYear(); int int42 = property28.compareTo((org.joda.time.ReadableInstant) dateTime38); org.joda.time.LocalDate localDate43 = property28.roundHalfCeilingCopy(); org.joda.time.DateTimeFieldType dateTimeFieldType45 = localDate43.getFieldType(0); org.joda.time.chrono.GJChronology gJChronology46 = org.joda.time.chrono.GJChronology.getInstanceUTC(); org.joda.time.DateTimeField dateTimeField47 = dateTimeFieldType45.getField((org.joda.time.Chronology) gJChronology46); boolean boolean48 = localDate11.isSupported(dateTimeFieldType45); }
Code: public static synchronized GJChronology getInstance( DateTimeZone zone, ReadableInstant gregorianCutover, int minDaysInFirstWeek) { zone = DateTimeUtils.getZone(zone); Instant cutoverInstant; if (gregorianCutover == null) { cutoverInstant = DEFAULT_CUTOVER; } else { cutoverInstant = gregorianCutover.toInstant(); LocalDate cutoverDate = new LocalDate(cutoverInstant.getMillis(), GregorianChronology.getInstance(zone)); if (cutoverDate.getYear() <= 0) { throw new IllegalArgumentException("Cutover too early. Must be on or after 0001-01-01."); } } GJChronology chrono; synchronized (cCache) { ArrayList<GJChronology> chronos = cCache.get(zone); if (chronos == null) { chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); } else { for (int i = chronos.size(); --i >= 0;) { chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) { return chrono; } } } if (zone == DateTimeZone.UTC) { chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); } else { chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); } chronos.add(chrono); } return chrono; }
tensor([[0.0047, 0.0152, 0.0087,  ..., 0.0052, 0.0273, 0.0021],
        [0.0049, 0.0137, 0.0096,  ..., 0.0047, 0.0174, 0.0025],
        [0.0042, 0.0178, 0.0092,  ..., 0.0055, 0.0235, 0.0017],
        ...,
        [0.0030, 0.0148, 0.0096,  ..., 0.0042, 0.0273, 0.0017],
        [0.0040, 0.0147, 0.0094,  ..., 0.0047, 0.0236, 0.0020],
        [0.0034, 0.0141, 0.0105,  ..., 0.0073, 0.0177, 0.0018]])