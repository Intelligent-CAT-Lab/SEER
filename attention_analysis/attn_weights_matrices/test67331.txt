67331
Test: public void testPOJOIntArray() throws IOException { ObjectMapper mapper = new ObjectMapper(); ObjectNode n = mapper.getNodeFactory().objectNode(); n.set("pojo", mapper.getNodeFactory().pojoNode(new int[] { 1, 2, 3 })); StringWriter sw = new StringWriter(); JsonGenerator jg = mapper.getFactory().createGenerator(sw); mapper.writeTree(jg, n); Map<String,Object> result = (Map<String,Object>) mapper.readValue(sw.toString(), Map.class); List<Object> list = (List<Object>) result.get("pojo"); for (int i = 0; i < 3; ++i) { } jg.close(); }
Code: public void writeTree(TreeNode node){if (node == null) {;return;}if (_objectCodec == null) {_append(JsonToken.VALUE_EMBEDDED_OBJECT, node);} else {;}}
tensor([[0.0548, 0.0466, 0.0947, 0.0400, 0.0555, 0.0814, 0.0270, 0.1103, 0.0803,
         0.0814, 0.0270, 0.0677, 0.1130, 0.0681, 0.0522],
        [0.0481, 0.0472, 0.1045, 0.0370, 0.0514, 0.0660, 0.0241, 0.1052, 0.0817,
         0.0660, 0.0241, 0.0529, 0.1696, 0.0801, 0.0419],
        [0.0552, 0.0432, 0.0977, 0.0407, 0.0627, 0.0676, 0.0276, 0.1055, 0.0725,
         0.0676, 0.0276, 0.0608, 0.1481, 0.0709, 0.0523],
        [0.0479, 0.0426, 0.0931, 0.0414, 0.0599, 0.0785, 0.0239, 0.0974, 0.0893,
         0.0785, 0.0239, 0.0652, 0.1143, 0.0864, 0.0576],
        [0.0480, 0.0403, 0.0998, 0.0429, 0.0586, 0.0840, 0.0248, 0.1090, 0.0856,
         0.0840, 0.0248, 0.0674, 0.0916, 0.0808, 0.0585],
        [0.0346, 0.0421, 0.0967, 0.0367, 0.0467, 0.0817, 0.0221, 0.0901, 0.0897,
         0.0817, 0.0221, 0.0510, 0.1829, 0.0765, 0.0452],
        [0.0480, 0.0364, 0.0963, 0.0421, 0.0521, 0.0856, 0.0278, 0.0986, 0.0790,
         0.0856, 0.0278, 0.0527, 0.1458, 0.0721, 0.0501],
        [0.0529, 0.0493, 0.0945, 0.0374, 0.0514, 0.0701, 0.0286, 0.0963, 0.0718,
         0.0701, 0.0286, 0.0602, 0.1568, 0.0805, 0.0517],
        [0.0506, 0.0495, 0.1099, 0.0447, 0.0536, 0.0703, 0.0224, 0.0838, 0.0867,
         0.0703, 0.0224, 0.0610, 0.1487, 0.0786, 0.0476],
        [0.0346, 0.0421, 0.0967, 0.0367, 0.0467, 0.0817, 0.0221, 0.0901, 0.0897,
         0.0817, 0.0221, 0.0510, 0.1829, 0.0765, 0.0452],
        [0.0480, 0.0364, 0.0963, 0.0421, 0.0521, 0.0856, 0.0278, 0.0986, 0.0790,
         0.0856, 0.0278, 0.0527, 0.1458, 0.0721, 0.0501],
        [0.0559, 0.0398, 0.0950, 0.0459, 0.0545, 0.0752, 0.0261, 0.0915, 0.0819,
         0.0752, 0.0261, 0.0645, 0.1283, 0.0896, 0.0504],
        [0.0599, 0.0472, 0.1084, 0.0345, 0.0512, 0.0809, 0.0270, 0.0933, 0.0717,
         0.0809, 0.0270, 0.0588, 0.1238, 0.0757, 0.0597],
        [0.0476, 0.0379, 0.1007, 0.0375, 0.0478, 0.0707, 0.0232, 0.0905, 0.0825,
         0.0707, 0.0232, 0.0584, 0.1791, 0.0803, 0.0499],
        [0.0475, 0.0365, 0.0993, 0.0324, 0.0435, 0.0709, 0.0221, 0.1172, 0.0619,
         0.0709, 0.0221, 0.0591, 0.1676, 0.1017, 0.0474]])