18634
Test: public void test125() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test125"); com.google.javascript.jscomp.CheckLevel checkLevel3 = com.google.javascript.jscomp.CheckLevel.WARNING; com.google.javascript.jscomp.DiagnosticType diagnosticType6 = com.google.javascript.jscomp.DiagnosticType.warning("", ""); java.lang.String[] strArray13 = new java.lang.String[] { "hi!", "hi!", "", "hi!", "", ": hi!" }; com.google.javascript.jscomp.JSError jSError14 = com.google.javascript.jscomp.JSError.make(": hi!", (int) (short) 1, (int) (short) 1, checkLevel3, diagnosticType6, strArray13); com.google.javascript.rhino.Node node15 = jSError14.node; boolean boolean17 = jSError14.equals((java.lang.Object) ": hi!"); com.google.javascript.jscomp.CheckLevel checkLevel18 = jSError14.level; java.lang.String str19 = jSError14.description; com.google.javascript.jscomp.DiagnosticType diagnosticType22 = com.google.javascript.jscomp.DiagnosticType.error(": hi!", "WARNING"); com.google.javascript.jscomp.CheckLevel checkLevel23 = diagnosticType22.defaultLevel; com.google.javascript.jscomp.LightweightMessageFormatter lightweightMessageFormatter24 = com.google.javascript.jscomp.LightweightMessageFormatter.withoutSource(); com.google.javascript.jscomp.CheckLevel checkLevel28 = com.google.javascript.jscomp.CheckLevel.WARNING; com.google.javascript.jscomp.DiagnosticType diagnosticType31 = com.google.javascript.jscomp.DiagnosticType.warning("", ""); java.lang.String[] strArray38 = new java.lang.String[] { "hi!", "hi!", "", "hi!", "", ": hi!" }; com.google.javascript.jscomp.JSError jSError39 = com.google.javascript.jscomp.JSError.make(": hi!", (int) (short) 1, (int) (short) 1, checkLevel28, diagnosticType31, strArray38); com.google.javascript.rhino.Node node40 = jSError39.node; boolean boolean42 = jSError39.equals((java.lang.Object) ": hi!"); com.google.javascript.jscomp.CheckLevel checkLevel43 = jSError39.level; java.lang.String str44 = lightweightMessageFormatter24.getLevelName(checkLevel43); com.google.javascript.jscomp.DiagnosticType diagnosticType47 = com.google.javascript.jscomp.DiagnosticType.warning("", "hi!"); boolean boolean49 = diagnosticType47.equals((java.lang.Object) (byte) -1); java.lang.String str50 = diagnosticType47.key; com.google.javascript.jscomp.CheckLevel checkLevel54 = com.google.javascript.jscomp.CheckLevel.WARNING; boolean boolean55 = checkLevel54.isOn(); com.google.javascript.jscomp.DiagnosticType diagnosticType58 = com.google.javascript.jscomp.DiagnosticType.warning("", "hi!"); java.lang.Object[] objArray59 = null; java.lang.String str60 = diagnosticType58.format(objArray59); java.lang.String[] strArray63 = new java.lang.String[] { "hi!", "" }; com.google.javascript.jscomp.JSError jSError64 = com.google.javascript.jscomp.JSError.make("hi!", 1, (int) (short) 100, checkLevel54, diagnosticType58, strArray63); com.google.javascript.jscomp.JSError jSError65 = com.google.javascript.jscomp.JSError.make(diagnosticType47, strArray63); com.google.javascript.jscomp.DiagnosticType diagnosticType68 = com.google.javascript.jscomp.DiagnosticType.warning("", "hi!"); boolean boolean70 = diagnosticType68.equals((java.lang.Object) (byte) -1); boolean boolean71 = jSError65.equals((java.lang.Object) (byte) -1); java.lang.String str72 = lightweightMessageFormatter24.formatWarning(jSError65); java.lang.String str73 = jSError14.format(checkLevel23, (com.google.javascript.jscomp.MessageFormatter) lightweightMessageFormatter24); java.lang.String str74 = jSError14.description; java.lang.String str75 = jSError14.toString(); com.google.javascript.rhino.Node node76 = jSError14.node; }
Code: private String format(JSError error, boolean warning) { SourceExcerptProvider source = getSource(); String sourceExcerpt = source == null ? null : excerpt.get( source, error.sourceName, error.lineNumber, excerptFormatter); StringBuilder b = new StringBuilder(); if (error.sourceName != null) { b.append(error.sourceName); if (error.lineNumber > 0) { b.append(':'); b.append(error.lineNumber); } b.append(": "); } ; b.append(" - "); b.append(error.description); b.append('\n'); if (sourceExcerpt != null) { b.append(sourceExcerpt); b.append('\n'); int charno = error.getCharno(); if (excerpt.equals(LINE) && charno <= sourceExcerpt.length()) { for (int i = -1; i != charno; i++) { char c = sourceExcerpt.charAt(i); if (Character.isWhitespace(c)) { b.append(c); } else { b.append(' '); } } b.append("^\n"); } } return b.toString(); }
tensor([[0.0103, 0.0080, 0.0055,  ..., 0.0071, 0.0176, 0.0033],
        [0.0082, 0.0074, 0.0052,  ..., 0.0069, 0.0131, 0.0028],
        [0.0089, 0.0073, 0.0036,  ..., 0.0059, 0.0149, 0.0021],
        ...,
        [0.0092, 0.0079, 0.0037,  ..., 0.0060, 0.0163, 0.0026],
        [0.0096, 0.0086, 0.0035,  ..., 0.0068, 0.0144, 0.0020],
        [0.0077, 0.0088, 0.0045,  ..., 0.0107, 0.0174, 0.0028]])