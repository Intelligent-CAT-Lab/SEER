163401
Test: public void test2120() throws Throwable { LinkedBlockingDeque<Integer> linkedBlockingDeque0 = new LinkedBlockingDeque<Integer>(); int int0 = linkedBlockingDeque0.remainingCapacity(); Integer integer0 = new Integer(2327); linkedBlockingDeque0.addFirst(integer0); LinkedBlockingDeque<Integer> linkedBlockingDeque1 = new LinkedBlockingDeque<Integer>(linkedBlockingDeque0); LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>(); boolean boolean0 = linkedBlockingDeque0.containsAll(linkedBlockingDeque1); boolean boolean1 = linkedBlockingDeque2.add("pN!M43{CE%"); linkedBlockingDeque2.interuptTakeWaiters(); boolean boolean2 = linkedBlockingDeque0.removeFirstOccurrence(linkedBlockingDeque1); Integer integer1 = linkedBlockingDeque1.getLast(); LinkedBlockingDeque<Object> linkedBlockingDeque3 = new LinkedBlockingDeque<Object>(linkedBlockingDeque1); int int1 = linkedBlockingDeque3.remainingCapacity(); Object object0 = linkedBlockingDeque3.pop(); int int2 = linkedBlockingDeque3.getTakeQueueLength(); boolean boolean3 = linkedBlockingDeque0.offerLast(integer0); Integer integer2 = linkedBlockingDeque0.peekLast(); Integer integer3 = linkedBlockingDeque1.pop(); int int3 = linkedBlockingDeque3.getTakeQueueLength(); }
Code: public int getTakeQueueLength() { lock.lock(); try { return lock.getWaitQueueLength(notEmpty); } finally { lock.unlock(); } }
[[0.062238   0.04073687 0.08633367 0.07609973 0.08633367 0.1180834
 0.07609973 0.0676447  0.08633368 0.02501081 0.06263068 0.07609972
 0.08633368 0.02501081 0.02501081]
[0.03924485 0.02908749 0.10277747 0.08425097 0.10277747 0.09338067
 0.08425097 0.06279482 0.10277749 0.01865601 0.05566124 0.08425094
 0.10277751 0.018656   0.018656  ]
[0.05335288 0.03505529 0.09003811 0.07910843 0.09003811 0.09608661
 0.07910843 0.06461114 0.09003811 0.02727862 0.07158044 0.07910842
 0.09003812 0.02727862 0.02727862]
[0.06056196 0.02986796 0.0832004  0.08871315 0.0832004  0.06799639
 0.08871315 0.07083005 0.08320041 0.03266115 0.07381909 0.08871315
 0.08320042 0.03266115 0.03266115]
[0.05335288 0.03505529 0.09003811 0.07910843 0.09003811 0.09608661
 0.07910843 0.06461114 0.09003811 0.02727862 0.07158044 0.07910842
 0.09003812 0.02727862 0.02727862]
[0.05395316 0.02988352 0.09034562 0.07934676 0.09034562 0.1054165
 0.07934676 0.07881188 0.09034562 0.02190724 0.06679042 0.07934678
 0.09034564 0.02190724 0.02190724]
[0.06056196 0.02986796 0.0832004  0.08871315 0.0832004  0.06799639
 0.08871315 0.07083005 0.08320041 0.03266115 0.07381909 0.08871315
 0.08320042 0.03266115 0.03266115]
[0.04609443 0.02943676 0.09703211 0.07958988 0.09703211 0.09547403
 0.07958988 0.06872824 0.09703211 0.02234568 0.06633142 0.07958989
 0.09703213 0.02234568 0.02234568]
[0.05335288 0.03505529 0.09003811 0.07910843 0.09003811 0.09608661
 0.07910843 0.06461114 0.09003811 0.02727862 0.07158044 0.07910842
 0.09003812 0.02727862 0.02727862]
[0.04239713 0.03265546 0.08145711 0.09642868 0.08145711 0.09779181
 0.09642868 0.08897487 0.08145711 0.02135486 0.05900158 0.09642871
 0.08145713 0.02135486 0.02135486]
[0.04389248 0.03308809 0.08529013 0.09608871 0.08529013 0.09909168
 0.09608871 0.07309707 0.08529013 0.01864177 0.06547854 0.09608874
 0.08529014 0.01864178 0.01864178]
[0.06056196 0.02986796 0.0832004  0.08871315 0.0832004  0.06799639
 0.08871315 0.07083005 0.08320041 0.03266115 0.07381909 0.08871315
 0.08320042 0.03266115 0.03266115]
[0.05335289 0.0350553  0.09003811 0.07910843 0.09003811 0.09608659
 0.07910843 0.06461114 0.09003811 0.02727863 0.07158044 0.07910843
 0.09003812 0.02727862 0.02727862]
[0.04239713 0.03265546 0.08145712 0.09642869 0.08145712 0.09779184
 0.09642869 0.08897488 0.08145712 0.02135486 0.05900159 0.09642869
 0.08145713 0.02135486 0.02135486]
[0.04239713 0.03265546 0.08145712 0.09642869 0.08145712 0.09779184
 0.09642869 0.08897488 0.08145712 0.02135486 0.05900159 0.09642869
 0.08145713 0.02135486 0.02135486]]