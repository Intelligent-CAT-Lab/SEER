101278
Test: public void test040() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test040"); org.joda.time.ReadableInterval readableInterval0 = null; org.joda.time.ReadableInterval readableInterval1 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval0); org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval0); org.joda.time.DateTimeField dateTimeField3 = chronology2.yearOfCentury(); org.joda.time.DurationField durationField4 = chronology2.millis(); org.joda.time.DurationField durationField5 = chronology2.centuries(); org.joda.time.Chronology chronology6 = chronology2.withUTC(); org.joda.time.DurationField durationField7 = chronology6.halfdays(); org.joda.time.DateTimeField dateTimeField8 = chronology6.yearOfEra(); org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.centuryOfEra(); org.joda.time.field.DividedDateTimeField dividedDateTimeField11 = new org.joda.time.field.DividedDateTimeField(dateTimeField8, dateTimeFieldType9, 10); org.joda.time.ReadablePartial readablePartial12 = null; int int13 = dividedDateTimeField11.getMaximumValue(readablePartial12); int int14 = dividedDateTimeField11.getMaximumValue(); int int15 = dividedDateTimeField11.getMinimumValue(); org.joda.time.chrono.ISOChronology iSOChronology16 = org.joda.time.chrono.ISOChronology.getInstance(); org.joda.time.DurationField durationField17 = iSOChronology16.minutes(); org.joda.time.DateTimeField dateTimeField18 = iSOChronology16.millisOfDay(); org.joda.time.DateTimeField dateTimeField19 = iSOChronology16.centuryOfEra(); org.joda.time.field.OffsetDateTimeField offsetDateTimeField21 = new org.joda.time.field.OffsetDateTimeField(dateTimeField19, (int) (short) 100); org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.hourOfDay(); java.lang.String str23 = dateTimeFieldType22.getName(); org.joda.time.ReadableInterval readableInterval25 = null; org.joda.time.ReadableInterval readableInterval26 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval25); org.joda.time.Chronology chronology27 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval25); org.joda.time.DateTimeField dateTimeField28 = chronology27.yearOfCentury(); org.joda.time.Partial partial29 = new org.joda.time.Partial(dateTimeFieldType22, (int) (short) 0, chronology27); org.joda.time.ReadableInterval readableInterval31 = null; org.joda.time.ReadableInterval readableInterval32 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval31); org.joda.time.Chronology chronology33 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval31); org.joda.time.DateTimeField dateTimeField34 = chronology33.yearOfCentury(); org.joda.time.DurationField durationField35 = chronology33.millis(); org.joda.time.DurationField durationField36 = chronology33.centuries(); org.joda.time.ReadableInterval readableInterval37 = null; org.joda.time.ReadableInterval readableInterval38 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval37); org.joda.time.Chronology chronology39 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval37); org.joda.time.DateTimeField dateTimeField40 = chronology39.yearOfCentury(); org.joda.time.DurationField durationField41 = chronology39.millis(); org.joda.time.DateTimeField dateTimeField42 = chronology39.dayOfWeek(); org.joda.time.ReadableInterval readableInterval43 = null; org.joda.time.ReadableInterval readableInterval44 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval43); org.joda.time.Chronology chronology45 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval43); org.joda.time.DateTimeField dateTimeField46 = chronology45.yearOfCentury(); org.joda.time.DateTimeField dateTimeField47 = chronology45.minuteOfDay(); org.joda.time.ReadableInterval readableInterval48 = null; org.joda.time.ReadableInterval readableInterval49 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval48); org.joda.time.ReadableInterval readableInterval50 = null; boolean boolean51 = readableInterval49.contains(readableInterval50); org.joda.time.PeriodType periodType52 = null; org.joda.time.Period period53 = readableInterval49.toPeriod(periodType52); int[] intArray55 = chronology45.get((org.joda.time.ReadablePeriod) period53, (-210866846400000L)); int[] intArray58 = chronology39.get((org.joda.time.ReadablePeriod) period53, 2173795348453L, (long) 1439); int[] intArray61 = chronology33.get((org.joda.time.ReadablePeriod) period53, (-210861660779418L), 1625877280312L); int[] intArray63 = offsetDateTimeField21.add((org.joda.time.ReadablePartial) partial29, 11, intArray61, 0); org.joda.time.ReadableInterval readableInterval65 = null; org.joda.time.ReadableInterval readableInterval66 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval65); org.joda.time.Chronology chronology67 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval65); org.joda.time.DateTimeField dateTimeField68 = chronology67.yearOfCentury(); org.joda.time.DurationField durationField69 = chronology67.millis(); org.joda.time.DateTimeField dateTimeField70 = chronology67.dayOfWeek(); org.joda.time.ReadableInterval readableInterval71 = null; org.joda.time.ReadableInterval readableInterval72 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval71); org.joda.time.Chronology chronology73 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval71); org.joda.time.DateTimeField dateTimeField74 = chronology73.yearOfCentury(); org.joda.time.DateTimeField dateTimeField75 = chronology73.minuteOfDay(); org.joda.time.ReadableInterval readableInterval76 = null; org.joda.time.ReadableInterval readableInterval77 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval76); org.joda.time.ReadableInterval readableInterval78 = null; boolean boolean79 = readableInterval77.contains(readableInterval78); org.joda.time.PeriodType periodType80 = null; org.joda.time.Period period81 = readableInterval77.toPeriod(periodType80); int[] intArray83 = chronology73.get((org.joda.time.ReadablePeriod) period81, (-210866846400000L)); int[] intArray86 = chronology67.get((org.joda.time.ReadablePeriod) period81, 2173795348453L, (long) 1439); try { int[] intArray88 = dividedDateTimeField11.addWrapField((org.joda.time.ReadablePartial) partial29, 53460006, intArray86, (int) (short) 100); } catch (java.lang.ArrayIndexOutOfBoundsException e) { } }
Code: public Partial(DateTimeFieldType[] types, int[] values, Chronology chronology) { super(); chronology = DateTimeUtils.getChronology(chronology).withUTC(); iChronology = chronology; if (types == null) { throw new IllegalArgumentException("Types array must not be null"); } if (values == null) { throw new IllegalArgumentException("Values array must not be null"); } if (values.length != types.length) { throw new IllegalArgumentException("Values array must be the same length as the types array"); } if (types.length == 0) { iTypes = types; iValues = values; return; } for (int i = 0; i < types.length; i++) { if (types[i] == null) { throw new IllegalArgumentException("Types array must not contain null: index " + i); } } DurationField lastUnitField = null; for (int i = 0; i < types.length; i++) { DateTimeFieldType loopType = types[i]; DurationField loopUnitField = loopType.getDurationType().getField(iChronology); if (i > 0) { int compare = lastUnitField.compareTo(loopUnitField); if (compare < 0) { throw new IllegalArgumentException("Types array must be in order largest-smallest: " + types[i - 1].getName() + " < " + loopType.getName()); } else if (compare == 0) { if (types[i - 1].getRangeDurationType() == null) { if (loopType.getRangeDurationType() == null) { throw new IllegalArgumentException("Types array must not contain duplicate: " + types[i - 1].getName() + " and " + loopType.getName()); } } else { if (loopType.getRangeDurationType() == null) { throw new IllegalArgumentException("Types array must be in order largest-smallest: " + types[i - 1].getName() + " < " + loopType.getName()); } DurationField lastRangeField = types[i - 1].getRangeDurationType().getField(iChronology); DurationField loopRangeField = loopType.getRangeDurationType().getField(iChronology); if (lastRangeField.compareTo(loopRangeField) < 0) { throw new IllegalArgumentException("Types array must be in order largest-smallest: " + types[i - 1].getName() + " < " + loopType.getName()); } if (lastRangeField.compareTo(loopRangeField) == 0) { throw new IllegalArgumentException("Types array must not contain duplicate: " + types[i - 1].getName() + " and " + loopType.getName()); } } } } lastUnitField = loopUnitField; } iTypes = (DateTimeFieldType[]) types.clone(); chronology.validate(this, values); iValues = (int[]) values.clone(); }
tensor([[0.0024, 0.0017, 0.0024,  ..., 0.0011, 0.0015, 0.0011],
        [0.0019, 0.0016, 0.0023,  ..., 0.0010, 0.0014, 0.0008],
        [0.0016, 0.0015, 0.0024,  ..., 0.0011, 0.0010, 0.0007],
        ...,
        [0.0019, 0.0018, 0.0023,  ..., 0.0012, 0.0012, 0.0011],
        [0.0018, 0.0013, 0.0024,  ..., 0.0015, 0.0013, 0.0010],
        [0.0017, 0.0015, 0.0022,  ..., 0.0013, 0.0014, 0.0009]])