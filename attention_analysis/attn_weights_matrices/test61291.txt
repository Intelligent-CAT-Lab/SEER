61291
Test: public void test0803() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0803"); org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.TDF; org.apache.commons.csv.CSVFormat cSVFormat2 = cSVFormat0.withNullString("hi!"); cSVFormat2.validate(); org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat2.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat2.withCommentStart('\037'); java.lang.String str8 = cSVFormat2.toString(); org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat2.withIgnoreEmptyLines(true); org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat10.withRecordSeparator(' '); java.lang.Character char13 = cSVFormat10.getCommentStart(); org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat10.withCommentStart('\t'); org.apache.commons.csv.CSVFormat cSVFormat16 = org.apache.commons.csv.CSVFormat.RFC4180; org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat16.withQuoteChar((java.lang.Character) ','); boolean boolean19 = cSVFormat16.isNullHandling(); org.apache.commons.csv.CSVFormat cSVFormat20 = org.apache.commons.csv.CSVFormat.DEFAULT; org.apache.commons.csv.CSVFormat cSVFormat21 = org.apache.commons.csv.CSVFormat.TDF; cSVFormat21.validate(); org.apache.commons.csv.CSVFormat cSVFormat24 = cSVFormat21.withIgnoreEmptyLines(true); java.lang.String[] strArray27 = new java.lang.String[] { "hi!", "a\t0" }; org.apache.commons.csv.CSVFormat cSVFormat28 = cSVFormat21.withHeader(strArray27); org.apache.commons.csv.CSVFormat cSVFormat29 = cSVFormat20.withHeader(strArray27); java.lang.String str30 = cSVFormat16.format((java.lang.Object[]) strArray27); org.apache.commons.csv.CSVFormat cSVFormat31 = cSVFormat10.withHeader(strArray27); org.apache.commons.csv.CSVFormat cSVFormat32 = org.apache.commons.csv.CSVFormat.TDF; org.apache.commons.csv.CSVFormat cSVFormat34 = cSVFormat32.withNullString("hi!"); cSVFormat34.validate(); java.lang.Object obj36 = null; boolean boolean37 = cSVFormat34.equals(obj36); org.apache.commons.csv.CSVFormat cSVFormat38 = org.apache.commons.csv.CSVFormat.TDF; cSVFormat38.validate(); org.apache.commons.csv.Quote quote40 = null; org.apache.commons.csv.CSVFormat cSVFormat41 = cSVFormat38.withQuotePolicy(quote40); org.apache.commons.csv.CSVFormat cSVFormat43 = cSVFormat41.withQuoteChar('\t'); java.lang.Character char44 = cSVFormat43.getEscape(); org.apache.commons.csv.CSVFormat cSVFormat46 = cSVFormat43.withDelimiter('a'); org.apache.commons.csv.CSVFormat cSVFormat48 = cSVFormat46.withNullString("\u2028"); org.apache.commons.csv.CSVFormat cSVFormat49 = org.apache.commons.csv.CSVFormat.TDF; cSVFormat49.validate(); org.apache.commons.csv.CSVFormat cSVFormat52 = cSVFormat49.withIgnoreEmptyLines(true); java.lang.String[] strArray55 = new java.lang.String[] { "hi!", "a\t0" }; org.apache.commons.csv.CSVFormat cSVFormat56 = cSVFormat49.withHeader(strArray55); org.apache.commons.csv.CSVFormat cSVFormat57 = cSVFormat48.withHeader(strArray55); org.apache.commons.csv.CSVFormat cSVFormat58 = cSVFormat34.withHeader(strArray55); java.lang.String str59 = cSVFormat10.format((java.lang.Object[]) strArray55); org.apache.commons.csv.CSVFormat cSVFormat61 = cSVFormat10.withQuoteChar('\\'); }
Code: public String toString(){final StringBuilder sb = new StringBuilder();sb.append("Delimiter=<").append(delimiter).append('>');if (isEscaping()) {sb.append(' ');sb.append("Escape=<").append(escape).append('>');}if (isQuoting()) {sb.append(' ');;}if (isCommentingEnabled()) {sb.append(' ');sb.append("CommentStart=<").append(commentStart).append('>');}if (isNullHandling()) {sb.append(' ');;}if(recordSeparator != null) {sb.append(' ');sb.append("RecordSeparator=<").append(recordSeparator).append('>');}if (getIgnoreEmptyLines()) {sb.append(" EmptyLines:ignored");}if (false) {sb.append(" SurroundingSpaces:ignored");}sb.append(" SkipHeaderRecord:").append(skipHeaderRecord);if (header != null) {sb.append(' ');sb.append("Header:").append(Arrays.toString(header));}return sb.toString();}
tensor([[0.0231, 0.0293, 0.0153,  ..., 0.0487, 0.0389, 0.0259],
        [0.0243, 0.0285, 0.0155,  ..., 0.0477, 0.0404, 0.0262],
        [0.0192, 0.0362, 0.0145,  ..., 0.0437, 0.0326, 0.0267],
        ...,
        [0.0234, 0.0366, 0.0186,  ..., 0.0426, 0.0360, 0.0251],
        [0.0179, 0.0319, 0.0141,  ..., 0.0455, 0.0258, 0.0184],
        [0.0238, 0.0338, 0.0157,  ..., 0.0468, 0.0290, 0.0262]])