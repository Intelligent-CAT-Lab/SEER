18057
Test: public void test3() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test3"); com.google.javascript.jscomp.NodeTraversal nodeTraversal0 = null; com.google.javascript.jscomp.Compiler compiler1 = new com.google.javascript.jscomp.Compiler(); com.google.javascript.jscomp.JSError[] jSErrorArray2 = compiler1.getErrors(); com.google.javascript.jscomp.CompilerOptions compilerOptions3 = compiler1.options_; com.google.javascript.jscomp.Normalize normalize5 = new com.google.javascript.jscomp.Normalize((com.google.javascript.jscomp.AbstractCompiler) compiler1, true); com.google.javascript.jscomp.NodeTraversal nodeTraversal6 = null; com.google.javascript.jscomp.Compiler compiler7 = new com.google.javascript.jscomp.Compiler(); com.google.javascript.jscomp.JSError[] jSErrorArray8 = compiler7.getErrors(); com.google.javascript.jscomp.ErrorManager errorManager9 = compiler7.getErrorManager(); com.google.javascript.jscomp.ReverseAbstractInterpreter reverseAbstractInterpreter10 = null; com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry11 = null; com.google.javascript.jscomp.Scope scope12 = null; com.google.javascript.jscomp.ScopeCreator scopeCreator13 = null; com.google.javascript.jscomp.Compiler compiler14 = new com.google.javascript.jscomp.Compiler(); com.google.javascript.jscomp.JSError[] jSErrorArray15 = compiler14.getErrors(); com.google.javascript.jscomp.CompilerOptions compilerOptions16 = compiler14.options_; compilerOptions16.aliasAllStrings = false; com.google.javascript.jscomp.CheckLevel checkLevel19 = compilerOptions16.aggressiveVarCheck; java.util.Set<java.lang.String> strSet20 = compilerOptions16.stripTypes; com.google.javascript.jscomp.CheckLevel checkLevel21 = compilerOptions16.reportUnknownTypes; com.google.javascript.jscomp.Compiler compiler22 = new com.google.javascript.jscomp.Compiler(); com.google.javascript.jscomp.JSError[] jSErrorArray23 = compiler22.getErrors(); com.google.javascript.jscomp.CompilerOptions compilerOptions24 = compiler22.options_; com.google.javascript.jscomp.CompilerOptions compilerOptions25 = compiler22.options_; boolean boolean26 = compilerOptions25.processObjectPropertyString; com.google.javascript.jscomp.CheckLevel checkLevel27 = compilerOptions25.checkGlobalThisLevel; com.google.javascript.jscomp.TypeCheck typeCheck28 = new com.google.javascript.jscomp.TypeCheck((com.google.javascript.jscomp.AbstractCompiler) compiler7, reverseAbstractInterpreter10, jSTypeRegistry11, scope12, scopeCreator13, checkLevel21, checkLevel27); com.google.javascript.jscomp.Compiler compiler29 = new com.google.javascript.jscomp.Compiler(); com.google.javascript.jscomp.JSError[] jSErrorArray30 = compiler29.getErrors(); com.google.javascript.jscomp.CompilerOptions compilerOptions31 = compiler29.options_; com.google.javascript.jscomp.ReverseAbstractInterpreter reverseAbstractInterpreter32 = null; com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry33 = null; com.google.javascript.jscomp.Compiler compiler34 = new com.google.javascript.jscomp.Compiler(); com.google.javascript.jscomp.JSError[] jSErrorArray35 = compiler34.getErrors(); com.google.javascript.jscomp.CompilerOptions compilerOptions36 = compiler34.options_; compilerOptions36.aliasAllStrings = false; boolean boolean39 = compilerOptions36.checkSymbols; com.google.javascript.jscomp.CheckLevel checkLevel40 = compilerOptions36.checkGlobalThisLevel; com.google.javascript.jscomp.Compiler compiler41 = new com.google.javascript.jscomp.Compiler(); com.google.javascript.jscomp.JSError[] jSErrorArray42 = compiler41.getErrors(); com.google.javascript.jscomp.CompilerOptions compilerOptions43 = compiler41.options_; compilerOptions43.aliasAllStrings = false; boolean boolean46 = compilerOptions43.checkSymbols; com.google.javascript.jscomp.CheckLevel checkLevel47 = compilerOptions43.checkGlobalThisLevel; com.google.javascript.jscomp.TypeCheck typeCheck48 = new com.google.javascript.jscomp.TypeCheck((com.google.javascript.jscomp.AbstractCompiler) compiler29, reverseAbstractInterpreter32, jSTypeRegistry33, checkLevel40, checkLevel47); com.google.javascript.jscomp.ProcessClosurePrimitives processClosurePrimitives50 = new com.google.javascript.jscomp.ProcessClosurePrimitives((com.google.javascript.jscomp.AbstractCompiler) compiler7, checkLevel47, true); com.google.javascript.rhino.Node node52 = new com.google.javascript.rhino.Node(0); boolean boolean53 = com.google.javascript.jscomp.NodeUtil.isLiteralValue(node52); java.lang.String str54 = node52.toStringTree(); com.google.javascript.rhino.Node node56 = new com.google.javascript.rhino.Node(0); boolean boolean57 = com.google.javascript.jscomp.NodeUtil.isLiteralValue(node56); java.lang.String str58 = node56.toStringTree(); boolean boolean59 = com.google.javascript.jscomp.NodeUtil.mayEffectMutableState(node56); com.google.javascript.rhino.Node node62 = new com.google.javascript.rhino.Node(0); boolean boolean63 = com.google.javascript.jscomp.NodeUtil.isConstantName(node62); java.util.Set<java.lang.String> strSet64 = node62.getDirectives(); int int65 = node62.getLineno(); com.google.javascript.rhino.Node node66 = com.google.javascript.jscomp.NodeUtil.newVarNode("goog", node62); boolean boolean67 = node56.hasChild(node62); processClosurePrimitives50.process(node52, node62); boolean boolean69 = com.google.javascript.jscomp.NodeUtil.containsCall(node52); com.google.javascript.rhino.Node node71 = new com.google.javascript.rhino.Node(0); boolean boolean72 = com.google.javascript.jscomp.NodeUtil.isConstantName(node71); java.util.Set<java.lang.String> strSet73 = node71.getDirectives(); int int74 = node71.getLineno(); boolean boolean75 = normalize5.shouldTraverse(nodeTraversal6, node52, node71); com.google.javascript.jscomp.GlobalNamespace.Ref.Type type76 = com.google.javascript.jscomp.GlobalNamespace.Ref.Type.ALIASING_GET; try { com.google.javascript.jscomp.GlobalNamespace.Ref ref77 = new com.google.javascript.jscomp.GlobalNamespace.Ref(nodeTraversal0, node52, type76); } catch (java.lang.NullPointerException e) { } }
Code: public void process(Node externs, Node root) { NodeTraversal.traverse(compiler, root, this); if (MAKE_LOCAL_NAMES_UNIQUE) { MakeDeclaredNamesUnique renamer = new MakeDeclaredNamesUnique(); NodeTraversal t = new NodeTraversal(compiler, renamer); t.traverseRoots(externs, root); } removeDuplicateDeclarations(root); new PropogateConstantAnnotations(compiler, assertOnChange) .process(externs, root); }
tensor([[0.0268, 0.0217, 0.0226,  ..., 0.0399, 0.0146, 0.0115],
        [0.0220, 0.0188, 0.0193,  ..., 0.0449, 0.0120, 0.0112],
        [0.0210, 0.0197, 0.0209,  ..., 0.0489, 0.0138, 0.0074],
        ...,
        [0.0209, 0.0161, 0.0235,  ..., 0.0413, 0.0109, 0.0067],
        [0.0185, 0.0163, 0.0188,  ..., 0.0453, 0.0135, 0.0077],
        [0.0188, 0.0171, 0.0261,  ..., 0.0371, 0.0133, 0.0099]])