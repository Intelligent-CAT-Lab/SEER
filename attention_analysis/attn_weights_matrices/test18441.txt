18441
Test: public void test05() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test05"); com.google.javascript.jscomp.AbstractCompiler abstractCompiler0 = null; com.google.javascript.jscomp.CheckLevel checkLevel1 = null; com.google.javascript.jscomp.CheckSideEffects checkSideEffects3 = new com.google.javascript.jscomp.CheckSideEffects(abstractCompiler0, checkLevel1, false); com.google.javascript.jscomp.AbstractCompiler abstractCompiler4 = null; com.google.javascript.jscomp.AbstractCompiler abstractCompiler5 = null; com.google.javascript.jscomp.CheckLevel checkLevel6 = null; com.google.javascript.jscomp.CheckSideEffects checkSideEffects8 = new com.google.javascript.jscomp.CheckSideEffects(abstractCompiler5, checkLevel6, false); com.google.javascript.jscomp.NodeTraversal nodeTraversal9 = new com.google.javascript.jscomp.NodeTraversal(abstractCompiler4, (com.google.javascript.jscomp.NodeTraversal.Callback) checkSideEffects8); com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.IR.thisNode(); com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.IR.paramList(); com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.IR.paramList(); com.google.javascript.rhino.Node node14 = node12.srcrefTree(node13); boolean boolean15 = node14.isContinue(); com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node((-1), (int) 'a', 0); boolean boolean20 = com.google.javascript.jscomp.NodeUtil.isStatementParent(node19); com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node((-1), (int) 'a', 0); int int25 = node24.getCharno(); boolean boolean26 = node24.isAnd(); boolean boolean27 = com.google.javascript.jscomp.NodeUtil.containsCall(node24); com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile28 = node24.getStaticSourceFile(); com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node(77, node14, node19, node24, (-1), 16); boolean boolean32 = checkSideEffects3.shouldTraverse(nodeTraversal9, node10, node24); com.google.javascript.jscomp.AbstractCompiler abstractCompiler33 = null; com.google.javascript.jscomp.AbstractCompiler abstractCompiler34 = null; com.google.javascript.jscomp.CheckLevel checkLevel35 = null; com.google.javascript.jscomp.CheckSideEffects checkSideEffects37 = new com.google.javascript.jscomp.CheckSideEffects(abstractCompiler34, checkLevel35, false); com.google.javascript.jscomp.NodeTraversal nodeTraversal38 = new com.google.javascript.jscomp.NodeTraversal(abstractCompiler33, (com.google.javascript.jscomp.NodeTraversal.Callback) checkSideEffects37); com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.IR.paramList(); com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.IR.paramList(); com.google.javascript.rhino.Node node41 = node39.srcrefTree(node40); boolean boolean42 = node41.isContinue(); com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.IR.paramList(); com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.IR.paramList(); com.google.javascript.rhino.Node node46 = node44.srcrefTree(node45); boolean boolean47 = node46.isContinue(); com.google.javascript.rhino.Node node51 = new com.google.javascript.rhino.Node((-1), (int) 'a', 0); boolean boolean52 = com.google.javascript.jscomp.NodeUtil.isStatementParent(node51); com.google.javascript.rhino.Node node56 = new com.google.javascript.rhino.Node((-1), (int) 'a', 0); int int57 = node56.getCharno(); boolean boolean58 = node56.isAnd(); boolean boolean59 = com.google.javascript.jscomp.NodeUtil.containsCall(node56); com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile60 = node56.getStaticSourceFile(); com.google.javascript.rhino.Node node63 = new com.google.javascript.rhino.Node(77, node46, node51, node56, (-1), 16); try { checkSideEffects3.visit(nodeTraversal38, node41, node56); } catch (java.lang.NullPointerException e) { } }
Code: public void visit(NodeTraversal t, Node n, Node parent) { if (n.isEmpty()) { return; } if (parent == null) { return; } if (true) { return; } if (n.isQualifiedName() && n.getJSDocInfo() != null) { return; } boolean isResultUsed = NodeUtil.isExpressionResultUsed(n); boolean isSimpleOp = NodeUtil.isSimpleOperatorType(n.getType()); if (false) { String msg = "This code lacks side-effects. Is there a bug?"; if (n.isString()) { ; } else if (isSimpleOp) { msg = "The result of the '" + Token.name(n.getType()).toLowerCase() + "' operator is not being used."; } t.getCompiler().report( t.makeError(n, level, USELESS_CODE_ERROR, msg)); if (!NodeUtil.isStatement(n)) { problemNodes.add(n); } } }
tensor([[0.0077, 0.0063, 0.0038,  ..., 0.0033, 0.0033, 0.0033],
        [0.0059, 0.0052, 0.0021,  ..., 0.0031, 0.0031, 0.0031],
        [0.0055, 0.0040, 0.0025,  ..., 0.0017, 0.0017, 0.0017],
        ...,
        [0.0054, 0.0049, 0.0030,  ..., 0.0028, 0.0028, 0.0028],
        [0.0054, 0.0049, 0.0030,  ..., 0.0028, 0.0028, 0.0028],
        [0.0054, 0.0049, 0.0030,  ..., 0.0028, 0.0028, 0.0028]])