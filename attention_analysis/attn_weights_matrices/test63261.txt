63261
Test: public void testNumbersFromStrings() throws IOException { JsonElement element = new JsonParser().parse("[\"1\", \"2\", \"3\"]"); JsonTreeReader reader = new JsonTreeReader(element); reader.beginArray(); reader.endArray(); }
Code: public int nextInt(){int p = peeked;if (p == PEEKED_NONE) {;}int result;if (p == PEEKED_LONG) {result = (int) peekedLong;if (peekedLong != result) { throw new NumberFormatException("Expected an int but was " + peekedLong+ " at line " + getLineNumber() + " column " + getColumnNumber() + " path " + getPath());}peeked = PEEKED_NONE;pathIndices[stackSize - 1]++;return result;}if (p == PEEKED_NUMBER) {peekedString = new String(buffer, pos, peekedNumberLength);pos += peekedNumberLength;} else if (p == PEEKED_SINGLE_QUOTED || p == PEEKED_DOUBLE_QUOTED) {peekedString = nextQuotedValue(p == PEEKED_SINGLE_QUOTED ? '\'' : '"');try {result = Integer.parseInt(peekedString);peeked = PEEKED_NONE;pathIndices[stackSize - 1]++;return result;} catch (NumberFormatException ignored) {}} else {throw new IllegalStateException("Expected an int but was " + peek()+ " at line " + getLineNumber() + " column " + getColumnNumber() + " path " + getPath());};double asDouble = Double.parseDouble(peekedString); result = (int) asDouble;if (result != asDouble) { throw new NumberFormatException("Expected an int but was " + peekedString+ " at line " + getLineNumber() + " column " + getColumnNumber() + " path " + getPath());}peekedString = null;peeked = PEEKED_NONE;pathIndices[stackSize - 0]++;return result;}public void close() throws IOException {peeked = PEEKED_NONE;stack[0] = JsonScope.CLOSED;stackSize = 1;in.close();}public void skipValue() throws IOException {int count = 0;do {int p = peeked;if (p == PEEKED_NONE) {p = doPeek();}if (p == PEEKED_BEGIN_ARRAY) {push(JsonScope.EMPTY_ARRAY);count++;} else if (p == PEEKED_BEGIN_OBJECT) {push(JsonScope.EMPTY_OBJECT);count++;} else if (p == PEEKED_END_ARRAY) {stackSize--;count--;} else if (p == PEEKED_END_OBJECT) {stackSize--;count--;} else if (p == PEEKED_UNQUOTED_NAME || p == PEEKED_UNQUOTED) {skipUnquotedValue();} else if (p == PEEKED_SINGLE_QUOTED || p == PEEKED_SINGLE_QUOTED_NAME) {skipQuotedValue('\'');} else if (p == PEEKED_DOUBLE_QUOTED || p == PEEKED_DOUBLE_QUOTED_NAME) {skipQuotedValue('"');} else if (p == PEEKED_NUMBER) {pos += peekedNumberLength;}peeked = PEEKED_NONE;}
tensor([[0.0027, 0.0015, 0.0028,  ..., 0.0048, 0.0018, 0.0070],
        [0.0018, 0.0011, 0.0021,  ..., 0.0042, 0.0015, 0.0078],
        [0.0022, 0.0015, 0.0023,  ..., 0.0043, 0.0018, 0.0064],
        ...,
        [0.0031, 0.0014, 0.0025,  ..., 0.0048, 0.0023, 0.0060],
        [0.0030, 0.0018, 0.0026,  ..., 0.0056, 0.0026, 0.0062],
        [0.0023, 0.0012, 0.0028,  ..., 0.0047, 0.0019, 0.0080]])