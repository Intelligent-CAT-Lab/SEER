17971
Test: public void test07() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test07"); com.google.javascript.jscomp.AbstractCompiler abstractCompiler0 = null; com.google.javascript.jscomp.FoldConstants foldConstants1 = new com.google.javascript.jscomp.FoldConstants(abstractCompiler0); com.google.javascript.jscomp.AbstractCompiler abstractCompiler2 = null; com.google.javascript.jscomp.VarCheck varCheck4 = new com.google.javascript.jscomp.VarCheck(abstractCompiler2, true); com.google.javascript.jscomp.AbstractCompiler abstractCompiler5 = null; com.google.javascript.jscomp.AbstractCompiler abstractCompiler6 = null; com.google.javascript.jscomp.VarCheck varCheck8 = new com.google.javascript.jscomp.VarCheck(abstractCompiler6, true); com.google.javascript.jscomp.NodeTraversal nodeTraversal9 = new com.google.javascript.jscomp.NodeTraversal(abstractCompiler5, (com.google.javascript.jscomp.NodeTraversal.Callback) varCheck8); boolean boolean10 = nodeTraversal9.inGlobalScope(); com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString(""); boolean boolean13 = com.google.javascript.jscomp.NodeUtil.isString(node12); boolean boolean14 = com.google.javascript.jscomp.NodeUtil.isNew(node12); com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString(""); boolean boolean17 = com.google.javascript.jscomp.NodeUtil.isString(node16); com.google.javascript.jscomp.CodePrinter.Builder builder18 = new com.google.javascript.jscomp.CodePrinter.Builder(node16); com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newString(""); java.lang.String str21 = node16.checkTreeEquals(node20); com.google.javascript.jscomp.NodeUtil.setDebugInformation(node12, node16, "<No stack trace available>"); com.google.javascript.jscomp.GoogleCodingConvention googleCodingConvention24 = new com.google.javascript.jscomp.GoogleCodingConvention(); com.google.javascript.rhino.jstype.ObjectType objectType25 = null; com.google.javascript.rhino.jstype.ObjectType objectType26 = null; com.google.javascript.rhino.jstype.ObjectType objectType27 = null; com.google.javascript.rhino.jstype.FunctionType functionType28 = null; com.google.javascript.rhino.jstype.FunctionType functionType29 = null; googleCodingConvention24.applyDelegateRelationship(objectType25, objectType26, objectType27, functionType28, functionType29); com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString(""); boolean boolean33 = com.google.javascript.jscomp.NodeUtil.isString(node32); com.google.javascript.jscomp.CodePrinter.Builder builder34 = new com.google.javascript.jscomp.CodePrinter.Builder(node32); com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newString(""); boolean boolean37 = com.google.javascript.jscomp.NodeUtil.isString(node36); boolean boolean38 = com.google.javascript.jscomp.NodeUtil.isNew(node36); java.lang.String str39 = googleCodingConvention24.extractClassNameIfRequire(node32, node36); varCheck4.visit(nodeTraversal9, node12, node32); com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString(""); boolean boolean43 = com.google.javascript.jscomp.NodeUtil.isString(node42); com.google.javascript.jscomp.CodePrinter.Builder builder44 = new com.google.javascript.jscomp.CodePrinter.Builder(node42); node42.setType((int) (short) 0); com.google.javascript.jscomp.AbstractCompiler abstractCompiler47 = null; com.google.javascript.jscomp.VarCheck varCheck49 = new com.google.javascript.jscomp.VarCheck(abstractCompiler47, true); com.google.javascript.jscomp.AbstractCompiler abstractCompiler50 = null; com.google.javascript.jscomp.AbstractCompiler abstractCompiler51 = null; com.google.javascript.jscomp.VarCheck varCheck53 = new com.google.javascript.jscomp.VarCheck(abstractCompiler51, true); com.google.javascript.jscomp.NodeTraversal nodeTraversal54 = new com.google.javascript.jscomp.NodeTraversal(abstractCompiler50, (com.google.javascript.jscomp.NodeTraversal.Callback) varCheck53); boolean boolean55 = nodeTraversal54.inGlobalScope(); com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString(""); boolean boolean58 = com.google.javascript.jscomp.NodeUtil.isString(node57); boolean boolean59 = com.google.javascript.jscomp.NodeUtil.isNew(node57); com.google.javascript.rhino.Node node61 = com.google.javascript.rhino.Node.newString(""); boolean boolean62 = com.google.javascript.jscomp.NodeUtil.isString(node61); com.google.javascript.jscomp.CodePrinter.Builder builder63 = new com.google.javascript.jscomp.CodePrinter.Builder(node61); com.google.javascript.rhino.Node node65 = com.google.javascript.rhino.Node.newString(""); java.lang.String str66 = node61.checkTreeEquals(node65); com.google.javascript.jscomp.NodeUtil.setDebugInformation(node57, node61, "<No stack trace available>"); com.google.javascript.jscomp.GoogleCodingConvention googleCodingConvention69 = new com.google.javascript.jscomp.GoogleCodingConvention(); com.google.javascript.rhino.jstype.ObjectType objectType70 = null; com.google.javascript.rhino.jstype.ObjectType objectType71 = null; com.google.javascript.rhino.jstype.ObjectType objectType72 = null; com.google.javascript.rhino.jstype.FunctionType functionType73 = null; com.google.javascript.rhino.jstype.FunctionType functionType74 = null; googleCodingConvention69.applyDelegateRelationship(objectType70, objectType71, objectType72, functionType73, functionType74); com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newString(""); boolean boolean78 = com.google.javascript.jscomp.NodeUtil.isString(node77); com.google.javascript.jscomp.CodePrinter.Builder builder79 = new com.google.javascript.jscomp.CodePrinter.Builder(node77); com.google.javascript.rhino.Node node81 = com.google.javascript.rhino.Node.newString(""); boolean boolean82 = com.google.javascript.jscomp.NodeUtil.isString(node81); boolean boolean83 = com.google.javascript.jscomp.NodeUtil.isNew(node81); java.lang.String str84 = googleCodingConvention69.extractClassNameIfRequire(node77, node81); varCheck49.visit(nodeTraversal54, node57, node77); try { foldConstants1.tryFoldRegularExpressionConstructor(nodeTraversal9, node42, node57); } catch (java.lang.NullPointerException e) { } }
Code: public void visit(NodeTraversal t, Node n, Node parent) { lower[0] |= NodeUtil.precedence(n.getType()) < precedence; }
tensor([[0.0510, 0.0413, 0.0253, 0.1660, 0.0962, 0.1103, 0.0962, 0.0647, 0.0686,
         0.0393, 0.0310, 0.1221, 0.0404, 0.0256, 0.0219],
        [0.0365, 0.0330, 0.0127, 0.2155, 0.1027, 0.1375, 0.1027, 0.0455, 0.0689,
         0.0374, 0.0346, 0.1068, 0.0265, 0.0192, 0.0207],
        [0.0406, 0.0291, 0.0176, 0.1969, 0.0949, 0.1258, 0.0949, 0.0542, 0.0793,
         0.0416, 0.0311, 0.1298, 0.0315, 0.0197, 0.0131],
        [0.0436, 0.0259, 0.0167, 0.1985, 0.1084, 0.0996, 0.1084, 0.0645, 0.0827,
         0.0360, 0.0330, 0.1121, 0.0318, 0.0235, 0.0153],
        [0.0344, 0.0354, 0.0173, 0.2010, 0.1031, 0.1380, 0.1031, 0.0466, 0.0792,
         0.0352, 0.0310, 0.1161, 0.0236, 0.0212, 0.0149],
        [0.0421, 0.0283, 0.0245, 0.2107, 0.0923, 0.1295, 0.0923, 0.0396, 0.0896,
         0.0395, 0.0340, 0.1128, 0.0246, 0.0211, 0.0190],
        [0.0344, 0.0354, 0.0173, 0.2010, 0.1031, 0.1380, 0.1031, 0.0466, 0.0792,
         0.0352, 0.0310, 0.1161, 0.0236, 0.0212, 0.0149],
        [0.0436, 0.0332, 0.0152, 0.2133, 0.1049, 0.1160, 0.1049, 0.0394, 0.0812,
         0.0348, 0.0270, 0.1151, 0.0344, 0.0200, 0.0170],
        [0.0524, 0.0456, 0.0279, 0.1389, 0.0866, 0.1109, 0.0866, 0.0465, 0.0832,
         0.0557, 0.0424, 0.1168, 0.0414, 0.0355, 0.0295],
        [0.0384, 0.0271, 0.0208, 0.1831, 0.0964, 0.1038, 0.0964, 0.0513, 0.0909,
         0.0556, 0.0404, 0.1247, 0.0286, 0.0230, 0.0196],
        [0.0390, 0.0283, 0.0195, 0.1730, 0.1136, 0.1085, 0.1136, 0.0527, 0.0667,
         0.0491, 0.0315, 0.1323, 0.0273, 0.0250, 0.0199],
        [0.0441, 0.0345, 0.0182, 0.2034, 0.0921, 0.1034, 0.0921, 0.0512, 0.0811,
         0.0491, 0.0362, 0.1226, 0.0322, 0.0207, 0.0191],
        [0.0351, 0.0313, 0.0242, 0.1597, 0.1167, 0.1120, 0.1167, 0.0663, 0.0662,
         0.0432, 0.0399, 0.1074, 0.0333, 0.0275, 0.0206],
        [0.0389, 0.0345, 0.0285, 0.1510, 0.1041, 0.1113, 0.1041, 0.0582, 0.0716,
         0.0397, 0.0349, 0.1443, 0.0336, 0.0264, 0.0188],
        [0.0311, 0.0289, 0.0167, 0.1745, 0.1232, 0.0852, 0.1232, 0.0559, 0.0808,
         0.0478, 0.0322, 0.1325, 0.0266, 0.0242, 0.0173]])