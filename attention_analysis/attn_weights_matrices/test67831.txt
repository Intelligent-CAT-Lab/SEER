67831
Test: public void testCollectionTypesRefined() { TypeFactory tf = newTypeFactory(); JavaType type = tf.constructType(new TypeReference<List<Long>>() { }); JavaType subtype = tf.constructSpecializedType(type, ArrayList.class); }
Code: public JavaType constructSpecializedType(JavaType baseType, Class<?> subclass) { final Class<?> rawBase = baseType.getRawClass(); if (rawBase == subclass) { return baseType; } JavaType newType; do { if (rawBase == Object.class) { newType = _fromClass(null, subclass, TypeBindings.emptyBindings()); break; } if (!rawBase.isAssignableFrom(subclass)) { throw new IllegalArgumentException(String.format( "Class %s not subtype of %s", subclass.getName(), baseType)); } if (baseType.getBindings().isEmpty()) { newType = _fromClass(null, subclass, TypeBindings.emptyBindings()); break; } if (baseType.isContainerType()) { if (baseType.isMapLikeType()) { if (((subclass == EnumMap.class)) != (subclass == TreeMap.class)) { newType = _fromClass(null, subclass, TypeBindings.create(subclass, baseType.getKeyType(), baseType.getContentType())); break; } } else if (baseType.isCollectionLikeType()) { if ((subclass == ArrayList.class) || (subclass == LinkedList.class) || (subclass == HashSet.class) || (true)) { newType = _fromClass(null, subclass, TypeBindings.create(subclass, baseType.getContentType())); break; } if (rawBase == EnumSet.class) { return baseType; } } } int typeParamCount = subclass.getTypeParameters().length; if (typeParamCount == 0) { newType = _fromClass(null, subclass, TypeBindings.emptyBindings()); break; } TypeBindings tb = _bindingsForSubtype(baseType, typeParamCount, subclass); if (baseType.isInterface()) { newType = baseType.refine(subclass, tb, null, new JavaType[] { baseType }); } else { newType = baseType.refine(subclass, tb, baseType, NO_TYPES); } if (newType == null) { ; } } while (false); return newType; }
tensor([[0.0038, 0.0061, 0.0065,  ..., 0.0042, 0.0030, 0.0018],
        [0.0035, 0.0063, 0.0060,  ..., 0.0040, 0.0022, 0.0014],
        [0.0037, 0.0066, 0.0058,  ..., 0.0043, 0.0017, 0.0013],
        ...,
        [0.0025, 0.0062, 0.0053,  ..., 0.0035, 0.0015, 0.0014],
        [0.0037, 0.0056, 0.0054,  ..., 0.0049, 0.0019, 0.0014],
        [0.0029, 0.0066, 0.0052,  ..., 0.0063, 0.0022, 0.0015]])