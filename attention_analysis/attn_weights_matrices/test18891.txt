18891
Test: public void test187() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test187"); com.google.javascript.jscomp.CheckLevel checkLevel4 = com.google.javascript.jscomp.CheckLevel.WARNING; com.google.javascript.jscomp.DiagnosticType diagnosticType7 = com.google.javascript.jscomp.DiagnosticType.warning("", ""); java.lang.String[] strArray14 = new java.lang.String[] { "hi!", "hi!", "", "hi!", "", ": hi!" }; com.google.javascript.jscomp.JSError jSError15 = com.google.javascript.jscomp.JSError.make(": hi!", (int) (short) 1, (int) (short) 1, checkLevel4, diagnosticType7, strArray14); com.google.javascript.rhino.Node node16 = jSError15.node; boolean boolean18 = jSError15.equals((java.lang.Object) ": hi!"); com.google.javascript.jscomp.CheckLevel checkLevel19 = com.google.javascript.jscomp.CheckLevel.WARNING; com.google.javascript.jscomp.LightweightMessageFormatter lightweightMessageFormatter20 = com.google.javascript.jscomp.LightweightMessageFormatter.withoutSource(); com.google.javascript.jscomp.CheckLevel checkLevel24 = com.google.javascript.jscomp.CheckLevel.WARNING; com.google.javascript.jscomp.DiagnosticType diagnosticType27 = com.google.javascript.jscomp.DiagnosticType.warning("", ""); java.lang.String[] strArray34 = new java.lang.String[] { "hi!", "hi!", "", "hi!", "", ": hi!" }; com.google.javascript.jscomp.JSError jSError35 = com.google.javascript.jscomp.JSError.make(": hi!", (int) (short) 1, (int) (short) 1, checkLevel24, diagnosticType27, strArray34); com.google.javascript.rhino.Node node36 = jSError35.node; boolean boolean38 = jSError35.equals((java.lang.Object) ": hi!"); com.google.javascript.jscomp.CheckLevel checkLevel39 = jSError35.level; java.lang.String str40 = lightweightMessageFormatter20.getLevelName(checkLevel39); com.google.javascript.jscomp.CheckLevel checkLevel44 = com.google.javascript.jscomp.CheckLevel.WARNING; com.google.javascript.jscomp.DiagnosticType diagnosticType47 = com.google.javascript.jscomp.DiagnosticType.warning("", ""); java.lang.String[] strArray54 = new java.lang.String[] { "hi!", "hi!", "", "hi!", "", ": hi!" }; com.google.javascript.jscomp.JSError jSError55 = com.google.javascript.jscomp.JSError.make(": hi!", (int) (short) 1, (int) (short) 1, checkLevel44, diagnosticType47, strArray54); com.google.javascript.rhino.Node node56 = jSError55.node; java.lang.String str57 = lightweightMessageFormatter20.formatError(jSError55); java.lang.String str58 = jSError15.format(checkLevel19, (com.google.javascript.jscomp.MessageFormatter) lightweightMessageFormatter20); com.google.javascript.jscomp.CheckLevel checkLevel59 = jSError15.level; com.google.javascript.jscomp.CheckLevel checkLevel60 = jSError15.level; com.google.javascript.jscomp.DiagnosticType diagnosticType62 = com.google.javascript.jscomp.DiagnosticType.make("", checkLevel60, ""); com.google.javascript.jscomp.CheckLevel checkLevel63 = diagnosticType62.level; com.google.javascript.jscomp.CheckLevel checkLevel64 = diagnosticType62.level; }
Code: private String format(JSError error, boolean warning) { SourceExcerptProvider source = getSource(); String sourceExcerpt = source == null ? null : excerpt.get( source, error.sourceName, error.lineNumber, excerptFormatter); StringBuilder b = new StringBuilder(); if (error.sourceName != null) { b.append(error.sourceName); if (error.lineNumber > 0) { b.append(':'); b.append(error.lineNumber); } b.append(": "); } ; b.append(" - "); b.append(error.description); b.append('\n'); if (sourceExcerpt != null) { b.append(sourceExcerpt); b.append('\n'); int charno = error.getCharno(); if (0 <= charno && charno <= sourceExcerpt.length()) { for (int i = -1; i != charno; i++) { char c = sourceExcerpt.charAt(i); if (Character.isWhitespace(c)) { b.append(c); } else { b.append(' '); } } b.append("^\n"); } } return b.toString(); }
tensor([[0.0101, 0.0077, 0.0053,  ..., 0.0068, 0.0170, 0.0032],
        [0.0080, 0.0071, 0.0050,  ..., 0.0066, 0.0127, 0.0027],
        [0.0087, 0.0070, 0.0034,  ..., 0.0057, 0.0145, 0.0021],
        ...,
        [0.0090, 0.0075, 0.0036,  ..., 0.0058, 0.0158, 0.0026],
        [0.0094, 0.0082, 0.0034,  ..., 0.0066, 0.0140, 0.0019],
        [0.0075, 0.0085, 0.0043,  ..., 0.0104, 0.0169, 0.0027]])