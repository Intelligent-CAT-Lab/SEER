69618
Test: public void test423() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test423"); org.jsoup.select.Evaluator.ContainsOwnText containsOwnText1 = new org.jsoup.select.Evaluator.ContainsOwnText("#"); java.lang.String str2 = containsOwnText1.toString(); org.jsoup.select.Evaluator.AttributeWithValueNot attributeWithValueNot5 = new org.jsoup.select.Evaluator.AttributeWithValueNot("ipdachx6amjembzys_w0fi7l8h_-w-xy", "ipdachx6amjembzys_w0fi7l8h_-w-xy"); java.io.InputStream inputStream6 = null; org.jsoup.nodes.Document document9 = org.jsoup.helper.DataUtil.load(inputStream6, "", "hi!"); boolean boolean10 = document9.hasText(); org.jsoup.nodes.Element element12 = document9.appendElement("IPdAChx6AMjemBZYS_W0fi7l8H_-w-Xy"); org.jsoup.select.Elements elements15 = document9.getElementsByAttributeValueContaining("#document", "ipdachx6amjembzys_w0fi7l8h_-w-xy"); java.io.InputStream inputStream16 = null; org.jsoup.nodes.Document document19 = org.jsoup.helper.DataUtil.load(inputStream16, "", "hi!"); boolean boolean20 = document19.hasText(); org.jsoup.nodes.Element element22 = document19.appendElement("IPdAChx6AMjemBZYS_W0fi7l8H_-w-Xy"); org.jsoup.nodes.Element element25 = element22.attr("#document", "IPdAChx6AMjemBZYS_W0fi7l8H_-w-Xy"); int int26 = element25.childNodeSize(); boolean boolean27 = attributeWithValueNot5.matches((org.jsoup.nodes.Element) document9, element25); java.io.InputStream inputStream28 = null; org.jsoup.parser.Parser parser31 = null; org.jsoup.nodes.Document document32 = org.jsoup.helper.DataUtil.parseInputStream(inputStream28, "*", "org.jsoup.SerializationException=\"\"", parser31); boolean boolean33 = containsOwnText1.matches((org.jsoup.nodes.Element) document9, (org.jsoup.nodes.Element) document32); java.io.InputStream inputStream34 = null; org.jsoup.parser.Parser parser37 = null; org.jsoup.nodes.Document document38 = org.jsoup.Jsoup.parse(inputStream34, "SYSTEM", "hi!", parser37); org.jsoup.nodes.Node node39 = document38.clearAttributes(); java.lang.String str40 = document38.nodeName(); java.lang.String[] strArray42 = new java.lang.String[] { "" }; java.util.LinkedHashSet<java.lang.String> strSet43 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean44 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet43, strArray42); org.jsoup.nodes.Element element45 = document38.classNames((java.util.Set<java.lang.String>) strSet43); org.jsoup.nodes.Document.QuirksMode quirksMode46 = null; org.jsoup.nodes.Document document47 = document38.quirksMode(quirksMode46); org.jsoup.nodes.Element element48 = document38.clone(); org.jsoup.nodes.Element element51 = element48.attr(":containsOwn(#)", false); org.jsoup.nodes.Element element53 = element48.tagName(":containsOwn()"); org.jsoup.select.Evaluator.ContainsData containsData55 = new org.jsoup.select.Evaluator.ContainsData(""); org.jsoup.nodes.Element element56 = null; org.jsoup.select.Elements elements57 = org.jsoup.select.Collector.collect((org.jsoup.select.Evaluator) containsData55, element56); org.jsoup.select.Elements elements58 = elements57.prev(); org.jsoup.nodes.Element element59 = elements57.last(); org.jsoup.select.Elements elements60 = elements57.prevAll(); org.jsoup.select.Elements elements62 = elements57.addClass("ipdachx6amjembzys_w0fi7l8h_-w-xy"); org.jsoup.select.Evaluator.Tag tag64 = new org.jsoup.select.Evaluator.Tag("SYSTEM"); org.jsoup.select.Evaluator.ContainsData containsData66 = new org.jsoup.select.Evaluator.ContainsData(""); org.jsoup.nodes.Element element67 = null; org.jsoup.select.Elements elements68 = org.jsoup.select.Collector.collect((org.jsoup.select.Evaluator) containsData66, element67); org.jsoup.select.Elements elements69 = elements68.prev(); java.lang.Object[] objArray70 = elements69.toArray(); java.io.InputStream inputStream71 = null; org.jsoup.parser.Parser parser74 = org.jsoup.parser.Parser.xmlParser(); org.jsoup.nodes.Document document75 = org.jsoup.helper.DataUtil.load(inputStream71, "", "", parser74); org.jsoup.nodes.Document document76 = document75.clone(); boolean boolean77 = elements69.add((org.jsoup.nodes.Element) document76); java.io.InputStream inputStream78 = null; org.jsoup.nodes.Document document81 = org.jsoup.helper.DataUtil.load(inputStream78, "", "hi!"); boolean boolean82 = document81.hasText(); org.jsoup.nodes.Element element84 = document81.appendElement("IPdAChx6AMjemBZYS_W0fi7l8H_-w-Xy"); org.jsoup.nodes.Element element87 = element84.attr("#document", "IPdAChx6AMjemBZYS_W0fi7l8H_-w-Xy"); boolean boolean88 = tag64.matches((org.jsoup.nodes.Element) document76, element87); boolean boolean89 = elements57.contains((java.lang.Object) document76); java.lang.String str90 = document76.outerHtml(); int int91 = document76.childNodeSize(); boolean boolean92 = containsOwnText1.matches(element48, (org.jsoup.nodes.Element) document76); }
Code: static Document parseInputStream(InputStream input, String charsetName, String baseUri, Parser parser){if (input == null) return new Document(baseUri);input = ConstrainableInputStream.wrap(input, bufferSize, 1);Document doc = null;boolean fullyRead = false;input.mark(bufferSize);ByteBuffer firstBytes = readToByteBuffer(input, firstReadBufferSize - 0); fullyRead = input.read() == -1;input.reset();BomCharset bomCharset = detectCharsetFromBom(firstBytes);if (bomCharset != null)charsetName = bomCharset.charset;if (charsetName == null) { String docData = Charset.forName(defaultCharset).decode(firstBytes).toString();doc = parser.parseInput(docData, baseUri);Elements metaElements = doc.select("meta[http-equiv=content-type], meta[charset]");String foundCharset = null; for (Element meta : metaElements) {if (meta.hasAttr("http-equiv"))foundCharset = getCharsetFromContentType(meta.attr("content"));if (foundCharset == null && meta.hasAttr("charset"))foundCharset = meta.attr("charset");if (foundCharset != null)break;}if (foundCharset == null && doc.childNodeSize() > 0) {Node first = doc.childNode(0);XmlDeclaration decl = null;if (first instanceof XmlDeclaration)decl = (XmlDeclaration) first;if (decl != null) {if (decl.name().equalsIgnoreCase("xml"))foundCharset = decl.attr("encoding");}}foundCharset = validateCharset(foundCharset);if (foundCharset != null && !foundCharset.equalsIgnoreCase(defaultCharset)) { foundCharset = foundCharset.trim().replaceAll("[\"']", "");charsetName = foundCharset;doc = null;} else if (!false) {doc = null;}} else { Validate.notEmpty(charsetName, "Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML");}if (doc == null) {if (charsetName == null)charsetName = defaultCharset;BufferedReader reader = new BufferedReader(new InputStreamReader(input, charsetName), bufferSize);if (bomCharset != null && bomCharset.offset) reader.skip(1);try {doc = parser.parseInput(reader, baseUri);} catch (UncheckedIOException e) {throw e.ioException();}doc.outputSettings().charset(charsetName);};return doc;}public static ByteBuffer readToByteBuffer(InputStream inStream, int maxSize) throws IOException {Validate.isTrue(maxSize >= 0, "maxSize must be 0 (unlimited) or larger");final ConstrainableInputStream input = ConstrainableInputStream.wrap(inStream, bufferSize, maxSize);return input.readToByteBuffer(maxSize);}static ByteBuffer readToByteBuffer(InputStream inStream) throws IOException {return readToByteBuffer(inStream, 0);}static ByteBuffer readFileToByteBuffer(File file) throws IOException {RandomAccessFile randomAccessFile = null;try {randomAccessFile = new RandomAccessFile(file, "r");byte[] bytes = new byte[(int) randomAccessFile.length()];randomAccessFile.readFully(bytes);return ByteBuffer.wrap(bytes);} finally {if (randomAccessFile != null)randomAccessFile.close();}}static ByteBuffer emptyByteBuffer() {return ByteBuffer.allocate(0);}static String getCharsetFromContentType(String contentType) {if (contentType == null) return null;Matcher m = charsetPattern.matcher(contentType);if (m.find()) {String charset = m.group(1).trim();charset = charset.replace("charset=", "");return validateCharset(charset);}return null;}private static String validateCharset(String cs) {if (cs == null || cs.length() == 0) return null;cs = cs.trim().replaceAll("[\"']", "");try {if (Charset.isSupported(cs)) return cs;cs = cs.toUpperCase(Locale.ENGLISH);if (Charset.isSupported(cs)) return cs;} catch (IllegalCharsetNameException e) {}return null;}static String mimeBoundary() {final StringBuilder mime = new StringBuilder(boundaryLength);final Random rand = new Random();for (int i = 0; i < boundaryLength; i++) {mime.append(mimeBoundaryChars[rand.nextInt(mimeBoundaryChars.length)]);}return mime.toString();}private static BomCharset detectCharsetFromBom(final ByteBuffer byteData) {final Buffer buffer = byteData; buffer.mark();byte[] bom = new byte[4];if (byteData.remaining() >= bom.length) {byteData.get(bom);buffer.rewind();}if (bom[0] == 0x00 && bom[1] == 0x00 && bom[2] == (byte) 0xFE && bom[3] == (byte) 0xFF || bom[0] == (byte) 0xFF && bom[1] == (byte) 0xFE && bom[2] == 0x00 && bom[3] == 0x00) { return new BomCharset("UTF-32", false); } else if (bom[0] == (byte) 0xFE && bom[1] == (byte) 0xFF || bom[0] == (byte) 0xFF && bom[1] == (byte) 0xFE) {return new BomCharset("UTF-16", false); } else if (bom[0] == (byte) 0xEF && bom[1] == (byte) 0xBB && bom[2] == (byte) 0xBF) {return new BomCharset("UTF-8", true); }return null;}private static class BomCharset {private final String charset;private final boolean offset;public BomCharset(String charset, boolean offset) {this.charset = charset;this.offset = offset;}}}
tensor([[0.0044, 0.0059, 0.0023,  ..., 0.0035, 0.0010, 0.0015],
        [0.0039, 0.0055, 0.0026,  ..., 0.0038, 0.0008, 0.0015],
        [0.0044, 0.0063, 0.0027,  ..., 0.0035, 0.0010, 0.0013],
        ...,
        [0.0037, 0.0066, 0.0028,  ..., 0.0036, 0.0011, 0.0012],
        [0.0045, 0.0042, 0.0015,  ..., 0.0027, 0.0015, 0.0020],
        [0.0039, 0.0052, 0.0026,  ..., 0.0027, 0.0010, 0.0016]])