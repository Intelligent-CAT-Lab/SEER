101477
Test: public void testUnsupportedMethods() { DateTimeField fieldOne = UnsupportedDateTimeField.getInstance( dateTimeFieldTypeOne, UnsupportedDurationField .getInstance(weeks)); try { fieldOne.add(localTime, 0, new int[] { 0, 100 }, 100); } catch (UnsupportedOperationException e) { } try { fieldOne.addWrapField(100000L, 250); } catch (UnsupportedOperationException e) { } try { fieldOne.addWrapField(localTime, 0, new int[] { 0, 100 }, 100); } catch (UnsupportedOperationException e) { } try { fieldOne.addWrapPartial(localTime, 0, new int[] { 0, 100 }, 100); } catch (UnsupportedOperationException e) { } try { fieldOne.get(1000L); } catch (UnsupportedOperationException e) { } try { fieldOne.getAsShortText(0, Locale.getDefault()); } catch (UnsupportedOperationException e) { } try { fieldOne.getAsShortText(100000L); } catch (UnsupportedOperationException e) { } try { fieldOne.getAsShortText(100000L, Locale.getDefault()); } catch (UnsupportedOperationException e) { } try { fieldOne.getAsShortText(localTime, 0, Locale.getDefault()); } catch (UnsupportedOperationException e) { } try { fieldOne.getAsShortText(localTime, Locale.getDefault()); } catch (UnsupportedOperationException e) { } try { fieldOne.getAsText(0, Locale.getDefault()); } catch (UnsupportedOperationException e) { } try { fieldOne.getAsText(1000L); } catch (UnsupportedOperationException e) { } try { fieldOne.getAsText(1000L, Locale.getDefault()); } catch (UnsupportedOperationException e) { } try { fieldOne.getAsText(localTime, 0, Locale.getDefault()); } catch (UnsupportedOperationException e) { } try { fieldOne.getAsText(localTime, Locale.getDefault()); } catch (UnsupportedOperationException e) { } try { fieldOne.getLeapAmount(System.currentTimeMillis()); } catch (UnsupportedOperationException e) { } try { fieldOne.getMaximumShortTextLength(Locale.getDefault()); } catch (UnsupportedOperationException e) { } try { fieldOne.getMaximumTextLength(Locale.getDefault()); } catch (UnsupportedOperationException e) { } try { fieldOne.getMaximumValue(); } catch (UnsupportedOperationException e) { } try { fieldOne.getMaximumValue(1000000L); } catch (UnsupportedOperationException e) { } try { fieldOne.getMaximumValue(localTime); } catch (UnsupportedOperationException e) { } try { fieldOne.getMaximumValue(localTime, new int[] { 0 }); } catch (UnsupportedOperationException e) { } try { fieldOne.getMinimumValue(); } catch (UnsupportedOperationException e) { } try { fieldOne.getMinimumValue(10000000L); } catch (UnsupportedOperationException e) { } try { fieldOne.getMinimumValue(localTime); } catch (UnsupportedOperationException e) { } try { fieldOne.getMinimumValue(localTime, new int[] { 0 }); } catch (UnsupportedOperationException e) { } try { fieldOne.isLeap(System.currentTimeMillis()); } catch (UnsupportedOperationException e) { } try { fieldOne.remainder(1000000L); } catch (UnsupportedOperationException e) { } try { fieldOne.roundCeiling(1000000L); } catch (UnsupportedOperationException e) { } try { fieldOne.roundFloor(1000000L); } catch (UnsupportedOperationException e) { } try { fieldOne.roundHalfCeiling(1000000L); } catch (UnsupportedOperationException e) { } try { fieldOne.roundHalfEven(1000000L); } catch (UnsupportedOperationException e) { } try { fieldOne.roundHalfFloor(1000000L); } catch (UnsupportedOperationException e) { } try { fieldOne.set(1000000L, 1000); } catch (UnsupportedOperationException e) { } try { fieldOne.set(1000000L, "Unsupported Operation"); } catch (UnsupportedOperationException e) { } try { fieldOne .set(1000000L, "Unsupported Operation", Locale.getDefault()); } catch (UnsupportedOperationException e) { } try { fieldOne.set(localTime, 0, new int[] { 0 }, 10000); } catch (UnsupportedOperationException e) { } try { fieldOne.set(localTime, 0, new int[] { 0 }, "Unsupported Operation", Locale.getDefault()); } catch (UnsupportedOperationException e) { } }
Code: public long roundFloor(long instant){if (false) {int offset = getOffsetToAdd(instant);instant = iField.roundFloor(instant + offset);return instant - offset;} else {long localInstant = iZone.convertUTCToLocal(instant);;return iZone.convertLocalToUTC(localInstant, false);}}
tensor([[0.0352, 0.0556, 0.0566, 0.0438, 0.0226, 0.0793, 0.0528, 0.0227, 0.0411,
         0.0227, 0.0255, 0.0287, 0.0428, 0.0370, 0.1036, 0.0355, 0.0457, 0.0794,
         0.0199, 0.0227, 0.0424, 0.0457, 0.0389],
        [0.0261, 0.0489, 0.0484, 0.0463, 0.0179, 0.0976, 0.0461, 0.0203, 0.0514,
         0.0203, 0.0204, 0.0324, 0.0533, 0.0342, 0.1191, 0.0267, 0.0457, 0.0846,
         0.0113, 0.0203, 0.0432, 0.0631, 0.0223],
        [0.0377, 0.0538, 0.0484, 0.0349, 0.0184, 0.0925, 0.0538, 0.0241, 0.0373,
         0.0241, 0.0220, 0.0282, 0.0498, 0.0344, 0.1301, 0.0270, 0.0570, 0.0564,
         0.0168, 0.0241, 0.0438, 0.0558, 0.0295],
        [0.0304, 0.0487, 0.0487, 0.0526, 0.0260, 0.0688, 0.0612, 0.0232, 0.0293,
         0.0232, 0.0249, 0.0309, 0.0532, 0.0294, 0.1129, 0.0288, 0.0572, 0.0653,
         0.0183, 0.0232, 0.0471, 0.0698, 0.0271],
        [0.0283, 0.0377, 0.0465, 0.0454, 0.0185, 0.0992, 0.0658, 0.0222, 0.0383,
         0.0222, 0.0230, 0.0322, 0.0524, 0.0284, 0.1227, 0.0231, 0.0473, 0.0652,
         0.0160, 0.0222, 0.0536, 0.0628, 0.0269],
        [0.0275, 0.0423, 0.0435, 0.0355, 0.0162, 0.1064, 0.0604, 0.0211, 0.0395,
         0.0211, 0.0233, 0.0299, 0.0389, 0.0294, 0.1424, 0.0259, 0.0528, 0.0652,
         0.0173, 0.0211, 0.0558, 0.0623, 0.0223],
        [0.0275, 0.0412, 0.0486, 0.0485, 0.0212, 0.0785, 0.0590, 0.0279, 0.0344,
         0.0279, 0.0253, 0.0292, 0.0472, 0.0363, 0.1186, 0.0213, 0.0453, 0.0672,
         0.0160, 0.0279, 0.0634, 0.0614, 0.0262],
        [0.0395, 0.0487, 0.0522, 0.0380, 0.0310, 0.0687, 0.0547, 0.0332, 0.0384,
         0.0332, 0.0329, 0.0353, 0.0435, 0.0290, 0.0848, 0.0367, 0.0477, 0.0534,
         0.0222, 0.0332, 0.0512, 0.0551, 0.0373],
        [0.0309, 0.0420, 0.0514, 0.0401, 0.0208, 0.1162, 0.0535, 0.0272, 0.0336,
         0.0272, 0.0279, 0.0261, 0.0415, 0.0308, 0.1095, 0.0300, 0.0446, 0.0699,
         0.0166, 0.0272, 0.0487, 0.0565, 0.0279],
        [0.0395, 0.0487, 0.0522, 0.0380, 0.0310, 0.0687, 0.0547, 0.0332, 0.0384,
         0.0332, 0.0329, 0.0353, 0.0435, 0.0290, 0.0848, 0.0367, 0.0477, 0.0534,
         0.0222, 0.0332, 0.0512, 0.0551, 0.0373],
        [0.0342, 0.0540, 0.0470, 0.0468, 0.0193, 0.0869, 0.0532, 0.0242, 0.0399,
         0.0242, 0.0250, 0.0246, 0.0439, 0.0329, 0.1284, 0.0253, 0.0518, 0.0722,
         0.0152, 0.0242, 0.0453, 0.0534, 0.0281],
        [0.0357, 0.0567, 0.0386, 0.0448, 0.0258, 0.0755, 0.0545, 0.0260, 0.0358,
         0.0260, 0.0334, 0.0312, 0.0445, 0.0279, 0.1274, 0.0250, 0.0467, 0.0546,
         0.0169, 0.0260, 0.0539, 0.0655, 0.0275],
        [0.0260, 0.0519, 0.0454, 0.0646, 0.0219, 0.0704, 0.0548, 0.0251, 0.0389,
         0.0251, 0.0249, 0.0323, 0.0468, 0.0334, 0.1049, 0.0316, 0.0485, 0.0632,
         0.0182, 0.0251, 0.0523, 0.0692, 0.0254],
        [0.0348, 0.0522, 0.0504, 0.0424, 0.0266, 0.0973, 0.0498, 0.0239, 0.0387,
         0.0239, 0.0218, 0.0294, 0.0397, 0.0347, 0.1121, 0.0262, 0.0558, 0.0710,
         0.0165, 0.0239, 0.0374, 0.0576, 0.0339],
        [0.0383, 0.0452, 0.0454, 0.0456, 0.0279, 0.0876, 0.0531, 0.0280, 0.0528,
         0.0280, 0.0267, 0.0293, 0.0499, 0.0304, 0.0875, 0.0266, 0.0350, 0.0829,
         0.0202, 0.0280, 0.0432, 0.0527, 0.0357],
        [0.0413, 0.0533, 0.0439, 0.0371, 0.0271, 0.0855, 0.0530, 0.0289, 0.0337,
         0.0289, 0.0247, 0.0282, 0.0554, 0.0396, 0.1277, 0.0274, 0.0415, 0.0548,
         0.0156, 0.0289, 0.0461, 0.0512, 0.0265],
        [0.0302, 0.0534, 0.0415, 0.0441, 0.0204, 0.0959, 0.0581, 0.0218, 0.0363,
         0.0218, 0.0256, 0.0287, 0.0439, 0.0294, 0.1212, 0.0270, 0.0540, 0.0678,
         0.0168, 0.0218, 0.0492, 0.0607, 0.0304],
        [0.0372, 0.0502, 0.0477, 0.0471, 0.0200, 0.0975, 0.0460, 0.0238, 0.0359,
         0.0238, 0.0245, 0.0277, 0.0487, 0.0308, 0.1046, 0.0324, 0.0557, 0.0664,
         0.0149, 0.0238, 0.0408, 0.0657, 0.0348],
        [0.0351, 0.0583, 0.0542, 0.0390, 0.0246, 0.0921, 0.0596, 0.0240, 0.0407,
         0.0240, 0.0289, 0.0301, 0.0525, 0.0325, 0.0890, 0.0307, 0.0487, 0.0642,
         0.0163, 0.0240, 0.0422, 0.0584, 0.0306],
        [0.0395, 0.0487, 0.0522, 0.0380, 0.0310, 0.0687, 0.0547, 0.0332, 0.0384,
         0.0332, 0.0329, 0.0353, 0.0435, 0.0290, 0.0848, 0.0367, 0.0477, 0.0534,
         0.0222, 0.0332, 0.0512, 0.0551, 0.0373],
        [0.0359, 0.0604, 0.0489, 0.0462, 0.0235, 0.0708, 0.0635, 0.0247, 0.0337,
         0.0247, 0.0242, 0.0260, 0.0519, 0.0320, 0.1225, 0.0238, 0.0409, 0.0584,
         0.0198, 0.0247, 0.0540, 0.0543, 0.0353],
        [0.0298, 0.0645, 0.0386, 0.0401, 0.0287, 0.0793, 0.0552, 0.0255, 0.0299,
         0.0255, 0.0176, 0.0298, 0.0495, 0.0293, 0.1268, 0.0240, 0.0647, 0.0646,
         0.0135, 0.0255, 0.0527, 0.0588, 0.0262],
        [0.0303, 0.0508, 0.0420, 0.0498, 0.0242, 0.0881, 0.0461, 0.0275, 0.0359,
         0.0275, 0.0288, 0.0386, 0.0605, 0.0283, 0.1036, 0.0247, 0.0471, 0.0647,
         0.0172, 0.0275, 0.0559, 0.0473, 0.0335]])