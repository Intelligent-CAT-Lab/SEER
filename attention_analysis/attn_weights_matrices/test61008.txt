61008
Test: public void test1329() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1329"); java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "" }; java.util.Map<java.lang.String, java.lang.Integer> strMap3 = null; org.apache.commons.csv.CSVRecord cSVRecord6 = new org.apache.commons.csv.CSVRecord(strArray2, strMap3, "", (long) '#'); boolean boolean8 = cSVRecord6.isSet(""); boolean boolean9 = cSVRecord6.isConsistent(); java.util.Spliterator<java.lang.String> strSpliterator10 = cSVRecord6.spliterator(); boolean boolean12 = cSVRecord6.isMapped(""); java.lang.String[] strArray13 = cSVRecord6.values(); java.util.Map<java.lang.String, java.lang.Integer> strMap14 = null; org.apache.commons.csv.CSVRecord cSVRecord17 = new org.apache.commons.csv.CSVRecord(strArray13, strMap14, "hi!", (long) (short) 10); java.lang.String[] strArray18 = cSVRecord17.values(); java.util.Map<java.lang.String, java.lang.Integer> strMap19 = null; org.apache.commons.csv.CSVRecord cSVRecord22 = new org.apache.commons.csv.CSVRecord(strArray18, strMap19, "", 0L); java.util.Map<java.lang.String, java.lang.Integer> strMap23 = null; org.apache.commons.csv.CSVRecord cSVRecord26 = new org.apache.commons.csv.CSVRecord(strArray18, strMap23, "[hi!, ]", (long) '#'); java.lang.String[] strArray27 = cSVRecord26.values(); java.util.Iterator<java.lang.String> strItor28 = cSVRecord26.iterator(); java.util.Iterator<java.lang.String> strItor29 = cSVRecord26.iterator(); boolean boolean30 = cSVRecord26.isConsistent(); try { java.lang.String str32 = cSVRecord26.get("[]"); } catch (java.lang.IllegalStateException e) { } }
Code: public String get(final String name) { if (mapping == null) { throw new IllegalStateException( "No header mapping was specified, the record values can't be accessed by name"); } final Integer index = mapping.get(name); return index != null ? values[index.intValue()] : null; }
tensor([[0.0198, 0.0256, 0.0052,  ..., 0.0180, 0.0419, 0.0083],
        [0.0203, 0.0239, 0.0060,  ..., 0.0148, 0.0413, 0.0071],
        [0.0173, 0.0330, 0.0043,  ..., 0.0121, 0.0467, 0.0076],
        ...,
        [0.0200, 0.0245, 0.0053,  ..., 0.0136, 0.0505, 0.0106],
        [0.0200, 0.0333, 0.0050,  ..., 0.0185, 0.0377, 0.0084],
        [0.0143, 0.0262, 0.0040,  ..., 0.0121, 0.0486, 0.0071]])