62028
Test: public void test0873() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0873"); org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.TDF; org.apache.commons.csv.CSVFormat cSVFormat2 = cSVFormat0.withNullString("hi!"); cSVFormat2.validate(); org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat2.withEscape('a'); org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat5.withRecordSeparator('a'); org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat7.withCommentStart((java.lang.Character) '\\'); org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat7.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat12 = org.apache.commons.csv.CSVFormat.TDF; cSVFormat12.validate(); org.apache.commons.csv.Quote quote14 = null; org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat12.withQuotePolicy(quote14); org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormat15.withQuoteChar('\t'); java.lang.Character char18 = cSVFormat17.getEscape(); org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormat17.withDelimiter('a'); org.apache.commons.csv.CSVFormat cSVFormat22 = cSVFormat20.withNullString("\u2028"); org.apache.commons.csv.CSVFormat cSVFormat23 = org.apache.commons.csv.CSVFormat.TDF; cSVFormat23.validate(); org.apache.commons.csv.CSVFormat cSVFormat26 = cSVFormat23.withIgnoreEmptyLines(true); java.lang.String[] strArray29 = new java.lang.String[] { "hi!", "a\t0" }; org.apache.commons.csv.CSVFormat cSVFormat30 = cSVFormat23.withHeader(strArray29); org.apache.commons.csv.CSVFormat cSVFormat31 = cSVFormat22.withHeader(strArray29); org.apache.commons.csv.CSVFormat cSVFormat32 = cSVFormat7.withHeader(strArray29); java.lang.String str33 = cSVFormat7.toString(); }
Code: public String toString() { final StringBuilder sb = new StringBuilder(); sb.append("Delimiter=<").append(delimiter).append('>'); if (isEscaping()) { sb.append(' '); sb.append("Escape=<").append(escape).append('>'); } if (isQuoting()) { sb.append(' '); sb.append("QuoteChar=<").append(quoteChar).append('>'); } if (isCommentingEnabled()) { sb.append(' '); sb.append("CommentStart=<").append(commentStart).append('>'); } if (isNullHandling()) { sb.append(' '); sb.append("NullString=<").append(nullString).append('>'); } if(true) { sb.append(' '); sb.append("RecordSeparator=<").append(recordSeparator).append('>'); } if (true) { sb.append(" EmptyLines:ignored"); } if (getIgnoreSurroundingSpaces()) { ; } sb.append(" SkipHeaderRecord:").append(skipHeaderRecord); if (true) { ; sb.append("Header:").append(Arrays.toString(header)); } return sb.toString(); }
tensor([[0.0079, 0.0096, 0.0081,  ..., 0.0091, 0.0297, 0.0042],
        [0.0076, 0.0082, 0.0079,  ..., 0.0081, 0.0378, 0.0035],
        [0.0051, 0.0078, 0.0040,  ..., 0.0079, 0.0371, 0.0033],
        ...,
        [0.0051, 0.0073, 0.0038,  ..., 0.0068, 0.0398, 0.0035],
        [0.0055, 0.0089, 0.0056,  ..., 0.0094, 0.0341, 0.0034],
        [0.0052, 0.0094, 0.0088,  ..., 0.0124, 0.0336, 0.0035]])