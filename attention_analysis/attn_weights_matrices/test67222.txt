67222
Test: public void test062() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test062"); com.fasterxml.jackson.databind.node.DoubleNode doubleNode1 = new com.fasterxml.jackson.databind.node.DoubleNode((double) 1); com.fasterxml.jackson.core.ObjectCodec objectCodec2 = null; com.fasterxml.jackson.core.JsonParser jsonParser3 = doubleNode1.traverse(objectCodec2); com.fasterxml.jackson.databind.util.TokenBuffer tokenBuffer4 = new com.fasterxml.jackson.databind.util.TokenBuffer(jsonParser3); tokenBuffer4.writeBoolean(false); com.fasterxml.jackson.core.ObjectCodec objectCodec7 = tokenBuffer4._objectCodec; tokenBuffer4.writeOmittedField(""); com.fasterxml.jackson.databind.node.DoubleNode doubleNode11 = new com.fasterxml.jackson.databind.node.DoubleNode((double) 1); com.fasterxml.jackson.databind.MappingJsonFactory mappingJsonFactory12 = new com.fasterxml.jackson.databind.MappingJsonFactory(); boolean boolean13 = doubleNode11.equals((java.lang.Object) mappingJsonFactory12); int int14 = doubleNode11.asInt(); java.math.BigDecimal bigDecimal15 = doubleNode11.decimalValue(); tokenBuffer4.writeNumber(bigDecimal15); com.fasterxml.jackson.databind.node.DoubleNode doubleNode18 = new com.fasterxml.jackson.databind.node.DoubleNode((double) 1); com.fasterxml.jackson.core.ObjectCodec objectCodec19 = null; com.fasterxml.jackson.core.JsonParser jsonParser20 = doubleNode18.traverse(objectCodec19); com.fasterxml.jackson.databind.util.TokenBuffer tokenBuffer21 = new com.fasterxml.jackson.databind.util.TokenBuffer(jsonParser20); tokenBuffer21.writeBoolean(false); byte[] byteArray28 = new byte[] { (byte) 100, (byte) 10, (byte) 10, (byte) 10 }; tokenBuffer21.writeBinary(byteArray28); com.fasterxml.jackson.databind.node.BinaryNode binaryNode30 = new com.fasterxml.jackson.databind.node.BinaryNode(byteArray28); boolean boolean32 = binaryNode30.equals((java.lang.Object) 13); com.fasterxml.jackson.core.JsonToken jsonToken33 = binaryNode30.asToken(); com.fasterxml.jackson.databind.node.TextNode textNode35 = new com.fasterxml.jackson.databind.node.TextNode("1.0"); com.fasterxml.jackson.databind.node.DoubleNode doubleNode37 = new com.fasterxml.jackson.databind.node.DoubleNode((double) 1); com.fasterxml.jackson.core.ObjectCodec objectCodec38 = null; com.fasterxml.jackson.core.JsonParser jsonParser39 = doubleNode37.traverse(objectCodec38); com.fasterxml.jackson.databind.util.TokenBuffer tokenBuffer40 = new com.fasterxml.jackson.databind.util.TokenBuffer(jsonParser39); tokenBuffer40._forceBigDecimal = false; int int43 = tokenBuffer40.getFeatureMask(); com.fasterxml.jackson.databind.SerializerProvider serializerProvider44 = null; textNode35.serialize((com.fasterxml.jackson.core.JsonGenerator) tokenBuffer40, serializerProvider44); tokenBuffer40.writeObject((java.lang.Object) (-1.0d)); com.fasterxml.jackson.core.JsonParser jsonParser48 = tokenBuffer40.asParser(); tokenBuffer4._append(jsonToken33, (java.lang.Object) tokenBuffer40); }
Code: public void writeBoolean(boolean state) throws IOException { _append(state ? JsonToken.VALUE_TRUE : JsonToken.VALUE_FALSE); }
tensor([[0.0620, 0.0520, 0.0797, 0.0770, 0.1361, 0.0358, 0.0975, 0.0914, 0.0966,
         0.0947, 0.0634, 0.0842, 0.0297],
        [0.0485, 0.0453, 0.0891, 0.0631, 0.1674, 0.0303, 0.0981, 0.1056, 0.0964,
         0.1156, 0.0460, 0.0652, 0.0293],
        [0.0460, 0.0358, 0.0651, 0.0983, 0.1745, 0.0316, 0.0880, 0.1063, 0.1034,
         0.0901, 0.0402, 0.1012, 0.0194],
        [0.0704, 0.0558, 0.0537, 0.0669, 0.1332, 0.0395, 0.0886, 0.0891, 0.1159,
         0.1030, 0.0555, 0.1033, 0.0253],
        [0.0403, 0.0404, 0.0607, 0.0688, 0.1866, 0.0275, 0.1068, 0.0997, 0.1067,
         0.1127, 0.0508, 0.0787, 0.0203],
        [0.0496, 0.0399, 0.0645, 0.0869, 0.1884, 0.0306, 0.0996, 0.0838, 0.1007,
         0.0961, 0.0443, 0.0955, 0.0203],
        [0.0611, 0.0535, 0.0826, 0.0773, 0.1073, 0.0415, 0.1012, 0.0989, 0.0775,
         0.1185, 0.0505, 0.0950, 0.0352],
        [0.0728, 0.0570, 0.0813, 0.0718, 0.1185, 0.0446, 0.0715, 0.0913, 0.1040,
         0.1305, 0.0524, 0.0817, 0.0226],
        [0.0464, 0.0339, 0.0856, 0.0678, 0.1307, 0.0321, 0.1294, 0.1113, 0.0939,
         0.1210, 0.0529, 0.0711, 0.0239],
        [0.0554, 0.0391, 0.0627, 0.0842, 0.1459, 0.0327, 0.1010, 0.0992, 0.0944,
         0.1165, 0.0486, 0.0883, 0.0319],
        [0.0577, 0.0463, 0.0577, 0.0723, 0.1269, 0.0413, 0.0985, 0.0883, 0.1160,
         0.1360, 0.0420, 0.0842, 0.0329],
        [0.0584, 0.0599, 0.0841, 0.0625, 0.1379, 0.0297, 0.1036, 0.0946, 0.0966,
         0.1250, 0.0414, 0.0786, 0.0277],
        [0.0424, 0.0405, 0.0526, 0.0756, 0.1779, 0.0363, 0.1205, 0.0795, 0.1013,
         0.1138, 0.0426, 0.0917, 0.0254]])