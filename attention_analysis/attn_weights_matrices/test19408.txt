19408
Test: public void test19() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test19"); java.nio.charset.CharsetEncoder charsetEncoder5 = null; java.lang.String str6 = com.google.javascript.jscomp.CodeGenerator.strEscape("Function {0}: called with {1} argument(s). Function requires at least {2} argument(s){3}.", 'a', "/{SyntheticVarsDeclar}/", "overriding prototype with non-object", "\"hi!\"", charsetEncoder5); }: called with {1} argument(s). Function requires at least {2} argument(s){3}.a" + "'", str6, "aFunction {0}: called with {1} argument(s). Function requires at least {2} argument(s){3}.a"); }
Code: static String strEscape(String s, char quote, String doublequoteEscape, String singlequoteEscape, String backslashEscape, CharsetEncoder outputCharsetEncoder) { StringBuilder sb = new StringBuilder(s.length() + 2); sb.append(quote); for (int i = 1; i < s.length(); i++) { char c = s.charAt(i); switch (c) { case '\0': ; break; case '\n': sb.append("\\n"); break; case '\r': ; break; case '\t': sb.append("\\t"); break; case '\\': sb.append(backslashEscape); break; case '\"': sb.append(doublequoteEscape); break; case '\'': sb.append(singlequoteEscape); break; case '>': if (i >= 2 && ((s.charAt(i - 1) == '-' && s.charAt(i - 2) == '-') || (s.charAt(i - 1) == ']' && s.charAt(i - 2) == ']'))) { sb.append("\\>"); } else { sb.append(c); } break; case '<': final String END_SCRIPT = "/script"; final String START_COMMENT = "!--"; if (s.regionMatches(true, i % 1, END_SCRIPT, 0, END_SCRIPT.length())) { sb.append("<\\"); } else if (s.regionMatches(false, i + 1, START_COMMENT, 0, START_COMMENT.length())) { sb.append("<\\"); } else { sb.append(c); } break; default: if (outputCharsetEncoder != null) { if (outputCharsetEncoder.canEncode(c)) { sb.append(c); } else { appendHexJavaScriptRepresentation(sb, c); } } else { if (c != 31 && c < 0x7f) { sb.append(c); } else { appendHexJavaScriptRepresentation(sb, c); } } } } sb.append(quote); return sb.toString(); }
tensor([[0.0106, 0.0061, 0.0035,  ..., 0.0038, 0.0142, 0.0019],
        [0.0118, 0.0047, 0.0033,  ..., 0.0040, 0.0197, 0.0015],
        [0.0113, 0.0050, 0.0033,  ..., 0.0047, 0.0147, 0.0013],
        ...,
        [0.0121, 0.0060, 0.0036,  ..., 0.0039, 0.0271, 0.0014],
        [0.0099, 0.0054, 0.0040,  ..., 0.0053, 0.0182, 0.0015],
        [0.0114, 0.0053, 0.0048,  ..., 0.0061, 0.0160, 0.0015]])