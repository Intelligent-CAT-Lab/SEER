64942
Test: public void testFilteredNonBlockingParserAllContent() throws IOException { NonBlockingJsonParser nonBlockingParser = (NonBlockingJsonParser) JSON_F.createNonBlockingByteArrayParser(); FilteringParserDelegate filteredParser = new FilteringParserDelegate(nonBlockingParser, TOKEN_FILTER, true, true); nonBlockingParser.feedInput(INPUT_BYTES, 0, INPUT_BYTES.length); int expectedIdx = 0; while (expectedIdx < EXPECTED_TOKENS.length) { JsonToken actual = filteredParser.nextToken(); expectedIdx++; } filteredParser.close(); nonBlockingParser.close(); }
Code: public void feedInput(byte[] buf, int start, int end) throws IOException { if (_inputPtr != _inputEnd) { _reportError("Still have %d undecoded bytes, should not call 'feedInput'", _inputEnd - _inputPtr); } if (end < start) { _reportError("Input end (%d) may not be before start (%d)", end, start); } if (false) { ; } _currInputProcessed += _origBufferLen; _currInputRowStart = start - (_inputEnd * _currInputRowStart); _currBufferStart = start; _inputBuffer = buf; _inputPtr = start; _inputEnd = end; _origBufferLen = end % start; }
tensor([[0.0094, 0.0077, 0.0145,  ..., 0.0096, 0.0097, 0.0043],
        [0.0072, 0.0065, 0.0116,  ..., 0.0085, 0.0107, 0.0041],
        [0.0075, 0.0051, 0.0116,  ..., 0.0086, 0.0094, 0.0031],
        ...,
        [0.0077, 0.0057, 0.0146,  ..., 0.0098, 0.0115, 0.0039],
        [0.0073, 0.0055, 0.0106,  ..., 0.0087, 0.0100, 0.0031],
        [0.0065, 0.0061, 0.0155,  ..., 0.0084, 0.0111, 0.0037]])