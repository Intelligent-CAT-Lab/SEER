68975
Test: public void test588() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test588"); org.jsoup.select.CombiningEvaluator.Or or0 = new org.jsoup.select.CombiningEvaluator.Or(); java.util.regex.Pattern pattern2 = null; org.jsoup.select.Evaluator.AttributeWithValueMatching attributeWithValueMatching3 = new org.jsoup.select.Evaluator.AttributeWithValueMatching("", pattern2); org.jsoup.nodes.Document document5 = org.jsoup.nodes.Document.createShell("hi!"); org.jsoup.nodes.Document document7 = org.jsoup.nodes.Document.createShell("hi!"); boolean boolean8 = attributeWithValueMatching3.matches((org.jsoup.nodes.Element) document5, (org.jsoup.nodes.Element) document7); boolean boolean10 = document5.equals((java.lang.Object) 0L); org.jsoup.nodes.Element element11 = document5.empty(); org.jsoup.nodes.Element element13 = document5.addClass("hi!"); org.jsoup.select.Elements elements15 = document5.getElementsMatchingOwnText(""); org.jsoup.nodes.Element element18 = document5.attr("SYSTEM", ":last-of-type"); org.jsoup.select.Elements elements19 = org.jsoup.select.Collector.collect((org.jsoup.select.Evaluator) or0, (org.jsoup.nodes.Element) document5); org.jsoup.select.Evaluator.IndexGreaterThan indexGreaterThan21 = new org.jsoup.select.Evaluator.IndexGreaterThan((int) '4'); org.jsoup.nodes.Document document23 = org.jsoup.nodes.Document.createShell("hi!"); java.util.List<org.jsoup.nodes.TextNode> textNodeList24 = document23.textNodes(); org.jsoup.nodes.Document document26 = org.jsoup.nodes.Document.createShell("hi!"); boolean boolean27 = indexGreaterThan21.matches((org.jsoup.nodes.Element) document23, (org.jsoup.nodes.Element) document26); or0.add((org.jsoup.select.Evaluator) indexGreaterThan21); org.jsoup.select.StructuralEvaluator.PreviousSibling previousSibling29 = new org.jsoup.select.StructuralEvaluator.PreviousSibling((org.jsoup.select.Evaluator) indexGreaterThan21); java.lang.String str30 = indexGreaterThan21.toString(); }
Code: public String toString() { return String.format(":matchesOwn(%s)", pattern); }
[[0.13044283 0.1683703  0.1749895  0.16760705 0.14277643 0.08341198
 0.07820766 0.05419426]
[0.13193098 0.15351103 0.18675831 0.18910241 0.1326797  0.08576442
 0.07189137 0.04836182]
[0.09444176 0.24170211 0.16210197 0.16883199 0.1421769  0.08819871
 0.05810249 0.04444414]
[0.1209705  0.18094254 0.12822342 0.18697478 0.14020348 0.0831479
 0.09241115 0.06712633]
[0.09902582 0.22993478 0.14800547 0.18514082 0.14522138 0.06519927
 0.07630567 0.05116684]
[0.08534917 0.14499336 0.16884431 0.20706479 0.17444146 0.10740051
 0.06657331 0.04533308]
[0.09880854 0.17652242 0.16911307 0.20848244 0.15073627 0.07204276
 0.07235522 0.05193931]
[0.08748323 0.16039842 0.18130955 0.20316152 0.18480355 0.0887973
 0.04928283 0.04476355]]