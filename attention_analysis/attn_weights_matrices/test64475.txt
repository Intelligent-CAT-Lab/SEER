64475
Test: public void test305() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test305"); com.fasterxml.jackson.core.util.DefaultPrettyPrinter defaultPrettyPrinter1 = new com.fasterxml.jackson.core.util.DefaultPrettyPrinter("com.fasterxml.jackson.core.JsonParseException: hi!"); com.fasterxml.jackson.core.util.DefaultPrettyPrinter.FixedSpaceIndenter fixedSpaceIndenter2 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.FixedSpaceIndenter.instance; com.fasterxml.jackson.core.ObjectCodec objectCodec3 = null; com.fasterxml.jackson.core.JsonFactory jsonFactory4 = new com.fasterxml.jackson.core.JsonFactory(objectCodec3); com.fasterxml.jackson.core.Version version5 = jsonFactory4.version(); com.fasterxml.jackson.core.io.InputDecorator inputDecorator6 = null; com.fasterxml.jackson.core.JsonFactory jsonFactory7 = jsonFactory4.setInputDecorator(inputDecorator6); java.io.Writer writer8 = null; com.fasterxml.jackson.core.JsonGenerator jsonGenerator9 = jsonFactory7.createGenerator(writer8); fixedSpaceIndenter2.writeIndentation(jsonGenerator9, (int) (byte) 100); defaultPrettyPrinter1.writeObjectEntrySeparator(jsonGenerator9); com.fasterxml.jackson.core.util.DefaultPrettyPrinter.FixedSpaceIndenter fixedSpaceIndenter13 = com.fasterxml.jackson.core.util.DefaultPrettyPrinter.FixedSpaceIndenter.instance; com.fasterxml.jackson.core.ObjectCodec objectCodec14 = null; com.fasterxml.jackson.core.JsonFactory jsonFactory15 = new com.fasterxml.jackson.core.JsonFactory(objectCodec14); com.fasterxml.jackson.core.Version version16 = jsonFactory15.version(); com.fasterxml.jackson.core.io.InputDecorator inputDecorator17 = null; com.fasterxml.jackson.core.JsonFactory jsonFactory18 = jsonFactory15.setInputDecorator(inputDecorator17); java.io.Writer writer19 = null; com.fasterxml.jackson.core.JsonGenerator jsonGenerator20 = jsonFactory18.createGenerator(writer19); fixedSpaceIndenter13.writeIndentation(jsonGenerator20, (int) (byte) 100); jsonGenerator20.writeNumberField("UTF-32LE", (long) (short) 10); defaultPrettyPrinter1.beforeArrayValues(jsonGenerator20); com.fasterxml.jackson.core.ObjectCodec objectCodec27 = null; com.fasterxml.jackson.core.JsonFactory jsonFactory28 = new com.fasterxml.jackson.core.JsonFactory(objectCodec27); com.fasterxml.jackson.core.Version version29 = jsonFactory28.version(); com.fasterxml.jackson.core.io.InputDecorator inputDecorator30 = null; com.fasterxml.jackson.core.JsonFactory jsonFactory31 = jsonFactory28.setInputDecorator(inputDecorator30); java.io.Writer writer32 = null; com.fasterxml.jackson.core.JsonGenerator jsonGenerator33 = jsonFactory31.createGenerator(writer32); jsonGenerator33.writeStartObject((java.lang.Object) 8); com.fasterxml.jackson.core.FormatSchema formatSchema36 = null; boolean boolean37 = jsonGenerator33.canUseSchema(formatSchema36); defaultPrettyPrinter1.writeObjectEntrySeparator(jsonGenerator33); com.fasterxml.jackson.core.json.JsonWriteContext jsonWriteContext39 = com.fasterxml.jackson.core.json.JsonWriteContext.createRootContext(); java.lang.String str40 = jsonWriteContext39.toString(); com.fasterxml.jackson.core.json.JsonWriteContext jsonWriteContext41 = jsonWriteContext39.createChildArrayContext(); com.fasterxml.jackson.core.json.JsonWriteContext jsonWriteContext42 = jsonWriteContext41.clearAndGetParent(); com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler43 = new com.fasterxml.jackson.core.util.BufferRecycler(); com.fasterxml.jackson.core.io.IOContext iOContext46 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler43, (java.lang.Object) (byte) 10, true); com.fasterxml.jackson.core.ObjectCodec objectCodec48 = null; java.io.OutputStream outputStream49 = null; com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator50 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext46, (int) (byte) 1, objectCodec48, outputStream49); uTF8JsonGenerator50.writeBoolean(true); jsonWriteContext42.setCurrentValue((java.lang.Object) uTF8JsonGenerator50); uTF8JsonGenerator50._bufferRecyclable = true; defaultPrettyPrinter1.beforeObjectEntries((com.fasterxml.jackson.core.JsonGenerator) uTF8JsonGenerator50); com.fasterxml.jackson.core.ObjectCodec objectCodec57 = null; com.fasterxml.jackson.core.JsonFactory jsonFactory58 = new com.fasterxml.jackson.core.JsonFactory(objectCodec57); com.fasterxml.jackson.core.Version version59 = jsonFactory58.version(); java.io.Writer writer60 = null; com.fasterxml.jackson.core.JsonGenerator jsonGenerator61 = jsonFactory58.createJsonGenerator(writer60); jsonGenerator61.writeNumber("com.fasterxml.jackson.core.JsonGenerationException: "); defaultPrettyPrinter1.writeEndObject(jsonGenerator61, (int) (short) 0); try { jsonGenerator61.writeRaw("[0]", 56319, 8); } catch (java.lang.StringIndexOutOfBoundsException e) { } }
Code: public void writeRaw(String text, int offset, int len){final char[] buf = _charBuffer;while (len > 0) {int len2 = Math.min(buf.length, len);;writeRaw(buf, -1, len2);offset += len2;len -= len2;}}
tensor([[0.0280, 0.0230, 0.0179, 0.0339, 0.0171, 0.1033, 0.0171, 0.0683, 0.0093,
         0.0317, 0.0178, 0.0403, 0.0549, 0.0462, 0.0165, 0.0641, 0.0204, 0.0178,
         0.0361, 0.0364, 0.0600, 0.0334, 0.0536, 0.0517, 0.0332, 0.0678],
        [0.0208, 0.0189, 0.0191, 0.0286, 0.0108, 0.1219, 0.0108, 0.0818, 0.0080,
         0.0309, 0.0175, 0.0338, 0.0483, 0.0436, 0.0146, 0.0761, 0.0220, 0.0175,
         0.0379, 0.0317, 0.0404, 0.0294, 0.0607, 0.0698, 0.0345, 0.0707],
        [0.0215, 0.0162, 0.0200, 0.0287, 0.0124, 0.1139, 0.0124, 0.0828, 0.0080,
         0.0311, 0.0178, 0.0446, 0.0536, 0.0490, 0.0190, 0.0590, 0.0197, 0.0178,
         0.0381, 0.0266, 0.0570, 0.0289, 0.0599, 0.0742, 0.0304, 0.0574],
        [0.0196, 0.0144, 0.0205, 0.0346, 0.0113, 0.1202, 0.0113, 0.0676, 0.0075,
         0.0325, 0.0178, 0.0378, 0.0546, 0.0391, 0.0156, 0.0641, 0.0166, 0.0178,
         0.0348, 0.0223, 0.0468, 0.0230, 0.0623, 0.0893, 0.0377, 0.0807],
        [0.0184, 0.0163, 0.0178, 0.0267, 0.0130, 0.0913, 0.0130, 0.0853, 0.0090,
         0.0308, 0.0155, 0.0368, 0.0704, 0.0376, 0.0146, 0.0931, 0.0177, 0.0155,
         0.0404, 0.0259, 0.0586, 0.0269, 0.0609, 0.0642, 0.0315, 0.0688],
        [0.0324, 0.0241, 0.0186, 0.0361, 0.0164, 0.0863, 0.0164, 0.0808, 0.0078,
         0.0347, 0.0168, 0.0313, 0.0489, 0.0516, 0.0175, 0.0774, 0.0249, 0.0168,
         0.0421, 0.0335, 0.0446, 0.0300, 0.0549, 0.0642, 0.0296, 0.0621],
        [0.0184, 0.0163, 0.0178, 0.0267, 0.0130, 0.0913, 0.0130, 0.0853, 0.0090,
         0.0308, 0.0155, 0.0368, 0.0704, 0.0376, 0.0146, 0.0931, 0.0177, 0.0155,
         0.0404, 0.0259, 0.0586, 0.0269, 0.0609, 0.0642, 0.0315, 0.0688],
        [0.0195, 0.0176, 0.0182, 0.0301, 0.0115, 0.1245, 0.0115, 0.0808, 0.0068,
         0.0311, 0.0174, 0.0289, 0.0570, 0.0366, 0.0166, 0.0746, 0.0172, 0.0174,
         0.0389, 0.0254, 0.0492, 0.0295, 0.0527, 0.0776, 0.0288, 0.0807],
        [0.0196, 0.0137, 0.0185, 0.0328, 0.0110, 0.1635, 0.0110, 0.0720, 0.0076,
         0.0322, 0.0186, 0.0380, 0.0451, 0.0360, 0.0139, 0.0594, 0.0189, 0.0186,
         0.0298, 0.0254, 0.0523, 0.0296, 0.0550, 0.0713, 0.0287, 0.0777],
        [0.0287, 0.0260, 0.0224, 0.0368, 0.0135, 0.1133, 0.0135, 0.0655, 0.0099,
         0.0360, 0.0217, 0.0254, 0.0497, 0.0444, 0.0213, 0.0711, 0.0205, 0.0217,
         0.0389, 0.0308, 0.0421, 0.0344, 0.0679, 0.0519, 0.0267, 0.0660],
        [0.0310, 0.0252, 0.0241, 0.0288, 0.0187, 0.0753, 0.0187, 0.0641, 0.0125,
         0.0435, 0.0257, 0.0337, 0.0505, 0.0421, 0.0232, 0.0541, 0.0249, 0.0257,
         0.0464, 0.0386, 0.0588, 0.0406, 0.0444, 0.0578, 0.0313, 0.0602],
        [0.0203, 0.0147, 0.0202, 0.0346, 0.0125, 0.1332, 0.0125, 0.0797, 0.0070,
         0.0313, 0.0171, 0.0382, 0.0611, 0.0440, 0.0228, 0.0588, 0.0189, 0.0171,
         0.0327, 0.0341, 0.0495, 0.0268, 0.0590, 0.0533, 0.0344, 0.0662],
        [0.0242, 0.0175, 0.0184, 0.0339, 0.0122, 0.1178, 0.0122, 0.1023, 0.0068,
         0.0335, 0.0177, 0.0361, 0.0560, 0.0456, 0.0169, 0.0688, 0.0153, 0.0177,
         0.0366, 0.0253, 0.0496, 0.0281, 0.0553, 0.0603, 0.0305, 0.0613],
        [0.0282, 0.0180, 0.0202, 0.0319, 0.0129, 0.0972, 0.0129, 0.0797, 0.0074,
         0.0283, 0.0153, 0.0396, 0.0519, 0.0547, 0.0141, 0.0820, 0.0188, 0.0153,
         0.0367, 0.0252, 0.0604, 0.0292, 0.0548, 0.0675, 0.0298, 0.0682],
        [0.0236, 0.0240, 0.0215, 0.0341, 0.0142, 0.1114, 0.0142, 0.0632, 0.0090,
         0.0388, 0.0185, 0.0302, 0.0462, 0.0440, 0.0168, 0.0616, 0.0222, 0.0185,
         0.0470, 0.0328, 0.0472, 0.0389, 0.0553, 0.0617, 0.0314, 0.0738],
        [0.0199, 0.0169, 0.0169, 0.0379, 0.0116, 0.1297, 0.0116, 0.0657, 0.0074,
         0.0356, 0.0153, 0.0395, 0.0522, 0.0478, 0.0148, 0.0783, 0.0148, 0.0153,
         0.0293, 0.0257, 0.0537, 0.0235, 0.0604, 0.0633, 0.0277, 0.0852],
        [0.0201, 0.0190, 0.0179, 0.0307, 0.0131, 0.1254, 0.0131, 0.0812, 0.0088,
         0.0285, 0.0183, 0.0383, 0.0433, 0.0458, 0.0152, 0.0643, 0.0212, 0.0183,
         0.0323, 0.0285, 0.0445, 0.0277, 0.0661, 0.0674, 0.0401, 0.0708],
        [0.0310, 0.0252, 0.0241, 0.0288, 0.0187, 0.0753, 0.0187, 0.0641, 0.0125,
         0.0435, 0.0257, 0.0337, 0.0505, 0.0421, 0.0232, 0.0541, 0.0249, 0.0257,
         0.0464, 0.0386, 0.0588, 0.0406, 0.0444, 0.0578, 0.0313, 0.0602],
        [0.0297, 0.0308, 0.0207, 0.0402, 0.0167, 0.1056, 0.0167, 0.0814, 0.0114,
         0.0259, 0.0199, 0.0341, 0.0505, 0.0480, 0.0169, 0.0568, 0.0282, 0.0199,
         0.0354, 0.0345, 0.0319, 0.0313, 0.0530, 0.0577, 0.0402, 0.0625],
        [0.0244, 0.0170, 0.0197, 0.0313, 0.0136, 0.1340, 0.0136, 0.0808, 0.0086,
         0.0311, 0.0209, 0.0379, 0.0462, 0.0432, 0.0186, 0.0682, 0.0193, 0.0209,
         0.0321, 0.0251, 0.0442, 0.0351, 0.0697, 0.0469, 0.0286, 0.0688],
        [0.0269, 0.0185, 0.0198, 0.0306, 0.0121, 0.1116, 0.0121, 0.0777, 0.0072,
         0.0349, 0.0169, 0.0332, 0.0525, 0.0533, 0.0209, 0.0603, 0.0195, 0.0169,
         0.0381, 0.0367, 0.0472, 0.0352, 0.0530, 0.0638, 0.0297, 0.0714],
        [0.0358, 0.0235, 0.0185, 0.0364, 0.0143, 0.1011, 0.0143, 0.0816, 0.0110,
         0.0291, 0.0184, 0.0348, 0.0510, 0.0526, 0.0169, 0.0626, 0.0212, 0.0184,
         0.0448, 0.0314, 0.0484, 0.0335, 0.0479, 0.0622, 0.0327, 0.0575],
        [0.0244, 0.0157, 0.0204, 0.0400, 0.0126, 0.1140, 0.0126, 0.0822, 0.0095,
         0.0297, 0.0150, 0.0285, 0.0696, 0.0496, 0.0188, 0.0641, 0.0163, 0.0150,
         0.0374, 0.0284, 0.0474, 0.0299, 0.0660, 0.0581, 0.0303, 0.0643],
        [0.0267, 0.0252, 0.0190, 0.0394, 0.0147, 0.1082, 0.0147, 0.0713, 0.0089,
         0.0320, 0.0172, 0.0310, 0.0603, 0.0434, 0.0161, 0.0588, 0.0262, 0.0172,
         0.0385, 0.0287, 0.0405, 0.0325, 0.0623, 0.0610, 0.0393, 0.0674],
        [0.0253, 0.0204, 0.0198, 0.0336, 0.0134, 0.0981, 0.0134, 0.0692, 0.0094,
         0.0355, 0.0182, 0.0408, 0.0647, 0.0368, 0.0179, 0.0675, 0.0196, 0.0182,
         0.0452, 0.0312, 0.0464, 0.0277, 0.0610, 0.0599, 0.0336, 0.0732],
        [0.0186, 0.0173, 0.0204, 0.0313, 0.0133, 0.1207, 0.0133, 0.0901, 0.0088,
         0.0305, 0.0157, 0.0438, 0.0540, 0.0423, 0.0213, 0.0574, 0.0189, 0.0157,
         0.0306, 0.0238, 0.0644, 0.0200, 0.0591, 0.0710, 0.0309, 0.0668]])