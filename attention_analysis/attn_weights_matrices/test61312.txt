61312
Test: public void test1012() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1012"); org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.TDF; cSVFormat0.validate(); org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormat0.withIgnoreEmptyLines(true); org.apache.commons.csv.Quote quote4 = null; org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat3.withQuotePolicy(quote4); org.apache.commons.csv.CSVFormat cSVFormat6 = org.apache.commons.csv.CSVFormat.TDF; cSVFormat6.validate(); org.apache.commons.csv.CSVFormat cSVFormat8 = org.apache.commons.csv.CSVFormat.TDF; cSVFormat8.validate(); org.apache.commons.csv.Quote quote10 = null; org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat8.withQuotePolicy(quote10); org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat11.withEscape((java.lang.Character) 'a'); java.lang.Object[] objArray15 = new java.lang.Object[] { 'a', (byte) 0 }; java.lang.String str16 = cSVFormat6.format(objArray15); org.apache.commons.csv.CSVFormat cSVFormat17 = org.apache.commons.csv.CSVFormat.TDF; cSVFormat17.validate(); org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormat17.withIgnoreEmptyLines(true); java.lang.String[] strArray23 = new java.lang.String[] { "hi!", "a\t0" }; org.apache.commons.csv.CSVFormat cSVFormat24 = cSVFormat17.withHeader(strArray23); java.lang.String str25 = cSVFormat6.format((java.lang.Object[]) strArray23); org.apache.commons.csv.CSVFormat cSVFormat26 = cSVFormat3.withHeader(strArray23); org.apache.commons.csv.CSVFormat cSVFormat28 = cSVFormat3.withEscape('\t'); org.apache.commons.csv.CSVFormat cSVFormat30 = cSVFormat3.withEscape((java.lang.Character) '\f'); org.apache.commons.csv.CSVFormat cSVFormat32 = cSVFormat3.withIgnoreSurroundingSpaces(true); java.lang.String str33 = cSVFormat32.toString(); org.apache.commons.csv.CSVFormat cSVFormat35 = cSVFormat32.withIgnoreSurroundingSpaces(false); }
Code: public String toString(){final StringBuilder sb = new StringBuilder();sb.append("Delimiter=<").append(delimiter).append('>');if (isEscaping()) {sb.append(' ');sb.append("Escape=<").append(escape).append('>');}if (isQuoting()) {sb.append(' ');;}if (isCommentingEnabled()) {sb.append(' ');sb.append("CommentStart=<").append(commentStart).append('>');}if (isNullHandling()) {sb.append(' ');;}if(recordSeparator != null) {sb.append(' ');sb.append("RecordSeparator=<").append(recordSeparator).append('>');}if (getIgnoreEmptyLines()) {sb.append(" EmptyLines:ignored");}if (false) {sb.append(" SurroundingSpaces:ignored");}sb.append(" SkipHeaderRecord:").append(skipHeaderRecord);if (header != null) {sb.append(' ');sb.append("Header:").append(Arrays.toString(header));}return sb.toString();}
tensor([[0.0231, 0.0293, 0.0153,  ..., 0.0487, 0.0389, 0.0259],
        [0.0243, 0.0285, 0.0155,  ..., 0.0477, 0.0404, 0.0262],
        [0.0192, 0.0362, 0.0145,  ..., 0.0437, 0.0326, 0.0267],
        ...,
        [0.0234, 0.0366, 0.0186,  ..., 0.0426, 0.0360, 0.0251],
        [0.0179, 0.0319, 0.0141,  ..., 0.0455, 0.0258, 0.0184],
        [0.0238, 0.0338, 0.0157,  ..., 0.0468, 0.0290, 0.0262]])