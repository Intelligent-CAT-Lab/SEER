101542
Test: public void test293() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test293"); org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone4 = new org.joda.time.tz.FixedDateTimeZone("", "", 0, (int) (byte) 0); int int6 = fixedDateTimeZone4.getStandardOffset((long) (-5)); int int8 = fixedDateTimeZone4.getOffsetFromLocal((long) 7); org.joda.time.chrono.GregorianChronology gregorianChronology10 = org.joda.time.chrono.GregorianChronology.getInstanceUTC(); org.joda.time.DateTimeField dateTimeField11 = gregorianChronology10.centuryOfEra(); org.joda.time.DurationField durationField12 = gregorianChronology10.millis(); org.joda.time.DateTimeField dateTimeField13 = gregorianChronology10.clockhourOfDay(); org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(0L, (org.joda.time.Chronology) gregorianChronology10); org.joda.time.DateTimeField dateTimeField15 = gregorianChronology10.weekyear(); org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.minuteOfHour(); org.joda.time.DurationFieldType durationFieldType17 = org.joda.time.DurationFieldType.MONTHS_TYPE; org.joda.time.field.PreciseDurationField preciseDurationField19 = new org.joda.time.field.PreciseDurationField(durationFieldType17, (long) (-10)); long long22 = preciseDurationField19.subtract((long) 10, (long) 10); org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField23 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType16, (org.joda.time.DurationField) preciseDurationField19); org.joda.time.IllegalFieldValueException illegalFieldValueException27 = new org.joda.time.IllegalFieldValueException(dateTimeFieldType16, (java.lang.Number) (byte) 14, (java.lang.Number) (byte) 11, (java.lang.Number) 1L); org.joda.time.DateTimeFieldType dateTimeFieldType28 = illegalFieldValueException27.getDateTimeFieldType(); org.joda.time.field.OffsetDateTimeField offsetDateTimeField30 = new org.joda.time.field.OffsetDateTimeField(dateTimeField15, dateTimeFieldType28, (int) (short) 10); java.lang.String str31 = offsetDateTimeField30.getName(); org.joda.time.DateTimeFieldType dateTimeFieldType32 = offsetDateTimeField30.getType(); org.joda.time.chrono.GregorianChronology gregorianChronology34 = org.joda.time.chrono.GregorianChronology.getInstanceUTC(); org.joda.time.DateTimeField dateTimeField35 = gregorianChronology34.centuryOfEra(); org.joda.time.DurationField durationField36 = gregorianChronology34.millis(); org.joda.time.DateTimeField dateTimeField37 = gregorianChronology34.clockhourOfDay(); org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime(0L, (org.joda.time.Chronology) gregorianChronology34); org.joda.time.DateTimeField dateTimeField39 = gregorianChronology34.weekyear(); org.joda.time.DateTimeFieldType dateTimeFieldType40 = org.joda.time.DateTimeFieldType.minuteOfHour(); org.joda.time.DurationFieldType durationFieldType41 = org.joda.time.DurationFieldType.MONTHS_TYPE; org.joda.time.field.PreciseDurationField preciseDurationField43 = new org.joda.time.field.PreciseDurationField(durationFieldType41, (long) (-10)); long long46 = preciseDurationField43.subtract((long) 10, (long) 10); org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField47 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType40, (org.joda.time.DurationField) preciseDurationField43); org.joda.time.IllegalFieldValueException illegalFieldValueException51 = new org.joda.time.IllegalFieldValueException(dateTimeFieldType40, (java.lang.Number) (byte) 14, (java.lang.Number) (byte) 11, (java.lang.Number) 1L); org.joda.time.DateTimeFieldType dateTimeFieldType52 = illegalFieldValueException51.getDateTimeFieldType(); org.joda.time.field.OffsetDateTimeField offsetDateTimeField54 = new org.joda.time.field.OffsetDateTimeField(dateTimeField39, dateTimeFieldType52, (int) (short) 10); long long56 = offsetDateTimeField54.roundHalfEven(1625879802741L); org.joda.time.DateTimeZone dateTimeZone57 = null; org.joda.time.DateTimeZone dateTimeZone58 = org.joda.time.DateTimeUtils.getZone(dateTimeZone57); java.util.Locale locale60 = null; java.lang.String str61 = dateTimeZone58.getName((long) (byte) 14, locale60); java.lang.Object obj62 = dateTimeZone58.writeReplace(); org.joda.time.DateTime dateTime63 = org.joda.time.DateTime.now(dateTimeZone58); int int64 = dateTime63.getWeekyear(); int int65 = dateTime63.getYear(); org.joda.time.DateTime.Property property66 = dateTime63.era(); org.joda.time.DateTime.Property property67 = dateTime63.yearOfCentury(); org.joda.time.DateTime dateTime69 = dateTime63.minusYears(0); org.joda.time.TimeOfDay timeOfDay70 = dateTime63.toTimeOfDay(); int[] intArray77 = new int[] { (-1), '4', (short) 1, 2, (byte) 7, 1980 }; int int78 = offsetDateTimeField54.getMaximumValue((org.joda.time.ReadablePartial) timeOfDay70, intArray77); java.util.Locale locale79 = null; java.lang.String str80 = offsetDateTimeField30.getAsText((org.joda.time.ReadablePartial) timeOfDay70, locale79); boolean boolean81 = fixedDateTimeZone4.equals((java.lang.Object) timeOfDay70); java.lang.String str83 = fixedDateTimeZone4.getNameKey(0L); java.lang.String str85 = fixedDateTimeZone4.getNameKey(0L); long long87 = fixedDateTimeZone4.nextTransition((long) (byte) 11); java.util.Locale locale89 = null; java.lang.String str90 = fixedDateTimeZone4.getShortName(1625879832663L, locale89); }
Code: public int getOffsetFromLocal(long instantLocal) { final int offsetLocal = getOffset(instantLocal); final long instantAdjusted = instantLocal - offsetLocal; final int offsetAdjusted = getOffset(instantAdjusted); if (offsetLocal != offsetAdjusted) { if ((offsetLocal + offsetAdjusted) < 1) { long nextLocal = nextTransition(instantAdjusted); long nextAdjusted = nextTransition(instantLocal - offsetAdjusted); if (nextLocal != nextAdjusted) { return offsetLocal; } } } else if (offsetLocal == 0) { long prev = previousTransition(instantAdjusted); if (prev < instantAdjusted) { int offsetPrev = getOffset(prev); int diff = offsetPrev - offsetLocal; if (instantAdjusted * prev < diff) { return offsetPrev; } } } return offsetAdjusted; }
tensor([[0.0079, 0.0046, 0.0162,  ..., 0.0089, 0.0051, 0.0038],
        [0.0053, 0.0037, 0.0139,  ..., 0.0086, 0.0049, 0.0027],
        [0.0084, 0.0034, 0.0181,  ..., 0.0092, 0.0047, 0.0029],
        ...,
        [0.0053, 0.0029, 0.0173,  ..., 0.0075, 0.0040, 0.0032],
        [0.0072, 0.0033, 0.0151,  ..., 0.0082, 0.0048, 0.0037],
        [0.0057, 0.0043, 0.0130,  ..., 0.0128, 0.0045, 0.0033]])