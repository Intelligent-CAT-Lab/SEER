101585
Test: public void test40() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test40"); org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.secondOfMinute(); org.joda.time.DurationFieldType durationFieldType1 = dateTimeFieldType0.getRangeDurationType(); org.joda.time.format.DateTimeFormatterBuilder.FixedNumber fixedNumber4 = new org.joda.time.format.DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, 65955, true); int int5 = fixedNumber4.estimateParsedLength(); int int6 = fixedNumber4.estimateParsedLength(); java.lang.StringBuffer stringBuffer7 = null; org.joda.time.DateTimeZone dateTimeZone8 = null; org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime(dateTimeZone8); org.joda.time.DateTime dateTime10 = dateTime9.toDateTime(); org.joda.time.DateTime dateTime12 = dateTime9.plusHours(837); int int13 = dateTime9.getWeekyear(); org.joda.time.DateTime dateTime15 = dateTime9.withHourOfDay((int) (byte) 0); boolean boolean16 = dateTime9.isEqualNow(); long long17 = dateTime9.getMillis(); org.joda.time.TimeOfDay timeOfDay18 = dateTime9.toTimeOfDay(); org.joda.time.chrono.GregorianChronology gregorianChronology19 = org.joda.time.chrono.GregorianChronology.getInstance(); org.joda.time.DateTimeField dateTimeField20 = gregorianChronology19.minuteOfDay(); org.joda.time.field.OffsetDateTimeField offsetDateTimeField22 = new org.joda.time.field.OffsetDateTimeField(dateTimeField20, (int) ' '); long long24 = offsetDateTimeField22.remainder(100L); java.util.Locale locale25 = null; int int26 = offsetDateTimeField22.getMaximumTextLength(locale25); org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.millisOfSecond(); org.joda.time.chrono.ISOChronology iSOChronology28 = org.joda.time.chrono.ISOChronology.getInstanceUTC(); org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((org.joda.time.Chronology) iSOChronology28); org.joda.time.DateTimeZone dateTimeZone30 = iSOChronology28.getZone(); boolean boolean31 = dateTimeFieldType27.isSupported((org.joda.time.Chronology) iSOChronology28); org.joda.time.field.OffsetDateTimeField offsetDateTimeField35 = new org.joda.time.field.OffsetDateTimeField((org.joda.time.DateTimeField) offsetDateTimeField22, dateTimeFieldType27, 18, 99, (int) (short) 100); org.joda.time.DateTimeZone dateTimeZone36 = null; org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime(dateTimeZone36); org.joda.time.DateTime.Property property38 = dateTime37.secondOfMinute(); org.joda.time.ReadablePeriod readablePeriod39 = null; org.joda.time.DateTime dateTime40 = dateTime37.plus(readablePeriod39); org.joda.time.DateTime.Property property41 = dateTime40.centuryOfEra(); org.joda.time.format.DateTimeParser[] dateTimeParserArray42 = new org.joda.time.format.DateTimeParser[] {}; org.joda.time.format.DateTimeFormatterBuilder.MatchingParser matchingParser43 = new org.joda.time.format.DateTimeFormatterBuilder.MatchingParser(dateTimeParserArray42); org.joda.time.chrono.ISOChronology iSOChronology45 = org.joda.time.chrono.ISOChronology.getInstanceUTC(); org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime((org.joda.time.Chronology) iSOChronology45); org.joda.time.DateTimeZone dateTimeZone47 = null; org.joda.time.Chronology chronology48 = iSOChronology45.withZone(dateTimeZone47); org.joda.time.DateTimeField dateTimeField49 = iSOChronology45.weekyear(); java.util.Locale locale50 = null; org.joda.time.format.DateTimeParserBucket dateTimeParserBucket51 = new org.joda.time.format.DateTimeParserBucket((long) 100, (org.joda.time.Chronology) iSOChronology45, locale50); int int54 = matchingParser43.parseInto(dateTimeParserBucket51, "713", 1439); org.joda.time.format.DateTimeParserBucket.SavedState savedState55 = dateTimeParserBucket51.new SavedState(); org.joda.time.chrono.ISOChronology iSOChronology57 = org.joda.time.chrono.ISOChronology.getInstanceUTC(); org.joda.time.DateTime dateTime58 = new org.joda.time.DateTime((org.joda.time.Chronology) iSOChronology57); org.joda.time.DateTimeZone dateTimeZone59 = null; org.joda.time.Chronology chronology60 = iSOChronology57.withZone(dateTimeZone59); org.joda.time.DateTimeField dateTimeField61 = iSOChronology57.weekyear(); java.util.Locale locale62 = null; org.joda.time.format.DateTimeParserBucket dateTimeParserBucket63 = new org.joda.time.format.DateTimeParserBucket((long) 100, (org.joda.time.Chronology) iSOChronology57, locale62); java.lang.Integer int64 = dateTimeParserBucket63.getPivotYear(); boolean boolean65 = savedState55.restoreState(dateTimeParserBucket63); org.joda.time.Chronology chronology66 = dateTimeParserBucket63.getChronology(); org.joda.time.chrono.ISOChronology iSOChronology67 = org.joda.time.chrono.ISOChronology.getInstanceUTC(); org.joda.time.DateTimeField dateTimeField68 = iSOChronology67.millisOfSecond(); org.joda.time.DurationField durationField69 = iSOChronology67.hours(); boolean boolean70 = dateTimeParserBucket63.restoreState((java.lang.Object) iSOChronology67); java.util.Locale locale71 = dateTimeParserBucket63.getLocale(); int int72 = property41.getMaximumShortTextLength(locale71); int int73 = offsetDateTimeField22.getMaximumTextLength(locale71); try { fixedNumber4.printTo(stringBuffer7, (org.joda.time.ReadablePartial) timeOfDay18, locale71); } catch (java.lang.NullPointerException e) { } }
Code: public int parseInto(DateTimeParserBucket bucket, String text, int position) { if (position >= text.length()) { return ~position; } char a = text.charAt(position); char b = iValue; if (a != b) { a = Character.toUpperCase(a); b = Character.toUpperCase(b); if (a != b) { a = Character.toLowerCase(a); b = Character.toLowerCase(b); if (a != b) { return ~position; } } } return position + 1; }
tensor([[0.0127, 0.0077, 0.0198,  ..., 0.0104, 0.0071, 0.0058],
        [0.0075, 0.0052, 0.0189,  ..., 0.0088, 0.0040, 0.0038],
        [0.0093, 0.0052, 0.0210,  ..., 0.0116, 0.0043, 0.0047],
        ...,
        [0.0117, 0.0063, 0.0255,  ..., 0.0099, 0.0053, 0.0057],
        [0.0101, 0.0063, 0.0204,  ..., 0.0115, 0.0051, 0.0049],
        [0.0088, 0.0066, 0.0225,  ..., 0.0096, 0.0053, 0.0049]])