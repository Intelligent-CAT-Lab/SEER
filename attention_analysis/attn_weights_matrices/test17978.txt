17978
Test: public void test9() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test9"); com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.IR.name("[singleton]"); node1.setVarArgs(false); com.google.javascript.jscomp.Compiler compiler4 = new com.google.javascript.jscomp.Compiler(); com.google.javascript.rhino.Node node6 = compiler4.parseTestCode("NUMBER 2.0"); boolean boolean7 = compiler4.isTypeCheckingEnabled(); boolean boolean8 = com.google.javascript.jscomp.NodeUtil.mayHaveSideEffects(node1, (com.google.javascript.jscomp.AbstractCompiler) compiler4); com.google.javascript.jscomp.FlowSensitiveInlineVariables flowSensitiveInlineVariables9 = new com.google.javascript.jscomp.FlowSensitiveInlineVariables((com.google.javascript.jscomp.AbstractCompiler) compiler4); com.google.javascript.jscomp.PassFactory passFactory11 = com.google.javascript.jscomp.DefaultPassConfig.createEmptyPass(""); com.google.javascript.jscomp.Compiler compiler12 = new com.google.javascript.jscomp.Compiler(); com.google.javascript.jscomp.CompilerPass compilerPass13 = passFactory11.create((com.google.javascript.jscomp.AbstractCompiler) compiler12); com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(15); compiler12.externAndJsRoot = node15; com.google.javascript.jscomp.PassFactory passFactory18 = com.google.javascript.jscomp.DefaultPassConfig.createEmptyPass(""); com.google.javascript.jscomp.Compiler compiler19 = new com.google.javascript.jscomp.Compiler(); com.google.javascript.jscomp.CompilerPass compilerPass20 = passFactory18.create((com.google.javascript.jscomp.AbstractCompiler) compiler19); com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node(15); compiler19.externAndJsRoot = node22; com.google.javascript.jscomp.CheckRegExp checkRegExp24 = new com.google.javascript.jscomp.CheckRegExp((com.google.javascript.jscomp.AbstractCompiler) compiler19); com.google.javascript.jscomp.NodeTraversal nodeTraversal25 = new com.google.javascript.jscomp.NodeTraversal((com.google.javascript.jscomp.AbstractCompiler) compiler12, (com.google.javascript.jscomp.NodeTraversal.Callback) checkRegExp24); boolean boolean26 = nodeTraversal25.inGlobalScope(); com.google.javascript.rhino.InputId inputId27 = nodeTraversal25.getInputId(); flowSensitiveInlineVariables9.exitScope(nodeTraversal25); com.google.javascript.jscomp.PassFactory passFactory30 = com.google.javascript.jscomp.DefaultPassConfig.createEmptyPass(""); com.google.javascript.jscomp.Compiler compiler31 = new com.google.javascript.jscomp.Compiler(); com.google.javascript.jscomp.CompilerPass compilerPass32 = passFactory30.create((com.google.javascript.jscomp.AbstractCompiler) compiler31); com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node(15); compiler31.externAndJsRoot = node34; compiler31.addToDebugLog("overriding prototype with non-object"); com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.IR.number((double) 2); com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.IR.pos(node39); compiler31.jsRoot = node40; com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.IR.number((double) 2); java.lang.String str44 = node43.toString(); boolean boolean45 = node43.hasOneChild(); com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.IR.getelem(node40, node43); com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newString(113, "[singleton]"); boolean boolean50 = com.google.javascript.jscomp.ControlFlowAnalysis.mayThrowException(node49); boolean boolean51 = node49.isContinue(); boolean boolean52 = com.google.javascript.jscomp.NodeUtil.isFunctionExpression(node49); boolean boolean53 = node49.isWhile(); boolean boolean54 = node49.isVar(); com.google.javascript.jscomp.NodeUtil.MayBeStringResultPredicate mayBeStringResultPredicate55 = new com.google.javascript.jscomp.NodeUtil.MayBeStringResultPredicate(); com.google.javascript.rhino.ErrorReporter errorReporter56 = null; com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry58 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter56, true); com.google.javascript.rhino.jstype.JSType[] jSTypeArray59 = new com.google.javascript.rhino.jstype.JSType[] {}; com.google.javascript.rhino.Node node60 = jSTypeRegistry58.createOptionalParameters(jSTypeArray59); int int61 = node60.getChildCount(); boolean boolean62 = mayBeStringResultPredicate55.apply(node60); boolean boolean64 = com.google.javascript.jscomp.ControlFlowAnalysis.isBreakTarget(node60, "goog.exportSymbol"); com.google.javascript.rhino.Node node65 = node49.useSourceInfoIfMissingFromForTree(node60); boolean boolean66 = node60.isParamList(); try { flowSensitiveInlineVariables9.process(node43, node60); } catch (java.lang.RuntimeException e) { } }
Code: public void process(Node externs, Node root) { (new NodeTraversal(compiler, this)).traverse(root); }
[[0.09050334 0.07137664 0.08151402 0.03409175 0.15621677 0.18360993
 0.10601339 0.07299447 0.05530654 0.11302043 0.03535271]
[0.08335482 0.06400271 0.0813769  0.02616454 0.18249938 0.18799151
 0.10512929 0.06308965 0.05425552 0.11849041 0.03364531]
[0.07813796 0.06796871 0.0897824  0.0344379  0.16495147 0.20616092
 0.09827522 0.06431842 0.04386738 0.12802418 0.02407546]
[0.0830987  0.08126551 0.10452489 0.03673199 0.16058949 0.1536293
 0.11124124 0.07417452 0.06163198 0.09307935 0.04003306]
[0.07806635 0.06675949 0.09107886 0.03191971 0.19004297 0.16181834
 0.12103041 0.06826631 0.05575632 0.10909414 0.02616704]
[0.08564977 0.05799856 0.08714715 0.04249627 0.17816263 0.16450456
 0.12754408 0.05659594 0.06252189 0.09405029 0.04332886]
[0.09176673 0.07777318 0.09459779 0.05108467 0.14311299 0.1272664
 0.12119619 0.07981673 0.05482244 0.1116264  0.04693644]
[0.07415713 0.06044929 0.10521992 0.03130919 0.15509427 0.1666395
 0.11850596 0.07327433 0.05191839 0.13252339 0.03090859]
[0.07754864 0.07638092 0.08271537 0.03558466 0.18720591 0.16148958
 0.12329862 0.06086578 0.04819945 0.11798565 0.02872541]
[0.08038436 0.06267338 0.08766121 0.03643412 0.15816471 0.19113082
 0.13092759 0.05815876 0.05766774 0.09913055 0.03766683]
[0.06610868 0.05675796 0.10059367 0.03480065 0.21395573 0.13255168
 0.12387626 0.06224488 0.05895688 0.12127809 0.02887559]]