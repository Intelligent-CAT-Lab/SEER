61039
Test: public void test0823() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0823"); org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.TDF; org.apache.commons.csv.CSVFormat cSVFormat2 = cSVFormat0.withNullString("hi!"); cSVFormat2.validate(); org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat2.withNullString("\r\n"); org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat5.withCommentStart((java.lang.Character) '4'); java.lang.String[] strArray12 = new java.lang.String[] { "Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false Header:[hi!, a\t0]", "Delimiter=<\t> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SurroundingSpaces:ignored SkipHeaderRecord:true", "hi!\t\"a\t0\"", "a\t0" }; org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat7.withHeader(strArray12); org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat7.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat16 = org.apache.commons.csv.CSVFormat.TDF; org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat16.withNullString("hi!"); cSVFormat18.validate(); org.apache.commons.csv.CSVFormat cSVFormat21 = cSVFormat18.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat23 = cSVFormat18.withCommentStart('\037'); java.lang.String str24 = cSVFormat18.toString(); org.apache.commons.csv.CSVFormat cSVFormat26 = cSVFormat18.withIgnoreEmptyLines(true); org.apache.commons.csv.CSVFormat cSVFormat28 = cSVFormat26.withSkipHeaderRecord(false); org.apache.commons.csv.CSVFormat cSVFormat30 = cSVFormat28.withIgnoreSurroundingSpaces(true); boolean boolean31 = cSVFormat28.getIgnoreSurroundingSpaces(); boolean boolean32 = cSVFormat7.equals((java.lang.Object) boolean31); }
Code: public String toString() { final StringBuilder sb = new StringBuilder(); sb.append("Delimiter=<").append(delimiter).append('>'); if (isEscaping()) { sb.append(' '); sb.append("Escape=<").append(escape).append('>'); } if (isQuoting()) { sb.append(' '); sb.append("QuoteChar=<").append(quoteChar).append('>'); } if (isCommentingEnabled()) { sb.append(' '); sb.append("CommentStart=<").append(commentStart).append('>'); } if (isNullHandling()) { sb.append(' '); sb.append("NullString=<").append(nullString).append('>'); } if(recordSeparator != null) { sb.append(' '); sb.append("RecordSeparator=<").append(recordSeparator).append('>'); } if (getIgnoreEmptyLines()) { sb.append(" EmptyLines:ignored"); } if (getIgnoreSurroundingSpaces()) { sb.append(" SurroundingSpaces:ignored"); } sb.append(" SkipHeaderRecord:").append(skipHeaderRecord); if (header != null) { sb.append(' '); sb.append("Header:").append(Arrays.toString(header)); } return sb.toString(); }
tensor([[0.0075, 0.0092, 0.0076,  ..., 0.0088, 0.0285, 0.0040],
        [0.0072, 0.0078, 0.0075,  ..., 0.0077, 0.0361, 0.0034],
        [0.0049, 0.0074, 0.0037,  ..., 0.0077, 0.0355, 0.0032],
        ...,
        [0.0049, 0.0070, 0.0036,  ..., 0.0065, 0.0380, 0.0034],
        [0.0052, 0.0086, 0.0053,  ..., 0.0090, 0.0329, 0.0033],
        [0.0050, 0.0091, 0.0084,  ..., 0.0120, 0.0327, 0.0034]])