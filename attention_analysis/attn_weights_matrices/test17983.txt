17983
Test: public void test6() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test6"); com.google.javascript.jscomp.AbstractCompiler abstractCompiler0 = null; com.google.javascript.jscomp.StrictModeCheck strictModeCheck1 = new com.google.javascript.jscomp.StrictModeCheck(abstractCompiler0); com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.IR.name("[singleton]"); node3.setVarArgs(false); com.google.javascript.jscomp.Compiler compiler6 = new com.google.javascript.jscomp.Compiler(); com.google.javascript.rhino.Node node8 = compiler6.parseTestCode("NUMBER 2.0"); boolean boolean9 = compiler6.isTypeCheckingEnabled(); boolean boolean10 = com.google.javascript.jscomp.NodeUtil.mayHaveSideEffects(node3, (com.google.javascript.jscomp.AbstractCompiler) compiler6); com.google.javascript.jscomp.FlowSensitiveInlineVariables flowSensitiveInlineVariables11 = new com.google.javascript.jscomp.FlowSensitiveInlineVariables((com.google.javascript.jscomp.AbstractCompiler) compiler6); com.google.javascript.jscomp.PassFactory passFactory13 = com.google.javascript.jscomp.DefaultPassConfig.createEmptyPass(""); com.google.javascript.jscomp.Compiler compiler14 = new com.google.javascript.jscomp.Compiler(); com.google.javascript.jscomp.CompilerPass compilerPass15 = passFactory13.create((com.google.javascript.jscomp.AbstractCompiler) compiler14); com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node(15); compiler14.externAndJsRoot = node17; com.google.javascript.jscomp.PassFactory passFactory20 = com.google.javascript.jscomp.DefaultPassConfig.createEmptyPass(""); com.google.javascript.jscomp.Compiler compiler21 = new com.google.javascript.jscomp.Compiler(); com.google.javascript.jscomp.CompilerPass compilerPass22 = passFactory20.create((com.google.javascript.jscomp.AbstractCompiler) compiler21); com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node(15); compiler21.externAndJsRoot = node24; com.google.javascript.jscomp.CheckRegExp checkRegExp26 = new com.google.javascript.jscomp.CheckRegExp((com.google.javascript.jscomp.AbstractCompiler) compiler21); com.google.javascript.jscomp.NodeTraversal nodeTraversal27 = new com.google.javascript.jscomp.NodeTraversal((com.google.javascript.jscomp.AbstractCompiler) compiler14, (com.google.javascript.jscomp.NodeTraversal.Callback) checkRegExp26); boolean boolean28 = nodeTraversal27.inGlobalScope(); com.google.javascript.rhino.InputId inputId29 = nodeTraversal27.getInputId(); flowSensitiveInlineVariables11.exitScope(nodeTraversal27); com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.IR.number((double) 2); java.lang.String str33 = node32.toString(); boolean boolean34 = node32.hasOneChild(); int int35 = node32.getCharno(); com.google.javascript.jscomp.GoogleCodingConvention googleCodingConvention36 = new com.google.javascript.jscomp.GoogleCodingConvention(); com.google.javascript.rhino.ErrorReporter errorReporter37 = null; com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry39 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter37, true); jSTypeRegistry39.incrementGeneration(); com.google.javascript.rhino.ErrorReporter errorReporter41 = null; com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry43 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter41, true); com.google.javascript.rhino.jstype.JSType[] jSTypeArray44 = new com.google.javascript.rhino.jstype.JSType[] {}; com.google.javascript.rhino.Node node45 = jSTypeRegistry43.createOptionalParameters(jSTypeArray44); com.google.javascript.rhino.Node node46 = jSTypeRegistry39.createParametersWithVarArgs(jSTypeArray44); boolean boolean47 = googleCodingConvention36.isPrototypeAlias(node46); strictModeCheck1.visit(nodeTraversal27, node32, node46); java.util.ArrayDeque<com.google.javascript.jscomp.ControlFlowGraph<com.google.javascript.rhino.Node>> nodeControlFlowGraphQueue49 = new java.util.ArrayDeque<com.google.javascript.jscomp.ControlFlowGraph<com.google.javascript.rhino.Node>>(); nodeTraversal27.cfgs = nodeControlFlowGraphQueue49; }
Code: public void visit(NodeTraversal t, Node n, Node parent) { if (n.isName() && jsScope.isDeclared(n.getString(), true)) { Var dep = jsScope.getVar(n.getString()); def.depends.add(dep); } }
[[0.0348146  0.02796735 0.01762185 0.11637123 0.06390037 0.07664114
 0.06390037 0.04368909 0.04487607 0.09368374 0.06097006 0.02206576
 0.08346573 0.03955545 0.04487607 0.03068871 0.02782932 0.02180748
 0.03255045 0.02373448 0.01449538 0.01449538]
[0.02514971 0.02188127 0.00904892 0.15871897 0.06684127 0.10068148
 0.06684127 0.03049826 0.04350814 0.08362187 0.05476387 0.0156369
 0.09359267 0.03384982 0.04350814 0.03204919 0.0224342  0.02042684
 0.03017567 0.0202633  0.01325411 0.01325411]
[0.0258397  0.01836956 0.01191726 0.13703999 0.05788547 0.08544651
 0.05788547 0.03366013 0.04623715 0.1318421  0.06120582 0.01805389
 0.0891718  0.03464975 0.04623715 0.03857698 0.02843655 0.01686284
 0.025424   0.01945563 0.00790114 0.00790114]
[0.02977433 0.01724344 0.0114104  0.13851838 0.07060809 0.06875423
 0.07060809 0.04266223 0.05308546 0.08152321 0.06236083 0.01781644
 0.1079649  0.02546874 0.05308546 0.02872857 0.02609649 0.02591285
 0.02617819 0.02219625 0.01000173 0.01000173]
[0.02368693 0.02376162 0.01216929 0.14433213 0.0690557  0.09846161
 0.0690557  0.03175509 0.05195949 0.08716304 0.05693839 0.01829163
 0.08441963 0.02783849 0.05195949 0.03028064 0.02440049 0.02191738
 0.03053349 0.02221501 0.00990236 0.00990236]
[0.02770701 0.01841552 0.01751863 0.15252665 0.05821224 0.09329884
 0.05821224 0.02694254 0.05410241 0.07922442 0.0619341  0.01668931
 0.09524025 0.02852777 0.05410241 0.03877154 0.01992832 0.01841207
 0.03285099 0.02369668 0.01184306 0.01184306]
[0.02368693 0.02376162 0.01216929 0.14433213 0.0690557  0.09846161
 0.0690557  0.03175509 0.05195949 0.08716304 0.05693839 0.01829163
 0.08441963 0.02783849 0.05195949 0.03028064 0.02440049 0.02191738
 0.03053349 0.02221501 0.00990236 0.00990236]
[0.03014942 0.02264917 0.01071239 0.15107323 0.07061508 0.08195716
 0.07061508 0.02717377 0.05392576 0.10360823 0.04788075 0.01841903
 0.08949671 0.02603915 0.05392576 0.03194906 0.02527027 0.01751923
 0.02622828 0.01794428 0.01142409 0.01142409]
[0.03648622 0.0314665  0.02025168 0.10176422 0.05907395 0.07999244
 0.05907395 0.03256968 0.05440752 0.06339967 0.05039821 0.03115301
 0.07286281 0.03357916 0.05440752 0.04717945 0.02614013 0.03018239
 0.0465261  0.02936002 0.01986265 0.01986265]
[0.01969483 0.01511471 0.0069153  0.21727405 0.0712392  0.08827014
 0.0712392  0.02147768 0.04377988 0.1119353  0.04750883 0.01036852
 0.09246127 0.02306076 0.04377988 0.02859117 0.01772297 0.01561662
 0.02575939 0.01496692 0.0066117  0.0066117 ]
[0.03204325 0.02556331 0.0181842  0.1352716  0.05070031 0.08726573
 0.05070031 0.04134547 0.0444247  0.07930282 0.06040902 0.02238683
 0.08176365 0.03323805 0.0444247  0.03672173 0.03473506 0.02404227
 0.03159048 0.02639754 0.01974452 0.01974452]
[0.02664766 0.02377761 0.01328913 0.1380027  0.05741693 0.10282535
 0.05741693 0.03534417 0.04969702 0.08095971 0.05602152 0.01767656
 0.08669241 0.02996489 0.04969702 0.03639653 0.03060009 0.02281982
 0.03274738 0.01983545 0.01608553 0.01608553]
[0.03203351 0.02725243 0.01437015 0.1418534  0.0614798  0.0953431
 0.0614798  0.03309202 0.04191997 0.08938453 0.06174395 0.02236138
 0.08626884 0.0320162  0.04191997 0.03214817 0.02628463 0.01900371
 0.03374363 0.02070769 0.01279653 0.01279653]
[0.03098076 0.02100594 0.0155414  0.12378474 0.05018753 0.07955523
 0.05018753 0.03703482 0.04389881 0.08886457 0.06310786 0.02227653
 0.09941384 0.03815482 0.04389881 0.04176291 0.03727074 0.02449496
 0.03533682 0.02473026 0.01425557 0.01425557]
[0.03648622 0.0314665  0.02025168 0.10176422 0.05907395 0.07999244
 0.05907395 0.03256968 0.05440752 0.06339967 0.05039821 0.03115301
 0.07286281 0.03357916 0.05440752 0.04717945 0.02614013 0.03018239
 0.0465261  0.02936002 0.01986265 0.01986265]
[0.03264032 0.02812539 0.01253794 0.13020658 0.05975546 0.0837171
 0.05975546 0.03403806 0.04869668 0.09949448 0.05215537 0.02096767
 0.07664548 0.03939687 0.04869668 0.04054822 0.02650626 0.02230272
 0.03743085 0.02352633 0.01142806 0.01142806]
[0.03091476 0.02498677 0.01466461 0.12404702 0.05315804 0.07037725
 0.05315804 0.03341839 0.06311699 0.07943109 0.06011215 0.02084159
 0.08943875 0.03689947 0.06311699 0.04293085 0.02862274 0.02569149
 0.03549614 0.02227501 0.01365091 0.01365091]
[0.04083753 0.03280493 0.01997501 0.07721676 0.06021216 0.0787811
 0.06021216 0.04526044 0.04365659 0.08990883 0.04365033 0.03425413
 0.07691168 0.03432894 0.04365659 0.03930219 0.03442748 0.03314885
 0.04180137 0.0308127  0.01942012 0.01942012]
[0.02731082 0.02753822 0.01671017 0.11003262 0.05910236 0.07578515
 0.05910236 0.03278328 0.0489486  0.10684714 0.05681843 0.02901255
 0.0803851  0.03641176 0.0489486  0.03983961 0.03015743 0.02356225
 0.03739929 0.02369479 0.01480475 0.01480475]
[0.03583552 0.02371984 0.01413455 0.12800607 0.0551792  0.09406763
 0.0551792  0.03482185 0.043741   0.09464961 0.06204121 0.02241592
 0.07885714 0.03321661 0.043741   0.03719421 0.03137069 0.02078914
 0.03643084 0.02061085 0.01699897 0.01699897]
[0.02262304 0.0204265  0.0125897  0.1349085  0.0834035  0.06446027
 0.0834035  0.03874665 0.05251964 0.08607458 0.05645252 0.01867931
 0.08598665 0.02848566 0.05251964 0.04017959 0.02557397 0.01984652
 0.03067124 0.01930337 0.01157285 0.01157285]
[0.02262304 0.0204265  0.0125897  0.1349085  0.0834035  0.06446027
 0.0834035  0.03874665 0.05251964 0.08607458 0.05645252 0.01867931
 0.08598665 0.02848566 0.05251964 0.04017959 0.02557397 0.01984652
 0.03067124 0.01930337 0.01157285 0.01157285]]