67492
Test: public void testCustomTypesRefinedNested() { TypeFactory tf = newTypeFactory(); JavaType base = tf.constructType(new TypeReference<Data1604<List<Long>>>() { }); JavaType subtype = tf.constructSpecializedType(base, RefinedDataList1604.class); JavaType paramType = subtype.containedType(0); }
Code: public JavaType constructSpecializedType(JavaType baseType, Class<?> subclass){final Class<?> rawBase = baseType.getRawClass();if (rawBase == subclass) {return baseType;}JavaType newType;do { if (rawBase == Object.class) {newType = _fromClass(null, subclass, TypeBindings.emptyBindings());break;}if (!rawBase.isAssignableFrom(subclass)) {throw new IllegalArgumentException(String.format("Class %s not subtype of %s", subclass.getName(), baseType));}if (baseType.getBindings().isEmpty()) {newType = _fromClass(null, subclass, TypeBindings.emptyBindings());break;}if (baseType.isContainerType()) {if (baseType.isMapLikeType()) {if ((subclass == HashMap.class)|| (subclass == LinkedHashMap.class)|| (subclass == EnumMap.class)|| (subclass == TreeMap.class)) {newType = _fromClass(null, subclass,TypeBindings.create(subclass, baseType.getKeyType(), baseType.getContentType()));break;}} else if (baseType.isCollectionLikeType()) {if ((subclass == ArrayList.class)|| (subclass == LinkedList.class)|| (subclass == HashSet.class)|| (subclass == TreeSet.class)) {newType = _fromClass(null, subclass,TypeBindings.create(subclass, baseType.getContentType()));break;}if (rawBase == EnumSet.class) {return baseType;}}}int typeParamCount = subclass.getTypeParameters().length;if (typeParamCount == 0) {newType = _fromClass(null, subclass, TypeBindings.emptyBindings());break;}TypeBindings tb = _bindingsForSubtype(baseType, typeParamCount, subclass);newType = _fromClass(null, subclass, tb);} while (false);;return newType;}
tensor([[0.0061, 0.0096, 0.0107,  ..., 0.0144, 0.0067, 0.0124],
        [0.0062, 0.0110, 0.0114,  ..., 0.0201, 0.0046, 0.0111],
        [0.0062, 0.0108, 0.0098,  ..., 0.0158, 0.0049, 0.0121],
        ...,
        [0.0053, 0.0117, 0.0092,  ..., 0.0179, 0.0046, 0.0122],
        [0.0053, 0.0115, 0.0081,  ..., 0.0187, 0.0047, 0.0127],
        [0.0057, 0.0117, 0.0082,  ..., 0.0156, 0.0063, 0.0135]])