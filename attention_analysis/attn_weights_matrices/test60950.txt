60950
Test: public void testBackslashEscapingOld() throws IOException { final String code = "one,two,three\n" + "on\\\"e,two\n" + "on\"e,two\n" + "one,\"tw\\\"o\"\n" + "one,\"t\\,wo\"\n" + "one,two,\"th,ree\"\n" + "\"a\\\\\"\n" + "a\\,b\n" + "\"a\\\\,b\""; final String[][] res = { {"one", "two", "three"}, {"on\\\"e", "two"}, {"on\"e", "two"}, {"one", "tw\"o"}, {"one", "t\\,wo"}, {"one", "two", "th,ree"}, {"a\\\\"}, {"a\\", "b"}, {"a\\\\,b"} }; final CSVParser parser = CSVParser.parse(code, CSVFormat.DEFAULT); final List<CSVRecord> records = parser.getRecords(); for (int i = 0; i < res.length; i++) { } parser.close(); } @Test @Ignore("CSV-107") public void testBOM() throws IOException { URL url = ClassLoader.getSystemClassLoader().getResource("CSVFileParser/bom.csv"); final CSVParser parser = CSVParser.parse(url, null, CSVFormat.EXCEL.withHeader()); try { for (CSVRecord record : parser) { final String string = record.get("Date"); } } finally { parser.close(); } } @Test public void testBOMInputStream() {} @Test public void testCarriageReturnEndings() throws IOException { final String code = "foo\rbaar,\rhello,world\r,kanu"; final CSVParser parser = CSVParser.parse(code, CSVFormat.DEFAULT); final List<CSVRecord> records = parser.getRecords(); parser.close(); } @Test public void testCarriageReturnLineFeedEndings() throws IOException { final String code = "foo\r\nbaar,\r\nhello,world\r\n,kanu"; final CSVParser parser = CSVParser.parse(code, CSVFormat.DEFAULT); final List<CSVRecord> records = parser.getRecords(); parser.close(); } @Test(expected = NoSuchElementException.class) public void testClose() throws Exception { final Reader in = new StringReader("# comment\na,b,c\n1,2,3\nx,y,z"); final CSVParser parser = CSVFormat.DEFAULT.withCommentStart('#').withHeader().parse(in); final Iterator<CSVRecord> records = parser.iterator(); parser.close(); records.next(); } @Test public void testCSV57() throws Exception { final CSVParser parser = CSVParser.parse("", CSVFormat.DEFAULT); final List<CSVRecord> list = parser.getRecords(); parser.close(); } @Test public void testDefaultFormat() throws IOException { final String code = "" + "a,b#\n" + "\"\n\",\" \",#\n" + "#,\"\"\n" + "# Final comment\n" ; final String[][] res = { {"a", "b#"}, {"\n", " ", "#"}, {"#", ""}, {"# Final comment"} }; CSVFormat format = CSVFormat.DEFAULT; CSVParser parser = CSVParser.parse(code, format); List<CSVRecord> records = parser.getRecords(); Utils.compare("Failed to parse without comments", res, records); final String[][] res_comments = { {"a", "b#"}, {"\n", " ", "#"}, }; format = CSVFormat.DEFAULT.withCommentStart('#'); parser.close(); parser = CSVParser.parse(code, format); records = parser.getRecords(); Utils.compare("Failed to parse with comments", res_comments, records); parser.close(); } @Test public void testEmptyFile() throws Exception { final CSVParser parser = CSVParser.parse("", CSVFormat.DEFAULT); parser.close(); } @Test public void testEmptyLineBehaviourCSV() throws Exception { final String[] codes = { "hello,\r\n\r\n\r\n", "hello,\n\n\n", "hello,\"\"\r\n\r\n\r\n", "hello,\"\"\n\n\n" }; final String[][] res = { {"hello", ""} }; for (final String code : codes) { final CSVParser parser = CSVParser.parse(code, CSVFormat.DEFAULT); final List<CSVRecord> records = parser.getRecords(); for (int i = 0; i < res.length; i++) { } parser.close(); } } @Test public void testEmptyLineBehaviourExcel() throws Exception { final String[] codes = { "hello,\r\n\r\n\r\n", "hello,\n\n\n", "hello,\"\"\r\n\r\n\r\n", "hello,\"\"\n\n\n" }; final String[][] res = { {"hello", ""}, {""}, {""} }; for (final String code : codes) { final CSVParser parser = CSVParser.parse(code, CSVFormat.EXCEL); final List<CSVRecord> records = parser.getRecords(); for (int i = 0; i < res.length; i++) { } parser.close(); } } @Test public void testEndOfFileBehaviorCSV() throws Exception { final String[] codes = { "hello,\r\n\r\nworld,\r\n", "hello,\r\n\r\nworld,", "hello,\r\n\r\nworld,\"\"\r\n", "hello,\r\n\r\nworld,\"\"", "hello,\r\n\r\nworld,\n", "hello,\r\n\r\nworld,", "hello,\r\n\r\nworld,\"\"\n", "hello,\r\n\r\nworld,\"\"" }; final String[][] res = { {"hello", ""}, {"world", ""} }; for (final String code : codes) { final CSVParser parser = CSVParser.parse(code, CSVFormat.DEFAULT); final List<CSVRecord> records = parser.getRecords(); for (int i = 0; i < res.length; i++) { } parser.close(); } } @Test public void testEndOfFileBehaviourExcel() throws Exception { final String[] codes = { "hello,\r\n\r\nworld,\r\n", "hello,\r\n\r\nworld,", "hello,\r\n\r\nworld,\"\"\r\n", "hello,\r\n\r\nworld,\"\"", "hello,\r\n\r\nworld,\n", "hello,\r\n\r\nworld,", "hello,\r\n\r\nworld,\"\"\n", "hello,\r\n\r\nworld,\"\"" }; final String[][] res = { {"hello", ""}, {""}, {"world", ""} }; for (final String code : codes) { final CSVParser parser = CSVParser.parse(code, CSVFormat.EXCEL); final List<CSVRecord> records = parser.getRecords(); for (int i = 0; i < res.length; i++) { } parser.close(); } } @Test public void testExcelFormat1() throws IOException { final String code = "value1,value2,value3,value4\r\na,b,c,d\r\n x,,," + "\r\n\r\n\"\"\"hello\"\"\",\" \"\"world\"\"\",\"abc\ndef\",\r\n"; final String[][] res = { {"value1", "value2", "value3", "value4"}, {"a", "b", "c", "d"}, {" x", "", "", ""}, {""}, {"\"hello\"", " \"world\"", "abc\ndef", ""} }; final CSVParser parser = CSVParser.parse(code, CSVFormat.EXCEL); final List<CSVRecord> records = parser.getRecords(); for (int i = 0; i < res.length; i++) { } parser.close(); } @Test public void testExcelFormat2() throws Exception { final String code = "foo,baar\r\n\r\nhello,\r\n\r\nworld,\r\n"; final String[][] res = { {"foo", "baar"}, {""}, {"hello", ""}, {""}, {"world", ""} }; final CSVParser parser = CSVParser.parse(code, CSVFormat.EXCEL); final List<CSVRecord> records = parser.getRecords(); for (int i = 0; i < res.length; i++) { } parser.close(); } @Test public void testForEach() throws Exception { final List<CSVRecord> records = new ArrayList<CSVRecord>(); final Reader in = new StringReader("a,b,c\n1,2,3\nx,y,z"); for (final CSVRecord record : CSVFormat.DEFAULT.parse(in)) { records.add(record); } } @Test public void testGetHeaderMap() throws Exception { final CSVParser parser = CSVParser.parse("a,b,c\n1,2,3\nx,y,z", CSVFormat.DEFAULT.withHeader("A", "B", "C")); final Map<String, Integer> headerMap = parser.getHeaderMap(); final Iterator<String> columnNames = headerMap.keySet().iterator(); final Iterator<CSVRecord> records = parser.iterator(); for (int i = 0; i < 3; i++) { final CSVRecord record = records.next(); } parser.close(); } @Test(expected = IllegalArgumentException.class) public void testDuplicateHeaderEntries() throws Exception { CSVParser.parse("a,b,a\n1,2,3\nx,y,z", CSVFormat.DEFAULT.withHeader(new String[]{})); } @Test public void testGetLine() throws IOException { final CSVParser parser = CSVParser.parse(CSV_INPUT, CSVFormat.DEFAULT.withIgnoreSurroundingSpaces(true)); for (final String[] re : RESULT) { } parser.close(); } @Test public void testGetLineNumberWithCR() throws Exception { this.validateLineNumbers(String.valueOf(CR)); } @Test public void testGetLineNumberWithCRLF() throws Exception { this.validateLineNumbers(CRLF); } @Test public void testGetLineNumberWithLF() throws Exception { this.validateLineNumbers(String.valueOf(LF)); } @Test public void testGetOneLine() throws IOException { final CSVParser parser = CSVParser.parse(CSV_INPUT_1, CSVFormat.DEFAULT); final CSVRecord record = parser.getRecords().get(0); parser.close(); } @Test public void testGetOneLineCustomCollection() throws IOException { final CSVParser parser = CSVParser.parse(CSV_INPUT_1, CSVFormat.DEFAULT); final CSVRecord record = parser.getRecords(new LinkedList<CSVRecord>()).getFirst(); parser.close(); } @Test public void testGetOneLineOneParser() throws IOException { PipedWriter writer = new PipedWriter(); PipedReader reader = new PipedReader(writer); final CSVFormat format = CSVFormat.DEFAULT; final CSVParser parser = new CSVParser(reader, format); try { writer.append(CSV_INPUT_1); writer.append(format.getRecordSeparator()); final CSVRecord record1 = parser.nextRecord(); writer.append(CSV_INPUT_2); writer.append(format.getRecordSeparator()); final CSVRecord record2 = parser.nextRecord(); } finally { parser.close(); } } @Test public void testGetRecordNumberWithCR() throws Exception { this.validateRecordNumbers(String.valueOf(CR)); } @Test public void testGetRecordNumberWithCRLF() throws Exception { this.validateRecordNumbers(CRLF); } @Test public void testGetRecordNumberWithLF() throws Exception { this.validateRecordNumbers(String.valueOf(LF)); } @Test public void testGetRecords() throws IOException { final CSVParser parser = CSVParser.parse(CSV_INPUT, CSVFormat.DEFAULT.withIgnoreSurroundingSpaces(true)); final List<CSVRecord> records = parser.getRecords(); for (int i = 0; i < RESULT.length; i++) { } parser.close(); } @Test public void testGetRecordWithMultiLineValues() throws Exception { final CSVParser parser = CSVParser.parse("\"a\r\n1\",\"a\r\n2\"" + CRLF + "\"b\r\n1\",\"b\r\n2\"" + CRLF + "\"c\r\n1\",\"c\r\n2\"", CSVFormat.DEFAULT.withRecordSeparator(CRLF)); CSVRecord record; parser.close(); } @Test public void testHeader() throws Exception { final Reader in = new StringReader("a,b,c\n1,2,3\nx,y,z"); final Iterator<CSVRecord> records = CSVFormat.DEFAULT.withHeader().parse(in).iterator(); for (int i = 0; i < 2; i++) { final CSVRecord record = records.next(); } } @Test public void testHeaderComment() throws Exception { final Reader in = new StringReader("# comment\na,b,c\n1,2,3\nx,y,z"); final Iterator<CSVRecord> records = CSVFormat.DEFAULT.withCommentStart('#').withHeader().parse(in).iterator(); for (int i = 0; i < 2; i++) { final CSVRecord record = records.next(); } } @Test public void testIgnoreEmptyLines() throws IOException { final String code = "\nfoo,baar\n\r\n,\n\n,world\r\n\n"; final CSVParser parser = CSVParser.parse(code, CSVFormat.DEFAULT); final List<CSVRecord> records = parser.getRecords(); parser.close(); } @Test(expected = IllegalArgumentException.class) public void testInvalidFormat() throws Exception { final CSVFormat invalidFormat = CSVFormat.DEFAULT.withDelimiter(CR); new CSVParser(null, invalidFormat).close(); } @Test public void testIterator() throws Exception { final Reader in = new StringReader("a,b,c\n1,2,3\nx,y,z"); final Iterator<CSVRecord> iterator = CSVFormat.DEFAULT.parse(in).iterator(); try { iterator.remove(); fail("expected UnsupportedOperationException"); } catch (final UnsupportedOperationException expected) { } try { iterator.next(); fail("NoSuchElementException expected"); } catch (final NoSuchElementException e) { } } @Test public void testLineFeedEndings() throws IOException { final String code = "foo\nbaar,\nhello,world\n,kanu"; final CSVParser parser = CSVParser.parse(code, CSVFormat.DEFAULT); final List<CSVRecord> records = parser.getRecords(); parser.close(); } @Test public void testMappedButNotSetAsOutlook2007ContactExport() throws Exception { final Reader in = new StringReader("a,b,c\n1,2\nx,y,z"); final Iterator<CSVRecord> records = CSVFormat.DEFAULT.withHeader("A", "B", "C").withSkipHeaderRecord(true) .parse(in).iterator(); CSVRecord record; record = records.next(); record = records.next(); } @Test public void testMultipleIterators() throws Exception { final CSVParser parser = CSVParser.parse("a,b,c" + CR + "d,e,f", CSVFormat.DEFAULT); final Iterator<CSVRecord> itr1 = parser.iterator(); final Iterator<CSVRecord> itr2 = parser.iterator(); final CSVRecord first = itr1.next(); final CSVRecord second = itr2.next(); parser.close(); } @Test(expected = IllegalArgumentException.class) public void testNewCSVParserNullReaderFormat() throws Exception { new CSVParser(null, CSVFormat.DEFAULT).close(); } @Test(expected = IllegalArgumentException.class) public void testNewCSVParserReaderNullFormat() throws Exception { new CSVParser(new StringReader(""), null).close(); } @Test public void testNoHeaderMap() throws Exception { final CSVParser parser = CSVParser.parse("a,b,c\n1,2,3\nx,y,z", CSVFormat.DEFAULT); parser.close(); } @Test(expected = IllegalArgumentException.class) public void testParseFileNullFormat() throws Exception { CSVParser.parse(new File(""), null); } @Test(expected = IllegalArgumentException.class) public void testParseNullFileFormat() throws Exception { CSVParser.parse((File) null, CSVFormat.DEFAULT); } @Test(expected = IllegalArgumentException.class) public void testParseNullStringFormat() throws Exception { CSVParser.parse((String) null, CSVFormat.DEFAULT); } @Test(expected = IllegalArgumentException.class) public void testParseNullUrlCharsetFormat() throws Exception { CSVParser.parse(null, Charset.defaultCharset(), CSVFormat.DEFAULT); } @Test(expected = IllegalArgumentException.class) public void testParserUrlNullCharsetFormat() throws Exception { final CSVParser parser = CSVParser.parse(new URL("http: parser.close(); } @Test(expected = IllegalArgumentException.class) public void testParseStringNullFormat() throws Exception { CSVParser.parse("csv data", null); } @Test(expected = IllegalArgumentException.class) public void testParseUrlCharsetNullFormat() throws Exception { final CSVParser parser = CSVParser.parse(new URL("http: parser.close(); } @Test public void testProvidedHeader() throws Exception { final Reader in = new StringReader("a,b,c\n1,2,3\nx,y,z"); final Iterator<CSVRecord> records = CSVFormat.DEFAULT.withHeader("A", "B", "C").parse(in).iterator(); for (int i = 0; i < 3; i++) { final CSVRecord record = records.next(); } } @Test public void testProvidedHeaderAuto() throws Exception { final Reader in = new StringReader("a,b,c\n1,2,3\nx,y,z"); final Iterator<CSVRecord> records = CSVFormat.DEFAULT.withHeader().parse(in).iterator(); for (int i = 0; i < 2; i++) { final CSVRecord record = records.next(); } } @Test public void testRoundtrip() throws Exception { final StringWriter out = new StringWriter(); final CSVPrinter printer = new CSVPrinter(out, CSVFormat.DEFAULT); final String input = "a,b,c\r\n1,2,3\r\nx,y,z\r\n"; for (final CSVRecord record : CSVParser.parse(input, CSVFormat.DEFAULT)) { printer.printRecord(record); } printer.close(); } @Test public void testSkipAutoHeader() throws Exception { final Reader in = new StringReader("a,b,c\n1,2,3\nx,y,z"); final Iterator<CSVRecord> records = CSVFormat.DEFAULT.withHeader().parse(in).iterator(); final CSVRecord record = records.next(); } @Test public void testSkipSetHeader() throws Exception { final Reader in = new StringReader("a,b,c\n1,2,3\nx,y,z"); final Iterator<CSVRecord> records = CSVFormat.DEFAULT.withHeader("a", "b", "c").withSkipHeaderRecord(true) .parse(in).iterator(); final CSVRecord record = records.next(); } private void validateLineNumbers(final String lineSeparator) throws IOException { final CSVParser parser = CSVParser.parse("a" + lineSeparator + "b" + lineSeparator + "c", CSVFormat.DEFAULT.withRecordSeparator(lineSeparator)); parser.close(); } private void validateRecordNumbers(final String lineSeparator) throws IOException { final CSVParser parser = CSVParser.parse("a" + lineSeparator + "b" + lineSeparator + "c", CSVFormat.DEFAULT.withRecordSeparator(lineSeparator)); CSVRecord record; parser.close(); }}
Code: public CSVPrinter(final Appendable out, final CSVFormat format) throws IOException { Assertions.notNull(out, "out"); Assertions.notNull(format, "format"); this.out = out; this.format = format; this.format.validate(); if (format.getHeader() != null) { this.printRecord((Object[]) format.getHeader()); } }
tensor([[0.0270, 0.0393, 0.0333, 0.0272, 0.0217, 0.0108, 0.0435, 0.0642, 0.0139,
         0.0358, 0.0255, 0.0326, 0.0277, 0.0304, 0.0428, 0.0170, 0.0221, 0.0384,
         0.0170, 0.0338, 0.0788, 0.0728, 0.0175, 0.0147, 0.0145, 0.0358, 0.0570,
         0.0819, 0.0115, 0.0115],
        [0.0252, 0.0345, 0.0377, 0.0325, 0.0208, 0.0116, 0.0399, 0.0710, 0.0174,
         0.0401, 0.0276, 0.0318, 0.0253, 0.0280, 0.0337, 0.0194, 0.0257, 0.0359,
         0.0194, 0.0275, 0.0587, 0.0749, 0.0175, 0.0207, 0.0182, 0.0401, 0.0604,
         0.0794, 0.0125, 0.0125],
        [0.0235, 0.0386, 0.0327, 0.0302, 0.0211, 0.0097, 0.0420, 0.0745, 0.0158,
         0.0423, 0.0318, 0.0240, 0.0257, 0.0280, 0.0433, 0.0198, 0.0240, 0.0358,
         0.0198, 0.0267, 0.0831, 0.0720, 0.0172, 0.0143, 0.0138, 0.0423, 0.0436,
         0.0839, 0.0104, 0.0104],
        [0.0258, 0.0403, 0.0395, 0.0269, 0.0199, 0.0112, 0.0399, 0.0577, 0.0171,
         0.0399, 0.0282, 0.0288, 0.0205, 0.0309, 0.0339, 0.0174, 0.0286, 0.0388,
         0.0174, 0.0260, 0.0865, 0.0740, 0.0212, 0.0158, 0.0180, 0.0399, 0.0446,
         0.0913, 0.0100, 0.0100],
        [0.0265, 0.0418, 0.0336, 0.0284, 0.0171, 0.0084, 0.0377, 0.0752, 0.0152,
         0.0392, 0.0271, 0.0225, 0.0207, 0.0279, 0.0341, 0.0206, 0.0225, 0.0306,
         0.0206, 0.0209, 0.1195, 0.0907, 0.0122, 0.0115, 0.0126, 0.0392, 0.0494,
         0.0782, 0.0080, 0.0080],
        [0.0207, 0.0339, 0.0326, 0.0284, 0.0180, 0.0079, 0.0424, 0.0780, 0.0130,
         0.0501, 0.0291, 0.0287, 0.0200, 0.0235, 0.0267, 0.0154, 0.0188, 0.0351,
         0.0154, 0.0198, 0.0948, 0.0847, 0.0157, 0.0109, 0.0124, 0.0501, 0.0521,
         0.1050, 0.0083, 0.0083],
        [0.0186, 0.0375, 0.0256, 0.0243, 0.0164, 0.0073, 0.0482, 0.0828, 0.0107,
         0.0394, 0.0318, 0.0250, 0.0197, 0.0240, 0.0336, 0.0135, 0.0210, 0.0389,
         0.0135, 0.0168, 0.1244, 0.0764, 0.0137, 0.0102, 0.0089, 0.0394, 0.0516,
         0.1143, 0.0063, 0.0063],
        [0.0190, 0.0346, 0.0351, 0.0336, 0.0151, 0.0083, 0.0417, 0.0978, 0.0111,
         0.0407, 0.0289, 0.0260, 0.0173, 0.0226, 0.0318, 0.0165, 0.0170, 0.0310,
         0.0165, 0.0217, 0.0870, 0.0847, 0.0137, 0.0139, 0.0118, 0.0407, 0.0526,
         0.1128, 0.0083, 0.0083],
        [0.0223, 0.0335, 0.0283, 0.0309, 0.0184, 0.0087, 0.0429, 0.0870, 0.0114,
         0.0349, 0.0281, 0.0263, 0.0268, 0.0287, 0.0354, 0.0171, 0.0214, 0.0354,
         0.0171, 0.0211, 0.0987, 0.0894, 0.0125, 0.0127, 0.0098, 0.0349, 0.0453,
         0.1057, 0.0078, 0.0078],
        [0.0291, 0.0407, 0.0411, 0.0294, 0.0284, 0.0151, 0.0446, 0.0525, 0.0187,
         0.0419, 0.0339, 0.0280, 0.0259, 0.0279, 0.0352, 0.0240, 0.0232, 0.0376,
         0.0240, 0.0306, 0.0695, 0.0508, 0.0190, 0.0198, 0.0198, 0.0419, 0.0453,
         0.0710, 0.0156, 0.0156],
        [0.0252, 0.0413, 0.0333, 0.0303, 0.0285, 0.0130, 0.0367, 0.0634, 0.0164,
         0.0466, 0.0263, 0.0267, 0.0268, 0.0246, 0.0396, 0.0185, 0.0208, 0.0366,
         0.0185, 0.0259, 0.0733, 0.0928, 0.0147, 0.0154, 0.0157, 0.0466, 0.0425,
         0.0806, 0.0098, 0.0098],
        [0.0226, 0.0411, 0.0282, 0.0288, 0.0170, 0.0072, 0.0426, 0.0973, 0.0147,
         0.0341, 0.0311, 0.0249, 0.0217, 0.0200, 0.0354, 0.0159, 0.0220, 0.0310,
         0.0159, 0.0211, 0.1127, 0.0896, 0.0130, 0.0085, 0.0113, 0.0341, 0.0491,
         0.0963, 0.0063, 0.0063],
        [0.0234, 0.0411, 0.0310, 0.0292, 0.0242, 0.0096, 0.0408, 0.0711, 0.0145,
         0.0372, 0.0284, 0.0273, 0.0224, 0.0312, 0.0367, 0.0198, 0.0211, 0.0360,
         0.0198, 0.0261, 0.0819, 0.0749, 0.0161, 0.0129, 0.0149, 0.0372, 0.0496,
         0.0974, 0.0123, 0.0123],
        [0.0226, 0.0366, 0.0361, 0.0271, 0.0191, 0.0118, 0.0383, 0.0874, 0.0149,
         0.0386, 0.0232, 0.0292, 0.0234, 0.0309, 0.0382, 0.0242, 0.0210, 0.0368,
         0.0242, 0.0217, 0.0677, 0.0777, 0.0160, 0.0156, 0.0159, 0.0386, 0.0488,
         0.0909, 0.0118, 0.0118],
        [0.0283, 0.0358, 0.0340, 0.0274, 0.0220, 0.0095, 0.0447, 0.0793, 0.0139,
         0.0428, 0.0343, 0.0294, 0.0249, 0.0248, 0.0329, 0.0172, 0.0253, 0.0287,
         0.0172, 0.0181, 0.0966, 0.0631, 0.0161, 0.0138, 0.0143, 0.0428, 0.0529,
         0.0899, 0.0100, 0.0100],
        [0.0318, 0.0396, 0.0445, 0.0346, 0.0267, 0.0166, 0.0327, 0.0479, 0.0194,
         0.0333, 0.0310, 0.0275, 0.0311, 0.0263, 0.0391, 0.0256, 0.0248, 0.0397,
         0.0256, 0.0269, 0.0660, 0.0700, 0.0199, 0.0262, 0.0208, 0.0333, 0.0417,
         0.0672, 0.0150, 0.0150],
        [0.0275, 0.0373, 0.0345, 0.0324, 0.0239, 0.0108, 0.0497, 0.0742, 0.0167,
         0.0331, 0.0285, 0.0278, 0.0230, 0.0305, 0.0404, 0.0167, 0.0209, 0.0314,
         0.0167, 0.0345, 0.0815, 0.0774, 0.0176, 0.0134, 0.0145, 0.0331, 0.0545,
         0.0740, 0.0118, 0.0118],
        [0.0240, 0.0386, 0.0364, 0.0249, 0.0208, 0.0074, 0.0373, 0.0915, 0.0106,
         0.0328, 0.0252, 0.0261, 0.0234, 0.0309, 0.0370, 0.0240, 0.0230, 0.0347,
         0.0240, 0.0229, 0.0750, 0.0655, 0.0173, 0.0128, 0.0141, 0.0328, 0.0566,
         0.1104, 0.0100, 0.0100],
        [0.0318, 0.0396, 0.0445, 0.0346, 0.0267, 0.0166, 0.0327, 0.0479, 0.0194,
         0.0333, 0.0310, 0.0275, 0.0311, 0.0263, 0.0391, 0.0256, 0.0248, 0.0397,
         0.0256, 0.0269, 0.0660, 0.0700, 0.0199, 0.0262, 0.0208, 0.0333, 0.0417,
         0.0672, 0.0150, 0.0150],
        [0.0192, 0.0381, 0.0266, 0.0269, 0.0171, 0.0075, 0.0391, 0.0872, 0.0132,
         0.0446, 0.0255, 0.0246, 0.0178, 0.0298, 0.0361, 0.0187, 0.0220, 0.0367,
         0.0187, 0.0206, 0.0963, 0.0813, 0.0137, 0.0088, 0.0092, 0.0446, 0.0527,
         0.1099, 0.0068, 0.0068],
        [0.0309, 0.0367, 0.0404, 0.0285, 0.0181, 0.0120, 0.0494, 0.0697, 0.0176,
         0.0412, 0.0285, 0.0326, 0.0254, 0.0183, 0.0374, 0.0170, 0.0189, 0.0352,
         0.0170, 0.0279, 0.0773, 0.0788, 0.0117, 0.0220, 0.0188, 0.0412, 0.0603,
         0.0588, 0.0143, 0.0143],
        [0.0179, 0.0354, 0.0277, 0.0225, 0.0122, 0.0038, 0.0529, 0.1068, 0.0098,
         0.0314, 0.0221, 0.0198, 0.0167, 0.0292, 0.0276, 0.0135, 0.0184, 0.0317,
         0.0135, 0.0171, 0.1222, 0.0986, 0.0106, 0.0062, 0.0070, 0.0314, 0.0502,
         0.1339, 0.0051, 0.0051],
        [0.0249, 0.0399, 0.0357, 0.0300, 0.0218, 0.0103, 0.0435, 0.0785, 0.0149,
         0.0411, 0.0212, 0.0311, 0.0270, 0.0271, 0.0374, 0.0195, 0.0211, 0.0344,
         0.0195, 0.0239, 0.0672, 0.0761, 0.0191, 0.0152, 0.0126, 0.0411, 0.0515,
         0.0898, 0.0123, 0.0123],
        [0.0218, 0.0410, 0.0290, 0.0274, 0.0221, 0.0065, 0.0408, 0.0814, 0.0115,
         0.0430, 0.0270, 0.0268, 0.0259, 0.0425, 0.0325, 0.0174, 0.0188, 0.0285,
         0.0174, 0.0184, 0.0916, 0.0805, 0.0127, 0.0086, 0.0113, 0.0430, 0.0484,
         0.1081, 0.0081, 0.0081],
        [0.0221, 0.0355, 0.0335, 0.0268, 0.0181, 0.0081, 0.0434, 0.0797, 0.0141,
         0.0439, 0.0291, 0.0262, 0.0199, 0.0301, 0.0359, 0.0140, 0.0165, 0.0309,
         0.0140, 0.0254, 0.0827, 0.1022, 0.0130, 0.0118, 0.0144, 0.0439, 0.0480,
         0.1027, 0.0071, 0.0071],
        [0.0291, 0.0407, 0.0411, 0.0294, 0.0284, 0.0151, 0.0446, 0.0525, 0.0187,
         0.0419, 0.0339, 0.0280, 0.0259, 0.0279, 0.0352, 0.0240, 0.0232, 0.0376,
         0.0240, 0.0306, 0.0695, 0.0508, 0.0190, 0.0198, 0.0198, 0.0419, 0.0453,
         0.0710, 0.0156, 0.0156],
        [0.0247, 0.0364, 0.0303, 0.0373, 0.0231, 0.0103, 0.0381, 0.0681, 0.0163,
         0.0461, 0.0342, 0.0295, 0.0251, 0.0253, 0.0297, 0.0228, 0.0212, 0.0334,
         0.0228, 0.0279, 0.0665, 0.0800, 0.0167, 0.0155, 0.0154, 0.0461, 0.0502,
         0.0841, 0.0116, 0.0116],
        [0.0251, 0.0381, 0.0410, 0.0308, 0.0213, 0.0130, 0.0423, 0.0697, 0.0150,
         0.0380, 0.0242, 0.0350, 0.0234, 0.0241, 0.0398, 0.0167, 0.0240, 0.0394,
         0.0167, 0.0269, 0.0716, 0.0826, 0.0192, 0.0181, 0.0151, 0.0380, 0.0455,
         0.0786, 0.0134, 0.0134],
        [0.0210, 0.0328, 0.0316, 0.0341, 0.0183, 0.0109, 0.0348, 0.0889, 0.0152,
         0.0458, 0.0261, 0.0355, 0.0232, 0.0330, 0.0370, 0.0181, 0.0202, 0.0333,
         0.0181, 0.0166, 0.0774, 0.0791, 0.0178, 0.0144, 0.0134, 0.0458, 0.0454,
         0.0920, 0.0102, 0.0102],
        [0.0210, 0.0328, 0.0316, 0.0341, 0.0183, 0.0109, 0.0348, 0.0889, 0.0152,
         0.0458, 0.0261, 0.0355, 0.0232, 0.0330, 0.0370, 0.0181, 0.0202, 0.0333,
         0.0181, 0.0166, 0.0774, 0.0791, 0.0178, 0.0144, 0.0134, 0.0458, 0.0454,
         0.0920, 0.0102, 0.0102]])