67599
Test: public void test45() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test45"); com.fasterxml.jackson.databind.JavaType javaType0 = null; com.fasterxml.jackson.databind.jsontype.TypeSerializer typeSerializer2 = null; com.fasterxml.jackson.databind.BeanProperty beanProperty3 = null; com.fasterxml.jackson.databind.JsonSerializer<java.lang.Object> objJsonSerializer4 = null; com.fasterxml.jackson.databind.ser.std.CollectionSerializer collectionSerializer5 = new com.fasterxml.jackson.databind.ser.std.CollectionSerializer(javaType0, true, typeSerializer2, beanProperty3, objJsonSerializer4); com.fasterxml.jackson.databind.JavaType javaType6 = collectionSerializer5.getContentType(); com.fasterxml.jackson.databind.JavaType javaType7 = null; com.fasterxml.jackson.databind.jsontype.TypeSerializer typeSerializer9 = null; com.fasterxml.jackson.databind.ser.std.SqlDateSerializer sqlDateSerializer11 = new com.fasterxml.jackson.databind.ser.std.SqlDateSerializer((java.lang.Boolean) false); com.fasterxml.jackson.databind.SerializerProvider serializerProvider12 = null; com.fasterxml.jackson.databind.BeanProperty beanProperty13 = null; com.fasterxml.jackson.databind.JsonSerializer<?> wildcardJsonSerializer14 = sqlDateSerializer11.createContextual(serializerProvider12, beanProperty13); com.fasterxml.jackson.databind.ser.std.ObjectArraySerializer objectArraySerializer15 = new com.fasterxml.jackson.databind.ser.std.ObjectArraySerializer(javaType7, false, typeSerializer9, (com.fasterxml.jackson.databind.JsonSerializer<java.lang.Object>) wildcardJsonSerializer14); com.fasterxml.jackson.databind.ObjectMapper objectMapper16 = null; com.fasterxml.jackson.databind.MappingJsonFactory mappingJsonFactory17 = new com.fasterxml.jackson.databind.MappingJsonFactory(objectMapper16); com.fasterxml.jackson.databind.ser.DefaultSerializerProvider defaultSerializerProvider18 = null; com.fasterxml.jackson.databind.deser.DefaultDeserializationContext defaultDeserializationContext19 = null; com.fasterxml.jackson.databind.ObjectMapper objectMapper20 = new com.fasterxml.jackson.databind.ObjectMapper((com.fasterxml.jackson.core.JsonFactory) mappingJsonFactory17, defaultSerializerProvider18, defaultDeserializationContext19); com.fasterxml.jackson.databind.MapperFeature[] mapperFeatureArray21 = new com.fasterxml.jackson.databind.MapperFeature[] {}; com.fasterxml.jackson.databind.ObjectMapper objectMapper22 = objectMapper20.enable(mapperFeatureArray21); com.fasterxml.jackson.core.JsonGenerator jsonGenerator23 = null; com.fasterxml.jackson.databind.SerializerProvider serializerProvider24 = null; objectArraySerializer15.serializeContents((java.lang.Object[]) mapperFeatureArray21, jsonGenerator23, serializerProvider24); com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap propertySerializerMap26 = com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap.emptyForRootValues(); objectArraySerializer15._dynamicSerializers = propertySerializerMap26; com.fasterxml.jackson.databind.ser.std.InetSocketAddressSerializer inetSocketAddressSerializer28 = new com.fasterxml.jackson.databind.ser.std.InetSocketAddressSerializer(); java.lang.Class<java.net.InetSocketAddress> inetSocketAddressClass29 = inetSocketAddressSerializer28.handledType(); com.fasterxml.jackson.databind.deser.std.StdKeyDeserializer stdKeyDeserializer30 = com.fasterxml.jackson.databind.deser.std.StdKeyDeserializer.forType(inetSocketAddressClass29); java.lang.Class<?> wildcardClass31 = com.fasterxml.jackson.databind.util.ClassUtil.getEnclosingClass(inetSocketAddressClass29); com.fasterxml.jackson.databind.SerializerProvider serializerProvider32 = null; try { com.fasterxml.jackson.databind.JsonSerializer<java.lang.Object> objJsonSerializer33 = collectionSerializer5._findAndAddDynamic(propertySerializerMap26, inetSocketAddressClass29, serializerProvider32); } catch (java.lang.NullPointerException e) { } }
Code: public JsonSerializer<?> createContextual(SerializerProvider serializers, BeanProperty property) throws JsonMappingException { if (false) { return this; } JsonFormat.Value format = findFormatOverrides(serializers, property, handledType()); if (false) { return this; } JsonFormat.Shape shape = format.getShape(); if (true) { return withFormat(Boolean.TRUE, null); } if (format.hasPattern()) { final Locale loc = format.hasLocale() ? format.getLocale() : serializers.getLocale(); SimpleDateFormat df = new SimpleDateFormat(format.getPattern(), loc); TimeZone tz = format.hasTimeZone() ? format.getTimeZone() : serializers.getTimeZone(); df.setTimeZone(tz); return withFormat(Boolean.FALSE, df); } final boolean hasLocale = format.hasLocale(); final boolean hasTZ = format.hasTimeZone(); final boolean asString = (shape == JsonFormat.Shape.STRING); if (!hasLocale && !asString) { return this; } DateFormat df0 = serializers.getConfig().getDateFormat(); if (df0 instanceof StdDateFormat) { StdDateFormat std = (StdDateFormat) df0; if (format.hasLocale()) { std = std.withLocale(format.getLocale()); } if (format.hasTimeZone()) { std = std.withTimeZone(format.getTimeZone()); } return withFormat(Boolean.FALSE, std); } if (!(df0 instanceof SimpleDateFormat)) { serializers.reportMappingProblem("Configured `DateFormat` (%s) not a `SimpleDateFormat`; can not configure `Locale` or `TimeZone`",df0.getClass().getName()); } SimpleDateFormat df = (SimpleDateFormat) df0; if (hasLocale) { df = new SimpleDateFormat(df.toPattern(), format.getLocale()); } else { ; } TimeZone newTz = format.getTimeZone(); boolean changeTZ = (newTz != null) && !newTz.equals(df.getTimeZone()); if (changeTZ) { df.setTimeZone(newTz); } return withFormat(Boolean.FALSE, df); }
tensor([[0.0039, 0.0169, 0.0023,  ..., 0.0058, 0.0074, 0.0018],
        [0.0038, 0.0175, 0.0024,  ..., 0.0046, 0.0060, 0.0021],
        [0.0032, 0.0251, 0.0024,  ..., 0.0049, 0.0061, 0.0016],
        ...,
        [0.0041, 0.0170, 0.0031,  ..., 0.0052, 0.0071, 0.0020],
        [0.0048, 0.0137, 0.0033,  ..., 0.0062, 0.0064, 0.0022],
        [0.0028, 0.0185, 0.0027,  ..., 0.0055, 0.0079, 0.0016]])