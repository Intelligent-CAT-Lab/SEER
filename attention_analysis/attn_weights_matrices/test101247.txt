101247
Test: public void test025() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test025"); org.joda.time.chrono.GJChronology gJChronology0 = org.joda.time.chrono.GJChronology.getInstance(); org.joda.time.DateTimeField dateTimeField1 = gJChronology0.yearOfEra(); int int3 = dateTimeField1.getMinimumValue(0L); org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.weekyearOfCentury(); org.joda.time.field.OffsetDateTimeField offsetDateTimeField6 = new org.joda.time.field.OffsetDateTimeField(dateTimeField1, dateTimeFieldType4, (int) (short) 10); org.joda.time.DurationField durationField7 = offsetDateTimeField6.getRangeDurationField(); java.lang.String str8 = offsetDateTimeField6.toString(); long long11 = offsetDateTimeField6.add(0L, (-1)); org.joda.time.chrono.GJChronology gJChronology12 = org.joda.time.chrono.GJChronology.getInstance(); org.joda.time.DurationField durationField13 = gJChronology12.halfdays(); org.joda.time.DateTimeField dateTimeField14 = gJChronology12.secondOfDay(); org.joda.time.chrono.GJChronology gJChronology15 = org.joda.time.chrono.GJChronology.getInstance(); org.joda.time.DateTimeField dateTimeField16 = gJChronology15.minuteOfHour(); org.joda.time.DateTimeField dateTimeField17 = gJChronology15.hourOfDay(); org.joda.time.field.SkipDateTimeField skipDateTimeField18 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology) gJChronology12, dateTimeField17); org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate(); org.joda.time.DateTime dateTime20 = localDate19.toDateTimeAtCurrentTime(); int[] intArray21 = localDate19.getValues(); org.joda.time.LocalDate localDate23 = localDate19.minusWeeks((int) (byte) 1); int int24 = skipDateTimeField18.getMinimumValue((org.joda.time.ReadablePartial) localDate23); org.joda.time.chrono.ISOChronology iSOChronology26 = org.joda.time.chrono.ISOChronology.getInstance(); java.lang.String str27 = iSOChronology26.toString(); org.joda.time.Chronology chronology28 = iSOChronology26.withUTC(); org.joda.time.DateTimeField dateTimeField29 = iSOChronology26.millisOfDay(); org.joda.time.LocalDate localDate30 = new org.joda.time.LocalDate(); org.joda.time.DateTime dateTime31 = localDate30.toDateTimeAtCurrentTime(); int[] intArray32 = localDate30.getValues(); org.joda.time.LocalDate localDate34 = localDate30.minusWeeks((int) (byte) 1); int[] intArray36 = iSOChronology26.get((org.joda.time.ReadablePartial) localDate30, (long) (short) -1); try { int[] intArray38 = offsetDateTimeField6.addWrapPartial((org.joda.time.ReadablePartial) localDate23, (int) ' ', intArray36, 4); } catch (java.lang.ArrayIndexOutOfBoundsException e) { } }
Code: public Partial(DateTimeFieldType[] types, int[] values, Chronology chronology) { super(); chronology = DateTimeUtils.getChronology(chronology).withUTC(); iChronology = chronology; if (types == null) { throw new IllegalArgumentException("Types array must not be null"); } if (values == null) { throw new IllegalArgumentException("Values array must not be null"); } if (values.length != types.length) { throw new IllegalArgumentException("Values array must be the same length as the types array"); } if (types.length == 0) { iTypes = types; iValues = values; return; } for (int i = 0; i < types.length; i++) { if (types[i] == null) { throw new IllegalArgumentException("Types array must not contain null: index " + i); } } DurationField lastUnitField = null; for (int i = 0; i < types.length; i++) { DateTimeFieldType loopType = types[i]; DurationField loopUnitField = loopType.getDurationType().getField(iChronology); if (i > 0) { int compare = lastUnitField.compareTo(loopUnitField); if (compare < 0) { throw new IllegalArgumentException("Types array must be in order largest-smallest: " + types[i - 1].getName() + " < " + loopType.getName()); } else if (compare == 0) { if (types[i - 1].getRangeDurationType() == null) { if (loopType.getRangeDurationType() == null) { throw new IllegalArgumentException("Types array must not contain duplicate: " + types[i - 1].getName() + " and " + loopType.getName()); } } else { if (loopType.getRangeDurationType() == null) { throw new IllegalArgumentException("Types array must be in order largest-smallest: " + types[i - 1].getName() + " < " + loopType.getName()); } DurationField lastRangeField = types[i - 1].getRangeDurationType().getField(iChronology); DurationField loopRangeField = loopType.getRangeDurationType().getField(iChronology); if (lastRangeField.compareTo(loopRangeField) < 0) { throw new IllegalArgumentException("Types array must be in order largest-smallest: " + types[i - 1].getName() + " < " + loopType.getName()); } if (lastRangeField.compareTo(loopRangeField) == 0) { throw new IllegalArgumentException("Types array must not contain duplicate: " + types[i - 1].getName() + " and " + loopType.getName()); } } } } lastUnitField = loopUnitField; } iTypes = (DateTimeFieldType[]) types.clone(); chronology.validate(this, values); iValues = (int[]) values.clone(); }
tensor([[0.0024, 0.0017, 0.0024,  ..., 0.0011, 0.0015, 0.0011],
        [0.0019, 0.0016, 0.0023,  ..., 0.0010, 0.0014, 0.0008],
        [0.0016, 0.0015, 0.0024,  ..., 0.0011, 0.0010, 0.0007],
        ...,
        [0.0019, 0.0018, 0.0023,  ..., 0.0012, 0.0012, 0.0011],
        [0.0018, 0.0013, 0.0024,  ..., 0.0015, 0.0013, 0.0010],
        [0.0017, 0.0015, 0.0022,  ..., 0.0013, 0.0014, 0.0009]])