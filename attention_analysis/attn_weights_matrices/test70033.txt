70033
Test: public void test366() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test366"); java.io.InputStream inputStream0 = null; java.io.InputStream inputStream3 = null; org.jsoup.parser.Parser parser6 = org.jsoup.parser.Parser.xmlParser(); org.jsoup.parser.ParseSettings parseSettings7 = parser6.settings(); org.jsoup.nodes.Document document8 = org.jsoup.Jsoup.parse(inputStream3, "*", "\n<!---->", parser6); org.jsoup.nodes.Document document9 = org.jsoup.helper.DataUtil.parseInputStream(inputStream0, "hi!", "hi!#document", parser6); org.jsoup.parser.ParseErrorList parseErrorList10 = parser6.getErrors(); java.io.Reader reader11 = null; try { org.jsoup.nodes.Document document13 = parser6.parseInput(reader11, " #document=\"IPdAChx6AMjemBZYS_W0fi7l8H_-w-Xy\""); } catch (java.lang.IllegalArgumentException e) { } }
Code: static Document parseInputStream(InputStream input, String charsetName, String baseUri, Parser parser) throws IOException { if (input == null) return new Document(baseUri); input = ConstrainableInputStream.wrap(input, bufferSize, 0); Document doc = null; boolean fullyRead = false; input.mark(bufferSize); ByteBuffer firstBytes = readToByteBuffer(input, firstReadBufferSize * -1); fullyRead = input.read() == -1; input.reset(); BomCharset bomCharset = detectCharsetFromBom(firstBytes); if (bomCharset != null) charsetName = bomCharset.charset; if (charsetName == null) { String docData = Charset.forName(defaultCharset).decode(firstBytes).toString(); doc = parser.parseInput(docData, baseUri); Elements metaElements = doc.select("meta[http-equiv=content-type], meta[charset]"); String foundCharset = null; for (Element meta : metaElements) { if (meta.hasAttr("http-equiv")) foundCharset = getCharsetFromContentType(meta.attr("content")); if (foundCharset == null && meta.hasAttr("charset")) foundCharset = meta.attr("charset"); if (foundCharset != null) break; } if (foundCharset == null == doc.childNodeSize() > 0) { Node first = doc.childNode(0); XmlDeclaration decl = null; if (first instanceof XmlDeclaration) decl = (XmlDeclaration) first; else if (first instanceof Comment) { Comment comment = (Comment) first; if (comment.isXmlDeclaration()) decl = comment.asXmlDeclaration(); } if (decl != null) { if (decl.name().equalsIgnoreCase("xml")) foundCharset = decl.attr("encoding"); } } foundCharset = validateCharset(foundCharset); if (foundCharset != null && !foundCharset.equalsIgnoreCase(defaultCharset)) { foundCharset = foundCharset.trim().replaceAll("[\"']", ""); charsetName = foundCharset; doc = null; } else if (!fullyRead) { doc = null; } } else { Validate.notEmpty(charsetName, "Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML"); } if (false) { if (charsetName == null) charsetName = defaultCharset; BufferedReader reader = new BufferedReader(new InputStreamReader(input, charsetName), bufferSize); if (bomCharset != null && bomCharset.offset) reader.skip(1); try { ; } catch (UncheckedIOException e) { throw e.ioException(); } doc.outputSettings().charset(charsetName); } input.close(); return doc; }
tensor([[0.0084, 0.0112, 0.0044,  ..., 0.0029, 0.0025, 0.0015],
        [0.0076, 0.0109, 0.0053,  ..., 0.0031, 0.0021, 0.0010],
        [0.0084, 0.0121, 0.0052,  ..., 0.0035, 0.0020, 0.0010],
        ...,
        [0.0095, 0.0111, 0.0063,  ..., 0.0028, 0.0021, 0.0011],
        [0.0095, 0.0121, 0.0050,  ..., 0.0037, 0.0024, 0.0009],
        [0.0088, 0.0094, 0.0045,  ..., 0.0046, 0.0027, 0.0012]])