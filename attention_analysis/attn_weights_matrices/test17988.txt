17988
Test: public void test206() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test206"); com.google.javascript.rhino.Node node1 = null; com.google.javascript.jscomp.DiagnosticType diagnosticType2 = com.google.javascript.jscomp.CheckAccessControls.BAD_PRIVATE_GLOBAL_ACCESS; java.lang.String[] strArray9 = new java.lang.String[] { "hi!", "^", "", "", "", "hi!" }; com.google.javascript.jscomp.JSError jSError10 = com.google.javascript.jscomp.JSError.make("^", node1, diagnosticType2, strArray9); com.google.javascript.jscomp.CommandLineRunner commandLineRunner11 = new com.google.javascript.jscomp.CommandLineRunner(strArray9); com.google.javascript.jscomp.JSModule jSModule12 = null; java.lang.String str13 = commandLineRunner11.expandManifest(jSModule12); com.google.javascript.jscomp.CompilerOptions compilerOptions14 = commandLineRunner11.createOptions(); compilerOptions14.gatherCssNames = false; compilerOptions14.aliasExternals = true; java.lang.String[] strArray22 = new java.lang.String[] { "JSCompiler_stubMethod: ^", "JSC_INVALID_REGULAR_EXPRESSION_FLAGS", "35" }; java.util.ArrayList<java.lang.String> strList23 = new java.util.ArrayList<java.lang.String>(); boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList23, strArray22); compilerOptions14.replaceStringsFunctionDescriptions = strList23; compilerOptions14.runtimeTypeCheck = false; boolean boolean28 = compilerOptions14.groupVariableDeclarations; compilerOptions14.setChainCalls(true); }
Code: protected CompilerOptions createOptions() { CompilerOptions options = new CompilerOptions(); options.setCodingConvention(new ClosureCodingConvention()); CompilationLevel level = flags.compilation_level; level.setOptionsForCompilationLevel(options); if (flags.debug) { level.setDebugOptionsForCompilationLevel(options); } WarningLevel wLevel = flags.warning_level; wLevel.setOptionsForWarningLevel(options); for (FormattingOption formattingOption : flags.formatting) { formattingOption.applyToOptions(options); } options.closurePass = flags.process_closure_primitives; return options; }
tensor([[0.0394, 0.0115, 0.0115,  ..., 0.0229, 0.0095, 0.0064],
        [0.0396, 0.0093, 0.0114,  ..., 0.0224, 0.0101, 0.0058],
        [0.0409, 0.0101, 0.0101,  ..., 0.0247, 0.0106, 0.0070],
        ...,
        [0.0405, 0.0093, 0.0122,  ..., 0.0202, 0.0110, 0.0069],
        [0.0440, 0.0134, 0.0147,  ..., 0.0242, 0.0116, 0.0066],
        [0.0374, 0.0126, 0.0124,  ..., 0.0317, 0.0125, 0.0074]])