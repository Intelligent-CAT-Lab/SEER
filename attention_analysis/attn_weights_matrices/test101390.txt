101390
Test: public void test189() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test189"); org.joda.time.chrono.BasicSingleEraDateTimeField basicSingleEraDateTimeField1 = new org.joda.time.chrono.BasicSingleEraDateTimeField(""); boolean boolean3 = basicSingleEraDateTimeField1.isLeap((long) (byte) 10); org.joda.time.MonthDay monthDay4 = org.joda.time.MonthDay.now(); org.joda.time.ReadablePeriod readablePeriod5 = null; org.joda.time.MonthDay monthDay6 = monthDay4.minus(readablePeriod5); org.joda.time.MonthDay monthDay8 = monthDay4.minusMonths((int) (byte) -1); org.joda.time.chrono.ISOChronology iSOChronology9 = org.joda.time.chrono.ISOChronology.getInstance(); org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHours(10); org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone12 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone11); org.joda.time.DateTimeZone dateTimeZone13 = cachedDateTimeZone12.getUncachedZone(); org.joda.time.Chronology chronology14 = iSOChronology9.withZone(dateTimeZone13); org.joda.time.DateTimeField dateTimeField15 = iSOChronology9.centuryOfEra(); org.joda.time.MonthDay monthDay16 = monthDay4.withChronologyRetainFields((org.joda.time.Chronology) iSOChronology9); org.joda.time.MonthDay monthDay18 = monthDay16.withDayOfMonth(30); int int19 = basicSingleEraDateTimeField1.getMaximumValue((org.joda.time.ReadablePartial) monthDay18); org.joda.time.MonthDay monthDay20 = org.joda.time.MonthDay.now(); org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.dayOfMonth(); boolean boolean22 = monthDay20.isSupported(dateTimeFieldType21); int int23 = monthDay20.getDayOfMonth(); org.joda.time.MonthDay monthDay25 = monthDay20.minusMonths(1970); org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forOffsetHours(10); org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone28 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone27); org.joda.time.DateTime dateTime29 = org.joda.time.DateTime.now(dateTimeZone27); org.joda.time.DateTime.Property property30 = dateTime29.millisOfSecond(); org.joda.time.DateTime dateTime32 = dateTime29.withEra((int) (short) 0); org.joda.time.DateTime dateTime34 = dateTime32.plus((long) (short) 1); org.joda.time.MonthDay monthDay35 = org.joda.time.MonthDay.now(); org.joda.time.DateTimeFieldType dateTimeFieldType36 = org.joda.time.DateTimeFieldType.dayOfMonth(); boolean boolean37 = monthDay35.isSupported(dateTimeFieldType36); org.joda.time.DurationFieldType durationFieldType38 = dateTimeFieldType36.getRangeDurationType(); int int39 = dateTime32.get(dateTimeFieldType36); org.joda.time.IllegalFieldValueException illegalFieldValueException41 = new org.joda.time.IllegalFieldValueException(dateTimeFieldType36, "ISOChronology[+10:00]"); boolean boolean42 = monthDay25.isSupported(dateTimeFieldType36); org.joda.time.Chronology chronology43 = null; org.joda.time.chrono.CopticChronology copticChronology44 = org.joda.time.chrono.CopticChronology.getInstance(); int int46 = copticChronology44.getMonthOfYear((long) (short) 100); long long47 = copticChronology44.getAverageMillisPerYearDividedByTwo(); org.joda.time.DateTimeField dateTimeField48 = copticChronology44.weekyear(); org.joda.time.field.SkipUndoDateTimeField skipUndoDateTimeField49 = new org.joda.time.field.SkipUndoDateTimeField(chronology43, dateTimeField48); org.joda.time.MonthDay monthDay50 = org.joda.time.MonthDay.now(); org.joda.time.DateTimeFieldType dateTimeFieldType51 = org.joda.time.DateTimeFieldType.dayOfMonth(); boolean boolean52 = monthDay50.isSupported(dateTimeFieldType51); int int53 = monthDay50.getDayOfMonth(); boolean boolean54 = org.joda.time.DateTimeUtils.isContiguous((org.joda.time.ReadablePartial) monthDay50); org.joda.time.format.DateTimePrinter dateTimePrinter55 = null; org.joda.time.format.DateTimeParser dateTimeParser56 = null; org.joda.time.format.DateTimeFormatter dateTimeFormatter57 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter55, dateTimeParser56); java.util.Locale locale58 = dateTimeFormatter57.getLocale(); boolean boolean59 = monthDay50.equals((java.lang.Object) locale58); int int60 = skipUndoDateTimeField49.getMinimumValue((org.joda.time.ReadablePartial) monthDay50); org.joda.time.MonthDay monthDay61 = org.joda.time.MonthDay.now(); org.joda.time.DateTimeFieldType dateTimeFieldType62 = org.joda.time.DateTimeFieldType.dayOfMonth(); boolean boolean63 = monthDay61.isSupported(dateTimeFieldType62); int int64 = monthDay61.getDayOfMonth(); boolean boolean65 = org.joda.time.DateTimeUtils.isContiguous((org.joda.time.ReadablePartial) monthDay61); org.joda.time.format.DateTimePrinter dateTimePrinter66 = null; org.joda.time.format.DateTimeParser dateTimeParser67 = null; org.joda.time.format.DateTimeFormatter dateTimeFormatter68 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter66, dateTimeParser67); java.util.Locale locale69 = dateTimeFormatter68.getLocale(); boolean boolean70 = monthDay61.equals((java.lang.Object) locale69); org.joda.time.chrono.GregorianChronology gregorianChronology72 = org.joda.time.chrono.GregorianChronology.getInstanceUTC(); int int74 = gregorianChronology72.getDaysInMonthMax((long) 'a'); int int76 = gregorianChronology72.getDaysInMonthMax(3); org.joda.time.DateTimeZone dateTimeZone78 = org.joda.time.DateTimeZone.forOffsetHours(10); org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone79 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone78); org.joda.time.DateTime dateTime80 = org.joda.time.DateTime.now(dateTimeZone78); org.joda.time.DateTime.Property property81 = dateTime80.millisOfSecond(); org.joda.time.DateTime dateTime83 = property81.addToCopy(100); int int84 = property81.getLeapAmount(); org.joda.time.DateTime dateTime86 = property81.setCopy(0); org.joda.time.Interval interval87 = property81.toInterval(); org.joda.time.Period period88 = interval87.toPeriod(); int[] intArray90 = gregorianChronology72.get((org.joda.time.ReadablePeriod) period88, 31556952000L); int[] intArray92 = skipUndoDateTimeField49.add((org.joda.time.ReadablePartial) monthDay61, (int) 'a', intArray90, (int) (short) 0); int int93 = basicSingleEraDateTimeField1.getMinimumValue((org.joda.time.ReadablePartial) monthDay25, intArray92); }
Code: public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) { if (valueToAdd == 0) { return values; } if (DateTimeUtils.isContiguous(partial)) { long instant = 0L; for (int i = 0, isize = partial.size(); i < isize; i++) { instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]); } instant = add(instant, valueToAdd); return iChronology.get(partial, instant); } else { return super.add(partial, fieldIndex, values, valueToAdd); } }
tensor([[0.0101, 0.0378, 0.0264,  ..., 0.0146, 0.0047, 0.0047],
        [0.0113, 0.0336, 0.0219,  ..., 0.0197, 0.0045, 0.0045],
        [0.0076, 0.0436, 0.0194,  ..., 0.0176, 0.0046, 0.0046],
        ...,
        [0.0081, 0.0470, 0.0251,  ..., 0.0150, 0.0040, 0.0040],
        [0.0076, 0.0356, 0.0253,  ..., 0.0164, 0.0040, 0.0040],
        [0.0076, 0.0356, 0.0253,  ..., 0.0164, 0.0040, 0.0040]])