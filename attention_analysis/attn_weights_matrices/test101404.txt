101404
Test: public void test386() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test386"); org.joda.time.format.DateTimeFormatterBuilder.CharacterLiteral characterLiteral1 = new org.joda.time.format.DateTimeFormatterBuilder.CharacterLiteral(' '); java.io.Writer writer2 = null; org.joda.time.ReadablePartial readablePartial3 = null; org.joda.time.MutableDateTime mutableDateTime4 = org.joda.time.MutableDateTime.now(); org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetMillis((int) ' '); long long9 = dateTimeZone6.adjustOffset((long) 1, false); int int11 = dateTimeZone6.getOffsetFromLocal((long) (byte) 1); mutableDateTime4.setZoneRetainFields(dateTimeZone6); org.joda.time.MutableDateTime.Property property13 = mutableDateTime4.year(); org.joda.time.MutableDateTime mutableDateTime14 = property13.roundHalfFloor(); org.joda.time.chrono.ISOChronology iSOChronology15 = org.joda.time.chrono.ISOChronology.getInstanceUTC(); org.joda.time.DateTimeField dateTimeField16 = iSOChronology15.secondOfDay(); long long19 = dateTimeField16.getDifferenceAsLong((long) (-1), (long) 1); org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.dayOfMonth(); org.joda.time.field.OffsetDateTimeField offsetDateTimeField22 = new org.joda.time.field.OffsetDateTimeField(dateTimeField16, dateTimeFieldType20, 10919); org.joda.time.MutableDateTime mutableDateTime23 = org.joda.time.MutableDateTime.now(); int int24 = mutableDateTime23.getDayOfMonth(); org.joda.time.MutableDateTime.Property property25 = mutableDateTime23.weekOfWeekyear(); org.joda.time.MutableDateTime mutableDateTime26 = org.joda.time.MutableDateTime.now(); org.joda.time.DateTime dateTime27 = mutableDateTime26.toDateTime(); org.joda.time.DateTime dateTime29 = dateTime27.withMinuteOfHour((int) (short) 1); org.joda.time.DateTime dateTime31 = dateTime29.plusHours(10); int int32 = dateTime31.getSecondOfDay(); org.joda.time.LocalDateTime localDateTime33 = dateTime31.toLocalDateTime(); int int35 = localDateTime33.getValue(3); int int36 = property25.compareTo((org.joda.time.ReadablePartial) localDateTime33); java.util.Locale locale37 = null; java.lang.String str38 = offsetDateTimeField22.getAsText((org.joda.time.ReadablePartial) localDateTime33, locale37); java.util.Locale locale40 = null; java.lang.String str41 = offsetDateTimeField22.getAsText((long) 10911, locale40); org.joda.time.DurationField durationField42 = offsetDateTimeField22.getRangeDurationField(); int int43 = offsetDateTimeField22.getMaximumValue(); org.joda.time.DateTimeFieldType dateTimeFieldType45 = org.joda.time.DateTimeFieldType.centuryOfEra(); org.joda.time.format.DateTimeFormatterBuilder.UnpaddedNumber unpaddedNumber48 = new org.joda.time.format.DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType45, (int) (short) 100, true); org.joda.time.Chronology chronology50 = null; java.util.Locale locale51 = null; org.joda.time.format.DateTimeParserBucket dateTimeParserBucket52 = new org.joda.time.format.DateTimeParserBucket((long) '#', chronology50, locale51); int int55 = unpaddedNumber48.parseInto(dateTimeParserBucket52, "2021-07-09T17:49:08.298-07:00", 10862); java.util.Locale locale56 = dateTimeParserBucket52.getLocale(); java.lang.String str57 = offsetDateTimeField22.getAsText(10893282, locale56); java.util.Calendar calendar58 = mutableDateTime14.toCalendar(locale56); try { characterLiteral1.printTo(writer2, readablePartial3, locale56); } catch (java.lang.NullPointerException e) { } }
Code: public int parseInto(ReadWritableInstant instant, String text, int position) { DateTimeParser parser = requireParser(); if (instant == null) { throw new IllegalArgumentException("Instant must not be null"); } long instantMillis = instant.getMillis(); Chronology chrono = instant.getChronology(); long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis); chrono = selectChronology(chrono); int defaultYear = chrono.year().get(instantLocal); DateTimeParserBucket bucket = new DateTimeParserBucket( instantLocal, chrono, iLocale, iPivotYear, defaultYear); int newPos = parser.parseInto(bucket, text, position); instant.setMillis(bucket.computeMillis(false, text)); if (iOffsetParsed && bucket.getOffsetInteger() != null) { int parsedOffset = bucket.getOffsetInteger(); DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset); chrono = chrono.withZone(parsedZone); } else if (bucket.getZone() != null) { chrono = chrono.withZone(bucket.getZone()); } instant.setChronology(chrono); if (iZone != null) { instant.setZone(iZone); } return newPos; }
tensor([[0.0073, 0.0044, 0.0100,  ..., 0.0082, 0.0265, 0.0034],
        [0.0049, 0.0034, 0.0085,  ..., 0.0079, 0.0263, 0.0025],
        [0.0062, 0.0037, 0.0086,  ..., 0.0088, 0.0302, 0.0028],
        ...,
        [0.0048, 0.0027, 0.0092,  ..., 0.0068, 0.0312, 0.0028],
        [0.0056, 0.0029, 0.0073,  ..., 0.0071, 0.0302, 0.0018],
        [0.0053, 0.0040, 0.0100,  ..., 0.0118, 0.0199, 0.0030]])