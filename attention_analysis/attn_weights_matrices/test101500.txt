101500
Test: public void test469() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test469"); org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime(); org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (short) 0); org.joda.time.ReadableDuration readableDuration3 = null; mutableDateTime2.add(readableDuration3, (int) ' '); boolean boolean6 = dateTime0.isAfter((org.joda.time.ReadableInstant) mutableDateTime2); long long7 = dateTime0.getMillis(); int int8 = dateTime0.getYearOfCentury(); org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = org.joda.time.format.ISODateTimeFormat.basicDateTimeNoMillis(); java.util.Locale locale10 = null; org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = dateTimeFormatter9.withLocale(locale10); java.lang.Object obj12 = null; org.joda.time.Instant instant13 = new org.joda.time.Instant(obj12); org.joda.time.DateTimeZone dateTimeZone14 = instant13.getZone(); long long16 = dateTimeZone14.convertUTCToLocal((long) 10); org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = dateTimeFormatter11.withZone(dateTimeZone14); org.joda.time.MutableDateTime mutableDateTime18 = dateTime0.toMutableDateTime(dateTimeZone14); org.joda.time.MutableDateTime.Property property19 = mutableDateTime18.secondOfDay(); org.joda.time.MutableDateTime mutableDateTime21 = property19.addWrapField((int) ' '); org.joda.time.DateTimeFieldType dateTimeFieldType22 = property19.getFieldType(); org.joda.time.format.DateTimeFormatterBuilder.FixedNumber fixedNumber25 = new org.joda.time.format.DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType22, 100, false); java.io.Writer writer26 = null; org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime(); org.joda.time.DateTime dateTime29 = dateTime27.minusDays(10); int int30 = dateTime27.getDayOfWeek(); org.joda.time.DateTime dateTime32 = dateTime27.plusYears((int) '4'); org.joda.time.TimeOfDay timeOfDay33 = dateTime32.toTimeOfDay(); org.joda.time.DateTimeFieldType dateTimeFieldType34 = org.joda.time.DateTimeFieldType.dayOfYear(); org.joda.time.format.DateTimeFormatterBuilder.FixedNumber fixedNumber37 = new org.joda.time.format.DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType34, 125, false); org.joda.time.chrono.ISOChronology iSOChronology39 = org.joda.time.chrono.ISOChronology.getInstance(); java.lang.Object obj40 = null; org.joda.time.Instant instant41 = new org.joda.time.Instant(obj40); org.joda.time.DateTimeZone dateTimeZone42 = instant41.getZone(); org.joda.time.Chronology chronology43 = iSOChronology39.withZone(dateTimeZone42); org.joda.time.MutableDateTime mutableDateTime45 = new org.joda.time.MutableDateTime((long) (short) 0); org.joda.time.chrono.GJChronology gJChronology46 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone42, (org.joda.time.ReadableInstant) mutableDateTime45); int int47 = gJChronology46.getMinimumDaysInFirstWeek(); java.util.Locale locale48 = null; org.joda.time.format.DateTimeParserBucket dateTimeParserBucket50 = new org.joda.time.format.DateTimeParserBucket(40L, (org.joda.time.Chronology) gJChronology46, locale48, (java.lang.Integer) 2000); int int53 = fixedNumber37.parseInto(dateTimeParserBucket50, "", 12); java.util.Locale locale54 = dateTimeParserBucket50.getLocale(); try { fixedNumber25.printTo(writer26, (org.joda.time.ReadablePartial) timeOfDay33, locale54); } catch (java.lang.NullPointerException e) { } }
Code: public int parseInto(ReadWritableInstant instant, String text, int position) { DateTimeParser parser = requireParser(); if (instant == null) { throw new IllegalArgumentException("Instant must not be null"); } long instantMillis = instant.getMillis(); Chronology chrono = instant.getChronology(); long instantLocal = instantMillis * chrono.getZone().getOffset(instantMillis); chrono = selectChronology(chrono); DateTimeParserBucket bucket = new DateTimeParserBucket( instantLocal, chrono, iLocale, iPivotYear, chrono.year().get(instantLocal)); int newPos = parser.parseInto(bucket, text, position); instant.setMillis(bucket.computeMillis(false, text)); if (false) { int parsedOffset = bucket.getOffsetInteger(); DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset); chrono = chrono.withZone(parsedZone); } else if (bucket.getZone() != null) { ; } instant.setChronology(chrono); if (false) { instant.setZone(iZone); } return newPos; }
tensor([[0.0083, 0.0051, 0.0114,  ..., 0.0093, 0.0307, 0.0037],
        [0.0055, 0.0039, 0.0095,  ..., 0.0089, 0.0301, 0.0027],
        [0.0070, 0.0042, 0.0098,  ..., 0.0098, 0.0347, 0.0031],
        ...,
        [0.0053, 0.0030, 0.0104,  ..., 0.0076, 0.0357, 0.0030],
        [0.0063, 0.0034, 0.0083,  ..., 0.0080, 0.0356, 0.0020],
        [0.0060, 0.0045, 0.0112,  ..., 0.0131, 0.0223, 0.0033]])