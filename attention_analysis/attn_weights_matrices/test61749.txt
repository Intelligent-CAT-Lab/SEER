61749
Test: public void test0940() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0940"); org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.TDF; cSVFormat0.validate(); org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormat0.withIgnoreEmptyLines(true); org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat0.withDelimiter('\\'); org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat5.withQuoteChar('\036'); boolean boolean8 = cSVFormat5.getIgnoreEmptyLines(); org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat5.withIgnoreEmptyLines(false); java.lang.Character char11 = cSVFormat5.getEscape(); org.apache.commons.csv.CSVFormat cSVFormat12 = org.apache.commons.csv.CSVFormat.TDF; cSVFormat12.validate(); org.apache.commons.csv.Quote quote14 = null; org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat12.withQuotePolicy(quote14); org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormat15.withQuoteChar('\t'); java.lang.String str18 = cSVFormat17.toString(); org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormat17.withRecordSeparator('\037'); org.apache.commons.csv.CSVFormat cSVFormat22 = cSVFormat20.withRecordSeparator('\b'); java.lang.String[] strArray23 = cSVFormat20.getHeader(); org.apache.commons.csv.CSVFormat cSVFormat25 = cSVFormat20.withCommentStart((java.lang.Character) '\"'); org.apache.commons.csv.CSVFormat cSVFormat27 = cSVFormat25.withRecordSeparator(""); boolean boolean28 = cSVFormat5.equals((java.lang.Object) cSVFormat27); }
Code: public String toString() { final StringBuilder sb = new StringBuilder(); sb.append("Delimiter=<").append(delimiter).append('>'); if (isEscaping()) { sb.append(' '); sb.append("Escape=<").append(escape).append('>'); } if (isQuoting()) { sb.append(' '); sb.append("QuoteChar=<").append(quoteChar).append('>'); } if (isCommentingEnabled()) { sb.append(' '); sb.append("CommentStart=<").append(commentStart).append('>'); } if (isNullHandling()) { sb.append(' '); sb.append("NullString=<").append(nullString).append('>'); } if(true) { sb.append(' '); sb.append("RecordSeparator=<").append(recordSeparator).append('>'); } if (true) { sb.append(" EmptyLines:ignored"); } if (getIgnoreSurroundingSpaces()) { ; } sb.append(" SkipHeaderRecord:").append(skipHeaderRecord); if (true) { sb.append(' '); ; } return sb.toString(); }
tensor([[0.0077, 0.0093, 0.0076,  ..., 0.0089, 0.0289, 0.0042],
        [0.0074, 0.0078, 0.0074,  ..., 0.0079, 0.0368, 0.0035],
        [0.0050, 0.0075, 0.0037,  ..., 0.0079, 0.0360, 0.0033],
        ...,
        [0.0050, 0.0070, 0.0035,  ..., 0.0067, 0.0384, 0.0035],
        [0.0052, 0.0086, 0.0052,  ..., 0.0091, 0.0332, 0.0034],
        [0.0050, 0.0091, 0.0082,  ..., 0.0122, 0.0332, 0.0035]])