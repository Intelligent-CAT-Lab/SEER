18729
Test: public void test006() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test006"); com.google.javascript.rhino.Node node1 = null; com.google.javascript.jscomp.LightweightMessageFormatter lightweightMessageFormatter2 = com.google.javascript.jscomp.LightweightMessageFormatter.withoutSource(); com.google.javascript.jscomp.CheckLevel checkLevel6 = com.google.javascript.jscomp.CheckLevel.WARNING; com.google.javascript.jscomp.DiagnosticType diagnosticType9 = com.google.javascript.jscomp.DiagnosticType.warning("", ""); java.lang.String[] strArray16 = new java.lang.String[] { "hi!", "hi!", "", "hi!", "", ": hi!" }; com.google.javascript.jscomp.JSError jSError17 = com.google.javascript.jscomp.JSError.make(": hi!", (int) (short) 1, (int) (short) 1, checkLevel6, diagnosticType9, strArray16); com.google.javascript.rhino.Node node18 = jSError17.node; boolean boolean20 = jSError17.equals((java.lang.Object) ": hi!"); com.google.javascript.jscomp.CheckLevel checkLevel21 = jSError17.level; java.lang.String str22 = lightweightMessageFormatter2.getLevelName(checkLevel21); com.google.javascript.jscomp.CheckLevel checkLevel26 = com.google.javascript.jscomp.CheckLevel.WARNING; com.google.javascript.jscomp.DiagnosticType diagnosticType29 = com.google.javascript.jscomp.DiagnosticType.warning("", ""); java.lang.String[] strArray36 = new java.lang.String[] { "hi!", "hi!", "", "hi!", "", ": hi!" }; com.google.javascript.jscomp.JSError jSError37 = com.google.javascript.jscomp.JSError.make(": hi!", (int) (short) 1, (int) (short) 1, checkLevel26, diagnosticType29, strArray36); com.google.javascript.rhino.Node node38 = jSError37.node; java.lang.String str39 = lightweightMessageFormatter2.formatError(jSError37); com.google.javascript.jscomp.CheckLevel checkLevel43 = com.google.javascript.jscomp.CheckLevel.WARNING; boolean boolean44 = checkLevel43.isOn(); com.google.javascript.jscomp.DiagnosticType diagnosticType47 = com.google.javascript.jscomp.DiagnosticType.warning("", "hi!"); java.lang.Object[] objArray48 = null; java.lang.String str49 = diagnosticType47.format(objArray48); java.lang.String[] strArray52 = new java.lang.String[] { "hi!", "" }; com.google.javascript.jscomp.JSError jSError53 = com.google.javascript.jscomp.JSError.make("hi!", 1, (int) (short) 100, checkLevel43, diagnosticType47, strArray52); java.lang.String str54 = lightweightMessageFormatter2.formatWarning(jSError53); com.google.javascript.jscomp.CheckLevel checkLevel55 = jSError53.level; com.google.javascript.jscomp.CheckLevel checkLevel59 = com.google.javascript.jscomp.CheckLevel.WARNING; com.google.javascript.jscomp.DiagnosticType diagnosticType62 = com.google.javascript.jscomp.DiagnosticType.warning("", ""); java.lang.String[] strArray69 = new java.lang.String[] { "hi!", "hi!", "", "hi!", "", ": hi!" }; com.google.javascript.jscomp.JSError jSError70 = com.google.javascript.jscomp.JSError.make(": hi!", (int) (short) 1, (int) (short) 1, checkLevel59, diagnosticType62, strArray69); java.lang.String str71 = diagnosticType62.toString(); java.lang.String[] strArray74 = new java.lang.String[] { "hi!:1: WARNING - hi!\n", "" }; try { com.google.javascript.jscomp.JSError jSError75 = com.google.javascript.jscomp.JSError.make(". at : hi! line 1 : 1", node1, checkLevel55, diagnosticType62, strArray74); } catch (java.lang.NullPointerException e) { } }
Code: private String format(JSError error, boolean warning) { SourceExcerptProvider source = getSource(); String sourceExcerpt = source == null ? null : excerpt.get( source, error.sourceName, error.lineNumber, excerptFormatter); StringBuilder b = new StringBuilder(); if (error.sourceName != null) { b.append(error.sourceName); if (error.lineNumber > 0) { b.append(':'); b.append(error.lineNumber); } b.append(": "); } ; b.append(" - "); b.append(error.description); b.append('\n'); if (sourceExcerpt != null) { b.append(sourceExcerpt); b.append('\n'); int charno = error.getCharno(); if (0 <= charno && charno <= sourceExcerpt.length()) { for (int i = -1; i != charno; i++) { char c = sourceExcerpt.charAt(i); if (Character.isWhitespace(c)) { b.append(c); } else { b.append(' '); } } b.append("^\n"); } } return b.toString(); }
tensor([[0.0101, 0.0077, 0.0053,  ..., 0.0068, 0.0170, 0.0032],
        [0.0080, 0.0071, 0.0050,  ..., 0.0066, 0.0127, 0.0027],
        [0.0087, 0.0070, 0.0034,  ..., 0.0057, 0.0145, 0.0021],
        ...,
        [0.0090, 0.0075, 0.0036,  ..., 0.0058, 0.0158, 0.0026],
        [0.0094, 0.0082, 0.0034,  ..., 0.0066, 0.0140, 0.0019],
        [0.0075, 0.0085, 0.0043,  ..., 0.0104, 0.0169, 0.0027]])