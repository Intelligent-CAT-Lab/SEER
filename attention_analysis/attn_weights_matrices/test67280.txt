67280
Test: public void test3() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test3"); com.fasterxml.jackson.databind.deser.std.StringArrayDeserializer stringArrayDeserializer0 = com.fasterxml.jackson.databind.deser.std.StringArrayDeserializer.instance; boolean boolean1 = stringArrayDeserializer0.isCachable(); com.fasterxml.jackson.databind.node.JsonNodeFactory jsonNodeFactory3 = new com.fasterxml.jackson.databind.node.JsonNodeFactory(true); com.fasterxml.jackson.databind.node.POJONode pOJONode5 = jsonNodeFactory3.POJONode((java.lang.Object) false); java.util.List<com.fasterxml.jackson.databind.JsonNode> jsonNodeList7 = pOJONode5.findValues(""); java.lang.String[] strArray12 = new java.lang.String[] { "10", "10", "10" }; java.util.ArrayList<java.lang.String> strList13 = new java.util.ArrayList<java.lang.String>(); boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList13, strArray12); java.util.List<java.lang.String> strList15 = pOJONode5.findValuesAsText("10", (java.util.List<java.lang.String>) strList13); com.fasterxml.jackson.core.JsonParser jsonParser16 = pOJONode5.traverse(); com.fasterxml.jackson.databind.DeserializationContext deserializationContext17 = null; try { java.lang.String[] strArray18 = stringArrayDeserializer0.deserialize(jsonParser16, deserializationContext17); } catch (java.lang.NullPointerException e) { } }
Code: public String[] deserialize(JsonParser jp, DeserializationContext ctxt){if (!jp.isExpectedStartArrayToken()) {return handleNonArray(jp, ctxt);}if (_elementDeserializer != null) {return _deserializeCustom(jp, ctxt);}final ObjectBuffer buffer = ctxt.leaseObjectBuffer();Object[] chunk = buffer.resetAndStart();int ix = 0;JsonToken t;while ((t = jp.nextToken()) != JsonToken.END_ARRAY) {String value;if (t == JsonToken.VALUE_STRING) {value = jp.getText();} else if (t == JsonToken.VALUE_NULL) {value = null; } else {value = _parseString(jp, ctxt);}if (ix >= chunk.length) {chunk = buffer.appendCompletedChunk(chunk);;};}String[] result = buffer.completeAndClearBuffer(chunk, ix, String.class);ctxt.returnObjectBuffer(buffer);return result;}
tensor([[0.0117, 0.0065, 0.0202,  ..., 0.0325, 0.0106, 0.0133],
        [0.0084, 0.0041, 0.0179,  ..., 0.0306, 0.0092, 0.0137],
        [0.0078, 0.0043, 0.0203,  ..., 0.0290, 0.0075, 0.0095],
        ...,
        [0.0098, 0.0049, 0.0180,  ..., 0.0282, 0.0098, 0.0115],
        [0.0088, 0.0058, 0.0184,  ..., 0.0239, 0.0112, 0.0115],
        [0.0099, 0.0063, 0.0231,  ..., 0.0274, 0.0096, 0.0093]])