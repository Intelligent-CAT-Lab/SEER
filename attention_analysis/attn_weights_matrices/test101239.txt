101239
Test: public void test144() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test144"); org.joda.time.JodaTimePermission jodaTimePermission1 = new org.joda.time.JodaTimePermission("DateTimeField[weekyearOfCentury]"); org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(); boolean boolean3 = org.joda.time.DateTimeUtils.isContiguous((org.joda.time.ReadablePartial) localDate2); jodaTimePermission1.checkGuard((java.lang.Object) boolean3); java.lang.String str5 = jodaTimePermission1.getActions(); org.joda.time.chrono.ISOChronology iSOChronology6 = org.joda.time.chrono.ISOChronology.getInstance(); java.lang.String str7 = iSOChronology6.toString(); org.joda.time.Chronology chronology8 = iSOChronology6.withUTC(); org.joda.time.DateTimeField dateTimeField9 = iSOChronology6.millisOfDay(); org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate(); org.joda.time.DateTime dateTime11 = localDate10.toDateTimeAtCurrentTime(); int[] intArray12 = localDate10.getValues(); org.joda.time.LocalDate localDate14 = localDate10.minusWeeks((int) (byte) 1); int[] intArray16 = iSOChronology6.get((org.joda.time.ReadablePartial) localDate10, (long) (short) -1); org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate(); boolean boolean18 = org.joda.time.DateTimeUtils.isContiguous((org.joda.time.ReadablePartial) localDate17); org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetMillis(0); org.joda.time.Interval interval21 = localDate17.toInterval(dateTimeZone20); org.joda.time.DurationFieldType durationFieldType22 = org.joda.time.DurationFieldType.years(); java.lang.String str23 = durationFieldType22.toString(); org.joda.time.LocalDate localDate25 = localDate17.withFieldAdded(durationFieldType22, 36); int int26 = localDate10.compareTo((org.joda.time.ReadablePartial) localDate17); int int27 = localDate10.getEra(); boolean boolean28 = jodaTimePermission1.equals((java.lang.Object) localDate10); java.lang.String str29 = jodaTimePermission1.getActions(); java.security.PermissionCollection permissionCollection30 = jodaTimePermission1.newPermissionCollection(); org.joda.time.JodaTimePermission jodaTimePermission32 = new org.joda.time.JodaTimePermission("DateTimeField[weekyearOfCentury]"); org.joda.time.LocalDate localDate33 = new org.joda.time.LocalDate(); boolean boolean34 = org.joda.time.DateTimeUtils.isContiguous((org.joda.time.ReadablePartial) localDate33); jodaTimePermission32.checkGuard((java.lang.Object) boolean34); java.lang.String str36 = jodaTimePermission32.getActions(); boolean boolean37 = jodaTimePermission1.implies((java.security.Permission) jodaTimePermission32); }
Code: public int compareTo(DurationField durationField) { if (durationField.isSupported()) { return 1; } return 0; }
tensor([[0.0617, 0.0399, 0.1322, 0.0504, 0.0775, 0.1658, 0.0973, 0.0775, 0.0673,
         0.0319, 0.0252, 0.0673, 0.0806, 0.0252],
        [0.0388, 0.0290, 0.1369, 0.0501, 0.0821, 0.2237, 0.1002, 0.0821, 0.0620,
         0.0195, 0.0183, 0.0620, 0.0770, 0.0183],
        [0.0645, 0.0324, 0.1493, 0.0580, 0.0914, 0.1544, 0.0817, 0.0914, 0.0592,
         0.0248, 0.0203, 0.0592, 0.0931, 0.0203],
        [0.0426, 0.0230, 0.1578, 0.0536, 0.0754, 0.2071, 0.1090, 0.0754, 0.0584,
         0.0180, 0.0196, 0.0584, 0.0821, 0.0196],
        [0.0599, 0.0289, 0.1584, 0.0606, 0.0946, 0.1034, 0.0824, 0.0946, 0.0691,
         0.0336, 0.0336, 0.0691, 0.0782, 0.0336],
        [0.0363, 0.0180, 0.2493, 0.0466, 0.0774, 0.2049, 0.0775, 0.0774, 0.0478,
         0.0117, 0.0118, 0.0478, 0.0817, 0.0118],
        [0.0526, 0.0390, 0.1605, 0.0596, 0.0819, 0.1301, 0.0875, 0.0819, 0.0649,
         0.0336, 0.0270, 0.0649, 0.0896, 0.0270],
        [0.0599, 0.0289, 0.1584, 0.0606, 0.0946, 0.1034, 0.0824, 0.0946, 0.0691,
         0.0336, 0.0336, 0.0691, 0.0782, 0.0336],
        [0.0415, 0.0250, 0.1995, 0.0477, 0.0800, 0.1722, 0.0894, 0.0800, 0.0605,
         0.0242, 0.0220, 0.0605, 0.0755, 0.0220],
        [0.0516, 0.0345, 0.1477, 0.0557, 0.0788, 0.1684, 0.0915, 0.0788, 0.0743,
         0.0225, 0.0215, 0.0743, 0.0791, 0.0215],
        [0.0402, 0.0309, 0.1352, 0.0508, 0.0936, 0.1530, 0.0852, 0.0936, 0.0850,
         0.0224, 0.0206, 0.0850, 0.0842, 0.0206],
        [0.0415, 0.0250, 0.1995, 0.0477, 0.0800, 0.1722, 0.0894, 0.0800, 0.0605,
         0.0242, 0.0220, 0.0605, 0.0755, 0.0220],
        [0.0536, 0.0305, 0.1309, 0.0608, 0.0852, 0.1796, 0.0764, 0.0852, 0.0661,
         0.0299, 0.0234, 0.0661, 0.0888, 0.0234],
        [0.0402, 0.0309, 0.1352, 0.0508, 0.0936, 0.1530, 0.0852, 0.0936, 0.0850,
         0.0224, 0.0206, 0.0850, 0.0842, 0.0206]])