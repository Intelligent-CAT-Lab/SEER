27891
Test: public void test12() throws Throwable { Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X; Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer()); doReturn(0, 0).when(precision_DoubleEquivalence0).compare(anyDouble() , anyDouble()); doReturn(true, false, true, false).when(precision_DoubleEquivalence0).eq(anyDouble() , anyDouble()); Line line0 = mock(Line.class, new ViolatedAssumptionAnswer()); doReturn(precision_DoubleEquivalence0).when(line0).getPrecision(); doReturn((Line) null).when(line0).transform(nullable(org.apache.commons.geometry.core.Transform.class)); ReverseRay reverseRay0 = new ReverseRay(line0, vector2D_Unit0); Precision.DoubleEquivalence precision_DoubleEquivalence1 = reverseRay0.getPrecision(); Line line1 = new Line(vector2D_Unit0, 2208.6685478535, precision_DoubleEquivalence1); Line line2 = line1.reverse(); AffineTransformMatrix2D affineTransformMatrix2D0 = AffineTransformMatrix2D.createRotation((-3266.01052021452)); line2.transform(affineTransformMatrix2D0); ReverseRay reverseRay1 = line1.reverseRayTo((double) 3155); ReverseRay reverseRay2 = reverseRay1.transform(affineTransformMatrix2D0); reverseRay2.splitOnIntersection(line1, vector2D_Unit0); double double0 = (-886.47163676); reverseRay1.classifyAbscissa(double0); ReverseRay reverseRay3 = reverseRay0.transform(affineTransformMatrix2D0); }
Code: public boolean isFull() { return false; }
[[0.10932858 0.26952657 0.15167007 0.14887953 0.12070354 0.15263124
 0.04726045]
[0.06811573 0.35046408 0.13009508 0.17261635 0.11300682 0.13349712
 0.03220481]
[0.0851486  0.31495225 0.14135379 0.13920434 0.10345798 0.1688772
 0.04700581]
[0.10748276 0.23311113 0.1394212  0.17591783 0.12329198 0.15924317
 0.06153201]
[0.07053501 0.3510045  0.13803421 0.14317408 0.10150041 0.15678284
 0.03896898]
[0.10067263 0.26209533 0.14362255 0.13958131 0.11732085 0.1803129
 0.05639444]
[0.07220556 0.25229934 0.13527364 0.18417409 0.15729749 0.15904953
 0.03970032]]