64096
Test: public void test073() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test073"); com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler(); com.fasterxml.jackson.core.io.IOContext iOContext3 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) (byte) 10, true); com.fasterxml.jackson.core.ObjectCodec objectCodec5 = null; java.io.OutputStream outputStream6 = null; com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator7 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext3, (int) (byte) 1, objectCodec5, outputStream6); uTF8JsonGenerator7.writeBoolean(true); int[] intArray10 = uTF8JsonGenerator7._outputEscapes; com.fasterxml.jackson.core.Version version11 = uTF8JsonGenerator7.version(); com.fasterxml.jackson.core.JsonStreamContext jsonStreamContext12 = uTF8JsonGenerator7.getOutputContext(); com.fasterxml.jackson.core.JsonGenerator jsonGenerator14 = uTF8JsonGenerator7.setHighestNonEscapedChar(57343); uTF8JsonGenerator7.writeRaw("com.fasterxml.jackson.core.JsonParseException: hi!"); com.fasterxml.jackson.core.SerializableString serializableString17 = null; try { uTF8JsonGenerator7.writeFieldName(serializableString17); } catch (java.lang.NullPointerException e) { } }
Code: public void writeRaw(String text, int offset, int len) throws IOException { final char[] buf = _charBuffer; if (len <= buf.length) { text.getChars(offset, offset+len, buf, 0); _writeRawSegment(buf, 0, len); return; } final int maxChunk = (_outputEnd >> 2) + (_outputEnd >> 4); final int maxBytes = maxChunk * 3; while (len > 0) { int len2 = Math.min(maxChunk, len); text.getChars(offset, offset+len2, buf, 0); if ((_outputTail + maxBytes) > _outputEnd) { _flushBuffer(); } if (len > 0) { char ch = buf[len2-1]; if ((ch >= SURR1_FIRST) && (ch <= SURR1_LAST)) { --len2; } } _writeRawSegment(buf, 0, len2); offset += len2; len -= len2; } }
tensor([[0.0064, 0.0053, 0.0041,  ..., 0.0096, 0.0029, 0.0029],
        [0.0048, 0.0045, 0.0043,  ..., 0.0082, 0.0029, 0.0029],
        [0.0049, 0.0038, 0.0046,  ..., 0.0083, 0.0020, 0.0020],
        ...,
        [0.0051, 0.0046, 0.0047,  ..., 0.0086, 0.0032, 0.0032],
        [0.0045, 0.0042, 0.0056,  ..., 0.0088, 0.0026, 0.0026],
        [0.0045, 0.0042, 0.0056,  ..., 0.0088, 0.0026, 0.0026]])