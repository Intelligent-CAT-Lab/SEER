17987
Test: public void test146() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test146"); com.google.javascript.rhino.Node node1 = null; com.google.javascript.jscomp.DiagnosticType diagnosticType2 = com.google.javascript.jscomp.CheckAccessControls.BAD_PRIVATE_GLOBAL_ACCESS; java.lang.String[] strArray9 = new java.lang.String[] { "hi!", "^", "", "", "", "hi!" }; com.google.javascript.jscomp.JSError jSError10 = com.google.javascript.jscomp.JSError.make("^", node1, diagnosticType2, strArray9); com.google.javascript.jscomp.CommandLineRunner commandLineRunner11 = new com.google.javascript.jscomp.CommandLineRunner(strArray9); com.google.javascript.jscomp.JSModule jSModule12 = null; java.lang.String str13 = commandLineRunner11.expandManifest(jSModule12); com.google.javascript.jscomp.CompilerOptions compilerOptions14 = commandLineRunner11.createOptions(); com.google.javascript.jscomp.CompilerOptions compilerOptions15 = new com.google.javascript.jscomp.CompilerOptions(); com.google.javascript.jscomp.CheckLevel checkLevel16 = com.google.javascript.jscomp.CheckLevel.OFF; compilerOptions15.checkUnreachableCode = checkLevel16; commandLineRunner11.initOptionsFromFlags(compilerOptions15); boolean boolean19 = compilerOptions15.outputJsStringUsage; byte[] byteArray20 = compilerOptions15.inputVariableMapSerialized; }
Code: protected CompilerOptions createOptions() { CompilerOptions options = new CompilerOptions(); options.setCodingConvention(new ClosureCodingConvention()); CompilationLevel level = flags.compilation_level; level.setOptionsForCompilationLevel(options); if (flags.debug) { level.setDebugOptionsForCompilationLevel(options); } WarningLevel wLevel = flags.warning_level; wLevel.setOptionsForWarningLevel(options); for (FormattingOption formattingOption : flags.formatting) { formattingOption.applyToOptions(options); } options.closurePass = flags.process_closure_primitives; initOptionsFromFlags(options); return options; }
tensor([[0.0382, 0.0112, 0.0113,  ..., 0.0223, 0.0093, 0.0063],
        [0.0388, 0.0091, 0.0113,  ..., 0.0219, 0.0099, 0.0057],
        [0.0399, 0.0099, 0.0099,  ..., 0.0242, 0.0104, 0.0069],
        ...,
        [0.0396, 0.0091, 0.0119,  ..., 0.0197, 0.0108, 0.0068],
        [0.0428, 0.0131, 0.0144,  ..., 0.0236, 0.0113, 0.0065],
        [0.0361, 0.0123, 0.0122,  ..., 0.0308, 0.0121, 0.0072]])