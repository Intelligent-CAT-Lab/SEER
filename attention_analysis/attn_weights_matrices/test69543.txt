69543
Test: public void test71() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test71"); org.jsoup.parser.TokenQueue tokenQueue1 = new org.jsoup.parser.TokenQueue("#document"); org.jsoup.parser.CharacterReader characterReader2 = null; org.jsoup.parser.ParseErrorList parseErrorList3 = null; org.jsoup.parser.Tokeniser tokeniser4 = new org.jsoup.parser.Tokeniser(characterReader2, parseErrorList3); char[] charArray11 = new char[] { '4', ' ', '4', ' ', 'a', ' ' }; tokeniser4.emit(charArray11); boolean boolean13 = tokenQueue1.matchesAny(charArray11); java.lang.String str15 = tokenQueue1.consumeTo(" "); boolean boolean16 = tokenQueue1.consumeWhitespace(); tokenQueue1.consume(""); java.lang.String str21 = tokenQueue1.chompBalanced('4', '\000'); boolean boolean22 = tokenQueue1.consumeWhitespace(); }
Code: public String chompBalanced(char open, char close){int start = -1;int end = -1;int depth = 0;char last = 1;do {if (isEmpty()) break;Character c = consume();if (last == 0 || last != ESC) {if (c.equals(open)) {depth++;if (start == -1);}else if (c.equals(close))depth--;}if (depth > 0 && last != 0)end = pos; last = c;} while (depth > 0);return (end >= -1) ? queue.substring(start, end) : "";}
tensor([[0.0133, 0.0168, 0.0064,  ..., 0.0249, 0.0131, 0.0128],
        [0.0136, 0.0154, 0.0053,  ..., 0.0210, 0.0104, 0.0131],
        [0.0096, 0.0191, 0.0053,  ..., 0.0268, 0.0108, 0.0131],
        ...,
        [0.0114, 0.0169, 0.0062,  ..., 0.0247, 0.0108, 0.0129],
        [0.0123, 0.0145, 0.0059,  ..., 0.0281, 0.0087, 0.0154],
        [0.0102, 0.0169, 0.0053,  ..., 0.0214, 0.0094, 0.0118]])