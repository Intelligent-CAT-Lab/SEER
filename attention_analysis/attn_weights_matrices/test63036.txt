63036
Test: public void test677() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test677"); com.google.gson.DefaultDateTypeAdapter defaultDateTypeAdapter2 = new com.google.gson.DefaultDateTypeAdapter((int) (byte) 0, 0); com.google.gson.TypeAdapter<java.util.Date> dateTypeAdapter3 = defaultDateTypeAdapter2.nullSafe(); com.google.gson.TypeAdapter<java.util.Date> dateTypeAdapter4 = dateTypeAdapter3.nullSafe(); java.util.Date date5 = null; com.google.gson.JsonElement jsonElement6 = dateTypeAdapter3.toJsonTree(date5); com.google.gson.DefaultDateTypeAdapter defaultDateTypeAdapter9 = new com.google.gson.DefaultDateTypeAdapter((int) (byte) 0, 0); com.google.gson.internal.bind.JsonTreeWriter jsonTreeWriter10 = new com.google.gson.internal.bind.JsonTreeWriter(); com.google.gson.stream.JsonWriter jsonWriter12 = jsonTreeWriter10.value(false); boolean boolean13 = jsonWriter12.getSerializeNulls(); com.google.gson.stream.JsonWriter jsonWriter15 = jsonWriter12.value("$"); java.util.Date date16 = null; defaultDateTypeAdapter9.write(jsonWriter15, date16); java.util.Date date18 = null; com.google.gson.JsonElement jsonElement19 = defaultDateTypeAdapter9.toJsonTree(date18); java.util.Date date20 = dateTypeAdapter3.fromJsonTree(jsonElement19); com.google.gson.TypeAdapter<java.util.Date> dateTypeAdapter21 = dateTypeAdapter3.nullSafe(); com.google.gson.DefaultDateTypeAdapter defaultDateTypeAdapter24 = new com.google.gson.DefaultDateTypeAdapter((int) (byte) 0, 0); com.google.gson.TypeAdapter<java.util.Date> dateTypeAdapter25 = defaultDateTypeAdapter24.nullSafe(); com.google.gson.TypeAdapter<java.util.Date> dateTypeAdapter26 = dateTypeAdapter25.nullSafe(); java.util.Date date27 = null; com.google.gson.JsonElement jsonElement28 = dateTypeAdapter25.toJsonTree(date27); com.google.gson.internal.bind.JsonTreeReader jsonTreeReader29 = new com.google.gson.internal.bind.JsonTreeReader(jsonElement28); com.google.gson.stream.JsonToken jsonToken30 = jsonTreeReader29.peek(); jsonTreeReader29.setLenient(true); jsonTreeReader29.skipValue(); try { java.util.Date date34 = dateTypeAdapter3.read((com.google.gson.stream.JsonReader) jsonTreeReader29); } catch (java.lang.IllegalStateException e) { } }
Code: public Date read(JsonReader in) throws IOException { if (in.peek() != JsonToken.STRING) { throw new JsonParseException("The date should be a string value"); } Date date = deserializeToDate(in.nextString()); if (dateType == Date.class) { return date; } else if (dateType == Timestamp.class) { return new Timestamp(date.getTime()); } else if (dateType == java.sql.Date.class) { return new java.sql.Date(date.getTime()); } else { throw new AssertionError(); } }
tensor([[0.0125, 0.0063, 0.0167,  ..., 0.0147, 0.0057, 0.0057],
        [0.0106, 0.0058, 0.0163,  ..., 0.0164, 0.0040, 0.0040],
        [0.0084, 0.0045, 0.0139,  ..., 0.0158, 0.0044, 0.0044],
        ...,
        [0.0122, 0.0061, 0.0202,  ..., 0.0162, 0.0072, 0.0072],
        [0.0084, 0.0039, 0.0201,  ..., 0.0141, 0.0047, 0.0047],
        [0.0084, 0.0039, 0.0201,  ..., 0.0141, 0.0047, 0.0047]])