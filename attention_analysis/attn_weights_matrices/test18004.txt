18004
Test: public void test11() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test11"); com.google.javascript.jscomp.graph.LinkedDirectedGraph<java.io.Serializable, java.util.Set<java.lang.String>> serializableLinkedDirectedGraph0 = com.google.javascript.jscomp.graph.LinkedDirectedGraph.createWithNodeAnnotations(); java.util.List<com.google.javascript.jscomp.graph.Graph.GraphEdge<java.io.Serializable, java.util.Set<java.lang.String>>> serializableGraphEdgeList1 = serializableLinkedDirectedGraph0.getEdges(); java.util.List<com.google.javascript.jscomp.graph.GraphvizGraph.GraphvizNode> graphvizNodeList2 = serializableLinkedDirectedGraph0.getGraphvizNodes(); com.google.javascript.jscomp.PrepareAst.PrepareAnnotations prepareAnnotations3 = new com.google.javascript.jscomp.PrepareAst.PrepareAnnotations(); com.google.javascript.jscomp.AbstractCompiler abstractCompiler4 = null; com.google.javascript.jscomp.FlowSensitiveInlineVariables flowSensitiveInlineVariables5 = new com.google.javascript.jscomp.FlowSensitiveInlineVariables(abstractCompiler4); com.google.javascript.jscomp.ReferenceCollectingCallback.Behavior behavior6 = com.google.javascript.jscomp.ReferenceCollectingCallback.DO_NOTHING_BEHAVIOR; com.google.javascript.jscomp.AbstractCompiler abstractCompiler7 = null; com.google.javascript.jscomp.NodeTraversal.Callback callback8 = null; com.google.javascript.jscomp.ScopeCreator scopeCreator9 = null; com.google.javascript.jscomp.NodeTraversal nodeTraversal10 = new com.google.javascript.jscomp.NodeTraversal(abstractCompiler7, callback8, scopeCreator9); java.util.ArrayDeque<com.google.javascript.jscomp.ControlFlowGraph<com.google.javascript.rhino.Node>> nodeControlFlowGraphQueue11 = new java.util.ArrayDeque<com.google.javascript.jscomp.ControlFlowGraph<com.google.javascript.rhino.Node>>(); nodeTraversal10.cfgs = nodeControlFlowGraphQueue11; com.google.javascript.jscomp.ReferenceCollectingCallback.ReferenceMap referenceMap13 = null; behavior6.afterExitScope(nodeTraversal10, referenceMap13); com.google.javascript.rhino.Node[] nodeArray16 = new com.google.javascript.rhino.Node[] {}; com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node(0, nodeArray16); com.google.javascript.jscomp.Scope scope18 = null; com.google.javascript.jscomp.JSModule jSModule19 = null; com.google.javascript.jscomp.UseSite useSite20 = new com.google.javascript.jscomp.UseSite(node17, scope18, jSModule19); boolean boolean21 = com.google.javascript.jscomp.NodeUtil.isAssignmentOp(node17); com.google.javascript.jscomp.WarningsGuard[] warningsGuardArray23 = new com.google.javascript.jscomp.WarningsGuard[] {}; com.google.javascript.jscomp.ComposeWarningsGuard composeWarningsGuard24 = new com.google.javascript.jscomp.ComposeWarningsGuard(warningsGuardArray23); node17.putProp(0, (java.lang.Object) composeWarningsGuard24); com.google.javascript.rhino.Node[] nodeArray27 = new com.google.javascript.rhino.Node[] {}; com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node(0, nodeArray27); com.google.javascript.jscomp.Scope scope29 = null; com.google.javascript.jscomp.JSModule jSModule30 = null; com.google.javascript.jscomp.UseSite useSite31 = new com.google.javascript.jscomp.UseSite(node28, scope29, jSModule30); int int32 = node28.getSideEffectFlags(); boolean boolean33 = node28.isContinue(); boolean boolean34 = com.google.javascript.jscomp.NodeUtil.isHoistedFunctionDeclaration(node28); boolean boolean35 = flowSensitiveInlineVariables5.shouldTraverse(nodeTraversal10, node17, node28); com.google.javascript.rhino.Node node37 = com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeString("JSCOMPILER_PRESERVE"); boolean boolean38 = node37.isNull(); com.google.javascript.rhino.Node node39 = null; prepareAnnotations3.visit(nodeTraversal10, node37, node39); try { java.util.List<com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<java.io.Serializable, java.util.Set<java.lang.String>>> serializableDiGraphNodeList41 = serializableLinkedDirectedGraph0.getDirectedPredNodes((java.io.Serializable) node39); } catch (java.lang.IllegalArgumentException e) { } }
Code: public void visit(NodeTraversal t, Node n, Node parent) { if (n.isName() && n.getString().equals(varName) && !(parent.isAssign() && (parent.getFirstChild() == n))) { numUsesWithinCfgNode++; } }
tensor([[0.0288, 0.0237, 0.0138, 0.0898, 0.0567, 0.0606, 0.0567, 0.0372, 0.0412,
         0.0780, 0.0518, 0.0189, 0.0637, 0.0189, 0.0378, 0.0189, 0.0341, 0.0447,
         0.1038, 0.0412, 0.0540, 0.0129, 0.0129],
        [0.0225, 0.0205, 0.0078, 0.1310, 0.0639, 0.0837, 0.0639, 0.0282, 0.0431,
         0.0753, 0.0501, 0.0145, 0.0581, 0.0145, 0.0375, 0.0145, 0.0231, 0.0319,
         0.0936, 0.0431, 0.0531, 0.0130, 0.0130],
        [0.0220, 0.0157, 0.0097, 0.1103, 0.0506, 0.0698, 0.0506, 0.0291, 0.0415,
         0.1125, 0.0523, 0.0155, 0.0825, 0.0155, 0.0374, 0.0155, 0.0254, 0.0495,
         0.1005, 0.0415, 0.0386, 0.0069, 0.0069],
        [0.0261, 0.0158, 0.0100, 0.1162, 0.0674, 0.0589, 0.0674, 0.0396, 0.0521,
         0.0743, 0.0561, 0.0161, 0.0609, 0.0161, 0.0376, 0.0161, 0.0241, 0.0366,
         0.0903, 0.0521, 0.0474, 0.0095, 0.0095],
        [0.0212, 0.0221, 0.0105, 0.1205, 0.0644, 0.0830, 0.0644, 0.0288, 0.0501,
         0.0768, 0.0510, 0.0166, 0.0661, 0.0166, 0.0410, 0.0166, 0.0229, 0.0364,
         0.0728, 0.0501, 0.0496, 0.0093, 0.0093],
        [0.0253, 0.0170, 0.0148, 0.1274, 0.0553, 0.0783, 0.0553, 0.0238, 0.0535,
         0.0721, 0.0568, 0.0157, 0.0618, 0.0157, 0.0319, 0.0157, 0.0219, 0.0352,
         0.0865, 0.0535, 0.0599, 0.0114, 0.0114],
        [0.0212, 0.0221, 0.0105, 0.1205, 0.0644, 0.0830, 0.0644, 0.0288, 0.0501,
         0.0768, 0.0510, 0.0166, 0.0661, 0.0166, 0.0410, 0.0166, 0.0229, 0.0364,
         0.0728, 0.0501, 0.0496, 0.0093, 0.0093],
        [0.0253, 0.0198, 0.0086, 0.1181, 0.0641, 0.0646, 0.0641, 0.0229, 0.0507,
         0.0855, 0.0408, 0.0160, 0.0721, 0.0160, 0.0428, 0.0160, 0.0230, 0.0351,
         0.0878, 0.0507, 0.0551, 0.0104, 0.0104],
        [0.0323, 0.0283, 0.0167, 0.0831, 0.0539, 0.0669, 0.0539, 0.0285, 0.0529,
         0.0555, 0.0446, 0.0283, 0.0577, 0.0283, 0.0405, 0.0283, 0.0302, 0.0343,
         0.0732, 0.0529, 0.0726, 0.0185, 0.0185],
        [0.0176, 0.0139, 0.0060, 0.1812, 0.0671, 0.0745, 0.0671, 0.0195, 0.0419,
         0.1013, 0.0427, 0.0095, 0.0504, 0.0095, 0.0349, 0.0095, 0.0135, 0.0344,
         0.1099, 0.0419, 0.0412, 0.0062, 0.0062],
        [0.0291, 0.0236, 0.0154, 0.1089, 0.0475, 0.0715, 0.0475, 0.0371, 0.0440,
         0.0682, 0.0547, 0.0205, 0.0605, 0.0205, 0.0444, 0.0205, 0.0321, 0.0347,
         0.0801, 0.0440, 0.0565, 0.0193, 0.0193],
        [0.0226, 0.0215, 0.0105, 0.1056, 0.0525, 0.0778, 0.0525, 0.0306, 0.0472,
         0.0704, 0.0476, 0.0156, 0.0653, 0.0156, 0.0369, 0.0156, 0.0235, 0.0386,
         0.1093, 0.0472, 0.0636, 0.0150, 0.0150],
        [0.0295, 0.0244, 0.0111, 0.1189, 0.0502, 0.0745, 0.0502, 0.0257, 0.0476,
         0.0692, 0.0465, 0.0182, 0.0665, 0.0182, 0.0405, 0.0182, 0.0233, 0.0356,
         0.0887, 0.0476, 0.0710, 0.0122, 0.0122],
        [0.0226, 0.0215, 0.0105, 0.1056, 0.0525, 0.0778, 0.0525, 0.0306, 0.0472,
         0.0704, 0.0476, 0.0156, 0.0653, 0.0156, 0.0369, 0.0156, 0.0235, 0.0386,
         0.1093, 0.0472, 0.0636, 0.0150, 0.0150],
        [0.0207, 0.0147, 0.0112, 0.1463, 0.0486, 0.0661, 0.0486, 0.0295, 0.0449,
         0.0880, 0.0460, 0.0141, 0.0626, 0.0141, 0.0305, 0.0141, 0.0185, 0.0392,
         0.1097, 0.0449, 0.0657, 0.0111, 0.0111],
        [0.0226, 0.0215, 0.0105, 0.1056, 0.0525, 0.0778, 0.0525, 0.0306, 0.0472,
         0.0704, 0.0476, 0.0156, 0.0653, 0.0156, 0.0369, 0.0156, 0.0235, 0.0386,
         0.1093, 0.0472, 0.0636, 0.0150, 0.0150],
        [0.0209, 0.0158, 0.0093, 0.1121, 0.0656, 0.0809, 0.0656, 0.0322, 0.0476,
         0.0789, 0.0458, 0.0130, 0.0655, 0.0130, 0.0327, 0.0130, 0.0224, 0.0464,
         0.0931, 0.0476, 0.0604, 0.0090, 0.0090],
        [0.0171, 0.0188, 0.0079, 0.1298, 0.0634, 0.0629, 0.0634, 0.0305, 0.0463,
         0.0938, 0.0479, 0.0140, 0.0488, 0.0140, 0.0408, 0.0140, 0.0205, 0.0418,
         0.1011, 0.0463, 0.0580, 0.0094, 0.0094],
        [0.0249, 0.0167, 0.0128, 0.1269, 0.0503, 0.0700, 0.0503, 0.0297, 0.0557,
         0.0809, 0.0618, 0.0158, 0.0510, 0.0158, 0.0334, 0.0158, 0.0226, 0.0325,
         0.0903, 0.0557, 0.0633, 0.0117, 0.0117],
        [0.0323, 0.0283, 0.0167, 0.0831, 0.0539, 0.0669, 0.0539, 0.0285, 0.0529,
         0.0555, 0.0446, 0.0283, 0.0577, 0.0283, 0.0405, 0.0283, 0.0302, 0.0343,
         0.0732, 0.0529, 0.0726, 0.0185, 0.0185],
        [0.0272, 0.0196, 0.0118, 0.1311, 0.0538, 0.0584, 0.0538, 0.0284, 0.0553,
         0.0792, 0.0546, 0.0174, 0.0614, 0.0174, 0.0368, 0.0174, 0.0246, 0.0363,
         0.0884, 0.0553, 0.0555, 0.0081, 0.0081],
        [0.0198, 0.0183, 0.0107, 0.1127, 0.0773, 0.0548, 0.0773, 0.0353, 0.0503,
         0.0763, 0.0503, 0.0169, 0.0659, 0.0169, 0.0329, 0.0169, 0.0250, 0.0343,
         0.0893, 0.0503, 0.0470, 0.0108, 0.0108],
        [0.0198, 0.0183, 0.0107, 0.1127, 0.0773, 0.0548, 0.0773, 0.0353, 0.0503,
         0.0763, 0.0503, 0.0169, 0.0659, 0.0169, 0.0329, 0.0169, 0.0250, 0.0343,
         0.0893, 0.0503, 0.0470, 0.0108, 0.0108]])