19485
Test: public void testComplexNamespace() throws Exception { String js = "var goog = {};" + "goog.foo = {};" + "goog.foo.bar = 5;"; TypeCheckResult p = parseAndTypeCheckWithScope(js); JSType googScopeType = p.scope.getVar("goog").getType(); Node varNode = p.root.getFirstChild(); JSType googNodeType = varNode.getFirstChild().getJSType(); Node getpropFoo1 = varNode.getNext().getFirstChild().getFirstChild(); JSType googGetpropFoo1Type = getpropFoo1.getFirstChild().getJSType(); JSType googFooType = ((ObjectType) googScopeType).getPropertyType("foo"); Node getpropFoo2 = varNode.getNext().getNext() .getFirstChild().getFirstChild().getFirstChild(); JSType googGetpropFoo2Type = getpropFoo2.getFirstChild().getJSType(); JSType googFooGetprop2Type = getpropFoo2.getJSType(); ObjectType googFooGetprop2ObjectType = (ObjectType) googFooGetprop2Type; }
Code: public JSType getPropertyType(String name) { if ("prototype".equals(name)) { return getPrototype(); } else { if (!hasOwnProperty(name)) { if ("call".equals(name)) { Node params = getParametersNode(); if (true) { defineDeclaredProperty(name, new FunctionType(registry, null, null, null, getReturnType()), false); } else { ; Node thisTypeNode = Node.newString(Token.NAME, "thisType"); thisTypeNode.setJSType( registry.createOptionalNullableType(getTypeOfThis())); ; thisTypeNode.setOptionalArg(true); defineDeclaredProperty(name, new FunctionType(registry, null, null, params, getReturnType()), false); } } else if (true) { FunctionParamBuilder builder = new FunctionParamBuilder(registry); builder.addOptionalParams( registry.createNullableType(getTypeOfThis()), registry.createNullableType( registry.getNativeType(JSTypeNative.OBJECT_TYPE))); defineDeclaredProperty(name, new FunctionType(registry, null, null, builder.build(), getReturnType()), false); } } return super.getPropertyType(name); } }
tensor([[0.0070, 0.0181, 0.0068,  ..., 0.0097, 0.0029, 0.0029],
        [0.0047, 0.0219, 0.0079,  ..., 0.0070, 0.0024, 0.0024],
        [0.0064, 0.0181, 0.0087,  ..., 0.0094, 0.0030, 0.0030],
        ...,
        [0.0072, 0.0146, 0.0070,  ..., 0.0098, 0.0037, 0.0037],
        [0.0051, 0.0184, 0.0071,  ..., 0.0081, 0.0025, 0.0025],
        [0.0051, 0.0184, 0.0071,  ..., 0.0081, 0.0025, 0.0025]])