28308
Test: public void test3() throws Throwable { Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X; Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer()); Line line0 = new Line(vector2D_Unit0, (-2623.47), precision_DoubleEquivalence0); Line line1 = line0.reverse(); Vector2D vector2D0 = line1.getOrigin(); LinecastPoint2D linecastPoint2D0 = new LinecastPoint2D(vector2D0, vector2D_Unit0, line1); line1.rayFrom(vector2D0); line0.getOrigin(); LinecastPoint2D linecastPoint2D1 = new LinecastPoint2D(vector2D0, vector2D_Unit0, line1); Precision.DoubleEquivalence precision_DoubleEquivalence1 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer()); doReturn(true, false).when(precision_DoubleEquivalence1).eq(anyDouble() , anyDouble()); boolean boolean0 = linecastPoint2D0.eq(linecastPoint2D1, precision_DoubleEquivalence1); }
Code: public boolean eq(final LinecastPoint2D other, final Precision.DoubleEquivalence precision) { return getPoint().eq(other.getPoint(), precision) && getNormal().eq(other.getNormal(), precision); }
[[0.04921509 0.11983516 0.06827685 0.06827685 0.06827685 0.03988528
 0.06827685 0.06827685 0.06852102 0.05452108 0.06827685 0.06827685
 0.0319275  0.06827685 0.06827685 0.02160323]
[0.03390775 0.16631357 0.0640848  0.0640848  0.0640848  0.03354742
 0.0640848  0.0640848  0.09106345 0.05787061 0.0640848  0.0640848
 0.02376606 0.0640848  0.0640848  0.01676792]
[0.04068643 0.1435896  0.06649158 0.06649158 0.06649158 0.04153421
 0.06649158 0.06649158 0.07232798 0.04958857 0.06649158 0.06649158
 0.02983081 0.06649158 0.06649158 0.02401817]
[0.04068643 0.1435896  0.06649158 0.06649158 0.06649158 0.04153421
 0.06649158 0.06649158 0.07232798 0.04958857 0.06649158 0.06649158
 0.02983081 0.06649158 0.06649158 0.02401817]
[0.04068643 0.1435896  0.06649158 0.06649158 0.06649158 0.04153421
 0.06649158 0.06649158 0.07232798 0.04958857 0.06649158 0.06649158
 0.02983081 0.06649158 0.06649158 0.02401817]
[0.04627299 0.11927646 0.06621245 0.06621245 0.06621245 0.03174084
 0.06621245 0.06621245 0.08642673 0.0675119  0.06621245 0.06621245
 0.03623575 0.06621245 0.06621245 0.01662338]
[0.04068643 0.1435896  0.06649158 0.06649158 0.06649158 0.04153421
 0.06649158 0.06649158 0.07232798 0.04958857 0.06649158 0.06649158
 0.02983081 0.06649158 0.06649158 0.02401817]
[0.04068643 0.1435896  0.06649158 0.06649158 0.06649158 0.04153421
 0.06649158 0.06649158 0.07232798 0.04958857 0.06649158 0.06649158
 0.02983081 0.06649158 0.06649158 0.02401817]
[0.05150761 0.10159864 0.06306343 0.06306343 0.06306343 0.0509667
 0.06306343 0.06306343 0.09271007 0.05798501 0.06306343 0.06306343
 0.04655088 0.06306343 0.06306343 0.03111026]
[0.03472985 0.16463184 0.06674965 0.06674965 0.06674965 0.03257869
 0.06674965 0.06674965 0.07298318 0.04954965 0.06674965 0.06674965
 0.02503706 0.06674965 0.06674965 0.01974291]
[0.04068643 0.1435896  0.06649158 0.06649158 0.06649158 0.04153421
 0.06649158 0.06649158 0.07232798 0.04958857 0.06649158 0.06649158
 0.02983081 0.06649158 0.06649158 0.02401817]
[0.04068643 0.1435896  0.06649158 0.06649158 0.06649158 0.04153421
 0.06649158 0.06649158 0.07232798 0.04958857 0.06649158 0.06649158
 0.02983081 0.06649158 0.06649158 0.02401817]
[0.03643174 0.16637667 0.06549995 0.06549995 0.06549995 0.03143533
 0.06549995 0.06549995 0.07915539 0.04660271 0.06549995 0.06549995
 0.02551627 0.06549995 0.06549995 0.02498238]
[0.04068643 0.1435896  0.06649158 0.06649158 0.06649158 0.04153421
 0.06649158 0.06649158 0.07232798 0.04958857 0.06649158 0.06649158
 0.02983081 0.06649158 0.06649158 0.02401817]
[0.04068643 0.1435896  0.06649158 0.06649158 0.06649158 0.04153421
 0.06649158 0.06649158 0.07232798 0.04958857 0.06649158 0.06649158
 0.02983081 0.06649158 0.06649158 0.02401817]
[0.03562281 0.11097184 0.06287482 0.06287482 0.06287482 0.03386945
 0.06287482 0.06287482 0.11317178 0.08405192 0.06287482 0.06287482
 0.03312693 0.06287482 0.06287482 0.02331178]]