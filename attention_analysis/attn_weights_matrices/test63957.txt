63957
Test: public void testLongerObjects() throws Exception { JsonFactory jf = new JsonFactory(); for (int i = 0; i < 2; ++i) { boolean useChars = (i == 0); JsonGenerator jgen; ByteArrayOutputStream bout = new ByteArrayOutputStream(200); if (useChars) { jgen = jf.createGenerator(new OutputStreamWriter(bout, "UTF-8")); } else { jgen = jf.createGenerator(bout, JsonEncoding.UTF8); } jgen.writeStartObject(); for (int rounds = 0; rounds < 1500; ++rounds) { for (int letter = 'a'; letter <= 'z'; ++letter) { for (int index = 0; index < 20; ++index) { String name; if (letter > 'f') { name = "X"+letter+index; } else if (letter > 'p') { name = ""+letter+index; } else { name = "__"+index+letter; } jgen.writeFieldName(name); jgen.writeNumber(index-1); } jgen.writeRaw('\n'); } } jgen.writeEndObject(); jgen.close(); byte[] json = bout.toByteArray(); JsonParser jp = jf.createParser(json); for (int rounds = 0; rounds < 1500; ++rounds) { for (int letter = 'a'; letter <= 'z'; ++letter) { for (int index = 0; index < 20; ++index) { String name; if (letter > 'f') { name = "X"+letter+index; } else if (letter > 'p') { name = ""+letter+index; } else { name = "__"+index+letter; } } } } jp.close(); } }
Code: public void writeRaw(String text, int offset, int len) throws IOException { final char[] buf = _charBuffer; if (len <= buf.length) { text.getChars(offset, offset+len, buf, 0); _writeRawSegment(buf, 0, len); return; } final int maxChunk = (_outputEnd >> 2) + (_outputEnd >> 4); final int maxBytes = maxChunk * 3; while (len > 0) { int len2 = Math.min(maxChunk, len); text.getChars(offset, offset+len2, buf, 0); if ((_outputTail + maxBytes) > _outputEnd) { _flushBuffer(); } if (len > 0) { char ch = buf[len2-1]; if ((ch >= SURR1_FIRST) && (ch <= SURR1_LAST)) { --len2; } } _writeRawSegment(buf, 0, len2); offset += len2; len -= len2; } }
tensor([[0.0064, 0.0053, 0.0041,  ..., 0.0096, 0.0029, 0.0029],
        [0.0048, 0.0045, 0.0043,  ..., 0.0082, 0.0029, 0.0029],
        [0.0049, 0.0038, 0.0046,  ..., 0.0083, 0.0020, 0.0020],
        ...,
        [0.0051, 0.0046, 0.0047,  ..., 0.0086, 0.0032, 0.0032],
        [0.0045, 0.0042, 0.0056,  ..., 0.0088, 0.0026, 0.0026],
        [0.0045, 0.0042, 0.0056,  ..., 0.0088, 0.0026, 0.0026]])