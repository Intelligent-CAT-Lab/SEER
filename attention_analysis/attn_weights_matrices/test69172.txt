69172
Test: public void test531() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test531"); java.io.InputStream inputStream0 = null; org.jsoup.internal.ConstrainableInputStream constrainableInputStream3 = org.jsoup.internal.ConstrainableInputStream.wrap(inputStream0, 3, 3); boolean boolean4 = constrainableInputStream3.markSupported(); constrainableInputStream3.close(); java.io.InputStream inputStream8 = null; org.jsoup.parser.Parser parser11 = org.jsoup.parser.Parser.xmlParser(); org.jsoup.parser.ParseSettings parseSettings12 = parser11.settings(); org.jsoup.nodes.Document document13 = org.jsoup.helper.DataUtil.parseInputStream(inputStream8, "IPdAChx6AMjemBZYS_W0fi7l8H_-w-Xy", "UTF-8", parser11); org.jsoup.nodes.Document document16 = parser11.parseInput("", "#root"); org.jsoup.parser.Parser parser18 = parser11.setTrackErrors(6); try { org.jsoup.nodes.Document document19 = org.jsoup.helper.DataUtil.parseInputStream((java.io.InputStream) constrainableInputStream3, ":only-of-type", " #document=\"IPdAChx6AMjemBZYS_W0fi7l8H_-w-Xy\" IPdAChx6AMjemBZYS_W0fi7l8H_-w-Xy", parser18); } catch (java.io.IOException e) { } }
Code: static Document parseInputStream(InputStream input, String charsetName, String baseUri, Parser parser) throws IOException { if (input == null) return new Document(baseUri); input = ConstrainableInputStream.wrap(input, bufferSize, 0); Document doc = null; boolean fullyRead = false; input.mark(bufferSize); ByteBuffer firstBytes = readToByteBuffer(input, firstReadBufferSize - 1); fullyRead = input.read() == -1; input.reset(); BomCharset bomCharset = detectCharsetFromBom(firstBytes); if (bomCharset != null) charsetName = bomCharset.charset; if (charsetName == null) { String docData = Charset.forName(defaultCharset).decode(firstBytes).toString(); doc = parser.parseInput(docData, baseUri); Elements metaElements = doc.select("meta[http-equiv=content-type], meta[charset]"); String foundCharset = null; for (Element meta : metaElements) { if (meta.hasAttr("http-equiv")) foundCharset = getCharsetFromContentType(meta.attr("content")); if (foundCharset == null && meta.hasAttr("charset")) foundCharset = meta.attr("charset"); if (foundCharset != null) break; } if (foundCharset == null && doc.childNodeSize() > 0) { Node first = doc.childNode(0); XmlDeclaration decl = null; if (first instanceof XmlDeclaration) decl = (XmlDeclaration) first; if (decl != null) { if (decl.name().equalsIgnoreCase("xml")) foundCharset = decl.attr("encoding"); } } foundCharset = validateCharset(foundCharset); if (foundCharset != null && !foundCharset.equalsIgnoreCase(defaultCharset)) { foundCharset = foundCharset.trim().replaceAll("[\"']", ""); charsetName = foundCharset; doc = null; } else if (!fullyRead) { doc = null; } } else { Validate.notEmpty(charsetName, "Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML"); } if (doc == null) { if (charsetName == null) charsetName = defaultCharset; BufferedReader reader = new BufferedReader(new InputStreamReader(input, charsetName), bufferSize); if (bomCharset != null && bomCharset.offset) reader.skip(1); try { doc = parser.parseInput(reader, baseUri); } catch (UncheckedIOException e) { throw e.ioException(); } doc.outputSettings().charset(charsetName); } input.close(); return doc; }
tensor([[0.0088, 0.0116, 0.0045,  ..., 0.0030, 0.0026, 0.0016],
        [0.0080, 0.0113, 0.0054,  ..., 0.0033, 0.0022, 0.0010],
        [0.0088, 0.0125, 0.0054,  ..., 0.0036, 0.0021, 0.0011],
        ...,
        [0.0100, 0.0115, 0.0065,  ..., 0.0030, 0.0022, 0.0012],
        [0.0100, 0.0125, 0.0051,  ..., 0.0039, 0.0025, 0.0009],
        [0.0093, 0.0098, 0.0046,  ..., 0.0048, 0.0029, 0.0012]])