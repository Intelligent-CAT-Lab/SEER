25054
Test: public void test5() throws Throwable { Vector3D.Unit vector3D_Unit0 = Vector3D.Unit.MINUS_Y; Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer()); doReturn(false, false, false, false).when(precision_DoubleEquivalence0).eqZero(anyDouble()); doReturn(false, false).when(precision_DoubleEquivalence0).lte(anyDouble() , anyDouble()); doReturn(0.0).when(precision_DoubleEquivalence0).signum(anyDouble()); GreatCircle greatCircle0 = new GreatCircle(vector3D_Unit0, vector3D_Unit0, vector3D_Unit0, precision_DoubleEquivalence0); EmbeddedTreeGreatCircleSubset embeddedTreeGreatCircleSubset0 = new EmbeddedTreeGreatCircleSubset(greatCircle0, true); Precision.DoubleEquivalence precision_DoubleEquivalence1 = embeddedTreeGreatCircleSubset0.getPrecision(); AngularInterval angularInterval0 = AngularInterval.of((-1630.27139818), (-1630.27139818), precision_DoubleEquivalence1); RegionBSPTree1S regionBSPTree1S0 = RegionBSPTree1S.fromInterval(angularInterval0); EmbeddedTreeGreatCircleSubset embeddedTreeGreatCircleSubset1 = new EmbeddedTreeGreatCircleSubset(greatCircle0, regionBSPTree1S0); // Undeclared exception!  embeddedTreeGreatCircleSubset1.toConvex();   }
Code: public List<GreatArc> toConvex() { return region.toIntervals().stream() .flatMap(i -> i.toConvex().stream()) .map(i -> GreatCircles.arcFromInterval(getCircle(), i)) .collect(Collectors.toList()); }
[[0.04868746 0.06754777 0.06754777 0.07081971 0.0543112  0.06754777
 0.06754777 0.09810822 0.06754777 0.06754777 0.09810821 0.06754777
 0.06754778 0.06754778 0.02203529]
[0.04064228 0.06634706 0.06634706 0.07264962 0.04954533 0.06634706
 0.06634706 0.10796992 0.06634706 0.06634706 0.10796991 0.06634706
 0.06634708 0.06634708 0.02409933]
[0.04064228 0.06634706 0.06634706 0.07264962 0.04954533 0.06634706
 0.06634706 0.10796992 0.06634706 0.06634706 0.10796991 0.06634706
 0.06634708 0.06634708 0.02409933]
[0.05380348 0.06487043 0.06487043 0.09909342 0.06027543 0.06487043
 0.06487043 0.08503112 0.06487044 0.06487044 0.08503112 0.06487044
 0.06487045 0.06487045 0.03293151]
[0.03723237 0.07147609 0.07147609 0.07841267 0.05309077 0.07147609
 0.07147609 0.08338788 0.07147609 0.07147609 0.08338788 0.07147609
 0.0714761  0.0714761  0.02120361]
[0.04064228 0.06634706 0.06634706 0.07264962 0.04954533 0.06634706
 0.06634706 0.10796992 0.06634706 0.06634706 0.10796991 0.06634706
 0.06634708 0.06634708 0.02409933]
[0.04064228 0.06634706 0.06634706 0.07264962 0.04954533 0.06634706
 0.06634706 0.10796992 0.06634706 0.06634706 0.10796991 0.06634706
 0.06634708 0.06634708 0.02409933]
[0.0512753  0.06679212 0.06679212 0.10729031 0.06109807 0.06679212
 0.06679212 0.0789629  0.06679211 0.06679211 0.07896291 0.06679211
 0.06679212 0.06679212 0.02128145]
[0.04064228 0.06634706 0.06634706 0.07264962 0.04954533 0.06634706
 0.06634706 0.10796992 0.06634706 0.06634706 0.10796991 0.06634706
 0.06634708 0.06634708 0.02409933]
[0.04064228 0.06634706 0.06634706 0.07264962 0.04954533 0.06634706
 0.06634706 0.10796992 0.06634706 0.06634706 0.10796991 0.06634706
 0.06634708 0.06634708 0.02409933]
[0.0512753  0.06679212 0.06679212 0.10729031 0.06109807 0.06679212
 0.06679212 0.0789629  0.06679211 0.06679211 0.07896291 0.06679211
 0.06679212 0.06679212 0.02128145]
[0.04064228 0.06634706 0.06634706 0.07264962 0.04954533 0.06634706
 0.06634706 0.10796992 0.06634706 0.06634706 0.10796991 0.06634706
 0.06634708 0.06634708 0.02409933]
[0.04064229 0.06634706 0.06634706 0.07264964 0.04954532 0.06634706
 0.06634706 0.10796992 0.06634706 0.06634706 0.10796992 0.06634706
 0.06634707 0.06634707 0.02409933]
[0.04064229 0.06634706 0.06634706 0.07264964 0.04954532 0.06634706
 0.06634706 0.10796992 0.06634706 0.06634706 0.10796992 0.06634706
 0.06634707 0.06634707 0.02409933]
[0.03676807 0.06428209 0.06428209 0.12035709 0.08777945 0.06428209
 0.06428209 0.07595149 0.06428209 0.06428209 0.07595149 0.06428209
 0.0642821  0.0642821  0.02465356]]