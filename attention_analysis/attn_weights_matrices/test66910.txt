66910
Test: public void testWithMultipleJsonParserSequences() throws IOException { TokenBuffer buf1 = new TokenBuffer(null, false); buf1.writeStartArray(); TokenBuffer buf2 = new TokenBuffer(null, false); buf2.writeString("a"); TokenBuffer buf3 = new TokenBuffer(null, false); buf3.writeNumber(13); TokenBuffer buf4 = new TokenBuffer(null, false); buf4.writeEndArray(); JsonParserSequence seq1 = JsonParserSequence.createFlattened(buf1.asParser(), buf2.asParser()); JsonParserSequence seq2 = JsonParserSequence.createFlattened(buf3.asParser(), buf4.asParser()); JsonParserSequence combo = JsonParserSequence.createFlattened(seq1, seq2); buf1.close(); buf2.close(); buf3.close(); buf4.close(); }
Code: public TokenBuffer(JsonParser p, DeserializationContext ctxt) { _objectCodec = p.getCodec(); _generatorFeatures = DEFAULT_GENERATOR_FEATURES; _writeContext = JsonWriteContext.createRootContext(null); _first = _last = new Segment(); _appendAt = 0; _hasNativeTypeIds = p.canReadTypeId(); _hasNativeObjectIds = p.canReadObjectId(); _mayHaveNativeIds = _hasNativeTypeIds | _hasNativeObjectIds; _forceBigDecimal = (ctxt == null) ? false : ctxt.isEnabled(DeserializationFeature.USE_BIG_DECIMAL_FOR_FLOATS); }
tensor([[0.0176, 0.0161, 0.0241,  ..., 0.0174, 0.0288, 0.0081],
        [0.0146, 0.0169, 0.0301,  ..., 0.0126, 0.0370, 0.0068],
        [0.0135, 0.0170, 0.0232,  ..., 0.0136, 0.0307, 0.0076],
        ...,
        [0.0178, 0.0153, 0.0274,  ..., 0.0124, 0.0242, 0.0096],
        [0.0145, 0.0150, 0.0304,  ..., 0.0101, 0.0276, 0.0075],
        [0.0125, 0.0143, 0.0270,  ..., 0.0118, 0.0256, 0.0070]])