99876
Test: public void testToString3() { Partial test = new Partial(DateTimeFieldType.year(), 2005); test = test.with(DateTimeFieldType.monthOfYear(), 6); test = test.with(DateTimeFieldType.dayOfMonth(), 25); test = test.without(DateTimeFieldType.monthOfYear()); }
Code: public Partial with(DateTimeFieldType fieldType, int value) { if (fieldType == null) { throw new IllegalArgumentException("The field type must not be null"); } int index = indexOf(fieldType); if (index == -1) { DateTimeFieldType[] newTypes = new DateTimeFieldType[iTypes.length + 1]; int[] newValues = new int[newTypes.length]; int i = 0; DurationField unitField = fieldType.getDurationType().getField(iChronology); if (unitField.isSupported()) { for (; i < iTypes.length; i++) { DateTimeFieldType loopType = iTypes[i]; DurationField loopUnitField = loopType.getDurationType().getField(iChronology); if (loopUnitField.isSupported()) { int compare = unitField.compareTo(loopUnitField); if (compare > 0) { break; } else if (compare == 0) { if (fieldType.getRangeDurationType() == null) { break; } DurationField rangeField = fieldType.getRangeDurationType().getField(iChronology); DurationField loopRangeField = loopType.getRangeDurationType().getField(iChronology); if (rangeField.compareTo(loopRangeField) > 0) { break; } } } } } System.arraycopy(iTypes, 0, newTypes, 0, i); System.arraycopy(iValues, 0, newValues, 0, i); newTypes[i] = fieldType; newValues[i] = value; System.arraycopy(iTypes, i, newTypes, i + 1, newTypes.length - i - 1); System.arraycopy(iValues, i, newValues, i + 1, newValues.length - i - 1); Partial newPartial = new Partial(newTypes, newValues, iChronology); iChronology.validate(newPartial, newValues); return newPartial; } if (value == getValue(index)) { return this; } int[] newValues = getValues(); newValues = getField(index).set(this, index, newValues, value); return new Partial(this, newValues); }
tensor([[0.0038, 0.0047, 0.0022,  ..., 0.0096, 0.0047, 0.0017],
        [0.0039, 0.0059, 0.0020,  ..., 0.0105, 0.0062, 0.0019],
        [0.0028, 0.0041, 0.0017,  ..., 0.0100, 0.0048, 0.0011],
        ...,
        [0.0028, 0.0048, 0.0017,  ..., 0.0083, 0.0057, 0.0013],
        [0.0031, 0.0041, 0.0021,  ..., 0.0107, 0.0048, 0.0018],
        [0.0028, 0.0046, 0.0020,  ..., 0.0120, 0.0053, 0.0015]])