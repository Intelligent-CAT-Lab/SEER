15589
Test: public void test102() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test102"); org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser(); posixParser0.burstToken("", false); org.apache.commons.cli.CommandLine commandLine4 = new org.apache.commons.cli.CommandLine(); java.lang.String str7 = commandLine4.getOptionValue("hi!", "arg"); posixParser0.cmd = commandLine4; org.apache.commons.cli.Option option13 = new org.apache.commons.cli.Option("", "", false, "hi!"); option13.setLongOpt("[ option: :: ]"); org.apache.commons.cli.Options options16 = new org.apache.commons.cli.Options(); java.util.Collection collection17 = options16.getOptions(); org.apache.commons.cli.Option option22 = new org.apache.commons.cli.Option("", "", false, "hi!"); org.apache.commons.cli.MissingArgumentException missingArgumentException23 = new org.apache.commons.cli.MissingArgumentException(option22); option22.setArgs(0); char char26 = option22.getValueSeparator(); org.apache.commons.cli.OptionGroup optionGroup27 = options16.getOptionGroup(option22); java.util.Collection collection28 = options16.getOptions(); option13.setType((java.lang.Object) options16); org.apache.commons.cli.PosixParser posixParser30 = new org.apache.commons.cli.PosixParser(); posixParser30.burstToken("", false); org.apache.commons.cli.CommandLine commandLine34 = new org.apache.commons.cli.CommandLine(); java.lang.String str37 = commandLine34.getOptionValue("hi!", "arg"); posixParser30.cmd = commandLine34; org.apache.commons.cli.Options options39 = new org.apache.commons.cli.Options(); java.util.Collection collection40 = options39.getOptions(); java.util.Collection collection41 = options39.getOptionGroups(); posixParser30.setOptions(options39); org.apache.commons.cli.Options options43 = new org.apache.commons.cli.Options(); java.util.Collection collection44 = options43.getOptions(); org.apache.commons.cli.Option option49 = new org.apache.commons.cli.Option("", "", false, "hi!"); org.apache.commons.cli.MissingArgumentException missingArgumentException50 = new org.apache.commons.cli.MissingArgumentException(option49); option49.setArgs(0); char char53 = option49.getValueSeparator(); org.apache.commons.cli.OptionGroup optionGroup54 = options43.getOptionGroup(option49); java.lang.String str55 = options43.toString(); java.lang.String[] strArray60 = new java.lang.String[] { "arg", "arg", "arg", "[ Options: [ short {} ] [ long {} ]" }; java.lang.String[] strArray62 = posixParser30.flatten(options43, strArray60, false); org.apache.commons.cli.CommandLine commandLine64 = posixParser0.parse(options16, strArray62, true); posixParser0.checkRequiredOptions(); org.apache.commons.cli.Option option69 = new org.apache.commons.cli.Option("", false, ""); option69.setValueSeparator(' '); java.lang.String str72 = option69.toString(); boolean boolean73 = option69.hasLongOpt(); boolean boolean74 = option69.hasArgName(); boolean boolean75 = option69.hasOptionalArg(); java.util.ListIterator listIterator76 = null; try { posixParser0.processArgs(option69, listIterator76); } catch (java.lang.NullPointerException e) { } } ] [ long {} ]" + "'", str55, "[ Options: [ short {} ] [ long {} ]"); }
Code: protected void burstToken(String token, boolean stopAtNonOption) { for (int i = 1; i < token.length(); i++) { String ch = String.valueOf(token.charAt(i)); if (options.hasOption(ch)) { tokens.add("-" + ch); currentOption = options.getOption(ch); if (currentOption.hasArg() && (token.length() != (i + 1))) { tokens.add(token.substring(i + 1)); break; } } else if (stopAtNonOption) { process(token.substring(i)); } else { tokens.add(token); break; } } }
tensor([[0.0194, 0.0089, 0.0222,  ..., 0.0042, 0.0042, 0.0042],
        [0.0212, 0.0086, 0.0269,  ..., 0.0055, 0.0055, 0.0055],
        [0.0187, 0.0081, 0.0216,  ..., 0.0055, 0.0055, 0.0055],
        ...,
        [0.0197, 0.0083, 0.0226,  ..., 0.0050, 0.0050, 0.0050],
        [0.0197, 0.0083, 0.0226,  ..., 0.0050, 0.0050, 0.0050],
        [0.0197, 0.0083, 0.0226,  ..., 0.0050, 0.0050, 0.0050]])