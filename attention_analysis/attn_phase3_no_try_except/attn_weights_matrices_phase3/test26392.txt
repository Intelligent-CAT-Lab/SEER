26392
Test: public void test36() throws Throwable { Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer()); doReturn(0.0, 0.0).when(precision_DoubleEquivalence0).signum(anyDouble()); Interval interval0 = Interval.of(1.0, 1.0, precision_DoubleEquivalence0); RegionBSPTree1D regionBSPTree1D0 = interval0.toTree(); OrientedPoint orientedPoint0 = interval0.getMaxBoundary(); Split<RegionBSPTree1D> split0 = regionBSPTree1D0.split(orientedPoint0); }
Code: public Split<RegionBSPTree1D> split(final Hyperplane<Vector1D> splitter) { return split(splitter, RegionBSPTree1D.empty(), RegionBSPTree1D.empty()); }
[[0.07393204 0.10256058 0.10256058 0.10256058 0.10256058 0.09612039
 0.08106134 0.10256058 0.10256059 0.10256059 0.03096211]
[0.0624069  0.10305366 0.10305366 0.10305366 0.10305366 0.10504965
 0.075906   0.10305366 0.10305367 0.10305367 0.0352618 ]
[0.0624069  0.10305366 0.10305366 0.10305366 0.10305366 0.10504965
 0.075906   0.10305366 0.10305367 0.10305367 0.0352618 ]
[0.0624069  0.10305366 0.10305366 0.10305366 0.10305366 0.10504965
 0.075906   0.10305366 0.10305367 0.10305367 0.0352618 ]
[0.0624069  0.10305366 0.10305366 0.10305366 0.10305366 0.10504965
 0.075906   0.10305366 0.10305367 0.10305367 0.0352618 ]
[0.07562692 0.09460273 0.09460273 0.09460273 0.09460273 0.13161913
 0.08572605 0.09460273 0.09460276 0.09460276 0.04480864]
[0.05286086 0.10560089 0.10560089 0.10560089 0.10560089 0.10288917
 0.07682388 0.10560089 0.10560092 0.10560092 0.02821978]
[0.0624069  0.10305366 0.10305366 0.10305366 0.10305366 0.10504965
 0.075906   0.10305366 0.10305367 0.10305367 0.0352618 ]
[0.06240691 0.10305366 0.10305366 0.10305366 0.10305366 0.10504967
 0.075906   0.10305366 0.10305366 0.10305367 0.0352618 ]
[0.06240691 0.10305366 0.10305366 0.10305366 0.10305366 0.10504967
 0.075906   0.10305366 0.10305366 0.10305367 0.0352618 ]
[0.05130341 0.09252006 0.09252006 0.09252006 0.09252006 0.15161815
 0.11776356 0.09252006 0.09252007 0.09252008 0.0316745 ]]