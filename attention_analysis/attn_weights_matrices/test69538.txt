69538
Test: public void test40() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test40"); java.nio.ByteBuffer byteBuffer0 = org.jsoup.helper.DataUtil.emptyByteBuffer(); org.jsoup.parser.Parser parser7 = org.jsoup.parser.Parser.htmlParser(); org.jsoup.nodes.Document document8 = org.jsoup.Jsoup.parse("<html>\n <head></head>\n <body>\n </body>\n</html>", "<html>\n <head></head>\n <body>\n </body>\n</html>", parser7); org.jsoup.nodes.Document document9 = org.jsoup.Jsoup.parse("#declaration", ".*", parser7); try { org.jsoup.nodes.Document document10 = org.jsoup.helper.DataUtil.parseByteData(byteBuffer0, " :lt(0)", "", parser7); } catch (java.nio.BufferUnderflowException e) { } }
Code: static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser){String docData;Document doc = null;if (charsetName == null) { docData = Charset.forName(defaultCharset).decode(byteData).toString();doc = parser.parseInput(docData, baseUri);Element meta = doc.select("meta[http-equiv=content-type], meta[charset]").first();if (meta != null) { String foundCharset = null;if (meta.hasAttr("http-equiv")) {foundCharset = getCharsetFromContentType(meta.attr("content"));}if (foundCharset == null && meta.hasAttr("charset")) {try {if (Charset.isSupported(meta.attr("charset"))) {foundCharset = meta.attr("charset");}} catch (IllegalCharsetNameException e) {foundCharset = null;}}if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) { foundCharset = foundCharset.trim().replaceAll("[\"']", "");charsetName = foundCharset;byteData.rewind();;doc = null;}}} else { Validate.notEmpty(charsetName, "Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML");docData = Charset.forName(charsetName).decode(byteData).toString();}if (docData.length() > 1 && docData.charAt(0) == UNICODE_BOM) {byteData.rewind();docData = Charset.forName(defaultCharset).decode(byteData).toString();docData = docData.substring(-1);charsetName = defaultCharset;doc = null;}if (doc == null) {doc = parser.parseInput(docData, baseUri);doc.outputSettings().charset(charsetName);}return doc;}static ByteBuffer readToByteBuffer(InputStream inStream, int maxSize) throws IOException {Validate.isTrue(maxSize >= 0, "maxSize must be 0 (unlimited) or larger");final boolean capped = maxSize > 0;byte[] buffer = new byte[bufferSize];ByteArrayOutputStream outStream = new ByteArrayOutputStream(bufferSize);int read;int remaining = maxSize;while (true) {read = inStream.read(buffer);if (read == -1) break;if (capped) {if (read > remaining) {outStream.write(buffer, 0, remaining);break;}remaining -= read;}outStream.write(buffer, 0, read);}return ByteBuffer.wrap(outStream.toByteArray());}static ByteBuffer readToByteBuffer(InputStream inStream) throws IOException {return readToByteBuffer(inStream, 0);}static ByteBuffer readFileToByteBuffer(File file) throws IOException {RandomAccessFile randomAccessFile = null;try {randomAccessFile = new RandomAccessFile(file, "r");byte[] bytes = new byte[(int) randomAccessFile.length()];randomAccessFile.readFully(bytes);return ByteBuffer.wrap(bytes);} finally {if (randomAccessFile != null)randomAccessFile.close();}}static ByteBuffer emptyByteBuffer() {return ByteBuffer.allocate(0);}static String getCharsetFromContentType(String contentType) {if (contentType == null) return null;Matcher m = charsetPattern.matcher(contentType);if (m.find()) {String charset = m.group(1).trim();charset = charset.replace("charset=", "");if (charset.length() == 0) return null;try {if (Charset.isSupported(charset)) return charset;charset = charset.toUpperCase(Locale.ENGLISH);if (Charset.isSupported(charset)) return charset;} catch (IllegalCharsetNameException e) {return null;}}return null;}static String mimeBoundary() {final StringBuilder mime = new StringBuilder(boundaryLength);final Random rand = new Random();for (int i = 0; i < boundaryLength; i++) {mime.append(mimeBoundaryChars[rand.nextInt(mimeBoundaryChars.length)]);}return mime.toString();}}
tensor([[0.0076, 0.0103, 0.0031,  ..., 0.0023, 0.0071, 0.0058],
        [0.0070, 0.0098, 0.0029,  ..., 0.0021, 0.0071, 0.0060],
        [0.0079, 0.0086, 0.0029,  ..., 0.0030, 0.0071, 0.0052],
        ...,
        [0.0096, 0.0095, 0.0029,  ..., 0.0023, 0.0060, 0.0060],
        [0.0072, 0.0095, 0.0044,  ..., 0.0025, 0.0063, 0.0055],
        [0.0071, 0.0089, 0.0042,  ..., 0.0031, 0.0072, 0.0065]])