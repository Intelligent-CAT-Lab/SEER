19327
Test: public void test018() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test018"); com.google.javascript.rhino.Node node1 = null; com.google.javascript.jscomp.LightweightMessageFormatter lightweightMessageFormatter2 = com.google.javascript.jscomp.LightweightMessageFormatter.withoutSource(); com.google.javascript.jscomp.CheckLevel checkLevel6 = com.google.javascript.jscomp.CheckLevel.WARNING; com.google.javascript.jscomp.DiagnosticType diagnosticType9 = com.google.javascript.jscomp.DiagnosticType.warning("", ""); java.lang.String[] strArray16 = new java.lang.String[] { "hi!", "hi!", "", "hi!", "", ": hi!" }; com.google.javascript.jscomp.JSError jSError17 = com.google.javascript.jscomp.JSError.make(": hi!", (int) (short) 1, (int) (short) 1, checkLevel6, diagnosticType9, strArray16); com.google.javascript.rhino.Node node18 = jSError17.node; boolean boolean20 = jSError17.equals((java.lang.Object) ": hi!"); com.google.javascript.jscomp.CheckLevel checkLevel21 = jSError17.level; java.lang.String str22 = lightweightMessageFormatter2.getLevelName(checkLevel21); com.google.javascript.jscomp.DiagnosticType diagnosticType25 = com.google.javascript.jscomp.DiagnosticType.warning("", ""); com.google.javascript.jscomp.DiagnosticType diagnosticType28 = com.google.javascript.jscomp.DiagnosticType.warning("", "hi!"); java.lang.Object[] objArray29 = null; java.lang.String str30 = diagnosticType28.format(objArray29); int int31 = diagnosticType25.compareTo(diagnosticType28); java.lang.String str32 = diagnosticType25.key; com.google.javascript.jscomp.DiagnosticType diagnosticType35 = com.google.javascript.jscomp.DiagnosticType.warning("", "hi!"); java.lang.Object[] objArray36 = null; java.lang.String str37 = diagnosticType35.format(objArray36); com.google.javascript.jscomp.CheckLevel checkLevel41 = com.google.javascript.jscomp.CheckLevel.WARNING; com.google.javascript.jscomp.DiagnosticType diagnosticType44 = com.google.javascript.jscomp.DiagnosticType.warning("", ""); java.lang.String[] strArray51 = new java.lang.String[] { "hi!", "hi!", "", "hi!", "", ": hi!" }; com.google.javascript.jscomp.JSError jSError52 = com.google.javascript.jscomp.JSError.make(": hi!", (int) (short) 1, (int) (short) 1, checkLevel41, diagnosticType44, strArray51); com.google.javascript.rhino.Node node53 = jSError52.node; boolean boolean55 = jSError52.equals((java.lang.Object) ": hi!"); com.google.javascript.jscomp.CheckLevel checkLevel56 = jSError52.level; com.google.javascript.jscomp.DiagnosticType diagnosticType57 = jSError52.getType(); com.google.javascript.jscomp.CheckLevel checkLevel61 = com.google.javascript.jscomp.CheckLevel.WARNING; boolean boolean62 = checkLevel61.isOn(); com.google.javascript.jscomp.DiagnosticType diagnosticType65 = com.google.javascript.jscomp.DiagnosticType.warning("", "hi!"); java.lang.Object[] objArray66 = null; java.lang.String str67 = diagnosticType65.format(objArray66); java.lang.String[] strArray70 = new java.lang.String[] { "hi!", "" }; com.google.javascript.jscomp.JSError jSError71 = com.google.javascript.jscomp.JSError.make("hi!", 1, (int) (short) 100, checkLevel61, diagnosticType65, strArray70); java.lang.String str72 = diagnosticType57.format((java.lang.Object[]) strArray70); java.lang.String str73 = diagnosticType35.format((java.lang.Object[]) strArray70); try { com.google.javascript.jscomp.JSError jSError74 = com.google.javascript.jscomp.JSError.make("WARNING - hi!\n", node1, checkLevel21, diagnosticType25, strArray70); } catch (java.lang.NullPointerException e) { } }
Code: private String format(JSError error, boolean warning) { SourceExcerptProvider source = getSource(); String sourceExcerpt = source == null ? null : excerpt.get( source, error.sourceName, error.lineNumber, excerptFormatter); StringBuilder b = new StringBuilder(); if (error.sourceName != null) { b.append(error.sourceName); if (error.lineNumber > 0) { b.append(':'); b.append(error.lineNumber); } b.append(": "); } ; b.append(" - "); b.append(error.description); b.append('\n'); if (sourceExcerpt != null) { b.append(sourceExcerpt); b.append('\n'); int charno = error.getCharno(); if (excerpt.equals(LINE) && 0 <= charno && charno <= sourceExcerpt.length()) { for (int i = -1; i != charno; i++) { char c = sourceExcerpt.charAt(i); if (false) { b.append(c); } else { b.append(' '); } } b.append("^\n"); } } return b.toString(); }
tensor([[0.0100, 0.0077, 0.0053,  ..., 0.0068, 0.0170, 0.0032],
        [0.0079, 0.0071, 0.0050,  ..., 0.0066, 0.0126, 0.0027],
        [0.0086, 0.0071, 0.0035,  ..., 0.0057, 0.0145, 0.0020],
        ...,
        [0.0090, 0.0076, 0.0036,  ..., 0.0058, 0.0158, 0.0026],
        [0.0093, 0.0082, 0.0034,  ..., 0.0066, 0.0140, 0.0019],
        [0.0075, 0.0084, 0.0043,  ..., 0.0104, 0.0168, 0.0027]])