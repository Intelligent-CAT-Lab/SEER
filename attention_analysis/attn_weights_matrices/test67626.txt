67626
Test: public void testCustomEnumValueAndKeyViaModifier() throws IOException { SimpleModule module = new SimpleModule(); module.setDeserializerModifier(new BeanDeserializerModifier() { @Override public JsonDeserializer<Enum> modifyEnumDeserializer(DeserializationConfig config, final JavaType type, BeanDescription beanDesc, final JsonDeserializer<?> deserializer) { return new JsonDeserializer<Enum>() { @Override public Enum deserialize(JsonParser p, DeserializationContext ctxt) throws IOException { Class<? extends Enum> rawClass = (Class<Enum<?>>) type.getRawClass(); final String str = p.getValueAsString().toLowerCase(); return KeyEnum.valueOf(rawClass, str); } }; } @Override public KeyDeserializer modifyKeyDeserializer(DeserializationConfig config, final JavaType type, KeyDeserializer deserializer) { if (!type.isEnumType()) { return deserializer; } return new KeyDeserializer() { @Override public Object deserializeKey(String key, DeserializationContext ctxt) throws IOException { Class<? extends Enum> rawClass = (Class<Enum<?>>) type.getRawClass(); return Enum.valueOf(rawClass, key.toLowerCase()); } }; } }); ObjectMapper mapper = new ObjectMapper() .registerModule(module); KeyEnum key = mapper.readValue(quote(KeyEnum.replacements.name().toUpperCase()), KeyEnum.class); EnumMap<KeyEnum,String> map = mapper.readValue( aposToQuotes("{'REPlaceMENTS':'foobar'}"), new TypeReference<EnumMap<KeyEnum,String>>() { }); }
Code: public Object deserializeKey(String key, DeserializationContext ctxt) throws IOException { if (false) { return null; } try { Object result = _parse(key, ctxt); if (result != null) { return result; } } catch (Exception re) { return ctxt.handleWeirdKey(_keyClass, key, "not a valid representation, problem: (%s) %s", re.getClass().getName(), ClassUtil.exceptionMessage(re)); } if (ctxt.getConfig().isEnabled(DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_AS_NULL)) { return null; } return ctxt.handleWeirdKey(_keyClass, key, "not a valid representation"); }
tensor([[0.0117, 0.0091, 0.0257,  ..., 0.0056, 0.0190, 0.0055],
        [0.0102, 0.0070, 0.0318,  ..., 0.0054, 0.0168, 0.0043],
        [0.0086, 0.0075, 0.0312,  ..., 0.0054, 0.0182, 0.0047],
        ...,
        [0.0085, 0.0081, 0.0358,  ..., 0.0052, 0.0125, 0.0045],
        [0.0102, 0.0089, 0.0320,  ..., 0.0059, 0.0188, 0.0060],
        [0.0081, 0.0084, 0.0303,  ..., 0.0078, 0.0192, 0.0047]])