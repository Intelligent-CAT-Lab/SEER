101252
Test: public void test229() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test229"); org.joda.time.chrono.GJChronology gJChronology0 = org.joda.time.chrono.GJChronology.getInstance(); org.joda.time.DateTimeField dateTimeField1 = gJChronology0.minuteOfHour(); org.joda.time.DateTimeField dateTimeField2 = gJChronology0.hourOfDay(); org.joda.time.Chronology chronology3 = org.joda.time.DateTimeUtils.getChronology((org.joda.time.Chronology) gJChronology0); org.joda.time.DateTimeField dateTimeField4 = gJChronology0.hourOfHalfday(); org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.dayOfMonth(); org.joda.time.field.OffsetDateTimeField offsetDateTimeField7 = new org.joda.time.field.OffsetDateTimeField(dateTimeField4, dateTimeFieldType5, 100); org.joda.time.Partial partial9 = new org.joda.time.Partial(dateTimeFieldType5, 23); int int10 = partial9.size(); int int12 = partial9.getValue(0); org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray13 = partial9.getFieldTypes(); org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray14 = partial9.getFieldTypes(); org.joda.time.chrono.GJChronology gJChronology15 = org.joda.time.chrono.GJChronology.getInstance(); org.joda.time.DateTimeField dateTimeField16 = gJChronology15.minuteOfHour(); org.joda.time.chrono.GJChronology gJChronology17 = org.joda.time.chrono.GJChronology.getInstance(); org.joda.time.DateTimeField dateTimeField18 = gJChronology17.yearOfEra(); int int20 = dateTimeField18.getMinimumValue(0L); org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.weekyearOfCentury(); org.joda.time.field.OffsetDateTimeField offsetDateTimeField23 = new org.joda.time.field.OffsetDateTimeField(dateTimeField18, dateTimeFieldType21, (int) (short) 10); org.joda.time.DurationField durationField24 = offsetDateTimeField23.getRangeDurationField(); long long27 = offsetDateTimeField23.add((-31535999990L), (long) (byte) 0); org.joda.time.field.SkipDateTimeField skipDateTimeField28 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology) gJChronology15, (org.joda.time.DateTimeField) offsetDateTimeField23); long long31 = skipDateTimeField28.getDifferenceAsLong((long) 7, (long) '4'); boolean boolean33 = skipDateTimeField28.isLeap(2440588L); org.joda.time.LocalDate localDate34 = new org.joda.time.LocalDate(); org.joda.time.DateTime dateTime35 = localDate34.toDateTimeAtCurrentTime(); org.joda.time.LocalDate localDate37 = localDate34.withCenturyOfEra(9700); org.joda.time.LocalDate localDate39 = localDate37.minusMonths(0); org.joda.time.chrono.GJChronology gJChronology40 = org.joda.time.chrono.GJChronology.getInstance(); org.joda.time.DateTimeField dateTimeField41 = gJChronology40.yearOfEra(); int int43 = dateTimeField41.getMinimumValue(0L); org.joda.time.DateTimeFieldType dateTimeFieldType44 = org.joda.time.DateTimeFieldType.weekyearOfCentury(); org.joda.time.field.OffsetDateTimeField offsetDateTimeField46 = new org.joda.time.field.OffsetDateTimeField(dateTimeField41, dateTimeFieldType44, (int) (short) 10); org.joda.time.DurationField durationField47 = offsetDateTimeField46.getRangeDurationField(); java.lang.String str48 = offsetDateTimeField46.toString(); long long51 = offsetDateTimeField46.add(0L, (-1)); org.joda.time.chrono.ISOChronology iSOChronology52 = org.joda.time.chrono.ISOChronology.getInstance(); java.lang.String str53 = iSOChronology52.toString(); org.joda.time.Chronology chronology54 = iSOChronology52.withUTC(); org.joda.time.DateTimeField dateTimeField55 = iSOChronology52.millisOfDay(); org.joda.time.LocalDate localDate56 = new org.joda.time.LocalDate(); org.joda.time.DateTime dateTime57 = localDate56.toDateTimeAtCurrentTime(); int[] intArray58 = localDate56.getValues(); org.joda.time.LocalDate localDate60 = localDate56.minusWeeks((int) (byte) 1); int[] intArray62 = iSOChronology52.get((org.joda.time.ReadablePartial) localDate56, (long) (short) -1); org.joda.time.DurationField durationField63 = iSOChronology52.eras(); org.joda.time.DateTimeFieldType dateTimeFieldType64 = org.joda.time.DateTimeFieldType.dayOfWeek(); org.joda.time.field.RemainderDateTimeField remainderDateTimeField66 = new org.joda.time.field.RemainderDateTimeField((org.joda.time.DateTimeField) offsetDateTimeField46, durationField63, dateTimeFieldType64, (int) (short) 100); org.joda.time.LocalDate localDate67 = new org.joda.time.LocalDate(); org.joda.time.DateTime dateTime68 = localDate67.toDateTimeAtCurrentTime(); int[] intArray69 = localDate67.getValues(); int int70 = localDate67.getWeekOfWeekyear(); org.joda.time.DateTimeZone dateTimeZone73 = org.joda.time.DateTimeZone.forOffsetMillis(0); org.joda.time.DateTime dateTime74 = new org.joda.time.DateTime((long) (short) 10, dateTimeZone73); int int76 = dateTimeZone73.getOffset(0L); org.joda.time.DateMidnight dateMidnight77 = localDate67.toDateMidnight(dateTimeZone73); org.joda.time.chrono.GJChronology gJChronology78 = org.joda.time.chrono.GJChronology.getInstance(); org.joda.time.DateTimeField dateTimeField79 = gJChronology78.yearOfEra(); int int81 = dateTimeField79.getMinimumValue(0L); org.joda.time.DateTimeFieldType dateTimeFieldType82 = org.joda.time.DateTimeFieldType.weekyearOfCentury(); org.joda.time.field.OffsetDateTimeField offsetDateTimeField84 = new org.joda.time.field.OffsetDateTimeField(dateTimeField79, dateTimeFieldType82, (int) (short) 10); org.joda.time.DurationField durationField85 = offsetDateTimeField84.getRangeDurationField(); java.lang.String str86 = offsetDateTimeField84.toString(); org.joda.time.LocalDate localDate87 = new org.joda.time.LocalDate(); org.joda.time.DateTime dateTime88 = localDate87.toDateTimeAtCurrentTime(); org.joda.time.LocalDate.Property property89 = localDate87.era(); org.joda.time.LocalDate localDate90 = property89.roundHalfCeilingCopy(); org.joda.time.LocalDate localDate91 = new org.joda.time.LocalDate(); org.joda.time.DateTime dateTime92 = localDate91.toDateTimeAtCurrentTime(); int[] intArray93 = localDate91.getValues(); int int94 = offsetDateTimeField84.getMaximumValue((org.joda.time.ReadablePartial) localDate90, intArray93); int int95 = remainderDateTimeField66.getMaximumValue((org.joda.time.ReadablePartial) localDate67, intArray93); int int96 = skipDateTimeField28.getMaximumValue((org.joda.time.ReadablePartial) localDate37, intArray93); org.joda.time.chrono.GJChronology gJChronology97 = org.joda.time.chrono.GJChronology.getInstance(); org.joda.time.DateTimeField dateTimeField98 = gJChronology97.dayOfYear(); try { org.joda.time.Partial partial99 = new org.joda.time.Partial(dateTimeFieldTypeArray14, intArray93, (org.joda.time.Chronology) gJChronology97); } catch (java.lang.IllegalArgumentException e) { } }
Code: public Partial(DateTimeFieldType[] types, int[] values, Chronology chronology) { super(); chronology = DateTimeUtils.getChronology(chronology).withUTC(); iChronology = chronology; if (types == null) { throw new IllegalArgumentException("Types array must not be null"); } if (values == null) { throw new IllegalArgumentException("Values array must not be null"); } if (values.length != types.length) { throw new IllegalArgumentException("Values array must be the same length as the types array"); } if (types.length == 0) { iTypes = types; iValues = values; return; } for (int i = 0; i < types.length; i++) { if (types[i] == null) { throw new IllegalArgumentException("Types array must not contain null: index " + i); } } DurationField lastUnitField = null; for (int i = 0; i < types.length; i++) { DateTimeFieldType loopType = types[i]; DurationField loopUnitField = loopType.getDurationType().getField(iChronology); if (i > 0) { int compare = lastUnitField.compareTo(loopUnitField); if (compare < 0 || (compare != 0 && loopUnitField.isSupported() == false)) { throw new IllegalArgumentException("Types array must be in order largest-smallest: " + types[i - 1].getName() + " < " + loopType.getName()); } else if (compare == 0) { if (types[i - 1].getRangeDurationType() == null) { if (loopType.getRangeDurationType() == null) { throw new IllegalArgumentException("Types array must not contain duplicate: " + types[i - 1].getName() + " and " + loopType.getName()); } } else { if (loopType.getRangeDurationType() == null) { throw new IllegalArgumentException("Types array must be in order largest-smallest: " + types[i - 1].getName() + " < " + loopType.getName()); } DurationField lastRangeField = types[i - 1].getRangeDurationType().getField(iChronology); DurationField loopRangeField = loopType.getRangeDurationType().getField(iChronology); if (lastRangeField.compareTo(loopRangeField) < 0) { throw new IllegalArgumentException("Types array must be in order largest-smallest: " + types[i - 1].getName() + " < " + loopType.getName()); } if (lastRangeField.compareTo(loopRangeField) == 0) { throw new IllegalArgumentException("Types array must not contain duplicate: " + types[i - 1].getName() + " and " + loopType.getName()); } } } } lastUnitField = loopUnitField; } iTypes = (DateTimeFieldType[]) types.clone(); chronology.validate(this, values); iValues = (int[]) values.clone(); }
tensor([[0.0023, 0.0016, 0.0024,  ..., 0.0011, 0.0015, 0.0010],
        [0.0019, 0.0015, 0.0022,  ..., 0.0010, 0.0013, 0.0008],
        [0.0016, 0.0014, 0.0023,  ..., 0.0011, 0.0010, 0.0007],
        ...,
        [0.0019, 0.0017, 0.0022,  ..., 0.0012, 0.0012, 0.0011],
        [0.0018, 0.0013, 0.0024,  ..., 0.0015, 0.0013, 0.0010],
        [0.0017, 0.0015, 0.0022,  ..., 0.0013, 0.0013, 0.0009]])