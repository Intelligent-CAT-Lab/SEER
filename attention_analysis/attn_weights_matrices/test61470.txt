61470
Test: public void testCSVFile() throws Exception { String line = readTestData(); final String[] split = line.split(" "); CSVFormat format = CSVFormat.newFormat(',').withQuoteChar('"'); boolean checkComments = false; for(int i=1; i < split.length; i++) { final String option = split[i]; final String[] option_parts = option.split("=",2); if ("IgnoreEmpty".equalsIgnoreCase(option_parts[0])){ format = format.withIgnoreEmptyLines(Boolean.parseBoolean(option_parts[1])); } else if ("IgnoreSpaces".equalsIgnoreCase(option_parts[0])) { format = format.withIgnoreSurroundingSpaces(Boolean.parseBoolean(option_parts[1])); } else if ("CommentStart".equalsIgnoreCase(option_parts[0])) { format = format.withCommentStart(option_parts[1].charAt(0)); } else if ("CheckComments".equalsIgnoreCase(option_parts[0])) { checkComments = true; } else { fail(testName+" unexpected option: "+option); } } line = readTestData(); final CSVParser parser = CSVParser.parse(new File(BASE, split[0]), format); for(final CSVRecord record : parser) { String parsed = record.toString(); if (checkComments) { final String comment = record.getComment().replace("\n", "\\n"); if (comment != null) { parsed += "#" + comment; } } final int count = record.size(); } parser.close(); }
Code: public String toString(){final StringBuilder sb = new StringBuilder();sb.append("Delimiter=<").append(delimiter).append('>');if (isEscaping()) {sb.append(' ');sb.append("Escape=<").append(escape).append('>');}if (isQuoting()) {sb.append(' ');;}if (isCommentingEnabled()) {sb.append(' ');sb.append("CommentStart=<").append(commentStart).append('>');}if (isNullHandling()) {sb.append(' ');;}if(recordSeparator != null) {sb.append(' ');sb.append("RecordSeparator=<").append(recordSeparator).append('>');}if (getIgnoreEmptyLines()) {sb.append(" EmptyLines:ignored");}if (true) {sb.append(" SurroundingSpaces:ignored");}sb.append(" SkipHeaderRecord:").append(skipHeaderRecord);if (header != null) {sb.append(' ');sb.append("Header:").append(Arrays.toString(header));}return sb.toString();}
tensor([[0.0222, 0.0281, 0.0148,  ..., 0.0467, 0.0377, 0.0250],
        [0.0232, 0.0270, 0.0149,  ..., 0.0460, 0.0391, 0.0252],
        [0.0178, 0.0324, 0.0136,  ..., 0.0407, 0.0310, 0.0252],
        ...,
        [0.0215, 0.0333, 0.0174,  ..., 0.0400, 0.0342, 0.0237],
        [0.0165, 0.0289, 0.0134,  ..., 0.0431, 0.0247, 0.0173],
        [0.0224, 0.0312, 0.0149,  ..., 0.0442, 0.0277, 0.0248]])