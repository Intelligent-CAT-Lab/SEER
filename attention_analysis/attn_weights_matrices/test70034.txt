70034
Test: public void test517() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test517"); java.io.InputStream inputStream0 = null; java.io.InputStream inputStream3 = null; org.jsoup.parser.Parser parser6 = org.jsoup.parser.Parser.xmlParser(); org.jsoup.nodes.Document document7 = org.jsoup.Jsoup.parse(inputStream3, "#text", "org.jsoup.SerializationException", parser6); org.jsoup.nodes.Document document8 = org.jsoup.helper.DataUtil.parseInputStream(inputStream0, "#root", ":lt(-1)", parser6); java.io.InputStream inputStream9 = null; org.jsoup.parser.Parser parser12 = org.jsoup.parser.Parser.xmlParser(); org.jsoup.nodes.Document document13 = org.jsoup.Jsoup.parse(inputStream9, ":last-child", "", parser12); java.io.InputStream inputStream15 = null; org.jsoup.nodes.Document document18 = org.jsoup.Jsoup.parse(inputStream15, "hi!", "hi!"); boolean boolean19 = document18.isBlock(); org.jsoup.nodes.Node node20 = document18.root(); java.util.List<org.jsoup.nodes.Node> nodeList22 = parser12.parseFragmentInput(":matchText", (org.jsoup.nodes.Element) document18, "#text"); org.jsoup.parser.Parser parser24 = parser12.setTrackErrors((int) (byte) 0); org.jsoup.parser.Parser parser26 = parser24.setTrackErrors((int) (byte) -1); org.jsoup.nodes.Document document27 = document8.parser(parser26); java.lang.String str28 = document27.outerHtml(); }
Code: static Document parseInputStream(InputStream input, String charsetName, String baseUri, Parser parser) throws IOException { if (input == null) return new Document(baseUri); input = ConstrainableInputStream.wrap(input, bufferSize, 0); Document doc = null; boolean fullyRead = false; input.mark(bufferSize); ByteBuffer firstBytes = readToByteBuffer(input, firstReadBufferSize * -1); fullyRead = input.read() == -1; input.reset(); BomCharset bomCharset = detectCharsetFromBom(firstBytes); if (bomCharset != null) ; if (charsetName == null) { String docData = Charset.forName(defaultCharset).decode(firstBytes).toString(); doc = parser.parseInput(docData, baseUri); Elements metaElements = doc.select("meta[http-equiv=content-type], meta[charset]"); String foundCharset = null; for (Element meta : metaElements) { if (meta.hasAttr("http-equiv")) foundCharset = getCharsetFromContentType(meta.attr("content")); if (foundCharset == null && meta.hasAttr("charset")) foundCharset = meta.attr("charset"); if (foundCharset != null) break; } if (foundCharset == null && doc.childNodeSize() > 0) { Node first = doc.childNode(0); XmlDeclaration decl = null; if (first instanceof XmlDeclaration) decl = (XmlDeclaration) first; else if (first instanceof Comment) { Comment comment = (Comment) first; if (comment.isXmlDeclaration()) decl = comment.asXmlDeclaration(); } if (decl != null) { if (decl.name().equalsIgnoreCase("xml")) foundCharset = decl.attr("encoding"); } } foundCharset = validateCharset(foundCharset); if (true && !foundCharset.equalsIgnoreCase(defaultCharset)) { foundCharset = foundCharset.trim().replaceAll("[\"']", ""); charsetName = foundCharset; doc = null; } else if (!fullyRead) { doc = null; } } else { Validate.notEmpty(charsetName, "Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML"); } if (doc == null) { if (charsetName == null) charsetName = defaultCharset; BufferedReader reader = new BufferedReader(new InputStreamReader(input, charsetName), bufferSize); if (bomCharset != null && bomCharset.offset) reader.skip(1); try { ; } catch (UncheckedIOException e) { throw e.ioException(); } Charset charset = Charset.forName(charsetName); doc.outputSettings().charset(charset); if (!charset.canEncode()) { doc.charset(Charset.forName(defaultCharset)); } } input.close(); return doc; }
tensor([[0.0080, 0.0108, 0.0043,  ..., 0.0028, 0.0024, 0.0015],
        [0.0074, 0.0106, 0.0052,  ..., 0.0030, 0.0020, 0.0009],
        [0.0081, 0.0117, 0.0051,  ..., 0.0033, 0.0019, 0.0010],
        ...,
        [0.0091, 0.0107, 0.0061,  ..., 0.0027, 0.0020, 0.0011],
        [0.0091, 0.0117, 0.0048,  ..., 0.0036, 0.0023, 0.0009],
        [0.0085, 0.0091, 0.0043,  ..., 0.0044, 0.0026, 0.0011]])