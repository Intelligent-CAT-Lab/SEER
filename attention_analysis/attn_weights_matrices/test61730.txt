61730
Test: public void test0764() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0764"); org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.TDF; org.apache.commons.csv.CSVFormat cSVFormat2 = cSVFormat0.withNullString("hi!"); cSVFormat2.validate(); org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat2.withNullString("\r\n"); org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat5.withCommentStart((java.lang.Character) '4'); org.apache.commons.csv.CSVFormat cSVFormat8 = org.apache.commons.csv.CSVFormat.TDF; org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat8.withNullString("hi!"); cSVFormat10.validate(); org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat10.withEscape('a'); org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat13.withRecordSeparator('a'); org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormat15.withCommentStart((java.lang.Character) '\\'); java.lang.Character char18 = cSVFormat15.getCommentStart(); org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormat15.withEscape((java.lang.Character) '\b'); org.apache.commons.csv.CSVFormat cSVFormat21 = org.apache.commons.csv.CSVFormat.TDF; org.apache.commons.csv.CSVFormat cSVFormat23 = cSVFormat21.withNullString("hi!"); cSVFormat23.validate(); org.apache.commons.csv.CSVFormat cSVFormat26 = cSVFormat23.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat28 = cSVFormat23.withCommentStart('\037'); boolean boolean29 = cSVFormat28.getIgnoreEmptyLines(); org.apache.commons.csv.CSVFormat cSVFormat31 = cSVFormat28.withSkipHeaderRecord(true); org.apache.commons.csv.CSVFormat cSVFormat33 = cSVFormat31.withCommentStart('\t'); org.apache.commons.csv.CSVFormat cSVFormat35 = cSVFormat31.withSkipHeaderRecord(false); boolean boolean36 = cSVFormat31.isEscaping(); org.apache.commons.csv.CSVFormat cSVFormat37 = org.apache.commons.csv.CSVFormat.TDF; cSVFormat37.validate(); org.apache.commons.csv.Quote quote39 = null; org.apache.commons.csv.CSVFormat cSVFormat40 = cSVFormat37.withQuotePolicy(quote39); org.apache.commons.csv.CSVFormat cSVFormat42 = cSVFormat40.withQuoteChar('\t'); java.lang.Character char43 = cSVFormat42.getEscape(); boolean boolean44 = cSVFormat42.isCommentingEnabled(); org.apache.commons.csv.Quote quote45 = cSVFormat42.getQuotePolicy(); boolean boolean46 = cSVFormat31.equals((java.lang.Object) quote45); org.apache.commons.csv.CSVFormat cSVFormat48 = cSVFormat31.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat49 = org.apache.commons.csv.CSVFormat.TDF; cSVFormat49.validate(); org.apache.commons.csv.CSVFormat cSVFormat52 = cSVFormat49.withIgnoreEmptyLines(true); java.lang.String[] strArray55 = new java.lang.String[] { "hi!", "a\t0" }; org.apache.commons.csv.CSVFormat cSVFormat56 = cSVFormat49.withHeader(strArray55); java.lang.String str57 = cSVFormat31.format((java.lang.Object[]) strArray55); org.apache.commons.csv.CSVFormat cSVFormat58 = cSVFormat20.withHeader(strArray55); org.apache.commons.csv.CSVFormat cSVFormat59 = cSVFormat5.withHeader(strArray55); java.lang.String str60 = cSVFormat5.toString(); }
Code: public String toString() { final StringBuilder sb = new StringBuilder(); sb.append("Delimiter=<").append(delimiter).append('>'); if (isEscaping()) { sb.append(' '); sb.append("Escape=<").append(escape).append('>'); } if (isQuoting()) { sb.append(' '); sb.append("QuoteChar=<").append(quoteChar).append('>'); } if (isCommentingEnabled()) { sb.append(' '); sb.append("CommentStart=<").append(commentStart).append('>'); } if (isNullHandling()) { sb.append(' '); sb.append("NullString=<").append(nullString).append('>'); } if(true) { sb.append(' '); sb.append("RecordSeparator=<").append(recordSeparator).append('>'); } if (true) { sb.append(" EmptyLines:ignored"); } if (getIgnoreSurroundingSpaces()) { ; } sb.append(" SkipHeaderRecord:").append(skipHeaderRecord); if (true) { sb.append(' '); ; } return sb.toString(); }
tensor([[0.0077, 0.0093, 0.0076,  ..., 0.0089, 0.0289, 0.0042],
        [0.0074, 0.0078, 0.0074,  ..., 0.0079, 0.0368, 0.0035],
        [0.0050, 0.0075, 0.0037,  ..., 0.0079, 0.0360, 0.0033],
        ...,
        [0.0050, 0.0070, 0.0035,  ..., 0.0067, 0.0384, 0.0035],
        [0.0052, 0.0086, 0.0052,  ..., 0.0091, 0.0332, 0.0034],
        [0.0050, 0.0091, 0.0082,  ..., 0.0122, 0.0332, 0.0035]])