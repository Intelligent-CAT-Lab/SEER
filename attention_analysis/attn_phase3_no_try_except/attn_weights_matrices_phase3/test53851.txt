53851
Test: public void test13147() throws Throwable { DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay(); int int0 = 0; boolean boolean0 = false; DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, 0, false); String string0 = "P"; MockPrintStream mockPrintStream0 = new MockPrintStream("P"); GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC(); mockPrintStream0.close(); long long0 = gregorianChronology0.add((long) 0, 0L, 0); Chronology chronology0 = gregorianChronology0.withZone((DateTimeZone) null); LocalDate localDate0 = new LocalDate(31622400000L, (DateTimeZone) null); long long1 = gregorianChronology0.set(localDate0, 0L); Locale locale0 = Locale.CANADA_FRENCH; dateTimeFormatterBuilder_TwoDigitYear0.printTo((Appendable) mockPrintStream0, 0L, chronology0, 57, (DateTimeZone) null, locale0); DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, 57, 0); int int1 = dateTimeFormatterBuilder_Fraction0.estimatePrintedLength(); DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder(); int int2 = 3594; DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendFractionOfSecond(3594, 3594); }
Code: public DateTimeFormatterBuilder appendFractionOfSecond(int minDigits, int maxDigits) { return appendFraction(DateTimeFieldType.secondOfDay(), minDigits, maxDigits); }
[[0.07045451 0.0977381  0.0977381  0.0977381  0.0446879  0.0977381
 0.09334061 0.07746354 0.0977381  0.0977381  0.0977381  0.02988677]
[0.06001871 0.0989942  0.0989942  0.0989942  0.03825001 0.0989942
 0.10166976 0.07301812 0.09899421 0.09899421 0.09899421 0.03408394]
[0.06001871 0.0989942  0.0989942  0.0989942  0.03825001 0.0989942
 0.10166976 0.07301812 0.09899421 0.09899421 0.09899421 0.03408394]
[0.06001871 0.0989942  0.0989942  0.0989942  0.03825001 0.0989942
 0.10166976 0.07301812 0.09899421 0.09899421 0.09899421 0.03408394]
[0.04239925 0.10441163 0.10441163 0.10441163 0.02879433 0.10441163
 0.10634575 0.06969559 0.10441165 0.10441165 0.10441165 0.02188366]
[0.06001871 0.0989942  0.0989942  0.0989942  0.03825001 0.0989942
 0.10166976 0.07301812 0.09899421 0.09899421 0.09899421 0.03408394]
[0.07308374 0.09133645 0.09133645 0.09133645 0.03402039 0.09133645
 0.12738362 0.08281835 0.09133646 0.09133646 0.09133646 0.04333861]
[0.05131359 0.10224862 0.10224862 0.10224862 0.0305373  0.10224862
 0.10041224 0.07448341 0.10224862 0.10224862 0.10224862 0.02751317]
[0.06001871 0.0989942  0.0989942  0.0989942  0.03825001 0.0989942
 0.10166976 0.07301812 0.09899421 0.09899421 0.09899421 0.03408394]
[0.06001871 0.0989942  0.0989942  0.0989942  0.03825001 0.0989942
 0.10166976 0.07301812 0.09899421 0.09899421 0.09899421 0.03408394]
[0.06001871 0.0989942  0.0989942  0.0989942  0.03825001 0.0989942
 0.10166976 0.07301812 0.09899421 0.09899421 0.09899421 0.03408394]
[0.04941742 0.088955   0.088955   0.088955   0.03653049 0.088955
 0.14699095 0.11370802 0.08895499 0.08895499 0.08895499 0.03066816]]