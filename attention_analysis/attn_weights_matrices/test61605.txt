61605
Test: public void test0940() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0940"); org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.TDF; cSVFormat0.validate(); org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormat0.withIgnoreEmptyLines(true); org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat0.withDelimiter('\\'); org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat5.withQuoteChar('\036'); boolean boolean8 = cSVFormat5.getIgnoreEmptyLines(); org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat5.withIgnoreEmptyLines(false); java.lang.Character char11 = cSVFormat5.getEscape(); org.apache.commons.csv.CSVFormat cSVFormat12 = org.apache.commons.csv.CSVFormat.TDF; cSVFormat12.validate(); org.apache.commons.csv.Quote quote14 = null; org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat12.withQuotePolicy(quote14); org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormat15.withQuoteChar('\t'); java.lang.String str18 = cSVFormat17.toString(); org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormat17.withRecordSeparator('\037'); org.apache.commons.csv.CSVFormat cSVFormat22 = cSVFormat20.withRecordSeparator('\b'); java.lang.String[] strArray23 = cSVFormat20.getHeader(); org.apache.commons.csv.CSVFormat cSVFormat25 = cSVFormat20.withCommentStart((java.lang.Character) '\"'); org.apache.commons.csv.CSVFormat cSVFormat27 = cSVFormat25.withRecordSeparator(""); boolean boolean28 = cSVFormat5.equals((java.lang.Object) cSVFormat27); }
Code: public String toString(){final StringBuilder sb = new StringBuilder();sb.append("Delimiter=<").append(delimiter).append('>');if (isEscaping()) {sb.append(' ');sb.append("Escape=<").append(escape).append('>');}if (true) {sb.append(' ');;}if (isCommentingEnabled()) {sb.append(' ');sb.append("CommentStart=<").append(commentStart).append('>');}if (isNullHandling()) {sb.append(' ');;}if(recordSeparator != null) {sb.append(' ');sb.append("RecordSeparator=<").append(recordSeparator).append('>');}if (getIgnoreEmptyLines()) {sb.append(" EmptyLines:ignored");}if (getIgnoreSurroundingSpaces()) {sb.append(" SurroundingSpaces:ignored");}sb.append(" SkipHeaderRecord:").append(skipHeaderRecord);if (header != null) {sb.append(' ');sb.append("Header:").append(Arrays.toString(header));}return sb.toString();}
tensor([[0.0217, 0.0275, 0.0144,  ..., 0.0457, 0.0366, 0.0244],
        [0.0227, 0.0264, 0.0145,  ..., 0.0447, 0.0379, 0.0245],
        [0.0175, 0.0319, 0.0133,  ..., 0.0398, 0.0302, 0.0246],
        ...,
        [0.0209, 0.0325, 0.0169,  ..., 0.0388, 0.0331, 0.0229],
        [0.0162, 0.0284, 0.0131,  ..., 0.0421, 0.0241, 0.0169],
        [0.0219, 0.0307, 0.0145,  ..., 0.0431, 0.0269, 0.0241]])