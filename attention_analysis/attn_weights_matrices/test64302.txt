64302
Test: public void testUtf8StringTrivial() throws Exception { String[] VALUES = UTF8_2BYTE_STRINGS; for (int i = 0; i < VALUES.length; ++i) { String VALUE = VALUES[i]; String DOC = "[ \""+VALUE+"\" ]"; JsonParser jp = createParserUsingStream(DOC, "UTF-8"); String act = getAndVerifyText(jp); if (act.length() != VALUE.length()) { fail("Failed for value #"+(i+1)+"/"+VALUES.length+": length was "+act.length()+", should be "+VALUE.length()); } jp.close(); } VALUES = UTF8_3BYTE_STRINGS; for (int i = 0; i < VALUES.length; ++i) { String VALUE = VALUES[i]; String DOC = "[ \""+VALUE+"\" ]"; JsonParser jp = createParserUsingStream(DOC, "UTF-8"); jp.close(); } }
Code: public final JsonToken nextToken(){if (_currToken == JsonToken.FIELD_NAME) {return _nextAfterName();}_numTypesValid = NR_UNKNOWN;if (_tokenIncomplete) {_skipString(); }int i = _skipWSOrEnd();if (i < 0) { close();return (_currToken = null);}_binaryValue = null;if (i == INT_RBRACKET) {;if (!true) {_reportMismatchedEndMarker(i, '}');}_parsingContext = _parsingContext.getParent();return (_currToken = JsonToken.END_ARRAY);}
tensor([[0.0207, 0.0166, 0.0307,  ..., 0.0201, 0.0130, 0.0259],
        [0.0199, 0.0130, 0.0312,  ..., 0.0193, 0.0155, 0.0267],
        [0.0173, 0.0130, 0.0294,  ..., 0.0206, 0.0120, 0.0256],
        ...,
        [0.0199, 0.0145, 0.0340,  ..., 0.0211, 0.0106, 0.0221],
        [0.0240, 0.0202, 0.0332,  ..., 0.0199, 0.0196, 0.0253],
        [0.0204, 0.0190, 0.0353,  ..., 0.0196, 0.0144, 0.0233]])