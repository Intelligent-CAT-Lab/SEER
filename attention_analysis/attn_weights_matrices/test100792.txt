100792
Test: public void testUnsupportedMethods() { DateTimeField fieldOne = UnsupportedDateTimeField.getInstance( dateTimeFieldTypeOne, UnsupportedDurationField .getInstance(weeks)); try { fieldOne.add(localTime, 0, new int[] { 0, 100 }, 100); } catch (UnsupportedOperationException e) { } try { fieldOne.addWrapField(100000L, 250); } catch (UnsupportedOperationException e) { } try { fieldOne.addWrapField(localTime, 0, new int[] { 0, 100 }, 100); } catch (UnsupportedOperationException e) { } try { fieldOne.addWrapPartial(localTime, 0, new int[] { 0, 100 }, 100); } catch (UnsupportedOperationException e) { } try { fieldOne.get(1000L); } catch (UnsupportedOperationException e) { } try { fieldOne.getAsShortText(0, Locale.getDefault()); } catch (UnsupportedOperationException e) { } try { fieldOne.getAsShortText(100000L); } catch (UnsupportedOperationException e) { } try { fieldOne.getAsShortText(100000L, Locale.getDefault()); } catch (UnsupportedOperationException e) { } try { fieldOne.getAsShortText(localTime, 0, Locale.getDefault()); } catch (UnsupportedOperationException e) { } try { fieldOne.getAsShortText(localTime, Locale.getDefault()); } catch (UnsupportedOperationException e) { } try { fieldOne.getAsText(0, Locale.getDefault()); } catch (UnsupportedOperationException e) { } try { fieldOne.getAsText(1000L); } catch (UnsupportedOperationException e) { } try { fieldOne.getAsText(1000L, Locale.getDefault()); } catch (UnsupportedOperationException e) { } try { fieldOne.getAsText(localTime, 0, Locale.getDefault()); } catch (UnsupportedOperationException e) { } try { fieldOne.getAsText(localTime, Locale.getDefault()); } catch (UnsupportedOperationException e) { } try { fieldOne.getLeapAmount(System.currentTimeMillis()); } catch (UnsupportedOperationException e) { } try { fieldOne.getMaximumShortTextLength(Locale.getDefault()); } catch (UnsupportedOperationException e) { } try { fieldOne.getMaximumTextLength(Locale.getDefault()); } catch (UnsupportedOperationException e) { } try { fieldOne.getMaximumValue(); } catch (UnsupportedOperationException e) { } try { fieldOne.getMaximumValue(1000000L); } catch (UnsupportedOperationException e) { } try { fieldOne.getMaximumValue(localTime); } catch (UnsupportedOperationException e) { } try { fieldOne.getMaximumValue(localTime, new int[] { 0 }); } catch (UnsupportedOperationException e) { } try { fieldOne.getMinimumValue(); } catch (UnsupportedOperationException e) { } try { fieldOne.getMinimumValue(10000000L); } catch (UnsupportedOperationException e) { } try { fieldOne.getMinimumValue(localTime); } catch (UnsupportedOperationException e) { } try { fieldOne.getMinimumValue(localTime, new int[] { 0 }); } catch (UnsupportedOperationException e) { } try { fieldOne.isLeap(System.currentTimeMillis()); } catch (UnsupportedOperationException e) { } try { fieldOne.remainder(1000000L); } catch (UnsupportedOperationException e) { } try { fieldOne.roundCeiling(1000000L); } catch (UnsupportedOperationException e) { } try { fieldOne.roundFloor(1000000L); } catch (UnsupportedOperationException e) { } try { fieldOne.roundHalfCeiling(1000000L); } catch (UnsupportedOperationException e) { } try { fieldOne.roundHalfEven(1000000L); } catch (UnsupportedOperationException e) { } try { fieldOne.roundHalfFloor(1000000L); } catch (UnsupportedOperationException e) { } try { fieldOne.set(1000000L, 1000); } catch (UnsupportedOperationException e) { } try { fieldOne.set(1000000L, "Unsupported Operation"); } catch (UnsupportedOperationException e) { } try { fieldOne .set(1000000L, "Unsupported Operation", Locale.getDefault()); } catch (UnsupportedOperationException e) { } try { fieldOne.set(localTime, 0, new int[] { 0 }, 10000); } catch (UnsupportedOperationException e) { } try { fieldOne.set(localTime, 0, new int[] { 0 }, "Unsupported Operation", Locale.getDefault()); } catch (UnsupportedOperationException e) { } }
Code: public long roundCeiling(long instant) { if (iTimeField) { int offset = getOffsetToAdd(instant); instant = iField.roundCeiling(instant + offset); return instant - offset; } else { long localInstant = iZone.convertUTCToLocal(instant); localInstant = iField.roundCeiling(localInstant); return iZone.convertLocalToUTC(localInstant, false, instant); } }
tensor([[0.0214, 0.0341, 0.0319,  ..., 0.0243, 0.0101, 0.0101],
        [0.0147, 0.0285, 0.0258,  ..., 0.0234, 0.0093, 0.0093],
        [0.0186, 0.0321, 0.0263,  ..., 0.0220, 0.0086, 0.0086],
        ...,
        [0.0167, 0.0250, 0.0234,  ..., 0.0205, 0.0069, 0.0069],
        [0.0154, 0.0250, 0.0383,  ..., 0.0212, 0.0088, 0.0088],
        [0.0154, 0.0250, 0.0383,  ..., 0.0212, 0.0088, 0.0088]])