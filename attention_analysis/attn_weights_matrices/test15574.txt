15574
Test: public void test108() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test108"); org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser(); org.apache.commons.cli.CommandLine commandLine1 = posixParser0.cmd; java.util.List list2 = posixParser0.getRequiredOptions(); org.apache.commons.cli.Options options3 = new org.apache.commons.cli.Options(); java.util.Collection collection4 = options3.getOptions(); java.util.List list5 = options3.getRequiredOptions(); org.apache.commons.cli.Options options9 = options3.addOption("", false, ""); java.util.Collection collection10 = options3.getOptionGroups(); org.apache.commons.cli.PosixParser posixParser11 = new org.apache.commons.cli.PosixParser(); org.apache.commons.cli.CommandLine commandLine12 = posixParser11.cmd; org.apache.commons.cli.CommandLine commandLine13 = new org.apache.commons.cli.CommandLine(); java.lang.String str16 = commandLine13.getOptionValue('#', ""); java.util.Properties properties18 = commandLine13.getOptionProperties(""); posixParser11.processProperties(properties18); posixParser11.burstToken("", true); java.util.List list23 = posixParser11.getRequiredOptions(); org.apache.commons.cli.CommandLine commandLine24 = new org.apache.commons.cli.CommandLine(); java.lang.String str27 = commandLine24.getOptionValue('#', ""); boolean boolean29 = commandLine24.hasOption(' '); java.lang.String[] strArray31 = commandLine24.getOptionValues('4'); posixParser11.cmd = commandLine24; org.apache.commons.cli.CommandLine commandLine33 = new org.apache.commons.cli.CommandLine(); java.lang.String str36 = commandLine33.getOptionValue('#', ""); java.lang.String str38 = commandLine33.getOptionValue("hi!"); org.apache.commons.cli.Option[] optionArray39 = commandLine33.getOptions(); java.util.Properties properties41 = commandLine33.getOptionProperties("org.apache.commons.cli.MissingOptionException: hi!"); posixParser11.cmd = commandLine33; org.apache.commons.cli.Options options43 = posixParser11.getOptions(); org.apache.commons.cli.Options options44 = new org.apache.commons.cli.Options(); java.util.Collection collection45 = options44.getOptions(); java.util.List list46 = options44.getRequiredOptions(); org.apache.commons.cli.Options options50 = options44.addOption("", false, ""); org.apache.commons.cli.Option option54 = new org.apache.commons.cli.Option("", false, ""); java.lang.String str55 = option54.getValue(); option54.setDescription(""); option54.setValueSeparator('4'); org.apache.commons.cli.CommandLine commandLine60 = new org.apache.commons.cli.CommandLine(); java.util.Properties properties62 = commandLine60.getOptionProperties("hi!"); java.util.Iterator iterator63 = commandLine60.iterator(); option54.setType((java.lang.Object) iterator63); org.apache.commons.cli.Options options65 = options50.addOption(option54); java.lang.String[] strArray68 = new java.lang.String[] { "org.apache.commons.cli.MissingOptionException: hi!", "[ option: :: ]" }; java.lang.String[] strArray70 = posixParser11.flatten(options50, strArray68, true); java.lang.String[] strArray72 = posixParser0.flatten(options3, strArray68, true); org.apache.commons.cli.CommandLine commandLine73 = new org.apache.commons.cli.CommandLine(); java.util.Properties properties75 = commandLine73.getOptionProperties("hi!"); java.util.Iterator iterator76 = commandLine73.iterator(); java.lang.String str78 = commandLine73.getOptionValue('#'); java.util.List list79 = commandLine73.getArgList(); commandLine73.addArg("[ option: :: ]"); posixParser0.cmd = commandLine73; org.apache.commons.cli.CommandLine commandLine83 = new org.apache.commons.cli.CommandLine(); java.lang.String str86 = commandLine83.getOptionValue('#', ""); java.util.Iterator iterator87 = commandLine83.iterator(); java.lang.String[] strArray88 = commandLine83.getArgs(); java.lang.String str90 = commandLine83.getOptionValue('a'); posixParser0.cmd = commandLine83; }
Code: protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption) { init(); this.options = options; Iterator iter = Arrays.asList(arguments).iterator(); while (iter.hasNext()) { String token = (String) iter.next(); if (token.startsWith("--")) { int pos = token.indexOf('='); String opt = pos == -1 ? token : token.substring(0, pos); if (!options.hasOption(opt) && stopAtNonOption) { process(token); } else { tokens.add(opt); if (pos != -1) { tokens.add(token.substring(pos + 1)); } } } else if ("-".equals(token)) { tokens.add(token); } else if (token.startsWith("-")) { if (token.length() == 2) { processOptionToken(token, stopAtNonOption); } else if (options.hasOption(token)) { tokens.add(token); } else { burstToken(token, stopAtNonOption); } } else if (stopAtNonOption) { process(token); } else { tokens.add(token); } gobble(iter); } return (String[]) tokens.toArray(new String[tokens.size()]); }
tensor([[0.0098, 0.0024, 0.0103,  ..., 0.0096, 0.0063, 0.0021],
        [0.0088, 0.0022, 0.0098,  ..., 0.0082, 0.0067, 0.0022],
        [0.0083, 0.0036, 0.0110,  ..., 0.0098, 0.0064, 0.0028],
        ...,
        [0.0094, 0.0033, 0.0107,  ..., 0.0091, 0.0064, 0.0025],
        [0.0095, 0.0018, 0.0134,  ..., 0.0116, 0.0078, 0.0018],
        [0.0092, 0.0022, 0.0094,  ..., 0.0120, 0.0070, 0.0023]])