61435
Test: public void test0764() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0764"); org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.TDF; org.apache.commons.csv.CSVFormat cSVFormat2 = cSVFormat0.withNullString("hi!"); cSVFormat2.validate(); org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat2.withNullString("\r\n"); org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat5.withCommentStart((java.lang.Character) '4'); org.apache.commons.csv.CSVFormat cSVFormat8 = org.apache.commons.csv.CSVFormat.TDF; org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat8.withNullString("hi!"); cSVFormat10.validate(); org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat10.withEscape('a'); org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat13.withRecordSeparator('a'); org.apache.commons.csv.CSVFormat cSVFormat17 = cSVFormat15.withCommentStart((java.lang.Character) '\\'); java.lang.Character char18 = cSVFormat15.getCommentStart(); org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormat15.withEscape((java.lang.Character) '\b'); org.apache.commons.csv.CSVFormat cSVFormat21 = org.apache.commons.csv.CSVFormat.TDF; org.apache.commons.csv.CSVFormat cSVFormat23 = cSVFormat21.withNullString("hi!"); cSVFormat23.validate(); org.apache.commons.csv.CSVFormat cSVFormat26 = cSVFormat23.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat28 = cSVFormat23.withCommentStart('\037'); boolean boolean29 = cSVFormat28.getIgnoreEmptyLines(); org.apache.commons.csv.CSVFormat cSVFormat31 = cSVFormat28.withSkipHeaderRecord(true); org.apache.commons.csv.CSVFormat cSVFormat33 = cSVFormat31.withCommentStart('\t'); org.apache.commons.csv.CSVFormat cSVFormat35 = cSVFormat31.withSkipHeaderRecord(false); boolean boolean36 = cSVFormat31.isEscaping(); org.apache.commons.csv.CSVFormat cSVFormat37 = org.apache.commons.csv.CSVFormat.TDF; cSVFormat37.validate(); org.apache.commons.csv.Quote quote39 = null; org.apache.commons.csv.CSVFormat cSVFormat40 = cSVFormat37.withQuotePolicy(quote39); org.apache.commons.csv.CSVFormat cSVFormat42 = cSVFormat40.withQuoteChar('\t'); java.lang.Character char43 = cSVFormat42.getEscape(); boolean boolean44 = cSVFormat42.isCommentingEnabled(); org.apache.commons.csv.Quote quote45 = cSVFormat42.getQuotePolicy(); boolean boolean46 = cSVFormat31.equals((java.lang.Object) quote45); org.apache.commons.csv.CSVFormat cSVFormat48 = cSVFormat31.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat49 = org.apache.commons.csv.CSVFormat.TDF; cSVFormat49.validate(); org.apache.commons.csv.CSVFormat cSVFormat52 = cSVFormat49.withIgnoreEmptyLines(true); java.lang.String[] strArray55 = new java.lang.String[] { "hi!", "a\t0" }; org.apache.commons.csv.CSVFormat cSVFormat56 = cSVFormat49.withHeader(strArray55); java.lang.String str57 = cSVFormat31.format((java.lang.Object[]) strArray55); org.apache.commons.csv.CSVFormat cSVFormat58 = cSVFormat20.withHeader(strArray55); org.apache.commons.csv.CSVFormat cSVFormat59 = cSVFormat5.withHeader(strArray55); java.lang.String str60 = cSVFormat5.toString(); }
Code: public String toString(){final StringBuilder sb = new StringBuilder();sb.append("Delimiter=<").append(delimiter).append('>');if (isEscaping()) {sb.append(' ');sb.append("Escape=<").append(escape).append('>');}if (isQuoting()) {sb.append(' ');;}if (isCommentingEnabled()) {sb.append(' ');sb.append("CommentStart=<").append(commentStart).append('>');}if (isNullHandling()) {sb.append(' ');;}if(recordSeparator != null) {sb.append(' ');sb.append("RecordSeparator=<").append(recordSeparator).append('>');}if (getIgnoreEmptyLines()) {sb.append(" EmptyLines:ignored");}if (true) {sb.append(" SurroundingSpaces:ignored");}sb.append(" SkipHeaderRecord:").append(skipHeaderRecord);if (header != null) {sb.append(' ');sb.append("Header:").append(Arrays.toString(header));}return sb.toString();}
tensor([[0.0222, 0.0281, 0.0148,  ..., 0.0467, 0.0377, 0.0250],
        [0.0232, 0.0270, 0.0149,  ..., 0.0460, 0.0391, 0.0252],
        [0.0178, 0.0324, 0.0136,  ..., 0.0407, 0.0310, 0.0252],
        ...,
        [0.0215, 0.0333, 0.0174,  ..., 0.0400, 0.0342, 0.0237],
        [0.0165, 0.0289, 0.0134,  ..., 0.0431, 0.0247, 0.0173],
        [0.0224, 0.0312, 0.0149,  ..., 0.0442, 0.0277, 0.0248]])