16422
Test: public void test176() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test176"); org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser(); org.apache.commons.cli.PosixParser posixParser1 = new org.apache.commons.cli.PosixParser(); org.apache.commons.cli.CommandLine commandLine2 = null; posixParser1.cmd = commandLine2; org.apache.commons.cli.Options options4 = new org.apache.commons.cli.Options(); java.util.List list5 = options4.getRequiredOptions(); java.lang.String[] strArray7 = new java.lang.String[] { "[ Options: [ short {=[ option: hi! :: org.apache.commons.cli.MissingArgumentException: Missing argument for option: ]} ] [ long {hi!=[ option: hi! :: org.apache.commons.cli.MissingArgumentException: Missing argument for option: ]} ]" }; java.lang.String[] strArray9 = posixParser1.flatten(options4, strArray7, true); org.apache.commons.cli.Options options10 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Options options15 = options10.addOption("", "hi!", false, "org.apache.commons.cli.MissingArgumentException: Missing argument for option: "); org.apache.commons.cli.PosixParser posixParser16 = new org.apache.commons.cli.PosixParser(); org.apache.commons.cli.CommandLine commandLine17 = null; posixParser16.cmd = commandLine17; org.apache.commons.cli.Options options19 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Options options24 = options19.addOption("", "hi!", false, "org.apache.commons.cli.MissingArgumentException: Missing argument for option: "); java.util.List list25 = options19.getRequiredOptions(); java.util.Collection collection26 = options19.getOptionGroups(); org.apache.commons.cli.Option option29 = new org.apache.commons.cli.Option("", ""); java.lang.String[] strArray30 = option29.getValues(); org.apache.commons.cli.OptionGroup optionGroup31 = options19.getOptionGroup(option29); boolean boolean33 = options19.hasShortOption("[ Options: [ short {=[ option: hi! :: org.apache.commons.cli.MissingArgumentException: Missing argument for option: ]} ] [ long {hi!=[ option: hi! :: org.apache.commons.cli.MissingArgumentException: Missing argument for option: ]} ]"); java.lang.String[] strArray38 = new java.lang.String[] { "org.apache.commons.cli.ParseException: ", "arg", "arg", "" }; org.apache.commons.cli.CommandLine commandLine40 = posixParser16.parse(options19, strArray38, false); java.lang.String[] strArray42 = posixParser1.flatten(options15, strArray38, true); posixParser0.setOptions(options15); org.apache.commons.cli.PosixParser posixParser44 = new org.apache.commons.cli.PosixParser(); org.apache.commons.cli.CommandLine commandLine45 = null; posixParser44.cmd = commandLine45; org.apache.commons.cli.Options options47 = new org.apache.commons.cli.Options(); java.util.List list48 = options47.getRequiredOptions(); java.lang.String[] strArray50 = new java.lang.String[] { "[ Options: [ short {=[ option: hi! :: org.apache.commons.cli.MissingArgumentException: Missing argument for option: ]} ] [ long {hi!=[ option: hi! :: org.apache.commons.cli.MissingArgumentException: Missing argument for option: ]} ]" }; java.lang.String[] strArray52 = posixParser44.flatten(options47, strArray50, true); org.apache.commons.cli.Options options53 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Options options58 = options53.addOption("", "hi!", false, "org.apache.commons.cli.MissingArgumentException: Missing argument for option: "); org.apache.commons.cli.PosixParser posixParser59 = new org.apache.commons.cli.PosixParser(); org.apache.commons.cli.CommandLine commandLine60 = null; posixParser59.cmd = commandLine60; org.apache.commons.cli.Options options62 = new org.apache.commons.cli.Options(); org.apache.commons.cli.Options options67 = options62.addOption("", "hi!", false, "org.apache.commons.cli.MissingArgumentException: Missing argument for option: "); java.util.List list68 = options62.getRequiredOptions(); java.util.Collection collection69 = options62.getOptionGroups(); org.apache.commons.cli.Option option72 = new org.apache.commons.cli.Option("", ""); java.lang.String[] strArray73 = option72.getValues(); org.apache.commons.cli.OptionGroup optionGroup74 = options62.getOptionGroup(option72); boolean boolean76 = options62.hasShortOption("[ Options: [ short {=[ option: hi! :: org.apache.commons.cli.MissingArgumentException: Missing argument for option: ]} ] [ long {hi!=[ option: hi! :: org.apache.commons.cli.MissingArgumentException: Missing argument for option: ]} ]"); java.lang.String[] strArray81 = new java.lang.String[] { "org.apache.commons.cli.ParseException: ", "arg", "arg", "" }; org.apache.commons.cli.CommandLine commandLine83 = posixParser59.parse(options62, strArray81, false); java.lang.String[] strArray85 = posixParser44.flatten(options58, strArray81, true); java.lang.String[] strArray86 = null; java.util.Properties properties87 = null; org.apache.commons.cli.CommandLine commandLine88 = posixParser0.parse(options58, strArray86, properties87); java.util.Properties properties89 = null; posixParser0.processProperties(properties89); posixParser0.burstToken("[ Options: [ short {=[ option: org.apache.commons.cli.ParseException: [ARG] :: [ Options: [ short {=[ option: hi! :: org.apache.commons.cli.MissingArgumentException: Missing argument for option: ]} ] [ long {hi!=[ option: hi! :: org.apache.commons.cli.MissingArgumentException: Missing argument for option: ]} ] ]} ] [ long {hi!=[ option: hi! :: org.apache.commons.cli.MissingArgumentException: Missing argument for option: ], org.apache.commons.cli.ParseException: =[ option: org.apache.commons.cli.ParseException: [ARG] :: [ Options: [ short {=[ option: hi! :: org.apache.commons.cli.MissingArgumentException: Missing argument for option: ]} ] [ long {hi!=[ option: hi! :: org.apache.commons.cli.MissingArgumentException: Missing argument for option: ]} ] ]} ]", true); }
Code: protected void processProperties(Properties properties) { if (properties == null) { return; } for (Enumeration e = properties.propertyNames(); e.hasMoreElements();) { String option = e.nextElement().toString(); if (!false) { Option opt = getOptions().getOption(option); String value = properties.getProperty(option); if (opt.hasArg()) { if (opt.getValues().length == 0) { try { opt.addValueForProcessing(value); } catch (RuntimeException exp) { } } } else if (!("yes".equalsIgnoreCase(value) || "true".equalsIgnoreCase(value) || "1".equalsIgnoreCase(value))) { continue; } ; } } }
tensor([[0.0209, 0.0076, 0.0341,  ..., 0.0033, 0.0033, 0.0033],
        [0.0256, 0.0072, 0.0362,  ..., 0.0041, 0.0041, 0.0041],
        [0.0205, 0.0070, 0.0307,  ..., 0.0040, 0.0040, 0.0040],
        ...,
        [0.0196, 0.0069, 0.0388,  ..., 0.0036, 0.0036, 0.0036],
        [0.0196, 0.0069, 0.0388,  ..., 0.0036, 0.0036, 0.0036],
        [0.0196, 0.0069, 0.0388,  ..., 0.0036, 0.0036, 0.0036]])