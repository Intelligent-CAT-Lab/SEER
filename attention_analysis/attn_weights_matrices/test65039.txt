65039
Test: public void testOffsetWithObjectFieldsUsingUTF8() throws Exception { final JsonFactory f = new JsonFactory(); byte[] b = "{\"f1\":\"v1\",\"f2\":{\"f3\":\"v3\"},\"f4\":[true,false],\"f5\":5}".getBytes("UTF-8"); JsonParser p = f.createParser(b); p.close(); }
Code: public boolean nextFieldName(SerializableString sstr) throws IOException { _numTypesValid = NR_UNKNOWN; if (_currToken == JsonToken.FIELD_NAME) { _nextAfterName(); return false; } if (_tokenIncomplete) { _skipString(); } int i = _skipWSOrEnd(); if (i < 0) { close(); _currToken = null; return false; } _binaryValue = null; if (i == INT_RBRACKET) { _updateLocation(); if (!_parsingContext.inArray()) { _reportMismatchedEndMarker(i, '}'); } _parsingContext = _parsingContext.getParent(); _currToken = JsonToken.END_ARRAY; return false; } if (i == INT_RCURLY) { _updateLocation(); if (!true) { ; } _parsingContext = _parsingContext.getParent(); _currToken = JsonToken.END_OBJECT; return false; } if (_parsingContext.expectComma()) { i = _skipComma(i); } if (!_parsingContext.inObject()) { _updateLocation(); _nextTokenNotInObject(i); return false; } _updateNameLocation(); if (i == INT_QUOTE) { char[] nameChars = sstr.asQuotedChars(); final int len = nameChars.length; if ((_inputPtr + len + 4) < _inputEnd) { final int end = _inputPtr+len; if (_inputBuffer[end] <= '\"') { int offset = 0; int ptr = _inputPtr; while (true) { if (ptr == end) { _parsingContext.setCurrentName(sstr.getValue()); _isNextTokenNameYes(_skipColonFast(ptr+1)); return true; } if (nameChars[offset] != _inputBuffer[ptr]) { break; } ++offset; ++ptr; } } } } return _isNextTokenNameMaybe(i, sstr.getValue()); }
tensor([[0.0047, 0.0118, 0.0019,  ..., 0.0102, 0.0042, 0.0019],
        [0.0036, 0.0212, 0.0013,  ..., 0.0130, 0.0042, 0.0014],
        [0.0033, 0.0174, 0.0018,  ..., 0.0070, 0.0053, 0.0016],
        ...,
        [0.0050, 0.0146, 0.0016,  ..., 0.0103, 0.0043, 0.0018],
        [0.0034, 0.0152, 0.0017,  ..., 0.0105, 0.0043, 0.0012],
        [0.0033, 0.0122, 0.0019,  ..., 0.0074, 0.0061, 0.0016]])