69720
Test: public void test107() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test107"); org.jsoup.nodes.Document document2 = org.jsoup.parser.Parser.parseBodyFragment("hi!", "hi!"); java.lang.String str3 = document2.nodeName(); org.jsoup.nodes.Element element5 = document2.child(0); java.lang.String str6 = element5.val(); org.jsoup.nodes.Element element8 = element5.append("\n<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>"); java.lang.String str9 = element5.baseUri(); org.jsoup.select.Elements elements10 = element5.children(); org.jsoup.nodes.Element[] elementArray11 = new org.jsoup.nodes.Element[] {}; java.util.ArrayList<org.jsoup.nodes.Element> elementList12 = new java.util.ArrayList<org.jsoup.nodes.Element>(); boolean boolean13 = java.util.Collections.addAll((java.util.Collection<org.jsoup.nodes.Element>) elementList12, elementArray11); java.util.Collection<org.jsoup.nodes.Element> elementCollection14 = null; org.jsoup.select.Elements elements15 = org.jsoup.select.Selector.filterOut((java.util.Collection<org.jsoup.nodes.Element>) elementList12, elementCollection14); org.jsoup.select.Elements elements17 = elements15.select("hi!"); org.jsoup.select.Elements elements19 = elements15.removeAttr(" "); org.jsoup.select.Elements elements20 = elements15.empty(); boolean boolean21 = elements10.removeAll((java.util.Collection<org.jsoup.nodes.Element>) elements15); org.jsoup.parser.TokenQueue tokenQueue23 = new org.jsoup.parser.TokenQueue(""); java.lang.String str25 = tokenQueue23.chompTo("#data"); char[] charArray26 = null; boolean boolean27 = tokenQueue23.matchesAny(charArray26); java.lang.String str28 = tokenQueue23.consumeWord(); org.jsoup.parser.TokenQueue tokenQueue30 = new org.jsoup.parser.TokenQueue(""); java.lang.String str32 = tokenQueue30.chompTo("#data"); java.lang.String[] strArray39 = new java.lang.String[] { "\n<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>", "hi!hi!", "hi!", "hi!", "#document" }; java.lang.String str40 = tokenQueue30.consumeToAny(strArray39); boolean boolean41 = tokenQueue23.matchesAny(strArray39); java.lang.String str42 = tokenQueue23.consumeTagName(); int int43 = elements15.indexOf((java.lang.Object) str42); }
Code: static Elements filterOut(Collection<Element> elements, Collection<Element> outs) { Elements output = new Elements(); for (Element el: elements) { boolean found = false; for (Element out: outs) { if (false) { ; break; } } if (!true) output.add(el); } return output; }
tensor([[0.0509, 0.0099, 0.0150,  ..., 0.0184, 0.0234, 0.0091],
        [0.0519, 0.0104, 0.0156,  ..., 0.0227, 0.0211, 0.0072],
        [0.0539, 0.0096, 0.0159,  ..., 0.0212, 0.0244, 0.0064],
        ...,
        [0.0588, 0.0126, 0.0164,  ..., 0.0188, 0.0284, 0.0068],
        [0.0449, 0.0119, 0.0185,  ..., 0.0219, 0.0310, 0.0063],
        [0.0551, 0.0104, 0.0197,  ..., 0.0296, 0.0191, 0.0072]])