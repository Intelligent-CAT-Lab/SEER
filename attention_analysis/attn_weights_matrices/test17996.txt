17996
Test: public void test3() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test3"); java.io.PrintStream printStream0 = null; com.google.javascript.jscomp.Compiler compiler1 = new com.google.javascript.jscomp.Compiler(printStream0); com.google.javascript.jscomp.StrictModeCheck strictModeCheck2 = new com.google.javascript.jscomp.StrictModeCheck((com.google.javascript.jscomp.AbstractCompiler) compiler1); com.google.javascript.jscomp.CheckSideEffects.StripProtection stripProtection3 = new com.google.javascript.jscomp.CheckSideEffects.StripProtection((com.google.javascript.jscomp.AbstractCompiler) compiler1); com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.IR.string("(hi!)"); int int6 = node5.getSourcePosition(); int int7 = com.google.javascript.jscomp.InlineCostEstimator.getCost(node5); boolean boolean8 = node5.isAdd(); java.lang.String str9 = compiler1.toSource(node5); com.google.javascript.jscomp.TypedScopeCreator typedScopeCreator10 = new com.google.javascript.jscomp.TypedScopeCreator((com.google.javascript.jscomp.AbstractCompiler) compiler1); com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention11 = new com.google.javascript.jscomp.ClosureCodingConvention(); com.google.javascript.rhino.jstype.ObjectType objectType12 = null; com.google.javascript.rhino.jstype.ObjectType objectType13 = null; com.google.javascript.rhino.jstype.ObjectType objectType14 = null; com.google.javascript.rhino.jstype.FunctionType functionType15 = null; com.google.javascript.rhino.jstype.FunctionType functionType16 = null; closureCodingConvention11.applyDelegateRelationship(objectType12, objectType13, objectType14, functionType15, functionType16); com.google.javascript.rhino.jstype.ObjectType objectType18 = null; com.google.javascript.rhino.jstype.ObjectType objectType19 = null; com.google.javascript.rhino.jstype.ObjectType objectType20 = null; com.google.javascript.rhino.jstype.FunctionType functionType21 = null; com.google.javascript.rhino.jstype.FunctionType functionType22 = null; closureCodingConvention11.applyDelegateRelationship(objectType18, objectType19, objectType20, functionType21, functionType22); com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.IR.string("(hi!)"); com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.IR.string("(hi!)"); node25.addChildToBack(node27); boolean boolean29 = node27.isContinue(); com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.IR.string("(hi!)"); com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.IR.string("(hi!)"); com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.IR.string("(hi!)"); node33.addChildToBack(node35); java.lang.String str37 = com.google.javascript.jscomp.NodeUtil.getArrayElementStringValue(node33); boolean boolean38 = com.google.javascript.jscomp.NodeUtil.isVarOrSimpleAssignLhs(node31, node33); com.google.javascript.jscomp.NodeUtil.BooleanResultPredicate booleanResultPredicate40 = com.google.javascript.jscomp.NodeUtil.BOOLEAN_RESULT_PREDICATE; com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.IR.thisNode(); boolean boolean42 = booleanResultPredicate40.apply(node41); boolean boolean43 = com.google.javascript.jscomp.NodeUtil.containsType(node31, (int) (byte) -1, (com.google.common.base.Predicate<com.google.javascript.rhino.Node>) booleanResultPredicate40); node27.addChildToBack(node31); com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.IR.string("(hi!)"); boolean boolean47 = node46.isAdd(); boolean boolean48 = node46.isQualifiedName(); java.lang.String str49 = closureCodingConvention11.extractClassNameIfProvide(node31, node46); node46.setOptionalArg(true); com.google.javascript.jscomp.Scope scope52 = null; try { com.google.javascript.jscomp.Scope scope53 = typedScopeCreator10.createScope(node46, scope52); } catch (java.lang.RuntimeException e) { } }
Code: static int getCost(Node root, int costThreshhold) { CompiledSizeEstimator estimator = new CompiledSizeEstimator(costThreshhold); estimator.add(root); return estimator.getCost(); }
tensor([[0.1235, 0.0250, 0.1058, 0.0353, 0.0250, 0.1163, 0.0806, 0.0362, 0.0694,
         0.0307, 0.0204, 0.1220, 0.0582, 0.0447, 0.0850, 0.0221],
        [0.1647, 0.0232, 0.1039, 0.0360, 0.0232, 0.0888, 0.0577, 0.0510, 0.0506,
         0.0252, 0.0162, 0.1415, 0.0573, 0.0469, 0.1004, 0.0135],
        [0.1095, 0.0180, 0.1138, 0.0339, 0.0180, 0.1099, 0.0689, 0.0351, 0.0737,
         0.0250, 0.0175, 0.1516, 0.0641, 0.0363, 0.1081, 0.0167],
        [0.1222, 0.0219, 0.0945, 0.0442, 0.0219, 0.1352, 0.0494, 0.0364, 0.0644,
         0.0286, 0.0172, 0.1104, 0.0620, 0.0496, 0.1271, 0.0149],
        [0.1647, 0.0232, 0.1039, 0.0360, 0.0232, 0.0888, 0.0577, 0.0510, 0.0506,
         0.0252, 0.0162, 0.1415, 0.0573, 0.0469, 0.1004, 0.0135],
        [0.1293, 0.0241, 0.1035, 0.0403, 0.0241, 0.1032, 0.0583, 0.0382, 0.0785,
         0.0294, 0.0254, 0.1280, 0.0595, 0.0570, 0.0837, 0.0177],
        [0.1065, 0.0226, 0.1006, 0.0344, 0.0226, 0.0803, 0.0710, 0.0453, 0.0663,
         0.0385, 0.0264, 0.1353, 0.0717, 0.0539, 0.0989, 0.0256],
        [0.1170, 0.0220, 0.0828, 0.0379, 0.0220, 0.1023, 0.0769, 0.0480, 0.0586,
         0.0315, 0.0220, 0.1236, 0.0657, 0.0563, 0.1177, 0.0156],
        [0.1156, 0.0199, 0.0879, 0.0308, 0.0199, 0.1140, 0.0956, 0.0402, 0.0630,
         0.0261, 0.0155, 0.1530, 0.0554, 0.0417, 0.1081, 0.0135],
        [0.1215, 0.0312, 0.0867, 0.0330, 0.0312, 0.0899, 0.0559, 0.0537, 0.0728,
         0.0418, 0.0240, 0.1388, 0.0651, 0.0558, 0.0741, 0.0246],
        [0.1105, 0.0240, 0.0924, 0.0369, 0.0240, 0.1089, 0.0671, 0.0407, 0.0692,
         0.0294, 0.0238, 0.1427, 0.0731, 0.0517, 0.0859, 0.0194],
        [0.1493, 0.0146, 0.1120, 0.0317, 0.0146, 0.1024, 0.0619, 0.0432, 0.0655,
         0.0234, 0.0139, 0.1476, 0.0637, 0.0445, 0.1010, 0.0108],
        [0.1131, 0.0250, 0.1143, 0.0298, 0.0250, 0.1011, 0.0739, 0.0347, 0.0801,
         0.0327, 0.0220, 0.1225, 0.0548, 0.0488, 0.1046, 0.0176],
        [0.1299, 0.0170, 0.0807, 0.0387, 0.0170, 0.1211, 0.0546, 0.0415, 0.0529,
         0.0276, 0.0169, 0.1799, 0.0676, 0.0412, 0.0986, 0.0150],
        [0.1179, 0.0200, 0.0998, 0.0398, 0.0200, 0.1177, 0.0583, 0.0348, 0.0837,
         0.0279, 0.0183, 0.1253, 0.0651, 0.0505, 0.1032, 0.0177],
        [0.1198, 0.0239, 0.0855, 0.0370, 0.0239, 0.1432, 0.0703, 0.0352, 0.0567,
         0.0270, 0.0174, 0.1320, 0.0444, 0.0651, 0.1029, 0.0156]])