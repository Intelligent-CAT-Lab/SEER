62958
Test: public void test834() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test834"); com.google.gson.DefaultDateTypeAdapter defaultDateTypeAdapter2 = new com.google.gson.DefaultDateTypeAdapter((int) (byte) 0, 0); java.util.Date date3 = null; com.google.gson.JsonElement jsonElement4 = defaultDateTypeAdapter2.toJsonTree(date3); com.google.gson.TypeAdapter<java.util.Date> dateTypeAdapter5 = defaultDateTypeAdapter2.nullSafe(); com.google.gson.DefaultDateTypeAdapter defaultDateTypeAdapter8 = new com.google.gson.DefaultDateTypeAdapter((int) (byte) 0, 0); com.google.gson.TypeAdapter<java.util.Date> dateTypeAdapter9 = defaultDateTypeAdapter8.nullSafe(); com.google.gson.internal.bind.JsonTreeWriter jsonTreeWriter10 = new com.google.gson.internal.bind.JsonTreeWriter(); com.google.gson.stream.JsonWriter jsonWriter12 = jsonTreeWriter10.value(false); com.google.gson.stream.JsonWriter jsonWriter13 = jsonTreeWriter10.beginArray(); com.google.gson.stream.JsonWriter jsonWriter15 = jsonTreeWriter10.value(false); com.google.gson.stream.JsonWriter jsonWriter17 = jsonTreeWriter10.value((java.lang.Number) (short) 1); com.google.gson.stream.JsonWriter jsonWriter19 = jsonWriter17.value("com.google.gson.JsonSyntaxException: com.google.gson.JsonIOException: hi!"); java.util.Date date20 = null; defaultDateTypeAdapter8.write(jsonWriter19, date20); java.util.Date date22 = null; defaultDateTypeAdapter2.write(jsonWriter19, date22); java.util.Date date24 = null; com.google.gson.JsonElement jsonElement25 = defaultDateTypeAdapter2.toJsonTree(date24); com.google.gson.internal.bind.JsonTreeWriter jsonTreeWriter26 = new com.google.gson.internal.bind.JsonTreeWriter(); com.google.gson.stream.JsonWriter jsonWriter28 = jsonTreeWriter26.value(false); com.google.gson.stream.JsonWriter jsonWriter29 = jsonTreeWriter26.nullValue(); com.google.gson.stream.JsonWriter jsonWriter31 = jsonTreeWriter26.value(false); com.google.gson.stream.JsonWriter jsonWriter32 = jsonWriter31.beginArray(); java.util.Date date33 = null; defaultDateTypeAdapter2.write(jsonWriter31, date33); java.util.Date date35 = null; com.google.gson.JsonElement jsonElement36 = defaultDateTypeAdapter2.toJsonTree(date35); java.util.Date date37 = null; com.google.gson.JsonElement jsonElement38 = defaultDateTypeAdapter2.toJsonTree(date37); com.google.gson.DefaultDateTypeAdapter defaultDateTypeAdapter41 = new com.google.gson.DefaultDateTypeAdapter((int) (byte) 0, 0); com.google.gson.internal.bind.JsonTreeWriter jsonTreeWriter42 = new com.google.gson.internal.bind.JsonTreeWriter(); com.google.gson.stream.JsonWriter jsonWriter44 = jsonTreeWriter42.value(false); com.google.gson.stream.JsonWriter jsonWriter46 = jsonWriter44.value(true); java.util.Date date47 = null; defaultDateTypeAdapter41.write(jsonWriter46, date47); java.util.Date date49 = null; java.lang.String str50 = defaultDateTypeAdapter41.toJson(date49); com.google.gson.TypeAdapter<java.util.Date> dateTypeAdapter51 = defaultDateTypeAdapter41.nullSafe(); com.google.gson.DefaultDateTypeAdapter defaultDateTypeAdapter54 = new com.google.gson.DefaultDateTypeAdapter((int) (byte) 0, 0); com.google.gson.TypeAdapter<java.util.Date> dateTypeAdapter55 = defaultDateTypeAdapter54.nullSafe(); com.google.gson.TypeAdapter<java.util.Date> dateTypeAdapter56 = dateTypeAdapter55.nullSafe(); java.util.Date date57 = null; com.google.gson.JsonElement jsonElement58 = dateTypeAdapter55.toJsonTree(date57); com.google.gson.internal.bind.JsonTreeReader jsonTreeReader59 = new com.google.gson.internal.bind.JsonTreeReader(jsonElement58); boolean boolean60 = jsonTreeReader59.hasNext(); com.google.gson.stream.JsonToken jsonToken61 = jsonTreeReader59.peek(); java.lang.String str62 = jsonTreeReader59.toString(); java.util.Date date63 = defaultDateTypeAdapter41.read((com.google.gson.stream.JsonReader) jsonTreeReader59); try { java.util.Date date64 = defaultDateTypeAdapter2.read((com.google.gson.stream.JsonReader) jsonTreeReader59); } catch (java.lang.IllegalStateException e) { } }
Code: public Date read(JsonReader in) throws IOException { if (in.peek() != JsonToken.STRING) { throw new JsonParseException("The date should be a string value"); } Date date = deserializeToDate(in.nextString()); if (dateType == Date.class) { return date; } else if (dateType == Timestamp.class) { return new Timestamp(date.getTime()); } else if (dateType == java.sql.Date.class) { return new java.sql.Date(date.getTime()); } else { throw new AssertionError(); } }
tensor([[0.0125, 0.0063, 0.0167,  ..., 0.0147, 0.0057, 0.0057],
        [0.0106, 0.0058, 0.0163,  ..., 0.0164, 0.0040, 0.0040],
        [0.0084, 0.0045, 0.0139,  ..., 0.0158, 0.0044, 0.0044],
        ...,
        [0.0122, 0.0061, 0.0202,  ..., 0.0162, 0.0072, 0.0072],
        [0.0084, 0.0039, 0.0201,  ..., 0.0141, 0.0047, 0.0047],
        [0.0084, 0.0039, 0.0201,  ..., 0.0141, 0.0047, 0.0047]])