61510
Test: public void test0309() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0309"); org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.TDF; org.apache.commons.csv.CSVFormat cSVFormat2 = cSVFormat0.withNullString("hi!"); cSVFormat2.validate(); org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat2.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat2.withCommentStart('\037'); org.apache.commons.csv.CSVFormat cSVFormat8 = org.apache.commons.csv.CSVFormat.TDF; cSVFormat8.validate(); org.apache.commons.csv.CSVFormat cSVFormat10 = org.apache.commons.csv.CSVFormat.TDF; cSVFormat10.validate(); org.apache.commons.csv.Quote quote12 = null; org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat10.withQuotePolicy(quote12); org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat13.withEscape((java.lang.Character) 'a'); java.lang.Object[] objArray17 = new java.lang.Object[] { 'a', (byte) 0 }; java.lang.String str18 = cSVFormat8.format(objArray17); org.apache.commons.csv.CSVFormat cSVFormat19 = org.apache.commons.csv.CSVFormat.TDF; cSVFormat19.validate(); org.apache.commons.csv.CSVFormat cSVFormat22 = cSVFormat19.withIgnoreEmptyLines(true); java.lang.String[] strArray25 = new java.lang.String[] { "hi!", "a\t0" }; org.apache.commons.csv.CSVFormat cSVFormat26 = cSVFormat19.withHeader(strArray25); java.lang.String str27 = cSVFormat8.format((java.lang.Object[]) strArray25); org.apache.commons.csv.CSVFormat cSVFormat28 = cSVFormat7.withHeader(strArray25); org.apache.commons.csv.CSVFormat cSVFormat30 = cSVFormat28.withCommentStart((java.lang.Character) '\t'); java.lang.Class<?> wildcardClass31 = cSVFormat30.getClass(); }
Code: public String toString(){final StringBuilder sb = new StringBuilder();sb.append("Delimiter=<").append(delimiter).append('>');if (isEscaping()) {sb.append(' ');sb.append("Escape=<").append(escape).append('>');}if (isQuoting()) {sb.append(' ');;}if (isCommentingEnabled()) {sb.append(' ');sb.append("CommentStart=<").append(commentStart).append('>');}if (isNullHandling()) {sb.append(' ');;}if(recordSeparator != null) {sb.append(' ');sb.append("RecordSeparator=<").append(recordSeparator).append('>');}if (getIgnoreEmptyLines()) {sb.append(" EmptyLines:ignored");}if (true) {sb.append(" SurroundingSpaces:ignored");}sb.append(" SkipHeaderRecord:").append(skipHeaderRecord);if (header != null) {sb.append(' ');sb.append("Header:").append(Arrays.toString(header));}return sb.toString();}
tensor([[0.0222, 0.0281, 0.0148,  ..., 0.0467, 0.0377, 0.0250],
        [0.0232, 0.0270, 0.0149,  ..., 0.0460, 0.0391, 0.0252],
        [0.0178, 0.0324, 0.0136,  ..., 0.0407, 0.0310, 0.0252],
        ...,
        [0.0215, 0.0333, 0.0174,  ..., 0.0400, 0.0342, 0.0237],
        [0.0165, 0.0289, 0.0134,  ..., 0.0431, 0.0247, 0.0173],
        [0.0224, 0.0312, 0.0149,  ..., 0.0442, 0.0277, 0.0248]])