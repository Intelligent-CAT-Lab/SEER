70028
Test: public void test166() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test166"); org.jsoup.select.Evaluator.IsRoot isRoot0 = new org.jsoup.select.Evaluator.IsRoot(); org.jsoup.nodes.Document document4 = org.jsoup.Jsoup.parse("", "hi!"); org.jsoup.parser.ParseErrorList parseErrorList6 = null; java.util.List<org.jsoup.nodes.Node> nodeList7 = org.jsoup.parser.Parser.parseFragment("hi!hi!=\"hi!\"hi!=\"hi!\"", (org.jsoup.nodes.Element) document4, "#root", parseErrorList6); java.lang.String str8 = document4.cssSelector(); org.jsoup.nodes.Node node9 = document4.shallowClone(); java.util.List<org.jsoup.nodes.TextNode> textNodeList10 = document4.textNodes(); org.jsoup.nodes.Document document13 = org.jsoup.Jsoup.parse("", "hi!"); org.jsoup.nodes.Element element15 = document13.prepend(""); java.lang.String str17 = document13.attr("hi!"); boolean boolean18 = document13.isBlock(); java.lang.String[] strArray21 = new java.lang.String[] { "", "#root" }; java.util.LinkedHashSet<java.lang.String> strSet22 = new java.util.LinkedHashSet<java.lang.String>(); boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet22, strArray21); org.jsoup.nodes.Element element24 = document13.classNames((java.util.Set<java.lang.String>) strSet22); org.jsoup.nodes.Element element25 = document4.classNames((java.util.Set<java.lang.String>) strSet22); org.jsoup.nodes.Document document28 = org.jsoup.Jsoup.parse("", "hi!"); org.jsoup.nodes.Element element30 = document28.prepend(""); java.lang.StringBuilder stringBuilder31 = org.jsoup.helper.StringUtil.stringBuilder(); org.jsoup.helper.StringUtil.appendNormalisedWhitespace(stringBuilder31, "", true); java.lang.Appendable appendable35 = element30.html((java.lang.Appendable) stringBuilder31); org.jsoup.nodes.Element element36 = element30.empty(); boolean boolean37 = isRoot0.matches((org.jsoup.nodes.Element) document4, element36); org.jsoup.nodes.Document document41 = org.jsoup.Jsoup.parse("", "hi!"); org.jsoup.parser.ParseErrorList parseErrorList43 = null; java.util.List<org.jsoup.nodes.Node> nodeList44 = org.jsoup.parser.Parser.parseFragment("hi!hi!=\"hi!\"hi!=\"hi!\"", (org.jsoup.nodes.Element) document41, "#root", parseErrorList43); org.jsoup.select.Elements elements46 = document41.getElementsByAttributeStarting("#root"); org.jsoup.select.Elements elements48 = document41.getElementsByTag("#root"); org.jsoup.select.Elements elements49 = document41.children(); org.jsoup.select.Elements elements51 = document41.getElementsByIndexGreaterThan(1); org.jsoup.nodes.Element element53 = document41.prependElement("hi!"); org.jsoup.nodes.Document document56 = org.jsoup.Jsoup.parse("", "hi!"); java.lang.String str57 = document56.outerHtml(); java.nio.charset.Charset charset58 = document56.charset(); org.jsoup.nodes.Element element60 = document56.text("<html>\n <head></head>\n <body></body>\n</html>"); boolean boolean61 = isRoot0.matches((org.jsoup.nodes.Element) document41, (org.jsoup.nodes.Element) document56); java.lang.String str62 = isRoot0.toString(); }
Code: public static void appendNormalisedWhitespace(StringBuilder accum, String string, boolean stripLeading) { boolean lastWasWhite = false; boolean reachedNonWhite = false; int len = string.length(); int c; for (int i = 0; i != len; i+= Character.charCount(c)) { c = string.codePointAt(i); if (isActuallyWhitespace(c)) { if ((false) || lastWasWhite) continue; accum.append(' '); lastWasWhite = true; } else if (!isInvisibleChar(c)) { ; lastWasWhite = false; reachedNonWhite = true; } } }
tensor([[0.0124, 0.0377, 0.0101,  ..., 0.0054, 0.0054, 0.0054],
        [0.0120, 0.0319, 0.0079,  ..., 0.0058, 0.0058, 0.0058],
        [0.0095, 0.0331, 0.0082,  ..., 0.0049, 0.0049, 0.0049],
        ...,
        [0.0089, 0.0352, 0.0080,  ..., 0.0046, 0.0046, 0.0046],
        [0.0089, 0.0352, 0.0080,  ..., 0.0046, 0.0046, 0.0046],
        [0.0089, 0.0352, 0.0080,  ..., 0.0046, 0.0046, 0.0046]])