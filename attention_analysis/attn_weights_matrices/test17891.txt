17891
Test: public void testGetScopeRoot() { Compiler compiler = new Compiler(); NodeTraversal t = new NodeTraversal(compiler, new NodeTraversal.ScopedCallback() { @Override public void enterScope(NodeTraversal t) { Node root1 = t.getScopeRoot(); Node root2 = t.getScope().getRootNode(); } @Override public void exitScope(NodeTraversal t) { } @Override public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) { return true; } @Override public void visit(NodeTraversal t, Node n, Node parent) { } } ); String code = "" + "var a; " + "function foo() {" + " var b" + "}"; Node tree = parse(compiler, code); t.traverse(tree); }
Code: public void enterScope(NodeTraversal t) { if (t.inGlobalScope()) { return; } referenceStack.push(referencedNames); referencedNames = Sets.newHashSet(); }
tensor([[0.0405, 0.0340, 0.2944, 0.0208, 0.0639, 0.1102, 0.0502, 0.0639, 0.0427,
         0.0194, 0.1153, 0.0416, 0.0261, 0.0576, 0.0194],
        [0.0285, 0.0288, 0.3583, 0.0131, 0.0680, 0.0976, 0.0323, 0.0680, 0.0372,
         0.0199, 0.1115, 0.0291, 0.0263, 0.0616, 0.0199],
        [0.0266, 0.0222, 0.3684, 0.0129, 0.0610, 0.1191, 0.0544, 0.0610, 0.0365,
         0.0123, 0.1064, 0.0264, 0.0227, 0.0577, 0.0123],
        [0.0225, 0.0218, 0.3545, 0.0127, 0.0873, 0.1121, 0.0362, 0.0873, 0.0365,
         0.0119, 0.0847, 0.0265, 0.0236, 0.0706, 0.0119],
        [0.0475, 0.0419, 0.2534, 0.0244, 0.0816, 0.0812, 0.0428, 0.0816, 0.0502,
         0.0279, 0.0842, 0.0388, 0.0398, 0.0768, 0.0279],
        [0.0199, 0.0179, 0.4431, 0.0069, 0.0659, 0.1212, 0.0297, 0.0659, 0.0389,
         0.0091, 0.0851, 0.0161, 0.0176, 0.0535, 0.0091],
        [0.0291, 0.0216, 0.3886, 0.0126, 0.0738, 0.0981, 0.0384, 0.0738, 0.0357,
         0.0158, 0.0861, 0.0265, 0.0206, 0.0634, 0.0158],
        [0.0475, 0.0419, 0.2534, 0.0244, 0.0816, 0.0812, 0.0428, 0.0816, 0.0502,
         0.0279, 0.0842, 0.0388, 0.0398, 0.0768, 0.0279],
        [0.0289, 0.0218, 0.3349, 0.0141, 0.0703, 0.1234, 0.0403, 0.0703, 0.0415,
         0.0152, 0.1051, 0.0346, 0.0235, 0.0609, 0.0152],
        [0.0308, 0.0295, 0.2552, 0.0200, 0.0885, 0.1209, 0.0435, 0.0885, 0.0373,
         0.0186, 0.1111, 0.0414, 0.0289, 0.0672, 0.0186],
        [0.0430, 0.0334, 0.2811, 0.0213, 0.0822, 0.1091, 0.0472, 0.0822, 0.0402,
         0.0173, 0.0963, 0.0361, 0.0290, 0.0644, 0.0173],
        [0.0312, 0.0295, 0.2900, 0.0166, 0.0815, 0.1346, 0.0491, 0.0815, 0.0331,
         0.0127, 0.0962, 0.0344, 0.0261, 0.0709, 0.0127],
        [0.0520, 0.0428, 0.1923, 0.0343, 0.0609, 0.1156, 0.0616, 0.0609, 0.0571,
         0.0260, 0.1157, 0.0399, 0.0437, 0.0712, 0.0260],
        [0.0326, 0.0283, 0.3173, 0.0177, 0.0750, 0.1149, 0.0511, 0.0750, 0.0307,
         0.0182, 0.0998, 0.0343, 0.0280, 0.0588, 0.0182],
        [0.0308, 0.0295, 0.2552, 0.0200, 0.0885, 0.1209, 0.0435, 0.0885, 0.0373,
         0.0186, 0.1111, 0.0414, 0.0289, 0.0672, 0.0186]])