101198
Test: public void test0333() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0333"); org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.eras(); org.joda.time.field.UnsupportedDurationField unsupportedDurationField1 = org.joda.time.field.UnsupportedDurationField.getInstance(durationFieldType0); java.lang.String str2 = unsupportedDurationField1.getName(); org.joda.time.DurationFieldType durationFieldType3 = unsupportedDurationField1.getType(); org.joda.time.chrono.GJChronology gJChronology5 = org.joda.time.chrono.GJChronology.getInstanceUTC(); org.joda.time.DateTimeField dateTimeField6 = gJChronology5.yearOfCentury(); org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology5); org.joda.time.DurationField durationField8 = gJChronology5.eras(); org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) 0, (org.joda.time.Chronology) gJChronology5); org.joda.time.ReadablePeriod readablePeriod10 = null; org.joda.time.LocalDate localDate12 = localDate9.withPeriodAdded(readablePeriod10, (-28800000)); org.joda.time.LocalDate.Property property13 = localDate9.dayOfMonth(); org.joda.time.LocalDate localDate15 = property13.addWrapFieldToCopy(818); org.joda.time.DateTimeZone dateTimeZone16 = null; org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeUtils.getZone(dateTimeZone16); org.joda.time.chrono.ISOChronology iSOChronology18 = org.joda.time.chrono.ISOChronology.getInstance(); org.joda.time.DateTimeField dateTimeField19 = iSOChronology18.yearOfEra(); org.joda.time.DateTime dateTime20 = org.joda.time.DateTime.now((org.joda.time.Chronology) iSOChronology18); int int21 = dateTimeZone17.getOffset((org.joda.time.ReadableInstant) dateTime20); org.joda.time.DateTime dateTime22 = localDate15.toDateTimeAtMidnight(dateTimeZone17); boolean boolean23 = unsupportedDurationField1.equals((java.lang.Object) dateTime22); org.joda.time.DateTime.Property property24 = dateTime22.weekOfWeekyear(); org.joda.time.DateTime dateTime25 = property24.roundHalfFloorCopy(); }
Code: public static synchronized GJChronology getInstance( DateTimeZone zone, ReadableInstant gregorianCutover, int minDaysInFirstWeek) { zone = DateTimeUtils.getZone(zone); Instant cutoverInstant; if (gregorianCutover == null) { cutoverInstant = DEFAULT_CUTOVER; } else { cutoverInstant = gregorianCutover.toInstant(); } GJChronology chrono; synchronized (cCache) { ArrayList<GJChronology> chronos = cCache.get(zone); if (chronos == null) { chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); } else { for (int i = chronos.size(); --i >= 0;) { chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) { return chrono; } } } if (zone == DateTimeZone.UTC) { chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); } else { chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); } chronos.add(chrono); } return chrono; }
tensor([[0.0056, 0.0185, 0.0105,  ..., 0.0063, 0.0325, 0.0026],
        [0.0060, 0.0168, 0.0117,  ..., 0.0058, 0.0212, 0.0031],
        [0.0051, 0.0218, 0.0112,  ..., 0.0067, 0.0283, 0.0021],
        ...,
        [0.0036, 0.0181, 0.0115,  ..., 0.0050, 0.0325, 0.0021],
        [0.0049, 0.0181, 0.0114,  ..., 0.0058, 0.0284, 0.0024],
        [0.0041, 0.0173, 0.0128,  ..., 0.0090, 0.0216, 0.0023]])