17995
Test: public void test315() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test315"); java.io.PrintStream printStream0 = null; com.google.javascript.jscomp.PrintStreamErrorManager printStreamErrorManager1 = new com.google.javascript.jscomp.PrintStreamErrorManager(printStream0); com.google.javascript.jscomp.Compiler compiler2 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager) printStreamErrorManager1); com.google.javascript.jscomp.RemoveUnusedVars removeUnusedVars5 = new com.google.javascript.jscomp.RemoveUnusedVars((com.google.javascript.jscomp.AbstractCompiler) compiler2, true, false); com.google.javascript.jscomp.CodingConvention codingConvention6 = null; compiler2.defaultCodingConvention = codingConvention6; com.google.javascript.jscomp.SourceExcerptProvider.SourceExcerpt sourceExcerpt8 = null; com.google.javascript.jscomp.LightweightMessageFormatter lightweightMessageFormatter9 = new com.google.javascript.jscomp.LightweightMessageFormatter((com.google.javascript.jscomp.SourceExcerptProvider) compiler2, sourceExcerpt8); com.google.javascript.jscomp.CodeChangeHandler codeChangeHandler10 = null; compiler2.addChangeHandler(codeChangeHandler10); com.google.javascript.jscomp.Normalize normalize13 = new com.google.javascript.jscomp.Normalize((com.google.javascript.jscomp.AbstractCompiler) compiler2, true); com.google.javascript.rhino.Node node14 = null; com.google.javascript.jscomp.AbstractCompiler abstractCompiler15 = null; com.google.javascript.jscomp.DeadAssignmentsElimination deadAssignmentsElimination16 = new com.google.javascript.jscomp.DeadAssignmentsElimination(abstractCompiler15); java.io.PrintStream printStream17 = null; com.google.javascript.jscomp.PrintStreamErrorManager printStreamErrorManager18 = new com.google.javascript.jscomp.PrintStreamErrorManager(printStream17); com.google.javascript.jscomp.Compiler compiler19 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager) printStreamErrorManager18); com.google.javascript.jscomp.PrepareAst prepareAst21 = new com.google.javascript.jscomp.PrepareAst((com.google.javascript.jscomp.AbstractCompiler) compiler19, false); boolean boolean22 = compiler19.hasRegExpGlobalReferences(); com.google.javascript.jscomp.AbstractCompiler abstractCompiler23 = null; com.google.javascript.jscomp.Normalize.PropogateConstantAnnotations propogateConstantAnnotations25 = new com.google.javascript.jscomp.Normalize.PropogateConstantAnnotations(abstractCompiler23, true); com.google.javascript.jscomp.AbstractCompiler abstractCompiler26 = null; com.google.javascript.jscomp.SyntacticScopeCreator syntacticScopeCreator27 = new com.google.javascript.jscomp.SyntacticScopeCreator(abstractCompiler26); com.google.javascript.jscomp.NodeTraversal nodeTraversal28 = new com.google.javascript.jscomp.NodeTraversal((com.google.javascript.jscomp.AbstractCompiler) compiler19, (com.google.javascript.jscomp.NodeTraversal.Callback) propogateConstantAnnotations25, (com.google.javascript.jscomp.ScopeCreator) syntacticScopeCreator27); java.io.PrintStream printStream29 = null; com.google.javascript.jscomp.PrintStreamErrorManager printStreamErrorManager30 = new com.google.javascript.jscomp.PrintStreamErrorManager(printStream29); com.google.javascript.jscomp.Compiler compiler31 = new com.google.javascript.jscomp.Compiler((com.google.javascript.jscomp.ErrorManager) printStreamErrorManager30); com.google.javascript.jscomp.PrepareAst prepareAst33 = new com.google.javascript.jscomp.PrepareAst((com.google.javascript.jscomp.AbstractCompiler) compiler31, false); com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newNumber((double) '#', (int) (byte) 0, 9); boolean boolean38 = com.google.javascript.jscomp.NodeUtil.isAssign(node37); java.lang.String str39 = compiler31.toSource(node37); com.google.javascript.jscomp.ClosureCodingConvention closureCodingConvention40 = new com.google.javascript.jscomp.ClosureCodingConvention(); boolean boolean42 = closureCodingConvention40.isSuperClassReference("^"); com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newNumber((double) '#', (int) (byte) 0, 9); com.google.javascript.rhino.Node node47 = node46.getFirstChild(); com.google.javascript.rhino.FunctionNode functionNode49 = new com.google.javascript.rhino.FunctionNode("JSC_INVALID_REGULAR_EXPRESSION_FLAGS"); com.google.javascript.rhino.Node node50 = functionNode49.cloneNode(); int int51 = functionNode49.getParamAndVarCount(); java.lang.String str52 = closureCodingConvention40.extractClassNameIfProvide(node46, (com.google.javascript.rhino.Node) functionNode49); com.google.javascript.rhino.FunctionNode functionNode54 = new com.google.javascript.rhino.FunctionNode("JSC_INVALID_REGULAR_EXPRESSION_FLAGS"); boolean boolean55 = com.google.javascript.jscomp.ControlFlowAnalysis.isContinueStructure((com.google.javascript.rhino.Node) functionNode54); boolean boolean56 = closureCodingConvention40.isVarArgsParameter((com.google.javascript.rhino.Node) functionNode54); deadAssignmentsElimination16.visit(nodeTraversal28, node37, (com.google.javascript.rhino.Node) functionNode54); com.google.javascript.rhino.JSDocInfo jSDocInfo58 = com.google.javascript.jscomp.NodeUtil.getInfoForNameNode((com.google.javascript.rhino.Node) functionNode54); com.google.javascript.rhino.FunctionNode functionNode60 = new com.google.javascript.rhino.FunctionNode("JSC_INVALID_REGULAR_EXPRESSION_FLAGS"); boolean boolean61 = com.google.javascript.jscomp.ControlFlowAnalysis.isContinueStructure((com.google.javascript.rhino.Node) functionNode60); boolean boolean62 = com.google.javascript.jscomp.NodeUtil.mayEffectMutableState((com.google.javascript.rhino.Node) functionNode60); com.google.javascript.rhino.Node node63 = functionNode60.cloneTree(); com.google.javascript.rhino.JSDocInfo jSDocInfo64 = null; node63.setJSDocInfo(jSDocInfo64); com.google.javascript.jscomp.JSModule jSModule66 = null; com.google.javascript.jscomp.FunctionInjector.InliningMode inliningMode67 = com.google.javascript.jscomp.FunctionInjector.InliningMode.DIRECT; com.google.javascript.jscomp.FunctionInjector.Reference reference68 = new com.google.javascript.jscomp.FunctionInjector.Reference(node63, jSModule66, inliningMode67); functionNode54.addChildrenToFront(node63); try { normalize13.process(node14, (com.google.javascript.rhino.Node) functionNode54); } catch (java.lang.RuntimeException e) { } }
Code: private String toSource(Node n, SourceMap sourceMap) { CodePrinter.Builder builder = new CodePrinter.Builder(n); builder.setPrettyPrint(options.prettyPrint); builder.setLineBreak(options.lineBreak); builder.setSourceMap(sourceMap); builder.setSourceMapDetailLevel(options.sourceMapDetailLevel); Charset charset = options.outputCharset; builder.setOutputCharset(charset); return builder.build(); }
tensor([[0.0427, 0.0299, 0.0215, 0.0526, 0.0506, 0.0315, 0.0539, 0.0237, 0.0319,
         0.0164, 0.0144, 0.0345, 0.0164, 0.1430, 0.1210, 0.0379, 0.0396, 0.0421,
         0.0164, 0.0637, 0.0614, 0.0278, 0.0132, 0.0138],
        [0.0354, 0.0307, 0.0288, 0.0577, 0.0479, 0.0272, 0.0496, 0.0235, 0.0327,
         0.0185, 0.0119, 0.0362, 0.0232, 0.1175, 0.1194, 0.0422, 0.0400, 0.0412,
         0.0185, 0.0754, 0.0649, 0.0291, 0.0166, 0.0120],
        [0.0368, 0.0349, 0.0261, 0.0420, 0.0460, 0.0285, 0.0504, 0.0261, 0.0364,
         0.0188, 0.0135, 0.0310, 0.0157, 0.1404, 0.1302, 0.0506, 0.0338, 0.0329,
         0.0188, 0.0706, 0.0549, 0.0310, 0.0158, 0.0148],
        [0.0390, 0.0316, 0.0224, 0.0609, 0.0467, 0.0289, 0.0598, 0.0222, 0.0306,
         0.0155, 0.0118, 0.0292, 0.0150, 0.1370, 0.1382, 0.0342, 0.0323, 0.0407,
         0.0155, 0.0740, 0.0580, 0.0310, 0.0132, 0.0121],
        [0.0311, 0.0420, 0.0323, 0.0447, 0.0396, 0.0361, 0.0466, 0.0249, 0.0316,
         0.0154, 0.0116, 0.0360, 0.0163, 0.1291, 0.1146, 0.0453, 0.0263, 0.0435,
         0.0154, 0.1138, 0.0469, 0.0292, 0.0162, 0.0115],
        [0.0348, 0.0374, 0.0247, 0.0554, 0.0459, 0.0322, 0.0526, 0.0234, 0.0347,
         0.0171, 0.0148, 0.0314, 0.0168, 0.1420, 0.1250, 0.0358, 0.0486, 0.0340,
         0.0171, 0.0618, 0.0535, 0.0334, 0.0146, 0.0132],
        [0.0378, 0.0409, 0.0267, 0.0595, 0.0553, 0.0328, 0.0544, 0.0281, 0.0396,
         0.0256, 0.0162, 0.0326, 0.0224, 0.1080, 0.0937, 0.0396, 0.0371, 0.0374,
         0.0256, 0.0641, 0.0525, 0.0343, 0.0175, 0.0183],
        [0.0284, 0.0310, 0.0201, 0.0473, 0.0418, 0.0291, 0.0453, 0.0234, 0.0358,
         0.0196, 0.0108, 0.0298, 0.0195, 0.1525, 0.1462, 0.0402, 0.0452, 0.0334,
         0.0196, 0.0778, 0.0476, 0.0310, 0.0127, 0.0119],
        [0.0394, 0.0418, 0.0243, 0.0473, 0.0453, 0.0284, 0.0393, 0.0188, 0.0230,
         0.0174, 0.0141, 0.0251, 0.0179, 0.1576, 0.1514, 0.0390, 0.0375, 0.0336,
         0.0174, 0.0789, 0.0489, 0.0283, 0.0118, 0.0134],
        [0.0414, 0.0389, 0.0274, 0.0626, 0.0588, 0.0386, 0.0386, 0.0321, 0.0378,
         0.0278, 0.0156, 0.0433, 0.0224, 0.0981, 0.0699, 0.0379, 0.0373, 0.0474,
         0.0278, 0.0664, 0.0551, 0.0365, 0.0217, 0.0165],
        [0.0392, 0.0357, 0.0215, 0.0440, 0.0473, 0.0277, 0.0544, 0.0245, 0.0325,
         0.0187, 0.0148, 0.0295, 0.0217, 0.1280, 0.1414, 0.0633, 0.0363, 0.0341,
         0.0187, 0.0617, 0.0438, 0.0347, 0.0116, 0.0151],
        [0.0440, 0.0363, 0.0254, 0.0527, 0.0567, 0.0307, 0.0451, 0.0295, 0.0336,
         0.0213, 0.0149, 0.0411, 0.0193, 0.1196, 0.0965, 0.0561, 0.0409, 0.0362,
         0.0213, 0.0531, 0.0658, 0.0277, 0.0183, 0.0138],
        [0.0366, 0.0274, 0.0213, 0.0426, 0.0475, 0.0317, 0.0499, 0.0204, 0.0249,
         0.0153, 0.0119, 0.0275, 0.0190, 0.1416, 0.1538, 0.0558, 0.0347, 0.0382,
         0.0153, 0.0770, 0.0580, 0.0293, 0.0088, 0.0115],
        [0.0282, 0.0338, 0.0282, 0.0509, 0.0469, 0.0320, 0.0598, 0.0226, 0.0331,
         0.0155, 0.0100, 0.0290, 0.0165, 0.1447, 0.1344, 0.0395, 0.0414, 0.0463,
         0.0155, 0.0693, 0.0475, 0.0287, 0.0136, 0.0127],
        [0.0357, 0.0278, 0.0218, 0.0563, 0.0496, 0.0344, 0.0405, 0.0154, 0.0328,
         0.0144, 0.0096, 0.0347, 0.0182, 0.1464, 0.1437, 0.0411, 0.0319, 0.0396,
         0.0144, 0.0847, 0.0527, 0.0329, 0.0126, 0.0088],
        [0.0318, 0.0399, 0.0216, 0.0547, 0.0433, 0.0293, 0.0591, 0.0221, 0.0337,
         0.0178, 0.0117, 0.0265, 0.0152, 0.1307, 0.1460, 0.0372, 0.0357, 0.0421,
         0.0178, 0.0793, 0.0535, 0.0277, 0.0121, 0.0110],
        [0.0373, 0.0297, 0.0225, 0.0558, 0.0488, 0.0289, 0.0505, 0.0194, 0.0259,
         0.0178, 0.0097, 0.0239, 0.0151, 0.1610, 0.1472, 0.0417, 0.0318, 0.0300,
         0.0178, 0.0708, 0.0633, 0.0286, 0.0107, 0.0118],
        [0.0328, 0.0294, 0.0210, 0.0349, 0.0420, 0.0313, 0.0531, 0.0191, 0.0349,
         0.0173, 0.0106, 0.0353, 0.0121, 0.1714, 0.1457, 0.0393, 0.0325, 0.0376,
         0.0173, 0.0807, 0.0492, 0.0324, 0.0115, 0.0087],
        [0.0414, 0.0389, 0.0274, 0.0626, 0.0588, 0.0386, 0.0386, 0.0321, 0.0378,
         0.0278, 0.0156, 0.0433, 0.0224, 0.0981, 0.0699, 0.0379, 0.0373, 0.0474,
         0.0278, 0.0664, 0.0551, 0.0365, 0.0217, 0.0165],
        [0.0403, 0.0271, 0.0257, 0.0527, 0.0472, 0.0294, 0.0502, 0.0263, 0.0268,
         0.0204, 0.0146, 0.0289, 0.0207, 0.1617, 0.1320, 0.0404, 0.0331, 0.0351,
         0.0204, 0.0622, 0.0489, 0.0339, 0.0109, 0.0111],
        [0.0354, 0.0405, 0.0239, 0.0467, 0.0450, 0.0310, 0.0527, 0.0292, 0.0392,
         0.0199, 0.0136, 0.0365, 0.0179, 0.1320, 0.1107, 0.0407, 0.0399, 0.0355,
         0.0199, 0.0706, 0.0542, 0.0349, 0.0160, 0.0143],
        [0.0387, 0.0305, 0.0190, 0.0520, 0.0416, 0.0257, 0.0422, 0.0181, 0.0269,
         0.0177, 0.0101, 0.0282, 0.0167, 0.1717, 0.1551, 0.0454, 0.0393, 0.0361,
         0.0177, 0.0694, 0.0507, 0.0243, 0.0117, 0.0112],
        [0.0356, 0.0326, 0.0252, 0.0535, 0.0512, 0.0261, 0.0504, 0.0192, 0.0347,
         0.0151, 0.0108, 0.0321, 0.0166, 0.1278, 0.1115, 0.0448, 0.0341, 0.0424,
         0.0151, 0.1101, 0.0570, 0.0292, 0.0145, 0.0104],
        [0.0318, 0.0354, 0.0261, 0.0506, 0.0471, 0.0290, 0.0566, 0.0214, 0.0346,
         0.0182, 0.0109, 0.0305, 0.0200, 0.1464, 0.0984, 0.0342, 0.0346, 0.0421,
         0.0182, 0.0886, 0.0555, 0.0442, 0.0135, 0.0119]])