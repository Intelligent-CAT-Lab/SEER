61614
Test: public void test1025() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1025"); org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.TDF; org.apache.commons.csv.CSVFormat cSVFormat2 = cSVFormat0.withNullString("hi!"); cSVFormat2.validate(); org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat2.withNullString("\r\n"); org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat5.withCommentStart((java.lang.Character) '4'); org.apache.commons.csv.CSVFormat cSVFormat9 = cSVFormat7.withCommentStart((java.lang.Character) 'a'); org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat7.withIgnoreSurroundingSpaces(true); org.apache.commons.csv.CSVFormat cSVFormat12 = org.apache.commons.csv.CSVFormat.TDF; cSVFormat12.validate(); org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat12.withCommentStart((java.lang.Character) '#'); boolean boolean16 = cSVFormat11.equals((java.lang.Object) '#'); org.apache.commons.csv.CSVFormat cSVFormat17 = org.apache.commons.csv.CSVFormat.TDF; org.apache.commons.csv.CSVFormat cSVFormat19 = cSVFormat17.withNullString("hi!"); cSVFormat19.validate(); org.apache.commons.csv.CSVFormat cSVFormat22 = cSVFormat19.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat24 = cSVFormat19.withCommentStart('\037'); java.lang.String str25 = cSVFormat19.toString(); org.apache.commons.csv.CSVFormat cSVFormat27 = cSVFormat19.withIgnoreEmptyLines(true); org.apache.commons.csv.CSVFormat cSVFormat29 = cSVFormat27.withRecordSeparator(' '); java.lang.Character char30 = cSVFormat27.getCommentStart(); org.apache.commons.csv.CSVFormat cSVFormat32 = cSVFormat27.withCommentStart('\t'); org.apache.commons.csv.CSVFormat cSVFormat33 = org.apache.commons.csv.CSVFormat.RFC4180; org.apache.commons.csv.CSVFormat cSVFormat35 = cSVFormat33.withQuoteChar((java.lang.Character) ','); boolean boolean36 = cSVFormat33.isNullHandling(); org.apache.commons.csv.CSVFormat cSVFormat37 = org.apache.commons.csv.CSVFormat.DEFAULT; org.apache.commons.csv.CSVFormat cSVFormat38 = org.apache.commons.csv.CSVFormat.TDF; cSVFormat38.validate(); org.apache.commons.csv.CSVFormat cSVFormat41 = cSVFormat38.withIgnoreEmptyLines(true); java.lang.String[] strArray44 = new java.lang.String[] { "hi!", "a\t0" }; org.apache.commons.csv.CSVFormat cSVFormat45 = cSVFormat38.withHeader(strArray44); org.apache.commons.csv.CSVFormat cSVFormat46 = cSVFormat37.withHeader(strArray44); java.lang.String str47 = cSVFormat33.format((java.lang.Object[]) strArray44); org.apache.commons.csv.CSVFormat cSVFormat48 = cSVFormat27.withHeader(strArray44); org.apache.commons.csv.CSVFormat cSVFormat49 = cSVFormat11.withHeader(strArray44); java.lang.String[] strArray50 = null; org.apache.commons.csv.CSVFormat cSVFormat51 = cSVFormat49.withHeader(strArray50); }
Code: public String toString(){final StringBuilder sb = new StringBuilder();sb.append("Delimiter=<").append(delimiter).append('>');if (isEscaping()) {sb.append(' ');sb.append("Escape=<").append(escape).append('>');}if (true) {sb.append(' ');;}if (isCommentingEnabled()) {sb.append(' ');sb.append("CommentStart=<").append(commentStart).append('>');}if (isNullHandling()) {sb.append(' ');;}if(recordSeparator != null) {sb.append(' ');sb.append("RecordSeparator=<").append(recordSeparator).append('>');}if (getIgnoreEmptyLines()) {sb.append(" EmptyLines:ignored");}if (getIgnoreSurroundingSpaces()) {sb.append(" SurroundingSpaces:ignored");}sb.append(" SkipHeaderRecord:").append(skipHeaderRecord);if (header != null) {sb.append(' ');sb.append("Header:").append(Arrays.toString(header));}return sb.toString();}
tensor([[0.0217, 0.0275, 0.0144,  ..., 0.0457, 0.0366, 0.0244],
        [0.0227, 0.0264, 0.0145,  ..., 0.0447, 0.0379, 0.0245],
        [0.0175, 0.0319, 0.0133,  ..., 0.0398, 0.0302, 0.0246],
        ...,
        [0.0209, 0.0325, 0.0169,  ..., 0.0388, 0.0331, 0.0229],
        [0.0162, 0.0284, 0.0131,  ..., 0.0421, 0.0241, 0.0169],
        [0.0219, 0.0307, 0.0145,  ..., 0.0431, 0.0269, 0.0241]])