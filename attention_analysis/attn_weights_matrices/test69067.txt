69067
Test: public void test093() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test093"); org.jsoup.select.Elements elements1 = new org.jsoup.select.Elements(); java.lang.String str2 = elements1.text(); org.jsoup.select.Elements elements4 = elements1.removeClass("#document"); org.jsoup.select.Elements elements5 = org.jsoup.select.Selector.select("#document", (java.lang.Iterable<org.jsoup.nodes.Element>) elements1); org.jsoup.nodes.Element[] elementArray6 = new org.jsoup.nodes.Element[] {}; java.util.ArrayList<org.jsoup.nodes.Element> elementList7 = new java.util.ArrayList<org.jsoup.nodes.Element>(); boolean boolean8 = java.util.Collections.addAll((java.util.Collection<org.jsoup.nodes.Element>) elementList7, elementArray6); java.util.Collection<org.jsoup.nodes.Element> elementCollection9 = null; org.jsoup.select.Elements elements10 = org.jsoup.select.Selector.filterOut((java.util.Collection<org.jsoup.nodes.Element>) elementList7, elementCollection9); org.jsoup.select.Elements elements12 = elements10.select("hi!"); org.jsoup.select.Elements elements14 = elements10.append(""); org.jsoup.nodes.Element element15 = elements14.first(); org.jsoup.nodes.Document document19 = org.jsoup.parser.Parser.parseBodyFragment("hi!", "hi!"); org.jsoup.nodes.Element element20 = document19.head(); elements14.add(0, element20); boolean boolean22 = elements5.removeAll((java.util.Collection<org.jsoup.nodes.Element>) elements14); org.jsoup.nodes.Document document25 = org.jsoup.parser.Parser.parseBodyFragment("hi!", "hi!"); org.jsoup.nodes.Element element27 = document25.prependText(""); org.jsoup.select.Elements elements28 = element27.parents(); org.jsoup.nodes.Attributes attributes29 = element27.attributes(); int int30 = elements14.indexOf((java.lang.Object) element27); try { org.jsoup.nodes.Element element32 = element27.before("<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n\n<html>\n <head></head>\n <body>\n hi!\n </body>\n</html>\n\n<head></head>\n\n<body>\n hi!\n</body>"); } catch (java.lang.IllegalArgumentException e) { } }
Code: private Elements select() { tq.consumeWhitespace(); if (tq.matchesAny(combinators)) { elements.add(root); combinator(tq.consume().toString()); } else { addElements(findElements()); } while (!tq.isEmpty()) { boolean seenWhite = tq.consumeWhitespace(); if (tq.matchChomp(",")) { while (!tq.isEmpty()) { String subQuery = tq.chompTo(","); elements.addAll(select(subQuery, root)); } } else if (tq.matchesAny(combinators)) { combinator(tq.consume().toString()); } else if (seenWhite) { combinator(" "); } else { Elements candidates = findElements(); intersectElements(filterForSelf(elements, candidates)); } } return new Elements(elements); }
tensor([[0.0161, 0.0075, 0.0126,  ..., 0.0058, 0.0194, 0.0050],
        [0.0142, 0.0066, 0.0131,  ..., 0.0054, 0.0163, 0.0044],
        [0.0105, 0.0072, 0.0138,  ..., 0.0049, 0.0238, 0.0038],
        ...,
        [0.0143, 0.0071, 0.0120,  ..., 0.0060, 0.0185, 0.0052],
        [0.0128, 0.0073, 0.0142,  ..., 0.0049, 0.0169, 0.0042],
        [0.0125, 0.0065, 0.0134,  ..., 0.0045, 0.0177, 0.0044]])