101283
Test: public void test172() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test172"); org.joda.time.ReadableInterval readableInterval0 = null; org.joda.time.ReadableInterval readableInterval1 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval0); org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval0); org.joda.time.DateTimeField dateTimeField3 = chronology2.yearOfCentury(); org.joda.time.DurationField durationField4 = chronology2.millis(); org.joda.time.DurationField durationField5 = chronology2.centuries(); org.joda.time.Chronology chronology6 = chronology2.withUTC(); org.joda.time.ReadablePeriod readablePeriod7 = null; long long10 = chronology6.add(readablePeriod7, 0L, (int) (short) 10); org.joda.time.DateTimeField dateTimeField11 = chronology6.centuryOfEra(); java.util.Locale locale12 = null; int int13 = dateTimeField11.getMaximumTextLength(locale12); org.joda.time.ReadableInterval readableInterval14 = null; org.joda.time.ReadableInterval readableInterval15 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval14); org.joda.time.Chronology chronology16 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval14); org.joda.time.DateTimeField dateTimeField17 = chronology16.yearOfCentury(); org.joda.time.DurationField durationField18 = chronology16.millis(); org.joda.time.DurationField durationField19 = chronology16.centuries(); org.joda.time.Chronology chronology20 = chronology16.withUTC(); org.joda.time.DurationField durationField21 = chronology20.halfdays(); org.joda.time.DateTimeField dateTimeField22 = chronology20.yearOfEra(); org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.centuryOfEra(); org.joda.time.field.DividedDateTimeField dividedDateTimeField25 = new org.joda.time.field.DividedDateTimeField(dateTimeField22, dateTimeFieldType23, 10); org.joda.time.ReadablePartial readablePartial26 = null; int int27 = dividedDateTimeField25.getMaximumValue(readablePartial26); int int28 = dividedDateTimeField25.getMaximumValue(); org.joda.time.ReadableInterval readableInterval29 = null; org.joda.time.ReadableInterval readableInterval30 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval29); org.joda.time.Chronology chronology31 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval29); org.joda.time.DateTimeField dateTimeField32 = chronology31.yearOfCentury(); org.joda.time.DurationField durationField33 = chronology31.minutes(); long long36 = durationField33.getDifferenceAsLong(1625877277929L, (long) 1); org.joda.time.DateTimeFieldType dateTimeFieldType37 = org.joda.time.DateTimeFieldType.secondOfMinute(); org.joda.time.field.RemainderDateTimeField remainderDateTimeField38 = new org.joda.time.field.RemainderDateTimeField(dividedDateTimeField25, durationField33, dateTimeFieldType37); org.joda.time.Partial partial40 = new org.joda.time.Partial(dateTimeFieldType37, (int) (byte) 10); java.util.Locale locale42 = null; java.lang.String str43 = dateTimeField11.getAsShortText((org.joda.time.ReadablePartial) partial40, (int) (byte) -1, locale42); try { int int45 = partial40.getValue((-28800000)); } catch (java.lang.ArrayIndexOutOfBoundsException e) { } }
Code: public Partial(DateTimeFieldType[] types, int[] values, Chronology chronology) { super(); chronology = DateTimeUtils.getChronology(chronology).withUTC(); iChronology = chronology; if (types == null) { throw new IllegalArgumentException("Types array must not be null"); } if (values == null) { throw new IllegalArgumentException("Values array must not be null"); } if (values.length != types.length) { throw new IllegalArgumentException("Values array must be the same length as the types array"); } if (types.length == 0) { iTypes = types; iValues = values; return; } for (int i = 0; i < types.length; i++) { if (types[i] == null) { throw new IllegalArgumentException("Types array must not contain null: index " + i); } } DurationField lastUnitField = null; for (int i = 0; i < types.length; i++) { DateTimeFieldType loopType = types[i]; DurationField loopUnitField = loopType.getDurationType().getField(iChronology); if (i > 0) { int compare = lastUnitField.compareTo(loopUnitField); if (compare < 0) { throw new IllegalArgumentException("Types array must be in order largest-smallest: " + types[i - 1].getName() + " < " + loopType.getName()); } else if (compare == 0) { if (types[i - 1].getRangeDurationType() == null) { if (loopType.getRangeDurationType() == null) { throw new IllegalArgumentException("Types array must not contain duplicate: " + types[i - 1].getName() + " and " + loopType.getName()); } } else { if (loopType.getRangeDurationType() == null) { throw new IllegalArgumentException("Types array must be in order largest-smallest: " + types[i - 1].getName() + " < " + loopType.getName()); } DurationField lastRangeField = types[i - 1].getRangeDurationType().getField(iChronology); DurationField loopRangeField = loopType.getRangeDurationType().getField(iChronology); if (lastRangeField.compareTo(loopRangeField) < 0) { throw new IllegalArgumentException("Types array must be in order largest-smallest: " + types[i - 1].getName() + " < " + loopType.getName()); } if (lastRangeField.compareTo(loopRangeField) == 0) { throw new IllegalArgumentException("Types array must not contain duplicate: " + types[i - 1].getName() + " and " + loopType.getName()); } } } } lastUnitField = loopUnitField; } iTypes = (DateTimeFieldType[]) types.clone(); chronology.validate(this, values); iValues = (int[]) values.clone(); }
tensor([[0.0024, 0.0017, 0.0024,  ..., 0.0011, 0.0015, 0.0011],
        [0.0019, 0.0016, 0.0023,  ..., 0.0010, 0.0014, 0.0008],
        [0.0016, 0.0015, 0.0024,  ..., 0.0011, 0.0010, 0.0007],
        ...,
        [0.0019, 0.0018, 0.0023,  ..., 0.0012, 0.0012, 0.0011],
        [0.0018, 0.0013, 0.0024,  ..., 0.0015, 0.0013, 0.0010],
        [0.0017, 0.0015, 0.0022,  ..., 0.0013, 0.0014, 0.0009]])