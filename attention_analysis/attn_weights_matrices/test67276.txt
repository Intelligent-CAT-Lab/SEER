67276
Test: public void test64() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test64"); com.fasterxml.jackson.databind.ser.std.CalendarSerializer calendarSerializer0 = new com.fasterxml.jackson.databind.ser.std.CalendarSerializer(); java.util.TimeZone timeZone2 = null; java.util.Locale locale3 = null; com.fasterxml.jackson.databind.util.StdDateFormat stdDateFormat4 = new com.fasterxml.jackson.databind.util.StdDateFormat(timeZone2, locale3); java.util.TimeZone timeZone5 = stdDateFormat4.getTimeZone(); com.fasterxml.jackson.databind.ser.std.CalendarSerializer calendarSerializer6 = calendarSerializer0.withFormat((java.lang.Boolean) true, (java.text.DateFormat) stdDateFormat4); java.util.TimeZone timeZone7 = null; java.util.Locale locale8 = null; com.fasterxml.jackson.databind.util.StdDateFormat stdDateFormat10 = new com.fasterxml.jackson.databind.util.StdDateFormat(timeZone7, locale8, (java.lang.Boolean) true); java.util.TimeZone timeZone11 = null; java.util.Locale locale12 = null; com.fasterxml.jackson.databind.util.StdDateFormat stdDateFormat13 = new com.fasterxml.jackson.databind.util.StdDateFormat(timeZone11, locale12); stdDateFormat13.setLenient(false); java.util.TimeZone timeZone16 = stdDateFormat13.getTimeZone(); stdDateFormat10._formatRFC1123 = stdDateFormat13; stdDateFormat4._formatISO8601_z = stdDateFormat10; boolean boolean20 = stdDateFormat10.looksLikeISO8601("EEE, dd MMM yyyy HH:mm:ss zzz"); java.text.ParsePosition parsePosition22 = null; try { java.util.Date date24 = stdDateFormat10.parseAsISO8601("1.0", parsePosition22, true); } catch (java.lang.NullPointerException e) { } }
Code: protected Date parseAsISO8601(String dateStr, ParsePosition pos, boolean throwErrors) throws ParseException { int len = dateStr.length(); char c = dateStr.charAt(len-1); DateFormat df; String formatStr; if (len <= 10 && Character.isDigit(c)) { df = _formatPlain; formatStr = DATE_FORMAT_STR_PLAIN; if (df == null) { df = _formatPlain = _cloneFormat(DATE_FORMAT_PLAIN, formatStr, _timezone, _locale, _lenient); } } else if (c == 'Z') { df = _formatISO8601_z; formatStr = DATE_FORMAT_STR_ISO8601_Z; if (df == null) { df = _formatISO8601_z = _cloneFormat(DATE_FORMAT_ISO8601_Z, formatStr, DEFAULT_TIMEZONE, _locale, _lenient); } if (dateStr.charAt(len-4) == ':') { StringBuilder sb = new StringBuilder(dateStr); sb.insert(len-1, ".000"); dateStr = sb.toString(); } } else { if (hasTimeZone(dateStr)) { c = dateStr.charAt(len-3); if (c == ':') { StringBuilder sb = new StringBuilder(dateStr); sb.delete(len-3, len-2); dateStr = sb.toString(); } else if (c == '+' || c == '-') { dateStr += "00"; } len = dateStr.length(); int timeLen = len - dateStr.lastIndexOf('T') - 6; if (timeLen < 12) { int offset = len - 5; StringBuilder sb = new StringBuilder(dateStr); switch (timeLen) { case 11: sb.insert(offset, '0'); break; case 10: sb.insert(offset, "00"); break; case 9: sb.insert(offset, "000"); break; case 8: sb.insert(offset, ".000"); break; case 7: break; case 6: sb.insert(offset, "00.000"); case 5: sb.insert(offset, ":00.000"); } dateStr = sb.toString(); } df = _formatISO8601; formatStr = DATE_FORMAT_STR_ISO8601; if (_formatISO8601 == null) { df = _formatISO8601 = _cloneFormat(DATE_FORMAT_ISO8601, formatStr, _timezone, _locale, _lenient); } } else { int timeLen = len - dateStr.lastIndexOf('T') - 1; if (timeLen < 12) { StringBuilder sb = new StringBuilder(dateStr); switch (timeLen) { case 11: sb.append('0'); case 10: sb.append('0'); case 9: sb.append('0'); break; default: sb.append(".000"); } dateStr = sb.toString(); } df = _formatISO8601_noTz; formatStr = DATE_FORMAT_STR_ISO8601_NO_TZ; if (df == null) { df = _formatISO8601_noTz = _cloneFormat(DATE_FORMAT_ISO8601_NO_TZ, formatStr, _timezone, _locale, _lenient); } } } Date dt = df.parse(dateStr, pos); if (dt == null) { throw new ParseException (String.format("Can not parse date \"%s\": while it seems to fit format '%s', parsing fails (leniency? %s)", dateStr, formatStr, _lenient), pos.getErrorIndex()); } return dt; }
tensor([[0.0035, 0.0008, 0.0025,  ..., 0.0025, 0.0014, 0.0008],
        [0.0043, 0.0011, 0.0021,  ..., 0.0028, 0.0013, 0.0007],
        [0.0028, 0.0009, 0.0023,  ..., 0.0028, 0.0012, 0.0009],
        ...,
        [0.0036, 0.0008, 0.0017,  ..., 0.0021, 0.0009, 0.0008],
        [0.0036, 0.0008, 0.0022,  ..., 0.0029, 0.0010, 0.0008],
        [0.0035, 0.0007, 0.0020,  ..., 0.0035, 0.0015, 0.0009]])