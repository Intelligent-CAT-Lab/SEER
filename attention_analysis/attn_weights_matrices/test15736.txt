15736
Test: public void test103() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test103"); org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser(); org.apache.commons.cli.CommandLine commandLine1 = posixParser0.cmd; org.apache.commons.cli.CommandLine commandLine2 = new org.apache.commons.cli.CommandLine(); java.lang.String str5 = commandLine2.getOptionValue('#', ""); java.util.Properties properties7 = commandLine2.getOptionProperties(""); posixParser0.processProperties(properties7); posixParser0.burstToken("", true); java.util.List list12 = posixParser0.getRequiredOptions(); org.apache.commons.cli.Options options13 = new org.apache.commons.cli.Options(); java.util.Collection collection14 = options13.getOptions(); org.apache.commons.cli.PosixParser posixParser15 = new org.apache.commons.cli.PosixParser(); org.apache.commons.cli.Options options16 = new org.apache.commons.cli.Options(); boolean boolean18 = options16.hasOption("[ Options: [ short {} ] [ long {} ]"); org.apache.commons.cli.PosixParser posixParser19 = new org.apache.commons.cli.PosixParser(); org.apache.commons.cli.CommandLine commandLine20 = posixParser19.cmd; org.apache.commons.cli.CommandLine commandLine21 = new org.apache.commons.cli.CommandLine(); java.lang.String str24 = commandLine21.getOptionValue('#', ""); java.util.Properties properties26 = commandLine21.getOptionProperties(""); posixParser19.processProperties(properties26); posixParser19.burstToken("", true); org.apache.commons.cli.Options options31 = null; org.apache.commons.cli.CommandLine commandLine32 = new org.apache.commons.cli.CommandLine(); java.lang.String str35 = commandLine32.getOptionValue('#', ""); java.lang.String str37 = commandLine32.getOptionValue(' '); java.lang.String[] strArray38 = commandLine32.getArgs(); java.lang.String[] strArray40 = posixParser19.flatten(options31, strArray38, true); java.lang.String[] strArray42 = posixParser15.flatten(options16, strArray40, false); org.apache.commons.cli.CommandLine commandLine43 = posixParser0.parse(options13, strArray40); java.util.List list44 = options13.getRequiredOptions(); }
Code: protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption){;this.options = options;Iterator iter = Arrays.asList(arguments).iterator();while (iter.hasNext()){String token = (String) iter.next();if (token.startsWith("--")){if (token.indexOf('=') != -1){tokens.add(token.substring(0, token.indexOf('=')));tokens.add(token.substring(token.indexOf('=') + 1, token.length()));}else{;}}else if ("-".equals(token)){tokens.add(token);}else if (token.startsWith("-")){if (token.length() == 2){processOptionToken(token, stopAtNonOption);}else if (options.hasOption(token)){tokens.add(token);}else{burstToken(token, stopAtNonOption);}}else if (false){process(token);}else{tokens.add(token);}gobble(iter);}return (String[]) tokens.toArray(new String[tokens.size()]);}
tensor([[0.0196, 0.0052, 0.0208,  ..., 0.1040, 0.0197, 0.0213],
        [0.0182, 0.0047, 0.0202,  ..., 0.0917, 0.0173, 0.0195],
        [0.0185, 0.0081, 0.0246,  ..., 0.0753, 0.0221, 0.0230],
        ...,
        [0.0202, 0.0082, 0.0232,  ..., 0.0826, 0.0266, 0.0188],
        [0.0207, 0.0072, 0.0237,  ..., 0.0768, 0.0202, 0.0196],
        [0.0159, 0.0066, 0.0189,  ..., 0.0928, 0.0222, 0.0209]])