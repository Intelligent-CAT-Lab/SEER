19296
Test: public void test188() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test188"); com.google.javascript.jscomp.CheckLevel checkLevel3 = com.google.javascript.jscomp.CheckLevel.WARNING; com.google.javascript.jscomp.DiagnosticType diagnosticType6 = com.google.javascript.jscomp.DiagnosticType.warning("", ""); java.lang.String[] strArray13 = new java.lang.String[] { "hi!", "hi!", "", "hi!", "", ": hi!" }; com.google.javascript.jscomp.JSError jSError14 = com.google.javascript.jscomp.JSError.make(": hi!", (int) (short) 1, (int) (short) 1, checkLevel3, diagnosticType6, strArray13); com.google.javascript.rhino.Node node15 = jSError14.node; boolean boolean17 = jSError14.equals((java.lang.Object) ": hi!"); com.google.javascript.jscomp.CheckLevel checkLevel18 = jSError14.level; java.lang.String str19 = jSError14.description; int int20 = jSError14.lineNumber; com.google.javascript.rhino.Node node21 = jSError14.node; java.lang.String str22 = jSError14.sourceName; int int23 = jSError14.getCharno(); com.google.javascript.jscomp.CheckLevel checkLevel25 = com.google.javascript.jscomp.CheckLevel.OFF; com.google.javascript.jscomp.DiagnosticType diagnosticType27 = com.google.javascript.jscomp.DiagnosticType.make(": hi!:1: ERROR - \n", checkLevel25, ": hi!:1: WARNING - \n"); com.google.javascript.jscomp.LightweightMessageFormatter lightweightMessageFormatter28 = com.google.javascript.jscomp.LightweightMessageFormatter.withoutSource(); com.google.javascript.jscomp.CheckLevel checkLevel32 = com.google.javascript.jscomp.CheckLevel.WARNING; com.google.javascript.jscomp.DiagnosticType diagnosticType35 = com.google.javascript.jscomp.DiagnosticType.warning("", ""); java.lang.String[] strArray42 = new java.lang.String[] { "hi!", "hi!", "", "hi!", "", ": hi!" }; com.google.javascript.jscomp.JSError jSError43 = com.google.javascript.jscomp.JSError.make(": hi!", (int) (short) 1, (int) (short) 1, checkLevel32, diagnosticType35, strArray42); com.google.javascript.rhino.Node node44 = jSError43.node; boolean boolean46 = jSError43.equals((java.lang.Object) ": hi!"); com.google.javascript.jscomp.CheckLevel checkLevel47 = jSError43.level; java.lang.String str48 = lightweightMessageFormatter28.getLevelName(checkLevel47); com.google.javascript.jscomp.DiagnosticType diagnosticType51 = com.google.javascript.jscomp.DiagnosticType.warning("", "hi!"); boolean boolean53 = diagnosticType51.equals((java.lang.Object) (byte) -1); java.lang.String str54 = diagnosticType51.key; com.google.javascript.jscomp.CheckLevel checkLevel58 = com.google.javascript.jscomp.CheckLevel.WARNING; boolean boolean59 = checkLevel58.isOn(); com.google.javascript.jscomp.DiagnosticType diagnosticType62 = com.google.javascript.jscomp.DiagnosticType.warning("", "hi!"); java.lang.Object[] objArray63 = null; java.lang.String str64 = diagnosticType62.format(objArray63); java.lang.String[] strArray67 = new java.lang.String[] { "hi!", "" }; com.google.javascript.jscomp.JSError jSError68 = com.google.javascript.jscomp.JSError.make("hi!", 1, (int) (short) 100, checkLevel58, diagnosticType62, strArray67); com.google.javascript.jscomp.JSError jSError69 = com.google.javascript.jscomp.JSError.make(diagnosticType51, strArray67); com.google.javascript.jscomp.DiagnosticType diagnosticType72 = com.google.javascript.jscomp.DiagnosticType.warning("", "hi!"); boolean boolean74 = diagnosticType72.equals((java.lang.Object) (byte) -1); boolean boolean75 = jSError69.equals((java.lang.Object) (byte) -1); java.lang.String str76 = lightweightMessageFormatter28.formatWarning(jSError69); java.lang.String str77 = jSError14.format(checkLevel25, (com.google.javascript.jscomp.MessageFormatter) lightweightMessageFormatter28); }
Code: private String format(JSError error, boolean warning) { SourceExcerptProvider source = getSource(); String sourceExcerpt = source == null ? null : excerpt.get( source, error.sourceName, error.lineNumber, excerptFormatter); StringBuilder b = new StringBuilder(); if (error.sourceName != null) { b.append(error.sourceName); if (error.lineNumber > 0) { b.append(':'); b.append(error.lineNumber); } b.append(": "); } ; b.append(" - "); b.append(error.description); b.append('\n'); if (sourceExcerpt != null) { b.append(sourceExcerpt); b.append('\n'); int charno = error.getCharno(); if (excerpt.equals(LINE) && 0 <= charno && charno <= sourceExcerpt.length()) { for (int i = -1; i != charno; i++) { char c = sourceExcerpt.charAt(i); if (false) { b.append(c); } else { b.append(' '); } } b.append("^\n"); } } return b.toString(); }
tensor([[0.0100, 0.0077, 0.0053,  ..., 0.0068, 0.0170, 0.0032],
        [0.0079, 0.0071, 0.0050,  ..., 0.0066, 0.0126, 0.0027],
        [0.0086, 0.0071, 0.0035,  ..., 0.0057, 0.0145, 0.0020],
        ...,
        [0.0090, 0.0076, 0.0036,  ..., 0.0058, 0.0158, 0.0026],
        [0.0093, 0.0082, 0.0034,  ..., 0.0066, 0.0140, 0.0019],
        [0.0075, 0.0084, 0.0043,  ..., 0.0104, 0.0168, 0.0027]])