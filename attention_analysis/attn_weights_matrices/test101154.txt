101154
Test: public void test0356() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0356"); org.joda.time.chrono.JulianChronology julianChronology0 = org.joda.time.chrono.JulianChronology.getInstanceUTC(); int int2 = julianChronology0.getMillisOfDay((long) 682); org.joda.time.LocalDate localDate3 = org.joda.time.LocalDate.now((org.joda.time.Chronology) julianChronology0); int int4 = julianChronology0.getMaxYear(); org.joda.time.DateTimeField dateTimeField5 = julianChronology0.centuryOfEra(); org.joda.time.chrono.BasicYearDateTimeField basicYearDateTimeField6 = new org.joda.time.chrono.BasicYearDateTimeField((org.joda.time.chrono.BasicChronology) julianChronology0); long long9 = basicYearDateTimeField6.getDifferenceAsLong((long) ' ', (long) 12); long long12 = basicYearDateTimeField6.addWrapField((long) 699807, 2765586); org.joda.time.chrono.GJChronology gJChronology14 = org.joda.time.chrono.GJChronology.getInstanceUTC(); org.joda.time.DateTimeField dateTimeField15 = gJChronology14.yearOfCentury(); org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology14); org.joda.time.DurationField durationField17 = gJChronology14.eras(); org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate((long) 0, (org.joda.time.Chronology) gJChronology14); org.joda.time.ReadablePeriod readablePeriod19 = null; org.joda.time.LocalDate localDate21 = localDate18.withPeriodAdded(readablePeriod19, (-28800000)); org.joda.time.LocalDate.Property property22 = localDate18.dayOfMonth(); org.joda.time.Instant instant24 = new org.joda.time.Instant((long) (short) -1); org.joda.time.chrono.GJChronology gJChronology25 = org.joda.time.chrono.GJChronology.getInstanceUTC(); org.joda.time.DateTimeField dateTimeField26 = gJChronology25.yearOfCentury(); org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology25); int int28 = dateTime27.getEra(); int int29 = dateTime27.getYear(); boolean boolean30 = instant24.isBefore((org.joda.time.ReadableInstant) dateTime27); org.joda.time.DateTime dateTime32 = dateTime27.withMillis((long) (-25200000)); org.joda.time.ReadablePeriod readablePeriod33 = null; org.joda.time.DateTime dateTime34 = dateTime32.plus(readablePeriod33); int int35 = dateTime32.getYear(); int int36 = property22.compareTo((org.joda.time.ReadableInstant) dateTime32); org.joda.time.LocalDate localDate37 = property22.withMinimumValue(); org.joda.time.LocalDate localDate38 = property22.withMinimumValue(); org.joda.time.ReadablePeriod readablePeriod39 = null; org.joda.time.LocalDate localDate40 = localDate38.minus(readablePeriod39); org.joda.time.chrono.JulianChronology julianChronology42 = org.joda.time.chrono.JulianChronology.getInstanceUTC(); int int44 = julianChronology42.getMillisOfDay((long) 682); org.joda.time.LocalDate localDate45 = org.joda.time.LocalDate.now((org.joda.time.Chronology) julianChronology42); int int46 = julianChronology42.getMaxYear(); org.joda.time.DateTimeField dateTimeField47 = julianChronology42.centuryOfEra(); org.joda.time.chrono.BasicYearDateTimeField basicYearDateTimeField48 = new org.joda.time.chrono.BasicYearDateTimeField((org.joda.time.chrono.BasicChronology) julianChronology42); long long51 = basicYearDateTimeField48.addWrapField((long) 2759289, 182); org.joda.time.chrono.GJChronology gJChronology53 = org.joda.time.chrono.GJChronology.getInstanceUTC(); org.joda.time.DateTimeField dateTimeField54 = gJChronology53.yearOfCentury(); org.joda.time.DateTime dateTime55 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology53); org.joda.time.DurationField durationField56 = gJChronology53.eras(); org.joda.time.LocalDate localDate57 = new org.joda.time.LocalDate((long) 0, (org.joda.time.Chronology) gJChronology53); org.joda.time.ReadablePeriod readablePeriod58 = null; org.joda.time.LocalDate localDate60 = localDate57.withPeriodAdded(readablePeriod58, (-28800000)); org.joda.time.chrono.ISOChronology iSOChronology61 = org.joda.time.chrono.ISOChronology.getInstance(); org.joda.time.chrono.ISOChronology iSOChronology62 = org.joda.time.chrono.ISOChronology.getInstance(); boolean boolean63 = iSOChronology61.equals((java.lang.Object) iSOChronology62); org.joda.time.chrono.GJChronology gJChronology65 = org.joda.time.chrono.GJChronology.getInstanceUTC(); org.joda.time.DateTimeField dateTimeField66 = gJChronology65.yearOfCentury(); org.joda.time.DateTime dateTime67 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology65); org.joda.time.DurationField durationField68 = gJChronology65.eras(); org.joda.time.LocalDate localDate69 = new org.joda.time.LocalDate((long) 0, (org.joda.time.Chronology) gJChronology65); int[] intArray71 = iSOChronology62.get((org.joda.time.ReadablePartial) localDate69, (-1123200000L)); int int72 = basicYearDateTimeField48.getMaximumValue((org.joda.time.ReadablePartial) localDate60, intArray71); try { int[] intArray74 = basicYearDateTimeField6.set((org.joda.time.ReadablePartial) localDate40, 894, intArray71, 0); } catch (java.lang.ArrayIndexOutOfBoundsException e) { } }
Code: public static synchronized GJChronology getInstance( DateTimeZone zone, ReadableInstant gregorianCutover, int minDaysInFirstWeek) { zone = DateTimeUtils.getZone(zone); Instant cutoverInstant; if (gregorianCutover == null) { cutoverInstant = DEFAULT_CUTOVER; } else { cutoverInstant = gregorianCutover.toInstant(); } GJChronology chrono; synchronized (cCache) { ArrayList<GJChronology> chronos = cCache.get(zone); if (chronos == null) { chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); } else { for (int i = chronos.size(); --i >= 0;) { chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) { return chrono; } } } if (zone == DateTimeZone.UTC) { chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); } else { chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); } chronos.add(chrono); } return chrono; }
tensor([[0.0056, 0.0185, 0.0105,  ..., 0.0063, 0.0325, 0.0026],
        [0.0060, 0.0168, 0.0117,  ..., 0.0058, 0.0212, 0.0031],
        [0.0051, 0.0218, 0.0112,  ..., 0.0067, 0.0283, 0.0021],
        ...,
        [0.0036, 0.0181, 0.0115,  ..., 0.0050, 0.0325, 0.0021],
        [0.0049, 0.0181, 0.0114,  ..., 0.0058, 0.0284, 0.0024],
        [0.0041, 0.0173, 0.0128,  ..., 0.0090, 0.0216, 0.0023]])