,method,test
0,,"  public void test0()  throws Throwable  {
      JexlOperator[] jexlOperatorArray0 = JexlOperator.values();
}"
1,"    public int getArity() {
        return arity;
    }","  public void test1()  throws Throwable  {
      JexlOperator jexlOperator0 = JexlOperator.valueOf(""PROPERTY_SET"");
}"
2,"    public final String getMethodName() {
        return methodName;
    }","  public void test2()  throws Throwable  {
      JexlOperator jexlOperator0 = JexlOperator.ASSIGN;
      String string0 = jexlOperator0.getMethodName();
}"
3,"    public final JexlOperator getBaseOperator() {
        return base;
    }","  public void test3()  throws Throwable  {
      JexlOperator jexlOperator0 = JexlOperator.SELF_AND;
      JexlOperator jexlOperator1 = jexlOperator0.getBaseOperator();
}"
4,"    public final String getOperatorSymbol() {
        return operator;
    }","  public void test4()  throws Throwable  {
      JexlOperator jexlOperator0 = JexlOperator.AND;
      String string0 = jexlOperator0.getOperatorSymbol();
}"
5,"    public int getArity() {
        return arity;
    }","  public void test5()  throws Throwable  {
      JexlOperator jexlOperator0 = JexlOperator.AND;
      int int0 = jexlOperator0.getArity();
}"
6,"    public final JexlOperator getBaseOperator() {
        return base;
    }","  public void test6()  throws Throwable  {
      JexlOperator jexlOperator0 = JexlOperator.AND;
      jexlOperator0.getBaseOperator();
  }"
7,"    public final String getMethodName() {
        return methodName;
    }","  public void test7()  throws Throwable  {
      JexlOperator jexlOperator0 = JexlOperator.AND;
      String string0 = jexlOperator0.getMethodName();
}"
8,"    public Object resolveNamespace(final String name) {
        if (name == null || name.isEmpty()) {
            return object;
        }
        return null;
    }","  public void test0()  throws Throwable  {
      ObjectContext<Object> objectContext0 = new ObjectContext<Object>((JexlEngine) null, ""/o5RD[|:PO(uq"");
      Object object0 = objectContext0.resolveNamespace("""");
}"
9,"    protected T getObject() {
        return object;
    }","  public void test1()  throws Throwable  {
      Integer integer0 = new Integer((-726));
      ObjectContext<Object> objectContext0 = new ObjectContext<Object>((JexlEngine) null, integer0);
      Object object0 = objectContext0.getObject();
}"
10,"    public void set(final String name, final Object value) {
        final JexlPropertySet jset = jexl.getUberspect().getPropertySet(object, name, value);
        if (jset != null) {
            try {
                jset.invoke(object, value);
            } catch (final Exception xany) {
                // ignore
                if (jexl.isStrict()) {
                    throw new JexlException.Property(null, name, true, xany);
                }
            }
        }
    }","  public void test2()  throws Throwable  {
      ObjectContext<String> objectContext0 = new ObjectContext<String>((JexlEngine) null, ""org.apache.commons.jexl3.ObjectContext"");
      // Undeclared exception!
      try { 
        objectContext0.set(""/o5RD[|:PO(uq"", ""/o5RD[|:PO(uq"");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.ObjectContext"", e);
      }
  }"
11,"    public boolean has(final String name) {
        final JexlPropertyGet jget = jexl.getUberspect().getPropertyGet(object, name);
        try {
            return jget != null && jget.invoke(object) != null;
        } catch (final Exception xany) {
            return false;
        }
    }","  public void test3()  throws Throwable  {
      Integer integer0 = new Integer((-726));
      ObjectContext<Object> objectContext0 = new ObjectContext<Object>((JexlEngine) null, integer0);
      // Undeclared exception!
      try { 
        objectContext0.has(""=#1"");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.ObjectContext"", e);
      }
  }"
12,"    public Object get(final String name) {
        final JexlPropertyGet jget = jexl.getUberspect().getPropertyGet(object, name);
        if (jget != null) {
            try {
                return jget.invoke(object);
            } catch (final Exception xany) {
                if (jexl.isStrict()) {
                    throw new JexlException.Property(null, name, true, xany);
                }
            }
        }
        return null;
    }","  public void test4()  throws Throwable  {
      ObjectContext<Object> objectContext0 = new ObjectContext<Object>((JexlEngine) null, (Object) null);
      // Undeclared exception!
      try { 
        objectContext0.get(""org.apache.commons.jexl3.parser.SimpleNode"");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.ObjectContext"", e);
      }
  }"
13,"    public Object resolveNamespace(final String name) {
        if (name == null || name.isEmpty()) {
            return object;
        }
        return null;
    }","  public void test5()  throws Throwable  {
      ObjectContext<Object> objectContext0 = new ObjectContext<Object>((JexlEngine) null, (Object) null);
      Object object0 = objectContext0.resolveNamespace("""");
}"
14,"    public Object resolveNamespace(final String name) {
        if (name == null || name.isEmpty()) {
            return object;
        }
        return null;
    }","  public void test6()  throws Throwable  {
      ObjectContext<String> objectContext0 = new ObjectContext<String>((JexlEngine) null, (String) null);
      Object object0 = objectContext0.resolveNamespace(""_"");
}"
15,"    public Object resolveNamespace(final String name) {
        if (name == null || name.isEmpty()) {
            return object;
        }
        return null;
    }","  public void test7()  throws Throwable  {
      ObjectContext<Object> objectContext0 = new ObjectContext<Object>((JexlEngine) null, (Object) null);
      Object object0 = objectContext0.resolveNamespace((String) null);
}"
16,"    protected T getObject() {
        return object;
    }","  public void test8()  throws Throwable  {
      ObjectContext<Object> objectContext0 = new ObjectContext<Object>((JexlEngine) null, (Object) null);
      Object object0 = objectContext0.getObject();
}"
17,"    protected JexlEngine getJexl() {
        return jexl;
    }","  public void test9()  throws Throwable  {
      ObjectContext<Object> objectContext0 = new ObjectContext<Object>((JexlEngine) null, (Object) null);
      JexlEngine jexlEngine0 = objectContext0.getJexl();
}"
18,"    public JexlBuilder cacheThreshold(final int length) {
        this.cacheThreshold = length > 0? length : CACHE_THRESHOLD;
        return this;
    }","  public void test0()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.cacheThreshold(2139);
      jexlBuilder0.create();
}"
19,"    public JexlBuilder stackOverflow(final int size) {
        this.stackOverflow = size;
        return this;
    }","  public void test1()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlBuilder jexlBuilder1 = jexlBuilder0.cacheThreshold(0);
}"
20,"    public JexlBuilder cache(final int size) {
        this.cache = size;
        return this;
    }","  public void test2()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlBuilder jexlBuilder1 = jexlBuilder0.cacheThreshold(0);
}"
21,"    public JexlBuilder collectAll(final boolean flag) {
        return collectMode(flag? 1 : 0);
    }","  public void test3()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlBuilder jexlBuilder1 = jexlBuilder0.cacheThreshold(0);
}"
22,"    public JexlBuilder cacheThreshold(final int length) {
        this.cacheThreshold = length > 0? length : CACHE_THRESHOLD;
        return this;
    }","  public void test4()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlBuilder jexlBuilder1 = jexlBuilder0.cacheThreshold(0);
}"
23,"    public JexlBuilder collectMode(final int mode) {
        this.collectMode = mode;
        return this;
    }","  public void test5()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlBuilder jexlBuilder1 = jexlBuilder0.collectMode((-1727));
      boolean boolean0 = jexlBuilder1.collectAll();
}"
24,"    public JexlBuilder collectAll(final boolean flag) {
        return collectMode(flag? 1 : 0);
    }","  public void test6()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlBuilder jexlBuilder1 = jexlBuilder0.collectMode((-1727));
      boolean boolean0 = jexlBuilder1.collectAll();
}"
25,"    public JexlBuilder stackOverflow(final int size) {
        this.stackOverflow = size;
        return this;
    }","  public void test7()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
}"
26,"    public JexlBuilder cache(final int size) {
        this.cache = size;
        return this;
    }","  public void test8()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.stackOverflow(0);
      JexlUberspect.ResolverStrategy jexlUberspect_ResolverStrategy0 = JexlUberspect.JEXL_STRATEGY;
      Jdk13LumberjackLogger jdk13LumberjackLogger0 = new Jdk13LumberjackLogger(""error"");
      Uberspect uberspect0 = new Uberspect(jdk13LumberjackLogger0, jexlUberspect_ResolverStrategy0);
      jexlBuilder0.uberspect((JexlUberspect) uberspect0);
}"
27,"    public JexlBuilder stackOverflow(final int size) {
        this.stackOverflow = size;
        return this;
    }","  public void test9()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      NoOpLog noOpLog0 = new NoOpLog();
      JexlUberspect.ResolverStrategy jexlUberspect_ResolverStrategy0 = JexlUberspect.JEXL_STRATEGY;
      Uberspect uberspect0 = new Uberspect(noOpLog0, jexlUberspect_ResolverStrategy0);
      jexlBuilder0.stackOverflow((-2823));
      jexlBuilder0.uberspect((JexlUberspect) uberspect0);
}"
28,"    public JexlBuilder lexical(final boolean flag) {
        options.setLexical(flag);
        return this;
    }","  public void test10()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlBuilder jexlBuilder1 = jexlBuilder0.lexicalShade(true);
      NoOpLog noOpLog0 = new NoOpLog();
      JexlUberspect.ResolverStrategy jexlUberspect_ResolverStrategy0 = JexlUberspect.JEXL_STRATEGY;
      Uberspect uberspect0 = new Uberspect(noOpLog0, jexlUberspect_ResolverStrategy0);
      jexlBuilder1.uberspect((JexlUberspect) uberspect0);
}"
29,"    public JexlBuilder cache(final int size) {
        this.cache = size;
        return this;
    }","  public void test11()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlBuilder jexlBuilder1 = jexlBuilder0.lexicalShade(true);
      NoOpLog noOpLog0 = new NoOpLog();
      JexlUberspect.ResolverStrategy jexlUberspect_ResolverStrategy0 = JexlUberspect.JEXL_STRATEGY;
      Uberspect uberspect0 = new Uberspect(noOpLog0, jexlUberspect_ResolverStrategy0);
      jexlBuilder1.uberspect((JexlUberspect) uberspect0);
}"
30,"    public JexlBuilder collectMode(final int mode) {
        this.collectMode = mode;
        return this;
    }","  public void test12()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.collectMode((-3044));
      JexlEngine jexlEngine0 = jexlBuilder0.create();
      JexlUberspect jexlUberspect0 = jexlEngine0.getUberspect();
      jexlBuilder0.uberspect(jexlUberspect0);
}"
31,"    public JexlBuilder collectMode(final int mode) {
        this.collectMode = mode;
        return this;
    }","  public void test13()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
}"
32,"    public JexlBuilder collectAll(final boolean flag) {
        return collectMode(flag? 1 : 0);
    }","  public void test14()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      NoOpLog noOpLog0 = new NoOpLog(""53"");
      JexlUberspect.ResolverStrategy jexlUberspect_ResolverStrategy0 = JexlUberspect.MAP_STRATEGY;
      Permissions permissions0 = Permissions.DEFAULT;
      Uberspect uberspect0 = new Uberspect(noOpLog0, jexlUberspect_ResolverStrategy0, permissions0);
      JexlBuilder jexlBuilder1 = jexlBuilder0.collectAll(false);
      jexlBuilder1.uberspect((JexlUberspect) uberspect0);
}"
33,"    public JexlBuilder collectMode(final int mode) {
        this.collectMode = mode;
        return this;
    }","  public void test15()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      NoOpLog noOpLog0 = new NoOpLog(""53"");
      JexlUberspect.ResolverStrategy jexlUberspect_ResolverStrategy0 = JexlUberspect.MAP_STRATEGY;
      Permissions permissions0 = Permissions.DEFAULT;
      Uberspect uberspect0 = new Uberspect(noOpLog0, jexlUberspect_ResolverStrategy0, permissions0);
      JexlBuilder jexlBuilder1 = jexlBuilder0.collectAll(false);
      jexlBuilder1.uberspect((JexlUberspect) uberspect0);
}"
34,"    public JexlBuilder cache(final int size) {
        this.cache = size;
        return this;
    }","  public void test16()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
}"
35,"    public JexlBuilder cache(final int size) {
        this.cache = size;
        return this;
    }","  public void test17()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlBuilder jexlBuilder1 = jexlBuilder0.cache(0);
      NoOpLog noOpLog0 = new NoOpLog();
      JexlUberspect.ResolverStrategy jexlUberspect_ResolverStrategy0 = JexlUberspect.JEXL_STRATEGY;
      Permissions permissions0 = Permissions.DEFAULT;
      Uberspect uberspect0 = new Uberspect(noOpLog0, jexlUberspect_ResolverStrategy0, permissions0);
      jexlBuilder1.uberspect((JexlUberspect) uberspect0);
}"
36,"    public JexlBuilder collectAll(final boolean flag) {
        return collectMode(flag? 1 : 0);
    }","  public void test18()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlBuilder jexlBuilder1 = jexlBuilder0.cache(0);
      NoOpLog noOpLog0 = new NoOpLog();
      JexlUberspect.ResolverStrategy jexlUberspect_ResolverStrategy0 = JexlUberspect.JEXL_STRATEGY;
      Permissions permissions0 = Permissions.DEFAULT;
      Uberspect uberspect0 = new Uberspect(noOpLog0, jexlUberspect_ResolverStrategy0, permissions0);
      jexlBuilder1.uberspect((JexlUberspect) uberspect0);
}"
37,"    public JexlBuilder cache(final int size) {
        this.cache = size;
        return this;
    }","  public void test19()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.cache(14);
      Jdk13LumberjackLogger jdk13LumberjackLogger0 = new Jdk13LumberjackLogger(""forEach"");
      JexlUberspect.ResolverStrategy jexlUberspect_ResolverStrategy0 = JexlUberspect.MAP_STRATEGY;
      Uberspect uberspect0 = new Uberspect(jdk13LumberjackLogger0, jexlUberspect_ResolverStrategy0, (Permissions) null);
      jexlBuilder0.uberspect((JexlUberspect) uberspect0);
}"
38,"    public JexlBuilder antish(final boolean flag) {
        options.setAntish(flag);
        return this;
    }","  public void test20()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlBuilder jexlBuilder1 = jexlBuilder0.antish(false);
      NoOpLog noOpLog0 = new NoOpLog(""53"");
      JexlUberspect.ResolverStrategy jexlUberspect_ResolverStrategy0 = JexlUberspect.MAP_STRATEGY;
      Permissions permissions0 = Permissions.DEFAULT;
      Uberspect uberspect0 = new Uberspect(noOpLog0, jexlUberspect_ResolverStrategy0, permissions0);
      jexlBuilder1.uberspect((JexlUberspect) uberspect0);
}"
39,"    public JexlBuilder cacheThreshold(final int length) {
        this.cacheThreshold = length > 0? length : CACHE_THRESHOLD;
        return this;
    }","  public void test21()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlBuilder jexlBuilder1 = jexlBuilder0.antish(false);
      NoOpLog noOpLog0 = new NoOpLog(""53"");
      JexlUberspect.ResolverStrategy jexlUberspect_ResolverStrategy0 = JexlUberspect.MAP_STRATEGY;
      Permissions permissions0 = Permissions.DEFAULT;
      Uberspect uberspect0 = new Uberspect(noOpLog0, jexlUberspect_ResolverStrategy0, permissions0);
      jexlBuilder1.uberspect((JexlUberspect) uberspect0);
}"
40,"    public JexlBuilder stackOverflow(final int size) {
        this.stackOverflow = size;
        return this;
    }","  public void test22()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Jdk13LumberjackLogger jdk13LumberjackLogger0 = new Jdk13LumberjackLogger(""forEach"");
      JexlUberspect.ResolverStrategy jexlUberspect_ResolverStrategy0 = JexlUberspect.MAP_STRATEGY;
      Uberspect uberspect0 = new Uberspect(jdk13LumberjackLogger0, jexlUberspect_ResolverStrategy0, (Permissions) null);
      JexlBuilder jexlBuilder1 = jexlBuilder0.uberspect((JexlUberspect) uberspect0);
      jexlBuilder1.uberspect();
}"
41,"    public JexlBuilder collectAll(final boolean flag) {
        return collectMode(flag? 1 : 0);
    }","  public void test23()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Jdk13LumberjackLogger jdk13LumberjackLogger0 = new Jdk13LumberjackLogger(""forEach"");
      JexlUberspect.ResolverStrategy jexlUberspect_ResolverStrategy0 = JexlUberspect.MAP_STRATEGY;
      Uberspect uberspect0 = new Uberspect(jdk13LumberjackLogger0, jexlUberspect_ResolverStrategy0, (Permissions) null);
      JexlBuilder jexlBuilder1 = jexlBuilder0.uberspect((JexlUberspect) uberspect0);
      jexlBuilder1.uberspect();
}"
42,"    public JexlBuilder cacheThreshold(final int length) {
        this.cacheThreshold = length > 0? length : CACHE_THRESHOLD;
        return this;
    }","  public void test24()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Jdk13LumberjackLogger jdk13LumberjackLogger0 = new Jdk13LumberjackLogger(""forEach"");
      JexlUberspect.ResolverStrategy jexlUberspect_ResolverStrategy0 = JexlUberspect.MAP_STRATEGY;
      Uberspect uberspect0 = new Uberspect(jdk13LumberjackLogger0, jexlUberspect_ResolverStrategy0, (Permissions) null);
      JexlBuilder jexlBuilder1 = jexlBuilder0.uberspect((JexlUberspect) uberspect0);
      jexlBuilder1.uberspect();
}"
43,"    public JexlBuilder cache(final int size) {
        this.cache = size;
        return this;
    }","  public void test25()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Jdk13LumberjackLogger jdk13LumberjackLogger0 = new Jdk13LumberjackLogger(""forEach"");
      JexlUberspect.ResolverStrategy jexlUberspect_ResolverStrategy0 = JexlUberspect.MAP_STRATEGY;
      Uberspect uberspect0 = new Uberspect(jdk13LumberjackLogger0, jexlUberspect_ResolverStrategy0, (Permissions) null);
      JexlBuilder jexlBuilder1 = jexlBuilder0.uberspect((JexlUberspect) uberspect0);
      jexlBuilder1.uberspect();
}"
44,"    public JexlBuilder stackOverflow(final int size) {
        this.stackOverflow = size;
        return this;
    }","  public void test26()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
}"
45,"    public JexlBuilder cache(final int size) {
        this.cache = size;
        return this;
    }","  public void test27()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.stackOverflow(0);
      jexlBuilder0.strict(true);
}"
46,"    public JexlBuilder strict(final boolean flag) {
        options.setStrict(flag);
        return this;
    }","  public void test28()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.stackOverflow((-696));
      jexlBuilder0.strict(false);
}"
47,"    public JexlBuilder lexical(final boolean flag) {
        options.setLexical(flag);
        return this;
    }","  public void test29()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.lexicalShade(true);
      jexlBuilder0.strict(true);
}"
48,"    public JexlBuilder collectMode(final int mode) {
        this.collectMode = mode;
        return this;
    }","  public void test30()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlBuilder jexlBuilder1 = jexlBuilder0.collectMode((-3044));
      jexlBuilder1.strict(true);
}"
49,"    public JexlBuilder cache(final int size) {
        this.cache = size;
        return this;
    }","  public void test31()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlBuilder jexlBuilder1 = jexlBuilder0.collectMode((-3044));
      jexlBuilder1.strict(true);
}"
50,"    public JexlBuilder collectMode(final int mode) {
        this.collectMode = mode;
        return this;
    }","  public void test32()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
}"
51,"    public JexlBuilder collectAll(final boolean flag) {
        return collectMode(flag? 1 : 0);
    }","  public void test33()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlBuilder jexlBuilder1 = jexlBuilder0.collectAll(false);
      jexlBuilder1.strict(true);
}"
52,"    public JexlBuilder strict(final boolean flag) {
        options.setStrict(flag);
        return this;
    }","  public void test34()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlBuilder jexlBuilder1 = jexlBuilder0.collectAll(false);
      jexlBuilder1.strict(true);
}"
53,"    public JexlBuilder strict(final boolean flag) {
        options.setStrict(flag);
        return this;
    }","  public void test35()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlBuilder jexlBuilder1 = jexlBuilder0.cache(0);
      jexlBuilder1.strict(false);
}"
54,"    public JexlBuilder cache(final int size) {
        this.cache = size;
        return this;
    }","  public void test36()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.cache(4095);
      jexlBuilder0.strict(true);
}"
55,"    public JexlBuilder antish(final boolean flag) {
        options.setAntish(flag);
        return this;
    }","  public void test37()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlBuilder jexlBuilder1 = jexlBuilder0.antish(false);
      jexlBuilder1.strict(true);
}"
56,"    public JexlBuilder stackOverflow(final int size) {
        this.stackOverflow = size;
        return this;
    }","  public void test38()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlBuilder jexlBuilder1 = jexlBuilder0.antish(false);
      jexlBuilder1.strict(true);
}"
57,"    public JexlBuilder strict(final boolean flag) {
        options.setStrict(flag);
        return this;
    }","  public void test39()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.strict(false);
      jexlBuilder0.strict();
}"
58,"    public JexlBuilder stackOverflow(final int size) {
        this.stackOverflow = size;
        return this;
    }","  public void test40()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
}"
59,"    public JexlBuilder cacheThreshold(final int length) {
        this.cacheThreshold = length > 0? length : CACHE_THRESHOLD;
        return this;
    }","  public void test41()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.stackOverflow(0);
      JexlUberspect.ResolverStrategy jexlUberspect_ResolverStrategy0 = JexlUberspect.JEXL_STRATEGY;
      jexlBuilder0.strategy(jexlUberspect_ResolverStrategy0);
}"
60,"    public JexlBuilder stackOverflow(final int size) {
        this.stackOverflow = size;
        return this;
    }","  public void test42()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.stackOverflow((-303));
      JexlUberspect.ResolverStrategy jexlUberspect_ResolverStrategy0 = JexlUberspect.JEXL_STRATEGY;
      jexlBuilder0.strategy(jexlUberspect_ResolverStrategy0);
}"
61,"    public JexlBuilder lexical(final boolean flag) {
        options.setLexical(flag);
        return this;
    }","  public void test43()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlBuilder jexlBuilder1 = jexlBuilder0.lexicalShade(true);
      JexlUberspect.ResolverStrategy jexlUberspect_ResolverStrategy0 = JexlUberspect.JEXL_STRATEGY;
      jexlBuilder1.strategy(jexlUberspect_ResolverStrategy0);
}"
62,"    public JexlBuilder stackOverflow(final int size) {
        this.stackOverflow = size;
        return this;
    }","  public void test44()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlBuilder jexlBuilder1 = jexlBuilder0.lexicalShade(true);
      JexlUberspect.ResolverStrategy jexlUberspect_ResolverStrategy0 = JexlUberspect.JEXL_STRATEGY;
      jexlBuilder1.strategy(jexlUberspect_ResolverStrategy0);
}"
63,"    public JexlBuilder lexical(final boolean flag) {
        options.setLexical(flag);
        return this;
    }","  public void test45()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.lexical(true);
      JexlUberspect.ResolverStrategy jexlUberspect_ResolverStrategy0 = JexlUberspect.MAP_STRATEGY;
      jexlBuilder0.strategy(jexlUberspect_ResolverStrategy0);
}"
64,"    public JexlBuilder collectMode(final int mode) {
        this.collectMode = mode;
        return this;
    }","  public void test46()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.collectMode((-13));
      JexlUberspect.ResolverStrategy jexlUberspect_ResolverStrategy0 = JexlUberspect.JEXL_STRATEGY;
      jexlBuilder0.strategy(jexlUberspect_ResolverStrategy0);
}"
65,"    public JexlBuilder collectAll(final boolean flag) {
        return collectMode(flag? 1 : 0);
    }","  public void test47()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
}"
66,"    public JexlBuilder collectAll(final boolean flag) {
        return collectMode(flag? 1 : 0);
    }","  public void test48()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.collectAll(false);
      JexlUberspect.ResolverStrategy jexlUberspect_ResolverStrategy0 = JexlUberspect.MAP_STRATEGY;
      jexlBuilder0.strategy(jexlUberspect_ResolverStrategy0);
}"
67,"    public JexlBuilder cache(final int size) {
        this.cache = size;
        return this;
    }","  public void test49()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
}"
68,"    public JexlBuilder cache(final int size) {
        this.cache = size;
        return this;
    }","  public void test50()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.cache(0);
      JexlUberspect.ResolverStrategy jexlUberspect_ResolverStrategy0 = JexlUberspect.MAP_STRATEGY;
      jexlBuilder0.strategy(jexlUberspect_ResolverStrategy0);
}"
69,"    public JexlBuilder cache(final int size) {
        this.cache = size;
        return this;
    }","  public void test51()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlBuilder jexlBuilder1 = jexlBuilder0.cache(Integer.MAX_VALUE);
      JexlUberspect.ResolverStrategy jexlUberspect_ResolverStrategy0 = JexlUberspect.MAP_STRATEGY;
      jexlBuilder1.strategy(jexlUberspect_ResolverStrategy0);
}"
70,"    public JexlBuilder antish(final boolean flag) {
        options.setAntish(flag);
        return this;
    }","  public void test52()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.antish(false);
      JexlUberspect.ResolverStrategy jexlUberspect_ResolverStrategy0 = JexlUberspect.JEXL_STRATEGY;
      jexlBuilder0.strategy(jexlUberspect_ResolverStrategy0);
}"
71,"    public JexlBuilder cache(final int size) {
        this.cache = size;
        return this;
    }","  public void test53()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlUberspect.ResolverStrategy jexlUberspect_ResolverStrategy0 = JexlUberspect.JEXL_STRATEGY;
      jexlBuilder0.strategy(jexlUberspect_ResolverStrategy0);
      jexlBuilder0.strategy();
}"
72,"    public JexlBuilder collectMode(final int mode) {
        this.collectMode = mode;
        return this;
    }","  public void test54()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlUberspect.ResolverStrategy jexlUberspect_ResolverStrategy0 = JexlUberspect.JEXL_STRATEGY;
      jexlBuilder0.strategy(jexlUberspect_ResolverStrategy0);
      jexlBuilder0.strategy();
}"
73,"    public JexlBuilder cacheThreshold(final int length) {
        this.cacheThreshold = length > 0? length : CACHE_THRESHOLD;
        return this;
    }","  public void test55()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlUberspect.ResolverStrategy jexlUberspect_ResolverStrategy0 = JexlUberspect.JEXL_STRATEGY;
      jexlBuilder0.strategy(jexlUberspect_ResolverStrategy0);
      jexlBuilder0.strategy();
}"
74,"    public JexlBuilder stackOverflow(final int size) {
        this.stackOverflow = size;
        return this;
    }","  public void test56()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlUberspect.ResolverStrategy jexlUberspect_ResolverStrategy0 = JexlUberspect.JEXL_STRATEGY;
      jexlBuilder0.strategy(jexlUberspect_ResolverStrategy0);
      jexlBuilder0.strategy();
}"
75,"    public JexlBuilder lexicalShade(final boolean flag) {
        options.setLexicalShade(flag);
        return this;
    }","  public void test57()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.lexicalShade(true);
      jexlBuilder0.stackOverflow((-303));
}"
76,"    public JexlBuilder collectMode(final int mode) {
        this.collectMode = mode;
        return this;
    }","  public void test58()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.collectMode((-303));
      jexlBuilder0.stackOverflow((-303));
}"
77,"    public JexlBuilder stackOverflow(final int size) {
        this.stackOverflow = size;
        return this;
    }","  public void test59()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.collectAll(false);
      jexlBuilder0.stackOverflow(2738);
}"
78,"    public JexlBuilder stackOverflow(final int size) {
        this.stackOverflow = size;
        return this;
    }","  public void test60()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlBuilder jexlBuilder1 = jexlBuilder0.cache(0);
      jexlBuilder1.stackOverflow(19);
}"
79,"    public JexlBuilder cache(final int size) {
        this.cache = size;
        return this;
    }","  public void test61()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlBuilder jexlBuilder1 = jexlBuilder0.cache(Integer.MAX_VALUE);
      jexlBuilder1.stackOverflow(Integer.MAX_VALUE);
}"
80,"    public JexlBuilder cacheThreshold(final int length) {
        this.cacheThreshold = length > 0? length : CACHE_THRESHOLD;
        return this;
    }","  public void test62()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlBuilder jexlBuilder1 = jexlBuilder0.cache(Integer.MAX_VALUE);
      jexlBuilder1.stackOverflow(Integer.MAX_VALUE);
}"
81,"    public JexlBuilder antish(final boolean flag) {
        options.setAntish(flag);
        return this;
    }","  public void test63()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlBuilder jexlBuilder1 = jexlBuilder0.antish(false);
      jexlBuilder1.stackOverflow(10);
}"
82,"    public JexlBuilder stackOverflow(final int size) {
        this.stackOverflow = size;
        return this;
    }","  public void test64()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlBuilder jexlBuilder1 = jexlBuilder0.antish(false);
      jexlBuilder1.stackOverflow(10);
}"
83,"    public JexlBuilder stackOverflow(final int size) {
        this.stackOverflow = size;
        return this;
    }","  public void test65()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
}"
84,"    public JexlBuilder stackOverflow(final int size) {
        this.stackOverflow = size;
        return this;
    }","  public void test66()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.stackOverflow(0);
      int int0 = jexlBuilder0.stackOverflow();
}"
85,"    public JexlBuilder stackOverflow(final int size) {
        this.stackOverflow = size;
        return this;
    }","  public void test67()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.stackOverflow((-303));
      int int0 = jexlBuilder0.stackOverflow();
}"
86,"    public JexlBuilder stackOverflow(final int size) {
        this.stackOverflow = size;
        return this;
    }","  public void test68()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
}"
87,"    public JexlBuilder cacheThreshold(final int length) {
        this.cacheThreshold = length > 0? length : CACHE_THRESHOLD;
        return this;
    }","  public void test69()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.stackOverflow(0);
      jexlBuilder0.silent(false);
}"
88,"    public JexlBuilder silent(final boolean flag) {
        options.setSilent(flag);
        return this;
    }","  public void test70()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.stackOverflow((-303));
      jexlBuilder0.silent(true);
}"
89,"    public JexlBuilder silent(final boolean flag) {
        options.setSilent(flag);
        return this;
    }","  public void test71()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.lexicalShade(true);
      jexlBuilder0.silent(true);
}"
90,"    public JexlBuilder silent(final boolean flag) {
        options.setSilent(flag);
        return this;
    }","  public void test72()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.collectMode((-515));
      jexlBuilder0.silent(true);
}"
91,"    public JexlBuilder collectAll(final boolean flag) {
        return collectMode(flag? 1 : 0);
    }","  public void test73()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
}"
92,"    public JexlBuilder collectAll(final boolean flag) {
        return collectMode(flag? 1 : 0);
    }","  public void test74()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.collectAll(false);
      jexlBuilder0.silent(false);
}"
93,"    public JexlBuilder cache(final int size) {
        this.cache = size;
        return this;
    }","  public void test75()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
}"
94,"    public JexlBuilder cache(final int size) {
        this.cache = size;
        return this;
    }","  public void test76()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.cache(0);
      jexlBuilder0.silent(false);
}"
95,"    public JexlBuilder cache(final int size) {
        this.cache = size;
        return this;
    }","  public void test77()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.cache(25);
      jexlBuilder0.silent(true);
}"
96,"    public JexlBuilder antish(final boolean flag) {
        options.setAntish(flag);
        return this;
    }","  public void test78()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.antish(false);
      jexlBuilder0.silent(false);
}"
97,"    public JexlBuilder silent(final boolean flag) {
        options.setSilent(flag);
        return this;
    }","  public void test79()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.silent(true);
      jexlBuilder0.silent();
}"
98,"    public JexlBuilder stackOverflow(final int size) {
        this.stackOverflow = size;
        return this;
    }","  public void test80()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
}"
99,"    public JexlBuilder stackOverflow(final int size) {
        this.stackOverflow = size;
        return this;
    }","  public void test81()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.stackOverflow(0);
      JexlSandbox jexlSandbox0 = new JexlSandbox(true);
      jexlBuilder0.sandbox(jexlSandbox0);
}"
100,"    public JexlBuilder stackOverflow(final int size) {
        this.stackOverflow = size;
        return this;
    }","  public void test82()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.stackOverflow((-303));
      JexlSandbox jexlSandbox0 = new JexlSandbox();
      jexlBuilder0.sandbox(jexlSandbox0);
}"
101,"    public JexlBuilder lexical(final boolean flag) {
        options.setLexical(flag);
        return this;
    }","  public void test83()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.lexicalShade(true);
      JexlSandbox jexlSandbox0 = new JexlSandbox();
      jexlBuilder0.sandbox(jexlSandbox0);
}"
102,"    public JexlBuilder collectMode(final int mode) {
        this.collectMode = mode;
        return this;
    }","  public void test84()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.collectMode((-303));
      JexlSandbox jexlSandbox0 = new JexlSandbox();
      jexlBuilder0.sandbox(jexlSandbox0);
}"
103,"    public JexlBuilder collectMode(final int mode) {
        this.collectMode = mode;
        return this;
    }","  public void test85()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
}"
104,"    public JexlBuilder collectMode(final int mode) {
        this.collectMode = mode;
        return this;
    }","  public void test86()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.collectAll(false);
      JexlSandbox jexlSandbox0 = new JexlSandbox();
      jexlBuilder0.sandbox(jexlSandbox0);
}"
105,"    public JexlBuilder cache(final int size) {
        this.cache = size;
        return this;
    }","  public void test87()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
}"
106,"    public JexlBuilder cache(final int size) {
        this.cache = size;
        return this;
    }","  public void test88()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlBuilder jexlBuilder1 = jexlBuilder0.cache(0);
      JexlSandbox jexlSandbox0 = new JexlSandbox();
      jexlBuilder1.sandbox(jexlSandbox0);
}"
107,"    public JexlBuilder stackOverflow(final int size) {
        this.stackOverflow = size;
        return this;
    }","  public void test89()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlBuilder jexlBuilder1 = jexlBuilder0.cache(0);
      JexlSandbox jexlSandbox0 = new JexlSandbox();
      jexlBuilder1.sandbox(jexlSandbox0);
}"
108,"    public JexlBuilder cache(final int size) {
        this.cache = size;
        return this;
    }","  public void test90()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
}"
109,"    public JexlBuilder cache(final int size) {
        this.cache = size;
        return this;
    }","  public void test91()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlBuilder jexlBuilder1 = jexlBuilder0.cache(1);
      JexlSandbox jexlSandbox0 = new JexlSandbox();
      jexlBuilder1.sandbox(jexlSandbox0);
}"
110,"    public JexlBuilder cacheThreshold(final int length) {
        this.cacheThreshold = length > 0? length : CACHE_THRESHOLD;
        return this;
    }","  public void test92()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlBuilder jexlBuilder1 = jexlBuilder0.cache(1);
      JexlSandbox jexlSandbox0 = new JexlSandbox();
      jexlBuilder1.sandbox(jexlSandbox0);
}"
111,"    public JexlBuilder antish(final boolean flag) {
        options.setAntish(flag);
        return this;
    }","  public void test93()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.antish(false);
      JexlSandbox jexlSandbox0 = new JexlSandbox();
      jexlBuilder0.sandbox(jexlSandbox0);
}"
112,"    public JexlBuilder stackOverflow(final int size) {
        this.stackOverflow = size;
        return this;
    }","  public void test94()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
}"
113,"    public JexlBuilder stackOverflow(final int size) {
        this.stackOverflow = size;
        return this;
    }","  public void test95()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.stackOverflow(0);
      jexlBuilder0.safe(true);
}"
114,"    public JexlBuilder stackOverflow(final int size) {
        this.stackOverflow = size;
        return this;
    }","  public void test96()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.stackOverflow((-2));
      jexlBuilder0.safe(false);
}"
115,"    public JexlBuilder lexical(final boolean flag) {
        options.setLexical(flag);
        return this;
    }","  public void test97()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlBuilder jexlBuilder1 = jexlBuilder0.lexicalShade(true);
      jexlBuilder1.safe(false);
}"
116,"    public JexlBuilder cacheThreshold(final int length) {
        this.cacheThreshold = length > 0? length : CACHE_THRESHOLD;
        return this;
    }","  public void test98()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlBuilder jexlBuilder1 = jexlBuilder0.lexicalShade(true);
      jexlBuilder1.safe(false);
}"
117,"    public JexlBuilder collectMode(final int mode) {
        this.collectMode = mode;
        return this;
    }","  public void test99()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.collectMode((-3044));
      jexlBuilder0.safe(true);
}"
118,"    public JexlBuilder collectMode(final int mode) {
        this.collectMode = mode;
        return this;
    }","  public void test100()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
}"
119,"    public JexlBuilder collectAll(final boolean flag) {
        return collectMode(flag? 1 : 0);
    }","  public void test101()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlBuilder jexlBuilder1 = jexlBuilder0.collectMode(0);
      jexlBuilder1.safe(true);
}"
120,"    public JexlBuilder cacheThreshold(final int length) {
        this.cacheThreshold = length > 0? length : CACHE_THRESHOLD;
        return this;
    }","  public void test102()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlBuilder jexlBuilder1 = jexlBuilder0.collectMode(0);
      jexlBuilder1.safe(true);
}"
121,"    public JexlBuilder cache(final int size) {
        this.cache = size;
        return this;
    }","  public void test103()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
}"
122,"    public JexlBuilder cache(final int size) {
        this.cache = size;
        return this;
    }","  public void test104()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.cache(0);
      jexlBuilder0.safe(true);
}"
123,"    public JexlBuilder cache(final int size) {
        this.cache = size;
        return this;
    }","  public void test105()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.cache(Integer.MAX_VALUE);
      jexlBuilder0.safe(true);
}"
124,"    public JexlBuilder safe(final boolean flag) {
        options.setSafe(flag);
        return this;
    }","  public void test106()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlBuilder jexlBuilder1 = jexlBuilder0.antish(false);
      jexlBuilder1.safe(false);
}"
125,"    public JexlBuilder safe(final boolean flag) {
        options.setSafe(flag);
        return this;
    }","  public void test107()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.safe(false);
      jexlBuilder0.safe();
}"
126,"    public JexlBuilder strict(final boolean flag) {
        options.setStrict(flag);
        return this;
    }","  public void test108()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.strict(false);
      jexlBuilder0.options();
}"
127,"    public JexlBuilder silent(final boolean flag) {
        options.setSilent(flag);
        return this;
    }","  public void test109()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.silent(true);
      jexlBuilder0.options();
}"
128,"    public JexlBuilder lexicalShade(final boolean flag) {
        options.setLexicalShade(flag);
        return this;
    }","  public void test110()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlBuilder jexlBuilder1 = jexlBuilder0.lexicalShade(true);
      jexlBuilder1.options();
}"
129,"    public JexlBuilder stackOverflow(final int size) {
        this.stackOverflow = size;
        return this;
    }","  public void test111()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlBuilder jexlBuilder1 = jexlBuilder0.lexicalShade(true);
      jexlBuilder1.options();
}"
130,"    public JexlOptions options() {
        return options;
    }","  public void test112()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.cancellable(false);
      JexlOptions jexlOptions0 = jexlBuilder0.options();
}"
131,"    public JexlBuilder cache(final int size) {
        this.cache = size;
        return this;
    }","  public void test113()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.cancellable(false);
      JexlOptions jexlOptions0 = jexlBuilder0.options();
}"
132,"    public JexlBuilder stackOverflow(final int size) {
        this.stackOverflow = size;
        return this;
    }","  public void test114()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.cancellable(false);
      JexlOptions jexlOptions0 = jexlBuilder0.options();
}"
133,"    public JexlBuilder collectMode(final int mode) {
        this.collectMode = mode;
        return this;
    }","  public void test115()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.cancellable(false);
      JexlOptions jexlOptions0 = jexlBuilder0.options();
}"
134,"    public JexlBuilder cacheThreshold(final int length) {
        this.cacheThreshold = length > 0? length : CACHE_THRESHOLD;
        return this;
    }","  public void test116()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.cancellable(false);
      JexlOptions jexlOptions0 = jexlBuilder0.options();
}"
135,"    public JexlBuilder antish(final boolean flag) {
        options.setAntish(flag);
        return this;
    }","  public void test117()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.antish(false);
      jexlBuilder0.options();
}"
136,"    public JexlBuilder stackOverflow(final int size) {
        this.stackOverflow = size;
        return this;
    }","  public void test118()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      RoundingMode roundingMode0 = RoundingMode.FLOOR;
      MathContext mathContext0 = new MathContext(1724, roundingMode0);
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.createWithOptions(true, mathContext0, 0);
      jexlBuilder0.arithmetic(jexlArithmetic1);
      jexlBuilder0.options();
}"
137,"    public JexlBuilder cache(final int size) {
        this.cache = size;
        return this;
    }","  public void test119()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      RoundingMode roundingMode0 = RoundingMode.FLOOR;
      MathContext mathContext0 = new MathContext(1724, roundingMode0);
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.createWithOptions(true, mathContext0, 0);
      jexlBuilder0.arithmetic(jexlArithmetic1);
      jexlBuilder0.options();
}"
138,"    public JexlBuilder cacheThreshold(final int length) {
        this.cacheThreshold = length > 0? length : CACHE_THRESHOLD;
        return this;
    }","  public void test120()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      RoundingMode roundingMode0 = RoundingMode.FLOOR;
      MathContext mathContext0 = new MathContext(1724, roundingMode0);
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.createWithOptions(true, mathContext0, 0);
      jexlBuilder0.arithmetic(jexlArithmetic1);
      jexlBuilder0.options();
}"
139,"    public JexlBuilder collectAll(final boolean flag) {
        return collectMode(flag? 1 : 0);
    }","  public void test121()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      RoundingMode roundingMode0 = RoundingMode.FLOOR;
      MathContext mathContext0 = new MathContext(1724, roundingMode0);
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.createWithOptions(true, mathContext0, 0);
      jexlBuilder0.arithmetic(jexlArithmetic1);
      jexlBuilder0.options();
}"
140,"    public JexlBuilder cache(final int size) {
        this.cache = size;
        return this;
    }","  public void test122()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      MathContext mathContext0 = MathContext.UNLIMITED;
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.createWithOptions(false, mathContext0, 1);
      jexlBuilder0.arithmetic(jexlArithmetic1);
      jexlBuilder0.options();
}"
141,"    public JexlBuilder collectMode(final int mode) {
        this.collectMode = mode;
        return this;
    }","  public void test123()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      MathContext mathContext0 = MathContext.UNLIMITED;
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.createWithOptions(false, mathContext0, 1);
      jexlBuilder0.arithmetic(jexlArithmetic1);
      jexlBuilder0.options();
}"
142,"    public JexlBuilder stackOverflow(final int size) {
        this.stackOverflow = size;
        return this;
    }","  public void test124()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      MathContext mathContext0 = MathContext.UNLIMITED;
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.createWithOptions(false, mathContext0, 1);
      jexlBuilder0.arithmetic(jexlArithmetic1);
      jexlBuilder0.options();
}"
143,"    public JexlBuilder cacheThreshold(final int length) {
        this.cacheThreshold = length > 0? length : CACHE_THRESHOLD;
        return this;
    }","  public void test125()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      MathContext mathContext0 = MathContext.UNLIMITED;
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.createWithOptions(false, mathContext0, 1);
      jexlBuilder0.arithmetic(jexlArithmetic1);
      jexlBuilder0.options();
}"
144,"    public JexlBuilder stackOverflow(final int size) {
        this.stackOverflow = size;
        return this;
    }","  public void test126()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
}"
145,"    public JexlBuilder cacheThreshold(final int length) {
        this.cacheThreshold = length > 0? length : CACHE_THRESHOLD;
        return this;
    }","  public void test127()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlBuilder jexlBuilder1 = jexlBuilder0.stackOverflow(0);
      Map<String, Object> map0 = jexlBuilder0.namespaces();
      jexlBuilder1.namespaces(map0);
}"
146,"    public JexlBuilder stackOverflow(final int size) {
        this.stackOverflow = size;
        return this;
    }","  public void test128()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlBuilder jexlBuilder1 = jexlBuilder0.stackOverflow((-696));
      Map<String, Object> map0 = jexlBuilder1.namespaces();
      jexlBuilder0.namespaces(map0);
}"
147,"    public JexlBuilder lexical(final boolean flag) {
        options.setLexical(flag);
        return this;
    }","  public void test129()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.lexicalShade(true);
      Map<String, Object> map0 = jexlBuilder0.namespaces();
      jexlBuilder0.namespaces(map0);
}"
148,"    public JexlBuilder collectMode(final int mode) {
        this.collectMode = mode;
        return this;
    }","  public void test130()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.collectMode((-13));
      jexlBuilder0.namespaces((Map<String, Object>) null);
}"
149,"    public JexlBuilder collectMode(final int mode) {
        this.collectMode = mode;
        return this;
    }","  public void test131()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
}"
150,"    public JexlBuilder collectAll(final boolean flag) {
        return collectMode(flag? 1 : 0);
    }","  public void test132()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.collectAll(false);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      jexlBuilder0.namespaces((Map<String, Object>) hashMap0);
}"
151,"    public JexlBuilder cache(final int size) {
        this.cache = size;
        return this;
    }","  public void test133()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
}"
152,"    public JexlBuilder cache(final int size) {
        this.cache = size;
        return this;
    }","  public void test134()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlBuilder jexlBuilder1 = jexlBuilder0.cache(0);
      JexlOptions jexlOptions0 = jexlBuilder0.options();
      Map<String, Object> map0 = jexlOptions0.getNamespaces();
      jexlBuilder1.namespaces(map0);
}"
153,"    public JexlBuilder cacheThreshold(final int length) {
        this.cacheThreshold = length > 0? length : CACHE_THRESHOLD;
        return this;
    }","  public void test135()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlBuilder jexlBuilder1 = jexlBuilder0.cache(0);
      JexlOptions jexlOptions0 = jexlBuilder0.options();
      Map<String, Object> map0 = jexlOptions0.getNamespaces();
      jexlBuilder1.namespaces(map0);
}"
154,"    public JexlBuilder cache(final int size) {
        this.cache = size;
        return this;
    }","  public void test136()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.cache(25);
      Map<String, Object> map0 = jexlBuilder0.namespaces();
      jexlBuilder0.namespaces(map0);
}"
155,"    public JexlBuilder antish(final boolean flag) {
        options.setAntish(flag);
        return this;
    }","  public void test137()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.antish(false);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      jexlBuilder0.namespaces((Map<String, Object>) hashMap0);
}"
156,"    public JexlBuilder stackOverflow(final int size) {
        this.stackOverflow = size;
        return this;
    }","  public void test138()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      HashMap<String, Object> hashMap1 = new HashMap<String, Object>(hashMap0);
      jexlBuilder0.namespaces((Map<String, Object>) hashMap1);
      jexlBuilder0.namespaces();
}"
157,"    public JexlBuilder cache(final int size) {
        this.cache = size;
        return this;
    }","  public void test139()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      HashMap<String, Object> hashMap1 = new HashMap<String, Object>(hashMap0);
      jexlBuilder0.namespaces((Map<String, Object>) hashMap1);
      jexlBuilder0.namespaces();
}"
158,"    public JexlBuilder cacheThreshold(final int length) {
        this.cacheThreshold = length > 0? length : CACHE_THRESHOLD;
        return this;
    }","  public void test140()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      HashMap<String, Object> hashMap1 = new HashMap<String, Object>(hashMap0);
      jexlBuilder0.namespaces((Map<String, Object>) hashMap1);
      jexlBuilder0.namespaces();
}"
159,"    public JexlBuilder collectMode(final int mode) {
        this.collectMode = mode;
        return this;
    }","  public void test141()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      HashMap<String, Object> hashMap1 = new HashMap<String, Object>(hashMap0);
      jexlBuilder0.namespaces((Map<String, Object>) hashMap1);
      jexlBuilder0.namespaces();
}"
160,"    public JexlBuilder stackOverflow(final int size) {
        this.stackOverflow = size;
        return this;
    }","  public void test142()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      jexlBuilder0.namespaces((Map<String, Object>) hashMap0);
      hashMap0.put(""/x"", ""/x"");
      jexlBuilder0.namespaces();
}"
161,"    public JexlBuilder cacheThreshold(final int length) {
        this.cacheThreshold = length > 0? length : CACHE_THRESHOLD;
        return this;
    }","  public void test143()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      jexlBuilder0.namespaces((Map<String, Object>) hashMap0);
      hashMap0.put(""/x"", ""/x"");
      jexlBuilder0.namespaces();
}"
162,"    public JexlBuilder collectAll(final boolean flag) {
        return collectMode(flag? 1 : 0);
    }","  public void test144()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      jexlBuilder0.namespaces((Map<String, Object>) hashMap0);
      hashMap0.put(""/x"", ""/x"");
      jexlBuilder0.namespaces();
}"
163,"    public JexlBuilder cache(final int size) {
        this.cache = size;
        return this;
    }","  public void test145()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      jexlBuilder0.namespaces((Map<String, Object>) hashMap0);
      hashMap0.put(""/x"", ""/x"");
      jexlBuilder0.namespaces();
}"
164,"    public JexlBuilder stackOverflow(final int size) {
        this.stackOverflow = size;
        return this;
    }","  public void test146()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
}"
165,"    public JexlBuilder cacheThreshold(final int length) {
        this.cacheThreshold = length > 0? length : CACHE_THRESHOLD;
        return this;
    }","  public void test147()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Jdk13LumberjackLogger jdk13LumberjackLogger0 = new Jdk13LumberjackLogger(""selfXor"");
      jexlBuilder0.stackOverflow(0);
      jexlBuilder0.logger((Log) jdk13LumberjackLogger0);
}"
166,"    public JexlBuilder stackOverflow(final int size) {
        this.stackOverflow = size;
        return this;
    }","  public void test148()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Jdk14Logger jdk14Logger0 = new Jdk14Logger(""Ad8V:c>_4J"");
      jexlBuilder0.stackOverflow((-303));
      jexlBuilder0.logger((Log) jdk14Logger0);
}"
167,"    public JexlBuilder lexicalShade(final boolean flag) {
        options.setLexicalShade(flag);
        return this;
    }","  public void test149()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlBuilder jexlBuilder1 = jexlBuilder0.lexicalShade(true);
      Jdk14Logger jdk14Logger0 = new Jdk14Logger(""Ad8V:c>_4J"");
      jexlBuilder1.logger((Log) jdk14Logger0);
}"
168,"    public JexlBuilder stackOverflow(final int size) {
        this.stackOverflow = size;
        return this;
    }","  public void test150()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlBuilder jexlBuilder1 = jexlBuilder0.lexicalShade(true);
      Jdk14Logger jdk14Logger0 = new Jdk14Logger(""Ad8V:c>_4J"");
      jexlBuilder1.logger((Log) jdk14Logger0);
}"
169,"    public JexlBuilder collectMode(final int mode) {
        this.collectMode = mode;
        return this;
    }","  public void test151()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Jdk14Logger jdk14Logger0 = new Jdk14Logger(""Ad8V:c>_4J"");
      jexlBuilder0.collectMode((-303));
      jexlBuilder0.logger((Log) jdk14Logger0);
}"
170,"    public JexlBuilder collectAll(final boolean flag) {
        return collectMode(flag? 1 : 0);
    }","  public void test152()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
}"
171,"    public JexlBuilder collectAll(final boolean flag) {
        return collectMode(flag? 1 : 0);
    }","  public void test153()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlBuilder jexlBuilder1 = jexlBuilder0.collectAll(false);
      NoOpLog noOpLog0 = new NoOpLog();
      jexlBuilder1.logger((Log) noOpLog0);
}"
172,"    public JexlBuilder stackOverflow(final int size) {
        this.stackOverflow = size;
        return this;
    }","  public void test154()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlBuilder jexlBuilder1 = jexlBuilder0.collectAll(false);
      NoOpLog noOpLog0 = new NoOpLog();
      jexlBuilder1.logger((Log) noOpLog0);
}"
173,"    public JexlBuilder cache(final int size) {
        this.cache = size;
        return this;
    }","  public void test155()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
}"
174,"    public JexlBuilder cache(final int size) {
        this.cache = size;
        return this;
    }","  public void test156()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.cache(0);
      NoOpLog noOpLog0 = new NoOpLog();
      jexlBuilder0.logger((Log) noOpLog0);
}"
175,"    public JexlBuilder cache(final int size) {
        this.cache = size;
        return this;
    }","  public void test157()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlBuilder jexlBuilder1 = jexlBuilder0.cache(4095);
      Jdk13LumberjackLogger jdk13LumberjackLogger0 = new Jdk13LumberjackLogger(""ykewkCZ/i [~"");
      jexlBuilder1.logger((Log) jdk13LumberjackLogger0);
}"
176,"    public JexlBuilder cacheThreshold(final int length) {
        this.cacheThreshold = length > 0? length : CACHE_THRESHOLD;
        return this;
    }","  public void test158()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlBuilder jexlBuilder1 = jexlBuilder0.cache(4095);
      Jdk13LumberjackLogger jdk13LumberjackLogger0 = new Jdk13LumberjackLogger(""ykewkCZ/i [~"");
      jexlBuilder1.logger((Log) jdk13LumberjackLogger0);
}"
177,"    public JexlBuilder antish(final boolean flag) {
        options.setAntish(flag);
        return this;
    }","  public void test159()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Jdk13LumberjackLogger jdk13LumberjackLogger0 = new Jdk13LumberjackLogger(""org.apache.commons.jexl3.JexlBuilder"");
      jexlBuilder0.antish(false);
      jexlBuilder0.logger((Log) jdk13LumberjackLogger0);
}"
178,"    public JexlBuilder stackOverflow(final int size) {
        this.stackOverflow = size;
        return this;
    }","  public void test160()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      SimpleLog simpleLog0 = new SimpleLog(""L!yW{Jvg'O|~Te"");
      jexlBuilder0.logger((Log) simpleLog0);
      jexlBuilder0.logger();
}"
179,"    public JexlBuilder cache(final int size) {
        this.cache = size;
        return this;
    }","  public void test161()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      SimpleLog simpleLog0 = new SimpleLog(""L!yW{Jvg'O|~Te"");
      jexlBuilder0.logger((Log) simpleLog0);
      jexlBuilder0.logger();
}"
180,"    public JexlBuilder collectAll(final boolean flag) {
        return collectMode(flag? 1 : 0);
    }","  public void test162()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      SimpleLog simpleLog0 = new SimpleLog(""L!yW{Jvg'O|~Te"");
      jexlBuilder0.logger((Log) simpleLog0);
      jexlBuilder0.logger();
}"
181,"    public JexlBuilder cacheThreshold(final int length) {
        this.cacheThreshold = length > 0? length : CACHE_THRESHOLD;
        return this;
    }","  public void test163()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      SimpleLog simpleLog0 = new SimpleLog(""L!yW{Jvg'O|~Te"");
      jexlBuilder0.logger((Log) simpleLog0);
      jexlBuilder0.logger();
}"
182,"    public JexlBuilder stackOverflow(final int size) {
        this.stackOverflow = size;
        return this;
    }","  public void test164()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
}"
183,"    public JexlBuilder stackOverflow(final int size) {
        this.stackOverflow = size;
        return this;
    }","  public void test165()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlBuilder jexlBuilder1 = jexlBuilder0.stackOverflow(0);
      Charset charset0 = jexlBuilder1.charset();
      jexlBuilder1.loader(charset0);
}"
184,"    public JexlBuilder stackOverflow(final int size) {
        this.stackOverflow = size;
        return this;
    }","  public void test166()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Charset charset0 = Charset.defaultCharset();
      jexlBuilder0.stackOverflow((-2));
      jexlBuilder0.loader(charset0);
}"
185,"    public JexlBuilder lexicalShade(final boolean flag) {
        options.setLexicalShade(flag);
        return this;
    }","  public void test167()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.lexicalShade(true);
      Charset charset0 = Charset.defaultCharset();
      jexlBuilder0.loader(charset0);
}"
186,"    public JexlBuilder collectMode(final int mode) {
        this.collectMode = mode;
        return this;
    }","  public void test168()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.collectMode((-1078));
      Charset charset0 = jexlBuilder0.charset();
      jexlBuilder0.loader(charset0);
}"
187,"    public JexlBuilder collectMode(final int mode) {
        this.collectMode = mode;
        return this;
    }","  public void test169()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
}"
188,"    public JexlBuilder collectMode(final int mode) {
        this.collectMode = mode;
        return this;
    }","  public void test170()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlBuilder jexlBuilder1 = jexlBuilder0.collectAll(false);
      Charset charset0 = Charset.defaultCharset();
      jexlBuilder1.loader(charset0);
}"
189,"    public JexlBuilder cacheThreshold(final int length) {
        this.cacheThreshold = length > 0? length : CACHE_THRESHOLD;
        return this;
    }","  public void test171()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlBuilder jexlBuilder1 = jexlBuilder0.collectAll(false);
      Charset charset0 = Charset.defaultCharset();
      jexlBuilder1.loader(charset0);
}"
190,"    public JexlBuilder cache(final int size) {
        this.cache = size;
        return this;
    }","  public void test172()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
}"
191,"    public JexlBuilder cache(final int size) {
        this.cache = size;
        return this;
    }","  public void test173()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlBuilder jexlBuilder1 = jexlBuilder0.cache(0);
      Charset charset0 = Charset.defaultCharset();
      jexlBuilder1.loader(charset0);
}"
192,"    public JexlBuilder cacheThreshold(final int length) {
        this.cacheThreshold = length > 0? length : CACHE_THRESHOLD;
        return this;
    }","  public void test174()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlBuilder jexlBuilder1 = jexlBuilder0.cache(0);
      Charset charset0 = Charset.defaultCharset();
      jexlBuilder1.loader(charset0);
}"
193,"    public JexlBuilder cache(final int size) {
        this.cache = size;
        return this;
    }","  public void test175()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.cache(6);
      Charset charset0 = jexlBuilder0.charset();
      jexlBuilder0.loader(charset0);
}"
194,"    public JexlBuilder antish(final boolean flag) {
        options.setAntish(flag);
        return this;
    }","  public void test176()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Charset charset0 = Charset.defaultCharset();
      JexlBuilder jexlBuilder1 = jexlBuilder0.antish(false);
      jexlBuilder1.loader(charset0);
}"
195,"    public JexlBuilder cache(final int size) {
        this.cache = size;
        return this;
    }","  public void test177()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Charset charset0 = Charset.defaultCharset();
      JexlBuilder jexlBuilder1 = jexlBuilder0.antish(false);
      jexlBuilder1.loader(charset0);
}"
196,"    public JexlBuilder stackOverflow(final int size) {
        this.stackOverflow = size;
        return this;
    }","  public void test178()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
}"
197,"    public JexlBuilder collectAll(final boolean flag) {
        return collectMode(flag? 1 : 0);
    }","  public void test179()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlBuilder jexlBuilder1 = jexlBuilder0.stackOverflow(0);
      jexlBuilder1.loader((ClassLoader) null);
}"
198,"    public JexlBuilder stackOverflow(final int size) {
        this.stackOverflow = size;
        return this;
    }","  public void test180()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlBuilder jexlBuilder1 = jexlBuilder0.stackOverflow((-714));
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      jexlBuilder1.loader(classLoader0);
}"
199,"    public JexlBuilder cacheThreshold(final int length) {
        this.cacheThreshold = length > 0? length : CACHE_THRESHOLD;
        return this;
    }","  public void test181()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlBuilder jexlBuilder1 = jexlBuilder0.stackOverflow((-714));
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      jexlBuilder1.loader(classLoader0);
}"
200,"    public JexlBuilder lexicalShade(final boolean flag) {
        options.setLexicalShade(flag);
        return this;
    }","  public void test182()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.lexicalShade(true);
      jexlBuilder0.loader((ClassLoader) null);
}"
201,"    public JexlBuilder collectAll(final boolean flag) {
        return collectMode(flag? 1 : 0);
    }","  public void test183()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
}"
202,"    public JexlBuilder collectAll(final boolean flag) {
        return collectMode(flag? 1 : 0);
    }","  public void test184()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.collectAll(false);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      jexlBuilder0.loader(classLoader0);
}"
203,"    public JexlBuilder cache(final int size) {
        this.cache = size;
        return this;
    }","  public void test185()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
}"
204,"    public JexlBuilder cache(final int size) {
        this.cache = size;
        return this;
    }","  public void test186()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.cache(0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      jexlBuilder0.loader(classLoader0);
}"
205,"    public JexlBuilder cache(final int size) {
        this.cache = size;
        return this;
    }","  public void test187()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlBuilder jexlBuilder1 = jexlBuilder0.cache(812);
      Jdk14Logger jdk14Logger0 = new Jdk14Logger(""org.apache.commons.jexl3.JexlBuilder"");
      JexlUberspect.ResolverStrategy jexlUberspect_ResolverStrategy0 = JexlUberspect.JEXL_STRATEGY;
      Uberspect uberspect0 = new Uberspect(jdk14Logger0, jexlUberspect_ResolverStrategy0);
      ClassLoader classLoader0 = uberspect0.getClassLoader();
      jexlBuilder1.loader(classLoader0);
}"
206,"    public JexlBuilder cacheThreshold(final int length) {
        this.cacheThreshold = length > 0? length : CACHE_THRESHOLD;
        return this;
    }","  public void test188()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlBuilder jexlBuilder1 = jexlBuilder0.cache(812);
      Jdk14Logger jdk14Logger0 = new Jdk14Logger(""org.apache.commons.jexl3.JexlBuilder"");
      JexlUberspect.ResolverStrategy jexlUberspect_ResolverStrategy0 = JexlUberspect.JEXL_STRATEGY;
      Uberspect uberspect0 = new Uberspect(jdk14Logger0, jexlUberspect_ResolverStrategy0);
      ClassLoader classLoader0 = uberspect0.getClassLoader();
      jexlBuilder1.loader(classLoader0);
}"
207,"    public JexlBuilder antish(final boolean flag) {
        options.setAntish(flag);
        return this;
    }","  public void test189()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlBuilder jexlBuilder1 = jexlBuilder0.antish(false);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      jexlBuilder1.loader(classLoader0);
}"
208,"    public JexlBuilder stackOverflow(final int size) {
        this.stackOverflow = size;
        return this;
    }","  public void test190()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlBuilder jexlBuilder1 = jexlBuilder0.antish(false);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      jexlBuilder1.loader(classLoader0);
}"
209,"    public JexlBuilder cache(final int size) {
        this.cache = size;
        return this;
    }","  public void test191()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      NoOpLog noOpLog0 = new NoOpLog();
      JexlUberspect.ResolverStrategy jexlUberspect_ResolverStrategy0 = JexlUberspect.MAP_STRATEGY;
      Uberspect uberspect0 = new Uberspect(noOpLog0, jexlUberspect_ResolverStrategy0);
      ClassLoader classLoader0 = uberspect0.getClassLoader();
      JexlBuilder jexlBuilder1 = jexlBuilder0.loader(classLoader0);
      jexlBuilder1.loader();
}"
210,"    public JexlBuilder stackOverflow(final int size) {
        this.stackOverflow = size;
        return this;
    }","  public void test192()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      NoOpLog noOpLog0 = new NoOpLog();
      JexlUberspect.ResolverStrategy jexlUberspect_ResolverStrategy0 = JexlUberspect.MAP_STRATEGY;
      Uberspect uberspect0 = new Uberspect(noOpLog0, jexlUberspect_ResolverStrategy0);
      ClassLoader classLoader0 = uberspect0.getClassLoader();
      JexlBuilder jexlBuilder1 = jexlBuilder0.loader(classLoader0);
      jexlBuilder1.loader();
}"
211,"    public JexlBuilder collectAll(final boolean flag) {
        return collectMode(flag? 1 : 0);
    }","  public void test193()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      NoOpLog noOpLog0 = new NoOpLog();
      JexlUberspect.ResolverStrategy jexlUberspect_ResolverStrategy0 = JexlUberspect.MAP_STRATEGY;
      Uberspect uberspect0 = new Uberspect(noOpLog0, jexlUberspect_ResolverStrategy0);
      ClassLoader classLoader0 = uberspect0.getClassLoader();
      JexlBuilder jexlBuilder1 = jexlBuilder0.loader(classLoader0);
      jexlBuilder1.loader();
}"
212,"    public JexlBuilder cacheThreshold(final int length) {
        this.cacheThreshold = length > 0? length : CACHE_THRESHOLD;
        return this;
    }","  public void test194()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      NoOpLog noOpLog0 = new NoOpLog();
      JexlUberspect.ResolverStrategy jexlUberspect_ResolverStrategy0 = JexlUberspect.MAP_STRATEGY;
      Uberspect uberspect0 = new Uberspect(noOpLog0, jexlUberspect_ResolverStrategy0);
      ClassLoader classLoader0 = uberspect0.getClassLoader();
      JexlBuilder jexlBuilder1 = jexlBuilder0.loader(classLoader0);
      jexlBuilder1.loader();
}"
213,"    public JexlBuilder stackOverflow(final int size) {
        this.stackOverflow = size;
        return this;
    }","  public void test195()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
}"
214,"    public JexlBuilder cacheThreshold(final int length) {
        this.cacheThreshold = length > 0? length : CACHE_THRESHOLD;
        return this;
    }","  public void test196()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlBuilder jexlBuilder1 = jexlBuilder0.stackOverflow(0);
      jexlBuilder1.lexicalShade(false);
}"
215,"    public JexlBuilder lexicalShade(final boolean flag) {
        options.setLexicalShade(flag);
        return this;
    }","  public void test197()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.stackOverflow((-3688));
      jexlBuilder0.lexicalShade(true);
}"
216,"    public JexlBuilder collectMode(final int mode) {
        this.collectMode = mode;
        return this;
    }","  public void test198()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.collectMode((-617));
      jexlBuilder0.lexicalShade(true);
}"
217,"    public JexlBuilder collectAll(final boolean flag) {
        return collectMode(flag? 1 : 0);
    }","  public void test199()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
}"
218,"    public JexlBuilder collectAll(final boolean flag) {
        return collectMode(flag? 1 : 0);
    }","  public void test200()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.collectAll(false);
      jexlBuilder0.lexicalShade(false);
}"
219,"    public JexlBuilder cache(final int size) {
        this.cache = size;
        return this;
    }","  public void test201()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
}"
220,"    public JexlBuilder cache(final int size) {
        this.cache = size;
        return this;
    }","  public void test202()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlBuilder jexlBuilder1 = jexlBuilder0.cache(0);
      jexlBuilder1.lexicalShade(false);
}"
221,"    public JexlBuilder cache(final int size) {
        this.cache = size;
        return this;
    }","  public void test203()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
}"
222,"    public JexlBuilder cache(final int size) {
        this.cache = size;
        return this;
    }","  public void test204()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.cache(1);
      jexlBuilder0.lexicalShade(false);
}"
223,"    public JexlBuilder antish(final boolean flag) {
        options.setAntish(flag);
        return this;
    }","  public void test205()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlBuilder jexlBuilder1 = jexlBuilder0.antish(false);
      jexlBuilder1.lexicalShade(false);
}"
224,"    public JexlBuilder lexical(final boolean flag) {
        options.setLexical(flag);
        return this;
    }","  public void test206()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlBuilder jexlBuilder1 = jexlBuilder0.lexicalShade(true);
      boolean boolean0 = jexlBuilder1.lexicalShade();
}"
225,"    public JexlBuilder lexicalShade(final boolean flag) {
        options.setLexicalShade(flag);
        return this;
    }","  public void test207()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlBuilder jexlBuilder1 = jexlBuilder0.lexicalShade(true);
      boolean boolean0 = jexlBuilder1.lexicalShade();
}"
226,"    public JexlBuilder lexical(final boolean flag) {
        options.setLexical(flag);
        return this;
    }","  public void test208()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.stackOverflow(0);
      jexlBuilder0.lexical(true);
}"
227,"    public JexlBuilder lexical(final boolean flag) {
        options.setLexical(flag);
        return this;
    }","  public void test209()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlBuilder jexlBuilder1 = jexlBuilder0.stackOverflow((-303));
      jexlBuilder1.lexical(true);
}"
228,"    public JexlBuilder lexical(final boolean flag) {
        options.setLexical(flag);
        return this;
    }","  public void test210()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.lexicalShade(true);
      jexlBuilder0.lexical(true);
}"
229,"    public JexlBuilder collectMode(final int mode) {
        this.collectMode = mode;
        return this;
    }","  public void test211()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlBuilder jexlBuilder1 = jexlBuilder0.collectMode((-1005));
      jexlBuilder1.lexical(true);
}"
230,"    public JexlBuilder cacheThreshold(final int length) {
        this.cacheThreshold = length > 0? length : CACHE_THRESHOLD;
        return this;
    }","  public void test212()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlBuilder jexlBuilder1 = jexlBuilder0.collectMode((-1005));
      jexlBuilder1.lexical(true);
}"
231,"    public JexlBuilder collectAll(final boolean flag) {
        return collectMode(flag? 1 : 0);
    }","  public void test213()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
}"
232,"    public JexlBuilder collectMode(final int mode) {
        this.collectMode = mode;
        return this;
    }","  public void test214()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.collectAll(false);
      jexlBuilder0.lexical(false);
}"
233,"    public JexlBuilder cache(final int size) {
        this.cache = size;
        return this;
    }","  public void test215()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
}"
234,"    public JexlBuilder cache(final int size) {
        this.cache = size;
        return this;
    }","  public void test216()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.cache(0);
      jexlBuilder0.lexical(false);
}"
235,"    public JexlBuilder cache(final int size) {
        this.cache = size;
        return this;
    }","  public void test217()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.cache(25);
      jexlBuilder0.lexical(false);
}"
236,"    public JexlBuilder antish(final boolean flag) {
        options.setAntish(flag);
        return this;
    }","  public void test218()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlBuilder jexlBuilder1 = jexlBuilder0.antish(false);
      jexlBuilder1.lexical(false);
}"
237,"    public JexlBuilder cache(final int size) {
        this.cache = size;
        return this;
    }","  public void test219()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlBuilder jexlBuilder1 = jexlBuilder0.antish(false);
      jexlBuilder1.lexical(false);
}"
238,"    public JexlBuilder stackOverflow(final int size) {
        this.stackOverflow = size;
        return this;
    }","  public void test220()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
}"
239,"    public JexlBuilder cache(final int size) {
        this.cache = size;
        return this;
    }","  public void test221()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlBuilder jexlBuilder1 = jexlBuilder0.stackOverflow(0);
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlBuilder1.features(jexlFeatures0);
}"
240,"    public JexlBuilder stackOverflow(final int size) {
        this.stackOverflow = size;
        return this;
    }","  public void test222()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlFeatures jexlFeatures0 = JexlEngine.DEFAULT_FEATURES;
      jexlBuilder0.stackOverflow((-3688));
      jexlBuilder0.features(jexlFeatures0);
}"
241,"    public JexlBuilder collectMode(final int mode) {
        this.collectMode = mode;
        return this;
    }","  public void test223()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlBuilder jexlBuilder1 = jexlBuilder0.collectMode((-3044));
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlBuilder1.features(jexlFeatures0);
}"
242,"    public JexlBuilder cacheThreshold(final int length) {
        this.cacheThreshold = length > 0? length : CACHE_THRESHOLD;
        return this;
    }","  public void test224()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlBuilder jexlBuilder1 = jexlBuilder0.collectMode((-3044));
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlBuilder1.features(jexlFeatures0);
}"
243,"    public JexlBuilder collectMode(final int mode) {
        this.collectMode = mode;
        return this;
    }","  public void test225()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
}"
244,"    public JexlBuilder collectMode(final int mode) {
        this.collectMode = mode;
        return this;
    }","  public void test226()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.collectAll(false);
      jexlBuilder0.features((JexlFeatures) null);
}"
245,"    public JexlBuilder cache(final int size) {
        this.cache = size;
        return this;
    }","  public void test227()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
}"
246,"    public JexlBuilder cache(final int size) {
        this.cache = size;
        return this;
    }","  public void test228()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.cache(0);
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlBuilder0.features(jexlFeatures0);
}"
247,"    public JexlBuilder cache(final int size) {
        this.cache = size;
        return this;
    }","  public void test229()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlFeatures jexlFeatures0 = JexlEngine.DEFAULT_FEATURES;
      jexlBuilder0.cache(8);
      jexlBuilder0.features(jexlFeatures0);
}"
248,"    public JexlBuilder antish(final boolean flag) {
        options.setAntish(flag);
        return this;
    }","  public void test230()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlBuilder jexlBuilder1 = jexlBuilder0.antish(false);
      jexlBuilder1.features((JexlFeatures) null);
}"
249,"    public JexlBuilder cache(final int size) {
        this.cache = size;
        return this;
    }","  public void test231()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlFeatures jexlFeatures0 = JexlEngine.DEFAULT_FEATURES;
      jexlBuilder0.features(jexlFeatures0);
      jexlFeatures0.structuredLiteral(false);
      jexlBuilder0.features();
}"
250,"    public JexlBuilder lexical(final boolean flag) {
        options.setLexical(flag);
        return this;
    }","  public void test232()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlFeatures jexlFeatures0 = JexlEngine.DEFAULT_FEATURES;
      jexlBuilder0.features(jexlFeatures0);
      jexlFeatures0.structuredLiteral(false);
      jexlBuilder0.features();
}"
251,"    public JexlBuilder collectMode(final int mode) {
        this.collectMode = mode;
        return this;
    }","  public void test233()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlFeatures jexlFeatures0 = JexlEngine.DEFAULT_FEATURES;
      jexlBuilder0.features(jexlFeatures0);
      jexlFeatures0.structuredLiteral(false);
      jexlBuilder0.features();
}"
252,"    public JexlBuilder cacheThreshold(final int length) {
        this.cacheThreshold = length > 0? length : CACHE_THRESHOLD;
        return this;
    }","  public void test234()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlFeatures jexlFeatures0 = JexlEngine.DEFAULT_FEATURES;
      jexlBuilder0.features(jexlFeatures0);
      jexlFeatures0.structuredLiteral(false);
      jexlBuilder0.features();
}"
253,"    public JexlBuilder stackOverflow(final int size) {
        this.stackOverflow = size;
        return this;
    }","  public void test235()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlFeatures jexlFeatures0 = JexlEngine.DEFAULT_FEATURES;
      jexlBuilder0.features(jexlFeatures0);
      jexlFeatures0.structuredLiteral(false);
      jexlBuilder0.features();
}"
254,"    public JexlBuilder cache(final int size) {
        this.cache = size;
        return this;
    }","  public void test236()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      JexlBuilder jexlBuilder1 = jexlBuilder0.features(jexlFeatures0);
      jexlFeatures0.sideEffectGlobal(false);
      jexlBuilder1.features();
}"
255,"    public JexlBuilder lexical(final boolean flag) {
        options.setLexical(flag);
        return this;
    }","  public void test237()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      JexlBuilder jexlBuilder1 = jexlBuilder0.features(jexlFeatures0);
      jexlFeatures0.sideEffectGlobal(false);
      jexlBuilder1.features();
}"
256,"    public JexlBuilder collectMode(final int mode) {
        this.collectMode = mode;
        return this;
    }","  public void test238()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      JexlBuilder jexlBuilder1 = jexlBuilder0.features(jexlFeatures0);
      jexlFeatures0.sideEffectGlobal(false);
      jexlBuilder1.features();
}"
257,"    public JexlBuilder cacheThreshold(final int length) {
        this.cacheThreshold = length > 0? length : CACHE_THRESHOLD;
        return this;
    }","  public void test239()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      JexlBuilder jexlBuilder1 = jexlBuilder0.features(jexlFeatures0);
      jexlFeatures0.sideEffectGlobal(false);
      jexlBuilder1.features();
}"
258,"    public JexlBuilder stackOverflow(final int size) {
        this.stackOverflow = size;
        return this;
    }","  public void test240()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      JexlBuilder jexlBuilder1 = jexlBuilder0.features(jexlFeatures0);
      jexlFeatures0.sideEffectGlobal(false);
      jexlBuilder1.features();
}"
259,"    public JexlBuilder stackOverflow(final int size) {
        this.stackOverflow = size;
        return this;
    }","  public void test241()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlFeatures jexlFeatures0 = JexlEngine.DEFAULT_FEATURES;
      JexlBuilder jexlBuilder1 = jexlBuilder0.features(jexlFeatures0);
      jexlFeatures0.newInstance(false);
      jexlBuilder1.features();
}"
260,"    public JexlBuilder cacheThreshold(final int length) {
        this.cacheThreshold = length > 0? length : CACHE_THRESHOLD;
        return this;
    }","  public void test242()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlFeatures jexlFeatures0 = JexlEngine.DEFAULT_FEATURES;
      JexlBuilder jexlBuilder1 = jexlBuilder0.features(jexlFeatures0);
      jexlFeatures0.newInstance(false);
      jexlBuilder1.features();
}"
261,"    public JexlBuilder cache(final int size) {
        this.cache = size;
        return this;
    }","  public void test243()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlFeatures jexlFeatures0 = JexlEngine.DEFAULT_FEATURES;
      JexlBuilder jexlBuilder1 = jexlBuilder0.features(jexlFeatures0);
      jexlFeatures0.newInstance(false);
      jexlBuilder1.features();
}"
262,"    public JexlBuilder collectAll(final boolean flag) {
        return collectMode(flag? 1 : 0);
    }","  public void test244()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlFeatures jexlFeatures0 = JexlEngine.DEFAULT_FEATURES;
      JexlBuilder jexlBuilder1 = jexlBuilder0.features(jexlFeatures0);
      jexlFeatures0.newInstance(false);
      jexlBuilder1.features();
}"
263,"    public JexlBuilder lexical(final boolean flag) {
        options.setLexical(flag);
        return this;
    }","  public void test245()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlFeatures jexlFeatures0 = JexlEngine.DEFAULT_FEATURES;
      JexlBuilder jexlBuilder1 = jexlBuilder0.features(jexlFeatures0);
      jexlFeatures0.newInstance(false);
      jexlBuilder1.features();
}"
264,"    public JexlBuilder stackOverflow(final int size) {
        this.stackOverflow = size;
        return this;
    }","  public void test246()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlFeatures jexlFeatures0 = JexlEngine.DEFAULT_FEATURES;
      jexlBuilder0.features(jexlFeatures0);
      jexlFeatures0.lambda(false);
      jexlBuilder0.features();
}"
265,"    public JexlBuilder cache(final int size) {
        this.cache = size;
        return this;
    }","  public void test247()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlFeatures jexlFeatures0 = JexlEngine.DEFAULT_FEATURES;
      jexlBuilder0.features(jexlFeatures0);
      jexlFeatures0.lambda(false);
      jexlBuilder0.features();
}"
266,"    public JexlBuilder lexical(final boolean flag) {
        options.setLexical(flag);
        return this;
    }","  public void test248()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlFeatures jexlFeatures0 = JexlEngine.DEFAULT_FEATURES;
      jexlBuilder0.features(jexlFeatures0);
      jexlFeatures0.lambda(false);
      jexlBuilder0.features();
}"
267,"    public JexlBuilder cacheThreshold(final int length) {
        this.cacheThreshold = length > 0? length : CACHE_THRESHOLD;
        return this;
    }","  public void test249()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlFeatures jexlFeatures0 = JexlEngine.DEFAULT_FEATURES;
      jexlBuilder0.features(jexlFeatures0);
      jexlFeatures0.lambda(false);
      jexlBuilder0.features();
}"
268,"    public JexlBuilder collectAll(final boolean flag) {
        return collectMode(flag? 1 : 0);
    }","  public void test250()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlFeatures jexlFeatures0 = JexlEngine.DEFAULT_FEATURES;
      jexlBuilder0.features(jexlFeatures0);
      jexlFeatures0.lambda(false);
      jexlBuilder0.features();
}"
269,"    public JexlBuilder stackOverflow(final int size) {
        this.stackOverflow = size;
        return this;
    }","  public void test251()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlFeatures jexlFeatures0 = JexlEngine.DEFAULT_FEATURES;
      jexlFeatures0.script(false);
      JexlBuilder jexlBuilder1 = jexlBuilder0.features(jexlFeatures0);
      jexlBuilder1.features();
}"
270,"    public JexlBuilder cacheThreshold(final int length) {
        this.cacheThreshold = length > 0? length : CACHE_THRESHOLD;
        return this;
    }","  public void test252()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlFeatures jexlFeatures0 = JexlEngine.DEFAULT_FEATURES;
      jexlFeatures0.script(false);
      JexlBuilder jexlBuilder1 = jexlBuilder0.features(jexlFeatures0);
      jexlBuilder1.features();
}"
271,"    public JexlBuilder cache(final int size) {
        this.cache = size;
        return this;
    }","  public void test253()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlFeatures jexlFeatures0 = JexlEngine.DEFAULT_FEATURES;
      jexlFeatures0.script(false);
      JexlBuilder jexlBuilder1 = jexlBuilder0.features(jexlFeatures0);
      jexlBuilder1.features();
}"
272,"    public JexlBuilder collectAll(final boolean flag) {
        return collectMode(flag? 1 : 0);
    }","  public void test254()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlFeatures jexlFeatures0 = JexlEngine.DEFAULT_FEATURES;
      jexlFeatures0.script(false);
      JexlBuilder jexlBuilder1 = jexlBuilder0.features(jexlFeatures0);
      jexlBuilder1.features();
}"
273,"    public JexlBuilder lexical(final boolean flag) {
        options.setLexical(flag);
        return this;
    }","  public void test255()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlFeatures jexlFeatures0 = JexlEngine.DEFAULT_FEATURES;
      jexlFeatures0.script(false);
      JexlBuilder jexlBuilder1 = jexlBuilder0.features(jexlFeatures0);
      jexlBuilder1.features();
}"
274,"    public JexlBuilder cache(final int size) {
        this.cache = size;
        return this;
    }","  public void test256()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlFeatures jexlFeatures0 = JexlEngine.DEFAULT_FEATURES;
      jexlFeatures0.arrayReferenceExpr(false);
      jexlBuilder0.features(jexlFeatures0);
      jexlBuilder0.features();
}"
275,"    public JexlBuilder stackOverflow(final int size) {
        this.stackOverflow = size;
        return this;
    }","  public void test257()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlFeatures jexlFeatures0 = JexlEngine.DEFAULT_FEATURES;
      jexlFeatures0.arrayReferenceExpr(false);
      jexlBuilder0.features(jexlFeatures0);
      jexlBuilder0.features();
}"
276,"    public JexlBuilder cacheThreshold(final int length) {
        this.cacheThreshold = length > 0? length : CACHE_THRESHOLD;
        return this;
    }","  public void test258()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlFeatures jexlFeatures0 = JexlEngine.DEFAULT_FEATURES;
      jexlFeatures0.arrayReferenceExpr(false);
      jexlBuilder0.features(jexlFeatures0);
      jexlBuilder0.features();
}"
277,"    public JexlBuilder lexical(final boolean flag) {
        options.setLexical(flag);
        return this;
    }","  public void test259()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlFeatures jexlFeatures0 = JexlEngine.DEFAULT_FEATURES;
      jexlFeatures0.arrayReferenceExpr(false);
      jexlBuilder0.features(jexlFeatures0);
      jexlBuilder0.features();
}"
278,"    public JexlBuilder collectMode(final int mode) {
        this.collectMode = mode;
        return this;
    }","  public void test260()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlFeatures jexlFeatures0 = JexlEngine.DEFAULT_FEATURES;
      jexlFeatures0.arrayReferenceExpr(false);
      jexlBuilder0.features(jexlFeatures0);
      jexlBuilder0.features();
}"
279,"    public JexlBuilder lexical(final boolean flag) {
        options.setLexical(flag);
        return this;
    }","  public void test261()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlFeatures jexlFeatures0 = JexlEngine.DEFAULT_FEATURES;
      jexlFeatures0.lexicalShade(true);
      JexlBuilder jexlBuilder1 = jexlBuilder0.features(jexlFeatures0);
      jexlBuilder1.features();
}"
280,"    public JexlBuilder stackOverflow(final int size) {
        this.stackOverflow = size;
        return this;
    }","  public void test262()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlFeatures jexlFeatures0 = JexlEngine.DEFAULT_FEATURES;
      jexlFeatures0.lexicalShade(true);
      JexlBuilder jexlBuilder1 = jexlBuilder0.features(jexlFeatures0);
      jexlBuilder1.features();
}"
281,"    public JexlBuilder stackOverflow(final int size) {
        this.stackOverflow = size;
        return this;
    }","  public void test263()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
}"
282,"    public JexlBuilder cache(final int size) {
        this.cache = size;
        return this;
    }","  public void test264()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.stackOverflow(0);
      jexlBuilder0.debug(true);
}"
283,"    public JexlBuilder stackOverflow(final int size) {
        this.stackOverflow = size;
        return this;
    }","  public void test265()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.stackOverflow((-696));
      jexlBuilder0.debug(true);
}"
284,"    public JexlBuilder lexicalShade(final boolean flag) {
        options.setLexicalShade(flag);
        return this;
    }","  public void test266()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.lexicalShade(true);
      jexlBuilder0.debug(false);
}"
285,"    public JexlBuilder collectMode(final int mode) {
        this.collectMode = mode;
        return this;
    }","  public void test267()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlBuilder jexlBuilder1 = jexlBuilder0.collectMode((-177));
      jexlBuilder1.debug(false);
}"
286,"    public JexlBuilder debug(final boolean flag) {
        this.debug = flag;
        return this;
    }","  public void test268()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlBuilder jexlBuilder1 = jexlBuilder0.collectMode((-177));
      jexlBuilder1.debug(false);
}"
287,"    public JexlBuilder collectMode(final int mode) {
        this.collectMode = mode;
        return this;
    }","  public void test269()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
}"
288,"    public JexlBuilder collectMode(final int mode) {
        this.collectMode = mode;
        return this;
    }","  public void test270()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.collectAll(false);
      jexlBuilder0.debug(false);
}"
289,"    public JexlBuilder cache(final int size) {
        this.cache = size;
        return this;
    }","  public void test271()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
}"
290,"    public JexlBuilder cache(final int size) {
        this.cache = size;
        return this;
    }","  public void test272()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlBuilder jexlBuilder1 = jexlBuilder0.cache(0);
      jexlBuilder1.debug(false);
}"
291,"    public JexlBuilder stackOverflow(final int size) {
        this.stackOverflow = size;
        return this;
    }","  public void test273()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlBuilder jexlBuilder1 = jexlBuilder0.cache(0);
      jexlBuilder1.debug(false);
}"
292,"    public JexlBuilder cache(final int size) {
        this.cache = size;
        return this;
    }","  public void test274()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.cache(Integer.MAX_VALUE);
      jexlBuilder0.debug(false);
}"
293,"    public JexlBuilder antish(final boolean flag) {
        options.setAntish(flag);
        return this;
    }","  public void test275()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlBuilder jexlBuilder1 = jexlBuilder0.antish(false);
      jexlBuilder1.debug(false);
}"
294,"    public JexlBuilder cacheThreshold(final int length) {
        this.cacheThreshold = length > 0? length : CACHE_THRESHOLD;
        return this;
    }","  public void test276()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlBuilder jexlBuilder1 = jexlBuilder0.antish(false);
      jexlBuilder1.debug(false);
}"
295,"    public JexlBuilder cacheThreshold(final int length) {
        this.cacheThreshold = length > 0? length : CACHE_THRESHOLD;
        return this;
    }","  public void test277()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.debug(false);
      Boolean boolean0 = jexlBuilder0.debug();
}"
296,"    public JexlBuilder cache(final int size) {
        this.cache = size;
        return this;
    }","  public void test278()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.debug(false);
      Boolean boolean0 = jexlBuilder0.debug();
}"
297,"    public JexlBuilder stackOverflow(final int size) {
        this.stackOverflow = size;
        return this;
    }","  public void test279()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.debug(false);
      Boolean boolean0 = jexlBuilder0.debug();
}"
298,"    public JexlBuilder debug(final boolean flag) {
        this.debug = flag;
        return this;
    }","  public void test280()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.debug(false);
      Boolean boolean0 = jexlBuilder0.debug();
}"
299,"    public JexlBuilder collectMode(final int mode) {
        this.collectMode = mode;
        return this;
    }","  public void test281()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.debug(false);
      Boolean boolean0 = jexlBuilder0.debug();
}"
300,"    public JexlBuilder collectMode(final int mode) {
        this.collectMode = mode;
        return this;
    }","  public void test282()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.stackOverflow(0);
      jexlBuilder0.collectMode((-3911));
}"
301,"    public JexlBuilder stackOverflow(final int size) {
        this.stackOverflow = size;
        return this;
    }","  public void test283()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.stackOverflow((-303));
      jexlBuilder0.collectMode(14);
}"
302,"    public JexlBuilder cache(final int size) {
        this.cache = size;
        return this;
    }","  public void test284()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlBuilder jexlBuilder1 = jexlBuilder0.cache(0);
      jexlBuilder1.collectMode(0);
}"
303,"    public JexlBuilder collectMode(final int mode) {
        this.collectMode = mode;
        return this;
    }","  public void test285()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlBuilder jexlBuilder1 = jexlBuilder0.cache(0);
      jexlBuilder1.collectMode(0);
}"
304,"    public JexlBuilder collectMode(final int mode) {
        this.collectMode = mode;
        return this;
    }","  public void test286()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.cache(25);
      jexlBuilder0.collectMode(14);
}"
305,"    public JexlBuilder antish(final boolean flag) {
        options.setAntish(flag);
        return this;
    }","  public void test287()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlBuilder jexlBuilder1 = jexlBuilder0.antish(false);
      jexlBuilder1.collectMode(806);
}"
306,"    public JexlBuilder stackOverflow(final int size) {
        this.stackOverflow = size;
        return this;
    }","  public void test288()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlBuilder jexlBuilder1 = jexlBuilder0.antish(false);
      jexlBuilder1.collectMode(806);
}"
307,"    public JexlBuilder collectAll(final boolean flag) {
        return collectMode(flag? 1 : 0);
    }","  public void test289()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
}"
308,"    public JexlBuilder collectMode(final int mode) {
        this.collectMode = mode;
        return this;
    }","  public void test290()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.collectAll(false);
      int int0 = jexlBuilder0.collectMode();
}"
309,"    public JexlBuilder collectMode(final int mode) {
        this.collectMode = mode;
        return this;
    }","  public void test291()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.collectMode((-558));
      int int0 = jexlBuilder0.collectMode();
}"
310,"    public JexlBuilder stackOverflow(final int size) {
        this.stackOverflow = size;
        return this;
    }","  public void test292()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
}"
311,"    public JexlBuilder collectMode(final int mode) {
        this.collectMode = mode;
        return this;
    }","  public void test293()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.stackOverflow(0);
      jexlBuilder0.collectAll(true);
}"
312,"    public JexlBuilder stackOverflow(final int size) {
        this.stackOverflow = size;
        return this;
    }","  public void test294()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
}"
313,"    public JexlBuilder collectAll(final boolean flag) {
        return collectMode(flag? 1 : 0);
    }","  public void test295()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.stackOverflow((-1));
      jexlBuilder0.collectAll(true);
}"
314,"    public JexlBuilder lexical(final boolean flag) {
        options.setLexical(flag);
        return this;
    }","  public void test296()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.lexicalShade(true);
      jexlBuilder0.collectAll(true);
}"
315,"    public JexlBuilder cache(final int size) {
        this.cache = size;
        return this;
    }","  public void test297()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlBuilder jexlBuilder1 = jexlBuilder0.cache(0);
      jexlBuilder1.collectAll(false);
}"
316,"    public JexlBuilder collectMode(final int mode) {
        this.collectMode = mode;
        return this;
    }","  public void test298()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlBuilder jexlBuilder1 = jexlBuilder0.cache(0);
      jexlBuilder1.collectAll(false);
}"
317,"    public JexlBuilder cache(final int size) {
        this.cache = size;
        return this;
    }","  public void test299()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlBuilder jexlBuilder1 = jexlBuilder0.cache(1243);
      jexlBuilder1.collectAll(true);
}"
318,"    public JexlBuilder antish(final boolean flag) {
        options.setAntish(flag);
        return this;
    }","  public void test300()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.antish(false);
      jexlBuilder0.collectAll(false);
}"
319,"    public JexlBuilder stackOverflow(final int size) {
        this.stackOverflow = size;
        return this;
    }","  public void test301()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
}"
320,"    public JexlBuilder stackOverflow(final int size) {
        this.stackOverflow = size;
        return this;
    }","  public void test302()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlBuilder jexlBuilder1 = jexlBuilder0.stackOverflow(0);
      Charset charset0 = Charset.defaultCharset();
      jexlBuilder1.charset(charset0);
}"
321,"    public JexlBuilder stackOverflow(final int size) {
        this.stackOverflow = size;
        return this;
    }","  public void test303()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.stackOverflow((-303));
      Charset charset0 = Charset.defaultCharset();
      jexlBuilder0.charset(charset0);
}"
322,"    public JexlBuilder lexicalShade(final boolean flag) {
        options.setLexicalShade(flag);
        return this;
    }","  public void test304()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.lexicalShade(true);
      Charset charset0 = Charset.defaultCharset();
      jexlBuilder0.charset(charset0);
}"
323,"    public JexlBuilder collectMode(final int mode) {
        this.collectMode = mode;
        return this;
    }","  public void test305()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlBuilder jexlBuilder1 = jexlBuilder0.collectMode((-1138));
      JexlEngine jexlEngine0 = jexlBuilder0.create();
      Charset charset0 = jexlEngine0.getCharset();
      jexlBuilder1.charset(charset0);
}"
324,"    public JexlBuilder collectAll(final boolean flag) {
        return collectMode(flag? 1 : 0);
    }","  public void test306()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
}"
325,"    public JexlBuilder collectAll(final boolean flag) {
        return collectMode(flag? 1 : 0);
    }","  public void test307()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Charset charset0 = Charset.defaultCharset();
      jexlBuilder0.collectAll(false);
      jexlBuilder0.charset(charset0);
}"
326,"    public JexlBuilder cache(final int size) {
        this.cache = size;
        return this;
    }","  public void test308()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
}"
327,"    public JexlBuilder cache(final int size) {
        this.cache = size;
        return this;
    }","  public void test309()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlBuilder jexlBuilder1 = jexlBuilder0.cache(0);
      Charset charset0 = Charset.defaultCharset();
      jexlBuilder1.charset(charset0);
}"
328,"    public JexlBuilder cacheThreshold(final int length) {
        this.cacheThreshold = length > 0? length : CACHE_THRESHOLD;
        return this;
    }","  public void test310()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlBuilder jexlBuilder1 = jexlBuilder0.cache(0);
      Charset charset0 = Charset.defaultCharset();
      jexlBuilder1.charset(charset0);
}"
329,"    public JexlBuilder cache(final int size) {
        this.cache = size;
        return this;
    }","  public void test311()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlBuilder jexlBuilder1 = jexlBuilder0.cache(654);
      jexlBuilder1.charset((Charset) null);
}"
330,"    public JexlBuilder cacheThreshold(final int length) {
        this.cacheThreshold = length > 0? length : CACHE_THRESHOLD;
        return this;
    }","  public void test312()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlBuilder jexlBuilder1 = jexlBuilder0.cache(654);
      jexlBuilder1.charset((Charset) null);
}"
331,"    public JexlBuilder antish(final boolean flag) {
        options.setAntish(flag);
        return this;
    }","  public void test313()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Charset charset0 = Charset.defaultCharset();
      jexlBuilder0.antish(false);
      jexlBuilder0.charset(charset0);
}"
332,"    public JexlBuilder stackOverflow(final int size) {
        this.stackOverflow = size;
        return this;
    }","  public void test314()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlBuilder jexlBuilder1 = jexlBuilder0.charset((Charset) null);
      jexlBuilder1.charset();
}"
333,"    public JexlBuilder cacheThreshold(final int length) {
        this.cacheThreshold = length > 0? length : CACHE_THRESHOLD;
        return this;
    }","  public void test315()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlBuilder jexlBuilder1 = jexlBuilder0.charset((Charset) null);
      jexlBuilder1.charset();
}"
334,"    public JexlBuilder cache(final int size) {
        this.cache = size;
        return this;
    }","  public void test316()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlBuilder jexlBuilder1 = jexlBuilder0.charset((Charset) null);
      jexlBuilder1.charset();
}"
335,"    public JexlBuilder collectAll(final boolean flag) {
        return collectMode(flag? 1 : 0);
    }","  public void test317()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlBuilder jexlBuilder1 = jexlBuilder0.charset((Charset) null);
      jexlBuilder1.charset();
}"
336,"    public JexlBuilder stackOverflow(final int size) {
        this.stackOverflow = size;
        return this;
    }","  public void test318()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
}"
337,"    public JexlBuilder stackOverflow(final int size) {
        this.stackOverflow = size;
        return this;
    }","  public void test319()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.stackOverflow(0);
      jexlBuilder0.cancellable(true);
}"
338,"    public JexlBuilder stackOverflow(final int size) {
        this.stackOverflow = size;
        return this;
    }","  public void test320()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.stackOverflow((-303));
      jexlBuilder0.cancellable(true);
}"
339,"    public JexlBuilder lexical(final boolean flag) {
        options.setLexical(flag);
        return this;
    }","  public void test321()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.lexicalShade(true);
      jexlBuilder0.cancellable(true);
}"
340,"    public JexlBuilder collectMode(final int mode) {
        this.collectMode = mode;
        return this;
    }","  public void test322()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.collectMode((-303));
      jexlBuilder0.cancellable(true);
}"
341,"    public JexlBuilder collectAll(final boolean flag) {
        return collectMode(flag? 1 : 0);
    }","  public void test323()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
}"
342,"    public JexlBuilder collectAll(final boolean flag) {
        return collectMode(flag? 1 : 0);
    }","  public void test324()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.collectAll(false);
      jexlBuilder0.cancellable(false);
}"
343,"    public JexlBuilder cache(final int size) {
        this.cache = size;
        return this;
    }","  public void test325()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
}"
344,"    public JexlBuilder cache(final int size) {
        this.cache = size;
        return this;
    }","  public void test326()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.cache(0);
      jexlBuilder0.cancellable(true);
}"
345,"    public JexlBuilder cache(final int size) {
        this.cache = size;
        return this;
    }","  public void test327()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlBuilder jexlBuilder1 = jexlBuilder0.cache(4095);
      jexlBuilder1.cancellable(false);
}"
346,"    public JexlBuilder cacheThreshold(final int length) {
        this.cacheThreshold = length > 0? length : CACHE_THRESHOLD;
        return this;
    }","  public void test328()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlBuilder jexlBuilder1 = jexlBuilder0.cache(4095);
      jexlBuilder1.cancellable(false);
}"
347,"    public JexlBuilder antish(final boolean flag) {
        options.setAntish(flag);
        return this;
    }","  public void test329()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.antish(false);
      jexlBuilder0.cancellable(false);
}"
348,"    public JexlBuilder cancellable(final boolean flag) {
        this.cancellable = flag;
        options.setCancellable(flag);
        return this;
    }","  public void test330()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlBuilder jexlBuilder1 = jexlBuilder0.cancellable(false);
      Boolean boolean0 = jexlBuilder1.cancellable();
}"
349,"    public JexlBuilder stackOverflow(final int size) {
        this.stackOverflow = size;
        return this;
    }","  public void test331()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlBuilder jexlBuilder1 = jexlBuilder0.cancellable(false);
      Boolean boolean0 = jexlBuilder1.cancellable();
}"
350,"    public JexlBuilder cacheThreshold(final int length) {
        this.cacheThreshold = length > 0? length : CACHE_THRESHOLD;
        return this;
    }","  public void test332()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlBuilder jexlBuilder1 = jexlBuilder0.cancellable(false);
      Boolean boolean0 = jexlBuilder1.cancellable();
}"
351,"    public JexlBuilder collectAll(final boolean flag) {
        return collectMode(flag? 1 : 0);
    }","  public void test333()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlBuilder jexlBuilder1 = jexlBuilder0.cancellable(false);
      Boolean boolean0 = jexlBuilder1.cancellable();
}"
352,"    public JexlBuilder cache(final int size) {
        this.cache = size;
        return this;
    }","  public void test334()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlBuilder jexlBuilder1 = jexlBuilder0.cancellable(false);
      Boolean boolean0 = jexlBuilder1.cancellable();
}"
353,"    public JexlBuilder stackOverflow(final int size) {
        this.stackOverflow = size;
        return this;
    }","  public void test335()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
}"
354,"    public JexlBuilder cacheThreshold(final int length) {
        this.cacheThreshold = length > 0? length : CACHE_THRESHOLD;
        return this;
    }","  public void test336()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlBuilder jexlBuilder1 = jexlBuilder0.stackOverflow(0);
      jexlBuilder1.cacheThreshold((-5169));
}"
355,"    public JexlBuilder stackOverflow(final int size) {
        this.stackOverflow = size;
        return this;
    }","  public void test337()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.stackOverflow((-696));
      jexlBuilder0.cacheThreshold(6);
}"
356,"    public JexlBuilder cacheThreshold(final int length) {
        this.cacheThreshold = length > 0? length : CACHE_THRESHOLD;
        return this;
    }","  public void test338()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlBuilder jexlBuilder1 = jexlBuilder0.lexicalShade(true);
      jexlBuilder1.cacheThreshold(14);
}"
357,"    public JexlBuilder collectMode(final int mode) {
        this.collectMode = mode;
        return this;
    }","  public void test339()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.collectMode((-515));
      jexlBuilder0.cacheThreshold(14);
}"
358,"    public JexlBuilder cacheThreshold(final int length) {
        this.cacheThreshold = length > 0? length : CACHE_THRESHOLD;
        return this;
    }","  public void test340()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.collectAll(false);
      jexlBuilder0.cacheThreshold(10);
}"
359,"    public JexlBuilder cache(final int size) {
        this.cache = size;
        return this;
    }","  public void test341()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
}"
360,"    public JexlBuilder cache(final int size) {
        this.cache = size;
        return this;
    }","  public void test342()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlBuilder jexlBuilder1 = jexlBuilder0.cache(0);
      jexlBuilder1.cacheThreshold((-3659));
}"
361,"    public JexlBuilder cacheThreshold(final int length) {
        this.cacheThreshold = length > 0? length : CACHE_THRESHOLD;
        return this;
    }","  public void test343()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlBuilder jexlBuilder1 = jexlBuilder0.cache(0);
      jexlBuilder1.cacheThreshold((-3659));
}"
362,"    public JexlBuilder cache(final int size) {
        this.cache = size;
        return this;
    }","  public void test344()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.cache(25);
      jexlBuilder0.cacheThreshold(14);
}"
363,"    public JexlBuilder antish(final boolean flag) {
        options.setAntish(flag);
        return this;
    }","  public void test345()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlBuilder jexlBuilder1 = jexlBuilder0.antish(false);
      jexlBuilder1.cacheThreshold(10);
}"
364,"    public JexlBuilder cacheThreshold(final int length) {
        this.cacheThreshold = length > 0? length : CACHE_THRESHOLD;
        return this;
    }","  public void test346()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlBuilder jexlBuilder1 = jexlBuilder0.antish(false);
      jexlBuilder1.cacheThreshold(10);
}"
365,"    public JexlBuilder cache(final int size) {
        this.cache = size;
        return this;
    }","  public void test347()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.stackOverflow(0);
      jexlBuilder0.cache((-484));
}"
366,"    public JexlBuilder cache(final int size) {
        this.cache = size;
        return this;
    }","  public void test348()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.stackOverflow((-303));
      jexlBuilder0.cache(25);
}"
367,"    public JexlBuilder cache(final int size) {
        this.cache = size;
        return this;
    }","  public void test349()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.lexicalShade(true);
      jexlBuilder0.cache(25);
}"
368,"    public JexlBuilder collectMode(final int mode) {
        this.collectMode = mode;
        return this;
    }","  public void test350()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.collectMode((-303));
      jexlBuilder0.cache((-303));
}"
369,"    public JexlBuilder collectMode(final int mode) {
        this.collectMode = mode;
        return this;
    }","  public void test351()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.collectMode(0);
      jexlBuilder0.cache(0);
}"
370,"    public JexlBuilder cache(final int size) {
        this.cache = size;
        return this;
    }","  public void test352()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.collectMode(0);
      jexlBuilder0.cache(0);
}"
371,"    public JexlBuilder antish(final boolean flag) {
        options.setAntish(flag);
        return this;
    }","  public void test353()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.antish(false);
      jexlBuilder0.cache((-4717));
}"
372,"    public JexlBuilder cache(final int size) {
        this.cache = size;
        return this;
    }","  public void test354()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
}"
373,"    public JexlBuilder cache(final int size) {
        this.cache = size;
        return this;
    }","  public void test355()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.cache(0);
      int int0 = jexlBuilder0.cache();
}"
374,"    public JexlBuilder cache(final int size) {
        this.cache = size;
        return this;
    }","  public void test356()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlBuilder jexlBuilder1 = jexlBuilder0.cache(Integer.MAX_VALUE);
      int int0 = jexlBuilder1.cache();
}"
375,"    public JexlBuilder stackOverflow(final int size) {
        this.stackOverflow = size;
        return this;
    }","  public void test357()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
}"
376,"    public JexlBuilder cacheThreshold(final int length) {
        this.cacheThreshold = length > 0? length : CACHE_THRESHOLD;
        return this;
    }","  public void test358()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlBuilder jexlBuilder1 = jexlBuilder0.stackOverflow(0);
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true);
      jexlBuilder1.arithmetic(jexlArithmetic0);
}"
377,"    public JexlBuilder stackOverflow(final int size) {
        this.stackOverflow = size;
        return this;
    }","  public void test359()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.stackOverflow((-2));
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true);
      jexlBuilder0.arithmetic(jexlArithmetic0);
}"
378,"    public JexlBuilder lexical(final boolean flag) {
        options.setLexical(flag);
        return this;
    }","  public void test360()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlBuilder jexlBuilder1 = jexlBuilder0.lexicalShade(true);
      MathContext mathContext0 = MathContext.DECIMAL32;
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true, mathContext0, (-697));
      jexlBuilder1.arithmetic(jexlArithmetic0);
}"
379,"    public JexlBuilder cache(final int size) {
        this.cache = size;
        return this;
    }","  public void test361()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlBuilder jexlBuilder1 = jexlBuilder0.lexicalShade(true);
      MathContext mathContext0 = MathContext.DECIMAL32;
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true, mathContext0, (-697));
      jexlBuilder1.arithmetic(jexlArithmetic0);
}"
380,"    public JexlBuilder collectMode(final int mode) {
        this.collectMode = mode;
        return this;
    }","  public void test362()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlBuilder jexlBuilder1 = jexlBuilder0.collectMode((-1138));
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true);
      jexlBuilder1.arithmetic(jexlArithmetic0);
}"
381,"    public JexlBuilder collectMode(final int mode) {
        this.collectMode = mode;
        return this;
    }","  public void test363()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
}"
382,"    public JexlBuilder collectAll(final boolean flag) {
        return collectMode(flag? 1 : 0);
    }","  public void test364()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      jexlBuilder0.collectAll(false);
      jexlBuilder0.arithmetic(jexlArithmetic0);
}"
383,"    public JexlBuilder cache(final int size) {
        this.cache = size;
        return this;
    }","  public void test365()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
}"
384,"    public JexlBuilder cache(final int size) {
        this.cache = size;
        return this;
    }","  public void test366()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlBuilder jexlBuilder1 = jexlBuilder0.cache(0);
      MathContext mathContext0 = MathContext.UNLIMITED;
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false, mathContext0, 37);
      jexlBuilder1.arithmetic(jexlArithmetic0);
}"
385,"    public JexlBuilder cacheThreshold(final int length) {
        this.cacheThreshold = length > 0? length : CACHE_THRESHOLD;
        return this;
    }","  public void test367()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlBuilder jexlBuilder1 = jexlBuilder0.cache(0);
      MathContext mathContext0 = MathContext.UNLIMITED;
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false, mathContext0, 37);
      jexlBuilder1.arithmetic(jexlArithmetic0);
}"
386,"    public JexlBuilder cache(final int size) {
        this.cache = size;
        return this;
    }","  public void test368()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlBuilder jexlBuilder1 = jexlBuilder0.cache(1243);
      MathContext mathContext0 = MathContext.DECIMAL64;
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false, mathContext0, 1243);
      jexlBuilder1.arithmetic(jexlArithmetic0);
}"
387,"    public JexlBuilder antish(final boolean flag) {
        options.setAntish(flag);
        return this;
    }","  public void test369()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlEngine jexlEngine0 = jexlBuilder0.create();
      jexlBuilder0.antish(false);
      JexlArithmetic jexlArithmetic0 = jexlEngine0.getArithmetic();
      jexlBuilder0.arithmetic(jexlArithmetic0);
}"
388,"    public JexlBuilder cacheThreshold(final int length) {
        this.cacheThreshold = length > 0? length : CACHE_THRESHOLD;
        return this;
    }","  public void test370()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlEngine jexlEngine0 = jexlBuilder0.create();
      JexlArithmetic jexlArithmetic0 = jexlEngine0.getArithmetic();
      jexlBuilder0.arithmetic(jexlArithmetic0);
      jexlBuilder0.arithmetic();
}"
389,"    public JexlBuilder cache(final int size) {
        this.cache = size;
        return this;
    }","  public void test371()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlEngine jexlEngine0 = jexlBuilder0.create();
      JexlArithmetic jexlArithmetic0 = jexlEngine0.getArithmetic();
      jexlBuilder0.arithmetic(jexlArithmetic0);
      jexlBuilder0.arithmetic();
}"
390,"    public JexlBuilder stackOverflow(final int size) {
        this.stackOverflow = size;
        return this;
    }","  public void test372()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlEngine jexlEngine0 = jexlBuilder0.create();
      JexlArithmetic jexlArithmetic0 = jexlEngine0.getArithmetic();
      jexlBuilder0.arithmetic(jexlArithmetic0);
      jexlBuilder0.arithmetic();
}"
391,"    public JexlBuilder collectMode(final int mode) {
        this.collectMode = mode;
        return this;
    }","  public void test373()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlEngine jexlEngine0 = jexlBuilder0.create();
      JexlArithmetic jexlArithmetic0 = jexlEngine0.getArithmetic();
      jexlBuilder0.arithmetic(jexlArithmetic0);
      jexlBuilder0.arithmetic();
}"
392,"    public JexlBuilder cacheThreshold(final int length) {
        this.cacheThreshold = length > 0? length : CACHE_THRESHOLD;
        return this;
    }","  public void test374()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      MathContext mathContext0 = MathContext.DECIMAL64;
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false, mathContext0, 1243);
      jexlBuilder0.arithmetic(jexlArithmetic0);
      jexlBuilder0.arithmetic();
}"
393,"    public JexlBuilder cache(final int size) {
        this.cache = size;
        return this;
    }","  public void test375()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      MathContext mathContext0 = MathContext.DECIMAL64;
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false, mathContext0, 1243);
      jexlBuilder0.arithmetic(jexlArithmetic0);
      jexlBuilder0.arithmetic();
}"
394,"    public JexlBuilder collectAll(final boolean flag) {
        return collectMode(flag? 1 : 0);
    }","  public void test376()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      MathContext mathContext0 = MathContext.DECIMAL64;
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false, mathContext0, 1243);
      jexlBuilder0.arithmetic(jexlArithmetic0);
      jexlBuilder0.arithmetic();
}"
395,"    public JexlBuilder stackOverflow(final int size) {
        this.stackOverflow = size;
        return this;
    }","  public void test377()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      MathContext mathContext0 = MathContext.DECIMAL64;
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false, mathContext0, 1243);
      jexlBuilder0.arithmetic(jexlArithmetic0);
      jexlBuilder0.arithmetic();
}"
396,"    public JexlBuilder stackOverflow(final int size) {
        this.stackOverflow = size;
        return this;
    }","  public void test378()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
}"
397,"    public JexlBuilder cacheThreshold(final int length) {
        this.cacheThreshold = length > 0? length : CACHE_THRESHOLD;
        return this;
    }","  public void test379()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.stackOverflow(0);
      jexlBuilder0.antish(true);
}"
398,"    public JexlBuilder stackOverflow(final int size) {
        this.stackOverflow = size;
        return this;
    }","  public void test380()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.stackOverflow((-303));
      jexlBuilder0.antish(true);
}"
399,"    public JexlBuilder lexicalShade(final boolean flag) {
        options.setLexicalShade(flag);
        return this;
    }","  public void test381()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlBuilder jexlBuilder1 = jexlBuilder0.lexicalShade(true);
      jexlBuilder1.antish(true);
}"
400,"    public JexlBuilder antish(final boolean flag) {
        options.setAntish(flag);
        return this;
    }","  public void test382()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlBuilder jexlBuilder1 = jexlBuilder0.lexicalShade(true);
      jexlBuilder1.antish(true);
}"
401,"    public JexlBuilder collectMode(final int mode) {
        this.collectMode = mode;
        return this;
    }","  public void test383()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.collectMode((-303));
      jexlBuilder0.antish(true);
}"
402,"    public JexlBuilder antish(final boolean flag) {
        options.setAntish(flag);
        return this;
    }","  public void test384()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlBuilder jexlBuilder1 = jexlBuilder0.collectAll(false);
      jexlBuilder1.antish(false);
}"
403,"    public JexlBuilder cache(final int size) {
        this.cache = size;
        return this;
    }","  public void test385()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
}"
404,"    public JexlBuilder cache(final int size) {
        this.cache = size;
        return this;
    }","  public void test386()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.cache(0);
      jexlBuilder0.antish(true);
}"
405,"    public JexlBuilder cache(final int size) {
        this.cache = size;
        return this;
    }","  public void test387()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.cache(1243);
      jexlBuilder0.antish(true);
}"
406,"    public JexlBuilder arithmetic(final JexlArithmetic a) {
        this.arithmetic = a;
        options.setStrictArithmetic(a.isStrict());
        options.setMathContext(a.getMathContext());
        options.setMathScale(a.getMathScale());
        return this;
    }","  public void test388()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      // Undeclared exception!
      try { 
        jexlBuilder0.arithmetic((JexlArithmetic) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.JexlBuilder"", e);
      }
  }"
407,"    public JexlBuilder cacheThreshold(final int length) {
        this.cacheThreshold = length > 0? length : CACHE_THRESHOLD;
        return this;
    }","  public void test389()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.loader();
}"
408,"    public JexlBuilder stackOverflow(final int size) {
        this.stackOverflow = size;
        return this;
    }","  public void test390()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.loader();
}"
409,"    public JexlBuilder cache(final int size) {
        this.cache = size;
        return this;
    }","  public void test391()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.loader();
}"
410,"    public JexlBuilder collectMode(final int mode) {
        this.collectMode = mode;
        return this;
    }","  public void test392()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.loader();
}"
411,"    public JexlBuilder cache(final int size) {
        this.cache = size;
        return this;
    }","  public void test393()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      int int0 = jexlBuilder0.cache();
}"
412,"    public JexlBuilder collectAll(final boolean flag) {
        return collectMode(flag? 1 : 0);
    }","  public void test394()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      int int0 = jexlBuilder0.cache();
}"
413,"    public JexlBuilder stackOverflow(final int size) {
        this.stackOverflow = size;
        return this;
    }","  public void test395()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      int int0 = jexlBuilder0.cache();
}"
414,"    public JexlBuilder cacheThreshold(final int length) {
        this.cacheThreshold = length > 0? length : CACHE_THRESHOLD;
        return this;
    }","  public void test396()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      int int0 = jexlBuilder0.cache();
}"
415,"    public JexlBuilder cache(final int size) {
        this.cache = size;
        return this;
    }","  public void test397()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      int int0 = jexlBuilder0.cacheThreshold();
}"
416,"    public JexlBuilder stackOverflow(final int size) {
        this.stackOverflow = size;
        return this;
    }","  public void test398()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      int int0 = jexlBuilder0.cacheThreshold();
}"
417,"    public JexlBuilder cacheThreshold(final int length) {
        this.cacheThreshold = length > 0? length : CACHE_THRESHOLD;
        return this;
    }","  public void test399()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      int int0 = jexlBuilder0.cacheThreshold();
}"
418,"    public JexlBuilder collectAll(final boolean flag) {
        return collectMode(flag? 1 : 0);
    }","  public void test400()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      int int0 = jexlBuilder0.cacheThreshold();
}"
419,"    public JexlBuilder cacheThreshold(final int length) {
        this.cacheThreshold = length > 0? length : CACHE_THRESHOLD;
        return this;
    }","  public void test401()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.features();
}"
420,"    public JexlBuilder stackOverflow(final int size) {
        this.stackOverflow = size;
        return this;
    }","  public void test402()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.features();
}"
421,"    public JexlBuilder collectMode(final int mode) {
        this.collectMode = mode;
        return this;
    }","  public void test403()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.features();
}"
422,"    public JexlBuilder cache(final int size) {
        this.cache = size;
        return this;
    }","  public void test404()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.features();
}"
423,"    public JexlBuilder cacheThreshold(final int length) {
        this.cacheThreshold = length > 0? length : CACHE_THRESHOLD;
        return this;
    }","  public void test405()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      int int0 = jexlBuilder0.collectMode();
}"
424,"    public JexlBuilder stackOverflow(final int size) {
        this.stackOverflow = size;
        return this;
    }","  public void test406()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      int int0 = jexlBuilder0.collectMode();
}"
425,"    public JexlBuilder cache(final int size) {
        this.cache = size;
        return this;
    }","  public void test407()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      int int0 = jexlBuilder0.collectMode();
}"
426,"    public JexlBuilder collectMode(final int mode) {
        this.collectMode = mode;
        return this;
    }","  public void test408()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      int int0 = jexlBuilder0.collectMode();
}"
427,"    public JexlBuilder cache(final int size) {
        this.cache = size;
        return this;
    }","  public void test409()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.strategy();
}"
428,"    public JexlBuilder collectMode(final int mode) {
        this.collectMode = mode;
        return this;
    }","  public void test410()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.strategy();
}"
429,"    public JexlBuilder stackOverflow(final int size) {
        this.stackOverflow = size;
        return this;
    }","  public void test411()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.strategy();
}"
430,"    public JexlBuilder cacheThreshold(final int length) {
        this.cacheThreshold = length > 0? length : CACHE_THRESHOLD;
        return this;
    }","  public void test412()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.strategy();
}"
431,"    public JexlBuilder stackOverflow(final int size) {
        this.stackOverflow = size;
        return this;
    }","  public void test413()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.logger();
}"
432,"    public JexlBuilder collectAll(final boolean flag) {
        return collectMode(flag? 1 : 0);
    }","  public void test414()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.logger();
}"
433,"    public JexlBuilder cache(final int size) {
        this.cache = size;
        return this;
    }","  public void test415()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.logger();
}"
434,"    public JexlBuilder cacheThreshold(final int length) {
        this.cacheThreshold = length > 0? length : CACHE_THRESHOLD;
        return this;
    }","  public void test416()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.logger();
}"
435,"    public JexlBuilder stackOverflow(final int size) {
        this.stackOverflow = size;
        return this;
    }","  public void test417()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      int int0 = jexlBuilder0.stackOverflow();
}"
436,"    public JexlBuilder cacheThreshold(final int length) {
        this.cacheThreshold = length > 0? length : CACHE_THRESHOLD;
        return this;
    }","  public void test418()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      int int0 = jexlBuilder0.stackOverflow();
}"
437,"    public JexlBuilder collectAll(final boolean flag) {
        return collectMode(flag? 1 : 0);
    }","  public void test419()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      int int0 = jexlBuilder0.stackOverflow();
}"
438,"    public JexlBuilder cache(final int size) {
        this.cache = size;
        return this;
    }","  public void test420()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      int int0 = jexlBuilder0.stackOverflow();
}"
439,"    public JexlBuilder cache(final int size) {
        this.cache = size;
        return this;
    }","  public void test421()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.uberspect();
}"
440,"    public JexlBuilder cacheThreshold(final int length) {
        this.cacheThreshold = length > 0? length : CACHE_THRESHOLD;
        return this;
    }","  public void test422()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.uberspect();
}"
441,"    public JexlBuilder stackOverflow(final int size) {
        this.stackOverflow = size;
        return this;
    }","  public void test423()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.uberspect();
}"
442,"    public JexlBuilder collectAll(final boolean flag) {
        return collectMode(flag? 1 : 0);
    }","  public void test424()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.uberspect();
}"
443,"    public JexlBuilder stackOverflow(final int size) {
        this.stackOverflow = size;
        return this;
    }","  public void test425()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.sandbox();
}"
444,"    public JexlBuilder cacheThreshold(final int length) {
        this.cacheThreshold = length > 0? length : CACHE_THRESHOLD;
        return this;
    }","  public void test426()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.sandbox();
}"
445,"    public JexlBuilder collectAll(final boolean flag) {
        return collectMode(flag? 1 : 0);
    }","  public void test427()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.sandbox();
}"
446,"    public JexlBuilder cache(final int size) {
        this.cache = size;
        return this;
    }","  public void test428()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.sandbox();
}"
447,"    public JexlBuilder collectMode(final int mode) {
        this.collectMode = mode;
        return this;
    }","  public void test429()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.collectMode((-13));
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      jexlBuilder0.loader(classLoader0);
}"
448,"    public JexlBuilder stackOverflow(final int size) {
        this.stackOverflow = size;
        return this;
    }","  public void test430()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.debug();
}"
449,"    public JexlBuilder cacheThreshold(final int length) {
        this.cacheThreshold = length > 0? length : CACHE_THRESHOLD;
        return this;
    }","  public void test431()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.debug();
}"
450,"    public JexlBuilder cache(final int size) {
        this.cache = size;
        return this;
    }","  public void test432()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.debug();
}"
451,"    public JexlBuilder collectAll(final boolean flag) {
        return collectMode(flag? 1 : 0);
    }","  public void test433()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.debug();
}"
452,"    public JexlBuilder cache(final int size) {
        this.cache = size;
        return this;
    }","  public void test434()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.arithmetic();
}"
453,"    public JexlBuilder cacheThreshold(final int length) {
        this.cacheThreshold = length > 0? length : CACHE_THRESHOLD;
        return this;
    }","  public void test435()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.arithmetic();
}"
454,"    public JexlBuilder stackOverflow(final int size) {
        this.stackOverflow = size;
        return this;
    }","  public void test436()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.arithmetic();
}"
455,"    public JexlBuilder collectMode(final int mode) {
        this.collectMode = mode;
        return this;
    }","  public void test437()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.arithmetic();
}"
456,"    public JexlBuilder collectAll(final boolean flag) {
        return collectMode(flag? 1 : 0);
    }","  public void test438()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.cancellable();
}"
457,"    public JexlBuilder stackOverflow(final int size) {
        this.stackOverflow = size;
        return this;
    }","  public void test439()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.cancellable();
}"
458,"    public JexlBuilder cacheThreshold(final int length) {
        this.cacheThreshold = length > 0? length : CACHE_THRESHOLD;
        return this;
    }","  public void test440()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.cancellable();
}"
459,"    public JexlBuilder cache(final int size) {
        this.cache = size;
        return this;
    }","  public void test441()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.cancellable();
}"
460,"    public JexlBuilder cache(final int size) {
        this.cache = size;
        return this;
    }","  public void test442()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      boolean boolean0 = jexlBuilder0.collectAll();
}"
461,"    public JexlBuilder collectAll(final boolean flag) {
        return collectMode(flag? 1 : 0);
    }","  public void test443()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      boolean boolean0 = jexlBuilder0.collectAll();
}"
462,"    public JexlBuilder stackOverflow(final int size) {
        this.stackOverflow = size;
        return this;
    }","  public void test444()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      boolean boolean0 = jexlBuilder0.collectAll();
}"
463,"    public JexlBuilder cacheThreshold(final int length) {
        this.cacheThreshold = length > 0? length : CACHE_THRESHOLD;
        return this;
    }","  public void test445()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      boolean boolean0 = jexlBuilder0.collectAll();
}"
464,"    public JexlBuilder lexical(final boolean flag) {
        options.setLexical(flag);
        return this;
    }","  public void test446()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlFeatures jexlFeatures0 = JexlEngine.DEFAULT_FEATURES;
      jexlFeatures0.lexicalShade(true);
      jexlBuilder0.features(jexlFeatures0);
      jexlBuilder0.collectMode(14);
}"
465,"    public JexlBuilder cacheThreshold(final int length) {
        this.cacheThreshold = length > 0? length : CACHE_THRESHOLD;
        return this;
    }","  public void test447()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlBuilder jexlBuilder1 = jexlBuilder0.cancellable(true);
      Boolean boolean0 = jexlBuilder1.cancellable();
}"
466,"    public JexlBuilder stackOverflow(final int size) {
        this.stackOverflow = size;
        return this;
    }","  public void test448()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlBuilder jexlBuilder1 = jexlBuilder0.cancellable(true);
      Boolean boolean0 = jexlBuilder1.cancellable();
}"
467,"    public JexlBuilder cache(final int size) {
        this.cache = size;
        return this;
    }","  public void test449()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlBuilder jexlBuilder1 = jexlBuilder0.cancellable(true);
      Boolean boolean0 = jexlBuilder1.cancellable();
}"
468,"    public JexlBuilder cancellable(final boolean flag) {
        this.cancellable = flag;
        options.setCancellable(flag);
        return this;
    }","  public void test450()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlBuilder jexlBuilder1 = jexlBuilder0.cancellable(true);
      Boolean boolean0 = jexlBuilder1.cancellable();
}"
469,"    public JexlBuilder collectMode(final int mode) {
        this.collectMode = mode;
        return this;
    }","  public void test451()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlBuilder jexlBuilder1 = jexlBuilder0.cancellable(true);
      Boolean boolean0 = jexlBuilder1.cancellable();
}"
470,"    public JexlBuilder cache(final int size) {
        this.cache = size;
        return this;
    }","  public void test452()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.debug(true);
      Boolean boolean0 = jexlBuilder0.debug();
}"
471,"    public JexlBuilder stackOverflow(final int size) {
        this.stackOverflow = size;
        return this;
    }","  public void test453()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.debug(true);
      Boolean boolean0 = jexlBuilder0.debug();
}"
472,"    public JexlBuilder cacheThreshold(final int length) {
        this.cacheThreshold = length > 0? length : CACHE_THRESHOLD;
        return this;
    }","  public void test454()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.debug(true);
      Boolean boolean0 = jexlBuilder0.debug();
}"
473,"    public JexlBuilder debug(final boolean flag) {
        this.debug = flag;
        return this;
    }","  public void test455()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.debug(true);
      Boolean boolean0 = jexlBuilder0.debug();
}"
474,"    public JexlBuilder collectMode(final int mode) {
        this.collectMode = mode;
        return this;
    }","  public void test456()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.debug(true);
      Boolean boolean0 = jexlBuilder0.debug();
}"
475,"    public JexlBuilder cacheThreshold(final int length) {
        this.cacheThreshold = length > 0? length : CACHE_THRESHOLD;
        return this;
    }","  public void test457()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.antish();
}"
476,"    public JexlBuilder stackOverflow(final int size) {
        this.stackOverflow = size;
        return this;
    }","  public void test458()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.antish();
}"
477,"    public JexlBuilder collectMode(final int mode) {
        this.collectMode = mode;
        return this;
    }","  public void test459()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.antish();
}"
478,"    public JexlBuilder cache(final int size) {
        this.cache = size;
        return this;
    }","  public void test460()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.antish();
}"
479,"    public JexlBuilder cacheThreshold(final int length) {
        this.cacheThreshold = length > 0? length : CACHE_THRESHOLD;
        return this;
    }","  public void test461()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlSandbox jexlSandbox0 = new JexlSandbox();
      jexlBuilder0.sandbox(jexlSandbox0);
      jexlBuilder0.sandbox();
}"
480,"    public JexlBuilder cache(final int size) {
        this.cache = size;
        return this;
    }","  public void test462()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlSandbox jexlSandbox0 = new JexlSandbox();
      jexlBuilder0.sandbox(jexlSandbox0);
      jexlBuilder0.sandbox();
}"
481,"    public JexlBuilder collectMode(final int mode) {
        this.collectMode = mode;
        return this;
    }","  public void test463()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlSandbox jexlSandbox0 = new JexlSandbox();
      jexlBuilder0.sandbox(jexlSandbox0);
      jexlBuilder0.sandbox();
}"
482,"    public JexlBuilder stackOverflow(final int size) {
        this.stackOverflow = size;
        return this;
    }","  public void test464()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlSandbox jexlSandbox0 = new JexlSandbox();
      jexlBuilder0.sandbox(jexlSandbox0);
      jexlBuilder0.sandbox();
}"
483,"    public JexlBuilder antish(final boolean flag) {
        options.setAntish(flag);
        return this;
    }","  public void test465()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.antish(false);
      boolean boolean0 = jexlBuilder0.antish();
}"
484,"    public JexlBuilder cacheThreshold(final int length) {
        this.cacheThreshold = length > 0? length : CACHE_THRESHOLD;
        return this;
    }","  public void test466()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.strict();
}"
485,"    public JexlBuilder stackOverflow(final int size) {
        this.stackOverflow = size;
        return this;
    }","  public void test467()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.strict();
}"
486,"    public JexlBuilder collectAll(final boolean flag) {
        return collectMode(flag? 1 : 0);
    }","  public void test468()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.strict();
}"
487,"    public JexlBuilder cache(final int size) {
        this.cache = size;
        return this;
    }","  public void test469()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.strict();
}"
488,"    public JexlBuilder stackOverflow(final int size) {
        this.stackOverflow = size;
        return this;
    }","  public void test470()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.lexicalShade();
}"
489,"    public JexlBuilder cacheThreshold(final int length) {
        this.cacheThreshold = length > 0? length : CACHE_THRESHOLD;
        return this;
    }","  public void test471()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.lexicalShade();
}"
490,"    public JexlBuilder cache(final int size) {
        this.cache = size;
        return this;
    }","  public void test472()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.lexicalShade();
}"
491,"    public JexlBuilder collectAll(final boolean flag) {
        return collectMode(flag? 1 : 0);
    }","  public void test473()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.lexicalShade();
}"
492,"    public JexlBuilder collectMode(final int mode) {
        this.collectMode = mode;
        return this;
    }","  public void test474()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
}"
493,"    public JexlBuilder collectMode(final int mode) {
        this.collectMode = mode;
        return this;
    }","  public void test475()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.collectAll(false);
      boolean boolean0 = jexlBuilder0.collectAll();
}"
494,"    public JexlBuilder collectAll(final boolean flag) {
        return collectMode(flag? 1 : 0);
    }","  public void test476()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.collectAll(false);
      boolean boolean0 = jexlBuilder0.collectAll();
}"
495,"    public JexlBuilder cacheThreshold(final int length) {
        this.cacheThreshold = length > 0? length : CACHE_THRESHOLD;
        return this;
    }","  public void test477()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.silent();
}"
496,"    public JexlBuilder stackOverflow(final int size) {
        this.stackOverflow = size;
        return this;
    }","  public void test478()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.silent();
}"
497,"    public JexlBuilder collectAll(final boolean flag) {
        return collectMode(flag? 1 : 0);
    }","  public void test479()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.silent();
}"
498,"    public JexlBuilder cache(final int size) {
        this.cache = size;
        return this;
    }","  public void test480()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.silent();
}"
499,"    public JexlBuilder cacheThreshold(final int length) {
        this.cacheThreshold = length > 0? length : CACHE_THRESHOLD;
        return this;
    }","  public void test481()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.safe();
}"
500,"    public JexlBuilder collectMode(final int mode) {
        this.collectMode = mode;
        return this;
    }","  public void test482()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.safe();
}"
501,"    public JexlBuilder stackOverflow(final int size) {
        this.stackOverflow = size;
        return this;
    }","  public void test483()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.safe();
}"
502,"    public JexlBuilder cache(final int size) {
        this.cache = size;
        return this;
    }","  public void test484()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.safe();
}"
503,"    public JexlBuilder lexical(final boolean flag) {
        options.setLexical(flag);
        return this;
    }","  public void test485()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.lexical(true);
      boolean boolean0 = jexlBuilder0.lexical();
}"
504,"    public JexlBuilder cache(final int size) {
        this.cache = size;
        return this;
    }","  public void test486()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlEngine jexlEngine0 = jexlBuilder0.create();
      JexlUberspect jexlUberspect0 = jexlEngine0.getUberspect();
      jexlBuilder0.uberspect(jexlUberspect0);
      jexlBuilder0.uberspect();
}"
505,"    public JexlBuilder cacheThreshold(final int length) {
        this.cacheThreshold = length > 0? length : CACHE_THRESHOLD;
        return this;
    }","  public void test487()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlEngine jexlEngine0 = jexlBuilder0.create();
      JexlUberspect jexlUberspect0 = jexlEngine0.getUberspect();
      jexlBuilder0.uberspect(jexlUberspect0);
      jexlBuilder0.uberspect();
}"
506,"    public JexlBuilder collectMode(final int mode) {
        this.collectMode = mode;
        return this;
    }","  public void test488()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlEngine jexlEngine0 = jexlBuilder0.create();
      JexlUberspect jexlUberspect0 = jexlEngine0.getUberspect();
      jexlBuilder0.uberspect(jexlUberspect0);
      jexlBuilder0.uberspect();
}"
507,"    public JexlBuilder stackOverflow(final int size) {
        this.stackOverflow = size;
        return this;
    }","  public void test489()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlEngine jexlEngine0 = jexlBuilder0.create();
      JexlUberspect jexlUberspect0 = jexlEngine0.getUberspect();
      jexlBuilder0.uberspect(jexlUberspect0);
      jexlBuilder0.uberspect();
}"
508,"    public JexlBuilder stackOverflow(final int size) {
        this.stackOverflow = size;
        return this;
    }","  public void test490()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.lexical();
}"
509,"    public JexlBuilder cacheThreshold(final int length) {
        this.cacheThreshold = length > 0? length : CACHE_THRESHOLD;
        return this;
    }","  public void test491()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.lexical();
}"
510,"    public JexlBuilder collectMode(final int mode) {
        this.collectMode = mode;
        return this;
    }","  public void test492()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.lexical();
}"
511,"    public JexlBuilder cache(final int size) {
        this.cache = size;
        return this;
    }","  public void test493()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.lexical();
}"
512,"    public JexlBuilder safe(final boolean flag) {
        options.setSafe(flag);
        return this;
    }","  public void test494()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.safe(false);
      jexlBuilder0.options();
}"
513,"    protected static String toString(final BufferedReader reader) throws IOException {
        final StringBuilder buffer = new StringBuilder();
        String line;
        while ((line = reader.readLine()) != null) {
            buffer.append(line).append('\n');
        }
        return buffer.toString();
    }","  public void test0()  throws Throwable  {
      // Undeclared exception!
      try { 
        JexlEngine.toString((BufferedReader) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.JexlEngine"", e);
      }
  }"
514,"    protected static String toString(final BufferedReader reader) throws IOException {
        final StringBuilder buffer = new StringBuilder();
        String line;
        while ((line = reader.readLine()) != null) {
            buffer.append(line).append('\n');
        }
        return buffer.toString();
    }","  public void test1()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""Fps4/r0"");
      BufferedReader bufferedReader0 = new BufferedReader(stringReader0);
      bufferedReader0.close();
      try { 
        JexlEngine.toString(bufferedReader0);
        fail(""Expecting exception: IOException"");
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException(""java.io.BufferedReader"", e);
      }
  }"
515,"    protected static String toString(final BufferedReader reader) throws IOException {
        final StringBuilder buffer = new StringBuilder();
        String line;
        while ((line = reader.readLine()) != null) {
            buffer.append(line).append('\n');
        }
        return buffer.toString();
    }","  public void test2()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""Fps4/r0"");
      BufferedReader bufferedReader0 = new BufferedReader(stringReader0);
      JexlEngine.toString(bufferedReader0);
      String string0 = JexlEngine.toString(bufferedReader0);
}"
516,,"  public void test3()  throws Throwable  {
      JexlEngine.EmptyContext jexlEngine_EmptyContext0 = (JexlEngine.EmptyContext)JexlEngine.EMPTY_CONTEXT;
      Object object0 = jexlEngine_EmptyContext0.get((String) null);
}"
517,,"  public void test4()  throws Throwable  {
      JexlEngine.EmptyContext jexlEngine_EmptyContext0 = (JexlEngine.EmptyContext)JexlEngine.EMPTY_CONTEXT;
      // Undeclared exception!
      try { 
        jexlEngine_EmptyContext0.set(""Y"", ""Y"");
        fail(""Expecting exception: UnsupportedOperationException"");
      } catch(UnsupportedOperationException e) {
         //
         // Not supported in void context.
         //
         verifyException(""org.apache.commons.jexl3.JexlEngine$EmptyContext"", e);
      }
  }"
518,,"  public void test5()  throws Throwable  {
      JexlEngine.EmptyContext jexlEngine_EmptyContext0 = (JexlEngine.EmptyContext)JexlEngine.EMPTY_CONTEXT;
      boolean boolean0 = jexlEngine_EmptyContext0.has(""source URL is null"");
}"
519,"    public static JexlContext.ThreadLocal getThreadContext() {
        return CONTEXT.get();
    }","  public void test6()  throws Throwable  {
      JexlContext.ThreadLocal jexlContext_ThreadLocal0 = JexlEngine.getThreadContext();
}"
520,"    public static void setThreadContext(final JexlContext.ThreadLocal tls) {
        CONTEXT.set(tls);
    }","  public void test7()  throws Throwable  {
      JexlEngine.setThreadContext((JexlContext.ThreadLocal) null);
  }"
521,"    public static JexlEngine getThreadEngine() {
        return ENGINE.get();
    }","  public void test8()  throws Throwable  {
      JexlEngine jexlEngine0 = JexlEngine.getThreadEngine();
}"
522,,"  public void test9()  throws Throwable  {
      JexlEngine.EmptyNamespaceResolver jexlEngine_EmptyNamespaceResolver0 = (JexlEngine.EmptyNamespaceResolver)JexlEngine.EMPTY_NS;
      Object object0 = jexlEngine_EmptyNamespaceResolver0.resolveNamespace("""");
}"
523,"    public JexlException(final JexlNode node, final String msg) {
        this(node, msg, null);
    }","  public void test0()  throws Throwable  {
      JexlInfo jexlInfo0 = new JexlInfo(""yK7@kuriW.o;q&IG@&"", (-985), 41);
      Object[] objectArray0 = new Object[7];
      JexlException.Method jexlException_Method0 = new JexlException.Method(jexlInfo0, """", objectArray0);
      String string0 = jexlException_Method0.getMethod();
}"
524,"    protected String parserError(final String prefix, final String expr) {
        final int length = expr.length();
        if (length < MAX_EXCHARLOC) {
            return prefix + "" error in '"" + expr + ""'"";
        }
        final int me = MAX_EXCHARLOC / 2;
        int begin = info.getColumn() - me;
        if (begin < 0 || length < me) {
            begin = 0;
        } else if (begin > length) {
            begin = me;
        }
        int end = begin + MAX_EXCHARLOC;
        if (end > length) {
            end = length;
        }
        return prefix + "" error near '... ""
                + expr.substring(begin, end) + "" ...'"";
    }","  public void test1()  throws Throwable  {
      JexlInfo jexlInfo0 = new JexlInfo();
      JexlException.Ambiguous jexlException_Ambiguous0 = new JexlException.Ambiguous(jexlInfo0, """");
      String string0 = jexlException_Ambiguous0.parserError(""ambiguous statement error in ''"", ""org.apache.commons.jexl3.parser2'd{54]h'O}"");
}"
525,"    public String getMessage() {
        final StringBuilder msg = new StringBuilder();
        if (info != null) {
            msg.append(info.toString());
        } else {
            msg.append(""?:"");
        }
        msg.append(' ');
        msg.append(detailedMessage());
        final Throwable cause = getCause();
        if (cause instanceof JexlArithmetic.NullOperand) {
            msg.append("" caused by null operand"");
        }
        return msg.toString();
    }","  public void test2()  throws Throwable  {
      JexlInfo jexlInfo0 = new JexlInfo(""zP> n0[]9C]<6#9="", 21, 21);
      JexlException.Ambiguous jexlException_Ambiguous0 = new JexlException.Ambiguous(jexlInfo0, ""org.apache.commons.jexl3.internalorg.apache.commons.jexl3.parsersun.reflect.GeneratedConstructorAccessor61"");
      String string0 = jexlException_Ambiguous0.getMessage();
}"
526,"    public JexlException(final JexlNode node, final String msg) {
        this(node, msg, null);
    }","  public void test3()  throws Throwable  {
      ASTBitwiseXorNode aSTBitwiseXorNode0 = new ASTBitwiseXorNode(0);
      JexlException.Variable jexlException_Variable0 = new JexlException.Variable(aSTBitwiseXorNode0, """", true);
      String string0 = jexlException_Variable0.getVariable();
}"
527,"    protected String detailedMessage() {
        Class<? extends JexlException> clazz = getClass();
        String name = clazz == JexlException.class? ""JEXL"" : clazz.getSimpleName().toLowerCase();
        return name + "" error : "" + getDetail();
    }","  public void test4()  throws Throwable  {
      Parser parser0 = new Parser(""MWUWc Zt"");
      ASTAddNode aSTAddNode0 = new ASTAddNode(parser0, 1561);
      JexlException.Variable jexlException_Variable0 = new JexlException.Variable(aSTAddNode0, ""(.GliP8?Dp"", false);
      String string0 = jexlException_Variable0.detailedMessage();
}"
528,"    protected String detailedMessage() {
        Class<? extends JexlException> clazz = getClass();
        String name = clazz == JexlException.class? ""JEXL"" : clazz.getSimpleName().toLowerCase();
        return name + "" error : "" + getDetail();
    }","  public void test5()  throws Throwable  {
      TokenMgrException tokenMgrException0 = new TokenMgrException(false, (-927), 39, 39, (String) null, (-1732), 41);
      JexlException.Tokenization jexlException_Tokenization0 = new JexlException.Tokenization((JexlInfo) null, tokenMgrException0);
      ASTSetDivNode aSTSetDivNode0 = new ASTSetDivNode(39);
      JexlException.Property jexlException_Property0 = new JexlException.Property(aSTSetDivNode0, ""continue loop"", true, jexlException_Tokenization0);
      String string0 = jexlException_Property0.detailedMessage();
}"
529,"    protected String detailedMessage() {
        Class<? extends JexlException> clazz = getClass();
        String name = clazz == JexlException.class? ""JEXL"" : clazz.getSimpleName().toLowerCase();
        return name + "" error : "" + getDetail();
    }","  public void test6()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""<evosuite>"");
      StreamProvider streamProvider0 = new StreamProvider(stringReader0);
      Parser parser0 = new Parser(streamProvider0);
      ParseException parseException0 = parser0.generateParseException();
      JexlException.Parsing jexlException_Parsing0 = new JexlException.Parsing((JexlInfo) null, parseException0);
      String string0 = jexlException_Parsing0.detailedMessage();
}"
530,"    public JexlException(final JexlNode node, final String msg) {
        this(node, msg, null);
    }","  public void test7()  throws Throwable  {
      ASTAnnotatedStatement aSTAnnotatedStatement0 = new ASTAnnotatedStatement(0);
      Object[] objectArray0 = new Object[8];
      JexlException.Method jexlException_Method0 = new JexlException.Method((JexlInfo) null, """", objectArray0);
      JexlException.Operator jexlException_Operator0 = new JexlException.Operator(aSTAnnotatedStatement0, """", jexlException_Method0);
      String string0 = jexlException_Operator0.getSymbol();
}"
531,"    public JexlException(final JexlNode node, final String msg) {
        this(node, msg, null);
    }","  public void test8()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      Parser parser0 = new Parser(""L~P"");
      ParseException parseException0 = parser0.generateParseException();
      JexlException.Method jexlException_Method0 = new JexlException.Method((JexlInfo) null, ""L~P"", objectArray0, parseException0);
      String string0 = jexlException_Method0.getMethodSignature();
}"
532,"    protected String detailedMessage() {
        Class<? extends JexlException> clazz = getClass();
        String name = clazz == JexlException.class? ""JEXL"" : clazz.getSimpleName().toLowerCase();
        return name + "" error : "" + getDetail();
    }","  public void test9()  throws Throwable  {
      JexlInfo jexlInfo0 = new JexlInfo();
      JexlException.Parsing jexlException_Parsing0 = new JexlException.Parsing(jexlInfo0, (String) null);
      Object[] objectArray0 = new Object[6];
      JexlException.Method jexlException_Method0 = new JexlException.Method(jexlInfo0, """", objectArray0, jexlException_Parsing0);
      String string0 = jexlException_Method0.detailedMessage();
}"
533,"    protected String detailedMessage() {
        Class<? extends JexlException> clazz = getClass();
        String name = clazz == JexlException.class? ""JEXL"" : clazz.getSimpleName().toLowerCase();
        return name + "" error : "" + getDetail();
    }","  public void test10()  throws Throwable  {
      ASTNSWNode aSTNSWNode0 = new ASTNSWNode((Parser) null, (-3990));
      ParseException parseException0 = new ParseException();
      JexlException.Annotation jexlException_Annotation0 = new JexlException.Annotation(aSTNSWNode0, ""org.apache.commons.jexl3.internal.InterpreterBase"", parseException0);
      String string0 = jexlException_Annotation0.detailedMessage();
}"
534,"    protected String detailedMessage() {
        Class<? extends JexlException> clazz = getClass();
        String name = clazz == JexlException.class? ""JEXL"" : clazz.getSimpleName().toLowerCase();
        return name + "" error : "" + getDetail();
    }","  public void test11()  throws Throwable  {
      JexlException.Ambiguous jexlException_Ambiguous0 = new JexlException.Ambiguous((JexlInfo) null, (JexlInfo) null, ""eC"");
      String string0 = jexlException_Ambiguous0.detailedMessage();
}"
535,"    protected JexlInfo info() {
        return info;
    }","  public void test12()  throws Throwable  {
      ASTModNode aSTModNode0 = new ASTModNode(34);
      JexlInfo jexlInfo0 = new JexlInfo(""+&5%"", (-776091546), 34);
      JexlException.Feature jexlException_Feature0 = new JexlException.Feature(jexlInfo0, (-776091546), ""source is null"");
      JexlException.Property jexlException_Property0 = new JexlException.Property(aSTModNode0, ""+&5%"", true, jexlException_Feature0);
      jexlException_Property0.info();
}"
536,"    protected JexlInfo info() {
        return info;
    }","  public void test13()  throws Throwable  {
      JexlInfo jexlInfo0 = new JexlInfo();
      TokenMgrException tokenMgrException0 = new TokenMgrException("">zk^[_6otwF( Orj"", 41);
      JexlException.Tokenization jexlException_Tokenization0 = new JexlException.Tokenization(jexlInfo0, tokenMgrException0);
      JexlInfo jexlInfo1 = jexlException_Tokenization0.info();
}"
537,"    protected JexlInfo info() {
        return info;
    }","  public void test14()  throws Throwable  {
      JexlInfo jexlInfo0 = new JexlInfo("""", 81, 81);
      JexlException.Ambiguous jexlException_Ambiguous0 = new JexlException.Ambiguous(jexlInfo0, jexlInfo0, """");
      JexlInfo jexlInfo1 = jexlException_Ambiguous0.info();
}"
538,"    protected JexlInfo info() {
        return info;
    }","  public void test15()  throws Throwable  {
      JexlInfo jexlInfo0 = new JexlInfo(""5zvOA?S("", (-83), (-83));
      JexlException.Ambiguous jexlException_Ambiguous0 = new JexlException.Ambiguous(jexlInfo0, jexlInfo0, ""4)ay;_'xD1w%666U<"");
      JexlInfo jexlInfo1 = jexlException_Ambiguous0.info();
}"
539,"    public JexlInfo getInfo() {
        return detailedInfo(mark, info);
    }","  public void test16()  throws Throwable  {
      ASTAddNode aSTAddNode0 = new ASTAddNode(2);
      JexlInfo jexlInfo0 = JexlException.getInfo((JexlNode) aSTAddNode0, (JexlInfo) null);
}"
540,"    public JexlInfo getInfo() {
        return detailedInfo(mark, info);
    }","  public void test17()  throws Throwable  {
      JexlInfo jexlInfo0 = new JexlInfo("""", 81, 81);
      JexlInfo jexlInfo1 = JexlException.getInfo((JexlNode) null, jexlInfo0);
}"
541,"    public JexlInfo getInfo() {
        return detailedInfo(mark, info);
    }","  public void test18()  throws Throwable  {
      JexlInfo jexlInfo0 = new JexlInfo(""), "", (-3037), 4432);
      ASTSetDivNode aSTSetDivNode0 = new ASTSetDivNode((Parser) null, 0);
      JexlInfo jexlInfo1 = JexlException.getInfo((JexlNode) aSTSetDivNode0, jexlInfo0);
}"
542,"    public JexlInfo getInfo() {
        return detailedInfo(mark, info);
    }","  public void test19()  throws Throwable  {
      JexlInfo jexlInfo0 = new JexlInfo(""org.apache.commons.jexl3.JexlEx"", (-1241), (-3211));
      JexlInfo jexlInfo1 = JexlException.getInfo((JexlNode) null, jexlInfo0);
}"
543,"    public JexlInfo getInfo() {
        return detailedInfo(mark, info);
    }","  public void test20()  throws Throwable  {
      ASTAddNode aSTAddNode0 = new ASTAddNode(2);
      JexlException.Cancel jexlException_Cancel0 = new JexlException.Cancel(aSTAddNode0);
      JexlInfo jexlInfo0 = jexlException_Cancel0.getInfo();
}"
544,"    public JexlInfo getInfo() {
        return detailedInfo(mark, info);
    }","  public void test21()  throws Throwable  {
      JexlInfo jexlInfo0 = new JexlInfo(""), "", (-3037), 4432);
      JexlException.Feature jexlException_Feature0 = new JexlException.Feature(jexlInfo0, 95, ""Nw.#9=|2V"");
      JexlInfo jexlInfo1 = jexlException_Feature0.getInfo();
}"
545,"    public JexlInfo getInfo() {
        return detailedInfo(mark, info);
    }","  public void test22()  throws Throwable  {
      JexlInfo jexlInfo0 = new JexlInfo(""q!;C'!yqb6kjT6}1H"", 1736, (-1187));
      JexlException.Feature jexlException_Feature0 = new JexlException.Feature(jexlInfo0, 1736, """");
      JexlInfo jexlInfo1 = jexlException_Feature0.getInfo();
}"
546,"    public final String getDetail() {
        return super.getMessage();
    }","  public void test23()  throws Throwable  {
      TokenMgrException tokenMgrException0 = new TokenMgrException(false, (-927), 39, 39, (String) null, (-1732), 41);
      JexlException.Tokenization jexlException_Tokenization0 = new JexlException.Tokenization((JexlInfo) null, tokenMgrException0);
      String string0 = jexlException_Tokenization0.getDetail();
}"
547,"    public static String variableError(final JexlNode node, final String variable, final boolean undef) {
        return variableError(node, variable, undef? VariableIssue.UNDEFINED : VariableIssue.NULLVALUE);
    }","  public void test24()  throws Throwable  {
      ASTNullpNode aSTNullpNode0 = new ASTNullpNode((Parser) null, (-48));
      StringProvider stringProvider0 = new StringProvider("""");
      Parser parser0 = new Parser(stringProvider0);
      aSTNullpNode0.jjtSetFirstToken(parser0.jj_nt);
      // Undeclared exception!
      try { 
        JexlException.variableError((JexlNode) aSTNullpNode0, """", false);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.parser.SimpleNode"", e);
      }
  }"
548,"    public static String variableError(final JexlNode node, final String variable, final boolean undef) {
        return variableError(node, variable, undef? VariableIssue.UNDEFINED : VariableIssue.NULLVALUE);
    }","  public void test25()  throws Throwable  {
      // Undeclared exception!
      try { 
        JexlException.variableError((JexlNode) null, ""D6sVhD,,lHqPM0%e+"", (JexlException.VariableIssue) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.JexlException"", e);
      }
  }"
549,"    public static JexlException tryFailed(final InvocationTargetException xinvoke) {
        final Throwable cause = xinvoke.getCause();
        return cause instanceof JexlException
                ? (JexlException) cause
                : new JexlException.TryFailed(xinvoke); // fail
    }","  public void test26()  throws Throwable  {
      // Undeclared exception!
      try { 
        JexlException.tryFailed((InvocationTargetException) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.JexlException"", e);
      }
  }"
550,"    public static String sliceSource(final String src, final int froml, final int fromc, final int tol, final int toc) {
        final BufferedReader reader = new BufferedReader(new StringReader(src));
        final StringBuilder buffer = new StringBuilder();
        String line;
        int cl = 1;
        try {
            while ((line = reader.readLine()) != null) {
                if (cl < froml || cl > tol) {
                    buffer.append(line).append('\n');
                } else {
                    if (cl == froml) {
                        buffer.append(line, 0, fromc - 1);
                    }
                    if (cl == tol) {
                        buffer.append(line.substring(toc + 1));
                    }
                } // else ignore line
                cl += 1;
            }
        } catch (final IOException xignore) {
            //damn the checked exceptions :-)
        }
        return buffer.toString();
    }","  public void test27()  throws Throwable  {
      // Undeclared exception!
      try { 
        JexlException.sliceSource((String) null, 0, 0, 0, 0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.io.StringReader"", e);
      }
  }"
551,"    public static String sliceSource(final String src, final int froml, final int fromc, final int tol, final int toc) {
        final BufferedReader reader = new BufferedReader(new StringReader(src));
        final StringBuilder buffer = new StringBuilder();
        String line;
        int cl = 1;
        try {
            while ((line = reader.readLine()) != null) {
                if (cl < froml || cl > tol) {
                    buffer.append(line).append('\n');
                } else {
                    if (cl == froml) {
                        buffer.append(line, 0, fromc - 1);
                    }
                    if (cl == tol) {
                        buffer.append(line.substring(toc + 1));
                    }
                } // else ignore line
                cl += 1;
            }
        } catch (final IOException xignore) {
            //damn the checked exceptions :-)
        }
        return buffer.toString();
    }","  public void test28()  throws Throwable  {
      // Undeclared exception!
      try { 
        JexlException.sliceSource("" -= "", 1, 1870, 1, 1);
        fail(""Expecting exception: IndexOutOfBoundsException"");
      } catch(IndexOutOfBoundsException e) {
         //
         // start 0, end 1869, s.length() 4
         //
         verifyException(""java.lang.AbstractStringBuilder"", e);
      }
  }"
552,"    public static String propertyError(final JexlNode node, final String pty, final boolean undef) {
        final StringBuilder msg = errorAt(node);
        if (undef) {
            msg.append(""unsolvable"");
        } else {
            msg.append(""null value"");
        }
        msg.append("" property '"");
        msg.append(pty);
        msg.append('\'');
        return msg.toString();
    }","  public void test29()  throws Throwable  {
      ASTTernaryNode aSTTernaryNode0 = new ASTTernaryNode(2702);
      Parser parser0 = new Parser(""org.apache.commons.jexl3.parser.ASTGENode"");
      ASTConstructorNode aSTConstructorNode0 = new ASTConstructorNode(parser0, 0);
      aSTConstructorNode0.jjtSetParent(aSTTernaryNode0);
      aSTConstructorNode0.jjtSetFirstToken(parser0.token);
      // Undeclared exception!
      try { 
        JexlException.propertyError((JexlNode) aSTConstructorNode0, ""/k`H\rrfQ{R^Y;lS"", false);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.parser.SimpleNode"", e);
      }
  }"
553,"    public static String propertyError(final JexlNode node, final String pty, final boolean undef) {
        final StringBuilder msg = errorAt(node);
        if (undef) {
            msg.append(""unsolvable"");
        } else {
            msg.append(""null value"");
        }
        msg.append("" property '"");
        msg.append(pty);
        msg.append('\'');
        return msg.toString();
    }","  public void test30()  throws Throwable  {
      ASTWhileStatement aSTWhileStatement0 = new ASTWhileStatement((Parser) null, (-2065235338));
      ASTReference aSTReference0 = new ASTReference((Parser) null, (-2065235338));
      aSTReference0.jjtSetParent(aSTWhileStatement0);
      aSTWhileStatement0.jjtSetParent(aSTReference0);
      // Undeclared exception!
      JexlException.propertyError((JexlNode) aSTWhileStatement0, ""2/"");
  }"
554,"    public static String propertyError(final JexlNode node, final String pty, final boolean undef) {
        final StringBuilder msg = errorAt(node);
        if (undef) {
            msg.append(""unsolvable"");
        } else {
            msg.append(""null value"");
        }
        msg.append("" property '"");
        msg.append(pty);
        msg.append('\'');
        return msg.toString();
    }","  public void test31()  throws Throwable  {
      ASTEmptyFunction aSTEmptyFunction0 = new ASTEmptyFunction((-464));
      StringReader stringReader0 = new StringReader(""Ap l"");
      StreamProvider streamProvider0 = new StreamProvider(stringReader0);
      Parser parser0 = new Parser(streamProvider0);
      aSTEmptyFunction0.jjtSetFirstToken(parser0.jj_nt);
      // Undeclared exception!
      try { 
        JexlException.propertyError((JexlNode) aSTEmptyFunction0, ""org.apache.commons.jexl3.internal"");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.parser.SimpleNode"", e);
      }
  }"
555,"    protected String parserError(final String prefix, final String expr) {
        final int length = expr.length();
        if (length < MAX_EXCHARLOC) {
            return prefix + "" error in '"" + expr + ""'"";
        }
        final int me = MAX_EXCHARLOC / 2;
        int begin = info.getColumn() - me;
        if (begin < 0 || length < me) {
            begin = 0;
        } else if (begin > length) {
            begin = me;
        }
        int end = begin + MAX_EXCHARLOC;
        if (end > length) {
            end = length;
        }
        return prefix + "" error near '... ""
                + expr.substring(begin, end) + "" ...'"";
    }","  public void test32()  throws Throwable  {
      ASTNEWNode aSTNEWNode0 = new ASTNEWNode(37);
      JexlException.Cancel jexlException_Cancel0 = new JexlException.Cancel(aSTNEWNode0);
      // Undeclared exception!
      try { 
        jexlException_Cancel0.parserError(""?: unsolvable function/method 'org.apache.commons.jexl3.parser.ASTJexlLambda'"", ""org.apache.commons.jexl3.parser.JexlParser"");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.JexlException"", e);
      }
  }"
556,"    public static String operatorError(final JexlNode node, final String symbol) {
        final StringBuilder msg = errorAt(node);
        msg.append(""error calling operator '"");
        msg.append(symbol);
        msg.append('\'');
        return msg.toString();
    }","  public void test33()  throws Throwable  {
      ASTTernaryNode aSTTernaryNode0 = new ASTTernaryNode(22);
      Token token0 = Token.newToken(22);
      aSTTernaryNode0.jjtSetFirstToken(token0);
      // Undeclared exception!
      try { 
        JexlException.operatorError(aSTTernaryNode0, "">="");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.parser.SimpleNode"", e);
      }
  }"
557,"    public static String methodError(final JexlNode node, final String method) {
        return methodError(node, method, null);
    }","  public void test34()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      // Undeclared exception!
      try { 
        JexlException.methodError((JexlNode) null, (String) null, objectArray0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
      }
  }"
558,"    public static String methodError(final JexlNode node, final String method) {
        return methodError(node, method, null);
    }","  public void test35()  throws Throwable  {
      Token token0 = new Token(4446, (String) null);
      ASTBitwiseComplNode aSTBitwiseComplNode0 = new ASTBitwiseComplNode((Parser) null, (-3037));
      aSTBitwiseComplNode0.jjtSetFirstToken(token0);
      // Undeclared exception!
      try { 
        JexlException.methodError((JexlNode) aSTBitwiseComplNode0, """");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.parser.SimpleNode"", e);
      }
  }"
559,"    public JexlInfo getInfo() {
        return detailedInfo(mark, info);
    }","  public void test36()  throws Throwable  {
      JexlLexicalNode jexlLexicalNode0 = new JexlLexicalNode((Parser) null, (-2067));
      JexlInfo jexlInfo0 = new JexlInfo();
      // Undeclared exception!
      try { 
        JexlException.getInfo((JexlNode) jexlLexicalNode0, jexlInfo0);
        fail(""Expecting exception: UnsupportedOperationException"");
      } catch(UnsupportedOperationException e) {
         //
         // JexlLexicalNode : not supported yet.
         //
         verifyException(""org.apache.commons.jexl3.parser.ParserVisitor"", e);
      }
  }"
560,"    public JexlInfo getInfo() {
        return detailedInfo(mark, info);
    }","  public void test37()  throws Throwable  {
      ASTEmptyFunction aSTEmptyFunction0 = new ASTEmptyFunction((Parser) null, 1568);
      JexlInfo jexlInfo0 = new JexlInfo();
      // Undeclared exception!
      try { 
        JexlException.getInfo((JexlNode) aSTEmptyFunction0, jexlInfo0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.parser.SimpleNode"", e);
      }
  }"
561,"    public JexlInfo getInfo() {
        return detailedInfo(mark, info);
    }","  public void test38()  throws Throwable  {
      ASTDoWhileStatement aSTDoWhileStatement0 = new ASTDoWhileStatement((-2068469323));
      JexlException.Continue jexlException_Continue0 = new JexlException.Continue(aSTDoWhileStatement0);
      Token token0 = new Token(40, ""org.apache.commons.jexl3.parser.ASTJexlLambda"");
      aSTDoWhileStatement0.jjtSetFirstToken(token0);
      JexlException.Property jexlException_Property0 = new JexlException.Property(aSTDoWhileStatement0, ""org.apache.commons.jexl3.internalsun.reflect.GeneratedConstructorAccessor70"", false, jexlException_Continue0);
      // Undeclared exception!
      try { 
        jexlException_Property0.getInfo();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.parser.SimpleNode"", e);
      }
  }"
562,"    protected String detailedMessage() {
        Class<? extends JexlException> clazz = getClass();
        String name = clazz == JexlException.class? ""JEXL"" : clazz.getSimpleName().toLowerCase();
        return name + "" error : "" + getDetail();
    }","  public void test39()  throws Throwable  {
      JexlException.Feature jexlException_Feature0 = new JexlException.Feature((JexlInfo) null, 2649, ""org.apache.commons.jexl3.JexlException$TryFailed"");
      // Undeclared exception!
      try { 
        jexlException_Feature0.detailedMessage();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.JexlException"", e);
      }
  }"
563,"    public static String annotationError(final JexlNode node, final String annotation) {
        final StringBuilder msg = errorAt(node);
        msg.append(""error processing annotation '"");
        msg.append(annotation);
        msg.append('\'');
        return msg.toString();
    }","  public void test40()  throws Throwable  {
      ASTSWNode aSTSWNode0 = new ASTSWNode((Parser) null, 8);
      Token token0 = Token.newToken(8, (String) null);
      aSTSWNode0.jjtSetFirstToken(token0);
      ASTGTNode aSTGTNode0 = new ASTGTNode(0);
      aSTSWNode0.jjtAddChild(aSTGTNode0, 4432);
      // Undeclared exception!
      try { 
        JexlException.annotationError(aSTSWNode0, (String) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.internal.Debugger"", e);
      }
  }"
564,"    public static String propertyError(final JexlNode node, final String pty, final boolean undef) {
        final StringBuilder msg = errorAt(node);
        if (undef) {
            msg.append(""unsolvable"");
        } else {
            msg.append(""null value"");
        }
        msg.append("" property '"");
        msg.append(pty);
        msg.append('\'');
        return msg.toString();
    }","  public void test41()  throws Throwable  {
      ASTAddNode aSTAddNode0 = new ASTAddNode(2);
      String string0 = JexlException.propertyError((JexlNode) aSTAddNode0, ""null value"", true);
}"
565,,"  public void test42()  throws Throwable  {
      JexlException.VariableIssue jexlException_VariableIssue0 = JexlException.VariableIssue.NULLVALUE;
      String string0 = jexlException_VariableIssue0.message(""ReturnStatement"");
}"
566,,"  public void test43()  throws Throwable  {
      JexlException.VariableIssue jexlException_VariableIssue0 = JexlException.VariableIssue.UNDEFINED;
      String string0 = jexlException_VariableIssue0.message(""h0]]J`"");
}"
567,,"  public void test44()  throws Throwable  {
      JexlException.VariableIssue jexlException_VariableIssue0 = JexlException.VariableIssue.REDEFINED;
      String string0 = jexlException_VariableIssue0.message(""?: error calling operator 'could not read source File'"");
}"
568,"    public static String sliceSource(final String src, final int froml, final int fromc, final int tol, final int toc) {
        final BufferedReader reader = new BufferedReader(new StringReader(src));
        final StringBuilder buffer = new StringBuilder();
        String line;
        int cl = 1;
        try {
            while ((line = reader.readLine()) != null) {
                if (cl < froml || cl > tol) {
                    buffer.append(line).append('\n');
                } else {
                    if (cl == froml) {
                        buffer.append(line, 0, fromc - 1);
                    }
                    if (cl == tol) {
                        buffer.append(line.substring(toc + 1));
                    }
                } // else ignore line
                cl += 1;
            }
        } catch (final IOException xignore) {
            //damn the checked exceptions :-)
        }
        return buffer.toString();
    }","  public void test45()  throws Throwable  {
      String string0 = JexlException.sliceSource(""?: error processing annotation ''"", 0, 0, 0, 0);
}"
569,"    public JexlException(final JexlNode node, final String msg) {
        this(node, msg, null);
    }","  public void test46()  throws Throwable  {
      JexlInfo jexlInfo0 = new JexlInfo();
      JexlException jexlException0 = new JexlException(jexlInfo0, """", (Throwable) null);
  }"
570,"    public JexlException(final JexlNode node, final String msg) {
        this(node, msg, null);
    }","  public void test47()  throws Throwable  {
      JexlInfo jexlInfo0 = new JexlInfo("""", 81, 81);
      JexlException.Ambiguous jexlException_Ambiguous0 = new JexlException.Ambiguous(jexlInfo0, jexlInfo0, """");
      JexlException jexlException0 = new JexlException((JexlNode) null, """", jexlException_Ambiguous0, true);
  }"
571,"    public JexlException(final JexlNode node, final String msg) {
        this(node, msg, null);
    }","  public void test48()  throws Throwable  {
      ASTWhileStatement aSTWhileStatement0 = new ASTWhileStatement((-1197));
      JexlException jexlException0 = new JexlException(aSTWhileStatement0, """", (Throwable) null, true);
  }"
572,"    public JexlException(final JexlNode node, final String msg) {
        this(node, msg, null);
    }","  public void test49()  throws Throwable  {
      StringProvider stringProvider0 = new StringProvider("""");
      Parser parser0 = new Parser(stringProvider0);
      ASTFalseNode aSTFalseNode0 = new ASTFalseNode(parser0, 0);
      InvocationTargetException invocationTargetException0 = new InvocationTargetException((Throwable) null);
      JexlException jexlException0 = JexlException.tryFailed(invocationTargetException0);
      MockThrowable mockThrowable0 = new MockThrowable(jexlException0);
      JexlException jexlException1 = new JexlException(aSTFalseNode0, (String) null, mockThrowable0, false);
  }"
573,"    public JexlException(final JexlNode node, final String msg) {
        this(node, msg, null);
    }","  public void test50()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable("""");
      JexlException jexlException0 = new JexlException((JexlNode) null, (String) null, mockThrowable0);
  }"
574,"    public static String methodError(final JexlNode node, final String method) {
        return methodError(node, method, null);
    }","  public void test51()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      ASTERNode aSTERNode0 = new ASTERNode(0);
      String string0 = JexlException.methodError((JexlNode) aSTERNode0, """", objectArray0);
}"
575,"    public final String getDetail() {
        return super.getMessage();
    }","  public void test52()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      MockThrowable mockThrowable0 = new MockThrowable();
      JexlException.Method jexlException_Method0 = new JexlException.Method((JexlInfo) null, ""H[KW7</OP"", objectArray0, mockThrowable0);
      String string0 = jexlException_Method0.getDetail();
}"
576,"    public JexlException(final JexlNode node, final String msg) {
        this(node, msg, null);
    }","  public void test53()  throws Throwable  {
      JexlLexicalNode jexlLexicalNode0 = new JexlLexicalNode((Parser) null, (-2067));
      JexlException jexlException0 = new JexlException(jexlLexicalNode0, ""?: error calling operator '?: unsolvable function/method '(ASTAssignment, FileSystemHandling, Object, FileSystemHandling, FileSystemHandling)''"");
  }"
577,"    public String getMessage() {
        final StringBuilder msg = new StringBuilder();
        if (info != null) {
            msg.append(info.toString());
        } else {
            msg.append(""?:"");
        }
        msg.append(' ');
        msg.append(detailedMessage());
        final Throwable cause = getCause();
        if (cause instanceof JexlArithmetic.NullOperand) {
            msg.append("" caused by null operand"");
        }
        return msg.toString();
    }","  public void test54()  throws Throwable  {
      JexlInfo jexlInfo0 = new JexlInfo();
      JexlArithmetic.NullOperand jexlArithmetic_NullOperand0 = new JexlArithmetic.NullOperand();
      JexlException.StackOverflow jexlException_StackOverflow0 = new JexlException.StackOverflow(jexlInfo0, ""org.apache.commons.jexl3.internalsun.reflect.GeneratedConstructorAccessor60"", jexlArithmetic_NullOperand0);
      String string0 = jexlException_StackOverflow0.getMessage();
}"
578,"    public static JexlException tryFailed(final InvocationTargetException xinvoke) {
        final Throwable cause = xinvoke.getCause();
        return cause instanceof JexlException
                ? (JexlException) cause
                : new JexlException.TryFailed(xinvoke); // fail
    }","  public void test55()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      JexlException.Method jexlException_Method0 = new JexlException.Method((JexlInfo) null, ""d"", objectArray0);
      InvocationTargetException invocationTargetException0 = new InvocationTargetException(jexlException_Method0, ""d"");
      JexlException jexlException0 = JexlException.tryFailed(invocationTargetException0);
}"
579,"    public JexlException(final JexlNode node, final String msg) {
        this(node, msg, null);
    }","  public void test56()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      objectArray0[1] = (Object) ""d"";
      JexlException.Method jexlException_Method0 = new JexlException.Method((JexlInfo) null, ""d"", objectArray0);
  }"
580,"    public JexlException(final JexlNode node, final String msg) {
        this(node, msg, null);
    }","  public void test57()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      JexlException.Method jexlException_Method0 = new JexlException.Method((JexlNode) null, ""?: unsolvable property '@81:81 error near '... Ac' ...''"", objectArray0);
      String string0 = jexlException_Method0.getMethod();
}"
581,"    public JexlException(final JexlNode node, final String msg) {
        this(node, msg, null);
    }","  public void test58()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      JexlException.Method jexlException_Method0 = new JexlException.Method((JexlNode) null, ""?: variable 'D6sVhD,,lHqPM0%e+' is undefined"", objectArray0);
      String string0 = jexlException_Method0.getMethod();
}"
582,"    public static String propertyError(final JexlNode node, final String pty, final boolean undef) {
        final StringBuilder msg = errorAt(node);
        if (undef) {
            msg.append(""unsolvable"");
        } else {
            msg.append(""null value"");
        }
        msg.append("" property '"");
        msg.append(pty);
        msg.append('\'');
        return msg.toString();
    }","  public void test59()  throws Throwable  {
      String string0 = JexlException.propertyError((JexlNode) null, ""D6sVhD,,lHqPM0%e+"", false);
}"
583,"    protected String detailedMessage() {
        Class<? extends JexlException> clazz = getClass();
        String name = clazz == JexlException.class? ""JEXL"" : clazz.getSimpleName().toLowerCase();
        return name + "" error : "" + getDetail();
    }","  public void test60()  throws Throwable  {
      ASTForeachStatement aSTForeachStatement0 = new ASTForeachStatement((Parser) null, (-1));
      Parser parser0 = new Parser(""\""}\"""");
      ParseException parseException0 = parser0.generateParseException();
      JexlException.Property jexlException_Property0 = new JexlException.Property(aSTForeachStatement0, ""\""}\"""", false, parseException0);
      String string0 = jexlException_Property0.detailedMessage();
}"
584,"    public static String variableError(final JexlNode node, final String variable, final boolean undef) {
        return variableError(node, variable, undef? VariableIssue.UNDEFINED : VariableIssue.NULLVALUE);
    }","  public void test61()  throws Throwable  {
      String string0 = JexlException.variableError((JexlNode) null, ""variable 'ReturnStatement' is already defined"", true);
}"
585,"    public JexlException(final JexlNode node, final String msg) {
        this(node, msg, null);
    }","  public void test62()  throws Throwable  {
      JexlException.VariableIssue jexlException_VariableIssue0 = JexlException.VariableIssue.REDEFINED;
      ASTERNode aSTERNode0 = new ASTERNode(0);
      JexlException.Variable jexlException_Variable0 = new JexlException.Variable(aSTERNode0, ""?: error processing annotation ''\n"", jexlException_VariableIssue0);
      boolean boolean0 = jexlException_Variable0.isUndefined();
}"
586,"    public JexlException(final JexlNode node, final String msg) {
        this(node, msg, null);
    }","  public void test63()  throws Throwable  {
      StringProvider stringProvider0 = new StringProvider(""assignment error in 'HITN4JTc%}{J%P==F#'"");
      Parser parser0 = new Parser(stringProvider0);
      ASTBitwiseAndNode aSTBitwiseAndNode0 = new ASTBitwiseAndNode(parser0, (-1190));
      JexlException.Variable jexlException_Variable0 = new JexlException.Variable(aSTBitwiseAndNode0, ""assignment error in 'HITN4JTc%}{J%P==F#'"", true);
      boolean boolean0 = jexlException_Variable0.isUndefined();
}"
587,"    public static String variableError(final JexlNode node, final String variable, final boolean undef) {
        return variableError(node, variable, undef? VariableIssue.UNDEFINED : VariableIssue.NULLVALUE);
    }","  public void test64()  throws Throwable  {
      ASTAnnotatedStatement aSTAnnotatedStatement0 = new ASTAnnotatedStatement(0);
      JexlException.VariableIssue jexlException_VariableIssue0 = JexlException.VariableIssue.REDEFINED;
      String string0 = JexlException.variableError((JexlNode) aSTAnnotatedStatement0, ""d"", jexlException_VariableIssue0);
}"
588,"    public static String sliceSource(final String src, final int froml, final int fromc, final int tol, final int toc) {
        final BufferedReader reader = new BufferedReader(new StringReader(src));
        final StringBuilder buffer = new StringBuilder();
        String line;
        int cl = 1;
        try {
            while ((line = reader.readLine()) != null) {
                if (cl < froml || cl > tol) {
                    buffer.append(line).append('\n');
                } else {
                    if (cl == froml) {
                        buffer.append(line, 0, fromc - 1);
                    }
                    if (cl == tol) {
                        buffer.append(line.substring(toc + 1));
                    }
                } // else ignore line
                cl += 1;
            }
        } catch (final IOException xignore) {
            //damn the checked exceptions :-)
        }
        return buffer.toString();
    }","  public void test65()  throws Throwable  {
      String string0 = JexlException.sliceSource(""ReturnStatement"", (-95), (-95), 2147483645, (-1885));
}"
589,"    public static String sliceSource(final String src, final int froml, final int fromc, final int tol, final int toc) {
        final BufferedReader reader = new BufferedReader(new StringReader(src));
        final StringBuilder buffer = new StringBuilder();
        String line;
        int cl = 1;
        try {
            while ((line = reader.readLine()) != null) {
                if (cl < froml || cl > tol) {
                    buffer.append(line).append('\n');
                } else {
                    if (cl == froml) {
                        buffer.append(line, 0, fromc - 1);
                    }
                    if (cl == tol) {
                        buffer.append(line.substring(toc + 1));
                    }
                } // else ignore line
                cl += 1;
            }
        } catch (final IOException xignore) {
            //damn the checked exceptions :-)
        }
        return buffer.toString();
    }","  public void test66()  throws Throwable  {
      String string0 = JexlException.sliceSource("",Z#B6;w.'&"", 1, 1, 1, 1);
}"
590,"    public static String sliceSource(final String src, final int froml, final int fromc, final int tol, final int toc) {
        final BufferedReader reader = new BufferedReader(new StringReader(src));
        final StringBuilder buffer = new StringBuilder();
        String line;
        int cl = 1;
        try {
            while ((line = reader.readLine()) != null) {
                if (cl < froml || cl > tol) {
                    buffer.append(line).append('\n');
                } else {
                    if (cl == froml) {
                        buffer.append(line, 0, fromc - 1);
                    }
                    if (cl == tol) {
                        buffer.append(line.substring(toc + 1));
                    }
                } // else ignore line
                cl += 1;
            }
        } catch (final IOException xignore) {
            //damn the checked exceptions :-)
        }
        return buffer.toString();
    }","  public void test67()  throws Throwable  {
      // Undeclared exception!
      try { 
        JexlException.sliceSource(""?: error calling operator 'could not read source File'"", (-2047391025), 40, 1, (-3184));
        fail(""Expecting exception: StringIndexOutOfBoundsException"");
      } catch(StringIndexOutOfBoundsException e) {
      }
  }"
591,"    public static String sliceSource(final String src, final int froml, final int fromc, final int tol, final int toc) {
        final BufferedReader reader = new BufferedReader(new StringReader(src));
        final StringBuilder buffer = new StringBuilder();
        String line;
        int cl = 1;
        try {
            while ((line = reader.readLine()) != null) {
                if (cl < froml || cl > tol) {
                    buffer.append(line).append('\n');
                } else {
                    if (cl == froml) {
                        buffer.append(line, 0, fromc - 1);
                    }
                    if (cl == tol) {
                        buffer.append(line.substring(toc + 1));
                    }
                } // else ignore line
                cl += 1;
            }
        } catch (final IOException xignore) {
            //damn the checked exceptions :-)
        }
        return buffer.toString();
    }","  public void test68()  throws Throwable  {
      String string0 = JexlException.sliceSource(""?: variable 'S' is already defined"", 16, 16, 16, 16);
}"
592,"    public JexlException(final JexlNode node, final String msg) {
        this(node, msg, null);
    }","  public void test69()  throws Throwable  {
      JexlException.Ambiguous jexlException_Ambiguous0 = new JexlException.Ambiguous((JexlInfo) null, (JexlInfo) null, ""MWUWc Zt"");
      String string0 = jexlException_Ambiguous0.tryCleanSource(""MWUWc Zt"");
}"
593,"    protected String parserError(final String prefix, final String expr) {
        final int length = expr.length();
        if (length < MAX_EXCHARLOC) {
            return prefix + "" error in '"" + expr + ""'"";
        }
        final int me = MAX_EXCHARLOC / 2;
        int begin = info.getColumn() - me;
        if (begin < 0 || length < me) {
            begin = 0;
        } else if (begin > length) {
            begin = me;
        }
        int end = begin + MAX_EXCHARLOC;
        if (end > length) {
            end = length;
        }
        return prefix + "" error near '... ""
                + expr.substring(begin, end) + "" ...'"";
    }","  public void test70()  throws Throwable  {
      JexlInfo jexlInfo0 = new JexlInfo(""?: variable 'D6sVhD,,lHqPM0%e+' is undefined"", 81, 81);
      JexlException.Ambiguous jexlException_Ambiguous0 = new JexlException.Ambiguous(jexlInfo0, jexlInfo0, ""?: variable 'D6sVhD,,lHqPM0%e+' is undefined"");
      String string0 = jexlException_Ambiguous0.parserError(""?: variable 'D6sVhD,,lHqPM0%e+' is undefined"", ""?: null value property 'D6sVhD,,lHqPM0%e+'"");
}"
594,"    protected String detailedMessage() {
        Class<? extends JexlException> clazz = getClass();
        String name = clazz == JexlException.class? ""JEXL"" : clazz.getSimpleName().toLowerCase();
        return name + "" error : "" + getDetail();
    }","  public void test71()  throws Throwable  {
      JexlInfo jexlInfo0 = new JexlInfo();
      JexlException.Assignment jexlException_Assignment0 = new JexlException.Assignment(jexlInfo0, ""org.apache.commons.jexl3.internalsun.reflect.GeneratedConstructorAccessor62"");
      String string0 = jexlException_Assignment0.detailedMessage();
}"
595,"    public String getMessage() {
        final StringBuilder msg = new StringBuilder();
        if (info != null) {
            msg.append(info.toString());
        } else {
            msg.append(""?:"");
        }
        msg.append(' ');
        msg.append(detailedMessage());
        final Throwable cause = getCause();
        if (cause instanceof JexlArithmetic.NullOperand) {
            msg.append("" caused by null operand"");
        }
        return msg.toString();
    }","  public void test72()  throws Throwable  {
      JexlInfo jexlInfo0 = new JexlInfo("""", 81, 81);
      JexlException.Ambiguous jexlException_Ambiguous0 = new JexlException.Ambiguous(jexlInfo0, jexlInfo0, """");
      JexlException jexlException0 = new JexlException((JexlNode) null, """", jexlException_Ambiguous0);
      String string0 = jexlException0.getMessage();
}"
596,"    protected String detailedMessage() {
        Class<? extends JexlException> clazz = getClass();
        String name = clazz == JexlException.class? ""JEXL"" : clazz.getSimpleName().toLowerCase();
        return name + "" error : "" + getDetail();
    }","  public void test73()  throws Throwable  {
      ASTExtendedLiteral aSTExtendedLiteral0 = new ASTExtendedLiteral((-3037));
      JexlException.Cancel jexlException_Cancel0 = new JexlException.Cancel(aSTExtendedLiteral0);
      String string0 = jexlException_Cancel0.detailedMessage();
}"
597,"    public static JexlException tryFailed(final InvocationTargetException xinvoke) {
        final Throwable cause = xinvoke.getCause();
        return cause instanceof JexlException
                ? (JexlException) cause
                : new JexlException.TryFailed(xinvoke); // fail
    }","  public void test74()  throws Throwable  {
      ASTForeachStatement aSTForeachStatement0 = new ASTForeachStatement((Parser) null, (-1));
      Parser parser0 = new Parser(""\""}\"""");
      ParseException parseException0 = parser0.generateParseException();
      JexlException jexlException0 = new JexlException(aSTForeachStatement0, ""\""}\"""", parseException0, false);
      UndeclaredThrowableException undeclaredThrowableException0 = new UndeclaredThrowableException(jexlException0);
      InvocationTargetException invocationTargetException0 = new InvocationTargetException(undeclaredThrowableException0);
      JexlException jexlException1 = JexlException.tryFailed(invocationTargetException0);
}"
598,"    public static JexlException tryFailed(final InvocationTargetException xinvoke) {
        final Throwable cause = xinvoke.getCause();
        return cause instanceof JexlException
                ? (JexlException) cause
                : new JexlException.TryFailed(xinvoke); // fail
    }","  public void test75()  throws Throwable  {
      TokenMgrException tokenMgrException0 = new TokenMgrException(false, (-1452), (-1452), (-1452), (String) null, (-1452), (-1452));
      InvocationTargetException invocationTargetException0 = new InvocationTargetException(tokenMgrException0);
      InvocationTargetException invocationTargetException1 = new InvocationTargetException(invocationTargetException0, (String) null);
      JexlException jexlException0 = JexlException.tryFailed(invocationTargetException1);
}"
599,"    public JexlException(final JexlNode node, final String msg) {
        this(node, msg, null);
    }","  public void test76()  throws Throwable  {
      ASTNullpNode aSTNullpNode0 = new ASTNullpNode((Parser) null, (-48));
      InvocationTargetException invocationTargetException0 = new InvocationTargetException((Throwable) null);
      JexlException jexlException0 = JexlException.tryFailed(invocationTargetException0);
      JexlException jexlException1 = new JexlException(aSTNullpNode0, """", jexlException0, false);
  }"
600,"    public JexlException clean() {
        return clean(this);
    }","  public void test77()  throws Throwable  {
      InvocationTargetException invocationTargetException0 = new InvocationTargetException((Throwable) null);
      JexlException jexlException0 = JexlException.tryFailed(invocationTargetException0);
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[8];
      StackTraceElement stackTraceElement0 = new StackTraceElement(""\""TE,K!i-KD} <V\""0&@"", ""q\""~;g"", ""q\""~;g"", 24);
      stackTraceElementArray0[0] = stackTraceElement0;
      stackTraceElementArray0[1] = stackTraceElement0;
      stackTraceElementArray0[2] = stackTraceElement0;
      stackTraceElementArray0[3] = stackTraceElementArray0[2];
      StackTraceElement stackTraceElement1 = new StackTraceElement(""org.apache.commons.jexl3.parsersun.reflect.GeneratedConstructorAccessor61"", ""q\""~;g"", ""org.apache.commons.jexl3.parsersun.reflect.GeneratedConstructorAccessor61"", 909);
      stackTraceElementArray0[4] = stackTraceElement1;
      stackTraceElementArray0[5] = stackTraceElement0;
      stackTraceElementArray0[6] = stackTraceElement0;
      stackTraceElementArray0[7] = stackTraceElement0;
      jexlException0.setStackTrace(stackTraceElementArray0);
      JexlException jexlException1 = jexlException0.clean();
}"
601,"    public JexlException clean() {
        return clean(this);
    }","  public void test78()  throws Throwable  {
      ASTGTNode aSTGTNode0 = new ASTGTNode(26);
      JexlException.Variable jexlException_Variable0 = new JexlException.Variable(aSTGTNode0, ""'"", false);
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[7];
      StackTraceElement stackTraceElement0 = new StackTraceElement(""org.apache.commons.jexl3.internalsun.reflect.GeneratedConstructorAccessor73"", ""rAm"", ""sun.reflect.GeneratedConstructo"", 42);
      stackTraceElementArray0[0] = stackTraceElement0;
      stackTraceElementArray0[1] = stackTraceElement0;
      stackTraceElementArray0[2] = stackTraceElement0;
      stackTraceElementArray0[3] = stackTraceElement0;
      stackTraceElementArray0[4] = stackTraceElement0;
      stackTraceElementArray0[5] = stackTraceElementArray0[0];
      stackTraceElementArray0[6] = stackTraceElement0;
      jexlException_Variable0.setStackTrace(stackTraceElementArray0);
      JexlException jexlException0 = jexlException_Variable0.clean();
}"
602,"    public JexlInfo getInfo() {
        return detailedInfo(mark, info);
    }","  public void test79()  throws Throwable  {
      JexlInfo jexlInfo0 = new JexlInfo();
      ASTNRNode aSTNRNode0 = new ASTNRNode(73);
      JexlInfo jexlInfo1 = JexlException.getInfo((JexlNode) aSTNRNode0, jexlInfo0);
}"
603,"    public static String methodError(final JexlNode node, final String method) {
        return methodError(node, method, null);
    }","  public void test80()  throws Throwable  {
      String string0 = JexlException.methodError((JexlNode) null, ""sun.reflect.NativeConstructorAc"");
}"
604,"    public JexlException(final JexlNode node, final String msg) {
        this(node, msg, null);
    }","  public void test81()  throws Throwable  {
      ASTAddNode aSTAddNode0 = new ASTAddNode(2);
      JexlException.Cancel jexlException_Cancel0 = new JexlException.Cancel(aSTAddNode0);
      JexlException jexlException0 = new JexlException((JexlInfo) null, (String) null, jexlException_Cancel0);
  }"
605,"    protected String detailedMessage() {
        Class<? extends JexlException> clazz = getClass();
        String name = clazz == JexlException.class? ""JEXL"" : clazz.getSimpleName().toLowerCase();
        return name + "" error : "" + getDetail();
    }","  public void test82()  throws Throwable  {
      Parser parser0 = new Parser(""MWUWc Zt"");
      ASTAddNode aSTAddNode0 = new ASTAddNode(parser0, 1561);
      JexlException.Ambiguous jexlException_Ambiguous0 = new JexlException.Ambiguous((JexlInfo) null, (JexlInfo) null, ""MWUWc Zt"");
      JexlException.Operator jexlException_Operator0 = new JexlException.Operator(aSTAddNode0, ""MWUWc Zt"", jexlException_Ambiguous0);
      String string0 = jexlException_Operator0.detailedMessage();
}"
606,"    public static String variableError(final JexlNode node, final String variable, final boolean undef) {
        return variableError(node, variable, undef? VariableIssue.UNDEFINED : VariableIssue.NULLVALUE);
    }","  public void test83()  throws Throwable  {
      ASTExtendedLiteral aSTExtendedLiteral0 = new ASTExtendedLiteral((-3037));
      Token token0 = new Token((-3037), "":4kjN6bbVv LL"");
      aSTExtendedLiteral0.jjtSetFirstToken(token0);
      JexlException.VariableIssue jexlException_VariableIssue0 = JexlException.VariableIssue.UNDEFINED;
      String string0 = JexlException.variableError((JexlNode) aSTExtendedLiteral0, "":4kjN6bbVv LL"", jexlException_VariableIssue0);
}"
607,"    protected String detailedMessage() {
        Class<? extends JexlException> clazz = getClass();
        String name = clazz == JexlException.class? ""JEXL"" : clazz.getSimpleName().toLowerCase();
        return name + "" error : "" + getDetail();
    }","  public void test84()  throws Throwable  {
      TokenMgrException tokenMgrException0 = new TokenMgrException(true, 1446, 0, 0, """", (-3184), 0);
      JexlException.Tokenization jexlException_Tokenization0 = new JexlException.Tokenization((JexlInfo) null, tokenMgrException0);
      String string0 = jexlException_Tokenization0.detailedMessage();
}"
608,"    public JexlException(final JexlNode node, final String msg) {
        this(node, msg, null);
    }","  public void test85()  throws Throwable  {
      ASTMulNode aSTMulNode0 = new ASTMulNode(5519);
      JexlException.Return jexlException_Return0 = new JexlException.Return(aSTMulNode0, (String) null, ""break loop"");
      Object object0 = jexlException_Return0.getValue();
}"
609,"    public JexlException(final JexlNode node, final String msg) {
        this(node, msg, null);
    }","  public void test86()  throws Throwable  {
      JexlInfo jexlInfo0 = new JexlInfo();
      JexlException.Ambiguous jexlException_Ambiguous0 = new JexlException.Ambiguous(jexlInfo0, ""org.apache.commons.jexl3.internal.TemplateEngine$BlockType"");
      String string0 = jexlException_Ambiguous0.tryCleanSource(""?: null value property 'org.apache.commons.jexl3.internal.TemplateEngine$BlockType'"");
}"
610,"    public JexlException(final JexlNode node, final String msg) {
        this(node, msg, null);
    }","  public void test87()  throws Throwable  {
      JexlInfo jexlInfo0 = new JexlInfo();
      JexlException.Assignment jexlException_Assignment0 = new JexlException.Assignment(jexlInfo0, ""HITN4JTc%}{J%P==F#"");
      StringProvider stringProvider0 = new StringProvider(""assignment error in 'HITN4JTc%}{J%P==F#'"");
      Parser parser0 = new Parser(stringProvider0);
      ASTBitwiseAndNode aSTBitwiseAndNode0 = new ASTBitwiseAndNode(parser0, (-1190));
      JexlException.Property jexlException_Property0 = new JexlException.Property(aSTBitwiseAndNode0, ""rR"", true, jexlException_Assignment0);
      boolean boolean0 = jexlException_Property0.isUndefined();
}"
611,"    public JexlException(final JexlNode node, final String msg) {
        this(node, msg, null);
    }","  public void test88()  throws Throwable  {
      JexlInfo jexlInfo0 = new JexlInfo();
      JexlException.Assignment jexlException_Assignment0 = new JexlException.Assignment(jexlInfo0, ""HITN4JTc%}{J%P==F#"");
      StringProvider stringProvider0 = new StringProvider(""assignment error in 'HITN4JTc%}{J%P==F#'"");
      Parser parser0 = new Parser(stringProvider0);
      ASTBitwiseAndNode aSTBitwiseAndNode0 = new ASTBitwiseAndNode(parser0, (-1190));
      JexlException.Property jexlException_Property0 = new JexlException.Property(aSTBitwiseAndNode0, ""rR"", true, jexlException_Assignment0);
      jexlException_Property0.getProperty();
}"
612,"    public JexlException(final JexlNode node, final String msg) {
        this(node, msg, null);
    }","  public void test89()  throws Throwable  {
      JexlInfo jexlInfo0 = new JexlInfo();
      JexlException.Ambiguous jexlException_Ambiguous0 = new JexlException.Ambiguous(jexlInfo0, jexlInfo0, ""?: undefined property 'org.apache.commons.&exl3.internal.TemplateEngine$BlockType'"");
      String string0 = jexlException_Ambiguous0.tryCleanSource(""?: undefined property 'org.apache.commons.&exl3.internal.TemplateEngine$BlockType'"");
}"
613,"    public static String annotationError(final JexlNode node, final String annotation) {
        final StringBuilder msg = errorAt(node);
        msg.append(""error processing annotation '"");
        msg.append(annotation);
        msg.append('\'');
        return msg.toString();
    }","  public void test90()  throws Throwable  {
      ASTAnnotatedStatement aSTAnnotatedStatement0 = new ASTAnnotatedStatement(0);
      String string0 = JexlException.annotationError(aSTAnnotatedStatement0, """");
}"
614,"    public static String propertyError(final JexlNode node, final String pty, final boolean undef) {
        final StringBuilder msg = errorAt(node);
        if (undef) {
            msg.append(""unsolvable"");
        } else {
            msg.append(""null value"");
        }
        msg.append("" property '"");
        msg.append(pty);
        msg.append('\'');
        return msg.toString();
    }","  public void test91()  throws Throwable  {
      StringProvider stringProvider0 = new StringProvider(""assignment error in 'HITN4JTc%}{J%P==F#'"");
      Parser parser0 = new Parser(stringProvider0);
      ASTBitwiseAndNode aSTBitwiseAndNode0 = new ASTBitwiseAndNode(parser0, (-1190));
      String string0 = JexlException.propertyError((JexlNode) aSTBitwiseAndNode0, ""TN4JTc%}{J%P==F"");
}"
615,"    public static String operatorError(final JexlNode node, final String symbol) {
        final StringBuilder msg = errorAt(node);
        msg.append(""error calling operator '"");
        msg.append(symbol);
        msg.append('\'');
        return msg.toString();
    }","  public void test92()  throws Throwable  {
      StringProvider stringProvider0 = new StringProvider(""assignment error in 'HITN4JTc%}{J%P==F#'"");
      Parser parser0 = new Parser(stringProvider0);
      ASTBitwiseAndNode aSTBitwiseAndNode0 = new ASTBitwiseAndNode(parser0, (-1190));
      String string0 = JexlException.operatorError(aSTBitwiseAndNode0, ""error processing annotation 'rR'"");
}"
616,"    public JexlInfo getInfo() {
        return detailedInfo(mark, info);
    }","  public void test93()  throws Throwable  {
      JexlInfo jexlInfo0 = new JexlInfo();
      JexlException.Assignment jexlException_Assignment0 = new JexlException.Assignment(jexlInfo0, ""HITN4JTc%}{J%P==F#"");
      JexlException.StackOverflow jexlException_StackOverflow0 = new JexlException.StackOverflow(jexlInfo0, ""qF,kxbD$}eD]=Y%5"", jexlException_Assignment0);
      JexlInfo jexlInfo1 = jexlException_StackOverflow0.getInfo();
}"
617,"    protected String detailedMessage() {
        Class<? extends JexlException> clazz = getClass();
        String name = clazz == JexlException.class? ""JEXL"" : clazz.getSimpleName().toLowerCase();
        return name + "" error : "" + getDetail();
    }","  public void test94()  throws Throwable  {
      JexlInfo jexlInfo0 = new JexlInfo(""), "", (-3037), 4432);
      JexlException.Feature jexlException_Feature0 = new JexlException.Feature(jexlInfo0, 95, ""Nw.#9=|2V"");
      String string0 = jexlException_Feature0.detailedMessage();
}"
618,"    public String getMessage() {
        final StringBuilder msg = new StringBuilder();
        if (info != null) {
            msg.append(info.toString());
        } else {
            msg.append(""?:"");
        }
        msg.append(' ');
        msg.append(detailedMessage());
        final Throwable cause = getCause();
        if (cause instanceof JexlArithmetic.NullOperand) {
            msg.append("" caused by null operand"");
        }
        return msg.toString();
    }","  public void test95()  throws Throwable  {
      JexlException.Break jexlException_Break0 = new JexlException.Break((JexlNode) null);
      JexlException.Property jexlException_Property0 = new JexlException.Property((JexlNode) null, ""org.apache.commons.&exl3.internal.TemplateEngine$BlockType"", true, jexlException_Break0);
      String string0 = jexlException_Property0.getMessage();
}"
619,"    protected String detailedMessage() {
        Class<? extends JexlException> clazz = getClass();
        String name = clazz == JexlException.class? ""JEXL"" : clazz.getSimpleName().toLowerCase();
        return name + "" error : "" + getDetail();
    }","  public void test96()  throws Throwable  {
      JexlInfo jexlInfo0 = new JexlInfo();
      JexlException.Assignment jexlException_Assignment0 = new JexlException.Assignment(jexlInfo0, ""HITN4JTc%}{J%P==F#"");
      JexlException.StackOverflow jexlException_StackOverflow0 = new JexlException.StackOverflow(jexlInfo0, ""qF,kxbD$}eD]=Y%5"", jexlException_Assignment0);
      String string0 = jexlException_StackOverflow0.detailedMessage();
}"
620,"    public JexlException(final JexlNode node, final String msg) {
        this(node, msg, null);
    }","  public void test97()  throws Throwable  {
      JexlException.Parsing jexlException_Parsing0 = null;
      try {
        jexlException_Parsing0 = new JexlException.Parsing((JexlInfo) null, (ParseException) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.util.Objects"", e);
      }
  }"
621,"    public String getMessage() {
        final StringBuilder msg = new StringBuilder();
        if (info != null) {
            msg.append(info.toString());
        } else {
            msg.append(""?:"");
        }
        msg.append(' ');
        msg.append(detailedMessage());
        final Throwable cause = getCause();
        if (cause instanceof JexlArithmetic.NullOperand) {
            msg.append("" caused by null operand"");
        }
        return msg.toString();
    }","  public void test98()  throws Throwable  {
      JexlException.Parsing jexlException_Parsing0 = new JexlException.Parsing((JexlInfo) null, ""org.apache.commns.jexl.parser.ASTSizeFunctioC"");
      // Undeclared exception!
      try { 
        jexlException_Parsing0.getMessage();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.JexlException"", e);
      }
  }"
622,"    public JexlException(final JexlNode node, final String msg) {
        this(node, msg, null);
    }","  public void test99()  throws Throwable  {
      ASTExtendedLiteral aSTExtendedLiteral0 = new ASTExtendedLiteral((-3037));
      JexlException.Cancel jexlException_Cancel0 = new JexlException.Cancel(aSTExtendedLiteral0);
      JexlException.Annotation jexlException_Annotation0 = new JexlException.Annotation(aSTExtendedLiteral0, """", jexlException_Cancel0);
      String string0 = jexlException_Annotation0.getAnnotation();
}"
623,"    public abstract Template createTemplate(JexlInfo info, String prefix, Reader source, String... parms);

    /**
     * Creates a new template.
     *
     * @param info the source info
     * @param parms the parameter names
     * @param source the source
     * @return the template
     */
    public Template createTemplate(final JexlInfo info, final String source, final String... parms) {
        return createTemplate(info, ""$$"", new StringReader(source), parms);
    }","  public void test0()  throws Throwable  {
      Engine engine0 = new Engine();
      TemplateEngine templateEngine0 = engine0.createJxltEngine(true, 0, 'P', 'P');
      JxltEngine.Template jxltEngine_Template0 = templateEngine0.createTemplate(""'"");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(""'"");
      Object[] objectArray0 = new Object[0];
      ObjectContext<String> objectContext0 = new ObjectContext<String>(engine0, ""'"");
      jxltEngine_Template0.evaluate((JexlContext) objectContext0, (Writer) mockPrintWriter0, objectArray0);
}"
624,"    public abstract Template createTemplate(JexlInfo info, String prefix, Reader source, String... parms);

    /**
     * Creates a new template.
     *
     * @param info the source info
     * @param parms the parameter names
     * @param source the source
     * @return the template
     */
    public Template createTemplate(final JexlInfo info, final String source, final String... parms) {
        return createTemplate(info, ""$$"", new StringReader(source), parms);
    }","  public void test1()  throws Throwable  {
      Engine engine0 = new Engine();
      JxltEngine jxltEngine0 = engine0.createJxltEngine(true);
      JxltEngine.Template jxltEngine_Template0 = jxltEngine0.createTemplate(""annotation"", (String[]) null);
      ObjectContext<String> objectContext0 = new ObjectContext<String>(engine0, ""H_Vx@*b "");
      JxltEngine.Template jxltEngine_Template1 = jxltEngine_Template0.prepare(objectContext0);
}"
625,"    public abstract Template createTemplate(JexlInfo info, String prefix, Reader source, String... parms);

    /**
     * Creates a new template.
     *
     * @param info the source info
     * @param parms the parameter names
     * @param source the source
     * @return the template
     */
    public Template createTemplate(final JexlInfo info, final String source, final String... parms) {
        return createTemplate(info, ""$$"", new StringReader(source), parms);
    }","  public void test2()  throws Throwable  {
      Engine engine0 = new Engine();
      JxltEngine jxltEngine0 = engine0.createJxltEngine();
      String[] stringArray0 = new String[8];
      JxltEngine.Template jxltEngine_Template0 = jxltEngine0.createTemplate(""Laa-t)+PUD"", stringArray0);
      Set<List<String>> set0 = jxltEngine_Template0.getVariables();
}"
626,"    public abstract Template createTemplate(JexlInfo info, String prefix, Reader source, String... parms);

    /**
     * Creates a new template.
     *
     * @param info the source info
     * @param parms the parameter names
     * @param source the source
     * @return the template
     */
    public Template createTemplate(final JexlInfo info, final String source, final String... parms) {
        return createTemplate(info, ""$$"", new StringReader(source), parms);
    }","  public void test3()  throws Throwable  {
      Engine engine0 = new Engine();
      JxltEngine jxltEngine0 = engine0.createJxltEngine(true);
      JxltEngine.Template jxltEngine_Template0 = jxltEngine0.createTemplate(""annotation"", (String[]) null);
      String[] stringArray0 = jxltEngine_Template0.getParameters();
}"
627,"    public abstract Template createTemplate(JexlInfo info, String prefix, Reader source, String... parms);

    /**
     * Creates a new template.
     *
     * @param info the source info
     * @param parms the parameter names
     * @param source the source
     * @return the template
     */
    public Template createTemplate(final JexlInfo info, final String source, final String... parms) {
        return createTemplate(info, ""$$"", new StringReader(source), parms);
    }","  public void test4()  throws Throwable  {
      Engine engine0 = new Engine();
      JxltEngine jxltEngine0 = engine0.createJxltEngine();
      JexlInfo jexlInfo0 = new JexlInfo();
      String[] stringArray0 = new String[9];
      JxltEngine.Template jxltEngine_Template0 = jxltEngine0.createTemplate(jexlInfo0, ""rQK"", stringArray0);
      // Undeclared exception!
      try { 
        jxltEngine_Template0.evaluate(engine0.EMPTY_CONTEXT, (Writer) null, (Object[]) stringArray0);
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }"
628,"    public abstract Template createTemplate(JexlInfo info, String prefix, Reader source, String... parms);

    /**
     * Creates a new template.
     *
     * @param info the source info
     * @param parms the parameter names
     * @param source the source
     * @return the template
     */
    public Template createTemplate(final JexlInfo info, final String source, final String... parms) {
        return createTemplate(info, ""$$"", new StringReader(source), parms);
    }","  public void test5()  throws Throwable  {
      Engine engine0 = new Engine();
      TemplateEngine templateEngine0 = engine0.createJxltEngine(true, 0, 'P', 'P');
      JxltEngine.Template jxltEngine_Template0 = templateEngine0.createTemplate(""'"");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(""'"");
      jxltEngine_Template0.evaluate(engine0.EMPTY_CONTEXT, (Writer) mockPrintWriter0);
}"
629,"    public abstract Template createTemplate(JexlInfo info, String prefix, Reader source, String... parms);

    /**
     * Creates a new template.
     *
     * @param info the source info
     * @param parms the parameter names
     * @param source the source
     * @return the template
     */
    public Template createTemplate(final JexlInfo info, final String source, final String... parms) {
        return createTemplate(info, ""$$"", new StringReader(source), parms);
    }","  public void test6()  throws Throwable  {
      Engine engine0 = new Engine();
      JxltEngine jxltEngine0 = engine0.createJxltEngine(false);
      JxltEngine.Template jxltEngine_Template0 = jxltEngine0.createTemplate("""");
      String string0 = jxltEngine_Template0.asString();
}"
630,"    public Expression createExpression(final String expression) {
        return createExpression(null, expression);
    }","  public void test7()  throws Throwable  {
      Engine engine0 = new Engine();
      JxltEngine jxltEngine0 = engine0.createJxltEngine(true, 468, '&', '&');
      JexlInfo jexlInfo0 = engine0.createInfo();
      JxltEngine.Expression jxltEngine_Expression0 = jxltEngine0.createExpression(jexlInfo0, ""GWgO_w@Z+~IWcz8q9"");
      String string0 = jxltEngine_Expression0.toString();
}"
631,"    public Expression createExpression(final String expression) {
        return createExpression(null, expression);
    }","  public void test8()  throws Throwable  {
      Engine engine0 = new Engine();
      JxltEngine jxltEngine0 = engine0.createJxltEngine();
      JxltEngine.Expression jxltEngine_Expression0 = jxltEngine0.createExpression(""$$"");
      JxltEngine.Expression jxltEngine_Expression1 = jxltEngine_Expression0.prepare(engine0.EMPTY_CONTEXT);
}"
632,"    public Expression createExpression(final String expression) {
        return createExpression(null, expression);
    }","  public void test9()  throws Throwable  {
      Engine engine0 = new Engine();
      JxltEngine jxltEngine0 = engine0.createJxltEngine(true, 468, '&', '&');
      JexlInfo jexlInfo0 = engine0.createInfo();
      JxltEngine.Expression jxltEngine_Expression0 = jxltEngine0.createExpression(jexlInfo0, ""GWgO_w@Z+~IWcz8q9"");
      boolean boolean0 = jxltEngine_Expression0.isImmediate();
}"
633,"    public Expression createExpression(final String expression) {
        return createExpression(null, expression);
    }","  public void test10()  throws Throwable  {
      Engine engine0 = new Engine();
      JxltEngine jxltEngine0 = engine0.createJxltEngine();
      JexlInfo jexlInfo0 = engine0.createInfo("""", 6, 2380);
      JxltEngine.Expression jxltEngine_Expression0 = jxltEngine0.createExpression(jexlInfo0, """");
      boolean boolean0 = jxltEngine_Expression0.isDeferred();
}"
634,"    public Expression createExpression(final String expression) {
        return createExpression(null, expression);
    }","  public void test11()  throws Throwable  {
      Engine engine0 = new Engine();
      JxltEngine jxltEngine0 = engine0.createJxltEngine();
      JxltEngine.Expression jxltEngine_Expression0 = jxltEngine0.createExpression(""$$"");
      Set<List<String>> set0 = jxltEngine_Expression0.getVariables();
}"
635,"    public Expression createExpression(final String expression) {
        return createExpression(null, expression);
    }","  public void test12()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      JxltEngine jxltEngine0 = engine0.createJxltEngine();
      JxltEngine.Expression jxltEngine_Expression0 = jxltEngine0.createExpression(""<null>.<?>(...)"");
      JxltEngine.Expression jxltEngine_Expression1 = jxltEngine_Expression0.getSource();
}"
636,"    public Expression createExpression(final String expression) {
        return createExpression(null, expression);
    }","  public void test13()  throws Throwable  {
      Engine engine0 = new Engine();
      JxltEngine jxltEngine0 = engine0.createJxltEngine(false);
      JxltEngine.Expression jxltEngine_Expression0 = jxltEngine0.createExpression("""");
      Object object0 = jxltEngine_Expression0.evaluate(engine0.EMPTY_CONTEXT);
}"
637,"    public Expression createExpression(final String expression) {
        return createExpression(null, expression);
    }","  public void test14()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      JxltEngine jxltEngine0 = engine0.createJxltEngine();
      JexlInfo jexlInfo0 = engine0.createInfo((String) null, 74, 74);
      JxltEngine.Expression jxltEngine_Expression0 = jxltEngine0.createExpression(jexlInfo0, ""[TRACE] "");
      StringBuilder stringBuilder0 = new StringBuilder(""org.apache.commons.jexl3.JxltEngine$Exception"");
      StringBuilder stringBuilder1 = jxltEngine_Expression0.asString(stringBuilder0);
}"
638,"    public Expression createExpression(final String expression) {
        return createExpression(null, expression);
    }","  public void test15()  throws Throwable  {
      Engine engine0 = new Engine();
      JxltEngine jxltEngine0 = engine0.createJxltEngine();
      JexlInfo jexlInfo0 = engine0.createInfo("""", 6, 2380);
      JxltEngine.Expression jxltEngine_Expression0 = jxltEngine0.createExpression(jexlInfo0, """");
      String string0 = jxltEngine_Expression0.asString();
}"
639,"    public abstract void clearCache();
}
","  public void test16()  throws Throwable  {
      Engine engine0 = new Engine();
      TemplateEngine templateEngine0 = engine0.createJxltEngine(false, 1, '\""', '\""');
      templateEngine0.clearCache();
  }"
640,"    public abstract JexlEngine getEngine();

    /**
     * Clears the cache.
     */
    public abstract void clearCache();
}
","  public void test17()  throws Throwable  {
      TemplateEngine templateEngine0 = new TemplateEngine((Engine) null, true, 733, 'N', 'M');
      JexlEngine jexlEngine0 = templateEngine0.getEngine();
}"
641,"    public abstract JexlEngine getEngine();

    /**
     * Clears the cache.
     */
    public abstract void clearCache();
}
","  public void test18()  throws Throwable  {
      Engine engine0 = new Engine();
      JxltEngine jxltEngine0 = engine0.createJxltEngine();
      JexlEngine jexlEngine0 = jxltEngine0.getEngine();
}"
642,"    public abstract Template createTemplate(JexlInfo info, String prefix, Reader source, String... parms);

    /**
     * Creates a new template.
     *
     * @param info the source info
     * @param parms the parameter names
     * @param source the source
     * @return the template
     */
    public Template createTemplate(final JexlInfo info, final String source, final String... parms) {
        return createTemplate(info, ""$$"", new StringReader(source), parms);
    }","  public void test19()  throws Throwable  {
      Engine engine0 = new Engine();
      JxltEngine jxltEngine0 = engine0.createJxltEngine();
      JexlInfo jexlInfo0 = engine0.createInfo();
      StringReader stringReader0 = new StringReader(""CVvMCVf1@WEd8s{[T;"");
      String[] stringArray0 = new String[6];
      JxltEngine.Template jxltEngine_Template0 = jxltEngine0.createTemplate(jexlInfo0, ""CVvMCVf1@WEd8s{[T;"", (Reader) stringReader0, stringArray0);
}"
643,"    public abstract Template createTemplate(JexlInfo info, String prefix, Reader source, String... parms);

    /**
     * Creates a new template.
     *
     * @param info the source info
     * @param parms the parameter names
     * @param source the source
     * @return the template
     */
    public Template createTemplate(final JexlInfo info, final String source, final String... parms) {
        return createTemplate(info, ""$$"", new StringReader(source), parms);
    }","  public void test20()  throws Throwable  {
      Engine engine0 = new Engine();
      JxltEngine jxltEngine0 = engine0.createJxltEngine(false);
      JxltEngine.Template jxltEngine_Template0 = jxltEngine0.createTemplate((JexlInfo) null, "":Mg.zcJmql"");
}"
644,"    public abstract Template createTemplate(JexlInfo info, String prefix, Reader source, String... parms);

    /**
     * Creates a new template.
     *
     * @param info the source info
     * @param parms the parameter names
     * @param source the source
     * @return the template
     */
    public Template createTemplate(final JexlInfo info, final String source, final String... parms) {
        return createTemplate(info, ""$$"", new StringReader(source), parms);
    }","  public void test21()  throws Throwable  {
      Engine engine0 = new Engine();
      JxltEngine jxltEngine0 = engine0.createJxltEngine(true, 468, '&', '&');
      StringReader stringReader0 = new StringReader("";L94oZTwU"");
      BufferedReader bufferedReader0 = new BufferedReader(stringReader0, 468);
      String[] stringArray0 = new String[3];
      JxltEngine.Template jxltEngine_Template0 = jxltEngine0.createTemplate("";L94oZTwU"", (Reader) bufferedReader0, stringArray0);
      Map<String, Object> map0 = jxltEngine_Template0.getPragmas();
}"
645,"    public abstract Template createTemplate(JexlInfo info, String prefix, Reader source, String... parms);

    /**
     * Creates a new template.
     *
     * @param info the source info
     * @param parms the parameter names
     * @param source the source
     * @return the template
     */
    public Template createTemplate(final JexlInfo info, final String source, final String... parms) {
        return createTemplate(info, ""$$"", new StringReader(source), parms);
    }","  public void test22()  throws Throwable  {
      TemplateEngine templateEngine0 = new TemplateEngine((Engine) null, true, (-596), 'H', 'T');
      JexlInfo jexlInfo0 = new JexlInfo(""org.apache.commons.jexl3.JxltEngine$Exception"", 1600, (-596));
      String[] stringArray0 = new String[9];
      // Undeclared exception!
      try { 
        templateEngine0.createTemplate(jexlInfo0, ""org.apache.commons.jexl3.JxltEngine$Exception"", stringArray0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.internal.TemplateScript"", e);
      }
  }"
646,"    public abstract Template createTemplate(JexlInfo info, String prefix, Reader source, String... parms);

    /**
     * Creates a new template.
     *
     * @param info the source info
     * @param parms the parameter names
     * @param source the source
     * @return the template
     */
    public Template createTemplate(final JexlInfo info, final String source, final String... parms) {
        return createTemplate(info, ""$$"", new StringReader(source), parms);
    }","  public void test23()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      JxltEngine jxltEngine0 = engine0.createJxltEngine();
      StringReader stringReader0 = new StringReader(""J5s/h@Sz.fqC5m^8L$"");
      String[] stringArray0 = new String[9];
      // Undeclared exception!
      try { 
        jxltEngine0.createTemplate((JexlInfo) null, """", (Reader) stringReader0, stringArray0);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // @1:18 ambiguous statement error in 'J5s/h@Sz.fqC5m^8L$'
         //
         verifyException(""org.apache.commons.jexl3.parser.JexlParser"", e);
      }
  }"
647,"    public abstract Template createTemplate(JexlInfo info, String prefix, Reader source, String... parms);

    /**
     * Creates a new template.
     *
     * @param info the source info
     * @param parms the parameter names
     * @param source the source
     * @return the template
     */
    public Template createTemplate(final JexlInfo info, final String source, final String... parms) {
        return createTemplate(info, ""$$"", new StringReader(source), parms);
    }","  public void test24()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      JxltEngine jxltEngine0 = engine0.createJxltEngine(true, (-1928), '', '');
      String[] stringArray0 = new String[1];
      JexlInfo jexlInfo0 = engine0.createInfo("""", (-2292), 0);
      StringReader stringReader0 = new StringReader(""^F0Yj`/%ha5<>}"");
      BufferedReader bufferedReader0 = new BufferedReader(stringReader0);
      // Undeclared exception!
      try { 
        jxltEngine0.createTemplate(jexlInfo0, """", (Reader) bufferedReader0, stringArray0);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
      }
  }"
648,"    public abstract Template createTemplate(JexlInfo info, String prefix, Reader source, String... parms);

    /**
     * Creates a new template.
     *
     * @param info the source info
     * @param parms the parameter names
     * @param source the source
     * @return the template
     */
    public Template createTemplate(final JexlInfo info, final String source, final String... parms) {
        return createTemplate(info, ""$$"", new StringReader(source), parms);
    }","  public void test25()  throws Throwable  {
      TemplateEngine templateEngine0 = new TemplateEngine((Engine) null, false, 0, ':', ':');
      JexlInfo jexlInfo0 = new JexlInfo();
      StringReader stringReader0 = new StringReader("""");
      String[] stringArray0 = new String[3];
      // Undeclared exception!
      try { 
        templateEngine0.createTemplate(jexlInfo0, ""^m'_of);CJm2K"", (Reader) stringReader0, stringArray0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.internal.TemplateScript"", e);
      }
  }"
649,"    public abstract Template createTemplate(JexlInfo info, String prefix, Reader source, String... parms);

    /**
     * Creates a new template.
     *
     * @param info the source info
     * @param parms the parameter names
     * @param source the source
     * @return the template
     */
    public Template createTemplate(final JexlInfo info, final String source, final String... parms) {
        return createTemplate(info, ""$$"", new StringReader(source), parms);
    }","  public void test26()  throws Throwable  {
      Engine engine0 = new Engine();
      TemplateEngine templateEngine0 = engine0.createJxltEngine(false, 4550, 'k', 'B');
      JexlInfo jexlInfo0 = new JexlInfo(""Z. 5,nFUw}^b\"""", 4550, 4550);
      StringReader stringReader0 = new StringReader(""-="");
      String[] stringArray0 = new String[7];
      // Undeclared exception!
      try { 
        templateEngine0.createTemplate(jexlInfo0, (String) null, (Reader) stringReader0, stringArray0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // null prefix
         //
         verifyException(""org.apache.commons.jexl3.internal.TemplateScript"", e);
      }
  }"
650,"    public abstract Template createTemplate(JexlInfo info, String prefix, Reader source, String... parms);

    /**
     * Creates a new template.
     *
     * @param info the source info
     * @param parms the parameter names
     * @param source the source
     * @return the template
     */
    public Template createTemplate(final JexlInfo info, final String source, final String... parms) {
        return createTemplate(info, ""$$"", new StringReader(source), parms);
    }","  public void test27()  throws Throwable  {
      Engine engine0 = new Engine();
      JexlInfo jexlInfo0 = engine0.createInfo();
      JxltEngine jxltEngine0 = engine0.createJxltEngine();
      // Undeclared exception!
      try { 
        jxltEngine0.createTemplate(jexlInfo0, (String) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.io.StringReader"", e);
      }
  }"
651,"    public abstract Template createTemplate(JexlInfo info, String prefix, Reader source, String... parms);

    /**
     * Creates a new template.
     *
     * @param info the source info
     * @param parms the parameter names
     * @param source the source
     * @return the template
     */
    public Template createTemplate(final JexlInfo info, final String source, final String... parms) {
        return createTemplate(info, ""$$"", new StringReader(source), parms);
    }","  public void test28()  throws Throwable  {
      TemplateEngine templateEngine0 = new TemplateEngine((Engine) null, false, (-243), 'Y', 'Y');
      String[] stringArray0 = new String[7];
      // Undeclared exception!
      try { 
        templateEngine0.createTemplate(""A-8P^J"", stringArray0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.internal.TemplateScript"", e);
      }
  }"
652,"    public abstract Template createTemplate(JexlInfo info, String prefix, Reader source, String... parms);

    /**
     * Creates a new template.
     *
     * @param info the source info
     * @param parms the parameter names
     * @param source the source
     * @return the template
     */
    public Template createTemplate(final JexlInfo info, final String source, final String... parms) {
        return createTemplate(info, ""$$"", new StringReader(source), parms);
    }","  public void test29()  throws Throwable  {
      Engine engine0 = new Engine();
      TemplateEngine templateEngine0 = new TemplateEngine(engine0, false, (-3138), '9', 'Z');
      StringReader stringReader0 = new StringReader(""@tI=p5YlPd<G/F_!"");
      String[] stringArray0 = new String[9];
      // Undeclared exception!
      try { 
        templateEngine0.createTemplate("""", (Reader) stringReader0, stringArray0);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
      }
  }"
653,"    public abstract Template createTemplate(JexlInfo info, String prefix, Reader source, String... parms);

    /**
     * Creates a new template.
     *
     * @param info the source info
     * @param parms the parameter names
     * @param source the source
     * @return the template
     */
    public Template createTemplate(final JexlInfo info, final String source, final String... parms) {
        return createTemplate(info, ""$$"", new StringReader(source), parms);
    }","  public void test30()  throws Throwable  {
      TemplateEngine templateEngine0 = new TemplateEngine((Engine) null, true, 104, '`', '`');
      String[] stringArray0 = new String[3];
      StringReader stringReader0 = new StringReader(""r%GX"");
      // Undeclared exception!
      try { 
        templateEngine0.createTemplate(""r%GX"", (Reader) stringReader0, stringArray0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.internal.TemplateScript"", e);
      }
  }"
654,"    public abstract Template createTemplate(JexlInfo info, String prefix, Reader source, String... parms);

    /**
     * Creates a new template.
     *
     * @param info the source info
     * @param parms the parameter names
     * @param source the source
     * @return the template
     */
    public Template createTemplate(final JexlInfo info, final String source, final String... parms) {
        return createTemplate(info, ""$$"", new StringReader(source), parms);
    }","  public void test31()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      JxltEngine jxltEngine0 = engine0.createJxltEngine(false);
      String[] stringArray0 = new String[4];
      // Undeclared exception!
      try { 
        jxltEngine0.createTemplate(""function"", (Reader) null, stringArray0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // null input
         //
         verifyException(""org.apache.commons.jexl3.internal.TemplateScript"", e);
      }
  }"
655,"    public abstract Template createTemplate(JexlInfo info, String prefix, Reader source, String... parms);

    /**
     * Creates a new template.
     *
     * @param info the source info
     * @param parms the parameter names
     * @param source the source
     * @return the template
     */
    public Template createTemplate(final JexlInfo info, final String source, final String... parms) {
        return createTemplate(info, ""$$"", new StringReader(source), parms);
    }","  public void test32()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      JxltEngine jxltEngine0 = engine0.createJxltEngine(true);
      // Undeclared exception!
      try { 
        jxltEngine0.createTemplate((String) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.io.StringReader"", e);
      }
  }"
656,"    public Expression createExpression(final String expression) {
        return createExpression(null, expression);
    }","  public void test33()  throws Throwable  {
      Engine engine0 = new Engine();
      TemplateEngine templateEngine0 = new TemplateEngine(engine0, true, 1904, '9', '@');
      // Undeclared exception!
      try { 
        templateEngine0.createExpression((JexlInfo) null, (String) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.internal.TemplateEngine"", e);
      }
  }"
657,"    public Expression createExpression(final String expression) {
        return createExpression(null, expression);
    }","  public void test34()  throws Throwable  {
      Engine engine0 = new Engine();
      TemplateEngine templateEngine0 = engine0.createJxltEngine(true, (-2842), 'F', 'F');
      // Undeclared exception!
      try { 
        templateEngine0.createExpression((JexlInfo) null, ""4gI"");
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Illegal initial capacity: -2842
         //
         verifyException(""java.util.HashMap"", e);
      }
  }"
658,"    public Expression createExpression(final String expression) {
        return createExpression(null, expression);
    }","  public void test35()  throws Throwable  {
      Engine engine0 = new Engine();
      JxltEngine jxltEngine0 = engine0.createJxltEngine(true, 918, 'F', '4');
      // Undeclared exception!
      try { 
        jxltEngine0.createExpression((String) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.internal.TemplateEngine"", e);
      }
  }"
659,"    public Expression createExpression(final String expression) {
        return createExpression(null, expression);
    }","  public void test36()  throws Throwable  {
      Engine engine0 = new Engine();
      TemplateEngine templateEngine0 = engine0.createJxltEngine(false, (-24), 'M', '{');
      // Undeclared exception!
      try { 
        templateEngine0.createExpression(""0=xJV`j-co0ZpZRr'5"");
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Illegal initial capacity: -24
         //
         verifyException(""java.util.HashMap"", e);
      }
  }"
660,"    public abstract Template createTemplate(JexlInfo info, String prefix, Reader source, String... parms);

    /**
     * Creates a new template.
     *
     * @param info the source info
     * @param parms the parameter names
     * @param source the source
     * @return the template
     */
    public Template createTemplate(final JexlInfo info, final String source, final String... parms) {
        return createTemplate(info, ""$$"", new StringReader(source), parms);
    }","  public void test37()  throws Throwable  {
      Engine engine0 = new Engine();
      JxltEngine jxltEngine0 = engine0.createJxltEngine();
      JexlInfo jexlInfo0 = new JexlInfo(""z(${/"", (-1), 1919);
      // Undeclared exception!
      try { 
        jxltEngine0.createTemplate(jexlInfo0, ""z(${/"");
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // z(${/@1 exception error : malformed expression: z(${/
         //
         verifyException(""org.apache.commons.jexl3.internal.TemplateEngine"", e);
      }
  }"
661,,"  public void test38()  throws Throwable  {
      JexlInfo jexlInfo0 = new JexlInfo();
      JxltEngine.Exception jxltEngine_Exception0 = new JxltEngine.Exception(jexlInfo0, """", (Throwable) null);
  }"
662,"    public abstract Template createTemplate(JexlInfo info, String prefix, Reader source, String... parms);

    /**
     * Creates a new template.
     *
     * @param info the source info
     * @param parms the parameter names
     * @param source the source
     * @return the template
     */
    public Template createTemplate(final JexlInfo info, final String source, final String... parms) {
        return createTemplate(info, ""$$"", new StringReader(source), parms);
    }","  public void test39()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlEngine jexlEngine0 = jexlBuilder0.create();
      JxltEngine jxltEngine0 = jexlEngine0.createJxltEngine(true, 2309, ']', 'g');
      String[] stringArray0 = new String[0];
      StringReader stringReader0 = new StringReader(""6k`a/"");
      BufferedReader bufferedReader0 = new BufferedReader(stringReader0, 1340);
      // Undeclared exception!
      try { 
        jxltEngine0.createTemplate("""", (Reader) bufferedReader0, stringArray0);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
      }
  }"
663,"    public final int getLine() {
        return line;
    }","  public void test0()  throws Throwable  {
      JexlInfo jexlInfo0 = new JexlInfo(""NvK}{u j8uP&xf"", 0, 3);
      JexlInfo jexlInfo1 = jexlInfo0.at(3, 0);
      jexlInfo1.toString();
}"
664,"    public final int getColumn() {
        return column;
    }","  public void test1()  throws Throwable  {
      JexlInfo jexlInfo0 = new JexlInfo(""NvK}{u j8uP&xf"", 0, 3);
      JexlInfo jexlInfo1 = jexlInfo0.at(3, 0);
      jexlInfo1.toString();
}"
665,"    public final int getColumn() {
        return column;
    }","  public void test2()  throws Throwable  {
      JexlInfo jexlInfo0 = new JexlInfo(""NvK}{u j8uP&xf"", 0, 3);
      JexlInfo jexlInfo1 = jexlInfo0.at(3, 0);
      jexlInfo1.toString();
}"
666,"    public final int getColumn() {
        return column;
    }","  public void test3()  throws Throwable  {
      JexlInfo jexlInfo0 = new JexlInfo(""1vl=UE|g<cj"", (-6), (-6));
      String string0 = jexlInfo0.toString();
}"
667,"    public String toString() {
        final StringBuilder sb = new StringBuilder(name != null? name : """");
        if (line > 0) {
            sb.append(""@"");
            sb.append(line);
            if (column > 0) {
                sb.append("":"");
                sb.append(column);
            }
        }
        final JexlInfo.Detail dbg = getDetail();
        if (dbg!= null) {
            sb.append(""!["");
            sb.append(dbg.start());
            sb.append("","");
            sb.append(dbg.end());
            sb.append(""]: '"");
            sb.append(dbg.toString());
            sb.append(""'"");
        }
        return sb.toString();
    }","  public void test4()  throws Throwable  {
      JexlInfo jexlInfo0 = new JexlInfo(""1vl=UE|g<cj"", (-6), (-6));
      String string0 = jexlInfo0.toString();
}"
668,"    public final int getLine() {
        return line;
    }","  public void test5()  throws Throwable  {
      JexlInfo jexlInfo0 = new JexlInfo(""1vl=UE|g<cj"", (-6), (-6));
      String string0 = jexlInfo0.toString();
}"
669,"    public final int getLine() {
        return line;
    }","  public void test6()  throws Throwable  {
      JexlInfo jexlInfo0 = new JexlInfo("""", 0, 0);
      String string0 = jexlInfo0.toString();
}"
670,"    public String toString() {
        final StringBuilder sb = new StringBuilder(name != null? name : """");
        if (line > 0) {
            sb.append(""@"");
            sb.append(line);
            if (column > 0) {
                sb.append("":"");
                sb.append(column);
            }
        }
        final JexlInfo.Detail dbg = getDetail();
        if (dbg!= null) {
            sb.append(""!["");
            sb.append(dbg.start());
            sb.append("","");
            sb.append(dbg.end());
            sb.append(""]: '"");
            sb.append(dbg.toString());
            sb.append(""'"");
        }
        return sb.toString();
    }","  public void test7()  throws Throwable  {
      JexlInfo jexlInfo0 = new JexlInfo("""", 0, 0);
      String string0 = jexlInfo0.toString();
}"
671,"    public final int getColumn() {
        return column;
    }","  public void test8()  throws Throwable  {
      JexlInfo jexlInfo0 = new JexlInfo("""", 0, 0);
      String string0 = jexlInfo0.toString();
}"
672,"    public final int getLine() {
        return line;
    }","  public void test9()  throws Throwable  {
      JexlInfo jexlInfo0 = new JexlInfo((String) null, 53, (-684));
      jexlInfo0.getName();
}"
673,"    public final int getColumn() {
        return column;
    }","  public void test10()  throws Throwable  {
      JexlInfo jexlInfo0 = new JexlInfo((String) null, 53, (-684));
      jexlInfo0.getName();
}"
674,"    public final int getColumn() {
        return column;
    }","  public void test11()  throws Throwable  {
      JexlInfo jexlInfo0 = new JexlInfo(""NvK}{u j8uP&xf"", 0, 3);
      jexlInfo0.getName();
}"
675,"    public final int getLine() {
        return line;
    }","  public void test12()  throws Throwable  {
      JexlInfo jexlInfo0 = new JexlInfo(""NvK}{u j8uP&xf"", 0, 3);
      jexlInfo0.getName();
}"
676,"    public final int getLine() {
        return line;
    }","  public void test13()  throws Throwable  {
      JexlInfo jexlInfo0 = new JexlInfo(""1vl=UE|g<cj"", 9, 9);
      int int0 = jexlInfo0.getLine();
}"
677,"    public final int getColumn() {
        return column;
    }","  public void test14()  throws Throwable  {
      JexlInfo jexlInfo0 = new JexlInfo(""1vl=UE|g<cj"", 9, 9);
      int int0 = jexlInfo0.getLine();
}"
678,"    public final int getColumn() {
        return column;
    }","  public void test15()  throws Throwable  {
      JexlInfo jexlInfo0 = new JexlInfo(""1vl=UE|g<cj"", (-6), (-6));
      int int0 = jexlInfo0.getLine();
}"
679,"    public final int getLine() {
        return line;
    }","  public void test16()  throws Throwable  {
      JexlInfo jexlInfo0 = new JexlInfo(""1vl=UE|g<cj"", (-6), (-6));
      int int0 = jexlInfo0.getLine();
}"
680,"    public final int getLine() {
        return line;
    }","  public void test17()  throws Throwable  {
      JexlInfo jexlInfo0 = new JexlInfo(""or/.apache.commons.jexl3.JexJEngine$1"", (-192), 14);
      int int0 = jexlInfo0.getColumn();
}"
681,"    public final int getColumn() {
        return column;
    }","  public void test18()  throws Throwable  {
      JexlInfo jexlInfo0 = new JexlInfo(""or/.apache.commons.jexl3.JexJEngine$1"", (-192), 14);
      int int0 = jexlInfo0.getColumn();
}"
682,"    public final int getColumn() {
        return column;
    }","  public void test19()  throws Throwable  {
      JexlInfo jexlInfo0 = new JexlInfo(""or/.apace.commos.jexl.JexJEngine$1"", (-215), (-215));
      int int0 = jexlInfo0.getColumn();
}"
683,"    public final int getLine() {
        return line;
    }","  public void test20()  throws Throwable  {
      JexlInfo jexlInfo0 = new JexlInfo(""or/.apace.commos.jexl.JexJEngine$1"", (-215), (-215));
      int int0 = jexlInfo0.getColumn();
}"
684,"    public final int getLine() {
        return line;
    }","  public void test21()  throws Throwable  {
      JexlInfo jexlInfo0 = new JexlInfo(""org.apache.commons.jexl3.internal.<evosuite>"", 22, 69);
      Script script0 = mock(Script.class, new ViolatedAssumptionAnswer());
      doReturn(jexlInfo0).when(script0).getInfo();
      JexlInfo jexlInfo1 = JexlInfo.from(script0);
}"
685,"    public final int getColumn() {
        return column;
    }","  public void test22()  throws Throwable  {
      JexlInfo jexlInfo0 = new JexlInfo(""org.apache.commons.jexl3.internal.<evosuite>"", 22, 69);
      Script script0 = mock(Script.class, new ViolatedAssumptionAnswer());
      doReturn(jexlInfo0).when(script0).getInfo();
      JexlInfo jexlInfo1 = JexlInfo.from(script0);
}"
686,"    public final int getLine() {
        return line;
    }","  public void test23()  throws Throwable  {
      JexlInfo jexlInfo0 = new JexlInfo("": Not supported."", (-637), 4);
      Script script0 = mock(Script.class, new ViolatedAssumptionAnswer());
      doReturn(jexlInfo0).when(script0).getInfo();
      JexlInfo jexlInfo1 = JexlInfo.from(script0);
}"
687,"    public final int getColumn() {
        return column;
    }","  public void test24()  throws Throwable  {
      JexlInfo jexlInfo0 = new JexlInfo("": Not supported."", (-637), 4);
      Script script0 = mock(Script.class, new ViolatedAssumptionAnswer());
      doReturn(jexlInfo0).when(script0).getInfo();
      JexlInfo jexlInfo1 = JexlInfo.from(script0);
}"
688,"    public final int getLine() {
        return line;
    }","  public void test25()  throws Throwable  {
      JexlInfo jexlInfo0 = new JexlInfo(""9Fb2^-j6pi9"", (-2353), (-2117));
      Script script0 = mock(Script.class, new ViolatedAssumptionAnswer());
      doReturn(jexlInfo0).when(script0).getInfo();
      JexlInfo jexlInfo1 = JexlInfo.from(script0);
}"
689,"    public final int getColumn() {
        return column;
    }","  public void test26()  throws Throwable  {
      JexlInfo jexlInfo0 = new JexlInfo(""9Fb2^-j6pi9"", (-2353), (-2117));
      Script script0 = mock(Script.class, new ViolatedAssumptionAnswer());
      doReturn(jexlInfo0).when(script0).getInfo();
      JexlInfo jexlInfo1 = JexlInfo.from(script0);
}"
690,"    public final int getColumn() {
        return column;
    }","  public void test27()  throws Throwable  {
      JexlInfo jexlInfo0 = new JexlInfo(""or/.apache.commons.jexl3.JexJEngine$1"", (-192), 14);
      JexlInfo jexlInfo1 = jexlInfo0.detach();
}"
691,"    public final int getLine() {
        return line;
    }","  public void test28()  throws Throwable  {
      JexlInfo jexlInfo0 = new JexlInfo(""or/.apache.commons.jexl3.JexJEngine$1"", (-192), 14);
      JexlInfo jexlInfo1 = jexlInfo0.detach();
}"
692,"    public final int getLine() {
        return line;
    }","  public void test29()  throws Throwable  {
      JexlInfo jexlInfo0 = new JexlInfo("""", 0, 0);
      JexlInfo jexlInfo1 = jexlInfo0.detach();
}"
693,"    public final int getColumn() {
        return column;
    }","  public void test30()  throws Throwable  {
      JexlInfo jexlInfo0 = new JexlInfo("""", 0, 0);
      JexlInfo jexlInfo1 = jexlInfo0.detach();
}"
694,"    public final int getColumn() {
        return column;
    }","  public void test31()  throws Throwable  {
      JexlInfo jexlInfo0 = new JexlInfo((String) null, 1524, (-2050836905));
      JexlInfo jexlInfo1 = jexlInfo0.detach();
}"
695,"    public final int getLine() {
        return line;
    }","  public void test32()  throws Throwable  {
      JexlInfo jexlInfo0 = new JexlInfo((String) null, 1524, (-2050836905));
      JexlInfo jexlInfo1 = jexlInfo0.detach();
}"
696,"    public final int getLine() {
        return line;
    }","  public void test33()  throws Throwable  {
      JexlInfo jexlInfo0 = new JexlInfo();
      JexlInfo jexlInfo1 = jexlInfo0.at(0, (-3581));
}"
697,"    public final int getColumn() {
        return column;
    }","  public void test34()  throws Throwable  {
      JexlInfo jexlInfo0 = new JexlInfo();
      JexlInfo jexlInfo1 = jexlInfo0.at(0, (-3581));
}"
698,"    public final String getName() {
        return name;
    }","  public void test35()  throws Throwable  {
      JexlInfo jexlInfo0 = new JexlInfo();
      JexlInfo jexlInfo1 = jexlInfo0.at(0, (-3581));
}"
699,"    public final int getLine() {
        return line;
    }","  public void test36()  throws Throwable  {
      JexlInfo jexlInfo0 = new JexlInfo(""or/.apace.commos.jexl.JexJEngine$1"", (-215), (-215));
      JexlInfo jexlInfo1 = jexlInfo0.at((-215), (-1154));
}"
700,"    public final int getColumn() {
        return column;
    }","  public void test37()  throws Throwable  {
      JexlInfo jexlInfo0 = new JexlInfo(""or/.apace.commos.jexl.JexJEngine$1"", (-215), (-215));
      JexlInfo jexlInfo1 = jexlInfo0.at((-215), (-1154));
}"
701,"    public JexlInfo(final String source, final int l, final int c) {
        name = source;
        line = l;
        column = c;
    }","  public void test38()  throws Throwable  {
      JexlInfo jexlInfo0 = null;
      try {
        jexlInfo0 = new JexlInfo((JexlInfo) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.JexlInfo"", e);
      }
  }"
702,"    public final int getLine() {
        return line;
    }","  public void test39()  throws Throwable  {
      JexlInfo jexlInfo0 = new JexlInfo("""", 0, 0);
      int int0 = jexlInfo0.getColumn();
}"
703,"    public final int getColumn() {
        return column;
    }","  public void test40()  throws Throwable  {
      JexlInfo jexlInfo0 = new JexlInfo("""", 0, 0);
      int int0 = jexlInfo0.getColumn();
}"
704,"    public final int getLine() {
        return line;
    }","  public void test41()  throws Throwable  {
      JexlInfo jexlInfo0 = new JexlInfo(""org.apache.commons.jexl3.internal.<evosuite>"", 3662, (-371));
      jexlInfo0.getDetail();
}"
705,"    public final int getColumn() {
        return column;
    }","  public void test42()  throws Throwable  {
      JexlInfo jexlInfo0 = new JexlInfo(""org.apache.commons.jexl3.internal.<evosuite>"", 3662, (-371));
      jexlInfo0.getDetail();
}"
706,"    public final int getColumn() {
        return column;
    }","  public void test43()  throws Throwable  {
      JexlInfo jexlInfo0 = new JexlInfo("""", 0, 0);
      jexlInfo0.getName();
}"
707,"    public final int getLine() {
        return line;
    }","  public void test44()  throws Throwable  {
      JexlInfo jexlInfo0 = new JexlInfo("""", 0, 0);
      jexlInfo0.getName();
}"
708,"    public final String getName() {
        return name;
    }","  public void test45()  throws Throwable  {
      JexlInfo jexlInfo0 = new JexlInfo();
      int int0 = jexlInfo0.getLine();
}"
709,"    public final int getLine() {
        return line;
    }","  public void test46()  throws Throwable  {
      JexlInfo jexlInfo0 = new JexlInfo();
      int int0 = jexlInfo0.getLine();
}"
710,"    public final String getName() {
        return name;
    }","  public void test47()  throws Throwable  {
      JexlInfo jexlInfo0 = new JexlInfo();
      Script script0 = mock(Script.class, new ViolatedAssumptionAnswer());
      doReturn(jexlInfo0).when(script0).getInfo();
      JexlInfo jexlInfo1 = JexlInfo.from(script0);
}"
711,"    public static JexlInfo from(final JexlScript script) {
        return script instanceof Script? ((Script) script).getInfo() :  null;
    }","  public void test48()  throws Throwable  {
      JexlInfo jexlInfo0 = JexlInfo.from((JexlScript) null);
}"
712,"    public final int getColumn() {
        return column;
    }","  public void test49()  throws Throwable  {
      JexlInfo jexlInfo0 = new JexlInfo((String) null, 2040, (-604));
      String string0 = jexlInfo0.toString();
}"
713,"    public String toString() {
        final StringBuilder sb = new StringBuilder(name != null? name : """");
        if (line > 0) {
            sb.append(""@"");
            sb.append(line);
            if (column > 0) {
                sb.append("":"");
                sb.append(column);
            }
        }
        final JexlInfo.Detail dbg = getDetail();
        if (dbg!= null) {
            sb.append(""!["");
            sb.append(dbg.start());
            sb.append("","");
            sb.append(dbg.end());
            sb.append(""]: '"");
            sb.append(dbg.toString());
            sb.append(""'"");
        }
        return sb.toString();
    }","  public void test50()  throws Throwable  {
      JexlInfo jexlInfo0 = new JexlInfo((String) null, 2040, (-604));
      String string0 = jexlInfo0.toString();
}"
714,"    public final int getColumn() {
        return column;
    }","  public void test51()  throws Throwable  {
      JexlInfo jexlInfo0 = new JexlInfo((String) null, 2040, (-604));
      JexlInfo jexlInfo1 = new JexlInfo(jexlInfo0);
}"
715,"    public final int getColumn() {
        return column;
    }","  public void test52()  throws Throwable  {
      JexlInfo jexlInfo0 = new JexlInfo((String) null, 2040, (-604));
      JexlInfo jexlInfo1 = new JexlInfo(jexlInfo0);
}"
716,"    public final int getLine() {
        return line;
    }","  public void test53()  throws Throwable  {
      JexlInfo jexlInfo0 = new JexlInfo((String) null, 2040, (-604));
      JexlInfo jexlInfo1 = new JexlInfo(jexlInfo0);
}"
717,"    public final int getLine() {
        return line;
    }","  public void test54()  throws Throwable  {
      JexlInfo jexlInfo0 = new JexlInfo((String) null, 2040, (-604));
      JexlInfo jexlInfo1 = new JexlInfo(jexlInfo0);
}"
718,"    public String toString() {
        final StringBuilder sb = new StringBuilder(name != null? name : """");
        if (line > 0) {
            sb.append(""@"");
            sb.append(line);
            if (column > 0) {
                sb.append("":"");
                sb.append(column);
            }
        }
        final JexlInfo.Detail dbg = getDetail();
        if (dbg!= null) {
            sb.append(""!["");
            sb.append(dbg.start());
            sb.append("","");
            sb.append(dbg.end());
            sb.append(""]: '"");
            sb.append(dbg.toString());
            sb.append(""'"");
        }
        return sb.toString();
    }","  public void test55()  throws Throwable  {
      JexlInfo jexlInfo0 = new JexlInfo((String) null, 1874, 17);
      String string0 = jexlInfo0.toString();
}"
719,"    public final int getLine() {
        return line;
    }","  public void test56()  throws Throwable  {
      JexlInfo jexlInfo0 = new JexlInfo((String) null, 1874, 17);
      JexlInfo jexlInfo1 = jexlInfo0.at(1874, 1874);
}"
720,"    public final int getColumn() {
        return column;
    }","  public void test57()  throws Throwable  {
      JexlInfo jexlInfo0 = new JexlInfo((String) null, 1874, 17);
      JexlInfo jexlInfo1 = jexlInfo0.at(1874, 1874);
}"
721,"    public final int getLine() {
        return line;
    }","  public void test58()  throws Throwable  {
      JexlInfo jexlInfo0 = new JexlInfo((String) null, 1874, 17);
      JexlInfo jexlInfo1 = jexlInfo0.at(1874, 1874);
}"
722,"    public final int getColumn() {
        return column;
    }","  public void test59()  throws Throwable  {
      JexlInfo jexlInfo0 = new JexlInfo((String) null, 1874, 17);
      JexlInfo jexlInfo1 = jexlInfo0.at(1874, 1874);
}"
723,"    public Boolean isEmpty(final Object object) {
        return isEmpty(object, object == null);
    }","  public void test0()  throws Throwable  {
      MathContext mathContext0 = MathContext.DECIMAL64;
      mathContext0.getPrecision();
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true, mathContext0, Integer.MAX_VALUE);
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.options((JexlOptions) null);
      BigDecimal bigDecimal0 = new BigDecimal(Integer.MAX_VALUE);
      Class<Integer> class0 = Integer.class;
      JexlArithmetic.MapBuilder jexlArithmetic_MapBuilder0 = jexlArithmetic0.mapBuilder(16);
      Object object0 = jexlArithmetic_MapBuilder0.create();
      Pattern pattern0 = JexlArithmetic.FLOAT_PATTERN;
      Number number0 = jexlArithmetic0.narrowBigDecimal(object0, pattern0, bigDecimal0);
      jexlArithmetic1.endsWith(number0, class0);
      jexlArithmetic0.isEmpty(object0, (Boolean) null);
  }"
724,"    public int toInteger(final Object val) {
        if (val == null) {
            controlNullOperand();
            return 0;
        }
        if (val instanceof Double) {
            final Double dval = (Double) val;
            if (Double.isNaN(dval)) {
                return 0;
            }
            return dval.intValue();
        }
        if (val instanceof Number) {
            return ((Number) val).intValue();
        }
        if (val instanceof String) {
            if ("""".equals(val)) {
                return 0;
            }
            return Integer.parseInt((String) val);
        }
        if (val instanceof Boolean) {
            return ((Boolean) val) ? 1 : 0;
        }
        if (val instanceof AtomicBoolean) {
            return ((AtomicBoolean) val).get() ? 1 : 0;
        }
        if (val instanceof Character) {
            return ((Character) val);
        }

        throw new ArithmeticException(""Integer coercion: ""
                + val.getClass().getName() + "":("" + val + "")"");
    }","  public void test1()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigInteger0.nextProbablePrime();
      Number number0 = jexlArithmetic0.narrow(bigInteger0);
      jexlArithmetic0.subtract(number0, number0);
      Float float0 = new Float((-2368.8948));
      jexlArithmetic0.subtract(float0, (Object) null);
      AtomicBoolean atomicBoolean0 = new AtomicBoolean();
      atomicBoolean0.getAndSet(false);
      Object object0 = jexlArithmetic0.not(atomicBoolean0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Integer integer0 = new Integer((-45));
      Integer.getInteger(""positivize"");
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Integer.compareUnsigned((-45), (-45));
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "":("");
      jexlArithmetic0.logicalNot(float0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JexlArithmetic.isMultiplyExact((-32768L), (-1677L), (-1677L));
      jexlArithmetic0.toBigInteger(object0);
      int int0 = JexlArithmetic.BIGD_SCALE;
      jexlArithmetic0.isNegateStable();
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.options((JexlContext) null);
      jexlArithmetic0.startsWith(jexlArithmetic1, (Object) null);
      jexlArithmetic0.positivize((Object) null);
      AtomicBoolean atomicBoolean1 = new AtomicBoolean(true);
      jexlArithmetic1.toInteger(atomicBoolean1);
  }"
725,"    public SetBuilder setBuilder(final int size) {
        return new org.apache.commons.jexl3.internal.SetBuilder(size);
    }","  public void test2()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigInteger0.nextProbablePrime();
      Float float0 = new Float((-2368.8948));
      AtomicBoolean atomicBoolean0 = new AtomicBoolean();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Integer integer0 = new Integer((-45));
      Integer.getInteger(""positivize"");
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Integer.compareUnsigned((-45), (-45));
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JexlArithmetic.isMultiplyExact((-32768L), (-1677L), (-1677L));
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      Integer integer1 = new Integer(0);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      jexlArithmetic0.narrowBigDecimal(""positivize"", integer1, bigDecimal0);
      jexlArithmetic0.add((Object) null, ""positivize"");
      JexlArithmetic.SetBuilder jexlArithmetic_SetBuilder0 = jexlArithmetic0.setBuilder(2147483637);
      jexlArithmetic_SetBuilder0.create();
  }"
726,"    public Number narrowNumber(final Number original, final Class<?> narrow) {
        if (original == null) {
            return null;
        }
        Number result = original;
        if (original instanceof BigDecimal) {
            final BigDecimal bigd = (BigDecimal) original;
            // if it's bigger than a double it can't be narrowed
            if (bigd.compareTo(BIGD_DOUBLE_MAX_VALUE) > 0
                || bigd.compareTo(BIGD_DOUBLE_MIN_VALUE) < 0) {
                return original;
            }
            try {
                final long l = bigd.longValueExact();
                // coerce to int when possible (int being so often used in method parms)
                if (narrowAccept(narrow, Integer.class)
                        && l <= Integer.MAX_VALUE
                        && l >= Integer.MIN_VALUE) {
                    return (int) l;
                }
                if (narrowAccept(narrow, Long.class)) {
                    return l;
                }
            } catch (final ArithmeticException xa) {
                // ignore, no exact value possible
            }
        }
        if (original instanceof Double || original instanceof Float) {
            final double value = original.doubleValue();
            if (narrowAccept(narrow, Float.class)
                    && value <= Float.MAX_VALUE
                    && value >= Float.MIN_VALUE) {
                result = result.floatValue();
            }
            // else it fits in a double only
        } else {
            if (original instanceof BigInteger) {
                final BigInteger bigi = (BigInteger) original;
                // if it's bigger than a Long it can't be narrowed
                if (bigi.compareTo(BIGI_LONG_MAX_VALUE) > 0
                        || bigi.compareTo(BIGI_LONG_MIN_VALUE) < 0) {
                    return original;
                }
            }
            final long value = original.longValue();
            if (narrowAccept(narrow, Byte.class)
                    && value <= Byte.MAX_VALUE
                    && value >= Byte.MIN_VALUE) {
                // it will fit in a byte
                result = (byte) value;
            } else if (narrowAccept(narrow, Short.class)
                    && value <= Short.MAX_VALUE
                    && value >= Short.MIN_VALUE) {
                result = (short) value;
            } else if (narrowAccept(narrow, Integer.class)
                    && value <= Integer.MAX_VALUE
                    && value >= Integer.MIN_VALUE) {
                result = (int) value;
            }
            // else it fits in a long
        }
        return result;
    }","  public void test3()  throws Throwable  {
      MathContext mathContext0 = MathContext.DECIMAL64;
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true, mathContext0, Integer.MAX_VALUE);
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.options((JexlOptions) null);
      BigDecimal bigDecimal0 = new BigDecimal(Integer.MAX_VALUE);
      Class<Integer> class0 = Integer.class;
      jexlArithmetic1.narrowNumber(bigDecimal0, class0);
  }"
727,"    public Object multiply(final Object left, final Object right) {
        if (left == null && right == null) {
            return controlNullNullOperands();
        }
        // if both (non null) args fit as int
        final Number ln = asLongNumber(left);
        final Number rn = asLongNumber(right);
        if (ln != null && rn != null) {
            final long x = ln.longValue();
            final long y = rn.longValue();
            final long result = x * y;
            // detect overflow
            if (!isMultiplyExact(x, y, result)) {
                return BigInteger.valueOf(x).multiply(BigInteger.valueOf(y));
            }
            return narrowLong(left, right, result);
        }
        // if either are bigdecimal use that type
        if (left instanceof BigDecimal || right instanceof BigDecimal) {
            final BigDecimal l = toBigDecimal(left);
            final BigDecimal r = toBigDecimal(right);
            final BigDecimal result = l.multiply(r, getMathContext());
            return narrowBigDecimal(left, right, result);
        }
        // if either are floating point (double or float) use double
        if (isFloatingPointNumber(left) || isFloatingPointNumber(right)) {
            final double l = toDouble(left);
            final double r = toDouble(right);
            return l * r;
        }
        // otherwise treat as integers
        final BigInteger l = toBigInteger(left);
        final BigInteger r = toBigInteger(right);
        final BigInteger result = l.multiply(r);
        return narrowBigInteger(left, right, result);
    }","  public void test4()  throws Throwable  {
      int int0 = 3475;
      Random.setNextRandom(3475);
      MathContext mathContext0 = MathContext.UNLIMITED;
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true, mathContext0, 3475);
      Integer integer0 = new Integer(3475);
      FileSystemHandling.shouldAllThrowIOExceptions();
      BigDecimal bigDecimal0 = new BigDecimal((-1L), mathContext0);
      Number number0 = jexlArithmetic0.narrowBigDecimal(integer0, integer0, bigDecimal0);
      jexlArithmetic0.empty(number0);
      RoundingMode roundingMode0 = RoundingMode.HALF_DOWN;
      MathContext mathContext1 = new MathContext(3475, roundingMode0);
      // Undeclared exception!
      try { 
        jexlArithmetic0.multiply(bigDecimal0, mathContext1);
        fail(""Expecting exception: ArithmeticException"");
      } catch(ArithmeticException e) {
         //
         // BigDecimal coercion: java.math.MathContext:(precision=3475 roundingMode=HALF_DOWN)
         //
         verifyException(""org.apache.commons.jexl3.JexlArithmetic"", e);
      }
  }"
728,"    public Number narrowNumber(final Number original, final Class<?> narrow) {
        if (original == null) {
            return null;
        }
        Number result = original;
        if (original instanceof BigDecimal) {
            final BigDecimal bigd = (BigDecimal) original;
            // if it's bigger than a double it can't be narrowed
            if (bigd.compareTo(BIGD_DOUBLE_MAX_VALUE) > 0
                || bigd.compareTo(BIGD_DOUBLE_MIN_VALUE) < 0) {
                return original;
            }
            try {
                final long l = bigd.longValueExact();
                // coerce to int when possible (int being so often used in method parms)
                if (narrowAccept(narrow, Integer.class)
                        && l <= Integer.MAX_VALUE
                        && l >= Integer.MIN_VALUE) {
                    return (int) l;
                }
                if (narrowAccept(narrow, Long.class)) {
                    return l;
                }
            } catch (final ArithmeticException xa) {
                // ignore, no exact value possible
            }
        }
        if (original instanceof Double || original instanceof Float) {
            final double value = original.doubleValue();
            if (narrowAccept(narrow, Float.class)
                    && value <= Float.MAX_VALUE
                    && value >= Float.MIN_VALUE) {
                result = result.floatValue();
            }
            // else it fits in a double only
        } else {
            if (original instanceof BigInteger) {
                final BigInteger bigi = (BigInteger) original;
                // if it's bigger than a Long it can't be narrowed
                if (bigi.compareTo(BIGI_LONG_MAX_VALUE) > 0
                        || bigi.compareTo(BIGI_LONG_MIN_VALUE) < 0) {
                    return original;
                }
            }
            final long value = original.longValue();
            if (narrowAccept(narrow, Byte.class)
                    && value <= Byte.MAX_VALUE
                    && value >= Byte.MIN_VALUE) {
                // it will fit in a byte
                result = (byte) value;
            } else if (narrowAccept(narrow, Short.class)
                    && value <= Short.MAX_VALUE
                    && value >= Short.MIN_VALUE) {
                result = (short) value;
            } else if (narrowAccept(narrow, Integer.class)
                    && value <= Integer.MAX_VALUE
                    && value >= Integer.MIN_VALUE) {
                result = (int) value;
            }
            // else it fits in a long
        }
        return result;
    }","  public void test5()  throws Throwable  {
      JexlOptions jexlOptions0 = new JexlOptions();
      MathContext mathContext0 = new MathContext(0);
      jexlOptions0.copy();
      MathContext mathContext1 = MathContext.DECIMAL128;
      mathContext1.getRoundingMode();
      Long long0 = new Long(314L);
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true, mathContext1, 0);
      Boolean boolean0 = Boolean.FALSE;
      MathContext mathContext2 = MathContext.DECIMAL32;
      BigInteger bigInteger0 = BigInteger.ZERO;
      Float float0 = new Float((float) 0);
      Class<Float> class0 = Float.class;
      jexlArithmetic0.narrowNumber(float0, class0);
  }"
729,"    public ArrayBuilder arrayBuilder(final int size) {
        return new org.apache.commons.jexl3.internal.ArrayBuilder(size);
    }","  public void test6()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      MathContext mathContext0 = MathContext.DECIMAL64;
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.createWithOptions(false, mathContext0, 15);
      Integer integer0 = new Integer(15);
      Integer integer1 = Integer.getInteger(""<="", integer0);
      Integer.compareUnsigned(42, 321);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Integer.toUnsignedString(15);
      mathContext0.getPrecision();
      Byte byte0 = new Byte((byte)53);
      Byte.toUnsignedLong((byte)0);
      jexlArithmetic1.subtract(integer1, byte0);
      jexlArithmetic1.arrayBuilder((byte)53);
      AtomicBoolean atomicBoolean0 = new AtomicBoolean();
      jexlArithmetic1.endsWith(atomicBoolean0, ""15"");
      Boolean.logicalXor(false, false);
      jexlArithmetic0.toBoolean((Object) null);
      // Undeclared exception!
      try { 
        jexlArithmetic1.arrayBuilder(Integer.MIN_VALUE);
        fail(""Expecting exception: NegativeArraySizeException"");
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.internal.ArrayBuilder"", e);
      }
  }"
730,"    public BigInteger toBigInteger(final Object val) {
        if (val == null) {
            controlNullOperand();
            return BigInteger.ZERO;
        }
        if (val instanceof BigInteger) {
            return (BigInteger) val;
        }
        if (val instanceof Double) {
            final Double dval = (Double) val;
            if (Double.isNaN(dval)) {
                return BigInteger.ZERO;
            }
            return BigInteger.valueOf(dval.longValue());
        }
        if (val instanceof BigDecimal) {
            return ((BigDecimal) val).toBigInteger();
        }
        if (val instanceof Number) {
            return BigInteger.valueOf(((Number) val).longValue());
        }
        if (val instanceof Boolean) {
            return BigInteger.valueOf(((Boolean) val) ? 1L : 0L);
        }
        if (val instanceof AtomicBoolean) {
            return BigInteger.valueOf(((AtomicBoolean) val).get() ? 1L : 0L);
        }
        if (val instanceof String) {
            final String string = (String) val;
            if ("""".equals(string)) {
                return BigInteger.ZERO;
            }
            return new BigInteger(string);
        }
        if (val instanceof Character) {
            final int i = ((Character) val);
            return BigInteger.valueOf(i);
        }

        throw new ArithmeticException(""BigInteger coercion: ""
                + val.getClass().getName() + "":("" + val + "")"");
    }","  public void test7()  throws Throwable  {
      JexlArithmetic.isMultiplyExact((-853L), 10L, 89L);
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true);
      JexlArithmetic jexlArithmetic1 = new JexlArithmetic(true);
      Double double0 = new Double(10L);
      Boolean boolean0 = new Boolean(""Object negate:("");
      Boolean boolean1 = jexlArithmetic1.isEmpty((Object) double0, boolean0);
      Object object0 = jexlArithmetic1.logicalNot(boolean1);
      jexlArithmetic0.toDouble(object0);
      Long long0 = new Long((-756L));
      Float float0 = new Float(45.0);
      Object object1 = jexlArithmetic0.divide(long0, float0);
      jexlArithmetic0.toBigInteger(object1);
  }"
731,"    protected BigDecimal roundBigDecimal(final BigDecimal number) {
        final int mscale = getMathScale();
        if (mscale >= 0) {
            return number.setScale(mscale, getMathContext().getRoundingMode());
        }
        return number;
    }","  public void test8()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true, (MathContext) null, 31);
      JexlOptions jexlOptions0 = new JexlOptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      jexlArithmetic0.contains((Object) null, (Object) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.options(jexlOptions0);
      Long long0 = new Long(306783378L);
      jexlArithmetic1.logicalNot(long0);
      JexlArithmetic.MapBuilder jexlArithmetic_MapBuilder0 = jexlArithmetic1.mapBuilder(31);
      Object object0 = jexlArithmetic_MapBuilder0.create();
      Long.getLong(""GvxPy~q"");
      jexlArithmetic1.empty(object0);
      String string0 = ""DidAnJXpO{"";
      jexlArithmetic0.matches(""DidAnJXpO{"", object0);
      JexlArithmetic jexlArithmetic2 = jexlArithmetic0.options(jexlOptions0);
      MapContext mapContext0 = new MapContext();
      jexlArithmetic2.options((JexlContext) mapContext0);
      jexlArithmetic0.isPositivizeStable();
      // Undeclared exception!
      try { 
        jexlArithmetic1.roundBigDecimal((BigDecimal) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.JexlArithmetic"", e);
      }
  }"
732,"    protected static boolean isMultiplyExact(final long x, final long y, final long r) {
        final long ax = Math.abs(x);
        final long ay = Math.abs(y);
        return !(((ax | ay) >>> (Integer.SIZE - 1) != 0)
                  && (((y != 0) && (r / y != x))
                      || (x == Long.MIN_VALUE && y == -1)));
    }","  public void test9()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-79);
      byteArray0[1] = (byte)65;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)87;
      byteArray0[4] = (byte)120;
      byteArray0[5] = (byte) (-114);
      byteArray0[6] = (byte) (-2);
      byteArray0[7] = (byte) (-71);
      byteArray0[8] = (byte)61;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      Class<Long> class0 = Long.class;
      jexlArithmetic0.narrowNumber(bigInteger0, class0);
      Double double0 = new Double((-2037.0));
      jexlArithmetic0.toBoolean(double0);
      JexlArithmetic.isMultiplyExact(2114L, (byte)87, 37934401659L);
  }"
733,"    public Number narrowNumber(final Number original, final Class<?> narrow) {
        if (original == null) {
            return null;
        }
        Number result = original;
        if (original instanceof BigDecimal) {
            final BigDecimal bigd = (BigDecimal) original;
            // if it's bigger than a double it can't be narrowed
            if (bigd.compareTo(BIGD_DOUBLE_MAX_VALUE) > 0
                || bigd.compareTo(BIGD_DOUBLE_MIN_VALUE) < 0) {
                return original;
            }
            try {
                final long l = bigd.longValueExact();
                // coerce to int when possible (int being so often used in method parms)
                if (narrowAccept(narrow, Integer.class)
                        && l <= Integer.MAX_VALUE
                        && l >= Integer.MIN_VALUE) {
                    return (int) l;
                }
                if (narrowAccept(narrow, Long.class)) {
                    return l;
                }
            } catch (final ArithmeticException xa) {
                // ignore, no exact value possible
            }
        }
        if (original instanceof Double || original instanceof Float) {
            final double value = original.doubleValue();
            if (narrowAccept(narrow, Float.class)
                    && value <= Float.MAX_VALUE
                    && value >= Float.MIN_VALUE) {
                result = result.floatValue();
            }
            // else it fits in a double only
        } else {
            if (original instanceof BigInteger) {
                final BigInteger bigi = (BigInteger) original;
                // if it's bigger than a Long it can't be narrowed
                if (bigi.compareTo(BIGI_LONG_MAX_VALUE) > 0
                        || bigi.compareTo(BIGI_LONG_MIN_VALUE) < 0) {
                    return original;
                }
            }
            final long value = original.longValue();
            if (narrowAccept(narrow, Byte.class)
                    && value <= Byte.MAX_VALUE
                    && value >= Byte.MIN_VALUE) {
                // it will fit in a byte
                result = (byte) value;
            } else if (narrowAccept(narrow, Short.class)
                    && value <= Short.MAX_VALUE
                    && value >= Short.MIN_VALUE) {
                result = (short) value;
            } else if (narrowAccept(narrow, Integer.class)
                    && value <= Integer.MAX_VALUE
                    && value >= Integer.MIN_VALUE) {
                result = (int) value;
            }
            // else it fits in a long
        }
        return result;
    }","  public void test10()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      Double double0 = new Double(2435.0);
      Boolean boolean0 = jexlArithmetic0.isEmpty((Object) double0);
      BigInteger bigInteger0 = JexlArithmetic.BIGI_LONG_MAX_VALUE;
      jexlArithmetic0.and(boolean0, bigInteger0);
      AtomicBoolean atomicBoolean0 = new AtomicBoolean(false);
      Class<Integer> class0 = Integer.class;
      jexlArithmetic0.narrowNumber(bigInteger0, class0);
  }"
734,"    public Object add(final Object left, final Object right) {
        if (left == null && right == null) {
            return controlNullNullOperands();
        }
        final boolean strconcat = strict
                            ? left instanceof String || right instanceof String
                            : left instanceof String && right instanceof String;
        if (!strconcat) {
            try {
                // if both (non null) args fit as long
                final Number ln = asLongNumber(left);
                final Number rn = asLongNumber(right);
                if (ln != null && rn != null) {
                    final long x = ln.longValue();
                    final long y = rn.longValue();
                    final long result = x + y;
                    // detect overflow, see java8 Math.addExact
                    if (((x ^ result) & (y ^ result)) < 0) {
                        return BigInteger.valueOf(x).add(BigInteger.valueOf(y));
                    }
                    return narrowLong(left, right, result);
                }
                // if either are bigdecimal use that type
                if (left instanceof BigDecimal || right instanceof BigDecimal) {
                    final BigDecimal l = toBigDecimal(left);
                    final BigDecimal r = toBigDecimal(right);
                    final BigDecimal result = l.add(r, getMathContext());
                    return narrowBigDecimal(left, right, result);
                }
                // if either are floating point (double or float) use double
                if (isFloatingPointNumber(left) || isFloatingPointNumber(right)) {
                    final double l = toDouble(left);
                    final double r = toDouble(right);
                    return l + r;
                }
                // otherwise treat as (big) integers
                final BigInteger l = toBigInteger(left);
                final BigInteger r = toBigInteger(right);
                final BigInteger result = l.add(r);
                return narrowBigInteger(left, right, result);
            } catch (final java.lang.NumberFormatException nfe) {
                if (left == null || right == null) {
                    controlNullOperand();
                }
            }
        }
        return toString(left).concat(toString(right));
    }","  public void test11()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ""|97Ftp1f-"");
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true);
      JexlArithmetic jexlArithmetic1 = new JexlArithmetic(true);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      EvoSuiteFile evoSuiteFile1 = null;
      // Undeclared exception!
      try { 
        jexlArithmetic0.add((Object) null, bigDecimal0);
        fail(""Expecting exception: ArithmeticException"");
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.JexlArithmetic"", e);
      }
  }"
735,"    public Object positivize(final Object val) {
        if (val == null) {
            controlNullOperand();
            return null;
        }
        if (val instanceof Short) {
            return ((Short) val).intValue();
        }
        if (val instanceof Byte) {
            return ((Byte) val).intValue();
        }
        if (val instanceof Number) {
            return val;
        }
        if (val instanceof Character) {
            return (int) (Character) val;
        }
        if (val instanceof Boolean) {
            return val;
        }
        if (val instanceof AtomicBoolean) {
            return ((AtomicBoolean) val).get();
        }
        throw new ArithmeticException(""Object positivize:("" + val + "")"");
    }","  public void test12()  throws Throwable  {
      MathContext mathContext0 = MathContext.UNLIMITED;
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false, mathContext0, (-2037));
      jexlArithmetic0.not(mathContext0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      BigInteger bigInteger0 = BigInteger.ONE;
      Class<String> class0 = String.class;
      jexlArithmetic0.narrowNumber(bigInteger0, class0);
      jexlArithmetic0.controlNullOperand();
      Short short0 = new Short((short)1);
      FileSystemHandling.shouldAllThrowIOExceptions();
      BigDecimal bigDecimal0 = new BigDecimal(1.7976931348623157E308);
      Long long0 = new Long(2170L);
      Number number0 = jexlArithmetic0.narrowLong(bigDecimal0, long0, (-2037));
      jexlArithmetic0.positivize(number0);
      AtomicBoolean atomicBoolean0 = new AtomicBoolean(true);
      Integer integer0 = new Integer((short)1);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      jexlArithmetic0.compare(number0, number0, (String) null);
      jexlArithmetic0.lessThan(atomicBoolean0, bigDecimal0);
      jexlArithmetic0.mod(short0, number0);
      Character character0 = Character.valueOf('B');
      jexlArithmetic0.positivize(character0);
  }"
736,"    protected Object controlNullNullOperands() {
        if (isStrict()) {
            throw new NullOperand();
        }
        return 0;
    }","  public void test13()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      AtomicBoolean atomicBoolean0 = new AtomicBoolean();
      jexlArithmetic0.toLong(atomicBoolean0);
      Byte byte0 = new Byte((byte)72);
      Double.isFinite((byte)72);
      Byte.toUnsignedInt((byte) (-89));
      Byte.compare((byte) (-83), (byte)72);
      Byte byte1 = new Byte((byte)72);
      jexlArithmetic0.or("""", byte1);
      JexlOptions jexlOptions0 = new JexlOptions();
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.options(jexlOptions0);
      Float.valueOf((float) (byte)72);
      jexlOptions0.setCancellable(true);
      Integer integer0 = new Integer(167);
      // Undeclared exception!
      try { 
        jexlArithmetic1.controlNullNullOperands();
        fail(""Expecting exception: ArithmeticException"");
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.JexlArithmetic"", e);
      }
  }"
737,"    protected int compare(final Object left, final Object right, final String operator) {
        if (left != null && right != null) {
            if (left instanceof BigDecimal || right instanceof BigDecimal) {
                final BigDecimal l = toBigDecimal(left);
                final BigDecimal r = toBigDecimal(right);
                return l.compareTo(r);
            }
            if (left instanceof BigInteger || right instanceof BigInteger) {
                final BigInteger l = toBigInteger(left);
                final BigInteger r = toBigInteger(right);
                return l.compareTo(r);
            }
            if (isFloatingPoint(left) || isFloatingPoint(right)) {
                final double lhs = toDouble(left);
                final double rhs = toDouble(right);
                if (Double.isNaN(lhs)) {
                    if (Double.isNaN(rhs)) {
                        return 0;
                    }
                    return -1;
                }
                if (Double.isNaN(rhs)) {
                    // lhs is not NaN
                    return +1;
                }
                if (lhs < rhs) {
                    return -1;
                }
                if (lhs > rhs) {
                    return +1;
                }
                return 0;
            }
            if (isNumberable(left) || isNumberable(right)) {
                final long lhs = toLong(left);
                final long rhs = toLong(right);
                if (lhs < rhs) {
                    return -1;
                }
                if (lhs > rhs) {
                    return +1;
                }
                return 0;
            }
            if (left instanceof String || right instanceof String) {
                return toString(left).compareTo(toString(right));
            }
            if (""=="".equals(operator)) {
                return left.equals(right) ? 0 : -1;
            }
            if (left instanceof Comparable<?>) {
                @SuppressWarnings(""unchecked"") // OK because of instanceof check above
                final Comparable<Object> comparable = (Comparable<Object>) left;
                return comparable.compareTo(right);
            }
            if (right instanceof Comparable<?>) {
                @SuppressWarnings(""unchecked"") // OK because of instanceof check above
                final Comparable<Object> comparable = (Comparable<Object>) right;
                return comparable.compareTo(left);
            }
        }
        throw new ArithmeticException(""Object comparison:("" + left + "" "" + operator + "" "" + right + "")"");
    }","  public void test14()  throws Throwable  {
      boolean boolean0 = true;
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true);
      String string0 = """";
      jexlArithmetic0.toDouble("""");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Long.getLong("""");
      jexlArithmetic0.toLong("""");
      String string1 = ""<="";
      // Undeclared exception!
      try { 
        jexlArithmetic0.compare((Object) null, """", ""<="");
        fail(""Expecting exception: ArithmeticException"");
      } catch(ArithmeticException e) {
         //
         // Object comparison:(null <= )
         //
         verifyException(""org.apache.commons.jexl3.JexlArithmetic"", e);
      }
  }"
738,"    public Object add(final Object left, final Object right) {
        if (left == null && right == null) {
            return controlNullNullOperands();
        }
        final boolean strconcat = strict
                            ? left instanceof String || right instanceof String
                            : left instanceof String && right instanceof String;
        if (!strconcat) {
            try {
                // if both (non null) args fit as long
                final Number ln = asLongNumber(left);
                final Number rn = asLongNumber(right);
                if (ln != null && rn != null) {
                    final long x = ln.longValue();
                    final long y = rn.longValue();
                    final long result = x + y;
                    // detect overflow, see java8 Math.addExact
                    if (((x ^ result) & (y ^ result)) < 0) {
                        return BigInteger.valueOf(x).add(BigInteger.valueOf(y));
                    }
                    return narrowLong(left, right, result);
                }
                // if either are bigdecimal use that type
                if (left instanceof BigDecimal || right instanceof BigDecimal) {
                    final BigDecimal l = toBigDecimal(left);
                    final BigDecimal r = toBigDecimal(right);
                    final BigDecimal result = l.add(r, getMathContext());
                    return narrowBigDecimal(left, right, result);
                }
                // if either are floating point (double or float) use double
                if (isFloatingPointNumber(left) || isFloatingPointNumber(right)) {
                    final double l = toDouble(left);
                    final double r = toDouble(right);
                    return l + r;
                }
                // otherwise treat as (big) integers
                final BigInteger l = toBigInteger(left);
                final BigInteger r = toBigInteger(right);
                final BigInteger result = l.add(r);
                return narrowBigInteger(left, right, result);
            } catch (final java.lang.NumberFormatException nfe) {
                if (left == null || right == null) {
                    controlNullOperand();
                }
            }
        }
        return toString(left).concat(toString(right));
    }","  public void test15()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      MapContext mapContext0 = new MapContext((Map<String, Object>) null);
      mapContext0.set(""~IAduhvoX"", (Object) null);
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.options((JexlContext) mapContext0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      hashMap0.put(""]n^GY_8'"", jexlArithmetic0);
      mapContext0.set("")"", "")"");
      Boolean boolean0 = Boolean.FALSE;
      Boolean.logicalXor(true, true);
      jexlArithmetic1.contains(mapContext0, boolean0);
      Long long0 = new Long(324L);
      Long.min((-5172L), 324L);
      jexlArithmetic1.contains(hashMap0, ""]n^GY_8'"");
      Long.toUnsignedString(16380L);
      // Undeclared exception!
      try { 
        jexlArithmetic1.add(long0, mapContext0);
        fail(""Expecting exception: ArithmeticException"");
      } catch(ArithmeticException e) {
         //
         // BigInteger coercion: org.apache.commons.jexl3.MapContext:(org.apache.commons.jexl3.MapContext@2)
         //
         verifyException(""org.apache.commons.jexl3.JexlArithmetic"", e);
      }
  }"
739,"    public Object mod(final Object left, final Object right) {
        if (left == null && right == null) {
            return controlNullNullOperands();
        }
        // if both (non null) args fit as long
        final Number ln = asLongNumber(left);
        final Number rn = asLongNumber(right);
        if (ln != null && rn != null) {
            final long x = ln.longValue();
            final long y = rn.longValue();
            if (y == 0L) {
                throw new ArithmeticException(""%"");
            }
            final long result = x % y;
            return narrowLong(left, right,  result);
        }
        // if either are bigdecimal use that type
        if (left instanceof BigDecimal || right instanceof BigDecimal) {
            final BigDecimal l = toBigDecimal(left);
            final BigDecimal r = toBigDecimal(right);
            if (BigDecimal.ZERO.equals(r)) {
                throw new ArithmeticException(""%"");
            }
            final BigDecimal remainder = l.remainder(r, getMathContext());
            return narrowBigDecimal(left, right, remainder);
        }
        // if either are floating point (double or float) use double
        if (isFloatingPointNumber(left) || isFloatingPointNumber(right)) {
            final double l = toDouble(left);
            final double r = toDouble(right);
            if (r == 0.0) {
                throw new ArithmeticException(""%"");
            }
            return l % r;
        }
        // otherwise treat as integers
        final BigInteger l = toBigInteger(left);
        final BigInteger r = toBigInteger(right);
        if (BigInteger.ZERO.equals(r)) {
            throw new ArithmeticException(""%"");
        }
        final BigInteger result = l.mod(r);
        return narrowBigInteger(left, right, result);
    }","  public void test16()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigInteger0.nextProbablePrime();
      Float float0 = new Float((-2368.8948));
      Object object0 = null;
      AtomicBoolean atomicBoolean0 = new AtomicBoolean();
      String string0 = ""positivize"";
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Integer integer0 = new Integer((-45));
      Integer.getInteger(""positivize"");
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Integer.compareUnsigned((-45), (-45));
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "":("");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JexlArithmetic.isMultiplyExact((-32768L), (-1677L), (-1677L));
      int int0 = JexlArithmetic.BIGD_SCALE;
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      Integer integer1 = new Integer((-1));
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      BigDecimal bigDecimal1 = new BigDecimal(127L);
      // Undeclared exception!
      try { 
        jexlArithmetic0.mod(bigDecimal1, (Object) null);
        fail(""Expecting exception: ArithmeticException"");
      } catch(ArithmeticException e) {
         //
         // %
         //
         verifyException(""org.apache.commons.jexl3.JexlArithmetic"", e);
      }
  }"
740,"    public BigInteger toBigInteger(final Object val) {
        if (val == null) {
            controlNullOperand();
            return BigInteger.ZERO;
        }
        if (val instanceof BigInteger) {
            return (BigInteger) val;
        }
        if (val instanceof Double) {
            final Double dval = (Double) val;
            if (Double.isNaN(dval)) {
                return BigInteger.ZERO;
            }
            return BigInteger.valueOf(dval.longValue());
        }
        if (val instanceof BigDecimal) {
            return ((BigDecimal) val).toBigInteger();
        }
        if (val instanceof Number) {
            return BigInteger.valueOf(((Number) val).longValue());
        }
        if (val instanceof Boolean) {
            return BigInteger.valueOf(((Boolean) val) ? 1L : 0L);
        }
        if (val instanceof AtomicBoolean) {
            return BigInteger.valueOf(((AtomicBoolean) val).get() ? 1L : 0L);
        }
        if (val instanceof String) {
            final String string = (String) val;
            if ("""".equals(string)) {
                return BigInteger.ZERO;
            }
            return new BigInteger(string);
        }
        if (val instanceof Character) {
            final int i = ((Character) val);
            return BigInteger.valueOf(i);
        }

        throw new ArithmeticException(""BigInteger coercion: ""
                + val.getClass().getName() + "":("" + val + "")"");
    }","  public void test17()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true);
      AtomicBoolean atomicBoolean0 = new AtomicBoolean(false);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      jexlArithmetic0.equals((Object) atomicBoolean0, (Object) atomicBoolean0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Double double0 = new Double(55.750192);
      jexlArithmetic0.toInteger(double0);
      jexlArithmetic0.arrayBuilder(55);
      jexlArithmetic0.mapBuilder(2435);
      Double double1 = new Double(55);
      jexlArithmetic0.contains(double1, fileSystemHandling0);
      Random.setNextRandom(10);
      jexlArithmetic0.toBigInteger(atomicBoolean0);
  }"
741,"    public Boolean startsWith(final Object left, final Object right) {
        if (left == null && right == null) {
            //if both are null L == R
            return true;
        }
        if (left == null || right == null) {
            // we know both aren't null, therefore L != R
            return false;
        }
        if (left instanceof CharSequence) {
            return (toString(left)).startsWith(toString(right));
        }
        return null;
    }","  public void test18()  throws Throwable  {
      boolean boolean0 = false;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      MathContext mathContext0 = MathContext.DECIMAL128;
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      Short short0 = new Short((short) (-2589));
      Object object0 = jexlArithmetic0.bitwiseOr(short0, short0);
      Long long0 = new Long((short) (-2589));
      BigDecimal bigDecimal0 = new BigDecimal(Integer.MAX_VALUE);
      jexlArithmetic0.narrowBigDecimal(long0, bigDecimal0, bigDecimal0);
      jexlArithmetic0.startsWith(mathContext0, object0);
      try { 
        Long.parseUnsignedLong(""java.lang.String@0000000006"", Integer.MAX_VALUE);
        fail(""Expecting exception: NumberFormatException"");
      } catch(NumberFormatException e) {
         //
         // radix 2147483647 greater than Character.MAX_RADIX
         //
         verifyException(""java.lang.Long"", e);
      }
  }"
742,"    public boolean lessThanOrEqual(final Object left, final Object right) {
        if (left == right) {
            return true;
        }
        if (left == null || right == null) {
            return false;
        }
        return compare(left, right, ""<="") <= 0;
    }","  public void test19()  throws Throwable  {
      JexlOptions jexlOptions0 = new JexlOptions();
      jexlOptions0.getMathContext();
      jexlOptions0.setMathScale(720);
      int int0 = 968;
      jexlOptions0.setMathScale(1645);
      jexlOptions0.setLexicalShade(true);
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true);
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.createWithOptions(true, (MathContext) null, 968);
      BigDecimal bigDecimal0 = new BigDecimal((long) 968);
      Class<AtomicBoolean> class0 = AtomicBoolean.class;
      jexlArithmetic0.narrowNumber(bigDecimal0, class0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte byte0 = (byte) (-2);
      JexlArithmetic jexlArithmetic2 = jexlArithmetic1.options(jexlOptions0);
      // Undeclared exception!
      try { 
        jexlArithmetic2.lessThanOrEqual(jexlOptions0, class0);
        fail(""Expecting exception: ArithmeticException"");
      } catch(ArithmeticException e) {
         //
         // Object comparison:(org.apache.commons.jexl3.JexlOptions@1 <= class java.util.concurrent.atomic.AtomicBoolean)
         //
         verifyException(""org.apache.commons.jexl3.JexlArithmetic"", e);
      }
  }"
743,"    public Object negate(final Object val) {
        if (val == null) {
            controlNullOperand();
            return null;
        }
        if (val instanceof Integer) {
            return -((Integer) val);
        }
        if (val instanceof Double) {
            return - ((Double) val);
        }
        if (val instanceof Long) {
            return -((Long) val);
        }
        if (val instanceof BigDecimal) {
            return ((BigDecimal) val).negate();
        }
        if (val instanceof BigInteger) {
            return ((BigInteger) val).negate();
        }
        if (val instanceof Float) {
            return -((Float) val);
        }
        if (val instanceof Short) {
            return (short) -((Short) val);
        }
        if (val instanceof Byte) {
            return (byte) -((Byte) val);
        }
        if (val instanceof Boolean) {
            return !(Boolean) val;
        }
        if (val instanceof AtomicBoolean) {
            return !((AtomicBoolean) val).get();
        }
        throw new ArithmeticException(""Object negate:("" + val + "")"");
    }","  public void test20()  throws Throwable  {
      MathContext mathContext0 = MathContext.UNLIMITED;
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false, mathContext0, (-2859));
      Short short0 = new Short((short) (-2595));
      Object object0 = jexlArithmetic0.bitwiseOr(short0, short0);
      Byte byte0 = new Byte((byte)22);
      jexlArithmetic0.greaterThan(short0, byte0);
      jexlArithmetic0.startsWith(mathContext0, object0);
      jexlArithmetic0.startsWith((Object) null, (Object) null);
      Byte byte1 = new Byte((byte)22);
      jexlArithmetic0.negate(byte1);
  }"
744,"    protected int compare(final Object left, final Object right, final String operator) {
        if (left != null && right != null) {
            if (left instanceof BigDecimal || right instanceof BigDecimal) {
                final BigDecimal l = toBigDecimal(left);
                final BigDecimal r = toBigDecimal(right);
                return l.compareTo(r);
            }
            if (left instanceof BigInteger || right instanceof BigInteger) {
                final BigInteger l = toBigInteger(left);
                final BigInteger r = toBigInteger(right);
                return l.compareTo(r);
            }
            if (isFloatingPoint(left) || isFloatingPoint(right)) {
                final double lhs = toDouble(left);
                final double rhs = toDouble(right);
                if (Double.isNaN(lhs)) {
                    if (Double.isNaN(rhs)) {
                        return 0;
                    }
                    return -1;
                }
                if (Double.isNaN(rhs)) {
                    // lhs is not NaN
                    return +1;
                }
                if (lhs < rhs) {
                    return -1;
                }
                if (lhs > rhs) {
                    return +1;
                }
                return 0;
            }
            if (isNumberable(left) || isNumberable(right)) {
                final long lhs = toLong(left);
                final long rhs = toLong(right);
                if (lhs < rhs) {
                    return -1;
                }
                if (lhs > rhs) {
                    return +1;
                }
                return 0;
            }
            if (left instanceof String || right instanceof String) {
                return toString(left).compareTo(toString(right));
            }
            if (""=="".equals(operator)) {
                return left.equals(right) ? 0 : -1;
            }
            if (left instanceof Comparable<?>) {
                @SuppressWarnings(""unchecked"") // OK because of instanceof check above
                final Comparable<Object> comparable = (Comparable<Object>) left;
                return comparable.compareTo(right);
            }
            if (right instanceof Comparable<?>) {
                @SuppressWarnings(""unchecked"") // OK because of instanceof check above
                final Comparable<Object> comparable = (Comparable<Object>) right;
                return comparable.compareTo(left);
            }
        }
        throw new ArithmeticException(""Object comparison:("" + left + "" "" + operator + "" "" + right + "")"");
    }","  public void test21()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true);
      String string0 = """";
      jexlArithmetic0.toDouble("""");
      Long.getLong("""");
      String string1 = ""<="";
      // Undeclared exception!
      try { 
        jexlArithmetic0.compare((Object) null, """", ""<="");
        fail(""Expecting exception: ArithmeticException"");
      } catch(ArithmeticException e) {
         //
         // Object comparison:(null <= )
         //
         verifyException(""org.apache.commons.jexl3.JexlArithmetic"", e);
      }
  }"
745,"    public Object positivize(final Object val) {
        if (val == null) {
            controlNullOperand();
            return null;
        }
        if (val instanceof Short) {
            return ((Short) val).intValue();
        }
        if (val instanceof Byte) {
            return ((Byte) val).intValue();
        }
        if (val instanceof Number) {
            return val;
        }
        if (val instanceof Character) {
            return (int) (Character) val;
        }
        if (val instanceof Boolean) {
            return val;
        }
        if (val instanceof AtomicBoolean) {
            return ((AtomicBoolean) val).get();
        }
        throw new ArithmeticException(""Object positivize:("" + val + "")"");
    }","  public void test22()  throws Throwable  {
      JexlArithmetic.isMultiplyExact((-9223372036854775808L), (-1L), (-9223372036854775808L));
      FileSystemHandling.shouldAllThrowIOExceptions();
      Short.toUnsignedInt((short)1298);
      Class<Long> class0 = Long.class;
      JexlOptions jexlOptions0 = new JexlOptions();
      jexlOptions0.getMathContext();
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false, (MathContext) null, 2207);
      JexlEngine.EmptyContext jexlEngine_EmptyContext0 = (JexlEngine.EmptyContext)JexlEngine.EMPTY_CONTEXT;
      jexlOptions0.setSafe(true);
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.options((JexlContext) jexlEngine_EmptyContext0);
      // Undeclared exception!
      try { 
        jexlArithmetic1.positivize(jexlArithmetic0);
        fail(""Expecting exception: ArithmeticException"");
      } catch(ArithmeticException e) {
         //
         // Object positivize:(org.apache.commons.jexl3.JexlArithmetic@2)
         //
         verifyException(""org.apache.commons.jexl3.JexlArithmetic"", e);
      }
  }"
746,"    public SetBuilder setBuilder(final int size) {
        return new org.apache.commons.jexl3.internal.SetBuilder(size);
    }","  public void test23()  throws Throwable  {
      MathContext mathContext0 = MathContext.DECIMAL32;
      mathContext0.getRoundingMode();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      mathContext0.toString();
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true, mathContext0, (-1978));
      BigDecimal bigDecimal0 = new BigDecimal((long) (-1978));
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Boolean boolean0 = Boolean.TRUE;
      bigDecimal0.negate();
      jexlArithmetic0.mod(bigDecimal0, boolean0);
      MathContext mathContext1 = new MathContext(""precision=7 roundingMode=HALF_EVEN"");
      jexlArithmetic0.add(""precision=7 roundingMode=HALF_EVEN"", mathContext1);
      // Undeclared exception!
      try { 
        jexlArithmetic0.setBuilder((-1978));
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Illegal initial capacity: -1978
         //
         verifyException(""java.util.HashMap"", e);
      }
  }"
747,"    public BigInteger toBigInteger(final Object val) {
        if (val == null) {
            controlNullOperand();
            return BigInteger.ZERO;
        }
        if (val instanceof BigInteger) {
            return (BigInteger) val;
        }
        if (val instanceof Double) {
            final Double dval = (Double) val;
            if (Double.isNaN(dval)) {
                return BigInteger.ZERO;
            }
            return BigInteger.valueOf(dval.longValue());
        }
        if (val instanceof BigDecimal) {
            return ((BigDecimal) val).toBigInteger();
        }
        if (val instanceof Number) {
            return BigInteger.valueOf(((Number) val).longValue());
        }
        if (val instanceof Boolean) {
            return BigInteger.valueOf(((Boolean) val) ? 1L : 0L);
        }
        if (val instanceof AtomicBoolean) {
            return BigInteger.valueOf(((AtomicBoolean) val).get() ? 1L : 0L);
        }
        if (val instanceof String) {
            final String string = (String) val;
            if ("""".equals(string)) {
                return BigInteger.ZERO;
            }
            return new BigInteger(string);
        }
        if (val instanceof Character) {
            final int i = ((Character) val);
            return BigInteger.valueOf(i);
        }

        throw new ArithmeticException(""BigInteger coercion: ""
                + val.getClass().getName() + "":("" + val + "")"");
    }","  public void test24()  throws Throwable  {
      JexlOptions jexlOptions0 = new JexlOptions();
      jexlOptions0.getMathContext();
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false, (MathContext) null, 3417);
      jexlArithmetic0.toBigInteger("""");
  }"
748,"    public BigDecimal toBigDecimal(final Object val) {
        if (val instanceof BigDecimal) {
            return roundBigDecimal((BigDecimal) val);
        }
        if (val == null) {
            controlNullOperand();
            return BigDecimal.ZERO;
        }
        if (val instanceof Double) {
            if (Double.isNaN(((Double) val))) {
                return BigDecimal.ZERO;
            }
            return roundBigDecimal(new BigDecimal(val.toString(), getMathContext()));
        }
        if (val instanceof Number) {
            return roundBigDecimal(new BigDecimal(val.toString(), getMathContext()));
        }
        if (val instanceof Boolean) {
            return BigDecimal.valueOf(((Boolean) val) ? 1. : 0.);
        }
        if (val instanceof AtomicBoolean) {
            return BigDecimal.valueOf(((AtomicBoolean) val).get() ? 1L : 0L);
        }
        if (val instanceof String) {
            final String string = (String) val;
            if ("""".equals(string)) {
                return BigDecimal.ZERO;
            }
            return roundBigDecimal(new BigDecimal(string, getMathContext()));
        }
        if (val instanceof Character) {
            final int i = ((Character) val);
            return new BigDecimal(i);
        }
        throw new ArithmeticException(""BigDecimal coercion: ""
                + val.getClass().getName() + "":("" + val + "")"");
    }","  public void test25()  throws Throwable  {
      boolean boolean0 = false;
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      Double double0 = new Double((-728.5553845640844));
      Double double1 = new Double(2435.0);
      Boolean boolean1 = jexlArithmetic0.isEmpty((Object) double1);
      BigInteger bigInteger0 = JexlArithmetic.BIGI_LONG_MAX_VALUE;
      jexlArithmetic0.and(boolean1, bigInteger0);
      // Undeclared exception!
      try { 
        jexlArithmetic0.toBigDecimal(double0);
        fail(""Expecting exception: NumberFormatException"");
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.math.BigDecimal"", e);
      }
  }"
749,"    protected Number narrowBigDecimal(final Object lhs, final Object rhs, final BigDecimal bigd) {
        if (isNumberable(lhs) || isNumberable(rhs)) {
            try {
                final long l = bigd.longValueExact();
                // coerce to int when possible (int being so often used in method parms)
                if (l <= Integer.MAX_VALUE && l >= Integer.MIN_VALUE) {
                    return (int) l;
                }
                return l;
            } catch (final ArithmeticException xa) {
                // ignore, no exact value possible
            }
        }
        return bigd;
    }","  public void test26()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Byte byte0 = new Byte((byte) (-44));
      Object object0 = jexlArithmetic0.positivize(byte0);
      MapContext mapContext0 = new MapContext();
      int int0 = JexlArithmetic.BIGD_SCALE;
      Character character0 = new Character('5');
      // Undeclared exception!
      try { 
        jexlArithmetic0.narrowBigDecimal(character0, object0, (BigDecimal) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.JexlArithmetic"", e);
      }
  }"
750,"    public Number narrowNumber(final Number original, final Class<?> narrow) {
        if (original == null) {
            return null;
        }
        Number result = original;
        if (original instanceof BigDecimal) {
            final BigDecimal bigd = (BigDecimal) original;
            // if it's bigger than a double it can't be narrowed
            if (bigd.compareTo(BIGD_DOUBLE_MAX_VALUE) > 0
                || bigd.compareTo(BIGD_DOUBLE_MIN_VALUE) < 0) {
                return original;
            }
            try {
                final long l = bigd.longValueExact();
                // coerce to int when possible (int being so often used in method parms)
                if (narrowAccept(narrow, Integer.class)
                        && l <= Integer.MAX_VALUE
                        && l >= Integer.MIN_VALUE) {
                    return (int) l;
                }
                if (narrowAccept(narrow, Long.class)) {
                    return l;
                }
            } catch (final ArithmeticException xa) {
                // ignore, no exact value possible
            }
        }
        if (original instanceof Double || original instanceof Float) {
            final double value = original.doubleValue();
            if (narrowAccept(narrow, Float.class)
                    && value <= Float.MAX_VALUE
                    && value >= Float.MIN_VALUE) {
                result = result.floatValue();
            }
            // else it fits in a double only
        } else {
            if (original instanceof BigInteger) {
                final BigInteger bigi = (BigInteger) original;
                // if it's bigger than a Long it can't be narrowed
                if (bigi.compareTo(BIGI_LONG_MAX_VALUE) > 0
                        || bigi.compareTo(BIGI_LONG_MIN_VALUE) < 0) {
                    return original;
                }
            }
            final long value = original.longValue();
            if (narrowAccept(narrow, Byte.class)
                    && value <= Byte.MAX_VALUE
                    && value >= Byte.MIN_VALUE) {
                // it will fit in a byte
                result = (byte) value;
            } else if (narrowAccept(narrow, Short.class)
                    && value <= Short.MAX_VALUE
                    && value >= Short.MIN_VALUE) {
                result = (short) value;
            } else if (narrowAccept(narrow, Integer.class)
                    && value <= Integer.MAX_VALUE
                    && value >= Integer.MIN_VALUE) {
                result = (int) value;
            }
            // else it fits in a long
        }
        return result;
    }","  public void test27()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true);
      BigDecimal bigDecimal0 = JexlArithmetic.BIGD_DOUBLE_MAX_VALUE;
      Class<Byte> class0 = Byte.class;
      jexlArithmetic0.narrowNumber(bigDecimal0, class0);
  }"
751,"    public Object negate(final Object val) {
        if (val == null) {
            controlNullOperand();
            return null;
        }
        if (val instanceof Integer) {
            return -((Integer) val);
        }
        if (val instanceof Double) {
            return - ((Double) val);
        }
        if (val instanceof Long) {
            return -((Long) val);
        }
        if (val instanceof BigDecimal) {
            return ((BigDecimal) val).negate();
        }
        if (val instanceof BigInteger) {
            return ((BigInteger) val).negate();
        }
        if (val instanceof Float) {
            return -((Float) val);
        }
        if (val instanceof Short) {
            return (short) -((Short) val);
        }
        if (val instanceof Byte) {
            return (byte) -((Byte) val);
        }
        if (val instanceof Boolean) {
            return !(Boolean) val;
        }
        if (val instanceof AtomicBoolean) {
            return !((AtomicBoolean) val).get();
        }
        throw new ArithmeticException(""Object negate:("" + val + "")"");
    }","  public void test28()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      BigInteger bigInteger0 = BigInteger.ZERO;
      Number number0 = jexlArithmetic0.narrow(bigInteger0);
      jexlArithmetic0.subtract(number0, number0);
      AtomicBoolean atomicBoolean0 = new AtomicBoolean();
      Object object0 = jexlArithmetic0.not(atomicBoolean0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Integer integer0 = new Integer((-45));
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Integer.compareUnsigned((-45), (-45));
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Short short0 = new Short((short)31);
      jexlArithmetic0.lessThan(atomicBoolean0, short0);
      JexlArithmetic.isMultiplyExact((-32768L), (-1677L), (-1677L));
      jexlArithmetic0.toBigInteger(object0);
      jexlArithmetic0.isPositivizeStable();
      jexlArithmetic0.isNegateStable();
      jexlArithmetic0.getMathContext();
      jexlArithmetic0.negate(object0);
  }"
752,"    public boolean toBoolean(final Object val) {
        if (val == null) {
            controlNullOperand();
            return false;
        }
        if (val instanceof Boolean) {
            return ((Boolean) val);
        }
        if (val instanceof Number) {
            final double number = toDouble(val);
            return !Double.isNaN(number) && number != 0.d;
        }
        if (val instanceof AtomicBoolean) {
            return ((AtomicBoolean) val).get();
        }
        if (val instanceof String) {
            final String strval = val.toString();
            return !strval.isEmpty() && !""false"".equals(strval);
        }
        // non null value is true
        return true;
    }","  public void test29()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true);
      AtomicBoolean atomicBoolean0 = new AtomicBoolean();
      Object object0 = jexlArithmetic0.negate(atomicBoolean0);
      AtomicBoolean atomicBoolean1 = new AtomicBoolean(true);
      Object object1 = jexlArithmetic0.divide(atomicBoolean1, atomicBoolean1);
      jexlArithmetic0.negate(object0);
      jexlArithmetic0.bitwiseXor(atomicBoolean1, object1);
      MathContext mathContext0 = new MathContext(31);
      Short short0 = new Short((short)1602);
      mathContext0.equals(short0);
      jexlArithmetic0.toBoolean(mathContext0);
  }"
753,"    public Object subtract(final Object left, final Object right) {
        if (left == null && right == null) {
            return controlNullNullOperands();
        }
        // if both (non null) args fit as long
        final Number ln = asLongNumber(left);
        final Number rn = asLongNumber(right);
        if (ln != null && rn != null) {
            final long x = ln.longValue();
            final long y = rn.longValue();
            final long result = x - y;
            // detect overflow, see java8 Math.subtractExact
            if (((x ^ y) & (x ^ result)) < 0) {
                return BigInteger.valueOf(x).subtract(BigInteger.valueOf(y));
            }
            return narrowLong(left, right, result);
        }
        // if either are bigdecimal use that type
        if (left instanceof BigDecimal || right instanceof BigDecimal) {
            final BigDecimal l = toBigDecimal(left);
            final BigDecimal r = toBigDecimal(right);
            final BigDecimal result = l.subtract(r, getMathContext());
            return narrowBigDecimal(left, right, result);
        }
        // if either are floating point (double or float) use double
        if (isFloatingPointNumber(left) || isFloatingPointNumber(right)) {
            final double l = toDouble(left);
            final double r = toDouble(right);
            return l - r;
        }
        // otherwise treat as integers
        final BigInteger l = toBigInteger(left);
        final BigInteger r = toBigInteger(right);
        final BigInteger result = l.subtract(r);
        return narrowBigInteger(left, right, result);
    }","  public void test30()  throws Throwable  {
      MathContext mathContext0 = MathContext.DECIMAL64;
      Boolean boolean0 = Boolean.FALSE;
      mathContext0.equals(boolean0);
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false, mathContext0, Integer.MIN_VALUE);
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.createWithOptions(false, mathContext0, Integer.MIN_VALUE);
      BigDecimal bigDecimal0 = new BigDecimal((long) Integer.MIN_VALUE);
      bigDecimal0.toPlainString();
      jexlArithmetic1.narrowBigDecimal((Object) null, mathContext0, bigDecimal0);
      Pattern pattern0 = JexlArithmetic.FLOAT_PATTERN;
      pattern0.split((CharSequence) ""-2147483648"");
      Double double0 = new Double(1.0);
      Double double1 = new Double(1.0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ""-2147483648"");
      jexlArithmetic1.narrowLong(pattern0, double0, 16380L);
      jexlArithmetic1.toString((Object) pattern0);
      Double double2 = new Double(1038.679142239);
      Object object0 = jexlArithmetic0.subtract((Object) null, double2);
      Object object1 = jexlArithmetic0.logicalNot((Object) null);
      Double double3 = new Double(Double.NaN);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      jexlArithmetic0.empty(double3);
      Object object2 = jexlArithmetic0.subtract(object1, object0);
      jexlArithmetic1.add(object2, boolean0);
      Long long0 = new Long((-3087L));
      // Undeclared exception!
      try { 
        jexlArithmetic1.subtract(bigDecimal0, long0);
        fail(""Expecting exception: NumberFormatException"");
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.math.BigDecimal"", e);
      }
  }"
754,"    public String toString(final Object val) {
        if (val == null) {
            controlNullOperand();
            return """";
        }
        if (!(val instanceof Double)) {
            return val.toString();
        }
        final Double dval = (Double) val;
        if (Double.isNaN(dval)) {
            return """";
        }
        return dval.toString();
    }","  public void test31()  throws Throwable  {
      MathContext mathContext0 = MathContext.DECIMAL64;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false, mathContext0, 15);
      JexlArithmetic.MapBuilder jexlArithmetic_MapBuilder0 = jexlArithmetic0.mapBuilder(15);
      BigDecimal bigDecimal0 = new BigDecimal(15);
      Class<Integer> class0 = Integer.class;
      jexlArithmetic0.narrowNumber(bigDecimal0, class0);
      jexlArithmetic_MapBuilder0.create();
      JexlArithmetic.NullOperand jexlArithmetic_NullOperand0 = new JexlArithmetic.NullOperand();
      jexlArithmetic_NullOperand0.toString();
      CharBuffer.wrap((CharSequence) ""org.evosuite.runtime.mock.java.lang.MockThrowable"");
  }"
755,"    public BigDecimal toBigDecimal(final Object val) {
        if (val instanceof BigDecimal) {
            return roundBigDecimal((BigDecimal) val);
        }
        if (val == null) {
            controlNullOperand();
            return BigDecimal.ZERO;
        }
        if (val instanceof Double) {
            if (Double.isNaN(((Double) val))) {
                return BigDecimal.ZERO;
            }
            return roundBigDecimal(new BigDecimal(val.toString(), getMathContext()));
        }
        if (val instanceof Number) {
            return roundBigDecimal(new BigDecimal(val.toString(), getMathContext()));
        }
        if (val instanceof Boolean) {
            return BigDecimal.valueOf(((Boolean) val) ? 1. : 0.);
        }
        if (val instanceof AtomicBoolean) {
            return BigDecimal.valueOf(((AtomicBoolean) val).get() ? 1L : 0L);
        }
        if (val instanceof String) {
            final String string = (String) val;
            if ("""".equals(string)) {
                return BigDecimal.ZERO;
            }
            return roundBigDecimal(new BigDecimal(string, getMathContext()));
        }
        if (val instanceof Character) {
            final int i = ((Character) val);
            return new BigDecimal(i);
        }
        throw new ArithmeticException(""BigDecimal coercion: ""
                + val.getClass().getName() + "":("" + val + "")"");
    }","  public void test32()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ""C"");
      MathContext mathContext0 = MathContext.DECIMAL64;
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      Boolean boolean0 = Boolean.TRUE;
      Boolean boolean1 = new Boolean(""C"");
      jexlArithmetic0.toInteger(boolean0);
      Character character0 = Character.valueOf('\u0083');
      jexlArithmetic0.add(""C"", character0);
      mathContext0.getRoundingMode();
      // Undeclared exception!
      try { 
        jexlArithmetic0.toBigDecimal(mathContext0);
        fail(""Expecting exception: ArithmeticException"");
      } catch(ArithmeticException e) {
         //
         // BigDecimal coercion: java.math.MathContext:(precision=16 roundingMode=HALF_EVEN)
         //
         verifyException(""org.apache.commons.jexl3.JexlArithmetic"", e);
      }
  }"
756,"    public Object divide(final Object left, final Object right) {
        if (left == null && right == null) {
            return controlNullNullOperands();
        }
        // if both (non null) args fit as long
        final Number ln = asLongNumber(left);
        final Number rn = asLongNumber(right);
        if (ln != null && rn != null) {
            final long x = ln.longValue();
            final long y = rn.longValue();
            if (y == 0L) {
                throw new ArithmeticException(""/"");
            }
            final long result = x  / y;
            return narrowLong(left, right, result);
        }
        // if either are bigdecimal use that type
        if (left instanceof BigDecimal || right instanceof BigDecimal) {
            final BigDecimal l = toBigDecimal(left);
            final BigDecimal r = toBigDecimal(right);
            if (BigDecimal.ZERO.equals(r)) {
                throw new ArithmeticException(""/"");
            }
            final BigDecimal result = l.divide(r, getMathContext());
            return narrowBigDecimal(left, right, result);
        }
        // if either are floating point (double or float) use double
        if (isFloatingPointNumber(left) || isFloatingPointNumber(right)) {
            final double l = toDouble(left);
            final double r = toDouble(right);
            if (r == 0.0) {
                throw new ArithmeticException(""/"");
            }
            return l / r;
        }
        // otherwise treat as integers
        final BigInteger l = toBigInteger(left);
        final BigInteger r = toBigInteger(right);
        if (BigInteger.ZERO.equals(r)) {
            throw new ArithmeticException(""/"");
        }
        final BigInteger result = l.divide(r);
        return narrowBigInteger(left, right, result);
    }","  public void test33()  throws Throwable  {
      MathContext mathContext0 = MathContext.DECIMAL128;
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      Boolean boolean0 = Boolean.TRUE;
      Integer integer0 = jexlArithmetic0.size((Object) boolean0);
      jexlArithmetic0.lessThan(integer0, boolean0);
      MapContext mapContext0 = new MapContext();
      Double double0 = new Double((-882.15));
      Byte byte0 = new Byte((byte) (-41));
      Byte.toUnsignedLong((byte)59);
      jexlArithmetic0.divide(double0, byte0);
      Random.setNextRandom(415);
  }"
757,"    public boolean greaterThan(final Object left, final Object right) {
        if ((left == right) || left == null || right == null) {
            return false;
        }
        return compare(left, right, "">"") > 0;
    }","  public void test34()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ""C"");
      MathContext mathContext0 = MathContext.DECIMAL64;
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) fileSystemHandling0;
      objectArray0[1] = (Object) fileSystemHandling1;
      JexlArithmetic.MapBuilder jexlArithmetic_MapBuilder0 = jexlArithmetic0.mapBuilder(42);
      Object object0 = jexlArithmetic_MapBuilder0.create();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) jexlArithmetic0;
      objectArray0[4] = (Object) mathContext0;
      objectArray0[5] = (Object) ""C"";
      jexlArithmetic0.narrowArguments(objectArray0);
      Boolean boolean0 = new Boolean(""C"");
      Boolean boolean1 = new Boolean(""C"");
      jexlArithmetic0.toInteger(boolean0);
      Pattern pattern0 = Pattern.compile(""W\""Pza"");
      // Undeclared exception!
      try { 
        jexlArithmetic0.greaterThan(pattern0, boolean1);
        fail(""Expecting exception: ClassCastException"");
      } catch(ClassCastException e) {
         //
         // java.util.regex.Pattern cannot be cast to java.lang.Boolean
         //
         verifyException(""java.lang.Boolean"", e);
      }
  }"
758,"    public Object xor(final Object left, final Object right) {
        final long l = toLong(left);
        final long r = toLong(right);
        return l ^ r;
    }","  public void test35()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      Float.min(1.4114723F, 0.0F);
      jexlArithmetic0.toString((Object) jexlArithmetic0);
      Short short0 = new Short((short)874);
      Class<Byte> class0 = Byte.class;
      jexlArithmetic0.narrowNumber(short0, class0);
      jexlArithmetic0.mapBuilder(27);
      jexlArithmetic0.logicalNot((Object) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String string0 = ""selfXor"";
      JexlOptions jexlOptions0 = new JexlOptions();
      jexlOptions0.getMathContext();
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.createWithOptions(false, (MathContext) null, 1160);
      jexlArithmetic1.createWithOptions(false, (MathContext) null, 31);
      jexlArithmetic0.lessThanOrEqual((Object) null, jexlArithmetic1);
      Pattern.compile(""org.apache.commons.jexl3.JexlArithmetic@0000000001"", 27);
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) ""selfXor"");
      // Undeclared exception!
      try { 
        jexlArithmetic1.xor(jexlArithmetic0, charBuffer0);
        fail(""Expecting exception: ArithmeticException"");
      } catch(ArithmeticException e) {
         //
         // Long coercion: org.apache.commons.jexl3.JexlArithmetic:(org.apache.commons.jexl3.JexlArithmetic@1)
         //
         verifyException(""org.apache.commons.jexl3.JexlArithmetic"", e);
      }
  }"
759,"    public boolean lessThan(final Object left, final Object right) {
        if ((left == right) || (left == null) || (right == null)) {
            return false;
        }
        return compare(left, right, ""<"") < 0;

    }","  public void test36()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      Byte byte0 = new Byte((byte)2);
      BigDecimal bigDecimal0 = new BigDecimal((-4440));
      jexlArithmetic0.narrowBigDecimal(fileSystemHandling0, (Object) null, bigDecimal0);
      jexlArithmetic0.narrow(byte0);
      Character character0 = Character.valueOf('B');
      Object object0 = jexlArithmetic0.bitwiseAnd(character0, character0);
      Character.isIdeographic((byte)2);
      Short short0 = new Short((short)1972);
      jexlArithmetic0.mod(object0, short0);
      jexlArithmetic0.positivize(short0);
      Object object1 = jexlArithmetic0.controlNullNullOperands();
      jexlArithmetic0.isEmpty(object1);
      Float float0 = new Float(1.0F);
      jexlArithmetic0.lessThanOrEqual(float0, character0);
      BigDecimal bigDecimal1 = BigDecimal.TEN;
      BigDecimal bigDecimal2 = jexlArithmetic0.roundBigDecimal(bigDecimal1);
      Float float1 = new Float((double) (short)1972);
      jexlArithmetic0.negate(float1);
      AtomicBoolean atomicBoolean0 = new AtomicBoolean(true);
      jexlArithmetic0.and(object1, atomicBoolean0);
      JexlArithmetic.MapBuilder jexlArithmetic_MapBuilder0 = jexlArithmetic0.mapBuilder((short)1972);
      bigDecimal2.abs();
      jexlArithmetic_MapBuilder0.create();
      jexlArithmetic0.isEmpty((Object) bigDecimal1);
      AtomicBoolean atomicBoolean1 = new AtomicBoolean(true);
      jexlArithmetic0.toLong(atomicBoolean1);
      // Undeclared exception!
      try { 
        jexlArithmetic0.lessThan(bigDecimal2, ""<="");
        fail(""Expecting exception: NumberFormatException"");
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.math.BigDecimal"", e);
      }
  }"
760,"    public boolean greaterThanOrEqual(final Object left, final Object right) {
        if (left == right) {
            return true;
        }
        if (left == null || right == null) {
            return false;
        }
        return compare(left, right, "">="") >= 0;
    }","  public void test37()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true);
      JexlOptions jexlOptions0 = new JexlOptions();
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.options(jexlOptions0);
      jexlArithmetic1.options(jexlOptions0);
      Double double0 = new Double(1241.2459353893);
      Class<BigInteger> class0 = BigInteger.class;
      char[] charArray0 = new char[9];
      charArray0[0] = ' ';
      charArray0[1] = '4';
      charArray0[2] = ']';
      charArray0[3] = '.';
      charArray0[4] = '$';
      charArray0[5] = 'h';
      charArray0[6] = 'Z';
      charArray0[7] = 't';
      charArray0[8] = '0';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      // Undeclared exception!
      try { 
        jexlArithmetic1.greaterThanOrEqual(charBuffer0, jexlArithmetic0);
        fail(""Expecting exception: ClassCastException"");
      } catch(ClassCastException e) {
         //
         // org.apache.commons.jexl3.JexlArithmetic cannot be cast to java.nio.CharBuffer
         //
         verifyException(""java.nio.CharBuffer"", e);
      }
  }"
761,"    public Object divide(final Object left, final Object right) {
        if (left == null && right == null) {
            return controlNullNullOperands();
        }
        // if both (non null) args fit as long
        final Number ln = asLongNumber(left);
        final Number rn = asLongNumber(right);
        if (ln != null && rn != null) {
            final long x = ln.longValue();
            final long y = rn.longValue();
            if (y == 0L) {
                throw new ArithmeticException(""/"");
            }
            final long result = x  / y;
            return narrowLong(left, right, result);
        }
        // if either are bigdecimal use that type
        if (left instanceof BigDecimal || right instanceof BigDecimal) {
            final BigDecimal l = toBigDecimal(left);
            final BigDecimal r = toBigDecimal(right);
            if (BigDecimal.ZERO.equals(r)) {
                throw new ArithmeticException(""/"");
            }
            final BigDecimal result = l.divide(r, getMathContext());
            return narrowBigDecimal(left, right, result);
        }
        // if either are floating point (double or float) use double
        if (isFloatingPointNumber(left) || isFloatingPointNumber(right)) {
            final double l = toDouble(left);
            final double r = toDouble(right);
            if (r == 0.0) {
                throw new ArithmeticException(""/"");
            }
            return l / r;
        }
        // otherwise treat as integers
        final BigInteger l = toBigInteger(left);
        final BigInteger r = toBigInteger(right);
        if (BigInteger.ZERO.equals(r)) {
            throw new ArithmeticException(""/"");
        }
        final BigInteger result = l.divide(r);
        return narrowBigInteger(left, right, result);
    }","  public void test38()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      Short short0 = new Short((short)21848);
      Short.toUnsignedLong((short)21848);
      Double double0 = new Double(14.0);
      Double.sum((-735.6064024954151), 0.0);
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      jexlArithmetic0.add(bigDecimal0, bigDecimal0);
      RoundingMode roundingMode0 = RoundingMode.HALF_UP;
      // Undeclared exception!
      try { 
        bigDecimal0.divide((BigDecimal) null, roundingMode0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.math.BigDecimal"", e);
      }
  }"
762,"    public Object mod(final Object left, final Object right) {
        if (left == null && right == null) {
            return controlNullNullOperands();
        }
        // if both (non null) args fit as long
        final Number ln = asLongNumber(left);
        final Number rn = asLongNumber(right);
        if (ln != null && rn != null) {
            final long x = ln.longValue();
            final long y = rn.longValue();
            if (y == 0L) {
                throw new ArithmeticException(""%"");
            }
            final long result = x % y;
            return narrowLong(left, right,  result);
        }
        // if either are bigdecimal use that type
        if (left instanceof BigDecimal || right instanceof BigDecimal) {
            final BigDecimal l = toBigDecimal(left);
            final BigDecimal r = toBigDecimal(right);
            if (BigDecimal.ZERO.equals(r)) {
                throw new ArithmeticException(""%"");
            }
            final BigDecimal remainder = l.remainder(r, getMathContext());
            return narrowBigDecimal(left, right, remainder);
        }
        // if either are floating point (double or float) use double
        if (isFloatingPointNumber(left) || isFloatingPointNumber(right)) {
            final double l = toDouble(left);
            final double r = toDouble(right);
            if (r == 0.0) {
                throw new ArithmeticException(""%"");
            }
            return l % r;
        }
        // otherwise treat as integers
        final BigInteger l = toBigInteger(left);
        final BigInteger r = toBigInteger(right);
        if (BigInteger.ZERO.equals(r)) {
            throw new ArithmeticException(""%"");
        }
        final BigInteger result = l.mod(r);
        return narrowBigInteger(left, right, result);
    }","  public void test39()  throws Throwable  {
      RoundingMode roundingMode0 = RoundingMode.UNNECESSARY;
      MathContext mathContext0 = new MathContext(16, roundingMode0);
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true, mathContext0, 16);
      JexlArithmetic jexlArithmetic1 = new JexlArithmetic(true);
      Float float0 = new Float(261.176798650701);
      Object object0 = jexlArithmetic0.not(float0);
      Short short0 = new Short((short) (-142));
      jexlArithmetic0.lessThanOrEqual(object0, short0);
      Double double0 = new Double((-336.9059450217716));
      // Undeclared exception!
      try { 
        jexlArithmetic1.mod(double0, jexlArithmetic0);
        fail(""Expecting exception: ArithmeticException"");
      } catch(ArithmeticException e) {
         //
         // Double coercion: org.apache.commons.jexl3.JexlArithmetic:(org.apache.commons.jexl3.JexlArithmetic@1)
         //
         verifyException(""org.apache.commons.jexl3.JexlArithmetic"", e);
      }
  }"
763,"    public BigDecimal toBigDecimal(final Object val) {
        if (val instanceof BigDecimal) {
            return roundBigDecimal((BigDecimal) val);
        }
        if (val == null) {
            controlNullOperand();
            return BigDecimal.ZERO;
        }
        if (val instanceof Double) {
            if (Double.isNaN(((Double) val))) {
                return BigDecimal.ZERO;
            }
            return roundBigDecimal(new BigDecimal(val.toString(), getMathContext()));
        }
        if (val instanceof Number) {
            return roundBigDecimal(new BigDecimal(val.toString(), getMathContext()));
        }
        if (val instanceof Boolean) {
            return BigDecimal.valueOf(((Boolean) val) ? 1. : 0.);
        }
        if (val instanceof AtomicBoolean) {
            return BigDecimal.valueOf(((AtomicBoolean) val).get() ? 1L : 0L);
        }
        if (val instanceof String) {
            final String string = (String) val;
            if ("""".equals(string)) {
                return BigDecimal.ZERO;
            }
            return roundBigDecimal(new BigDecimal(string, getMathContext()));
        }
        if (val instanceof Character) {
            final int i = ((Character) val);
            return new BigDecimal(i);
        }
        throw new ArithmeticException(""BigDecimal coercion: ""
                + val.getClass().getName() + "":("" + val + "")"");
    }","  public void test40()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      jexlArithmetic0.subtract((Object) null, (Object) null);
      jexlArithmetic0.contains((Object) null, (Object) null);
      Boolean.logicalAnd(false, false);
      int int0 = 46;
      Integer integer0 = new Integer(46);
      jexlArithmetic0.negate(integer0);
      char[] charArray0 = new char[3];
      jexlArithmetic0.add("")"", (Object) null);
      charArray0[0] = '&';
      charArray0[1] = '0';
      Boolean boolean0 = new Boolean("")"");
      jexlArithmetic0.complement(boolean0);
      charArray0[2] = ',';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      // Undeclared exception!
      try { 
        jexlArithmetic0.toBigDecimal(charBuffer0);
        fail(""Expecting exception: ArithmeticException"");
      } catch(ArithmeticException e) {
         //
         // BigDecimal coercion: java.nio.HeapCharBuffer:(&0,)
         //
         verifyException(""org.apache.commons.jexl3.JexlArithmetic"", e);
      }
  }"
764,"    public boolean narrowArguments(final Object[] args) {
        boolean narrowed = false;
        if (args != null) {
            for (int a = 0; a < args.length; ++a) {
                final Object arg = args[a];
                if (arg instanceof Number) {
                    final Number narg = (Number) arg;
                    final Number narrow = narrow(narg);
                    if (!narg.equals(narrow)) {
                        args[a] = narrow;
                        narrowed = true;
                    }
                }
            }
        }
        return narrowed;
    }","  public void test41()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      JexlOptions jexlOptions0 = new JexlOptions();
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.options(jexlOptions0);
      Object[] objectArray0 = new Object[1];
      Character character0 = Character.valueOf('7');
      MockRandom mockRandom0 = new MockRandom(1435);
      BigInteger bigInteger0 = new BigInteger(1435, (-274), mockRandom0);
      jexlArithmetic0.narrowBigInteger(character0, jexlArithmetic1, bigInteger0);
      objectArray0[0] = (Object) jexlOptions0;
      jexlArithmetic1.narrowArguments(objectArray0);
  }"
765,"    public SetBuilder setBuilder(final int size) {
        return new org.apache.commons.jexl3.internal.SetBuilder(size);
    }","  public void test42()  throws Throwable  {
      MathContext mathContext0 = MathContext.DECIMAL32;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      mathContext0.toString();
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true, mathContext0, (-1978));
      BigDecimal bigDecimal0 = new BigDecimal((long) (-1978));
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Boolean boolean0 = Boolean.TRUE;
      bigDecimal0.negate();
      jexlArithmetic0.mod(bigDecimal0, boolean0);
      // Undeclared exception!
      try { 
        jexlArithmetic0.setBuilder((-1978));
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Illegal initial capacity: -1978
         //
         verifyException(""java.util.HashMap"", e);
      }
  }"
766,"    protected BigDecimal roundBigDecimal(final BigDecimal number) {
        final int mscale = getMathScale();
        if (mscale >= 0) {
            return number.setScale(mscale, getMathContext().getRoundingMode());
        }
        return number;
    }","  public void test43()  throws Throwable  {
      MathContext mathContext0 = MathContext.DECIMAL64;
      int int0 = 2147421874;
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false, mathContext0, 2147421874);
      mathContext0.getRoundingMode();
      BigDecimal bigDecimal0 = JexlArithmetic.BIGD_DOUBLE_MIN_VALUE;
      int int1 = 6;
      bigDecimal0.doubleValue();
      // Undeclared exception!
      try { 
        jexlArithmetic0.roundBigDecimal(bigDecimal0);
        fail(""Expecting exception: ArithmeticException"");
      } catch(ArithmeticException e) {
         //
         // BigInteger would overflow supported range
         //
         verifyException(""java.math.BigInteger"", e);
      }
  }"
767,"    protected Number narrowBigInteger(final Object lhs, final Object rhs, final BigInteger bigi) {
        //coerce to long if possible
        if (!(lhs instanceof BigInteger || rhs instanceof BigInteger)
                && bigi.compareTo(BIGI_LONG_MAX_VALUE) <= 0
                && bigi.compareTo(BIGI_LONG_MIN_VALUE) >= 0) {
            // coerce to int if possible
            final long l = bigi.longValue();
            // coerce to int when possible (int being so often used in method parms)
            if (!(lhs instanceof Long || rhs instanceof Long)
                    && l <= Integer.MAX_VALUE
                    && l >= Integer.MIN_VALUE) {
                return (int) l;
            }
            return l;
        }
        return bigi;
    }","  public void test44()  throws Throwable  {
      MathContext mathContext0 = MathContext.DECIMAL128;
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      byte[] byteArray0 = new byte[0];
      BigInteger bigInteger0 = JexlArithmetic.BIGI_LONG_MAX_VALUE;
      BigDecimal bigDecimal1 = new BigDecimal(bigInteger0);
      bigDecimal0.divide(bigDecimal1, mathContext0);
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true, mathContext0, 4);
      BigDecimal bigDecimal2 = BigDecimal.ZERO;
      Object object0 = jexlArithmetic0.subtract(bigDecimal2, bigDecimal0);
      jexlArithmetic0.narrowBigInteger(object0, (Object) null, bigInteger0);
      Pattern.compile(""Integer coercion: "", (-2146577496));
  }"
768,"    public Object divide(final Object left, final Object right) {
        if (left == null && right == null) {
            return controlNullNullOperands();
        }
        // if both (non null) args fit as long
        final Number ln = asLongNumber(left);
        final Number rn = asLongNumber(right);
        if (ln != null && rn != null) {
            final long x = ln.longValue();
            final long y = rn.longValue();
            if (y == 0L) {
                throw new ArithmeticException(""/"");
            }
            final long result = x  / y;
            return narrowLong(left, right, result);
        }
        // if either are bigdecimal use that type
        if (left instanceof BigDecimal || right instanceof BigDecimal) {
            final BigDecimal l = toBigDecimal(left);
            final BigDecimal r = toBigDecimal(right);
            if (BigDecimal.ZERO.equals(r)) {
                throw new ArithmeticException(""/"");
            }
            final BigDecimal result = l.divide(r, getMathContext());
            return narrowBigDecimal(left, right, result);
        }
        // if either are floating point (double or float) use double
        if (isFloatingPointNumber(left) || isFloatingPointNumber(right)) {
            final double l = toDouble(left);
            final double r = toDouble(right);
            if (r == 0.0) {
                throw new ArithmeticException(""/"");
            }
            return l / r;
        }
        // otherwise treat as integers
        final BigInteger l = toBigInteger(left);
        final BigInteger r = toBigInteger(right);
        if (BigInteger.ZERO.equals(r)) {
            throw new ArithmeticException(""/"");
        }
        final BigInteger result = l.divide(r);
        return narrowBigInteger(left, right, result);
    }","  public void test45()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true);
      MathContext mathContext0 = MathContext.DECIMAL32;
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.createWithOptions(false, mathContext0, Integer.MIN_VALUE);
      jexlArithmetic1.equals((Object) mathContext0, (Object) jexlArithmetic0);
      Float float0 = new Float((double) Integer.MIN_VALUE);
      Byte byte0 = new Byte((byte)17);
      Float.max(Integer.MIN_VALUE, (-1.0F));
      Object object0 = jexlArithmetic0.bitwiseAnd(float0, byte0);
      Integer integer0 = new Integer((byte)17);
      Integer integer1 = Integer.getInteger((String) null, integer0);
      jexlArithmetic0.size((Object) mathContext0, integer0);
      jexlArithmetic1.mapBuilder((byte)17);
      Long long0 = new Long(1L);
      Byte byte1 = new Byte((byte) (-18));
      // Undeclared exception!
      try { 
        jexlArithmetic1.divide(integer1, object0);
        fail(""Expecting exception: ArithmeticException"");
      } catch(ArithmeticException e) {
         //
         // /
         //
         verifyException(""org.apache.commons.jexl3.JexlArithmetic"", e);
      }
  }"
769,"    public boolean lessThan(final Object left, final Object right) {
        if ((left == right) || (left == null) || (right == null)) {
            return false;
        }
        return compare(left, right, ""<"") < 0;

    }","  public void test46()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      Byte byte0 = new Byte((byte)2);
      BigDecimal bigDecimal0 = new BigDecimal((-4440));
      jexlArithmetic0.narrowBigDecimal(fileSystemHandling0, (Object) null, bigDecimal0);
      jexlArithmetic0.narrow(byte0);
      Character character0 = Character.valueOf('B');
      Object object0 = jexlArithmetic0.bitwiseAnd(character0, character0);
      Character.isIdeographic((byte)2);
      Short short0 = new Short((short)1972);
      jexlArithmetic0.mod(object0, short0);
      jexlArithmetic0.positivize(short0);
      Object object1 = jexlArithmetic0.controlNullNullOperands();
      jexlArithmetic0.isEmpty(object1);
      Float float0 = new Float(1.0F);
      jexlArithmetic0.lessThanOrEqual(float0, character0);
      BigDecimal bigDecimal1 = BigDecimal.TEN;
      BigDecimal bigDecimal2 = jexlArithmetic0.roundBigDecimal(bigDecimal1);
      Float float1 = new Float((double) (short)1972);
      jexlArithmetic0.negate(float1);
      AtomicBoolean atomicBoolean0 = new AtomicBoolean(true);
      jexlArithmetic0.and(object1, atomicBoolean0);
      JexlArithmetic.MapBuilder jexlArithmetic_MapBuilder0 = jexlArithmetic0.mapBuilder((short)1972);
      jexlArithmetic_MapBuilder0.create();
      jexlArithmetic0.isEmpty((Object) bigDecimal1);
      jexlArithmetic0.lessThan(bigDecimal2, """");
  }"
770,"    protected Object controlNullNullOperands() {
        if (isStrict()) {
            throw new NullOperand();
        }
        return 0;
    }","  public void test47()  throws Throwable  {
      RoundingMode roundingMode0 = RoundingMode.CEILING;
      MathContext mathContext0 = new MathContext(37, roundingMode0);
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false, mathContext0, Integer.MIN_VALUE);
      mathContext0.toString();
      BigInteger bigInteger0 = JexlArithmetic.BIGI_LONG_MAX_VALUE;
      Short short0 = new Short((short)3177);
      jexlArithmetic0.toLong(short0);
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      jexlArithmetic0.toBigDecimal(bigDecimal0);
      Byte byte0 = new Byte((byte) (-109));
      jexlArithmetic0.controlNullNullOperands();
  }"
771,"    public Object add(final Object left, final Object right) {
        if (left == null && right == null) {
            return controlNullNullOperands();
        }
        final boolean strconcat = strict
                            ? left instanceof String || right instanceof String
                            : left instanceof String && right instanceof String;
        if (!strconcat) {
            try {
                // if both (non null) args fit as long
                final Number ln = asLongNumber(left);
                final Number rn = asLongNumber(right);
                if (ln != null && rn != null) {
                    final long x = ln.longValue();
                    final long y = rn.longValue();
                    final long result = x + y;
                    // detect overflow, see java8 Math.addExact
                    if (((x ^ result) & (y ^ result)) < 0) {
                        return BigInteger.valueOf(x).add(BigInteger.valueOf(y));
                    }
                    return narrowLong(left, right, result);
                }
                // if either are bigdecimal use that type
                if (left instanceof BigDecimal || right instanceof BigDecimal) {
                    final BigDecimal l = toBigDecimal(left);
                    final BigDecimal r = toBigDecimal(right);
                    final BigDecimal result = l.add(r, getMathContext());
                    return narrowBigDecimal(left, right, result);
                }
                // if either are floating point (double or float) use double
                if (isFloatingPointNumber(left) || isFloatingPointNumber(right)) {
                    final double l = toDouble(left);
                    final double r = toDouble(right);
                    return l + r;
                }
                // otherwise treat as (big) integers
                final BigInteger l = toBigInteger(left);
                final BigInteger r = toBigInteger(right);
                final BigInteger result = l.add(r);
                return narrowBigInteger(left, right, result);
            } catch (final java.lang.NumberFormatException nfe) {
                if (left == null || right == null) {
                    controlNullOperand();
                }
            }
        }
        return toString(left).concat(toString(right));
    }","  public void test48()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      MapContext mapContext0 = new MapContext(hashMap0);
      mapContext0.set(""~IAduhvoX"", (Object) null);
      hashMap0.put(""~IAduhvoX"", jexlArithmetic0);
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.options((JexlContext) mapContext0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      jexlArithmetic1.isPositivizeStable();
      hashMap0.put(""]n^GY_8'"", jexlArithmetic0);
      mapContext0.set("")"", "")"");
      jexlArithmetic0.endsWith(""~IAduhvoX"", mapContext0);
      jexlArithmetic0.startsWith(hashMap0, (Object) null);
      Long long0 = new Long(324L);
      Long.min((-5172L), 324L);
      Long.toUnsignedString(16380L);
      // Undeclared exception!
      try { 
        jexlArithmetic1.add(long0, mapContext0);
        fail(""Expecting exception: ArithmeticException"");
      } catch(ArithmeticException e) {
         //
         // BigInteger coercion: org.apache.commons.jexl3.MapContext:(org.apache.commons.jexl3.MapContext@2)
         //
         verifyException(""org.apache.commons.jexl3.JexlArithmetic"", e);
      }
  }"
772,"    public double toDouble(final Object val) {
        if (val == null) {
            controlNullOperand();
            return 0;
        }
        if (val instanceof Double) {
            return ((Double) val);
        }
        if (val instanceof Number) {
            //The below construct is used rather than ((Number)val).doubleValue() to ensure
            //equality between comparing new Double( 6.4 / 3 ) and the jexl expression of 6.4 / 3
            return Double.parseDouble(String.valueOf(val));
        }
        if (val instanceof Boolean) {
            return ((Boolean) val) ? 1. : 0.;
        }
        if (val instanceof AtomicBoolean) {
            return ((AtomicBoolean) val).get() ? 1. : 0.;
        }
        if (val instanceof String) {
            final String string = (String) val;
            if ("""".equals(string)) {
                return Double.NaN;
            }
            // the spec seems to be iffy about this.  Going to give it a wack anyway
            return Double.parseDouble(string);
        }
        if (val instanceof Character) {
            final int i = ((Character) val);
            return i;
        }
        throw new ArithmeticException(""Double coercion: ""
                + val.getClass().getName() + "":("" + val + "")"");
    }","  public void test49()  throws Throwable  {
      MathContext mathContext0 = MathContext.UNLIMITED;
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false, mathContext0, (-2037));
      jexlArithmetic0.not(mathContext0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      BigInteger bigInteger0 = BigInteger.ONE;
      Class<String> class0 = String.class;
      jexlArithmetic0.narrowNumber(bigInteger0, class0);
      jexlArithmetic0.controlNullOperand();
      Short short0 = new Short((short)1);
      FileSystemHandling.shouldAllThrowIOExceptions();
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      Long long0 = new Long(2170L);
      Number number0 = jexlArithmetic0.narrowLong(bigDecimal0, long0, (-2037));
      jexlArithmetic0.positivize(number0);
      jexlArithmetic0.negate((Object) null);
      AtomicBoolean atomicBoolean0 = new AtomicBoolean(true);
      Integer integer0 = jexlArithmetic0.size((Object) atomicBoolean0);
      Integer integer1 = new Integer((short)1);
      Object object0 = jexlArithmetic0.multiply(integer0, integer1);
      Float float0 = new Float((-0.33264396F));
      jexlArithmetic0.xor(object0, (Object) null);
      jexlArithmetic0.compare(number0, number0, (String) null);
      jexlArithmetic0.toDouble(atomicBoolean0);
  }"
773,"    public Object positivize(final Object val) {
        if (val == null) {
            controlNullOperand();
            return null;
        }
        if (val instanceof Short) {
            return ((Short) val).intValue();
        }
        if (val instanceof Byte) {
            return ((Byte) val).intValue();
        }
        if (val instanceof Number) {
            return val;
        }
        if (val instanceof Character) {
            return (int) (Character) val;
        }
        if (val instanceof Boolean) {
            return val;
        }
        if (val instanceof AtomicBoolean) {
            return ((AtomicBoolean) val).get();
        }
        throw new ArithmeticException(""Object positivize:("" + val + "")"");
    }","  public void test50()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      BigInteger bigInteger0 = BigInteger.ZERO;
      Number number0 = jexlArithmetic0.narrow(bigInteger0);
      jexlArithmetic0.subtract(number0, number0);
      Float float0 = new Float((-2368.8948));
      jexlArithmetic0.subtract(float0, (Object) null);
      AtomicBoolean atomicBoolean0 = new AtomicBoolean();
      Object object0 = jexlArithmetic0.not(atomicBoolean0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Integer integer0 = new Integer((-45));
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Integer.compareUnsigned((-45), (-45));
      Object object1 = jexlArithmetic0.logicalNot(float0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Short short0 = new Short((short)31);
      jexlArithmetic0.lessThan(atomicBoolean0, short0);
      JexlArithmetic.isMultiplyExact((-32768L), (-1677L), (-1677L));
      BigInteger bigInteger1 = jexlArithmetic0.toBigInteger(object0);
      jexlArithmetic0.isPositivizeStable();
      jexlArithmetic0.isNegateStable();
      jexlArithmetic0.divide(object1, bigInteger1);
      jexlArithmetic0.getMathContext();
      JexlArithmetic.ArrayBuilder jexlArithmetic_ArrayBuilder0 = jexlArithmetic0.arrayBuilder(0);
      jexlArithmetic_ArrayBuilder0.create(true);
      AtomicBoolean atomicBoolean1 = new AtomicBoolean();
      jexlArithmetic0.positivize(atomicBoolean1);
  }"
774,"    public BigDecimal toBigDecimal(final Object val) {
        if (val instanceof BigDecimal) {
            return roundBigDecimal((BigDecimal) val);
        }
        if (val == null) {
            controlNullOperand();
            return BigDecimal.ZERO;
        }
        if (val instanceof Double) {
            if (Double.isNaN(((Double) val))) {
                return BigDecimal.ZERO;
            }
            return roundBigDecimal(new BigDecimal(val.toString(), getMathContext()));
        }
        if (val instanceof Number) {
            return roundBigDecimal(new BigDecimal(val.toString(), getMathContext()));
        }
        if (val instanceof Boolean) {
            return BigDecimal.valueOf(((Boolean) val) ? 1. : 0.);
        }
        if (val instanceof AtomicBoolean) {
            return BigDecimal.valueOf(((AtomicBoolean) val).get() ? 1L : 0L);
        }
        if (val instanceof String) {
            final String string = (String) val;
            if ("""".equals(string)) {
                return BigDecimal.ZERO;
            }
            return roundBigDecimal(new BigDecimal(string, getMathContext()));
        }
        if (val instanceof Character) {
            final int i = ((Character) val);
            return new BigDecimal(i);
        }
        throw new ArithmeticException(""BigDecimal coercion: ""
                + val.getClass().getName() + "":("" + val + "")"");
    }","  public void test51()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      MapContext mapContext0 = new MapContext(hashMap0);
      mapContext0.set(""~IAduhvoX"", (Object) null);
      hashMap0.put(""~IAduhvoX"", jexlArithmetic0);
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.options((JexlContext) mapContext0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      jexlArithmetic1.isPositivizeStable();
      String string0 = ""]n^GY_8'"";
      hashMap0.put(""]n^GY_8'"", jexlArithmetic0);
      mapContext0.set("")"", "")"");
      Boolean boolean0 = Boolean.FALSE;
      jexlArithmetic1.contains(mapContext0, boolean0);
      Long long0 = new Long(324L);
      Long.min(324L, 324L);
      Long.min((-5172L), 324L);
      Long.toUnsignedString(16380L);
      // Undeclared exception!
      try { 
        jexlArithmetic0.toBigDecimal((Object) null);
        fail(""Expecting exception: ArithmeticException"");
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.JexlArithmetic"", e);
      }
  }"
775,"    public Object or(final Object left, final Object right) {
        final long l = toLong(left);
        final long r = toLong(right);
        return l | r;
    }","  public void test52()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Random.setNextRandom(3475);
      MathContext mathContext0 = MathContext.UNLIMITED;
      int int0 = 0;
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true, mathContext0, 0);
      MathContext mathContext1 = MathContext.DECIMAL32;
      Number number0 = jexlArithmetic0.narrowLong(mathContext1, mathContext1, (-1L));
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      jexlArithmetic0.narrowBigDecimal(number0, number0, bigDecimal0);
      Character character0 = Character.valueOf('8');
      jexlArithmetic0.toLong(character0);
      AtomicBoolean atomicBoolean0 = new AtomicBoolean(false);
      // Undeclared exception!
      try { 
        jexlArithmetic0.or(atomicBoolean0, mathContext0);
        fail(""Expecting exception: ArithmeticException"");
      } catch(ArithmeticException e) {
         //
         // Long coercion: java.math.MathContext:(precision=0 roundingMode=HALF_UP)
         //
         verifyException(""org.apache.commons.jexl3.JexlArithmetic"", e);
      }
  }"
776,"    public ArrayBuilder arrayBuilder(final int size) {
        return new org.apache.commons.jexl3.internal.ArrayBuilder(size);
    }","  public void test53()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true);
      JexlOptions jexlOptions0 = new JexlOptions();
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.options(jexlOptions0);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) jexlArithmetic1;
      jexlArithmetic0.narrowArguments(objectArray0);
      Boolean boolean0 = null;
      jexlArithmetic0.arrayBuilder(1);
      Integer integer0 = new Integer(34);
      Byte byte0 = new Byte((byte) (-61));
      jexlArithmetic1.contains(integer0, byte0);
      jexlArithmetic1.isEmpty((Object) jexlArithmetic0, (Boolean) null);
      EvoSuiteFile evoSuiteFile0 = null;
      String[] stringArray0 = new String[4];
      String string0 = ""0^5@+f["";
      // Undeclared exception!
      try { 
        jexlArithmetic0.arrayBuilder((byte) (-61));
        fail(""Expecting exception: NegativeArraySizeException"");
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.internal.ArrayBuilder"", e);
      }
  }"
777,"    public String toString(final Object val) {
        if (val == null) {
            controlNullOperand();
            return """";
        }
        if (!(val instanceof Double)) {
            return val.toString();
        }
        final Double dval = (Double) val;
        if (Double.isNaN(dval)) {
            return """";
        }
        return dval.toString();
    }","  public void test54()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      Byte byte0 = new Byte((byte)31);
      Byte.toUnsignedLong((byte)31);
      objectArray0[5] = null;
      objectArray0[6] = null;
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false, (MathContext) null, (byte)31);
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.createWithOptions(false, (MathContext) null, (byte)31);
      JexlEngine.EmptyContext jexlEngine_EmptyContext0 = (JexlEngine.EmptyContext)JexlEngine.EMPTY_CONTEXT;
      JexlArithmetic jexlArithmetic2 = jexlArithmetic1.options((JexlContext) jexlEngine_EmptyContext0);
      JexlArithmetic jexlArithmetic3 = jexlArithmetic2.options((JexlContext) jexlEngine_EmptyContext0);
      Object object0 = jexlArithmetic3.controlNullNullOperands();
      jexlArithmetic2.multiply((Object) null, object0);
      Double double0 = new Double(31L);
      jexlArithmetic3.toString((Object) double0);
  }"
778,"    public boolean narrowArguments(final Object[] args) {
        boolean narrowed = false;
        if (args != null) {
            for (int a = 0; a < args.length; ++a) {
                final Object arg = args[a];
                if (arg instanceof Number) {
                    final Number narg = (Number) arg;
                    final Number narrow = narrow(narg);
                    if (!narg.equals(narrow)) {
                        args[a] = narrow;
                        narrowed = true;
                    }
                }
            }
        }
        return narrowed;
    }","  public void test55()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true);
      JexlEngine.getThreadContext();
      Integer integer0 = new Integer(7);
      BigInteger bigInteger0 = JexlArithmetic.BIGI_LONG_MIN_VALUE;
      Boolean boolean0 = jexlArithmetic0.empty(bigInteger0);
      BigDecimal bigDecimal0 = new BigDecimal((-2786));
      Boolean boolean1 = jexlArithmetic0.isEmpty((Object) bigDecimal0, boolean0);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) bigInteger0;
      JexlOptions jexlOptions0 = new JexlOptions();
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.options(jexlOptions0);
      Integer integer1 = new Integer(31);
      Object object0 = jexlArithmetic1.subtract(bigInteger0, integer1);
      objectArray0[1] = object0;
      objectArray0[2] = (Object) boolean0;
      objectArray0[3] = (Object) bigDecimal0;
      objectArray0[4] = (Object) jexlArithmetic0;
      objectArray0[5] = (Object) bigInteger0;
      objectArray0[6] = (Object) boolean1;
      jexlArithmetic0.narrowArguments(objectArray0);
  }"
779,"    public boolean equals(final Object left, final Object right) {
        if (left == right) {
            return true;
        }
        if (left == null || right == null) {
            return false;
        }
        if (left instanceof Boolean || right instanceof Boolean) {
            return toBoolean(left) == toBoolean(right);
        }
        return compare(left, right, ""=="") == 0;
    }","  public void test56()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true);
      AtomicBoolean atomicBoolean0 = new AtomicBoolean(true);
      jexlArithmetic0.negate(atomicBoolean0);
      Boolean boolean0 = jexlArithmetic0.empty(atomicBoolean0);
      jexlArithmetic0.equals((Object) boolean0, (Object) atomicBoolean0);
      JexlOptions jexlOptions0 = new JexlOptions();
      Random.setNextRandom((-2130706431));
  }"
780,"    public boolean lessThan(final Object left, final Object right) {
        if ((left == right) || (left == null) || (right == null)) {
            return false;
        }
        return compare(left, right, ""<"") < 0;

    }","  public void test57()  throws Throwable  {
      MathContext mathContext0 = MathContext.DECIMAL32;
      mathContext0.getPrecision();
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true, mathContext0, 1600);
      JexlOptions jexlOptions0 = new JexlOptions();
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.options(jexlOptions0);
      jexlArithmetic1.isNegateStable();
      BigInteger bigInteger0 = BigInteger.ONE;
      jexlArithmetic0.narrowBigInteger(jexlArithmetic1, (Object) null, bigInteger0);
      Boolean boolean0 = Boolean.TRUE;
      JexlArithmetic.ArrayBuilder jexlArithmetic_ArrayBuilder0 = jexlArithmetic0.arrayBuilder(7);
      Object object0 = jexlArithmetic_ArrayBuilder0.create(true);
      // Undeclared exception!
      try { 
        jexlArithmetic1.lessThan(boolean0, object0);
        fail(""Expecting exception: ClassCastException"");
      } catch(ClassCastException e) {
         //
         // java.util.ArrayList cannot be cast to java.lang.Boolean
         //
         verifyException(""java.lang.Boolean"", e);
      }
  }"
781,"    public Object multiply(final Object left, final Object right) {
        if (left == null && right == null) {
            return controlNullNullOperands();
        }
        // if both (non null) args fit as int
        final Number ln = asLongNumber(left);
        final Number rn = asLongNumber(right);
        if (ln != null && rn != null) {
            final long x = ln.longValue();
            final long y = rn.longValue();
            final long result = x * y;
            // detect overflow
            if (!isMultiplyExact(x, y, result)) {
                return BigInteger.valueOf(x).multiply(BigInteger.valueOf(y));
            }
            return narrowLong(left, right, result);
        }
        // if either are bigdecimal use that type
        if (left instanceof BigDecimal || right instanceof BigDecimal) {
            final BigDecimal l = toBigDecimal(left);
            final BigDecimal r = toBigDecimal(right);
            final BigDecimal result = l.multiply(r, getMathContext());
            return narrowBigDecimal(left, right, result);
        }
        // if either are floating point (double or float) use double
        if (isFloatingPointNumber(left) || isFloatingPointNumber(right)) {
            final double l = toDouble(left);
            final double r = toDouble(right);
            return l * r;
        }
        // otherwise treat as integers
        final BigInteger l = toBigInteger(left);
        final BigInteger r = toBigInteger(right);
        final BigInteger result = l.multiply(r);
        return narrowBigInteger(left, right, result);
    }","  public void test58()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      byte byte0 = (byte)72;
      Byte byte1 = new Byte((byte)72);
      Double double0 = new Double((byte)72);
      Double.isFinite((byte)72);
      BigInteger bigInteger0 = BigInteger.ONE;
      Number number0 = jexlArithmetic0.narrow(bigInteger0);
      Byte.toUnsignedInt((byte) (-89));
      Byte.compare((byte) (-83), (byte)72);
      jexlArithmetic0.equals((Object) byte1, (Object) double0);
      Object object0 = jexlArithmetic0.or(byte1, double0);
      Byte byte2 = new Byte((byte)72);
      jexlArithmetic0.or("""", byte2);
      jexlArithmetic0.positivize(number0);
      JexlOptions jexlOptions0 = new JexlOptions();
      jexlArithmetic0.options(jexlOptions0);
      JexlArithmetic jexlArithmetic1 = new JexlArithmetic(false);
      // Undeclared exception!
      try { 
        jexlArithmetic0.multiply(object0, jexlArithmetic1);
        fail(""Expecting exception: ArithmeticException"");
      } catch(ArithmeticException e) {
         //
         // BigInteger coercion: org.apache.commons.jexl3.JexlArithmetic:(org.apache.commons.jexl3.JexlArithmetic@4)
         //
         verifyException(""org.apache.commons.jexl3.JexlArithmetic"", e);
      }
  }"
782,"    public int toInteger(final Object val) {
        if (val == null) {
            controlNullOperand();
            return 0;
        }
        if (val instanceof Double) {
            final Double dval = (Double) val;
            if (Double.isNaN(dval)) {
                return 0;
            }
            return dval.intValue();
        }
        if (val instanceof Number) {
            return ((Number) val).intValue();
        }
        if (val instanceof String) {
            if ("""".equals(val)) {
                return 0;
            }
            return Integer.parseInt((String) val);
        }
        if (val instanceof Boolean) {
            return ((Boolean) val) ? 1 : 0;
        }
        if (val instanceof AtomicBoolean) {
            return ((AtomicBoolean) val).get() ? 1 : 0;
        }
        if (val instanceof Character) {
            return ((Character) val);
        }

        throw new ArithmeticException(""Integer coercion: ""
                + val.getClass().getName() + "":("" + val + "")"");
    }","  public void test59()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true, (MathContext) null, 0);
      JexlArithmetic.MapBuilder jexlArithmetic_MapBuilder0 = jexlArithmetic0.mapBuilder(0);
      char[] charArray0 = new char[4];
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ""@[:5*@N'"");
      AtomicBoolean atomicBoolean0 = new AtomicBoolean(false);
      jexlArithmetic0.toBoolean(atomicBoolean0);
      charArray0[0] = '=';
      charArray0[1] = '7';
      charArray0[2] = 'U';
      charArray0[3] = 'g';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0, 0, 0);
      Object object0 = jexlArithmetic_MapBuilder0.create();
      jexlArithmetic_MapBuilder0.put(charBuffer0, object0);
      // Undeclared exception!
      try { 
        jexlArithmetic0.toInteger(charBuffer0);
        fail(""Expecting exception: ArithmeticException"");
      } catch(ArithmeticException e) {
         //
         // Integer coercion: java.nio.HeapCharBuffer:()
         //
         verifyException(""org.apache.commons.jexl3.JexlArithmetic"", e);
      }
  }"
783,"    public Object positivize(final Object val) {
        if (val == null) {
            controlNullOperand();
            return null;
        }
        if (val instanceof Short) {
            return ((Short) val).intValue();
        }
        if (val instanceof Byte) {
            return ((Byte) val).intValue();
        }
        if (val instanceof Number) {
            return val;
        }
        if (val instanceof Character) {
            return (int) (Character) val;
        }
        if (val instanceof Boolean) {
            return val;
        }
        if (val instanceof AtomicBoolean) {
            return ((AtomicBoolean) val).get();
        }
        throw new ArithmeticException(""Object positivize:("" + val + "")"");
    }","  public void test60()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true);
      Pattern pattern0 = JexlArithmetic.FLOAT_PATTERN;
      JexlArithmetic.SetBuilder jexlArithmetic_SetBuilder0 = jexlArithmetic0.setBuilder(46);
      Object object0 = jexlArithmetic_SetBuilder0.create();
      jexlArithmetic0.equals((Object) pattern0, object0);
      MathContext mathContext0 = new MathContext(13);
      jexlArithmetic0.add(object0, ""?b7A"");
      jexlArithmetic0.createWithOptions(true, mathContext0, 1602);
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.createWithOptions(true, mathContext0, 13);
      jexlArithmetic1.toBoolean(mathContext0);
      JexlOptions jexlOptions0 = new JexlOptions();
      String[] stringArray0 = new String[5];
      String string0 = ""_O6w2p"";
      stringArray0[0] = ""_O6w2p"";
      stringArray0[1] = ""-Q<S(c0j.&U,m}A"";
      stringArray0[2] = ""I 9HK+Yv*PK7("";
      stringArray0[3] = ""]: '"";
      stringArray0[4] = ""annotation"";
      jexlOptions0.setFlags(stringArray0);
      JexlArithmetic jexlArithmetic2 = jexlArithmetic1.options(jexlOptions0);
      Class<Long> class0 = Long.TYPE;
      jexlArithmetic2.narrowAccept(class0, class0);
      MathContext mathContext1 = MathContext.DECIMAL64;
      // Undeclared exception!
      try { 
        jexlArithmetic2.positivize(mathContext1);
        fail(""Expecting exception: ArithmeticException"");
      } catch(ArithmeticException e) {
         //
         // Object positivize:(precision=16 roundingMode=HALF_EVEN)
         //
         verifyException(""org.apache.commons.jexl3.JexlArithmetic"", e);
      }
  }"
784,"    public JexlArithmetic options(final JexlOptions options) {
        if (options != null) {
            final boolean ostrict = options.isStrictArithmetic();
            MathContext bigdContext = options.getMathContext();
            if (bigdContext == null) {
                bigdContext = getMathContext();
            }
            int bigdScale = options.getMathScale();
            if (bigdScale == Integer.MIN_VALUE) {
                bigdScale = getMathScale();
            }
            if (ostrict != isStrict()
                || bigdScale != getMathScale()
                || bigdContext != getMathContext()) {
                return createWithOptions(ostrict, bigdContext, bigdScale);
            }
        }
        return this;
    }","  public void test61()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true);
      Short short0 = new Short((short) (-122));
      Class<String> class0 = String.class;
      jexlArithmetic0.narrowNumber(short0, class0);
      Short.toUnsignedInt((short) (-450));
      Short.toUnsignedInt((short) (-122));
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Short.compare((short) (-1198), (short)3551);
      jexlArithmetic0.asLongNumber(short0);
      MathContext mathContext0 = MathContext.DECIMAL64;
      Short short1 = new Short((short)15691);
      Short.compare((short) (-1198), (short)53);
      mathContext0.equals(short1);
      mathContext0.getPrecision();
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.createWithOptions(true, mathContext0, (short) (-122));
      Integer integer0 = new Integer(3113);
      Integer.getInteger(""A"");
      jexlArithmetic1.size((Object) jexlArithmetic0, integer0);
      jexlArithmetic1.isPositivizeStable();
      JexlArithmetic.isMultiplyExact(16380L, (short) (-122), (short) (-122));
      BigInteger bigInteger0 = BigInteger.ONE;
      Float float0 = new Float((double) 65086);
      jexlArithmetic1.bitwiseAnd(bigInteger0, float0);
      JexlOptions jexlOptions0 = new JexlOptions();
      jexlArithmetic0.options(jexlOptions0);
  }"
785,"    public Object negate(final Object val) {
        if (val == null) {
            controlNullOperand();
            return null;
        }
        if (val instanceof Integer) {
            return -((Integer) val);
        }
        if (val instanceof Double) {
            return - ((Double) val);
        }
        if (val instanceof Long) {
            return -((Long) val);
        }
        if (val instanceof BigDecimal) {
            return ((BigDecimal) val).negate();
        }
        if (val instanceof BigInteger) {
            return ((BigInteger) val).negate();
        }
        if (val instanceof Float) {
            return -((Float) val);
        }
        if (val instanceof Short) {
            return (short) -((Short) val);
        }
        if (val instanceof Byte) {
            return (byte) -((Byte) val);
        }
        if (val instanceof Boolean) {
            return !(Boolean) val;
        }
        if (val instanceof AtomicBoolean) {
            return !((AtomicBoolean) val).get();
        }
        throw new ArithmeticException(""Object negate:("" + val + "")"");
    }","  public void test62()  throws Throwable  {
      MathContext mathContext0 = MathContext.DECIMAL32;
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false, mathContext0, (-2037));
      Boolean.logicalOr(true, false);
      mathContext0.toString();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      BigInteger bigInteger0 = BigInteger.ONE;
      Character character0 = new Character('Y');
      MapContext mapContext0 = new MapContext();
      jexlArithmetic0.options((JexlContext) mapContext0);
      BigDecimal bigDecimal0 = new BigDecimal(1.7976931348623157E308);
      Long long0 = new Long(2170L);
      Class<Short> class0 = Short.class;
      jexlArithmetic0.narrowNumber(bigDecimal0, class0);
      Number number0 = jexlArithmetic0.narrowLong(bigDecimal0, long0, (-2037));
      Short short0 = new Short((short)1);
      jexlArithmetic0.positivize(number0);
      jexlArithmetic0.negate((Object) null);
  }"
786,"    public Object multiply(final Object left, final Object right) {
        if (left == null && right == null) {
            return controlNullNullOperands();
        }
        // if both (non null) args fit as int
        final Number ln = asLongNumber(left);
        final Number rn = asLongNumber(right);
        if (ln != null && rn != null) {
            final long x = ln.longValue();
            final long y = rn.longValue();
            final long result = x * y;
            // detect overflow
            if (!isMultiplyExact(x, y, result)) {
                return BigInteger.valueOf(x).multiply(BigInteger.valueOf(y));
            }
            return narrowLong(left, right, result);
        }
        // if either are bigdecimal use that type
        if (left instanceof BigDecimal || right instanceof BigDecimal) {
            final BigDecimal l = toBigDecimal(left);
            final BigDecimal r = toBigDecimal(right);
            final BigDecimal result = l.multiply(r, getMathContext());
            return narrowBigDecimal(left, right, result);
        }
        // if either are floating point (double or float) use double
        if (isFloatingPointNumber(left) || isFloatingPointNumber(right)) {
            final double l = toDouble(left);
            final double r = toDouble(right);
            return l * r;
        }
        // otherwise treat as integers
        final BigInteger l = toBigInteger(left);
        final BigInteger r = toBigInteger(right);
        final BigInteger result = l.multiply(r);
        return narrowBigInteger(left, right, result);
    }","  public void test63()  throws Throwable  {
      MathContext mathContext0 = MathContext.DECIMAL64;
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true, mathContext0, 0);
      Byte byte0 = new Byte((byte)36);
      Byte.toUnsignedInt((byte)36);
      jexlArithmetic0.lessThan(byte0, byte0);
      BigDecimal bigDecimal0 = new BigDecimal((-3044L));
      BigDecimal bigDecimal1 = jexlArithmetic0.roundBigDecimal(bigDecimal0);
      jexlArithmetic0.startsWith(mathContext0, bigDecimal1);
      jexlArithmetic0.toBigDecimal(bigDecimal0);
      jexlArithmetic0.createWithOptions(true, mathContext0, 2520);
      Float float0 = new Float(1651.1852F);
      Float.min(41.704F, 36);
      jexlArithmetic0.greaterThanOrEqual(byte0, float0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Long long0 = new Long((-2172L));
      // Undeclared exception!
      try { 
        jexlArithmetic0.multiply(bigDecimal1, long0);
        fail(""Expecting exception: NumberFormatException"");
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.math.BigDecimal"", e);
      }
  }"
787,"    public boolean lessThan(final Object left, final Object right) {
        if ((left == right) || (left == null) || (right == null)) {
            return false;
        }
        return compare(left, right, ""<"") < 0;

    }","  public void test64()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      Byte byte0 = new Byte((byte)2);
      BigDecimal bigDecimal0 = new BigDecimal((-4440));
      jexlArithmetic0.narrowBigDecimal(fileSystemHandling0, (Object) null, bigDecimal0);
      jexlArithmetic0.narrow(byte0);
      Character character0 = Character.valueOf('B');
      Object object0 = jexlArithmetic0.bitwiseAnd(character0, character0);
      Character.isIdeographic((byte)2);
      Short short0 = new Short((short)1972);
      jexlArithmetic0.mod(object0, short0);
      jexlArithmetic0.positivize(short0);
      Object object1 = jexlArithmetic0.controlNullNullOperands();
      jexlArithmetic0.isEmpty(object1);
      Float float0 = new Float(1.0F);
      jexlArithmetic0.lessThanOrEqual(float0, character0);
      BigDecimal bigDecimal1 = BigDecimal.TEN;
      BigDecimal bigDecimal2 = jexlArithmetic0.roundBigDecimal(bigDecimal1);
      Float float1 = new Float((double) (short)1972);
      jexlArithmetic0.negate(float1);
      AtomicBoolean atomicBoolean0 = new AtomicBoolean(true);
      jexlArithmetic0.and(object1, atomicBoolean0);
      JexlArithmetic.MapBuilder jexlArithmetic_MapBuilder0 = jexlArithmetic0.mapBuilder((short)1972);
      jexlArithmetic_MapBuilder0.create();
      jexlArithmetic0.isEmpty((Object) bigDecimal1);
      // Undeclared exception!
      try { 
        jexlArithmetic0.lessThan(bigDecimal2, ""<="");
        fail(""Expecting exception: NumberFormatException"");
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.math.BigDecimal"", e);
      }
  }"
788,"    public final Object bitwiseAnd(final Object lhs, final Object rhs) {
        return and(lhs, rhs);
    }","  public void test65()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      Float float0 = new Float((-3767.0593F));
      Long long0 = new Long((-2172L));
      FileSystemHandling.shouldAllThrowIOExceptions();
      Long.remainderUnsigned((-2172L), (-2172L));
      MathContext mathContext0 = MathContext.DECIMAL32;
      mathContext0.toString();
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.createWithOptions(false, mathContext0, 16);
      jexlArithmetic0.toInteger(float0);
      jexlArithmetic0.toString((Object) null);
      jexlArithmetic0.mapBuilder(0);
      jexlArithmetic0.logicalNot((Object) null);
      String string0 = ""selfXor"";
      Pattern pattern0 = Pattern.compile(""selfXor"", (-1078));
      jexlArithmetic0.greaterThanOrEqual(""precision=7 roundingMode=HALF_EVEN"", ""selfXor"");
      Class<Byte> class0 = Byte.class;
      jexlArithmetic1.narrowNumber(long0, class0);
      // Undeclared exception!
      try { 
        jexlArithmetic0.bitwiseAnd(pattern0, ""selfXor"");
        fail(""Expecting exception: ArithmeticException"");
      } catch(ArithmeticException e) {
         //
         // Long coercion: java.util.regex.Pattern:(selfXor)
         //
         verifyException(""org.apache.commons.jexl3.JexlArithmetic"", e);
      }
  }"
789,"    public Object mod(final Object left, final Object right) {
        if (left == null && right == null) {
            return controlNullNullOperands();
        }
        // if both (non null) args fit as long
        final Number ln = asLongNumber(left);
        final Number rn = asLongNumber(right);
        if (ln != null && rn != null) {
            final long x = ln.longValue();
            final long y = rn.longValue();
            if (y == 0L) {
                throw new ArithmeticException(""%"");
            }
            final long result = x % y;
            return narrowLong(left, right,  result);
        }
        // if either are bigdecimal use that type
        if (left instanceof BigDecimal || right instanceof BigDecimal) {
            final BigDecimal l = toBigDecimal(left);
            final BigDecimal r = toBigDecimal(right);
            if (BigDecimal.ZERO.equals(r)) {
                throw new ArithmeticException(""%"");
            }
            final BigDecimal remainder = l.remainder(r, getMathContext());
            return narrowBigDecimal(left, right, remainder);
        }
        // if either are floating point (double or float) use double
        if (isFloatingPointNumber(left) || isFloatingPointNumber(right)) {
            final double l = toDouble(left);
            final double r = toDouble(right);
            if (r == 0.0) {
                throw new ArithmeticException(""%"");
            }
            return l % r;
        }
        // otherwise treat as integers
        final BigInteger l = toBigInteger(left);
        final BigInteger r = toBigInteger(right);
        if (BigInteger.ZERO.equals(r)) {
            throw new ArithmeticException(""%"");
        }
        final BigInteger result = l.mod(r);
        return narrowBigInteger(left, right, result);
    }","  public void test66()  throws Throwable  {
      RoundingMode roundingMode0 = RoundingMode.DOWN;
      MathContext mathContext0 = new MathContext(0, roundingMode0);
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false, mathContext0, (-1943));
      JexlOptions jexlOptions0 = new JexlOptions();
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.options(jexlOptions0);
      MathContext mathContext1 = new MathContext(0);
      jexlOptions0.copy();
      JexlArithmetic jexlArithmetic2 = new JexlArithmetic(false, mathContext0, (-1943));
      MathContext mathContext2 = MathContext.DECIMAL128;
      Long long0 = new Long(314L);
      jexlArithmetic0.mod((Object) null, long0);
      JexlArithmetic jexlArithmetic3 = new JexlArithmetic(true, mathContext2, 0);
      Boolean boolean0 = Boolean.FALSE;
      jexlArithmetic3.contains(boolean0, jexlArithmetic2);
      jexlOptions0.getMathContext();
      Object object0 = jexlArithmetic2.multiply((Object) null, (Object) null);
      jexlArithmetic1.toLong(object0);
      jexlArithmetic0.getMathContext();
      BigInteger bigInteger0 = BigInteger.ZERO;
      jexlArithmetic1.empty(bigInteger0);
      Boolean boolean1 = jexlArithmetic3.contains(jexlArithmetic2, (Object) null);
      jexlArithmetic1.positivize(boolean1);
      JexlArithmetic.SetBuilder jexlArithmetic_SetBuilder0 = jexlArithmetic2.setBuilder(0);
      jexlArithmetic_SetBuilder0.create();
      Float float0 = new Float((float) 0);
      // Undeclared exception!
      try { 
        jexlArithmetic2.mod(long0, float0);
        fail(""Expecting exception: ArithmeticException"");
      } catch(ArithmeticException e) {
         //
         // %
         //
         verifyException(""org.apache.commons.jexl3.JexlArithmetic"", e);
      }
  }"
790,"    public Boolean endsWith(final Object left, final Object right) {
        if (left == null && right == null) {
            //if both are null L == R
            return true;
        }
        if (left == null || right == null) {
            // we know both aren't null, therefore L != R
            return false;
        }
        if (left instanceof CharSequence) {
            return (toString(left)).endsWith(toString(right));
        }
        return null;
    }","  public void test67()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.options((JexlOptions) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      MapContext mapContext0 = new MapContext();
      JexlArithmetic jexlArithmetic2 = jexlArithmetic1.options((JexlContext) mapContext0);
      mapContext0.clear();
      MathContext mathContext0 = new MathContext(4432);
      mathContext0.toString();
      FileSystemHandling.shouldAllThrowIOExceptions();
      JexlArithmetic jexlArithmetic3 = jexlArithmetic2.createWithOptions(true, mathContext0, Integer.MIN_VALUE);
      mathContext0.toString();
      AtomicBoolean atomicBoolean0 = new AtomicBoolean();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ""precision=4432 roundingMode=HALF_UP"");
      jexlArithmetic3.toBigDecimal(atomicBoolean0);
      Double double0 = new Double(1898.7);
      Double.sum(1898.7, 4432);
      jexlArithmetic2.complement(double0);
      jexlArithmetic3.endsWith(jexlArithmetic2, double0);
  }"
791,"    public JexlArithmetic options(final JexlOptions options) {
        if (options != null) {
            final boolean ostrict = options.isStrictArithmetic();
            MathContext bigdContext = options.getMathContext();
            if (bigdContext == null) {
                bigdContext = getMathContext();
            }
            int bigdScale = options.getMathScale();
            if (bigdScale == Integer.MIN_VALUE) {
                bigdScale = getMathScale();
            }
            if (ostrict != isStrict()
                || bigdScale != getMathScale()
                || bigdContext != getMathContext()) {
                return createWithOptions(ostrict, bigdContext, bigdScale);
            }
        }
        return this;
    }","  public void test68()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true);
      AtomicBoolean atomicBoolean0 = new AtomicBoolean(true);
      AtomicBoolean atomicBoolean1 = new AtomicBoolean();
      jexlArithmetic0.negate(atomicBoolean1);
      Boolean boolean0 = jexlArithmetic0.empty(atomicBoolean0);
      jexlArithmetic0.equals((Object) boolean0, (Object) atomicBoolean0);
      JexlOptions jexlOptions0 = new JexlOptions();
      jexlArithmetic0.options(jexlOptions0);
      Random.setNextRandom((-2130706431));
  }"
792,"    public int toInteger(final Object val) {
        if (val == null) {
            controlNullOperand();
            return 0;
        }
        if (val instanceof Double) {
            final Double dval = (Double) val;
            if (Double.isNaN(dval)) {
                return 0;
            }
            return dval.intValue();
        }
        if (val instanceof Number) {
            return ((Number) val).intValue();
        }
        if (val instanceof String) {
            if ("""".equals(val)) {
                return 0;
            }
            return Integer.parseInt((String) val);
        }
        if (val instanceof Boolean) {
            return ((Boolean) val) ? 1 : 0;
        }
        if (val instanceof AtomicBoolean) {
            return ((AtomicBoolean) val).get() ? 1 : 0;
        }
        if (val instanceof Character) {
            return ((Character) val);
        }

        throw new ArithmeticException(""Integer coercion: ""
                + val.getClass().getName() + "":("" + val + "")"");
    }","  public void test69()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true);
      AtomicBoolean atomicBoolean0 = new AtomicBoolean(false);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      jexlArithmetic0.equals((Object) atomicBoolean0, (Object) atomicBoolean0);
      Integer integer0 = new Integer((-1567));
      Float float0 = new Float((-2300.21705042));
      Float.sum(767.8273F, 0.0F);
      Float.max(767.8273F, 767.8273F);
      Float.max((-1567), (-1567));
      jexlArithmetic0.greaterThanOrEqual(float0, atomicBoolean0);
      jexlArithmetic0.size((Object) atomicBoolean0, integer0);
      Double double0 = new Double(55.750192);
      jexlArithmetic0.toInteger(double0);
      jexlArithmetic0.arrayBuilder(55);
      jexlArithmetic0.mapBuilder(2435);
      jexlArithmetic0.toInteger(atomicBoolean0);
  }"
793,"    public Object divide(final Object left, final Object right) {
        if (left == null && right == null) {
            return controlNullNullOperands();
        }
        // if both (non null) args fit as long
        final Number ln = asLongNumber(left);
        final Number rn = asLongNumber(right);
        if (ln != null && rn != null) {
            final long x = ln.longValue();
            final long y = rn.longValue();
            if (y == 0L) {
                throw new ArithmeticException(""/"");
            }
            final long result = x  / y;
            return narrowLong(left, right, result);
        }
        // if either are bigdecimal use that type
        if (left instanceof BigDecimal || right instanceof BigDecimal) {
            final BigDecimal l = toBigDecimal(left);
            final BigDecimal r = toBigDecimal(right);
            if (BigDecimal.ZERO.equals(r)) {
                throw new ArithmeticException(""/"");
            }
            final BigDecimal result = l.divide(r, getMathContext());
            return narrowBigDecimal(left, right, result);
        }
        // if either are floating point (double or float) use double
        if (isFloatingPointNumber(left) || isFloatingPointNumber(right)) {
            final double l = toDouble(left);
            final double r = toDouble(right);
            if (r == 0.0) {
                throw new ArithmeticException(""/"");
            }
            return l / r;
        }
        // otherwise treat as integers
        final BigInteger l = toBigInteger(left);
        final BigInteger r = toBigInteger(right);
        if (BigInteger.ZERO.equals(r)) {
            throw new ArithmeticException(""/"");
        }
        final BigInteger result = l.divide(r);
        return narrowBigInteger(left, right, result);
    }","  public void test70()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      BigInteger bigInteger0 = BigInteger.ZERO;
      Number number0 = jexlArithmetic0.narrow(bigInteger0);
      jexlArithmetic0.subtract(number0, number0);
      Float float0 = new Float((-2368.8948));
      jexlArithmetic0.subtract(float0, (Object) null);
      AtomicBoolean atomicBoolean0 = new AtomicBoolean();
      atomicBoolean0.getAndSet(false);
      Object object0 = jexlArithmetic0.not(atomicBoolean0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Integer integer0 = new Integer((-45));
      Integer.getInteger(""positivize"");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Integer.compareUnsigned((-45), (-45));
      Object object1 = jexlArithmetic0.logicalNot(float0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Short short0 = new Short((short)31);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      jexlArithmetic0.lessThan(atomicBoolean0, short0);
      JexlArithmetic.isMultiplyExact((-32768L), (-1677L), (-1677L));
      BigInteger bigInteger1 = jexlArithmetic0.toBigInteger(object0);
      jexlArithmetic0.isPositivizeStable();
      jexlArithmetic0.isNegateStable();
      jexlArithmetic0.divide(object1, bigInteger1);
      Byte byte0 = new Byte((byte) (-109));
      jexlArithmetic0.divide(short0, byte0);
  }"
794,"    public Object or(final Object left, final Object right) {
        final long l = toLong(left);
        final long r = toLong(right);
        return l | r;
    }","  public void test71()  throws Throwable  {
      JexlOptions jexlOptions0 = new JexlOptions();
      jexlOptions0.getMathContext();
      int int0 = 968;
      jexlOptions0.setLexicalShade(true);
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true, (MathContext) null, 968);
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.createWithOptions(true, (MathContext) null, 968);
      BigDecimal bigDecimal0 = new BigDecimal((long) 968);
      Class<AtomicBoolean> class0 = AtomicBoolean.class;
      jexlArithmetic0.narrowNumber(bigDecimal0, class0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Byte byte0 = new Byte((byte)45);
      JexlArithmetic jexlArithmetic2 = jexlArithmetic1.options(jexlOptions0);
      jexlArithmetic2.negate(bigDecimal0);
      Byte.compare((byte) (-2), (byte) (-84));
      Integer integer0 = new Integer((byte) (-2));
      Integer integer1 = Integer.getInteger((String) null, integer0);
      Boolean boolean0 = jexlArithmetic1.isEmpty((Object) integer1);
      Integer integer2 = new Integer(1292);
      jexlArithmetic0.size((Object) boolean0, integer2);
      Class<MathContext> class1 = MathContext.class;
      jexlArithmetic1.narrowNumber(byte0, class1);
      Character character0 = Character.valueOf('{');
      // Undeclared exception!
      try { 
        jexlArithmetic1.or(class1, character0);
        fail(""Expecting exception: ArithmeticException"");
      } catch(ArithmeticException e) {
         //
         // Long coercion: java.lang.Class:(class java.math.MathContext)
         //
         verifyException(""org.apache.commons.jexl3.JexlArithmetic"", e);
      }
  }"
795,"    public BigDecimal toBigDecimal(final Object val) {
        if (val instanceof BigDecimal) {
            return roundBigDecimal((BigDecimal) val);
        }
        if (val == null) {
            controlNullOperand();
            return BigDecimal.ZERO;
        }
        if (val instanceof Double) {
            if (Double.isNaN(((Double) val))) {
                return BigDecimal.ZERO;
            }
            return roundBigDecimal(new BigDecimal(val.toString(), getMathContext()));
        }
        if (val instanceof Number) {
            return roundBigDecimal(new BigDecimal(val.toString(), getMathContext()));
        }
        if (val instanceof Boolean) {
            return BigDecimal.valueOf(((Boolean) val) ? 1. : 0.);
        }
        if (val instanceof AtomicBoolean) {
            return BigDecimal.valueOf(((AtomicBoolean) val).get() ? 1L : 0L);
        }
        if (val instanceof String) {
            final String string = (String) val;
            if ("""".equals(string)) {
                return BigDecimal.ZERO;
            }
            return roundBigDecimal(new BigDecimal(string, getMathContext()));
        }
        if (val instanceof Character) {
            final int i = ((Character) val);
            return new BigDecimal(i);
        }
        throw new ArithmeticException(""BigDecimal coercion: ""
                + val.getClass().getName() + "":("" + val + "")"");
    }","  public void test72()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true);
      Pattern pattern0 = JexlArithmetic.FLOAT_PATTERN;
      JexlArithmetic.SetBuilder jexlArithmetic_SetBuilder0 = jexlArithmetic0.setBuilder(46);
      Object object0 = jexlArithmetic_SetBuilder0.create();
      jexlArithmetic0.equals((Object) pattern0, object0);
      MathContext mathContext0 = new MathContext(13);
      jexlArithmetic0.createWithOptions(true, mathContext0, 1602);
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.createWithOptions(true, mathContext0, 13);
      jexlArithmetic1.toBoolean(mathContext0);
      JexlOptions jexlOptions0 = new JexlOptions();
      String[] stringArray0 = new String[5];
      String string0 = ""_Y62p"";
      stringArray0[0] = ""_Y62p"";
      jexlOptions0.setLexicalShade(true);
      String string1 = ""-Q<S(c0j.&U,m}A"";
      stringArray0[1] = ""-Q<S(c0j.&U,m}A"";
      stringArray0[2] = ""I 9HK+Yv*PK7("";
      stringArray0[3] = ""]: '"";
      stringArray0[4] = ""annotation"";
      jexlOptions0.setFlags(stringArray0);
      JexlArithmetic jexlArithmetic2 = jexlArithmetic1.options(jexlOptions0);
      Class<Long> class0 = Long.TYPE;
      jexlArithmetic2.narrowAccept(class0, class0);
      jexlArithmetic1.size((Object) class0);
      // Undeclared exception!
      try { 
        jexlArithmetic1.toBigDecimal(""]: '"");
        fail(""Expecting exception: NumberFormatException"");
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.math.BigDecimal"", e);
      }
  }"
796,"    public Object divide(final Object left, final Object right) {
        if (left == null && right == null) {
            return controlNullNullOperands();
        }
        // if both (non null) args fit as long
        final Number ln = asLongNumber(left);
        final Number rn = asLongNumber(right);
        if (ln != null && rn != null) {
            final long x = ln.longValue();
            final long y = rn.longValue();
            if (y == 0L) {
                throw new ArithmeticException(""/"");
            }
            final long result = x  / y;
            return narrowLong(left, right, result);
        }
        // if either are bigdecimal use that type
        if (left instanceof BigDecimal || right instanceof BigDecimal) {
            final BigDecimal l = toBigDecimal(left);
            final BigDecimal r = toBigDecimal(right);
            if (BigDecimal.ZERO.equals(r)) {
                throw new ArithmeticException(""/"");
            }
            final BigDecimal result = l.divide(r, getMathContext());
            return narrowBigDecimal(left, right, result);
        }
        // if either are floating point (double or float) use double
        if (isFloatingPointNumber(left) || isFloatingPointNumber(right)) {
            final double l = toDouble(left);
            final double r = toDouble(right);
            if (r == 0.0) {
                throw new ArithmeticException(""/"");
            }
            return l / r;
        }
        // otherwise treat as integers
        final BigInteger l = toBigInteger(left);
        final BigInteger r = toBigInteger(right);
        if (BigInteger.ZERO.equals(r)) {
            throw new ArithmeticException(""/"");
        }
        final BigInteger result = l.divide(r);
        return narrowBigInteger(left, right, result);
    }","  public void test73()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      boolean boolean0 = false;
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      boolean boolean1 = false;
      MathContext mathContext0 = MathContext.DECIMAL32;
      int int0 = (-1);
      jexlArithmetic0.createWithOptions(false, mathContext0, (-1));
      String string0 = ""org.apache.commons.jexl3.internal.InterpreterBase"";
      // Undeclared exception!
      try { 
        jexlArithmetic0.divide(bigDecimal0, ""org.apache.commons.jexl3.internal.InterpreterBase"");
        fail(""Expecting exception: NumberFormatException"");
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.math.BigDecimal"", e);
      }
  }"
797,"    public Object add(final Object left, final Object right) {
        if (left == null && right == null) {
            return controlNullNullOperands();
        }
        final boolean strconcat = strict
                            ? left instanceof String || right instanceof String
                            : left instanceof String && right instanceof String;
        if (!strconcat) {
            try {
                // if both (non null) args fit as long
                final Number ln = asLongNumber(left);
                final Number rn = asLongNumber(right);
                if (ln != null && rn != null) {
                    final long x = ln.longValue();
                    final long y = rn.longValue();
                    final long result = x + y;
                    // detect overflow, see java8 Math.addExact
                    if (((x ^ result) & (y ^ result)) < 0) {
                        return BigInteger.valueOf(x).add(BigInteger.valueOf(y));
                    }
                    return narrowLong(left, right, result);
                }
                // if either are bigdecimal use that type
                if (left instanceof BigDecimal || right instanceof BigDecimal) {
                    final BigDecimal l = toBigDecimal(left);
                    final BigDecimal r = toBigDecimal(right);
                    final BigDecimal result = l.add(r, getMathContext());
                    return narrowBigDecimal(left, right, result);
                }
                // if either are floating point (double or float) use double
                if (isFloatingPointNumber(left) || isFloatingPointNumber(right)) {
                    final double l = toDouble(left);
                    final double r = toDouble(right);
                    return l + r;
                }
                // otherwise treat as (big) integers
                final BigInteger l = toBigInteger(left);
                final BigInteger r = toBigInteger(right);
                final BigInteger result = l.add(r);
                return narrowBigInteger(left, right, result);
            } catch (final java.lang.NumberFormatException nfe) {
                if (left == null || right == null) {
                    controlNullOperand();
                }
            }
        }
        return toString(left).concat(toString(right));
    }","  public void test74()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      MapContext mapContext0 = new MapContext(hashMap0);
      mapContext0.set(""~IAduhvoX"", (Object) null);
      hashMap0.put(""~IAduhvoX"", jexlArithmetic0);
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.options((JexlContext) mapContext0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      jexlArithmetic1.isPositivizeStable();
      hashMap0.put(""]n^GY_8'"", jexlArithmetic0);
      mapContext0.set("")"", "")"");
      mapContext0.set("")"", jexlArithmetic0);
      Boolean boolean0 = Boolean.FALSE;
      Double double0 = new Double(324L);
      jexlArithmetic0.matches(jexlArithmetic1, double0);
      jexlArithmetic1.contains(mapContext0, boolean0);
      Long long0 = new Long(324L);
      Long.min((-5172L), 324L);
      Double double1 = new Double(3713.09033203125);
      jexlArithmetic0.toLong(double1);
      Long.toUnsignedString(16380L);
      // Undeclared exception!
      try { 
        jexlArithmetic1.add(long0, mapContext0);
        fail(""Expecting exception: ArithmeticException"");
      } catch(ArithmeticException e) {
         //
         // BigInteger coercion: org.apache.commons.jexl3.MapContext:(org.apache.commons.jexl3.MapContext@2)
         //
         verifyException(""org.apache.commons.jexl3.JexlArithmetic"", e);
      }
  }"
798,"    public Object or(final Object left, final Object right) {
        final long l = toLong(left);
        final long r = toLong(right);
        return l | r;
    }","  public void test75()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true);
      MathContext mathContext0 = MathContext.DECIMAL32;
      mathContext0.getRoundingMode();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      mathContext0.equals(jexlArithmetic0);
      jexlArithmetic0.size((Object) mathContext0);
      Boolean boolean0 = Boolean.FALSE;
      Boolean.compare(true, true);
      jexlArithmetic0.endsWith(boolean0, boolean0);
      jexlArithmetic0.endsWith(mathContext0, (Object) null);
      MathContext mathContext1 = MathContext.DECIMAL32;
      Float float0 = new Float((double) 0);
      Double double0 = new Double(0);
      jexlArithmetic0.greaterThan(float0, double0);
      // Undeclared exception!
      try { 
        jexlArithmetic0.or((Object) null, mathContext1);
        fail(""Expecting exception: ArithmeticException"");
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.JexlArithmetic"", e);
      }
  }"
799,"    public Object mod(final Object left, final Object right) {
        if (left == null && right == null) {
            return controlNullNullOperands();
        }
        // if both (non null) args fit as long
        final Number ln = asLongNumber(left);
        final Number rn = asLongNumber(right);
        if (ln != null && rn != null) {
            final long x = ln.longValue();
            final long y = rn.longValue();
            if (y == 0L) {
                throw new ArithmeticException(""%"");
            }
            final long result = x % y;
            return narrowLong(left, right,  result);
        }
        // if either are bigdecimal use that type
        if (left instanceof BigDecimal || right instanceof BigDecimal) {
            final BigDecimal l = toBigDecimal(left);
            final BigDecimal r = toBigDecimal(right);
            if (BigDecimal.ZERO.equals(r)) {
                throw new ArithmeticException(""%"");
            }
            final BigDecimal remainder = l.remainder(r, getMathContext());
            return narrowBigDecimal(left, right, remainder);
        }
        // if either are floating point (double or float) use double
        if (isFloatingPointNumber(left) || isFloatingPointNumber(right)) {
            final double l = toDouble(left);
            final double r = toDouble(right);
            if (r == 0.0) {
                throw new ArithmeticException(""%"");
            }
            return l % r;
        }
        // otherwise treat as integers
        final BigInteger l = toBigInteger(left);
        final BigInteger r = toBigInteger(right);
        if (BigInteger.ZERO.equals(r)) {
            throw new ArithmeticException(""%"");
        }
        final BigInteger result = l.mod(r);
        return narrowBigInteger(left, right, result);
    }","  public void test76()  throws Throwable  {
      MathContext mathContext0 = MathContext.DECIMAL32;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      AtomicBoolean atomicBoolean0 = new AtomicBoolean();
      mathContext0.equals(atomicBoolean0);
      int int0 = (-563);
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true, mathContext0, (-563));
      char[] charArray0 = new char[3];
      mathContext0.getPrecision();
      charArray0[0] = '7';
      charArray0[1] = '%';
      String string0 = ""/"";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ""/"");
      charArray0[2] = 'I';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      jexlArithmetic0.not(charBuffer0);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      charBuffer0.clear();
      BigDecimal bigDecimal1 = JexlArithmetic.BIGD_DOUBLE_MAX_VALUE;
      bigDecimal1.negate();
      bigDecimal0.remainder(bigDecimal1, mathContext0);
      // Undeclared exception!
      try { 
        jexlArithmetic0.mod(mathContext0, bigDecimal0);
        fail(""Expecting exception: ArithmeticException"");
      } catch(ArithmeticException e) {
         //
         // BigDecimal coercion: java.math.MathContext:(precision=7 roundingMode=HALF_EVEN)
         //
         verifyException(""org.apache.commons.jexl3.JexlArithmetic"", e);
      }
  }"
800,"    public boolean lessThanOrEqual(final Object left, final Object right) {
        if (left == right) {
            return true;
        }
        if (left == null || right == null) {
            return false;
        }
        return compare(left, right, ""<="") <= 0;
    }","  public void test77()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      BigInteger bigInteger0 = BigInteger.ZERO;
      Number number0 = jexlArithmetic0.narrow(bigInteger0);
      jexlArithmetic0.subtract(number0, number0);
      Float float0 = new Float((-2368.8948));
      jexlArithmetic0.subtract(float0, (Object) null);
      AtomicBoolean atomicBoolean0 = new AtomicBoolean();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Object object0 = jexlArithmetic0.not(atomicBoolean0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Integer integer0 = new Integer((-45));
      Integer.getInteger(""positivize"");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Integer.compareUnsigned((-45), (-45));
      Object object1 = jexlArithmetic0.logicalNot(float0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Short short0 = new Short((short)31);
      jexlArithmetic0.lessThan(atomicBoolean0, short0);
      JexlArithmetic.isMultiplyExact((-32768L), (-1677L), (-1677L));
      BigInteger bigInteger1 = jexlArithmetic0.toBigInteger(object0);
      bigInteger1.min(bigInteger0);
      jexlArithmetic0.isPositivizeStable();
      jexlArithmetic0.isNegateStable();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ""positivize"");
      jexlArithmetic0.divide(object1, bigInteger1);
      jexlArithmetic0.lessThanOrEqual(object0, (Object) null);
  }"
801,"    public long toLong(final Object val) {
        if (val == null) {
            controlNullOperand();
            return 0L;
        }
        if (val instanceof Double) {
            final Double dval = (Double) val;
            if (Double.isNaN(dval)) {
                return 0L;
            }
            return dval.longValue();
        }
        if (val instanceof Number) {
            return ((Number) val).longValue();
        }
        if (val instanceof String) {
            if ("""".equals(val)) {
                return 0L;
            }
            return Long.parseLong((String) val);
        }
        if (val instanceof Boolean) {
            return ((Boolean) val) ? 1L : 0L;
        }
        if (val instanceof AtomicBoolean) {
            return ((AtomicBoolean) val).get() ? 1L : 0L;
        }
        if (val instanceof Character) {
            return ((Character) val);
        }

        throw new ArithmeticException(""Long coercion: ""
                + val.getClass().getName() + "":("" + val + "")"");
    }","  public void test78()  throws Throwable  {
      Byte byte0 = new Byte((byte)36);
      Byte.toUnsignedInt((byte)36);
      BigDecimal bigDecimal0 = new BigDecimal((-3044L));
      Float float0 = new Float((float) 2520);
      Float.min(41.704F, (byte)36);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Long long0 = new Long((-2172L));
      Float float1 = new Float(3.4028234663852886E38);
      MathContext mathContext0 = MathContext.UNLIMITED;
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false, mathContext0, (-2));
      JexlOptions jexlOptions0 = new JexlOptions();
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.options(jexlOptions0);
      MapContext mapContext0 = new MapContext();
      mapContext0.clear();
      JexlArithmetic jexlArithmetic2 = jexlArithmetic1.options((JexlContext) mapContext0);
      // Undeclared exception!
      try { 
        jexlArithmetic2.toLong((Object) null);
        fail(""Expecting exception: ArithmeticException"");
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.JexlArithmetic"", e);
      }
  }"
802,"    public BigDecimal toBigDecimal(final Object val) {
        if (val instanceof BigDecimal) {
            return roundBigDecimal((BigDecimal) val);
        }
        if (val == null) {
            controlNullOperand();
            return BigDecimal.ZERO;
        }
        if (val instanceof Double) {
            if (Double.isNaN(((Double) val))) {
                return BigDecimal.ZERO;
            }
            return roundBigDecimal(new BigDecimal(val.toString(), getMathContext()));
        }
        if (val instanceof Number) {
            return roundBigDecimal(new BigDecimal(val.toString(), getMathContext()));
        }
        if (val instanceof Boolean) {
            return BigDecimal.valueOf(((Boolean) val) ? 1. : 0.);
        }
        if (val instanceof AtomicBoolean) {
            return BigDecimal.valueOf(((AtomicBoolean) val).get() ? 1L : 0L);
        }
        if (val instanceof String) {
            final String string = (String) val;
            if ("""".equals(string)) {
                return BigDecimal.ZERO;
            }
            return roundBigDecimal(new BigDecimal(string, getMathContext()));
        }
        if (val instanceof Character) {
            final int i = ((Character) val);
            return new BigDecimal(i);
        }
        throw new ArithmeticException(""BigDecimal coercion: ""
                + val.getClass().getName() + "":("" + val + "")"");
    }","  public void test79()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ""C"");
      MathContext mathContext0 = MathContext.DECIMAL64;
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      Boolean boolean0 = new Boolean(""C"");
      jexlArithmetic0.isPositivizeStable();
      Object object0 = null;
      Character character0 = Character.valueOf('s');
      jexlArithmetic0.add((Object) null, character0);
      Integer.remainderUnsigned(42, 42);
      RoundingMode roundingMode0 = RoundingMode.HALF_EVEN;
      jexlArithmetic0.startsWith((Object) null, boolean0);
      // Undeclared exception!
      try { 
        jexlArithmetic0.toBigDecimal(mathContext0);
        fail(""Expecting exception: ArithmeticException"");
      } catch(ArithmeticException e) {
         //
         // BigDecimal coercion: java.math.MathContext:(precision=16 roundingMode=HALF_EVEN)
         //
         verifyException(""org.apache.commons.jexl3.JexlArithmetic"", e);
      }
  }"
803,"    public boolean greaterThanOrEqual(final Object left, final Object right) {
        if (left == right) {
            return true;
        }
        if (left == null || right == null) {
            return false;
        }
        return compare(left, right, "">="") >= 0;
    }","  public void test80()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ""$TQE9Pl&D?"");
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true);
      boolean boolean0 = false;
      MathContext mathContext0 = MathContext.UNLIMITED;
      int int0 = (-2142558225);
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.createWithOptions(false, mathContext0, (-2142558225));
      Long long0 = new Long((-1883L));
      String string0 = ""^[+-]?\\d*(\\.\\d*)?([eE][+-]?\\d+)?$"";
      Byte byte0 = new Byte((byte)4);
      // Undeclared exception!
      try { 
        jexlArithmetic1.greaterThanOrEqual(""^[+-]?d*(.d*)?([eE][+-]?d+)?$"", byte0);
        fail(""Expecting exception: NumberFormatException"");
      } catch(NumberFormatException e) {
         //
         // For input string: \""^[+-]?d*(.d*)?([eE][+-]?d+)?$\""
         //
         verifyException(""java.lang.NumberFormatException"", e);
      }
  }"
804,"    public Object mod(final Object left, final Object right) {
        if (left == null && right == null) {
            return controlNullNullOperands();
        }
        // if both (non null) args fit as long
        final Number ln = asLongNumber(left);
        final Number rn = asLongNumber(right);
        if (ln != null && rn != null) {
            final long x = ln.longValue();
            final long y = rn.longValue();
            if (y == 0L) {
                throw new ArithmeticException(""%"");
            }
            final long result = x % y;
            return narrowLong(left, right,  result);
        }
        // if either are bigdecimal use that type
        if (left instanceof BigDecimal || right instanceof BigDecimal) {
            final BigDecimal l = toBigDecimal(left);
            final BigDecimal r = toBigDecimal(right);
            if (BigDecimal.ZERO.equals(r)) {
                throw new ArithmeticException(""%"");
            }
            final BigDecimal remainder = l.remainder(r, getMathContext());
            return narrowBigDecimal(left, right, remainder);
        }
        // if either are floating point (double or float) use double
        if (isFloatingPointNumber(left) || isFloatingPointNumber(right)) {
            final double l = toDouble(left);
            final double r = toDouble(right);
            if (r == 0.0) {
                throw new ArithmeticException(""%"");
            }
            return l % r;
        }
        // otherwise treat as integers
        final BigInteger l = toBigInteger(left);
        final BigInteger r = toBigInteger(right);
        if (BigInteger.ZERO.equals(r)) {
            throw new ArithmeticException(""%"");
        }
        final BigInteger result = l.mod(r);
        return narrowBigInteger(left, right, result);
    }","  public void test81()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true);
      MathContext mathContext0 = MathContext.DECIMAL64;
      RoundingMode roundingMode0 = RoundingMode.HALF_DOWN;
      mathContext0.toString();
      mathContext0.equals(jexlArithmetic0);
      jexlArithmetic0.size((Object) mathContext0);
      Boolean boolean0 = Boolean.FALSE;
      int int0 = JexlArithmetic.BIGD_SCALE;
      jexlArithmetic0.endsWith(boolean0, boolean0);
      Boolean boolean1 = jexlArithmetic0.endsWith(mathContext0, (Object) null);
      Integer integer0 = new Integer((-1598));
      Object object0 = new Object();
      Long long0 = new Long((-59L));
      jexlArithmetic0.add(long0, integer0);
      Pattern.compile(""false"");
      // Undeclared exception!
      try { 
        jexlArithmetic0.mod(boolean1, integer0);
        fail(""Expecting exception: ArithmeticException"");
      } catch(ArithmeticException e) {
         //
         // BigInteger: modulus not positive
         //
         verifyException(""java.math.BigInteger"", e);
      }
  }"
805,"    public Object subtract(final Object left, final Object right) {
        if (left == null && right == null) {
            return controlNullNullOperands();
        }
        // if both (non null) args fit as long
        final Number ln = asLongNumber(left);
        final Number rn = asLongNumber(right);
        if (ln != null && rn != null) {
            final long x = ln.longValue();
            final long y = rn.longValue();
            final long result = x - y;
            // detect overflow, see java8 Math.subtractExact
            if (((x ^ y) & (x ^ result)) < 0) {
                return BigInteger.valueOf(x).subtract(BigInteger.valueOf(y));
            }
            return narrowLong(left, right, result);
        }
        // if either are bigdecimal use that type
        if (left instanceof BigDecimal || right instanceof BigDecimal) {
            final BigDecimal l = toBigDecimal(left);
            final BigDecimal r = toBigDecimal(right);
            final BigDecimal result = l.subtract(r, getMathContext());
            return narrowBigDecimal(left, right, result);
        }
        // if either are floating point (double or float) use double
        if (isFloatingPointNumber(left) || isFloatingPointNumber(right)) {
            final double l = toDouble(left);
            final double r = toDouble(right);
            return l - r;
        }
        // otherwise treat as integers
        final BigInteger l = toBigInteger(left);
        final BigInteger r = toBigInteger(right);
        final BigInteger result = l.subtract(r);
        return narrowBigInteger(left, right, result);
    }","  public void test82()  throws Throwable  {
      MathContext mathContext0 = MathContext.DECIMAL64;
      Boolean boolean0 = Boolean.FALSE;
      mathContext0.equals(boolean0);
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false, (MathContext) null, Integer.MIN_VALUE);
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.createWithOptions(false, mathContext0, Integer.MIN_VALUE);
      BigDecimal bigDecimal0 = new BigDecimal((long) Integer.MIN_VALUE);
      bigDecimal0.toPlainString();
      Pattern pattern0 = JexlArithmetic.FLOAT_PATTERN;
      pattern0.split((CharSequence) ""-2147483648"");
      Double double0 = new Double(1.0);
      Double double1 = new Double(1.0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ""-2147483648"");
      Short short0 = new Short((short)0);
      Object object0 = jexlArithmetic1.logicalNot(short0);
      BigDecimal bigDecimal1 = jexlArithmetic0.toBigDecimal(object0);
      bigDecimal0.subtract(bigDecimal1);
      jexlArithmetic1.narrowLong(pattern0, double0, 16380L);
      Double double2 = new Double(1038.679142239);
      Object object1 = jexlArithmetic0.subtract((Object) null, double2);
      Object object2 = jexlArithmetic0.logicalNot((Object) null);
      Double double3 = new Double(0.0);
      jexlArithmetic0.empty(double3);
      jexlArithmetic0.subtract(object2, object1);
      Long long0 = new Long((-3087L));
      // Undeclared exception!
      try { 
        jexlArithmetic1.subtract(bigDecimal0, long0);
        fail(""Expecting exception: NumberFormatException"");
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.math.BigDecimal"", e);
      }
  }"
806,"    public Iterable<?> createRange(final Object from, final Object to) throws ArithmeticException {
        final long lfrom = toLong(from);
        final long lto = toLong(to);
        if ((lfrom >= Integer.MIN_VALUE && lfrom <= Integer.MAX_VALUE)
                && (lto >= Integer.MIN_VALUE && lto <= Integer.MAX_VALUE)) {
            return org.apache.commons.jexl3.internal.IntegerRange.create((int) lfrom, (int) lto);
        }
        return org.apache.commons.jexl3.internal.LongRange.create(lfrom, lto);
    }","  public void test83()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true);
      jexlArithmetic0.narrowArguments((Object[]) null);
      JexlOptions jexlOptions0 = new JexlOptions();
      jexlOptions0.setAntish(true);
      jexlOptions0.setNamespaces((Map<String, Object>) null);
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.options(jexlOptions0);
      jexlArithmetic1.lessThan((Object) null, jexlOptions0);
      JexlArithmetic jexlArithmetic2 = jexlArithmetic0.options(jexlOptions0);
      try { 
        jexlArithmetic2.createRange((Object) null, jexlOptions0);
        fail(""Expecting exception: ArithmeticException"");
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.JexlArithmetic"", e);
      }
  }"
807,"    public Object multiply(final Object left, final Object right) {
        if (left == null && right == null) {
            return controlNullNullOperands();
        }
        // if both (non null) args fit as int
        final Number ln = asLongNumber(left);
        final Number rn = asLongNumber(right);
        if (ln != null && rn != null) {
            final long x = ln.longValue();
            final long y = rn.longValue();
            final long result = x * y;
            // detect overflow
            if (!isMultiplyExact(x, y, result)) {
                return BigInteger.valueOf(x).multiply(BigInteger.valueOf(y));
            }
            return narrowLong(left, right, result);
        }
        // if either are bigdecimal use that type
        if (left instanceof BigDecimal || right instanceof BigDecimal) {
            final BigDecimal l = toBigDecimal(left);
            final BigDecimal r = toBigDecimal(right);
            final BigDecimal result = l.multiply(r, getMathContext());
            return narrowBigDecimal(left, right, result);
        }
        // if either are floating point (double or float) use double
        if (isFloatingPointNumber(left) || isFloatingPointNumber(right)) {
            final double l = toDouble(left);
            final double r = toDouble(right);
            return l * r;
        }
        // otherwise treat as integers
        final BigInteger l = toBigInteger(left);
        final BigInteger r = toBigInteger(right);
        final BigInteger result = l.multiply(r);
        return narrowBigInteger(left, right, result);
    }","  public void test84()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true);
      MathContext mathContext0 = MathContext.DECIMAL32;
      RoundingMode roundingMode0 = mathContext0.getRoundingMode();
      mathContext0.equals(jexlArithmetic0);
      mathContext0.getPrecision();
      jexlArithmetic0.size((Object) mathContext0);
      Boolean boolean0 = Boolean.FALSE;
      Boolean.compare(true, true);
      jexlArithmetic0.endsWith(boolean0, boolean0);
      jexlArithmetic0.endsWith(mathContext0, (Object) null);
      Integer integer0 = new Integer(0);
      BigInteger bigInteger0 = BigInteger.TEN;
      Double double0 = new Double((-240.3));
      jexlArithmetic0.multiply(bigInteger0, double0);
      // Undeclared exception!
      try { 
        jexlArithmetic0.multiply(roundingMode0, integer0);
        fail(""Expecting exception: ArithmeticException"");
      } catch(ArithmeticException e) {
         //
         // BigInteger coercion: java.math.RoundingMode:(HALF_EVEN)
         //
         verifyException(""org.apache.commons.jexl3.JexlArithmetic"", e);
      }
  }"
808,"    public double toDouble(final Object val) {
        if (val == null) {
            controlNullOperand();
            return 0;
        }
        if (val instanceof Double) {
            return ((Double) val);
        }
        if (val instanceof Number) {
            //The below construct is used rather than ((Number)val).doubleValue() to ensure
            //equality between comparing new Double( 6.4 / 3 ) and the jexl expression of 6.4 / 3
            return Double.parseDouble(String.valueOf(val));
        }
        if (val instanceof Boolean) {
            return ((Boolean) val) ? 1. : 0.;
        }
        if (val instanceof AtomicBoolean) {
            return ((AtomicBoolean) val).get() ? 1. : 0.;
        }
        if (val instanceof String) {
            final String string = (String) val;
            if ("""".equals(string)) {
                return Double.NaN;
            }
            // the spec seems to be iffy about this.  Going to give it a wack anyway
            return Double.parseDouble(string);
        }
        if (val instanceof Character) {
            final int i = ((Character) val);
            return i;
        }
        throw new ArithmeticException(""Double coercion: ""
                + val.getClass().getName() + "":("" + val + "")"");
    }","  public void test85()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true);
      AtomicBoolean atomicBoolean0 = new AtomicBoolean(false);
      jexlArithmetic0.equals((Object) atomicBoolean0, (Object) atomicBoolean0);
      Double double0 = new Double(55.750192);
      jexlArithmetic0.toInteger(double0);
      jexlArithmetic0.mapBuilder(2435);
      jexlArithmetic0.toDouble(double0);
  }"
809,"    public Object negate(final Object val) {
        if (val == null) {
            controlNullOperand();
            return null;
        }
        if (val instanceof Integer) {
            return -((Integer) val);
        }
        if (val instanceof Double) {
            return - ((Double) val);
        }
        if (val instanceof Long) {
            return -((Long) val);
        }
        if (val instanceof BigDecimal) {
            return ((BigDecimal) val).negate();
        }
        if (val instanceof BigInteger) {
            return ((BigInteger) val).negate();
        }
        if (val instanceof Float) {
            return -((Float) val);
        }
        if (val instanceof Short) {
            return (short) -((Short) val);
        }
        if (val instanceof Byte) {
            return (byte) -((Byte) val);
        }
        if (val instanceof Boolean) {
            return !(Boolean) val;
        }
        if (val instanceof AtomicBoolean) {
            return !((AtomicBoolean) val).get();
        }
        throw new ArithmeticException(""Object negate:("" + val + "")"");
    }","  public void test86()  throws Throwable  {
      MathContext mathContext0 = MathContext.DECIMAL32;
      int int0 = 0;
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true, mathContext0, 0);
      mathContext0.toString();
      mathContext0.toString();
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.createWithOptions(true, mathContext0, 0);
      jexlArithmetic1.isPositivizeStable();
      Object object0 = jexlArithmetic1.matches(""precision=7 roundingMode=HALF_EVEN"", ""precision=7 roundingMode=HALF_EVEN"");
      jexlArithmetic1.narrowLong(object0, object0, 0);
      AtomicBoolean atomicBoolean0 = new AtomicBoolean();
      jexlArithmetic1.matches(atomicBoolean0, mathContext0);
      JexlArithmetic.SetBuilder jexlArithmetic_SetBuilder0 = jexlArithmetic0.setBuilder(0);
      jexlArithmetic_SetBuilder0.create();
      MathContext mathContext1 = new MathContext(""precision=7 roundingMode=HALF_EVEN"");
      BigDecimal bigDecimal0 = new BigDecimal((double) 0);
      BigInteger bigInteger0 = BigInteger.TEN;
      bigInteger0.negate();
      jexlArithmetic1.narrowBigInteger(jexlArithmetic_SetBuilder0, bigDecimal0, bigInteger0);
      Object object1 = null;
      // Undeclared exception!
      try { 
        jexlArithmetic0.negate((Object) null);
        fail(""Expecting exception: ArithmeticException"");
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.JexlArithmetic"", e);
      }
  }"
810,"    public Object divide(final Object left, final Object right) {
        if (left == null && right == null) {
            return controlNullNullOperands();
        }
        // if both (non null) args fit as long
        final Number ln = asLongNumber(left);
        final Number rn = asLongNumber(right);
        if (ln != null && rn != null) {
            final long x = ln.longValue();
            final long y = rn.longValue();
            if (y == 0L) {
                throw new ArithmeticException(""/"");
            }
            final long result = x  / y;
            return narrowLong(left, right, result);
        }
        // if either are bigdecimal use that type
        if (left instanceof BigDecimal || right instanceof BigDecimal) {
            final BigDecimal l = toBigDecimal(left);
            final BigDecimal r = toBigDecimal(right);
            if (BigDecimal.ZERO.equals(r)) {
                throw new ArithmeticException(""/"");
            }
            final BigDecimal result = l.divide(r, getMathContext());
            return narrowBigDecimal(left, right, result);
        }
        // if either are floating point (double or float) use double
        if (isFloatingPointNumber(left) || isFloatingPointNumber(right)) {
            final double l = toDouble(left);
            final double r = toDouble(right);
            if (r == 0.0) {
                throw new ArithmeticException(""/"");
            }
            return l / r;
        }
        // otherwise treat as integers
        final BigInteger l = toBigInteger(left);
        final BigInteger r = toBigInteger(right);
        if (BigInteger.ZERO.equals(r)) {
            throw new ArithmeticException(""/"");
        }
        final BigInteger result = l.divide(r);
        return narrowBigInteger(left, right, result);
    }","  public void test87()  throws Throwable  {
      MathContext mathContext0 = new MathContext(1);
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      jexlArithmetic0.greaterThan(mathContext0, ""Iyyw!VUTf`4)!P6Ts<"");
      MathContext mathContext1 = MathContext.DECIMAL64;
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.createWithOptions(false, mathContext1, 1);
      jexlArithmetic1.size((Object) mathContext0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) mathContext1;
      objectArray0[1] = (Object) mathContext0;
      objectArray0[2] = (Object) jexlArithmetic1;
      objectArray0[3] = (Object) mathContext0;
      jexlArithmetic1.narrowArguments(objectArray0);
      Boolean boolean0 = Boolean.valueOf(false);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      jexlArithmetic0.startsWith(boolean0, mathContext1);
      Pattern pattern0 = JexlArithmetic.FLOAT_PATTERN;
      jexlArithmetic1.equals((Object) pattern0, (Object) null);
      Boolean boolean1 = Boolean.TRUE;
      jexlArithmetic1.asLongNumber(boolean1);
      Object object0 = null;
      Double double0 = new Double(0.0);
      // Undeclared exception!
      try { 
        jexlArithmetic1.divide(double0, (Object) null);
        fail(""Expecting exception: ArithmeticException"");
      } catch(ArithmeticException e) {
         //
         // /
         //
         verifyException(""org.apache.commons.jexl3.JexlArithmetic"", e);
      }
  }"
811,"    public Boolean startsWith(final Object left, final Object right) {
        if (left == null && right == null) {
            //if both are null L == R
            return true;
        }
        if (left == null || right == null) {
            // we know both aren't null, therefore L != R
            return false;
        }
        if (left instanceof CharSequence) {
            return (toString(left)).startsWith(toString(right));
        }
        return null;
    }","  public void test88()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigInteger0.nextProbablePrime();
      Number number0 = jexlArithmetic0.narrow(bigInteger0);
      jexlArithmetic0.subtract(number0, number0);
      Float float0 = new Float((-2368.8948));
      jexlArithmetic0.subtract(float0, (Object) null);
      AtomicBoolean atomicBoolean0 = new AtomicBoolean();
      atomicBoolean0.getAndSet(false);
      Object object0 = jexlArithmetic0.not(atomicBoolean0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Integer integer0 = new Integer((-45));
      Integer.getInteger(""positivize"");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Integer.compareUnsigned((-45), (-45));
      Object object1 = jexlArithmetic0.logicalNot(float0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JexlArithmetic.isMultiplyExact((-32768L), (-1677L), (-1677L));
      BigInteger bigInteger1 = jexlArithmetic0.toBigInteger(object0);
      jexlArithmetic0.isPositivizeStable();
      Boolean.compare(false, false);
      jexlArithmetic0.isNegateStable();
      jexlArithmetic0.divide(object1, bigInteger1);
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.options((JexlContext) null);
      jexlArithmetic0.startsWith(jexlArithmetic1, (Object) null);
  }"
812,"    public final Object bitwiseAnd(final Object lhs, final Object rhs) {
        return and(lhs, rhs);
    }","  public void test89()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      Float.min(1.0F, 0.0F);
      jexlArithmetic0.toString((Object) null);
      JexlArithmetic.MapBuilder jexlArithmetic_MapBuilder0 = jexlArithmetic0.mapBuilder(27);
      MathContext mathContext0 = MathContext.UNLIMITED;
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.createWithOptions(true, mathContext0, 27);
      jexlArithmetic0.size((Object) jexlArithmetic1);
      jexlArithmetic0.logicalNot((Object) null);
      Byte byte0 = new Byte((byte)19);
      jexlArithmetic0.multiply((Object) null, byte0);
      Pattern pattern0 = Pattern.compile("""", 27);
      pattern0.asPredicate();
      jexlArithmetic0.empty(jexlArithmetic_MapBuilder0);
      // Undeclared exception!
      try { 
        jexlArithmetic0.bitwiseAnd(pattern0, ""selfXor"");
        fail(""Expecting exception: ArithmeticException"");
      } catch(ArithmeticException e) {
         //
         // Long coercion: java.util.regex.Pattern:()
         //
         verifyException(""org.apache.commons.jexl3.JexlArithmetic"", e);
      }
  }"
813,"    public Object mod(final Object left, final Object right) {
        if (left == null && right == null) {
            return controlNullNullOperands();
        }
        // if both (non null) args fit as long
        final Number ln = asLongNumber(left);
        final Number rn = asLongNumber(right);
        if (ln != null && rn != null) {
            final long x = ln.longValue();
            final long y = rn.longValue();
            if (y == 0L) {
                throw new ArithmeticException(""%"");
            }
            final long result = x % y;
            return narrowLong(left, right,  result);
        }
        // if either are bigdecimal use that type
        if (left instanceof BigDecimal || right instanceof BigDecimal) {
            final BigDecimal l = toBigDecimal(left);
            final BigDecimal r = toBigDecimal(right);
            if (BigDecimal.ZERO.equals(r)) {
                throw new ArithmeticException(""%"");
            }
            final BigDecimal remainder = l.remainder(r, getMathContext());
            return narrowBigDecimal(left, right, remainder);
        }
        // if either are floating point (double or float) use double
        if (isFloatingPointNumber(left) || isFloatingPointNumber(right)) {
            final double l = toDouble(left);
            final double r = toDouble(right);
            if (r == 0.0) {
                throw new ArithmeticException(""%"");
            }
            return l % r;
        }
        // otherwise treat as integers
        final BigInteger l = toBigInteger(left);
        final BigInteger r = toBigInteger(right);
        if (BigInteger.ZERO.equals(r)) {
            throw new ArithmeticException(""%"");
        }
        final BigInteger result = l.mod(r);
        return narrowBigInteger(left, right, result);
    }","  public void test90()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      Byte byte0 = new Byte((byte)2);
      BigDecimal bigDecimal0 = new BigDecimal((-4440));
      jexlArithmetic0.narrowBigDecimal(fileSystemHandling0, (Object) null, bigDecimal0);
      jexlArithmetic0.narrow(byte0);
      Character character0 = Character.valueOf('B');
      Object object0 = jexlArithmetic0.bitwiseAnd(character0, character0);
      Character.isIdeographic((byte)2);
      Short short0 = new Short((short)1972);
      jexlArithmetic0.mod(object0, short0);
      jexlArithmetic0.positivize(short0);
      Object object1 = jexlArithmetic0.controlNullNullOperands();
      Character.isIdeographic((byte)2);
      jexlArithmetic0.isEmpty(object1);
      Float float0 = new Float(1.0F);
      jexlArithmetic0.lessThanOrEqual(float0, character0);
      BigDecimal bigDecimal1 = BigDecimal.TEN;
      jexlArithmetic0.roundBigDecimal((BigDecimal) null);
      Float float1 = new Float((double) (short)1972);
      jexlArithmetic0.negate(float1);
      AtomicBoolean atomicBoolean0 = new AtomicBoolean(true);
      jexlArithmetic0.and(object1, atomicBoolean0);
      JexlArithmetic.MapBuilder jexlArithmetic_MapBuilder0 = jexlArithmetic0.mapBuilder((short)1972);
      jexlArithmetic_MapBuilder0.create();
      jexlArithmetic0.isEmpty((Object) bigDecimal1);
      MathContext mathContext0 = MathContext.DECIMAL128;
      JexlOptions jexlOptions0 = new JexlOptions();
      jexlArithmetic0.options(jexlOptions0);
      // Undeclared exception!
      try { 
        jexlArithmetic0.mod(atomicBoolean0, mathContext0);
        fail(""Expecting exception: ArithmeticException"");
      } catch(ArithmeticException e) {
         //
         // BigInteger coercion: java.math.MathContext:(precision=34 roundingMode=HALF_EVEN)
         //
         verifyException(""org.apache.commons.jexl3.JexlArithmetic"", e);
      }
  }"
814,"    public Object divide(final Object left, final Object right) {
        if (left == null && right == null) {
            return controlNullNullOperands();
        }
        // if both (non null) args fit as long
        final Number ln = asLongNumber(left);
        final Number rn = asLongNumber(right);
        if (ln != null && rn != null) {
            final long x = ln.longValue();
            final long y = rn.longValue();
            if (y == 0L) {
                throw new ArithmeticException(""/"");
            }
            final long result = x  / y;
            return narrowLong(left, right, result);
        }
        // if either are bigdecimal use that type
        if (left instanceof BigDecimal || right instanceof BigDecimal) {
            final BigDecimal l = toBigDecimal(left);
            final BigDecimal r = toBigDecimal(right);
            if (BigDecimal.ZERO.equals(r)) {
                throw new ArithmeticException(""/"");
            }
            final BigDecimal result = l.divide(r, getMathContext());
            return narrowBigDecimal(left, right, result);
        }
        // if either are floating point (double or float) use double
        if (isFloatingPointNumber(left) || isFloatingPointNumber(right)) {
            final double l = toDouble(left);
            final double r = toDouble(right);
            if (r == 0.0) {
                throw new ArithmeticException(""/"");
            }
            return l / r;
        }
        // otherwise treat as integers
        final BigInteger l = toBigInteger(left);
        final BigInteger r = toBigInteger(right);
        if (BigInteger.ZERO.equals(r)) {
            throw new ArithmeticException(""/"");
        }
        final BigInteger result = l.divide(r);
        return narrowBigInteger(left, right, result);
    }","  public void test91()  throws Throwable  {
      MathContext mathContext0 = MathContext.DECIMAL32;
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false, mathContext0, (-2776));
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.createWithOptions(true, mathContext0, (-563));
      BigInteger bigInteger0 = JexlArithmetic.BIGI_LONG_MAX_VALUE;
      Integer integer0 = new Integer((-563));
      Integer integer1 = new Integer((-563));
      mathContext0.equals(jexlArithmetic0);
      Character character0 = new Character('>');
      jexlArithmetic0.add(character0, integer0);
      Float float0 = new Float((-1.0));
      Float.max(0.0F, 0.0F);
      jexlArithmetic0.narrow(float0);
      Short short0 = new Short((short)0);
      BigInteger bigInteger1 = BigInteger.TEN;
      Integer integer2 = new Integer((-2776));
      Integer integer3 = jexlArithmetic0.size((Object) short0, integer2);
      jexlArithmetic0.size((Object) bigInteger1, integer3);
      Byte byte0 = new Byte((byte) (-14));
      jexlArithmetic0.isFloatingPoint(byte0);
      Class<Boolean> class0 = Boolean.class;
      jexlArithmetic0.narrowAccept(class0, class0);
      jexlArithmetic0.endsWith((Object) null, (Object) null);
      Integer.remainderUnsigned((short)0, (-2776));
      JexlArithmetic.isMultiplyExact((short)0, (-2776), 0L);
      // Undeclared exception!
      try { 
        jexlArithmetic1.divide(jexlArithmetic0, float0);
        fail(""Expecting exception: ArithmeticException"");
      } catch(ArithmeticException e) {
         //
         // Double coercion: org.apache.commons.jexl3.JexlArithmetic:(org.apache.commons.jexl3.JexlArithmetic@1)
         //
         verifyException(""org.apache.commons.jexl3.JexlArithmetic"", e);
      }
  }"
815,"    public Object or(final Object left, final Object right) {
        final long l = toLong(left);
        final long r = toLong(right);
        return l | r;
    }","  public void test92()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      MapContext mapContext0 = new MapContext(hashMap0);
      Object object0 = null;
      mapContext0.set(""~IAduhvoX"", (Object) null);
      hashMap0.put(""~IAduhvoX"", jexlArithmetic0);
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.options((JexlContext) mapContext0);
      jexlArithmetic1.isPositivizeStable();
      String string0 = ""]n^GY_8'"";
      // Undeclared exception!
      try { 
        jexlArithmetic1.or((Object) null, ""~IAduhvoX"");
        fail(""Expecting exception: ArithmeticException"");
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.JexlArithmetic"", e);
      }
  }"
816,"    public Object subtract(final Object left, final Object right) {
        if (left == null && right == null) {
            return controlNullNullOperands();
        }
        // if both (non null) args fit as long
        final Number ln = asLongNumber(left);
        final Number rn = asLongNumber(right);
        if (ln != null && rn != null) {
            final long x = ln.longValue();
            final long y = rn.longValue();
            final long result = x - y;
            // detect overflow, see java8 Math.subtractExact
            if (((x ^ y) & (x ^ result)) < 0) {
                return BigInteger.valueOf(x).subtract(BigInteger.valueOf(y));
            }
            return narrowLong(left, right, result);
        }
        // if either are bigdecimal use that type
        if (left instanceof BigDecimal || right instanceof BigDecimal) {
            final BigDecimal l = toBigDecimal(left);
            final BigDecimal r = toBigDecimal(right);
            final BigDecimal result = l.subtract(r, getMathContext());
            return narrowBigDecimal(left, right, result);
        }
        // if either are floating point (double or float) use double
        if (isFloatingPointNumber(left) || isFloatingPointNumber(right)) {
            final double l = toDouble(left);
            final double r = toDouble(right);
            return l - r;
        }
        // otherwise treat as integers
        final BigInteger l = toBigInteger(left);
        final BigInteger r = toBigInteger(right);
        final BigInteger result = l.subtract(r);
        return narrowBigInteger(left, right, result);
    }","  public void test93()  throws Throwable  {
      MathContext mathContext0 = MathContext.DECIMAL32;
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true, mathContext0, (-1952257859));
      JexlEngine.EmptyContext jexlEngine_EmptyContext0 = (JexlEngine.EmptyContext)JexlEngine.EMPTY_CONTEXT;
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.options((JexlContext) jexlEngine_EmptyContext0);
      JexlArithmetic jexlArithmetic2 = jexlArithmetic1.createWithOptions(true, mathContext0, (-1952257859));
      Byte byte0 = new Byte((byte) (-39));
      Byte byte1 = new Byte((byte) (-39));
      jexlArithmetic2.subtract(byte0, byte1);
  }"
817,"    public final Object logicalNot(final Object arg) {
        return not(arg);
    }","  public void test94()  throws Throwable  {
      MathContext mathContext0 = MathContext.DECIMAL64;
      Boolean boolean0 = Boolean.FALSE;
      mathContext0.equals(boolean0);
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false, mathContext0, Integer.MIN_VALUE);
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.createWithOptions(false, mathContext0, Integer.MIN_VALUE);
      BigDecimal bigDecimal0 = new BigDecimal((long) Integer.MIN_VALUE);
      bigDecimal0.toPlainString();
      jexlArithmetic1.narrowBigDecimal((Object) null, mathContext0, bigDecimal0);
      Pattern pattern0 = JexlArithmetic.FLOAT_PATTERN;
      pattern0.split((CharSequence) ""-2147483648"");
      Double double0 = new Double(1.0);
      Double double1 = new Double(1.0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ""-2147483648"");
      jexlArithmetic1.narrowLong(pattern0, double0, 16380L);
      jexlArithmetic1.toString((Object) pattern0);
      Double double2 = new Double(1038.6791422);
      Object object0 = jexlArithmetic0.subtract((Object) null, double2);
      Object object1 = jexlArithmetic0.logicalNot((Object) null);
      Double double3 = new Double(0.0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      jexlArithmetic0.empty(double3);
      Object object2 = jexlArithmetic0.subtract(object1, object0);
      Object object3 = jexlArithmetic1.add(object2, boolean0);
      Long long0 = new Long((-3087L));
      Object object4 = jexlArithmetic1.logicalNot((Object) null);
      jexlArithmetic1.add(object4, object3);
      jexlArithmetic0.toString((Object) ""java.util.regex.Pattern@0000000003"");
      jexlArithmetic1.logicalNot(mathContext0);
  }"
818,"    public boolean lessThanOrEqual(final Object left, final Object right) {
        if (left == right) {
            return true;
        }
        if (left == null || right == null) {
            return false;
        }
        return compare(left, right, ""<="") <= 0;
    }","  public void test95()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      Short short0 = new Short((short)21848);
      Short.toUnsignedLong((short)21848);
      Double double0 = new Double(14.0);
      jexlArithmetic0.add(short0, double0);
      Double.sum((-1157.599), 2762L);
      Double.sum((-735.6064024954151), 0.0);
      jexlArithmetic0.mod(double0, short0);
      Double.sum(79.99953982129976, 872.9105163064205);
      BigDecimal bigDecimal0 = JexlArithmetic.BIGD_DOUBLE_MAX_VALUE;
      // Undeclared exception!
      try { 
        jexlArithmetic0.lessThanOrEqual(double0, bigDecimal0);
        fail(""Expecting exception: NumberFormatException"");
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.math.BigDecimal"", e);
      }
  }"
819,"    public Object divide(final Object left, final Object right) {
        if (left == null && right == null) {
            return controlNullNullOperands();
        }
        // if both (non null) args fit as long
        final Number ln = asLongNumber(left);
        final Number rn = asLongNumber(right);
        if (ln != null && rn != null) {
            final long x = ln.longValue();
            final long y = rn.longValue();
            if (y == 0L) {
                throw new ArithmeticException(""/"");
            }
            final long result = x  / y;
            return narrowLong(left, right, result);
        }
        // if either are bigdecimal use that type
        if (left instanceof BigDecimal || right instanceof BigDecimal) {
            final BigDecimal l = toBigDecimal(left);
            final BigDecimal r = toBigDecimal(right);
            if (BigDecimal.ZERO.equals(r)) {
                throw new ArithmeticException(""/"");
            }
            final BigDecimal result = l.divide(r, getMathContext());
            return narrowBigDecimal(left, right, result);
        }
        // if either are floating point (double or float) use double
        if (isFloatingPointNumber(left) || isFloatingPointNumber(right)) {
            final double l = toDouble(left);
            final double r = toDouble(right);
            if (r == 0.0) {
                throw new ArithmeticException(""/"");
            }
            return l / r;
        }
        // otherwise treat as integers
        final BigInteger l = toBigInteger(left);
        final BigInteger r = toBigInteger(right);
        if (BigInteger.ZERO.equals(r)) {
            throw new ArithmeticException(""/"");
        }
        final BigInteger result = l.divide(r);
        return narrowBigInteger(left, right, result);
    }","  public void test96()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "">"");
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.options((JexlOptions) null);
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      BigDecimal bigDecimal1 = jexlArithmetic1.roundBigDecimal(bigDecimal0);
      // Undeclared exception!
      try { 
        jexlArithmetic0.divide(bigDecimal1, jexlArithmetic1);
        fail(""Expecting exception: ArithmeticException"");
      } catch(ArithmeticException e) {
         //
         // BigDecimal coercion: org.apache.commons.jexl3.JexlArithmetic:(org.apache.commons.jexl3.JexlArithmetic@1)
         //
         verifyException(""org.apache.commons.jexl3.JexlArithmetic"", e);
      }
  }"
820,"    public Number narrowNumber(final Number original, final Class<?> narrow) {
        if (original == null) {
            return null;
        }
        Number result = original;
        if (original instanceof BigDecimal) {
            final BigDecimal bigd = (BigDecimal) original;
            // if it's bigger than a double it can't be narrowed
            if (bigd.compareTo(BIGD_DOUBLE_MAX_VALUE) > 0
                || bigd.compareTo(BIGD_DOUBLE_MIN_VALUE) < 0) {
                return original;
            }
            try {
                final long l = bigd.longValueExact();
                // coerce to int when possible (int being so often used in method parms)
                if (narrowAccept(narrow, Integer.class)
                        && l <= Integer.MAX_VALUE
                        && l >= Integer.MIN_VALUE) {
                    return (int) l;
                }
                if (narrowAccept(narrow, Long.class)) {
                    return l;
                }
            } catch (final ArithmeticException xa) {
                // ignore, no exact value possible
            }
        }
        if (original instanceof Double || original instanceof Float) {
            final double value = original.doubleValue();
            if (narrowAccept(narrow, Float.class)
                    && value <= Float.MAX_VALUE
                    && value >= Float.MIN_VALUE) {
                result = result.floatValue();
            }
            // else it fits in a double only
        } else {
            if (original instanceof BigInteger) {
                final BigInteger bigi = (BigInteger) original;
                // if it's bigger than a Long it can't be narrowed
                if (bigi.compareTo(BIGI_LONG_MAX_VALUE) > 0
                        || bigi.compareTo(BIGI_LONG_MIN_VALUE) < 0) {
                    return original;
                }
            }
            final long value = original.longValue();
            if (narrowAccept(narrow, Byte.class)
                    && value <= Byte.MAX_VALUE
                    && value >= Byte.MIN_VALUE) {
                // it will fit in a byte
                result = (byte) value;
            } else if (narrowAccept(narrow, Short.class)
                    && value <= Short.MAX_VALUE
                    && value >= Short.MIN_VALUE) {
                result = (short) value;
            } else if (narrowAccept(narrow, Integer.class)
                    && value <= Integer.MAX_VALUE
                    && value >= Integer.MIN_VALUE) {
                result = (int) value;
            }
            // else it fits in a long
        }
        return result;
    }","  public void test97()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      JexlEngine.getThreadContext();
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.options((JexlContext) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Long long0 = Long.getLong("">="", 2245L);
      jexlArithmetic0.matches(jexlArithmetic1, long0);
      jexlArithmetic0.toDouble((Object) null);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = JexlArithmetic.BIGI_LONG_MAX_VALUE;
      jexlArithmetic1.createRange(bigInteger0, bigInteger0);
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      bigDecimal0.toBigIntegerExact();
      bigDecimal0.doubleValue();
      jexlArithmetic0.toLong(bigDecimal0);
      jexlArithmetic1.mapBuilder(4);
      jexlArithmetic1.narrowLong("">="", (Object) null, 9223372036854775807L);
      Double double0 = new Double((byte)41);
      jexlArithmetic1.bitwiseXor((Object) null, double0);
      Class<MathContext> class0 = MathContext.class;
      jexlArithmetic0.narrowNumber(double0, class0);
  }"
821,"    public Object add(final Object left, final Object right) {
        if (left == null && right == null) {
            return controlNullNullOperands();
        }
        final boolean strconcat = strict
                            ? left instanceof String || right instanceof String
                            : left instanceof String && right instanceof String;
        if (!strconcat) {
            try {
                // if both (non null) args fit as long
                final Number ln = asLongNumber(left);
                final Number rn = asLongNumber(right);
                if (ln != null && rn != null) {
                    final long x = ln.longValue();
                    final long y = rn.longValue();
                    final long result = x + y;
                    // detect overflow, see java8 Math.addExact
                    if (((x ^ result) & (y ^ result)) < 0) {
                        return BigInteger.valueOf(x).add(BigInteger.valueOf(y));
                    }
                    return narrowLong(left, right, result);
                }
                // if either are bigdecimal use that type
                if (left instanceof BigDecimal || right instanceof BigDecimal) {
                    final BigDecimal l = toBigDecimal(left);
                    final BigDecimal r = toBigDecimal(right);
                    final BigDecimal result = l.add(r, getMathContext());
                    return narrowBigDecimal(left, right, result);
                }
                // if either are floating point (double or float) use double
                if (isFloatingPointNumber(left) || isFloatingPointNumber(right)) {
                    final double l = toDouble(left);
                    final double r = toDouble(right);
                    return l + r;
                }
                // otherwise treat as (big) integers
                final BigInteger l = toBigInteger(left);
                final BigInteger r = toBigInteger(right);
                final BigInteger result = l.add(r);
                return narrowBigInteger(left, right, result);
            } catch (final java.lang.NumberFormatException nfe) {
                if (left == null || right == null) {
                    controlNullOperand();
                }
            }
        }
        return toString(left).concat(toString(right));
    }","  public void test98()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      MathContext mathContext0 = MathContext.UNLIMITED;
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.createWithOptions(false, mathContext0, 31);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      Short short0 = new Short((short)2383);
      jexlArithmetic1.narrowLong(short0, (Object) null, 401016175515425035L);
      Float float0 = new Float((double) 401016175515425035L);
      jexlArithmetic0.not(float0);
      // Undeclared exception!
      try { 
        jexlArithmetic1.add(mathContext0, mathContext0);
        fail(""Expecting exception: ArithmeticException"");
      } catch(ArithmeticException e) {
         //
         // BigInteger coercion: java.math.MathContext:(precision=0 roundingMode=HALF_UP)
         //
         verifyException(""org.apache.commons.jexl3.JexlArithmetic"", e);
      }
  }"
822,"    public Object add(final Object left, final Object right) {
        if (left == null && right == null) {
            return controlNullNullOperands();
        }
        final boolean strconcat = strict
                            ? left instanceof String || right instanceof String
                            : left instanceof String && right instanceof String;
        if (!strconcat) {
            try {
                // if both (non null) args fit as long
                final Number ln = asLongNumber(left);
                final Number rn = asLongNumber(right);
                if (ln != null && rn != null) {
                    final long x = ln.longValue();
                    final long y = rn.longValue();
                    final long result = x + y;
                    // detect overflow, see java8 Math.addExact
                    if (((x ^ result) & (y ^ result)) < 0) {
                        return BigInteger.valueOf(x).add(BigInteger.valueOf(y));
                    }
                    return narrowLong(left, right, result);
                }
                // if either are bigdecimal use that type
                if (left instanceof BigDecimal || right instanceof BigDecimal) {
                    final BigDecimal l = toBigDecimal(left);
                    final BigDecimal r = toBigDecimal(right);
                    final BigDecimal result = l.add(r, getMathContext());
                    return narrowBigDecimal(left, right, result);
                }
                // if either are floating point (double or float) use double
                if (isFloatingPointNumber(left) || isFloatingPointNumber(right)) {
                    final double l = toDouble(left);
                    final double r = toDouble(right);
                    return l + r;
                }
                // otherwise treat as (big) integers
                final BigInteger l = toBigInteger(left);
                final BigInteger r = toBigInteger(right);
                final BigInteger result = l.add(r);
                return narrowBigInteger(left, right, result);
            } catch (final java.lang.NumberFormatException nfe) {
                if (left == null || right == null) {
                    controlNullOperand();
                }
            }
        }
        return toString(left).concat(toString(right));
    }","  public void test99()  throws Throwable  {
      MathContext mathContext0 = MathContext.DECIMAL32;
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false, mathContext0, (-2037));
      Boolean boolean0 = (Boolean)jexlArithmetic0.not(mathContext0);
      Boolean.logicalOr(true, false);
      mathContext0.toString();
      jexlArithmetic0.greaterThan((Object) null, boolean0);
      BigInteger bigInteger0 = BigInteger.ONE;
      Character character0 = new Character('Y');
      jexlArithmetic0.isEmpty((Object) ""precision=7 roundingMode=HALF_EVEN"", boolean0);
      MapContext mapContext0 = new MapContext();
      jexlArithmetic0.options((JexlContext) mapContext0);
      BigDecimal bigDecimal0 = new BigDecimal(1.7976931348623157E308);
      Long long0 = new Long(2170L);
      Long long1 = (Long)jexlArithmetic0.narrowLong(bigDecimal0, long0, (-2037));
      Short short0 = new Short((short)1);
      jexlArithmetic0.positivize(long1);
      jexlArithmetic0.negate((Object) null);
      Integer integer0 = new Integer((short)1);
      jexlArithmetic0.add(""precision=7 roundingMode=HALF_EVEN"", integer0);
  }"
823,"    public MapBuilder mapBuilder(final int size) {
        return new org.apache.commons.jexl3.internal.MapBuilder(size);
    }","  public void test100()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      JexlEngine.getThreadContext();
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.options((JexlContext) null);
      Long long0 = Long.getLong("">="", 2245L);
      jexlArithmetic0.matches(jexlArithmetic1, long0);
      jexlArithmetic0.toDouble((Object) null);
      Double double0 = new Double(0.0);
      Double.sum((-241.2196), (-1605.103056935));
      jexlArithmetic0.matches((Object) null, double0);
      BigInteger bigInteger0 = BigInteger.TEN;
      byte byte0 = (byte)41;
      BigInteger bigInteger1 = JexlArithmetic.BIGI_LONG_MAX_VALUE;
      Iterable<?> iterable0 = jexlArithmetic1.createRange(bigInteger0, bigInteger0);
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      bigDecimal0.toBigIntegerExact();
      bigDecimal0.doubleValue();
      jexlArithmetic0.toLong(bigDecimal0);
      jexlArithmetic1.size((Object) iterable0);
      // Undeclared exception!
      try { 
        jexlArithmetic1.mapBuilder((-2));
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Illegal initial capacity: -2
         //
         verifyException(""java.util.HashMap"", e);
      }
  }"
824,"    protected Object controlNullNullOperands() {
        if (isStrict()) {
            throw new NullOperand();
        }
        return 0;
    }","  public void test101()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true);
      Byte byte0 = new Byte((byte)12);
      Byte.toUnsignedInt((byte)97);
      jexlArithmetic0.asLongNumber(byte0);
      // Undeclared exception!
      try { 
        jexlArithmetic0.controlNullNullOperands();
        fail(""Expecting exception: ArithmeticException"");
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.JexlArithmetic"", e);
      }
  }"
825,"    public Object not(final Object val) {
        return !toBoolean(val);
    }","  public void test102()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ""Object negate:("");
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      MapContext mapContext0 = new MapContext(hashMap0);
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.options((JexlContext) mapContext0);
      // Undeclared exception!
      try { 
        jexlArithmetic1.not((Object) null);
        fail(""Expecting exception: ArithmeticException"");
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.JexlArithmetic"", e);
      }
  }"
826,"    public Object mod(final Object left, final Object right) {
        if (left == null && right == null) {
            return controlNullNullOperands();
        }
        // if both (non null) args fit as long
        final Number ln = asLongNumber(left);
        final Number rn = asLongNumber(right);
        if (ln != null && rn != null) {
            final long x = ln.longValue();
            final long y = rn.longValue();
            if (y == 0L) {
                throw new ArithmeticException(""%"");
            }
            final long result = x % y;
            return narrowLong(left, right,  result);
        }
        // if either are bigdecimal use that type
        if (left instanceof BigDecimal || right instanceof BigDecimal) {
            final BigDecimal l = toBigDecimal(left);
            final BigDecimal r = toBigDecimal(right);
            if (BigDecimal.ZERO.equals(r)) {
                throw new ArithmeticException(""%"");
            }
            final BigDecimal remainder = l.remainder(r, getMathContext());
            return narrowBigDecimal(left, right, remainder);
        }
        // if either are floating point (double or float) use double
        if (isFloatingPointNumber(left) || isFloatingPointNumber(right)) {
            final double l = toDouble(left);
            final double r = toDouble(right);
            if (r == 0.0) {
                throw new ArithmeticException(""%"");
            }
            return l % r;
        }
        // otherwise treat as integers
        final BigInteger l = toBigInteger(left);
        final BigInteger r = toBigInteger(right);
        if (BigInteger.ZERO.equals(r)) {
            throw new ArithmeticException(""%"");
        }
        final BigInteger result = l.mod(r);
        return narrowBigInteger(left, right, result);
    }","  public void test103()  throws Throwable  {
      MathContext mathContext0 = MathContext.DECIMAL32;
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false, mathContext0, (-2776));
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.createWithOptions(true, mathContext0, (-563));
      Integer integer0 = new Integer((-2776));
      BigDecimal bigDecimal0 = JexlArithmetic.BIGD_DOUBLE_MAX_VALUE;
      jexlArithmetic1.narrowBigDecimal((Object) null, integer0, bigDecimal0);
      BigInteger bigInteger0 = JexlArithmetic.BIGI_LONG_MAX_VALUE;
      Integer integer1 = new Integer((-563));
      Integer integer2 = new Integer((-563));
      mathContext0.equals(jexlArithmetic0);
      Character character0 = new Character('>');
      Object object0 = jexlArithmetic0.add(character0, integer1);
      Float float0 = new Float((-1.0));
      Float.max(0.0F, 0.0F);
      jexlArithmetic0.narrow(float0);
      Short short0 = new Short((short)0);
      BigInteger bigInteger1 = BigInteger.TEN;
      Integer integer3 = new Integer((-2776));
      Integer integer4 = jexlArithmetic0.size((Object) short0, integer3);
      jexlArithmetic0.size((Object) bigInteger1, integer4);
      Byte byte0 = new Byte((byte) (-14));
      jexlArithmetic0.isFloatingPoint(byte0);
      Class<Boolean> class0 = Boolean.class;
      jexlArithmetic0.narrowAccept(class0, class0);
      jexlArithmetic0.endsWith((Object) null, (Object) null);
      JexlArithmetic.isMultiplyExact((short)0, (-2776), 0L);
      Long long0 = new Long(0L);
      // Undeclared exception!
      try { 
        jexlArithmetic0.mod(object0, long0);
        fail(""Expecting exception: ArithmeticException"");
      } catch(ArithmeticException e) {
         //
         // %
         //
         verifyException(""org.apache.commons.jexl3.JexlArithmetic"", e);
      }
  }"
827,"    public boolean toBoolean(final Object val) {
        if (val == null) {
            controlNullOperand();
            return false;
        }
        if (val instanceof Boolean) {
            return ((Boolean) val);
        }
        if (val instanceof Number) {
            final double number = toDouble(val);
            return !Double.isNaN(number) && number != 0.d;
        }
        if (val instanceof AtomicBoolean) {
            return ((AtomicBoolean) val).get();
        }
        if (val instanceof String) {
            final String strval = val.toString();
            return !strval.isEmpty() && !""false"".equals(strval);
        }
        // non null value is true
        return true;
    }","  public void test104()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true);
      int int0 = 1;
      // Undeclared exception!
      try { 
        jexlArithmetic0.toBoolean((Object) null);
        fail(""Expecting exception: ArithmeticException"");
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.JexlArithmetic"", e);
      }
  }"
828,"    public Object negate(final Object val) {
        if (val == null) {
            controlNullOperand();
            return null;
        }
        if (val instanceof Integer) {
            return -((Integer) val);
        }
        if (val instanceof Double) {
            return - ((Double) val);
        }
        if (val instanceof Long) {
            return -((Long) val);
        }
        if (val instanceof BigDecimal) {
            return ((BigDecimal) val).negate();
        }
        if (val instanceof BigInteger) {
            return ((BigInteger) val).negate();
        }
        if (val instanceof Float) {
            return -((Float) val);
        }
        if (val instanceof Short) {
            return (short) -((Short) val);
        }
        if (val instanceof Byte) {
            return (byte) -((Byte) val);
        }
        if (val instanceof Boolean) {
            return !(Boolean) val;
        }
        if (val instanceof AtomicBoolean) {
            return !((AtomicBoolean) val).get();
        }
        throw new ArithmeticException(""Object negate:("" + val + "")"");
    }","  public void test105()  throws Throwable  {
      JexlArithmetic.isMultiplyExact(0L, 9223372036854775807L, (-1L));
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false, (MathContext) null, 557);
      int int0 = (-1);
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.createWithOptions(true, (MathContext) null, (-1));
      JexlOptions jexlOptions0 = new JexlOptions();
      long long0 = 9223372036854775790L;
      // Undeclared exception!
      try { 
        jexlArithmetic0.negate(jexlArithmetic1);
        fail(""Expecting exception: ArithmeticException"");
      } catch(ArithmeticException e) {
         //
         // Object negate:(org.apache.commons.jexl3.JexlArithmetic@2)
         //
         verifyException(""org.apache.commons.jexl3.JexlArithmetic"", e);
      }
  }"
829,"    public Object divide(final Object left, final Object right) {
        if (left == null && right == null) {
            return controlNullNullOperands();
        }
        // if both (non null) args fit as long
        final Number ln = asLongNumber(left);
        final Number rn = asLongNumber(right);
        if (ln != null && rn != null) {
            final long x = ln.longValue();
            final long y = rn.longValue();
            if (y == 0L) {
                throw new ArithmeticException(""/"");
            }
            final long result = x  / y;
            return narrowLong(left, right, result);
        }
        // if either are bigdecimal use that type
        if (left instanceof BigDecimal || right instanceof BigDecimal) {
            final BigDecimal l = toBigDecimal(left);
            final BigDecimal r = toBigDecimal(right);
            if (BigDecimal.ZERO.equals(r)) {
                throw new ArithmeticException(""/"");
            }
            final BigDecimal result = l.divide(r, getMathContext());
            return narrowBigDecimal(left, right, result);
        }
        // if either are floating point (double or float) use double
        if (isFloatingPointNumber(left) || isFloatingPointNumber(right)) {
            final double l = toDouble(left);
            final double r = toDouble(right);
            if (r == 0.0) {
                throw new ArithmeticException(""/"");
            }
            return l / r;
        }
        // otherwise treat as integers
        final BigInteger l = toBigInteger(left);
        final BigInteger r = toBigInteger(right);
        if (BigInteger.ZERO.equals(r)) {
            throw new ArithmeticException(""/"");
        }
        final BigInteger result = l.divide(r);
        return narrowBigInteger(left, right, result);
    }","  public void test106()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      BigInteger bigInteger0 = BigInteger.ZERO;
      Number number0 = jexlArithmetic0.narrow(bigInteger0);
      jexlArithmetic0.subtract(number0, number0);
      Float float0 = new Float((-2368.8948));
      jexlArithmetic0.subtract(float0, (Object) null);
      AtomicBoolean atomicBoolean0 = new AtomicBoolean();
      atomicBoolean0.getAndSet(false);
      Object object0 = jexlArithmetic0.not(atomicBoolean0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Integer integer0 = new Integer((-45));
      Integer.getInteger(""positivize"");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Integer.compareUnsigned((-45), (-45));
      Object object1 = jexlArithmetic0.logicalNot(float0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JexlArithmetic.isMultiplyExact((-32768L), (-1677L), (-1677L));
      BigInteger bigInteger1 = jexlArithmetic0.toBigInteger(object0);
      jexlArithmetic0.isPositivizeStable();
      jexlArithmetic0.isNegateStable();
      jexlArithmetic0.divide(object1, bigInteger1);
  }"
830,"    public Object mod(final Object left, final Object right) {
        if (left == null && right == null) {
            return controlNullNullOperands();
        }
        // if both (non null) args fit as long
        final Number ln = asLongNumber(left);
        final Number rn = asLongNumber(right);
        if (ln != null && rn != null) {
            final long x = ln.longValue();
            final long y = rn.longValue();
            if (y == 0L) {
                throw new ArithmeticException(""%"");
            }
            final long result = x % y;
            return narrowLong(left, right,  result);
        }
        // if either are bigdecimal use that type
        if (left instanceof BigDecimal || right instanceof BigDecimal) {
            final BigDecimal l = toBigDecimal(left);
            final BigDecimal r = toBigDecimal(right);
            if (BigDecimal.ZERO.equals(r)) {
                throw new ArithmeticException(""%"");
            }
            final BigDecimal remainder = l.remainder(r, getMathContext());
            return narrowBigDecimal(left, right, remainder);
        }
        // if either are floating point (double or float) use double
        if (isFloatingPointNumber(left) || isFloatingPointNumber(right)) {
            final double l = toDouble(left);
            final double r = toDouble(right);
            if (r == 0.0) {
                throw new ArithmeticException(""%"");
            }
            return l % r;
        }
        // otherwise treat as integers
        final BigInteger l = toBigInteger(left);
        final BigInteger r = toBigInteger(right);
        if (BigInteger.ZERO.equals(r)) {
            throw new ArithmeticException(""%"");
        }
        final BigInteger result = l.mod(r);
        return narrowBigInteger(left, right, result);
    }","  public void test107()  throws Throwable  {
      MathContext mathContext0 = MathContext.DECIMAL64;
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false, mathContext0, 0);
      Byte byte0 = new Byte((byte)36);
      Byte.toUnsignedInt((byte)36);
      jexlArithmetic0.lessThan(byte0, byte0);
      BigDecimal bigDecimal0 = new BigDecimal((-3044L));
      jexlArithmetic0.roundBigDecimal(bigDecimal0);
      jexlArithmetic0.roundBigDecimal(bigDecimal0);
      Boolean boolean0 = Boolean.FALSE;
      jexlArithmetic0.toBigDecimal(bigDecimal0);
      Float float0 = new Float(1651.1852F);
      Float.min(41.704F, 2615.5386F);
      jexlArithmetic0.greaterThanOrEqual(byte0, float0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Long long0 = new Long((-2172L));
      jexlArithmetic0.toInteger(long0);
      Float float1 = new Float(3.4028234663852886E38);
      // Undeclared exception!
      try { 
        jexlArithmetic0.mod(float1, (Object) null);
        fail(""Expecting exception: ArithmeticException"");
      } catch(ArithmeticException e) {
         //
         // %
         //
         verifyException(""org.apache.commons.jexl3.JexlArithmetic"", e);
      }
  }"
831,"    public Object divide(final Object left, final Object right) {
        if (left == null && right == null) {
            return controlNullNullOperands();
        }
        // if both (non null) args fit as long
        final Number ln = asLongNumber(left);
        final Number rn = asLongNumber(right);
        if (ln != null && rn != null) {
            final long x = ln.longValue();
            final long y = rn.longValue();
            if (y == 0L) {
                throw new ArithmeticException(""/"");
            }
            final long result = x  / y;
            return narrowLong(left, right, result);
        }
        // if either are bigdecimal use that type
        if (left instanceof BigDecimal || right instanceof BigDecimal) {
            final BigDecimal l = toBigDecimal(left);
            final BigDecimal r = toBigDecimal(right);
            if (BigDecimal.ZERO.equals(r)) {
                throw new ArithmeticException(""/"");
            }
            final BigDecimal result = l.divide(r, getMathContext());
            return narrowBigDecimal(left, right, result);
        }
        // if either are floating point (double or float) use double
        if (isFloatingPointNumber(left) || isFloatingPointNumber(right)) {
            final double l = toDouble(left);
            final double r = toDouble(right);
            if (r == 0.0) {
                throw new ArithmeticException(""/"");
            }
            return l / r;
        }
        // otherwise treat as integers
        final BigInteger l = toBigInteger(left);
        final BigInteger r = toBigInteger(right);
        if (BigInteger.ZERO.equals(r)) {
            throw new ArithmeticException(""/"");
        }
        final BigInteger result = l.divide(r);
        return narrowBigInteger(left, right, result);
    }","  public void test108()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true);
      JexlArithmetic jexlArithmetic1 = new JexlArithmetic(true, (MathContext) null, (-2786));
      JexlEngine.getThreadContext();
      JexlArithmetic jexlArithmetic2 = jexlArithmetic1.createWithOptions(true, (MathContext) null, (-2786));
      Integer integer0 = new Integer(7);
      Integer.toUnsignedString(7);
      Integer.toUnsignedLong((-2786));
      Float float0 = new Float((double) (-2786));
      jexlArithmetic1.toLong(float0);
      // Undeclared exception!
      try { 
        jexlArithmetic2.divide((Object) null, integer0);
        fail(""Expecting exception: ArithmeticException"");
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.JexlArithmetic"", e);
      }
  }"
832,"    public Object mod(final Object left, final Object right) {
        if (left == null && right == null) {
            return controlNullNullOperands();
        }
        // if both (non null) args fit as long
        final Number ln = asLongNumber(left);
        final Number rn = asLongNumber(right);
        if (ln != null && rn != null) {
            final long x = ln.longValue();
            final long y = rn.longValue();
            if (y == 0L) {
                throw new ArithmeticException(""%"");
            }
            final long result = x % y;
            return narrowLong(left, right,  result);
        }
        // if either are bigdecimal use that type
        if (left instanceof BigDecimal || right instanceof BigDecimal) {
            final BigDecimal l = toBigDecimal(left);
            final BigDecimal r = toBigDecimal(right);
            if (BigDecimal.ZERO.equals(r)) {
                throw new ArithmeticException(""%"");
            }
            final BigDecimal remainder = l.remainder(r, getMathContext());
            return narrowBigDecimal(left, right, remainder);
        }
        // if either are floating point (double or float) use double
        if (isFloatingPointNumber(left) || isFloatingPointNumber(right)) {
            final double l = toDouble(left);
            final double r = toDouble(right);
            if (r == 0.0) {
                throw new ArithmeticException(""%"");
            }
            return l % r;
        }
        // otherwise treat as integers
        final BigInteger l = toBigInteger(left);
        final BigInteger r = toBigInteger(right);
        if (BigInteger.ZERO.equals(r)) {
            throw new ArithmeticException(""%"");
        }
        final BigInteger result = l.mod(r);
        return narrowBigInteger(left, right, result);
    }","  public void test109()  throws Throwable  {
      MathContext mathContext0 = MathContext.DECIMAL64;
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true, mathContext0, 0);
      Byte byte0 = new Byte((byte)36);
      Byte.toUnsignedInt((byte)36);
      jexlArithmetic0.lessThan(byte0, byte0);
      BigDecimal bigDecimal0 = new BigDecimal((-3044L));
      BigDecimal bigDecimal1 = jexlArithmetic0.roundBigDecimal(bigDecimal0);
      BigDecimal bigDecimal2 = jexlArithmetic0.roundBigDecimal(bigDecimal0);
      jexlArithmetic0.startsWith(mathContext0, bigDecimal2);
      jexlArithmetic0.toBigDecimal(bigDecimal0);
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.createWithOptions(true, mathContext0, 2520);
      Float float0 = new Float(1651.1852F);
      Float.min(41.704F, 2615.5386F);
      jexlArithmetic0.greaterThanOrEqual(byte0, float0);
      AtomicBoolean atomicBoolean0 = new AtomicBoolean(false);
      jexlArithmetic0.equals((Object) atomicBoolean0, (Object) bigDecimal1);
      Float float1 = new Float(3.4028234663852886E38);
      // Undeclared exception!
      try { 
        jexlArithmetic1.mod(float1, (Object) null);
        fail(""Expecting exception: ArithmeticException"");
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.JexlArithmetic"", e);
      }
  }"
833,"    public final Object bitwiseOr(final Object lhs, final Object rhs) {
        return or(lhs, rhs);
    }","  public void test110()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true);
      MathContext mathContext0 = MathContext.DECIMAL128;
      int int0 = Integer.MIN_VALUE;
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.createWithOptions(false, mathContext0, Integer.MIN_VALUE);
      jexlArithmetic1.equals((Object) mathContext0, (Object) jexlArithmetic0);
      Float float0 = new Float((double) Integer.MIN_VALUE);
      byte byte0 = (byte)17;
      Byte byte1 = new Byte((byte)17);
      Float.max(Integer.MIN_VALUE, Integer.MIN_VALUE);
      jexlArithmetic0.bitwiseAnd(float0, byte1);
      Integer integer0 = new Integer((byte)17);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string0 = null;
      Integer.getInteger((String) null, integer0);
      Integer integer1 = jexlArithmetic0.size((Object) mathContext0, integer0);
      jexlArithmetic1.mapBuilder((byte)17);
      long long0 = 2L;
      Long long1 = new Long(2L);
      jexlArithmetic0.add(integer1, long1);
      Byte byte2 = new Byte((byte)19);
      Byte byte3 = new Byte((byte)19);
      // Undeclared exception!
      try { 
        jexlArithmetic0.bitwiseOr(jexlArithmetic1, byte3);
        fail(""Expecting exception: ArithmeticException"");
      } catch(ArithmeticException e) {
         //
         // Long coercion: org.apache.commons.jexl3.JexlArithmetic:(org.apache.commons.jexl3.JexlArithmetic@2)
         //
         verifyException(""org.apache.commons.jexl3.JexlArithmetic"", e);
      }
  }"
834,"    public MapBuilder mapBuilder(final int size) {
        return new org.apache.commons.jexl3.internal.MapBuilder(size);
    }","  public void test111()  throws Throwable  {
      MathContext mathContext0 = MathContext.DECIMAL32;
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false, mathContext0, (-2776));
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.createWithOptions(true, mathContext0, (-563));
      BigInteger bigInteger0 = BigInteger.ZERO;
      jexlArithmetic1.narrowBigInteger(mathContext0, (Object) null, bigInteger0);
      BigInteger bigInteger1 = JexlArithmetic.BIGI_LONG_MAX_VALUE;
      Integer integer0 = new Integer((-563));
      Integer integer1 = new Integer((-563));
      mathContext0.equals(jexlArithmetic0);
      Character character0 = new Character('>');
      jexlArithmetic0.add(character0, integer0);
      Float float0 = new Float((-1.0));
      Float.max(0.0F, 0.0F);
      jexlArithmetic0.narrow(float0);
      Short short0 = new Short((short)0);
      BigInteger bigInteger2 = BigInteger.TEN;
      Integer integer2 = new Integer((-2776));
      Integer integer3 = jexlArithmetic0.size((Object) short0, integer2);
      jexlArithmetic0.size((Object) bigInteger2, integer3);
      Byte byte0 = new Byte((byte) (-14));
      jexlArithmetic0.isFloatingPoint(byte0);
      Class<Boolean> class0 = Boolean.class;
      jexlArithmetic0.narrowAccept(class0, class0);
      jexlArithmetic0.endsWith((Object) null, (Object) null);
      JexlArithmetic.isMultiplyExact((short)0, (-2776), 0L);
      JexlArithmetic.MapBuilder jexlArithmetic_MapBuilder0 = jexlArithmetic0.mapBuilder((short)0);
      jexlArithmetic_MapBuilder0.create();
  }"
835,"    public final Object bitwiseOr(final Object lhs, final Object rhs) {
        return or(lhs, rhs);
    }","  public void test112()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true);
      MathContext mathContext0 = MathContext.DECIMAL32;
      int int0 = Integer.MIN_VALUE;
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.createWithOptions(false, mathContext0, Integer.MIN_VALUE);
      jexlArithmetic1.equals((Object) mathContext0, (Object) jexlArithmetic0);
      Float float0 = new Float((double) Integer.MIN_VALUE);
      byte byte0 = (byte)17;
      Byte byte1 = new Byte((byte)17);
      Float.max(Integer.MIN_VALUE, (-1.0F));
      Object object0 = jexlArithmetic0.bitwiseAnd(float0, byte1);
      Integer integer0 = new Integer((byte)17);
      Integer integer1 = jexlArithmetic0.size((Object) mathContext0, integer0);
      jexlArithmetic1.mapBuilder((byte)17);
      long long0 = 1L;
      jexlArithmetic0.add(integer1, object0);
      Byte byte2 = new Byte((byte)19);
      Byte byte3 = new Byte((byte) (-18));
      // Undeclared exception!
      try { 
        jexlArithmetic0.bitwiseOr(jexlArithmetic1, byte3);
        fail(""Expecting exception: ArithmeticException"");
      } catch(ArithmeticException e) {
         //
         // Long coercion: org.apache.commons.jexl3.JexlArithmetic:(org.apache.commons.jexl3.JexlArithmetic@2)
         //
         verifyException(""org.apache.commons.jexl3.JexlArithmetic"", e);
      }
  }"
836,"    public Object add(final Object left, final Object right) {
        if (left == null && right == null) {
            return controlNullNullOperands();
        }
        final boolean strconcat = strict
                            ? left instanceof String || right instanceof String
                            : left instanceof String && right instanceof String;
        if (!strconcat) {
            try {
                // if both (non null) args fit as long
                final Number ln = asLongNumber(left);
                final Number rn = asLongNumber(right);
                if (ln != null && rn != null) {
                    final long x = ln.longValue();
                    final long y = rn.longValue();
                    final long result = x + y;
                    // detect overflow, see java8 Math.addExact
                    if (((x ^ result) & (y ^ result)) < 0) {
                        return BigInteger.valueOf(x).add(BigInteger.valueOf(y));
                    }
                    return narrowLong(left, right, result);
                }
                // if either are bigdecimal use that type
                if (left instanceof BigDecimal || right instanceof BigDecimal) {
                    final BigDecimal l = toBigDecimal(left);
                    final BigDecimal r = toBigDecimal(right);
                    final BigDecimal result = l.add(r, getMathContext());
                    return narrowBigDecimal(left, right, result);
                }
                // if either are floating point (double or float) use double
                if (isFloatingPointNumber(left) || isFloatingPointNumber(right)) {
                    final double l = toDouble(left);
                    final double r = toDouble(right);
                    return l + r;
                }
                // otherwise treat as (big) integers
                final BigInteger l = toBigInteger(left);
                final BigInteger r = toBigInteger(right);
                final BigInteger result = l.add(r);
                return narrowBigInteger(left, right, result);
            } catch (final java.lang.NumberFormatException nfe) {
                if (left == null || right == null) {
                    controlNullOperand();
                }
            }
        }
        return toString(left).concat(toString(right));
    }","  public void test113()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      JexlArithmetic.MapBuilder jexlArithmetic_MapBuilder0 = jexlArithmetic0.mapBuilder(1);
      jexlArithmetic0.isStrict();
      jexlArithmetic0.controlNullOperand();
      jexlArithmetic0.toBoolean("""");
      JexlArithmetic.ArrayBuilder jexlArithmetic_ArrayBuilder0 = jexlArithmetic0.arrayBuilder(1315);
      MathContext mathContext0 = MathContext.DECIMAL32;
      Long long0 = new Long(1);
      jexlArithmetic_ArrayBuilder0.create(false);
      MathContext mathContext1 = MathContext.DECIMAL64;
      jexlArithmetic_MapBuilder0.put(mathContext1, (Object) null);
      JexlOptions jexlOptions0 = new JexlOptions();
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.options(jexlOptions0);
      Long long1 = new Long((-1488L));
      jexlArithmetic1.contains(jexlArithmetic_MapBuilder0, long1);
      // Undeclared exception!
      try { 
        jexlArithmetic1.add((Object) null, (Object) null);
        fail(""Expecting exception: ArithmeticException"");
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.JexlArithmetic"", e);
      }
  }"
837,"    public boolean greaterThan(final Object left, final Object right) {
        if ((left == right) || left == null || right == null) {
            return false;
        }
        return compare(left, right, "">"") > 0;
    }","  public void test114()  throws Throwable  {
      MathContext mathContext0 = MathContext.DECIMAL64;
      Boolean boolean0 = Boolean.FALSE;
      mathContext0.equals(boolean0);
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false, mathContext0, Integer.MIN_VALUE);
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.createWithOptions(false, mathContext0, Integer.MIN_VALUE);
      Double double0 = new Double(1.0);
      Double double1 = new Double(1.0);
      jexlArithmetic1.narrowLong(jexlArithmetic1.FLOAT_PATTERN, double0, 16380L);
      Double double2 = new Double(1038.679142239);
      Object object0 = jexlArithmetic0.subtract((Object) null, double2);
      Object object1 = jexlArithmetic0.logicalNot((Object) null);
      Double double3 = new Double(0.0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      jexlArithmetic0.empty(double3);
      Object object2 = jexlArithmetic0.subtract(object1, object0);
      jexlArithmetic1.add(object2, boolean0);
      Long long0 = new Long((-3087L));
      jexlArithmetic1.logicalNot(mathContext0);
      Long long1 = new Long((-2147483648L));
      Float float0 = new Float(0.0F);
      jexlArithmetic0.greaterThan(long1, float0);
  }"
838,"    protected Number asLongNumber(final Object value) {
        return value instanceof Long
                || value instanceof Integer
                || value instanceof Short
                || value instanceof Byte
                        ? (Number) value
                        : null;
    }","  public void test115()  throws Throwable  {
      MathContext mathContext0 = new MathContext(1);
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false, mathContext0, 1);
      jexlArithmetic0.greaterThan(mathContext0, ""Iyyw!VUTf`4)!P6Ts<"");
      MathContext mathContext1 = MathContext.DECIMAL64;
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.createWithOptions(false, mathContext1, 1);
      mathContext1.toString();
      jexlArithmetic1.size((Object) mathContext0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) mathContext1;
      objectArray0[0] = (Object) mathContext0;
      objectArray0[2] = (Object) jexlArithmetic1;
      objectArray0[3] = (Object) mathContext0;
      jexlArithmetic1.narrowArguments(objectArray0);
      Boolean boolean0 = Boolean.TRUE;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      jexlArithmetic0.startsWith(boolean0, mathContext1);
      Pattern pattern0 = JexlArithmetic.FLOAT_PATTERN;
      jexlArithmetic1.equals((Object) pattern0, (Object) boolean0);
      Boolean boolean1 = Boolean.TRUE;
      jexlArithmetic1.asLongNumber(boolean1);
  }"
839,"    public double toDouble(final Object val) {
        if (val == null) {
            controlNullOperand();
            return 0;
        }
        if (val instanceof Double) {
            return ((Double) val);
        }
        if (val instanceof Number) {
            //The below construct is used rather than ((Number)val).doubleValue() to ensure
            //equality between comparing new Double( 6.4 / 3 ) and the jexl expression of 6.4 / 3
            return Double.parseDouble(String.valueOf(val));
        }
        if (val instanceof Boolean) {
            return ((Boolean) val) ? 1. : 0.;
        }
        if (val instanceof AtomicBoolean) {
            return ((AtomicBoolean) val).get() ? 1. : 0.;
        }
        if (val instanceof String) {
            final String string = (String) val;
            if ("""".equals(string)) {
                return Double.NaN;
            }
            // the spec seems to be iffy about this.  Going to give it a wack anyway
            return Double.parseDouble(string);
        }
        if (val instanceof Character) {
            final int i = ((Character) val);
            return i;
        }
        throw new ArithmeticException(""Double coercion: ""
                + val.getClass().getName() + "":("" + val + "")"");
    }","  public void test116()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true);
      JexlEngine.getThreadContext();
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.options((JexlContext) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Long long0 = Long.getLong("">="", 2245L);
      jexlArithmetic0.matches(jexlArithmetic1, long0);
      // Undeclared exception!
      try { 
        jexlArithmetic0.toDouble((Object) null);
        fail(""Expecting exception: ArithmeticException"");
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.JexlArithmetic"", e);
      }
  }"
840,"    protected BigDecimal roundBigDecimal(final BigDecimal number) {
        final int mscale = getMathScale();
        if (mscale >= 0) {
            return number.setScale(mscale, getMathContext().getRoundingMode());
        }
        return number;
    }","  public void test117()  throws Throwable  {
      MathContext mathContext0 = new MathContext(1);
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false, mathContext0, 1);
      jexlArithmetic0.greaterThan(mathContext0, ""Iyyw!VUTf`4)!P6Ts<"");
      MathContext mathContext1 = MathContext.DECIMAL64;
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.createWithOptions(false, mathContext1, 1);
      jexlArithmetic1.size((Object) mathContext0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) mathContext1;
      objectArray0[1] = (Object) mathContext0;
      objectArray0[2] = (Object) jexlArithmetic1;
      objectArray0[3] = (Object) mathContext0;
      jexlArithmetic1.narrowArguments(objectArray0);
      Boolean boolean0 = Boolean.valueOf(false);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      jexlArithmetic0.startsWith(boolean0, mathContext1);
      Pattern pattern0 = JexlArithmetic.FLOAT_PATTERN;
      jexlArithmetic1.equals((Object) pattern0, (Object) null);
      Boolean boolean1 = Boolean.TRUE;
      jexlArithmetic1.asLongNumber(boolean1);
      // Undeclared exception!
      try { 
        jexlArithmetic1.roundBigDecimal((BigDecimal) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.JexlArithmetic"", e);
      }
  }"
841,"    public Boolean startsWith(final Object left, final Object right) {
        if (left == null && right == null) {
            //if both are null L == R
            return true;
        }
        if (left == null || right == null) {
            // we know both aren't null, therefore L != R
            return false;
        }
        if (left instanceof CharSequence) {
            return (toString(left)).startsWith(toString(right));
        }
        return null;
    }","  public void test118()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      MathContext mathContext0 = MathContext.DECIMAL128;
      Float float0 = new Float(0.0F);
      mathContext0.equals(float0);
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true, mathContext0, 41);
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.createWithOptions(false, mathContext0, 20);
      JexlOptions jexlOptions0 = new JexlOptions();
      JexlArithmetic jexlArithmetic2 = jexlArithmetic1.options(jexlOptions0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ""java.math.MathContext@0000000002"");
      MathContext mathContext1 = new MathContext(41);
      AtomicBoolean atomicBoolean0 = new AtomicBoolean(false);
      atomicBoolean0.set(false);
      Iterable<?> iterable0 = new LinkedList<BigDecimal>();
      Boolean boolean0 = Boolean.valueOf(""v^{4zO"");
      jexlArithmetic1.endsWith(jexlArithmetic2, boolean0);
      MathContext mathContext2 = MathContext.DECIMAL128;
      jexlArithmetic2.startsWith(""java.math.MathContext@0000000002"", mathContext2);
  }"
842,"    public Object mod(final Object left, final Object right) {
        if (left == null && right == null) {
            return controlNullNullOperands();
        }
        // if both (non null) args fit as long
        final Number ln = asLongNumber(left);
        final Number rn = asLongNumber(right);
        if (ln != null && rn != null) {
            final long x = ln.longValue();
            final long y = rn.longValue();
            if (y == 0L) {
                throw new ArithmeticException(""%"");
            }
            final long result = x % y;
            return narrowLong(left, right,  result);
        }
        // if either are bigdecimal use that type
        if (left instanceof BigDecimal || right instanceof BigDecimal) {
            final BigDecimal l = toBigDecimal(left);
            final BigDecimal r = toBigDecimal(right);
            if (BigDecimal.ZERO.equals(r)) {
                throw new ArithmeticException(""%"");
            }
            final BigDecimal remainder = l.remainder(r, getMathContext());
            return narrowBigDecimal(left, right, remainder);
        }
        // if either are floating point (double or float) use double
        if (isFloatingPointNumber(left) || isFloatingPointNumber(right)) {
            final double l = toDouble(left);
            final double r = toDouble(right);
            if (r == 0.0) {
                throw new ArithmeticException(""%"");
            }
            return l % r;
        }
        // otherwise treat as integers
        final BigInteger l = toBigInteger(left);
        final BigInteger r = toBigInteger(right);
        if (BigInteger.ZERO.equals(r)) {
            throw new ArithmeticException(""%"");
        }
        final BigInteger result = l.mod(r);
        return narrowBigInteger(left, right, result);
    }","  public void test119()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      byte byte0 = (byte)2;
      Byte byte1 = new Byte((byte)2);
      Object object0 = null;
      BigDecimal bigDecimal0 = new BigDecimal((-4440));
      AtomicBoolean atomicBoolean0 = new AtomicBoolean(false);
      // Undeclared exception!
      try { 
        jexlArithmetic0.mod(atomicBoolean0, atomicBoolean0);
        fail(""Expecting exception: ArithmeticException"");
      } catch(ArithmeticException e) {
         //
         // %
         //
         verifyException(""org.apache.commons.jexl3.JexlArithmetic"", e);
      }
  }"
843,"    public String toString(final Object val) {
        if (val == null) {
            controlNullOperand();
            return """";
        }
        if (!(val instanceof Double)) {
            return val.toString();
        }
        final Double dval = (Double) val;
        if (Double.isNaN(dval)) {
            return """";
        }
        return dval.toString();
    }","  public void test120()  throws Throwable  {
      JexlArithmetic.isMultiplyExact(9223372036854775803L, 127L, 9223372036854775803L);
      MathContext mathContext0 = new MathContext(155);
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true, mathContext0, 155);
      jexlArithmetic0.toString((Object) mathContext0);
      try { 
        Short.valueOf(""java\u0000nio\u0000StringCharBuffer@0000000004"", 2207);
        fail(""Expecting exception: NumberFormatException"");
      } catch(NumberFormatException e) {
         //
         // radix 2207 greater than Character.MAX_RADIX
         //
         verifyException(""java.lang.Integer"", e);
      }
  }"
844,"    public final Object bitwiseOr(final Object lhs, final Object rhs) {
        return or(lhs, rhs);
    }","  public void test121()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true);
      MathContext mathContext0 = MathContext.DECIMAL32;
      int int0 = Integer.MIN_VALUE;
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.createWithOptions(false, mathContext0, Integer.MIN_VALUE);
      jexlArithmetic1.equals((Object) mathContext0, (Object) jexlArithmetic0);
      Float float0 = new Float((double) Integer.MIN_VALUE);
      byte byte0 = (byte)17;
      Byte byte1 = new Byte((byte)17);
      Float.max(Integer.MIN_VALUE, (-1.0F));
      jexlArithmetic0.bitwiseAnd(float0, byte1);
      Integer integer0 = new Integer((byte)17);
      Integer.getInteger((String) null, integer0);
      Integer integer1 = jexlArithmetic0.size((Object) mathContext0, integer0);
      jexlArithmetic1.mapBuilder((byte)17);
      long long0 = 1L;
      Long long1 = new Long(1L);
      jexlArithmetic0.add(integer1, long1);
      Byte byte2 = new Byte((byte)19);
      Byte byte3 = new Byte((byte) (-18));
      // Undeclared exception!
      try { 
        jexlArithmetic0.bitwiseOr(jexlArithmetic1, byte3);
        fail(""Expecting exception: ArithmeticException"");
      } catch(ArithmeticException e) {
         //
         // Long coercion: org.apache.commons.jexl3.JexlArithmetic:(org.apache.commons.jexl3.JexlArithmetic@2)
         //
         verifyException(""org.apache.commons.jexl3.JexlArithmetic"", e);
      }
  }"
845,"    public boolean lessThanOrEqual(final Object left, final Object right) {
        if (left == right) {
            return true;
        }
        if (left == null || right == null) {
            return false;
        }
        return compare(left, right, ""<="") <= 0;
    }","  public void test122()  throws Throwable  {
      MathContext mathContext0 = new MathContext(1);
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false, mathContext0, 1);
      jexlArithmetic0.greaterThan(mathContext0, ""Iyyw!VUTf`4)!P6Ts<"");
      FileSystemHandling.shouldAllThrowIOExceptions();
      MathContext mathContext1 = MathContext.DECIMAL64;
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.createWithOptions(false, mathContext1, 1);
      jexlArithmetic1.size((Object) mathContext0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) mathContext1;
      objectArray0[1] = (Object) mathContext0;
      objectArray0[2] = (Object) jexlArithmetic1;
      objectArray0[3] = (Object) mathContext0;
      mathContext1.equals(objectArray0[3]);
      jexlArithmetic1.narrowArguments(objectArray0);
      Boolean boolean0 = Boolean.valueOf(false);
      Boolean.logicalAnd(false, true);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Pattern pattern0 = JexlArithmetic.FLOAT_PATTERN;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      jexlArithmetic1.equals((Object) pattern0, (Object) boolean0);
      Boolean boolean1 = Boolean.TRUE;
      jexlArithmetic1.asLongNumber(boolean1);
      // Undeclared exception!
      try { 
        jexlArithmetic1.lessThanOrEqual(objectArray0[1], boolean1);
        fail(""Expecting exception: ClassCastException"");
      } catch(ClassCastException e) {
         //
         // java.math.MathContext cannot be cast to java.lang.Boolean
         //
         verifyException(""java.lang.Boolean"", e);
      }
  }"
846,"    public Object multiply(final Object left, final Object right) {
        if (left == null && right == null) {
            return controlNullNullOperands();
        }
        // if both (non null) args fit as int
        final Number ln = asLongNumber(left);
        final Number rn = asLongNumber(right);
        if (ln != null && rn != null) {
            final long x = ln.longValue();
            final long y = rn.longValue();
            final long result = x * y;
            // detect overflow
            if (!isMultiplyExact(x, y, result)) {
                return BigInteger.valueOf(x).multiply(BigInteger.valueOf(y));
            }
            return narrowLong(left, right, result);
        }
        // if either are bigdecimal use that type
        if (left instanceof BigDecimal || right instanceof BigDecimal) {
            final BigDecimal l = toBigDecimal(left);
            final BigDecimal r = toBigDecimal(right);
            final BigDecimal result = l.multiply(r, getMathContext());
            return narrowBigDecimal(left, right, result);
        }
        // if either are floating point (double or float) use double
        if (isFloatingPointNumber(left) || isFloatingPointNumber(right)) {
            final double l = toDouble(left);
            final double r = toDouble(right);
            return l * r;
        }
        // otherwise treat as integers
        final BigInteger l = toBigInteger(left);
        final BigInteger r = toBigInteger(right);
        final BigInteger result = l.multiply(r);
        return narrowBigInteger(left, right, result);
    }","  public void test123()  throws Throwable  {
      RoundingMode roundingMode0 = RoundingMode.DOWN;
      MathContext mathContext0 = new MathContext(0, roundingMode0);
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false, mathContext0, (-1943));
      JexlOptions jexlOptions0 = new JexlOptions();
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.options(jexlOptions0);
      MathContext mathContext1 = new MathContext(0);
      jexlOptions0.copy();
      JexlArithmetic jexlArithmetic2 = jexlArithmetic1.createWithOptions(true, mathContext1, (-1943));
      double double0 = new Integer(0);
      MathContext mathContext2 = MathContext.DECIMAL128;
      JexlArithmetic jexlArithmetic3 = new JexlArithmetic(true, mathContext2, 0);
      Boolean boolean0 = Boolean.FALSE;
      jexlArithmetic3.contains(boolean0, jexlArithmetic2);
      jexlOptions0.getMathContext();
      // Undeclared exception!
      try { 
        jexlArithmetic2.multiply((Object) null, (Object) null);
        fail(""Expecting exception: ArithmeticException"");
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.JexlArithmetic"", e);
      }
  }"
847,"    public Object mod(final Object left, final Object right) {
        if (left == null && right == null) {
            return controlNullNullOperands();
        }
        // if both (non null) args fit as long
        final Number ln = asLongNumber(left);
        final Number rn = asLongNumber(right);
        if (ln != null && rn != null) {
            final long x = ln.longValue();
            final long y = rn.longValue();
            if (y == 0L) {
                throw new ArithmeticException(""%"");
            }
            final long result = x % y;
            return narrowLong(left, right,  result);
        }
        // if either are bigdecimal use that type
        if (left instanceof BigDecimal || right instanceof BigDecimal) {
            final BigDecimal l = toBigDecimal(left);
            final BigDecimal r = toBigDecimal(right);
            if (BigDecimal.ZERO.equals(r)) {
                throw new ArithmeticException(""%"");
            }
            final BigDecimal remainder = l.remainder(r, getMathContext());
            return narrowBigDecimal(left, right, remainder);
        }
        // if either are floating point (double or float) use double
        if (isFloatingPointNumber(left) || isFloatingPointNumber(right)) {
            final double l = toDouble(left);
            final double r = toDouble(right);
            if (r == 0.0) {
                throw new ArithmeticException(""%"");
            }
            return l % r;
        }
        // otherwise treat as integers
        final BigInteger l = toBigInteger(left);
        final BigInteger r = toBigInteger(right);
        if (BigInteger.ZERO.equals(r)) {
            throw new ArithmeticException(""%"");
        }
        final BigInteger result = l.mod(r);
        return narrowBigInteger(left, right, result);
    }","  public void test124()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true);
      Object object0 = null;
      int int0 = 27;
      // Undeclared exception!
      try { 
        jexlArithmetic0.mod((Object) null, (Object) null);
        fail(""Expecting exception: ArithmeticException"");
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.JexlArithmetic"", e);
      }
  }"
848,"    public MapBuilder mapBuilder(final int size) {
        return new org.apache.commons.jexl3.internal.MapBuilder(size);
    }","  public void test125()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      JexlEngine.getThreadContext();
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.options((JexlContext) null);
      String string0 = "">="";
      FileSystemHandling.shouldAllThrowIOExceptions();
      Long long0 = Long.getLong("">="", 2245L);
      jexlArithmetic0.matches(jexlArithmetic1, long0);
      jexlArithmetic0.toDouble((Object) null);
      BigInteger bigInteger0 = JexlArithmetic.BIGI_LONG_MAX_VALUE;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-74);
      byteArray0[1] = (byte)106;
      byte byte0 = (byte)41;
      byteArray0[2] = (byte)41;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)41;
      byteArray0[5] = (byte)13;
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      BigInteger bigInteger2 = JexlArithmetic.BIGI_LONG_MAX_VALUE;
      jexlArithmetic1.createRange(bigInteger0, bigInteger0);
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      bigDecimal0.doubleValue();
      jexlArithmetic0.toLong(bigDecimal0);
      // Undeclared exception!
      try { 
        jexlArithmetic1.mapBuilder((-2));
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Illegal initial capacity: -2
         //
         verifyException(""java.util.HashMap"", e);
      }
  }"
849,"    public long toLong(final Object val) {
        if (val == null) {
            controlNullOperand();
            return 0L;
        }
        if (val instanceof Double) {
            final Double dval = (Double) val;
            if (Double.isNaN(dval)) {
                return 0L;
            }
            return dval.longValue();
        }
        if (val instanceof Number) {
            return ((Number) val).longValue();
        }
        if (val instanceof String) {
            if ("""".equals(val)) {
                return 0L;
            }
            return Long.parseLong((String) val);
        }
        if (val instanceof Boolean) {
            return ((Boolean) val) ? 1L : 0L;
        }
        if (val instanceof AtomicBoolean) {
            return ((AtomicBoolean) val).get() ? 1L : 0L;
        }
        if (val instanceof Character) {
            return ((Character) val);
        }

        throw new ArithmeticException(""Long coercion: ""
                + val.getClass().getName() + "":("" + val + "")"");
    }","  public void test126()  throws Throwable  {
      MathContext mathContext0 = MathContext.DECIMAL32;
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true, mathContext0, (-2319));
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.createWithOptions(true, mathContext0, 4);
      JexlEngine.getThreadContext();
      JexlArithmetic jexlArithmetic2 = jexlArithmetic1.options((JexlContext) null);
      short short0 = (short) (-1841);
      Short short1 = new Short((short) (-1841));
      jexlArithmetic2.equals((Object) null, (Object) short1);
      JexlArithmetic.MapBuilder jexlArithmetic_MapBuilder0 = jexlArithmetic0.mapBuilder(155);
      Object object0 = jexlArithmetic_MapBuilder0.create();
      // Undeclared exception!
      try { 
        jexlArithmetic0.toLong(object0);
        fail(""Expecting exception: ArithmeticException"");
      } catch(ArithmeticException e) {
         //
         // Long coercion: java.util.HashMap:({})
         //
         verifyException(""org.apache.commons.jexl3.JexlArithmetic"", e);
      }
  }"
850,"    public Iterable<?> createRange(final Object from, final Object to) throws ArithmeticException {
        final long lfrom = toLong(from);
        final long lto = toLong(to);
        if ((lfrom >= Integer.MIN_VALUE && lfrom <= Integer.MAX_VALUE)
                && (lto >= Integer.MIN_VALUE && lto <= Integer.MAX_VALUE)) {
            return org.apache.commons.jexl3.internal.IntegerRange.create((int) lfrom, (int) lto);
        }
        return org.apache.commons.jexl3.internal.LongRange.create(lfrom, lto);
    }","  public void test127()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      MathContext mathContext0 = MathContext.DECIMAL128;
      Float float0 = new Float(0.0F);
      mathContext0.equals(float0);
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true, mathContext0, 41);
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.createWithOptions(false, mathContext0, 20);
      JexlOptions jexlOptions0 = new JexlOptions();
      JexlArithmetic jexlArithmetic2 = jexlArithmetic1.options(jexlOptions0);
      String string0 = ""java.math.MathContext@0000000002"";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ""java.math.MathContext@0000000002"");
      jexlArithmetic2.getMathContext();
      String string1 = ""v^{4zO"";
      AtomicBoolean atomicBoolean0 = new AtomicBoolean(false);
      atomicBoolean0.set(false);
      // Undeclared exception!
      try { 
        jexlArithmetic2.createRange(atomicBoolean0, ""v^{4zO"");
        fail(""Expecting exception: NumberFormatException"");
      } catch(NumberFormatException e) {
         //
         // For input string: \""v^{4zO\""
         //
         verifyException(""java.lang.NumberFormatException"", e);
      }
  }"
851,"    public Object multiply(final Object left, final Object right) {
        if (left == null && right == null) {
            return controlNullNullOperands();
        }
        // if both (non null) args fit as int
        final Number ln = asLongNumber(left);
        final Number rn = asLongNumber(right);
        if (ln != null && rn != null) {
            final long x = ln.longValue();
            final long y = rn.longValue();
            final long result = x * y;
            // detect overflow
            if (!isMultiplyExact(x, y, result)) {
                return BigInteger.valueOf(x).multiply(BigInteger.valueOf(y));
            }
            return narrowLong(left, right, result);
        }
        // if either are bigdecimal use that type
        if (left instanceof BigDecimal || right instanceof BigDecimal) {
            final BigDecimal l = toBigDecimal(left);
            final BigDecimal r = toBigDecimal(right);
            final BigDecimal result = l.multiply(r, getMathContext());
            return narrowBigDecimal(left, right, result);
        }
        // if either are floating point (double or float) use double
        if (isFloatingPointNumber(left) || isFloatingPointNumber(right)) {
            final double l = toDouble(left);
            final double r = toDouble(right);
            return l * r;
        }
        // otherwise treat as integers
        final BigInteger l = toBigInteger(left);
        final BigInteger r = toBigInteger(right);
        final BigInteger result = l.multiply(r);
        return narrowBigInteger(left, right, result);
    }","  public void test128()  throws Throwable  {
      MathContext mathContext0 = MathContext.DECIMAL64;
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true, mathContext0, 0);
      Byte byte0 = new Byte((byte)36);
      Byte.toUnsignedInt((byte)36);
      jexlArithmetic0.lessThan(byte0, byte0);
      BigDecimal bigDecimal0 = new BigDecimal((-3044L));
      jexlArithmetic0.roundBigDecimal(bigDecimal0);
      BigDecimal bigDecimal1 = jexlArithmetic0.roundBigDecimal(bigDecimal0);
      jexlArithmetic0.startsWith(mathContext0, bigDecimal1);
      jexlArithmetic0.toBigDecimal(bigDecimal0);
      jexlArithmetic0.createWithOptions(true, mathContext0, 2520);
      Float float0 = new Float(1651.1852F);
      Float.min(41.704F, 2615.5386F);
      jexlArithmetic0.greaterThanOrEqual(byte0, float0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Long long0 = new Long((-2172L));
      // Undeclared exception!
      try { 
        jexlArithmetic0.multiply((Object) null, long0);
        fail(""Expecting exception: ArithmeticException"");
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.JexlArithmetic"", e);
      }
  }"
852,"    protected Number asLongNumber(final Object value) {
        return value instanceof Long
                || value instanceof Integer
                || value instanceof Short
                || value instanceof Byte
                        ? (Number) value
                        : null;
    }","  public void test129()  throws Throwable  {
      MathContext mathContext0 = new MathContext(1);
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false, mathContext0, 1);
      jexlArithmetic0.greaterThan(mathContext0, ""Iyyw!VUTf`4)!P6Ts<"");
      FileSystemHandling.shouldAllThrowIOExceptions();
      MathContext mathContext1 = MathContext.DECIMAL64;
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.createWithOptions(false, mathContext1, 1);
      jexlArithmetic1.size((Object) mathContext0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) mathContext1;
      objectArray0[1] = (Object) mathContext0;
      objectArray0[2] = (Object) jexlArithmetic1;
      objectArray0[3] = (Object) mathContext0;
      jexlArithmetic1.narrowArguments(objectArray0);
      Boolean boolean0 = Boolean.valueOf(false);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Pattern pattern0 = JexlArithmetic.FLOAT_PATTERN;
      jexlArithmetic1.equals((Object) pattern0, (Object) boolean0);
      Boolean boolean1 = Boolean.TRUE;
      jexlArithmetic1.asLongNumber(boolean1);
  }"
853,"    public boolean greaterThanOrEqual(final Object left, final Object right) {
        if (left == right) {
            return true;
        }
        if (left == null || right == null) {
            return false;
        }
        return compare(left, right, "">="") >= 0;
    }","  public void test130()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      jexlArithmetic0.xor((Object) null, (Object) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      MapContext mapContext0 = new MapContext();
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.options((JexlContext) mapContext0);
      JexlArithmetic jexlArithmetic2 = jexlArithmetic0.options((JexlContext) mapContext0);
      // Undeclared exception!
      try { 
        jexlArithmetic1.greaterThanOrEqual(jexlArithmetic2, mapContext0);
        fail(""Expecting exception: ArithmeticException"");
      } catch(ArithmeticException e) {
         //
         // Object comparison:(org.apache.commons.jexl3.JexlArithmetic@1 >= org.apache.commons.jexl3.MapContext@2)
         //
         verifyException(""org.apache.commons.jexl3.JexlArithmetic"", e);
      }
  }"
854,"    public final Object bitwiseOr(final Object lhs, final Object rhs) {
        return or(lhs, rhs);
    }","  public void test131()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      Float float0 = new Float((-3767.0593F));
      Long long0 = new Long((-2172L));
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) float0;
      objectArray0[1] = (Object) long0;
      objectArray0[2] = (Object) long0;
      objectArray0[3] = (Object) float0;
      objectArray0[4] = (Object) long0;
      objectArray0[5] = (Object) long0;
      objectArray0[6] = (Object) float0;
      objectArray0[7] = (Object) float0;
      jexlArithmetic0.narrowArguments(objectArray0);
      Long.compareUnsigned((-2172L), 0L);
      Long.remainderUnsigned((-2172L), (-2172L));
      jexlArithmetic0.lessThan(float0, long0);
      MathContext mathContext0 = MathContext.DECIMAL32;
      mathContext0.toString();
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.createWithOptions(false, mathContext0, 16);
      Float.min(1.0F, 0.0F);
      jexlArithmetic0.toInteger(float0);
      jexlArithmetic0.toString((Object) null);
      jexlArithmetic0.mapBuilder(0);
      BigInteger bigInteger0 = BigInteger.valueOf((-2172L));
      jexlArithmetic1.complement(bigInteger0);
      jexlArithmetic0.logicalNot((Object) null);
      String string0 = ""selfXor"";
      Pattern pattern0 = Pattern.compile(""selfXor"", (-1078));
      // Undeclared exception!
      try { 
        jexlArithmetic1.bitwiseOr(pattern0, (Object) null);
        fail(""Expecting exception: ArithmeticException"");
      } catch(ArithmeticException e) {
         //
         // Long coercion: java.util.regex.Pattern:(selfXor)
         //
         verifyException(""org.apache.commons.jexl3.JexlArithmetic"", e);
      }
  }"
855,"    public Object mod(final Object left, final Object right) {
        if (left == null && right == null) {
            return controlNullNullOperands();
        }
        // if both (non null) args fit as long
        final Number ln = asLongNumber(left);
        final Number rn = asLongNumber(right);
        if (ln != null && rn != null) {
            final long x = ln.longValue();
            final long y = rn.longValue();
            if (y == 0L) {
                throw new ArithmeticException(""%"");
            }
            final long result = x % y;
            return narrowLong(left, right,  result);
        }
        // if either are bigdecimal use that type
        if (left instanceof BigDecimal || right instanceof BigDecimal) {
            final BigDecimal l = toBigDecimal(left);
            final BigDecimal r = toBigDecimal(right);
            if (BigDecimal.ZERO.equals(r)) {
                throw new ArithmeticException(""%"");
            }
            final BigDecimal remainder = l.remainder(r, getMathContext());
            return narrowBigDecimal(left, right, remainder);
        }
        // if either are floating point (double or float) use double
        if (isFloatingPointNumber(left) || isFloatingPointNumber(right)) {
            final double l = toDouble(left);
            final double r = toDouble(right);
            if (r == 0.0) {
                throw new ArithmeticException(""%"");
            }
            return l % r;
        }
        // otherwise treat as integers
        final BigInteger l = toBigInteger(left);
        final BigInteger r = toBigInteger(right);
        if (BigInteger.ZERO.equals(r)) {
            throw new ArithmeticException(""%"");
        }
        final BigInteger result = l.mod(r);
        return narrowBigInteger(left, right, result);
    }","  public void test132()  throws Throwable  {
      int int0 = 0;
      RoundingMode roundingMode0 = RoundingMode.DOWN;
      MathContext mathContext0 = new MathContext(0, roundingMode0);
      int int1 = (-1943);
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false, mathContext0, (-1943));
      FileSystemHandling.shouldAllThrowIOExceptions();
      EvoSuiteFile evoSuiteFile0 = null;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)43;
      byteArray0[1] = (byte)19;
      Pattern pattern0 = Pattern.compile(""s@eyfXoQ"");
      // Undeclared exception!
      try { 
        jexlArithmetic0.mod((Object) null, pattern0);
        fail(""Expecting exception: ArithmeticException"");
      } catch(ArithmeticException e) {
         //
         // BigInteger coercion: java.util.regex.Pattern:(s@eyfXoQ)
         //
         verifyException(""org.apache.commons.jexl3.JexlArithmetic"", e);
      }
  }"
856,"    public Object divide(final Object left, final Object right) {
        if (left == null && right == null) {
            return controlNullNullOperands();
        }
        // if both (non null) args fit as long
        final Number ln = asLongNumber(left);
        final Number rn = asLongNumber(right);
        if (ln != null && rn != null) {
            final long x = ln.longValue();
            final long y = rn.longValue();
            if (y == 0L) {
                throw new ArithmeticException(""/"");
            }
            final long result = x  / y;
            return narrowLong(left, right, result);
        }
        // if either are bigdecimal use that type
        if (left instanceof BigDecimal || right instanceof BigDecimal) {
            final BigDecimal l = toBigDecimal(left);
            final BigDecimal r = toBigDecimal(right);
            if (BigDecimal.ZERO.equals(r)) {
                throw new ArithmeticException(""/"");
            }
            final BigDecimal result = l.divide(r, getMathContext());
            return narrowBigDecimal(left, right, result);
        }
        // if either are floating point (double or float) use double
        if (isFloatingPointNumber(left) || isFloatingPointNumber(right)) {
            final double l = toDouble(left);
            final double r = toDouble(right);
            if (r == 0.0) {
                throw new ArithmeticException(""/"");
            }
            return l / r;
        }
        // otherwise treat as integers
        final BigInteger l = toBigInteger(left);
        final BigInteger r = toBigInteger(right);
        if (BigInteger.ZERO.equals(r)) {
            throw new ArithmeticException(""/"");
        }
        final BigInteger result = l.divide(r);
        return narrowBigInteger(left, right, result);
    }","  public void test133()  throws Throwable  {
      MathContext mathContext0 = MathContext.DECIMAL64;
      Boolean boolean0 = Boolean.FALSE;
      mathContext0.equals(boolean0);
      BigDecimal bigDecimal0 = new BigDecimal((long) Integer.MIN_VALUE);
      bigDecimal0.toPlainString();
      Pattern pattern0 = JexlArithmetic.FLOAT_PATTERN;
      pattern0.split((CharSequence) ""-2147483648"");
      Double double0 = new Double(Integer.MIN_VALUE);
      Double double1 = new Double(Integer.MIN_VALUE);
      Short short0 = new Short((short)2);
      Double double2 = new Double(1038.679142239);
      Double double3 = new Double(0.0);
      Long long0 = new Long((-3087L));
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      Integer integer0 = new Integer(Integer.MIN_VALUE);
      // Undeclared exception!
      try { 
        jexlArithmetic0.divide(integer0, bigDecimal0);
        fail(""Expecting exception: NumberFormatException"");
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.math.BigDecimal"", e);
      }
  }"
857,"    public BigDecimal toBigDecimal(final Object val) {
        if (val instanceof BigDecimal) {
            return roundBigDecimal((BigDecimal) val);
        }
        if (val == null) {
            controlNullOperand();
            return BigDecimal.ZERO;
        }
        if (val instanceof Double) {
            if (Double.isNaN(((Double) val))) {
                return BigDecimal.ZERO;
            }
            return roundBigDecimal(new BigDecimal(val.toString(), getMathContext()));
        }
        if (val instanceof Number) {
            return roundBigDecimal(new BigDecimal(val.toString(), getMathContext()));
        }
        if (val instanceof Boolean) {
            return BigDecimal.valueOf(((Boolean) val) ? 1. : 0.);
        }
        if (val instanceof AtomicBoolean) {
            return BigDecimal.valueOf(((AtomicBoolean) val).get() ? 1L : 0L);
        }
        if (val instanceof String) {
            final String string = (String) val;
            if ("""".equals(string)) {
                return BigDecimal.ZERO;
            }
            return roundBigDecimal(new BigDecimal(string, getMathContext()));
        }
        if (val instanceof Character) {
            final int i = ((Character) val);
            return new BigDecimal(i);
        }
        throw new ArithmeticException(""BigDecimal coercion: ""
                + val.getClass().getName() + "":("" + val + "")"");
    }","  public void test134()  throws Throwable  {
      MathContext mathContext0 = MathContext.UNLIMITED;
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false, mathContext0, (-2037));
      jexlArithmetic0.not(mathContext0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      BigInteger bigInteger0 = BigInteger.ONE;
      Class<String> class0 = String.class;
      jexlArithmetic0.narrowNumber(bigInteger0, class0);
      jexlArithmetic0.controlNullOperand();
      Short short0 = new Short((short)1);
      JexlArithmetic.isMultiplyExact((short)1, 0L, 'Y');
      BigDecimal bigDecimal0 = new BigDecimal(1.7976931348623157E308);
      Long long0 = new Long(2170L);
      Number number0 = jexlArithmetic0.narrowLong(bigDecimal0, long0, (-2037));
      jexlArithmetic0.positivize(number0);
      jexlArithmetic0.negate((Object) null);
      AtomicBoolean atomicBoolean0 = new AtomicBoolean(true);
      jexlArithmetic0.toBigDecimal(atomicBoolean0);
  }"
858,"    protected int compare(final Object left, final Object right, final String operator) {
        if (left != null && right != null) {
            if (left instanceof BigDecimal || right instanceof BigDecimal) {
                final BigDecimal l = toBigDecimal(left);
                final BigDecimal r = toBigDecimal(right);
                return l.compareTo(r);
            }
            if (left instanceof BigInteger || right instanceof BigInteger) {
                final BigInteger l = toBigInteger(left);
                final BigInteger r = toBigInteger(right);
                return l.compareTo(r);
            }
            if (isFloatingPoint(left) || isFloatingPoint(right)) {
                final double lhs = toDouble(left);
                final double rhs = toDouble(right);
                if (Double.isNaN(lhs)) {
                    if (Double.isNaN(rhs)) {
                        return 0;
                    }
                    return -1;
                }
                if (Double.isNaN(rhs)) {
                    // lhs is not NaN
                    return +1;
                }
                if (lhs < rhs) {
                    return -1;
                }
                if (lhs > rhs) {
                    return +1;
                }
                return 0;
            }
            if (isNumberable(left) || isNumberable(right)) {
                final long lhs = toLong(left);
                final long rhs = toLong(right);
                if (lhs < rhs) {
                    return -1;
                }
                if (lhs > rhs) {
                    return +1;
                }
                return 0;
            }
            if (left instanceof String || right instanceof String) {
                return toString(left).compareTo(toString(right));
            }
            if (""=="".equals(operator)) {
                return left.equals(right) ? 0 : -1;
            }
            if (left instanceof Comparable<?>) {
                @SuppressWarnings(""unchecked"") // OK because of instanceof check above
                final Comparable<Object> comparable = (Comparable<Object>) left;
                return comparable.compareTo(right);
            }
            if (right instanceof Comparable<?>) {
                @SuppressWarnings(""unchecked"") // OK because of instanceof check above
                final Comparable<Object> comparable = (Comparable<Object>) right;
                return comparable.compareTo(left);
            }
        }
        throw new ArithmeticException(""Object comparison:("" + left + "" "" + operator + "" "" + right + "")"");
    }","  public void test135()  throws Throwable  {
      JexlArithmetic.isMultiplyExact((-9223372036854775808L), 127L, (-9223372036854775808L));
      MathContext mathContext0 = new MathContext(155);
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true, mathContext0, 155);
      jexlArithmetic0.toString((Object) mathContext0);
      Object object0 = jexlArithmetic0.not(mathContext0);
      jexlArithmetic0.compare(""java.math.MathContext@0000000002"", object0, ""org.apache.commons.jexl3.JexlArithmetic"");
      try { 
        Short.valueOf(""java\u0000nio\u0000StringCharBuffer@0000000004"", 2207);
        fail(""Expecting exception: NumberFormatException"");
      } catch(NumberFormatException e) {
         //
         // radix 2207 greater than Character.MAX_RADIX
         //
         verifyException(""java.lang.Integer"", e);
      }
  }"
859,"    protected int compare(final Object left, final Object right, final String operator) {
        if (left != null && right != null) {
            if (left instanceof BigDecimal || right instanceof BigDecimal) {
                final BigDecimal l = toBigDecimal(left);
                final BigDecimal r = toBigDecimal(right);
                return l.compareTo(r);
            }
            if (left instanceof BigInteger || right instanceof BigInteger) {
                final BigInteger l = toBigInteger(left);
                final BigInteger r = toBigInteger(right);
                return l.compareTo(r);
            }
            if (isFloatingPoint(left) || isFloatingPoint(right)) {
                final double lhs = toDouble(left);
                final double rhs = toDouble(right);
                if (Double.isNaN(lhs)) {
                    if (Double.isNaN(rhs)) {
                        return 0;
                    }
                    return -1;
                }
                if (Double.isNaN(rhs)) {
                    // lhs is not NaN
                    return +1;
                }
                if (lhs < rhs) {
                    return -1;
                }
                if (lhs > rhs) {
                    return +1;
                }
                return 0;
            }
            if (isNumberable(left) || isNumberable(right)) {
                final long lhs = toLong(left);
                final long rhs = toLong(right);
                if (lhs < rhs) {
                    return -1;
                }
                if (lhs > rhs) {
                    return +1;
                }
                return 0;
            }
            if (left instanceof String || right instanceof String) {
                return toString(left).compareTo(toString(right));
            }
            if (""=="".equals(operator)) {
                return left.equals(right) ? 0 : -1;
            }
            if (left instanceof Comparable<?>) {
                @SuppressWarnings(""unchecked"") // OK because of instanceof check above
                final Comparable<Object> comparable = (Comparable<Object>) left;
                return comparable.compareTo(right);
            }
            if (right instanceof Comparable<?>) {
                @SuppressWarnings(""unchecked"") // OK because of instanceof check above
                final Comparable<Object> comparable = (Comparable<Object>) right;
                return comparable.compareTo(left);
            }
        }
        throw new ArithmeticException(""Object comparison:("" + left + "" "" + operator + "" "" + right + "")"");
    }","  public void test136()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true);
      Pattern pattern0 = JexlArithmetic.FLOAT_PATTERN;
      JexlArithmetic.SetBuilder jexlArithmetic_SetBuilder0 = jexlArithmetic0.setBuilder(46);
      Object object0 = jexlArithmetic_SetBuilder0.create();
      jexlArithmetic0.equals((Object) pattern0, object0);
      MathContext mathContext0 = new MathContext(0);
      JexlArithmetic jexlArithmetic1 = new JexlArithmetic(false, mathContext0, 1602);
      JexlArithmetic jexlArithmetic2 = jexlArithmetic0.createWithOptions(true, mathContext0, 0);
      jexlArithmetic2.toBoolean(mathContext0);
      JexlOptions jexlOptions0 = new JexlOptions();
      String[] stringArray0 = new String[5];
      stringArray0[0] = ""_Y}Zz"";
      stringArray0[1] = ""-Q<S(c0j.&U,m}A"";
      stringArray0[2] = ""I 9HK+Yv*PK7("";
      stringArray0[3] = ""]: '"";
      stringArray0[4] = ""annotation"";
      JexlArithmetic jexlArithmetic3 = jexlArithmetic2.options(jexlOptions0);
      Class<Long> class0 = Long.class;
      jexlArithmetic3.narrowAccept(class0, class0);
      jexlArithmetic2.size((Object) class0);
      Boolean boolean0 = Boolean.valueOf(""]: '"");
      jexlArithmetic2.toDouble(boolean0);
      Pattern pattern1 = Pattern.compile(""Rbaiy*I"", (-22));
      // Undeclared exception!
      try { 
        jexlArithmetic3.compare(boolean0, pattern1, ""BigDecimal coercion: "");
        fail(""Expecting exception: ClassCastException"");
      } catch(ClassCastException e) {
         //
         // java.util.regex.Pattern cannot be cast to java.lang.Boolean
         //
         verifyException(""java.lang.Boolean"", e);
      }
  }"
860,"    public Object subtract(final Object left, final Object right) {
        if (left == null && right == null) {
            return controlNullNullOperands();
        }
        // if both (non null) args fit as long
        final Number ln = asLongNumber(left);
        final Number rn = asLongNumber(right);
        if (ln != null && rn != null) {
            final long x = ln.longValue();
            final long y = rn.longValue();
            final long result = x - y;
            // detect overflow, see java8 Math.subtractExact
            if (((x ^ y) & (x ^ result)) < 0) {
                return BigInteger.valueOf(x).subtract(BigInteger.valueOf(y));
            }
            return narrowLong(left, right, result);
        }
        // if either are bigdecimal use that type
        if (left instanceof BigDecimal || right instanceof BigDecimal) {
            final BigDecimal l = toBigDecimal(left);
            final BigDecimal r = toBigDecimal(right);
            final BigDecimal result = l.subtract(r, getMathContext());
            return narrowBigDecimal(left, right, result);
        }
        // if either are floating point (double or float) use double
        if (isFloatingPointNumber(left) || isFloatingPointNumber(right)) {
            final double l = toDouble(left);
            final double r = toDouble(right);
            return l - r;
        }
        // otherwise treat as integers
        final BigInteger l = toBigInteger(left);
        final BigInteger r = toBigInteger(right);
        final BigInteger result = l.subtract(r);
        return narrowBigInteger(left, right, result);
    }","  public void test137()  throws Throwable  {
      MathContext mathContext0 = MathContext.DECIMAL64;
      Boolean boolean0 = Boolean.FALSE;
      mathContext0.equals(boolean0);
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false, mathContext0, Integer.MIN_VALUE);
      BigDecimal bigDecimal0 = new BigDecimal((long) Integer.MIN_VALUE);
      bigDecimal0.toPlainString();
      jexlArithmetic0.narrowBigDecimal((Object) null, mathContext0, bigDecimal0);
      jexlArithmetic0.FLOAT_PATTERN.split((CharSequence) ""-2147483648"");
      Double double0 = new Double(1.0);
      Double double1 = new Double(1.0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ""-2147483648"");
      jexlArithmetic0.narrowLong(jexlArithmetic0.FLOAT_PATTERN, double0, Integer.MIN_VALUE);
      jexlArithmetic0.toString((Object) jexlArithmetic0.FLOAT_PATTERN);
      Double double2 = new Double(1038.679142239);
      Object object0 = jexlArithmetic0.subtract((Object) null, double2);
      Object object1 = jexlArithmetic0.logicalNot((Object) null);
      Double double3 = new Double(0.0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      jexlArithmetic0.empty(double3);
      Object object2 = jexlArithmetic0.subtract(object1, object0);
      jexlArithmetic0.add(object2, boolean0);
      Long long0 = new Long((-3087L));
      // Undeclared exception!
      try { 
        jexlArithmetic0.subtract(bigDecimal0, long0);
        fail(""Expecting exception: NumberFormatException"");
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.math.BigDecimal"", e);
      }
  }"
861,"    public Object complement(final Object val) {
        final long l = toLong(val);
        return ~l;
    }","  public void test138()  throws Throwable  {
      boolean boolean0 = false;
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      JexlOptions jexlOptions0 = new JexlOptions();
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.options(jexlOptions0);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      MapContext mapContext0 = new MapContext(hashMap0);
      jexlArithmetic0.toBoolean(hashMap0);
      JexlArithmetic jexlArithmetic2 = jexlArithmetic1.options((JexlContext) mapContext0);
      Short short0 = new Short((short)1263);
      Boolean boolean1 = Boolean.FALSE;
      jexlArithmetic2.toDouble(boolean1);
      Short.toUnsignedInt((short)1263);
      int int0 = (-370);
      Integer integer0 = new Integer((-370));
      jexlArithmetic2.bitwiseOr(short0, integer0);
      // Undeclared exception!
      try { 
        jexlArithmetic2.complement((Object) null);
        fail(""Expecting exception: ArithmeticException"");
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.JexlArithmetic"", e);
      }
  }"
862,"    public final Object bitwiseAnd(final Object lhs, final Object rhs) {
        return and(lhs, rhs);
    }","  public void test139()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true);
      byte byte0 = (byte)33;
      Byte byte1 = new Byte((byte)33);
      jexlArithmetic0.toLong(byte1);
      Double double0 = new Double(2.0);
      jexlArithmetic0.mod(double0, double0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ""Object positivize:("");
      double double1 = 2354.32457002;
      Byte byte2 = new Byte((byte) (-45));
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ""java.math.MathContext@0000000002"");
      // Undeclared exception!
      try { 
        jexlArithmetic0.bitwiseAnd(""Object positivize:("", byte2);
        fail(""Expecting exception: NumberFormatException"");
      } catch(NumberFormatException e) {
         //
         // For input string: \""Object positivize:(\""
         //
         verifyException(""java.lang.NumberFormatException"", e);
      }
  }"
863,"    public Object subtract(final Object left, final Object right) {
        if (left == null && right == null) {
            return controlNullNullOperands();
        }
        // if both (non null) args fit as long
        final Number ln = asLongNumber(left);
        final Number rn = asLongNumber(right);
        if (ln != null && rn != null) {
            final long x = ln.longValue();
            final long y = rn.longValue();
            final long result = x - y;
            // detect overflow, see java8 Math.subtractExact
            if (((x ^ y) & (x ^ result)) < 0) {
                return BigInteger.valueOf(x).subtract(BigInteger.valueOf(y));
            }
            return narrowLong(left, right, result);
        }
        // if either are bigdecimal use that type
        if (left instanceof BigDecimal || right instanceof BigDecimal) {
            final BigDecimal l = toBigDecimal(left);
            final BigDecimal r = toBigDecimal(right);
            final BigDecimal result = l.subtract(r, getMathContext());
            return narrowBigDecimal(left, right, result);
        }
        // if either are floating point (double or float) use double
        if (isFloatingPointNumber(left) || isFloatingPointNumber(right)) {
            final double l = toDouble(left);
            final double r = toDouble(right);
            return l - r;
        }
        // otherwise treat as integers
        final BigInteger l = toBigInteger(left);
        final BigInteger r = toBigInteger(right);
        final BigInteger result = l.subtract(r);
        return narrowBigInteger(left, right, result);
    }","  public void test140()  throws Throwable  {
      MathContext mathContext0 = MathContext.DECIMAL64;
      Boolean boolean0 = Boolean.FALSE;
      mathContext0.equals(boolean0);
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false, (MathContext) null, Integer.MIN_VALUE);
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.createWithOptions(false, mathContext0, Integer.MIN_VALUE);
      BigDecimal bigDecimal0 = new BigDecimal((long) Integer.MIN_VALUE);
      bigDecimal0.toPlainString();
      Pattern pattern0 = JexlArithmetic.FLOAT_PATTERN;
      pattern0.split((CharSequence) ""-2147483648"");
      Double double0 = new Double(1.0);
      double double1 = 0.0;
      Double double2 = new Double(1.0);
      Short short0 = new Short((short)2);
      Object object0 = jexlArithmetic1.logicalNot(short0);
      BigDecimal bigDecimal1 = jexlArithmetic0.toBigDecimal(object0);
      BigDecimal bigDecimal2 = bigDecimal0.subtract(bigDecimal1);
      jexlArithmetic1.narrowLong(pattern0, double0, 16380L);
      Object object1 = null;
      Double double3 = new Double(1038.679142239);
      // Undeclared exception!
      try { 
        jexlArithmetic0.subtract(bigDecimal2, double3);
        fail(""Expecting exception: NumberFormatException"");
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.math.BigDecimal"", e);
      }
  }"
864,"    public MapBuilder mapBuilder(final int size) {
        return new org.apache.commons.jexl3.internal.MapBuilder(size);
    }","  public void test141()  throws Throwable  {
      MathContext mathContext0 = MathContext.DECIMAL32;
      int int0 = (-2776);
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false, mathContext0, (-2776));
      jexlArithmetic0.createWithOptions(true, mathContext0, (-563));
      BigInteger bigInteger0 = JexlArithmetic.BIGI_LONG_MAX_VALUE;
      Integer integer0 = new Integer((-563));
      Integer integer1 = new Integer((-563));
      mathContext0.equals(jexlArithmetic0);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) bigInteger0;
      jexlArithmetic0.narrowArguments(objectArray0);
      String string0 = null;
      Character character0 = new Character('>');
      jexlArithmetic0.add(character0, integer0);
      Float float0 = new Float((-1.0));
      Double double0 = new Double(0.0F);
      jexlArithmetic0.narrowBigInteger(bigInteger0, double0, bigInteger0);
      Float.max(0.0F, 0.0F);
      jexlArithmetic0.narrow(float0);
      // Undeclared exception!
      try { 
        jexlArithmetic0.mapBuilder((-2776));
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Illegal initial capacity: -2776
         //
         verifyException(""java.util.HashMap"", e);
      }
  }"
865,"    public boolean lessThanOrEqual(final Object left, final Object right) {
        if (left == right) {
            return true;
        }
        if (left == null || right == null) {
            return false;
        }
        return compare(left, right, ""<="") <= 0;
    }","  public void test142()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      BigInteger bigInteger0 = BigInteger.ZERO;
      jexlArithmetic0.narrow(bigInteger0);
      Float float0 = new Float((-2368.8948));
      Double double0 = new Double((-2368.8948));
      AtomicBoolean atomicBoolean0 = new AtomicBoolean();
      atomicBoolean0.getAndSet(false);
      Object object0 = jexlArithmetic0.not(atomicBoolean0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Integer integer0 = new Integer((-45));
      Integer.getInteger(""positivize"");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Integer.compareUnsigned((-45), (-45));
      Object object1 = jexlArithmetic0.logicalNot(float0);
      JexlArithmetic.isMultiplyExact((-32768L), (-1677L), (-1677L));
      BigInteger bigInteger1 = jexlArithmetic0.toBigInteger(object0);
      jexlArithmetic0.isPositivizeStable();
      jexlArithmetic0.isNegateStable();
      jexlArithmetic0.divide(object1, bigInteger1);
      Integer integer1 = Integer.getInteger(""positivize"", 953);
      Integer integer2 = new Integer(953);
      jexlArithmetic0.lessThanOrEqual(integer1, integer2);
  }"
866,"    public double toDouble(final Object val) {
        if (val == null) {
            controlNullOperand();
            return 0;
        }
        if (val instanceof Double) {
            return ((Double) val);
        }
        if (val instanceof Number) {
            //The below construct is used rather than ((Number)val).doubleValue() to ensure
            //equality between comparing new Double( 6.4 / 3 ) and the jexl expression of 6.4 / 3
            return Double.parseDouble(String.valueOf(val));
        }
        if (val instanceof Boolean) {
            return ((Boolean) val) ? 1. : 0.;
        }
        if (val instanceof AtomicBoolean) {
            return ((AtomicBoolean) val).get() ? 1. : 0.;
        }
        if (val instanceof String) {
            final String string = (String) val;
            if ("""".equals(string)) {
                return Double.NaN;
            }
            // the spec seems to be iffy about this.  Going to give it a wack anyway
            return Double.parseDouble(string);
        }
        if (val instanceof Character) {
            final int i = ((Character) val);
            return i;
        }
        throw new ArithmeticException(""Double coercion: ""
                + val.getClass().getName() + "":("" + val + "")"");
    }","  public void test143()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      BigInteger bigInteger0 = BigInteger.ZERO;
      jexlArithmetic0.narrow(bigInteger0);
      AtomicBoolean atomicBoolean0 = new AtomicBoolean();
      atomicBoolean0.getAndSet(false);
      Object object0 = jexlArithmetic0.not(atomicBoolean0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Integer integer0 = new Integer((-45));
      Integer.getInteger(""positivize"");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Integer.compareUnsigned((-45), (-45));
      atomicBoolean0.set(false);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ""positivize"");
      jexlArithmetic0.toBigInteger(object0);
      jexlArithmetic0.isPositivizeStable();
      jexlArithmetic0.isNegateStable();
      jexlArithmetic0.createWithOptions(false, (MathContext) null, 0);
      jexlArithmetic0.toDouble(atomicBoolean0);
  }"
867,"    public Object mod(final Object left, final Object right) {
        if (left == null && right == null) {
            return controlNullNullOperands();
        }
        // if both (non null) args fit as long
        final Number ln = asLongNumber(left);
        final Number rn = asLongNumber(right);
        if (ln != null && rn != null) {
            final long x = ln.longValue();
            final long y = rn.longValue();
            if (y == 0L) {
                throw new ArithmeticException(""%"");
            }
            final long result = x % y;
            return narrowLong(left, right,  result);
        }
        // if either are bigdecimal use that type
        if (left instanceof BigDecimal || right instanceof BigDecimal) {
            final BigDecimal l = toBigDecimal(left);
            final BigDecimal r = toBigDecimal(right);
            if (BigDecimal.ZERO.equals(r)) {
                throw new ArithmeticException(""%"");
            }
            final BigDecimal remainder = l.remainder(r, getMathContext());
            return narrowBigDecimal(left, right, remainder);
        }
        // if either are floating point (double or float) use double
        if (isFloatingPointNumber(left) || isFloatingPointNumber(right)) {
            final double l = toDouble(left);
            final double r = toDouble(right);
            if (r == 0.0) {
                throw new ArithmeticException(""%"");
            }
            return l % r;
        }
        // otherwise treat as integers
        final BigInteger l = toBigInteger(left);
        final BigInteger r = toBigInteger(right);
        if (BigInteger.ZERO.equals(r)) {
            throw new ArithmeticException(""%"");
        }
        final BigInteger result = l.mod(r);
        return narrowBigInteger(left, right, result);
    }","  public void test144()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      Float float0 = new Float((-3767.0593F));
      Long long0 = new Long((-2172L));
      Long.remainderUnsigned((-2172L), (-2172L));
      jexlArithmetic0.lessThan(float0, long0);
      MathContext mathContext0 = MathContext.DECIMAL32;
      mathContext0.toString();
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.createWithOptions(false, mathContext0, 16);
      JexlEngine.getThreadContext();
      JexlArithmetic jexlArithmetic2 = jexlArithmetic0.options((JexlContext) null);
      Double double0 = new Double((-3767.0593F));
      BigInteger bigInteger0 = JexlArithmetic.BIGI_LONG_MAX_VALUE;
      jexlArithmetic2.narrowBigInteger(double0, jexlArithmetic1, bigInteger0);
      // Undeclared exception!
      try { 
        jexlArithmetic1.mod(""precision=7 roundingMode=HALF_EVEN"", jexlArithmetic2);
        fail(""Expecting exception: NumberFormatException"");
      } catch(NumberFormatException e) {
         //
         // For input string: \""precisi\""
         //
         verifyException(""java.lang.NumberFormatException"", e);
      }
  }"
868,"    public Integer size(final Object object) {
        return size(object, object == null? 0 : 1);
    }","  public void test145()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true);
      Pattern pattern0 = JexlArithmetic.FLOAT_PATTERN;
      JexlArithmetic.SetBuilder jexlArithmetic_SetBuilder0 = jexlArithmetic0.setBuilder(46);
      Object object0 = jexlArithmetic_SetBuilder0.create();
      jexlArithmetic0.equals((Object) pattern0, object0);
      MathContext mathContext0 = new MathContext(0);
      jexlArithmetic0.createWithOptions(true, mathContext0, 1602);
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.createWithOptions(true, mathContext0, 0);
      jexlArithmetic1.toBoolean(mathContext0);
      JexlOptions jexlOptions0 = new JexlOptions();
      String[] stringArray0 = new String[5];
      stringArray0[0] = ""_Y6};D"";
      stringArray0[1] = ""-Q<S(c0j.&U,m}A"";
      stringArray0[2] = ""I 9HK+Yv*PK7("";
      stringArray0[3] = ""]: '"";
      stringArray0[4] = ""annotation"";
      jexlOptions0.setFlags(stringArray0);
      JexlArithmetic jexlArithmetic2 = jexlArithmetic1.options(jexlOptions0);
      Class<Long> class0 = Long.class;
      jexlArithmetic2.narrowAccept(class0, class0);
      jexlArithmetic1.size((Object) class0);
  }"
869,"    protected Number asLongNumber(final Object value) {
        return value instanceof Long
                || value instanceof Integer
                || value instanceof Short
                || value instanceof Byte
                        ? (Number) value
                        : null;
    }","  public void test146()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.createWithOptions(false, (MathContext) null, 53);
      JexlEngine.getThreadContext();
      JexlArithmetic jexlArithmetic2 = jexlArithmetic1.options((JexlContext) null);
      jexlArithmetic2.narrow((Number) null);
      Integer integer0 = new Integer(7);
      Object object0 = jexlArithmetic2.divide((Object) null, integer0);
      MathContext mathContext0 = MathContext.UNLIMITED;
      jexlArithmetic1.asLongNumber(object0);
  }"
870,"    public BigDecimal toBigDecimal(final Object val) {
        if (val instanceof BigDecimal) {
            return roundBigDecimal((BigDecimal) val);
        }
        if (val == null) {
            controlNullOperand();
            return BigDecimal.ZERO;
        }
        if (val instanceof Double) {
            if (Double.isNaN(((Double) val))) {
                return BigDecimal.ZERO;
            }
            return roundBigDecimal(new BigDecimal(val.toString(), getMathContext()));
        }
        if (val instanceof Number) {
            return roundBigDecimal(new BigDecimal(val.toString(), getMathContext()));
        }
        if (val instanceof Boolean) {
            return BigDecimal.valueOf(((Boolean) val) ? 1. : 0.);
        }
        if (val instanceof AtomicBoolean) {
            return BigDecimal.valueOf(((AtomicBoolean) val).get() ? 1L : 0L);
        }
        if (val instanceof String) {
            final String string = (String) val;
            if ("""".equals(string)) {
                return BigDecimal.ZERO;
            }
            return roundBigDecimal(new BigDecimal(string, getMathContext()));
        }
        if (val instanceof Character) {
            final int i = ((Character) val);
            return new BigDecimal(i);
        }
        throw new ArithmeticException(""BigDecimal coercion: ""
                + val.getClass().getName() + "":("" + val + "")"");
    }","  public void test147()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ""C"");
      MathContext mathContext0 = MathContext.DECIMAL64;
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false, mathContext0, 42);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      jexlArithmetic0.isPositivizeStable();
      BigDecimal bigDecimal0 = JexlArithmetic.BIGD_DOUBLE_MIN_VALUE;
      Class<Long> class0 = Long.class;
      jexlArithmetic0.narrowNumber(bigDecimal0, class0);
      mathContext0.getRoundingMode();
      // Undeclared exception!
      try { 
        jexlArithmetic0.toBigDecimal(mathContext0);
        fail(""Expecting exception: ArithmeticException"");
      } catch(ArithmeticException e) {
         //
         // BigDecimal coercion: java.math.MathContext:(precision=16 roundingMode=HALF_EVEN)
         //
         verifyException(""org.apache.commons.jexl3.JexlArithmetic"", e);
      }
  }"
871,"    public ArrayBuilder arrayBuilder(final int size) {
        return new org.apache.commons.jexl3.internal.ArrayBuilder(size);
    }","  public void test148()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true);
      MathContext mathContext0 = new MathContext(0);
      BigDecimal bigDecimal0 = JexlArithmetic.BIGD_DOUBLE_MAX_VALUE;
      Class<Double> class0 = Double.class;
      jexlArithmetic0.narrowNumber(bigDecimal0, class0);
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.createWithOptions(true, mathContext0, 1602);
      JexlArithmetic jexlArithmetic2 = jexlArithmetic0.createWithOptions(true, mathContext0, 0);
      jexlArithmetic2.toBoolean(mathContext0);
      JexlOptions jexlOptions0 = new JexlOptions();
      String[] stringArray0 = new String[5];
      stringArray0[0] = ""_Y6};D"";
      stringArray0[1] = ""-Q<S(c0j.&U,m}A"";
      stringArray0[2] = ""I 9HK+Yv*PK7("";
      stringArray0[3] = ""]: '"";
      stringArray0[4] = ""annotation"";
      jexlOptions0.setFlags(stringArray0);
      JexlArithmetic jexlArithmetic3 = jexlArithmetic2.options(jexlOptions0);
      Class<Long> class1 = Long.class;
      jexlArithmetic3.narrowAccept(class1, class1);
      jexlArithmetic2.size((Object) class1);
      JexlArithmetic jexlArithmetic4 = new JexlArithmetic(true, mathContext0, 0);
      jexlArithmetic0.size((Object) jexlArithmetic4);
      // Undeclared exception!
      try { 
        jexlArithmetic1.arrayBuilder((-1857));
        fail(""Expecting exception: NegativeArraySizeException"");
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.internal.ArrayBuilder"", e);
      }
  }"
872,"    public Object mod(final Object left, final Object right) {
        if (left == null && right == null) {
            return controlNullNullOperands();
        }
        // if both (non null) args fit as long
        final Number ln = asLongNumber(left);
        final Number rn = asLongNumber(right);
        if (ln != null && rn != null) {
            final long x = ln.longValue();
            final long y = rn.longValue();
            if (y == 0L) {
                throw new ArithmeticException(""%"");
            }
            final long result = x % y;
            return narrowLong(left, right,  result);
        }
        // if either are bigdecimal use that type
        if (left instanceof BigDecimal || right instanceof BigDecimal) {
            final BigDecimal l = toBigDecimal(left);
            final BigDecimal r = toBigDecimal(right);
            if (BigDecimal.ZERO.equals(r)) {
                throw new ArithmeticException(""%"");
            }
            final BigDecimal remainder = l.remainder(r, getMathContext());
            return narrowBigDecimal(left, right, remainder);
        }
        // if either are floating point (double or float) use double
        if (isFloatingPointNumber(left) || isFloatingPointNumber(right)) {
            final double l = toDouble(left);
            final double r = toDouble(right);
            if (r == 0.0) {
                throw new ArithmeticException(""%"");
            }
            return l % r;
        }
        // otherwise treat as integers
        final BigInteger l = toBigInteger(left);
        final BigInteger r = toBigInteger(right);
        if (BigInteger.ZERO.equals(r)) {
            throw new ArithmeticException(""%"");
        }
        final BigInteger result = l.mod(r);
        return narrowBigInteger(left, right, result);
    }","  public void test149()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      Byte byte0 = new Byte((byte)2);
      BigDecimal bigDecimal0 = new BigDecimal((-4440));
      jexlArithmetic0.narrowBigDecimal(fileSystemHandling0, (Object) null, bigDecimal0);
      jexlArithmetic0.narrow(byte0);
      Character character0 = Character.valueOf('B');
      Object object0 = jexlArithmetic0.bitwiseAnd(character0, character0);
      Character.isIdeographic((byte)2);
      Short short0 = new Short((short)1972);
      Object object1 = jexlArithmetic0.mod(object0, short0);
      jexlArithmetic0.positivize(short0);
      Object object2 = jexlArithmetic0.controlNullNullOperands();
      Character.isIdeographic((byte)2);
      jexlArithmetic0.isEmpty(object2);
      Float float0 = new Float(1.0F);
      jexlArithmetic0.lessThanOrEqual(float0, character0);
      BigDecimal bigDecimal1 = BigDecimal.TEN;
      jexlArithmetic0.roundBigDecimal(bigDecimal1);
      Float float1 = new Float((double) (short)1972);
      jexlArithmetic0.negate(float1);
      AtomicBoolean atomicBoolean0 = new AtomicBoolean(true);
      jexlArithmetic0.and(object2, atomicBoolean0);
      JexlArithmetic.MapBuilder jexlArithmetic_MapBuilder0 = jexlArithmetic0.mapBuilder((short)1972);
      jexlArithmetic_MapBuilder0.create();
      BigInteger bigInteger0 = BigInteger.TEN;
      jexlArithmetic0.narrowBigInteger((Object) null, object1, bigInteger0);
      jexlArithmetic0.isEmpty((Object) bigDecimal1);
      MathContext mathContext0 = MathContext.DECIMAL128;
      // Undeclared exception!
      try { 
        jexlArithmetic0.mod(atomicBoolean0, mathContext0);
        fail(""Expecting exception: ArithmeticException"");
      } catch(ArithmeticException e) {
         //
         // BigInteger coercion: java.math.MathContext:(precision=34 roundingMode=HALF_EVEN)
         //
         verifyException(""org.apache.commons.jexl3.JexlArithmetic"", e);
      }
  }"
873,"    public Object and(final Object left, final Object right) {
        final long l = toLong(left);
        final long r = toLong(right);
        return l & r;
    }","  public void test150()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true);
      MathContext mathContext0 = new MathContext(0);
      jexlArithmetic0.createWithOptions(true, mathContext0, 1602);
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.createWithOptions(true, mathContext0, 0);
      jexlArithmetic1.toBoolean(mathContext0);
      JexlOptions jexlOptions0 = new JexlOptions();
      String[] stringArray0 = new String[5];
      stringArray0[0] = ""_Y6};D"";
      stringArray0[1] = ""-Q<S(c0j.&U,m}A"";
      stringArray0[2] = ""I 9HK+Yv*PK7("";
      stringArray0[3] = ""]: '"";
      jexlOptions0.setStrict(true);
      stringArray0[4] = ""annotation"";
      jexlOptions0.setFlags(stringArray0);
      jexlArithmetic1.options(jexlOptions0);
      Class<Long> class0 = Long.class;
      Boolean boolean0 = new Boolean(""]: '"");
      jexlArithmetic1.size((Object) class0);
      Integer integer0 = new Integer(1602);
      Integer.getInteger(""=^oaF<uj"", 2);
      AtomicBoolean atomicBoolean0 = new AtomicBoolean(false);
      jexlArithmetic1.startsWith(atomicBoolean0, ""-Q<S(c0j.&U,m}A"");
      // Undeclared exception!
      try { 
        jexlArithmetic1.and(integer0, (Object) null);
        fail(""Expecting exception: ArithmeticException"");
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.JexlArithmetic"", e);
      }
  }"
874,"    public BigDecimal toBigDecimal(final Object val) {
        if (val instanceof BigDecimal) {
            return roundBigDecimal((BigDecimal) val);
        }
        if (val == null) {
            controlNullOperand();
            return BigDecimal.ZERO;
        }
        if (val instanceof Double) {
            if (Double.isNaN(((Double) val))) {
                return BigDecimal.ZERO;
            }
            return roundBigDecimal(new BigDecimal(val.toString(), getMathContext()));
        }
        if (val instanceof Number) {
            return roundBigDecimal(new BigDecimal(val.toString(), getMathContext()));
        }
        if (val instanceof Boolean) {
            return BigDecimal.valueOf(((Boolean) val) ? 1. : 0.);
        }
        if (val instanceof AtomicBoolean) {
            return BigDecimal.valueOf(((AtomicBoolean) val).get() ? 1L : 0L);
        }
        if (val instanceof String) {
            final String string = (String) val;
            if ("""".equals(string)) {
                return BigDecimal.ZERO;
            }
            return roundBigDecimal(new BigDecimal(string, getMathContext()));
        }
        if (val instanceof Character) {
            final int i = ((Character) val);
            return new BigDecimal(i);
        }
        throw new ArithmeticException(""BigDecimal coercion: ""
                + val.getClass().getName() + "":("" + val + "")"");
    }","  public void test151()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ""C"");
      MathContext mathContext0 = MathContext.DECIMAL64;
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false, mathContext0, 42);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      jexlArithmetic0.isPositivizeStable();
      mathContext0.getRoundingMode();
      Class<Object> class0 = Object.class;
      jexlArithmetic0.narrowNumber((Number) null, class0);
      // Undeclared exception!
      try { 
        jexlArithmetic0.toBigDecimal(mathContext0);
        fail(""Expecting exception: ArithmeticException"");
      } catch(ArithmeticException e) {
         //
         // BigDecimal coercion: java.math.MathContext:(precision=16 roundingMode=HALF_EVEN)
         //
         verifyException(""org.apache.commons.jexl3.JexlArithmetic"", e);
      }
  }"
875,"    public long toLong(final Object val) {
        if (val == null) {
            controlNullOperand();
            return 0L;
        }
        if (val instanceof Double) {
            final Double dval = (Double) val;
            if (Double.isNaN(dval)) {
                return 0L;
            }
            return dval.longValue();
        }
        if (val instanceof Number) {
            return ((Number) val).longValue();
        }
        if (val instanceof String) {
            if ("""".equals(val)) {
                return 0L;
            }
            return Long.parseLong((String) val);
        }
        if (val instanceof Boolean) {
            return ((Boolean) val) ? 1L : 0L;
        }
        if (val instanceof AtomicBoolean) {
            return ((AtomicBoolean) val).get() ? 1L : 0L;
        }
        if (val instanceof Character) {
            return ((Character) val);
        }

        throw new ArithmeticException(""Long coercion: ""
                + val.getClass().getName() + "":("" + val + "")"");
    }","  public void test152()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true);
      MathContext mathContext0 = new MathContext(0);
      jexlArithmetic0.createWithOptions(true, mathContext0, 1602);
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.createWithOptions(true, mathContext0, 0);
      jexlArithmetic1.toBoolean(mathContext0);
      JexlOptions jexlOptions0 = new JexlOptions();
      String[] stringArray0 = new String[5];
      String string0 = ""_Y6};D"";
      // Undeclared exception!
      try { 
        jexlArithmetic1.toLong(""_Y6};D"");
        fail(""Expecting exception: NumberFormatException"");
      } catch(NumberFormatException e) {
         //
         // For input string: \""_Y6};D\""
         //
         verifyException(""java.lang.NumberFormatException"", e);
      }
  }"
876,"    public Object xor(final Object left, final Object right) {
        final long l = toLong(left);
        final long r = toLong(right);
        return l ^ r;
    }","  public void test153()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true);
      MathContext mathContext0 = new MathContext(0);
      jexlArithmetic0.createWithOptions(true, mathContext0, 1602);
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.createWithOptions(true, mathContext0, 0);
      jexlArithmetic1.toBoolean(mathContext0);
      JexlOptions jexlOptions0 = new JexlOptions();
      String[] stringArray0 = new String[5];
      stringArray0[0] = ""_Y6};D"";
      stringArray0[1] = ""-Q<S(c0j.&U,m}A"";
      stringArray0[2] = ""I 9HK+Yv*PK7("";
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      stringArray0[3] = ""]: '"";
      stringArray0[4] = ""annotation"";
      jexlOptions0.setFlags(stringArray0);
      JexlArithmetic jexlArithmetic2 = jexlArithmetic1.options(jexlOptions0);
      Class<Long> class0 = Long.class;
      jexlArithmetic2.narrowAccept(class0, class0);
      jexlArithmetic1.size((Object) class0);
      // Undeclared exception!
      try { 
        jexlArithmetic1.xor((Object) null, class0);
        fail(""Expecting exception: ArithmeticException"");
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.JexlArithmetic"", e);
      }
  }"
877,"    public int getMathScale() {
        return mathScale;
    }","  public void test154()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ""9kg/j%zXuBTZ!jD"");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)91;
      byteArray0[1] = (byte)12;
      byteArray0[2] = (byte) (-31);
      byteArray0[3] = (byte) (-94);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false, (MathContext) null, 1936);
      jexlArithmetic0.getMathScale();
  }"
878,"    public Object divide(final Object left, final Object right) {
        if (left == null && right == null) {
            return controlNullNullOperands();
        }
        // if both (non null) args fit as long
        final Number ln = asLongNumber(left);
        final Number rn = asLongNumber(right);
        if (ln != null && rn != null) {
            final long x = ln.longValue();
            final long y = rn.longValue();
            if (y == 0L) {
                throw new ArithmeticException(""/"");
            }
            final long result = x  / y;
            return narrowLong(left, right, result);
        }
        // if either are bigdecimal use that type
        if (left instanceof BigDecimal || right instanceof BigDecimal) {
            final BigDecimal l = toBigDecimal(left);
            final BigDecimal r = toBigDecimal(right);
            if (BigDecimal.ZERO.equals(r)) {
                throw new ArithmeticException(""/"");
            }
            final BigDecimal result = l.divide(r, getMathContext());
            return narrowBigDecimal(left, right, result);
        }
        // if either are floating point (double or float) use double
        if (isFloatingPointNumber(left) || isFloatingPointNumber(right)) {
            final double l = toDouble(left);
            final double r = toDouble(right);
            if (r == 0.0) {
                throw new ArithmeticException(""/"");
            }
            return l / r;
        }
        // otherwise treat as integers
        final BigInteger l = toBigInteger(left);
        final BigInteger r = toBigInteger(right);
        if (BigInteger.ZERO.equals(r)) {
            throw new ArithmeticException(""/"");
        }
        final BigInteger result = l.divide(r);
        return narrowBigInteger(left, right, result);
    }","  public void test155()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      BigInteger bigInteger0 = BigInteger.ZERO;
      jexlArithmetic0.narrow(bigInteger0);
      Float float0 = new Float((-2368.8948));
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      jexlArithmetic0.subtract(float0, (Object) null);
      AtomicBoolean atomicBoolean0 = new AtomicBoolean();
      atomicBoolean0.getAndSet(false);
      Object object0 = jexlArithmetic0.not(atomicBoolean0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Integer integer0 = new Integer((-55));
      Integer.getInteger(""positivize"");
      atomicBoolean0.weakCompareAndSet(false, false);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Integer.compareUnsigned((-55), (-55));
      JexlArithmetic.isMultiplyExact((-32768L), (-1677L), (-1677L));
      jexlArithmetic0.isPositivizeStable();
      jexlArithmetic0.isNegateStable();
      // Undeclared exception!
      try { 
        jexlArithmetic0.divide(object0, bigInteger0);
        fail(""Expecting exception: ArithmeticException"");
      } catch(ArithmeticException e) {
         //
         // /
         //
         verifyException(""org.apache.commons.jexl3.JexlArithmetic"", e);
      }
  }"
879,"    public String toString(final Object val) {
        if (val == null) {
            controlNullOperand();
            return """";
        }
        if (!(val instanceof Double)) {
            return val.toString();
        }
        final Double dval = (Double) val;
        if (Double.isNaN(dval)) {
            return """";
        }
        return dval.toString();
    }","  public void test156()  throws Throwable  {
      JexlArithmetic.isMultiplyExact((-9223372036854775808L), 127L, (-9223372036854775808L));
      MathContext mathContext0 = new MathContext(155);
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true, mathContext0, 155);
      jexlArithmetic0.toString((Object) mathContext0);
      try { 
        Short.valueOf(""java\u0000nio\u0000StringCharBuffer@0000000004"", 2207);
        fail(""Expecting exception: NumberFormatException"");
      } catch(NumberFormatException e) {
         //
         // radix 2207 greater than Character.MAX_RADIX
         //
         verifyException(""java.lang.Integer"", e);
      }
  }"
880,"    public Object multiply(final Object left, final Object right) {
        if (left == null && right == null) {
            return controlNullNullOperands();
        }
        // if both (non null) args fit as int
        final Number ln = asLongNumber(left);
        final Number rn = asLongNumber(right);
        if (ln != null && rn != null) {
            final long x = ln.longValue();
            final long y = rn.longValue();
            final long result = x * y;
            // detect overflow
            if (!isMultiplyExact(x, y, result)) {
                return BigInteger.valueOf(x).multiply(BigInteger.valueOf(y));
            }
            return narrowLong(left, right, result);
        }
        // if either are bigdecimal use that type
        if (left instanceof BigDecimal || right instanceof BigDecimal) {
            final BigDecimal l = toBigDecimal(left);
            final BigDecimal r = toBigDecimal(right);
            final BigDecimal result = l.multiply(r, getMathContext());
            return narrowBigDecimal(left, right, result);
        }
        // if either are floating point (double or float) use double
        if (isFloatingPointNumber(left) || isFloatingPointNumber(right)) {
            final double l = toDouble(left);
            final double r = toDouble(right);
            return l * r;
        }
        // otherwise treat as integers
        final BigInteger l = toBigInteger(left);
        final BigInteger r = toBigInteger(right);
        final BigInteger result = l.multiply(r);
        return narrowBigInteger(left, right, result);
    }","  public void test157()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true);
      MathContext mathContext0 = MathContext.DECIMAL32;
      RoundingMode roundingMode0 = mathContext0.getRoundingMode();
      mathContext0.equals(jexlArithmetic0);
      Integer integer0 = jexlArithmetic0.size((Object) mathContext0);
      Boolean boolean0 = Boolean.TRUE;
      Boolean.compare(true, true);
      jexlArithmetic0.endsWith(boolean0, boolean0);
      jexlArithmetic0.endsWith(mathContext0, (Object) null);
      Integer integer1 = new Integer((-1598));
      Character character0 = new Character('r');
      jexlArithmetic0.size((Object) character0, integer0);
      Integer.divideUnsigned(20, (-1598));
      // Undeclared exception!
      try { 
        jexlArithmetic0.multiply(roundingMode0, integer1);
        fail(""Expecting exception: ArithmeticException"");
      } catch(ArithmeticException e) {
         //
         // BigInteger coercion: java.math.RoundingMode:(HALF_EVEN)
         //
         verifyException(""org.apache.commons.jexl3.JexlArithmetic"", e);
      }
  }"
881,"    public Object mod(final Object left, final Object right) {
        if (left == null && right == null) {
            return controlNullNullOperands();
        }
        // if both (non null) args fit as long
        final Number ln = asLongNumber(left);
        final Number rn = asLongNumber(right);
        if (ln != null && rn != null) {
            final long x = ln.longValue();
            final long y = rn.longValue();
            if (y == 0L) {
                throw new ArithmeticException(""%"");
            }
            final long result = x % y;
            return narrowLong(left, right,  result);
        }
        // if either are bigdecimal use that type
        if (left instanceof BigDecimal || right instanceof BigDecimal) {
            final BigDecimal l = toBigDecimal(left);
            final BigDecimal r = toBigDecimal(right);
            if (BigDecimal.ZERO.equals(r)) {
                throw new ArithmeticException(""%"");
            }
            final BigDecimal remainder = l.remainder(r, getMathContext());
            return narrowBigDecimal(left, right, remainder);
        }
        // if either are floating point (double or float) use double
        if (isFloatingPointNumber(left) || isFloatingPointNumber(right)) {
            final double l = toDouble(left);
            final double r = toDouble(right);
            if (r == 0.0) {
                throw new ArithmeticException(""%"");
            }
            return l % r;
        }
        // otherwise treat as integers
        final BigInteger l = toBigInteger(left);
        final BigInteger r = toBigInteger(right);
        if (BigInteger.ZERO.equals(r)) {
            throw new ArithmeticException(""%"");
        }
        final BigInteger result = l.mod(r);
        return narrowBigInteger(left, right, result);
    }","  public void test158()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      Byte byte0 = new Byte((byte)2);
      BigDecimal bigDecimal0 = new BigDecimal((-4440));
      BigDecimal bigDecimal1 = (BigDecimal)jexlArithmetic0.narrowBigDecimal(fileSystemHandling0, (Object) null, bigDecimal0);
      jexlArithmetic0.narrow(byte0);
      Character character0 = Character.valueOf('B');
      jexlArithmetic0.bitwiseAnd(character0, character0);
      Character.isIdeographic((byte)2);
      Integer integer0 = (Integer)jexlArithmetic0.controlNullNullOperands();
      Character.isIdeographic((byte)2);
      jexlArithmetic0.isEmpty((Object) integer0);
      Float float0 = new Float(1.0F);
      jexlArithmetic0.lessThanOrEqual(float0, character0);
      jexlArithmetic0.roundBigDecimal(bigDecimal1);
      Float float1 = new Float((double) (short)1972);
      jexlArithmetic0.negate(float1);
      AtomicBoolean atomicBoolean0 = new AtomicBoolean(true);
      jexlArithmetic0.and(integer0, atomicBoolean0);
      MapBuilder mapBuilder0 = (MapBuilder)jexlArithmetic0.mapBuilder((short)1972);
      mapBuilder0.create();
      jexlArithmetic0.isEmpty((Object) bigDecimal0);
      MathContext mathContext0 = MathContext.DECIMAL128;
      // Undeclared exception!
      try { 
        jexlArithmetic0.mod(atomicBoolean0, mathContext0);
        fail(""Expecting exception: ArithmeticException"");
      } catch(ArithmeticException e) {
         //
         // BigInteger coercion: java.math.MathContext:(precision=34 roundingMode=HALF_EVEN)
         //
         verifyException(""org.apache.commons.jexl3.JexlArithmetic"", e);
      }
  }"
882,"    public Object divide(final Object left, final Object right) {
        if (left == null && right == null) {
            return controlNullNullOperands();
        }
        // if both (non null) args fit as long
        final Number ln = asLongNumber(left);
        final Number rn = asLongNumber(right);
        if (ln != null && rn != null) {
            final long x = ln.longValue();
            final long y = rn.longValue();
            if (y == 0L) {
                throw new ArithmeticException(""/"");
            }
            final long result = x  / y;
            return narrowLong(left, right, result);
        }
        // if either are bigdecimal use that type
        if (left instanceof BigDecimal || right instanceof BigDecimal) {
            final BigDecimal l = toBigDecimal(left);
            final BigDecimal r = toBigDecimal(right);
            if (BigDecimal.ZERO.equals(r)) {
                throw new ArithmeticException(""/"");
            }
            final BigDecimal result = l.divide(r, getMathContext());
            return narrowBigDecimal(left, right, result);
        }
        // if either are floating point (double or float) use double
        if (isFloatingPointNumber(left) || isFloatingPointNumber(right)) {
            final double l = toDouble(left);
            final double r = toDouble(right);
            if (r == 0.0) {
                throw new ArithmeticException(""/"");
            }
            return l / r;
        }
        // otherwise treat as integers
        final BigInteger l = toBigInteger(left);
        final BigInteger r = toBigInteger(right);
        if (BigInteger.ZERO.equals(r)) {
            throw new ArithmeticException(""/"");
        }
        final BigInteger result = l.divide(r);
        return narrowBigInteger(left, right, result);
    }","  public void test159()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.createWithOptions(false, (MathContext) null, (-2776));
      JexlEngine.getThreadContext();
      JexlArithmetic jexlArithmetic2 = jexlArithmetic1.options((JexlContext) null);
      Long long0 = new Long(337L);
      jexlArithmetic2.negate(long0);
      Integer integer0 = new Integer(7);
      jexlArithmetic2.divide((Object) null, integer0);
      char[] charArray0 = new char[2];
      charArray0[0] = '6';
      charArray0[1] = '&';
      // Undeclared exception!
      try { 
        CharBuffer.wrap(charArray0, (-398), 31);
        fail(""Expecting exception: IndexOutOfBoundsException"");
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.nio.CharBuffer"", e);
      }
  }"
883,"    public boolean lessThanOrEqual(final Object left, final Object right) {
        if (left == right) {
            return true;
        }
        if (left == null || right == null) {
            return false;
        }
        return compare(left, right, ""<="") <= 0;
    }","  public void test160()  throws Throwable  {
      MathContext mathContext0 = MathContext.DECIMAL32;
      int int0 = (-2037);
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false, mathContext0, (-2037));
      jexlArithmetic0.not(mathContext0);
      Boolean.logicalOr(true, false);
      String string0 = null;
      FileSystemHandling.shouldAllThrowIOExceptions();
      jexlArithmetic0.contains((Object) null, (Object) null);
      BigInteger bigInteger0 = BigInteger.ONE;
      Class<String> class0 = String.class;
      Number number0 = jexlArithmetic0.narrowNumber(bigInteger0, class0);
      jexlArithmetic0.controlNullOperand();
      Object object0 = jexlArithmetic0.bitwiseXor(number0, bigInteger0);
      short short0 = (short)1;
      jexlArithmetic0.greaterThanOrEqual(object0, (Object) null);
      Short short1 = new Short((short)1);
      Character character0 = new Character('Y');
      // Undeclared exception!
      try { 
        jexlArithmetic0.lessThanOrEqual(mathContext0, class0);
        fail(""Expecting exception: ArithmeticException"");
      } catch(ArithmeticException e) {
         //
         // Object comparison:(precision=7 roundingMode=HALF_EVEN <= class java.lang.String)
         //
         verifyException(""org.apache.commons.jexl3.JexlArithmetic"", e);
      }
  }"
884,"    public Object complement(final Object val) {
        final long l = toLong(val);
        return ~l;
    }","  public void test161()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      Character character0 = new Character('3');
      jexlArithmetic0.complement(character0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = BigInteger.ZERO;
      bigInteger0.andNot(bigInteger1);
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      jexlArithmetic0.roundBigDecimal(bigDecimal0);
      Class<Integer> class0 = Integer.class;
      jexlArithmetic0.narrowNumber(bigInteger0, class0);
      Object object0 = jexlArithmetic0.logicalNot((Object) null);
      jexlArithmetic0.complement(object0);
  }"
885,"    public int toInteger(final Object val) {
        if (val == null) {
            controlNullOperand();
            return 0;
        }
        if (val instanceof Double) {
            final Double dval = (Double) val;
            if (Double.isNaN(dval)) {
                return 0;
            }
            return dval.intValue();
        }
        if (val instanceof Number) {
            return ((Number) val).intValue();
        }
        if (val instanceof String) {
            if ("""".equals(val)) {
                return 0;
            }
            return Integer.parseInt((String) val);
        }
        if (val instanceof Boolean) {
            return ((Boolean) val) ? 1 : 0;
        }
        if (val instanceof AtomicBoolean) {
            return ((AtomicBoolean) val).get() ? 1 : 0;
        }
        if (val instanceof Character) {
            return ((Character) val);
        }

        throw new ArithmeticException(""Integer coercion: ""
                + val.getClass().getName() + "":("" + val + "")"");
    }","  public void test162()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true);
      MathContext mathContext0 = new MathContext(0);
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.createWithOptions(true, mathContext0, 1602);
      JexlArithmetic jexlArithmetic2 = jexlArithmetic0.createWithOptions(true, mathContext0, 0);
      jexlArithmetic2.toBoolean(mathContext0);
      JexlOptions jexlOptions0 = new JexlOptions();
      String[] stringArray0 = new String[5];
      stringArray0[0] = ""_Y6};D"";
      stringArray0[1] = ""-Q<S(c0j.&U,m}A"";
      stringArray0[2] = ""I 9HK+Yv*PK7("";
      stringArray0[3] = ""]: '"";
      stringArray0[4] = ""annotation"";
      jexlOptions0.setFlags(stringArray0);
      JexlArithmetic jexlArithmetic3 = jexlArithmetic2.options(jexlOptions0);
      Class<Long> class0 = Long.class;
      jexlArithmetic3.narrowAccept(class0, class0);
      jexlArithmetic2.size((Object) class0);
      // Undeclared exception!
      try { 
        jexlArithmetic1.toInteger(""2ny"");
        fail(""Expecting exception: NumberFormatException"");
      } catch(NumberFormatException e) {
         //
         // For input string: \""2ny\""
         //
         verifyException(""java.lang.NumberFormatException"", e);
      }
  }"
886,"    protected Number asLongNumber(final Object value) {
        return value instanceof Long
                || value instanceof Integer
                || value instanceof Short
                || value instanceof Byte
                        ? (Number) value
                        : null;
    }","  public void test163()  throws Throwable  {
      MathContext mathContext0 = new MathContext(1);
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false, mathContext0, 1);
      jexlArithmetic0.greaterThan(mathContext0, ""Iyyw!VUTf`4)!P6Ts<"");
      MathContext mathContext1 = MathContext.DECIMAL64;
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.createWithOptions(false, mathContext1, 1);
      Integer integer0 = jexlArithmetic1.size((Object) mathContext0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) mathContext1;
      objectArray0[1] = (Object) mathContext0;
      objectArray0[2] = (Object) jexlArithmetic1;
      objectArray0[3] = (Object) mathContext0;
      jexlArithmetic1.negate(integer0);
      jexlArithmetic1.narrowArguments(objectArray0);
      Boolean boolean0 = Boolean.valueOf(true);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      jexlArithmetic0.startsWith(boolean0, mathContext1);
      Pattern pattern0 = JexlArithmetic.FLOAT_PATTERN;
      jexlArithmetic1.equals((Object) pattern0, (Object) null);
      Boolean boolean1 = Boolean.TRUE;
      jexlArithmetic1.asLongNumber(boolean1);
  }"
887,"    public Object subtract(final Object left, final Object right) {
        if (left == null && right == null) {
            return controlNullNullOperands();
        }
        // if both (non null) args fit as long
        final Number ln = asLongNumber(left);
        final Number rn = asLongNumber(right);
        if (ln != null && rn != null) {
            final long x = ln.longValue();
            final long y = rn.longValue();
            final long result = x - y;
            // detect overflow, see java8 Math.subtractExact
            if (((x ^ y) & (x ^ result)) < 0) {
                return BigInteger.valueOf(x).subtract(BigInteger.valueOf(y));
            }
            return narrowLong(left, right, result);
        }
        // if either are bigdecimal use that type
        if (left instanceof BigDecimal || right instanceof BigDecimal) {
            final BigDecimal l = toBigDecimal(left);
            final BigDecimal r = toBigDecimal(right);
            final BigDecimal result = l.subtract(r, getMathContext());
            return narrowBigDecimal(left, right, result);
        }
        // if either are floating point (double or float) use double
        if (isFloatingPointNumber(left) || isFloatingPointNumber(right)) {
            final double l = toDouble(left);
            final double r = toDouble(right);
            return l - r;
        }
        // otherwise treat as integers
        final BigInteger l = toBigInteger(left);
        final BigInteger r = toBigInteger(right);
        final BigInteger result = l.subtract(r);
        return narrowBigInteger(left, right, result);
    }","  public void test164()  throws Throwable  {
      MathContext mathContext0 = MathContext.DECIMAL64;
      Boolean boolean0 = Boolean.FALSE;
      mathContext0.equals(boolean0);
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false, mathContext0, 2147483629);
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.createWithOptions(false, mathContext0, 2147483629);
      BigDecimal bigDecimal0 = new BigDecimal((long) 2147483629);
      bigDecimal0.toPlainString();
      jexlArithmetic1.narrowBigDecimal((Object) null, mathContext0, bigDecimal0);
      Pattern pattern0 = JexlArithmetic.FLOAT_PATTERN;
      pattern0.split((CharSequence) ""2147483629"");
      Double double0 = new Double(1.0);
      Double double1 = new Double(1.0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ""2147483629"");
      jexlArithmetic1.narrowLong(pattern0, double0, 16380L);
      jexlArithmetic1.toString((Object) pattern0);
      Double double2 = new Double(1038.679142239);
      Object object0 = jexlArithmetic0.subtract((Object) null, double2);
      Object object1 = jexlArithmetic0.logicalNot((Object) null);
      Double double3 = new Double(0.0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      jexlArithmetic0.empty(double3);
      Object object2 = jexlArithmetic0.subtract(object1, object0);
      jexlArithmetic1.add(object2, boolean0);
      Long long0 = new Long((-3087L));
      // Undeclared exception!
      try { 
        jexlArithmetic1.subtract(bigDecimal0, long0);
        fail(""Expecting exception: ArithmeticException"");
      } catch(ArithmeticException e) {
         //
         // BigInteger would overflow supported range
         //
         verifyException(""java.math.BigInteger"", e);
      }
  }"
888,"    public MathContext getMathContext() {
        return mathContext;
    }","  public void test165()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.createWithOptions(false, (MathContext) null, (-2776));
      JexlEngine.getThreadContext();
      JexlArithmetic jexlArithmetic2 = jexlArithmetic1.options((JexlContext) null);
      Integer integer0 = new Integer(7);
      Double double0 = new Double(0.0);
      jexlArithmetic2.lessThanOrEqual(double0, double0);
      jexlArithmetic1.divide((Object) null, (Object) null);
      jexlArithmetic2.getMathContext();
  }"
889,"    public Object mod(final Object left, final Object right) {
        if (left == null && right == null) {
            return controlNullNullOperands();
        }
        // if both (non null) args fit as long
        final Number ln = asLongNumber(left);
        final Number rn = asLongNumber(right);
        if (ln != null && rn != null) {
            final long x = ln.longValue();
            final long y = rn.longValue();
            if (y == 0L) {
                throw new ArithmeticException(""%"");
            }
            final long result = x % y;
            return narrowLong(left, right,  result);
        }
        // if either are bigdecimal use that type
        if (left instanceof BigDecimal || right instanceof BigDecimal) {
            final BigDecimal l = toBigDecimal(left);
            final BigDecimal r = toBigDecimal(right);
            if (BigDecimal.ZERO.equals(r)) {
                throw new ArithmeticException(""%"");
            }
            final BigDecimal remainder = l.remainder(r, getMathContext());
            return narrowBigDecimal(left, right, remainder);
        }
        // if either are floating point (double or float) use double
        if (isFloatingPointNumber(left) || isFloatingPointNumber(right)) {
            final double l = toDouble(left);
            final double r = toDouble(right);
            if (r == 0.0) {
                throw new ArithmeticException(""%"");
            }
            return l % r;
        }
        // otherwise treat as integers
        final BigInteger l = toBigInteger(left);
        final BigInteger r = toBigInteger(right);
        if (BigInteger.ZERO.equals(r)) {
            throw new ArithmeticException(""%"");
        }
        final BigInteger result = l.mod(r);
        return narrowBigInteger(left, right, result);
    }","  public void test166()  throws Throwable  {
      Float.min(1.0F, 1.0F);
      int int0 = 27;
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      JexlOptions jexlOptions0 = new JexlOptions();
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.options(jexlOptions0);
      MathContext mathContext0 = MathContext.UNLIMITED;
      jexlArithmetic1.createWithOptions(false, mathContext0, 0);
      char[] charArray0 = new char[3];
      char char0 = 'y';
      Byte byte0 = new Byte((byte)19);
      // Undeclared exception!
      try { 
        jexlArithmetic0.mod(""selfXor"", byte0);
        fail(""Expecting exception: NumberFormatException"");
      } catch(NumberFormatException e) {
         //
         // For input string: \""selfXor\""
         //
         verifyException(""java.lang.NumberFormatException"", e);
      }
  }"
890,"    protected boolean isNumberable(final Object o) {
        return o instanceof Integer
                || o instanceof Long
                || o instanceof Byte
                || o instanceof Short
                || o instanceof Character;
    }","  public void test167()  throws Throwable  {
      Float float0 = new Float((-3767.0593F));
      Long long0 = new Long((-2172L));
      Long.remainderUnsigned((-2172L), (-2172L));
      MathContext mathContext0 = MathContext.DECIMAL32;
      mathContext0.toString();
      Float.min(1.0F, 1.0F);
      Pattern.compile(""selfXor"", (-1078));
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true);
      JexlOptions jexlOptions0 = new JexlOptions();
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.options(jexlOptions0);
      JexlEngine.EmptyContext jexlEngine_EmptyContext0 = (JexlEngine.EmptyContext)JexlEngine.EMPTY_CONTEXT;
      JexlArithmetic jexlArithmetic2 = jexlArithmetic1.options((JexlContext) jexlEngine_EmptyContext0);
      JexlArithmetic jexlArithmetic3 = jexlArithmetic2.createWithOptions(false, mathContext0, 1829);
      Long long1 = new Long(16);
      Long.getLong(""java\u0000lang\u0000String@0000000005"", (long) 0);
      jexlArithmetic3.isNumberable(long1);
  }"
891,"    public Object divide(final Object left, final Object right) {
        if (left == null && right == null) {
            return controlNullNullOperands();
        }
        // if both (non null) args fit as long
        final Number ln = asLongNumber(left);
        final Number rn = asLongNumber(right);
        if (ln != null && rn != null) {
            final long x = ln.longValue();
            final long y = rn.longValue();
            if (y == 0L) {
                throw new ArithmeticException(""/"");
            }
            final long result = x  / y;
            return narrowLong(left, right, result);
        }
        // if either are bigdecimal use that type
        if (left instanceof BigDecimal || right instanceof BigDecimal) {
            final BigDecimal l = toBigDecimal(left);
            final BigDecimal r = toBigDecimal(right);
            if (BigDecimal.ZERO.equals(r)) {
                throw new ArithmeticException(""/"");
            }
            final BigDecimal result = l.divide(r, getMathContext());
            return narrowBigDecimal(left, right, result);
        }
        // if either are floating point (double or float) use double
        if (isFloatingPointNumber(left) || isFloatingPointNumber(right)) {
            final double l = toDouble(left);
            final double r = toDouble(right);
            if (r == 0.0) {
                throw new ArithmeticException(""/"");
            }
            return l / r;
        }
        // otherwise treat as integers
        final BigInteger l = toBigInteger(left);
        final BigInteger r = toBigInteger(right);
        if (BigInteger.ZERO.equals(r)) {
            throw new ArithmeticException(""/"");
        }
        final BigInteger result = l.divide(r);
        return narrowBigInteger(left, right, result);
    }","  public void test168()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      jexlArithmetic0.equals((Object) null, (Object) null);
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.createWithOptions(false, (MathContext) null, (-2776));
      JexlEngine.getThreadContext();
      JexlArithmetic jexlArithmetic2 = jexlArithmetic1.options((JexlContext) null);
      Character character0 = Character.valueOf('y');
      Integer integer0 = new Integer(31);
      jexlArithmetic2.mod(character0, integer0);
      Integer integer1 = new Integer(7);
      jexlArithmetic2.divide((Object) null, integer1);
  }"
892,"    public final Object bitwiseAnd(final Object lhs, final Object rhs) {
        return and(lhs, rhs);
    }","  public void test169()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      Float float0 = new Float((-3767.0593F));
      Long long0 = new Long((-2172L));
      Long.remainderUnsigned((-2172L), (-2172L));
      jexlArithmetic0.lessThan(float0, long0);
      MathContext mathContext0 = MathContext.DECIMAL32;
      mathContext0.toString();
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.createWithOptions(false, mathContext0, 16);
      Object object0 = jexlArithmetic0.not(mathContext0);
      jexlArithmetic1.toInteger(object0);
      Float.min(1.0F, 0.0F);
      jexlArithmetic0.toInteger(float0);
      jexlArithmetic0.toString((Object) null);
      jexlArithmetic0.mapBuilder(0);
      jexlArithmetic0.logicalNot((Object) null);
      Pattern pattern0 = Pattern.compile(""selfXor"", (-1078));
      jexlArithmetic1.empty((Object) null);
      jexlArithmetic0.greaterThanOrEqual(""precision=7 roundingMode=HALF_EVEN"", ""selfXor"");
      // Undeclared exception!
      try { 
        jexlArithmetic0.bitwiseAnd(pattern0, ""selfXor"");
        fail(""Expecting exception: ArithmeticException"");
      } catch(ArithmeticException e) {
         //
         // Long coercion: java.util.regex.Pattern:(selfXor)
         //
         verifyException(""org.apache.commons.jexl3.JexlArithmetic"", e);
      }
  }"
893,"    public int toInteger(final Object val) {
        if (val == null) {
            controlNullOperand();
            return 0;
        }
        if (val instanceof Double) {
            final Double dval = (Double) val;
            if (Double.isNaN(dval)) {
                return 0;
            }
            return dval.intValue();
        }
        if (val instanceof Number) {
            return ((Number) val).intValue();
        }
        if (val instanceof String) {
            if ("""".equals(val)) {
                return 0;
            }
            return Integer.parseInt((String) val);
        }
        if (val instanceof Boolean) {
            return ((Boolean) val) ? 1 : 0;
        }
        if (val instanceof AtomicBoolean) {
            return ((AtomicBoolean) val).get() ? 1 : 0;
        }
        if (val instanceof Character) {
            return ((Character) val);
        }

        throw new ArithmeticException(""Integer coercion: ""
                + val.getClass().getName() + "":("" + val + "")"");
    }","  public void test170()  throws Throwable  {
      MathContext mathContext0 = MathContext.DECIMAL64;
      Boolean boolean0 = Boolean.FALSE;
      mathContext0.equals(boolean0);
      BigDecimal bigDecimal0 = new BigDecimal(Integer.MIN_VALUE);
      bigDecimal0.toPlainString();
      Pattern pattern0 = JexlArithmetic.FLOAT_PATTERN;
      pattern0.split((CharSequence) ""-2147483648"");
      Double double0 = new Double(1.0);
      Double double1 = new Double(1.0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ""-2147483648"");
      Double double2 = new Double(1038.679142239);
      Double double3 = new Double(0.0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      Long long0 = new Long((-3087L));
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      jexlArithmetic0.toInteger(double3);
      Short short0 = new Short((short)2);
      Float float0 = new Float(0.0F);
      BigDecimal bigDecimal1 = null;
      try {
        bigDecimal1 = new BigDecimal((BigInteger) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.math.BigDecimal"", e);
      }
  }"
894,"    public Object divide(final Object left, final Object right) {
        if (left == null && right == null) {
            return controlNullNullOperands();
        }
        // if both (non null) args fit as long
        final Number ln = asLongNumber(left);
        final Number rn = asLongNumber(right);
        if (ln != null && rn != null) {
            final long x = ln.longValue();
            final long y = rn.longValue();
            if (y == 0L) {
                throw new ArithmeticException(""/"");
            }
            final long result = x  / y;
            return narrowLong(left, right, result);
        }
        // if either are bigdecimal use that type
        if (left instanceof BigDecimal || right instanceof BigDecimal) {
            final BigDecimal l = toBigDecimal(left);
            final BigDecimal r = toBigDecimal(right);
            if (BigDecimal.ZERO.equals(r)) {
                throw new ArithmeticException(""/"");
            }
            final BigDecimal result = l.divide(r, getMathContext());
            return narrowBigDecimal(left, right, result);
        }
        // if either are floating point (double or float) use double
        if (isFloatingPointNumber(left) || isFloatingPointNumber(right)) {
            final double l = toDouble(left);
            final double r = toDouble(right);
            if (r == 0.0) {
                throw new ArithmeticException(""/"");
            }
            return l / r;
        }
        // otherwise treat as integers
        final BigInteger l = toBigInteger(left);
        final BigInteger r = toBigInteger(right);
        if (BigInteger.ZERO.equals(r)) {
            throw new ArithmeticException(""/"");
        }
        final BigInteger result = l.divide(r);
        return narrowBigInteger(left, right, result);
    }","  public void test171()  throws Throwable  {
      JexlEngine.getThreadContext();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "">="");
      Long.getLong("">="", 2245L);
      BigInteger bigInteger0 = BigInteger.TEN;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-74);
      byteArray0[1] = (byte)106;
      byteArray0[2] = (byte) (-67);
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)13;
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      BigInteger bigInteger2 = JexlArithmetic.BIGI_LONG_MAX_VALUE;
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      bigDecimal0.doubleValue();
      Double double0 = new Double((byte) (-67));
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      Class<BigInteger> class0 = BigInteger.class;
      Number number0 = jexlArithmetic0.narrowNumber(double0, class0);
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "">="");
      // Undeclared exception!
      try { 
        jexlArithmetic0.divide(number0, charBuffer0);
        fail(""Expecting exception: ArithmeticException"");
      } catch(ArithmeticException e) {
         //
         // Double coercion: java.nio.StringCharBuffer:(>=)
         //
         verifyException(""org.apache.commons.jexl3.JexlArithmetic"", e);
      }
  }"
895,"    protected BigDecimal roundBigDecimal(final BigDecimal number) {
        final int mscale = getMathScale();
        if (mscale >= 0) {
            return number.setScale(mscale, getMathContext().getRoundingMode());
        }
        return number;
    }","  public void test172()  throws Throwable  {
      MathContext mathContext0 = MathContext.DECIMAL64;
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false, mathContext0, 1029);
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.options((JexlContext) null);
      Byte byte0 = new Byte((byte)0);
      jexlArithmetic0.toLong(byte0);
      jexlArithmetic1.arrayBuilder(4377);
      jexlArithmetic1.matches(jexlArithmetic0, jexlArithmetic0);
      Float float0 = new Float((float) 4377);
      jexlArithmetic0.isFloatingPoint(float0);
      jexlArithmetic1.arrayBuilder(832);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      bigDecimal0.toPlainString();
      jexlArithmetic1.roundBigDecimal(bigDecimal0);
  }"
896,"    public Object subtract(final Object left, final Object right) {
        if (left == null && right == null) {
            return controlNullNullOperands();
        }
        // if both (non null) args fit as long
        final Number ln = asLongNumber(left);
        final Number rn = asLongNumber(right);
        if (ln != null && rn != null) {
            final long x = ln.longValue();
            final long y = rn.longValue();
            final long result = x - y;
            // detect overflow, see java8 Math.subtractExact
            if (((x ^ y) & (x ^ result)) < 0) {
                return BigInteger.valueOf(x).subtract(BigInteger.valueOf(y));
            }
            return narrowLong(left, right, result);
        }
        // if either are bigdecimal use that type
        if (left instanceof BigDecimal || right instanceof BigDecimal) {
            final BigDecimal l = toBigDecimal(left);
            final BigDecimal r = toBigDecimal(right);
            final BigDecimal result = l.subtract(r, getMathContext());
            return narrowBigDecimal(left, right, result);
        }
        // if either are floating point (double or float) use double
        if (isFloatingPointNumber(left) || isFloatingPointNumber(right)) {
            final double l = toDouble(left);
            final double r = toDouble(right);
            return l - r;
        }
        // otherwise treat as integers
        final BigInteger l = toBigInteger(left);
        final BigInteger r = toBigInteger(right);
        final BigInteger result = l.subtract(r);
        return narrowBigInteger(left, right, result);
    }","  public void test173()  throws Throwable  {
      MathContext mathContext0 = MathContext.DECIMAL64;
      Boolean boolean0 = Boolean.FALSE;
      mathContext0.equals(boolean0);
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false, mathContext0, Integer.MIN_VALUE);
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.createWithOptions(false, mathContext0, Integer.MIN_VALUE);
      BigDecimal bigDecimal0 = new BigDecimal((long) Integer.MIN_VALUE);
      bigDecimal0.toPlainString();
      jexlArithmetic1.narrowBigDecimal((Object) null, mathContext0, bigDecimal0);
      Pattern pattern0 = JexlArithmetic.FLOAT_PATTERN;
      pattern0.split((CharSequence) ""-2147483648"");
      Double double0 = new Double(1.0);
      Double double1 = new Double(1.0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ""-2147483648"");
      jexlArithmetic1.narrowLong(pattern0, double0, 16380L);
      jexlArithmetic1.toString((Object) pattern0);
      Double double2 = new Double(1038.679142239);
      Object object0 = jexlArithmetic0.subtract((Object) null, double2);
      Object object1 = jexlArithmetic0.logicalNot((Object) null);
      Double double3 = new Double((-50.66763654472134));
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      jexlArithmetic0.empty(double3);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Object object2 = jexlArithmetic0.subtract(object1, object0);
      jexlArithmetic1.add(object2, boolean0);
      Long long0 = new Long((-3087L));
      Double double4 = new Double((-3870.0));
      Short short0 = new Short((short)2);
      jexlArithmetic1.multiply(double4, short0);
      // Undeclared exception!
      try { 
        jexlArithmetic1.subtract(bigDecimal0, long0);
        fail(""Expecting exception: NumberFormatException"");
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.math.BigDecimal"", e);
      }
  }"
897,"    public Boolean contains(final Object container, final Object value) {
        if (value == null && container == null) {
            //if both are null L == R
            return true;
        }
        if (value == null || container == null) {
            // we know both aren't null, therefore L != R
            return false;
        }
        // use arithmetic / pattern matching ?
        if (container instanceof java.util.regex.Pattern) {
            return ((java.util.regex.Pattern) container).matcher(value.toString()).matches();
        }
        if (container instanceof CharSequence) {
            return value.toString().matches(container.toString());
        }
        // try contains on map key
        if (container instanceof Map<?, ?>) {
            if (value instanceof Map<?, ?>) {
                return ((Map<?, ?>) container).keySet().containsAll(((Map<?, ?>) value).keySet());
            }
            return ((Map<?, ?>) container).containsKey(value);
        }
        // try contains on collection
        if (container instanceof Collection<?>) {
            if (value instanceof Collection<?>) {
                return ((Collection<?>) container).containsAll((Collection<?>) value);
            }
            // left in right ? <=> right.contains(left) ?
            return ((Collection<?>) container).contains(value);
        }
        return null;
    }","  public void test174()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true);
      MathContext mathContext0 = new MathContext(0);
      jexlArithmetic0.createWithOptions(true, mathContext0, 1602);
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.createWithOptions(true, mathContext0, 0);
      jexlArithmetic1.toBoolean(mathContext0);
      JexlOptions jexlOptions0 = new JexlOptions();
      String[] stringArray0 = new String[5];
      stringArray0[0] = ""_Y6};D"";
      stringArray0[1] = ""-Q<S(c0j.&U,m}A"";
      stringArray0[2] = ""I 9HK+Yv*PK7("";
      stringArray0[3] = ""]: '"";
      stringArray0[4] = ""annotation"";
      jexlOptions0.setFlags(stringArray0);
      JexlArithmetic jexlArithmetic2 = jexlArithmetic1.options(jexlOptions0);
      Float float0 = new Float((double) 0);
      jexlArithmetic2.isFloatingPointNumber(float0);
      Class<Long> class0 = Long.class;
      jexlArithmetic2.narrowAccept(class0, class0);
      jexlArithmetic1.size((Object) class0);
      Byte byte0 = new Byte((byte) (-121));
      jexlArithmetic1.startsWith(byte0, ""-Q<S(c0j.&U,m}A"");
      Character character0 = new Character('?');
      jexlArithmetic2.contains(character0, (Object) null);
  }"
898,"    public BigInteger toBigInteger(final Object val) {
        if (val == null) {
            controlNullOperand();
            return BigInteger.ZERO;
        }
        if (val instanceof BigInteger) {
            return (BigInteger) val;
        }
        if (val instanceof Double) {
            final Double dval = (Double) val;
            if (Double.isNaN(dval)) {
                return BigInteger.ZERO;
            }
            return BigInteger.valueOf(dval.longValue());
        }
        if (val instanceof BigDecimal) {
            return ((BigDecimal) val).toBigInteger();
        }
        if (val instanceof Number) {
            return BigInteger.valueOf(((Number) val).longValue());
        }
        if (val instanceof Boolean) {
            return BigInteger.valueOf(((Boolean) val) ? 1L : 0L);
        }
        if (val instanceof AtomicBoolean) {
            return BigInteger.valueOf(((AtomicBoolean) val).get() ? 1L : 0L);
        }
        if (val instanceof String) {
            final String string = (String) val;
            if ("""".equals(string)) {
                return BigInteger.ZERO;
            }
            return new BigInteger(string);
        }
        if (val instanceof Character) {
            final int i = ((Character) val);
            return BigInteger.valueOf(i);
        }

        throw new ArithmeticException(""BigInteger coercion: ""
                + val.getClass().getName() + "":("" + val + "")"");
    }","  public void test175()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      BigInteger bigInteger0 = BigInteger.ZERO;
      jexlArithmetic0.narrow(bigInteger0);
      Float float0 = new Float((-2368.8948));
      Object object0 = jexlArithmetic0.subtract(float0, (Object) null);
      AtomicBoolean atomicBoolean0 = new AtomicBoolean();
      atomicBoolean0.getAndSet(false);
      Object object1 = jexlArithmetic0.not(atomicBoolean0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Integer integer0 = new Integer((-45));
      jexlArithmetic0.toInteger(integer0);
      Integer.getInteger(""positivize"");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Integer.compareUnsigned((-45), (-45));
      jexlArithmetic0.logicalNot(float0);
      JexlArithmetic.isMultiplyExact((-32768L), (-1677L), (-1677L));
      jexlArithmetic0.toBigInteger(object1);
      jexlArithmetic0.isPositivizeStable();
      jexlArithmetic0.isNegateStable();
      jexlArithmetic0.toBigInteger(object0);
  }"
899,"    public final Object bitwiseAnd(final Object lhs, final Object rhs) {
        return and(lhs, rhs);
    }","  public void test176()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      Integer integer0 = new Integer(42);
      JexlEngine.getThreadEngine();
      Boolean boolean0 = Boolean.valueOf(true);
      ObjectContext<Boolean> objectContext0 = new ObjectContext<Boolean>((JexlEngine) null, boolean0);
      jexlArithmetic0.options((JexlContext) objectContext0);
      Byte byte0 = new Byte((byte) (-60));
      Object object0 = jexlArithmetic0.multiply(integer0, byte0);
      jexlArithmetic0.bitwiseAnd(byte0, object0);
  }"
900,"    public BigInteger toBigInteger(final Object val) {
        if (val == null) {
            controlNullOperand();
            return BigInteger.ZERO;
        }
        if (val instanceof BigInteger) {
            return (BigInteger) val;
        }
        if (val instanceof Double) {
            final Double dval = (Double) val;
            if (Double.isNaN(dval)) {
                return BigInteger.ZERO;
            }
            return BigInteger.valueOf(dval.longValue());
        }
        if (val instanceof BigDecimal) {
            return ((BigDecimal) val).toBigInteger();
        }
        if (val instanceof Number) {
            return BigInteger.valueOf(((Number) val).longValue());
        }
        if (val instanceof Boolean) {
            return BigInteger.valueOf(((Boolean) val) ? 1L : 0L);
        }
        if (val instanceof AtomicBoolean) {
            return BigInteger.valueOf(((AtomicBoolean) val).get() ? 1L : 0L);
        }
        if (val instanceof String) {
            final String string = (String) val;
            if ("""".equals(string)) {
                return BigInteger.ZERO;
            }
            return new BigInteger(string);
        }
        if (val instanceof Character) {
            final int i = ((Character) val);
            return BigInteger.valueOf(i);
        }

        throw new ArithmeticException(""BigInteger coercion: ""
                + val.getClass().getName() + "":("" + val + "")"");
    }","  public void test177()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true);
      MathContext mathContext0 = new MathContext(0);
      jexlArithmetic0.createWithOptions(true, mathContext0, 1602);
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.createWithOptions(true, mathContext0, 0);
      jexlArithmetic1.toBoolean(mathContext0);
      JexlOptions jexlOptions0 = new JexlOptions();
      String[] stringArray0 = new String[5];
      stringArray0[0] = ""_Y6};D"";
      stringArray0[1] = ""-Q<S(c0j.&U,m}A"";
      stringArray0[2] = ""-Q<S(c0j.&U,m}A"";
      stringArray0[3] = ""]: '"";
      stringArray0[4] = ""annotation"";
      jexlOptions0.setFlags(stringArray0);
      JexlArithmetic jexlArithmetic2 = jexlArithmetic1.options(jexlOptions0);
      Class<Long> class0 = Long.class;
      Integer integer0 = new Integer(Integer.MIN_VALUE);
      Double double0 = new Double((-3173.0));
      jexlArithmetic1.compare(integer0, double0, (String) null);
      jexlArithmetic2.narrowAccept(class0, class0);
      jexlArithmetic1.size((Object) class0);
      MathContext mathContext1 = MathContext.DECIMAL64;
      jexlArithmetic2.matches(""annotation"", mathContext1);
      // Undeclared exception!
      try { 
        jexlArithmetic2.toBigInteger((Object) null);
        fail(""Expecting exception: ArithmeticException"");
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.JexlArithmetic"", e);
      }
  }"
901,"    public Boolean isEmpty(final Object object) {
        return isEmpty(object, object == null);
    }","  public void test178()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      Byte byte0 = new Byte((byte)2);
      BigDecimal bigDecimal0 = new BigDecimal((-4440));
      jexlArithmetic0.narrowBigDecimal(fileSystemHandling0, (Object) null, bigDecimal0);
      jexlArithmetic0.narrow(byte0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Character character0 = Character.valueOf('B');
      Object object0 = jexlArithmetic0.bitwiseAnd(character0, character0);
      Character.isIdeographic((byte)2);
      Short short0 = new Short((short)1972);
      jexlArithmetic0.mod(object0, short0);
      jexlArithmetic0.positivize(short0);
      Object object1 = jexlArithmetic0.controlNullNullOperands();
      Character.isIdeographic((byte)2);
      jexlArithmetic0.isEmpty(object1);
      Float float0 = new Float(1.0F);
      jexlArithmetic0.lessThanOrEqual(float0, character0);
      BigDecimal bigDecimal1 = BigDecimal.TEN;
      jexlArithmetic0.roundBigDecimal(bigDecimal1);
      Float float1 = new Float((double) (short)1972);
      jexlArithmetic0.negate(float1);
      AtomicBoolean atomicBoolean0 = new AtomicBoolean(true);
      jexlArithmetic0.and(object1, atomicBoolean0);
      JexlArithmetic.MapBuilder jexlArithmetic_MapBuilder0 = jexlArithmetic0.mapBuilder((short)1972);
      jexlArithmetic_MapBuilder0.create();
      jexlArithmetic0.isEmpty((Object) bigDecimal1);
  }"
902,"    public final Object bitwiseAnd(final Object lhs, final Object rhs) {
        return and(lhs, rhs);
    }","  public void test179()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      JexlEngine.getThreadContext();
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.options((JexlContext) null);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)12;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      JexlOptions jexlOptions0 = new JexlOptions();
      jexlOptions0.setSharedInstance(false);
      Character character0 = new Character('X');
      jexlArithmetic0.toDouble(character0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      JexlArithmetic jexlArithmetic2 = jexlArithmetic1.options(jexlOptions0);
      Character character1 = new Character('s');
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      jexlArithmetic0.narrowBigDecimal(character1, jexlOptions0, bigDecimal0);
      RoundingMode roundingMode0 = RoundingMode.CEILING;
      MathContext mathContext0 = new MathContext(21, roundingMode0);
      JexlArithmetic jexlArithmetic3 = new JexlArithmetic(true, mathContext0, (byte)12);
      Byte byte0 = new Byte((byte) (-60));
      Boolean boolean0 = jexlArithmetic3.isEmpty((Object) byte0);
      // Undeclared exception!
      try { 
        jexlArithmetic2.bitwiseAnd((Object) null, boolean0);
        fail(""Expecting exception: ArithmeticException"");
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.JexlArithmetic"", e);
      }
  }"
903,"    public Object subtract(final Object left, final Object right) {
        if (left == null && right == null) {
            return controlNullNullOperands();
        }
        // if both (non null) args fit as long
        final Number ln = asLongNumber(left);
        final Number rn = asLongNumber(right);
        if (ln != null && rn != null) {
            final long x = ln.longValue();
            final long y = rn.longValue();
            final long result = x - y;
            // detect overflow, see java8 Math.subtractExact
            if (((x ^ y) & (x ^ result)) < 0) {
                return BigInteger.valueOf(x).subtract(BigInteger.valueOf(y));
            }
            return narrowLong(left, right, result);
        }
        // if either are bigdecimal use that type
        if (left instanceof BigDecimal || right instanceof BigDecimal) {
            final BigDecimal l = toBigDecimal(left);
            final BigDecimal r = toBigDecimal(right);
            final BigDecimal result = l.subtract(r, getMathContext());
            return narrowBigDecimal(left, right, result);
        }
        // if either are floating point (double or float) use double
        if (isFloatingPointNumber(left) || isFloatingPointNumber(right)) {
            final double l = toDouble(left);
            final double r = toDouble(right);
            return l - r;
        }
        // otherwise treat as integers
        final BigInteger l = toBigInteger(left);
        final BigInteger r = toBigInteger(right);
        final BigInteger result = l.subtract(r);
        return narrowBigInteger(left, right, result);
    }","  public void test180()  throws Throwable  {
      MathContext mathContext0 = MathContext.DECIMAL64;
      Boolean boolean0 = Boolean.FALSE;
      mathContext0.equals(boolean0);
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false, (MathContext) null, Integer.MIN_VALUE);
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.createWithOptions(false, mathContext0, Integer.MIN_VALUE);
      BigDecimal bigDecimal0 = new BigDecimal((long) Integer.MIN_VALUE);
      bigDecimal0.toPlainString();
      Pattern pattern0 = JexlArithmetic.FLOAT_PATTERN;
      pattern0.split((CharSequence) ""-2147483648"");
      Double double0 = new Double(1.0);
      Double double1 = new Double(1.0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ""-2147483648"");
      Short short0 = new Short((short)2);
      Object object0 = jexlArithmetic1.logicalNot(short0);
      BigDecimal bigDecimal1 = jexlArithmetic0.toBigDecimal(object0);
      bigDecimal0.subtract(bigDecimal1);
      jexlArithmetic1.narrowLong(pattern0, double0, 16380L);
      Double double2 = new Double(1038.679142239);
      Object object1 = jexlArithmetic0.subtract((Object) null, double2);
      Object object2 = jexlArithmetic0.logicalNot((Object) null);
      Double double3 = new Double(0.0);
      jexlArithmetic0.empty(double3);
      jexlArithmetic0.subtract(object2, object1);
      Long long0 = new Long((-3087L));
      // Undeclared exception!
      try { 
        jexlArithmetic1.subtract(bigDecimal0, long0);
        fail(""Expecting exception: NumberFormatException"");
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.math.BigDecimal"", e);
      }
  }"
904,"    public Object complement(final Object val) {
        final long l = toLong(val);
        return ~l;
    }","  public void test181()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      Float float0 = new Float((-3767.0593F));
      Long long0 = new Long((-2172L));
      Long.max((-2172L), (-2172L));
      jexlArithmetic0.lessThan(float0, long0);
      MathContext mathContext0 = MathContext.DECIMAL32;
      mathContext0.getRoundingMode();
      mathContext0.toString();
      jexlArithmetic0.createWithOptions(false, mathContext0, 16);
      Float.min(1.0F, 0.0F);
      jexlArithmetic0.toInteger(float0);
      Long long1 = new Long(118L);
      Integer integer0 = new Integer(1073741824);
      jexlArithmetic0.size((Object) long1, integer0);
      jexlArithmetic0.toString((Object) null);
      jexlArithmetic0.mapBuilder(0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      jexlArithmetic0.logicalNot((Object) null);
      String string0 = ""selfXor"";
      int int0 = (-1078);
      // Undeclared exception!
      try { 
        jexlArithmetic0.complement(""selfXor"");
        fail(""Expecting exception: NumberFormatException"");
      } catch(NumberFormatException e) {
         //
         // For input string: \""selfXor\""
         //
         verifyException(""java.lang.NumberFormatException"", e);
      }
  }"
905,"    protected Number asLongNumber(final Object value) {
        return value instanceof Long
                || value instanceof Integer
                || value instanceof Short
                || value instanceof Byte
                        ? (Number) value
                        : null;
    }","  public void test182()  throws Throwable  {
      MathContext mathContext0 = new MathContext(1);
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false, mathContext0, 1);
      jexlArithmetic0.greaterThan(mathContext0, ""Iyyw!VUTf`4)!P6Ts<"");
      MathContext mathContext1 = MathContext.DECIMAL64;
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.createWithOptions(false, mathContext1, 1);
      jexlArithmetic1.size((Object) mathContext0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) mathContext1;
      objectArray0[1] = (Object) mathContext0;
      objectArray0[2] = (Object) jexlArithmetic1;
      objectArray0[3] = (Object) mathContext0;
      jexlArithmetic1.narrowArguments(objectArray0);
      Boolean boolean0 = Boolean.valueOf(false);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      jexlArithmetic0.startsWith(boolean0, mathContext1);
      Pattern pattern0 = JexlArithmetic.FLOAT_PATTERN;
      jexlArithmetic1.equals((Object) pattern0, (Object) null);
      Boolean boolean1 = Boolean.TRUE;
      jexlArithmetic1.asLongNumber(boolean1);
  }"
906,"    public BigInteger toBigInteger(final Object val) {
        if (val == null) {
            controlNullOperand();
            return BigInteger.ZERO;
        }
        if (val instanceof BigInteger) {
            return (BigInteger) val;
        }
        if (val instanceof Double) {
            final Double dval = (Double) val;
            if (Double.isNaN(dval)) {
                return BigInteger.ZERO;
            }
            return BigInteger.valueOf(dval.longValue());
        }
        if (val instanceof BigDecimal) {
            return ((BigDecimal) val).toBigInteger();
        }
        if (val instanceof Number) {
            return BigInteger.valueOf(((Number) val).longValue());
        }
        if (val instanceof Boolean) {
            return BigInteger.valueOf(((Boolean) val) ? 1L : 0L);
        }
        if (val instanceof AtomicBoolean) {
            return BigInteger.valueOf(((AtomicBoolean) val).get() ? 1L : 0L);
        }
        if (val instanceof String) {
            final String string = (String) val;
            if ("""".equals(string)) {
                return BigInteger.ZERO;
            }
            return new BigInteger(string);
        }
        if (val instanceof Character) {
            final int i = ((Character) val);
            return BigInteger.valueOf(i);
        }

        throw new ArithmeticException(""BigInteger coercion: ""
                + val.getClass().getName() + "":("" + val + "")"");
    }","  public void test183()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true);
      MathContext mathContext0 = new MathContext(0);
      jexlArithmetic0.createWithOptions(true, mathContext0, 1602);
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.createWithOptions(true, mathContext0, 0);
      jexlArithmetic1.toBoolean(mathContext0);
      JexlOptions jexlOptions0 = new JexlOptions();
      String[] stringArray0 = new String[5];
      stringArray0[0] = ""_Y6};D"";
      stringArray0[1] = ""-Q<S(c0j.&U,m}A"";
      stringArray0[2] = ""I 9HK+Yv*PK7("";
      stringArray0[3] = ""]: '"";
      stringArray0[4] = ""annotation"";
      JexlOptions.setDefaultFlags(stringArray0);
      jexlOptions0.setFlags(stringArray0);
      JexlArithmetic jexlArithmetic2 = jexlArithmetic1.options(jexlOptions0);
      Class<Long> class0 = Long.class;
      jexlArithmetic2.narrowAccept(class0, class0);
      jexlArithmetic1.size((Object) class0);
      // Undeclared exception!
      try { 
        jexlArithmetic1.toBigInteger(""I 9HK+Yv*PK7("");
        fail(""Expecting exception: NumberFormatException"");
      } catch(NumberFormatException e) {
         //
         // Illegal embedded sign character
         //
         verifyException(""java.math.BigInteger"", e);
      }
  }"
907,"    public Object and(final Object left, final Object right) {
        final long l = toLong(left);
        final long r = toLong(right);
        return l & r;
    }","  public void test184()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      MapContext mapContext0 = new MapContext(hashMap0);
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.options((JexlContext) mapContext0);
      MathContext mathContext0 = MathContext.DECIMAL128;
      JexlArithmetic jexlArithmetic2 = jexlArithmetic1.createWithOptions(true, mathContext0, 14);
      JexlOptions jexlOptions0 = new JexlOptions();
      JexlArithmetic jexlArithmetic3 = jexlArithmetic2.options(jexlOptions0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)118;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)4;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      Short short0 = new Short((short) (-11352));
      jexlArithmetic2.contains(bigInteger0, short0);
      Short short1 = new Short((short)4163);
      jexlArithmetic0.contains((Object) null, short1);
      Class<String> class0 = String.class;
      jexlArithmetic3.narrowNumber(bigDecimal0, class0);
      Character character0 = Character.valueOf('g');
      Long long0 = new Long((byte)3);
      jexlArithmetic0.and(character0, long0);
  }"
908,"    public Object multiply(final Object left, final Object right) {
        if (left == null && right == null) {
            return controlNullNullOperands();
        }
        // if both (non null) args fit as int
        final Number ln = asLongNumber(left);
        final Number rn = asLongNumber(right);
        if (ln != null && rn != null) {
            final long x = ln.longValue();
            final long y = rn.longValue();
            final long result = x * y;
            // detect overflow
            if (!isMultiplyExact(x, y, result)) {
                return BigInteger.valueOf(x).multiply(BigInteger.valueOf(y));
            }
            return narrowLong(left, right, result);
        }
        // if either are bigdecimal use that type
        if (left instanceof BigDecimal || right instanceof BigDecimal) {
            final BigDecimal l = toBigDecimal(left);
            final BigDecimal r = toBigDecimal(right);
            final BigDecimal result = l.multiply(r, getMathContext());
            return narrowBigDecimal(left, right, result);
        }
        // if either are floating point (double or float) use double
        if (isFloatingPointNumber(left) || isFloatingPointNumber(right)) {
            final double l = toDouble(left);
            final double r = toDouble(right);
            return l * r;
        }
        // otherwise treat as integers
        final BigInteger l = toBigInteger(left);
        final BigInteger r = toBigInteger(right);
        final BigInteger result = l.multiply(r);
        return narrowBigInteger(left, right, result);
    }","  public void test185()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      MathContext mathContext0 = null;
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.createWithOptions(false, (MathContext) null, (-2776));
      JexlEngine.getThreadContext();
      JexlArithmetic jexlArithmetic2 = jexlArithmetic1.options((JexlContext) null);
      Integer integer0 = new Integer(7);
      // Undeclared exception!
      try { 
        jexlArithmetic0.multiply((Object) null, jexlArithmetic2);
        fail(""Expecting exception: ArithmeticException"");
      } catch(ArithmeticException e) {
         //
         // BigInteger coercion: org.apache.commons.jexl3.JexlArithmetic:(org.apache.commons.jexl3.JexlArithmetic@2)
         //
         verifyException(""org.apache.commons.jexl3.JexlArithmetic"", e);
      }
  }"
909,"    public Object or(final Object left, final Object right) {
        final long l = toLong(left);
        final long r = toLong(right);
        return l | r;
    }","  public void test186()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true);
      MathContext mathContext0 = new MathContext(0);
      jexlArithmetic0.createWithOptions(true, mathContext0, 1602);
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.createWithOptions(true, mathContext0, 0);
      JexlOptions jexlOptions0 = new JexlOptions();
      String[] stringArray0 = new String[5];
      stringArray0[0] = ""_Y6};D"";
      stringArray0[1] = ""-Q<S(c0j.&U,m}A"";
      stringArray0[2] = ""I 9HK+Yv*PK7("";
      stringArray0[3] = ""]: '"";
      stringArray0[4] = ""annotation"";
      jexlOptions0.setFlags(stringArray0);
      JexlArithmetic jexlArithmetic2 = jexlArithmetic1.options(jexlOptions0);
      Integer integer0 = new Integer(0);
      // Undeclared exception!
      try { 
        jexlArithmetic2.or(""I 9HK+Yv*PK7("", integer0);
        fail(""Expecting exception: NumberFormatException"");
      } catch(NumberFormatException e) {
         //
         // For input string: \""I 9HK+Yv*PK7(\""
         //
         verifyException(""java.lang.NumberFormatException"", e);
      }
  }"
910,"    public double toDouble(final Object val) {
        if (val == null) {
            controlNullOperand();
            return 0;
        }
        if (val instanceof Double) {
            return ((Double) val);
        }
        if (val instanceof Number) {
            //The below construct is used rather than ((Number)val).doubleValue() to ensure
            //equality between comparing new Double( 6.4 / 3 ) and the jexl expression of 6.4 / 3
            return Double.parseDouble(String.valueOf(val));
        }
        if (val instanceof Boolean) {
            return ((Boolean) val) ? 1. : 0.;
        }
        if (val instanceof AtomicBoolean) {
            return ((AtomicBoolean) val).get() ? 1. : 0.;
        }
        if (val instanceof String) {
            final String string = (String) val;
            if ("""".equals(string)) {
                return Double.NaN;
            }
            // the spec seems to be iffy about this.  Going to give it a wack anyway
            return Double.parseDouble(string);
        }
        if (val instanceof Character) {
            final int i = ((Character) val);
            return i;
        }
        throw new ArithmeticException(""Double coercion: ""
                + val.getClass().getName() + "":("" + val + "")"");
    }","  public void test187()  throws Throwable  {
      RoundingMode roundingMode0 = RoundingMode.DOWN;
      MathContext mathContext0 = new MathContext(0, roundingMode0);
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false, mathContext0, (-1943));
      JexlOptions jexlOptions0 = new JexlOptions();
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.createWithOptions(false, mathContext0, 0);
      MathContext mathContext1 = new MathContext(0);
      jexlOptions0.copy();
      JexlArithmetic jexlArithmetic2 = jexlArithmetic1.createWithOptions(true, mathContext1, (-1943));
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      jexlArithmetic2.toBigDecimal(bigDecimal0);
      // Undeclared exception!
      try { 
        jexlArithmetic2.toDouble(roundingMode0);
        fail(""Expecting exception: ArithmeticException"");
      } catch(ArithmeticException e) {
         //
         // Double coercion: java.math.RoundingMode:(DOWN)
         //
         verifyException(""org.apache.commons.jexl3.JexlArithmetic"", e);
      }
  }"
911,"    public final Object bitwiseXor(final Object lhs, final Object rhs) {
        return xor(lhs, rhs);
    }","  public void test188()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true);
      MathContext mathContext0 = new MathContext(0);
      jexlArithmetic0.createWithOptions(true, mathContext0, 1602);
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.createWithOptions(true, mathContext0, 0);
      JexlOptions jexlOptions0 = new JexlOptions();
      String[] stringArray0 = new String[5];
      stringArray0[0] = ""_Y6};D"";
      stringArray0[1] = ""-Q<S(c0j.&U,m}A"";
      stringArray0[2] = ""I 9HK+Yv*PK7("";
      stringArray0[3] = ""]: '"";
      stringArray0[4] = ""annotation"";
      jexlOptions0.setFlags(stringArray0);
      JexlArithmetic jexlArithmetic2 = jexlArithmetic1.options(jexlOptions0);
      Class<Long> class0 = Long.class;
      BigInteger bigInteger0 = BigInteger.ONE;
      jexlArithmetic2.narrowBigInteger(bigInteger0, class0, (BigInteger) null);
      jexlArithmetic2.narrowAccept(class0, class0);
      // Undeclared exception!
      try { 
        jexlArithmetic2.bitwiseXor(""-Q<S(c0j.&U,m}A"", "">"");
        fail(""Expecting exception: NumberFormatException"");
      } catch(NumberFormatException e) {
         //
         // For input string: \""-Q<S(c0j.&U,m}A\""
         //
         verifyException(""java.lang.NumberFormatException"", e);
      }
  }"
912,"    protected boolean isFloatingPointNumber(final Object val) {
        if (val instanceof Float || val instanceof Double) {
            return true;
        }
        if (val instanceof CharSequence) {
            final Matcher m = FLOAT_PATTERN.matcher((CharSequence) val);
            // first group is decimal, second is exponent;
            // one of them must exist hence start({1,2}) >= 0
            return m.matches() && (m.start(1) >= 0 || m.start(2) >= 0);
        }
        return false;
    }","  public void test189()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true);
      MathContext mathContext0 = new MathContext(0);
      jexlArithmetic0.createWithOptions(true, mathContext0, 1602);
      JexlContext jexlContext0 = null;
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.createWithOptions(true, mathContext0, 0);
      JexlOptions jexlOptions0 = new JexlOptions();
      String[] stringArray0 = new String[5];
      stringArray0[0] = ""_Y6};D"";
      stringArray0[1] = ""-Q<S(c0j.&U,m}A"";
      stringArray0[2] = ""I 9HK+Yv*PK7("";
      stringArray0[3] = ""]: '"";
      stringArray0[4] = ""annotation"";
      jexlOptions0.setFlags(stringArray0);
      JexlArithmetic jexlArithmetic2 = jexlArithmetic1.options(jexlOptions0);
      Class<Long> class0 = Long.class;
      jexlArithmetic1.lessThan(""]: '"", ""]: '"");
      jexlArithmetic2.narrowAccept(class0, class0);
      jexlArithmetic2.isFloatingPointNumber(""_Y6};D"");
      try { 
        Byte.decode(""]: '"");
        fail(""Expecting exception: NumberFormatException"");
      } catch(NumberFormatException e) {
         //
         // For input string: \""]: '\""
         //
         verifyException(""java.lang.NumberFormatException"", e);
      }
  }"
913,"    public boolean lessThanOrEqual(final Object left, final Object right) {
        if (left == right) {
            return true;
        }
        if (left == null || right == null) {
            return false;
        }
        return compare(left, right, ""<="") <= 0;
    }","  public void test190()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true);
      AtomicBoolean atomicBoolean0 = new AtomicBoolean();
      atomicBoolean0.lazySet(true);
      Float float0 = new Float(955.4800367585);
      Float.min(0.0F, 0.0F);
      jexlArithmetic0.subtract(atomicBoolean0, float0);
      JexlOptions jexlOptions0 = new JexlOptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ""_,Xuagc;mlakk,<"");
      MathContext mathContext0 = MathContext.UNLIMITED;
      jexlOptions0.setMathContext(mathContext0);
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.options(jexlOptions0);
      Byte byte0 = new Byte((byte) (-41));
      BigInteger bigInteger0 = jexlArithmetic1.toBigInteger(byte0);
      Byte.toUnsignedInt((byte)88);
      Integer integer0 = new Integer((byte) (-41));
      jexlArithmetic0.toInteger(integer0);
      jexlArithmetic1.toBigInteger(bigInteger0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-41);
      byteArray0[1] = (byte) (-41);
      byteArray0[2] = (byte) (-41);
      byteArray0[3] = (byte) (-75);
      byteArray0[4] = (byte)88;
      byteArray0[5] = (byte)88;
      byteArray0[6] = (byte) (-41);
      BigInteger bigInteger1 = BigInteger.TEN;
      // Undeclared exception!
      try { 
        jexlArithmetic0.lessThanOrEqual(""precision=7 roundingMode=HALF_EVEN"", bigInteger1);
        fail(""Expecting exception: NumberFormatException"");
      } catch(NumberFormatException e) {
         //
         // For input string: \""precisi\""
         //
         verifyException(""java.lang.NumberFormatException"", e);
      }
  }"
914,"    public Object or(final Object left, final Object right) {
        final long l = toLong(left);
        final long r = toLong(right);
        return l | r;
    }","  public void test191()  throws Throwable  {
      boolean boolean0 = true;
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true);
      JexlOptions jexlOptions0 = new JexlOptions();
      MathContext mathContext0 = MathContext.UNLIMITED;
      jexlOptions0.setMathContext(mathContext0);
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.options(jexlOptions0);
      JexlOptions jexlOptions1 = new JexlOptions();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      jexlArithmetic1.options(jexlOptions1);
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      jexlArithmetic0.not(jexlOptions0);
      // Undeclared exception!
      try { 
        jexlArithmetic1.or(jexlArithmetic0, (Object) null);
        fail(""Expecting exception: ArithmeticException"");
      } catch(ArithmeticException e) {
         //
         // Long coercion: org.apache.commons.jexl3.JexlArithmetic:(org.apache.commons.jexl3.JexlArithmetic@1)
         //
         verifyException(""org.apache.commons.jexl3.JexlArithmetic"", e);
      }
  }"
915,"    protected Object controlNullNullOperands() {
        if (isStrict()) {
            throw new NullOperand();
        }
        return 0;
    }","  public void test192()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true);
      byte byte0 = (byte)2;
      Byte byte1 = new Byte((byte)2);
      BigDecimal bigDecimal0 = new BigDecimal((-4440));
      jexlArithmetic0.narrowBigDecimal(fileSystemHandling0, (Object) null, bigDecimal0);
      jexlArithmetic0.narrow(byte1);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Character character0 = Character.valueOf('B');
      Object object0 = jexlArithmetic0.bitwiseAnd(character0, character0);
      short short0 = (short)1972;
      Character.isIdeographic((byte)2);
      Short short1 = new Short((short)1972);
      jexlArithmetic0.mod(object0, short1);
      jexlArithmetic0.positivize(short1);
      // Undeclared exception!
      try { 
        jexlArithmetic0.controlNullNullOperands();
        fail(""Expecting exception: ArithmeticException"");
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.JexlArithmetic"", e);
      }
  }"
916,"    public Boolean contains(final Object container, final Object value) {
        if (value == null && container == null) {
            //if both are null L == R
            return true;
        }
        if (value == null || container == null) {
            // we know both aren't null, therefore L != R
            return false;
        }
        // use arithmetic / pattern matching ?
        if (container instanceof java.util.regex.Pattern) {
            return ((java.util.regex.Pattern) container).matcher(value.toString()).matches();
        }
        if (container instanceof CharSequence) {
            return value.toString().matches(container.toString());
        }
        // try contains on map key
        if (container instanceof Map<?, ?>) {
            if (value instanceof Map<?, ?>) {
                return ((Map<?, ?>) container).keySet().containsAll(((Map<?, ?>) value).keySet());
            }
            return ((Map<?, ?>) container).containsKey(value);
        }
        // try contains on collection
        if (container instanceof Collection<?>) {
            if (value instanceof Collection<?>) {
                return ((Collection<?>) container).containsAll((Collection<?>) value);
            }
            // left in right ? <=> right.contains(left) ?
            return ((Collection<?>) container).contains(value);
        }
        return null;
    }","  public void test193()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      JexlEngine.getThreadContext();
      jexlArithmetic0.toLong((Object) null);
      Integer integer0 = new Integer(7);
      Float float0 = new Float((double) 7);
      jexlArithmetic0.contains((Object) null, float0);
  }"
917,"    public final Object bitwiseAnd(final Object lhs, final Object rhs) {
        return and(lhs, rhs);
    }","  public void test194()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      Float float0 = new Float((-3767.0593F));
      Float.min(1.0F, 0.0F);
      jexlArithmetic0.toInteger(float0);
      jexlArithmetic0.toString((Object) null);
      jexlArithmetic0.mapBuilder(0);
      Object object0 = jexlArithmetic0.bitwiseAnd((Object) null, (Object) null);
      jexlArithmetic0.logicalNot((Object) null);
      jexlArithmetic0.options((JexlOptions) null);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      jexlArithmetic0.narrowBigDecimal((Object) null, object0, bigDecimal0);
      Pattern pattern0 = Pattern.compile(""selfXor"", (-1078));
      // Undeclared exception!
      try { 
        jexlArithmetic0.bitwiseAnd(pattern0, ""selfXor"");
        fail(""Expecting exception: ArithmeticException"");
      } catch(ArithmeticException e) {
         //
         // Long coercion: java.util.regex.Pattern:(selfXor)
         //
         verifyException(""org.apache.commons.jexl3.JexlArithmetic"", e);
      }
  }"
918,"    public Object mod(final Object left, final Object right) {
        if (left == null && right == null) {
            return controlNullNullOperands();
        }
        // if both (non null) args fit as long
        final Number ln = asLongNumber(left);
        final Number rn = asLongNumber(right);
        if (ln != null && rn != null) {
            final long x = ln.longValue();
            final long y = rn.longValue();
            if (y == 0L) {
                throw new ArithmeticException(""%"");
            }
            final long result = x % y;
            return narrowLong(left, right,  result);
        }
        // if either are bigdecimal use that type
        if (left instanceof BigDecimal || right instanceof BigDecimal) {
            final BigDecimal l = toBigDecimal(left);
            final BigDecimal r = toBigDecimal(right);
            if (BigDecimal.ZERO.equals(r)) {
                throw new ArithmeticException(""%"");
            }
            final BigDecimal remainder = l.remainder(r, getMathContext());
            return narrowBigDecimal(left, right, remainder);
        }
        // if either are floating point (double or float) use double
        if (isFloatingPointNumber(left) || isFloatingPointNumber(right)) {
            final double l = toDouble(left);
            final double r = toDouble(right);
            if (r == 0.0) {
                throw new ArithmeticException(""%"");
            }
            return l % r;
        }
        // otherwise treat as integers
        final BigInteger l = toBigInteger(left);
        final BigInteger r = toBigInteger(right);
        if (BigInteger.ZERO.equals(r)) {
            throw new ArithmeticException(""%"");
        }
        final BigInteger result = l.mod(r);
        return narrowBigInteger(left, right, result);
    }","  public void test195()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.createWithOptions(false, (MathContext) null, (-2776));
      JexlEngine.getThreadContext();
      JexlArithmetic jexlArithmetic2 = jexlArithmetic1.options((JexlContext) null);
      Integer integer0 = new Integer(7);
      jexlArithmetic2.divide((Object) null, integer0);
      Double double0 = new Double(2477.50551576017);
      // Undeclared exception!
      try { 
        jexlArithmetic2.mod(double0, jexlArithmetic0);
        fail(""Expecting exception: ArithmeticException"");
      } catch(ArithmeticException e) {
         //
         // Double coercion: org.apache.commons.jexl3.JexlArithmetic:(org.apache.commons.jexl3.JexlArithmetic@1)
         //
         verifyException(""org.apache.commons.jexl3.JexlArithmetic"", e);
      }
  }"
919,"    public double toDouble(final Object val) {
        if (val == null) {
            controlNullOperand();
            return 0;
        }
        if (val instanceof Double) {
            return ((Double) val);
        }
        if (val instanceof Number) {
            //The below construct is used rather than ((Number)val).doubleValue() to ensure
            //equality between comparing new Double( 6.4 / 3 ) and the jexl expression of 6.4 / 3
            return Double.parseDouble(String.valueOf(val));
        }
        if (val instanceof Boolean) {
            return ((Boolean) val) ? 1. : 0.;
        }
        if (val instanceof AtomicBoolean) {
            return ((AtomicBoolean) val).get() ? 1. : 0.;
        }
        if (val instanceof String) {
            final String string = (String) val;
            if ("""".equals(string)) {
                return Double.NaN;
            }
            // the spec seems to be iffy about this.  Going to give it a wack anyway
            return Double.parseDouble(string);
        }
        if (val instanceof Character) {
            final int i = ((Character) val);
            return i;
        }
        throw new ArithmeticException(""Double coercion: ""
                + val.getClass().getName() + "":("" + val + "")"");
    }","  public void test196()  throws Throwable  {
      RoundingMode roundingMode0 = RoundingMode.DOWN;
      MathContext mathContext0 = new MathContext(0, roundingMode0);
      int int0 = (-1943);
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false, mathContext0, (-1943));
      JexlOptions jexlOptions0 = new JexlOptions();
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.options(jexlOptions0);
      boolean boolean0 = true;
      MathContext mathContext1 = new MathContext(0);
      jexlOptions0.copy();
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      Class<Long> class0 = Long.class;
      jexlArithmetic1.narrowNumber(bigDecimal0, class0);
      JexlArithmetic jexlArithmetic2 = jexlArithmetic1.createWithOptions(true, mathContext1, (-1943));
      // Undeclared exception!
      try { 
        jexlArithmetic2.toDouble(roundingMode0);
        fail(""Expecting exception: ArithmeticException"");
      } catch(ArithmeticException e) {
         //
         // Double coercion: java.math.RoundingMode:(DOWN)
         //
         verifyException(""org.apache.commons.jexl3.JexlArithmetic"", e);
      }
  }"
920,"    protected boolean isFloatingPointNumber(final Object val) {
        if (val instanceof Float || val instanceof Double) {
            return true;
        }
        if (val instanceof CharSequence) {
            final Matcher m = FLOAT_PATTERN.matcher((CharSequence) val);
            // first group is decimal, second is exponent;
            // one of them must exist hence start({1,2}) >= 0
            return m.matches() && (m.start(1) >= 0 || m.start(2) >= 0);
        }
        return false;
    }","  public void test197()  throws Throwable  {
      JexlEngine.getThreadContext();
      Integer integer0 = new Integer(7);
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false, (MathContext) null, (-2776));
      AtomicBoolean atomicBoolean0 = new AtomicBoolean(false);
      jexlArithmetic0.greaterThanOrEqual((Object) null, atomicBoolean0);
      JexlArithmetic.SetBuilder jexlArithmetic_SetBuilder0 = jexlArithmetic0.setBuilder(46);
      jexlArithmetic_SetBuilder0.create();
      Double double0 = new Double(46);
      jexlArithmetic0.isFloatingPointNumber(double0);
  }"
921,"    public boolean narrowArguments(final Object[] args) {
        boolean narrowed = false;
        if (args != null) {
            for (int a = 0; a < args.length; ++a) {
                final Object arg = args[a];
                if (arg instanceof Number) {
                    final Number narg = (Number) arg;
                    final Number narrow = narrow(narg);
                    if (!narg.equals(narrow)) {
                        args[a] = narrow;
                        narrowed = true;
                    }
                }
            }
        }
        return narrowed;
    }","  public void test198()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.createWithOptions(false, (MathContext) null, (-2776));
      JexlEngine.getThreadContext();
      JexlArithmetic jexlArithmetic2 = jexlArithmetic1.options((JexlContext) null);
      Integer integer0 = new Integer(7);
      jexlArithmetic2.divide((Object) null, integer0);
      Float float0 = new Float((double) 7);
      Boolean boolean0 = jexlArithmetic0.contains((Object) null, float0);
      jexlArithmetic2.isEmpty((Object) float0, boolean0);
      jexlArithmetic2.narrowArguments((Object[]) null);
  }"
922,"    public final Object bitwiseOr(final Object lhs, final Object rhs) {
        return or(lhs, rhs);
    }","  public void test199()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true);
      MathContext mathContext0 = MathContext.DECIMAL64;
      int int0 = (-1840700267);
      RoundingMode roundingMode0 = mathContext0.getRoundingMode();
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.createWithOptions(false, mathContext0, (-1840700267));
      jexlArithmetic1.narrow((Number) null);
      int int1 = 8;
      JexlArithmetic jexlArithmetic2 = new JexlArithmetic(false, mathContext0, 8);
      Double double0 = new Double(8);
      jexlArithmetic0.toBoolean(double0);
      // Undeclared exception!
      try { 
        jexlArithmetic0.bitwiseOr(roundingMode0, jexlArithmetic2);
        fail(""Expecting exception: ArithmeticException"");
      } catch(ArithmeticException e) {
         //
         // Long coercion: java.math.RoundingMode:(HALF_EVEN)
         //
         verifyException(""org.apache.commons.jexl3.JexlArithmetic"", e);
      }
  }"
923,"    public MapBuilder mapBuilder(final int size) {
        return new org.apache.commons.jexl3.internal.MapBuilder(size);
    }","  public void test200()  throws Throwable  {
      MathContext mathContext0 = MathContext.DECIMAL128;
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false, mathContext0, (-3173));
      JexlEngine.EmptyContext jexlEngine_EmptyContext0 = (JexlEngine.EmptyContext)JexlEngine.EMPTY_CONTEXT;
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.options((JexlContext) jexlEngine_EmptyContext0);
      JexlArithmetic jexlArithmetic2 = jexlArithmetic1.createWithOptions(true, mathContext0, (-3173));
      JexlOptions jexlOptions0 = new JexlOptions();
      JexlArithmetic jexlArithmetic3 = jexlArithmetic2.options(jexlOptions0);
      BigDecimal bigDecimal0 = new BigDecimal((long) (-3173));
      jexlArithmetic3.empty(bigDecimal0);
      Double double0 = new Double((-3173));
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Character character0 = Character.valueOf('J');
      Character.isAlphabetic((-91));
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      jexlArithmetic1.compare(double0, character0, ""/"");
      // Undeclared exception!
      try { 
        jexlArithmetic1.mapBuilder((-2147422184));
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Illegal initial capacity: -2147422184
         //
         verifyException(""java.util.HashMap"", e);
      }
  }"
924,"    public Integer size(final Object object) {
        return size(object, object == null? 0 : 1);
    }","  public void test201()  throws Throwable  {
      JexlOptions jexlOptions0 = new JexlOptions();
      jexlOptions0.getMathContext();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      int int0 = 2147483646;
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false, (MathContext) null, 2147483646);
      Boolean boolean0 = new Boolean(false);
      // Undeclared exception!
      try { 
        jexlArithmetic0.size((Object) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.JexlArithmetic"", e);
      }
  }"
925,"    public final Object bitwiseAnd(final Object lhs, final Object rhs) {
        return and(lhs, rhs);
    }","  public void test202()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      Float float0 = new Float((-3767.0593F));
      Long long0 = new Long((-2172L));
      Long.remainderUnsigned((-2172L), (-2172L));
      jexlArithmetic0.lessThan(float0, long0);
      MathContext mathContext0 = MathContext.DECIMAL32;
      mathContext0.toString();
      jexlArithmetic0.createWithOptions(false, mathContext0, 16);
      Float.min(1.0F, 0.0F);
      jexlArithmetic0.toInteger(float0);
      jexlArithmetic0.toString((Object) null);
      jexlArithmetic0.mapBuilder(0);
      jexlArithmetic0.logicalNot((Object) null);
      Pattern pattern0 = Pattern.compile(""selfXor"", (-1078));
      jexlArithmetic0.greaterThanOrEqual(""precision=7 roundingMode=HALF_EVEN"", ""selfXor"");
      // Undeclared exception!
      try { 
        jexlArithmetic0.bitwiseAnd(pattern0, ""selfXor"");
        fail(""Expecting exception: ArithmeticException"");
      } catch(ArithmeticException e) {
         //
         // Long coercion: java.util.regex.Pattern:(selfXor)
         //
         verifyException(""org.apache.commons.jexl3.JexlArithmetic"", e);
      }
  }"
926,"    public Object multiply(final Object left, final Object right) {
        if (left == null && right == null) {
            return controlNullNullOperands();
        }
        // if both (non null) args fit as int
        final Number ln = asLongNumber(left);
        final Number rn = asLongNumber(right);
        if (ln != null && rn != null) {
            final long x = ln.longValue();
            final long y = rn.longValue();
            final long result = x * y;
            // detect overflow
            if (!isMultiplyExact(x, y, result)) {
                return BigInteger.valueOf(x).multiply(BigInteger.valueOf(y));
            }
            return narrowLong(left, right, result);
        }
        // if either are bigdecimal use that type
        if (left instanceof BigDecimal || right instanceof BigDecimal) {
            final BigDecimal l = toBigDecimal(left);
            final BigDecimal r = toBigDecimal(right);
            final BigDecimal result = l.multiply(r, getMathContext());
            return narrowBigDecimal(left, right, result);
        }
        // if either are floating point (double or float) use double
        if (isFloatingPointNumber(left) || isFloatingPointNumber(right)) {
            final double l = toDouble(left);
            final double r = toDouble(right);
            return l * r;
        }
        // otherwise treat as integers
        final BigInteger l = toBigInteger(left);
        final BigInteger r = toBigInteger(right);
        final BigInteger result = l.multiply(r);
        return narrowBigInteger(left, right, result);
    }","  public void test203()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true);
      MathContext mathContext0 = MathContext.DECIMAL32;
      RoundingMode roundingMode0 = mathContext0.getRoundingMode();
      mathContext0.equals(jexlArithmetic0);
      jexlArithmetic0.size((Object) mathContext0);
      Boolean boolean0 = Boolean.FALSE;
      Boolean.compare(true, true);
      jexlArithmetic0.endsWith(boolean0, boolean0);
      jexlArithmetic0.endsWith(mathContext0, (Object) null);
      Integer integer0 = new Integer((-1598));
      // Undeclared exception!
      try { 
        jexlArithmetic0.multiply(roundingMode0, integer0);
        fail(""Expecting exception: ArithmeticException"");
      } catch(ArithmeticException e) {
         //
         // BigInteger coercion: java.math.RoundingMode:(HALF_EVEN)
         //
         verifyException(""org.apache.commons.jexl3.JexlArithmetic"", e);
      }
  }"
927,"    public Object add(final Object left, final Object right) {
        if (left == null && right == null) {
            return controlNullNullOperands();
        }
        final boolean strconcat = strict
                            ? left instanceof String || right instanceof String
                            : left instanceof String && right instanceof String;
        if (!strconcat) {
            try {
                // if both (non null) args fit as long
                final Number ln = asLongNumber(left);
                final Number rn = asLongNumber(right);
                if (ln != null && rn != null) {
                    final long x = ln.longValue();
                    final long y = rn.longValue();
                    final long result = x + y;
                    // detect overflow, see java8 Math.addExact
                    if (((x ^ result) & (y ^ result)) < 0) {
                        return BigInteger.valueOf(x).add(BigInteger.valueOf(y));
                    }
                    return narrowLong(left, right, result);
                }
                // if either are bigdecimal use that type
                if (left instanceof BigDecimal || right instanceof BigDecimal) {
                    final BigDecimal l = toBigDecimal(left);
                    final BigDecimal r = toBigDecimal(right);
                    final BigDecimal result = l.add(r, getMathContext());
                    return narrowBigDecimal(left, right, result);
                }
                // if either are floating point (double or float) use double
                if (isFloatingPointNumber(left) || isFloatingPointNumber(right)) {
                    final double l = toDouble(left);
                    final double r = toDouble(right);
                    return l + r;
                }
                // otherwise treat as (big) integers
                final BigInteger l = toBigInteger(left);
                final BigInteger r = toBigInteger(right);
                final BigInteger result = l.add(r);
                return narrowBigInteger(left, right, result);
            } catch (final java.lang.NumberFormatException nfe) {
                if (left == null || right == null) {
                    controlNullOperand();
                }
            }
        }
        return toString(left).concat(toString(right));
    }","  public void test204()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true);
      JexlOptions jexlOptions0 = new JexlOptions();
      jexlArithmetic0.options(jexlOptions0);
      long long0 = (-1160L);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Object object0 = new Object();
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = BigInteger.probablePrime(40, mockRandom0);
      jexlArithmetic0.add(bigInteger0, bigInteger0);
      // Undeclared exception!
      try { 
        bigInteger0.shortValueExact();
        fail(""Expecting exception: ArithmeticException"");
      } catch(ArithmeticException e) {
         //
         // BigInteger out of short range
         //
         verifyException(""java.math.BigInteger"", e);
      }
  }"
928,"    public boolean lessThanOrEqual(final Object left, final Object right) {
        if (left == right) {
            return true;
        }
        if (left == null || right == null) {
            return false;
        }
        return compare(left, right, ""<="") <= 0;
    }","  public void test205()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      AtomicBoolean atomicBoolean0 = new AtomicBoolean();
      atomicBoolean0.lazySet(false);
      Float float0 = new Float(955.4800367585);
      Float.min(0.0F, 0.0F);
      jexlArithmetic0.subtract(atomicBoolean0, float0);
      JexlOptions jexlOptions0 = new JexlOptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ""_,Xuagc;mlakk,<"");
      MathContext mathContext0 = MathContext.UNLIMITED;
      jexlOptions0.setMathContext(mathContext0);
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.options(jexlOptions0);
      Byte byte0 = new Byte((byte) (-41));
      BigInteger bigInteger0 = jexlArithmetic1.toBigInteger(byte0);
      Byte.toUnsignedInt((byte)88);
      Integer integer0 = new Integer((byte) (-41));
      jexlArithmetic0.toInteger(integer0);
      jexlArithmetic1.toBigInteger(bigInteger0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-41);
      byteArray0[1] = (byte) (-41);
      byteArray0[2] = (byte) (-41);
      byteArray0[3] = (byte) (-75);
      byteArray0[4] = (byte)88;
      byteArray0[5] = (byte)88;
      byteArray0[6] = (byte) (-41);
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      // Undeclared exception!
      try { 
        jexlArithmetic0.lessThanOrEqual(""precision=7 roundingMode=HALF_EVEN"", bigInteger1);
        fail(""Expecting exception: NumberFormatException"");
      } catch(NumberFormatException e) {
         //
         // For input string: \""precisi\""
         //
         verifyException(""java.lang.NumberFormatException"", e);
      }
  }"
929,"    public Object complement(final Object val) {
        final long l = toLong(val);
        return ~l;
    }","  public void test206()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      Float float0 = new Float((-3767.0593F));
      Long long0 = new Long((-2172L));
      jexlArithmetic0.lessThan(float0, long0);
      MathContext mathContext0 = MathContext.DECIMAL32;
      mathContext0.toString();
      jexlArithmetic0.createWithOptions(false, mathContext0, 16);
      Float.min(1.0F, 0.0F);
      jexlArithmetic0.toInteger(float0);
      jexlArithmetic0.toString((Object) null);
      jexlArithmetic0.mapBuilder(0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      jexlArithmetic0.logicalNot((Object) null);
      String string0 = ""selfXor"";
      int int0 = (-1078);
      // Undeclared exception!
      try { 
        jexlArithmetic0.complement(""selfXor"");
        fail(""Expecting exception: NumberFormatException"");
      } catch(NumberFormatException e) {
         //
         // For input string: \""selfXor\""
         //
         verifyException(""java.lang.NumberFormatException"", e);
      }
  }"
930,"    protected BigDecimal roundBigDecimal(final BigDecimal number) {
        final int mscale = getMathScale();
        if (mscale >= 0) {
            return number.setScale(mscale, getMathContext().getRoundingMode());
        }
        return number;
    }","  public void test207()  throws Throwable  {
      MathContext mathContext0 = MathContext.DECIMAL32;
      Boolean.logicalOr(false, false);
      BigInteger bigInteger0 = BigInteger.ONE;
      Short short0 = new Short((short)1);
      Character character0 = new Character('Y');
      MapContext mapContext0 = new MapContext();
      BigDecimal bigDecimal0 = new BigDecimal(1.7976931348623157E308);
      Long long0 = new Long(2170L);
      Short short1 = new Short((short)1);
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false, mathContext0, (-3173));
      AtomicBoolean atomicBoolean0 = new AtomicBoolean(false);
      jexlArithmetic0.subtract(character0, atomicBoolean0);
      jexlArithmetic0.roundBigDecimal(bigDecimal0);
  }"
931,"    public Integer size(final Object object) {
        return size(object, object == null? 0 : 1);
    }","  public void test208()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true);
      MathContext mathContext0 = new MathContext(0);
      jexlArithmetic0.createWithOptions(true, mathContext0, 1602);
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.createWithOptions(true, mathContext0, 0);
      jexlArithmetic1.toBoolean(mathContext0);
      JexlOptions jexlOptions0 = new JexlOptions();
      String[] stringArray0 = new String[5];
      jexlOptions0.setMathContext(mathContext0);
      stringArray0[0] = ""_Y6};D"";
      stringArray0[1] = ""-Q<S(c0j.&U,m}A"";
      stringArray0[2] = ""I 9HK+Yv*PK7("";
      stringArray0[3] = ""]: '"";
      stringArray0[4] = ""annotation"";
      jexlOptions0.setFlags(stringArray0);
      JexlArithmetic jexlArithmetic2 = jexlArithmetic1.options(jexlOptions0);
      Class<Long> class0 = Long.class;
      jexlArithmetic2.narrowAccept(class0, class0);
      jexlArithmetic1.size((Object) class0);
  }"
932,"    public final Object logicalNot(final Object arg) {
        return not(arg);
    }","  public void test209()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true);
      MathContext mathContext0 = MathContext.DECIMAL128;
      RoundingMode roundingMode0 = mathContext0.getRoundingMode();
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.createWithOptions(true, mathContext0, (-829));
      Short short0 = new Short((short)25);
      BigDecimal bigDecimal0 = JexlArithmetic.BIGD_DOUBLE_MAX_VALUE;
      jexlArithmetic1.narrowBigDecimal(roundingMode0, short0, bigDecimal0);
      jexlArithmetic1.logicalNot(jexlArithmetic0);
  }"
933,"    public Object xor(final Object left, final Object right) {
        final long l = toLong(left);
        final long r = toLong(right);
        return l ^ r;
    }","  public void test210()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true);
      MathContext mathContext0 = new MathContext(0);
      jexlArithmetic0.createWithOptions(true, mathContext0, 1602);
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.createWithOptions(true, mathContext0, 0);
      JexlOptions jexlOptions0 = new JexlOptions();
      String[] stringArray0 = new String[5];
      stringArray0[0] = ""_Y6};D"";
      stringArray0[1] = ""-Q<S(c0j.&U,m}A"";
      stringArray0[2] = ""I 9HK+Yv*PK7("";
      stringArray0[3] = ""]: '"";
      stringArray0[4] = ""annotation"";
      jexlOptions0.setFlags(stringArray0);
      JexlArithmetic jexlArithmetic2 = jexlArithmetic1.options(jexlOptions0);
      Class<Long> class0 = Long.class;
      jexlArithmetic2.narrowAccept(class0, class0);
      Float float0 = new Float((-279.67F));
      // Undeclared exception!
      try { 
        jexlArithmetic1.xor(""_Y6};D"", float0);
        fail(""Expecting exception: NumberFormatException"");
      } catch(NumberFormatException e) {
         //
         // For input string: \""_Y6};D\""
         //
         verifyException(""java.lang.NumberFormatException"", e);
      }
  }"
934,"    public final Object bitwiseAnd(final Object lhs, final Object rhs) {
        return and(lhs, rhs);
    }","  public void test211()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      BigInteger bigInteger0 = BigInteger.ZERO;
      jexlArithmetic0.narrow(bigInteger0);
      Float float0 = new Float((-2368.8948));
      jexlArithmetic0.subtract(float0, (Object) null);
      AtomicBoolean atomicBoolean0 = new AtomicBoolean();
      atomicBoolean0.getAndSet(false);
      jexlArithmetic0.not(atomicBoolean0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Integer integer0 = new Integer((-45));
      Integer.getInteger(""positivize"");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Integer.compareUnsigned((-45), 31);
      // Undeclared exception!
      try { 
        jexlArithmetic0.bitwiseAnd(""positivize"", integer0);
        fail(""Expecting exception: NumberFormatException"");
      } catch(NumberFormatException e) {
         //
         // For input string: \""positivize\""
         //
         verifyException(""java.lang.NumberFormatException"", e);
      }
  }"
935,"    public final Object bitwiseAnd(final Object lhs, final Object rhs) {
        return and(lhs, rhs);
    }","  public void test212()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      Float float0 = new Float((-3767.0593F));
      Float.min(1.0F, 0.0F);
      jexlArithmetic0.toInteger(float0);
      jexlArithmetic0.toString((Object) null);
      Float float1 = new Float(0.0);
      Integer integer0 = new Integer(0);
      jexlArithmetic0.size((Object) float1, integer0);
      jexlArithmetic0.mapBuilder(0);
      jexlArithmetic0.logicalNot((Object) null);
      Pattern pattern0 = Pattern.compile(""selfXor"", (-1078));
      // Undeclared exception!
      try { 
        jexlArithmetic0.bitwiseAnd(pattern0, ""selfXor"");
        fail(""Expecting exception: ArithmeticException"");
      } catch(ArithmeticException e) {
         //
         // Long coercion: java.util.regex.Pattern:(selfXor)
         //
         verifyException(""org.apache.commons.jexl3.JexlArithmetic"", e);
      }
  }"
936,"    public int toInteger(final Object val) {
        if (val == null) {
            controlNullOperand();
            return 0;
        }
        if (val instanceof Double) {
            final Double dval = (Double) val;
            if (Double.isNaN(dval)) {
                return 0;
            }
            return dval.intValue();
        }
        if (val instanceof Number) {
            return ((Number) val).intValue();
        }
        if (val instanceof String) {
            if ("""".equals(val)) {
                return 0;
            }
            return Integer.parseInt((String) val);
        }
        if (val instanceof Boolean) {
            return ((Boolean) val) ? 1 : 0;
        }
        if (val instanceof AtomicBoolean) {
            return ((AtomicBoolean) val).get() ? 1 : 0;
        }
        if (val instanceof Character) {
            return ((Character) val);
        }

        throw new ArithmeticException(""Integer coercion: ""
                + val.getClass().getName() + "":("" + val + "")"");
    }","  public void test213()  throws Throwable  {
      MathContext mathContext0 = MathContext.DECIMAL128;
      int int0 = (-3173);
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false, mathContext0, (-3173));
      JexlEngine.EmptyContext jexlEngine_EmptyContext0 = (JexlEngine.EmptyContext)JexlEngine.EMPTY_CONTEXT;
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.options((JexlContext) jexlEngine_EmptyContext0);
      // Undeclared exception!
      try { 
        jexlArithmetic1.toInteger(mathContext0);
        fail(""Expecting exception: ArithmeticException"");
      } catch(ArithmeticException e) {
         //
         // Integer coercion: java.math.MathContext:(precision=34 roundingMode=HALF_EVEN)
         //
         verifyException(""org.apache.commons.jexl3.JexlArithmetic"", e);
      }
  }"
937,"    public final Object bitwiseAnd(final Object lhs, final Object rhs) {
        return and(lhs, rhs);
    }","  public void test214()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true);
      JexlOptions jexlOptions0 = new JexlOptions();
      jexlOptions0.getMathContext();
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.createWithOptions(true, (MathContext) null, (-208));
      JexlArithmetic jexlArithmetic2 = jexlArithmetic1.options(jexlOptions0);
      Class<MathContext> class0 = MathContext.class;
      Class<BigInteger> class1 = BigInteger.class;
      jexlArithmetic2.narrowAccept(class0, class1);
      jexlArithmetic1.setBuilder(1512);
      Object object0 = jexlArithmetic0.not(jexlArithmetic1);
      char[] charArray0 = new char[7];
      charArray0[0] = 'S';
      charArray0[1] = 't';
      charArray0[2] = 'k';
      charArray0[3] = 'E';
      charArray0[4] = '0';
      charArray0[5] = '/';
      charArray0[6] = 'b';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      // Undeclared exception!
      try { 
        jexlArithmetic2.bitwiseAnd(object0, charBuffer0);
        fail(""Expecting exception: ArithmeticException"");
      } catch(ArithmeticException e) {
         //
         // Long coercion: java.nio.HeapCharBuffer:(StkE0/b)
         //
         verifyException(""org.apache.commons.jexl3.JexlArithmetic"", e);
      }
  }"
938,"    public boolean narrowArguments(final Object[] args) {
        boolean narrowed = false;
        if (args != null) {
            for (int a = 0; a < args.length; ++a) {
                final Object arg = args[a];
                if (arg instanceof Number) {
                    final Number narg = (Number) arg;
                    final Number narrow = narrow(narg);
                    if (!narg.equals(narrow)) {
                        args[a] = narrow;
                        narrowed = true;
                    }
                }
            }
        }
        return narrowed;
    }","  public void test215()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ""JRc>j>$`P`K8roGIPY"");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false, (MathContext) null, (-1111));
      JexlArithmetic.ArrayBuilder jexlArithmetic_ArrayBuilder0 = jexlArithmetic0.arrayBuilder(26);
      jexlArithmetic_ArrayBuilder0.add((Object) null);
      jexlArithmetic0.lessThanOrEqual(jexlArithmetic_ArrayBuilder0, ""JRc>j>$`P`K8roGIPY"");
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) jexlArithmetic_ArrayBuilder0;
      objectArray0[3] = (Object) jexlArithmetic_ArrayBuilder0;
      objectArray0[4] = (Object) ""JRc>j>$`P`K8roGIPY"";
      objectArray0[5] = (Object) jexlArithmetic0;
      objectArray0[6] = (Object) null;
      objectArray0[7] = (Object) null;
      jexlArithmetic0.narrowArguments(objectArray0);
  }"
939,"    public boolean narrowArguments(final Object[] args) {
        boolean narrowed = false;
        if (args != null) {
            for (int a = 0; a < args.length; ++a) {
                final Object arg = args[a];
                if (arg instanceof Number) {
                    final Number narg = (Number) arg;
                    final Number narrow = narrow(narg);
                    if (!narg.equals(narrow)) {
                        args[a] = narrow;
                        narrowed = true;
                    }
                }
            }
        }
        return narrowed;
    }","  public void test216()  throws Throwable  {
      MathContext mathContext0 = MathContext.UNLIMITED;
      int int0 = (-1);
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false, mathContext0, (-1));
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.options((JexlOptions) null);
      JexlArithmetic jexlArithmetic2 = jexlArithmetic1.createWithOptions(false, mathContext0, (-1));
      JexlEngine.getThreadContext();
      jexlArithmetic2.isFloatingPointNumber(jexlArithmetic0);
      jexlArithmetic2.options((JexlContext) null);
      jexlArithmetic0.narrowArguments((Object[]) null);
      MathContext mathContext1 = null;
      try {
        mathContext1 = new MathContext((-1));
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Digits < 0
         //
         verifyException(""java.math.MathContext"", e);
      }
  }"
940,"    public int toInteger(final Object val) {
        if (val == null) {
            controlNullOperand();
            return 0;
        }
        if (val instanceof Double) {
            final Double dval = (Double) val;
            if (Double.isNaN(dval)) {
                return 0;
            }
            return dval.intValue();
        }
        if (val instanceof Number) {
            return ((Number) val).intValue();
        }
        if (val instanceof String) {
            if ("""".equals(val)) {
                return 0;
            }
            return Integer.parseInt((String) val);
        }
        if (val instanceof Boolean) {
            return ((Boolean) val) ? 1 : 0;
        }
        if (val instanceof AtomicBoolean) {
            return ((AtomicBoolean) val).get() ? 1 : 0;
        }
        if (val instanceof Character) {
            return ((Character) val);
        }

        throw new ArithmeticException(""Integer coercion: ""
                + val.getClass().getName() + "":("" + val + "")"");
    }","  public void test217()  throws Throwable  {
      MathContext mathContext0 = MathContext.DECIMAL32;
      int int0 = (-1879048189);
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false, mathContext0, (-1879048189));
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.options((JexlOptions) null);
      JexlArithmetic jexlArithmetic2 = jexlArithmetic1.createWithOptions(false, mathContext0, 5);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      jexlArithmetic2.endsWith(mathContext0, jexlArithmetic0);
      String string0 = ""=n."";
      Boolean boolean0 = Boolean.valueOf(""=n."");
      jexlArithmetic1.toBoolean(boolean0);
      String string1 = ""o`0(%,i+"";
      Boolean.getBoolean(""o`0(%,i+"");
      Boolean.logicalAnd(false, false);
      jexlArithmetic1.not(mathContext0);
      mathContext0.getRoundingMode();
      jexlArithmetic2.toInteger((Object) null);
      mathContext0.getRoundingMode();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ""X0IB&%ST5:M!Iy."");
      try { 
        Integer.valueOf(""=n."");
        fail(""Expecting exception: NumberFormatException"");
      } catch(NumberFormatException e) {
         //
         // For input string: \""=n.\""
         //
         verifyException(""java.lang.NumberFormatException"", e);
      }
  }"
941,"    public boolean greaterThanOrEqual(final Object left, final Object right) {
        if (left == right) {
            return true;
        }
        if (left == null || right == null) {
            return false;
        }
        return compare(left, right, "">="") >= 0;
    }","  public void test218()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      JexlArithmetic.isMultiplyExact(3L, 3L, 3L);
      MathContext mathContext0 = MathContext.DECIMAL32;
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true, mathContext0, (-3685));
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)56;
      byteArray0[1] = (byte)36;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      jexlArithmetic0.greaterThanOrEqual(bigInteger0, bigInteger0);
  }"
942,"    public Object subtract(final Object left, final Object right) {
        if (left == null && right == null) {
            return controlNullNullOperands();
        }
        // if both (non null) args fit as long
        final Number ln = asLongNumber(left);
        final Number rn = asLongNumber(right);
        if (ln != null && rn != null) {
            final long x = ln.longValue();
            final long y = rn.longValue();
            final long result = x - y;
            // detect overflow, see java8 Math.subtractExact
            if (((x ^ y) & (x ^ result)) < 0) {
                return BigInteger.valueOf(x).subtract(BigInteger.valueOf(y));
            }
            return narrowLong(left, right, result);
        }
        // if either are bigdecimal use that type
        if (left instanceof BigDecimal || right instanceof BigDecimal) {
            final BigDecimal l = toBigDecimal(left);
            final BigDecimal r = toBigDecimal(right);
            final BigDecimal result = l.subtract(r, getMathContext());
            return narrowBigDecimal(left, right, result);
        }
        // if either are floating point (double or float) use double
        if (isFloatingPointNumber(left) || isFloatingPointNumber(right)) {
            final double l = toDouble(left);
            final double r = toDouble(right);
            return l - r;
        }
        // otherwise treat as integers
        final BigInteger l = toBigInteger(left);
        final BigInteger r = toBigInteger(right);
        final BigInteger result = l.subtract(r);
        return narrowBigInteger(left, right, result);
    }","  public void test219()  throws Throwable  {
      boolean boolean0 = false;
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      byte byte0 = (byte)0;
      Byte byte1 = new Byte((byte)0);
      Byte.toUnsignedInt((byte)0);
      jexlArithmetic0.narrow(byte1);
      Byte.compare((byte)0, (byte)0);
      MapContext mapContext0 = new MapContext();
      JexlArithmetic.ArrayBuilder jexlArithmetic_ArrayBuilder0 = jexlArithmetic0.arrayBuilder((byte)0);
      Object object0 = jexlArithmetic_ArrayBuilder0.create(true);
      // Undeclared exception!
      try { 
        jexlArithmetic0.subtract(object0, object0);
        fail(""Expecting exception: ArithmeticException"");
      } catch(ArithmeticException e) {
         //
         // BigInteger coercion: java.util.ArrayList:([])
         //
         verifyException(""org.apache.commons.jexl3.JexlArithmetic"", e);
      }
  }"
943,"    public MapBuilder mapBuilder(final int size) {
        return new org.apache.commons.jexl3.internal.MapBuilder(size);
    }","  public void test220()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      JexlEngine.getThreadContext();
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.options((JexlContext) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Long long0 = Long.getLong("">="", 2245L);
      jexlArithmetic0.matches(jexlArithmetic1, long0);
      BigInteger bigInteger0 = BigInteger.valueOf((-3576L));
      jexlArithmetic1.narrowBigInteger(long0, "">="", bigInteger0);
      jexlArithmetic0.toDouble((Object) null);
      BigInteger bigInteger1 = BigInteger.TEN;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-74);
      byteArray0[1] = (byte)106;
      byte byte0 = (byte)41;
      byteArray0[2] = (byte)41;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)13;
      BigInteger bigInteger2 = new BigInteger(byteArray0);
      BigInteger bigInteger3 = JexlArithmetic.BIGI_LONG_MAX_VALUE;
      jexlArithmetic1.createRange(bigInteger1, bigInteger1);
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger1);
      bigDecimal0.doubleValue();
      jexlArithmetic0.toLong(bigDecimal0);
      // Undeclared exception!
      try { 
        jexlArithmetic1.mapBuilder((-2));
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Illegal initial capacity: -2
         //
         verifyException(""java.util.HashMap"", e);
      }
  }"
944,"    public boolean equals(final Object left, final Object right) {
        if (left == right) {
            return true;
        }
        if (left == null || right == null) {
            return false;
        }
        if (left instanceof Boolean || right instanceof Boolean) {
            return toBoolean(left) == toBoolean(right);
        }
        return compare(left, right, ""=="") == 0;
    }","  public void test221()  throws Throwable  {
      MathContext mathContext0 = MathContext.DECIMAL32;
      mathContext0.toString();
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false, mathContext0, (-2037));
      jexlArithmetic0.not(mathContext0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Long long0 = new Long(0L);
      jexlArithmetic0.bitwiseXor(long0, long0);
      BigInteger bigInteger0 = BigInteger.ONE;
      Class<String> class0 = String.class;
      Number number0 = jexlArithmetic0.narrowNumber(bigInteger0, class0);
      jexlArithmetic0.bitwiseXor(number0, bigInteger0);
      Short short0 = new Short((short)1);
      Short.compare((short)1, (short)1626);
      Short.compare((short)1, (short)2175);
      Character character0 = new Character('Y');
      Boolean boolean0 = new Boolean(true);
      BigDecimal bigDecimal0 = new BigDecimal(1.7976931348623157E308);
      AtomicBoolean atomicBoolean0 = new AtomicBoolean(false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      bigDecimal0.toString();
      Long long1 = new Long(2170L);
      jexlArithmetic0.narrowLong(bigDecimal0, long1, (-2037));
      jexlArithmetic0.positivize(long0);
      String string0 = ""'IDU"";
      // Undeclared exception!
      try { 
        jexlArithmetic0.equals((Object) number0, (Object) ""precision=7 roundingMode=HALF_EVEN"");
        fail(""Expecting exception: NumberFormatException"");
      } catch(NumberFormatException e) {
         //
         // For input string: \""precisi\""
         //
         verifyException(""java.lang.NumberFormatException"", e);
      }
  }"
945,"    public boolean lessThanOrEqual(final Object left, final Object right) {
        if (left == right) {
            return true;
        }
        if (left == null || right == null) {
            return false;
        }
        return compare(left, right, ""<="") <= 0;
    }","  public void test222()  throws Throwable  {
      MathContext mathContext0 = MathContext.DECIMAL32;
      int int0 = (-2037);
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false, mathContext0, (-2037));
      Object object0 = jexlArithmetic0.not(mathContext0);
      Boolean.logicalOr(true, false);
      String string0 = null;
      jexlArithmetic0.greaterThan((Object) null, object0);
      MathContext mathContext1 = MathContext.DECIMAL32;
      Integer integer0 = new Integer((-2037));
      jexlArithmetic0.size((Object) mathContext1, integer0);
      BigInteger bigInteger0 = JexlArithmetic.BIGI_LONG_MIN_VALUE;
      Class<String> class0 = String.class;
      Number number0 = jexlArithmetic0.narrowNumber(bigInteger0, class0);
      jexlArithmetic0.controlNullOperand();
      jexlArithmetic0.bitwiseXor(number0, bigInteger0);
      short short0 = (short)1;
      Short short1 = new Short((short)1);
      Character character0 = new Character('Y');
      // Undeclared exception!
      try { 
        jexlArithmetic0.lessThanOrEqual(mathContext0, class0);
        fail(""Expecting exception: ArithmeticException"");
      } catch(ArithmeticException e) {
         //
         // Object comparison:(precision=7 roundingMode=HALF_EVEN <= class java.lang.String)
         //
         verifyException(""org.apache.commons.jexl3.JexlArithmetic"", e);
      }
  }"
946,"    public long toLong(final Object val) {
        if (val == null) {
            controlNullOperand();
            return 0L;
        }
        if (val instanceof Double) {
            final Double dval = (Double) val;
            if (Double.isNaN(dval)) {
                return 0L;
            }
            return dval.longValue();
        }
        if (val instanceof Number) {
            return ((Number) val).longValue();
        }
        if (val instanceof String) {
            if ("""".equals(val)) {
                return 0L;
            }
            return Long.parseLong((String) val);
        }
        if (val instanceof Boolean) {
            return ((Boolean) val) ? 1L : 0L;
        }
        if (val instanceof AtomicBoolean) {
            return ((AtomicBoolean) val).get() ? 1L : 0L;
        }
        if (val instanceof Character) {
            return ((Character) val);
        }

        throw new ArithmeticException(""Long coercion: ""
                + val.getClass().getName() + "":("" + val + "")"");
    }","  public void test223()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true);
      Float float0 = new Float((-1.0));
      Object object0 = jexlArithmetic0.bitwiseAnd(float0, float0);
      AtomicBoolean atomicBoolean0 = new AtomicBoolean();
      atomicBoolean0.set(true);
      atomicBoolean0.compareAndSet(true, true);
      Object object1 = jexlArithmetic0.xor(object0, atomicBoolean0);
      jexlArithmetic0.complement(object1);
      Float float1 = new Float(973.0F);
      jexlArithmetic0.toLong(float1);
      Pattern pattern0 = JexlArithmetic.FLOAT_PATTERN;
      int int0 = (-2145418122);
      // Undeclared exception!
      try { 
        CharBuffer.allocate((-2145418122));
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.nio.CharBuffer"", e);
      }
  }"
947,"    public Object positivize(final Object val) {
        if (val == null) {
            controlNullOperand();
            return null;
        }
        if (val instanceof Short) {
            return ((Short) val).intValue();
        }
        if (val instanceof Byte) {
            return ((Byte) val).intValue();
        }
        if (val instanceof Number) {
            return val;
        }
        if (val instanceof Character) {
            return (int) (Character) val;
        }
        if (val instanceof Boolean) {
            return val;
        }
        if (val instanceof AtomicBoolean) {
            return ((AtomicBoolean) val).get();
        }
        throw new ArithmeticException(""Object positivize:("" + val + "")"");
    }","  public void test224()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true);
      MathContext mathContext0 = new MathContext(0);
      jexlArithmetic0.createWithOptions(true, mathContext0, 1602);
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.createWithOptions(true, mathContext0, 0);
      JexlOptions jexlOptions0 = new JexlOptions();
      String[] stringArray0 = new String[5];
      stringArray0[0] = ""_Y6};D"";
      stringArray0[1] = ""-Q<S(c0j.&U,m}A"";
      stringArray0[2] = ""I 9HK+Yv*PK7("";
      stringArray0[3] = ""]: '"";
      stringArray0[4] = ""annotation"";
      jexlOptions0.setFlags(stringArray0);
      JexlArithmetic jexlArithmetic2 = jexlArithmetic1.options(jexlOptions0);
      Class<Long> class0 = Long.class;
      jexlArithmetic2.narrowAccept(class0, class0);
      // Undeclared exception!
      try { 
        jexlArithmetic0.positivize((Object) null);
        fail(""Expecting exception: ArithmeticException"");
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.JexlArithmetic"", e);
      }
  }"
948,"    public MapBuilder mapBuilder(final int size) {
        return new org.apache.commons.jexl3.internal.MapBuilder(size);
    }","  public void test225()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      JexlEngine.getThreadContext();
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.options((JexlContext) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Long long0 = Long.getLong("">="", 2245L);
      jexlArithmetic0.matches(jexlArithmetic1, long0);
      jexlArithmetic0.toDouble((Object) null);
      BigInteger bigInteger0 = BigInteger.TEN;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-74);
      byteArray0[1] = (byte)106;
      byte byte0 = (byte)41;
      byteArray0[2] = (byte)41;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)0;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byteArray0[5] = (byte)13;
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      BigInteger bigInteger2 = JexlArithmetic.BIGI_LONG_MAX_VALUE;
      jexlArithmetic1.createRange(bigInteger0, bigInteger0);
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      bigDecimal0.doubleValue();
      jexlArithmetic0.toLong(bigDecimal0);
      Double double0 = new Double(2088.8967419716805);
      Object object0 = jexlArithmetic0.positivize(double0);
      jexlArithmetic1.or(object0, bigInteger1);
      // Undeclared exception!
      try { 
        jexlArithmetic1.mapBuilder((-2));
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Illegal initial capacity: -2
         //
         verifyException(""java.util.HashMap"", e);
      }
  }"
949,"    public final Object bitwiseXor(final Object lhs, final Object rhs) {
        return xor(lhs, rhs);
    }","  public void test226()  throws Throwable  {
      String string0 = ""6'kC_qpWjmx05%B0)"";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ""6'kC_qpWjmx05%B0)"");
      JexlEngine.getThreadEngine();
      MapContext mapContext0 = new MapContext();
      boolean boolean0 = false;
      RoundingMode roundingMode0 = RoundingMode.HALF_EVEN;
      mapContext0.clear();
      MathContext mathContext0 = new MathContext(256, roundingMode0);
      mathContext0.equals("""");
      int int0 = 729;
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false, mathContext0, 729);
      JexlEngine.EmptyContext jexlEngine_EmptyContext0 = (JexlEngine.EmptyContext)JexlEngine.EMPTY_CONTEXT;
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.options((JexlContext) jexlEngine_EmptyContext0);
      JexlOptions jexlOptions0 = new JexlOptions();
      JexlArithmetic jexlArithmetic2 = jexlArithmetic1.options(jexlOptions0);
      // Undeclared exception!
      try { 
        jexlArithmetic2.bitwiseXor("""", (Object) null);
        fail(""Expecting exception: ArithmeticException"");
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.JexlArithmetic"", e);
      }
  }"
950,"    public final Object bitwiseAnd(final Object lhs, final Object rhs) {
        return and(lhs, rhs);
    }","  public void test227()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      Float float0 = new Float((-3767.0593F));
      Long long0 = new Long((-2172L));
      jexlArithmetic0.lessThan(float0, long0);
      MathContext mathContext0 = MathContext.DECIMAL32;
      mathContext0.toString();
      jexlArithmetic0.createWithOptions(false, mathContext0, 16);
      Float.min(1.0F, 0.0F);
      jexlArithmetic0.toInteger(float0);
      jexlArithmetic0.toString((Object) null);
      jexlArithmetic0.mapBuilder(0);
      jexlArithmetic0.logicalNot((Object) null);
      Pattern pattern0 = Pattern.compile(""selfXor"", (-1078));
      Pattern.compile(""precision=7 roundingMode=HALF_EVEN"");
      jexlArithmetic0.narrow(long0);
      // Undeclared exception!
      try { 
        jexlArithmetic0.bitwiseAnd(pattern0, ""selfXor"");
        fail(""Expecting exception: ArithmeticException"");
      } catch(ArithmeticException e) {
         //
         // Long coercion: java.util.regex.Pattern:(selfXor)
         //
         verifyException(""org.apache.commons.jexl3.JexlArithmetic"", e);
      }
  }"
951,"    public final Object bitwiseXor(final Object lhs, final Object rhs) {
        return xor(lhs, rhs);
    }","  public void test228()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Float float0 = new Float((-3767.0593F));
      Long long0 = new Long((-2172L));
      Long.getLong(""+[G"");
      jexlArithmetic0.lessThan(float0, long0);
      MathContext mathContext0 = MathContext.DECIMAL32;
      mathContext0.toString();
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.createWithOptions(false, mathContext0, 16);
      Float.min(1.0F, 0.0F);
      jexlArithmetic0.toInteger(float0);
      BigDecimal bigDecimal0 = BigDecimal.valueOf((-2172L), (-3767));
      Class<CharBuffer> class0 = CharBuffer.class;
      jexlArithmetic1.narrowNumber(bigDecimal0, class0);
      jexlArithmetic0.toString((Object) null);
      jexlArithmetic1.narrowNumber(bigDecimal0, class0);
      jexlArithmetic0.mapBuilder(0);
      Object object0 = jexlArithmetic0.logicalNot((Object) null);
      Pattern.compile(""selfXor"", (-1078));
      // Undeclared exception!
      try { 
        jexlArithmetic1.bitwiseXor(object0, ""selfXor"");
        fail(""Expecting exception: NumberFormatException"");
      } catch(NumberFormatException e) {
         //
         // For input string: \""selfXor\""
         //
         verifyException(""java.lang.NumberFormatException"", e);
      }
  }"
952,"    public final Object bitwiseAnd(final Object lhs, final Object rhs) {
        return and(lhs, rhs);
    }","  public void test229()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      Float float0 = new Float((-3767.0593F));
      Long long0 = new Long((-2172L));
      boolean boolean0 = new Boolean(false);
      MathContext mathContext0 = MathContext.DECIMAL32;
      mathContext0.toString();
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.createWithOptions(false, mathContext0, 16);
      jexlArithmetic1.and(long0, float0);
      Float.min(1.0F, 0.0F);
      jexlArithmetic0.toInteger(float0);
      jexlArithmetic0.toString((Object) null);
      jexlArithmetic0.mapBuilder(0);
      jexlArithmetic0.logicalNot((Object) null);
      Pattern pattern0 = Pattern.compile(""selfXor"", (-1078));
      // Undeclared exception!
      try { 
        jexlArithmetic0.bitwiseAnd(pattern0, ""selfXor"");
        fail(""Expecting exception: ArithmeticException"");
      } catch(ArithmeticException e) {
         //
         // Long coercion: java.util.regex.Pattern:(selfXor)
         //
         verifyException(""org.apache.commons.jexl3.JexlArithmetic"", e);
      }
  }"
953,"    public boolean lessThan(final Object left, final Object right) {
        if ((left == right) || (left == null) || (right == null)) {
            return false;
        }
        return compare(left, right, ""<"") < 0;

    }","  public void test230()  throws Throwable  {
      MathContext mathContext0 = MathContext.DECIMAL128;
      int int0 = 2171;
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true, mathContext0, 2171);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ""false"");
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.createWithOptions(true, mathContext0, 2171);
      JexlEngine.getThreadContext();
      mathContext0.equals(jexlArithmetic0);
      BigDecimal bigDecimal0 = JexlArithmetic.BIGD_DOUBLE_MIN_VALUE;
      Double double0 = new Double(2171);
      BigInteger bigInteger0 = JexlArithmetic.BIGI_LONG_MAX_VALUE;
      BigDecimal bigDecimal1 = new BigDecimal(bigInteger0);
      JexlArithmetic jexlArithmetic2 = new JexlArithmetic(true, mathContext0, 2171);
      // Undeclared exception!
      try { 
        jexlArithmetic1.lessThan(bigDecimal0, jexlArithmetic2);
        fail(""Expecting exception: ArithmeticException"");
      } catch(ArithmeticException e) {
         //
         // BigDecimal coercion: org.apache.commons.jexl3.JexlArithmetic:(org.apache.commons.jexl3.JexlArithmetic@3)
         //
         verifyException(""org.apache.commons.jexl3.JexlArithmetic"", e);
      }
  }"
954,"    public final Object bitwiseAnd(final Object lhs, final Object rhs) {
        return and(lhs, rhs);
    }","  public void test231()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      Float float0 = new Float((-3767.0593F));
      Float.max((-3767.0593F), (-3767.0593F));
      Float.min(1.0F, 0.0F);
      jexlArithmetic0.toInteger(float0);
      jexlArithmetic0.toString((Object) null);
      jexlArithmetic0.mapBuilder(0);
      jexlArithmetic0.logicalNot((Object) null);
      jexlArithmetic0.toBigInteger(float0);
      Pattern pattern0 = Pattern.compile(""selfXor"", (-1078));
      // Undeclared exception!
      try { 
        jexlArithmetic0.bitwiseAnd(pattern0, ""selfXor"");
        fail(""Expecting exception: ArithmeticException"");
      } catch(ArithmeticException e) {
         //
         // Long coercion: java.util.regex.Pattern:(selfXor)
         //
         verifyException(""org.apache.commons.jexl3.JexlArithmetic"", e);
      }
  }"
955,"    public double toDouble(final Object val) {
        if (val == null) {
            controlNullOperand();
            return 0;
        }
        if (val instanceof Double) {
            return ((Double) val);
        }
        if (val instanceof Number) {
            //The below construct is used rather than ((Number)val).doubleValue() to ensure
            //equality between comparing new Double( 6.4 / 3 ) and the jexl expression of 6.4 / 3
            return Double.parseDouble(String.valueOf(val));
        }
        if (val instanceof Boolean) {
            return ((Boolean) val) ? 1. : 0.;
        }
        if (val instanceof AtomicBoolean) {
            return ((AtomicBoolean) val).get() ? 1. : 0.;
        }
        if (val instanceof String) {
            final String string = (String) val;
            if ("""".equals(string)) {
                return Double.NaN;
            }
            // the spec seems to be iffy about this.  Going to give it a wack anyway
            return Double.parseDouble(string);
        }
        if (val instanceof Character) {
            final int i = ((Character) val);
            return i;
        }
        throw new ArithmeticException(""Double coercion: ""
                + val.getClass().getName() + "":("" + val + "")"");
    }","  public void test232()  throws Throwable  {
      RoundingMode roundingMode0 = RoundingMode.CEILING;
      MathContext mathContext0 = new MathContext(0, roundingMode0);
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false, mathContext0, (-1943));
      JexlOptions jexlOptions0 = new JexlOptions();
      jexlOptions0.setMathScale(0);
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.options(jexlOptions0);
      MathContext mathContext1 = new MathContext(0);
      JexlArithmetic jexlArithmetic2 = jexlArithmetic1.createWithOptions(true, mathContext1, (-1943));
      Byte byte0 = new Byte((byte)69);
      jexlArithmetic1.toDouble(byte0);
      Long long0 = new Long(933L);
      Class<Pattern> class0 = Pattern.class;
      jexlArithmetic2.narrowNumber(long0, class0);
      // Undeclared exception!
      try { 
        jexlArithmetic2.toDouble(roundingMode0);
        fail(""Expecting exception: ArithmeticException"");
      } catch(ArithmeticException e) {
         //
         // Double coercion: java.math.RoundingMode:(CEILING)
         //
         verifyException(""org.apache.commons.jexl3.JexlArithmetic"", e);
      }
  }"
956,"    public MapBuilder mapBuilder(final int size) {
        return new org.apache.commons.jexl3.internal.MapBuilder(size);
    }","  public void test233()  throws Throwable  {
      JexlOptions jexlOptions0 = new JexlOptions();
      jexlOptions0.getMathContext();
      jexlOptions0.setLexicalShade(true);
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true);
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.createWithOptions(true, (MathContext) null, 968);
      BigDecimal bigDecimal0 = new BigDecimal((long) 968);
      bigDecimal0.doubleValue();
      jexlOptions0.setMathScale(42);
      Class<AtomicBoolean> class0 = AtomicBoolean.class;
      jexlArithmetic0.narrowNumber(bigDecimal0, class0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      jexlArithmetic1.options(jexlOptions0);
      Byte.compare((byte) (-2), (byte) (-2));
      jexlArithmetic0.mapBuilder(968);
  }"
957,"    public final Object bitwiseXor(final Object lhs, final Object rhs) {
        return xor(lhs, rhs);
    }","  public void test234()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      Float float0 = new Float((-3767.0593F));
      Long long0 = new Long((-2180L));
      jexlArithmetic0.lessThan(float0, long0);
      MathContext mathContext0 = MathContext.DECIMAL32;
      mathContext0.toString();
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.createWithOptions(false, mathContext0, 16);
      Float.min(1.0F, 0.0F);
      jexlArithmetic0.toInteger(float0);
      jexlArithmetic0.toString((Object) null);
      jexlArithmetic0.mapBuilder(0);
      Boolean boolean0 = jexlArithmetic0.isEmpty((Object) jexlArithmetic0);
      Pattern.compile(""selfXor"", (-1078));
      // Undeclared exception!
      try { 
        jexlArithmetic1.bitwiseXor(boolean0, ""selfXor"");
        fail(""Expecting exception: NumberFormatException"");
      } catch(NumberFormatException e) {
         //
         // For input string: \""selfXor\""
         //
         verifyException(""java.lang.NumberFormatException"", e);
      }
  }"
958,"    public final Object bitwiseAnd(final Object lhs, final Object rhs) {
        return and(lhs, rhs);
    }","  public void test235()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      Float float0 = new Float((-3767.0593F));
      Long long0 = new Long((-2172L));
      Long.compare((-2172L), (-2172L));
      jexlArithmetic0.lessThan(float0, long0);
      MathContext mathContext0 = MathContext.DECIMAL32;
      mathContext0.toString();
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.createWithOptions(false, mathContext0, 16);
      Float.min(1.0F, 0.0F);
      jexlArithmetic0.toInteger(float0);
      jexlArithmetic0.toString((Object) null);
      jexlArithmetic0.mapBuilder(0);
      Boolean boolean0 = (Boolean)jexlArithmetic0.logicalNot((Object) null);
      Pattern pattern0 = Pattern.compile(""selfXor"", (-1078));
      JexlArithmetic jexlArithmetic2 = jexlArithmetic1.createWithOptions(true, mathContext0, 3267);
      ArrayBuilder arrayBuilder0 = (ArrayBuilder)jexlArithmetic2.arrayBuilder(16);
      ArrayList arrayList0 = (ArrayList)arrayBuilder0.create(true);
      jexlArithmetic1.isEmpty((Object) arrayList0, boolean0);
      // Undeclared exception!
      try { 
        jexlArithmetic0.bitwiseAnd(pattern0, ""selfXor"");
        fail(""Expecting exception: ArithmeticException"");
      } catch(ArithmeticException e) {
         //
         // Long coercion: java.util.regex.Pattern:(selfXor)
         //
         verifyException(""org.apache.commons.jexl3.JexlArithmetic"", e);
      }
  }"
959,"    public MapBuilder mapBuilder(final int size) {
        return new org.apache.commons.jexl3.internal.MapBuilder(size);
    }","  public void test236()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      Float float0 = new Float((-579.0871F));
      Float.min((-579.0871F), (-579.0871F));
      Class<BigDecimal> class0 = BigDecimal.class;
      jexlArithmetic0.narrowNumber(float0, class0);
      JexlOptions jexlOptions0 = new JexlOptions();
      Map<String, Object> map0 = jexlOptions0.getNamespaces();
      MapContext mapContext0 = new MapContext(map0);
      jexlArithmetic0.options((JexlContext) mapContext0);
      Float.isFinite(0.0F);
      Float.min((-579.0871F), (-579.0871F));
      jexlArithmetic0.complement(float0);
      Object object0 = null;
      BigDecimal bigDecimal0 = jexlArithmetic0.toBigDecimal((Object) null);
      jexlArithmetic0.mapBuilder(2107);
      String string0 = "";2lb0>8:(W~=YW$"";
      // Undeclared exception!
      try { 
        bigDecimal0.divideToIntegralValue((BigDecimal) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.math.BigDecimal"", e);
      }
  }"
960,"    public MapBuilder mapBuilder(final int size) {
        return new org.apache.commons.jexl3.internal.MapBuilder(size);
    }","  public void test237()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      JexlEngine.getThreadContext();
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.options((JexlContext) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Long long0 = Long.getLong("">="", 2245L);
      jexlArithmetic0.matches(jexlArithmetic1, long0);
      jexlArithmetic0.toDouble((Object) null);
      BigInteger bigInteger0 = BigInteger.TEN;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-74);
      byteArray0[1] = (byte)106;
      byte byte0 = (byte)41;
      byteArray0[2] = (byte)41;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)13;
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      BigInteger bigInteger2 = JexlArithmetic.BIGI_LONG_MAX_VALUE;
      jexlArithmetic1.createRange(bigInteger0, bigInteger0);
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      bigDecimal0.doubleValue();
      jexlArithmetic0.toLong(bigDecimal0);
      // Undeclared exception!
      try { 
        jexlArithmetic1.mapBuilder((-2));
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Illegal initial capacity: -2
         //
         verifyException(""java.util.HashMap"", e);
      }
  }"
961,"    public Object and(final Object left, final Object right) {
        final long l = toLong(left);
        final long r = toLong(right);
        return l & r;
    }","  public void test238()  throws Throwable  {
      String string0 = ""6'kC_qpWjmx05%B0)"";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ""6'kC_qpWjmx05%B0)"");
      JexlEngine.getThreadEngine();
      MapContext mapContext0 = new MapContext();
      RoundingMode roundingMode0 = RoundingMode.HALF_EVEN;
      mapContext0.clear();
      MathContext mathContext0 = new MathContext(256, roundingMode0);
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false, mathContext0, 729);
      // Undeclared exception!
      try { 
        jexlArithmetic0.and(""6'kC_qpWjmx05%B0)"", roundingMode0);
        fail(""Expecting exception: NumberFormatException"");
      } catch(NumberFormatException e) {
         //
         // For input string: \""6'kC_qpWjmx05%B0)\""
         //
         verifyException(""java.lang.NumberFormatException"", e);
      }
  }"
962,"    public MapBuilder mapBuilder(final int size) {
        return new org.apache.commons.jexl3.internal.MapBuilder(size);
    }","  public void test239()  throws Throwable  {
      MathContext mathContext0 = MathContext.DECIMAL32;
      int int0 = (-2776);
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false, mathContext0, (-2776));
      jexlArithmetic0.createWithOptions(true, mathContext0, (-563));
      BigInteger bigInteger0 = JexlArithmetic.BIGI_LONG_MAX_VALUE;
      Integer integer0 = new Integer((-563));
      BigInteger bigInteger1 = BigInteger.TEN;
      bigInteger0.modInverse(bigInteger1);
      Integer integer1 = jexlArithmetic0.size((Object) bigInteger0, integer0);
      mathContext0.equals(jexlArithmetic0);
      String string0 = null;
      BigDecimal bigDecimal0 = JexlArithmetic.BIGD_DOUBLE_MIN_VALUE;
      jexlArithmetic0.narrowBigDecimal(integer1, integer1, bigDecimal0);
      Float float0 = new Float((-1.0));
      Float.max(0.0F, 0.0F);
      jexlArithmetic0.narrow(float0);
      // Undeclared exception!
      try { 
        jexlArithmetic0.mapBuilder((-2776));
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Illegal initial capacity: -2776
         //
         verifyException(""java.util.HashMap"", e);
      }
  }"
963,"    public boolean lessThan(final Object left, final Object right) {
        if ((left == right) || (left == null) || (right == null)) {
            return false;
        }
        return compare(left, right, ""<"") < 0;

    }","  public void test240()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      JexlEngine.getThreadContext();
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.options((JexlContext) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "">="");
      Long long0 = Long.getLong("">="", 2245L);
      Long.max(2245L, 3339L);
      jexlArithmetic0.matches(jexlArithmetic1, long0);
      jexlArithmetic0.toDouble((Object) null);
      BigInteger bigInteger0 = BigInteger.TEN;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-74);
      jexlArithmetic1.greaterThanOrEqual(jexlArithmetic0, (Object) null);
      byteArray0[1] = (byte)106;
      byte byte0 = (byte)41;
      byteArray0[2] = (byte)41;
      AtomicBoolean atomicBoolean0 = new AtomicBoolean();
      Double double0 = new Double((byte)41);
      jexlArithmetic1.lessThan(atomicBoolean0, double0);
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)13;
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      // Undeclared exception!
      try { 
        bigInteger0.modPow(bigInteger1, bigInteger1);
        fail(""Expecting exception: ArithmeticException"");
      } catch(ArithmeticException e) {
         //
         // BigInteger: modulus not positive
         //
         verifyException(""java.math.BigInteger"", e);
      }
  }"
964,"    public final Object bitwiseXor(final Object lhs, final Object rhs) {
        return xor(lhs, rhs);
    }","  public void test241()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      Float float0 = new Float((-3767.0593F));
      Long long0 = new Long((-2172L));
      jexlArithmetic0.lessThan(float0, long0);
      MathContext mathContext0 = MathContext.DECIMAL32;
      mathContext0.toString();
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.createWithOptions(false, mathContext0, 16);
      Float.min(1.0F, 0.0F);
      jexlArithmetic0.toInteger(float0);
      jexlArithmetic0.toString((Object) null);
      jexlArithmetic0.mapBuilder(0);
      Object object0 = jexlArithmetic0.logicalNot((Object) null);
      Pattern.compile(""selfXor"", (-1078));
      // Undeclared exception!
      try { 
        jexlArithmetic1.bitwiseXor(object0, ""selfXor"");
        fail(""Expecting exception: NumberFormatException"");
      } catch(NumberFormatException e) {
         //
         // For input string: \""selfXor\""
         //
         verifyException(""java.lang.NumberFormatException"", e);
      }
  }"
965,"    public Object subtract(final Object left, final Object right) {
        if (left == null && right == null) {
            return controlNullNullOperands();
        }
        // if both (non null) args fit as long
        final Number ln = asLongNumber(left);
        final Number rn = asLongNumber(right);
        if (ln != null && rn != null) {
            final long x = ln.longValue();
            final long y = rn.longValue();
            final long result = x - y;
            // detect overflow, see java8 Math.subtractExact
            if (((x ^ y) & (x ^ result)) < 0) {
                return BigInteger.valueOf(x).subtract(BigInteger.valueOf(y));
            }
            return narrowLong(left, right, result);
        }
        // if either are bigdecimal use that type
        if (left instanceof BigDecimal || right instanceof BigDecimal) {
            final BigDecimal l = toBigDecimal(left);
            final BigDecimal r = toBigDecimal(right);
            final BigDecimal result = l.subtract(r, getMathContext());
            return narrowBigDecimal(left, right, result);
        }
        // if either are floating point (double or float) use double
        if (isFloatingPointNumber(left) || isFloatingPointNumber(right)) {
            final double l = toDouble(left);
            final double r = toDouble(right);
            return l - r;
        }
        // otherwise treat as integers
        final BigInteger l = toBigInteger(left);
        final BigInteger r = toBigInteger(right);
        final BigInteger result = l.subtract(r);
        return narrowBigInteger(left, right, result);
    }","  public void test242()  throws Throwable  {
      MathContext mathContext0 = MathContext.DECIMAL64;
      Boolean boolean0 = Boolean.FALSE;
      mathContext0.equals(boolean0);
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false, mathContext0, Integer.MIN_VALUE);
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.createWithOptions(false, mathContext0, Integer.MIN_VALUE);
      BigDecimal bigDecimal0 = new BigDecimal((long) Integer.MIN_VALUE);
      bigDecimal0.toPlainString();
      jexlArithmetic1.narrowBigDecimal((Object) null, mathContext0, bigDecimal0);
      Pattern pattern0 = JexlArithmetic.FLOAT_PATTERN;
      pattern0.split((CharSequence) ""-2147483648"");
      Double double0 = new Double(1.0);
      Double double1 = new Double(1.0);
      jexlArithmetic1.narrowLong(pattern0, double0, 16380L);
      jexlArithmetic1.toString((Object) pattern0);
      Double double2 = new Double(1038.679142239);
      Object object0 = jexlArithmetic0.subtract((Object) null, double2);
      Object object1 = jexlArithmetic0.logicalNot((Object) null);
      Double double3 = new Double(0.0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      jexlArithmetic0.empty(double3);
      Object object2 = jexlArithmetic0.subtract(object1, object0);
      jexlArithmetic1.add(object2, boolean0);
      mathContext0.getRoundingMode();
      Long long0 = new Long((-3087L));
      Float float0 = new Float((double) (-3087L));
      Object object3 = jexlArithmetic0.subtract((Object) null, float0);
      BigInteger bigInteger0 = BigInteger.TEN;
      jexlArithmetic0.divide(object3, bigInteger0);
      // Undeclared exception!
      try { 
        jexlArithmetic1.subtract(bigDecimal0, long0);
        fail(""Expecting exception: NumberFormatException"");
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.math.BigDecimal"", e);
      }
  }"
966,"    public boolean lessThanOrEqual(final Object left, final Object right) {
        if (left == right) {
            return true;
        }
        if (left == null || right == null) {
            return false;
        }
        return compare(left, right, ""<="") <= 0;
    }","  public void test243()  throws Throwable  {
      MathContext mathContext0 = MathContext.DECIMAL32;
      int int0 = (-2037);
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false, mathContext0, (-2037));
      Object object0 = jexlArithmetic0.not(mathContext0);
      String string0 = null;
      jexlArithmetic0.greaterThan((Object) null, object0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      Class<String> class0 = String.class;
      jexlArithmetic0.narrowNumber(bigInteger0, class0);
      jexlArithmetic0.controlNullOperand();
      short short0 = (short)1;
      Short short1 = new Short((short)1);
      Character character0 = new Character('Y');
      // Undeclared exception!
      try { 
        jexlArithmetic0.lessThanOrEqual(mathContext0, class0);
        fail(""Expecting exception: ArithmeticException"");
      } catch(ArithmeticException e) {
         //
         // Object comparison:(precision=7 roundingMode=HALF_EVEN <= class java.lang.String)
         //
         verifyException(""org.apache.commons.jexl3.JexlArithmetic"", e);
      }
  }"
967,"    public Boolean isEmpty(final Object object) {
        return isEmpty(object, object == null);
    }","  public void test244()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      Integer integer0 = new Integer(1502);
      jexlArithmetic0.divide(integer0, integer0);
      Byte byte0 = new Byte((byte) (-40));
      Boolean boolean0 = Boolean.FALSE;
      jexlArithmetic0.isEmpty((Object) byte0, boolean0);
  }"
968,"    public double toDouble(final Object val) {
        if (val == null) {
            controlNullOperand();
            return 0;
        }
        if (val instanceof Double) {
            return ((Double) val);
        }
        if (val instanceof Number) {
            //The below construct is used rather than ((Number)val).doubleValue() to ensure
            //equality between comparing new Double( 6.4 / 3 ) and the jexl expression of 6.4 / 3
            return Double.parseDouble(String.valueOf(val));
        }
        if (val instanceof Boolean) {
            return ((Boolean) val) ? 1. : 0.;
        }
        if (val instanceof AtomicBoolean) {
            return ((AtomicBoolean) val).get() ? 1. : 0.;
        }
        if (val instanceof String) {
            final String string = (String) val;
            if ("""".equals(string)) {
                return Double.NaN;
            }
            // the spec seems to be iffy about this.  Going to give it a wack anyway
            return Double.parseDouble(string);
        }
        if (val instanceof Character) {
            final int i = ((Character) val);
            return i;
        }
        throw new ArithmeticException(""Double coercion: ""
                + val.getClass().getName() + "":("" + val + "")"");
    }","  public void test245()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      JexlEngine.getThreadContext();
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.options((JexlContext) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "">="");
      Long long0 = Long.getLong("">="", 2245L);
      jexlArithmetic0.matches(jexlArithmetic1, long0);
      jexlArithmetic0.toDouble((Object) null);
      BigInteger bigInteger0 = BigInteger.TEN;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-74);
      byteArray0[1] = (byte)106;
      byte byte0 = (byte)41;
      byteArray0[2] = (byte)41;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)13;
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      // Undeclared exception!
      try { 
        bigInteger0.modPow(bigInteger1, bigInteger1);
        fail(""Expecting exception: ArithmeticException"");
      } catch(ArithmeticException e) {
         //
         // BigInteger: modulus not positive
         //
         verifyException(""java.math.BigInteger"", e);
      }
  }"
969,"    public Iterable<?> createRange(final Object from, final Object to) throws ArithmeticException {
        final long lfrom = toLong(from);
        final long lto = toLong(to);
        if ((lfrom >= Integer.MIN_VALUE && lfrom <= Integer.MAX_VALUE)
                && (lto >= Integer.MIN_VALUE && lto <= Integer.MAX_VALUE)) {
            return org.apache.commons.jexl3.internal.IntegerRange.create((int) lfrom, (int) lto);
        }
        return org.apache.commons.jexl3.internal.LongRange.create(lfrom, lto);
    }","  public void test246()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      MathContext mathContext0 = MathContext.DECIMAL128;
      mathContext0.getRoundingMode();
      jexlArithmetic0.toBoolean((Object) null);
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.createWithOptions(true, mathContext0, 275);
      JexlEngine.EmptyContext jexlEngine_EmptyContext0 = (JexlEngine.EmptyContext)JexlEngine.EMPTY_CONTEXT;
      JexlArithmetic jexlArithmetic2 = jexlArithmetic1.options((JexlContext) jexlEngine_EmptyContext0);
      jexlArithmetic2.setBuilder(275);
      BigInteger bigInteger0 = BigInteger.ZERO;
      Integer integer0 = new Integer(275);
      Integer integer1 = new Integer(275);
      try { 
        jexlArithmetic1.createRange(integer1, (Object) null);
        fail(""Expecting exception: ArithmeticException"");
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.JexlArithmetic"", e);
      }
  }"
970,"    public Object add(final Object left, final Object right) {
        if (left == null && right == null) {
            return controlNullNullOperands();
        }
        final boolean strconcat = strict
                            ? left instanceof String || right instanceof String
                            : left instanceof String && right instanceof String;
        if (!strconcat) {
            try {
                // if both (non null) args fit as long
                final Number ln = asLongNumber(left);
                final Number rn = asLongNumber(right);
                if (ln != null && rn != null) {
                    final long x = ln.longValue();
                    final long y = rn.longValue();
                    final long result = x + y;
                    // detect overflow, see java8 Math.addExact
                    if (((x ^ result) & (y ^ result)) < 0) {
                        return BigInteger.valueOf(x).add(BigInteger.valueOf(y));
                    }
                    return narrowLong(left, right, result);
                }
                // if either are bigdecimal use that type
                if (left instanceof BigDecimal || right instanceof BigDecimal) {
                    final BigDecimal l = toBigDecimal(left);
                    final BigDecimal r = toBigDecimal(right);
                    final BigDecimal result = l.add(r, getMathContext());
                    return narrowBigDecimal(left, right, result);
                }
                // if either are floating point (double or float) use double
                if (isFloatingPointNumber(left) || isFloatingPointNumber(right)) {
                    final double l = toDouble(left);
                    final double r = toDouble(right);
                    return l + r;
                }
                // otherwise treat as (big) integers
                final BigInteger l = toBigInteger(left);
                final BigInteger r = toBigInteger(right);
                final BigInteger result = l.add(r);
                return narrowBigInteger(left, right, result);
            } catch (final java.lang.NumberFormatException nfe) {
                if (left == null || right == null) {
                    controlNullOperand();
                }
            }
        }
        return toString(left).concat(toString(right));
    }","  public void test247()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      JexlEngine.getThreadEngine();
      Boolean boolean0 = Boolean.valueOf(""4/44&&{fx/(xxB"");
      ObjectContext<Boolean> objectContext0 = new ObjectContext<Boolean>((JexlEngine) null, boolean0);
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.options((JexlContext) objectContext0);
      JexlArithmetic.SetBuilder jexlArithmetic_SetBuilder0 = jexlArithmetic1.setBuilder(3);
      jexlArithmetic_SetBuilder0.add(""4/44&&{fx/(xxB"");
  }"
971,"    public ArrayBuilder arrayBuilder(final int size) {
        return new org.apache.commons.jexl3.internal.ArrayBuilder(size);
    }","  public void test248()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      JexlOptions jexlOptions0 = new JexlOptions();
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.options(jexlOptions0);
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Character character0 = Character.valueOf(')');
      jexlArithmetic1.toBigInteger(character0);
      int int0 = (-2038);
      // Undeclared exception!
      try { 
        jexlArithmetic1.arrayBuilder((-2038));
        fail(""Expecting exception: NegativeArraySizeException"");
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.internal.ArrayBuilder"", e);
      }
  }"
972,"    public Object subtract(final Object left, final Object right) {
        if (left == null && right == null) {
            return controlNullNullOperands();
        }
        // if both (non null) args fit as long
        final Number ln = asLongNumber(left);
        final Number rn = asLongNumber(right);
        if (ln != null && rn != null) {
            final long x = ln.longValue();
            final long y = rn.longValue();
            final long result = x - y;
            // detect overflow, see java8 Math.subtractExact
            if (((x ^ y) & (x ^ result)) < 0) {
                return BigInteger.valueOf(x).subtract(BigInteger.valueOf(y));
            }
            return narrowLong(left, right, result);
        }
        // if either are bigdecimal use that type
        if (left instanceof BigDecimal || right instanceof BigDecimal) {
            final BigDecimal l = toBigDecimal(left);
            final BigDecimal r = toBigDecimal(right);
            final BigDecimal result = l.subtract(r, getMathContext());
            return narrowBigDecimal(left, right, result);
        }
        // if either are floating point (double or float) use double
        if (isFloatingPointNumber(left) || isFloatingPointNumber(right)) {
            final double l = toDouble(left);
            final double r = toDouble(right);
            return l - r;
        }
        // otherwise treat as integers
        final BigInteger l = toBigInteger(left);
        final BigInteger r = toBigInteger(right);
        final BigInteger result = l.subtract(r);
        return narrowBigInteger(left, right, result);
    }","  public void test249()  throws Throwable  {
      MathContext mathContext0 = MathContext.DECIMAL64;
      Boolean boolean0 = Boolean.FALSE;
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false, mathContext0, Integer.MIN_VALUE);
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.createWithOptions(false, mathContext0, Integer.MIN_VALUE);
      BigDecimal bigDecimal0 = new BigDecimal((long) Integer.MIN_VALUE);
      bigDecimal0.toPlainString();
      jexlArithmetic1.narrowBigDecimal((Object) null, mathContext0, bigDecimal0);
      Pattern pattern0 = JexlArithmetic.FLOAT_PATTERN;
      pattern0.split((CharSequence) ""-2147483648"");
      Double double0 = new Double(1.0);
      Double double1 = new Double(1.0);
      jexlArithmetic1.narrowLong(pattern0, double0, 16380L);
      jexlArithmetic1.toString((Object) pattern0);
      Double double2 = new Double(1038.679142239);
      Object object0 = jexlArithmetic0.subtract((Object) null, double2);
      Object object1 = jexlArithmetic0.logicalNot((Object) null);
      Double double3 = new Double(Integer.MIN_VALUE);
      jexlArithmetic0.empty(double3);
      Object object2 = jexlArithmetic0.subtract(object1, object0);
      jexlArithmetic1.add(object2, boolean0);
      Long long0 = new Long((-3087L));
      // Undeclared exception!
      try { 
        jexlArithmetic1.subtract(bigDecimal0, long0);
        fail(""Expecting exception: NumberFormatException"");
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.math.BigDecimal"", e);
      }
  }"
973,"    public Object add(final Object left, final Object right) {
        if (left == null && right == null) {
            return controlNullNullOperands();
        }
        final boolean strconcat = strict
                            ? left instanceof String || right instanceof String
                            : left instanceof String && right instanceof String;
        if (!strconcat) {
            try {
                // if both (non null) args fit as long
                final Number ln = asLongNumber(left);
                final Number rn = asLongNumber(right);
                if (ln != null && rn != null) {
                    final long x = ln.longValue();
                    final long y = rn.longValue();
                    final long result = x + y;
                    // detect overflow, see java8 Math.addExact
                    if (((x ^ result) & (y ^ result)) < 0) {
                        return BigInteger.valueOf(x).add(BigInteger.valueOf(y));
                    }
                    return narrowLong(left, right, result);
                }
                // if either are bigdecimal use that type
                if (left instanceof BigDecimal || right instanceof BigDecimal) {
                    final BigDecimal l = toBigDecimal(left);
                    final BigDecimal r = toBigDecimal(right);
                    final BigDecimal result = l.add(r, getMathContext());
                    return narrowBigDecimal(left, right, result);
                }
                // if either are floating point (double or float) use double
                if (isFloatingPointNumber(left) || isFloatingPointNumber(right)) {
                    final double l = toDouble(left);
                    final double r = toDouble(right);
                    return l + r;
                }
                // otherwise treat as (big) integers
                final BigInteger l = toBigInteger(left);
                final BigInteger r = toBigInteger(right);
                final BigInteger result = l.add(r);
                return narrowBigInteger(left, right, result);
            } catch (final java.lang.NumberFormatException nfe) {
                if (left == null || right == null) {
                    controlNullOperand();
                }
            }
        }
        return toString(left).concat(toString(right));
    }","  public void test250()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true, (MathContext) null, (-639));
      // Undeclared exception!
      try { 
        jexlArithmetic0.add((Object) null, (Object) null);
        fail(""Expecting exception: ArithmeticException"");
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.JexlArithmetic"", e);
      }
  }"
974,"    public Object negate(final Object val) {
        if (val == null) {
            controlNullOperand();
            return null;
        }
        if (val instanceof Integer) {
            return -((Integer) val);
        }
        if (val instanceof Double) {
            return - ((Double) val);
        }
        if (val instanceof Long) {
            return -((Long) val);
        }
        if (val instanceof BigDecimal) {
            return ((BigDecimal) val).negate();
        }
        if (val instanceof BigInteger) {
            return ((BigInteger) val).negate();
        }
        if (val instanceof Float) {
            return -((Float) val);
        }
        if (val instanceof Short) {
            return (short) -((Short) val);
        }
        if (val instanceof Byte) {
            return (byte) -((Byte) val);
        }
        if (val instanceof Boolean) {
            return !(Boolean) val;
        }
        if (val instanceof AtomicBoolean) {
            return !((AtomicBoolean) val).get();
        }
        throw new ArithmeticException(""Object negate:("" + val + "")"");
    }","  public void test251()  throws Throwable  {
      MathContext mathContext0 = MathContext.DECIMAL32;
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false, mathContext0, (-2037));
      Object object0 = jexlArithmetic0.not(mathContext0);
      jexlArithmetic0.greaterThan((Object) null, object0);
      Long long0 = new Long(0L);
      jexlArithmetic0.bitwiseXor(long0, long0);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigInteger bigInteger1 = BigInteger.ONE;
      bigInteger1.andNot(bigInteger0);
      jexlArithmetic0.controlNullOperand();
      jexlArithmetic0.bitwiseXor(bigInteger1, bigInteger0);
      Short short0 = new Short((short)1);
      Character character0 = new Character('Y');
      jexlArithmetic0.startsWith(short0, character0);
      BigDecimal bigDecimal0 = new BigDecimal(1.7976931348623157E308);
      Long long1 = new Long(2170L);
      Number number0 = jexlArithmetic0.narrowLong(bigDecimal0, long1, (-2037));
      jexlArithmetic0.positivize(number0);
      AtomicBoolean atomicBoolean0 = new AtomicBoolean();
      jexlArithmetic0.not(atomicBoolean0);
      // Undeclared exception!
      try { 
        jexlArithmetic0.negate(""'IDU"");
        fail(""Expecting exception: ArithmeticException"");
      } catch(ArithmeticException e) {
         //
         // Object negate:('IDU)
         //
         verifyException(""org.apache.commons.jexl3.JexlArithmetic"", e);
      }
  }"
975,"    public Object subtract(final Object left, final Object right) {
        if (left == null && right == null) {
            return controlNullNullOperands();
        }
        // if both (non null) args fit as long
        final Number ln = asLongNumber(left);
        final Number rn = asLongNumber(right);
        if (ln != null && rn != null) {
            final long x = ln.longValue();
            final long y = rn.longValue();
            final long result = x - y;
            // detect overflow, see java8 Math.subtractExact
            if (((x ^ y) & (x ^ result)) < 0) {
                return BigInteger.valueOf(x).subtract(BigInteger.valueOf(y));
            }
            return narrowLong(left, right, result);
        }
        // if either are bigdecimal use that type
        if (left instanceof BigDecimal || right instanceof BigDecimal) {
            final BigDecimal l = toBigDecimal(left);
            final BigDecimal r = toBigDecimal(right);
            final BigDecimal result = l.subtract(r, getMathContext());
            return narrowBigDecimal(left, right, result);
        }
        // if either are floating point (double or float) use double
        if (isFloatingPointNumber(left) || isFloatingPointNumber(right)) {
            final double l = toDouble(left);
            final double r = toDouble(right);
            return l - r;
        }
        // otherwise treat as integers
        final BigInteger l = toBigInteger(left);
        final BigInteger r = toBigInteger(right);
        final BigInteger result = l.subtract(r);
        return narrowBigInteger(left, right, result);
    }","  public void test252()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true);
      MathContext mathContext0 = MathContext.DECIMAL32;
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.createWithOptions(true, mathContext0, 2263);
      JexlEngine.getThreadContext();
      JexlArithmetic jexlArithmetic2 = jexlArithmetic1.options((JexlContext) null);
      JexlArithmetic jexlArithmetic3 = new JexlArithmetic(true);
      Integer integer0 = jexlArithmetic3.size((Object) jexlArithmetic1);
      // Undeclared exception!
      try { 
        jexlArithmetic2.subtract(integer0, (Object) null);
        fail(""Expecting exception: ArithmeticException"");
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.JexlArithmetic"", e);
      }
  }"
976,"    public boolean greaterThan(final Object left, final Object right) {
        if ((left == right) || left == null || right == null) {
            return false;
        }
        return compare(left, right, "">"") > 0;
    }","  public void test253()  throws Throwable  {
      int int0 = 0;
      RoundingMode roundingMode0 = RoundingMode.CEILING;
      MathContext mathContext0 = new MathContext(0, roundingMode0);
      int int1 = (-1943);
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false, mathContext0, (-1943));
      Character character0 = Character.valueOf('*');
      // Undeclared exception!
      try { 
        jexlArithmetic0.greaterThan(character0, mathContext0);
        fail(""Expecting exception: ArithmeticException"");
      } catch(ArithmeticException e) {
         //
         // Long coercion: java.math.MathContext:(precision=0 roundingMode=CEILING)
         //
         verifyException(""org.apache.commons.jexl3.JexlArithmetic"", e);
      }
  }"
977,"    public Object multiply(final Object left, final Object right) {
        if (left == null && right == null) {
            return controlNullNullOperands();
        }
        // if both (non null) args fit as int
        final Number ln = asLongNumber(left);
        final Number rn = asLongNumber(right);
        if (ln != null && rn != null) {
            final long x = ln.longValue();
            final long y = rn.longValue();
            final long result = x * y;
            // detect overflow
            if (!isMultiplyExact(x, y, result)) {
                return BigInteger.valueOf(x).multiply(BigInteger.valueOf(y));
            }
            return narrowLong(left, right, result);
        }
        // if either are bigdecimal use that type
        if (left instanceof BigDecimal || right instanceof BigDecimal) {
            final BigDecimal l = toBigDecimal(left);
            final BigDecimal r = toBigDecimal(right);
            final BigDecimal result = l.multiply(r, getMathContext());
            return narrowBigDecimal(left, right, result);
        }
        // if either are floating point (double or float) use double
        if (isFloatingPointNumber(left) || isFloatingPointNumber(right)) {
            final double l = toDouble(left);
            final double r = toDouble(right);
            return l * r;
        }
        // otherwise treat as integers
        final BigInteger l = toBigInteger(left);
        final BigInteger r = toBigInteger(right);
        final BigInteger result = l.multiply(r);
        return narrowBigInteger(left, right, result);
    }","  public void test254()  throws Throwable  {
      MathContext mathContext0 = MathContext.DECIMAL32;
      int int0 = (-2037);
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false, mathContext0, (-2037));
      Object object0 = jexlArithmetic0.not(mathContext0);
      jexlArithmetic0.greaterThan((Object) null, object0);
      long long0 = 0L;
      AtomicBoolean atomicBoolean0 = new AtomicBoolean(true);
      // Undeclared exception!
      try { 
        jexlArithmetic0.multiply(atomicBoolean0, mathContext0);
        fail(""Expecting exception: ArithmeticException"");
      } catch(ArithmeticException e) {
         //
         // BigInteger coercion: java.math.MathContext:(precision=7 roundingMode=HALF_EVEN)
         //
         verifyException(""org.apache.commons.jexl3.JexlArithmetic"", e);
      }
  }"
978,"    public Object negate(final Object val) {
        if (val == null) {
            controlNullOperand();
            return null;
        }
        if (val instanceof Integer) {
            return -((Integer) val);
        }
        if (val instanceof Double) {
            return - ((Double) val);
        }
        if (val instanceof Long) {
            return -((Long) val);
        }
        if (val instanceof BigDecimal) {
            return ((BigDecimal) val).negate();
        }
        if (val instanceof BigInteger) {
            return ((BigInteger) val).negate();
        }
        if (val instanceof Float) {
            return -((Float) val);
        }
        if (val instanceof Short) {
            return (short) -((Short) val);
        }
        if (val instanceof Byte) {
            return (byte) -((Byte) val);
        }
        if (val instanceof Boolean) {
            return !(Boolean) val;
        }
        if (val instanceof AtomicBoolean) {
            return !((AtomicBoolean) val).get();
        }
        throw new ArithmeticException(""Object negate:("" + val + "")"");
    }","  public void test255()  throws Throwable  {
      MathContext mathContext0 = MathContext.DECIMAL32;
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false, mathContext0, (-2037));
      Object object0 = jexlArithmetic0.not(mathContext0);
      jexlArithmetic0.greaterThan((Object) null, object0);
      Long long0 = new Long(0L);
      jexlArithmetic0.bitwiseXor(long0, long0);
      BigInteger bigInteger0 = BigInteger.ONE;
      Class<String> class0 = String.class;
      Number number0 = jexlArithmetic0.narrowNumber(bigInteger0, class0);
      jexlArithmetic0.bitwiseXor(number0, bigInteger0);
      Short short0 = new Short((short)1);
      Character character0 = new Character('Y');
      jexlArithmetic0.startsWith(short0, character0);
      BigDecimal bigDecimal0 = new BigDecimal(1.7976931348623157E308);
      AtomicBoolean atomicBoolean0 = new AtomicBoolean(false);
      jexlArithmetic0.greaterThanOrEqual(bigInteger0, atomicBoolean0);
      bigDecimal0.toString();
      Long long1 = new Long(2170L);
      Number number1 = jexlArithmetic0.narrowLong(bigDecimal0, long1, (-2037));
      jexlArithmetic0.positivize(number1);
      // Undeclared exception!
      try { 
        jexlArithmetic0.negate(""'IDU"");
        fail(""Expecting exception: ArithmeticException"");
      } catch(ArithmeticException e) {
         //
         // Object negate:('IDU)
         //
         verifyException(""org.apache.commons.jexl3.JexlArithmetic"", e);
      }
  }"
979,"    protected Number narrowBigDecimal(final Object lhs, final Object rhs, final BigDecimal bigd) {
        if (isNumberable(lhs) || isNumberable(rhs)) {
            try {
                final long l = bigd.longValueExact();
                // coerce to int when possible (int being so often used in method parms)
                if (l <= Integer.MAX_VALUE && l >= Integer.MIN_VALUE) {
                    return (int) l;
                }
                return l;
            } catch (final ArithmeticException xa) {
                // ignore, no exact value possible
            }
        }
        return bigd;
    }","  public void test256()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      Float float0 = new Float((-3767.0593F));
      Long long0 = new Long((-2172L));
      jexlArithmetic0.lessThan(float0, long0);
      MathContext mathContext0 = MathContext.DECIMAL32;
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.createWithOptions(false, mathContext0, 16);
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      jexlArithmetic1.narrowBigDecimal(""Long coercion: "", long0, bigDecimal0);
      // Undeclared exception!
      try { 
        Pattern.compile((String) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
980,"    public Object add(final Object left, final Object right) {
        if (left == null && right == null) {
            return controlNullNullOperands();
        }
        final boolean strconcat = strict
                            ? left instanceof String || right instanceof String
                            : left instanceof String && right instanceof String;
        if (!strconcat) {
            try {
                // if both (non null) args fit as long
                final Number ln = asLongNumber(left);
                final Number rn = asLongNumber(right);
                if (ln != null && rn != null) {
                    final long x = ln.longValue();
                    final long y = rn.longValue();
                    final long result = x + y;
                    // detect overflow, see java8 Math.addExact
                    if (((x ^ result) & (y ^ result)) < 0) {
                        return BigInteger.valueOf(x).add(BigInteger.valueOf(y));
                    }
                    return narrowLong(left, right, result);
                }
                // if either are bigdecimal use that type
                if (left instanceof BigDecimal || right instanceof BigDecimal) {
                    final BigDecimal l = toBigDecimal(left);
                    final BigDecimal r = toBigDecimal(right);
                    final BigDecimal result = l.add(r, getMathContext());
                    return narrowBigDecimal(left, right, result);
                }
                // if either are floating point (double or float) use double
                if (isFloatingPointNumber(left) || isFloatingPointNumber(right)) {
                    final double l = toDouble(left);
                    final double r = toDouble(right);
                    return l + r;
                }
                // otherwise treat as (big) integers
                final BigInteger l = toBigInteger(left);
                final BigInteger r = toBigInteger(right);
                final BigInteger result = l.add(r);
                return narrowBigInteger(left, right, result);
            } catch (final java.lang.NumberFormatException nfe) {
                if (left == null || right == null) {
                    controlNullOperand();
                }
            }
        }
        return toString(left).concat(toString(right));
    }","  public void test257()  throws Throwable  {
      String string0 = null;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      jexlArithmetic0.controlNullNullOperands();
      int int0 = (-228);
      BigDecimal bigDecimal0 = new BigDecimal((-228));
      bigDecimal0.longValueExact();
      jexlArithmetic0.narrowBigDecimal((Object) null, (Object) null, bigDecimal0);
      BigDecimal bigDecimal1 = JexlArithmetic.BIGD_DOUBLE_MIN_VALUE;
      bigDecimal0.remainder(bigDecimal1);
      BigInteger bigInteger0 = JexlArithmetic.BIGI_LONG_MAX_VALUE;
      BigDecimal bigDecimal2 = BigDecimal.ZERO;
      Number number0 = jexlArithmetic0.narrowBigDecimal(bigInteger0, bigDecimal2, bigDecimal2);
      BigInteger bigInteger1 = BigInteger.valueOf((-228L));
      BigInteger bigInteger2 = bigInteger0.min(bigInteger1);
      int int1 = 35;
      bigInteger2.shiftLeft(35);
      jexlArithmetic0.toBigInteger(bigDecimal0);
      JexlArithmetic.MapBuilder jexlArithmetic_MapBuilder0 = jexlArithmetic0.mapBuilder(34);
      Character character0 = new Character('=');
      bigInteger0.testBit(34);
      jexlArithmetic_MapBuilder0.put(number0, character0);
      // Undeclared exception!
      try { 
        jexlArithmetic0.add(bigInteger2, jexlArithmetic_MapBuilder0);
        fail(""Expecting exception: ArithmeticException"");
      } catch(ArithmeticException e) {
         //
         // BigInteger coercion: org.apache.commons.jexl3.internal.MapBuilder:(org.apache.commons.jexl3.internal.MapBuilder@2)
         //
         verifyException(""org.apache.commons.jexl3.JexlArithmetic"", e);
      }
  }"
981,"    public Object subtract(final Object left, final Object right) {
        if (left == null && right == null) {
            return controlNullNullOperands();
        }
        // if both (non null) args fit as long
        final Number ln = asLongNumber(left);
        final Number rn = asLongNumber(right);
        if (ln != null && rn != null) {
            final long x = ln.longValue();
            final long y = rn.longValue();
            final long result = x - y;
            // detect overflow, see java8 Math.subtractExact
            if (((x ^ y) & (x ^ result)) < 0) {
                return BigInteger.valueOf(x).subtract(BigInteger.valueOf(y));
            }
            return narrowLong(left, right, result);
        }
        // if either are bigdecimal use that type
        if (left instanceof BigDecimal || right instanceof BigDecimal) {
            final BigDecimal l = toBigDecimal(left);
            final BigDecimal r = toBigDecimal(right);
            final BigDecimal result = l.subtract(r, getMathContext());
            return narrowBigDecimal(left, right, result);
        }
        // if either are floating point (double or float) use double
        if (isFloatingPointNumber(left) || isFloatingPointNumber(right)) {
            final double l = toDouble(left);
            final double r = toDouble(right);
            return l - r;
        }
        // otherwise treat as integers
        final BigInteger l = toBigInteger(left);
        final BigInteger r = toBigInteger(right);
        final BigInteger result = l.subtract(r);
        return narrowBigInteger(left, right, result);
    }","  public void test258()  throws Throwable  {
      MathContext mathContext0 = MathContext.DECIMAL64;
      Boolean boolean0 = Boolean.FALSE;
      mathContext0.equals(boolean0);
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false, mathContext0, Integer.MIN_VALUE);
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.createWithOptions(false, mathContext0, Integer.MIN_VALUE);
      BigDecimal bigDecimal0 = new BigDecimal((long) Integer.MIN_VALUE);
      bigDecimal0.toPlainString();
      Number number0 = jexlArithmetic1.narrowBigDecimal((Object) null, mathContext0, bigDecimal0);
      Pattern pattern0 = JexlArithmetic.FLOAT_PATTERN;
      pattern0.split((CharSequence) ""-2147483648"");
      Double double0 = new Double(1.0);
      Double double1 = new Double(1.0);
      jexlArithmetic1.narrowLong(pattern0, double0, 16380L);
      BigDecimal bigDecimal1 = JexlArithmetic.BIGD_DOUBLE_MIN_VALUE;
      mathContext0.equals(bigDecimal1);
      jexlArithmetic1.toString((Object) pattern0);
      Double double2 = new Double(1038.679142239);
      Object object0 = jexlArithmetic0.subtract((Object) null, double2);
      Object object1 = jexlArithmetic0.logicalNot((Object) null);
      Double double3 = new Double(0.0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      jexlArithmetic0.empty(double3);
      Object object2 = jexlArithmetic0.subtract(object1, object0);
      jexlArithmetic1.add(object2, boolean0);
      jexlArithmetic0.toDouble(number0);
      Long long0 = new Long((-3087L));
      // Undeclared exception!
      try { 
        jexlArithmetic1.subtract(bigDecimal0, long0);
        fail(""Expecting exception: NumberFormatException"");
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.math.BigDecimal"", e);
      }
  }"
982,"    public boolean equals(final Object left, final Object right) {
        if (left == right) {
            return true;
        }
        if (left == null || right == null) {
            return false;
        }
        if (left instanceof Boolean || right instanceof Boolean) {
            return toBoolean(left) == toBoolean(right);
        }
        return compare(left, right, ""=="") == 0;
    }","  public void test259()  throws Throwable  {
      MathContext mathContext0 = MathContext.UNLIMITED;
      int int0 = 5358;
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true, mathContext0, 5358);
      JexlOptions jexlOptions0 = new JexlOptions();
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.options(jexlOptions0);
      Double double0 = new Double(720.3789305155);
      // Undeclared exception!
      try { 
        jexlArithmetic1.equals((Object) double0, (Object) mathContext0);
        fail(""Expecting exception: ArithmeticException"");
      } catch(ArithmeticException e) {
         //
         // Double coercion: java.math.MathContext:(precision=0 roundingMode=HALF_UP)
         //
         verifyException(""org.apache.commons.jexl3.JexlArithmetic"", e);
      }
  }"
983,"    public Object divide(final Object left, final Object right) {
        if (left == null && right == null) {
            return controlNullNullOperands();
        }
        // if both (non null) args fit as long
        final Number ln = asLongNumber(left);
        final Number rn = asLongNumber(right);
        if (ln != null && rn != null) {
            final long x = ln.longValue();
            final long y = rn.longValue();
            if (y == 0L) {
                throw new ArithmeticException(""/"");
            }
            final long result = x  / y;
            return narrowLong(left, right, result);
        }
        // if either are bigdecimal use that type
        if (left instanceof BigDecimal || right instanceof BigDecimal) {
            final BigDecimal l = toBigDecimal(left);
            final BigDecimal r = toBigDecimal(right);
            if (BigDecimal.ZERO.equals(r)) {
                throw new ArithmeticException(""/"");
            }
            final BigDecimal result = l.divide(r, getMathContext());
            return narrowBigDecimal(left, right, result);
        }
        // if either are floating point (double or float) use double
        if (isFloatingPointNumber(left) || isFloatingPointNumber(right)) {
            final double l = toDouble(left);
            final double r = toDouble(right);
            if (r == 0.0) {
                throw new ArithmeticException(""/"");
            }
            return l / r;
        }
        // otherwise treat as integers
        final BigInteger l = toBigInteger(left);
        final BigInteger r = toBigInteger(right);
        if (BigInteger.ZERO.equals(r)) {
            throw new ArithmeticException(""/"");
        }
        final BigInteger result = l.divide(r);
        return narrowBigInteger(left, right, result);
    }","  public void test260()  throws Throwable  {
      MathContext mathContext0 = MathContext.DECIMAL32;
      int int0 = (-2776);
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false, mathContext0, (-2776));
      jexlArithmetic0.createWithOptions(true, mathContext0, (-563));
      BigInteger bigInteger0 = JexlArithmetic.BIGI_LONG_MAX_VALUE;
      Integer integer0 = new Integer((-563));
      jexlArithmetic0.size((Object) bigInteger0, integer0);
      mathContext0.equals(jexlArithmetic0);
      String string0 = null;
      // Undeclared exception!
      try { 
        jexlArithmetic0.divide((Object) null, mathContext0);
        fail(""Expecting exception: ArithmeticException"");
      } catch(ArithmeticException e) {
         //
         // BigInteger coercion: java.math.MathContext:(precision=7 roundingMode=HALF_EVEN)
         //
         verifyException(""org.apache.commons.jexl3.JexlArithmetic"", e);
      }
  }"
984,"    public Object subtract(final Object left, final Object right) {
        if (left == null && right == null) {
            return controlNullNullOperands();
        }
        // if both (non null) args fit as long
        final Number ln = asLongNumber(left);
        final Number rn = asLongNumber(right);
        if (ln != null && rn != null) {
            final long x = ln.longValue();
            final long y = rn.longValue();
            final long result = x - y;
            // detect overflow, see java8 Math.subtractExact
            if (((x ^ y) & (x ^ result)) < 0) {
                return BigInteger.valueOf(x).subtract(BigInteger.valueOf(y));
            }
            return narrowLong(left, right, result);
        }
        // if either are bigdecimal use that type
        if (left instanceof BigDecimal || right instanceof BigDecimal) {
            final BigDecimal l = toBigDecimal(left);
            final BigDecimal r = toBigDecimal(right);
            final BigDecimal result = l.subtract(r, getMathContext());
            return narrowBigDecimal(left, right, result);
        }
        // if either are floating point (double or float) use double
        if (isFloatingPointNumber(left) || isFloatingPointNumber(right)) {
            final double l = toDouble(left);
            final double r = toDouble(right);
            return l - r;
        }
        // otherwise treat as integers
        final BigInteger l = toBigInteger(left);
        final BigInteger r = toBigInteger(right);
        final BigInteger result = l.subtract(r);
        return narrowBigInteger(left, right, result);
    }","  public void test261()  throws Throwable  {
      MathContext mathContext0 = MathContext.DECIMAL64;
      Boolean boolean0 = Boolean.FALSE;
      mathContext0.equals(boolean0);
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false, mathContext0, Integer.MIN_VALUE);
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.createWithOptions(false, mathContext0, Integer.MIN_VALUE);
      BigDecimal bigDecimal0 = new BigDecimal((long) Integer.MIN_VALUE);
      bigDecimal0.toPlainString();
      jexlArithmetic1.narrowBigDecimal((Object) null, mathContext0, bigDecimal0);
      Pattern pattern0 = JexlArithmetic.FLOAT_PATTERN;
      Boolean.compare(false, true);
      pattern0.split((CharSequence) ""-2147483648"");
      Double double0 = new Double(1.0);
      Double double1 = new Double(1.0);
      jexlArithmetic1.narrowLong(pattern0, double0, 16380L);
      jexlArithmetic1.toString((Object) pattern0);
      Double double2 = new Double(1038.679142239);
      Object object0 = jexlArithmetic0.subtract((Object) null, double2);
      Object object1 = jexlArithmetic0.logicalNot((Object) null);
      Double double3 = new Double(0.0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      jexlArithmetic0.empty(double3);
      Object object2 = jexlArithmetic0.subtract(object1, object0);
      jexlArithmetic1.add(object2, boolean0);
      BigInteger bigInteger0 = BigInteger.ONE;
      jexlArithmetic1.narrowBigInteger((Object) null, jexlArithmetic0, bigInteger0);
      Long long0 = new Long((-3087L));
      // Undeclared exception!
      try { 
        jexlArithmetic1.subtract(bigDecimal0, long0);
        fail(""Expecting exception: NumberFormatException"");
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.math.BigDecimal"", e);
      }
  }"
985,"    public ArrayBuilder arrayBuilder(final int size) {
        return new org.apache.commons.jexl3.internal.ArrayBuilder(size);
    }","  public void test262()  throws Throwable  {
      MathContext mathContext0 = MathContext.DECIMAL64;
      Boolean boolean0 = Boolean.FALSE;
      mathContext0.equals(boolean0);
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true, mathContext0, Integer.MIN_VALUE);
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.createWithOptions(false, mathContext0, Integer.MIN_VALUE);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      bigDecimal0.toPlainString();
      jexlArithmetic1.narrowBigDecimal((Object) null, mathContext0, bigDecimal0);
      Pattern pattern0 = JexlArithmetic.FLOAT_PATTERN;
      // Undeclared exception!
      try { 
        jexlArithmetic1.arrayBuilder(Integer.MIN_VALUE);
        fail(""Expecting exception: NegativeArraySizeException"");
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.internal.ArrayBuilder"", e);
      }
  }"
986,"    public int toInteger(final Object val) {
        if (val == null) {
            controlNullOperand();
            return 0;
        }
        if (val instanceof Double) {
            final Double dval = (Double) val;
            if (Double.isNaN(dval)) {
                return 0;
            }
            return dval.intValue();
        }
        if (val instanceof Number) {
            return ((Number) val).intValue();
        }
        if (val instanceof String) {
            if ("""".equals(val)) {
                return 0;
            }
            return Integer.parseInt((String) val);
        }
        if (val instanceof Boolean) {
            return ((Boolean) val) ? 1 : 0;
        }
        if (val instanceof AtomicBoolean) {
            return ((AtomicBoolean) val).get() ? 1 : 0;
        }
        if (val instanceof Character) {
            return ((Character) val);
        }

        throw new ArithmeticException(""Integer coercion: ""
                + val.getClass().getName() + "":("" + val + "")"");
    }","  public void test263()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      MathContext mathContext0 = new MathContext(0);
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.createWithOptions(false, mathContext0, 1602);
      JexlArithmetic jexlArithmetic2 = jexlArithmetic0.createWithOptions(false, mathContext0, 0);
      JexlOptions jexlOptions0 = new JexlOptions();
      String[] stringArray0 = new String[5];
      stringArray0[0] = ""_Y6};D"";
      stringArray0[1] = ""-Q<S(c0j.&U,m}A"";
      stringArray0[2] = ""I 9HK+Yv*PK7("";
      stringArray0[3] = ""]: '"";
      stringArray0[4] = ""annotation"";
      jexlOptions0.setFlags(stringArray0);
      JexlArithmetic jexlArithmetic3 = jexlArithmetic2.options(jexlOptions0);
      Class<Long> class0 = Long.TYPE;
      jexlArithmetic3.narrowAccept(class0, class0);
      Integer integer0 = new Integer(1602);
      jexlArithmetic1.toInteger(integer0);
  }"
987,"    public boolean greaterThanOrEqual(final Object left, final Object right) {
        if (left == right) {
            return true;
        }
        if (left == null || right == null) {
            return false;
        }
        return compare(left, right, "">="") >= 0;
    }","  public void test264()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      MathContext mathContext0 = new MathContext(0);
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.createWithOptions(true, mathContext0, 1602);
      JexlArithmetic jexlArithmetic2 = jexlArithmetic0.createWithOptions(true, mathContext0, 0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      JexlOptions jexlOptions0 = new JexlOptions();
      String[] stringArray0 = new String[5];
      stringArray0[0] = ""_Y6};D"";
      stringArray0[1] = ""-Q<S(c0j.&U,m}A"";
      stringArray0[2] = ""I 9HK+Yv*PK7("";
      stringArray0[3] = ""]: '"";
      stringArray0[4] = ""annotation"";
      jexlOptions0.setFlags(stringArray0);
      JexlArithmetic jexlArithmetic3 = jexlArithmetic2.options(jexlOptions0);
      Class<Long> class0 = Long.class;
      jexlArithmetic3.narrowAccept(class0, class0);
      BigInteger bigInteger0 = BigInteger.ONE;
      JexlArithmetic jexlArithmetic4 = new JexlArithmetic(false);
      Boolean boolean0 = new Boolean(""I 9HK+Yv*PK7("");
      Boolean boolean1 = jexlArithmetic4.isEmpty((Object) ""I 9HK+Yv*PK7("", boolean0);
      Object object0 = jexlArithmetic3.logicalNot(boolean1);
      jexlArithmetic1.greaterThanOrEqual(bigInteger0, object0);
  }"
988,"    public BigInteger toBigInteger(final Object val) {
        if (val == null) {
            controlNullOperand();
            return BigInteger.ZERO;
        }
        if (val instanceof BigInteger) {
            return (BigInteger) val;
        }
        if (val instanceof Double) {
            final Double dval = (Double) val;
            if (Double.isNaN(dval)) {
                return BigInteger.ZERO;
            }
            return BigInteger.valueOf(dval.longValue());
        }
        if (val instanceof BigDecimal) {
            return ((BigDecimal) val).toBigInteger();
        }
        if (val instanceof Number) {
            return BigInteger.valueOf(((Number) val).longValue());
        }
        if (val instanceof Boolean) {
            return BigInteger.valueOf(((Boolean) val) ? 1L : 0L);
        }
        if (val instanceof AtomicBoolean) {
            return BigInteger.valueOf(((AtomicBoolean) val).get() ? 1L : 0L);
        }
        if (val instanceof String) {
            final String string = (String) val;
            if ("""".equals(string)) {
                return BigInteger.ZERO;
            }
            return new BigInteger(string);
        }
        if (val instanceof Character) {
            final int i = ((Character) val);
            return BigInteger.valueOf(i);
        }

        throw new ArithmeticException(""BigInteger coercion: ""
                + val.getClass().getName() + "":("" + val + "")"");
    }","  public void test265()  throws Throwable  {
      MathContext mathContext0 = MathContext.DECIMAL64;
      Boolean boolean0 = Boolean.FALSE;
      mathContext0.equals(boolean0);
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false, mathContext0, Integer.MIN_VALUE);
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.createWithOptions(false, mathContext0, Integer.MIN_VALUE);
      BigDecimal bigDecimal0 = new BigDecimal((long) Integer.MIN_VALUE);
      bigDecimal0.toPlainString();
      jexlArithmetic1.narrowBigDecimal((Object) null, mathContext0, bigDecimal0);
      Pattern pattern0 = JexlArithmetic.FLOAT_PATTERN;
      pattern0.split((CharSequence) ""-2147483648"");
      pattern0.asPredicate();
      Double double0 = new Double(1.0);
      Double.min(1.0, 0.0);
      jexlArithmetic1.narrowLong(pattern0, double0, 16380L);
      jexlArithmetic1.toString((Object) pattern0);
      Double double1 = new Double(1038.679142239);
      jexlArithmetic0.subtract((Object) null, double1);
      jexlArithmetic0.logicalNot((Object) null);
      JexlArithmetic.isMultiplyExact((-1L), (-1L), 0L);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigDecimal bigDecimal1 = new BigDecimal(bigInteger0);
      jexlArithmetic1.toBigInteger(bigDecimal1);
  }"
989,"    public final Object logicalNot(final Object arg) {
        return not(arg);
    }","  public void test266()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true);
      JexlArithmetic.SetBuilder jexlArithmetic_SetBuilder0 = jexlArithmetic0.setBuilder(15);
      jexlArithmetic_SetBuilder0.create();
      Float float0 = new Float((-3767.0593F));
      Float.min(1.0F, 0.0F);
      jexlArithmetic0.toInteger(float0);
      jexlArithmetic0.mapBuilder(0);
      // Undeclared exception!
      try { 
        jexlArithmetic0.logicalNot((Object) null);
        fail(""Expecting exception: ArithmeticException"");
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.JexlArithmetic"", e);
      }
  }"
990,"    protected Number narrowBigInteger(final Object lhs, final Object rhs, final BigInteger bigi) {
        //coerce to long if possible
        if (!(lhs instanceof BigInteger || rhs instanceof BigInteger)
                && bigi.compareTo(BIGI_LONG_MAX_VALUE) <= 0
                && bigi.compareTo(BIGI_LONG_MIN_VALUE) >= 0) {
            // coerce to int if possible
            final long l = bigi.longValue();
            // coerce to int when possible (int being so often used in method parms)
            if (!(lhs instanceof Long || rhs instanceof Long)
                    && l <= Integer.MAX_VALUE
                    && l >= Integer.MIN_VALUE) {
                return (int) l;
            }
            return l;
        }
        return bigi;
    }","  public void test267()  throws Throwable  {
      MathContext mathContext0 = MathContext.DECIMAL32;
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true, mathContext0, Integer.MIN_VALUE);
      JexlOptions jexlOptions0 = new JexlOptions();
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.options(jexlOptions0);
      JexlArithmetic jexlArithmetic2 = jexlArithmetic1.createWithOptions(true, mathContext0, Integer.MIN_VALUE);
      AtomicBoolean atomicBoolean0 = new AtomicBoolean();
      Object object0 = jexlArithmetic2.complement(atomicBoolean0);
      BigInteger bigInteger0 = JexlArithmetic.BIGI_LONG_MIN_VALUE;
      jexlArithmetic2.narrowBigInteger(object0, jexlArithmetic0, bigInteger0);
  }"
991,"    protected int compare(final Object left, final Object right, final String operator) {
        if (left != null && right != null) {
            if (left instanceof BigDecimal || right instanceof BigDecimal) {
                final BigDecimal l = toBigDecimal(left);
                final BigDecimal r = toBigDecimal(right);
                return l.compareTo(r);
            }
            if (left instanceof BigInteger || right instanceof BigInteger) {
                final BigInteger l = toBigInteger(left);
                final BigInteger r = toBigInteger(right);
                return l.compareTo(r);
            }
            if (isFloatingPoint(left) || isFloatingPoint(right)) {
                final double lhs = toDouble(left);
                final double rhs = toDouble(right);
                if (Double.isNaN(lhs)) {
                    if (Double.isNaN(rhs)) {
                        return 0;
                    }
                    return -1;
                }
                if (Double.isNaN(rhs)) {
                    // lhs is not NaN
                    return +1;
                }
                if (lhs < rhs) {
                    return -1;
                }
                if (lhs > rhs) {
                    return +1;
                }
                return 0;
            }
            if (isNumberable(left) || isNumberable(right)) {
                final long lhs = toLong(left);
                final long rhs = toLong(right);
                if (lhs < rhs) {
                    return -1;
                }
                if (lhs > rhs) {
                    return +1;
                }
                return 0;
            }
            if (left instanceof String || right instanceof String) {
                return toString(left).compareTo(toString(right));
            }
            if (""=="".equals(operator)) {
                return left.equals(right) ? 0 : -1;
            }
            if (left instanceof Comparable<?>) {
                @SuppressWarnings(""unchecked"") // OK because of instanceof check above
                final Comparable<Object> comparable = (Comparable<Object>) left;
                return comparable.compareTo(right);
            }
            if (right instanceof Comparable<?>) {
                @SuppressWarnings(""unchecked"") // OK because of instanceof check above
                final Comparable<Object> comparable = (Comparable<Object>) right;
                return comparable.compareTo(left);
            }
        }
        throw new ArithmeticException(""Object comparison:("" + left + "" "" + operator + "" "" + right + "")"");
    }","  public void test268()  throws Throwable  {
      MathContext mathContext0 = MathContext.DECIMAL128;
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true, mathContext0, 3941);
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.createWithOptions(true, mathContext0, 3941);
      MathContext mathContext1 = MathContext.DECIMAL128;
      jexlArithmetic1.size((Object) mathContext1, (Integer) null);
      char[] charArray0 = new char[8];
      charArray0[0] = 'U';
      charArray0[1] = 'g';
      charArray0[2] = 'C';
      charArray0[3] = 'w';
      charArray0[4] = '+';
      charArray0[5] = '$';
      charArray0[6] = '*';
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.ZERO;
      bigInteger0.compareTo(bigInteger1);
      // Undeclared exception!
      try { 
        jexlArithmetic1.compare(bigInteger0, (Object) null, ""COMPLEMENT"");
        fail(""Expecting exception: ArithmeticException"");
      } catch(ArithmeticException e) {
         //
         // Object comparison:(10 COMPLEMENT null)
         //
         verifyException(""org.apache.commons.jexl3.JexlArithmetic"", e);
      }
  }"
992,"    protected JexlArithmetic createWithOptions(final boolean astrict, final MathContext bigdContext, final int bigdScale) {
        if (ctor != null) {
            try {
                return ctor.newInstance(astrict, bigdContext, bigdScale);
            } catch (IllegalAccessException | IllegalArgumentException
                    | InstantiationException | InvocationTargetException xany) {
                // it was worth the try
            }
        }
        return new JexlArithmetic(astrict, bigdContext, bigdScale);
    }","  public void test269()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      Float float0 = new Float((-3767.0593F));
      Long long0 = new Long((-2172L));
      jexlArithmetic0.lessThan(float0, long0);
      MathContext mathContext0 = MathContext.DECIMAL32;
      Class<MathContext> class0 = MathContext.class;
      jexlArithmetic0.narrowNumber(float0, class0);
      jexlArithmetic0.setBuilder(16);
      jexlArithmetic0.createWithOptions(false, mathContext0, 16);
      // Undeclared exception!
      try { 
        Pattern.compile((String) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
993,"    protected boolean narrowAccept(final Class<?> narrow, final Class<?> source) {
        return narrow == null || narrow.equals(source);
    }","  public void test270()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true);
      MathContext mathContext0 = new MathContext(0);
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.createWithOptions(true, mathContext0, 1602);
      JexlArithmetic jexlArithmetic2 = jexlArithmetic1.options((JexlContext) null);
      JexlOptions jexlOptions0 = new JexlOptions();
      String[] stringArray0 = new String[5];
      stringArray0[0] = ""_Y6};D"";
      stringArray0[1] = ""-Q<S(c0j.&U,m}A"";
      stringArray0[2] = ""I 9HK+Yv*PK7("";
      stringArray0[3] = ""]: '"";
      stringArray0[4] = ""annotation"";
      BigInteger bigInteger0 = JexlArithmetic.BIGI_LONG_MAX_VALUE;
      Class<Object> class0 = Object.class;
      jexlArithmetic2.narrowNumber(bigInteger0, class0);
      jexlOptions0.setFlags(stringArray0);
      JexlArithmetic jexlArithmetic3 = jexlArithmetic2.options(jexlOptions0);
      Class<Long> class1 = Long.class;
      jexlArithmetic3.narrowAccept(class1, class1);
  }"
994,"    protected int compare(final Object left, final Object right, final String operator) {
        if (left != null && right != null) {
            if (left instanceof BigDecimal || right instanceof BigDecimal) {
                final BigDecimal l = toBigDecimal(left);
                final BigDecimal r = toBigDecimal(right);
                return l.compareTo(r);
            }
            if (left instanceof BigInteger || right instanceof BigInteger) {
                final BigInteger l = toBigInteger(left);
                final BigInteger r = toBigInteger(right);
                return l.compareTo(r);
            }
            if (isFloatingPoint(left) || isFloatingPoint(right)) {
                final double lhs = toDouble(left);
                final double rhs = toDouble(right);
                if (Double.isNaN(lhs)) {
                    if (Double.isNaN(rhs)) {
                        return 0;
                    }
                    return -1;
                }
                if (Double.isNaN(rhs)) {
                    // lhs is not NaN
                    return +1;
                }
                if (lhs < rhs) {
                    return -1;
                }
                if (lhs > rhs) {
                    return +1;
                }
                return 0;
            }
            if (isNumberable(left) || isNumberable(right)) {
                final long lhs = toLong(left);
                final long rhs = toLong(right);
                if (lhs < rhs) {
                    return -1;
                }
                if (lhs > rhs) {
                    return +1;
                }
                return 0;
            }
            if (left instanceof String || right instanceof String) {
                return toString(left).compareTo(toString(right));
            }
            if (""=="".equals(operator)) {
                return left.equals(right) ? 0 : -1;
            }
            if (left instanceof Comparable<?>) {
                @SuppressWarnings(""unchecked"") // OK because of instanceof check above
                final Comparable<Object> comparable = (Comparable<Object>) left;
                return comparable.compareTo(right);
            }
            if (right instanceof Comparable<?>) {
                @SuppressWarnings(""unchecked"") // OK because of instanceof check above
                final Comparable<Object> comparable = (Comparable<Object>) right;
                return comparable.compareTo(left);
            }
        }
        throw new ArithmeticException(""Object comparison:("" + left + "" "" + operator + "" "" + right + "")"");
    }","  public void test271()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true);
      MathContext mathContext0 = MathContext.DECIMAL64;
      mathContext0.getRoundingMode();
      mathContext0.equals(jexlArithmetic0);
      jexlArithmetic0.size((Object) mathContext0);
      Boolean boolean0 = Boolean.FALSE;
      Boolean.compare(true, true);
      jexlArithmetic0.endsWith(boolean0, boolean0);
      jexlArithmetic0.endsWith(mathContext0, (Object) null);
      Integer integer0 = new Integer(0);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        jexlArithmetic0.compare(object0, (Object) null, ""ADD"");
        fail(""Expecting exception: ArithmeticException"");
      } catch(ArithmeticException e) {
         //
         // Object comparison:(java.lang.Object@60858ecc ADD null)
         //
         verifyException(""org.apache.commons.jexl3.JexlArithmetic"", e);
      }
  }"
995,"    public boolean greaterThan(final Object left, final Object right) {
        if ((left == right) || left == null || right == null) {
            return false;
        }
        return compare(left, right, "">"") > 0;
    }","  public void test272()  throws Throwable  {
      Float float0 = new Float((-14.77775561582136));
      Float.max(0.0F, 0.0F);
      Short short0 = new Short((short)0);
      BigInteger bigInteger0 = BigInteger.TEN;
      Integer integer0 = new Integer((-2776));
      Byte byte0 = new Byte((byte) (-14));
      JexlArithmetic.isMultiplyExact((short)0, (-2776), 0L);
      MathContext mathContext0 = MathContext.DECIMAL64;
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true, mathContext0, 14);
      BigDecimal bigDecimal0 = new BigDecimal((-14.77775561582136));
      // Undeclared exception!
      try { 
        jexlArithmetic0.greaterThan(bigInteger0, bigDecimal0);
        fail(""Expecting exception: NumberFormatException"");
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.math.BigDecimal"", e);
      }
  }"
996,"    public Object subtract(final Object left, final Object right) {
        if (left == null && right == null) {
            return controlNullNullOperands();
        }
        // if both (non null) args fit as long
        final Number ln = asLongNumber(left);
        final Number rn = asLongNumber(right);
        if (ln != null && rn != null) {
            final long x = ln.longValue();
            final long y = rn.longValue();
            final long result = x - y;
            // detect overflow, see java8 Math.subtractExact
            if (((x ^ y) & (x ^ result)) < 0) {
                return BigInteger.valueOf(x).subtract(BigInteger.valueOf(y));
            }
            return narrowLong(left, right, result);
        }
        // if either are bigdecimal use that type
        if (left instanceof BigDecimal || right instanceof BigDecimal) {
            final BigDecimal l = toBigDecimal(left);
            final BigDecimal r = toBigDecimal(right);
            final BigDecimal result = l.subtract(r, getMathContext());
            return narrowBigDecimal(left, right, result);
        }
        // if either are floating point (double or float) use double
        if (isFloatingPointNumber(left) || isFloatingPointNumber(right)) {
            final double l = toDouble(left);
            final double r = toDouble(right);
            return l - r;
        }
        // otherwise treat as integers
        final BigInteger l = toBigInteger(left);
        final BigInteger r = toBigInteger(right);
        final BigInteger result = l.subtract(r);
        return narrowBigInteger(left, right, result);
    }","  public void test273()  throws Throwable  {
      MathContext mathContext0 = MathContext.DECIMAL64;
      Boolean boolean0 = Boolean.FALSE;
      mathContext0.equals(boolean0);
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false, mathContext0, Integer.MIN_VALUE);
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.createWithOptions(false, mathContext0, Integer.MIN_VALUE);
      BigDecimal bigDecimal0 = new BigDecimal((long) Integer.MIN_VALUE);
      bigDecimal0.toPlainString();
      jexlArithmetic1.narrowBigDecimal((Object) null, mathContext0, bigDecimal0);
      Pattern pattern0 = JexlArithmetic.FLOAT_PATTERN;
      pattern0.split((CharSequence) ""-2147483648"");
      Double double0 = new Double(1.0);
      double double1 = new Double(1.0);
      jexlArithmetic1.narrowLong(pattern0, double0, 16380L);
      jexlArithmetic1.toString((Object) pattern0);
      Double double2 = new Double(1038.679142239);
      Object object0 = jexlArithmetic0.subtract((Object) null, double2);
      Object object1 = jexlArithmetic0.logicalNot((Object) null);
      Double double3 = new Double(0.0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      jexlArithmetic0.empty(double3);
      Object object2 = jexlArithmetic0.subtract(object1, object0);
      jexlArithmetic1.add(object2, boolean0);
      Long long0 = new Long((-3087L));
      // Undeclared exception!
      try { 
        jexlArithmetic1.subtract(bigDecimal0, long0);
        fail(""Expecting exception: NumberFormatException"");
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.math.BigDecimal"", e);
      }
  }"
997,"    public Object not(final Object val) {
        return !toBoolean(val);
    }","  public void test274()  throws Throwable  {
      MathContext mathContext0 = MathContext.DECIMAL64;
      Boolean boolean0 = Boolean.FALSE;
      mathContext0.equals(boolean0);
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false, mathContext0, Integer.MIN_VALUE);
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.createWithOptions(false, mathContext0, Integer.MIN_VALUE);
      BigDecimal bigDecimal0 = new BigDecimal((long) Integer.MIN_VALUE);
      bigDecimal0.toPlainString();
      jexlArithmetic1.narrowBigDecimal((Object) null, mathContext0, bigDecimal0);
      Pattern pattern0 = JexlArithmetic.FLOAT_PATTERN;
      pattern0.split((CharSequence) ""-2147483648"");
      pattern0.asPredicate();
      Double double0 = new Double(36.33054145288271);
      double double1 = new Float(0.0);
      jexlArithmetic1.narrowLong(pattern0, double0, 16380L);
      jexlArithmetic1.toString((Object) pattern0);
      Double double2 = new Double(1038.679142239);
      jexlArithmetic0.subtract((Object) null, double2);
      jexlArithmetic0.logicalNot((Object) null);
      BigInteger bigInteger0 = BigInteger.TEN;
      jexlArithmetic0.not(bigInteger0);
  }"
998,"    public int getMathScale() {
        return mathScale;
    }","  public void test275()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ""r0\""\"""");
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      jexlArithmetic0.getMathScale();
  }"
999,"    public Number narrow(final Number original) {
        return narrowNumber(original, null);
    }","  public void test276()  throws Throwable  {
      MathContext mathContext0 = MathContext.DECIMAL64;
      Boolean boolean0 = Boolean.FALSE;
      mathContext0.equals(boolean0);
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false, mathContext0, Integer.MIN_VALUE);
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.createWithOptions(false, mathContext0, Integer.MIN_VALUE);
      BigDecimal bigDecimal0 = new BigDecimal((long) Integer.MIN_VALUE);
      bigDecimal0.toPlainString();
      jexlArithmetic1.narrowBigDecimal((Object) null, mathContext0, bigDecimal0);
      Pattern pattern0 = JexlArithmetic.FLOAT_PATTERN;
      pattern0.split((CharSequence) ""-2147483648"");
      Double double0 = new Double(1.0);
      Double.min(1.0, 0.0);
      jexlArithmetic1.narrowLong(pattern0, double0, 16380L);
      jexlArithmetic1.toString((Object) pattern0);
      Double double1 = new Double(1038.679142239);
      jexlArithmetic0.subtract((Object) null, double1);
      jexlArithmetic0.logicalNot((Object) null);
      Character character0 = Character.valueOf('Z');
      jexlArithmetic1.isFloatingPoint(character0);
      jexlArithmetic1.narrow(double1);
  }"
1000,"    public boolean lessThanOrEqual(final Object left, final Object right) {
        if (left == right) {
            return true;
        }
        if (left == null || right == null) {
            return false;
        }
        return compare(left, right, ""<="") <= 0;
    }","  public void test277()  throws Throwable  {
      MathContext mathContext0 = MathContext.DECIMAL32;
      int int0 = (-2037);
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false, mathContext0, (-2037));
      Object object0 = jexlArithmetic0.not(mathContext0);
      String string0 = null;
      jexlArithmetic0.greaterThan((Object) null, object0);
      BigInteger bigInteger0 = BigInteger.ONE;
      Class<String> class0 = String.class;
      Number number0 = jexlArithmetic0.narrowNumber(bigInteger0, class0);
      jexlArithmetic0.controlNullOperand();
      jexlArithmetic0.bitwiseXor(number0, bigInteger0);
      Short short0 = new Short((short)1);
      Character character0 = new Character('Y');
      // Undeclared exception!
      try { 
        jexlArithmetic0.lessThanOrEqual(mathContext0, class0);
        fail(""Expecting exception: ArithmeticException"");
      } catch(ArithmeticException e) {
         //
         // Object comparison:(precision=7 roundingMode=HALF_EVEN <= class java.lang.String)
         //
         verifyException(""org.apache.commons.jexl3.JexlArithmetic"", e);
      }
  }"
1001,"    public Object negate(final Object val) {
        if (val == null) {
            controlNullOperand();
            return null;
        }
        if (val instanceof Integer) {
            return -((Integer) val);
        }
        if (val instanceof Double) {
            return - ((Double) val);
        }
        if (val instanceof Long) {
            return -((Long) val);
        }
        if (val instanceof BigDecimal) {
            return ((BigDecimal) val).negate();
        }
        if (val instanceof BigInteger) {
            return ((BigInteger) val).negate();
        }
        if (val instanceof Float) {
            return -((Float) val);
        }
        if (val instanceof Short) {
            return (short) -((Short) val);
        }
        if (val instanceof Byte) {
            return (byte) -((Byte) val);
        }
        if (val instanceof Boolean) {
            return !(Boolean) val;
        }
        if (val instanceof AtomicBoolean) {
            return !((AtomicBoolean) val).get();
        }
        throw new ArithmeticException(""Object negate:("" + val + "")"");
    }","  public void test278()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      JexlOptions jexlOptions0 = new JexlOptions();
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.options(jexlOptions0);
      Double double0 = new Double((-1237.0));
      jexlArithmetic1.negate(double0);
      MathContext mathContext0 = MathContext.UNLIMITED;
      BigInteger bigInteger0 = BigInteger.ONE;
      MathContext mathContext1 = MathContext.DECIMAL32;
      // Undeclared exception!
      try { 
        CharBuffer.wrap((char[]) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.nio.CharBuffer"", e);
      }
  }"
1002,"    public MapBuilder mapBuilder(final int size) {
        return new org.apache.commons.jexl3.internal.MapBuilder(size);
    }","  public void test279()  throws Throwable  {
      MathContext mathContext0 = MathContext.DECIMAL32;
      int int0 = (-2776);
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true);
      mathContext0.equals(jexlArithmetic0);
      Float float0 = new Float((-1.0));
      Long long0 = new Long((-2776));
      jexlArithmetic0.toBoolean(long0);
      Float.max(0.0F, 0.0F);
      jexlArithmetic0.narrow(float0);
      // Undeclared exception!
      try { 
        jexlArithmetic0.mapBuilder((-2776));
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Illegal initial capacity: -2776
         //
         verifyException(""java.util.HashMap"", e);
      }
  }"
1003,"    public MapBuilder mapBuilder(final int size) {
        return new org.apache.commons.jexl3.internal.MapBuilder(size);
    }","  public void test280()  throws Throwable  {
      MathContext mathContext0 = MathContext.DECIMAL32;
      int int0 = (-2776);
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false, mathContext0, (-2776));
      mathContext0.equals(jexlArithmetic0);
      Float float0 = new Float((-1.0));
      Float.max(0.0F, 0.0F);
      jexlArithmetic0.narrow(float0);
      // Undeclared exception!
      try { 
        jexlArithmetic0.mapBuilder((-2776));
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Illegal initial capacity: -2776
         //
         verifyException(""java.util.HashMap"", e);
      }
  }"
1004,"    public String toString(final Object val) {
        if (val == null) {
            controlNullOperand();
            return """";
        }
        if (!(val instanceof Double)) {
            return val.toString();
        }
        final Double dval = (Double) val;
        if (Double.isNaN(dval)) {
            return """";
        }
        return dval.toString();
    }","  public void test281()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true);
      JexlArithmetic.SetBuilder jexlArithmetic_SetBuilder0 = jexlArithmetic0.setBuilder(15);
      jexlArithmetic_SetBuilder0.create();
      Float float0 = new Float((-3767.0593F));
      Float.min(1.0F, 0.0F);
      jexlArithmetic0.toInteger(float0);
      Object object0 = null;
      // Undeclared exception!
      try { 
        jexlArithmetic0.toString((Object) null);
        fail(""Expecting exception: ArithmeticException"");
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.JexlArithmetic"", e);
      }
  }"
1005,"    public Boolean isEmpty(final Object object) {
        return isEmpty(object, object == null);
    }","  public void test282()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      Float float0 = new Float(2206.5435F);
      Object object0 = jexlArithmetic0.xor(float0, float0);
      Byte byte0 = new Byte((byte)113);
      jexlArithmetic0.bitwiseAnd(byte0, byte0);
      Float.max(0.0F, 0.0F);
      Boolean boolean0 = new Boolean(""rhH@/"");
      Boolean boolean1 = jexlArithmetic0.isEmpty(object0, boolean0);
      Boolean.compare(false, false);
      Boolean.logicalXor(false, false);
      Boolean.compare(false, true);
      Float.isFinite(2067);
      Boolean.logicalOr(false, false);
      Object object1 = jexlArithmetic0.logicalNot(boolean1);
      JexlArithmetic.MapBuilder jexlArithmetic_MapBuilder0 = jexlArithmetic0.mapBuilder(2067);
      jexlArithmetic_MapBuilder0.create();
      jexlArithmetic0.arrayBuilder(0);
      MathContext mathContext0 = MathContext.DECIMAL32;
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.createWithOptions(false, mathContext0, (-848));
      jexlArithmetic0.toLong(object1);
      JexlArithmetic jexlArithmetic2 = jexlArithmetic1.createWithOptions(false, mathContext0, 0);
      JexlOptions jexlOptions0 = new JexlOptions();
      Long long0 = new Long(1818L);
      jexlArithmetic1.contains(mathContext0, long0);
      JexlArithmetic jexlArithmetic3 = jexlArithmetic2.options(jexlOptions0);
      MathContext mathContext1 = MathContext.DECIMAL32;
      Boolean boolean2 = new Boolean(""rhH@/"");
      jexlArithmetic3.isEmpty((Object) mathContext1, boolean2);
  }"
1006,"    public Object multiply(final Object left, final Object right) {
        if (left == null && right == null) {
            return controlNullNullOperands();
        }
        // if both (non null) args fit as int
        final Number ln = asLongNumber(left);
        final Number rn = asLongNumber(right);
        if (ln != null && rn != null) {
            final long x = ln.longValue();
            final long y = rn.longValue();
            final long result = x * y;
            // detect overflow
            if (!isMultiplyExact(x, y, result)) {
                return BigInteger.valueOf(x).multiply(BigInteger.valueOf(y));
            }
            return narrowLong(left, right, result);
        }
        // if either are bigdecimal use that type
        if (left instanceof BigDecimal || right instanceof BigDecimal) {
            final BigDecimal l = toBigDecimal(left);
            final BigDecimal r = toBigDecimal(right);
            final BigDecimal result = l.multiply(r, getMathContext());
            return narrowBigDecimal(left, right, result);
        }
        // if either are floating point (double or float) use double
        if (isFloatingPointNumber(left) || isFloatingPointNumber(right)) {
            final double l = toDouble(left);
            final double r = toDouble(right);
            return l * r;
        }
        // otherwise treat as integers
        final BigInteger l = toBigInteger(left);
        final BigInteger r = toBigInteger(right);
        final BigInteger result = l.multiply(r);
        return narrowBigInteger(left, right, result);
    }","  public void test283()  throws Throwable  {
      MathContext mathContext0 = MathContext.DECIMAL64;
      Boolean boolean0 = Boolean.FALSE;
      mathContext0.equals(boolean0);
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false, mathContext0, Integer.MIN_VALUE);
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.createWithOptions(false, mathContext0, Integer.MIN_VALUE);
      BigDecimal bigDecimal0 = new BigDecimal((long) Integer.MIN_VALUE);
      bigDecimal0.toPlainString();
      jexlArithmetic1.narrowBigDecimal((Object) null, mathContext0, bigDecimal0);
      mathContext0.getPrecision();
      Pattern pattern0 = JexlArithmetic.FLOAT_PATTERN;
      pattern0.split((CharSequence) ""-2147483648"");
      double double0 = 1.0;
      Double double1 = new Double(1.0);
      Long long0 = new Long(Integer.MIN_VALUE);
      // Undeclared exception!
      try { 
        jexlArithmetic0.multiply(long0, bigDecimal0);
        fail(""Expecting exception: NumberFormatException"");
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.math.BigDecimal"", e);
      }
  }"
1007,"    public double toDouble(final Object val) {
        if (val == null) {
            controlNullOperand();
            return 0;
        }
        if (val instanceof Double) {
            return ((Double) val);
        }
        if (val instanceof Number) {
            //The below construct is used rather than ((Number)val).doubleValue() to ensure
            //equality between comparing new Double( 6.4 / 3 ) and the jexl expression of 6.4 / 3
            return Double.parseDouble(String.valueOf(val));
        }
        if (val instanceof Boolean) {
            return ((Boolean) val) ? 1. : 0.;
        }
        if (val instanceof AtomicBoolean) {
            return ((AtomicBoolean) val).get() ? 1. : 0.;
        }
        if (val instanceof String) {
            final String string = (String) val;
            if ("""".equals(string)) {
                return Double.NaN;
            }
            // the spec seems to be iffy about this.  Going to give it a wack anyway
            return Double.parseDouble(string);
        }
        if (val instanceof Character) {
            final int i = ((Character) val);
            return i;
        }
        throw new ArithmeticException(""Double coercion: ""
                + val.getClass().getName() + "":("" + val + "")"");
    }","  public void test284()  throws Throwable  {
      boolean boolean0 = false;
      int int0 = 4211;
      MathContext mathContext0 = new MathContext(4211);
      int int1 = 41;
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      boolean boolean1 = true;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false, mathContext0, 41);
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.options((JexlContext) null);
      char char0 = '2';
      // Undeclared exception!
      try { 
        jexlArithmetic1.toDouble(""]n^GY_8'"");
        fail(""Expecting exception: NumberFormatException"");
      } catch(NumberFormatException e) {
      }
  }"
1008,"    public Iterable<?> createRange(final Object from, final Object to) throws ArithmeticException {
        final long lfrom = toLong(from);
        final long lto = toLong(to);
        if ((lfrom >= Integer.MIN_VALUE && lfrom <= Integer.MAX_VALUE)
                && (lto >= Integer.MIN_VALUE && lto <= Integer.MAX_VALUE)) {
            return org.apache.commons.jexl3.internal.IntegerRange.create((int) lfrom, (int) lto);
        }
        return org.apache.commons.jexl3.internal.LongRange.create(lfrom, lto);
    }","  public void test285()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true);
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.options((JexlContext) null);
      BigDecimal bigDecimal0 = JexlArithmetic.BIGD_DOUBLE_MAX_VALUE;
      jexlArithmetic1.roundBigDecimal(bigDecimal0);
      char[] charArray0 = new char[7];
      charArray0[0] = '}';
      charArray0[1] = '.';
      charArray0[2] = '%';
      charArray0[3] = '>';
      charArray0[4] = 'h';
      charArray0[6] = '\\';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      try { 
        jexlArithmetic0.createRange(charBuffer0, bigDecimal0);
        fail(""Expecting exception: ArithmeticException"");
      } catch(ArithmeticException e) {
         //
         // Long coercion: java.nio.HeapCharBuffer:(}.%>h\u0000\\)
         //
         verifyException(""org.apache.commons.jexl3.JexlArithmetic"", e);
      }
  }"
1009,"    public final Object bitwiseAnd(final Object lhs, final Object rhs) {
        return and(lhs, rhs);
    }","  public void test286()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      Float float0 = new Float((-3767.0593F));
      JexlOptions jexlOptions0 = new JexlOptions();
      jexlArithmetic0.options(jexlOptions0);
      Integer integer0 = new Integer((-68));
      AtomicBoolean atomicBoolean0 = new AtomicBoolean();
      jexlArithmetic0.lessThan(integer0, atomicBoolean0);
      Float.min(1.0F, 0.0F);
      jexlArithmetic0.toInteger(float0);
      jexlArithmetic0.toString((Object) null);
      jexlArithmetic0.mapBuilder(0);
      jexlArithmetic0.logicalNot((Object) null);
      Pattern pattern0 = Pattern.compile(""selfXor"", (-1078));
      // Undeclared exception!
      try { 
        jexlArithmetic0.bitwiseAnd(pattern0, ""selfXor"");
        fail(""Expecting exception: ArithmeticException"");
      } catch(ArithmeticException e) {
         //
         // Long coercion: java.util.regex.Pattern:(selfXor)
         //
         verifyException(""org.apache.commons.jexl3.JexlArithmetic"", e);
      }
  }"
1010,"    public final Object bitwiseAnd(final Object lhs, final Object rhs) {
        return and(lhs, rhs);
    }","  public void test287()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      Float float0 = new Float((-3767.0593F));
      Float.min(1.0F, 0.0F);
      jexlArithmetic0.toInteger(float0);
      jexlArithmetic0.toString((Object) null);
      jexlArithmetic0.mapBuilder(0);
      jexlArithmetic0.logicalNot((Object) null);
      Pattern pattern0 = Pattern.compile(""selfXor"", (-1078));
      // Undeclared exception!
      try { 
        jexlArithmetic0.bitwiseAnd(pattern0, ""selfXor"");
        fail(""Expecting exception: ArithmeticException"");
      } catch(ArithmeticException e) {
         //
         // Long coercion: java.util.regex.Pattern:(selfXor)
         //
         verifyException(""org.apache.commons.jexl3.JexlArithmetic"", e);
      }
  }"
1011,"    public Object add(final Object left, final Object right) {
        if (left == null && right == null) {
            return controlNullNullOperands();
        }
        final boolean strconcat = strict
                            ? left instanceof String || right instanceof String
                            : left instanceof String && right instanceof String;
        if (!strconcat) {
            try {
                // if both (non null) args fit as long
                final Number ln = asLongNumber(left);
                final Number rn = asLongNumber(right);
                if (ln != null && rn != null) {
                    final long x = ln.longValue();
                    final long y = rn.longValue();
                    final long result = x + y;
                    // detect overflow, see java8 Math.addExact
                    if (((x ^ result) & (y ^ result)) < 0) {
                        return BigInteger.valueOf(x).add(BigInteger.valueOf(y));
                    }
                    return narrowLong(left, right, result);
                }
                // if either are bigdecimal use that type
                if (left instanceof BigDecimal || right instanceof BigDecimal) {
                    final BigDecimal l = toBigDecimal(left);
                    final BigDecimal r = toBigDecimal(right);
                    final BigDecimal result = l.add(r, getMathContext());
                    return narrowBigDecimal(left, right, result);
                }
                // if either are floating point (double or float) use double
                if (isFloatingPointNumber(left) || isFloatingPointNumber(right)) {
                    final double l = toDouble(left);
                    final double r = toDouble(right);
                    return l + r;
                }
                // otherwise treat as (big) integers
                final BigInteger l = toBigInteger(left);
                final BigInteger r = toBigInteger(right);
                final BigInteger result = l.add(r);
                return narrowBigInteger(left, right, result);
            } catch (final java.lang.NumberFormatException nfe) {
                if (left == null || right == null) {
                    controlNullOperand();
                }
            }
        }
        return toString(left).concat(toString(right));
    }","  public void test288()  throws Throwable  {
      MathContext mathContext0 = MathContext.DECIMAL64;
      Boolean boolean0 = Boolean.FALSE;
      mathContext0.equals(boolean0);
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false, mathContext0, Integer.MIN_VALUE);
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.createWithOptions(false, mathContext0, Integer.MIN_VALUE);
      BigDecimal bigDecimal0 = new BigDecimal((long) Integer.MIN_VALUE);
      bigDecimal0.toPlainString();
      jexlArithmetic1.narrowBigDecimal((Object) null, mathContext0, bigDecimal0);
      Pattern pattern0 = JexlArithmetic.FLOAT_PATTERN;
      pattern0.split((CharSequence) ""-2147483648"");
      Double double0 = new Double(1.0);
      Double.min(1.0, 0.0);
      jexlArithmetic1.narrowLong(pattern0, double0, 16380L);
      jexlArithmetic1.toString((Object) pattern0);
      Double double1 = new Double(1038.679142239);
      Object object0 = jexlArithmetic0.subtract((Object) null, double1);
      Object object1 = jexlArithmetic0.logicalNot((Object) null);
      Double double2 = new Double(0.0);
      jexlArithmetic0.empty(double2);
      Object object2 = jexlArithmetic0.subtract(object1, object0);
      jexlArithmetic1.add(object2, boolean0);
  }"
1012,"    public Object multiply(final Object left, final Object right) {
        if (left == null && right == null) {
            return controlNullNullOperands();
        }
        // if both (non null) args fit as int
        final Number ln = asLongNumber(left);
        final Number rn = asLongNumber(right);
        if (ln != null && rn != null) {
            final long x = ln.longValue();
            final long y = rn.longValue();
            final long result = x * y;
            // detect overflow
            if (!isMultiplyExact(x, y, result)) {
                return BigInteger.valueOf(x).multiply(BigInteger.valueOf(y));
            }
            return narrowLong(left, right, result);
        }
        // if either are bigdecimal use that type
        if (left instanceof BigDecimal || right instanceof BigDecimal) {
            final BigDecimal l = toBigDecimal(left);
            final BigDecimal r = toBigDecimal(right);
            final BigDecimal result = l.multiply(r, getMathContext());
            return narrowBigDecimal(left, right, result);
        }
        // if either are floating point (double or float) use double
        if (isFloatingPointNumber(left) || isFloatingPointNumber(right)) {
            final double l = toDouble(left);
            final double r = toDouble(right);
            return l * r;
        }
        // otherwise treat as integers
        final BigInteger l = toBigInteger(left);
        final BigInteger r = toBigInteger(right);
        final BigInteger result = l.multiply(r);
        return narrowBigInteger(left, right, result);
    }","  public void test289()  throws Throwable  {
      MathContext mathContext0 = new MathContext(1602);
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false, mathContext0, 1602);
      JexlEngine.getThreadContext();
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.options((JexlContext) null);
      Integer integer0 = new Integer(1884);
      // Undeclared exception!
      try { 
        jexlArithmetic1.multiply(integer0, mathContext0);
        fail(""Expecting exception: ArithmeticException"");
      } catch(ArithmeticException e) {
         //
         // BigInteger coercion: java.math.MathContext:(precision=1602 roundingMode=HALF_UP)
         //
         verifyException(""org.apache.commons.jexl3.JexlArithmetic"", e);
      }
  }"
1013,"    protected Object controlNullNullOperands() {
        if (isStrict()) {
            throw new NullOperand();
        }
        return 0;
    }","  public void test290()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      jexlArithmetic0.asLongNumber(""9p$,9CwL"");
      jexlArithmetic0.toBoolean(fileSystemHandling0);
      Object object0 = jexlArithmetic0.matches(""9p$,9CwL"", (Object) null);
      jexlArithmetic0.negate(object0);
      // Undeclared exception!
      try { 
        jexlArithmetic0.controlNullNullOperands();
        fail(""Expecting exception: ArithmeticException"");
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.JexlArithmetic"", e);
      }
  }"
1014,"    public SetBuilder setBuilder(final int size) {
        return new org.apache.commons.jexl3.internal.SetBuilder(size);
    }","  public void test291()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      Character character0 = Character.valueOf('?');
      int int0 = (-211);
      Character.highSurrogate((-211));
      jexlArithmetic0.toBigDecimal(character0);
      // Undeclared exception!
      try { 
        jexlArithmetic0.setBuilder((-211));
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Illegal initial capacity: -211
         //
         verifyException(""java.util.HashMap"", e);
      }
  }"
1015,"    protected JexlArithmetic createWithOptions(final boolean astrict, final MathContext bigdContext, final int bigdScale) {
        if (ctor != null) {
            try {
                return ctor.newInstance(astrict, bigdContext, bigdScale);
            } catch (IllegalAccessException | IllegalArgumentException
                    | InstantiationException | InvocationTargetException xany) {
                // it was worth the try
            }
        }
        return new JexlArithmetic(astrict, bigdContext, bigdScale);
    }","  public void test292()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      Float float0 = new Float((-3767.0593F));
      Long long0 = new Long((-2172L));
      jexlArithmetic0.lessThan(float0, long0);
      MathContext mathContext0 = MathContext.DECIMAL32;
      jexlArithmetic0.createWithOptions(false, mathContext0, 16);
      // Undeclared exception!
      try { 
        Pattern.compile((String) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
1016,"    protected static boolean isMultiplyExact(final long x, final long y, final long r) {
        final long ax = Math.abs(x);
        final long ay = Math.abs(y);
        return !(((ax | ay) >>> (Integer.SIZE - 1) != 0)
                  && (((y != 0) && (r / y != x))
                      || (x == Long.MIN_VALUE && y == -1)));
    }","  public void test293()  throws Throwable  {
      MathContext mathContext0 = MathContext.DECIMAL32;
      Float float0 = new Float((-1.0));
      Float.max(0.0F, 0.0F);
      Short short0 = new Short((short)0);
      BigInteger bigInteger0 = BigInteger.TEN;
      Integer integer0 = new Integer((-2776));
      Byte byte0 = new Byte((byte) (-14));
      JexlArithmetic.isMultiplyExact((short)0, (-2776), 0L);
  }"
1017,"    public Boolean isEmpty(final Object object) {
        return isEmpty(object, object == null);
    }","  public void test294()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      Float float0 = new Float(2206.5435F);
      jexlArithmetic0.xor(float0, float0);
      Byte byte0 = new Byte((byte)113);
      jexlArithmetic0.bitwiseAnd(byte0, byte0);
      Float.max(0.0F, 0.0F);
      Boolean boolean0 = new Boolean(""rhH@/"");
      Boolean boolean1 = Boolean.valueOf(false);
      Boolean.compare(false, true);
      Boolean.logicalXor(false, false);
      Boolean.compare(false, true);
      Float.isFinite(2067);
      Boolean.logicalOr(false, false);
      Object object0 = jexlArithmetic0.logicalNot(boolean1);
      JexlArithmetic.MapBuilder jexlArithmetic_MapBuilder0 = jexlArithmetic0.mapBuilder(2067);
      jexlArithmetic_MapBuilder0.create();
      JexlArithmetic.ArrayBuilder jexlArithmetic_ArrayBuilder0 = jexlArithmetic0.arrayBuilder(0);
      MathContext mathContext0 = MathContext.DECIMAL32;
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.createWithOptions(false, mathContext0, (-848));
      jexlArithmetic0.toLong(object0);
      jexlArithmetic1.createWithOptions(false, mathContext0, 0);
      jexlArithmetic_ArrayBuilder0.create(false);
      JexlOptions jexlOptions0 = new JexlOptions();
      JexlArithmetic jexlArithmetic2 = new JexlArithmetic(false, mathContext0, (-1));
      MathContext mathContext1 = MathContext.DECIMAL32;
      Boolean boolean2 = new Boolean(""rhH@/"");
      jexlArithmetic2.isEmpty((Object) mathContext1, boolean2);
  }"
1018,"    public Object negate(final Object val) {
        if (val == null) {
            controlNullOperand();
            return null;
        }
        if (val instanceof Integer) {
            return -((Integer) val);
        }
        if (val instanceof Double) {
            return - ((Double) val);
        }
        if (val instanceof Long) {
            return -((Long) val);
        }
        if (val instanceof BigDecimal) {
            return ((BigDecimal) val).negate();
        }
        if (val instanceof BigInteger) {
            return ((BigInteger) val).negate();
        }
        if (val instanceof Float) {
            return -((Float) val);
        }
        if (val instanceof Short) {
            return (short) -((Short) val);
        }
        if (val instanceof Byte) {
            return (byte) -((Byte) val);
        }
        if (val instanceof Boolean) {
            return !(Boolean) val;
        }
        if (val instanceof AtomicBoolean) {
            return !((AtomicBoolean) val).get();
        }
        throw new ArithmeticException(""Object negate:("" + val + "")"");
    }","  public void test295()  throws Throwable  {
      MathContext mathContext0 = MathContext.DECIMAL128;
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false, mathContext0, (-2037));
      Object object0 = jexlArithmetic0.not(mathContext0);
      jexlArithmetic0.greaterThan((Object) null, object0);
      Long long0 = new Long(0L);
      BigInteger bigInteger0 = BigInteger.ONE;
      Class<String> class0 = String.class;
      Number number0 = jexlArithmetic0.narrowNumber(bigInteger0, class0);
      jexlArithmetic0.controlNullOperand();
      jexlArithmetic0.bitwiseXor(number0, bigInteger0);
      Short short0 = new Short((short)1);
      Character character0 = new Character('Y');
      jexlArithmetic0.startsWith(short0, character0);
      BigDecimal bigDecimal0 = new BigDecimal(1.7976931348623157E308);
      Long long1 = new Long(2170L);
      Number number1 = jexlArithmetic0.narrowLong(bigDecimal0, long1, (-2037));
      jexlArithmetic0.positivize(number1);
      jexlArithmetic0.negate((Object) null);
  }"
1019,"    public MathContext getMathContext() {
        return mathContext;
    }","  public void test296()  throws Throwable  {
      MathContext mathContext0 = MathContext.DECIMAL64;
      Pattern pattern0 = Pattern.compile("""");
      pattern0.matcher("""");
      mathContext0.equals(pattern0);
      Character character0 = Character.valueOf('|');
      Character.isSurrogate('|');
      mathContext0.equals(character0);
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false, mathContext0, 0);
      jexlArithmetic0.getMathScale();
      jexlArithmetic0.getMathContext();
  }"
1020,"    public Number narrowNumber(final Number original, final Class<?> narrow) {
        if (original == null) {
            return null;
        }
        Number result = original;
        if (original instanceof BigDecimal) {
            final BigDecimal bigd = (BigDecimal) original;
            // if it's bigger than a double it can't be narrowed
            if (bigd.compareTo(BIGD_DOUBLE_MAX_VALUE) > 0
                || bigd.compareTo(BIGD_DOUBLE_MIN_VALUE) < 0) {
                return original;
            }
            try {
                final long l = bigd.longValueExact();
                // coerce to int when possible (int being so often used in method parms)
                if (narrowAccept(narrow, Integer.class)
                        && l <= Integer.MAX_VALUE
                        && l >= Integer.MIN_VALUE) {
                    return (int) l;
                }
                if (narrowAccept(narrow, Long.class)) {
                    return l;
                }
            } catch (final ArithmeticException xa) {
                // ignore, no exact value possible
            }
        }
        if (original instanceof Double || original instanceof Float) {
            final double value = original.doubleValue();
            if (narrowAccept(narrow, Float.class)
                    && value <= Float.MAX_VALUE
                    && value >= Float.MIN_VALUE) {
                result = result.floatValue();
            }
            // else it fits in a double only
        } else {
            if (original instanceof BigInteger) {
                final BigInteger bigi = (BigInteger) original;
                // if it's bigger than a Long it can't be narrowed
                if (bigi.compareTo(BIGI_LONG_MAX_VALUE) > 0
                        || bigi.compareTo(BIGI_LONG_MIN_VALUE) < 0) {
                    return original;
                }
            }
            final long value = original.longValue();
            if (narrowAccept(narrow, Byte.class)
                    && value <= Byte.MAX_VALUE
                    && value >= Byte.MIN_VALUE) {
                // it will fit in a byte
                result = (byte) value;
            } else if (narrowAccept(narrow, Short.class)
                    && value <= Short.MAX_VALUE
                    && value >= Short.MIN_VALUE) {
                result = (short) value;
            } else if (narrowAccept(narrow, Integer.class)
                    && value <= Integer.MAX_VALUE
                    && value >= Integer.MIN_VALUE) {
                result = (int) value;
            }
            // else it fits in a long
        }
        return result;
    }","  public void test297()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true);
      MathContext mathContext0 = new MathContext(0);
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.createWithOptions(true, mathContext0, 1602);
      JexlArithmetic jexlArithmetic2 = jexlArithmetic1.options((JexlContext) null);
      JexlOptions jexlOptions0 = new JexlOptions();
      String[] stringArray0 = new String[5];
      stringArray0[0] = ""_Y6};D"";
      stringArray0[1] = ""-Q<S(c0j.&U,m}A"";
      stringArray0[2] = ""I 9HK+Yv*PK7("";
      stringArray0[3] = ""]: '"";
      stringArray0[4] = ""annotation"";
      jexlOptions0.setFlags(stringArray0);
      JexlArithmetic jexlArithmetic3 = jexlArithmetic2.options(jexlOptions0);
      Class<Long> class0 = Long.class;
      jexlArithmetic3.narrowAccept(class0, class0);
      Float float0 = new Float(3614.04814629);
      Class<BigDecimal> class1 = BigDecimal.class;
      jexlArithmetic0.narrowNumber(float0, class1);
  }"
1021,"    public Object divide(final Object left, final Object right) {
        if (left == null && right == null) {
            return controlNullNullOperands();
        }
        // if both (non null) args fit as long
        final Number ln = asLongNumber(left);
        final Number rn = asLongNumber(right);
        if (ln != null && rn != null) {
            final long x = ln.longValue();
            final long y = rn.longValue();
            if (y == 0L) {
                throw new ArithmeticException(""/"");
            }
            final long result = x  / y;
            return narrowLong(left, right, result);
        }
        // if either are bigdecimal use that type
        if (left instanceof BigDecimal || right instanceof BigDecimal) {
            final BigDecimal l = toBigDecimal(left);
            final BigDecimal r = toBigDecimal(right);
            if (BigDecimal.ZERO.equals(r)) {
                throw new ArithmeticException(""/"");
            }
            final BigDecimal result = l.divide(r, getMathContext());
            return narrowBigDecimal(left, right, result);
        }
        // if either are floating point (double or float) use double
        if (isFloatingPointNumber(left) || isFloatingPointNumber(right)) {
            final double l = toDouble(left);
            final double r = toDouble(right);
            if (r == 0.0) {
                throw new ArithmeticException(""/"");
            }
            return l / r;
        }
        // otherwise treat as integers
        final BigInteger l = toBigInteger(left);
        final BigInteger r = toBigInteger(right);
        if (BigInteger.ZERO.equals(r)) {
            throw new ArithmeticException(""/"");
        }
        final BigInteger result = l.divide(r);
        return narrowBigInteger(left, right, result);
    }","  public void test298()  throws Throwable  {
      MathContext mathContext0 = MathContext.DECIMAL32;
      int int0 = (-2776);
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true);
      mathContext0.equals(jexlArithmetic0);
      String string0 = null;
      // Undeclared exception!
      try { 
        jexlArithmetic0.divide((Object) null, mathContext0);
        fail(""Expecting exception: ArithmeticException"");
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.JexlArithmetic"", e);
      }
  }"
1022,"    public Object multiply(final Object left, final Object right) {
        if (left == null && right == null) {
            return controlNullNullOperands();
        }
        // if both (non null) args fit as int
        final Number ln = asLongNumber(left);
        final Number rn = asLongNumber(right);
        if (ln != null && rn != null) {
            final long x = ln.longValue();
            final long y = rn.longValue();
            final long result = x * y;
            // detect overflow
            if (!isMultiplyExact(x, y, result)) {
                return BigInteger.valueOf(x).multiply(BigInteger.valueOf(y));
            }
            return narrowLong(left, right, result);
        }
        // if either are bigdecimal use that type
        if (left instanceof BigDecimal || right instanceof BigDecimal) {
            final BigDecimal l = toBigDecimal(left);
            final BigDecimal r = toBigDecimal(right);
            final BigDecimal result = l.multiply(r, getMathContext());
            return narrowBigDecimal(left, right, result);
        }
        // if either are floating point (double or float) use double
        if (isFloatingPointNumber(left) || isFloatingPointNumber(right)) {
            final double l = toDouble(left);
            final double r = toDouble(right);
            return l * r;
        }
        // otherwise treat as integers
        final BigInteger l = toBigInteger(left);
        final BigInteger r = toBigInteger(right);
        final BigInteger result = l.multiply(r);
        return narrowBigInteger(left, right, result);
    }","  public void test299()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "">"");
      int int0 = 35;
      MathContext mathContext0 = new MathContext(35);
      mathContext0.toString();
      mathContext0.toString();
      int int1 = (-2776);
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true, mathContext0, (-2776));
      Boolean boolean0 = jexlArithmetic0.endsWith((Object) null, (Object) null);
      // Undeclared exception!
      try { 
        jexlArithmetic0.multiply(boolean0, ""precision=35 roundingMode=HALF_UP"");
        fail(""Expecting exception: NumberFormatException"");
      } catch(NumberFormatException e) {
         //
         // For input string: \""precis\""
         //
         verifyException(""java.lang.NumberFormatException"", e);
      }
  }"
1023,"    public final Object bitwiseOr(final Object lhs, final Object rhs) {
        return or(lhs, rhs);
    }","  public void test300()  throws Throwable  {
      boolean boolean0 = true;
      String string0 = null;
      MathContext mathContext0 = MathContext.UNLIMITED;
      int int0 = 0;
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true, mathContext0, 0);
      Map<String, Object> map0 = null;
      // Undeclared exception!
      try { 
        jexlArithmetic0.bitwiseOr((Object) null, (Object) null);
        fail(""Expecting exception: ArithmeticException"");
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.JexlArithmetic"", e);
      }
  }"
1024,"    public Boolean endsWith(final Object left, final Object right) {
        if (left == null && right == null) {
            //if both are null L == R
            return true;
        }
        if (left == null || right == null) {
            // we know both aren't null, therefore L != R
            return false;
        }
        if (left instanceof CharSequence) {
            return (toString(left)).endsWith(toString(right));
        }
        return null;
    }","  public void test301()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true);
      Long long0 = new Long((-3338L));
      Byte byte0 = new Byte((byte) (-21));
      Object object0 = jexlArithmetic0.bitwiseOr(long0, byte0);
      Long long1 = new Long((-1515L));
      Long.min((-3338L), (-3338L));
      jexlArithmetic0.endsWith(object0, long1);
  }"
1025,"    public Object divide(final Object left, final Object right) {
        if (left == null && right == null) {
            return controlNullNullOperands();
        }
        // if both (non null) args fit as long
        final Number ln = asLongNumber(left);
        final Number rn = asLongNumber(right);
        if (ln != null && rn != null) {
            final long x = ln.longValue();
            final long y = rn.longValue();
            if (y == 0L) {
                throw new ArithmeticException(""/"");
            }
            final long result = x  / y;
            return narrowLong(left, right, result);
        }
        // if either are bigdecimal use that type
        if (left instanceof BigDecimal || right instanceof BigDecimal) {
            final BigDecimal l = toBigDecimal(left);
            final BigDecimal r = toBigDecimal(right);
            if (BigDecimal.ZERO.equals(r)) {
                throw new ArithmeticException(""/"");
            }
            final BigDecimal result = l.divide(r, getMathContext());
            return narrowBigDecimal(left, right, result);
        }
        // if either are floating point (double or float) use double
        if (isFloatingPointNumber(left) || isFloatingPointNumber(right)) {
            final double l = toDouble(left);
            final double r = toDouble(right);
            if (r == 0.0) {
                throw new ArithmeticException(""/"");
            }
            return l / r;
        }
        // otherwise treat as integers
        final BigInteger l = toBigInteger(left);
        final BigInteger r = toBigInteger(right);
        if (BigInteger.ZERO.equals(r)) {
            throw new ArithmeticException(""/"");
        }
        final BigInteger result = l.divide(r);
        return narrowBigInteger(left, right, result);
    }","  public void test302()  throws Throwable  {
      boolean boolean0 = true;
      String string0 = ""ODs4B/0'"";
      MathContext mathContext0 = MathContext.DECIMAL64;
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false, mathContext0, (-1295));
      BigInteger bigInteger0 = JexlArithmetic.BIGI_LONG_MIN_VALUE;
      jexlArithmetic0.narrow(bigInteger0);
      int int0 = (-1015);
      mathContext0.getRoundingMode();
      JexlArithmetic jexlArithmetic1 = new JexlArithmetic(true, mathContext0, (-1015));
      mathContext0.getPrecision();
      // Undeclared exception!
      try { 
        jexlArithmetic1.divide(""ODs4B/0'"", mathContext0);
        fail(""Expecting exception: NumberFormatException"");
      } catch(NumberFormatException e) {
         //
         // For input string: \""ODs4B/0'\""
         //
         verifyException(""java.lang.NumberFormatException"", e);
      }
  }"
1026,"    public Object subtract(final Object left, final Object right) {
        if (left == null && right == null) {
            return controlNullNullOperands();
        }
        // if both (non null) args fit as long
        final Number ln = asLongNumber(left);
        final Number rn = asLongNumber(right);
        if (ln != null && rn != null) {
            final long x = ln.longValue();
            final long y = rn.longValue();
            final long result = x - y;
            // detect overflow, see java8 Math.subtractExact
            if (((x ^ y) & (x ^ result)) < 0) {
                return BigInteger.valueOf(x).subtract(BigInteger.valueOf(y));
            }
            return narrowLong(left, right, result);
        }
        // if either are bigdecimal use that type
        if (left instanceof BigDecimal || right instanceof BigDecimal) {
            final BigDecimal l = toBigDecimal(left);
            final BigDecimal r = toBigDecimal(right);
            final BigDecimal result = l.subtract(r, getMathContext());
            return narrowBigDecimal(left, right, result);
        }
        // if either are floating point (double or float) use double
        if (isFloatingPointNumber(left) || isFloatingPointNumber(right)) {
            final double l = toDouble(left);
            final double r = toDouble(right);
            return l - r;
        }
        // otherwise treat as integers
        final BigInteger l = toBigInteger(left);
        final BigInteger r = toBigInteger(right);
        final BigInteger result = l.subtract(r);
        return narrowBigInteger(left, right, result);
    }","  public void test303()  throws Throwable  {
      MathContext mathContext0 = MathContext.UNLIMITED;
      Character character0 = Character.valueOf('o');
      Character.isAlphabetic(Integer.MIN_VALUE);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Character.isIdeographic(Integer.MIN_VALUE);
      mathContext0.equals(character0);
      RoundingMode roundingMode0 = mathContext0.getRoundingMode();
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false, mathContext0, 694);
      mathContext0.getPrecision();
      jexlArithmetic0.setBuilder(694);
      RoundingMode.valueOf(0);
      BigInteger bigInteger0 = JexlArithmetic.BIGI_LONG_MIN_VALUE;
      jexlArithmetic0.isFloatingPoint(bigInteger0);
      JexlArithmetic.isMultiplyExact(Integer.MIN_VALUE, (-128L), (-128L));
      MathContext mathContext1 = jexlArithmetic0.getMathContext();
      mathContext1.getRoundingMode();
      // Undeclared exception!
      try { 
        jexlArithmetic0.subtract(mathContext1, roundingMode0);
        fail(""Expecting exception: ArithmeticException"");
      } catch(ArithmeticException e) {
         //
         // BigInteger coercion: java.math.MathContext:(precision=0 roundingMode=HALF_UP)
         //
         verifyException(""org.apache.commons.jexl3.JexlArithmetic"", e);
      }
  }"
1027,"    public Iterable<?> createRange(final Object from, final Object to) throws ArithmeticException {
        final long lfrom = toLong(from);
        final long lto = toLong(to);
        if ((lfrom >= Integer.MIN_VALUE && lfrom <= Integer.MAX_VALUE)
                && (lto >= Integer.MIN_VALUE && lto <= Integer.MAX_VALUE)) {
            return org.apache.commons.jexl3.internal.IntegerRange.create((int) lfrom, (int) lto);
        }
        return org.apache.commons.jexl3.internal.LongRange.create(lfrom, lto);
    }","  public void test304()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      int int0 = (-32);
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.createWithOptions(false, (MathContext) null, (-32));
      AtomicBoolean atomicBoolean0 = new AtomicBoolean();
      Object object0 = jexlArithmetic0.negate(atomicBoolean0);
      JexlEngine.EmptyContext jexlEngine_EmptyContext0 = (JexlEngine.EmptyContext)JexlEngine.EMPTY_CONTEXT;
      JexlArithmetic jexlArithmetic2 = jexlArithmetic1.options((JexlContext) jexlEngine_EmptyContext0);
      atomicBoolean0.getAndSet(false);
      atomicBoolean0.weakCompareAndSet(false, false);
      jexlArithmetic2.endsWith((Object) null, ""wQBSh1:AiYj.e+D<="");
      try { 
        jexlArithmetic0.createRange(jexlEngine_EmptyContext0, object0);
        fail(""Expecting exception: ArithmeticException"");
      } catch(ArithmeticException e) {
         //
         // Long coercion: org.apache.commons.jexl3.JexlEngine$EmptyContext:(org.apache.commons.jexl3.JexlEngine$EmptyContext@3)
         //
         verifyException(""org.apache.commons.jexl3.JexlArithmetic"", e);
      }
  }"
1028,"    public boolean isNegateStable() {
        return true;
    }","  public void test305()  throws Throwable  {
      MathContext mathContext0 = MathContext.DECIMAL64;
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true, mathContext0, 29);
      jexlArithmetic0.isNegateStable();
  }"
1029,"    public Object and(final Object left, final Object right) {
        final long l = toLong(left);
        final long r = toLong(right);
        return l & r;
    }","  public void test306()  throws Throwable  {
      MathContext mathContext0 = MathContext.DECIMAL64;
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false, mathContext0, (-1185));
      JexlOptions jexlOptions0 = new JexlOptions();
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.options(jexlOptions0);
      jexlArithmetic0.isPositivizeStable();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ""COMPLEMENT"");
      Float float0 = new Float((double) (-1185));
      Float float1 = new Float(875.7613302);
      jexlArithmetic0.isNumberable(jexlArithmetic1);
      Byte byte0 = new Byte((byte) (-40));
      jexlArithmetic0.lessThan(float1, byte0);
      Float.sum((-1185), (-1185));
      // Undeclared exception!
      try { 
        jexlArithmetic1.and(float0, mathContext0);
        fail(""Expecting exception: ArithmeticException"");
      } catch(ArithmeticException e) {
         //
         // Long coercion: java.math.MathContext:(precision=16 roundingMode=HALF_EVEN)
         //
         verifyException(""org.apache.commons.jexl3.JexlArithmetic"", e);
      }
  }"
1030,"    public Boolean isEmpty(final Object object) {
        return isEmpty(object, object == null);
    }","  public void test307()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      Float float0 = new Float(2206.5435F);
      Object object0 = jexlArithmetic0.xor(float0, float0);
      Byte byte0 = new Byte((byte)113);
      jexlArithmetic0.bitwiseAnd(byte0, byte0);
      Float.max(0.0F, 0.0F);
      Boolean boolean0 = new Boolean(""rhH@/"");
      Boolean boolean1 = jexlArithmetic0.isEmpty(object0, boolean0);
      Boolean.compare(false, true);
      Boolean.logicalXor(false, false);
      Boolean.compare(false, true);
      Float.isFinite(2067);
      Boolean.logicalOr(false, false);
      Object object1 = jexlArithmetic0.logicalNot(boolean1);
      JexlArithmetic.MapBuilder jexlArithmetic_MapBuilder0 = jexlArithmetic0.mapBuilder(2067);
      jexlArithmetic_MapBuilder0.create();
      JexlArithmetic.ArrayBuilder jexlArithmetic_ArrayBuilder0 = jexlArithmetic0.arrayBuilder(0);
      MathContext mathContext0 = MathContext.DECIMAL32;
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.createWithOptions(false, mathContext0, (-848));
      jexlArithmetic0.toLong(object1);
      JexlArithmetic jexlArithmetic2 = jexlArithmetic1.createWithOptions(false, mathContext0, 0);
      jexlArithmetic_ArrayBuilder0.create(false);
      JexlOptions jexlOptions0 = new JexlOptions();
      JexlArithmetic jexlArithmetic3 = jexlArithmetic2.options((JexlOptions) null);
      MathContext mathContext1 = MathContext.DECIMAL32;
      Boolean boolean2 = new Boolean(""rhH@/"");
      jexlArithmetic3.isEmpty((Object) mathContext1, boolean2);
  }"
1031,"    public Object add(final Object left, final Object right) {
        if (left == null && right == null) {
            return controlNullNullOperands();
        }
        final boolean strconcat = strict
                            ? left instanceof String || right instanceof String
                            : left instanceof String && right instanceof String;
        if (!strconcat) {
            try {
                // if both (non null) args fit as long
                final Number ln = asLongNumber(left);
                final Number rn = asLongNumber(right);
                if (ln != null && rn != null) {
                    final long x = ln.longValue();
                    final long y = rn.longValue();
                    final long result = x + y;
                    // detect overflow, see java8 Math.addExact
                    if (((x ^ result) & (y ^ result)) < 0) {
                        return BigInteger.valueOf(x).add(BigInteger.valueOf(y));
                    }
                    return narrowLong(left, right, result);
                }
                // if either are bigdecimal use that type
                if (left instanceof BigDecimal || right instanceof BigDecimal) {
                    final BigDecimal l = toBigDecimal(left);
                    final BigDecimal r = toBigDecimal(right);
                    final BigDecimal result = l.add(r, getMathContext());
                    return narrowBigDecimal(left, right, result);
                }
                // if either are floating point (double or float) use double
                if (isFloatingPointNumber(left) || isFloatingPointNumber(right)) {
                    final double l = toDouble(left);
                    final double r = toDouble(right);
                    return l + r;
                }
                // otherwise treat as (big) integers
                final BigInteger l = toBigInteger(left);
                final BigInteger r = toBigInteger(right);
                final BigInteger result = l.add(r);
                return narrowBigInteger(left, right, result);
            } catch (final java.lang.NumberFormatException nfe) {
                if (left == null || right == null) {
                    controlNullOperand();
                }
            }
        }
        return toString(left).concat(toString(right));
    }","  public void test308()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      Float float0 = new Float(2206.5435F);
      Object object0 = jexlArithmetic0.xor(float0, float0);
      Byte byte0 = new Byte((byte)99);
      Byte.toUnsignedInt((byte) (-77));
      jexlArithmetic0.bitwiseAnd(byte0, byte0);
      String string0 = ""rhH@/"";
      Boolean boolean0 = new Boolean(""rhH@/"");
      Boolean boolean1 = jexlArithmetic0.isEmpty(object0, boolean0);
      Boolean.compare(false, true);
      Boolean.logicalXor(false, false);
      Boolean.compare(false, true);
      Float.isFinite(2067);
      Boolean.logicalOr(false, true);
      Object object1 = jexlArithmetic0.logicalNot(boolean1);
      jexlArithmetic0.mapBuilder(2067);
      HashMap hashMap0 = new HashMap<BigInteger, BigInteger>();
      jexlArithmetic0.arrayBuilder(0);
      MathContext mathContext0 = MathContext.DECIMAL32;
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.createWithOptions(false, mathContext0, (-848));
      jexlArithmetic0.toLong(object1);
      JexlArithmetic jexlArithmetic2 = jexlArithmetic1.createWithOptions(false, mathContext0, 0);
      // Undeclared exception!
      try { 
        jexlArithmetic2.add((Object) null, mathContext0);
        fail(""Expecting exception: ArithmeticException"");
      } catch(ArithmeticException e) {
         //
         // BigInteger coercion: java.math.MathContext:(precision=7 roundingMode=HALF_EVEN)
         //
         verifyException(""org.apache.commons.jexl3.JexlArithmetic"", e);
      }
  }"
1032,"    public final Object bitwiseOr(final Object lhs, final Object rhs) {
        return or(lhs, rhs);
    }","  public void test309()  throws Throwable  {
      MathContext mathContext0 = MathContext.DECIMAL128;
      mathContext0.getPrecision();
      int int0 = 0;
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true, mathContext0, 0);
      jexlArithmetic0.isFloatingPointNumber(mathContext0);
      char char0 = '_';
      // Undeclared exception!
      try { 
        jexlArithmetic0.bitwiseOr(mathContext0, mathContext0);
        fail(""Expecting exception: ArithmeticException"");
      } catch(ArithmeticException e) {
         //
         // Long coercion: java.math.MathContext:(precision=34 roundingMode=HALF_EVEN)
         //
         verifyException(""org.apache.commons.jexl3.JexlArithmetic"", e);
      }
  }"
1033,"    public Object multiply(final Object left, final Object right) {
        if (left == null && right == null) {
            return controlNullNullOperands();
        }
        // if both (non null) args fit as int
        final Number ln = asLongNumber(left);
        final Number rn = asLongNumber(right);
        if (ln != null && rn != null) {
            final long x = ln.longValue();
            final long y = rn.longValue();
            final long result = x * y;
            // detect overflow
            if (!isMultiplyExact(x, y, result)) {
                return BigInteger.valueOf(x).multiply(BigInteger.valueOf(y));
            }
            return narrowLong(left, right, result);
        }
        // if either are bigdecimal use that type
        if (left instanceof BigDecimal || right instanceof BigDecimal) {
            final BigDecimal l = toBigDecimal(left);
            final BigDecimal r = toBigDecimal(right);
            final BigDecimal result = l.multiply(r, getMathContext());
            return narrowBigDecimal(left, right, result);
        }
        // if either are floating point (double or float) use double
        if (isFloatingPointNumber(left) || isFloatingPointNumber(right)) {
            final double l = toDouble(left);
            final double r = toDouble(right);
            return l * r;
        }
        // otherwise treat as integers
        final BigInteger l = toBigInteger(left);
        final BigInteger r = toBigInteger(right);
        final BigInteger result = l.multiply(r);
        return narrowBigInteger(left, right, result);
    }","  public void test310()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      Float float0 = new Float(2206.5435F);
      Object object0 = jexlArithmetic0.xor(float0, float0);
      Byte byte0 = new Byte((byte)99);
      Byte.toUnsignedInt((byte) (-77));
      jexlArithmetic0.bitwiseAnd(byte0, byte0);
      Float.max(0.0F, 0.0F);
      Boolean boolean0 = new Boolean(""rhH@/"");
      Boolean boolean1 = jexlArithmetic0.isEmpty(object0, boolean0);
      boolean boolean2 = false;
      Boolean.compare(false, true);
      Boolean.logicalXor(false, false);
      Boolean.compare(false, true);
      Float.isFinite(2067);
      Boolean.logicalOr(false, true);
      Object object1 = jexlArithmetic0.logicalNot(boolean1);
      JexlArithmetic.MapBuilder jexlArithmetic_MapBuilder0 = jexlArithmetic0.mapBuilder(2067);
      jexlArithmetic_MapBuilder0.create();
      jexlArithmetic0.arrayBuilder(0);
      MathContext mathContext0 = MathContext.DECIMAL32;
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.createWithOptions(false, mathContext0, (-848));
      jexlArithmetic0.toLong(object1);
      jexlArithmetic1.createWithOptions(false, mathContext0, 0);
      Long long0 = new Long(9223372036854775807L);
      // Undeclared exception!
      try { 
        jexlArithmetic1.multiply(""rhH@/"", long0);
        fail(""Expecting exception: NumberFormatException"");
      } catch(NumberFormatException e) {
         //
         // For input string: \""rhH@/\""
         //
         verifyException(""java.lang.NumberFormatException"", e);
      }
  }"
1034,"    public Object and(final Object left, final Object right) {
        final long l = toLong(left);
        final long r = toLong(right);
        return l & r;
    }","  public void test311()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      MathContext mathContext0 = MathContext.DECIMAL128;
      mathContext0.getRoundingMode();
      jexlArithmetic0.toBoolean((Object) null);
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.createWithOptions(false, mathContext0, 275);
      JexlEngine.EmptyContext jexlEngine_EmptyContext0 = (JexlEngine.EmptyContext)JexlEngine.EMPTY_CONTEXT;
      JexlArithmetic jexlArithmetic2 = jexlArithmetic1.options((JexlContext) jexlEngine_EmptyContext0);
      jexlArithmetic2.setBuilder(275);
      BigInteger bigInteger0 = BigInteger.ZERO;
      Integer integer0 = new Integer(275);
      Integer integer1 = new Integer(275);
      jexlArithmetic1.createRange(integer1, (Object) null);
      // Undeclared exception!
      try { 
        jexlArithmetic0.and(jexlArithmetic1, (Object) null);
        fail(""Expecting exception: ArithmeticException"");
      } catch(ArithmeticException e) {
         //
         // Long coercion: org.apache.commons.jexl3.JexlArithmetic:(org.apache.commons.jexl3.JexlArithmetic@2)
         //
         verifyException(""org.apache.commons.jexl3.JexlArithmetic"", e);
      }
  }"
1035,"    public Object negate(final Object val) {
        if (val == null) {
            controlNullOperand();
            return null;
        }
        if (val instanceof Integer) {
            return -((Integer) val);
        }
        if (val instanceof Double) {
            return - ((Double) val);
        }
        if (val instanceof Long) {
            return -((Long) val);
        }
        if (val instanceof BigDecimal) {
            return ((BigDecimal) val).negate();
        }
        if (val instanceof BigInteger) {
            return ((BigInteger) val).negate();
        }
        if (val instanceof Float) {
            return -((Float) val);
        }
        if (val instanceof Short) {
            return (short) -((Short) val);
        }
        if (val instanceof Byte) {
            return (byte) -((Byte) val);
        }
        if (val instanceof Boolean) {
            return !(Boolean) val;
        }
        if (val instanceof AtomicBoolean) {
            return !((AtomicBoolean) val).get();
        }
        throw new ArithmeticException(""Object negate:("" + val + "")"");
    }","  public void test312()  throws Throwable  {
      MathContext mathContext0 = MathContext.DECIMAL32;
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false, mathContext0, (-2037));
      Object object0 = jexlArithmetic0.not(mathContext0);
      jexlArithmetic0.greaterThan((Object) null, object0);
      Long long0 = new Long(0L);
      jexlArithmetic0.bitwiseXor(long0, long0);
      BigInteger bigInteger0 = BigInteger.ONE;
      Class<String> class0 = String.class;
      Number number0 = jexlArithmetic0.narrowNumber(bigInteger0, class0);
      jexlArithmetic0.controlNullOperand();
      jexlArithmetic0.bitwiseXor(number0, bigInteger0);
      Short short0 = new Short((short)1);
      Character character0 = new Character('Y');
      jexlArithmetic0.startsWith(short0, character0);
      BigDecimal bigDecimal0 = new BigDecimal(1.7976931348623157E308);
      Long long1 = new Long(2170L);
      Number number1 = jexlArithmetic0.narrowLong(bigDecimal0, long1, (-2037));
      jexlArithmetic0.positivize(number1);
      // Undeclared exception!
      try { 
        jexlArithmetic0.negate(""'IDU"");
        fail(""Expecting exception: ArithmeticException"");
      } catch(ArithmeticException e) {
         //
         // Object negate:('IDU)
         //
         verifyException(""org.apache.commons.jexl3.JexlArithmetic"", e);
      }
  }"
1036,"    public Object multiply(final Object left, final Object right) {
        if (left == null && right == null) {
            return controlNullNullOperands();
        }
        // if both (non null) args fit as int
        final Number ln = asLongNumber(left);
        final Number rn = asLongNumber(right);
        if (ln != null && rn != null) {
            final long x = ln.longValue();
            final long y = rn.longValue();
            final long result = x * y;
            // detect overflow
            if (!isMultiplyExact(x, y, result)) {
                return BigInteger.valueOf(x).multiply(BigInteger.valueOf(y));
            }
            return narrowLong(left, right, result);
        }
        // if either are bigdecimal use that type
        if (left instanceof BigDecimal || right instanceof BigDecimal) {
            final BigDecimal l = toBigDecimal(left);
            final BigDecimal r = toBigDecimal(right);
            final BigDecimal result = l.multiply(r, getMathContext());
            return narrowBigDecimal(left, right, result);
        }
        // if either are floating point (double or float) use double
        if (isFloatingPointNumber(left) || isFloatingPointNumber(right)) {
            final double l = toDouble(left);
            final double r = toDouble(right);
            return l * r;
        }
        // otherwise treat as integers
        final BigInteger l = toBigInteger(left);
        final BigInteger r = toBigInteger(right);
        final BigInteger result = l.multiply(r);
        return narrowBigInteger(left, right, result);
    }","  public void test313()  throws Throwable  {
      MathContext mathContext0 = new MathContext(4211);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false, mathContext0, 41);
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.options((JexlContext) null);
      Character character0 = new Character('2');
      jexlArithmetic0.lessThan(character0, (Object) null);
      CharBuffer.allocate(4211);
      jexlArithmetic1.positivize((Object) null);
      // Undeclared exception!
      try { 
        jexlArithmetic1.multiply(jexlArithmetic0, (Object) null);
        fail(""Expecting exception: ArithmeticException"");
      } catch(ArithmeticException e) {
         //
         // BigInteger coercion: org.apache.commons.jexl3.JexlArithmetic:(org.apache.commons.jexl3.JexlArithmetic@1)
         //
         verifyException(""org.apache.commons.jexl3.JexlArithmetic"", e);
      }
  }"
1037,"    public Object positivize(final Object val) {
        if (val == null) {
            controlNullOperand();
            return null;
        }
        if (val instanceof Short) {
            return ((Short) val).intValue();
        }
        if (val instanceof Byte) {
            return ((Byte) val).intValue();
        }
        if (val instanceof Number) {
            return val;
        }
        if (val instanceof Character) {
            return (int) (Character) val;
        }
        if (val instanceof Boolean) {
            return val;
        }
        if (val instanceof AtomicBoolean) {
            return ((AtomicBoolean) val).get();
        }
        throw new ArithmeticException(""Object positivize:("" + val + "")"");
    }","  public void test314()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true);
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.options((JexlOptions) null);
      Boolean boolean0 = Boolean.valueOf(false);
      Boolean.logicalXor(false, true);
      jexlArithmetic0.narrowBigDecimal((Object) null, boolean0, (BigDecimal) null);
      MathContext mathContext0 = new MathContext(1146);
      mathContext0.equals(jexlArithmetic1);
      JexlArithmetic jexlArithmetic2 = jexlArithmetic1.createWithOptions(false, mathContext0, 1146);
      // Undeclared exception!
      try { 
        jexlArithmetic2.positivize(jexlArithmetic0);
        fail(""Expecting exception: ArithmeticException"");
      } catch(ArithmeticException e) {
         //
         // Object positivize:(org.apache.commons.jexl3.JexlArithmetic@1)
         //
         verifyException(""org.apache.commons.jexl3.JexlArithmetic"", e);
      }
  }"
1038,"    public Object and(final Object left, final Object right) {
        final long l = toLong(left);
        final long r = toLong(right);
        return l & r;
    }","  public void test315()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      MathContext mathContext0 = MathContext.DECIMAL128;
      mathContext0.getRoundingMode();
      jexlArithmetic0.toBoolean((Object) null);
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.createWithOptions(false, mathContext0, 275);
      JexlEngine.EmptyContext jexlEngine_EmptyContext0 = (JexlEngine.EmptyContext)JexlEngine.EMPTY_CONTEXT;
      JexlArithmetic jexlArithmetic2 = jexlArithmetic1.options((JexlContext) jexlEngine_EmptyContext0);
      jexlArithmetic2.setBuilder(275);
      BigInteger bigInteger0 = BigInteger.ZERO;
      Integer integer0 = new Integer(275);
      // Undeclared exception!
      try { 
        jexlArithmetic0.and(jexlArithmetic1, (Object) null);
        fail(""Expecting exception: ArithmeticException"");
      } catch(ArithmeticException e) {
         //
         // Long coercion: org.apache.commons.jexl3.JexlArithmetic:(org.apache.commons.jexl3.JexlArithmetic@2)
         //
         verifyException(""org.apache.commons.jexl3.JexlArithmetic"", e);
      }
  }"
1039,"    public Object or(final Object left, final Object right) {
        final long l = toLong(left);
        final long r = toLong(right);
        return l | r;
    }","  public void test316()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      Integer integer0 = new Integer(1946);
      int int0 = 0;
      Integer.toUnsignedString(0);
      JexlOptions jexlOptions0 = new JexlOptions();
      // Undeclared exception!
      try { 
        jexlArithmetic0.or(jexlOptions0, ""0"");
        fail(""Expecting exception: ArithmeticException"");
      } catch(ArithmeticException e) {
         //
         // Long coercion: org.apache.commons.jexl3.JexlOptions:(org.apache.commons.jexl3.JexlOptions@2)
         //
         verifyException(""org.apache.commons.jexl3.JexlArithmetic"", e);
      }
  }"
1040,"    public boolean lessThan(final Object left, final Object right) {
        if ((left == right) || (left == null) || (right == null)) {
            return false;
        }
        return compare(left, right, ""<"") < 0;

    }","  public void test317()  throws Throwable  {
      MathContext mathContext0 = new MathContext(0);
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false, mathContext0, 599);
      JexlOptions jexlOptions0 = new JexlOptions();
      jexlOptions0.getMathContext();
      jexlArithmetic0.lessThan(mathContext0, (Object) null);
  }"
1041,"    public Object complement(final Object val) {
        final long l = toLong(val);
        return ~l;
    }","  public void test318()  throws Throwable  {
      MathContext mathContext0 = MathContext.DECIMAL128;
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true, mathContext0, (-548));
      JexlOptions jexlOptions0 = new JexlOptions();
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.options(jexlOptions0);
      JexlArithmetic jexlArithmetic2 = jexlArithmetic1.createWithOptions(true, mathContext0, (-479));
      jexlArithmetic2.not(jexlArithmetic1);
      jexlArithmetic2.isNegateStable();
      Long long0 = Long.valueOf((long) (-548));
      Long.sum(0L, 0L);
      Class<String> class0 = String.class;
      jexlArithmetic2.narrowNumber(long0, class0);
      int int0 = 28;
      JexlArithmetic.SetBuilder jexlArithmetic_SetBuilder0 = jexlArithmetic0.setBuilder(28);
      Object object0 = jexlArithmetic_SetBuilder0.create();
      // Undeclared exception!
      try { 
        jexlArithmetic2.complement(object0);
        fail(""Expecting exception: ArithmeticException"");
      } catch(ArithmeticException e) {
         //
         // Long coercion: java.util.HashSet:([])
         //
         verifyException(""org.apache.commons.jexl3.JexlArithmetic"", e);
      }
  }"
1042,"    public Object multiply(final Object left, final Object right) {
        if (left == null && right == null) {
            return controlNullNullOperands();
        }
        // if both (non null) args fit as int
        final Number ln = asLongNumber(left);
        final Number rn = asLongNumber(right);
        if (ln != null && rn != null) {
            final long x = ln.longValue();
            final long y = rn.longValue();
            final long result = x * y;
            // detect overflow
            if (!isMultiplyExact(x, y, result)) {
                return BigInteger.valueOf(x).multiply(BigInteger.valueOf(y));
            }
            return narrowLong(left, right, result);
        }
        // if either are bigdecimal use that type
        if (left instanceof BigDecimal || right instanceof BigDecimal) {
            final BigDecimal l = toBigDecimal(left);
            final BigDecimal r = toBigDecimal(right);
            final BigDecimal result = l.multiply(r, getMathContext());
            return narrowBigDecimal(left, right, result);
        }
        // if either are floating point (double or float) use double
        if (isFloatingPointNumber(left) || isFloatingPointNumber(right)) {
            final double l = toDouble(left);
            final double r = toDouble(right);
            return l * r;
        }
        // otherwise treat as integers
        final BigInteger l = toBigInteger(left);
        final BigInteger r = toBigInteger(right);
        final BigInteger result = l.multiply(r);
        return narrowBigInteger(left, right, result);
    }","  public void test319()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true);
      RoundingMode roundingMode0 = RoundingMode.UP;
      MathContext mathContext0 = new MathContext(15, roundingMode0);
      mathContext0.equals(jexlArithmetic0);
      jexlArithmetic0.createWithOptions(true, mathContext0, 15);
      Double double0 = new Double((-654.885257051062));
      char[] charArray0 = new char[0];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0, 0, 0);
      // Undeclared exception!
      try { 
        jexlArithmetic0.multiply(double0, charBuffer0);
        fail(""Expecting exception: ArithmeticException"");
      } catch(ArithmeticException e) {
         //
         // Double coercion: java.nio.HeapCharBuffer:()
         //
         verifyException(""org.apache.commons.jexl3.JexlArithmetic"", e);
      }
  }"
1043,"    public final Object matches(final Object lhs, final Object rhs) {
        return contains(rhs, lhs);
    }","  public void test320()  throws Throwable  {
      MathContext mathContext0 = MathContext.DECIMAL128;
      mathContext0.getPrecision();
      mathContext0.getPrecision();
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true, mathContext0, (-1));
      Short short0 = new Short((short)666);
      Short.toUnsignedLong((short)666);
      jexlArithmetic0.negate(short0);
      mathContext0.getRoundingMode();
      JexlArithmetic.isMultiplyExact(34, 0L, 0L);
      jexlArithmetic0.contains(mathContext0, mathContext0);
      jexlArithmetic0.matches(mathContext0, (Object) null);
  }"
1044,"    public MapBuilder mapBuilder(final int size) {
        return new org.apache.commons.jexl3.internal.MapBuilder(size);
    }","  public void test321()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      jexlArithmetic0.matches((Object) null, (Object) null);
      jexlArithmetic0.mapBuilder(0);
  }"
1045,"    protected Number narrowBigInteger(final Object lhs, final Object rhs, final BigInteger bigi) {
        //coerce to long if possible
        if (!(lhs instanceof BigInteger || rhs instanceof BigInteger)
                && bigi.compareTo(BIGI_LONG_MAX_VALUE) <= 0
                && bigi.compareTo(BIGI_LONG_MIN_VALUE) >= 0) {
            // coerce to int if possible
            final long l = bigi.longValue();
            // coerce to int when possible (int being so often used in method parms)
            if (!(lhs instanceof Long || rhs instanceof Long)
                    && l <= Integer.MAX_VALUE
                    && l >= Integer.MIN_VALUE) {
                return (int) l;
            }
            return l;
        }
        return bigi;
    }","  public void test322()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true);
      MathContext mathContext0 = MathContext.DECIMAL128;
      int int0 = (-2542);
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.createWithOptions(false, mathContext0, (-2542));
      mathContext0.toString();
      Long long0 = new Long((-2542));
      Long.divideUnsigned((-2542), (-2542));
      // Undeclared exception!
      try { 
        jexlArithmetic1.narrowBigInteger(jexlArithmetic0, long0, (BigInteger) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.JexlArithmetic"", e);
      }
  }"
1046,"    public Object add(final Object left, final Object right) {
        if (left == null && right == null) {
            return controlNullNullOperands();
        }
        final boolean strconcat = strict
                            ? left instanceof String || right instanceof String
                            : left instanceof String && right instanceof String;
        if (!strconcat) {
            try {
                // if both (non null) args fit as long
                final Number ln = asLongNumber(left);
                final Number rn = asLongNumber(right);
                if (ln != null && rn != null) {
                    final long x = ln.longValue();
                    final long y = rn.longValue();
                    final long result = x + y;
                    // detect overflow, see java8 Math.addExact
                    if (((x ^ result) & (y ^ result)) < 0) {
                        return BigInteger.valueOf(x).add(BigInteger.valueOf(y));
                    }
                    return narrowLong(left, right, result);
                }
                // if either are bigdecimal use that type
                if (left instanceof BigDecimal || right instanceof BigDecimal) {
                    final BigDecimal l = toBigDecimal(left);
                    final BigDecimal r = toBigDecimal(right);
                    final BigDecimal result = l.add(r, getMathContext());
                    return narrowBigDecimal(left, right, result);
                }
                // if either are floating point (double or float) use double
                if (isFloatingPointNumber(left) || isFloatingPointNumber(right)) {
                    final double l = toDouble(left);
                    final double r = toDouble(right);
                    return l + r;
                }
                // otherwise treat as (big) integers
                final BigInteger l = toBigInteger(left);
                final BigInteger r = toBigInteger(right);
                final BigInteger result = l.add(r);
                return narrowBigInteger(left, right, result);
            } catch (final java.lang.NumberFormatException nfe) {
                if (left == null || right == null) {
                    controlNullOperand();
                }
            }
        }
        return toString(left).concat(toString(right));
    }","  public void test323()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      JexlOptions jexlOptions0 = new JexlOptions();
      Map<String, Object> map0 = jexlOptions0.getNamespaces();
      MapContext mapContext0 = new MapContext(map0);
      jexlOptions0.setNamespaces(map0);
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.options((JexlContext) mapContext0);
      Boolean boolean0 = jexlArithmetic1.isEmpty((Object) map0);
      jexlArithmetic1.toBigInteger(boolean0);
      jexlOptions0.getMathContext();
      int int0 = 0;
      JexlArithmetic jexlArithmetic2 = jexlArithmetic1.createWithOptions(false, (MathContext) null, 0);
      jexlArithmetic1.mapBuilder(0);
      // Undeclared exception!
      try { 
        jexlArithmetic2.add(jexlOptions0, jexlArithmetic1);
        fail(""Expecting exception: ArithmeticException"");
      } catch(ArithmeticException e) {
         //
         // BigInteger coercion: org.apache.commons.jexl3.JexlOptions:(org.apache.commons.jexl3.JexlOptions@2)
         //
         verifyException(""org.apache.commons.jexl3.JexlArithmetic"", e);
      }
  }"
1047,"    public Object subtract(final Object left, final Object right) {
        if (left == null && right == null) {
            return controlNullNullOperands();
        }
        // if both (non null) args fit as long
        final Number ln = asLongNumber(left);
        final Number rn = asLongNumber(right);
        if (ln != null && rn != null) {
            final long x = ln.longValue();
            final long y = rn.longValue();
            final long result = x - y;
            // detect overflow, see java8 Math.subtractExact
            if (((x ^ y) & (x ^ result)) < 0) {
                return BigInteger.valueOf(x).subtract(BigInteger.valueOf(y));
            }
            return narrowLong(left, right, result);
        }
        // if either are bigdecimal use that type
        if (left instanceof BigDecimal || right instanceof BigDecimal) {
            final BigDecimal l = toBigDecimal(left);
            final BigDecimal r = toBigDecimal(right);
            final BigDecimal result = l.subtract(r, getMathContext());
            return narrowBigDecimal(left, right, result);
        }
        // if either are floating point (double or float) use double
        if (isFloatingPointNumber(left) || isFloatingPointNumber(right)) {
            final double l = toDouble(left);
            final double r = toDouble(right);
            return l - r;
        }
        // otherwise treat as integers
        final BigInteger l = toBigInteger(left);
        final BigInteger r = toBigInteger(right);
        final BigInteger result = l.subtract(r);
        return narrowBigInteger(left, right, result);
    }","  public void test324()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      Short short0 = new Short((short)0);
      short short1 = (short)0;
      Short.compare((short)3, (short)0);
      short short2 = (short)3;
      Short.toUnsignedInt((short)3);
      BigDecimal bigDecimal1 = BigDecimal.TEN;
      bigDecimal1.signum();
      bigDecimal1.divide(bigDecimal0, 0, (int) (short)0);
      bigDecimal1.stripTrailingZeros();
      bigDecimal0.divideToIntegralValue(bigDecimal1);
      Short.compare((short) (-1), (short) (-1));
      // Undeclared exception!
      try { 
        jexlArithmetic0.subtract(short0, bigDecimal0);
        fail(""Expecting exception: NumberFormatException"");
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.math.BigDecimal"", e);
      }
  }"
1048,"    public JexlArithmetic(final boolean astrict) {
        this(astrict, null, Integer.MIN_VALUE);
    }","  public void test325()  throws Throwable  {
      MathContext mathContext0 = MathContext.DECIMAL32;
      int int0 = 0;
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true, mathContext0, 0);
      boolean boolean0 = false;
      jexlArithmetic0.createWithOptions(false, mathContext0, 0);
      JexlEngine.getThreadEngine();
      Boolean boolean1 = null;
      mathContext0.getPrecision();
      ObjectContext<Boolean> objectContext0 = new ObjectContext<Boolean>((JexlEngine) null, (Boolean) null);
      mathContext0.toString();
      Integer integer0 = new Integer(1688);
      JexlArithmetic.NullOperand jexlArithmetic_NullOperand0 = new JexlArithmetic.NullOperand();
      // Undeclared exception!
      try { 
        MockFile.createTempFile("""", """");
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException(""org.evosuite.runtime.vfs.VirtualFileSystem"", e);
      }
  }"
1049,"    public Object and(final Object left, final Object right) {
        final long l = toLong(left);
        final long r = toLong(right);
        return l & r;
    }","  public void test326()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      MapContext mapContext0 = new MapContext();
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.options((JexlContext) mapContext0);
      JexlOptions jexlOptions0 = new JexlOptions();
      JexlArithmetic jexlArithmetic2 = jexlArithmetic1.options(jexlOptions0);
      JexlEngine.getThreadEngine();
      jexlOptions0.set((JexlEngine) null);
      jexlArithmetic2.contains(jexlOptions0, jexlArithmetic0);
      Character character0 = new Character('n');
      Character.isIdeographic((byte)13);
      mapContext0.set(""+xbWMHiP:j"", character0);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      bigDecimal0.toEngineeringString();
      jexlArithmetic2.roundBigDecimal(bigDecimal0);
      Byte byte0 = new Byte((byte)13);
      Object object0 = jexlArithmetic1.positivize(byte0);
      JexlArithmetic jexlArithmetic3 = jexlArithmetic1.options((JexlContext) mapContext0);
      // Undeclared exception!
      try { 
        jexlArithmetic2.and(object0, jexlArithmetic3);
        fail(""Expecting exception: ArithmeticException"");
      } catch(ArithmeticException e) {
         //
         // Long coercion: org.apache.commons.jexl3.JexlArithmetic:(org.apache.commons.jexl3.JexlArithmetic@1)
         //
         verifyException(""org.apache.commons.jexl3.JexlArithmetic"", e);
      }
  }"
1050,"    public ArrayBuilder arrayBuilder(final int size) {
        return new org.apache.commons.jexl3.internal.ArrayBuilder(size);
    }","  public void test327()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      double double0 = 507.2534;
      Double double1 = new Double(507.2534);
      Boolean boolean0 = jexlArithmetic0.isEmpty((Object) double1);
      jexlArithmetic0.toBigInteger(boolean0);
      Boolean.logicalXor(true, true);
      jexlArithmetic0.lessThanOrEqual((Object) null, boolean0);
      Boolean.logicalOr(false, false);
      Boolean.logicalXor(false, false);
      int int0 = (-44);
      // Undeclared exception!
      try { 
        jexlArithmetic0.arrayBuilder((-44));
        fail(""Expecting exception: NegativeArraySizeException"");
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.internal.ArrayBuilder"", e);
      }
  }"
1051,"    public BigDecimal toBigDecimal(final Object val) {
        if (val instanceof BigDecimal) {
            return roundBigDecimal((BigDecimal) val);
        }
        if (val == null) {
            controlNullOperand();
            return BigDecimal.ZERO;
        }
        if (val instanceof Double) {
            if (Double.isNaN(((Double) val))) {
                return BigDecimal.ZERO;
            }
            return roundBigDecimal(new BigDecimal(val.toString(), getMathContext()));
        }
        if (val instanceof Number) {
            return roundBigDecimal(new BigDecimal(val.toString(), getMathContext()));
        }
        if (val instanceof Boolean) {
            return BigDecimal.valueOf(((Boolean) val) ? 1. : 0.);
        }
        if (val instanceof AtomicBoolean) {
            return BigDecimal.valueOf(((AtomicBoolean) val).get() ? 1L : 0L);
        }
        if (val instanceof String) {
            final String string = (String) val;
            if ("""".equals(string)) {
                return BigDecimal.ZERO;
            }
            return roundBigDecimal(new BigDecimal(string, getMathContext()));
        }
        if (val instanceof Character) {
            final int i = ((Character) val);
            return new BigDecimal(i);
        }
        throw new ArithmeticException(""BigDecimal coercion: ""
                + val.getClass().getName() + "":("" + val + "")"");
    }","  public void test328()  throws Throwable  {
      MathContext mathContext0 = MathContext.DECIMAL32;
      int int0 = 3308;
      mathContext0.getPrecision();
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false, mathContext0, 3308);
      // Undeclared exception!
      try { 
        jexlArithmetic0.toBigDecimal(mathContext0);
        fail(""Expecting exception: ArithmeticException"");
      } catch(ArithmeticException e) {
         //
         // BigDecimal coercion: java.math.MathContext:(precision=7 roundingMode=HALF_EVEN)
         //
         verifyException(""org.apache.commons.jexl3.JexlArithmetic"", e);
      }
  }"
1052,"    public Object xor(final Object left, final Object right) {
        final long l = toLong(left);
        final long r = toLong(right);
        return l ^ r;
    }","  public void test329()  throws Throwable  {
      MathContext mathContext0 = MathContext.DECIMAL32;
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false, mathContext0, 1066);
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.createWithOptions(false, mathContext0, 894);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      String string0 = ""Object comparison:("";
      Double double0 = new Double(894);
      hashMap0.put(""Object comparison:("", double0);
      MapContext mapContext0 = new MapContext(hashMap0);
      JexlArithmetic jexlArithmetic2 = jexlArithmetic1.options((JexlContext) mapContext0);
      JexlOptions jexlOptions0 = new JexlOptions();
      jexlOptions0.copy();
      JexlArithmetic jexlArithmetic3 = jexlArithmetic1.options(jexlOptions0);
      jexlArithmetic3.isPositivizeStable();
      // Undeclared exception!
      try { 
        jexlArithmetic0.xor(jexlArithmetic2, jexlArithmetic1);
        fail(""Expecting exception: ArithmeticException"");
      } catch(ArithmeticException e) {
         //
         // Long coercion: org.apache.commons.jexl3.JexlArithmetic:(org.apache.commons.jexl3.JexlArithmetic@2)
         //
         verifyException(""org.apache.commons.jexl3.JexlArithmetic"", e);
      }
  }"
1053,"    public Integer size(final Object object) {
        return size(object, object == null? 0 : 1);
    }","  public void test330()  throws Throwable  {
      MathContext mathContext0 = MathContext.DECIMAL128;
      int int0 = (-849);
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false, mathContext0, (-849));
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.createWithOptions(false, mathContext0, (-849));
      Byte byte0 = new Byte((byte) (-3));
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      Number number0 = jexlArithmetic0.narrowBigDecimal(byte0, (Object) null, bigDecimal0);
      JexlEngine.EmptyContext jexlEngine_EmptyContext0 = (JexlEngine.EmptyContext)JexlEngine.EMPTY_CONTEXT;
      JexlArithmetic jexlArithmetic2 = jexlArithmetic1.options((JexlContext) jexlEngine_EmptyContext0);
      jexlArithmetic2.add(number0, ""?t96iyUa`0W]t%"");
      jexlArithmetic2.logicalNot(mathContext0);
      jexlArithmetic0.size((Object) jexlEngine_EmptyContext0);
      boolean boolean0 = false;
      char[] charArray0 = new char[8];
      charArray0[0] = 'M';
      charArray0[1] = 'w';
      charArray0[2] = ',';
      charArray0[3] = '#';
      charArray0[4] = 'S';
      charArray0[5] = 's';
      charArray0[6] = 'i';
      charArray0[7] = '!';
      BigDecimal bigDecimal1 = null;
      try {
        bigDecimal1 = new BigDecimal(charArray0);
        fail(""Expecting exception: NumberFormatException"");
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.math.BigDecimal"", e);
      }
  }"
1054,"    public Object add(final Object left, final Object right) {
        if (left == null && right == null) {
            return controlNullNullOperands();
        }
        final boolean strconcat = strict
                            ? left instanceof String || right instanceof String
                            : left instanceof String && right instanceof String;
        if (!strconcat) {
            try {
                // if both (non null) args fit as long
                final Number ln = asLongNumber(left);
                final Number rn = asLongNumber(right);
                if (ln != null && rn != null) {
                    final long x = ln.longValue();
                    final long y = rn.longValue();
                    final long result = x + y;
                    // detect overflow, see java8 Math.addExact
                    if (((x ^ result) & (y ^ result)) < 0) {
                        return BigInteger.valueOf(x).add(BigInteger.valueOf(y));
                    }
                    return narrowLong(left, right, result);
                }
                // if either are bigdecimal use that type
                if (left instanceof BigDecimal || right instanceof BigDecimal) {
                    final BigDecimal l = toBigDecimal(left);
                    final BigDecimal r = toBigDecimal(right);
                    final BigDecimal result = l.add(r, getMathContext());
                    return narrowBigDecimal(left, right, result);
                }
                // if either are floating point (double or float) use double
                if (isFloatingPointNumber(left) || isFloatingPointNumber(right)) {
                    final double l = toDouble(left);
                    final double r = toDouble(right);
                    return l + r;
                }
                // otherwise treat as (big) integers
                final BigInteger l = toBigInteger(left);
                final BigInteger r = toBigInteger(right);
                final BigInteger result = l.add(r);
                return narrowBigInteger(left, right, result);
            } catch (final java.lang.NumberFormatException nfe) {
                if (left == null || right == null) {
                    controlNullOperand();
                }
            }
        }
        return toString(left).concat(toString(right));
    }","  public void test331()  throws Throwable  {
      RoundingMode roundingMode0 = RoundingMode.UP;
      MathContext mathContext0 = new MathContext(0, roundingMode0);
      mathContext0.getPrecision();
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true, mathContext0, 0);
      JexlEngine.EmptyContext jexlEngine_EmptyContext0 = (JexlEngine.EmptyContext)JexlEngine.EMPTY_CONTEXT;
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.options((JexlContext) jexlEngine_EmptyContext0);
      JexlOptions jexlOptions0 = new JexlOptions();
      JexlArithmetic jexlArithmetic2 = jexlArithmetic1.options(jexlOptions0);
      mathContext0.getPrecision();
      jexlArithmetic2.greaterThan(jexlEngine_EmptyContext0, jexlEngine_EmptyContext0);
      BigInteger bigInteger0 = BigInteger.ONE;
      Pattern pattern0 = JexlArithmetic.FLOAT_PATTERN;
      char[] charArray0 = new char[5];
      charArray0[0] = '6';
      charArray0[1] = 'v';
      charArray0[2] = 'C';
      charArray0[3] = 'Z';
      charArray0[4] = '';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      pattern0.split((CharSequence) charBuffer0);
      bigInteger0.equals(pattern0);
      Number number0 = jexlArithmetic2.narrow(bigInteger0);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      jexlArithmetic2.isNumberable(bigDecimal0);
      jexlArithmetic0.narrow(number0);
      jexlArithmetic0.isNegateStable();
      jexlArithmetic1.narrowBigDecimal((Object) null, number0, bigDecimal0);
      // Undeclared exception!
      try { 
        jexlArithmetic1.add(bigDecimal0, (Object) null);
        fail(""Expecting exception: ArithmeticException"");
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.JexlArithmetic"", e);
      }
  }"
1055,"    public boolean lessThan(final Object left, final Object right) {
        if ((left == right) || (left == null) || (right == null)) {
            return false;
        }
        return compare(left, right, ""<"") < 0;

    }","  public void test332()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      MathContext mathContext0 = MathContext.DECIMAL64;
      mathContext0.toString();
      int int0 = 835;
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.createWithOptions(false, mathContext0, 835);
      jexlArithmetic0.size((Object) jexlArithmetic1);
      Long long0 = new Long(626L);
      // Undeclared exception!
      try { 
        jexlArithmetic1.lessThan(jexlArithmetic0, long0);
        fail(""Expecting exception: ArithmeticException"");
      } catch(ArithmeticException e) {
         //
         // Long coercion: org.apache.commons.jexl3.JexlArithmetic:(org.apache.commons.jexl3.JexlArithmetic@1)
         //
         verifyException(""org.apache.commons.jexl3.JexlArithmetic"", e);
      }
  }"
1056,"    public boolean lessThan(final Object left, final Object right) {
        if ((left == right) || (left == null) || (right == null)) {
            return false;
        }
        return compare(left, right, ""<"") < 0;

    }","  public void test333()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true);
      MathContext mathContext0 = MathContext.DECIMAL32;
      JexlOptions jexlOptions0 = new JexlOptions();
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.options(jexlOptions0);
      mathContext0.equals(jexlArithmetic1);
      mathContext0.toString();
      JexlArithmetic jexlArithmetic2 = jexlArithmetic0.createWithOptions(true, mathContext0, 0);
      jexlArithmetic2.size((Object) ""SELF_OR"");
      Integer integer0 = new Integer(0);
      Integer.max(0, 0);
      jexlArithmetic0.isNumberable(integer0);
      // Undeclared exception!
      try { 
        jexlArithmetic0.lessThan(jexlArithmetic2, integer0);
        fail(""Expecting exception: ArithmeticException"");
      } catch(ArithmeticException e) {
         //
         // Long coercion: org.apache.commons.jexl3.JexlArithmetic:(org.apache.commons.jexl3.JexlArithmetic@3)
         //
         verifyException(""org.apache.commons.jexl3.JexlArithmetic"", e);
      }
  }"
1057,"    public Iterable<?> createRange(final Object from, final Object to) throws ArithmeticException {
        final long lfrom = toLong(from);
        final long lto = toLong(to);
        if ((lfrom >= Integer.MIN_VALUE && lfrom <= Integer.MAX_VALUE)
                && (lto >= Integer.MIN_VALUE && lto <= Integer.MAX_VALUE)) {
            return org.apache.commons.jexl3.internal.IntegerRange.create((int) lfrom, (int) lto);
        }
        return org.apache.commons.jexl3.internal.LongRange.create(lfrom, lto);
    }","  public void test334()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.options((JexlContext) null);
      JexlOptions jexlOptions0 = new JexlOptions();
      JexlArithmetic jexlArithmetic2 = jexlArithmetic1.options(jexlOptions0);
      MathContext mathContext0 = MathContext.DECIMAL64;
      int int0 = 0;
      JexlArithmetic jexlArithmetic3 = jexlArithmetic2.createWithOptions(false, mathContext0, 0);
      Short short0 = new Short((short)0);
      Byte byte0 = Byte.valueOf((byte)3);
      jexlArithmetic3.bitwiseOr(short0, byte0);
      try { 
        jexlArithmetic3.createRange(jexlOptions0, mathContext0);
        fail(""Expecting exception: ArithmeticException"");
      } catch(ArithmeticException e) {
         //
         // Long coercion: org.apache.commons.jexl3.JexlOptions:(org.apache.commons.jexl3.JexlOptions@2)
         //
         verifyException(""org.apache.commons.jexl3.JexlArithmetic"", e);
      }
  }"
1058,"    public final Object bitwiseAnd(final Object lhs, final Object rhs) {
        return and(lhs, rhs);
    }","  public void test335()  throws Throwable  {
      MathContext mathContext0 = MathContext.UNLIMITED;
      int int0 = 0;
      Pattern pattern0 = Pattern.compile("", got "", 0);
      mathContext0.equals(pattern0);
      int int1 = 0;
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true, mathContext0, 0);
      String string0 = null;
      Character character0 = new Character('(');
      Character.isSurrogate('(');
      // Undeclared exception!
      try { 
        jexlArithmetic0.bitwiseAnd((Object) null, character0);
        fail(""Expecting exception: ArithmeticException"");
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.JexlArithmetic"", e);
      }
  }"
1059,"    public Object and(final Object left, final Object right) {
        final long l = toLong(left);
        final long r = toLong(right);
        return l & r;
    }","  public void test336()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true);
      BigInteger bigInteger0 = BigInteger.TEN;
      Object object0 = null;
      Boolean boolean0 = jexlArithmetic0.endsWith((Object) null, bigInteger0);
      Boolean.logicalAnd(true, true);
      jexlArithmetic0.isEmpty((Object) bigInteger0, boolean0);
      MathContext mathContext0 = MathContext.UNLIMITED;
      jexlArithmetic0.matches(bigInteger0, bigInteger0);
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.createWithOptions(true, mathContext0, 679);
      int int0 = 2305;
      String string0 = ""Trw\""Vos#+w6,X"";
      BigInteger bigInteger1 = JexlArithmetic.BIGI_LONG_MIN_VALUE;
      bigInteger1.setBit(131);
      jexlArithmetic1.compare(bigInteger1, bigInteger1, ""^[+-]?d*(.d*)?([eE][+-]?d+)?$"");
      Boolean.logicalXor(true, true);
      Pattern pattern0 = Pattern.compile(""Trw\""Vos#+w6,X"", 2305);
      Object object1 = jexlArithmetic0.logicalNot(""Trw\""Vos#+w6,X"");
      // Undeclared exception!
      try { 
        jexlArithmetic1.and(pattern0, object1);
        fail(""Expecting exception: ArithmeticException"");
      } catch(ArithmeticException e) {
         //
         // Long coercion: java.util.regex.Pattern:(Trw\""Vos#+w6,X)
         //
         verifyException(""org.apache.commons.jexl3.JexlArithmetic"", e);
      }
  }"
1060,"    public MapBuilder mapBuilder(final int size) {
        return new org.apache.commons.jexl3.internal.MapBuilder(size);
    }","  public void test337()  throws Throwable  {
      boolean boolean0 = false;
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      JexlEngine.EmptyContext jexlEngine_EmptyContext0 = (JexlEngine.EmptyContext)JexlEngine.EMPTY_CONTEXT;
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.options((JexlContext) jexlEngine_EmptyContext0);
      int int0 = (-1907);
      // Undeclared exception!
      try { 
        jexlArithmetic1.mapBuilder((-1907));
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Illegal initial capacity: -1907
         //
         verifyException(""java.util.HashMap"", e);
      }
  }"
1061,"    public Object multiply(final Object left, final Object right) {
        if (left == null && right == null) {
            return controlNullNullOperands();
        }
        // if both (non null) args fit as int
        final Number ln = asLongNumber(left);
        final Number rn = asLongNumber(right);
        if (ln != null && rn != null) {
            final long x = ln.longValue();
            final long y = rn.longValue();
            final long result = x * y;
            // detect overflow
            if (!isMultiplyExact(x, y, result)) {
                return BigInteger.valueOf(x).multiply(BigInteger.valueOf(y));
            }
            return narrowLong(left, right, result);
        }
        // if either are bigdecimal use that type
        if (left instanceof BigDecimal || right instanceof BigDecimal) {
            final BigDecimal l = toBigDecimal(left);
            final BigDecimal r = toBigDecimal(right);
            final BigDecimal result = l.multiply(r, getMathContext());
            return narrowBigDecimal(left, right, result);
        }
        // if either are floating point (double or float) use double
        if (isFloatingPointNumber(left) || isFloatingPointNumber(right)) {
            final double l = toDouble(left);
            final double r = toDouble(right);
            return l * r;
        }
        // otherwise treat as integers
        final BigInteger l = toBigInteger(left);
        final BigInteger r = toBigInteger(right);
        final BigInteger result = l.multiply(r);
        return narrowBigInteger(left, right, result);
    }","  public void test338()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true);
      int int0 = 1;
      jexlArithmetic0.mapBuilder(1);
      jexlArithmetic0.isStrict();
      String string0 = ""`dU+8(!<CS"";
      Object object0 = jexlArithmetic0.logicalNot(""`dU+8(!<CS"");
      // Undeclared exception!
      try { 
        jexlArithmetic0.multiply(""`dU+8(!<CS"", object0);
        fail(""Expecting exception: NumberFormatException"");
      } catch(NumberFormatException e) {
         //
         // Illegal embedded sign character
         //
         verifyException(""java.math.BigInteger"", e);
      }
  }"
1062,"    public final Object bitwiseXor(final Object lhs, final Object rhs) {
        return xor(lhs, rhs);
    }","  public void test339()  throws Throwable  {
      MathContext mathContext0 = MathContext.DECIMAL32;
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true, mathContext0, 0);
      mathContext0.getRoundingMode();
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.options((JexlOptions) null);
      Boolean boolean0 = jexlArithmetic1.endsWith((Object) null, mathContext0);
      Boolean.compare(true, true);
      MathContext mathContext1 = MathContext.DECIMAL32;
      mathContext1.toString();
      // Undeclared exception!
      try { 
        jexlArithmetic1.bitwiseXor(boolean0, mathContext1);
        fail(""Expecting exception: ArithmeticException"");
      } catch(ArithmeticException e) {
         //
         // Long coercion: java.math.MathContext:(precision=7 roundingMode=HALF_EVEN)
         //
         verifyException(""org.apache.commons.jexl3.JexlArithmetic"", e);
      }
  }"
1063,"    public Object complement(final Object val) {
        final long l = toLong(val);
        return ~l;
    }","  public void test340()  throws Throwable  {
      boolean boolean0 = true;
      MathContext mathContext0 = MathContext.DECIMAL64;
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true, mathContext0, 0);
      short short0 = (short)0;
      // Undeclared exception!
      try { 
        jexlArithmetic0.complement(mathContext0);
        fail(""Expecting exception: ArithmeticException"");
      } catch(ArithmeticException e) {
         //
         // Long coercion: java.math.MathContext:(precision=16 roundingMode=HALF_EVEN)
         //
         verifyException(""org.apache.commons.jexl3.JexlArithmetic"", e);
      }
  }"
1064,"    protected Object controlNullNullOperands() {
        if (isStrict()) {
            throw new NullOperand();
        }
        return 0;
    }","  public void test341()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true);
      // Undeclared exception!
      try { 
        jexlArithmetic0.controlNullNullOperands();
        fail(""Expecting exception: ArithmeticException"");
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.JexlArithmetic"", e);
      }
  }"
1065,"    public Object multiply(final Object left, final Object right) {
        if (left == null && right == null) {
            return controlNullNullOperands();
        }
        // if both (non null) args fit as int
        final Number ln = asLongNumber(left);
        final Number rn = asLongNumber(right);
        if (ln != null && rn != null) {
            final long x = ln.longValue();
            final long y = rn.longValue();
            final long result = x * y;
            // detect overflow
            if (!isMultiplyExact(x, y, result)) {
                return BigInteger.valueOf(x).multiply(BigInteger.valueOf(y));
            }
            return narrowLong(left, right, result);
        }
        // if either are bigdecimal use that type
        if (left instanceof BigDecimal || right instanceof BigDecimal) {
            final BigDecimal l = toBigDecimal(left);
            final BigDecimal r = toBigDecimal(right);
            final BigDecimal result = l.multiply(r, getMathContext());
            return narrowBigDecimal(left, right, result);
        }
        // if either are floating point (double or float) use double
        if (isFloatingPointNumber(left) || isFloatingPointNumber(right)) {
            final double l = toDouble(left);
            final double r = toDouble(right);
            return l * r;
        }
        // otherwise treat as integers
        final BigInteger l = toBigInteger(left);
        final BigInteger r = toBigInteger(right);
        final BigInteger result = l.multiply(r);
        return narrowBigInteger(left, right, result);
    }","  public void test342()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      boolean boolean0 = false;
      Boolean boolean1 = Boolean.valueOf(""lCrsiu"");
      // Undeclared exception!
      try { 
        jexlArithmetic0.multiply(boolean1, ""lCrsiu"");
        fail(""Expecting exception: NumberFormatException"");
      } catch(NumberFormatException e) {
         //
         // For input string: \""lCrsiu\""
         //
         verifyException(""java.lang.NumberFormatException"", e);
      }
  }"
1066,"    public Object subtract(final Object left, final Object right) {
        if (left == null && right == null) {
            return controlNullNullOperands();
        }
        // if both (non null) args fit as long
        final Number ln = asLongNumber(left);
        final Number rn = asLongNumber(right);
        if (ln != null && rn != null) {
            final long x = ln.longValue();
            final long y = rn.longValue();
            final long result = x - y;
            // detect overflow, see java8 Math.subtractExact
            if (((x ^ y) & (x ^ result)) < 0) {
                return BigInteger.valueOf(x).subtract(BigInteger.valueOf(y));
            }
            return narrowLong(left, right, result);
        }
        // if either are bigdecimal use that type
        if (left instanceof BigDecimal || right instanceof BigDecimal) {
            final BigDecimal l = toBigDecimal(left);
            final BigDecimal r = toBigDecimal(right);
            final BigDecimal result = l.subtract(r, getMathContext());
            return narrowBigDecimal(left, right, result);
        }
        // if either are floating point (double or float) use double
        if (isFloatingPointNumber(left) || isFloatingPointNumber(right)) {
            final double l = toDouble(left);
            final double r = toDouble(right);
            return l - r;
        }
        // otherwise treat as integers
        final BigInteger l = toBigInteger(left);
        final BigInteger r = toBigInteger(right);
        final BigInteger result = l.subtract(r);
        return narrowBigInteger(left, right, result);
    }","  public void test343()  throws Throwable  {
      boolean boolean0 = true;
      MathContext mathContext0 = MathContext.DECIMAL32;
      int int0 = 0;
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true, mathContext0, 0);
      mathContext0.getRoundingMode();
      mathContext0.equals(jexlArithmetic0);
      JexlContext jexlContext0 = null;
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.options((JexlContext) null);
      Object object0 = null;
      // Undeclared exception!
      try { 
        jexlArithmetic1.subtract((Object) null, (Object) null);
        fail(""Expecting exception: ArithmeticException"");
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.JexlArithmetic"", e);
      }
  }"
1067,"    protected int compare(final Object left, final Object right, final String operator) {
        if (left != null && right != null) {
            if (left instanceof BigDecimal || right instanceof BigDecimal) {
                final BigDecimal l = toBigDecimal(left);
                final BigDecimal r = toBigDecimal(right);
                return l.compareTo(r);
            }
            if (left instanceof BigInteger || right instanceof BigInteger) {
                final BigInteger l = toBigInteger(left);
                final BigInteger r = toBigInteger(right);
                return l.compareTo(r);
            }
            if (isFloatingPoint(left) || isFloatingPoint(right)) {
                final double lhs = toDouble(left);
                final double rhs = toDouble(right);
                if (Double.isNaN(lhs)) {
                    if (Double.isNaN(rhs)) {
                        return 0;
                    }
                    return -1;
                }
                if (Double.isNaN(rhs)) {
                    // lhs is not NaN
                    return +1;
                }
                if (lhs < rhs) {
                    return -1;
                }
                if (lhs > rhs) {
                    return +1;
                }
                return 0;
            }
            if (isNumberable(left) || isNumberable(right)) {
                final long lhs = toLong(left);
                final long rhs = toLong(right);
                if (lhs < rhs) {
                    return -1;
                }
                if (lhs > rhs) {
                    return +1;
                }
                return 0;
            }
            if (left instanceof String || right instanceof String) {
                return toString(left).compareTo(toString(right));
            }
            if (""=="".equals(operator)) {
                return left.equals(right) ? 0 : -1;
            }
            if (left instanceof Comparable<?>) {
                @SuppressWarnings(""unchecked"") // OK because of instanceof check above
                final Comparable<Object> comparable = (Comparable<Object>) left;
                return comparable.compareTo(right);
            }
            if (right instanceof Comparable<?>) {
                @SuppressWarnings(""unchecked"") // OK because of instanceof check above
                final Comparable<Object> comparable = (Comparable<Object>) right;
                return comparable.compareTo(left);
            }
        }
        throw new ArithmeticException(""Object comparison:("" + left + "" "" + operator + "" "" + right + "")"");
    }","  public void test344()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      JexlArithmetic jexlArithmetic1 = new JexlArithmetic(false);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)31;
      byteArray0[1] = (byte) (-32);
      byteArray0[2] = (byte) (-42);
      byteArray0[3] = (byte) (-89);
      byteArray0[4] = (byte)25;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      // Undeclared exception!
      try { 
        jexlArithmetic0.compare(jexlArithmetic1, bigInteger0, ""i?n*2g(@X~t6 kYq8"");
        fail(""Expecting exception: ArithmeticException"");
      } catch(ArithmeticException e) {
         //
         // BigInteger coercion: org.apache.commons.jexl3.JexlArithmetic:(org.apache.commons.jexl3.JexlArithmetic@2)
         //
         verifyException(""org.apache.commons.jexl3.JexlArithmetic"", e);
      }
  }"
1068,"    public int toInteger(final Object val) {
        if (val == null) {
            controlNullOperand();
            return 0;
        }
        if (val instanceof Double) {
            final Double dval = (Double) val;
            if (Double.isNaN(dval)) {
                return 0;
            }
            return dval.intValue();
        }
        if (val instanceof Number) {
            return ((Number) val).intValue();
        }
        if (val instanceof String) {
            if ("""".equals(val)) {
                return 0;
            }
            return Integer.parseInt((String) val);
        }
        if (val instanceof Boolean) {
            return ((Boolean) val) ? 1 : 0;
        }
        if (val instanceof AtomicBoolean) {
            return ((AtomicBoolean) val).get() ? 1 : 0;
        }
        if (val instanceof Character) {
            return ((Character) val);
        }

        throw new ArithmeticException(""Integer coercion: ""
                + val.getClass().getName() + "":("" + val + "")"");
    }","  public void test345()  throws Throwable  {
      JexlOptions jexlOptions0 = new JexlOptions();
      jexlOptions0.getMathContext();
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true, (MathContext) null, 2);
      // Undeclared exception!
      try { 
        jexlArithmetic0.toInteger((Object) null);
        fail(""Expecting exception: ArithmeticException"");
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.JexlArithmetic"", e);
      }
  }"
1069,"    public long toLong(final Object val) {
        if (val == null) {
            controlNullOperand();
            return 0L;
        }
        if (val instanceof Double) {
            final Double dval = (Double) val;
            if (Double.isNaN(dval)) {
                return 0L;
            }
            return dval.longValue();
        }
        if (val instanceof Number) {
            return ((Number) val).longValue();
        }
        if (val instanceof String) {
            if ("""".equals(val)) {
                return 0L;
            }
            return Long.parseLong((String) val);
        }
        if (val instanceof Boolean) {
            return ((Boolean) val) ? 1L : 0L;
        }
        if (val instanceof AtomicBoolean) {
            return ((AtomicBoolean) val).get() ? 1L : 0L;
        }
        if (val instanceof Character) {
            return ((Character) val);
        }

        throw new ArithmeticException(""Long coercion: ""
                + val.getClass().getName() + "":("" + val + "")"");
    }","  public void test346()  throws Throwable  {
      MathContext mathContext0 = MathContext.UNLIMITED;
      BigInteger bigInteger0 = JexlArithmetic.BIGI_LONG_MIN_VALUE;
      mathContext0.equals(bigInteger0);
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true, mathContext0, (-637));
      // Undeclared exception!
      try { 
        jexlArithmetic0.toLong(mathContext0);
        fail(""Expecting exception: ArithmeticException"");
      } catch(ArithmeticException e) {
         //
         // Long coercion: java.math.MathContext:(precision=0 roundingMode=HALF_UP)
         //
         verifyException(""org.apache.commons.jexl3.JexlArithmetic"", e);
      }
  }"
1070,"    protected void controlNullOperand() {
        if (isStrict()) {
            throw new NullOperand();
        }
    }","  public void test347()  throws Throwable  {
      boolean boolean0 = true;
      MathContext mathContext0 = MathContext.UNLIMITED;
      int int0 = 13;
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true, mathContext0, 13);
      JexlOptions jexlOptions0 = new JexlOptions();
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.options(jexlOptions0);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) jexlArithmetic0;
      objectArray0[1] = (Object) jexlOptions0;
      objectArray0[2] = (Object) jexlArithmetic0;
      objectArray0[3] = (Object) jexlArithmetic1;
      objectArray0[4] = (Object) mathContext0;
      objectArray0[5] = (Object) mathContext0;
      JexlOptions jexlOptions1 = new JexlOptions();
      jexlOptions1.setLexical(false);
      jexlOptions0.set(jexlOptions1);
      jexlArithmetic1.narrowArguments(objectArray0);
      // Undeclared exception!
      try { 
        jexlArithmetic1.controlNullOperand();
        fail(""Expecting exception: ArithmeticException"");
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.JexlArithmetic"", e);
      }
  }"
1071,"    public double toDouble(final Object val) {
        if (val == null) {
            controlNullOperand();
            return 0;
        }
        if (val instanceof Double) {
            return ((Double) val);
        }
        if (val instanceof Number) {
            //The below construct is used rather than ((Number)val).doubleValue() to ensure
            //equality between comparing new Double( 6.4 / 3 ) and the jexl expression of 6.4 / 3
            return Double.parseDouble(String.valueOf(val));
        }
        if (val instanceof Boolean) {
            return ((Boolean) val) ? 1. : 0.;
        }
        if (val instanceof AtomicBoolean) {
            return ((AtomicBoolean) val).get() ? 1. : 0.;
        }
        if (val instanceof String) {
            final String string = (String) val;
            if ("""".equals(string)) {
                return Double.NaN;
            }
            // the spec seems to be iffy about this.  Going to give it a wack anyway
            return Double.parseDouble(string);
        }
        if (val instanceof Character) {
            final int i = ((Character) val);
            return i;
        }
        throw new ArithmeticException(""Double coercion: ""
                + val.getClass().getName() + "":("" + val + "")"");
    }","  public void test348()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      JexlEngine.getThreadContext();
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.options((JexlContext) null);
      Long long0 = Long.getLong("">="", 2245L);
      jexlArithmetic0.matches(jexlArithmetic1, long0);
      jexlArithmetic0.toDouble((Object) null);
      BigInteger bigInteger0 = BigInteger.TEN;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-74);
      byteArray0[1] = (byte)106;
      byteArray0[2] = (byte)41;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)13;
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      // Undeclared exception!
      try { 
        bigInteger0.modPow(bigInteger1, bigInteger1);
        fail(""Expecting exception: ArithmeticException"");
      } catch(ArithmeticException e) {
         //
         // BigInteger: modulus not positive
         //
         verifyException(""java.math.BigInteger"", e);
      }
  }"
1072,"    public Integer size(final Object object) {
        return size(object, object == null? 0 : 1);
    }","  public void test349()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true);
      String string0 = ""Vup"";
      Integer integer0 = Integer.getInteger(""Vup"", 5402);
      Integer.getInteger(""Vup"", integer0);
      // Undeclared exception!
      try { 
        jexlArithmetic0.size((Object) null, integer0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.JexlArithmetic"", e);
      }
  }"
1073,"    public Object mod(final Object left, final Object right) {
        if (left == null && right == null) {
            return controlNullNullOperands();
        }
        // if both (non null) args fit as long
        final Number ln = asLongNumber(left);
        final Number rn = asLongNumber(right);
        if (ln != null && rn != null) {
            final long x = ln.longValue();
            final long y = rn.longValue();
            if (y == 0L) {
                throw new ArithmeticException(""%"");
            }
            final long result = x % y;
            return narrowLong(left, right,  result);
        }
        // if either are bigdecimal use that type
        if (left instanceof BigDecimal || right instanceof BigDecimal) {
            final BigDecimal l = toBigDecimal(left);
            final BigDecimal r = toBigDecimal(right);
            if (BigDecimal.ZERO.equals(r)) {
                throw new ArithmeticException(""%"");
            }
            final BigDecimal remainder = l.remainder(r, getMathContext());
            return narrowBigDecimal(left, right, remainder);
        }
        // if either are floating point (double or float) use double
        if (isFloatingPointNumber(left) || isFloatingPointNumber(right)) {
            final double l = toDouble(left);
            final double r = toDouble(right);
            if (r == 0.0) {
                throw new ArithmeticException(""%"");
            }
            return l % r;
        }
        // otherwise treat as integers
        final BigInteger l = toBigInteger(left);
        final BigInteger r = toBigInteger(right);
        if (BigInteger.ZERO.equals(r)) {
            throw new ArithmeticException(""%"");
        }
        final BigInteger result = l.mod(r);
        return narrowBigInteger(left, right, result);
    }","  public void test350()  throws Throwable  {
      MathContext mathContext0 = MathContext.UNLIMITED;
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false, mathContext0, 0);
      BigInteger bigInteger0 = BigInteger.ONE;
      jexlArithmetic0.toDouble(bigInteger0);
      // Undeclared exception!
      try { 
        jexlArithmetic0.mod(mathContext0, bigInteger0);
        fail(""Expecting exception: ArithmeticException"");
      } catch(ArithmeticException e) {
         //
         // BigInteger coercion: java.math.MathContext:(precision=0 roundingMode=HALF_UP)
         //
         verifyException(""org.apache.commons.jexl3.JexlArithmetic"", e);
      }
  }"
1074,"    public boolean isNegateStable() {
        return true;
    }","  public void test351()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      JexlEngine.getThreadEngine();
      Boolean boolean0 = jexlArithmetic0.endsWith((Object) null, (Object) null);
      ObjectContext<Boolean> objectContext0 = new ObjectContext<Boolean>((JexlEngine) null, boolean0);
      jexlArithmetic0.options((JexlContext) objectContext0);
      JexlEngine.EmptyContext jexlEngine_EmptyContext0 = (JexlEngine.EmptyContext)JexlEngine.EMPTY_CONTEXT;
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.options((JexlContext) jexlEngine_EmptyContext0);
      BigInteger bigInteger0 = JexlArithmetic.BIGI_LONG_MAX_VALUE;
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      jexlArithmetic1.roundBigDecimal(bigDecimal0);
      Class<Integer> class0 = Integer.class;
      jexlArithmetic1.narrowAccept(class0, class0);
      jexlArithmetic1.getMathScale();
      jexlArithmetic1.isNegateStable();
  }"
1075,"    public double toDouble(final Object val) {
        if (val == null) {
            controlNullOperand();
            return 0;
        }
        if (val instanceof Double) {
            return ((Double) val);
        }
        if (val instanceof Number) {
            //The below construct is used rather than ((Number)val).doubleValue() to ensure
            //equality between comparing new Double( 6.4 / 3 ) and the jexl expression of 6.4 / 3
            return Double.parseDouble(String.valueOf(val));
        }
        if (val instanceof Boolean) {
            return ((Boolean) val) ? 1. : 0.;
        }
        if (val instanceof AtomicBoolean) {
            return ((AtomicBoolean) val).get() ? 1. : 0.;
        }
        if (val instanceof String) {
            final String string = (String) val;
            if ("""".equals(string)) {
                return Double.NaN;
            }
            // the spec seems to be iffy about this.  Going to give it a wack anyway
            return Double.parseDouble(string);
        }
        if (val instanceof Character) {
            final int i = ((Character) val);
            return i;
        }
        throw new ArithmeticException(""Double coercion: ""
                + val.getClass().getName() + "":("" + val + "")"");
    }","  public void test352()  throws Throwable  {
      RoundingMode roundingMode0 = RoundingMode.CEILING;
      MathContext mathContext0 = new MathContext(0, roundingMode0);
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false, mathContext0, (-1943));
      JexlOptions jexlOptions0 = new JexlOptions();
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.options(jexlOptions0);
      MathContext mathContext1 = new MathContext(0);
      JexlArithmetic jexlArithmetic2 = jexlArithmetic1.createWithOptions(true, mathContext1, (-1943));
      // Undeclared exception!
      try { 
        jexlArithmetic2.toDouble(roundingMode0);
        fail(""Expecting exception: ArithmeticException"");
      } catch(ArithmeticException e) {
         //
         // Double coercion: java.math.RoundingMode:(CEILING)
         //
         verifyException(""org.apache.commons.jexl3.JexlArithmetic"", e);
      }
  }"
1076,"    public ArrayBuilder arrayBuilder(final int size) {
        return new org.apache.commons.jexl3.internal.ArrayBuilder(size);
    }","  public void test353()  throws Throwable  {
      boolean boolean0 = false;
      MathContext mathContext0 = MathContext.DECIMAL128;
      int int0 = 6364;
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false, mathContext0, 6364);
      Double double0 = new Double(1910.36428);
      Long long0 = new Long(3333L);
      jexlArithmetic0.size((Object) long0);
      Double.min(0.0, 878.7872731);
      jexlArithmetic0.endsWith(mathContext0, double0);
      jexlArithmetic0.positivize((Object) null);
      jexlArithmetic0.createWithOptions(true, mathContext0, (-2781));
      // Undeclared exception!
      try { 
        jexlArithmetic0.arrayBuilder((-2781));
        fail(""Expecting exception: NegativeArraySizeException"");
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.internal.ArrayBuilder"", e);
      }
  }"
1077,"    public boolean isStrict() {
        return this.strict;
    }","  public void test354()  throws Throwable  {
      MathContext mathContext0 = MathContext.UNLIMITED;
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false, mathContext0, 0);
      JexlEngine.EmptyContext jexlEngine_EmptyContext0 = (JexlEngine.EmptyContext)JexlEngine.EMPTY_CONTEXT;
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.options((JexlContext) jexlEngine_EmptyContext0);
      jexlArithmetic1.isStrict();
  }"
1078,"    public Object divide(final Object left, final Object right) {
        if (left == null && right == null) {
            return controlNullNullOperands();
        }
        // if both (non null) args fit as long
        final Number ln = asLongNumber(left);
        final Number rn = asLongNumber(right);
        if (ln != null && rn != null) {
            final long x = ln.longValue();
            final long y = rn.longValue();
            if (y == 0L) {
                throw new ArithmeticException(""/"");
            }
            final long result = x  / y;
            return narrowLong(left, right, result);
        }
        // if either are bigdecimal use that type
        if (left instanceof BigDecimal || right instanceof BigDecimal) {
            final BigDecimal l = toBigDecimal(left);
            final BigDecimal r = toBigDecimal(right);
            if (BigDecimal.ZERO.equals(r)) {
                throw new ArithmeticException(""/"");
            }
            final BigDecimal result = l.divide(r, getMathContext());
            return narrowBigDecimal(left, right, result);
        }
        // if either are floating point (double or float) use double
        if (isFloatingPointNumber(left) || isFloatingPointNumber(right)) {
            final double l = toDouble(left);
            final double r = toDouble(right);
            if (r == 0.0) {
                throw new ArithmeticException(""/"");
            }
            return l / r;
        }
        // otherwise treat as integers
        final BigInteger l = toBigInteger(left);
        final BigInteger r = toBigInteger(right);
        if (BigInteger.ZERO.equals(r)) {
            throw new ArithmeticException(""/"");
        }
        final BigInteger result = l.divide(r);
        return narrowBigInteger(left, right, result);
    }","  public void test355()  throws Throwable  {
      boolean boolean0 = true;
      MathContext mathContext0 = MathContext.UNLIMITED;
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true, mathContext0, 0);
      JexlEngine.getThreadContext();
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.options((JexlContext) null);
      JexlArithmetic jexlArithmetic2 = jexlArithmetic1.createWithOptions(true, mathContext0, 0);
      Double double0 = new Double(0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)91;
      byteArray0[1] = (byte)18;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte)20;
      byteArray0[6] = (byte)1;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      jexlArithmetic0.equals((Object) double0, (Object) bigInteger0);
      // Undeclared exception!
      try { 
        jexlArithmetic2.divide(""COMPLEMENT"", mathContext0);
        fail(""Expecting exception: NumberFormatException"");
      } catch(NumberFormatException e) {
         //
         // For input string: \""C\""
         //
         verifyException(""java.lang.NumberFormatException"", e);
      }
  }"
1079,"    public MapBuilder mapBuilder(final int size) {
        return new org.apache.commons.jexl3.internal.MapBuilder(size);
    }","  public void test356()  throws Throwable  {
      RoundingMode roundingMode0 = RoundingMode.HALF_DOWN;
      MathContext mathContext0 = new MathContext(1914, roundingMode0);
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false, mathContext0, 1914);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-16);
      byteArray0[2] = (byte)25;
      byteArray0[3] = (byte)60;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      Integer integer0 = new Integer(150);
      jexlArithmetic0.greaterThan(bigInteger0, integer0);
      jexlArithmetic0.mapBuilder(0);
  }"
1080,"    protected int compare(final Object left, final Object right, final String operator) {
        if (left != null && right != null) {
            if (left instanceof BigDecimal || right instanceof BigDecimal) {
                final BigDecimal l = toBigDecimal(left);
                final BigDecimal r = toBigDecimal(right);
                return l.compareTo(r);
            }
            if (left instanceof BigInteger || right instanceof BigInteger) {
                final BigInteger l = toBigInteger(left);
                final BigInteger r = toBigInteger(right);
                return l.compareTo(r);
            }
            if (isFloatingPoint(left) || isFloatingPoint(right)) {
                final double lhs = toDouble(left);
                final double rhs = toDouble(right);
                if (Double.isNaN(lhs)) {
                    if (Double.isNaN(rhs)) {
                        return 0;
                    }
                    return -1;
                }
                if (Double.isNaN(rhs)) {
                    // lhs is not NaN
                    return +1;
                }
                if (lhs < rhs) {
                    return -1;
                }
                if (lhs > rhs) {
                    return +1;
                }
                return 0;
            }
            if (isNumberable(left) || isNumberable(right)) {
                final long lhs = toLong(left);
                final long rhs = toLong(right);
                if (lhs < rhs) {
                    return -1;
                }
                if (lhs > rhs) {
                    return +1;
                }
                return 0;
            }
            if (left instanceof String || right instanceof String) {
                return toString(left).compareTo(toString(right));
            }
            if (""=="".equals(operator)) {
                return left.equals(right) ? 0 : -1;
            }
            if (left instanceof Comparable<?>) {
                @SuppressWarnings(""unchecked"") // OK because of instanceof check above
                final Comparable<Object> comparable = (Comparable<Object>) left;
                return comparable.compareTo(right);
            }
            if (right instanceof Comparable<?>) {
                @SuppressWarnings(""unchecked"") // OK because of instanceof check above
                final Comparable<Object> comparable = (Comparable<Object>) right;
                return comparable.compareTo(left);
            }
        }
        throw new ArithmeticException(""Object comparison:("" + left + "" "" + operator + "" "" + right + "")"");
    }","  public void test357()  throws Throwable  {
      JexlOptions jexlOptions0 = new JexlOptions();
      jexlOptions0.getMathContext();
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true, (MathContext) null, 300);
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.options(jexlOptions0);
      JexlEngine.getThreadContext();
      JexlArithmetic jexlArithmetic2 = jexlArithmetic1.options((JexlContext) null);
      Float float0 = new Float((double) 300);
      Float.isFinite(300);
      // Undeclared exception!
      try { 
        jexlArithmetic2.compare(float0, ""=n."", ""=n."");
        fail(""Expecting exception: NumberFormatException"");
      } catch(NumberFormatException e) {
      }
  }"
1081,"    public Object multiply(final Object left, final Object right) {
        if (left == null && right == null) {
            return controlNullNullOperands();
        }
        // if both (non null) args fit as int
        final Number ln = asLongNumber(left);
        final Number rn = asLongNumber(right);
        if (ln != null && rn != null) {
            final long x = ln.longValue();
            final long y = rn.longValue();
            final long result = x * y;
            // detect overflow
            if (!isMultiplyExact(x, y, result)) {
                return BigInteger.valueOf(x).multiply(BigInteger.valueOf(y));
            }
            return narrowLong(left, right, result);
        }
        // if either are bigdecimal use that type
        if (left instanceof BigDecimal || right instanceof BigDecimal) {
            final BigDecimal l = toBigDecimal(left);
            final BigDecimal r = toBigDecimal(right);
            final BigDecimal result = l.multiply(r, getMathContext());
            return narrowBigDecimal(left, right, result);
        }
        // if either are floating point (double or float) use double
        if (isFloatingPointNumber(left) || isFloatingPointNumber(right)) {
            final double l = toDouble(left);
            final double r = toDouble(right);
            return l * r;
        }
        // otherwise treat as integers
        final BigInteger l = toBigInteger(left);
        final BigInteger r = toBigInteger(right);
        final BigInteger result = l.multiply(r);
        return narrowBigInteger(left, right, result);
    }","  public void test358()  throws Throwable  {
      MathContext mathContext0 = new MathContext(4211);
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false, mathContext0, 41);
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.options((JexlContext) null);
      CharBuffer.allocate(4211);
      jexlArithmetic1.positivize((Object) null);
      // Undeclared exception!
      try { 
        jexlArithmetic1.multiply(jexlArithmetic0, (Object) null);
        fail(""Expecting exception: ArithmeticException"");
      } catch(ArithmeticException e) {
         //
         // BigInteger coercion: org.apache.commons.jexl3.JexlArithmetic:(org.apache.commons.jexl3.JexlArithmetic@1)
         //
         verifyException(""org.apache.commons.jexl3.JexlArithmetic"", e);
      }
  }"
1082,"    public MapBuilder mapBuilder(final int size) {
        return new org.apache.commons.jexl3.internal.MapBuilder(size);
    }","  public void test359()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true);
      Integer integer0 = new Integer(0);
      BigInteger bigInteger0 = JexlArithmetic.BIGI_LONG_MIN_VALUE;
      jexlArithmetic0.narrowBigInteger(""Object positivize:("", integer0, bigInteger0);
      JexlArithmetic.MapBuilder jexlArithmetic_MapBuilder0 = jexlArithmetic0.mapBuilder(0);
      Character character0 = new Character('=');
      Double double0 = new Double(0);
      jexlArithmetic_MapBuilder0.put(character0, double0);
  }"
1083,"    protected int compare(final Object left, final Object right, final String operator) {
        if (left != null && right != null) {
            if (left instanceof BigDecimal || right instanceof BigDecimal) {
                final BigDecimal l = toBigDecimal(left);
                final BigDecimal r = toBigDecimal(right);
                return l.compareTo(r);
            }
            if (left instanceof BigInteger || right instanceof BigInteger) {
                final BigInteger l = toBigInteger(left);
                final BigInteger r = toBigInteger(right);
                return l.compareTo(r);
            }
            if (isFloatingPoint(left) || isFloatingPoint(right)) {
                final double lhs = toDouble(left);
                final double rhs = toDouble(right);
                if (Double.isNaN(lhs)) {
                    if (Double.isNaN(rhs)) {
                        return 0;
                    }
                    return -1;
                }
                if (Double.isNaN(rhs)) {
                    // lhs is not NaN
                    return +1;
                }
                if (lhs < rhs) {
                    return -1;
                }
                if (lhs > rhs) {
                    return +1;
                }
                return 0;
            }
            if (isNumberable(left) || isNumberable(right)) {
                final long lhs = toLong(left);
                final long rhs = toLong(right);
                if (lhs < rhs) {
                    return -1;
                }
                if (lhs > rhs) {
                    return +1;
                }
                return 0;
            }
            if (left instanceof String || right instanceof String) {
                return toString(left).compareTo(toString(right));
            }
            if (""=="".equals(operator)) {
                return left.equals(right) ? 0 : -1;
            }
            if (left instanceof Comparable<?>) {
                @SuppressWarnings(""unchecked"") // OK because of instanceof check above
                final Comparable<Object> comparable = (Comparable<Object>) left;
                return comparable.compareTo(right);
            }
            if (right instanceof Comparable<?>) {
                @SuppressWarnings(""unchecked"") // OK because of instanceof check above
                final Comparable<Object> comparable = (Comparable<Object>) right;
                return comparable.compareTo(left);
            }
        }
        throw new ArithmeticException(""Object comparison:("" + left + "" "" + operator + "" "" + right + "")"");
    }","  public void test360()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true);
      JexlArithmetic.SetBuilder jexlArithmetic_SetBuilder0 = jexlArithmetic0.setBuilder(4087);
      jexlArithmetic_SetBuilder0.create();
      Boolean boolean0 = Boolean.FALSE;
      Boolean boolean1 = new Boolean((String) null);
      Boolean boolean2 = jexlArithmetic0.isEmpty((Object) boolean0, boolean1);
      // Undeclared exception!
      try { 
        jexlArithmetic0.compare((Object) null, boolean2, (String) null);
        fail(""Expecting exception: ArithmeticException"");
      } catch(ArithmeticException e) {
         //
         // Object comparison:(null null false)
         //
         verifyException(""org.apache.commons.jexl3.JexlArithmetic"", e);
      }
  }"
1084,"    public final Object bitwiseXor(final Object lhs, final Object rhs) {
        return xor(lhs, rhs);
    }","  public void test361()  throws Throwable  {
      MathContext mathContext0 = MathContext.DECIMAL64;
      int int0 = 0;
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false, mathContext0, 0);
      JexlArithmetic jexlArithmetic1 = new JexlArithmetic(true);
      BigInteger bigInteger0 = JexlArithmetic.BIGI_LONG_MAX_VALUE;
      AtomicBoolean atomicBoolean0 = new AtomicBoolean();
      jexlArithmetic1.bitwiseXor(bigInteger0, atomicBoolean0);
      char[] charArray0 = new char[5];
      charArray0[0] = 'b';
      charArray0[1] = 'o';
      charArray0[2] = 'm';
      charArray0[3] = '5';
      charArray0[4] = '>';
      // Undeclared exception!
      try { 
        CharBuffer.wrap(charArray0, 1492, 0);
        fail(""Expecting exception: IndexOutOfBoundsException"");
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.nio.CharBuffer"", e);
      }
  }"
1085,"    public JexlArithmetic options(final JexlOptions options) {
        if (options != null) {
            final boolean ostrict = options.isStrictArithmetic();
            MathContext bigdContext = options.getMathContext();
            if (bigdContext == null) {
                bigdContext = getMathContext();
            }
            int bigdScale = options.getMathScale();
            if (bigdScale == Integer.MIN_VALUE) {
                bigdScale = getMathScale();
            }
            if (ostrict != isStrict()
                || bigdScale != getMathScale()
                || bigdContext != getMathContext()) {
                return createWithOptions(ostrict, bigdContext, bigdScale);
            }
        }
        return this;
    }","  public void test362()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      Float float0 = new Float(2206.5435F);
      Object object0 = jexlArithmetic0.xor(float0, float0);
      Byte byte0 = new Byte((byte)99);
      jexlArithmetic0.bitwiseAnd(byte0, byte0);
      Float.max(0.0F, 0.0F);
      Boolean boolean0 = new Boolean(""rhH@/"");
      Boolean boolean1 = jexlArithmetic0.isEmpty(object0, boolean0);
      Boolean.compare(false, true);
      Boolean.logicalXor(false, false);
      Boolean.compare(false, true);
      Float.isFinite(2067);
      Boolean.logicalOr(false, false);
      Object object1 = jexlArithmetic0.logicalNot(boolean1);
      JexlArithmetic.MapBuilder jexlArithmetic_MapBuilder0 = jexlArithmetic0.mapBuilder(2067);
      jexlArithmetic_MapBuilder0.create();
      JexlArithmetic.ArrayBuilder jexlArithmetic_ArrayBuilder0 = jexlArithmetic0.arrayBuilder(0);
      MathContext mathContext0 = MathContext.DECIMAL32;
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.createWithOptions(false, mathContext0, (-848));
      jexlArithmetic0.toLong(object1);
      JexlArithmetic jexlArithmetic2 = jexlArithmetic1.createWithOptions(false, mathContext0, 0);
      jexlArithmetic_ArrayBuilder0.create(false);
      JexlOptions jexlOptions0 = new JexlOptions();
      jexlArithmetic2.options(jexlOptions0);
  }"
1086,"    public final Object bitwiseXor(final Object lhs, final Object rhs) {
        return xor(lhs, rhs);
    }","  public void test363()  throws Throwable  {
      MathContext mathContext0 = null;
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true, (MathContext) null, 0);
      Integer integer0 = new Integer(0);
      Double double0 = new Double(0);
      jexlArithmetic0.contains(integer0, double0);
      // Undeclared exception!
      try { 
        jexlArithmetic0.bitwiseXor(integer0, (Object) null);
        fail(""Expecting exception: ArithmeticException"");
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.JexlArithmetic"", e);
      }
  }"
1087,"    public SetBuilder setBuilder(final int size) {
        return new org.apache.commons.jexl3.internal.SetBuilder(size);
    }","  public void test364()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      // Undeclared exception!
      try { 
        jexlArithmetic0.setBuilder((-1));
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Illegal initial capacity: -1
         //
         verifyException(""java.util.HashMap"", e);
      }
  }"
1088,"    public Boolean isEmpty(final Object object) {
        return isEmpty(object, object == null);
    }","  public void test365()  throws Throwable  {
      MathContext mathContext0 = null;
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true, (MathContext) null, 2648);
      JexlEngine.EmptyContext jexlEngine_EmptyContext0 = (JexlEngine.EmptyContext)JexlEngine.EMPTY_CONTEXT;
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.options((JexlContext) jexlEngine_EmptyContext0);
      // Undeclared exception!
      try { 
        jexlArithmetic1.isEmpty((Object) null, (Boolean) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.JexlArithmetic"", e);
      }
  }"
1089,"    public final Object logicalNot(final Object arg) {
        return not(arg);
    }","  public void test366()  throws Throwable  {
      MathContext mathContext0 = MathContext.DECIMAL64;
      Boolean boolean0 = Boolean.FALSE;
      mathContext0.equals(boolean0);
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false, mathContext0, Integer.MIN_VALUE);
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.createWithOptions(false, mathContext0, Integer.MIN_VALUE);
      BigDecimal bigDecimal0 = new BigDecimal((long) Integer.MIN_VALUE);
      bigDecimal0.toPlainString();
      jexlArithmetic1.narrowBigDecimal((Object) null, mathContext0, bigDecimal0);
      Pattern pattern0 = JexlArithmetic.FLOAT_PATTERN;
      pattern0.split((CharSequence) ""-2147483648"");
      Double double0 = new Double(1.0);
      Integer integer0 = new Integer(Integer.MIN_VALUE);
      jexlArithmetic1.toString((Object) pattern0);
      Double double1 = new Double(1038.679142239);
      Double double2 = new Double(0.0);
      jexlArithmetic0.logicalNot((Object) null);
  }"
1090,"    protected boolean isNumberable(final Object o) {
        return o instanceof Integer
                || o instanceof Long
                || o instanceof Byte
                || o instanceof Short
                || o instanceof Character;
    }","  public void test367()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true);
      JexlOptions jexlOptions0 = new JexlOptions();
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.options(jexlOptions0);
      jexlArithmetic1.isNumberable(jexlArithmetic0);
  }"
1091,"    public SetBuilder setBuilder(final int size) {
        return new org.apache.commons.jexl3.internal.SetBuilder(size);
    }","  public void test368()  throws Throwable  {
      RoundingMode roundingMode0 = RoundingMode.HALF_UP;
      MathContext mathContext0 = new MathContext(0, roundingMode0);
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true, mathContext0, 0);
      // Undeclared exception!
      try { 
        jexlArithmetic0.setBuilder((-2149));
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Illegal initial capacity: -2149
         //
         verifyException(""java.util.HashMap"", e);
      }
  }"
1092,"    public Boolean isEmpty(final Object object) {
        return isEmpty(object, object == null);
    }","  public void test369()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true);
      JexlEngine.getThreadEngine();
      // Undeclared exception!
      try { 
        jexlArithmetic0.isEmpty((Object) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.JexlArithmetic"", e);
      }
  }"
1093,"    public Object and(final Object left, final Object right) {
        final long l = toLong(left);
        final long r = toLong(right);
        return l & r;
    }","  public void test370()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true);
      BigDecimal bigDecimal0 = JexlArithmetic.BIGD_DOUBLE_MAX_VALUE;
      Boolean boolean0 = jexlArithmetic0.empty(bigDecimal0);
      Double double0 = new Double(1.0);
      Object object0 = jexlArithmetic0.subtract(boolean0, double0);
      jexlArithmetic0.and(bigDecimal0, object0);
  }"
1094,"    public Object divide(final Object left, final Object right) {
        if (left == null && right == null) {
            return controlNullNullOperands();
        }
        // if both (non null) args fit as long
        final Number ln = asLongNumber(left);
        final Number rn = asLongNumber(right);
        if (ln != null && rn != null) {
            final long x = ln.longValue();
            final long y = rn.longValue();
            if (y == 0L) {
                throw new ArithmeticException(""/"");
            }
            final long result = x  / y;
            return narrowLong(left, right, result);
        }
        // if either are bigdecimal use that type
        if (left instanceof BigDecimal || right instanceof BigDecimal) {
            final BigDecimal l = toBigDecimal(left);
            final BigDecimal r = toBigDecimal(right);
            if (BigDecimal.ZERO.equals(r)) {
                throw new ArithmeticException(""/"");
            }
            final BigDecimal result = l.divide(r, getMathContext());
            return narrowBigDecimal(left, right, result);
        }
        // if either are floating point (double or float) use double
        if (isFloatingPointNumber(left) || isFloatingPointNumber(right)) {
            final double l = toDouble(left);
            final double r = toDouble(right);
            if (r == 0.0) {
                throw new ArithmeticException(""/"");
            }
            return l / r;
        }
        // otherwise treat as integers
        final BigInteger l = toBigInteger(left);
        final BigInteger r = toBigInteger(right);
        if (BigInteger.ZERO.equals(r)) {
            throw new ArithmeticException(""/"");
        }
        final BigInteger result = l.divide(r);
        return narrowBigInteger(left, right, result);
    }","  public void test371()  throws Throwable  {
      MathContext mathContext0 = MathContext.DECIMAL32;
      int int0 = (-2776);
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false, mathContext0, (-2776));
      mathContext0.equals(jexlArithmetic0);
      String string0 = null;
      // Undeclared exception!
      try { 
        jexlArithmetic0.divide((Object) null, mathContext0);
        fail(""Expecting exception: ArithmeticException"");
      } catch(ArithmeticException e) {
         //
         // BigInteger coercion: java.math.MathContext:(precision=7 roundingMode=HALF_EVEN)
         //
         verifyException(""org.apache.commons.jexl3.JexlArithmetic"", e);
      }
  }"
1095,"    protected boolean narrowAccept(final Class<?> narrow, final Class<?> source) {
        return narrow == null || narrow.equals(source);
    }","  public void test372()  throws Throwable  {
      MathContext mathContext0 = MathContext.DECIMAL32;
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false, mathContext0, 0);
      Byte byte0 = new Byte((byte) (-1));
      Object object0 = jexlArithmetic0.add(byte0, (Object) null);
      mathContext0.equals(object0);
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.options((JexlContext) null);
      Class<Pattern> class0 = Pattern.class;
      Class<BigInteger> class1 = BigInteger.class;
      jexlArithmetic1.narrowAccept(class0, class1);
  }"
1096,"    public Object not(final Object val) {
        return !toBoolean(val);
    }","  public void test373()  throws Throwable  {
      MathContext mathContext0 = MathContext.DECIMAL64;
      int int0 = 0;
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false, mathContext0, 0);
      int int1 = 1620;
      JexlArithmetic jexlArithmetic1 = new JexlArithmetic(false, mathContext0, 1620);
      char[] charArray0 = new char[1];
      jexlArithmetic1.size((Object) mathContext0);
      char char0 = 'H';
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      Integer integer0 = new Integer(17);
      Float float0 = new Float((-2104.0));
      jexlArithmetic0.not(float0);
      BigInteger bigInteger0 = null;
      try {
        bigInteger0 = new BigInteger((byte[]) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.math.BigInteger"", e);
      }
  }"
1097,"    public ArrayBuilder arrayBuilder(final int size) {
        return new org.apache.commons.jexl3.internal.ArrayBuilder(size);
    }","  public void test374()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      byte byte0 = (byte)0;
      Byte byte1 = new Byte((byte)0);
      Byte.toUnsignedInt((byte)0);
      jexlArithmetic0.narrow(byte1);
      MapContext mapContext0 = new MapContext();
      int int0 = (-611);
      // Undeclared exception!
      try { 
        jexlArithmetic0.arrayBuilder((-611));
        fail(""Expecting exception: NegativeArraySizeException"");
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.internal.ArrayBuilder"", e);
      }
  }"
1098,"    public final Object bitwiseAnd(final Object lhs, final Object rhs) {
        return and(lhs, rhs);
    }","  public void test375()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true);
      BigInteger bigInteger0 = JexlArithmetic.BIGI_LONG_MIN_VALUE;
      jexlArithmetic0.negate(bigInteger0);
      jexlArithmetic0.narrow(bigInteger0);
      CharBuffer charBuffer0 = CharBuffer.allocate(9);
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0, 9, 9);
      CharBuffer charBuffer2 = CharBuffer.wrap((CharSequence) charBuffer1);
      Integer integer0 = jexlArithmetic0.size((Object) charBuffer2, (Integer) null);
      // Undeclared exception!
      try { 
        jexlArithmetic0.bitwiseAnd(integer0, charBuffer0);
        fail(""Expecting exception: ArithmeticException"");
      } catch(ArithmeticException e) {
         //
         // Long coercion: java.nio.HeapCharBuffer:(\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000)
         //
         verifyException(""org.apache.commons.jexl3.JexlArithmetic"", e);
      }
  }"
1099,"    public Number narrow(final Number original) {
        return narrowNumber(original, null);
    }","  public void test376()  throws Throwable  {
      MathContext mathContext0 = MathContext.DECIMAL64;
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true, mathContext0, 2093);
      JexlArithmetic.MapBuilder jexlArithmetic_MapBuilder0 = jexlArithmetic0.mapBuilder(2093);
      jexlArithmetic_MapBuilder0.create();
      Pattern pattern0 = JexlArithmetic.FLOAT_PATTERN;
      jexlArithmetic0.isFloatingPointNumber(pattern0);
      BigDecimal bigDecimal0 = new BigDecimal(933L);
      jexlArithmetic0.narrow(bigDecimal0);
  }"
1100,"    public final Object bitwiseAnd(final Object lhs, final Object rhs) {
        return and(lhs, rhs);
    }","  public void test377()  throws Throwable  {
      JexlArithmetic.isMultiplyExact(1L, 0L, 32767L);
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true);
      JexlOptions jexlOptions0 = new JexlOptions();
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.options(jexlOptions0);
      jexlOptions0.setMathScale(281);
      jexlArithmetic1.arrayBuilder(0);
      Pattern pattern0 = JexlArithmetic.FLOAT_PATTERN;
      Double double0 = new Double((-2819.6932419616));
      // Undeclared exception!
      try { 
        jexlArithmetic0.bitwiseAnd(pattern0, double0);
        fail(""Expecting exception: ArithmeticException"");
      } catch(ArithmeticException e) {
         //
         // Long coercion: java.util.regex.Pattern:(^[+-]?\\d*(\\.\\d*)?([eE][+-]?\\d+)?$)
         //
         verifyException(""org.apache.commons.jexl3.JexlArithmetic"", e);
      }
  }"
1101,"    public Iterable<?> createRange(final Object from, final Object to) throws ArithmeticException {
        final long lfrom = toLong(from);
        final long lto = toLong(to);
        if ((lfrom >= Integer.MIN_VALUE && lfrom <= Integer.MAX_VALUE)
                && (lto >= Integer.MIN_VALUE && lto <= Integer.MAX_VALUE)) {
            return org.apache.commons.jexl3.internal.IntegerRange.create((int) lfrom, (int) lto);
        }
        return org.apache.commons.jexl3.internal.LongRange.create(lfrom, lto);
    }","  public void test378()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true);
      long long0 = 0L;
      Long long1 = new Long(0L);
      jexlArithmetic0.toBoolean(long1);
      jexlArithmetic0.toInteger(long1);
      JexlOptions jexlOptions0 = null;
      jexlArithmetic0.greaterThan(long1, (Object) null);
      jexlArithmetic0.matches(long1, long1);
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.options((JexlOptions) null);
      Object object0 = jexlArithmetic0.logicalNot(long1);
      try { 
        jexlArithmetic1.createRange(object0, (Object) null);
        fail(""Expecting exception: ArithmeticException"");
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.JexlArithmetic"", e);
      }
  }"
1102,"    public Object divide(final Object left, final Object right) {
        if (left == null && right == null) {
            return controlNullNullOperands();
        }
        // if both (non null) args fit as long
        final Number ln = asLongNumber(left);
        final Number rn = asLongNumber(right);
        if (ln != null && rn != null) {
            final long x = ln.longValue();
            final long y = rn.longValue();
            if (y == 0L) {
                throw new ArithmeticException(""/"");
            }
            final long result = x  / y;
            return narrowLong(left, right, result);
        }
        // if either are bigdecimal use that type
        if (left instanceof BigDecimal || right instanceof BigDecimal) {
            final BigDecimal l = toBigDecimal(left);
            final BigDecimal r = toBigDecimal(right);
            if (BigDecimal.ZERO.equals(r)) {
                throw new ArithmeticException(""/"");
            }
            final BigDecimal result = l.divide(r, getMathContext());
            return narrowBigDecimal(left, right, result);
        }
        // if either are floating point (double or float) use double
        if (isFloatingPointNumber(left) || isFloatingPointNumber(right)) {
            final double l = toDouble(left);
            final double r = toDouble(right);
            if (r == 0.0) {
                throw new ArithmeticException(""/"");
            }
            return l / r;
        }
        // otherwise treat as integers
        final BigInteger l = toBigInteger(left);
        final BigInteger r = toBigInteger(right);
        if (BigInteger.ZERO.equals(r)) {
            throw new ArithmeticException(""/"");
        }
        final BigInteger result = l.divide(r);
        return narrowBigInteger(left, right, result);
    }","  public void test379()  throws Throwable  {
      boolean boolean0 = false;
      RoundingMode roundingMode0 = RoundingMode.UP;
      MathContext mathContext0 = new MathContext(7, roundingMode0);
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false, mathContext0, 7);
      MathContext mathContext1 = MathContext.UNLIMITED;
      jexlArithmetic0.not(mathContext1);
      Character character0 = new Character('z');
      Character.highSurrogate(7);
      // Undeclared exception!
      try { 
        jexlArithmetic0.divide(""3ek. 2*T{ &"", character0);
        fail(""Expecting exception: NumberFormatException"");
      } catch(NumberFormatException e) {
         //
         // For input string: \""3e\""
         //
         verifyException(""java.lang.NumberFormatException"", e);
      }
  }"
1103,"    public Object divide(final Object left, final Object right) {
        if (left == null && right == null) {
            return controlNullNullOperands();
        }
        // if both (non null) args fit as long
        final Number ln = asLongNumber(left);
        final Number rn = asLongNumber(right);
        if (ln != null && rn != null) {
            final long x = ln.longValue();
            final long y = rn.longValue();
            if (y == 0L) {
                throw new ArithmeticException(""/"");
            }
            final long result = x  / y;
            return narrowLong(left, right, result);
        }
        // if either are bigdecimal use that type
        if (left instanceof BigDecimal || right instanceof BigDecimal) {
            final BigDecimal l = toBigDecimal(left);
            final BigDecimal r = toBigDecimal(right);
            if (BigDecimal.ZERO.equals(r)) {
                throw new ArithmeticException(""/"");
            }
            final BigDecimal result = l.divide(r, getMathContext());
            return narrowBigDecimal(left, right, result);
        }
        // if either are floating point (double or float) use double
        if (isFloatingPointNumber(left) || isFloatingPointNumber(right)) {
            final double l = toDouble(left);
            final double r = toDouble(right);
            if (r == 0.0) {
                throw new ArithmeticException(""/"");
            }
            return l / r;
        }
        // otherwise treat as integers
        final BigInteger l = toBigInteger(left);
        final BigInteger r = toBigInteger(right);
        if (BigInteger.ZERO.equals(r)) {
            throw new ArithmeticException(""/"");
        }
        final BigInteger result = l.divide(r);
        return narrowBigInteger(left, right, result);
    }","  public void test380()  throws Throwable  {
      MathContext mathContext0 = MathContext.DECIMAL128;
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false, mathContext0, 0);
      Boolean boolean0 = Boolean.TRUE;
      jexlArithmetic0.size((Object) boolean0);
      MapContext mapContext0 = new MapContext();
      Double double0 = new Double((-882.15));
      Byte byte0 = new Byte((byte) (-41));
      jexlArithmetic0.divide(double0, byte0);
      Random.setNextRandom(415);
  }"
1104,"    public BigDecimal toBigDecimal(final Object val) {
        if (val instanceof BigDecimal) {
            return roundBigDecimal((BigDecimal) val);
        }
        if (val == null) {
            controlNullOperand();
            return BigDecimal.ZERO;
        }
        if (val instanceof Double) {
            if (Double.isNaN(((Double) val))) {
                return BigDecimal.ZERO;
            }
            return roundBigDecimal(new BigDecimal(val.toString(), getMathContext()));
        }
        if (val instanceof Number) {
            return roundBigDecimal(new BigDecimal(val.toString(), getMathContext()));
        }
        if (val instanceof Boolean) {
            return BigDecimal.valueOf(((Boolean) val) ? 1. : 0.);
        }
        if (val instanceof AtomicBoolean) {
            return BigDecimal.valueOf(((AtomicBoolean) val).get() ? 1L : 0L);
        }
        if (val instanceof String) {
            final String string = (String) val;
            if ("""".equals(string)) {
                return BigDecimal.ZERO;
            }
            return roundBigDecimal(new BigDecimal(string, getMathContext()));
        }
        if (val instanceof Character) {
            final int i = ((Character) val);
            return new BigDecimal(i);
        }
        throw new ArithmeticException(""BigDecimal coercion: ""
                + val.getClass().getName() + "":("" + val + "")"");
    }","  public void test381()  throws Throwable  {
      JexlArithmetic.isMultiplyExact(0L, 0L, (-2893L));
      MathContext mathContext0 = MathContext.DECIMAL128;
      int int0 = 5184;
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true, mathContext0, 5184);
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.createWithOptions(true, mathContext0, 5184);
      Byte byte0 = new Byte((byte)22);
      // Undeclared exception!
      try { 
        jexlArithmetic1.toBigDecimal(byte0);
        fail(""Expecting exception: NumberFormatException"");
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.math.BigDecimal"", e);
      }
  }"
1105,"    public BigDecimal toBigDecimal(final Object val) {
        if (val instanceof BigDecimal) {
            return roundBigDecimal((BigDecimal) val);
        }
        if (val == null) {
            controlNullOperand();
            return BigDecimal.ZERO;
        }
        if (val instanceof Double) {
            if (Double.isNaN(((Double) val))) {
                return BigDecimal.ZERO;
            }
            return roundBigDecimal(new BigDecimal(val.toString(), getMathContext()));
        }
        if (val instanceof Number) {
            return roundBigDecimal(new BigDecimal(val.toString(), getMathContext()));
        }
        if (val instanceof Boolean) {
            return BigDecimal.valueOf(((Boolean) val) ? 1. : 0.);
        }
        if (val instanceof AtomicBoolean) {
            return BigDecimal.valueOf(((AtomicBoolean) val).get() ? 1L : 0L);
        }
        if (val instanceof String) {
            final String string = (String) val;
            if ("""".equals(string)) {
                return BigDecimal.ZERO;
            }
            return roundBigDecimal(new BigDecimal(string, getMathContext()));
        }
        if (val instanceof Character) {
            final int i = ((Character) val);
            return new BigDecimal(i);
        }
        throw new ArithmeticException(""BigDecimal coercion: ""
                + val.getClass().getName() + "":("" + val + "")"");
    }","  public void test382()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true);
      byte byte0 = (byte) (-2);
      Byte byte1 = new Byte((byte) (-2));
      Byte.toUnsignedLong((byte) (-2));
      // Undeclared exception!
      try { 
        jexlArithmetic0.toBigDecimal(byte1);
        fail(""Expecting exception: NumberFormatException"");
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.math.BigDecimal"", e);
      }
  }"
1106,"    public Object complement(final Object val) {
        final long l = toLong(val);
        return ~l;
    }","  public void test383()  throws Throwable  {
      JexlArithmetic.isMultiplyExact((-1L), 2355L, 1659L);
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true);
      Object object0 = null;
      // Undeclared exception!
      try { 
        jexlArithmetic0.complement((Object) null);
        fail(""Expecting exception: ArithmeticException"");
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.JexlArithmetic"", e);
      }
  }"
1107,"    public final Object bitwiseOr(final Object lhs, final Object rhs) {
        return or(lhs, rhs);
    }","  public void test384()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true);
      JexlEngine.EmptyContext jexlEngine_EmptyContext0 = (JexlEngine.EmptyContext)JexlEngine.EMPTY_CONTEXT;
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.options((JexlContext) jexlEngine_EmptyContext0);
      JexlArithmetic jexlArithmetic2 = jexlArithmetic1.createWithOptions(true, (MathContext) null, 0);
      // Undeclared exception!
      try { 
        jexlArithmetic2.bitwiseOr(""-y>qQ"", jexlArithmetic1);
        fail(""Expecting exception: NumberFormatException"");
      } catch(NumberFormatException e) {
         //
         // For input string: \""-y>qQ\""
         //
         verifyException(""java.lang.NumberFormatException"", e);
      }
  }"
1108,"    public BigInteger toBigInteger(final Object val) {
        if (val == null) {
            controlNullOperand();
            return BigInteger.ZERO;
        }
        if (val instanceof BigInteger) {
            return (BigInteger) val;
        }
        if (val instanceof Double) {
            final Double dval = (Double) val;
            if (Double.isNaN(dval)) {
                return BigInteger.ZERO;
            }
            return BigInteger.valueOf(dval.longValue());
        }
        if (val instanceof BigDecimal) {
            return ((BigDecimal) val).toBigInteger();
        }
        if (val instanceof Number) {
            return BigInteger.valueOf(((Number) val).longValue());
        }
        if (val instanceof Boolean) {
            return BigInteger.valueOf(((Boolean) val) ? 1L : 0L);
        }
        if (val instanceof AtomicBoolean) {
            return BigInteger.valueOf(((AtomicBoolean) val).get() ? 1L : 0L);
        }
        if (val instanceof String) {
            final String string = (String) val;
            if ("""".equals(string)) {
                return BigInteger.ZERO;
            }
            return new BigInteger(string);
        }
        if (val instanceof Character) {
            final int i = ((Character) val);
            return BigInteger.valueOf(i);
        }

        throw new ArithmeticException(""BigInteger coercion: ""
                + val.getClass().getName() + "":("" + val + "")"");
    }","  public void test385()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      JexlOptions jexlOptions0 = new JexlOptions();
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.options(jexlOptions0);
      jexlArithmetic1.isStrict();
      // Undeclared exception!
      try { 
        jexlArithmetic1.toBigInteger(jexlOptions0);
        fail(""Expecting exception: ArithmeticException"");
      } catch(ArithmeticException e) {
         //
         // BigInteger coercion: org.apache.commons.jexl3.JexlOptions:(org.apache.commons.jexl3.JexlOptions@2)
         //
         verifyException(""org.apache.commons.jexl3.JexlArithmetic"", e);
      }
  }"
1109,"    public boolean greaterThan(final Object left, final Object right) {
        if ((left == right) || left == null || right == null) {
            return false;
        }
        return compare(left, right, "">"") > 0;
    }","  public void test386()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true);
      MapContext mapContext0 = new MapContext();
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.options((JexlContext) mapContext0);
      jexlArithmetic1.greaterThan(mapContext0, mapContext0);
  }"
1110,"    public Object positivize(final Object val) {
        if (val == null) {
            controlNullOperand();
            return null;
        }
        if (val instanceof Short) {
            return ((Short) val).intValue();
        }
        if (val instanceof Byte) {
            return ((Byte) val).intValue();
        }
        if (val instanceof Number) {
            return val;
        }
        if (val instanceof Character) {
            return (int) (Character) val;
        }
        if (val instanceof Boolean) {
            return val;
        }
        if (val instanceof AtomicBoolean) {
            return ((AtomicBoolean) val).get();
        }
        throw new ArithmeticException(""Object positivize:("" + val + "")"");
    }","  public void test387()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      Boolean boolean0 = Boolean.TRUE;
      jexlArithmetic0.positivize(boolean0);
  }"
1111,"    protected boolean isNumberable(final Object o) {
        return o instanceof Integer
                || o instanceof Long
                || o instanceof Byte
                || o instanceof Short
                || o instanceof Character;
    }","  public void test388()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true);
      AtomicBoolean atomicBoolean0 = new AtomicBoolean(false);
      jexlArithmetic0.positivize(atomicBoolean0);
      JexlOptions jexlOptions0 = new JexlOptions();
      jexlArithmetic0.isNumberable(jexlArithmetic0);
  }"
1112,"    public Object or(final Object left, final Object right) {
        final long l = toLong(left);
        final long r = toLong(right);
        return l | r;
    }","  public void test389()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ""<"");
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true);
      Boolean boolean0 = jexlArithmetic0.empty(""<"");
      // Undeclared exception!
      try { 
        jexlArithmetic0.or(""<"", boolean0);
        fail(""Expecting exception: NumberFormatException"");
      } catch(NumberFormatException e) {
         //
         // For input string: \""<\""
         //
         verifyException(""java.lang.NumberFormatException"", e);
      }
  }"
1113,"    public Boolean isEmpty(final Object object) {
        return isEmpty(object, object == null);
    }","  public void test390()  throws Throwable  {
      MathContext mathContext0 = MathContext.DECIMAL64;
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true, mathContext0, Integer.MAX_VALUE);
      JexlOptions jexlOptions0 = null;
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.options((JexlOptions) null);
      BigDecimal bigDecimal0 = new BigDecimal(Integer.MAX_VALUE);
      Class<Integer> class0 = Integer.class;
      jexlArithmetic1.narrowNumber(bigDecimal0, class0);
      String string0 = null;
      char[] charArray0 = new char[6];
      charArray0[0] = '/';
      charArray0[1] = ')';
      charArray0[2] = '9';
      charArray0[3] = '^';
      charArray0[4] = 'v';
      charArray0[5] = ';';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      Boolean boolean0 = jexlArithmetic0.isEmpty((Object) charBuffer0);
      // Undeclared exception!
      try { 
        jexlArithmetic0.isEmpty((Object) null, boolean0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.JexlArithmetic"", e);
      }
  }"
1114,"    public final Object bitwiseAnd(final Object lhs, final Object rhs) {
        return and(lhs, rhs);
    }","  public void test391()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      Long long0 = new Long((-2172L));
      Long.compare((-2172L), (-2172L));
      MathContext mathContext0 = MathContext.DECIMAL32;
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.createWithOptions(false, mathContext0, 0);
      jexlArithmetic0.toString((Object) jexlArithmetic0);
      jexlArithmetic0.mapBuilder(0);
      Boolean boolean0 = (Boolean)jexlArithmetic0.logicalNot(jexlArithmetic1);
      Pattern pattern0 = Pattern.compile(""selfXor"", (-1078));
      JexlArithmetic jexlArithmetic2 = jexlArithmetic1.createWithOptions(true, mathContext0, 3267);
      ArrayBuilder arrayBuilder0 = (ArrayBuilder)jexlArithmetic2.arrayBuilder(0);
      ArrayList arrayList0 = (ArrayList)arrayBuilder0.create(true);
      jexlArithmetic1.isEmpty((Object) arrayList0, boolean0);
      // Undeclared exception!
      try { 
        jexlArithmetic0.bitwiseAnd(pattern0, ""selfXor"");
        fail(""Expecting exception: ArithmeticException"");
      } catch(ArithmeticException e) {
         //
         // Long coercion: java.util.regex.Pattern:(selfXor)
         //
         verifyException(""org.apache.commons.jexl3.JexlArithmetic"", e);
      }
  }"
1115,"    public Object complement(final Object val) {
        final long l = toLong(val);
        return ~l;
    }","  public void test392()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true);
      // Undeclared exception!
      try { 
        jexlArithmetic0.complement((Object) null);
        fail(""Expecting exception: ArithmeticException"");
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.JexlArithmetic"", e);
      }
  }"
1116,"    public Iterable<?> createRange(final Object from, final Object to) throws ArithmeticException {
        final long lfrom = toLong(from);
        final long lto = toLong(to);
        if ((lfrom >= Integer.MIN_VALUE && lfrom <= Integer.MAX_VALUE)
                && (lto >= Integer.MIN_VALUE && lto <= Integer.MAX_VALUE)) {
            return org.apache.commons.jexl3.internal.IntegerRange.create((int) lfrom, (int) lto);
        }
        return org.apache.commons.jexl3.internal.LongRange.create(lfrom, lto);
    }","  public void test393()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.createWithOptions(false, (MathContext) null, 968);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "" "");
      jexlArithmetic1.greaterThan(jexlArithmetic0, (Object) null);
      jexlArithmetic1.toBigDecimal((Object) null);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-114);
      byteArray0[1] = (byte)63;
      byteArray0[2] = (byte) (-81);
      byteArray0[3] = (byte)10;
      byteArray0[4] = (byte)53;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      BigDecimal bigDecimal0 = new BigDecimal(968);
      jexlArithmetic0.narrowLong((Object) null, bigDecimal0, 1188L);
      AtomicBoolean atomicBoolean0 = new AtomicBoolean(false);
      jexlArithmetic0.isFloatingPointNumber(atomicBoolean0);
      Float float0 = new Float((-2673.1737870313013));
      AtomicBoolean atomicBoolean1 = new AtomicBoolean();
      jexlArithmetic0.createRange(float0, atomicBoolean1);
  }"
1117,"    public SetBuilder setBuilder(final int size) {
        return new org.apache.commons.jexl3.internal.SetBuilder(size);
    }","  public void test394()  throws Throwable  {
      MathContext mathContext0 = MathContext.DECIMAL32;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      mathContext0.toString();
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true, mathContext0, (-1978));
      BigDecimal bigDecimal0 = new BigDecimal((long) (-1978));
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Boolean boolean0 = Boolean.TRUE;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ""aOK'dH17Oa{"");
      bigDecimal0.negate();
      jexlArithmetic0.mod(bigDecimal0, boolean0);
      // Undeclared exception!
      try { 
        jexlArithmetic0.setBuilder((-1978));
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Illegal initial capacity: -1978
         //
         verifyException(""java.util.HashMap"", e);
      }
  }"
1118,"    public Object add(final Object left, final Object right) {
        if (left == null && right == null) {
            return controlNullNullOperands();
        }
        final boolean strconcat = strict
                            ? left instanceof String || right instanceof String
                            : left instanceof String && right instanceof String;
        if (!strconcat) {
            try {
                // if both (non null) args fit as long
                final Number ln = asLongNumber(left);
                final Number rn = asLongNumber(right);
                if (ln != null && rn != null) {
                    final long x = ln.longValue();
                    final long y = rn.longValue();
                    final long result = x + y;
                    // detect overflow, see java8 Math.addExact
                    if (((x ^ result) & (y ^ result)) < 0) {
                        return BigInteger.valueOf(x).add(BigInteger.valueOf(y));
                    }
                    return narrowLong(left, right, result);
                }
                // if either are bigdecimal use that type
                if (left instanceof BigDecimal || right instanceof BigDecimal) {
                    final BigDecimal l = toBigDecimal(left);
                    final BigDecimal r = toBigDecimal(right);
                    final BigDecimal result = l.add(r, getMathContext());
                    return narrowBigDecimal(left, right, result);
                }
                // if either are floating point (double or float) use double
                if (isFloatingPointNumber(left) || isFloatingPointNumber(right)) {
                    final double l = toDouble(left);
                    final double r = toDouble(right);
                    return l + r;
                }
                // otherwise treat as (big) integers
                final BigInteger l = toBigInteger(left);
                final BigInteger r = toBigInteger(right);
                final BigInteger result = l.add(r);
                return narrowBigInteger(left, right, result);
            } catch (final java.lang.NumberFormatException nfe) {
                if (left == null || right == null) {
                    controlNullOperand();
                }
            }
        }
        return toString(left).concat(toString(right));
    }","  public void test395()  throws Throwable  {
      MathContext mathContext0 = null;
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true, (MathContext) null, Integer.MIN_VALUE);
      byte byte0 = (byte) (-100);
      Byte byte1 = new Byte((byte) (-100));
      String string0 = ""selfXor"";
      jexlArithmetic0.compare(byte1, byte1, ""selfXor"");
      // Undeclared exception!
      try { 
        jexlArithmetic0.add((Object) null, (Object) null);
        fail(""Expecting exception: ArithmeticException"");
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.JexlArithmetic"", e);
      }
  }"
1119,"    public Boolean startsWith(final Object left, final Object right) {
        if (left == null && right == null) {
            //if both are null L == R
            return true;
        }
        if (left == null || right == null) {
            // we know both aren't null, therefore L != R
            return false;
        }
        if (left instanceof CharSequence) {
            return (toString(left)).startsWith(toString(right));
        }
        return null;
    }","  public void test396()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      MathContext mathContext0 = MathContext.DECIMAL64;
      Float float0 = new Float(0.0F);
      mathContext0.equals(float0);
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true, mathContext0, 41);
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.createWithOptions(false, mathContext0, 20);
      JexlOptions jexlOptions0 = new JexlOptions();
      JexlArithmetic jexlArithmetic2 = jexlArithmetic1.options(jexlOptions0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ""java.math.MathContext@0000000002"");
      MathContext mathContext1 = new MathContext(41);
      AtomicBoolean atomicBoolean0 = new AtomicBoolean(false);
      mathContext0.equals(fileSystemHandling1);
      atomicBoolean0.set(false);
      LinkedList<BigDecimal> linkedList0 = new LinkedList<BigDecimal>();
      MathContext mathContext2 = MathContext.DECIMAL128;
      jexlArithmetic2.startsWith(""java.math.MathContext@0000000002"", mathContext2);
  }"
1120,"    public final Object bitwiseXor(final Object lhs, final Object rhs) {
        return xor(lhs, rhs);
    }","  public void test397()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "".. error"");
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      FileSystemHandling.shouldAllThrowIOExceptions();
      MapContext mapContext0 = new MapContext(hashMap0);
      mapContext0.clear();
      hashMap0.put("".. error"", "".. error"");
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.options((JexlContext) mapContext0);
      Object object0 = jexlArithmetic1.not(""W\""Pza"");
      JexlOptions jexlOptions0 = new JexlOptions();
      JexlEngine.getThreadEngine();
      jexlOptions0.set((JexlEngine) null);
      JexlArithmetic jexlArithmetic2 = jexlArithmetic1.options(jexlOptions0);
      Pattern pattern0 = JexlArithmetic.FLOAT_PATTERN;
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "".. error"");
      Boolean boolean0 = jexlArithmetic1.contains(pattern0, charBuffer0);
      ObjectContext<Boolean> objectContext0 = new ObjectContext<Boolean>((JexlEngine) null, boolean0);
      jexlArithmetic2.options((JexlContext) objectContext0);
      jexlArithmetic2.getMathScale();
      Random.setNextRandom((-1928));
      BigInteger bigInteger0 = BigInteger.ONE;
      Object object1 = jexlArithmetic0.divide(object0, bigInteger0);
      Boolean boolean1 = new Boolean("".. error"");
      jexlArithmetic0.isEmpty(object1, boolean1);
      // Undeclared exception!
      try { 
        jexlArithmetic1.bitwiseXor(""W\""Pza"", (Object) null);
        fail(""Expecting exception: NumberFormatException"");
      } catch(NumberFormatException e) {
         //
         // For input string: \""W\""Pza\""
         //
         verifyException(""java.lang.NumberFormatException"", e);
      }
  }"
1121,"    public MapBuilder mapBuilder(final int size) {
        return new org.apache.commons.jexl3.internal.MapBuilder(size);
    }","  public void test398()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      MathContext mathContext0 = MathContext.DECIMAL32;
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.createWithOptions(false, mathContext0, 16);
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      JexlArithmetic.MapBuilder jexlArithmetic_MapBuilder0 = jexlArithmetic1.mapBuilder(16);
      jexlArithmetic_MapBuilder0.create();
      // Undeclared exception!
      try { 
        Pattern.compile((String) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
1122,"    protected Object controlNullNullOperands() {
        if (isStrict()) {
            throw new NullOperand();
        }
        return 0;
    }","  public void test399()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true, (MathContext) null, 31);
      JexlOptions jexlOptions0 = new JexlOptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      jexlArithmetic0.contains((Object) null, (Object) null);
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.options(jexlOptions0);
      Long long0 = new Long(306783378L);
      jexlArithmetic1.logicalNot(long0);
      JexlArithmetic.MapBuilder jexlArithmetic_MapBuilder0 = jexlArithmetic1.mapBuilder(31);
      Object object0 = jexlArithmetic_MapBuilder0.create();
      Long.getLong(""GvxPy~q"");
      jexlArithmetic1.empty(object0);
      String string0 = ""DidAnJXpO{"";
      jexlArithmetic0.matches(""DidAnJXpO{"", object0);
      JexlArithmetic jexlArithmetic2 = jexlArithmetic0.options(jexlOptions0);
      MapContext mapContext0 = new MapContext();
      jexlArithmetic2.options((JexlContext) mapContext0);
      jexlArithmetic0.isPositivizeStable();
      Short short0 = new Short((short) (-156));
      // Undeclared exception!
      try { 
        jexlArithmetic1.controlNullNullOperands();
        fail(""Expecting exception: ArithmeticException"");
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.JexlArithmetic"", e);
      }
  }"
1123,"    protected Object controlNullNullOperands() {
        if (isStrict()) {
            throw new NullOperand();
        }
        return 0;
    }","  public void test400()  throws Throwable  {
      JexlArithmetic.isMultiplyExact(0L, 9223372036854775807L, (-1L));
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true, (MathContext) null, 557);
      int int0 = (-1);
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.createWithOptions(true, (MathContext) null, (-1));
      JexlOptions jexlOptions0 = new JexlOptions();
      long long0 = 9223372036854775772L;
      // Undeclared exception!
      try { 
        jexlArithmetic1.controlNullNullOperands();
        fail(""Expecting exception: ArithmeticException"");
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.JexlArithmetic"", e);
      }
  }"
1124,"    public Boolean isEmpty(final Object object) {
        return isEmpty(object, object == null);
    }","  public void test401()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      JexlEngine.getThreadEngine();
      ObjectContext<Boolean> objectContext0 = new ObjectContext<Boolean>((JexlEngine) null, (Boolean) null);
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.options((JexlContext) objectContext0);
      MathContext mathContext0 = MathContext.DECIMAL128;
      JexlArithmetic jexlArithmetic2 = jexlArithmetic1.createWithOptions(true, mathContext0, 6);
      Double double0 = new Double(3387.297231268);
      Boolean boolean0 = jexlArithmetic2.endsWith(""\n"", double0);
      jexlArithmetic0.and(boolean0, double0);
      Boolean boolean1 = Boolean.TRUE;
      jexlArithmetic2.isEmpty((Object) jexlArithmetic1, boolean1);
  }"
1125,"    public Object or(final Object left, final Object right) {
        final long l = toLong(left);
        final long r = toLong(right);
        return l | r;
    }","  public void test402()  throws Throwable  {
      boolean boolean0 = true;
      MathContext mathContext0 = MathContext.UNLIMITED;
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true, mathContext0, 0);
      Double double0 = new Double(0);
      byte[] byteArray0 = new byte[21];
      byteArray0[0] = (byte)91;
      byteArray0[1] = (byte)18;
      byteArray0[2] = (byte)0;
      Character character0 = Character.valueOf('a');
      jexlArithmetic0.toBigDecimal(character0);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte)20;
      byteArray0[6] = (byte)1;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      jexlArithmetic0.equals((Object) double0, (Object) bigInteger0);
      // Undeclared exception!
      try { 
        jexlArithmetic0.or(mathContext0, bigInteger0);
        fail(""Expecting exception: ArithmeticException"");
      } catch(ArithmeticException e) {
         //
         // Long coercion: java.math.MathContext:(precision=0 roundingMode=HALF_UP)
         //
         verifyException(""org.apache.commons.jexl3.JexlArithmetic"", e);
      }
  }"
1126,"    public Object mod(final Object left, final Object right) {
        if (left == null && right == null) {
            return controlNullNullOperands();
        }
        // if both (non null) args fit as long
        final Number ln = asLongNumber(left);
        final Number rn = asLongNumber(right);
        if (ln != null && rn != null) {
            final long x = ln.longValue();
            final long y = rn.longValue();
            if (y == 0L) {
                throw new ArithmeticException(""%"");
            }
            final long result = x % y;
            return narrowLong(left, right,  result);
        }
        // if either are bigdecimal use that type
        if (left instanceof BigDecimal || right instanceof BigDecimal) {
            final BigDecimal l = toBigDecimal(left);
            final BigDecimal r = toBigDecimal(right);
            if (BigDecimal.ZERO.equals(r)) {
                throw new ArithmeticException(""%"");
            }
            final BigDecimal remainder = l.remainder(r, getMathContext());
            return narrowBigDecimal(left, right, remainder);
        }
        // if either are floating point (double or float) use double
        if (isFloatingPointNumber(left) || isFloatingPointNumber(right)) {
            final double l = toDouble(left);
            final double r = toDouble(right);
            if (r == 0.0) {
                throw new ArithmeticException(""%"");
            }
            return l % r;
        }
        // otherwise treat as integers
        final BigInteger l = toBigInteger(left);
        final BigInteger r = toBigInteger(right);
        if (BigInteger.ZERO.equals(r)) {
            throw new ArithmeticException(""%"");
        }
        final BigInteger result = l.mod(r);
        return narrowBigInteger(left, right, result);
    }","  public void test403()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true);
      jexlArithmetic0.lessThanOrEqual((Object) null, (Object) null);
      Double double0 = new Double(81.0);
      Double.isFinite(81.0);
      jexlArithmetic0.compare(double0, double0, ""`dUQ8(!<XS"");
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.options((JexlContext) null);
      // Undeclared exception!
      try { 
        jexlArithmetic1.mod((Object) null, (Object) null);
        fail(""Expecting exception: ArithmeticException"");
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.JexlArithmetic"", e);
      }
  }"
1127,"    public Object multiply(final Object left, final Object right) {
        if (left == null && right == null) {
            return controlNullNullOperands();
        }
        // if both (non null) args fit as int
        final Number ln = asLongNumber(left);
        final Number rn = asLongNumber(right);
        if (ln != null && rn != null) {
            final long x = ln.longValue();
            final long y = rn.longValue();
            final long result = x * y;
            // detect overflow
            if (!isMultiplyExact(x, y, result)) {
                return BigInteger.valueOf(x).multiply(BigInteger.valueOf(y));
            }
            return narrowLong(left, right, result);
        }
        // if either are bigdecimal use that type
        if (left instanceof BigDecimal || right instanceof BigDecimal) {
            final BigDecimal l = toBigDecimal(left);
            final BigDecimal r = toBigDecimal(right);
            final BigDecimal result = l.multiply(r, getMathContext());
            return narrowBigDecimal(left, right, result);
        }
        // if either are floating point (double or float) use double
        if (isFloatingPointNumber(left) || isFloatingPointNumber(right)) {
            final double l = toDouble(left);
            final double r = toDouble(right);
            return l * r;
        }
        // otherwise treat as integers
        final BigInteger l = toBigInteger(left);
        final BigInteger r = toBigInteger(right);
        final BigInteger result = l.multiply(r);
        return narrowBigInteger(left, right, result);
    }","  public void test404()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      JexlOptions jexlOptions0 = new JexlOptions();
      jexlOptions0.setLexical(true);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ""selfDivide"");
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.options(jexlOptions0);
      JexlArithmetic jexlArithmetic2 = jexlArithmetic1.options(jexlOptions0);
      Boolean boolean0 = jexlArithmetic0.empty(jexlArithmetic1);
      Byte byte0 = new Byte((byte)5);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte)5;
      byteArray0[2] = (byte)5;
      jexlOptions0.copy();
      byteArray0[3] = (byte)5;
      Byte.toUnsignedInt((byte)5);
      byteArray0[4] = (byte)5;
      byteArray0[5] = (byte)5;
      byteArray0[6] = (byte)5;
      byteArray0[7] = (byte)5;
      byteArray0[8] = (byte)5;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigInteger bigInteger1 = (BigInteger)jexlArithmetic2.narrowBigInteger(byte0, jexlArithmetic0, bigInteger0);
      MathContext mathContext0 = MathContext.DECIMAL32;
      Integer integer0 = new Integer((byte)5);
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger1);
      jexlArithmetic2.multiply(bigDecimal0, boolean0);
  }"
1128,"    public Object multiply(final Object left, final Object right) {
        if (left == null && right == null) {
            return controlNullNullOperands();
        }
        // if both (non null) args fit as int
        final Number ln = asLongNumber(left);
        final Number rn = asLongNumber(right);
        if (ln != null && rn != null) {
            final long x = ln.longValue();
            final long y = rn.longValue();
            final long result = x * y;
            // detect overflow
            if (!isMultiplyExact(x, y, result)) {
                return BigInteger.valueOf(x).multiply(BigInteger.valueOf(y));
            }
            return narrowLong(left, right, result);
        }
        // if either are bigdecimal use that type
        if (left instanceof BigDecimal || right instanceof BigDecimal) {
            final BigDecimal l = toBigDecimal(left);
            final BigDecimal r = toBigDecimal(right);
            final BigDecimal result = l.multiply(r, getMathContext());
            return narrowBigDecimal(left, right, result);
        }
        // if either are floating point (double or float) use double
        if (isFloatingPointNumber(left) || isFloatingPointNumber(right)) {
            final double l = toDouble(left);
            final double r = toDouble(right);
            return l * r;
        }
        // otherwise treat as integers
        final BigInteger l = toBigInteger(left);
        final BigInteger r = toBigInteger(right);
        final BigInteger result = l.multiply(r);
        return narrowBigInteger(left, right, result);
    }","  public void test405()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      Character character0 = new Character(';');
      Object object0 = jexlArithmetic0.complement(character0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = BigInteger.ZERO;
      bigInteger0.andNot(bigInteger1);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      jexlArithmetic0.roundBigDecimal(bigDecimal0);
      Class<Integer> class0 = Integer.class;
      jexlArithmetic0.narrowNumber(bigInteger0, class0);
      Object object1 = jexlArithmetic0.logicalNot((Object) null);
      jexlArithmetic0.complement(object1);
      // Undeclared exception!
      try { 
        jexlArithmetic0.multiply(object0, bigDecimal0);
        fail(""Expecting exception: NumberFormatException"");
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.math.BigDecimal"", e);
      }
  }"
1129,"    public Object divide(final Object left, final Object right) {
        if (left == null && right == null) {
            return controlNullNullOperands();
        }
        // if both (non null) args fit as long
        final Number ln = asLongNumber(left);
        final Number rn = asLongNumber(right);
        if (ln != null && rn != null) {
            final long x = ln.longValue();
            final long y = rn.longValue();
            if (y == 0L) {
                throw new ArithmeticException(""/"");
            }
            final long result = x  / y;
            return narrowLong(left, right, result);
        }
        // if either are bigdecimal use that type
        if (left instanceof BigDecimal || right instanceof BigDecimal) {
            final BigDecimal l = toBigDecimal(left);
            final BigDecimal r = toBigDecimal(right);
            if (BigDecimal.ZERO.equals(r)) {
                throw new ArithmeticException(""/"");
            }
            final BigDecimal result = l.divide(r, getMathContext());
            return narrowBigDecimal(left, right, result);
        }
        // if either are floating point (double or float) use double
        if (isFloatingPointNumber(left) || isFloatingPointNumber(right)) {
            final double l = toDouble(left);
            final double r = toDouble(right);
            if (r == 0.0) {
                throw new ArithmeticException(""/"");
            }
            return l / r;
        }
        // otherwise treat as integers
        final BigInteger l = toBigInteger(left);
        final BigInteger r = toBigInteger(right);
        if (BigInteger.ZERO.equals(r)) {
            throw new ArithmeticException(""/"");
        }
        final BigInteger result = l.divide(r);
        return narrowBigInteger(left, right, result);
    }","  public void test406()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      byte byte0 = (byte) (-20);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      AtomicBoolean atomicBoolean0 = new AtomicBoolean();
      atomicBoolean0.getAndSet(false);
      Float float0 = new Float(0.0);
      // Undeclared exception!
      try { 
        jexlArithmetic0.divide(atomicBoolean0, float0);
        fail(""Expecting exception: ArithmeticException"");
      } catch(ArithmeticException e) {
         //
         // /
         //
         verifyException(""org.apache.commons.jexl3.JexlArithmetic"", e);
      }
  }"
1130,"    public Object multiply(final Object left, final Object right) {
        if (left == null && right == null) {
            return controlNullNullOperands();
        }
        // if both (non null) args fit as int
        final Number ln = asLongNumber(left);
        final Number rn = asLongNumber(right);
        if (ln != null && rn != null) {
            final long x = ln.longValue();
            final long y = rn.longValue();
            final long result = x * y;
            // detect overflow
            if (!isMultiplyExact(x, y, result)) {
                return BigInteger.valueOf(x).multiply(BigInteger.valueOf(y));
            }
            return narrowLong(left, right, result);
        }
        // if either are bigdecimal use that type
        if (left instanceof BigDecimal || right instanceof BigDecimal) {
            final BigDecimal l = toBigDecimal(left);
            final BigDecimal r = toBigDecimal(right);
            final BigDecimal result = l.multiply(r, getMathContext());
            return narrowBigDecimal(left, right, result);
        }
        // if either are floating point (double or float) use double
        if (isFloatingPointNumber(left) || isFloatingPointNumber(right)) {
            final double l = toDouble(left);
            final double r = toDouble(right);
            return l * r;
        }
        // otherwise treat as integers
        final BigInteger l = toBigInteger(left);
        final BigInteger r = toBigInteger(right);
        final BigInteger result = l.multiply(r);
        return narrowBigInteger(left, right, result);
    }","  public void test407()  throws Throwable  {
      boolean boolean0 = true;
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true);
      int int0 = (-5312);
      Double double0 = new Double((-5312));
      Double double1 = new Double((-5312));
      jexlArithmetic0.matches(double0, double1);
      // Undeclared exception!
      try { 
        jexlArithmetic0.multiply((Object) null, double0);
        fail(""Expecting exception: ArithmeticException"");
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.JexlArithmetic"", e);
      }
  }"
1131,"    public boolean lessThan(final Object left, final Object right) {
        if ((left == right) || (left == null) || (right == null)) {
            return false;
        }
        return compare(left, right, ""<"") < 0;

    }","  public void test408()  throws Throwable  {
      MathContext mathContext0 = MathContext.DECIMAL64;
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      JexlOptions jexlOptions0 = new JexlOptions();
      jexlOptions0.getMathContext();
      jexlArithmetic0.lessThan((Object) null, mathContext0);
      jexlOptions0.getMathContext();
      jexlArithmetic0.lessThan(mathContext0, (Object) null);
  }"
1132,"    public int toInteger(final Object val) {
        if (val == null) {
            controlNullOperand();
            return 0;
        }
        if (val instanceof Double) {
            final Double dval = (Double) val;
            if (Double.isNaN(dval)) {
                return 0;
            }
            return dval.intValue();
        }
        if (val instanceof Number) {
            return ((Number) val).intValue();
        }
        if (val instanceof String) {
            if ("""".equals(val)) {
                return 0;
            }
            return Integer.parseInt((String) val);
        }
        if (val instanceof Boolean) {
            return ((Boolean) val) ? 1 : 0;
        }
        if (val instanceof AtomicBoolean) {
            return ((AtomicBoolean) val).get() ? 1 : 0;
        }
        if (val instanceof Character) {
            return ((Character) val);
        }

        throw new ArithmeticException(""Integer coercion: ""
                + val.getClass().getName() + "":("" + val + "")"");
    }","  public void test409()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true);
      MathContext mathContext0 = new MathContext(0);
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.createWithOptions(true, mathContext0, 1602);
      JexlArithmetic jexlArithmetic2 = jexlArithmetic0.createWithOptions(true, mathContext0, 0);
      jexlArithmetic2.toBoolean(mathContext0);
      JexlOptions jexlOptions0 = new JexlOptions();
      String[] stringArray0 = new String[5];
      stringArray0[0] = ""_Y6};D"";
      stringArray0[1] = ""-Q<S(c0j.&U,m}A"";
      BigDecimal bigDecimal0 = new BigDecimal((-1958));
      jexlArithmetic0.toBigInteger(bigDecimal0);
      stringArray0[2] = ""I 9HK+Yv*PK7("";
      stringArray0[3] = ""]: '"";
      stringArray0[4] = ""annotation"";
      jexlOptions0.setFlags(stringArray0);
      JexlArithmetic jexlArithmetic3 = jexlArithmetic2.options(jexlOptions0);
      jexlArithmetic3.createWithOptions(true, mathContext0, 700);
      Class<Long> class0 = Long.class;
      jexlArithmetic3.narrowAccept(class0, class0);
      jexlArithmetic2.size((Object) class0);
      // Undeclared exception!
      try { 
        jexlArithmetic1.toInteger(""2ny"");
        fail(""Expecting exception: NumberFormatException"");
      } catch(NumberFormatException e) {
         //
         // For input string: \""2ny\""
         //
         verifyException(""java.lang.NumberFormatException"", e);
      }
  }"
1133,"    public BigDecimal toBigDecimal(final Object val) {
        if (val instanceof BigDecimal) {
            return roundBigDecimal((BigDecimal) val);
        }
        if (val == null) {
            controlNullOperand();
            return BigDecimal.ZERO;
        }
        if (val instanceof Double) {
            if (Double.isNaN(((Double) val))) {
                return BigDecimal.ZERO;
            }
            return roundBigDecimal(new BigDecimal(val.toString(), getMathContext()));
        }
        if (val instanceof Number) {
            return roundBigDecimal(new BigDecimal(val.toString(), getMathContext()));
        }
        if (val instanceof Boolean) {
            return BigDecimal.valueOf(((Boolean) val) ? 1. : 0.);
        }
        if (val instanceof AtomicBoolean) {
            return BigDecimal.valueOf(((AtomicBoolean) val).get() ? 1L : 0L);
        }
        if (val instanceof String) {
            final String string = (String) val;
            if ("""".equals(string)) {
                return BigDecimal.ZERO;
            }
            return roundBigDecimal(new BigDecimal(string, getMathContext()));
        }
        if (val instanceof Character) {
            final int i = ((Character) val);
            return new BigDecimal(i);
        }
        throw new ArithmeticException(""BigDecimal coercion: ""
                + val.getClass().getName() + "":("" + val + "")"");
    }","  public void test410()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true);
      Short short0 = new Short((short)29);
      Byte byte0 = new Byte((byte)2);
      jexlArithmetic0.greaterThan(short0, byte0);
      AtomicBoolean atomicBoolean0 = new AtomicBoolean(true);
      AtomicBoolean atomicBoolean1 = new AtomicBoolean();
      atomicBoolean1.compareAndSet(false, false);
      jexlArithmetic0.negate(atomicBoolean1);
      Boolean boolean0 = new Boolean(false);
      JexlOptions jexlOptions0 = new JexlOptions();
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.options(jexlOptions0);
      Random.setNextRandom((byte)2);
      Pattern pattern0 = JexlArithmetic.FLOAT_PATTERN;
      // Undeclared exception!
      try { 
        jexlArithmetic1.toBigDecimal(pattern0);
        fail(""Expecting exception: ArithmeticException"");
      } catch(ArithmeticException e) {
         //
         // BigDecimal coercion: java.util.regex.Pattern:(^[+-]?\\d*(\\.\\d*)?([eE][+-]?\\d+)?$)
         //
         verifyException(""org.apache.commons.jexl3.JexlArithmetic"", e);
      }
  }"
1134,"    public Boolean startsWith(final Object left, final Object right) {
        if (left == null && right == null) {
            //if both are null L == R
            return true;
        }
        if (left == null || right == null) {
            // we know both aren't null, therefore L != R
            return false;
        }
        if (left instanceof CharSequence) {
            return (toString(left)).startsWith(toString(right));
        }
        return null;
    }","  public void test411()  throws Throwable  {
      MathContext mathContext0 = MathContext.UNLIMITED;
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false, mathContext0, (-2859));
      Short short0 = new Short((short) (-2595));
      Object object0 = jexlArithmetic0.bitwiseOr(short0, short0);
      jexlArithmetic0.startsWith(mathContext0, object0);
      jexlArithmetic0.startsWith((Object) null, (Object) null);
  }"
1135,"    public Boolean startsWith(final Object left, final Object right) {
        if (left == null && right == null) {
            //if both are null L == R
            return true;
        }
        if (left == null || right == null) {
            // we know both aren't null, therefore L != R
            return false;
        }
        if (left instanceof CharSequence) {
            return (toString(left)).startsWith(toString(right));
        }
        return null;
    }","  public void test412()  throws Throwable  {
      boolean boolean0 = false;
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      MathContext mathContext0 = MathContext.DECIMAL128;
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      Short short0 = new Short((short) (-2589));
      Object object0 = jexlArithmetic0.bitwiseOr(short0, short0);
      Long long0 = new Long((short) (-2589));
      Boolean boolean1 = new Boolean(false);
      jexlArithmetic0.negate(boolean1);
      BigDecimal bigDecimal0 = new BigDecimal(Integer.MAX_VALUE);
      jexlArithmetic0.narrowBigDecimal(long0, bigDecimal0, bigDecimal0);
      jexlArithmetic0.startsWith(mathContext0, object0);
      try { 
        Long.parseUnsignedLong(""java.lang.String@0000000006"", Integer.MAX_VALUE);
        fail(""Expecting exception: NumberFormatException"");
      } catch(NumberFormatException e) {
         //
         // radix 2147483647 greater than Character.MAX_RADIX
         //
         verifyException(""java.lang.Long"", e);
      }
  }"
1136,"    public Object mod(final Object left, final Object right) {
        if (left == null && right == null) {
            return controlNullNullOperands();
        }
        // if both (non null) args fit as long
        final Number ln = asLongNumber(left);
        final Number rn = asLongNumber(right);
        if (ln != null && rn != null) {
            final long x = ln.longValue();
            final long y = rn.longValue();
            if (y == 0L) {
                throw new ArithmeticException(""%"");
            }
            final long result = x % y;
            return narrowLong(left, right,  result);
        }
        // if either are bigdecimal use that type
        if (left instanceof BigDecimal || right instanceof BigDecimal) {
            final BigDecimal l = toBigDecimal(left);
            final BigDecimal r = toBigDecimal(right);
            if (BigDecimal.ZERO.equals(r)) {
                throw new ArithmeticException(""%"");
            }
            final BigDecimal remainder = l.remainder(r, getMathContext());
            return narrowBigDecimal(left, right, remainder);
        }
        // if either are floating point (double or float) use double
        if (isFloatingPointNumber(left) || isFloatingPointNumber(right)) {
            final double l = toDouble(left);
            final double r = toDouble(right);
            if (r == 0.0) {
                throw new ArithmeticException(""%"");
            }
            return l % r;
        }
        // otherwise treat as integers
        final BigInteger l = toBigInteger(left);
        final BigInteger r = toBigInteger(right);
        if (BigInteger.ZERO.equals(r)) {
            throw new ArithmeticException(""%"");
        }
        final BigInteger result = l.mod(r);
        return narrowBigInteger(left, right, result);
    }","  public void test413()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      Short short0 = Short.valueOf((short)24);
      jexlArithmetic0.logicalNot(short0);
      jexlArithmetic0.divide((Object) null, (Object) null);
      AtomicBoolean atomicBoolean0 = new AtomicBoolean(false);
      // Undeclared exception!
      try { 
        jexlArithmetic0.mod(atomicBoolean0, atomicBoolean0);
        fail(""Expecting exception: ArithmeticException"");
      } catch(ArithmeticException e) {
         //
         // %
         //
         verifyException(""org.apache.commons.jexl3.JexlArithmetic"", e);
      }
  }"
1137,"    public Object add(final Object left, final Object right) {
        if (left == null && right == null) {
            return controlNullNullOperands();
        }
        final boolean strconcat = strict
                            ? left instanceof String || right instanceof String
                            : left instanceof String && right instanceof String;
        if (!strconcat) {
            try {
                // if both (non null) args fit as long
                final Number ln = asLongNumber(left);
                final Number rn = asLongNumber(right);
                if (ln != null && rn != null) {
                    final long x = ln.longValue();
                    final long y = rn.longValue();
                    final long result = x + y;
                    // detect overflow, see java8 Math.addExact
                    if (((x ^ result) & (y ^ result)) < 0) {
                        return BigInteger.valueOf(x).add(BigInteger.valueOf(y));
                    }
                    return narrowLong(left, right, result);
                }
                // if either are bigdecimal use that type
                if (left instanceof BigDecimal || right instanceof BigDecimal) {
                    final BigDecimal l = toBigDecimal(left);
                    final BigDecimal r = toBigDecimal(right);
                    final BigDecimal result = l.add(r, getMathContext());
                    return narrowBigDecimal(left, right, result);
                }
                // if either are floating point (double or float) use double
                if (isFloatingPointNumber(left) || isFloatingPointNumber(right)) {
                    final double l = toDouble(left);
                    final double r = toDouble(right);
                    return l + r;
                }
                // otherwise treat as (big) integers
                final BigInteger l = toBigInteger(left);
                final BigInteger r = toBigInteger(right);
                final BigInteger result = l.add(r);
                return narrowBigInteger(left, right, result);
            } catch (final java.lang.NumberFormatException nfe) {
                if (left == null || right == null) {
                    controlNullOperand();
                }
            }
        }
        return toString(left).concat(toString(right));
    }","  public void test414()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true);
      Short short0 = new Short((short) (-3));
      Byte byte0 = new Byte((byte)2);
      jexlArithmetic0.greaterThan(short0, byte0);
      AtomicBoolean atomicBoolean0 = new AtomicBoolean(true);
      AtomicBoolean atomicBoolean1 = new AtomicBoolean();
      Object object0 = jexlArithmetic0.negate(atomicBoolean1);
      jexlArithmetic0.equals(object0, (Object) atomicBoolean0);
      JexlOptions jexlOptions0 = new JexlOptions();
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.options(jexlOptions0);
      Random.setNextRandom((-2130706433));
      BigInteger bigInteger0 = JexlArithmetic.BIGI_LONG_MAX_VALUE;
      jexlArithmetic0.createRange(bigInteger0, short0);
      // Undeclared exception!
      try { 
        jexlArithmetic1.add((Object) null, """");
        fail(""Expecting exception: ArithmeticException"");
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.JexlArithmetic"", e);
      }
  }"
1138,"    public Iterable<?> createRange(final Object from, final Object to) throws ArithmeticException {
        final long lfrom = toLong(from);
        final long lto = toLong(to);
        if ((lfrom >= Integer.MIN_VALUE && lfrom <= Integer.MAX_VALUE)
                && (lto >= Integer.MIN_VALUE && lto <= Integer.MAX_VALUE)) {
            return org.apache.commons.jexl3.internal.IntegerRange.create((int) lfrom, (int) lto);
        }
        return org.apache.commons.jexl3.internal.LongRange.create(lfrom, lto);
    }","  public void test415()  throws Throwable  {
      MathContext mathContext0 = MathContext.DECIMAL64;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      RoundingMode roundingMode0 = mathContext0.getRoundingMode();
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false, mathContext0, 15);
      JexlArithmetic.MapBuilder jexlArithmetic_MapBuilder0 = jexlArithmetic0.mapBuilder(15);
      BigDecimal bigDecimal0 = JexlArithmetic.BIGD_DOUBLE_MAX_VALUE;
      bigDecimal0.doubleValue();
      Class<Integer> class0 = Integer.class;
      jexlArithmetic0.narrowNumber(bigDecimal0, class0);
      jexlArithmetic_MapBuilder0.create();
      JexlArithmetic.NullOperand jexlArithmetic_NullOperand0 = new JexlArithmetic.NullOperand();
      jexlArithmetic_NullOperand0.toString();
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) ""org.evosuite.runtime.mock.java.lang.MockThrowable"");
      jexlArithmetic_MapBuilder0.put(roundingMode0, charBuffer0);
      BigInteger bigInteger0 = JexlArithmetic.BIGI_LONG_MIN_VALUE;
      Float float0 = new Float((double) 15);
      jexlArithmetic0.createRange(bigInteger0, float0);
  }"
1139,"    protected Object controlNullNullOperands() {
        if (isStrict()) {
            throw new NullOperand();
        }
        return 0;
    }","  public void test416()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      Byte byte0 = new Byte((byte)72);
      Double double0 = new Double((byte)72);
      Double.isFinite((byte)72);
      BigInteger bigInteger0 = BigInteger.ONE;
      Number number0 = jexlArithmetic0.narrow(bigInteger0);
      Byte.toUnsignedInt((byte) (-89));
      Byte.compare((byte) (-83), (byte)72);
      jexlArithmetic0.equals((Object) byte0, (Object) double0);
      Object object0 = jexlArithmetic0.or(byte0, double0);
      Byte byte1 = new Byte((byte)72);
      jexlArithmetic0.or("""", byte1);
      jexlArithmetic0.positivize(number0);
      JexlOptions jexlOptions0 = new JexlOptions();
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.options(jexlOptions0);
      JexlArithmetic jexlArithmetic2 = new JexlArithmetic(false);
      Object object1 = new Object();
      jexlArithmetic1.negate(object0);
      Float.valueOf((float) (byte)72);
      jexlOptions0.setCancellable(true);
      // Undeclared exception!
      try { 
        jexlArithmetic1.controlNullNullOperands();
        fail(""Expecting exception: ArithmeticException"");
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.JexlArithmetic"", e);
      }
  }"
1140,"    protected int compare(final Object left, final Object right, final String operator) {
        if (left != null && right != null) {
            if (left instanceof BigDecimal || right instanceof BigDecimal) {
                final BigDecimal l = toBigDecimal(left);
                final BigDecimal r = toBigDecimal(right);
                return l.compareTo(r);
            }
            if (left instanceof BigInteger || right instanceof BigInteger) {
                final BigInteger l = toBigInteger(left);
                final BigInteger r = toBigInteger(right);
                return l.compareTo(r);
            }
            if (isFloatingPoint(left) || isFloatingPoint(right)) {
                final double lhs = toDouble(left);
                final double rhs = toDouble(right);
                if (Double.isNaN(lhs)) {
                    if (Double.isNaN(rhs)) {
                        return 0;
                    }
                    return -1;
                }
                if (Double.isNaN(rhs)) {
                    // lhs is not NaN
                    return +1;
                }
                if (lhs < rhs) {
                    return -1;
                }
                if (lhs > rhs) {
                    return +1;
                }
                return 0;
            }
            if (isNumberable(left) || isNumberable(right)) {
                final long lhs = toLong(left);
                final long rhs = toLong(right);
                if (lhs < rhs) {
                    return -1;
                }
                if (lhs > rhs) {
                    return +1;
                }
                return 0;
            }
            if (left instanceof String || right instanceof String) {
                return toString(left).compareTo(toString(right));
            }
            if (""=="".equals(operator)) {
                return left.equals(right) ? 0 : -1;
            }
            if (left instanceof Comparable<?>) {
                @SuppressWarnings(""unchecked"") // OK because of instanceof check above
                final Comparable<Object> comparable = (Comparable<Object>) left;
                return comparable.compareTo(right);
            }
            if (right instanceof Comparable<?>) {
                @SuppressWarnings(""unchecked"") // OK because of instanceof check above
                final Comparable<Object> comparable = (Comparable<Object>) right;
                return comparable.compareTo(left);
            }
        }
        throw new ArithmeticException(""Object comparison:("" + left + "" "" + operator + "" "" + right + "")"");
    }","  public void test417()  throws Throwable  {
      MathContext mathContext0 = MathContext.DECIMAL32;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      mathContext0.toString();
      BigDecimal bigDecimal0 = new BigDecimal((long) (-1978));
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Boolean boolean0 = Boolean.TRUE;
      bigDecimal0.negate();
      Character character0 = new Character('N');
      BigInteger bigInteger0 = JexlArithmetic.BIGI_LONG_MIN_VALUE;
      Boolean.logicalAnd(false, true);
      Short short0 = new Short((short) (-113));
      mathContext0.getRoundingMode();
      Short.compare((short)1492, (short)1492);
      Random.setNextRandom((-377));
  }"
1141,"    public boolean lessThanOrEqual(final Object left, final Object right) {
        if (left == right) {
            return true;
        }
        if (left == null || right == null) {
            return false;
        }
        return compare(left, right, ""<="") <= 0;
    }","  public void test418()  throws Throwable  {
      MathContext mathContext0 = new MathContext(1);
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false, mathContext0, 1);
      AtomicBoolean atomicBoolean0 = new AtomicBoolean();
      mathContext0.equals(jexlArithmetic0);
      jexlArithmetic0.greaterThanOrEqual(atomicBoolean0, (Object) null);
      jexlArithmetic0.greaterThan(mathContext0, ""Iyyw!VUTf`4)!P6Ts<"");
      FileSystemHandling.shouldAllThrowIOExceptions();
      MathContext mathContext1 = MathContext.DECIMAL64;
      JexlArithmetic jexlArithmetic1 = new JexlArithmetic(true);
      jexlArithmetic1.size((Object) mathContext0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) mathContext1;
      objectArray0[1] = (Object) mathContext0;
      objectArray0[2] = (Object) jexlArithmetic1;
      objectArray0[3] = (Object) mathContext0;
      mathContext1.equals(objectArray0[3]);
      jexlArithmetic1.narrowArguments(objectArray0);
      jexlArithmetic1.contains(objectArray0[2], objectArray0[1]);
      Boolean.logicalXor(false, false);
      Pattern pattern0 = JexlArithmetic.FLOAT_PATTERN;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      jexlArithmetic1.equals((Object) pattern0, (Object) null);
      Boolean boolean0 = Boolean.TRUE;
      jexlArithmetic1.asLongNumber(boolean0);
      // Undeclared exception!
      try { 
        jexlArithmetic1.lessThanOrEqual(objectArray0[1], boolean0);
        fail(""Expecting exception: ClassCastException"");
      } catch(ClassCastException e) {
         //
         // java.math.MathContext cannot be cast to java.lang.Boolean
         //
         verifyException(""java.lang.Boolean"", e);
      }
  }"
1142,"    public boolean lessThanOrEqual(final Object left, final Object right) {
        if (left == right) {
            return true;
        }
        if (left == null || right == null) {
            return false;
        }
        return compare(left, right, ""<="") <= 0;
    }","  public void test419()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      Short short0 = new Short((short)21848);
      Short.toUnsignedLong((short)21848);
      Double double0 = new Double(14.0);
      Double.sum((-1157.599), 2762L);
      Double.sum((-735.6064024954151), 0.0);
      jexlArithmetic0.mod(double0, short0);
      Double.sum(79.99953982129976, 872.9105163064205);
      BigDecimal bigDecimal0 = JexlArithmetic.BIGD_DOUBLE_MAX_VALUE;
      // Undeclared exception!
      try { 
        jexlArithmetic0.lessThanOrEqual(double0, bigDecimal0);
        fail(""Expecting exception: NumberFormatException"");
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.math.BigDecimal"", e);
      }
  }"
1143,"    public boolean lessThanOrEqual(final Object left, final Object right) {
        if (left == right) {
            return true;
        }
        if (left == null || right == null) {
            return false;
        }
        return compare(left, right, ""<="") <= 0;
    }","  public void test420()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      Double double0 = new Double(14.0);
      Double.sum((-735.6064024954151), 0.0);
      Double.sum(79.99953982129976, 872.9105163064205);
      BigDecimal bigDecimal0 = JexlArithmetic.BIGD_DOUBLE_MAX_VALUE;
      // Undeclared exception!
      try { 
        jexlArithmetic0.lessThanOrEqual(double0, bigDecimal0);
        fail(""Expecting exception: NumberFormatException"");
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.math.BigDecimal"", e);
      }
  }"
1144,"    public Object xor(final Object left, final Object right) {
        final long l = toLong(left);
        final long r = toLong(right);
        return l ^ r;
    }","  public void test421()  throws Throwable  {
      MathContext mathContext0 = MathContext.DECIMAL128;
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      Boolean boolean0 = Boolean.TRUE;
      Integer integer0 = jexlArithmetic0.size((Object) boolean0);
      MapContext mapContext0 = new MapContext();
      Double double0 = new Double((-882.15));
      jexlArithmetic0.toInteger(boolean0);
      Byte byte0 = new Byte((byte) (-41));
      Byte.toUnsignedLong((byte)4);
      jexlArithmetic0.divide(double0, byte0);
      Random.setNextRandom(415);
      Character character0 = Character.valueOf('R');
      Object object0 = jexlArithmetic0.positivize(character0);
      jexlArithmetic0.xor(integer0, object0);
  }"
1145,"    public boolean narrowArguments(final Object[] args) {
        boolean narrowed = false;
        if (args != null) {
            for (int a = 0; a < args.length; ++a) {
                final Object arg = args[a];
                if (arg instanceof Number) {
                    final Number narg = (Number) arg;
                    final Number narrow = narrow(narg);
                    if (!narg.equals(narrow)) {
                        args[a] = narrow;
                        narrowed = true;
                    }
                }
            }
        }
        return narrowed;
    }","  public void test422()  throws Throwable  {
      MathContext mathContext0 = MathContext.UNLIMITED;
      int int0 = (-1);
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false, mathContext0, (-1));
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.options((JexlOptions) null);
      JexlArithmetic jexlArithmetic2 = jexlArithmetic1.createWithOptions(false, mathContext0, (-1));
      JexlEngine.getThreadContext();
      JexlArithmetic jexlArithmetic3 = jexlArithmetic2.options((JexlContext) null);
      Boolean boolean0 = jexlArithmetic2.startsWith((Object) null, jexlArithmetic3);
      jexlArithmetic0.positivize(boolean0);
      jexlArithmetic0.narrowArguments((Object[]) null);
      MathContext mathContext1 = null;
      try {
        mathContext1 = new MathContext((-1));
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Digits < 0
         //
         verifyException(""java.math.MathContext"", e);
      }
  }"
1146,"    public Boolean empty(final Object object) {
        return object == null || isEmpty(object, false);
    }","  public void test423()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      Double double0 = new Double(81.0);
      Double double1 = new Double((-1.0));
      Double.min(81.0, (-1.0));
      jexlArithmetic0.greaterThanOrEqual(double0, double0);
      int int0 = JexlArithmetic.BIGD_SCALE;
      JexlArithmetic.isMultiplyExact((-1), (-2147483648L), (-2569L));
      jexlArithmetic0.add(""`dUQ8(!<XS"", ""`dUQ8(!<XS"");
      BigDecimal bigDecimal0 = new BigDecimal(1100.541);
      jexlArithmetic0.empty(bigDecimal0);
  }"
1147,"    public Object divide(final Object left, final Object right) {
        if (left == null && right == null) {
            return controlNullNullOperands();
        }
        // if both (non null) args fit as long
        final Number ln = asLongNumber(left);
        final Number rn = asLongNumber(right);
        if (ln != null && rn != null) {
            final long x = ln.longValue();
            final long y = rn.longValue();
            if (y == 0L) {
                throw new ArithmeticException(""/"");
            }
            final long result = x  / y;
            return narrowLong(left, right, result);
        }
        // if either are bigdecimal use that type
        if (left instanceof BigDecimal || right instanceof BigDecimal) {
            final BigDecimal l = toBigDecimal(left);
            final BigDecimal r = toBigDecimal(right);
            if (BigDecimal.ZERO.equals(r)) {
                throw new ArithmeticException(""/"");
            }
            final BigDecimal result = l.divide(r, getMathContext());
            return narrowBigDecimal(left, right, result);
        }
        // if either are floating point (double or float) use double
        if (isFloatingPointNumber(left) || isFloatingPointNumber(right)) {
            final double l = toDouble(left);
            final double r = toDouble(right);
            if (r == 0.0) {
                throw new ArithmeticException(""/"");
            }
            return l / r;
        }
        // otherwise treat as integers
        final BigInteger l = toBigInteger(left);
        final BigInteger r = toBigInteger(right);
        if (BigInteger.ZERO.equals(r)) {
            throw new ArithmeticException(""/"");
        }
        final BigInteger result = l.divide(r);
        return narrowBigInteger(left, right, result);
    }","  public void test424()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      EvoSuiteFile evoSuiteFile0 = null;
      byte[] byteArray0 = new byte[3];
      byte[] byteArray1 = new byte[9];
      byteArray1[1] = (byte)12;
      byteArray1[2] = (byte)12;
      byteArray1[5] = (byte)12;
      byteArray1[6] = (byte) (-1);
      byteArray1[7] = (byte)12;
      byteArray1[8] = (byte)12;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray1);
      byteArray0[1] = (byte)12;
      byteArray0[2] = (byte) (-57);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true);
      AtomicBoolean atomicBoolean0 = new AtomicBoolean(false);
      // Undeclared exception!
      try { 
        jexlArithmetic0.divide((Object) null, atomicBoolean0);
        fail(""Expecting exception: ArithmeticException"");
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.JexlArithmetic"", e);
      }
  }"
1148,"    public double toDouble(final Object val) {
        if (val == null) {
            controlNullOperand();
            return 0;
        }
        if (val instanceof Double) {
            return ((Double) val);
        }
        if (val instanceof Number) {
            //The below construct is used rather than ((Number)val).doubleValue() to ensure
            //equality between comparing new Double( 6.4 / 3 ) and the jexl expression of 6.4 / 3
            return Double.parseDouble(String.valueOf(val));
        }
        if (val instanceof Boolean) {
            return ((Boolean) val) ? 1. : 0.;
        }
        if (val instanceof AtomicBoolean) {
            return ((AtomicBoolean) val).get() ? 1. : 0.;
        }
        if (val instanceof String) {
            final String string = (String) val;
            if ("""".equals(string)) {
                return Double.NaN;
            }
            // the spec seems to be iffy about this.  Going to give it a wack anyway
            return Double.parseDouble(string);
        }
        if (val instanceof Character) {
            final int i = ((Character) val);
            return i;
        }
        throw new ArithmeticException(""Double coercion: ""
                + val.getClass().getName() + "":("" + val + "")"");
    }","  public void test425()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      jexlArithmetic0.toDouble("""");
      String string0 = ""<="";
      int int0 = (-1872);
      long long0 = (-154L);
      try { 
        Long.parseUnsignedLong(""[.i$JY1#\u0003U"");
        fail(""Expecting exception: NumberFormatException"");
      } catch(NumberFormatException e) {
         //
         // For input string: \""[.i$JY1#\u0003U\""
         //
         verifyException(""java.lang.NumberFormatException"", e);
      }
  }"
1149,"    protected int compare(final Object left, final Object right, final String operator) {
        if (left != null && right != null) {
            if (left instanceof BigDecimal || right instanceof BigDecimal) {
                final BigDecimal l = toBigDecimal(left);
                final BigDecimal r = toBigDecimal(right);
                return l.compareTo(r);
            }
            if (left instanceof BigInteger || right instanceof BigInteger) {
                final BigInteger l = toBigInteger(left);
                final BigInteger r = toBigInteger(right);
                return l.compareTo(r);
            }
            if (isFloatingPoint(left) || isFloatingPoint(right)) {
                final double lhs = toDouble(left);
                final double rhs = toDouble(right);
                if (Double.isNaN(lhs)) {
                    if (Double.isNaN(rhs)) {
                        return 0;
                    }
                    return -1;
                }
                if (Double.isNaN(rhs)) {
                    // lhs is not NaN
                    return +1;
                }
                if (lhs < rhs) {
                    return -1;
                }
                if (lhs > rhs) {
                    return +1;
                }
                return 0;
            }
            if (isNumberable(left) || isNumberable(right)) {
                final long lhs = toLong(left);
                final long rhs = toLong(right);
                if (lhs < rhs) {
                    return -1;
                }
                if (lhs > rhs) {
                    return +1;
                }
                return 0;
            }
            if (left instanceof String || right instanceof String) {
                return toString(left).compareTo(toString(right));
            }
            if (""=="".equals(operator)) {
                return left.equals(right) ? 0 : -1;
            }
            if (left instanceof Comparable<?>) {
                @SuppressWarnings(""unchecked"") // OK because of instanceof check above
                final Comparable<Object> comparable = (Comparable<Object>) left;
                return comparable.compareTo(right);
            }
            if (right instanceof Comparable<?>) {
                @SuppressWarnings(""unchecked"") // OK because of instanceof check above
                final Comparable<Object> comparable = (Comparable<Object>) right;
                return comparable.compareTo(left);
            }
        }
        throw new ArithmeticException(""Object comparison:("" + left + "" "" + operator + "" "" + right + "")"");
    }","  public void test426()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      String string0 = """";
      jexlArithmetic0.toDouble("""");
      Long.getLong("""");
      String string1 = ""<="";
      // Undeclared exception!
      try { 
        jexlArithmetic0.compare((Object) null, """", ""<="");
        fail(""Expecting exception: ArithmeticException"");
      } catch(ArithmeticException e) {
         //
         // Object comparison:(null <= )
         //
         verifyException(""org.apache.commons.jexl3.JexlArithmetic"", e);
      }
  }"
1150,"    public double toDouble(final Object val) {
        if (val == null) {
            controlNullOperand();
            return 0;
        }
        if (val instanceof Double) {
            return ((Double) val);
        }
        if (val instanceof Number) {
            //The below construct is used rather than ((Number)val).doubleValue() to ensure
            //equality between comparing new Double( 6.4 / 3 ) and the jexl expression of 6.4 / 3
            return Double.parseDouble(String.valueOf(val));
        }
        if (val instanceof Boolean) {
            return ((Boolean) val) ? 1. : 0.;
        }
        if (val instanceof AtomicBoolean) {
            return ((AtomicBoolean) val).get() ? 1. : 0.;
        }
        if (val instanceof String) {
            final String string = (String) val;
            if ("""".equals(string)) {
                return Double.NaN;
            }
            // the spec seems to be iffy about this.  Going to give it a wack anyway
            return Double.parseDouble(string);
        }
        if (val instanceof Character) {
            final int i = ((Character) val);
            return i;
        }
        throw new ArithmeticException(""Double coercion: ""
                + val.getClass().getName() + "":("" + val + "")"");
    }","  public void test427()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      jexlArithmetic0.toDouble("""");
      String string0 = ""<="";
      int int0 = (-1872);
      long long0 = (-154L);
      try { 
        Long.parseUnsignedLong(""[.i$JY1#\u0003U"");
        fail(""Expecting exception: NumberFormatException"");
      } catch(NumberFormatException e) {
         //
         // For input string: \""[.i$JY1#\u0003U\""
         //
         verifyException(""java.lang.NumberFormatException"", e);
      }
  }"
1151,"    public double toDouble(final Object val) {
        if (val == null) {
            controlNullOperand();
            return 0;
        }
        if (val instanceof Double) {
            return ((Double) val);
        }
        if (val instanceof Number) {
            //The below construct is used rather than ((Number)val).doubleValue() to ensure
            //equality between comparing new Double( 6.4 / 3 ) and the jexl expression of 6.4 / 3
            return Double.parseDouble(String.valueOf(val));
        }
        if (val instanceof Boolean) {
            return ((Boolean) val) ? 1. : 0.;
        }
        if (val instanceof AtomicBoolean) {
            return ((AtomicBoolean) val).get() ? 1. : 0.;
        }
        if (val instanceof String) {
            final String string = (String) val;
            if ("""".equals(string)) {
                return Double.NaN;
            }
            // the spec seems to be iffy about this.  Going to give it a wack anyway
            return Double.parseDouble(string);
        }
        if (val instanceof Character) {
            final int i = ((Character) val);
            return i;
        }
        throw new ArithmeticException(""Double coercion: ""
                + val.getClass().getName() + "":("" + val + "")"");
    }","  public void test428()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      String string0 = ""???"";
      // Undeclared exception!
      try { 
        jexlArithmetic0.toDouble(""???"");
        fail(""Expecting exception: NumberFormatException"");
      } catch(NumberFormatException e) {
      }
  }"
1152,"    protected Object controlNullNullOperands() {
        if (isStrict()) {
            throw new NullOperand();
        }
        return 0;
    }","  public void test429()  throws Throwable  {
      int int0 = 3475;
      Random.setNextRandom(3475);
      MathContext mathContext0 = MathContext.UNLIMITED;
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true, mathContext0, 3475);
      Number number0 = jexlArithmetic0.narrowLong(mathContext0, mathContext0, (-1L));
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      jexlArithmetic0.narrowBigDecimal(number0, number0, bigDecimal0);
      // Undeclared exception!
      try { 
        jexlArithmetic0.controlNullNullOperands();
        fail(""Expecting exception: ArithmeticException"");
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.JexlArithmetic"", e);
      }
  }"
1153,"    public Object xor(final Object left, final Object right) {
        final long l = toLong(left);
        final long r = toLong(right);
        return l ^ r;
    }","  public void test430()  throws Throwable  {
      boolean boolean0 = true;
      MathContext mathContext0 = MathContext.DECIMAL128;
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true, mathContext0, 13);
      JexlEngine.EmptyContext jexlEngine_EmptyContext0 = (JexlEngine.EmptyContext)JexlEngine.EMPTY_CONTEXT;
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.options((JexlContext) jexlEngine_EmptyContext0);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      jexlArithmetic1.narrow(bigDecimal0);
      // Undeclared exception!
      try { 
        jexlArithmetic0.xor(mathContext0, jexlArithmetic1);
        fail(""Expecting exception: ArithmeticException"");
      } catch(ArithmeticException e) {
         //
         // Long coercion: java.math.MathContext:(precision=34 roundingMode=HALF_EVEN)
         //
         verifyException(""org.apache.commons.jexl3.JexlArithmetic"", e);
      }
  }"
1154,"    public final Object bitwiseXor(final Object lhs, final Object rhs) {
        return xor(lhs, rhs);
    }","  public void test431()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      JexlArithmetic.isMultiplyExact(32767L, 32767L, 32767L);
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.options((JexlContext) null);
      jexlArithmetic0.matches(jexlArithmetic1, (Object) null);
      Short short0 = new Short((short)0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-7);
      byteArray0[1] = (byte)30;
      byteArray0[2] = (byte) (-2);
      byteArray0[3] = (byte) (-27);
      byteArray0[4] = (byte) (-6);
      byteArray0[5] = (byte)80;
      byteArray0[6] = (byte)31;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Short.toUnsignedLong((short)0);
      Short.compare((short) (-1901), (short) (-1901));
      jexlArithmetic1.toBoolean(short0);
      Integer integer0 = new Integer((short)0);
      Integer.compare(1, Integer.MIN_VALUE);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ""|>Vw@?2y3KJZH/P>I"");
      // Undeclared exception!
      try { 
        jexlArithmetic1.bitwiseXor(integer0, ""]: '"");
        fail(""Expecting exception: NumberFormatException"");
      } catch(NumberFormatException e) {
         //
         // For input string: \""]: '\""
         //
         verifyException(""java.lang.NumberFormatException"", e);
      }
  }"
1155,"    public Object divide(final Object left, final Object right) {
        if (left == null && right == null) {
            return controlNullNullOperands();
        }
        // if both (non null) args fit as long
        final Number ln = asLongNumber(left);
        final Number rn = asLongNumber(right);
        if (ln != null && rn != null) {
            final long x = ln.longValue();
            final long y = rn.longValue();
            if (y == 0L) {
                throw new ArithmeticException(""/"");
            }
            final long result = x  / y;
            return narrowLong(left, right, result);
        }
        // if either are bigdecimal use that type
        if (left instanceof BigDecimal || right instanceof BigDecimal) {
            final BigDecimal l = toBigDecimal(left);
            final BigDecimal r = toBigDecimal(right);
            if (BigDecimal.ZERO.equals(r)) {
                throw new ArithmeticException(""/"");
            }
            final BigDecimal result = l.divide(r, getMathContext());
            return narrowBigDecimal(left, right, result);
        }
        // if either are floating point (double or float) use double
        if (isFloatingPointNumber(left) || isFloatingPointNumber(right)) {
            final double l = toDouble(left);
            final double r = toDouble(right);
            if (r == 0.0) {
                throw new ArithmeticException(""/"");
            }
            return l / r;
        }
        // otherwise treat as integers
        final BigInteger l = toBigInteger(left);
        final BigInteger r = toBigInteger(right);
        if (BigInteger.ZERO.equals(r)) {
            throw new ArithmeticException(""/"");
        }
        final BigInteger result = l.divide(r);
        return narrowBigInteger(left, right, result);
    }","  public void test432()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true);
      AtomicBoolean atomicBoolean0 = new AtomicBoolean(true);
      AtomicBoolean atomicBoolean1 = new AtomicBoolean();
      atomicBoolean1.compareAndSet(false, true);
      jexlArithmetic0.negate(atomicBoolean1);
      atomicBoolean0.lazySet(false);
      Boolean boolean0 = jexlArithmetic0.empty(atomicBoolean0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      jexlArithmetic0.equals((Object) boolean0, (Object) atomicBoolean0);
      JexlOptions jexlOptions0 = new JexlOptions();
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.options(jexlOptions0);
      Integer integer0 = new Integer(12);
      jexlArithmetic1.greaterThanOrEqual((Object) null, integer0);
      Random.setNextRandom((-2130706431));
      Long long0 = new Long((-2130706431));
      Boolean boolean1 = Boolean.valueOf(""org.apche.commons.jexl9.JexlOptions"");
      // Undeclared exception!
      try { 
        jexlArithmetic0.divide(long0, boolean1);
        fail(""Expecting exception: ArithmeticException"");
      } catch(ArithmeticException e) {
         //
         // /
         //
         verifyException(""org.apache.commons.jexl3.JexlArithmetic"", e);
      }
  }"
1156,"    public Object or(final Object left, final Object right) {
        final long l = toLong(left);
        final long r = toLong(right);
        return l | r;
    }","  public void test433()  throws Throwable  {
      JexlOptions jexlOptions0 = new JexlOptions();
      jexlOptions0.getMathContext();
      int int0 = 968;
      jexlOptions0.setLexicalShade(true);
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true, (MathContext) null, 968);
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.createWithOptions(true, (MathContext) null, 968);
      BigDecimal bigDecimal0 = new BigDecimal((long) 968);
      Class<AtomicBoolean> class0 = AtomicBoolean.class;
      jexlArithmetic0.narrowNumber(bigDecimal0, class0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Byte byte0 = new Byte((byte)45);
      jexlArithmetic1.options(jexlOptions0);
      Byte.compare((byte) (-2), (byte) (-84));
      Class<MathContext> class1 = MathContext.class;
      jexlArithmetic1.narrowNumber(byte0, class1);
      Character character0 = Character.valueOf('{');
      // Undeclared exception!
      try { 
        jexlArithmetic1.or(class1, character0);
        fail(""Expecting exception: ArithmeticException"");
      } catch(ArithmeticException e) {
         //
         // Long coercion: java.lang.Class:(class java.math.MathContext)
         //
         verifyException(""org.apache.commons.jexl3.JexlArithmetic"", e);
      }
  }"
1157,"    public MapBuilder mapBuilder(final int size) {
        return new org.apache.commons.jexl3.internal.MapBuilder(size);
    }","  public void test434()  throws Throwable  {
      JexlOptions jexlOptions0 = new JexlOptions();
      jexlOptions0.getMathContext();
      jexlOptions0.setLexicalShade(true);
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true);
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.createWithOptions(true, (MathContext) null, 968);
      BigDecimal bigDecimal0 = new BigDecimal((long) 968);
      Class<AtomicBoolean> class0 = AtomicBoolean.class;
      jexlArithmetic0.narrowNumber(bigDecimal0, class0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      jexlArithmetic1.options(jexlOptions0);
      Byte.compare((byte) (-2), (byte) (-2));
      jexlArithmetic0.mapBuilder(968);
  }"
1158,"    public int toInteger(final Object val) {
        if (val == null) {
            controlNullOperand();
            return 0;
        }
        if (val instanceof Double) {
            final Double dval = (Double) val;
            if (Double.isNaN(dval)) {
                return 0;
            }
            return dval.intValue();
        }
        if (val instanceof Number) {
            return ((Number) val).intValue();
        }
        if (val instanceof String) {
            if ("""".equals(val)) {
                return 0;
            }
            return Integer.parseInt((String) val);
        }
        if (val instanceof Boolean) {
            return ((Boolean) val) ? 1 : 0;
        }
        if (val instanceof AtomicBoolean) {
            return ((AtomicBoolean) val).get() ? 1 : 0;
        }
        if (val instanceof Character) {
            return ((Character) val);
        }

        throw new ArithmeticException(""Integer coercion: ""
                + val.getClass().getName() + "":("" + val + "")"");
    }","  public void test435()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigInteger0.nextProbablePrime();
      Number number0 = jexlArithmetic0.narrow(bigInteger0);
      jexlArithmetic0.subtract(number0, number0);
      Float float0 = new Float((-2368.8948));
      AtomicBoolean atomicBoolean0 = new AtomicBoolean();
      atomicBoolean0.getAndSet(false);
      Object object0 = jexlArithmetic0.not(atomicBoolean0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Integer integer0 = new Integer((-45));
      Integer.getInteger(""positivize"");
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Integer.compareUnsigned((-45), (-45));
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "":("");
      jexlArithmetic0.logicalNot(float0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JexlArithmetic.isMultiplyExact((-32768L), (-1677L), (-1677L));
      jexlArithmetic0.toBigInteger(object0);
      int int0 = JexlArithmetic.BIGD_SCALE;
      jexlArithmetic0.isNegateStable();
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.options((JexlContext) null);
      jexlArithmetic0.startsWith(jexlArithmetic1, (Object) null);
      jexlArithmetic0.positivize((Object) null);
      AtomicBoolean atomicBoolean1 = new AtomicBoolean();
      jexlArithmetic1.toInteger(atomicBoolean1);
  }"
1159,"    public int toInteger(final Object val) {
        if (val == null) {
            controlNullOperand();
            return 0;
        }
        if (val instanceof Double) {
            final Double dval = (Double) val;
            if (Double.isNaN(dval)) {
                return 0;
            }
            return dval.intValue();
        }
        if (val instanceof Number) {
            return ((Number) val).intValue();
        }
        if (val instanceof String) {
            if ("""".equals(val)) {
                return 0;
            }
            return Integer.parseInt((String) val);
        }
        if (val instanceof Boolean) {
            return ((Boolean) val) ? 1 : 0;
        }
        if (val instanceof AtomicBoolean) {
            return ((AtomicBoolean) val).get() ? 1 : 0;
        }
        if (val instanceof Character) {
            return ((Character) val);
        }

        throw new ArithmeticException(""Integer coercion: ""
                + val.getClass().getName() + "":("" + val + "")"");
    }","  public void test436()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigInteger0.nextProbablePrime();
      Number number0 = jexlArithmetic0.narrow(bigInteger0);
      jexlArithmetic0.subtract(number0, number0);
      Float float0 = new Float((-2368.8948));
      jexlArithmetic0.subtract(float0, (Object) null);
      AtomicBoolean atomicBoolean0 = new AtomicBoolean();
      atomicBoolean0.getAndSet(false);
      Object object0 = jexlArithmetic0.not(atomicBoolean0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Integer integer0 = new Integer((-45));
      Integer.getInteger(""positivize"");
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Integer.compareUnsigned((-45), (-45));
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "":("");
      jexlArithmetic0.logicalNot(float0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JexlArithmetic.isMultiplyExact((-32768L), (-1677L), (-1677L));
      jexlArithmetic0.toBigInteger(object0);
      int int0 = JexlArithmetic.BIGD_SCALE;
      jexlArithmetic0.isNegateStable();
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.options((JexlContext) null);
      jexlArithmetic0.startsWith(jexlArithmetic1, (Object) null);
      jexlArithmetic0.positivize((Object) null);
      AtomicBoolean atomicBoolean1 = new AtomicBoolean();
      jexlArithmetic1.toInteger(atomicBoolean1);
  }"
1160,"    public MapBuilder mapBuilder(final int size) {
        return new org.apache.commons.jexl3.internal.MapBuilder(size);
    }","  public void test437()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true);
      AtomicBoolean atomicBoolean0 = new AtomicBoolean(false);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      jexlArithmetic0.equals((Object) atomicBoolean0, (Object) atomicBoolean0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Integer integer0 = new Integer((-1567));
      Float float0 = new Float((-2300.21705042));
      jexlArithmetic0.greaterThanOrEqual(float0, atomicBoolean0);
      jexlArithmetic0.size((Object) atomicBoolean0, integer0);
      Double double0 = new Double(55.750192);
      jexlArithmetic0.toInteger(double0);
      jexlArithmetic0.arrayBuilder(55);
      jexlArithmetic0.mapBuilder(2435);
  }"
1161,"    public BigDecimal toBigDecimal(final Object val) {
        if (val instanceof BigDecimal) {
            return roundBigDecimal((BigDecimal) val);
        }
        if (val == null) {
            controlNullOperand();
            return BigDecimal.ZERO;
        }
        if (val instanceof Double) {
            if (Double.isNaN(((Double) val))) {
                return BigDecimal.ZERO;
            }
            return roundBigDecimal(new BigDecimal(val.toString(), getMathContext()));
        }
        if (val instanceof Number) {
            return roundBigDecimal(new BigDecimal(val.toString(), getMathContext()));
        }
        if (val instanceof Boolean) {
            return BigDecimal.valueOf(((Boolean) val) ? 1. : 0.);
        }
        if (val instanceof AtomicBoolean) {
            return BigDecimal.valueOf(((AtomicBoolean) val).get() ? 1L : 0L);
        }
        if (val instanceof String) {
            final String string = (String) val;
            if ("""".equals(string)) {
                return BigDecimal.ZERO;
            }
            return roundBigDecimal(new BigDecimal(string, getMathContext()));
        }
        if (val instanceof Character) {
            final int i = ((Character) val);
            return new BigDecimal(i);
        }
        throw new ArithmeticException(""BigDecimal coercion: ""
                + val.getClass().getName() + "":("" + val + "")"");
    }","  public void test438()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      jexlArithmetic0.subtract((Object) null, (Object) null);
      jexlArithmetic0.contains((Object) null, (Object) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Integer integer0 = new Integer(46);
      Boolean.compare(true, false);
      jexlArithmetic0.negate(integer0);
      char[] charArray0 = new char[3];
      charArray0[0] = '&';
      charArray0[1] = '0';
      Boolean boolean0 = new Boolean("")"");
      jexlArithmetic0.complement(boolean0);
      CharBuffer charBuffer0 = CharBuffer.allocate(549);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)11;
      byteArray0[1] = (byte) (-43);
      byteArray0[2] = (byte)17;
      byteArray0[3] = (byte)11;
      byteArray0[4] = (byte)123;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      jexlArithmetic0.narrowBigInteger((Object) null, charBuffer0, bigInteger0);
      charArray0[2] = ',';
      CharBuffer charBuffer1 = CharBuffer.wrap(charArray0);
      // Undeclared exception!
      try { 
        jexlArithmetic0.toBigDecimal(charBuffer1);
        fail(""Expecting exception: ArithmeticException"");
      } catch(ArithmeticException e) {
         //
         // BigDecimal coercion: java.nio.HeapCharBuffer:(&0,)
         //
         verifyException(""org.apache.commons.jexl3.JexlArithmetic"", e);
      }
  }"
1162,"    public Object mod(final Object left, final Object right) {
        if (left == null && right == null) {
            return controlNullNullOperands();
        }
        // if both (non null) args fit as long
        final Number ln = asLongNumber(left);
        final Number rn = asLongNumber(right);
        if (ln != null && rn != null) {
            final long x = ln.longValue();
            final long y = rn.longValue();
            if (y == 0L) {
                throw new ArithmeticException(""%"");
            }
            final long result = x % y;
            return narrowLong(left, right,  result);
        }
        // if either are bigdecimal use that type
        if (left instanceof BigDecimal || right instanceof BigDecimal) {
            final BigDecimal l = toBigDecimal(left);
            final BigDecimal r = toBigDecimal(right);
            if (BigDecimal.ZERO.equals(r)) {
                throw new ArithmeticException(""%"");
            }
            final BigDecimal remainder = l.remainder(r, getMathContext());
            return narrowBigDecimal(left, right, remainder);
        }
        // if either are floating point (double or float) use double
        if (isFloatingPointNumber(left) || isFloatingPointNumber(right)) {
            final double l = toDouble(left);
            final double r = toDouble(right);
            if (r == 0.0) {
                throw new ArithmeticException(""%"");
            }
            return l % r;
        }
        // otherwise treat as integers
        final BigInteger l = toBigInteger(left);
        final BigInteger r = toBigInteger(right);
        if (BigInteger.ZERO.equals(r)) {
            throw new ArithmeticException(""%"");
        }
        final BigInteger result = l.mod(r);
        return narrowBigInteger(left, right, result);
    }","  public void test439()  throws Throwable  {
      RoundingMode roundingMode0 = RoundingMode.UNNECESSARY;
      MathContext mathContext0 = new MathContext(16, roundingMode0);
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true, mathContext0, 16);
      JexlArithmetic jexlArithmetic1 = new JexlArithmetic(true);
      Double double0 = new Double((-336.9059450217716));
      // Undeclared exception!
      try { 
        jexlArithmetic1.mod(double0, jexlArithmetic0);
        fail(""Expecting exception: ArithmeticException"");
      } catch(ArithmeticException e) {
         //
         // Double coercion: org.apache.commons.jexl3.JexlArithmetic:(org.apache.commons.jexl3.JexlArithmetic@1)
         //
         verifyException(""org.apache.commons.jexl3.JexlArithmetic"", e);
      }
  }"
1163,"    public Object or(final Object left, final Object right) {
        final long l = toLong(left);
        final long r = toLong(right);
        return l | r;
    }","  public void test440()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = ""=="";
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true);
      byte byte0 = (byte) (-44);
      Byte byte1 = new Byte((byte) (-44));
      jexlArithmetic0.positivize(byte1);
      MapContext mapContext0 = new MapContext();
      jexlArithmetic0.greaterThan(mapContext0, mapContext0);
      Double double0 = new Double(1623.5211525459);
      Short short0 = new Short((short)978);
      CharBuffer charBuffer0 = CharBuffer.allocate((short)978);
      // Undeclared exception!
      try { 
        jexlArithmetic0.or(short0, charBuffer0);
        fail(""Expecting exception: ArithmeticException"");
      } catch(ArithmeticException e) {
         //
         // Long coercion: java.nio.HeapCharBuffer:(\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000)
         //
         verifyException(""org.apache.commons.jexl3.JexlArithmetic"", e);
      }
  }"
1164,"    public Object divide(final Object left, final Object right) {
        if (left == null && right == null) {
            return controlNullNullOperands();
        }
        // if both (non null) args fit as long
        final Number ln = asLongNumber(left);
        final Number rn = asLongNumber(right);
        if (ln != null && rn != null) {
            final long x = ln.longValue();
            final long y = rn.longValue();
            if (y == 0L) {
                throw new ArithmeticException(""/"");
            }
            final long result = x  / y;
            return narrowLong(left, right, result);
        }
        // if either are bigdecimal use that type
        if (left instanceof BigDecimal || right instanceof BigDecimal) {
            final BigDecimal l = toBigDecimal(left);
            final BigDecimal r = toBigDecimal(right);
            if (BigDecimal.ZERO.equals(r)) {
                throw new ArithmeticException(""/"");
            }
            final BigDecimal result = l.divide(r, getMathContext());
            return narrowBigDecimal(left, right, result);
        }
        // if either are floating point (double or float) use double
        if (isFloatingPointNumber(left) || isFloatingPointNumber(right)) {
            final double l = toDouble(left);
            final double r = toDouble(right);
            if (r == 0.0) {
                throw new ArithmeticException(""/"");
            }
            return l / r;
        }
        // otherwise treat as integers
        final BigInteger l = toBigInteger(left);
        final BigInteger r = toBigInteger(right);
        if (BigInteger.ZERO.equals(r)) {
            throw new ArithmeticException(""/"");
        }
        final BigInteger result = l.divide(r);
        return narrowBigInteger(left, right, result);
    }","  public void test441()  throws Throwable  {
      MathContext mathContext0 = new MathContext(36);
      FileSystemHandling.shouldAllThrowIOExceptions();
      mathContext0.getPrecision();
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false, mathContext0, 31);
      jexlArithmetic0.lessThan(mathContext0, mathContext0);
      Short short0 = new Short((short)0);
      Long long0 = new Long(36);
      mathContext0.getPrecision();
      Double double0 = new Double(36);
      mathContext0.getRoundingMode();
      jexlArithmetic0.toBigInteger(double0);
      jexlArithmetic0.and(long0, double0);
      BigInteger bigInteger0 = BigInteger.TEN;
      Byte byte0 = Byte.valueOf((byte)13);
      jexlArithmetic0.toDouble(byte0);
      jexlArithmetic0.mapBuilder(36);
      BigInteger bigInteger1 = BigInteger.TEN;
      jexlArithmetic0.isFloatingPointNumber(bigInteger1);
      Long long1 = new Long(36);
      Float float0 = new Float(0.0F);
      Float.min(1535.85F, 31);
      jexlArithmetic0.bitwiseAnd(long1, float0);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.createWithOptions(false, mathContext0, 36);
      JexlOptions jexlOptions0 = new JexlOptions();
      jexlArithmetic1.options(jexlOptions0);
      JexlArithmetic jexlArithmetic2 = jexlArithmetic1.options(jexlOptions0);
      // Undeclared exception!
      try { 
        jexlArithmetic0.divide(bigDecimal0, jexlArithmetic2);
        fail(""Expecting exception: ArithmeticException"");
      } catch(ArithmeticException e) {
         //
         // BigDecimal coercion: org.apache.commons.jexl3.JexlArithmetic:(org.apache.commons.jexl3.JexlArithmetic@6)
         //
         verifyException(""org.apache.commons.jexl3.JexlArithmetic"", e);
      }
  }"
1165,"    public BigInteger toBigInteger(final Object val) {
        if (val == null) {
            controlNullOperand();
            return BigInteger.ZERO;
        }
        if (val instanceof BigInteger) {
            return (BigInteger) val;
        }
        if (val instanceof Double) {
            final Double dval = (Double) val;
            if (Double.isNaN(dval)) {
                return BigInteger.ZERO;
            }
            return BigInteger.valueOf(dval.longValue());
        }
        if (val instanceof BigDecimal) {
            return ((BigDecimal) val).toBigInteger();
        }
        if (val instanceof Number) {
            return BigInteger.valueOf(((Number) val).longValue());
        }
        if (val instanceof Boolean) {
            return BigInteger.valueOf(((Boolean) val) ? 1L : 0L);
        }
        if (val instanceof AtomicBoolean) {
            return BigInteger.valueOf(((AtomicBoolean) val).get() ? 1L : 0L);
        }
        if (val instanceof String) {
            final String string = (String) val;
            if ("""".equals(string)) {
                return BigInteger.ZERO;
            }
            return new BigInteger(string);
        }
        if (val instanceof Character) {
            final int i = ((Character) val);
            return BigInteger.valueOf(i);
        }

        throw new ArithmeticException(""BigInteger coercion: ""
                + val.getClass().getName() + "":("" + val + "")"");
    }","  public void test442()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) jexlArithmetic0;
      objectArray0[1] = (Object) jexlArithmetic0;
      Object object0 = null;
      Boolean boolean0 = jexlArithmetic0.empty((Object) null);
      Byte byte0 = new Byte((byte)31);
      Object object1 = jexlArithmetic0.or(boolean0, byte0);
      objectArray0[2] = object1;
      Number number0 = jexlArithmetic0.narrow(byte0);
      objectArray0[4] = (Object) jexlArithmetic0;
      objectArray0[5] = (Object) jexlArithmetic0;
      jexlArithmetic0.setBuilder((byte)31);
      Object object2 = jexlArithmetic0.divide(number0, number0);
      jexlArithmetic0.logicalNot(objectArray0[2]);
      Boolean.logicalXor(true, true);
      Byte.toUnsignedLong((byte)8);
      objectArray0[6] = (Object) jexlArithmetic0;
      BigDecimal bigDecimal0 = JexlArithmetic.BIGD_DOUBLE_MIN_VALUE;
      jexlArithmetic0.matches(bigDecimal0, objectArray0[2]);
      Boolean.compare(true, false);
      objectArray0[7] = (Object) jexlArithmetic0;
      jexlArithmetic0.toBoolean(object2);
      jexlArithmetic0.contains(object2, objectArray0[5]);
      jexlArithmetic0.narrowArguments(objectArray0);
      // Undeclared exception!
      try { 
        jexlArithmetic0.toBigInteger(jexlArithmetic0);
        fail(""Expecting exception: ArithmeticException"");
      } catch(ArithmeticException e) {
         //
         // BigInteger coercion: org.apache.commons.jexl3.JexlArithmetic:(org.apache.commons.jexl3.JexlArithmetic@1)
         //
         verifyException(""org.apache.commons.jexl3.JexlArithmetic"", e);
      }
  }"
1166,"    public int toInteger(final Object val) {
        if (val == null) {
            controlNullOperand();
            return 0;
        }
        if (val instanceof Double) {
            final Double dval = (Double) val;
            if (Double.isNaN(dval)) {
                return 0;
            }
            return dval.intValue();
        }
        if (val instanceof Number) {
            return ((Number) val).intValue();
        }
        if (val instanceof String) {
            if ("""".equals(val)) {
                return 0;
            }
            return Integer.parseInt((String) val);
        }
        if (val instanceof Boolean) {
            return ((Boolean) val) ? 1 : 0;
        }
        if (val instanceof AtomicBoolean) {
            return ((AtomicBoolean) val).get() ? 1 : 0;
        }
        if (val instanceof Character) {
            return ((Character) val);
        }

        throw new ArithmeticException(""Integer coercion: ""
                + val.getClass().getName() + "":("" + val + "")"");
    }","  public void test443()  throws Throwable  {
      boolean boolean0 = true;
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true);
      Object object0 = null;
      Object[] objectArray0 = new Object[8];
      objectArray0[1] = (Object) jexlArithmetic0;
      // Undeclared exception!
      try { 
        jexlArithmetic0.toInteger(objectArray0[1]);
        fail(""Expecting exception: ArithmeticException"");
      } catch(ArithmeticException e) {
         //
         // Integer coercion: org.apache.commons.jexl3.JexlArithmetic:(org.apache.commons.jexl3.JexlArithmetic@1)
         //
         verifyException(""org.apache.commons.jexl3.JexlArithmetic"", e);
      }
  }"
1167,"    public Object divide(final Object left, final Object right) {
        if (left == null && right == null) {
            return controlNullNullOperands();
        }
        // if both (non null) args fit as long
        final Number ln = asLongNumber(left);
        final Number rn = asLongNumber(right);
        if (ln != null && rn != null) {
            final long x = ln.longValue();
            final long y = rn.longValue();
            if (y == 0L) {
                throw new ArithmeticException(""/"");
            }
            final long result = x  / y;
            return narrowLong(left, right, result);
        }
        // if either are bigdecimal use that type
        if (left instanceof BigDecimal || right instanceof BigDecimal) {
            final BigDecimal l = toBigDecimal(left);
            final BigDecimal r = toBigDecimal(right);
            if (BigDecimal.ZERO.equals(r)) {
                throw new ArithmeticException(""/"");
            }
            final BigDecimal result = l.divide(r, getMathContext());
            return narrowBigDecimal(left, right, result);
        }
        // if either are floating point (double or float) use double
        if (isFloatingPointNumber(left) || isFloatingPointNumber(right)) {
            final double l = toDouble(left);
            final double r = toDouble(right);
            if (r == 0.0) {
                throw new ArithmeticException(""/"");
            }
            return l / r;
        }
        // otherwise treat as integers
        final BigInteger l = toBigInteger(left);
        final BigInteger r = toBigInteger(right);
        if (BigInteger.ZERO.equals(r)) {
            throw new ArithmeticException(""/"");
        }
        final BigInteger result = l.divide(r);
        return narrowBigInteger(left, right, result);
    }","  public void test444()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true);
      MathContext mathContext0 = MathContext.DECIMAL32;
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.createWithOptions(false, mathContext0, Integer.MIN_VALUE);
      jexlArithmetic1.equals((Object) mathContext0, (Object) jexlArithmetic0);
      Float float0 = new Float((double) Integer.MIN_VALUE);
      jexlArithmetic1.getMathContext();
      Byte byte0 = new Byte((byte)17);
      Float.max(Integer.MIN_VALUE, (-1.0F));
      Long long0 = (Long)jexlArithmetic0.bitwiseAnd(float0, byte0);
      Long.getLong(""@oPkuY>9l"", long0);
      Integer integer0 = new Integer((byte)17);
      Integer integer1 = new Integer((byte)17);
      Integer integer2 = new Integer(Integer.MIN_VALUE);
      jexlArithmetic1.mapBuilder((byte)17);
      Long long1 = new Long(1L);
      Byte byte1 = new Byte((byte) (-18));
      // Undeclared exception!
      try { 
        jexlArithmetic1.divide(integer1, long0);
        fail(""Expecting exception: ArithmeticException"");
      } catch(ArithmeticException e) {
         //
         // /
         //
         verifyException(""org.apache.commons.jexl3.JexlArithmetic"", e);
      }
  }"
1168,"    public Object add(final Object left, final Object right) {
        if (left == null && right == null) {
            return controlNullNullOperands();
        }
        final boolean strconcat = strict
                            ? left instanceof String || right instanceof String
                            : left instanceof String && right instanceof String;
        if (!strconcat) {
            try {
                // if both (non null) args fit as long
                final Number ln = asLongNumber(left);
                final Number rn = asLongNumber(right);
                if (ln != null && rn != null) {
                    final long x = ln.longValue();
                    final long y = rn.longValue();
                    final long result = x + y;
                    // detect overflow, see java8 Math.addExact
                    if (((x ^ result) & (y ^ result)) < 0) {
                        return BigInteger.valueOf(x).add(BigInteger.valueOf(y));
                    }
                    return narrowLong(left, right, result);
                }
                // if either are bigdecimal use that type
                if (left instanceof BigDecimal || right instanceof BigDecimal) {
                    final BigDecimal l = toBigDecimal(left);
                    final BigDecimal r = toBigDecimal(right);
                    final BigDecimal result = l.add(r, getMathContext());
                    return narrowBigDecimal(left, right, result);
                }
                // if either are floating point (double or float) use double
                if (isFloatingPointNumber(left) || isFloatingPointNumber(right)) {
                    final double l = toDouble(left);
                    final double r = toDouble(right);
                    return l + r;
                }
                // otherwise treat as (big) integers
                final BigInteger l = toBigInteger(left);
                final BigInteger r = toBigInteger(right);
                final BigInteger result = l.add(r);
                return narrowBigInteger(left, right, result);
            } catch (final java.lang.NumberFormatException nfe) {
                if (left == null || right == null) {
                    controlNullOperand();
                }
            }
        }
        return toString(left).concat(toString(right));
    }","  public void test445()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      MapContext mapContext0 = new MapContext((Map<String, Object>) null);
      mapContext0.set(""~IAduhvoX"", (Object) null);
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.options((JexlContext) mapContext0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      hashMap0.put(""]n^GY_8'"", jexlArithmetic0);
      mapContext0.set("")"", "")"");
      Boolean boolean0 = Boolean.FALSE;
      Boolean.logicalXor(true, true);
      jexlArithmetic0.contains(mapContext0, boolean0);
      Long long0 = new Long(324L);
      Long.min((-5172L), 324L);
      Long long1 = new Long((-3061L));
      Long.getLong(""DidAnJXpO{"", long1);
      jexlArithmetic1.add(""~IAduhvoX"", mapContext0);
      jexlArithmetic1.contains(hashMap0, ""]n^GY_8'"");
      Long.toUnsignedString(16380L);
      // Undeclared exception!
      try { 
        jexlArithmetic1.add(long0, mapContext0);
        fail(""Expecting exception: ArithmeticException"");
      } catch(ArithmeticException e) {
         //
         // BigInteger coercion: org.apache.commons.jexl3.MapContext:(org.apache.commons.jexl3.MapContext@2)
         //
         verifyException(""org.apache.commons.jexl3.JexlArithmetic"", e);
      }
  }"
1169,"    public Object multiply(final Object left, final Object right) {
        if (left == null && right == null) {
            return controlNullNullOperands();
        }
        // if both (non null) args fit as int
        final Number ln = asLongNumber(left);
        final Number rn = asLongNumber(right);
        if (ln != null && rn != null) {
            final long x = ln.longValue();
            final long y = rn.longValue();
            final long result = x * y;
            // detect overflow
            if (!isMultiplyExact(x, y, result)) {
                return BigInteger.valueOf(x).multiply(BigInteger.valueOf(y));
            }
            return narrowLong(left, right, result);
        }
        // if either are bigdecimal use that type
        if (left instanceof BigDecimal || right instanceof BigDecimal) {
            final BigDecimal l = toBigDecimal(left);
            final BigDecimal r = toBigDecimal(right);
            final BigDecimal result = l.multiply(r, getMathContext());
            return narrowBigDecimal(left, right, result);
        }
        // if either are floating point (double or float) use double
        if (isFloatingPointNumber(left) || isFloatingPointNumber(right)) {
            final double l = toDouble(left);
            final double r = toDouble(right);
            return l * r;
        }
        // otherwise treat as integers
        final BigInteger l = toBigInteger(left);
        final BigInteger r = toBigInteger(right);
        final BigInteger result = l.multiply(r);
        return narrowBigInteger(left, right, result);
    }","  public void test446()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true);
      String string0 = ""`dU+8(!<CS"";
      Object object0 = jexlArithmetic0.logicalNot(""`dU+8(!<CS"");
      jexlArithmetic0.logicalNot(""`dU+8(!<CS"");
      BigDecimal bigDecimal0 = new BigDecimal(1.7976931348623157E308);
      BigInteger bigInteger0 = JexlArithmetic.BIGI_LONG_MIN_VALUE;
      jexlArithmetic0.narrowBigInteger(""`dU+8(!<CS"", bigDecimal0, bigInteger0);
      // Undeclared exception!
      try { 
        jexlArithmetic0.multiply(""`dU+8(!<CS"", object0);
        fail(""Expecting exception: NumberFormatException"");
      } catch(NumberFormatException e) {
         //
         // Illegal embedded sign character
         //
         verifyException(""java.math.BigInteger"", e);
      }
  }"
1170,"    protected static boolean isMultiplyExact(final long x, final long y, final long r) {
        final long ax = Math.abs(x);
        final long ay = Math.abs(y);
        return !(((ax | ay) >>> (Integer.SIZE - 1) != 0)
                  && (((y != 0) && (r / y != x))
                      || (x == Long.MIN_VALUE && y == -1)));
    }","  public void test447()  throws Throwable  {
      MathContext mathContext0 = MathContext.UNLIMITED;
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false, mathContext0, (-2037));
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      BigInteger bigInteger0 = BigInteger.ONE;
      Class<String> class0 = String.class;
      jexlArithmetic0.narrowNumber(bigInteger0, class0);
      jexlArithmetic0.controlNullOperand();
      Short short0 = new Short((short)1);
      FileSystemHandling.shouldAllThrowIOExceptions();
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      Long long0 = new Long(2170L);
      Number number0 = jexlArithmetic0.narrowLong(bigDecimal0, long0, (-2037));
      jexlArithmetic0.positivize(number0);
      jexlArithmetic0.negate((Object) null);
      AtomicBoolean atomicBoolean0 = new AtomicBoolean(true);
      Integer integer0 = jexlArithmetic0.size((Object) atomicBoolean0);
      Integer integer1 = new Integer((short)1);
      jexlArithmetic0.multiply(integer0, integer1);
      Float float0 = new Float((-0.33264396F));
      jexlArithmetic0.compare(number0, number0, (String) null);
      jexlArithmetic0.toDouble(atomicBoolean0);
      JexlArithmetic.isMultiplyExact((-128L), (short)1, 0L);
  }"
1171,"    protected int compare(final Object left, final Object right, final String operator) {
        if (left != null && right != null) {
            if (left instanceof BigDecimal || right instanceof BigDecimal) {
                final BigDecimal l = toBigDecimal(left);
                final BigDecimal r = toBigDecimal(right);
                return l.compareTo(r);
            }
            if (left instanceof BigInteger || right instanceof BigInteger) {
                final BigInteger l = toBigInteger(left);
                final BigInteger r = toBigInteger(right);
                return l.compareTo(r);
            }
            if (isFloatingPoint(left) || isFloatingPoint(right)) {
                final double lhs = toDouble(left);
                final double rhs = toDouble(right);
                if (Double.isNaN(lhs)) {
                    if (Double.isNaN(rhs)) {
                        return 0;
                    }
                    return -1;
                }
                if (Double.isNaN(rhs)) {
                    // lhs is not NaN
                    return +1;
                }
                if (lhs < rhs) {
                    return -1;
                }
                if (lhs > rhs) {
                    return +1;
                }
                return 0;
            }
            if (isNumberable(left) || isNumberable(right)) {
                final long lhs = toLong(left);
                final long rhs = toLong(right);
                if (lhs < rhs) {
                    return -1;
                }
                if (lhs > rhs) {
                    return +1;
                }
                return 0;
            }
            if (left instanceof String || right instanceof String) {
                return toString(left).compareTo(toString(right));
            }
            if (""=="".equals(operator)) {
                return left.equals(right) ? 0 : -1;
            }
            if (left instanceof Comparable<?>) {
                @SuppressWarnings(""unchecked"") // OK because of instanceof check above
                final Comparable<Object> comparable = (Comparable<Object>) left;
                return comparable.compareTo(right);
            }
            if (right instanceof Comparable<?>) {
                @SuppressWarnings(""unchecked"") // OK because of instanceof check above
                final Comparable<Object> comparable = (Comparable<Object>) right;
                return comparable.compareTo(left);
            }
        }
        throw new ArithmeticException(""Object comparison:("" + left + "" "" + operator + "" "" + right + "")"");
    }","  public void test448()  throws Throwable  {
      MathContext mathContext0 = MathContext.UNLIMITED;
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false, mathContext0, (-2037));
      Object object0 = jexlArithmetic0.not(mathContext0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      BigInteger bigInteger0 = BigInteger.ONE;
      jexlArithmetic0.controlNullOperand();
      Short short0 = new Short((short)1);
      FileSystemHandling.shouldAllThrowIOExceptions();
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      Long long0 = new Long((-2037));
      Number number0 = jexlArithmetic0.narrowLong(bigDecimal0, long0, (-2037));
      jexlArithmetic0.positivize(number0);
      jexlArithmetic0.negate((Object) null);
      AtomicBoolean atomicBoolean0 = new AtomicBoolean(true);
      Integer integer0 = jexlArithmetic0.size((Object) atomicBoolean0);
      Integer integer1 = new Integer((short)1);
      jexlArithmetic0.multiply(integer0, integer1);
      Float float0 = new Float((-0.33264396F));
      Short short1 = new Short((short)1);
      jexlArithmetic0.toDouble(atomicBoolean0);
      JexlArithmetic.isMultiplyExact((-128L), (short)1, 0L);
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.createWithOptions(false, mathContext0, 1011);
      MathContext mathContext1 = MathContext.DECIMAL128;
      // Undeclared exception!
      try { 
        jexlArithmetic1.compare(object0, mathContext1, (String) null);
        fail(""Expecting exception: ClassCastException"");
      } catch(ClassCastException e) {
         //
         // java.math.MathContext cannot be cast to java.lang.Boolean
         //
         verifyException(""java.lang.Boolean"", e);
      }
  }"
1172,"    public Object mod(final Object left, final Object right) {
        if (left == null && right == null) {
            return controlNullNullOperands();
        }
        // if both (non null) args fit as long
        final Number ln = asLongNumber(left);
        final Number rn = asLongNumber(right);
        if (ln != null && rn != null) {
            final long x = ln.longValue();
            final long y = rn.longValue();
            if (y == 0L) {
                throw new ArithmeticException(""%"");
            }
            final long result = x % y;
            return narrowLong(left, right,  result);
        }
        // if either are bigdecimal use that type
        if (left instanceof BigDecimal || right instanceof BigDecimal) {
            final BigDecimal l = toBigDecimal(left);
            final BigDecimal r = toBigDecimal(right);
            if (BigDecimal.ZERO.equals(r)) {
                throw new ArithmeticException(""%"");
            }
            final BigDecimal remainder = l.remainder(r, getMathContext());
            return narrowBigDecimal(left, right, remainder);
        }
        // if either are floating point (double or float) use double
        if (isFloatingPointNumber(left) || isFloatingPointNumber(right)) {
            final double l = toDouble(left);
            final double r = toDouble(right);
            if (r == 0.0) {
                throw new ArithmeticException(""%"");
            }
            return l % r;
        }
        // otherwise treat as integers
        final BigInteger l = toBigInteger(left);
        final BigInteger r = toBigInteger(right);
        if (BigInteger.ZERO.equals(r)) {
            throw new ArithmeticException(""%"");
        }
        final BigInteger result = l.mod(r);
        return narrowBigInteger(left, right, result);
    }","  public void test449()  throws Throwable  {
      MathContext mathContext0 = MathContext.UNLIMITED;
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false, mathContext0, (-2058));
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      jexlArithmetic0.not(mathContext0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      BigInteger bigInteger0 = BigInteger.ONE;
      Class<String> class0 = String.class;
      jexlArithmetic0.narrowNumber(bigInteger0, class0);
      jexlArithmetic0.controlNullOperand();
      Short short0 = new Short((short)1);
      Boolean boolean0 = new Boolean(true);
      BigDecimal bigDecimal0 = new BigDecimal(1.7976931348623157E308);
      Long long0 = new Long(2170L);
      Long long1 = new Long(0L);
      jexlArithmetic0.positivize(long1);
      AtomicBoolean atomicBoolean0 = new AtomicBoolean();
      Integer integer0 = new Integer((short)1);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, (boolean) boolean0, false);
      atomicBoolean0.lazySet(false);
      jexlArithmetic0.compare(long1, long1, (String) null);
      jexlArithmetic0.lessThan(atomicBoolean0, bigDecimal0);
      // Undeclared exception!
      try { 
        jexlArithmetic0.mod(short0, long1);
        fail(""Expecting exception: ArithmeticException"");
      } catch(ArithmeticException e) {
         //
         // %
         //
         verifyException(""org.apache.commons.jexl3.JexlArithmetic"", e);
      }
  }"
1173,"    public Object mod(final Object left, final Object right) {
        if (left == null && right == null) {
            return controlNullNullOperands();
        }
        // if both (non null) args fit as long
        final Number ln = asLongNumber(left);
        final Number rn = asLongNumber(right);
        if (ln != null && rn != null) {
            final long x = ln.longValue();
            final long y = rn.longValue();
            if (y == 0L) {
                throw new ArithmeticException(""%"");
            }
            final long result = x % y;
            return narrowLong(left, right,  result);
        }
        // if either are bigdecimal use that type
        if (left instanceof BigDecimal || right instanceof BigDecimal) {
            final BigDecimal l = toBigDecimal(left);
            final BigDecimal r = toBigDecimal(right);
            if (BigDecimal.ZERO.equals(r)) {
                throw new ArithmeticException(""%"");
            }
            final BigDecimal remainder = l.remainder(r, getMathContext());
            return narrowBigDecimal(left, right, remainder);
        }
        // if either are floating point (double or float) use double
        if (isFloatingPointNumber(left) || isFloatingPointNumber(right)) {
            final double l = toDouble(left);
            final double r = toDouble(right);
            if (r == 0.0) {
                throw new ArithmeticException(""%"");
            }
            return l % r;
        }
        // otherwise treat as integers
        final BigInteger l = toBigInteger(left);
        final BigInteger r = toBigInteger(right);
        if (BigInteger.ZERO.equals(r)) {
            throw new ArithmeticException(""%"");
        }
        final BigInteger result = l.mod(r);
        return narrowBigInteger(left, right, result);
    }","  public void test450()  throws Throwable  {
      MathContext mathContext0 = MathContext.UNLIMITED;
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false, mathContext0, (-2037));
      jexlArithmetic0.not(mathContext0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      BigInteger bigInteger0 = BigInteger.ONE;
      Class<String> class0 = String.class;
      jexlArithmetic0.narrowNumber(bigInteger0, class0);
      jexlArithmetic0.controlNullOperand();
      Short short0 = new Short((short)1);
      FileSystemHandling.shouldAllThrowIOExceptions();
      BigDecimal bigDecimal0 = new BigDecimal(1.7976931348623157E308);
      Long long0 = new Long(2170L);
      Number number0 = jexlArithmetic0.narrowLong(bigDecimal0, long0, (-2037));
      Long.compareUnsigned((-2037), 0L);
      jexlArithmetic0.positivize(number0);
      AtomicBoolean atomicBoolean0 = new AtomicBoolean(true);
      Integer integer0 = new Integer((short)1);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      jexlArithmetic0.compare(number0, number0, (String) null);
      jexlArithmetic0.lessThan(atomicBoolean0, bigDecimal0);
      jexlArithmetic0.mod(short0, number0);
  }"
1174,"    public Object positivize(final Object val) {
        if (val == null) {
            controlNullOperand();
            return null;
        }
        if (val instanceof Short) {
            return ((Short) val).intValue();
        }
        if (val instanceof Byte) {
            return ((Byte) val).intValue();
        }
        if (val instanceof Number) {
            return val;
        }
        if (val instanceof Character) {
            return (int) (Character) val;
        }
        if (val instanceof Boolean) {
            return val;
        }
        if (val instanceof AtomicBoolean) {
            return ((AtomicBoolean) val).get();
        }
        throw new ArithmeticException(""Object positivize:("" + val + "")"");
    }","  public void test451()  throws Throwable  {
      JexlArithmetic.isMultiplyExact((-9223372036854775808L), (-1L), (-9223372036854775808L));
      Class<Long> class0 = Long.TYPE;
      JexlOptions jexlOptions0 = new JexlOptions();
      jexlOptions0.getMathContext();
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      JexlEngine.EmptyContext jexlEngine_EmptyContext0 = (JexlEngine.EmptyContext)JexlEngine.EMPTY_CONTEXT;
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.options((JexlContext) jexlEngine_EmptyContext0);
      // Undeclared exception!
      try { 
        jexlArithmetic1.positivize(jexlArithmetic0);
        fail(""Expecting exception: ArithmeticException"");
      } catch(ArithmeticException e) {
         //
         // Object positivize:(org.apache.commons.jexl3.JexlArithmetic@2)
         //
         verifyException(""org.apache.commons.jexl3.JexlArithmetic"", e);
      }
  }"
1175,"    public Object positivize(final Object val) {
        if (val == null) {
            controlNullOperand();
            return null;
        }
        if (val instanceof Short) {
            return ((Short) val).intValue();
        }
        if (val instanceof Byte) {
            return ((Byte) val).intValue();
        }
        if (val instanceof Number) {
            return val;
        }
        if (val instanceof Character) {
            return (int) (Character) val;
        }
        if (val instanceof Boolean) {
            return val;
        }
        if (val instanceof AtomicBoolean) {
            return ((AtomicBoolean) val).get();
        }
        throw new ArithmeticException(""Object positivize:("" + val + "")"");
    }","  public void test452()  throws Throwable  {
      JexlArithmetic.isMultiplyExact((-9223372036854775808L), (-1L), (-9223372036854775808L));
      Class<Long> class0 = Long.class;
      JexlOptions jexlOptions0 = new JexlOptions();
      jexlOptions0.getMathContext();
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false, (MathContext) null, 2207);
      JexlEngine.EmptyContext jexlEngine_EmptyContext0 = (JexlEngine.EmptyContext)JexlEngine.EMPTY_CONTEXT;
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.options((JexlContext) jexlEngine_EmptyContext0);
      // Undeclared exception!
      try { 
        jexlArithmetic1.positivize(jexlArithmetic0);
        fail(""Expecting exception: ArithmeticException"");
      } catch(ArithmeticException e) {
         //
         // Object positivize:(org.apache.commons.jexl3.JexlArithmetic@2)
         //
         verifyException(""org.apache.commons.jexl3.JexlArithmetic"", e);
      }
  }"
1176,"    public boolean lessThan(final Object left, final Object right) {
        if ((left == right) || (left == null) || (right == null)) {
            return false;
        }
        return compare(left, right, ""<"") < 0;

    }","  public void test453()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      Byte byte0 = new Byte((byte)2);
      BigDecimal bigDecimal0 = new BigDecimal((-4440));
      jexlArithmetic0.narrowBigDecimal(fileSystemHandling0, (Object) null, bigDecimal0);
      jexlArithmetic0.narrow(byte0);
      Character character0 = Character.valueOf('B');
      Class<Short> class0 = Short.class;
      jexlArithmetic0.narrowNumber(byte0, class0);
      Object object0 = jexlArithmetic0.bitwiseAnd(character0, character0);
      Character.isIdeographic((byte)2);
      Short short0 = new Short((byte)2);
      jexlArithmetic0.mod(object0, short0);
      jexlArithmetic0.positivize(short0);
      Object object1 = jexlArithmetic0.controlNullNullOperands();
      jexlArithmetic0.isEmpty(object1);
      Float float0 = new Float(1.0F);
      jexlArithmetic0.lessThanOrEqual(float0, character0);
      BigDecimal bigDecimal1 = BigDecimal.ONE;
      BigDecimal bigDecimal2 = jexlArithmetic0.roundBigDecimal(bigDecimal1);
      Float float1 = new Float((double) (short)1972);
      jexlArithmetic0.negate(float1);
      AtomicBoolean atomicBoolean0 = new AtomicBoolean(true);
      jexlArithmetic0.and(object1, atomicBoolean0);
      JexlArithmetic.MapBuilder jexlArithmetic_MapBuilder0 = jexlArithmetic0.mapBuilder((short)1972);
      jexlArithmetic_MapBuilder0.create();
      jexlArithmetic0.isEmpty((Object) bigDecimal1);
      // Undeclared exception!
      try { 
        jexlArithmetic0.lessThan(bigDecimal2, ""<="");
        fail(""Expecting exception: NumberFormatException"");
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.math.BigDecimal"", e);
      }
  }"
1177,"    public Object mod(final Object left, final Object right) {
        if (left == null && right == null) {
            return controlNullNullOperands();
        }
        // if both (non null) args fit as long
        final Number ln = asLongNumber(left);
        final Number rn = asLongNumber(right);
        if (ln != null && rn != null) {
            final long x = ln.longValue();
            final long y = rn.longValue();
            if (y == 0L) {
                throw new ArithmeticException(""%"");
            }
            final long result = x % y;
            return narrowLong(left, right,  result);
        }
        // if either are bigdecimal use that type
        if (left instanceof BigDecimal || right instanceof BigDecimal) {
            final BigDecimal l = toBigDecimal(left);
            final BigDecimal r = toBigDecimal(right);
            if (BigDecimal.ZERO.equals(r)) {
                throw new ArithmeticException(""%"");
            }
            final BigDecimal remainder = l.remainder(r, getMathContext());
            return narrowBigDecimal(left, right, remainder);
        }
        // if either are floating point (double or float) use double
        if (isFloatingPointNumber(left) || isFloatingPointNumber(right)) {
            final double l = toDouble(left);
            final double r = toDouble(right);
            if (r == 0.0) {
                throw new ArithmeticException(""%"");
            }
            return l % r;
        }
        // otherwise treat as integers
        final BigInteger l = toBigInteger(left);
        final BigInteger r = toBigInteger(right);
        if (BigInteger.ZERO.equals(r)) {
            throw new ArithmeticException(""%"");
        }
        final BigInteger result = l.mod(r);
        return narrowBigInteger(left, right, result);
    }","  public void test454()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      Byte byte0 = new Byte((byte)2);
      jexlArithmetic0.narrow((Number) null);
      Character character0 = Character.valueOf('B');
      Object object0 = jexlArithmetic0.bitwiseAnd(character0, character0);
      Character.isIdeographic((byte)2);
      Short short0 = new Short((short)1972);
      jexlArithmetic0.mod(object0, short0);
      Integer integer0 = new Integer((byte)2);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)2;
      BigInteger bigInteger0 = BigInteger.ONE;
      jexlArithmetic0.lessThanOrEqual(bigInteger0, (Object) null);
      Object object1 = jexlArithmetic0.controlNullNullOperands();
      FileSystemHandling.shouldAllThrowIOExceptions();
      jexlArithmetic0.isEmpty(object1);
      Float float0 = new Float((float) (short)1972);
      jexlArithmetic0.lessThanOrEqual(float0, character0);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      jexlArithmetic0.roundBigDecimal(bigDecimal0);
      Float float1 = new Float((double) (short)1972);
      Float float2 = new Float((float) (-4440));
      AtomicBoolean atomicBoolean0 = new AtomicBoolean(true);
      jexlArithmetic0.and(object1, atomicBoolean0);
      JexlArithmetic.MapBuilder jexlArithmetic_MapBuilder0 = jexlArithmetic0.mapBuilder((short)1972);
      jexlArithmetic_MapBuilder0.create();
      jexlArithmetic0.empty(byte0);
      MathContext mathContext0 = MathContext.DECIMAL128;
      // Undeclared exception!
      try { 
        jexlArithmetic0.mod(atomicBoolean0, mathContext0);
        fail(""Expecting exception: ArithmeticException"");
      } catch(ArithmeticException e) {
         //
         // BigInteger coercion: java.math.MathContext:(precision=34 roundingMode=HALF_EVEN)
         //
         verifyException(""org.apache.commons.jexl3.JexlArithmetic"", e);
      }
  }"
1178,"    public Object or(final Object left, final Object right) {
        final long l = toLong(left);
        final long r = toLong(right);
        return l | r;
    }","  public void test455()  throws Throwable  {
      MathContext mathContext0 = new MathContext(23);
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false, mathContext0, 23);
      jexlArithmetic0.greaterThan(mathContext0, ""Iyyw!VUTf`4)!P6Ts<"");
      MathContext mathContext1 = MathContext.DECIMAL64;
      jexlArithmetic0.size((Object) mathContext0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) mathContext1;
      objectArray0[1] = (Object) mathContext0;
      objectArray0[2] = (Object) jexlArithmetic0;
      objectArray0[3] = (Object) mathContext0;
      Boolean.valueOf(false);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Boolean boolean0 = jexlArithmetic0.endsWith(objectArray0[2], (Object) null);
      Pattern pattern0 = JexlArithmetic.FLOAT_PATTERN;
      jexlArithmetic0.equals((Object) pattern0, (Object) boolean0);
      Boolean boolean1 = Boolean.TRUE;
      jexlArithmetic0.asLongNumber(boolean1);
      BigDecimal bigDecimal0 = JexlArithmetic.BIGD_DOUBLE_MIN_VALUE;
      // Undeclared exception!
      try { 
        jexlArithmetic0.or(""<="", bigDecimal0);
        fail(""Expecting exception: NumberFormatException"");
      } catch(NumberFormatException e) {
         //
         // For input string: \""<=\""
         //
         verifyException(""java.lang.NumberFormatException"", e);
      }
  }"
1179,"    public MathContext getMathContext() {
        return mathContext;
    }","  public void test456()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      BigInteger bigInteger0 = BigInteger.ZERO;
      Number number0 = jexlArithmetic0.narrow(bigInteger0);
      jexlArithmetic0.subtract(number0, number0);
      Float float0 = new Float((-2368.8948));
      jexlArithmetic0.subtract(float0, number0);
      AtomicBoolean atomicBoolean0 = new AtomicBoolean();
      Object object0 = jexlArithmetic0.not(atomicBoolean0);
      Integer integer0 = new Integer((-45));
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Integer.compareUnsigned((-45), (-45));
      Object object1 = jexlArithmetic0.logicalNot(float0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Short short0 = new Short((short)31);
      jexlArithmetic0.lessThan(atomicBoolean0, short0);
      JexlArithmetic.isMultiplyExact((-32768L), (-1677L), (-1677L));
      BigInteger bigInteger1 = jexlArithmetic0.toBigInteger(object0);
      jexlArithmetic0.isPositivizeStable();
      jexlArithmetic0.isNegateStable();
      jexlArithmetic0.divide(object1, bigInteger1);
      jexlArithmetic0.getMathContext();
  }"
1180,"    public Object and(final Object left, final Object right) {
        final long l = toLong(left);
        final long r = toLong(right);
        return l & r;
    }","  public void test457()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true);
      MathContext mathContext0 = MathContext.DECIMAL64;
      RoundingMode roundingMode0 = RoundingMode.HALF_DOWN;
      mathContext0.toString();
      mathContext0.equals(jexlArithmetic0);
      jexlArithmetic0.size((Object) mathContext0);
      mathContext0.getPrecision();
      Boolean boolean0 = Boolean.FALSE;
      int int0 = JexlArithmetic.BIGD_SCALE;
      jexlArithmetic0.endsWith(boolean0, boolean0);
      jexlArithmetic0.endsWith(mathContext0, (Object) null);
      Integer integer0 = Integer.getInteger(""precision=16 roundingMode=HALF_EVEN"", 16);
      Object object0 = new Object();
      Long long0 = new Long((-59L));
      jexlArithmetic0.add(long0, integer0);
      Pattern pattern0 = Pattern.compile(""false"");
      // Undeclared exception!
      try { 
        jexlArithmetic0.and(""false"", pattern0);
        fail(""Expecting exception: NumberFormatException"");
      } catch(NumberFormatException e) {
         //
         // For input string: \""false\""
         //
         verifyException(""java.lang.NumberFormatException"", e);
      }
  }"
1181,"    public Object and(final Object left, final Object right) {
        final long l = toLong(left);
        final long r = toLong(right);
        return l & r;
    }","  public void test458()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true);
      RoundingMode roundingMode0 = RoundingMode.HALF_DOWN;
      Boolean boolean0 = Boolean.FALSE;
      int int0 = JexlArithmetic.BIGD_SCALE;
      jexlArithmetic0.endsWith(boolean0, boolean0);
      Integer integer0 = Integer.valueOf((-1578));
      Object object0 = new Object();
      Long long0 = new Long((-1578));
      jexlArithmetic0.add(long0, integer0);
      Pattern pattern0 = Pattern.compile(""false"");
      // Undeclared exception!
      try { 
        jexlArithmetic0.and(""false"", pattern0);
        fail(""Expecting exception: NumberFormatException"");
      } catch(NumberFormatException e) {
         //
         // For input string: \""false\""
         //
         verifyException(""java.lang.NumberFormatException"", e);
      }
  }"
1182,"    public BigDecimal toBigDecimal(final Object val) {
        if (val instanceof BigDecimal) {
            return roundBigDecimal((BigDecimal) val);
        }
        if (val == null) {
            controlNullOperand();
            return BigDecimal.ZERO;
        }
        if (val instanceof Double) {
            if (Double.isNaN(((Double) val))) {
                return BigDecimal.ZERO;
            }
            return roundBigDecimal(new BigDecimal(val.toString(), getMathContext()));
        }
        if (val instanceof Number) {
            return roundBigDecimal(new BigDecimal(val.toString(), getMathContext()));
        }
        if (val instanceof Boolean) {
            return BigDecimal.valueOf(((Boolean) val) ? 1. : 0.);
        }
        if (val instanceof AtomicBoolean) {
            return BigDecimal.valueOf(((AtomicBoolean) val).get() ? 1L : 0L);
        }
        if (val instanceof String) {
            final String string = (String) val;
            if ("""".equals(string)) {
                return BigDecimal.ZERO;
            }
            return roundBigDecimal(new BigDecimal(string, getMathContext()));
        }
        if (val instanceof Character) {
            final int i = ((Character) val);
            return new BigDecimal(i);
        }
        throw new ArithmeticException(""BigDecimal coercion: ""
                + val.getClass().getName() + "":("" + val + "")"");
    }","  public void test459()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ""C"");
      MathContext mathContext0 = MathContext.DECIMAL64;
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      Boolean boolean0 = new Boolean(""C"");
      Boolean boolean1 = new Boolean(""C"");
      jexlArithmetic0.toInteger(boolean0);
      Character character0 = new Character('s');
      jexlArithmetic0.add(""C"", character0);
      mathContext0.getRoundingMode();
      // Undeclared exception!
      try { 
        jexlArithmetic0.toBigDecimal(mathContext0);
        fail(""Expecting exception: ArithmeticException"");
      } catch(ArithmeticException e) {
         //
         // BigDecimal coercion: java.math.MathContext:(precision=16 roundingMode=HALF_EVEN)
         //
         verifyException(""org.apache.commons.jexl3.JexlArithmetic"", e);
      }
  }"
1183,"    public BigDecimal toBigDecimal(final Object val) {
        if (val instanceof BigDecimal) {
            return roundBigDecimal((BigDecimal) val);
        }
        if (val == null) {
            controlNullOperand();
            return BigDecimal.ZERO;
        }
        if (val instanceof Double) {
            if (Double.isNaN(((Double) val))) {
                return BigDecimal.ZERO;
            }
            return roundBigDecimal(new BigDecimal(val.toString(), getMathContext()));
        }
        if (val instanceof Number) {
            return roundBigDecimal(new BigDecimal(val.toString(), getMathContext()));
        }
        if (val instanceof Boolean) {
            return BigDecimal.valueOf(((Boolean) val) ? 1. : 0.);
        }
        if (val instanceof AtomicBoolean) {
            return BigDecimal.valueOf(((AtomicBoolean) val).get() ? 1L : 0L);
        }
        if (val instanceof String) {
            final String string = (String) val;
            if ("""".equals(string)) {
                return BigDecimal.ZERO;
            }
            return roundBigDecimal(new BigDecimal(string, getMathContext()));
        }
        if (val instanceof Character) {
            final int i = ((Character) val);
            return new BigDecimal(i);
        }
        throw new ArithmeticException(""BigDecimal coercion: ""
                + val.getClass().getName() + "":("" + val + "")"");
    }","  public void test460()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ""C"");
      MathContext mathContext0 = MathContext.DECIMAL64;
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      Boolean boolean0 = new Boolean(""C"");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)5;
      byteArray0[2] = (byte)10;
      byteArray0[3] = (byte)3;
      byteArray0[4] = (byte) (-123);
      byteArray0[5] = (byte)93;
      byteArray0[6] = (byte)14;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Boolean boolean1 = new Boolean(""C"");
      jexlArithmetic0.toInteger((Object) null);
      Character character0 = Character.valueOf('s');
      jexlArithmetic0.add(""C"", character0);
      JexlArithmetic.SetBuilder jexlArithmetic_SetBuilder0 = jexlArithmetic0.setBuilder(42);
      jexlArithmetic_SetBuilder0.add(fileSystemHandling0);
      Boolean.getBoolean(""ing@0000000003"");
      mathContext0.getRoundingMode();
      // Undeclared exception!
      try { 
        jexlArithmetic0.toBigDecimal(mathContext0);
        fail(""Expecting exception: ArithmeticException"");
      } catch(ArithmeticException e) {
         //
         // BigDecimal coercion: java.math.MathContext:(precision=16 roundingMode=HALF_EVEN)
         //
         verifyException(""org.apache.commons.jexl3.JexlArithmetic"", e);
      }
  }"
1184,"    public Integer size(final Object object) {
        return size(object, object == null? 0 : 1);
    }","  public void test461()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true);
      Integer integer0 = new Integer(2098);
      Character character0 = Character.valueOf('g');
      jexlArithmetic0.subtract(integer0, character0);
      jexlArithmetic0.logicalNot(character0);
      Integer integer1 = new Integer('g');
      JexlArithmetic jexlArithmetic1 = new JexlArithmetic(true, (MathContext) null, (-2786));
      JexlEngine.getThreadContext();
      JexlArithmetic jexlArithmetic2 = jexlArithmetic1.createWithOptions(true, (MathContext) null, (-2786));
      Integer integer2 = new Integer(7);
      Pattern pattern0 = JexlArithmetic.FLOAT_PATTERN;
      jexlArithmetic1.equals((Object) null, (Object) pattern0);
      Integer integer3 = new Integer(7);
      AtomicBoolean atomicBoolean0 = new AtomicBoolean(true);
      jexlArithmetic1.compare(atomicBoolean0, ""//_'0u#~"", ""java\u0000lang\u0000String@0000000007"");
      jexlArithmetic2.getMathContext();
      jexlArithmetic0.size((Object) ""java\u0000lang\u0000String@0000000007"");
  }"
1185,"    public Boolean isEmpty(final Object object) {
        return isEmpty(object, object == null);
    }","  public void test462()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      JexlEngine.getThreadContext();
      Integer integer0 = new Integer(7);
      BigInteger bigInteger0 = JexlArithmetic.BIGI_LONG_MIN_VALUE;
      Boolean boolean0 = jexlArithmetic0.empty(bigInteger0);
      BigDecimal bigDecimal0 = new BigDecimal((-2786));
      jexlArithmetic0.isEmpty((Object) bigDecimal0, boolean0);
      Object[] objectArray0 = new Object[7];
      objectArray0[1] = (Object) bigInteger0;
      JexlOptions jexlOptions0 = new JexlOptions();
      int int0 = 31;
      Boolean.logicalXor(false, false);
      Integer integer1 = new Integer(31);
      Object object0 = jexlArithmetic0.subtract(bigInteger0, integer1);
      objectArray0[1] = object0;
      objectArray0[2] = (Object) boolean0;
      objectArray0[3] = (Object) bigDecimal0;
      objectArray0[5] = (Object) bigInteger0;
      jexlArithmetic0.narrowArguments(objectArray0);
      // Undeclared exception!
      try { 
        jexlArithmetic0.isEmpty((Object) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.JexlArithmetic"", e);
      }
  }"
1186,"    public Boolean isEmpty(final Object object) {
        return isEmpty(object, object == null);
    }","  public void test463()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      JexlEngine.getThreadContext();
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.options((JexlContext) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Long long0 = Long.getLong("">="", 2245L);
      jexlArithmetic0.matches(jexlArithmetic1, long0);
      jexlArithmetic0.toDouble((Object) null);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = JexlArithmetic.BIGI_LONG_MAX_VALUE;
      jexlArithmetic1.createRange(bigInteger0, bigInteger0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      bigInteger0.intValue();
      bigDecimal0.doubleValue();
      jexlArithmetic0.toLong(bigDecimal0);
      jexlArithmetic1.mapBuilder((byte)106);
      Double double0 = new Double((byte)41);
      jexlArithmetic1.bitwiseXor((Object) null, double0);
      Class<MathContext> class0 = MathContext.class;
      jexlArithmetic0.narrowNumber(double0, class0);
      JexlArithmetic.SetBuilder jexlArithmetic_SetBuilder0 = jexlArithmetic1.setBuilder(182);
      BigDecimal bigDecimal1 = BigDecimal.TEN;
      jexlArithmetic_SetBuilder0.add(bigDecimal1);
      jexlArithmetic0.narrowNumber(bigInteger1, class0);
      JexlArithmetic jexlArithmetic2 = jexlArithmetic1.options((JexlContext) null);
      Float float0 = new Float((double) (byte)13);
      Boolean boolean0 = jexlArithmetic2.endsWith((Object) null, float0);
      jexlArithmetic0.isEmpty((Object) jexlArithmetic2, boolean0);
  }"
1187,"    public Object subtract(final Object left, final Object right) {
        if (left == null && right == null) {
            return controlNullNullOperands();
        }
        // if both (non null) args fit as long
        final Number ln = asLongNumber(left);
        final Number rn = asLongNumber(right);
        if (ln != null && rn != null) {
            final long x = ln.longValue();
            final long y = rn.longValue();
            final long result = x - y;
            // detect overflow, see java8 Math.subtractExact
            if (((x ^ y) & (x ^ result)) < 0) {
                return BigInteger.valueOf(x).subtract(BigInteger.valueOf(y));
            }
            return narrowLong(left, right, result);
        }
        // if either are bigdecimal use that type
        if (left instanceof BigDecimal || right instanceof BigDecimal) {
            final BigDecimal l = toBigDecimal(left);
            final BigDecimal r = toBigDecimal(right);
            final BigDecimal result = l.subtract(r, getMathContext());
            return narrowBigDecimal(left, right, result);
        }
        // if either are floating point (double or float) use double
        if (isFloatingPointNumber(left) || isFloatingPointNumber(right)) {
            final double l = toDouble(left);
            final double r = toDouble(right);
            return l - r;
        }
        // otherwise treat as integers
        final BigInteger l = toBigInteger(left);
        final BigInteger r = toBigInteger(right);
        final BigInteger result = l.subtract(r);
        return narrowBigInteger(left, right, result);
    }","  public void test464()  throws Throwable  {
      MathContext mathContext0 = MathContext.DECIMAL64;
      Boolean boolean0 = Boolean.FALSE;
      mathContext0.equals(boolean0);
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false, mathContext0, Integer.MIN_VALUE);
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.createWithOptions(false, mathContext0, Integer.MIN_VALUE);
      BigDecimal bigDecimal0 = new BigDecimal((long) Integer.MIN_VALUE);
      bigDecimal0.toPlainString();
      Number number0 = jexlArithmetic1.narrowBigDecimal((Object) null, mathContext0, bigDecimal0);
      Pattern pattern0 = JexlArithmetic.FLOAT_PATTERN;
      pattern0.split((CharSequence) ""-2147483648"");
      Double double0 = new Double(1.0);
      Double double1 = new Double(1.0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ""-2147483648"");
      jexlArithmetic1.narrowLong(pattern0, double0, 16380L);
      jexlArithmetic1.toString((Object) pattern0);
      Double double2 = new Double(1038.679142239);
      Object object0 = jexlArithmetic0.subtract((Object) null, double2);
      Object object1 = jexlArithmetic0.logicalNot((Object) null);
      Double double3 = new Double(0.0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      jexlArithmetic0.empty(double3);
      Object object2 = jexlArithmetic0.subtract(object1, object0);
      jexlArithmetic1.add(object2, boolean0);
      Long long0 = new Long((-3087L));
      jexlArithmetic1.contains(object1, double0);
      jexlArithmetic0.isEmpty((Object) pattern0, (Boolean) null);
      BigInteger bigInteger0 = BigInteger.ZERO;
      jexlArithmetic0.narrowBigInteger((Object) null, (Object) null, bigInteger0);
      jexlArithmetic1.subtract(number0, (Object) null);
  }"
1188,"    public boolean narrowArguments(final Object[] args) {
        boolean narrowed = false;
        if (args != null) {
            for (int a = 0; a < args.length; ++a) {
                final Object arg = args[a];
                if (arg instanceof Number) {
                    final Number narg = (Number) arg;
                    final Number narrow = narrow(narg);
                    if (!narg.equals(narrow)) {
                        args[a] = narrow;
                        narrowed = true;
                    }
                }
            }
        }
        return narrowed;
    }","  public void test465()  throws Throwable  {
      MathContext mathContext0 = MathContext.DECIMAL64;
      Boolean boolean0 = Boolean.FALSE;
      mathContext0.equals(boolean0);
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false, (MathContext) null, Integer.MIN_VALUE);
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.createWithOptions(false, mathContext0, Integer.MIN_VALUE);
      Pattern pattern0 = JexlArithmetic.FLOAT_PATTERN;
      Double double0 = new Double(1.0);
      Double double1 = new Double(1.0);
      Short short0 = new Short((short)2);
      jexlArithmetic0.toBigDecimal(boolean0);
      jexlArithmetic1.narrowLong(pattern0, double0, 16380L);
      Double double2 = new Double(1038.679142239);
      Object object0 = jexlArithmetic0.subtract((Object) null, double2);
      Object object1 = jexlArithmetic0.logicalNot((Object) null);
      Double double3 = new Double(0.0);
      Boolean boolean1 = jexlArithmetic0.empty(double3);
      jexlArithmetic0.subtract(object1, object0);
      Long long0 = new Long((-3087L));
      jexlArithmetic1.logicalNot(mathContext0);
      jexlArithmetic0.toDouble((Object) null);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) double1;
      Object object2 = jexlArithmetic0.not(objectArray0[0]);
      jexlArithmetic1.matches(boolean1, object2);
      objectArray0[1] = null;
      objectArray0[2] = (Object) jexlArithmetic0;
      objectArray0[3] = (Object) pattern0;
      objectArray0[4] = (Object) double3;
      jexlArithmetic0.narrowArguments(objectArray0);
  }"
1189,"    public final Object bitwiseAnd(final Object lhs, final Object rhs) {
        return and(lhs, rhs);
    }","  public void test466()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      Float float0 = new Float((-3767.0593F));
      Long long0 = new Long((-2172L));
      Long.remainderUnsigned((-2172L), (-2172L));
      jexlArithmetic0.lessThan(float0, long0);
      MathContext mathContext0 = MathContext.DECIMAL32;
      mathContext0.toString();
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.createWithOptions(false, mathContext0, 16);
      Float.min(1.0F, 0.0F);
      jexlArithmetic0.toInteger(float0);
      jexlArithmetic0.toString((Object) null);
      JexlArithmetic.MapBuilder jexlArithmetic_MapBuilder0 = jexlArithmetic0.mapBuilder(0);
      jexlArithmetic0.logicalNot((Object) null);
      String string0 = ""selfXor"";
      mathContext0.toString();
      Pattern pattern0 = Pattern.compile(""selfXor"", (-1078));
      jexlArithmetic0.greaterThanOrEqual(""precision=7 roundingMode=HALF_EVEN"", ""selfXor"");
      Integer integer0 = Integer.getInteger(""precision=7 roundingMode=HALF_EVEN"", 16);
      jexlArithmetic1.size((Object) jexlArithmetic_MapBuilder0, integer0);
      jexlArithmetic0.toBoolean(""precision=7 roundingMode=HALF_EVEN"");
      // Undeclared exception!
      try { 
        jexlArithmetic0.bitwiseAnd(pattern0, ""selfXor"");
        fail(""Expecting exception: ArithmeticException"");
      } catch(ArithmeticException e) {
         //
         // Long coercion: java.util.regex.Pattern:(selfXor)
         //
         verifyException(""org.apache.commons.jexl3.JexlArithmetic"", e);
      }
  }"
1190,"    public final Object bitwiseOr(final Object lhs, final Object rhs) {
        return or(lhs, rhs);
    }","  public void test467()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      Float float0 = new Float((-3767.0593F));
      Long long0 = new Long((-2172L));
      Long.compareUnsigned((-2172L), 0L);
      Long.remainderUnsigned((-2172L), (-2172L));
      jexlArithmetic0.lessThan(float0, long0);
      MathContext mathContext0 = MathContext.DECIMAL32;
      MapContext mapContext0 = new MapContext();
      jexlArithmetic0.options((JexlContext) mapContext0);
      mathContext0.toString();
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.createWithOptions(false, mathContext0, 16);
      Float.min(1.0F, 0.0F);
      jexlArithmetic0.toInteger(float0);
      jexlArithmetic0.toString((Object) null);
      jexlArithmetic0.mapBuilder(0);
      BigInteger bigInteger0 = BigInteger.valueOf((-2172L));
      jexlArithmetic1.complement(bigInteger0);
      Object object0 = jexlArithmetic0.logicalNot((Object) null);
      jexlArithmetic0.matches(bigInteger0, ""precision=7 roundingMode=HALF_EVEN"");
      Float float1 = new Float((double) (-1078));
      Character character0 = Character.valueOf('6');
      jexlArithmetic0.multiply(float1, character0);
      jexlArithmetic0.complement(object0);
      Pattern pattern0 = Pattern.compile(""selfXodr"", (-1078));
      // Undeclared exception!
      try { 
        jexlArithmetic1.bitwiseOr(pattern0, (Object) null);
        fail(""Expecting exception: ArithmeticException"");
      } catch(ArithmeticException e) {
         //
         // Long coercion: java.util.regex.Pattern:(selfXodr)
         //
         verifyException(""org.apache.commons.jexl3.JexlArithmetic"", e);
      }
  }"
1191,"    public Integer size(final Object object) {
        return size(object, object == null? 0 : 1);
    }","  public void test468()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      Float.min(1.4114723F, 0.0F);
      jexlArithmetic0.toString((Object) jexlArithmetic0);
      jexlArithmetic0.mapBuilder(27);
      jexlArithmetic0.logicalNot((Object) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String string0 = ""selfXor"";
      JexlOptions jexlOptions0 = new JexlOptions();
      jexlOptions0.getMathContext();
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.createWithOptions(false, (MathContext) null, (-1078));
      jexlArithmetic0.lessThanOrEqual((Object) null, jexlArithmetic1);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      Pattern.compile(""org.apache.commons.jexl3.JexlArithmetic@0000000001"", 27);
      // Undeclared exception!
      try { 
        jexlArithmetic0.size((Object) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.JexlArithmetic"", e);
      }
  }"
1192,"    public Object negate(final Object val) {
        if (val == null) {
            controlNullOperand();
            return null;
        }
        if (val instanceof Integer) {
            return -((Integer) val);
        }
        if (val instanceof Double) {
            return - ((Double) val);
        }
        if (val instanceof Long) {
            return -((Long) val);
        }
        if (val instanceof BigDecimal) {
            return ((BigDecimal) val).negate();
        }
        if (val instanceof BigInteger) {
            return ((BigInteger) val).negate();
        }
        if (val instanceof Float) {
            return -((Float) val);
        }
        if (val instanceof Short) {
            return (short) -((Short) val);
        }
        if (val instanceof Byte) {
            return (byte) -((Byte) val);
        }
        if (val instanceof Boolean) {
            return !(Boolean) val;
        }
        if (val instanceof AtomicBoolean) {
            return !((AtomicBoolean) val).get();
        }
        throw new ArithmeticException(""Object negate:("" + val + "")"");
    }","  public void test469()  throws Throwable  {
      MathContext mathContext0 = MathContext.DECIMAL32;
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false, mathContext0, (-2037));
      Object object0 = jexlArithmetic0.not(mathContext0);
      jexlArithmetic0.greaterThan((Object) null, object0);
      Long long0 = new Long(0L);
      jexlArithmetic0.bitwiseXor(long0, long0);
      BigInteger bigInteger0 = BigInteger.ONE;
      Class<String> class0 = String.class;
      Number number0 = jexlArithmetic0.narrowNumber(bigInteger0, class0);
      Long long1 = (Long)jexlArithmetic0.bitwiseXor(number0, bigInteger0);
      Short short0 = new Short((short)1);
      Short.compare((short)1, (short)1630);
      Short.compare((short)1, (short)2175);
      Character character0 = new Character('Y');
      Boolean boolean0 = new Boolean(false);
      BigDecimal bigDecimal0 = new BigDecimal(1.7976931348623157E308);
      AtomicBoolean atomicBoolean0 = new AtomicBoolean(false);
      bigDecimal0.toString();
      Long long2 = new Long(2170L);
      Long.getLong((String) null, long1);
      Long long3 = (Long)jexlArithmetic0.narrowLong(bigDecimal0, long2, (-2037));
      jexlArithmetic0.greaterThan(character0, long2);
      jexlArithmetic0.positivize(long3);
      Byte byte0 = new Byte((byte)30);
      Boolean boolean1 = Boolean.TRUE;
      // Undeclared exception!
      try { 
        jexlArithmetic0.negate(""'IDU"");
        fail(""Expecting exception: ArithmeticException"");
      } catch(ArithmeticException e) {
         //
         // Object negate:('IDU)
         //
         verifyException(""org.apache.commons.jexl3.JexlArithmetic"", e);
      }
  }"
1193,"    public boolean lessThanOrEqual(final Object left, final Object right) {
        if (left == right) {
            return true;
        }
        if (left == null || right == null) {
            return false;
        }
        return compare(left, right, ""<="") <= 0;
    }","  public void test470()  throws Throwable  {
      MathContext mathContext0 = MathContext.DECIMAL32;
      int int0 = (-2037);
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false, mathContext0, (-2037));
      Boolean boolean0 = (Boolean)jexlArithmetic0.not(mathContext0);
      mathContext0.toString();
      Class<String> class0 = String.class;
      short short0 = (short)1;
      Character character0 = new Character('Y');
      jexlArithmetic0.isEmpty((Object) ""precision=7 roundingMode=HALF_EVEN"", boolean0);
      // Undeclared exception!
      try { 
        jexlArithmetic0.lessThanOrEqual(mathContext0, class0);
        fail(""Expecting exception: ArithmeticException"");
      } catch(ArithmeticException e) {
         //
         // Object comparison:(precision=7 roundingMode=HALF_EVEN <= class java.lang.String)
         //
         verifyException(""org.apache.commons.jexl3.JexlArithmetic"", e);
      }
  }"
1194,"    public boolean toBoolean(final Object val) {
        if (val == null) {
            controlNullOperand();
            return false;
        }
        if (val instanceof Boolean) {
            return ((Boolean) val);
        }
        if (val instanceof Number) {
            final double number = toDouble(val);
            return !Double.isNaN(number) && number != 0.d;
        }
        if (val instanceof AtomicBoolean) {
            return ((AtomicBoolean) val).get();
        }
        if (val instanceof String) {
            final String strval = val.toString();
            return !strval.isEmpty() && !""false"".equals(strval);
        }
        // non null value is true
        return true;
    }","  public void test471()  throws Throwable  {
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true);
      Pattern pattern0 = JexlArithmetic.FLOAT_PATTERN;
      JexlArithmetic.SetBuilder jexlArithmetic_SetBuilder0 = jexlArithmetic0.setBuilder(46);
      Object object0 = jexlArithmetic_SetBuilder0.create();
      jexlArithmetic0.equals((Object) pattern0, object0);
      MathContext mathContext0 = new MathContext(13);
      jexlArithmetic0.add(object0, ""?b7A"");
      jexlArithmetic0.createWithOptions(true, mathContext0, 1602);
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.createWithOptions(true, mathContext0, 13);
      jexlArithmetic1.toBoolean(mathContext0);
      JexlOptions jexlOptions0 = new JexlOptions();
      String[] stringArray0 = new String[5];
      String string0 = ""_O6w2p"";
      stringArray0[1] = ""-Q<S(c0j.&U,m}A"";
      stringArray0[2] = ""-Q<S(c0j.&U,m}A"";
      stringArray0[3] = ""]: '"";
      stringArray0[4] = ""annotation"";
      // Undeclared exception!
      try { 
        jexlOptions0.setFlags(stringArray0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.JexlOptions"", e);
      }
  }"
1195,"    public Object mod(final Object left, final Object right) {
        if (left == null && right == null) {
            return controlNullNullOperands();
        }
        // if both (non null) args fit as long
        final Number ln = asLongNumber(left);
        final Number rn = asLongNumber(right);
        if (ln != null && rn != null) {
            final long x = ln.longValue();
            final long y = rn.longValue();
            if (y == 0L) {
                throw new ArithmeticException(""%"");
            }
            final long result = x % y;
            return narrowLong(left, right,  result);
        }
        // if either are bigdecimal use that type
        if (left instanceof BigDecimal || right instanceof BigDecimal) {
            final BigDecimal l = toBigDecimal(left);
            final BigDecimal r = toBigDecimal(right);
            if (BigDecimal.ZERO.equals(r)) {
                throw new ArithmeticException(""%"");
            }
            final BigDecimal remainder = l.remainder(r, getMathContext());
            return narrowBigDecimal(left, right, remainder);
        }
        // if either are floating point (double or float) use double
        if (isFloatingPointNumber(left) || isFloatingPointNumber(right)) {
            final double l = toDouble(left);
            final double r = toDouble(right);
            if (r == 0.0) {
                throw new ArithmeticException(""%"");
            }
            return l % r;
        }
        // otherwise treat as integers
        final BigInteger l = toBigInteger(left);
        final BigInteger r = toBigInteger(right);
        if (BigInteger.ZERO.equals(r)) {
            throw new ArithmeticException(""%"");
        }
        final BigInteger result = l.mod(r);
        return narrowBigInteger(left, right, result);
    }","  public void test472()  throws Throwable  {
      RoundingMode roundingMode0 = RoundingMode.DOWN;
      MathContext mathContext0 = new MathContext(0, roundingMode0);
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false, mathContext0, (-1943));
      JexlOptions jexlOptions0 = new JexlOptions();
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.options(jexlOptions0);
      MathContext mathContext1 = new MathContext(0);
      jexlOptions0.copy();
      MathContext mathContext2 = MathContext.DECIMAL128;
      Long long0 = new Long(314L);
      jexlArithmetic0.mod((Object) null, long0);
      JexlArithmetic jexlArithmetic2 = new JexlArithmetic(true, mathContext2, 0);
      Boolean boolean0 = Boolean.FALSE;
      jexlArithmetic2.contains(boolean0, jexlArithmetic1);
      jexlOptions0.getMathContext();
      Object object0 = jexlArithmetic0.multiply((Object) null, (Object) null);
      jexlArithmetic1.toLong(object0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      jexlArithmetic1.empty(bigInteger0);
      Boolean boolean1 = jexlArithmetic2.contains(jexlArithmetic1, (Object) null);
      jexlArithmetic1.positivize(boolean1);
      JexlArithmetic.SetBuilder jexlArithmetic_SetBuilder0 = jexlArithmetic0.setBuilder(0);
      jexlArithmetic_SetBuilder0.create();
      Float float0 = new Float((float) 0);
      // Undeclared exception!
      try { 
        jexlArithmetic0.mod(long0, float0);
        fail(""Expecting exception: ArithmeticException"");
      } catch(ArithmeticException e) {
         //
         // %
         //
         verifyException(""org.apache.commons.jexl3.JexlArithmetic"", e);
      }
  }"
1196,"    public Number narrow(final Number original) {
        return narrowNumber(original, null);
    }","  public void test473()  throws Throwable  {
      MathContext mathContext0 = MathContext.DECIMAL32;
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true, mathContext0, (-2776));
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.createWithOptions(true, mathContext0, (-563));
      BigInteger bigInteger0 = JexlArithmetic.BIGI_LONG_MAX_VALUE;
      Integer integer0 = new Integer((-563));
      Integer integer1 = new Integer((-563));
      mathContext0.equals(jexlArithmetic0);
      Float float0 = new Float((-5.880041098828796));
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      jexlArithmetic1.narrowBigDecimal(float0, integer0, bigDecimal0);
      mathContext0.equals(bigInteger0);
      Float.max((-12.477289F), (-12.477289F));
      Number number0 = jexlArithmetic0.narrow(float0);
}"
1197,"    public Boolean endsWith(final Object left, final Object right) {
        if (left == null && right == null) {
            //if both are null L == R
            return true;
        }
        if (left == null || right == null) {
            // we know both aren't null, therefore L != R
            return false;
        }
        if (left instanceof CharSequence) {
            return (toString(left)).endsWith(toString(right));
        }
        return null;
    }","  public void test474()  throws Throwable  {
      MathContext mathContext0 = MathContext.DECIMAL32;
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true, mathContext0, (-2776));
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.createWithOptions(true, mathContext0, (-563));
      BigInteger bigInteger0 = JexlArithmetic.BIGI_LONG_MAX_VALUE;
      Integer integer0 = new Integer((-563));
      Integer integer1 = new Integer((-563));
      mathContext0.equals(jexlArithmetic0);
      Float float0 = new Float((-5.880041098828796));
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      jexlArithmetic1.narrowBigDecimal(float0, integer0, bigDecimal0);
      mathContext0.equals(bigInteger0);
      Float.max((-12.477289F), (-12.477289F));
      Number number0 = jexlArithmetic0.narrow(float0);
      Short short0 = new Short((short)0);
      Integer integer2 = new Integer((-2776));
      jexlArithmetic0.size((Object) bigInteger0, integer2);
      Class<Boolean> class0 = Boolean.class;
      boolean boolean0 = jexlArithmetic0.narrowAccept(class0, class0);
      Boolean boolean1 = jexlArithmetic0.endsWith((Object) null, (Object) null);
}"
1198,"    public int getMathScale() {
        return mathScale;
    }","  public void test475()  throws Throwable  {
      MathContext mathContext0 = MathContext.DECIMAL32;
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true, mathContext0, (-2776));
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.createWithOptions(true, mathContext0, (-563));
      BigInteger bigInteger0 = JexlArithmetic.BIGI_LONG_MAX_VALUE;
      Integer integer0 = new Integer((-563));
      Integer integer1 = new Integer((-563));
      mathContext0.equals(jexlArithmetic0);
      Float float0 = new Float((-5.880041098828796));
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      jexlArithmetic1.narrowBigDecimal(float0, integer0, bigDecimal0);
      mathContext0.equals(bigInteger0);
      Float.max((-12.477289F), (-12.477289F));
      Number number0 = jexlArithmetic0.narrow(float0);
      Short short0 = new Short((short)0);
      Integer integer2 = new Integer((-2776));
      jexlArithmetic0.size((Object) bigInteger0, integer2);
      Class<Boolean> class0 = Boolean.class;
      boolean boolean0 = jexlArithmetic0.narrowAccept(class0, class0);
      Boolean boolean1 = jexlArithmetic0.endsWith((Object) null, (Object) null);
      JexlArithmetic.isMultiplyExact((short)0, (-2776), 0L);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) integer1;
      objectArray0[1] = (Object) class0;
      objectArray0[2] = (Object) bigInteger0;
      objectArray0[3] = (Object) float0;
      objectArray0[5] = (Object) integer2;
      objectArray0[6] = (Object) number0;
      objectArray0[0] = (Object) mathContext0;
      boolean boolean2 = jexlArithmetic1.narrowArguments(objectArray0);
}"
1199,"    public boolean isStrict() {
        return this.strict;
    }","  public void test476()  throws Throwable  {
      MathContext mathContext0 = MathContext.DECIMAL32;
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true, mathContext0, (-2776));
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.createWithOptions(true, mathContext0, (-563));
      BigInteger bigInteger0 = JexlArithmetic.BIGI_LONG_MAX_VALUE;
      Integer integer0 = new Integer((-563));
      Integer integer1 = new Integer((-563));
      mathContext0.equals(jexlArithmetic0);
      Float float0 = new Float((-5.880041098828796));
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      jexlArithmetic1.narrowBigDecimal(float0, integer0, bigDecimal0);
      mathContext0.equals(bigInteger0);
      Float.max((-12.477289F), (-12.477289F));
      Number number0 = jexlArithmetic0.narrow(float0);
      Short short0 = new Short((short)0);
      Integer integer2 = new Integer((-2776));
      jexlArithmetic0.size((Object) bigInteger0, integer2);
      Class<Boolean> class0 = Boolean.class;
      boolean boolean0 = jexlArithmetic0.narrowAccept(class0, class0);
      Boolean boolean1 = jexlArithmetic0.endsWith((Object) null, (Object) null);
      JexlArithmetic.isMultiplyExact((short)0, (-2776), 0L);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) integer1;
      objectArray0[1] = (Object) class0;
      objectArray0[2] = (Object) bigInteger0;
      objectArray0[3] = (Object) float0;
      objectArray0[5] = (Object) integer2;
      objectArray0[6] = (Object) number0;
      objectArray0[0] = (Object) mathContext0;
      boolean boolean2 = jexlArithmetic1.narrowArguments(objectArray0);
}"
1200,"    public boolean narrowArguments(final Object[] args) {
        boolean narrowed = false;
        if (args != null) {
            for (int a = 0; a < args.length; ++a) {
                final Object arg = args[a];
                if (arg instanceof Number) {
                    final Number narg = (Number) arg;
                    final Number narrow = narrow(narg);
                    if (!narg.equals(narrow)) {
                        args[a] = narrow;
                        narrowed = true;
                    }
                }
            }
        }
        return narrowed;
    }","  public void test477()  throws Throwable  {
      MathContext mathContext0 = MathContext.DECIMAL32;
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true, mathContext0, (-2776));
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.createWithOptions(true, mathContext0, (-563));
      BigInteger bigInteger0 = JexlArithmetic.BIGI_LONG_MAX_VALUE;
      Integer integer0 = new Integer((-563));
      Integer integer1 = new Integer((-563));
      mathContext0.equals(jexlArithmetic0);
      Float float0 = new Float((-5.880041098828796));
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      jexlArithmetic1.narrowBigDecimal(float0, integer0, bigDecimal0);
      mathContext0.equals(bigInteger0);
      Float.max((-12.477289F), (-12.477289F));
      Number number0 = jexlArithmetic0.narrow(float0);
      Short short0 = new Short((short)0);
      Integer integer2 = new Integer((-2776));
      jexlArithmetic0.size((Object) bigInteger0, integer2);
      Class<Boolean> class0 = Boolean.class;
      boolean boolean0 = jexlArithmetic0.narrowAccept(class0, class0);
      Boolean boolean1 = jexlArithmetic0.endsWith((Object) null, (Object) null);
      JexlArithmetic.isMultiplyExact((short)0, (-2776), 0L);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) integer1;
      objectArray0[1] = (Object) class0;
      objectArray0[2] = (Object) bigInteger0;
      objectArray0[3] = (Object) float0;
      objectArray0[5] = (Object) integer2;
      objectArray0[6] = (Object) number0;
      objectArray0[0] = (Object) mathContext0;
      boolean boolean2 = jexlArithmetic1.narrowArguments(objectArray0);
}"
1201,"    public boolean narrowArguments(final Object[] args) {
        boolean narrowed = false;
        if (args != null) {
            for (int a = 0; a < args.length; ++a) {
                final Object arg = args[a];
                if (arg instanceof Number) {
                    final Number narg = (Number) arg;
                    final Number narrow = narrow(narg);
                    if (!narg.equals(narrow)) {
                        args[a] = narrow;
                        narrowed = true;
                    }
                }
            }
        }
        return narrowed;
    }","  public void test478()  throws Throwable  {
      MathContext mathContext0 = MathContext.DECIMAL32;
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true, mathContext0, (-2776));
      JexlArithmetic jexlArithmetic1 = jexlArithmetic0.createWithOptions(true, mathContext0, (-563));
      BigInteger bigInteger0 = JexlArithmetic.BIGI_LONG_MAX_VALUE;
      Integer integer0 = new Integer((-563));
      Integer integer1 = new Integer((-563));
      mathContext0.equals(jexlArithmetic0);
      Float float0 = new Float((-5.880041098828796));
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      jexlArithmetic1.narrowBigDecimal(float0, integer0, bigDecimal0);
      mathContext0.equals(bigInteger0);
      Float.max((-12.477289F), (-12.477289F));
      Number number0 = jexlArithmetic0.narrow(float0);
      Short short0 = new Short((short)0);
      Integer integer2 = new Integer((-2776));
      jexlArithmetic0.size((Object) bigInteger0, integer2);
      Class<Boolean> class0 = Boolean.class;
      boolean boolean0 = jexlArithmetic0.narrowAccept(class0, class0);
      Boolean boolean1 = jexlArithmetic0.endsWith((Object) null, (Object) null);
      JexlArithmetic.isMultiplyExact((short)0, (-2776), 0L);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) integer1;
      objectArray0[1] = (Object) class0;
      objectArray0[2] = (Object) bigInteger0;
      objectArray0[3] = (Object) float0;
      objectArray0[5] = (Object) integer2;
      objectArray0[6] = (Object) number0;
      objectArray0[0] = (Object) mathContext0;
      boolean boolean2 = jexlArithmetic1.narrowArguments(objectArray0);
}"
1202,"    public Object get(final String name) {
        return map.get(name);
    }","  public void test0()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      MapContext mapContext0 = new MapContext(hashMap0);
      mapContext0.set(""dPe3S{&K,Dy-Yq4RmH"", ""dPe3S{&K,Dy-Yq4RmH"");
      mapContext0.get(""dPe3S{&K,Dy-Yq4RmH"");
}"
1203,"    public Object get(final String name) {
        return map.get(name);
    }","  public void test1()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      MapContext mapContext0 = new MapContext(hashMap0);
      mapContext0.set(""dPe3S{&K,Dy-Yq4RmH"", ""dPe3S{&K,Dy-Yq4RmH"");
      mapContext0.get(""dPe3S{&K,Dy-Yq4RmH"");
}"
1204,"    public MapContext() {
        this(null);
    }","  public void test2()  throws Throwable  {
      MapContext mapContext0 = new MapContext((Map<String, Object>) null);
  }"
1205,"    public boolean has(final String name) {
        return map.containsKey(name);
    }","  public void test3()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      MapContext mapContext0 = new MapContext(hashMap0);
      boolean boolean0 = mapContext0.has(""uu6m+C$jN+2Pdu"");
}"
1206,"    public Object get(final String name) {
        return map.get(name);
    }","  public void test4()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      MapContext mapContext0 = new MapContext(hashMap0);
      Object object0 = mapContext0.get(""dPe3S{&K,Dy-Yq4RmH"");
}"
1207,"    public boolean has(final String name) {
        return map.containsKey(name);
    }","  public void test5()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      MapContext mapContext0 = new MapContext(hashMap0);
      mapContext0.set(""dPe3S{&K,Dy-Yq4RmH"", ""dPe3S{&K,Dy-Yq4RmH"");
      boolean boolean0 = mapContext0.has(""dPe3S{&K,Dy-Yq4RmH"");
}"
1208,"    public boolean has(final String name) {
        return map.containsKey(name);
    }","  public void test6()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      MapContext mapContext0 = new MapContext(hashMap0);
      mapContext0.set(""dPe3S{&K,Dy-Yq4RmH"", ""dPe3S{&K,Dy-Yq4RmH"");
      boolean boolean0 = mapContext0.has(""dPe3S{&K,Dy-Yq4RmH"");
}"
1209,"    public MapContext() {
        this(null);
    }","  public void test7()  throws Throwable  {
      MapContext mapContext0 = new MapContext();
  }"
1210,"    public void clear() {
        map.clear();
    }","  public void test8()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      MapContext mapContext0 = new MapContext(hashMap0);
      mapContext0.clear();
  }"
1211,"    public static void setDefaultFlags(final String...flags) {
        DEFAULT = parseFlags(DEFAULT, flags);
    }","  public void test0()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = ""\""null\"""";
      stringArray0[1] = ""%EihMN,O:$"";
      stringArray0[2] = "" : not supported yet."";
      stringArray0[3] = ""!= error"";
      stringArray0[4] = ""(%kW7"";
      stringArray0[5] = ""O%IVdu/\""ke"";
      stringArray0[6] = ""Wt._Gb`D0KAnKe1"";
      JexlOptions.setDefaultFlags(stringArray0);
}"
1212,"    public boolean isStrictArithmetic() {
        return strictArithmetic;
    }","  public void test1()  throws Throwable  {
      JexlOptions jexlOptions0 = new JexlOptions();
}"
1213,"    public boolean isStrictArithmetic() {
        return strictArithmetic;
    }","  public void test2()  throws Throwable  {
      JexlOptions jexlOptions0 = new JexlOptions();
      jexlOptions0.setStrictArithmetic(false);
      jexlOptions0.set(jexlOptions0);
}"
1214,"    public boolean isSilent() {
        return isSet(SILENT, flags);
    }","  public void test3()  throws Throwable  {
      JexlOptions jexlOptions0 = new JexlOptions();
      jexlOptions0.setStrict(false);
      JexlOptions jexlOptions1 = jexlOptions0.set(jexlOptions0);
}"
1215,"    public boolean isStrict() {
        return isSet(STRICT, flags);
    }","  public void test4()  throws Throwable  {
      JexlOptions jexlOptions0 = new JexlOptions();
      jexlOptions0.setStrict(false);
      JexlOptions jexlOptions1 = jexlOptions0.set(jexlOptions0);
}"
1216,"    public boolean isSilent() {
        return isSet(SILENT, flags);
    }","  public void test5()  throws Throwable  {
      JexlOptions jexlOptions0 = new JexlOptions();
      jexlOptions0.setSilent(true);
      JexlOptions jexlOptions1 = jexlOptions0.set(jexlOptions0);
}"
1217,"    public boolean isStrict() {
        return isSet(STRICT, flags);
    }","  public void test6()  throws Throwable  {
      JexlOptions jexlOptions0 = new JexlOptions();
      jexlOptions0.setSilent(true);
      JexlOptions jexlOptions1 = jexlOptions0.set(jexlOptions0);
}"
1218,"    public boolean isSharedInstance() {
        return isSet(SHARED, flags);
    }","  public void test7()  throws Throwable  {
      JexlOptions jexlOptions0 = new JexlOptions();
      jexlOptions0.setSharedInstance(true);
      JexlOptions jexlOptions1 = jexlOptions0.set(jexlOptions0);
}"
1219,"    public boolean isStrict() {
        return isSet(STRICT, flags);
    }","  public void test8()  throws Throwable  {
      JexlOptions jexlOptions0 = new JexlOptions();
      jexlOptions0.setSharedInstance(true);
      JexlOptions jexlOptions1 = jexlOptions0.set(jexlOptions0);
}"
1220,"    public boolean isSafe() {
        return isSet(SAFE, flags);
    }","  public void test9()  throws Throwable  {
      JexlOptions jexlOptions0 = new JexlOptions();
      jexlOptions0.setSafe(false);
      JexlOptions jexlOptions1 = jexlOptions0.set(jexlOptions0);
}"
1221,"    public boolean isLexical() {
        return isSet(LEXICAL, flags);
    }","  public void test10()  throws Throwable  {
      JexlOptions jexlOptions0 = new JexlOptions();
      jexlOptions0.setSafe(false);
      JexlOptions jexlOptions1 = jexlOptions0.set(jexlOptions0);
}"
1222,"    public boolean isCancellable() {
        return isSet(CANCELLABLE, flags);
    }","  public void test11()  throws Throwable  {
      JexlOptions jexlOptions0 = new JexlOptions();
}"
1223,"    public boolean isCancellable() {
        return isSet(CANCELLABLE, flags);
    }","  public void test12()  throws Throwable  {
      JexlOptions jexlOptions0 = new JexlOptions();
      jexlOptions0.setCancellable(false);
      jexlOptions0.set(jexlOptions0);
}"
1224,"    public boolean isSafe() {
        return isSet(SAFE, flags);
    }","  public void test13()  throws Throwable  {
      JexlOptions jexlOptions0 = new JexlOptions();
      jexlOptions0.setAntish(false);
      JexlOptions jexlOptions1 = jexlOptions0.set(jexlOptions0);
}"
1225,"    public boolean isAntish() {
        return isSet(ANTISH, flags);
    }","  public void test14()  throws Throwable  {
      JexlOptions jexlOptions0 = new JexlOptions();
      jexlOptions0.setAntish(false);
      JexlOptions jexlOptions1 = jexlOptions0.set(jexlOptions0);
}"
1226,"    public int getMathScale() {
        return mathScale;
    }","  public void test15()  throws Throwable  {
      JexlOptions jexlOptions0 = new JexlOptions();
}"
1227,"    public int getMathScale() {
        return mathScale;
    }","  public void test16()  throws Throwable  {
      JexlOptions jexlOptions0 = new JexlOptions();
      jexlOptions0.setMathScale(0);
      jexlOptions0.set(jexlOptions0);
}"
1228,"    public int getMathScale() {
        return mathScale;
    }","  public void test17()  throws Throwable  {
      JexlOptions jexlOptions0 = new JexlOptions();
      jexlOptions0.setMathScale(130);
      jexlOptions0.set(jexlOptions0);
}"
1229,"    public int getMathScale() {
        return mathScale;
    }","  public void test18()  throws Throwable  {
      JexlOptions jexlOptions0 = new JexlOptions();
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.strict(false);
      Engine engine0 = new Engine(jexlBuilder0);
      jexlOptions0.set((JexlEngine) engine0);
}"
1230,"    private static int set(final int ordinal, final int mask, final boolean value) {
        return value? mask | (1 << ordinal) : mask & ~(1 << ordinal);
    }","  public void test19()  throws Throwable  {
      JexlOptions jexlOptions0 = new JexlOptions();
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.strict(false);
      Engine engine0 = new Engine(jexlBuilder0);
      jexlOptions0.set((JexlEngine) engine0);
}"
1231,"    public boolean isSharedInstance() {
        return isSet(SHARED, flags);
    }","  public void test20()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlOptions jexlOptions0 = jexlBuilder0.options();
      jexlOptions0.setSharedInstance(true);
      JexlOptions jexlOptions1 = jexlOptions0.set((JexlEngine) null);
}"
1232,"    public boolean isSilent() {
        return isSet(SILENT, flags);
    }","  public void test21()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlOptions jexlOptions0 = jexlBuilder0.options();
      jexlOptions0.setSharedInstance(true);
      JexlOptions jexlOptions1 = jexlOptions0.set((JexlEngine) null);
}"
1233,"    public boolean isSafe() {
        return isSet(SAFE, flags);
    }","  public void test22()  throws Throwable  {
      JexlOptions jexlOptions0 = new JexlOptions();
      jexlOptions0.setSafe(false);
      JexlOptions jexlOptions1 = jexlOptions0.set((JexlEngine) null);
}"
1234,"    public boolean isSharedInstance() {
        return isSet(SHARED, flags);
    }","  public void test23()  throws Throwable  {
      JexlOptions jexlOptions0 = new JexlOptions();
      jexlOptions0.setSafe(false);
      JexlOptions jexlOptions1 = jexlOptions0.set((JexlEngine) null);
}"
1235,"    public boolean isLexicalShade() {
        return isSet(SHADE, flags);
    }","  public void test24()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlOptions jexlOptions0 = jexlBuilder0.options();
      jexlOptions0.setLexicalShade(true);
      JexlOptions jexlOptions1 = jexlOptions0.set((JexlEngine) null);
}"
1236,"    public boolean isSharedInstance() {
        return isSet(SHARED, flags);
    }","  public void test25()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlOptions jexlOptions0 = jexlBuilder0.options();
      jexlOptions0.setLexicalShade(true);
      JexlOptions jexlOptions1 = jexlOptions0.set((JexlEngine) null);
}"
1237,"    public boolean isSilent() {
        return isSet(SILENT, flags);
    }","  public void test26()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlOptions jexlOptions0 = jexlBuilder0.options();
      JexlBuilder jexlBuilder1 = jexlBuilder0.silent(true);
      Engine engine0 = new Engine(jexlBuilder1);
      jexlOptions0.set((JexlEngine) engine0);
}"
1238,"    public int getMathScale() {
        return mathScale;
    }","  public void test27()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlOptions jexlOptions0 = jexlBuilder0.options();
      JexlBuilder jexlBuilder1 = jexlBuilder0.silent(true);
      Engine engine0 = new Engine(jexlBuilder1);
      jexlOptions0.set((JexlEngine) engine0);
}"
1239,"    public int getMathScale() {
        return mathScale;
    }","  public void test28()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlOptions jexlOptions0 = jexlBuilder0.options();
}"
1240,"    public int getMathScale() {
        return mathScale;
    }","  public void test29()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlOptions jexlOptions0 = jexlBuilder0.options();
      jexlOptions0.setMathScale(0);
      jexlOptions0.set((JexlEngine) null);
}"
1241,"    public int getMathScale() {
        return mathScale;
    }","  public void test30()  throws Throwable  {
      JexlOptions jexlOptions0 = new JexlOptions();
      jexlOptions0.setMathScale(2320);
      jexlOptions0.set((JexlEngine) null);
}"
1242,"    public static int parseFlags(int mask, final String...flags) {
        for(String name : flags) {
            boolean b = true;
            if (name.charAt(0) == '+') {
                name = name.substring(1);
            } else if (name.charAt(0) == '-') {
                name = name.substring(1);
                b = false;
            }
            for(int flag = 0; flag < NAMES.length; ++flag) {
                if (NAMES[flag].equals(name)) {
                    if (b) {
                        mask |= (1 << flag);
                    } else {
                        mask &= ~(1 << flag);
                    }
                    break;
                }
            }
        }
        return mask;
    }","  public void test31()  throws Throwable  {
      String[] stringArray0 = new String[0];
      int int0 = JexlOptions.parseFlags(0, stringArray0);
}"
1243,"    public static int parseFlags(int mask, final String...flags) {
        for(String name : flags) {
            boolean b = true;
            if (name.charAt(0) == '+') {
                name = name.substring(1);
            } else if (name.charAt(0) == '-') {
                name = name.substring(1);
                b = false;
            }
            for(int flag = 0; flag < NAMES.length; ++flag) {
                if (NAMES[flag].equals(name)) {
                    if (b) {
                        mask |= (1 << flag);
                    } else {
                        mask &= ~(1 << flag);
                    }
                    break;
                }
            }
        }
        return mask;
    }","  public void test32()  throws Throwable  {
      String[] stringArray0 = new String[0];
      int int0 = JexlOptions.parseFlags((-1227), stringArray0);
}"
1244,"    public boolean isStrictArithmetic() {
        return strictArithmetic;
    }","  public void test33()  throws Throwable  {
      JexlOptions jexlOptions0 = new JexlOptions();
}"
1245,"    public boolean isStrictArithmetic() {
        return strictArithmetic;
    }","  public void test34()  throws Throwable  {
      JexlOptions jexlOptions0 = new JexlOptions();
      jexlOptions0.setStrictArithmetic(false);
      boolean boolean0 = jexlOptions0.isStrictArithmetic();
}"
1246,"    public boolean isStrict() {
        return isSet(STRICT, flags);
    }","  public void test35()  throws Throwable  {
      JexlOptions jexlOptions0 = new JexlOptions();
}"
1247,"    public boolean isStrict() {
        return isSet(STRICT, flags);
    }","  public void test36()  throws Throwable  {
      JexlOptions jexlOptions0 = new JexlOptions();
      jexlOptions0.setStrict(false);
      boolean boolean0 = jexlOptions0.isStrict();
}"
1248,"    public boolean isSilent() {
        return isSet(SILENT, flags);
    }","  public void test37()  throws Throwable  {
      JexlOptions jexlOptions0 = new JexlOptions();
}"
1249,"    public boolean isSilent() {
        return isSet(SILENT, flags);
    }","  public void test38()  throws Throwable  {
      JexlOptions jexlOptions0 = new JexlOptions();
      jexlOptions0.setSilent(true);
      boolean boolean0 = jexlOptions0.isSilent();
}"
1250,"    public boolean isSharedInstance() {
        return isSet(SHARED, flags);
    }","  public void test39()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlOptions jexlOptions0 = jexlBuilder0.options();
}"
1251,"    public boolean isSharedInstance() {
        return isSet(SHARED, flags);
    }","  public void test40()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlOptions jexlOptions0 = jexlBuilder0.options();
      jexlOptions0.setSharedInstance(true);
      boolean boolean0 = jexlOptions0.isSharedInstance();
}"
1252,"    public boolean isSafe() {
        return isSet(SAFE, flags);
    }","  public void test41()  throws Throwable  {
      JexlOptions jexlOptions0 = new JexlOptions();
}"
1253,"    public boolean isSafe() {
        return isSet(SAFE, flags);
    }","  public void test42()  throws Throwable  {
      JexlOptions jexlOptions0 = new JexlOptions();
      jexlOptions0.setSafe(false);
      boolean boolean0 = jexlOptions0.isSafe();
}"
1254,"    public boolean isLexical() {
        return isSet(LEXICAL, flags);
    }","  public void test43()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlOptions jexlOptions0 = jexlBuilder0.options();
      jexlBuilder0.lexicalShade(true);
      boolean boolean0 = jexlOptions0.isLexicalShade();
}"
1255,"    public boolean isSharedInstance() {
        return isSet(SHARED, flags);
    }","  public void test44()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlOptions jexlOptions0 = jexlBuilder0.options();
      jexlBuilder0.lexicalShade(true);
      boolean boolean0 = jexlOptions0.isLexicalShade();
}"
1256,"    public boolean isLexicalShade() {
        return isSet(SHADE, flags);
    }","  public void test45()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlOptions jexlOptions0 = jexlBuilder0.options();
      jexlBuilder0.lexicalShade(true);
      boolean boolean0 = jexlOptions0.isLexicalShade();
}"
1257,"    public boolean isLexicalShade() {
        return isSet(SHADE, flags);
    }","  public void test46()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlOptions jexlOptions0 = jexlBuilder0.options();
      jexlOptions0.setLexicalShade(true);
      boolean boolean0 = jexlOptions0.isLexical();
}"
1258,"    public boolean isSharedInstance() {
        return isSet(SHARED, flags);
    }","  public void test47()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlOptions jexlOptions0 = jexlBuilder0.options();
      jexlOptions0.setLexicalShade(true);
      boolean boolean0 = jexlOptions0.isLexical();
}"
1259,"    public boolean isLexical() {
        return isSet(LEXICAL, flags);
    }","  public void test48()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlOptions jexlOptions0 = jexlBuilder0.options();
      jexlOptions0.setLexicalShade(true);
      boolean boolean0 = jexlOptions0.isLexical();
}"
1260,"    public boolean isCancellable() {
        return isSet(CANCELLABLE, flags);
    }","  public void test49()  throws Throwable  {
      JexlOptions jexlOptions0 = new JexlOptions();
}"
1261,"    public boolean isCancellable() {
        return isSet(CANCELLABLE, flags);
    }","  public void test50()  throws Throwable  {
      JexlOptions jexlOptions0 = new JexlOptions();
      jexlOptions0.setCancellable(false);
      boolean boolean0 = jexlOptions0.isCancellable();
}"
1262,"    public int getMathScale() {
        return mathScale;
    }","  public void test51()  throws Throwable  {
      JexlOptions jexlOptions0 = new JexlOptions();
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlBuilder jexlBuilder1 = jexlBuilder0.antish(false);
      JexlEngine jexlEngine0 = jexlBuilder1.create();
      jexlOptions0.set(jexlEngine0);
      boolean boolean0 = jexlOptions0.isAntish();
}"
1263,"    public boolean isAntish() {
        return isSet(ANTISH, flags);
    }","  public void test52()  throws Throwable  {
      JexlOptions jexlOptions0 = new JexlOptions();
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlBuilder jexlBuilder1 = jexlBuilder0.antish(false);
      JexlEngine jexlEngine0 = jexlBuilder1.create();
      jexlOptions0.set(jexlEngine0);
      boolean boolean0 = jexlOptions0.isAntish();
}"
1264,"    public boolean isCancellable() {
        return isSet(CANCELLABLE, flags);
    }","  public void test53()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      jexlBuilder0.namespaces((Map<String, Object>) hashMap0);
      JexlOptions jexlOptions0 = jexlBuilder0.options();
      jexlOptions0.getNamespaces();
}"
1265,"    public int getMathScale() {
        return mathScale;
    }","  public void test54()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      jexlBuilder0.namespaces((Map<String, Object>) hashMap0);
      JexlOptions jexlOptions0 = jexlBuilder0.options();
      jexlOptions0.getNamespaces();
}"
1266,"    public boolean isStrictArithmetic() {
        return strictArithmetic;
    }","  public void test55()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      jexlBuilder0.namespaces((Map<String, Object>) hashMap0);
      JexlOptions jexlOptions0 = jexlBuilder0.options();
      jexlOptions0.getNamespaces();
}"
1267,"    public boolean isSilent() {
        return isSet(SILENT, flags);
    }","  public void test56()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      jexlBuilder0.namespaces((Map<String, Object>) hashMap0);
      JexlOptions jexlOptions0 = jexlBuilder0.options();
      jexlOptions0.getNamespaces();
}"
1268,"    public int getMathScale() {
        return mathScale;
    }","  public void test57()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Object object0 = new Object();
      hashMap0.put(""r 5ui8"", object0);
      JexlBuilder jexlBuilder1 = jexlBuilder0.namespaces((Map<String, Object>) hashMap0);
      Engine engine0 = new Engine(jexlBuilder1);
      JexlOptions jexlOptions0 = new JexlOptions();
}"
1269,"    public int getMathScale() {
        return mathScale;
    }","  public void test58()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Object object0 = new Object();
      hashMap0.put(""r 5ui8"", object0);
      JexlBuilder jexlBuilder1 = jexlBuilder0.namespaces((Map<String, Object>) hashMap0);
      Engine engine0 = new Engine(jexlBuilder1);
      JexlOptions jexlOptions0 = new JexlOptions();
      engine0.optionsSet(jexlOptions0);
      jexlOptions0.getNamespaces();
}"
1270,"    public int getMathScale() {
        return mathScale;
    }","  public void test59()  throws Throwable  {
      JexlOptions jexlOptions0 = new JexlOptions();
}"
1271,"    public int getMathScale() {
        return mathScale;
    }","  public void test60()  throws Throwable  {
      JexlOptions jexlOptions0 = new JexlOptions();
      jexlOptions0.setMathScale(0);
      int int0 = jexlOptions0.getMathScale();
}"
1272,"    public int getMathScale() {
        return mathScale;
    }","  public void test61()  throws Throwable  {
      JexlOptions jexlOptions0 = new JexlOptions();
      jexlOptions0.setMathScale(1327);
      int int0 = jexlOptions0.getMathScale();
}"
1273,"    public boolean isSilent() {
        return isSet(SILENT, flags);
    }","  public void test62()  throws Throwable  {
      JexlOptions jexlOptions0 = new JexlOptions();
      jexlOptions0.setStrict(false);
      JexlOptions jexlOptions1 = jexlOptions0.copy();
}"
1274,"    public boolean isStrict() {
        return isSet(STRICT, flags);
    }","  public void test63()  throws Throwable  {
      JexlOptions jexlOptions0 = new JexlOptions();
      jexlOptions0.setStrict(false);
      JexlOptions jexlOptions1 = jexlOptions0.copy();
}"
1275,"    public boolean isStrict() {
        return isSet(STRICT, flags);
    }","  public void test64()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.silent(true);
      JexlOptions jexlOptions0 = jexlBuilder0.options();
      JexlOptions jexlOptions1 = jexlOptions0.copy();
}"
1276,"    public JexlOptions copy() {
        return new JexlOptions().set(this);
    }","  public void test65()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.silent(true);
      JexlOptions jexlOptions0 = jexlBuilder0.options();
      JexlOptions jexlOptions1 = jexlOptions0.copy();
}"
1277,"    public boolean isSharedInstance() {
        return isSet(SHARED, flags);
    }","  public void test66()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlOptions jexlOptions0 = jexlBuilder0.options();
      jexlOptions0.setSharedInstance(true);
      JexlOptions jexlOptions1 = jexlOptions0.copy();
}"
1278,"    public boolean isSafe() {
        return isSet(SAFE, flags);
    }","  public void test67()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlOptions jexlOptions0 = jexlBuilder0.options();
      jexlOptions0.setSharedInstance(true);
      JexlOptions jexlOptions1 = jexlOptions0.copy();
}"
1279,"    public boolean isSafe() {
        return isSet(SAFE, flags);
    }","  public void test68()  throws Throwable  {
      JexlOptions jexlOptions0 = new JexlOptions();
      jexlOptions0.setSafe(false);
      jexlOptions0.copy();
}"
1280,"    public boolean isLexicalShade() {
        return isSet(SHADE, flags);
    }","  public void test69()  throws Throwable  {
      JexlOptions jexlOptions0 = new JexlOptions();
      jexlOptions0.setSafe(false);
      jexlOptions0.copy();
}"
1281,"    public boolean isSafe() {
        return isSet(SAFE, flags);
    }","  public void test70()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlOptions jexlOptions0 = jexlBuilder0.options();
      jexlOptions0.setLexicalShade(true);
      JexlOptions jexlOptions1 = jexlOptions0.copy();
}"
1282,"    public boolean isLexicalShade() {
        return isSet(SHADE, flags);
    }","  public void test71()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlOptions jexlOptions0 = jexlBuilder0.options();
      jexlOptions0.setLexicalShade(true);
      JexlOptions jexlOptions1 = jexlOptions0.copy();
}"
1283,"    public boolean isCancellable() {
        return isSet(CANCELLABLE, flags);
    }","  public void test72()  throws Throwable  {
      JexlOptions jexlOptions0 = new JexlOptions();
}"
1284,"    public boolean isCancellable() {
        return isSet(CANCELLABLE, flags);
    }","  public void test73()  throws Throwable  {
      JexlOptions jexlOptions0 = new JexlOptions();
      jexlOptions0.setCancellable(false);
      jexlOptions0.copy();
}"
1285,"    public boolean isAntish() {
        return isSet(ANTISH, flags);
    }","  public void test74()  throws Throwable  {
      JexlOptions jexlOptions0 = new JexlOptions();
      jexlOptions0.setAntish(false);
      JexlOptions jexlOptions1 = jexlOptions0.copy();
}"
1286,"    public boolean isSharedInstance() {
        return isSet(SHARED, flags);
    }","  public void test75()  throws Throwable  {
      JexlOptions jexlOptions0 = new JexlOptions();
      jexlOptions0.setAntish(false);
      JexlOptions jexlOptions1 = jexlOptions0.copy();
}"
1287,"    public int getMathScale() {
        return mathScale;
    }","  public void test76()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlOptions jexlOptions0 = jexlBuilder0.options();
}"
1288,"    public int getMathScale() {
        return mathScale;
    }","  public void test77()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlOptions jexlOptions0 = jexlBuilder0.options();
      jexlOptions0.setMathScale(0);
      jexlOptions0.copy();
}"
1289,"    public int getMathScale() {
        return mathScale;
    }","  public void test78()  throws Throwable  {
      JexlOptions jexlOptions0 = new JexlOptions();
      jexlOptions0.setMathScale(2320);
      jexlOptions0.copy();
}"
1290,"    public void setFlags(final String[] opts) {
        flags = parseFlags(flags, opts);
    }","  public void test79()  throws Throwable  {
      JexlOptions jexlOptions0 = new JexlOptions();
      String[] stringArray0 = new String[3];
      stringArray0[0] = """";
      // Undeclared exception!
      try { 
        jexlOptions0.setFlags(stringArray0);
        fail(""Expecting exception: StringIndexOutOfBoundsException"");
      } catch(StringIndexOutOfBoundsException e) {
      }
  }"
1291,"    public void setFlags(final String[] opts) {
        flags = parseFlags(flags, opts);
    }","  public void test80()  throws Throwable  {
      JexlOptions jexlOptions0 = new JexlOptions();
      String[] stringArray0 = new String[1];
      // Undeclared exception!
      try { 
        jexlOptions0.setFlags(stringArray0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.JexlOptions"", e);
      }
  }"
1292,"    public static void setDefaultFlags(final String...flags) {
        DEFAULT = parseFlags(DEFAULT, flags);
    }","  public void test81()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = ""?"";
      stringArray0[1] = """";
      // Undeclared exception!
      try { 
        JexlOptions.setDefaultFlags(stringArray0);
        fail(""Expecting exception: StringIndexOutOfBoundsException"");
      } catch(StringIndexOutOfBoundsException e) {
      }
  }"
1293,"    private static int set(final int ordinal, final int mask, final boolean value) {
        return value? mask | (1 << ordinal) : mask & ~(1 << ordinal);
    }","  public void test82()  throws Throwable  {
      JexlOptions jexlOptions0 = new JexlOptions();
      // Undeclared exception!
      try { 
        jexlOptions0.set((JexlOptions) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.JexlOptions"", e);
      }
  }"
1294,"    public static int parseFlags(int mask, final String...flags) {
        for(String name : flags) {
            boolean b = true;
            if (name.charAt(0) == '+') {
                name = name.substring(1);
            } else if (name.charAt(0) == '-') {
                name = name.substring(1);
                b = false;
            }
            for(int flag = 0; flag < NAMES.length; ++flag) {
                if (NAMES[flag].equals(name)) {
                    if (b) {
                        mask |= (1 << flag);
                    } else {
                        mask &= ~(1 << flag);
                    }
                    break;
                }
            }
        }
        return mask;
    }","  public void test83()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = ""( $<'&f'|4*ccc"";
      stringArray0[1] = """";
      // Undeclared exception!
      try { 
        JexlOptions.parseFlags(1544, stringArray0);
        fail(""Expecting exception: StringIndexOutOfBoundsException"");
      } catch(StringIndexOutOfBoundsException e) {
      }
  }"
1295,"    public static int parseFlags(int mask, final String...flags) {
        for(String name : flags) {
            boolean b = true;
            if (name.charAt(0) == '+') {
                name = name.substring(1);
            } else if (name.charAt(0) == '-') {
                name = name.substring(1);
                b = false;
            }
            for(int flag = 0; flag < NAMES.length; ++flag) {
                if (NAMES[flag].equals(name)) {
                    if (b) {
                        mask |= (1 << flag);
                    } else {
                        mask &= ~(1 << flag);
                    }
                    break;
                }
            }
        }
        return mask;
    }","  public void test84()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = ""2miTzz/v"";
      stringArray0[1] = ""2miTzz/v"";
      stringArray0[2] = ""IWNs4 vGC3qomMuwZd"";
      stringArray0[3] = ""org.apache.commons.logging.impl.Jdk13LumberjackLogger"";
      stringArray0[4] = ""org.apache.commons.logging.impl.Jdk13LumberjackLogger"";
      stringArray0[5] = ""org.apache.commons.logging.impl.Jdk13LumberjackLogger"";
      stringArray0[6] = ""2miTzz/v"";
      stringArray0[7] = ""org.apache.commons.logging.impl.Jdk13LumberjackLogger"";
      stringArray0[8] = ""-@;uh6PgYvyb-"";
      int int0 = JexlOptions.parseFlags(107, stringArray0);
}"
1296,"    public static int parseFlags(int mask, final String...flags) {
        for(String name : flags) {
            boolean b = true;
            if (name.charAt(0) == '+') {
                name = name.substring(1);
            } else if (name.charAt(0) == '-') {
                name = name.substring(1);
                b = false;
            }
            for(int flag = 0; flag < NAMES.length; ++flag) {
                if (NAMES[flag].equals(name)) {
                    if (b) {
                        mask |= (1 << flag);
                    } else {
                        mask &= ~(1 << flag);
                    }
                    break;
                }
            }
        }
        return mask;
    }","  public void test85()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = ""strict"";
      stringArray0[1] = ""RB|jI!"";
      stringArray0[2] = ""\""=$\"""";
      stringArray0[3] = ""safe"";
      stringArray0[4] = ""+]6=F azNwAnRqIi"";
      stringArray0[5] = ""DFnt'7^|eCd;"";
      stringArray0[6] = ""rG$>WBY)rM#ITy>T-ot"";
      stringArray0[7] = ""=DK}Lu"";
      stringArray0[8] = ""org.apache.commons.jexl3.parser.ASTNumberLiteral"";
      int int0 = JexlOptions.parseFlags(74, stringArray0);
}"
1297,"    public boolean isSilent() {
        return isSet(SILENT, flags);
    }","  public void test86()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlOptions jexlOptions0 = jexlBuilder0.options();
      boolean boolean0 = jexlOptions0.isSilent();
}"
1298,"    public boolean isStrictArithmetic() {
        return strictArithmetic;
    }","  public void test87()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlOptions jexlOptions0 = jexlBuilder0.options();
      boolean boolean0 = jexlOptions0.isSilent();
}"
1299,"    public int getMathScale() {
        return mathScale;
    }","  public void test88()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlOptions jexlOptions0 = jexlBuilder0.options();
      boolean boolean0 = jexlOptions0.isSilent();
}"
1300,"    public boolean isCancellable() {
        return isSet(CANCELLABLE, flags);
    }","  public void test89()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlOptions jexlOptions0 = jexlBuilder0.options();
      boolean boolean0 = jexlOptions0.isSilent();
}"
1301,"    public boolean isSafe() {
        return isSet(SAFE, flags);
    }","  public void test90()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlOptions jexlOptions0 = jexlBuilder0.options();
      boolean boolean0 = jexlOptions0.isSilent();
}"
1302,"    public boolean isStrictArithmetic() {
        return strictArithmetic;
    }","  public void test91()  throws Throwable  {
      JexlOptions jexlOptions0 = new JexlOptions();
      boolean boolean0 = jexlOptions0.isStrict();
}"
1303,"    public boolean isStrict() {
        return isSet(STRICT, flags);
    }","  public void test92()  throws Throwable  {
      JexlOptions jexlOptions0 = new JexlOptions();
      boolean boolean0 = jexlOptions0.isStrict();
}"
1304,"    public int getMathScale() {
        return mathScale;
    }","  public void test93()  throws Throwable  {
      JexlOptions jexlOptions0 = new JexlOptions();
      boolean boolean0 = jexlOptions0.isStrict();
}"
1305,"    public boolean isCancellable() {
        return isSet(CANCELLABLE, flags);
    }","  public void test94()  throws Throwable  {
      JexlOptions jexlOptions0 = new JexlOptions();
      boolean boolean0 = jexlOptions0.isStrict();
}"
1306,"    public boolean isLexical() {
        return isSet(LEXICAL, flags);
    }","  public void test95()  throws Throwable  {
      JexlOptions jexlOptions0 = new JexlOptions();
      boolean boolean0 = jexlOptions0.isStrict();
}"
1307,"    public boolean isStrictArithmetic() {
        return strictArithmetic;
    }","  public void test96()  throws Throwable  {
      JexlOptions jexlOptions0 = new JexlOptions();
      MathContext mathContext0 = MathContext.DECIMAL128;
      jexlOptions0.setMathContext(mathContext0);
}"
1308,"    public int getMathScale() {
        return mathScale;
    }","  public void test97()  throws Throwable  {
      JexlOptions jexlOptions0 = new JexlOptions();
      MathContext mathContext0 = MathContext.DECIMAL128;
      jexlOptions0.setMathContext(mathContext0);
}"
1309,"    public boolean isCancellable() {
        return isSet(CANCELLABLE, flags);
    }","  public void test98()  throws Throwable  {
      JexlOptions jexlOptions0 = new JexlOptions();
      MathContext mathContext0 = MathContext.DECIMAL128;
      jexlOptions0.setMathContext(mathContext0);
}"
1310,"    public boolean isSafe() {
        return isSet(SAFE, flags);
    }","  public void test99()  throws Throwable  {
      JexlOptions jexlOptions0 = new JexlOptions();
      MathContext mathContext0 = MathContext.DECIMAL128;
      jexlOptions0.setMathContext(mathContext0);
}"
1311,"    public boolean isStrictArithmetic() {
        return strictArithmetic;
    }","  public void test100()  throws Throwable  {
      JexlOptions jexlOptions0 = new JexlOptions();
      boolean boolean0 = jexlOptions0.isSafe();
}"
1312,"    public boolean isCancellable() {
        return isSet(CANCELLABLE, flags);
    }","  public void test101()  throws Throwable  {
      JexlOptions jexlOptions0 = new JexlOptions();
      boolean boolean0 = jexlOptions0.isSafe();
}"
1313,"    public int getMathScale() {
        return mathScale;
    }","  public void test102()  throws Throwable  {
      JexlOptions jexlOptions0 = new JexlOptions();
      boolean boolean0 = jexlOptions0.isSafe();
}"
1314,"    public boolean isSilent() {
        return isSet(SILENT, flags);
    }","  public void test103()  throws Throwable  {
      JexlOptions jexlOptions0 = new JexlOptions();
      boolean boolean0 = jexlOptions0.isSafe();
}"
1315,"    public boolean isSafe() {
        return isSet(SAFE, flags);
    }","  public void test104()  throws Throwable  {
      JexlOptions jexlOptions0 = new JexlOptions();
      boolean boolean0 = jexlOptions0.isSafe();
}"
1316,"    public boolean isStrictArithmetic() {
        return strictArithmetic;
    }","  public void test105()  throws Throwable  {
      JexlOptions jexlOptions0 = new JexlOptions();
}"
1317,"    public boolean isStrictArithmetic() {
        return strictArithmetic;
    }","  public void test106()  throws Throwable  {
      JexlOptions jexlOptions0 = new JexlOptions();
      jexlOptions0.setStrictArithmetic(false);
      jexlOptions0.copy();
}"
1318,"    public boolean isStrictArithmetic() {
        return strictArithmetic;
    }","  public void test107()  throws Throwable  {
      JexlOptions jexlOptions0 = new JexlOptions();
      jexlOptions0.setNamespaces((Map<String, Object>) null);
}"
1319,"    public boolean isAntish() {
        return isSet(ANTISH, flags);
    }","  public void test108()  throws Throwable  {
      JexlOptions jexlOptions0 = new JexlOptions();
      jexlOptions0.setNamespaces((Map<String, Object>) null);
}"
1320,"    public int getMathScale() {
        return mathScale;
    }","  public void test109()  throws Throwable  {
      JexlOptions jexlOptions0 = new JexlOptions();
      jexlOptions0.setNamespaces((Map<String, Object>) null);
}"
1321,"    public boolean isCancellable() {
        return isSet(CANCELLABLE, flags);
    }","  public void test110()  throws Throwable  {
      JexlOptions jexlOptions0 = new JexlOptions();
      jexlOptions0.setNamespaces((Map<String, Object>) null);
}"
1322,"    public boolean isStrictArithmetic() {
        return strictArithmetic;
    }","  public void test111()  throws Throwable  {
      JexlOptions jexlOptions0 = new JexlOptions();
      Map<String, Object> map0 = jexlOptions0.getNamespaces();
      jexlOptions0.setNamespaces(map0);
}"
1323,"    public int getMathScale() {
        return mathScale;
    }","  public void test112()  throws Throwable  {
      JexlOptions jexlOptions0 = new JexlOptions();
      Map<String, Object> map0 = jexlOptions0.getNamespaces();
      jexlOptions0.setNamespaces(map0);
}"
1324,"    public boolean isCancellable() {
        return isSet(CANCELLABLE, flags);
    }","  public void test113()  throws Throwable  {
      JexlOptions jexlOptions0 = new JexlOptions();
      Map<String, Object> map0 = jexlOptions0.getNamespaces();
      jexlOptions0.setNamespaces(map0);
}"
1325,"    public boolean isLexical() {
        return isSet(LEXICAL, flags);
    }","  public void test114()  throws Throwable  {
      JexlOptions jexlOptions0 = new JexlOptions();
      Map<String, Object> map0 = jexlOptions0.getNamespaces();
      jexlOptions0.setNamespaces(map0);
}"
1326,"    public boolean isSharedInstance() {
        return isSet(SHARED, flags);
    }","  public void test115()  throws Throwable  {
      JexlOptions jexlOptions0 = new JexlOptions();
      jexlOptions0.setLexicalShade(true);
      JexlOptions jexlOptions1 = jexlOptions0.set(jexlOptions0);
}"
1327,"    public boolean isLexical() {
        return isSet(LEXICAL, flags);
    }","  public void test116()  throws Throwable  {
      JexlOptions jexlOptions0 = new JexlOptions();
      jexlOptions0.setLexicalShade(true);
      JexlOptions jexlOptions1 = jexlOptions0.set(jexlOptions0);
}"
1328,"    public boolean isLexicalShade() {
        return isSet(SHADE, flags);
    }","  public void test117()  throws Throwable  {
      JexlOptions jexlOptions0 = new JexlOptions();
      jexlOptions0.setLexicalShade(false);
}"
1329,"    public boolean isStrictArithmetic() {
        return strictArithmetic;
    }","  public void test118()  throws Throwable  {
      JexlOptions jexlOptions0 = new JexlOptions();
      jexlOptions0.setLexicalShade(false);
}"
1330,"    public boolean isStrict() {
        return isSet(STRICT, flags);
    }","  public void test119()  throws Throwable  {
      JexlOptions jexlOptions0 = new JexlOptions();
      jexlOptions0.setLexicalShade(false);
}"
1331,"    public boolean isAntish() {
        return isSet(ANTISH, flags);
    }","  public void test120()  throws Throwable  {
      JexlOptions jexlOptions0 = new JexlOptions();
      jexlOptions0.setLexicalShade(false);
}"
1332,"    public boolean isCancellable() {
        return isSet(CANCELLABLE, flags);
    }","  public void test121()  throws Throwable  {
      JexlOptions jexlOptions0 = new JexlOptions();
      jexlOptions0.setLexicalShade(false);
}"
1333,"    public int getMathScale() {
        return mathScale;
    }","  public void test122()  throws Throwable  {
      JexlOptions jexlOptions0 = new JexlOptions();
      jexlOptions0.setLexicalShade(false);
}"
1334,"    public boolean isLexical() {
        return isSet(LEXICAL, flags);
    }","  public void test123()  throws Throwable  {
      JexlOptions jexlOptions0 = new JexlOptions();
      jexlOptions0.setLexicalShade(false);
}"
1335,"    public static void setDefaultFlags(final String...flags) {
        DEFAULT = parseFlags(DEFAULT, flags);
    }","  public void test124()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = ""-@;uh6egYvyb-"";
      // Undeclared exception!
      try { 
        JexlOptions.setDefaultFlags(stringArray0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.JexlOptions"", e);
      }
  }"
1336,"    public static int parseFlags(int mask, final String...flags) {
        for(String name : flags) {
            boolean b = true;
            if (name.charAt(0) == '+') {
                name = name.substring(1);
            } else if (name.charAt(0) == '-') {
                name = name.substring(1);
                b = false;
            }
            for(int flag = 0; flag < NAMES.length; ++flag) {
                if (NAMES[flag].equals(name)) {
                    if (b) {
                        mask |= (1 << flag);
                    } else {
                        mask &= ~(1 << flag);
                    }
                    break;
                }
            }
        }
        return mask;
    }","  public void test125()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = ""strict"";
      stringArray0[1] = ""+]6=F azNwAnRqIi"";
      // Undeclared exception!
      try { 
        JexlOptions.parseFlags(74, stringArray0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.JexlOptions"", e);
      }
  }"
1337,"    public boolean isStrictArithmetic() {
        return strictArithmetic;
    }","  public void test126()  throws Throwable  {
      JexlOptions jexlOptions0 = new JexlOptions();
      boolean boolean0 = jexlOptions0.isLexical();
}"
1338,"    public int getMathScale() {
        return mathScale;
    }","  public void test127()  throws Throwable  {
      JexlOptions jexlOptions0 = new JexlOptions();
      boolean boolean0 = jexlOptions0.isLexical();
}"
1339,"    public boolean isCancellable() {
        return isSet(CANCELLABLE, flags);
    }","  public void test128()  throws Throwable  {
      JexlOptions jexlOptions0 = new JexlOptions();
      boolean boolean0 = jexlOptions0.isLexical();
}"
1340,"    public boolean isLexical() {
        return isSet(LEXICAL, flags);
    }","  public void test129()  throws Throwable  {
      JexlOptions jexlOptions0 = new JexlOptions();
      boolean boolean0 = jexlOptions0.isLexical();
}"
1341,"    public boolean isStrict() {
        return isSet(STRICT, flags);
    }","  public void test130()  throws Throwable  {
      JexlOptions jexlOptions0 = new JexlOptions();
      boolean boolean0 = jexlOptions0.isLexical();
}"
1342,"    public boolean isCancellable() {
        return isSet(CANCELLABLE, flags);
    }","  public void test131()  throws Throwable  {
      JexlOptions jexlOptions0 = new JexlOptions();
      boolean boolean0 = jexlOptions0.isAntish();
}"
1343,"    public int getMathScale() {
        return mathScale;
    }","  public void test132()  throws Throwable  {
      JexlOptions jexlOptions0 = new JexlOptions();
      boolean boolean0 = jexlOptions0.isAntish();
}"
1344,"    public boolean isSilent() {
        return isSet(SILENT, flags);
    }","  public void test133()  throws Throwable  {
      JexlOptions jexlOptions0 = new JexlOptions();
      boolean boolean0 = jexlOptions0.isAntish();
}"
1345,"    public boolean isStrictArithmetic() {
        return strictArithmetic;
    }","  public void test134()  throws Throwable  {
      JexlOptions jexlOptions0 = new JexlOptions();
      boolean boolean0 = jexlOptions0.isAntish();
}"
1346,"    public boolean isAntish() {
        return isSet(ANTISH, flags);
    }","  public void test135()  throws Throwable  {
      JexlOptions jexlOptions0 = new JexlOptions();
      boolean boolean0 = jexlOptions0.isAntish();
}"
1347,"    public boolean isStrictArithmetic() {
        return strictArithmetic;
    }","  public void test136()  throws Throwable  {
      JexlOptions jexlOptions0 = new JexlOptions();
      jexlOptions0.getMathContext();
}"
1348,"    public int getMathScale() {
        return mathScale;
    }","  public void test137()  throws Throwable  {
      JexlOptions jexlOptions0 = new JexlOptions();
      jexlOptions0.getMathContext();
}"
1349,"    public boolean isCancellable() {
        return isSet(CANCELLABLE, flags);
    }","  public void test138()  throws Throwable  {
      JexlOptions jexlOptions0 = new JexlOptions();
      jexlOptions0.getMathContext();
}"
1350,"    public boolean isAntish() {
        return isSet(ANTISH, flags);
    }","  public void test139()  throws Throwable  {
      JexlOptions jexlOptions0 = new JexlOptions();
      jexlOptions0.getMathContext();
}"
1351,"    public int getMathScale() {
        return mathScale;
    }","  public void test140()  throws Throwable  {
      JexlOptions jexlOptions0 = new JexlOptions();
      String[] stringArray0 = new String[0];
      jexlOptions0.setFlags(stringArray0);
}"
1352,"    public boolean isCancellable() {
        return isSet(CANCELLABLE, flags);
    }","  public void test141()  throws Throwable  {
      JexlOptions jexlOptions0 = new JexlOptions();
      String[] stringArray0 = new String[0];
      jexlOptions0.setFlags(stringArray0);
}"
1353,"    public boolean isSilent() {
        return isSet(SILENT, flags);
    }","  public void test142()  throws Throwable  {
      JexlOptions jexlOptions0 = new JexlOptions();
      String[] stringArray0 = new String[0];
      jexlOptions0.setFlags(stringArray0);
}"
1354,"    public boolean isStrictArithmetic() {
        return strictArithmetic;
    }","  public void test143()  throws Throwable  {
      JexlOptions jexlOptions0 = new JexlOptions();
      String[] stringArray0 = new String[0];
      jexlOptions0.setFlags(stringArray0);
}"
1355,"    public boolean isStrict() {
        return isSet(STRICT, flags);
    }","  public void test144()  throws Throwable  {
      JexlOptions jexlOptions0 = new JexlOptions();
      boolean boolean0 = jexlOptions0.isSharedInstance();
}"
1356,"    public boolean isSharedInstance() {
        return isSet(SHARED, flags);
    }","  public void test145()  throws Throwable  {
      JexlOptions jexlOptions0 = new JexlOptions();
      boolean boolean0 = jexlOptions0.isSharedInstance();
}"
1357,"    public int getMathScale() {
        return mathScale;
    }","  public void test146()  throws Throwable  {
      JexlOptions jexlOptions0 = new JexlOptions();
      boolean boolean0 = jexlOptions0.isSharedInstance();
}"
1358,"    public boolean isCancellable() {
        return isSet(CANCELLABLE, flags);
    }","  public void test147()  throws Throwable  {
      JexlOptions jexlOptions0 = new JexlOptions();
      boolean boolean0 = jexlOptions0.isSharedInstance();
}"
1359,"    public boolean isStrictArithmetic() {
        return strictArithmetic;
    }","  public void test148()  throws Throwable  {
      JexlOptions jexlOptions0 = new JexlOptions();
      boolean boolean0 = jexlOptions0.isSharedInstance();
}"
1360,"    public boolean isStrictArithmetic() {
        return strictArithmetic;
    }","  public void test149()  throws Throwable  {
      JexlOptions jexlOptions0 = new JexlOptions();
      boolean boolean0 = jexlOptions0.isCancellable();
}"
1361,"    public boolean isStrict() {
        return isSet(STRICT, flags);
    }","  public void test150()  throws Throwable  {
      JexlOptions jexlOptions0 = new JexlOptions();
      boolean boolean0 = jexlOptions0.isCancellable();
}"
1362,"    public boolean isCancellable() {
        return isSet(CANCELLABLE, flags);
    }","  public void test151()  throws Throwable  {
      JexlOptions jexlOptions0 = new JexlOptions();
      boolean boolean0 = jexlOptions0.isCancellable();
}"
1363,"    public boolean isSharedInstance() {
        return isSet(SHARED, flags);
    }","  public void test152()  throws Throwable  {
      JexlOptions jexlOptions0 = new JexlOptions();
      boolean boolean0 = jexlOptions0.isCancellable();
}"
1364,"    public int getMathScale() {
        return mathScale;
    }","  public void test153()  throws Throwable  {
      JexlOptions jexlOptions0 = new JexlOptions();
      boolean boolean0 = jexlOptions0.isCancellable();
}"
1365,"    public boolean isStrictArithmetic() {
        return strictArithmetic;
    }","  public void test154()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlOptions jexlOptions0 = jexlBuilder0.options();
      jexlOptions0.setLexical(false);
}"
1366,"    public int getMathScale() {
        return mathScale;
    }","  public void test155()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlOptions jexlOptions0 = jexlBuilder0.options();
      jexlOptions0.setLexical(false);
}"
1367,"    public boolean isAntish() {
        return isSet(ANTISH, flags);
    }","  public void test156()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlOptions jexlOptions0 = jexlBuilder0.options();
      jexlOptions0.setLexical(false);
}"
1368,"    public boolean isLexical() {
        return isSet(LEXICAL, flags);
    }","  public void test157()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlOptions jexlOptions0 = jexlBuilder0.options();
      jexlOptions0.setLexical(false);
}"
1369,"    public boolean isSafe() {
        return isSet(SAFE, flags);
    }","  public void test158()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlOptions jexlOptions0 = jexlBuilder0.options();
      jexlOptions0.setLexical(false);
}"
1370,"    public boolean isStrict() {
        return isSet(STRICT, flags);
    }","  public void test159()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlOptions jexlOptions0 = jexlBuilder0.options();
      jexlOptions0.setLexical(false);
}"
1371,"    public boolean isCancellable() {
        return isSet(CANCELLABLE, flags);
    }","  public void test160()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlOptions jexlOptions0 = jexlBuilder0.options();
      jexlOptions0.setLexical(false);
}"
1372,"    public boolean isSharedInstance() {
        return isSet(SHARED, flags);
    }","  public void test161()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlOptions jexlOptions0 = jexlBuilder0.options();
      jexlOptions0.setLexical(false);
}"
1373,"    public boolean isCancellable() {
        return isSet(CANCELLABLE, flags);
    }","  public void test162()  throws Throwable  {
      JexlOptions jexlOptions0 = new JexlOptions();
      boolean boolean0 = jexlOptions0.isStrictArithmetic();
}"
1374,"    public boolean isStrictArithmetic() {
        return strictArithmetic;
    }","  public void test163()  throws Throwable  {
      JexlOptions jexlOptions0 = new JexlOptions();
      boolean boolean0 = jexlOptions0.isStrictArithmetic();
}"
1375,"    public int getMathScale() {
        return mathScale;
    }","  public void test164()  throws Throwable  {
      JexlOptions jexlOptions0 = new JexlOptions();
      boolean boolean0 = jexlOptions0.isStrictArithmetic();
}"
1376,"    public boolean isSilent() {
        return isSet(SILENT, flags);
    }","  public void test165()  throws Throwable  {
      JexlOptions jexlOptions0 = new JexlOptions();
      boolean boolean0 = jexlOptions0.isStrictArithmetic();
}"
1377,"    public boolean isStrictArithmetic() {
        return strictArithmetic;
    }","  public void test166()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlOptions jexlOptions0 = jexlBuilder0.options();
      boolean boolean0 = jexlOptions0.isLexicalShade();
}"
1378,"    public int getMathScale() {
        return mathScale;
    }","  public void test167()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlOptions jexlOptions0 = jexlBuilder0.options();
      boolean boolean0 = jexlOptions0.isLexicalShade();
}"
1379,"    public boolean isCancellable() {
        return isSet(CANCELLABLE, flags);
    }","  public void test168()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlOptions jexlOptions0 = jexlBuilder0.options();
      boolean boolean0 = jexlOptions0.isLexicalShade();
}"
1380,"    public boolean isStrict() {
        return isSet(STRICT, flags);
    }","  public void test169()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlOptions jexlOptions0 = jexlBuilder0.options();
      boolean boolean0 = jexlOptions0.isLexicalShade();
}"
1381,"    public boolean isLexicalShade() {
        return isSet(SHADE, flags);
    }","  public void test170()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlOptions jexlOptions0 = jexlBuilder0.options();
      boolean boolean0 = jexlOptions0.isLexicalShade();
}"
1382,"    public int getMathScale() {
        return mathScale;
    }","  public void test171()  throws Throwable  {
      Engine engine0 = new Engine();
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlOptions jexlOptions0 = jexlBuilder0.options();
}"
1383,"    public int getMathScale() {
        return mathScale;
    }","  public void test172()  throws Throwable  {
      Engine engine0 = new Engine();
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlOptions jexlOptions0 = jexlBuilder0.options();
      engine0.optionsSet(jexlOptions0);
      jexlOptions0.getMathContext();
}"
1384,"    public boolean isCancellable() {
        return isSet(CANCELLABLE, flags);
    }","  public void test173()  throws Throwable  {
      JexlOptions jexlOptions0 = new JexlOptions();
      int int0 = jexlOptions0.getMathScale();
}"
1385,"    public int getMathScale() {
        return mathScale;
    }","  public void test174()  throws Throwable  {
      JexlOptions jexlOptions0 = new JexlOptions();
      int int0 = jexlOptions0.getMathScale();
}"
1386,"    public boolean isStrictArithmetic() {
        return strictArithmetic;
    }","  public void test175()  throws Throwable  {
      JexlOptions jexlOptions0 = new JexlOptions();
      int int0 = jexlOptions0.getMathScale();
}"
1387,"    public boolean isSafe() {
        return isSet(SAFE, flags);
    }","  public void test176()  throws Throwable  {
      JexlOptions jexlOptions0 = new JexlOptions();
      int int0 = jexlOptions0.getMathScale();
}"
1388,"    public boolean supportsRegister() {
        return getFeature(REGISTER);
    }","  public void test0()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      Predicate<String> predicate0 = jexlFeatures0.TEST_STR_FALSE.and(jexlFeatures0.TEST_STR_FALSE);
      jexlFeatures0.namespaceTest(predicate0);
      jexlFeatures0.namespaceTest();
}"
1389,"    public boolean supportsSideEffectGlobal() {
        return getFeature(SIDE_EFFECT_GLOBAL);
    }","  public void test1()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      Predicate<String> predicate0 = jexlFeatures0.TEST_STR_FALSE.and(jexlFeatures0.TEST_STR_FALSE);
      jexlFeatures0.namespaceTest(predicate0);
      jexlFeatures0.namespaceTest();
}"
1390,"    public static String stringify(final int feature) {
        return feature >= 0 && feature < F_NAMES.length ? F_NAMES[feature] : ""unsupported feature"";
    }","  public void test2()  throws Throwable  {
      String string0 = JexlFeatures.stringify(16);
}"
1391,"    public static String stringify(final int feature) {
        return feature >= 0 && feature < F_NAMES.length ? F_NAMES[feature] : ""unsupported feature"";
    }","  public void test3()  throws Throwable  {
      String string0 = JexlFeatures.stringify(0);
}"
1392,"    public boolean supportsPragma() {
        return getFeature(PRAGMA);
    }","  public void test4()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      JexlFeatures jexlFeatures1 = new JexlFeatures(jexlFeatures0);
      JexlFeatures jexlFeatures2 = jexlFeatures1.pragma(false);
      boolean boolean0 = jexlFeatures0.equals(jexlFeatures2);
}"
1393,"    public boolean supportsLoops() {
        return getFeature(LOOP);
    }","  public void test5()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      JexlFeatures jexlFeatures1 = new JexlFeatures(jexlFeatures0);
      JexlFeatures jexlFeatures2 = jexlFeatures1.pragma(false);
      boolean boolean0 = jexlFeatures0.equals(jexlFeatures2);
}"
1394,"    public boolean equals(final Object obj) {
        if (this == obj) {
            return true;
        }
        if (obj == null) {
            return false;
        }
        if (getClass() != obj.getClass()) {
            return false;
        }
        final JexlFeatures other = (JexlFeatures) obj;
        if (this.flags != other.flags) {
            return false;
        }
        if (!Objects.equals(this.reservedNames, other.reservedNames)) {
            return false;
        }
        return true;
    }","  public void test6()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      JexlFeatures jexlFeatures1 = new JexlFeatures(jexlFeatures0);
      JexlFeatures jexlFeatures2 = jexlFeatures1.pragma(false);
      boolean boolean0 = jexlFeatures0.equals(jexlFeatures2);
}"
1395,"    public boolean supportsLocalVar() {
        return getFeature(LOCAL_VAR);
    }","  public void test7()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add(""unsupported feature"");
      JexlFeatures jexlFeatures1 = jexlFeatures0.reservedNames(linkedList0);
      jexlFeatures1.hashCode();
}"
1396,"    public boolean supportsRegister() {
        return getFeature(REGISTER);
    }","  public void test8()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add(""unsupported feature"");
      JexlFeatures jexlFeatures1 = jexlFeatures0.reservedNames(linkedList0);
      jexlFeatures1.hashCode();
}"
1397,"    public boolean isLexical() {
        return getFeature(LEXICAL);
    }","  public void test9()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add(""unsupported feature"");
      JexlFeatures jexlFeatures1 = jexlFeatures0.reservedNames(linkedList0);
      jexlFeatures1.hashCode();
}"
1398,"    public boolean isLexicalShade() {
        return getFeature(LEXICAL_SHADE);
    }","  public void test10()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add(""unsupported feature"");
      JexlFeatures jexlFeatures1 = jexlFeatures0.reservedNames(linkedList0);
      jexlFeatures1.hashCode();
}"
1399,"    public boolean supportsStructuredLiteral() {
        return getFeature(STRUCTURED_LITERAL);
    }","  public void test11()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
}"
1400,"    public boolean supportsStructuredLiteral() {
        return getFeature(STRUCTURED_LITERAL);
    }","  public void test12()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.structuredLiteral(false);
      boolean boolean0 = jexlFeatures0.supportsStructuredLiteral();
}"
1401,"    public boolean supportsSideEffectGlobal() {
        return getFeature(SIDE_EFFECT_GLOBAL);
    }","  public void test13()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
}"
1402,"    public boolean supportsSideEffectGlobal() {
        return getFeature(SIDE_EFFECT_GLOBAL);
    }","  public void test14()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.sideEffectGlobal(false);
      boolean boolean0 = jexlFeatures0.supportsSideEffectGlobal();
}"
1403,"    public boolean supportsSideEffect() {
        return getFeature(SIDE_EFFECT);
    }","  public void test15()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
}"
1404,"    public boolean supportsSideEffect() {
        return getFeature(SIDE_EFFECT);
    }","  public void test16()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.sideEffect(false);
      boolean boolean0 = jexlFeatures0.supportsSideEffect();
}"
1405,"    public boolean supportsExpression() {
        return !getFeature(SCRIPT);
    }","  public void test17()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.script(false);
      boolean boolean0 = jexlFeatures0.supportsScript();
}"
1406,"    public boolean supportsAnnotation() {
        return getFeature(ANNOTATION);
    }","  public void test18()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.script(false);
      boolean boolean0 = jexlFeatures0.supportsScript();
}"
1407,"    public boolean supportsScript() {
        return getFeature(SCRIPT);
    }","  public void test19()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.script(false);
      boolean boolean0 = jexlFeatures0.supportsScript();
}"
1408,"    public boolean supportsRegister() {
        return getFeature(REGISTER);
    }","  public void test20()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
}"
1409,"    public boolean supportsRegister() {
        return getFeature(REGISTER);
    }","  public void test21()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.register(true);
      boolean boolean0 = jexlFeatures0.supportsRegister();
}"
1410,"    public boolean supportsPragma() {
        return getFeature(PRAGMA);
    }","  public void test22()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
}"
1411,"    public boolean supportsPragma() {
        return getFeature(PRAGMA);
    }","  public void test23()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.pragma(false);
      boolean boolean0 = jexlFeatures0.supportsPragma();
}"
1412,"    public boolean supportsNewInstance() {
        return getFeature(NEW_INSTANCE);
    }","  public void test24()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
}"
1413,"    public boolean supportsNewInstance() {
        return getFeature(NEW_INSTANCE);
    }","  public void test25()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      JexlFeatures jexlFeatures1 = jexlFeatures0.newInstance(false);
      boolean boolean0 = jexlFeatures1.supportsNewInstance();
}"
1414,"    public boolean supportsMethodCall() {
        return getFeature(METHOD_CALL);
    }","  public void test26()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
}"
1415,"    public boolean supportsMethodCall() {
        return getFeature(METHOD_CALL);
    }","  public void test27()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.methodCall(false);
      boolean boolean0 = jexlFeatures0.supportsMethodCall();
}"
1416,"    public boolean supportsLoops() {
        return getFeature(LOOP);
    }","  public void test28()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
}"
1417,"    public boolean supportsLoops() {
        return getFeature(LOOP);
    }","  public void test29()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      JexlFeatures jexlFeatures1 = jexlFeatures0.loops(false);
      boolean boolean0 = jexlFeatures1.supportsLoops();
}"
1418,"    public boolean supportsLocalVar() {
        return getFeature(LOCAL_VAR);
    }","  public void test30()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
}"
1419,"    public boolean supportsLocalVar() {
        return getFeature(LOCAL_VAR);
    }","  public void test31()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.localVar(false);
      boolean boolean0 = jexlFeatures0.supportsLocalVar();
}"
1420,"    public boolean supportsLambda() {
        return getFeature(LAMBDA);
    }","  public void test32()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
}"
1421,"    public boolean supportsLambda() {
        return getFeature(LAMBDA);
    }","  public void test33()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.lambda(false);
      boolean boolean0 = jexlFeatures0.supportsLambda();
}"
1422,"    public boolean supportsArrayReferenceExpr() {
        return getFeature(ARRAY_REF_EXPR);
    }","  public void test34()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
}"
1423,"    public boolean supportsArrayReferenceExpr() {
        return getFeature(ARRAY_REF_EXPR);
    }","  public void test35()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.arrayReferenceExpr(false);
      boolean boolean0 = jexlFeatures0.supportsArrayReferenceExpr();
}"
1424,"    public boolean supportsAnnotation() {
        return getFeature(ANNOTATION);
    }","  public void test36()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
}"
1425,"    public boolean supportsAnnotation() {
        return getFeature(ANNOTATION);
    }","  public void test37()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      JexlFeatures jexlFeatures1 = jexlFeatures0.annotation(false);
      boolean boolean0 = jexlFeatures1.supportsAnnotation();
}"
1426,"    public boolean supportsStructuredLiteral() {
        return getFeature(STRUCTURED_LITERAL);
    }","  public void test38()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      JexlFeatures jexlFeatures1 = jexlFeatures0.sideEffectGlobal(false);
      jexlFeatures1.structuredLiteral(true);
}"
1427,"    public boolean supportsSideEffectGlobal() {
        return getFeature(SIDE_EFFECT_GLOBAL);
    }","  public void test39()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      JexlFeatures jexlFeatures1 = jexlFeatures0.sideEffectGlobal(false);
      jexlFeatures1.structuredLiteral(true);
}"
1428,"    public boolean supportsSideEffect() {
        return getFeature(SIDE_EFFECT);
    }","  public void test40()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.sideEffect(false);
      JexlFeatures jexlFeatures1 = jexlFeatures0.structuredLiteral(false);
}"
1429,"    public boolean supportsLambda() {
        return getFeature(LAMBDA);
    }","  public void test41()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.sideEffect(false);
      JexlFeatures jexlFeatures1 = jexlFeatures0.structuredLiteral(false);
}"
1430,"    public boolean supportsRegister() {
        return getFeature(REGISTER);
    }","  public void test42()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
}"
1431,"    public boolean supportsRegister() {
        return getFeature(REGISTER);
    }","  public void test43()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.register(true);
      jexlFeatures0.structuredLiteral(true);
}"
1432,"    public boolean supportsStructuredLiteral() {
        return getFeature(STRUCTURED_LITERAL);
    }","  public void test44()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      JexlFeatures jexlFeatures1 = jexlFeatures0.pragma(false);
      JexlFeatures jexlFeatures2 = jexlFeatures1.structuredLiteral(false);
}"
1433,"    public boolean supportsLambda() {
        return getFeature(LAMBDA);
    }","  public void test45()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      JexlFeatures jexlFeatures1 = jexlFeatures0.pragma(false);
      JexlFeatures jexlFeatures2 = jexlFeatures1.structuredLiteral(false);
}"
1434,"    public boolean supportsNewInstance() {
        return getFeature(NEW_INSTANCE);
    }","  public void test46()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.newInstance(false);
      JexlFeatures jexlFeatures1 = jexlFeatures0.structuredLiteral(false);
}"
1435,"    public boolean supportsMethodCall() {
        return getFeature(METHOD_CALL);
    }","  public void test47()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.newInstance(false);
      JexlFeatures jexlFeatures1 = jexlFeatures0.structuredLiteral(false);
}"
1436,"    public boolean supportsMethodCall() {
        return getFeature(METHOD_CALL);
    }","  public void test48()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.methodCall(false);
      JexlFeatures jexlFeatures1 = jexlFeatures0.structuredLiteral(true);
}"
1437,"    public boolean supportsSideEffect() {
        return getFeature(SIDE_EFFECT);
    }","  public void test49()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.methodCall(false);
      JexlFeatures jexlFeatures1 = jexlFeatures0.structuredLiteral(true);
}"
1438,"    public boolean supportsLocalVar() {
        return getFeature(LOCAL_VAR);
    }","  public void test50()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.loops(false);
      JexlFeatures jexlFeatures1 = jexlFeatures0.structuredLiteral(true);
}"
1439,"    public boolean supportsLoops() {
        return getFeature(LOOP);
    }","  public void test51()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.loops(false);
      JexlFeatures jexlFeatures1 = jexlFeatures0.structuredLiteral(true);
}"
1440,"    public boolean supportsLocalVar() {
        return getFeature(LOCAL_VAR);
    }","  public void test52()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
}"
1441,"    public boolean supportsLocalVar() {
        return getFeature(LOCAL_VAR);
    }","  public void test53()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.localVar(false);
      jexlFeatures0.structuredLiteral(true);
}"
1442,"    public boolean supportsLambda() {
        return getFeature(LAMBDA);
    }","  public void test54()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.lambda(false);
      JexlFeatures jexlFeatures1 = jexlFeatures0.structuredLiteral(false);
}"
1443,"    public boolean supportsSideEffectGlobal() {
        return getFeature(SIDE_EFFECT_GLOBAL);
    }","  public void test55()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.lambda(false);
      JexlFeatures jexlFeatures1 = jexlFeatures0.structuredLiteral(false);
}"
1444,"    public boolean supportsScript() {
        return getFeature(SCRIPT);
    }","  public void test56()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      JexlFeatures jexlFeatures1 = jexlFeatures0.script(false);
      JexlFeatures jexlFeatures2 = jexlFeatures1.structuredLiteral(false);
}"
1445,"    public boolean supportsAnnotation() {
        return getFeature(ANNOTATION);
    }","  public void test57()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      JexlFeatures jexlFeatures1 = jexlFeatures0.script(false);
      JexlFeatures jexlFeatures2 = jexlFeatures1.structuredLiteral(false);
}"
1446,"    public boolean supportsArrayReferenceExpr() {
        return getFeature(ARRAY_REF_EXPR);
    }","  public void test58()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.arrayReferenceExpr(false);
      jexlFeatures0.structuredLiteral(true);
}"
1447,"    public boolean supportsStructuredLiteral() {
        return getFeature(STRUCTURED_LITERAL);
    }","  public void test59()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.arrayReferenceExpr(false);
      jexlFeatures0.structuredLiteral(true);
}"
1448,"    public boolean supportsAnnotation() {
        return getFeature(ANNOTATION);
    }","  public void test60()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.annotation(false);
      JexlFeatures jexlFeatures1 = jexlFeatures0.structuredLiteral(false);
}"
1449,"    public boolean supportsLambda() {
        return getFeature(LAMBDA);
    }","  public void test61()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.annotation(false);
      JexlFeatures jexlFeatures1 = jexlFeatures0.structuredLiteral(false);
}"
1450,"    public boolean supportsRegister() {
        return getFeature(REGISTER);
    }","  public void test62()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      JexlFeatures jexlFeatures1 = jexlFeatures0.lexicalShade(true);
      JexlFeatures jexlFeatures2 = jexlFeatures1.structuredLiteral(true);
}"
1451,"    public boolean isLexicalShade() {
        return getFeature(LEXICAL_SHADE);
    }","  public void test63()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      JexlFeatures jexlFeatures1 = jexlFeatures0.lexicalShade(true);
      JexlFeatures jexlFeatures2 = jexlFeatures1.structuredLiteral(true);
}"
1452,"    public boolean supportsStructuredLiteral() {
        return getFeature(STRUCTURED_LITERAL);
    }","  public void test64()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.structuredLiteral(false);
      jexlFeatures0.sideEffectGlobal(true);
}"
1453,"    public boolean supportsSideEffectGlobal() {
        return getFeature(SIDE_EFFECT_GLOBAL);
    }","  public void test65()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.structuredLiteral(false);
      jexlFeatures0.sideEffectGlobal(true);
}"
1454,"    public boolean supportsSideEffectGlobal() {
        return getFeature(SIDE_EFFECT_GLOBAL);
    }","  public void test66()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.sideEffect(false);
      jexlFeatures0.sideEffectGlobal(true);
}"
1455,"    public boolean supportsSideEffect() {
        return getFeature(SIDE_EFFECT);
    }","  public void test67()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.sideEffect(false);
      jexlFeatures0.sideEffectGlobal(true);
}"
1456,"    public boolean supportsAnnotation() {
        return getFeature(ANNOTATION);
    }","  public void test68()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      JexlFeatures jexlFeatures1 = jexlFeatures0.register(true);
      JexlFeatures jexlFeatures2 = jexlFeatures1.sideEffectGlobal(false);
}"
1457,"    public boolean supportsSideEffectGlobal() {
        return getFeature(SIDE_EFFECT_GLOBAL);
    }","  public void test69()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      JexlFeatures jexlFeatures1 = jexlFeatures0.register(true);
      JexlFeatures jexlFeatures2 = jexlFeatures1.sideEffectGlobal(false);
}"
1458,"    public boolean supportsSideEffectGlobal() {
        return getFeature(SIDE_EFFECT_GLOBAL);
    }","  public void test70()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      JexlFeatures jexlFeatures1 = jexlFeatures0.pragma(false);
      jexlFeatures1.sideEffectGlobal(true);
}"
1459,"    public boolean supportsPragma() {
        return getFeature(PRAGMA);
    }","  public void test71()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      JexlFeatures jexlFeatures1 = jexlFeatures0.pragma(false);
      jexlFeatures1.sideEffectGlobal(true);
}"
1460,"    public boolean supportsNewInstance() {
        return getFeature(NEW_INSTANCE);
    }","  public void test72()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.newInstance(false);
      jexlFeatures0.sideEffectGlobal(true);
}"
1461,"    public boolean supportsSideEffectGlobal() {
        return getFeature(SIDE_EFFECT_GLOBAL);
    }","  public void test73()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.newInstance(false);
      jexlFeatures0.sideEffectGlobal(true);
}"
1462,"    public boolean supportsSideEffectGlobal() {
        return getFeature(SIDE_EFFECT_GLOBAL);
    }","  public void test74()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.methodCall(false);
      jexlFeatures0.sideEffectGlobal(true);
}"
1463,"    public boolean supportsMethodCall() {
        return getFeature(METHOD_CALL);
    }","  public void test75()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.methodCall(false);
      jexlFeatures0.sideEffectGlobal(true);
}"
1464,"    public boolean supportsLoops() {
        return getFeature(LOOP);
    }","  public void test76()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.loops(false);
      JexlFeatures jexlFeatures1 = jexlFeatures0.sideEffectGlobal(false);
}"
1465,"    public boolean supportsLocalVar() {
        return getFeature(LOCAL_VAR);
    }","  public void test77()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.loops(false);
      JexlFeatures jexlFeatures1 = jexlFeatures0.sideEffectGlobal(false);
}"
1466,"    public boolean supportsSideEffectGlobal() {
        return getFeature(SIDE_EFFECT_GLOBAL);
    }","  public void test78()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      JexlFeatures jexlFeatures1 = jexlFeatures0.localVar(false);
      JexlFeatures jexlFeatures2 = jexlFeatures1.sideEffectGlobal(false);
}"
1467,"    public boolean supportsScript() {
        return getFeature(SCRIPT);
    }","  public void test79()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      JexlFeatures jexlFeatures1 = jexlFeatures0.localVar(false);
      JexlFeatures jexlFeatures2 = jexlFeatures1.sideEffectGlobal(false);
}"
1468,"    public boolean supportsLambda() {
        return getFeature(LAMBDA);
    }","  public void test80()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.lambda(false);
      jexlFeatures0.sideEffectGlobal(true);
}"
1469,"    public boolean supportsSideEffectGlobal() {
        return getFeature(SIDE_EFFECT_GLOBAL);
    }","  public void test81()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.lambda(false);
      jexlFeatures0.sideEffectGlobal(true);
}"
1470,"    public boolean supportsScript() {
        return getFeature(SCRIPT);
    }","  public void test82()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.script(false);
      jexlFeatures0.sideEffectGlobal(true);
}"
1471,"    public boolean supportsSideEffectGlobal() {
        return getFeature(SIDE_EFFECT_GLOBAL);
    }","  public void test83()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.script(false);
      jexlFeatures0.sideEffectGlobal(true);
}"
1472,"    public boolean supportsSideEffectGlobal() {
        return getFeature(SIDE_EFFECT_GLOBAL);
    }","  public void test84()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.arrayReferenceExpr(false);
      JexlFeatures jexlFeatures1 = jexlFeatures0.sideEffectGlobal(false);
}"
1473,"    public boolean supportsSideEffect() {
        return getFeature(SIDE_EFFECT);
    }","  public void test85()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.arrayReferenceExpr(false);
      JexlFeatures jexlFeatures1 = jexlFeatures0.sideEffectGlobal(false);
}"
1474,"    public boolean supportsAnnotation() {
        return getFeature(ANNOTATION);
    }","  public void test86()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      JexlFeatures jexlFeatures1 = jexlFeatures0.annotation(false);
      jexlFeatures1.sideEffectGlobal(true);
}"
1475,"    public boolean supportsSideEffectGlobal() {
        return getFeature(SIDE_EFFECT_GLOBAL);
    }","  public void test87()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      JexlFeatures jexlFeatures1 = jexlFeatures0.annotation(false);
      jexlFeatures1.sideEffectGlobal(true);
}"
1476,"    public boolean supportsRegister() {
        return getFeature(REGISTER);
    }","  public void test88()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.lexicalShade(true);
      JexlFeatures jexlFeatures1 = jexlFeatures0.sideEffectGlobal(false);
}"
1477,"    public boolean isLexical() {
        return getFeature(LEXICAL);
    }","  public void test89()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.lexicalShade(true);
      JexlFeatures jexlFeatures1 = jexlFeatures0.sideEffectGlobal(false);
}"
1478,"    public boolean supportsSideEffect() {
        return getFeature(SIDE_EFFECT);
    }","  public void test90()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.structuredLiteral(false);
      JexlFeatures jexlFeatures1 = jexlFeatures0.sideEffect(false);
}"
1479,"    public boolean supportsPragma() {
        return getFeature(PRAGMA);
    }","  public void test91()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.structuredLiteral(false);
      JexlFeatures jexlFeatures1 = jexlFeatures0.sideEffect(false);
}"
1480,"    public boolean supportsSideEffect() {
        return getFeature(SIDE_EFFECT);
    }","  public void test92()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.sideEffectGlobal(false);
      JexlFeatures jexlFeatures1 = jexlFeatures0.sideEffect(false);
}"
1481,"    public boolean supportsArrayReferenceExpr() {
        return getFeature(ARRAY_REF_EXPR);
    }","  public void test93()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.sideEffectGlobal(false);
      JexlFeatures jexlFeatures1 = jexlFeatures0.sideEffect(false);
}"
1482,"    public boolean supportsSideEffect() {
        return getFeature(SIDE_EFFECT);
    }","  public void test94()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.register(true);
      JexlFeatures jexlFeatures1 = jexlFeatures0.sideEffect(false);
}"
1483,"    public boolean supportsLoops() {
        return getFeature(LOOP);
    }","  public void test95()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.register(true);
      JexlFeatures jexlFeatures1 = jexlFeatures0.sideEffect(false);
}"
1484,"    public boolean supportsSideEffect() {
        return getFeature(SIDE_EFFECT);
    }","  public void test96()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.pragma(false);
      JexlFeatures jexlFeatures1 = jexlFeatures0.sideEffect(false);
}"
1485,"    public boolean supportsLambda() {
        return getFeature(LAMBDA);
    }","  public void test97()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.pragma(false);
      JexlFeatures jexlFeatures1 = jexlFeatures0.sideEffect(false);
}"
1486,"    public boolean supportsNewInstance() {
        return getFeature(NEW_INSTANCE);
    }","  public void test98()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.newInstance(false);
      jexlFeatures0.sideEffect(true);
}"
1487,"    public boolean supportsSideEffect() {
        return getFeature(SIDE_EFFECT);
    }","  public void test99()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.newInstance(false);
      jexlFeatures0.sideEffect(true);
}"
1488,"    public boolean supportsMethodCall() {
        return getFeature(METHOD_CALL);
    }","  public void test100()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.methodCall(false);
      JexlFeatures jexlFeatures1 = jexlFeatures0.sideEffect(false);
}"
1489,"    public boolean supportsArrayReferenceExpr() {
        return getFeature(ARRAY_REF_EXPR);
    }","  public void test101()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.methodCall(false);
      JexlFeatures jexlFeatures1 = jexlFeatures0.sideEffect(false);
}"
1490,"    public boolean supportsPragma() {
        return getFeature(PRAGMA);
    }","  public void test102()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      JexlFeatures jexlFeatures1 = jexlFeatures0.loops(false);
      JexlFeatures jexlFeatures2 = jexlFeatures1.sideEffect(false);
}"
1491,"    public boolean supportsLoops() {
        return getFeature(LOOP);
    }","  public void test103()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      JexlFeatures jexlFeatures1 = jexlFeatures0.loops(false);
      JexlFeatures jexlFeatures2 = jexlFeatures1.sideEffect(false);
}"
1492,"    public boolean supportsSideEffect() {
        return getFeature(SIDE_EFFECT);
    }","  public void test104()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      JexlFeatures jexlFeatures1 = jexlFeatures0.localVar(false);
      JexlFeatures jexlFeatures2 = jexlFeatures1.sideEffect(false);
}"
1493,"    public boolean supportsNewInstance() {
        return getFeature(NEW_INSTANCE);
    }","  public void test105()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      JexlFeatures jexlFeatures1 = jexlFeatures0.localVar(false);
      JexlFeatures jexlFeatures2 = jexlFeatures1.sideEffect(false);
}"
1494,"    public boolean supportsLambda() {
        return getFeature(LAMBDA);
    }","  public void test106()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.lambda(false);
      JexlFeatures jexlFeatures1 = jexlFeatures0.sideEffect(false);
}"
1495,"    public boolean supportsExpression() {
        return !getFeature(SCRIPT);
    }","  public void test107()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.lambda(false);
      JexlFeatures jexlFeatures1 = jexlFeatures0.sideEffect(false);
}"
1496,"    public boolean supportsScript() {
        return getFeature(SCRIPT);
    }","  public void test108()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.script(false);
      JexlFeatures jexlFeatures1 = jexlFeatures0.sideEffect(false);
}"
1497,"    public boolean supportsLoops() {
        return getFeature(LOOP);
    }","  public void test109()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.script(false);
      JexlFeatures jexlFeatures1 = jexlFeatures0.sideEffect(false);
}"
1498,"    public boolean supportsSideEffect() {
        return getFeature(SIDE_EFFECT);
    }","  public void test110()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.arrayReferenceExpr(false);
      JexlFeatures jexlFeatures1 = jexlFeatures0.sideEffect(false);
}"
1499,"    public boolean supportsStructuredLiteral() {
        return getFeature(STRUCTURED_LITERAL);
    }","  public void test111()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.arrayReferenceExpr(false);
      JexlFeatures jexlFeatures1 = jexlFeatures0.sideEffect(false);
}"
1500,"    public boolean supportsSideEffect() {
        return getFeature(SIDE_EFFECT);
    }","  public void test112()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      JexlFeatures jexlFeatures1 = jexlFeatures0.annotation(false);
      jexlFeatures1.sideEffect(true);
}"
1501,"    public boolean supportsAnnotation() {
        return getFeature(ANNOTATION);
    }","  public void test113()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      JexlFeatures jexlFeatures1 = jexlFeatures0.annotation(false);
      jexlFeatures1.sideEffect(true);
}"
1502,"    public boolean isLexicalShade() {
        return getFeature(LEXICAL_SHADE);
    }","  public void test114()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      JexlFeatures jexlFeatures1 = jexlFeatures0.lexicalShade(true);
      JexlFeatures jexlFeatures2 = jexlFeatures1.sideEffect(true);
}"
1503,"    public boolean supportsRegister() {
        return getFeature(REGISTER);
    }","  public void test115()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      JexlFeatures jexlFeatures1 = jexlFeatures0.lexicalShade(true);
      JexlFeatures jexlFeatures2 = jexlFeatures1.sideEffect(true);
}"
1504,"    public boolean isLexical() {
        return getFeature(LEXICAL);
    }","  public void test116()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      JexlFeatures jexlFeatures1 = jexlFeatures0.lexical(true);
      JexlFeatures jexlFeatures2 = jexlFeatures1.sideEffect(false);
}"
1505,"    public boolean supportsRegister() {
        return getFeature(REGISTER);
    }","  public void test117()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      JexlFeatures jexlFeatures1 = jexlFeatures0.lexical(true);
      JexlFeatures jexlFeatures2 = jexlFeatures1.sideEffect(false);
}"
1506,"    public boolean supportsExpression() {
        return !getFeature(SCRIPT);
    }","  public void test118()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.structuredLiteral(false);
      JexlFeatures jexlFeatures1 = jexlFeatures0.script(false);
}"
1507,"    public boolean supportsLoops() {
        return getFeature(LOOP);
    }","  public void test119()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.structuredLiteral(false);
      JexlFeatures jexlFeatures1 = jexlFeatures0.script(false);
}"
1508,"    public boolean supportsExpression() {
        return !getFeature(SCRIPT);
    }","  public void test120()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.sideEffectGlobal(false);
      JexlFeatures jexlFeatures1 = jexlFeatures0.script(false);
}"
1509,"    public boolean supportsLocalVar() {
        return getFeature(LOCAL_VAR);
    }","  public void test121()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.sideEffectGlobal(false);
      JexlFeatures jexlFeatures1 = jexlFeatures0.script(false);
}"
1510,"    public boolean supportsScript() {
        return getFeature(SCRIPT);
    }","  public void test122()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.sideEffect(false);
      jexlFeatures0.script(true);
}"
1511,"    public boolean supportsSideEffect() {
        return getFeature(SIDE_EFFECT);
    }","  public void test123()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.sideEffect(false);
      jexlFeatures0.script(true);
}"
1512,"    public boolean supportsRegister() {
        return getFeature(REGISTER);
    }","  public void test124()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
}"
1513,"    public boolean supportsRegister() {
        return getFeature(REGISTER);
    }","  public void test125()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.register(true);
      jexlFeatures0.script(true);
}"
1514,"    public boolean supportsMethodCall() {
        return getFeature(METHOD_CALL);
    }","  public void test126()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.pragma(false);
      JexlFeatures jexlFeatures1 = jexlFeatures0.script(false);
}"
1515,"    public boolean supportsExpression() {
        return !getFeature(SCRIPT);
    }","  public void test127()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.pragma(false);
      JexlFeatures jexlFeatures1 = jexlFeatures0.script(false);
}"
1516,"    public boolean supportsNewInstance() {
        return getFeature(NEW_INSTANCE);
    }","  public void test128()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.newInstance(false);
      JexlFeatures jexlFeatures1 = jexlFeatures0.script(false);
}"
1517,"    public boolean supportsPragma() {
        return getFeature(PRAGMA);
    }","  public void test129()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.newInstance(false);
      JexlFeatures jexlFeatures1 = jexlFeatures0.script(false);
}"
1518,"    public boolean supportsMethodCall() {
        return getFeature(METHOD_CALL);
    }","  public void test130()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.methodCall(false);
      JexlFeatures jexlFeatures1 = jexlFeatures0.script(false);
}"
1519,"    public boolean supportsSideEffectGlobal() {
        return getFeature(SIDE_EFFECT_GLOBAL);
    }","  public void test131()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.methodCall(false);
      JexlFeatures jexlFeatures1 = jexlFeatures0.script(false);
}"
1520,"    public boolean supportsSideEffect() {
        return getFeature(SIDE_EFFECT);
    }","  public void test132()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      JexlFeatures jexlFeatures1 = jexlFeatures0.loops(false);
      JexlFeatures jexlFeatures2 = jexlFeatures1.script(false);
}"
1521,"    public boolean supportsExpression() {
        return !getFeature(SCRIPT);
    }","  public void test133()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      JexlFeatures jexlFeatures1 = jexlFeatures0.loops(false);
      JexlFeatures jexlFeatures2 = jexlFeatures1.script(false);
}"
1522,"    public boolean supportsLocalVar() {
        return getFeature(LOCAL_VAR);
    }","  public void test134()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
}"
1523,"    public boolean supportsLocalVar() {
        return getFeature(LOCAL_VAR);
    }","  public void test135()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.localVar(false);
      jexlFeatures0.script(true);
}"
1524,"    public boolean supportsLambda() {
        return getFeature(LAMBDA);
    }","  public void test136()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.lambda(false);
      JexlFeatures jexlFeatures1 = jexlFeatures0.script(false);
}"
1525,"    public boolean supportsSideEffect() {
        return getFeature(SIDE_EFFECT);
    }","  public void test137()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.lambda(false);
      JexlFeatures jexlFeatures1 = jexlFeatures0.script(false);
}"
1526,"    public boolean supportsLocalVar() {
        return getFeature(LOCAL_VAR);
    }","  public void test138()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.arrayReferenceExpr(false);
      JexlFeatures jexlFeatures1 = jexlFeatures0.script(true);
}"
1527,"    public boolean supportsArrayReferenceExpr() {
        return getFeature(ARRAY_REF_EXPR);
    }","  public void test139()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.arrayReferenceExpr(false);
      JexlFeatures jexlFeatures1 = jexlFeatures0.script(true);
}"
1528,"    public boolean supportsAnnotation() {
        return getFeature(ANNOTATION);
    }","  public void test140()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.annotation(false);
      JexlFeatures jexlFeatures1 = jexlFeatures0.script(false);
}"
1529,"    public boolean supportsSideEffect() {
        return getFeature(SIDE_EFFECT);
    }","  public void test141()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.annotation(false);
      JexlFeatures jexlFeatures1 = jexlFeatures0.script(false);
}"
1530,"    public boolean isLexicalShade() {
        return getFeature(LEXICAL_SHADE);
    }","  public void test142()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      JexlFeatures jexlFeatures1 = jexlFeatures0.lexicalShade(true);
      JexlFeatures jexlFeatures2 = jexlFeatures1.script(true);
}"
1531,"    public boolean supportsRegister() {
        return getFeature(REGISTER);
    }","  public void test143()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      JexlFeatures jexlFeatures1 = jexlFeatures0.lexicalShade(true);
      JexlFeatures jexlFeatures2 = jexlFeatures1.script(true);
}"
1532,"    public boolean supportsStructuredLiteral() {
        return getFeature(STRUCTURED_LITERAL);
    }","  public void test144()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      jexlFeatures0.structuredLiteral(false);
      JexlFeatures jexlFeatures1 = jexlFeatures0.reservedNames(linkedList0);
}"
1533,"    public boolean supportsSideEffectGlobal() {
        return getFeature(SIDE_EFFECT_GLOBAL);
    }","  public void test145()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      jexlFeatures0.structuredLiteral(false);
      JexlFeatures jexlFeatures1 = jexlFeatures0.reservedNames(linkedList0);
}"
1534,"    public boolean supportsSideEffectGlobal() {
        return getFeature(SIDE_EFFECT_GLOBAL);
    }","  public void test146()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.sideEffectGlobal(false);
      JexlFeatures jexlFeatures1 = jexlFeatures0.reservedNames((Collection<String>) null);
}"
1535,"    public boolean supportsStructuredLiteral() {
        return getFeature(STRUCTURED_LITERAL);
    }","  public void test147()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.sideEffectGlobal(false);
      JexlFeatures jexlFeatures1 = jexlFeatures0.reservedNames((Collection<String>) null);
}"
1536,"    public boolean supportsLocalVar() {
        return getFeature(LOCAL_VAR);
    }","  public void test148()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.sideEffect(false);
      Set<String> set0 = jexlFeatures0.getReservedNames();
      JexlFeatures jexlFeatures1 = jexlFeatures0.reservedNames(set0);
}"
1537,"    public boolean supportsSideEffect() {
        return getFeature(SIDE_EFFECT);
    }","  public void test149()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.sideEffect(false);
      Set<String> set0 = jexlFeatures0.getReservedNames();
      JexlFeatures jexlFeatures1 = jexlFeatures0.reservedNames(set0);
}"
1538,"    public boolean supportsRegister() {
        return getFeature(REGISTER);
    }","  public void test150()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
}"
1539,"    public boolean supportsRegister() {
        return getFeature(REGISTER);
    }","  public void test151()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.register(true);
      Set<String> set0 = jexlFeatures0.getReservedNames();
      jexlFeatures0.reservedNames(set0);
}"
1540,"    public boolean supportsPragma() {
        return getFeature(PRAGMA);
    }","  public void test152()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      jexlFeatures0.pragma(false);
      JexlFeatures jexlFeatures1 = jexlFeatures0.reservedNames(linkedList0);
}"
1541,"    public boolean supportsSideEffect() {
        return getFeature(SIDE_EFFECT);
    }","  public void test153()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      jexlFeatures0.pragma(false);
      JexlFeatures jexlFeatures1 = jexlFeatures0.reservedNames(linkedList0);
}"
1542,"    public boolean supportsNewInstance() {
        return getFeature(NEW_INSTANCE);
    }","  public void test154()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.newInstance(false);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JexlFeatures jexlFeatures1 = jexlFeatures0.reservedNames(linkedList0);
}"
1543,"    public boolean supportsAnnotation() {
        return getFeature(ANNOTATION);
    }","  public void test155()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.newInstance(false);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JexlFeatures jexlFeatures1 = jexlFeatures0.reservedNames(linkedList0);
}"
1544,"    public boolean supportsExpression() {
        return !getFeature(SCRIPT);
    }","  public void test156()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      JexlFeatures jexlFeatures1 = jexlFeatures0.methodCall(false);
      JexlFeatures jexlFeatures2 = jexlFeatures1.reservedNames((Collection<String>) null);
}"
1545,"    public boolean supportsMethodCall() {
        return getFeature(METHOD_CALL);
    }","  public void test157()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      JexlFeatures jexlFeatures1 = jexlFeatures0.methodCall(false);
      JexlFeatures jexlFeatures2 = jexlFeatures1.reservedNames((Collection<String>) null);
}"
1546,"    public boolean supportsLambda() {
        return getFeature(LAMBDA);
    }","  public void test158()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.loops(false);
      JexlFeatures jexlFeatures1 = jexlFeatures0.reservedNames((Collection<String>) null);
}"
1547,"    public boolean supportsLoops() {
        return getFeature(LOOP);
    }","  public void test159()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.loops(false);
      JexlFeatures jexlFeatures1 = jexlFeatures0.reservedNames((Collection<String>) null);
}"
1548,"    public boolean supportsLocalVar() {
        return getFeature(LOCAL_VAR);
    }","  public void test160()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
}"
1549,"    public boolean supportsLocalVar() {
        return getFeature(LOCAL_VAR);
    }","  public void test161()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.localVar(false);
      jexlFeatures0.reservedNames((Collection<String>) null);
}"
1550,"    public boolean supportsLambda() {
        return getFeature(LAMBDA);
    }","  public void test162()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.lambda(false);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JexlFeatures jexlFeatures1 = jexlFeatures0.reservedNames(linkedList0);
}"
1551,"    public boolean supportsArrayReferenceExpr() {
        return getFeature(ARRAY_REF_EXPR);
    }","  public void test163()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.lambda(false);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JexlFeatures jexlFeatures1 = jexlFeatures0.reservedNames(linkedList0);
}"
1552,"    public boolean supportsExpression() {
        return !getFeature(SCRIPT);
    }","  public void test164()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      JexlFeatures jexlFeatures1 = jexlFeatures0.script(false);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JexlFeatures jexlFeatures2 = jexlFeatures1.reservedNames(linkedList0);
}"
1553,"    public boolean supportsStructuredLiteral() {
        return getFeature(STRUCTURED_LITERAL);
    }","  public void test165()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      JexlFeatures jexlFeatures1 = jexlFeatures0.script(false);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JexlFeatures jexlFeatures2 = jexlFeatures1.reservedNames(linkedList0);
}"
1554,"    public boolean supportsArrayReferenceExpr() {
        return getFeature(ARRAY_REF_EXPR);
    }","  public void test166()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.arrayReferenceExpr(false);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JexlFeatures jexlFeatures1 = jexlFeatures0.reservedNames(linkedList0);
}"
1555,"    public boolean supportsLocalVar() {
        return getFeature(LOCAL_VAR);
    }","  public void test167()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.arrayReferenceExpr(false);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JexlFeatures jexlFeatures1 = jexlFeatures0.reservedNames(linkedList0);
}"
1556,"    public boolean supportsAnnotation() {
        return getFeature(ANNOTATION);
    }","  public void test168()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      jexlFeatures0.annotation(false);
      JexlFeatures jexlFeatures1 = jexlFeatures0.reservedNames(linkedList0);
}"
1557,"    public boolean supportsScript() {
        return getFeature(SCRIPT);
    }","  public void test169()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      jexlFeatures0.annotation(false);
      JexlFeatures jexlFeatures1 = jexlFeatures0.reservedNames(linkedList0);
}"
1558,"    public boolean supportsRegister() {
        return getFeature(REGISTER);
    }","  public void test170()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.lexicalShade(true);
      JexlFeatures jexlFeatures1 = jexlFeatures0.reservedNames((Collection<String>) null);
}"
1559,"    public boolean isLexical() {
        return getFeature(LEXICAL);
    }","  public void test171()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.lexicalShade(true);
      JexlFeatures jexlFeatures1 = jexlFeatures0.reservedNames((Collection<String>) null);
}"
1560,"    public boolean supportsStructuredLiteral() {
        return getFeature(STRUCTURED_LITERAL);
    }","  public void test172()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      JexlFeatures jexlFeatures1 = jexlFeatures0.structuredLiteral(false);
      JexlFeatures jexlFeatures2 = jexlFeatures1.register(false);
}"
1561,"    public boolean supportsScript() {
        return getFeature(SCRIPT);
    }","  public void test173()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      JexlFeatures jexlFeatures1 = jexlFeatures0.structuredLiteral(false);
      JexlFeatures jexlFeatures2 = jexlFeatures1.register(false);
}"
1562,"    public boolean supportsSideEffectGlobal() {
        return getFeature(SIDE_EFFECT_GLOBAL);
    }","  public void test174()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      JexlFeatures jexlFeatures1 = jexlFeatures0.sideEffectGlobal(false);
      JexlFeatures jexlFeatures2 = jexlFeatures1.register(false);
}"
1563,"    public boolean supportsArrayReferenceExpr() {
        return getFeature(ARRAY_REF_EXPR);
    }","  public void test175()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      JexlFeatures jexlFeatures1 = jexlFeatures0.sideEffectGlobal(false);
      JexlFeatures jexlFeatures2 = jexlFeatures1.register(false);
}"
1564,"    public boolean supportsSideEffect() {
        return getFeature(SIDE_EFFECT);
    }","  public void test176()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.sideEffect(false);
      JexlFeatures jexlFeatures1 = jexlFeatures0.register(true);
}"
1565,"    public boolean supportsLocalVar() {
        return getFeature(LOCAL_VAR);
    }","  public void test177()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.sideEffect(false);
      JexlFeatures jexlFeatures1 = jexlFeatures0.register(true);
}"
1566,"    public boolean supportsPragma() {
        return getFeature(PRAGMA);
    }","  public void test178()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.pragma(false);
      JexlFeatures jexlFeatures1 = jexlFeatures0.register(false);
}"
1567,"    public boolean supportsSideEffect() {
        return getFeature(SIDE_EFFECT);
    }","  public void test179()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.pragma(false);
      JexlFeatures jexlFeatures1 = jexlFeatures0.register(false);
}"
1568,"    public boolean supportsNewInstance() {
        return getFeature(NEW_INSTANCE);
    }","  public void test180()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.newInstance(false);
      JexlFeatures jexlFeatures1 = jexlFeatures0.register(true);
}"
1569,"    public boolean supportsPragma() {
        return getFeature(PRAGMA);
    }","  public void test181()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.newInstance(false);
      JexlFeatures jexlFeatures1 = jexlFeatures0.register(true);
}"
1570,"    public boolean supportsMethodCall() {
        return getFeature(METHOD_CALL);
    }","  public void test182()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.methodCall(false);
      JexlFeatures jexlFeatures1 = jexlFeatures0.register(true);
}"
1571,"    public boolean supportsSideEffectGlobal() {
        return getFeature(SIDE_EFFECT_GLOBAL);
    }","  public void test183()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.methodCall(false);
      JexlFeatures jexlFeatures1 = jexlFeatures0.register(true);
}"
1572,"    public boolean supportsLoops() {
        return getFeature(LOOP);
    }","  public void test184()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.loops(false);
      JexlFeatures jexlFeatures1 = jexlFeatures0.register(true);
}"
1573,"    public boolean supportsStructuredLiteral() {
        return getFeature(STRUCTURED_LITERAL);
    }","  public void test185()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.loops(false);
      JexlFeatures jexlFeatures1 = jexlFeatures0.register(true);
}"
1574,"    public boolean supportsLocalVar() {
        return getFeature(LOCAL_VAR);
    }","  public void test186()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
}"
1575,"    public boolean supportsLocalVar() {
        return getFeature(LOCAL_VAR);
    }","  public void test187()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.localVar(false);
      jexlFeatures0.register(false);
}"
1576,"    public boolean supportsNewInstance() {
        return getFeature(NEW_INSTANCE);
    }","  public void test188()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.lambda(false);
      JexlFeatures jexlFeatures1 = jexlFeatures0.register(true);
}"
1577,"    public boolean supportsLambda() {
        return getFeature(LAMBDA);
    }","  public void test189()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.lambda(false);
      JexlFeatures jexlFeatures1 = jexlFeatures0.register(true);
}"
1578,"    public boolean supportsExpression() {
        return !getFeature(SCRIPT);
    }","  public void test190()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      JexlFeatures jexlFeatures1 = jexlFeatures0.script(false);
      JexlFeatures jexlFeatures2 = jexlFeatures1.register(false);
}"
1579,"    public boolean supportsArrayReferenceExpr() {
        return getFeature(ARRAY_REF_EXPR);
    }","  public void test191()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      JexlFeatures jexlFeatures1 = jexlFeatures0.script(false);
      JexlFeatures jexlFeatures2 = jexlFeatures1.register(false);
}"
1580,"    public boolean supportsLoops() {
        return getFeature(LOOP);
    }","  public void test192()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.arrayReferenceExpr(false);
      JexlFeatures jexlFeatures1 = jexlFeatures0.register(false);
}"
1581,"    public boolean supportsArrayReferenceExpr() {
        return getFeature(ARRAY_REF_EXPR);
    }","  public void test193()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.arrayReferenceExpr(false);
      JexlFeatures jexlFeatures1 = jexlFeatures0.register(false);
}"
1582,"    public boolean supportsExpression() {
        return !getFeature(SCRIPT);
    }","  public void test194()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      JexlFeatures jexlFeatures1 = jexlFeatures0.annotation(false);
      JexlFeatures jexlFeatures2 = jexlFeatures1.register(true);
}"
1583,"    public boolean supportsAnnotation() {
        return getFeature(ANNOTATION);
    }","  public void test195()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      JexlFeatures jexlFeatures1 = jexlFeatures0.annotation(false);
      JexlFeatures jexlFeatures2 = jexlFeatures1.register(true);
}"
1584,"    public boolean supportsRegister() {
        return getFeature(REGISTER);
    }","  public void test196()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      JexlFeatures jexlFeatures1 = jexlFeatures0.lexicalShade(true);
}"
1585,"    public boolean isLexicalShade() {
        return getFeature(LEXICAL_SHADE);
    }","  public void test197()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      JexlFeatures jexlFeatures1 = jexlFeatures0.lexicalShade(true);
      jexlFeatures0.register(true);
}"
1586,"    public boolean supportsPragma() {
        return getFeature(PRAGMA);
    }","  public void test198()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.structuredLiteral(false);
      JexlFeatures jexlFeatures1 = jexlFeatures0.pragma(false);
}"
1587,"    public boolean supportsLocalVar() {
        return getFeature(LOCAL_VAR);
    }","  public void test199()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.structuredLiteral(false);
      JexlFeatures jexlFeatures1 = jexlFeatures0.pragma(false);
}"
1588,"    public boolean supportsPragma() {
        return getFeature(PRAGMA);
    }","  public void test200()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.sideEffectGlobal(false);
      jexlFeatures0.pragma(true);
}"
1589,"    public boolean supportsSideEffectGlobal() {
        return getFeature(SIDE_EFFECT_GLOBAL);
    }","  public void test201()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.sideEffectGlobal(false);
      jexlFeatures0.pragma(true);
}"
1590,"    public boolean supportsPragma() {
        return getFeature(PRAGMA);
    }","  public void test202()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.sideEffect(false);
      JexlFeatures jexlFeatures1 = jexlFeatures0.pragma(false);
}"
1591,"    public boolean supportsExpression() {
        return !getFeature(SCRIPT);
    }","  public void test203()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.sideEffect(false);
      JexlFeatures jexlFeatures1 = jexlFeatures0.pragma(false);
}"
1592,"    public boolean supportsRegister() {
        return getFeature(REGISTER);
    }","  public void test204()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
}"
1593,"    public boolean supportsRegister() {
        return getFeature(REGISTER);
    }","  public void test205()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.register(true);
      jexlFeatures0.pragma(true);
}"
1594,"    public boolean supportsPragma() {
        return getFeature(PRAGMA);
    }","  public void test206()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.newInstance(false);
      JexlFeatures jexlFeatures1 = jexlFeatures0.pragma(false);
}"
1595,"    public boolean supportsSideEffect() {
        return getFeature(SIDE_EFFECT);
    }","  public void test207()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.newInstance(false);
      JexlFeatures jexlFeatures1 = jexlFeatures0.pragma(false);
}"
1596,"    public boolean supportsLocalVar() {
        return getFeature(LOCAL_VAR);
    }","  public void test208()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      JexlFeatures jexlFeatures1 = jexlFeatures0.methodCall(false);
      JexlFeatures jexlFeatures2 = jexlFeatures1.pragma(true);
}"
1597,"    public boolean supportsMethodCall() {
        return getFeature(METHOD_CALL);
    }","  public void test209()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      JexlFeatures jexlFeatures1 = jexlFeatures0.methodCall(false);
      JexlFeatures jexlFeatures2 = jexlFeatures1.pragma(true);
}"
1598,"    public boolean supportsPragma() {
        return getFeature(PRAGMA);
    }","  public void test210()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.loops(false);
      JexlFeatures jexlFeatures1 = jexlFeatures0.pragma(false);
}"
1599,"    public boolean supportsExpression() {
        return !getFeature(SCRIPT);
    }","  public void test211()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.loops(false);
      JexlFeatures jexlFeatures1 = jexlFeatures0.pragma(false);
}"
1600,"    public boolean supportsLoops() {
        return getFeature(LOOP);
    }","  public void test212()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      JexlFeatures jexlFeatures1 = jexlFeatures0.localVar(false);
      JexlFeatures jexlFeatures2 = jexlFeatures1.pragma(false);
}"
1601,"    public boolean supportsPragma() {
        return getFeature(PRAGMA);
    }","  public void test213()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      JexlFeatures jexlFeatures1 = jexlFeatures0.localVar(false);
      JexlFeatures jexlFeatures2 = jexlFeatures1.pragma(false);
}"
1602,"    public boolean supportsPragma() {
        return getFeature(PRAGMA);
    }","  public void test214()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.lambda(false);
      JexlFeatures jexlFeatures1 = jexlFeatures0.pragma(false);
}"
1603,"    public boolean supportsNewInstance() {
        return getFeature(NEW_INSTANCE);
    }","  public void test215()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.lambda(false);
      JexlFeatures jexlFeatures1 = jexlFeatures0.pragma(false);
}"
1604,"    public boolean supportsLoops() {
        return getFeature(LOOP);
    }","  public void test216()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      JexlFeatures jexlFeatures1 = jexlFeatures0.script(false);
      JexlFeatures jexlFeatures2 = jexlFeatures1.pragma(false);
}"
1605,"    public boolean supportsScript() {
        return getFeature(SCRIPT);
    }","  public void test217()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      JexlFeatures jexlFeatures1 = jexlFeatures0.script(false);
      JexlFeatures jexlFeatures2 = jexlFeatures1.pragma(false);
}"
1606,"    public boolean supportsPragma() {
        return getFeature(PRAGMA);
    }","  public void test218()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.arrayReferenceExpr(false);
      JexlFeatures jexlFeatures1 = jexlFeatures0.pragma(false);
}"
1607,"    public boolean supportsLoops() {
        return getFeature(LOOP);
    }","  public void test219()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.arrayReferenceExpr(false);
      JexlFeatures jexlFeatures1 = jexlFeatures0.pragma(false);
}"
1608,"    public boolean supportsSideEffect() {
        return getFeature(SIDE_EFFECT);
    }","  public void test220()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      JexlFeatures jexlFeatures1 = jexlFeatures0.annotation(false);
      JexlFeatures jexlFeatures2 = jexlFeatures1.pragma(false);
}"
1609,"    public boolean supportsPragma() {
        return getFeature(PRAGMA);
    }","  public void test221()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      JexlFeatures jexlFeatures1 = jexlFeatures0.annotation(false);
      JexlFeatures jexlFeatures2 = jexlFeatures1.pragma(false);
}"
1610,"    public boolean supportsRegister() {
        return getFeature(REGISTER);
    }","  public void test222()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.lexicalShade(true);
      JexlFeatures jexlFeatures1 = jexlFeatures0.pragma(false);
}"
1611,"    public boolean isLexicalShade() {
        return getFeature(LEXICAL_SHADE);
    }","  public void test223()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.lexicalShade(true);
      JexlFeatures jexlFeatures1 = jexlFeatures0.pragma(false);
}"
1612,"    public boolean supportsNewInstance() {
        return getFeature(NEW_INSTANCE);
    }","  public void test224()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.structuredLiteral(false);
      JexlFeatures jexlFeatures1 = jexlFeatures0.newInstance(false);
}"
1613,"    public boolean supportsSideEffectGlobal() {
        return getFeature(SIDE_EFFECT_GLOBAL);
    }","  public void test225()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.structuredLiteral(false);
      JexlFeatures jexlFeatures1 = jexlFeatures0.newInstance(false);
}"
1614,"    public boolean supportsNewInstance() {
        return getFeature(NEW_INSTANCE);
    }","  public void test226()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.sideEffectGlobal(false);
      jexlFeatures0.newInstance(true);
}"
1615,"    public boolean supportsSideEffectGlobal() {
        return getFeature(SIDE_EFFECT_GLOBAL);
    }","  public void test227()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.sideEffectGlobal(false);
      jexlFeatures0.newInstance(true);
}"
1616,"    public boolean supportsSideEffect() {
        return getFeature(SIDE_EFFECT);
    }","  public void test228()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.sideEffect(false);
      jexlFeatures0.newInstance(true);
}"
1617,"    public boolean supportsNewInstance() {
        return getFeature(NEW_INSTANCE);
    }","  public void test229()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.sideEffect(false);
      jexlFeatures0.newInstance(true);
}"
1618,"    public boolean supportsRegister() {
        return getFeature(REGISTER);
    }","  public void test230()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
}"
1619,"    public boolean supportsRegister() {
        return getFeature(REGISTER);
    }","  public void test231()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      JexlFeatures jexlFeatures1 = jexlFeatures0.register(true);
      jexlFeatures1.newInstance(true);
}"
1620,"    public boolean supportsNewInstance() {
        return getFeature(NEW_INSTANCE);
    }","  public void test232()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.pragma(false);
      JexlFeatures jexlFeatures1 = jexlFeatures0.newInstance(false);
}"
1621,"    public boolean supportsLambda() {
        return getFeature(LAMBDA);
    }","  public void test233()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.pragma(false);
      JexlFeatures jexlFeatures1 = jexlFeatures0.newInstance(false);
}"
1622,"    public boolean supportsNewInstance() {
        return getFeature(NEW_INSTANCE);
    }","  public void test234()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      JexlFeatures jexlFeatures1 = jexlFeatures0.methodCall(false);
      JexlFeatures jexlFeatures2 = jexlFeatures1.newInstance(false);
}"
1623,"    public boolean supportsLocalVar() {
        return getFeature(LOCAL_VAR);
    }","  public void test235()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      JexlFeatures jexlFeatures1 = jexlFeatures0.methodCall(false);
      JexlFeatures jexlFeatures2 = jexlFeatures1.newInstance(false);
}"
1624,"    public boolean supportsLoops() {
        return getFeature(LOOP);
    }","  public void test236()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      JexlFeatures jexlFeatures1 = jexlFeatures0.loops(false);
      JexlFeatures jexlFeatures2 = jexlFeatures1.newInstance(true);
}"
1625,"    public boolean supportsStructuredLiteral() {
        return getFeature(STRUCTURED_LITERAL);
    }","  public void test237()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      JexlFeatures jexlFeatures1 = jexlFeatures0.loops(false);
      JexlFeatures jexlFeatures2 = jexlFeatures1.newInstance(true);
}"
1626,"    public boolean supportsNewInstance() {
        return getFeature(NEW_INSTANCE);
    }","  public void test238()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      JexlFeatures jexlFeatures1 = jexlFeatures0.localVar(false);
      JexlFeatures jexlFeatures2 = jexlFeatures1.newInstance(false);
}"
1627,"    public boolean supportsArrayReferenceExpr() {
        return getFeature(ARRAY_REF_EXPR);
    }","  public void test239()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      JexlFeatures jexlFeatures1 = jexlFeatures0.localVar(false);
      JexlFeatures jexlFeatures2 = jexlFeatures1.newInstance(false);
}"
1628,"    public boolean supportsLambda() {
        return getFeature(LAMBDA);
    }","  public void test240()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      JexlFeatures jexlFeatures1 = jexlFeatures0.lambda(false);
      JexlFeatures jexlFeatures2 = jexlFeatures1.newInstance(false);
}"
1629,"    public boolean supportsSideEffect() {
        return getFeature(SIDE_EFFECT);
    }","  public void test241()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      JexlFeatures jexlFeatures1 = jexlFeatures0.lambda(false);
      JexlFeatures jexlFeatures2 = jexlFeatures1.newInstance(false);
}"
1630,"    public boolean supportsExpression() {
        return !getFeature(SCRIPT);
    }","  public void test242()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.script(false);
      jexlFeatures0.newInstance(true);
}"
1631,"    public boolean supportsNewInstance() {
        return getFeature(NEW_INSTANCE);
    }","  public void test243()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.script(false);
      jexlFeatures0.newInstance(true);
}"
1632,"    public boolean supportsNewInstance() {
        return getFeature(NEW_INSTANCE);
    }","  public void test244()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.arrayReferenceExpr(false);
      JexlFeatures jexlFeatures1 = jexlFeatures0.newInstance(false);
}"
1633,"    public boolean supportsSideEffect() {
        return getFeature(SIDE_EFFECT);
    }","  public void test245()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.arrayReferenceExpr(false);
      JexlFeatures jexlFeatures1 = jexlFeatures0.newInstance(false);
}"
1634,"    public boolean supportsNewInstance() {
        return getFeature(NEW_INSTANCE);
    }","  public void test246()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.annotation(false);
      JexlFeatures jexlFeatures1 = jexlFeatures0.newInstance(false);
}"
1635,"    public boolean supportsSideEffect() {
        return getFeature(SIDE_EFFECT);
    }","  public void test247()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.annotation(false);
      JexlFeatures jexlFeatures1 = jexlFeatures0.newInstance(false);
}"
1636,"    public boolean supportsRegister() {
        return getFeature(REGISTER);
    }","  public void test248()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      JexlFeatures jexlFeatures1 = jexlFeatures0.lexicalShade(true);
      JexlFeatures jexlFeatures2 = jexlFeatures1.newInstance(true);
}"
1637,"    public boolean isLexical() {
        return getFeature(LEXICAL);
    }","  public void test249()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      JexlFeatures jexlFeatures1 = jexlFeatures0.lexicalShade(true);
      JexlFeatures jexlFeatures2 = jexlFeatures1.newInstance(true);
}"
1638,"    public boolean supportsStructuredLiteral() {
        return getFeature(STRUCTURED_LITERAL);
    }","  public void test250()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.structuredLiteral(false);
      JexlFeatures jexlFeatures1 = jexlFeatures0.namespaceTest(jexlFeatures0.TEST_STR_FALSE);
}"
1639,"    public boolean supportsLambda() {
        return getFeature(LAMBDA);
    }","  public void test251()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.structuredLiteral(false);
      JexlFeatures jexlFeatures1 = jexlFeatures0.namespaceTest(jexlFeatures0.TEST_STR_FALSE);
}"
1640,"    public boolean supportsSideEffectGlobal() {
        return getFeature(SIDE_EFFECT_GLOBAL);
    }","  public void test252()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      JexlFeatures jexlFeatures1 = jexlFeatures0.sideEffectGlobal(false);
      JexlFeatures jexlFeatures2 = jexlFeatures1.namespaceTest((Predicate<String>) null);
}"
1641,"    public boolean supportsLocalVar() {
        return getFeature(LOCAL_VAR);
    }","  public void test253()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      JexlFeatures jexlFeatures1 = jexlFeatures0.sideEffectGlobal(false);
      JexlFeatures jexlFeatures2 = jexlFeatures1.namespaceTest((Predicate<String>) null);
}"
1642,"    public boolean supportsSideEffect() {
        return getFeature(SIDE_EFFECT);
    }","  public void test254()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.sideEffect(false);
      JexlFeatures jexlFeatures1 = jexlFeatures0.namespaceTest(jexlFeatures0.TEST_STR_FALSE);
}"
1643,"    public boolean supportsLoops() {
        return getFeature(LOOP);
    }","  public void test255()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.sideEffect(false);
      JexlFeatures jexlFeatures1 = jexlFeatures0.namespaceTest(jexlFeatures0.TEST_STR_FALSE);
}"
1644,"    public boolean supportsRegister() {
        return getFeature(REGISTER);
    }","  public void test256()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
}"
1645,"    public boolean supportsRegister() {
        return getFeature(REGISTER);
    }","  public void test257()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.register(true);
      jexlFeatures0.namespaceTest(jexlFeatures0.TEST_STR_FALSE);
}"
1646,"    public boolean supportsPragma() {
        return getFeature(PRAGMA);
    }","  public void test258()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.pragma(false);
      JexlFeatures jexlFeatures1 = jexlFeatures0.namespaceTest(jexlFeatures0.TEST_STR_FALSE);
}"
1647,"    public boolean supportsSideEffectGlobal() {
        return getFeature(SIDE_EFFECT_GLOBAL);
    }","  public void test259()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.pragma(false);
      JexlFeatures jexlFeatures1 = jexlFeatures0.namespaceTest(jexlFeatures0.TEST_STR_FALSE);
}"
1648,"    public boolean supportsNewInstance() {
        return getFeature(NEW_INSTANCE);
    }","  public void test260()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      JexlFeatures jexlFeatures1 = jexlFeatures0.newInstance(false);
      JexlFeatures jexlFeatures2 = jexlFeatures1.namespaceTest(jexlFeatures0.TEST_STR_FALSE);
}"
1649,"    public boolean supportsExpression() {
        return !getFeature(SCRIPT);
    }","  public void test261()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      JexlFeatures jexlFeatures1 = jexlFeatures0.newInstance(false);
      JexlFeatures jexlFeatures2 = jexlFeatures1.namespaceTest(jexlFeatures0.TEST_STR_FALSE);
}"
1650,"    public boolean supportsMethodCall() {
        return getFeature(METHOD_CALL);
    }","  public void test262()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.methodCall(false);
      JexlFeatures jexlFeatures1 = jexlFeatures0.namespaceTest(jexlFeatures0.TEST_STR_FALSE);
}"
1651,"    public boolean supportsSideEffect() {
        return getFeature(SIDE_EFFECT);
    }","  public void test263()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.methodCall(false);
      JexlFeatures jexlFeatures1 = jexlFeatures0.namespaceTest(jexlFeatures0.TEST_STR_FALSE);
}"
1652,"    public boolean supportsSideEffect() {
        return getFeature(SIDE_EFFECT);
    }","  public void test264()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.loops(false);
      JexlFeatures jexlFeatures1 = jexlFeatures0.namespaceTest(jexlFeatures0.TEST_STR_FALSE);
}"
1653,"    public boolean supportsLoops() {
        return getFeature(LOOP);
    }","  public void test265()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.loops(false);
      JexlFeatures jexlFeatures1 = jexlFeatures0.namespaceTest(jexlFeatures0.TEST_STR_FALSE);
}"
1654,"    public boolean supportsLocalVar() {
        return getFeature(LOCAL_VAR);
    }","  public void test266()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
}"
1655,"    public boolean supportsLocalVar() {
        return getFeature(LOCAL_VAR);
    }","  public void test267()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      JexlFeatures jexlFeatures1 = jexlFeatures0.localVar(false);
      jexlFeatures1.namespaceTest(jexlFeatures0.TEST_STR_FALSE);
}"
1656,"    public boolean supportsRegister() {
        return getFeature(REGISTER);
    }","  public void test268()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      JexlFeatures jexlFeatures1 = jexlFeatures0.localVar(false);
      jexlFeatures1.namespaceTest(jexlFeatures0.TEST_STR_FALSE);
}"
1657,"    public boolean supportsLambda() {
        return getFeature(LAMBDA);
    }","  public void test269()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      JexlFeatures jexlFeatures1 = jexlFeatures0.lambda(false);
      JexlFeatures jexlFeatures2 = jexlFeatures0.namespaceTest(jexlFeatures1.TEST_STR_FALSE);
}"
1658,"    public boolean supportsArrayReferenceExpr() {
        return getFeature(ARRAY_REF_EXPR);
    }","  public void test270()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      JexlFeatures jexlFeatures1 = jexlFeatures0.lambda(false);
      JexlFeatures jexlFeatures2 = jexlFeatures0.namespaceTest(jexlFeatures1.TEST_STR_FALSE);
}"
1659,"    public boolean supportsExpression() {
        return !getFeature(SCRIPT);
    }","  public void test271()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      JexlFeatures jexlFeatures1 = jexlFeatures0.script(false);
      JexlFeatures jexlFeatures2 = jexlFeatures1.namespaceTest(jexlFeatures0.TEST_STR_FALSE);
}"
1660,"    public boolean supportsSideEffect() {
        return getFeature(SIDE_EFFECT);
    }","  public void test272()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      JexlFeatures jexlFeatures1 = jexlFeatures0.script(false);
      JexlFeatures jexlFeatures2 = jexlFeatures1.namespaceTest(jexlFeatures0.TEST_STR_FALSE);
}"
1661,"    public boolean supportsArrayReferenceExpr() {
        return getFeature(ARRAY_REF_EXPR);
    }","  public void test273()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.arrayReferenceExpr(false);
      JexlFeatures jexlFeatures1 = jexlFeatures0.namespaceTest(jexlFeatures0.TEST_STR_FALSE);
}"
1662,"    public boolean supportsExpression() {
        return !getFeature(SCRIPT);
    }","  public void test274()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.arrayReferenceExpr(false);
      JexlFeatures jexlFeatures1 = jexlFeatures0.namespaceTest(jexlFeatures0.TEST_STR_FALSE);
}"
1663,"    public boolean supportsAnnotation() {
        return getFeature(ANNOTATION);
    }","  public void test275()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      JexlFeatures jexlFeatures1 = jexlFeatures0.annotation(false);
      JexlFeatures jexlFeatures2 = jexlFeatures0.namespaceTest(jexlFeatures1.TEST_STR_FALSE);
}"
1664,"    public boolean supportsArrayReferenceExpr() {
        return getFeature(ARRAY_REF_EXPR);
    }","  public void test276()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      JexlFeatures jexlFeatures1 = jexlFeatures0.annotation(false);
      JexlFeatures jexlFeatures2 = jexlFeatures0.namespaceTest(jexlFeatures1.TEST_STR_FALSE);
}"
1665,"    public boolean supportsRegister() {
        return getFeature(REGISTER);
    }","  public void test277()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      JexlFeatures jexlFeatures1 = jexlFeatures0.lexicalShade(true);
      JexlFeatures jexlFeatures2 = jexlFeatures1.namespaceTest(jexlFeatures1.TEST_STR_FALSE);
}"
1666,"    public boolean isLexicalShade() {
        return getFeature(LEXICAL_SHADE);
    }","  public void test278()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      JexlFeatures jexlFeatures1 = jexlFeatures0.lexicalShade(true);
      JexlFeatures jexlFeatures2 = jexlFeatures1.namespaceTest(jexlFeatures1.TEST_STR_FALSE);
}"
1667,"    public boolean supportsStructuredLiteral() {
        return getFeature(STRUCTURED_LITERAL);
    }","  public void test279()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.structuredLiteral(false);
      JexlFeatures jexlFeatures1 = jexlFeatures0.methodCall(false);
}"
1668,"    public boolean supportsSideEffect() {
        return getFeature(SIDE_EFFECT);
    }","  public void test280()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.structuredLiteral(false);
      JexlFeatures jexlFeatures1 = jexlFeatures0.methodCall(false);
}"
1669,"    public boolean supportsMethodCall() {
        return getFeature(METHOD_CALL);
    }","  public void test281()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.sideEffectGlobal(false);
      jexlFeatures0.methodCall(true);
}"
1670,"    public boolean supportsSideEffectGlobal() {
        return getFeature(SIDE_EFFECT_GLOBAL);
    }","  public void test282()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.sideEffectGlobal(false);
      jexlFeatures0.methodCall(true);
}"
1671,"    public boolean supportsMethodCall() {
        return getFeature(METHOD_CALL);
    }","  public void test283()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.sideEffect(false);
      jexlFeatures0.methodCall(true);
}"
1672,"    public boolean supportsSideEffect() {
        return getFeature(SIDE_EFFECT);
    }","  public void test284()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.sideEffect(false);
      jexlFeatures0.methodCall(true);
}"
1673,"    public boolean supportsRegister() {
        return getFeature(REGISTER);
    }","  public void test285()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
}"
1674,"    public boolean supportsRegister() {
        return getFeature(REGISTER);
    }","  public void test286()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.register(true);
      jexlFeatures0.methodCall(true);
}"
1675,"    public boolean supportsPragma() {
        return getFeature(PRAGMA);
    }","  public void test287()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.pragma(false);
      JexlFeatures jexlFeatures1 = jexlFeatures0.methodCall(false);
}"
1676,"    public boolean supportsExpression() {
        return !getFeature(SCRIPT);
    }","  public void test288()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.pragma(false);
      JexlFeatures jexlFeatures1 = jexlFeatures0.methodCall(false);
}"
1677,"    public boolean supportsNewInstance() {
        return getFeature(NEW_INSTANCE);
    }","  public void test289()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.newInstance(false);
      jexlFeatures0.methodCall(true);
}"
1678,"    public boolean supportsMethodCall() {
        return getFeature(METHOD_CALL);
    }","  public void test290()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.newInstance(false);
      jexlFeatures0.methodCall(true);
}"
1679,"    public boolean supportsLoops() {
        return getFeature(LOOP);
    }","  public void test291()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.loops(false);
      jexlFeatures0.methodCall(true);
}"
1680,"    public boolean supportsMethodCall() {
        return getFeature(METHOD_CALL);
    }","  public void test292()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.loops(false);
      jexlFeatures0.methodCall(true);
}"
1681,"    public boolean supportsMethodCall() {
        return getFeature(METHOD_CALL);
    }","  public void test293()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      JexlFeatures jexlFeatures1 = jexlFeatures0.localVar(false);
      JexlFeatures jexlFeatures2 = jexlFeatures1.methodCall(false);
}"
1682,"    public boolean supportsLoops() {
        return getFeature(LOOP);
    }","  public void test294()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      JexlFeatures jexlFeatures1 = jexlFeatures0.localVar(false);
      JexlFeatures jexlFeatures2 = jexlFeatures1.methodCall(false);
}"
1683,"    public boolean supportsMethodCall() {
        return getFeature(METHOD_CALL);
    }","  public void test295()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.lambda(false);
      JexlFeatures jexlFeatures1 = jexlFeatures0.methodCall(false);
}"
1684,"    public boolean supportsSideEffectGlobal() {
        return getFeature(SIDE_EFFECT_GLOBAL);
    }","  public void test296()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.lambda(false);
      JexlFeatures jexlFeatures1 = jexlFeatures0.methodCall(false);
}"
1685,"    public boolean supportsScript() {
        return getFeature(SCRIPT);
    }","  public void test297()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.script(false);
      JexlFeatures jexlFeatures1 = jexlFeatures0.methodCall(true);
}"
1686,"    public boolean supportsLocalVar() {
        return getFeature(LOCAL_VAR);
    }","  public void test298()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.script(false);
      JexlFeatures jexlFeatures1 = jexlFeatures0.methodCall(true);
}"
1687,"    public boolean supportsMethodCall() {
        return getFeature(METHOD_CALL);
    }","  public void test299()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.arrayReferenceExpr(false);
      JexlFeatures jexlFeatures1 = jexlFeatures0.methodCall(false);
}"
1688,"    public boolean supportsLoops() {
        return getFeature(LOOP);
    }","  public void test300()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.arrayReferenceExpr(false);
      JexlFeatures jexlFeatures1 = jexlFeatures0.methodCall(false);
}"
1689,"    public boolean supportsAnnotation() {
        return getFeature(ANNOTATION);
    }","  public void test301()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      JexlFeatures jexlFeatures1 = jexlFeatures0.annotation(false);
      JexlFeatures jexlFeatures2 = jexlFeatures1.methodCall(true);
}"
1690,"    public boolean supportsLocalVar() {
        return getFeature(LOCAL_VAR);
    }","  public void test302()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      JexlFeatures jexlFeatures1 = jexlFeatures0.annotation(false);
      JexlFeatures jexlFeatures2 = jexlFeatures1.methodCall(true);
}"
1691,"    public boolean supportsRegister() {
        return getFeature(REGISTER);
    }","  public void test303()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.lexicalShade(true);
      JexlFeatures jexlFeatures1 = jexlFeatures0.methodCall(true);
}"
1692,"    public boolean isLexical() {
        return getFeature(LEXICAL);
    }","  public void test304()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.lexicalShade(true);
      JexlFeatures jexlFeatures1 = jexlFeatures0.methodCall(true);
}"
1693,"    public boolean supportsStructuredLiteral() {
        return getFeature(STRUCTURED_LITERAL);
    }","  public void test305()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.structuredLiteral(false);
      JexlFeatures jexlFeatures1 = jexlFeatures0.loops(false);
}"
1694,"    public boolean supportsExpression() {
        return !getFeature(SCRIPT);
    }","  public void test306()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.structuredLiteral(false);
      JexlFeatures jexlFeatures1 = jexlFeatures0.loops(false);
}"
1695,"    public boolean supportsSideEffectGlobal() {
        return getFeature(SIDE_EFFECT_GLOBAL);
    }","  public void test307()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      JexlFeatures jexlFeatures1 = jexlFeatures0.sideEffectGlobal(false);
      jexlFeatures1.loops(true);
}"
1696,"    public boolean supportsLoops() {
        return getFeature(LOOP);
    }","  public void test308()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      JexlFeatures jexlFeatures1 = jexlFeatures0.sideEffectGlobal(false);
      jexlFeatures1.loops(true);
}"
1697,"    public boolean supportsLoops() {
        return getFeature(LOOP);
    }","  public void test309()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      JexlFeatures jexlFeatures1 = jexlFeatures0.sideEffect(false);
      jexlFeatures1.loops(true);
}"
1698,"    public boolean supportsSideEffect() {
        return getFeature(SIDE_EFFECT);
    }","  public void test310()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      JexlFeatures jexlFeatures1 = jexlFeatures0.sideEffect(false);
      jexlFeatures1.loops(true);
}"
1699,"    public boolean supportsRegister() {
        return getFeature(REGISTER);
    }","  public void test311()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
}"
1700,"    public boolean supportsRegister() {
        return getFeature(REGISTER);
    }","  public void test312()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.register(true);
      jexlFeatures0.loops(true);
}"
1701,"    public boolean supportsLoops() {
        return getFeature(LOOP);
    }","  public void test313()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.pragma(false);
      JexlFeatures jexlFeatures1 = jexlFeatures0.loops(false);
}"
1702,"    public boolean supportsAnnotation() {
        return getFeature(ANNOTATION);
    }","  public void test314()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.pragma(false);
      JexlFeatures jexlFeatures1 = jexlFeatures0.loops(false);
}"
1703,"    public boolean supportsLoops() {
        return getFeature(LOOP);
    }","  public void test315()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.newInstance(false);
      JexlFeatures jexlFeatures1 = jexlFeatures0.loops(false);
}"
1704,"    public boolean supportsPragma() {
        return getFeature(PRAGMA);
    }","  public void test316()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.newInstance(false);
      JexlFeatures jexlFeatures1 = jexlFeatures0.loops(false);
}"
1705,"    public boolean supportsMethodCall() {
        return getFeature(METHOD_CALL);
    }","  public void test317()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.methodCall(false);
      JexlFeatures jexlFeatures1 = jexlFeatures0.loops(false);
}"
1706,"    public boolean supportsScript() {
        return getFeature(SCRIPT);
    }","  public void test318()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.methodCall(false);
      JexlFeatures jexlFeatures1 = jexlFeatures0.loops(false);
}"
1707,"    public boolean supportsLocalVar() {
        return getFeature(LOCAL_VAR);
    }","  public void test319()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
}"
1708,"    public boolean supportsLocalVar() {
        return getFeature(LOCAL_VAR);
    }","  public void test320()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      JexlFeatures jexlFeatures1 = jexlFeatures0.localVar(false);
      jexlFeatures1.loops(true);
}"
1709,"    public boolean supportsLoops() {
        return getFeature(LOOP);
    }","  public void test321()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.lambda(false);
      jexlFeatures0.loops(true);
}"
1710,"    public boolean supportsLambda() {
        return getFeature(LAMBDA);
    }","  public void test322()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.lambda(false);
      jexlFeatures0.loops(true);
}"
1711,"    public boolean supportsExpression() {
        return !getFeature(SCRIPT);
    }","  public void test323()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.script(false);
      jexlFeatures0.loops(true);
}"
1712,"    public boolean supportsLoops() {
        return getFeature(LOOP);
    }","  public void test324()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.script(false);
      jexlFeatures0.loops(true);
}"
1713,"    public boolean supportsArrayReferenceExpr() {
        return getFeature(ARRAY_REF_EXPR);
    }","  public void test325()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.arrayReferenceExpr(false);
      jexlFeatures0.loops(true);
}"
1714,"    public boolean supportsLoops() {
        return getFeature(LOOP);
    }","  public void test326()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.arrayReferenceExpr(false);
      jexlFeatures0.loops(true);
}"
1715,"    public boolean supportsAnnotation() {
        return getFeature(ANNOTATION);
    }","  public void test327()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.annotation(false);
      JexlFeatures jexlFeatures1 = jexlFeatures0.loops(false);
}"
1716,"    public boolean supportsSideEffectGlobal() {
        return getFeature(SIDE_EFFECT_GLOBAL);
    }","  public void test328()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.annotation(false);
      JexlFeatures jexlFeatures1 = jexlFeatures0.loops(false);
}"
1717,"    public boolean isLexical() {
        return getFeature(LEXICAL);
    }","  public void test329()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.lexicalShade(true);
      JexlFeatures jexlFeatures1 = jexlFeatures0.loops(false);
}"
1718,"    public boolean supportsRegister() {
        return getFeature(REGISTER);
    }","  public void test330()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.lexicalShade(true);
      JexlFeatures jexlFeatures1 = jexlFeatures0.loops(false);
}"
1719,"    public boolean supportsStructuredLiteral() {
        return getFeature(STRUCTURED_LITERAL);
    }","  public void test331()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.structuredLiteral(false);
      jexlFeatures0.localVar(true);
}"
1720,"    public boolean supportsLocalVar() {
        return getFeature(LOCAL_VAR);
    }","  public void test332()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.structuredLiteral(false);
      jexlFeatures0.localVar(true);
}"
1721,"    public boolean supportsSideEffectGlobal() {
        return getFeature(SIDE_EFFECT_GLOBAL);
    }","  public void test333()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      JexlFeatures jexlFeatures1 = jexlFeatures0.sideEffectGlobal(false);
      JexlFeatures jexlFeatures2 = jexlFeatures1.localVar(false);
}"
1722,"    public boolean supportsLambda() {
        return getFeature(LAMBDA);
    }","  public void test334()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      JexlFeatures jexlFeatures1 = jexlFeatures0.sideEffectGlobal(false);
      JexlFeatures jexlFeatures2 = jexlFeatures1.localVar(false);
}"
1723,"    public boolean supportsSideEffect() {
        return getFeature(SIDE_EFFECT);
    }","  public void test335()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      JexlFeatures jexlFeatures1 = jexlFeatures0.sideEffect(false);
      JexlFeatures jexlFeatures2 = jexlFeatures1.localVar(false);
}"
1724,"    public boolean supportsAnnotation() {
        return getFeature(ANNOTATION);
    }","  public void test336()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      JexlFeatures jexlFeatures1 = jexlFeatures0.sideEffect(false);
      JexlFeatures jexlFeatures2 = jexlFeatures1.localVar(false);
}"
1725,"    public boolean supportsRegister() {
        return getFeature(REGISTER);
    }","  public void test337()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
}"
1726,"    public boolean supportsRegister() {
        return getFeature(REGISTER);
    }","  public void test338()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.register(true);
      jexlFeatures0.localVar(true);
}"
1727,"    public boolean supportsMethodCall() {
        return getFeature(METHOD_CALL);
    }","  public void test339()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.pragma(false);
      JexlFeatures jexlFeatures1 = jexlFeatures0.localVar(false);
}"
1728,"    public boolean supportsPragma() {
        return getFeature(PRAGMA);
    }","  public void test340()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.pragma(false);
      JexlFeatures jexlFeatures1 = jexlFeatures0.localVar(false);
}"
1729,"    public boolean supportsLocalVar() {
        return getFeature(LOCAL_VAR);
    }","  public void test341()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.newInstance(false);
      jexlFeatures0.localVar(true);
}"
1730,"    public boolean supportsNewInstance() {
        return getFeature(NEW_INSTANCE);
    }","  public void test342()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.newInstance(false);
      jexlFeatures0.localVar(true);
}"
1731,"    public boolean supportsLocalVar() {
        return getFeature(LOCAL_VAR);
    }","  public void test343()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.methodCall(false);
      jexlFeatures0.localVar(true);
}"
1732,"    public boolean supportsMethodCall() {
        return getFeature(METHOD_CALL);
    }","  public void test344()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.methodCall(false);
      jexlFeatures0.localVar(true);
}"
1733,"    public boolean supportsLoops() {
        return getFeature(LOOP);
    }","  public void test345()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.loops(false);
      JexlFeatures jexlFeatures1 = jexlFeatures0.localVar(true);
}"
1734,"    public boolean supportsArrayReferenceExpr() {
        return getFeature(ARRAY_REF_EXPR);
    }","  public void test346()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.loops(false);
      JexlFeatures jexlFeatures1 = jexlFeatures0.localVar(true);
}"
1735,"    public boolean supportsLambda() {
        return getFeature(LAMBDA);
    }","  public void test347()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.lambda(false);
      JexlFeatures jexlFeatures1 = jexlFeatures0.localVar(false);
}"
1736,"    public boolean supportsLoops() {
        return getFeature(LOOP);
    }","  public void test348()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.lambda(false);
      JexlFeatures jexlFeatures1 = jexlFeatures0.localVar(false);
}"
1737,"    public boolean supportsExpression() {
        return !getFeature(SCRIPT);
    }","  public void test349()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.script(false);
      JexlFeatures jexlFeatures1 = jexlFeatures0.localVar(false);
}"
1738,"    public boolean supportsStructuredLiteral() {
        return getFeature(STRUCTURED_LITERAL);
    }","  public void test350()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.script(false);
      JexlFeatures jexlFeatures1 = jexlFeatures0.localVar(false);
}"
1739,"    public boolean supportsLocalVar() {
        return getFeature(LOCAL_VAR);
    }","  public void test351()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.arrayReferenceExpr(false);
      jexlFeatures0.localVar(true);
}"
1740,"    public boolean supportsArrayReferenceExpr() {
        return getFeature(ARRAY_REF_EXPR);
    }","  public void test352()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.arrayReferenceExpr(false);
      jexlFeatures0.localVar(true);
}"
1741,"    public boolean supportsAnnotation() {
        return getFeature(ANNOTATION);
    }","  public void test353()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.annotation(false);
      JexlFeatures jexlFeatures1 = jexlFeatures0.localVar(false);
}"
1742,"    public boolean supportsMethodCall() {
        return getFeature(METHOD_CALL);
    }","  public void test354()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.annotation(false);
      JexlFeatures jexlFeatures1 = jexlFeatures0.localVar(false);
}"
1743,"    public boolean supportsRegister() {
        return getFeature(REGISTER);
    }","  public void test355()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.lexicalShade(true);
      JexlFeatures jexlFeatures1 = jexlFeatures0.localVar(true);
}"
1744,"    public boolean isLexical() {
        return getFeature(LEXICAL);
    }","  public void test356()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.lexicalShade(true);
      JexlFeatures jexlFeatures1 = jexlFeatures0.localVar(true);
}"
1745,"    public boolean supportsStructuredLiteral() {
        return getFeature(STRUCTURED_LITERAL);
    }","  public void test357()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.structuredLiteral(false);
      JexlFeatures jexlFeatures1 = jexlFeatures0.lexicalShade(false);
}"
1746,"    public boolean supportsExpression() {
        return !getFeature(SCRIPT);
    }","  public void test358()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.structuredLiteral(false);
      JexlFeatures jexlFeatures1 = jexlFeatures0.lexicalShade(false);
}"
1747,"    public boolean supportsExpression() {
        return !getFeature(SCRIPT);
    }","  public void test359()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.sideEffectGlobal(false);
      JexlFeatures jexlFeatures1 = jexlFeatures0.lexicalShade(false);
}"
1748,"    public boolean supportsSideEffectGlobal() {
        return getFeature(SIDE_EFFECT_GLOBAL);
    }","  public void test360()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.sideEffectGlobal(false);
      JexlFeatures jexlFeatures1 = jexlFeatures0.lexicalShade(false);
}"
1749,"    public boolean supportsSideEffect() {
        return getFeature(SIDE_EFFECT);
    }","  public void test361()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.sideEffect(false);
      JexlFeatures jexlFeatures1 = jexlFeatures0.lexicalShade(false);
}"
1750,"    public boolean supportsMethodCall() {
        return getFeature(METHOD_CALL);
    }","  public void test362()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.sideEffect(false);
      JexlFeatures jexlFeatures1 = jexlFeatures0.lexicalShade(false);
}"
1751,"    public boolean isLexical() {
        return getFeature(LEXICAL);
    }","  public void test363()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      JexlFeatures jexlFeatures1 = jexlFeatures0.register(true);
}"
1752,"    public boolean isLexicalShade() {
        return getFeature(LEXICAL_SHADE);
    }","  public void test364()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      JexlFeatures jexlFeatures1 = jexlFeatures0.register(true);
      jexlFeatures0.lexicalShade(true);
}"
1753,"    public boolean supportsPragma() {
        return getFeature(PRAGMA);
    }","  public void test365()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.pragma(false);
      JexlFeatures jexlFeatures1 = jexlFeatures0.lexicalShade(false);
}"
1754,"    public boolean supportsScript() {
        return getFeature(SCRIPT);
    }","  public void test366()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.pragma(false);
      JexlFeatures jexlFeatures1 = jexlFeatures0.lexicalShade(false);
}"
1755,"    public boolean supportsNewInstance() {
        return getFeature(NEW_INSTANCE);
    }","  public void test367()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.newInstance(false);
      JexlFeatures jexlFeatures1 = jexlFeatures0.lexicalShade(false);
}"
1756,"    public boolean supportsStructuredLiteral() {
        return getFeature(STRUCTURED_LITERAL);
    }","  public void test368()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.newInstance(false);
      JexlFeatures jexlFeatures1 = jexlFeatures0.lexicalShade(false);
}"
1757,"    public boolean supportsMethodCall() {
        return getFeature(METHOD_CALL);
    }","  public void test369()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      JexlFeatures jexlFeatures1 = jexlFeatures0.methodCall(false);
      JexlFeatures jexlFeatures2 = jexlFeatures1.lexicalShade(false);
}"
1758,"    public boolean supportsNewInstance() {
        return getFeature(NEW_INSTANCE);
    }","  public void test370()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      JexlFeatures jexlFeatures1 = jexlFeatures0.methodCall(false);
      JexlFeatures jexlFeatures2 = jexlFeatures1.lexicalShade(false);
}"
1759,"    public boolean supportsRegister() {
        return getFeature(REGISTER);
    }","  public void test371()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.loops(false);
      JexlFeatures jexlFeatures1 = jexlFeatures0.lexicalShade(true);
}"
1760,"    public boolean isLexical() {
        return getFeature(LEXICAL);
    }","  public void test372()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.loops(false);
      JexlFeatures jexlFeatures1 = jexlFeatures0.lexicalShade(true);
}"
1761,"    public boolean supportsRegister() {
        return getFeature(REGISTER);
    }","  public void test373()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      JexlFeatures jexlFeatures1 = jexlFeatures0.localVar(false);
      JexlFeatures jexlFeatures2 = jexlFeatures1.lexicalShade(true);
}"
1762,"    public boolean isLexicalShade() {
        return getFeature(LEXICAL_SHADE);
    }","  public void test374()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      JexlFeatures jexlFeatures1 = jexlFeatures0.localVar(false);
      JexlFeatures jexlFeatures2 = jexlFeatures1.lexicalShade(true);
}"
1763,"    public boolean supportsLambda() {
        return getFeature(LAMBDA);
    }","  public void test375()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      JexlFeatures jexlFeatures1 = jexlFeatures0.lambda(false);
      JexlFeatures jexlFeatures2 = jexlFeatures1.lexicalShade(false);
}"
1764,"    public boolean supportsScript() {
        return getFeature(SCRIPT);
    }","  public void test376()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      JexlFeatures jexlFeatures1 = jexlFeatures0.lambda(false);
      JexlFeatures jexlFeatures2 = jexlFeatures1.lexicalShade(false);
}"
1765,"    public boolean supportsExpression() {
        return !getFeature(SCRIPT);
    }","  public void test377()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.script(false);
      JexlFeatures jexlFeatures1 = jexlFeatures0.lexicalShade(false);
}"
1766,"    public boolean supportsAnnotation() {
        return getFeature(ANNOTATION);
    }","  public void test378()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.script(false);
      JexlFeatures jexlFeatures1 = jexlFeatures0.lexicalShade(false);
}"
1767,"    public boolean supportsRegister() {
        return getFeature(REGISTER);
    }","  public void test379()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.arrayReferenceExpr(false);
      JexlFeatures jexlFeatures1 = jexlFeatures0.lexicalShade(true);
}"
1768,"    public boolean isLexical() {
        return getFeature(LEXICAL);
    }","  public void test380()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.arrayReferenceExpr(false);
      JexlFeatures jexlFeatures1 = jexlFeatures0.lexicalShade(true);
}"
1769,"    public boolean supportsAnnotation() {
        return getFeature(ANNOTATION);
    }","  public void test381()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.annotation(false);
      JexlFeatures jexlFeatures1 = jexlFeatures0.lexicalShade(false);
}"
1770,"    public boolean supportsScript() {
        return getFeature(SCRIPT);
    }","  public void test382()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.annotation(false);
      JexlFeatures jexlFeatures1 = jexlFeatures0.lexicalShade(false);
}"
1771,"    public boolean supportsRegister() {
        return getFeature(REGISTER);
    }","  public void test383()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      JexlFeatures jexlFeatures1 = jexlFeatures0.structuredLiteral(false);
      JexlFeatures jexlFeatures2 = jexlFeatures1.lexical(true);
}"
1772,"    public boolean isLexical() {
        return getFeature(LEXICAL);
    }","  public void test384()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      JexlFeatures jexlFeatures1 = jexlFeatures0.structuredLiteral(false);
      JexlFeatures jexlFeatures2 = jexlFeatures1.lexical(true);
}"
1773,"    public boolean supportsSideEffectGlobal() {
        return getFeature(SIDE_EFFECT_GLOBAL);
    }","  public void test385()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      JexlFeatures jexlFeatures1 = jexlFeatures0.sideEffectGlobal(false);
      JexlFeatures jexlFeatures2 = jexlFeatures1.lexical(false);
}"
1774,"    public boolean supportsArrayReferenceExpr() {
        return getFeature(ARRAY_REF_EXPR);
    }","  public void test386()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      JexlFeatures jexlFeatures1 = jexlFeatures0.sideEffectGlobal(false);
      JexlFeatures jexlFeatures2 = jexlFeatures1.lexical(false);
}"
1775,"    public boolean supportsSideEffect() {
        return getFeature(SIDE_EFFECT);
    }","  public void test387()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.sideEffect(false);
      JexlFeatures jexlFeatures1 = jexlFeatures0.lexical(false);
}"
1776,"    public boolean supportsLocalVar() {
        return getFeature(LOCAL_VAR);
    }","  public void test388()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.sideEffect(false);
      JexlFeatures jexlFeatures1 = jexlFeatures0.lexical(false);
}"
1777,"    public boolean isLexicalShade() {
        return getFeature(LEXICAL_SHADE);
    }","  public void test389()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      JexlFeatures jexlFeatures1 = jexlFeatures0.register(true);
      JexlFeatures jexlFeatures2 = jexlFeatures1.lexical(true);
}"
1778,"    public boolean isLexical() {
        return getFeature(LEXICAL);
    }","  public void test390()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      JexlFeatures jexlFeatures1 = jexlFeatures0.register(true);
      JexlFeatures jexlFeatures2 = jexlFeatures1.lexical(true);
}"
1779,"    public boolean isLexical() {
        return getFeature(LEXICAL);
    }","  public void test391()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.pragma(false);
      JexlFeatures jexlFeatures1 = jexlFeatures0.lexical(true);
}"
1780,"    public boolean supportsRegister() {
        return getFeature(REGISTER);
    }","  public void test392()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.pragma(false);
      JexlFeatures jexlFeatures1 = jexlFeatures0.lexical(true);
}"
1781,"    public boolean isLexical() {
        return getFeature(LEXICAL);
    }","  public void test393()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.newInstance(false);
      JexlFeatures jexlFeatures1 = jexlFeatures0.lexical(true);
}"
1782,"    public boolean supportsRegister() {
        return getFeature(REGISTER);
    }","  public void test394()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.newInstance(false);
      JexlFeatures jexlFeatures1 = jexlFeatures0.lexical(true);
}"
1783,"    public boolean supportsMethodCall() {
        return getFeature(METHOD_CALL);
    }","  public void test395()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.methodCall(false);
      JexlFeatures jexlFeatures1 = jexlFeatures0.lexical(false);
}"
1784,"    public boolean supportsLocalVar() {
        return getFeature(LOCAL_VAR);
    }","  public void test396()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.methodCall(false);
      JexlFeatures jexlFeatures1 = jexlFeatures0.lexical(false);
}"
1785,"    public boolean supportsLoops() {
        return getFeature(LOOP);
    }","  public void test397()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.loops(false);
      JexlFeatures jexlFeatures1 = jexlFeatures0.lexical(false);
}"
1786,"    public boolean supportsLambda() {
        return getFeature(LAMBDA);
    }","  public void test398()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.loops(false);
      JexlFeatures jexlFeatures1 = jexlFeatures0.lexical(false);
}"
1787,"    public boolean supportsRegister() {
        return getFeature(REGISTER);
    }","  public void test399()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      JexlFeatures jexlFeatures1 = jexlFeatures0.localVar(false);
      JexlFeatures jexlFeatures2 = jexlFeatures1.lexical(true);
}"
1788,"    public boolean isLexical() {
        return getFeature(LEXICAL);
    }","  public void test400()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      JexlFeatures jexlFeatures1 = jexlFeatures0.localVar(false);
      JexlFeatures jexlFeatures2 = jexlFeatures1.lexical(true);
}"
1789,"    public boolean supportsStructuredLiteral() {
        return getFeature(STRUCTURED_LITERAL);
    }","  public void test401()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      JexlFeatures jexlFeatures1 = jexlFeatures0.lambda(false);
      JexlFeatures jexlFeatures2 = jexlFeatures1.lexical(false);
}"
1790,"    public boolean supportsLambda() {
        return getFeature(LAMBDA);
    }","  public void test402()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      JexlFeatures jexlFeatures1 = jexlFeatures0.lambda(false);
      JexlFeatures jexlFeatures2 = jexlFeatures1.lexical(false);
}"
1791,"    public boolean isLexical() {
        return getFeature(LEXICAL);
    }","  public void test403()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      JexlFeatures jexlFeatures1 = jexlFeatures0.script(false);
      JexlFeatures jexlFeatures2 = jexlFeatures1.lexical(true);
}"
1792,"    public boolean isLexicalShade() {
        return getFeature(LEXICAL_SHADE);
    }","  public void test404()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      JexlFeatures jexlFeatures1 = jexlFeatures0.script(false);
      JexlFeatures jexlFeatures2 = jexlFeatures1.lexical(true);
}"
1793,"    public boolean supportsArrayReferenceExpr() {
        return getFeature(ARRAY_REF_EXPR);
    }","  public void test405()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.arrayReferenceExpr(false);
      JexlFeatures jexlFeatures1 = jexlFeatures0.lexical(false);
}"
1794,"    public boolean supportsSideEffect() {
        return getFeature(SIDE_EFFECT);
    }","  public void test406()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.arrayReferenceExpr(false);
      JexlFeatures jexlFeatures1 = jexlFeatures0.lexical(false);
}"
1795,"    public boolean isLexicalShade() {
        return getFeature(LEXICAL_SHADE);
    }","  public void test407()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      JexlFeatures jexlFeatures1 = jexlFeatures0.annotation(false);
      JexlFeatures jexlFeatures2 = jexlFeatures1.lexical(true);
}"
1796,"    public boolean isLexical() {
        return getFeature(LEXICAL);
    }","  public void test408()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      JexlFeatures jexlFeatures1 = jexlFeatures0.annotation(false);
      JexlFeatures jexlFeatures2 = jexlFeatures1.lexical(true);
}"
1797,"    public boolean supportsRegister() {
        return getFeature(REGISTER);
    }","  public void test409()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.lexicalShade(true);
      JexlFeatures jexlFeatures1 = jexlFeatures0.lexical(true);
}"
1798,"    public boolean isLexicalShade() {
        return getFeature(LEXICAL_SHADE);
    }","  public void test410()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.lexicalShade(true);
      JexlFeatures jexlFeatures1 = jexlFeatures0.lexical(true);
}"
1799,"    public boolean supportsStructuredLiteral() {
        return getFeature(STRUCTURED_LITERAL);
    }","  public void test411()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.structuredLiteral(false);
      JexlFeatures jexlFeatures1 = jexlFeatures0.lambda(false);
}"
1800,"    public boolean supportsPragma() {
        return getFeature(PRAGMA);
    }","  public void test412()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.structuredLiteral(false);
      JexlFeatures jexlFeatures1 = jexlFeatures0.lambda(false);
}"
1801,"    public boolean supportsLambda() {
        return getFeature(LAMBDA);
    }","  public void test413()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.sideEffectGlobal(false);
      JexlFeatures jexlFeatures1 = jexlFeatures0.lambda(false);
}"
1802,"    public boolean supportsSideEffect() {
        return getFeature(SIDE_EFFECT);
    }","  public void test414()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.sideEffectGlobal(false);
      JexlFeatures jexlFeatures1 = jexlFeatures0.lambda(false);
}"
1803,"    public boolean supportsSideEffect() {
        return getFeature(SIDE_EFFECT);
    }","  public void test415()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.sideEffect(false);
      JexlFeatures jexlFeatures1 = jexlFeatures0.lambda(true);
}"
1804,"    public boolean supportsExpression() {
        return !getFeature(SCRIPT);
    }","  public void test416()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.sideEffect(false);
      JexlFeatures jexlFeatures1 = jexlFeatures0.lambda(true);
}"
1805,"    public boolean supportsLocalVar() {
        return getFeature(LOCAL_VAR);
    }","  public void test417()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.register(true);
      JexlFeatures jexlFeatures1 = jexlFeatures0.lambda(false);
}"
1806,"    public boolean supportsLambda() {
        return getFeature(LAMBDA);
    }","  public void test418()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.register(true);
      JexlFeatures jexlFeatures1 = jexlFeatures0.lambda(false);
}"
1807,"    public boolean supportsLambda() {
        return getFeature(LAMBDA);
    }","  public void test419()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.pragma(false);
      JexlFeatures jexlFeatures1 = jexlFeatures0.lambda(false);
}"
1808,"    public boolean supportsSideEffectGlobal() {
        return getFeature(SIDE_EFFECT_GLOBAL);
    }","  public void test420()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.pragma(false);
      JexlFeatures jexlFeatures1 = jexlFeatures0.lambda(false);
}"
1809,"    public boolean supportsLambda() {
        return getFeature(LAMBDA);
    }","  public void test421()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.newInstance(false);
      jexlFeatures0.lambda(true);
}"
1810,"    public boolean supportsNewInstance() {
        return getFeature(NEW_INSTANCE);
    }","  public void test422()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.newInstance(false);
      jexlFeatures0.lambda(true);
}"
1811,"    public boolean supportsLambda() {
        return getFeature(LAMBDA);
    }","  public void test423()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      JexlFeatures jexlFeatures1 = jexlFeatures0.methodCall(false);
      jexlFeatures1.lambda(true);
}"
1812,"    public boolean supportsMethodCall() {
        return getFeature(METHOD_CALL);
    }","  public void test424()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      JexlFeatures jexlFeatures1 = jexlFeatures0.methodCall(false);
      jexlFeatures1.lambda(true);
}"
1813,"    public boolean supportsLoops() {
        return getFeature(LOOP);
    }","  public void test425()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.loops(false);
      JexlFeatures jexlFeatures1 = jexlFeatures0.lambda(true);
}"
1814,"    public boolean supportsMethodCall() {
        return getFeature(METHOD_CALL);
    }","  public void test426()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.loops(false);
      JexlFeatures jexlFeatures1 = jexlFeatures0.lambda(true);
}"
1815,"    public boolean supportsLambda() {
        return getFeature(LAMBDA);
    }","  public void test427()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      JexlFeatures jexlFeatures1 = jexlFeatures0.localVar(false);
      JexlFeatures jexlFeatures2 = jexlFeatures1.lambda(false);
}"
1816,"    public boolean supportsExpression() {
        return !getFeature(SCRIPT);
    }","  public void test428()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      JexlFeatures jexlFeatures1 = jexlFeatures0.localVar(false);
      JexlFeatures jexlFeatures2 = jexlFeatures1.lambda(false);
}"
1817,"    public boolean supportsLambda() {
        return getFeature(LAMBDA);
    }","  public void test429()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.script(false);
      JexlFeatures jexlFeatures1 = jexlFeatures0.lambda(false);
}"
1818,"    public boolean supportsLocalVar() {
        return getFeature(LOCAL_VAR);
    }","  public void test430()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.script(false);
      JexlFeatures jexlFeatures1 = jexlFeatures0.lambda(false);
}"
1819,"    public boolean supportsArrayReferenceExpr() {
        return getFeature(ARRAY_REF_EXPR);
    }","  public void test431()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.arrayReferenceExpr(false);
      JexlFeatures jexlFeatures1 = jexlFeatures0.lambda(false);
}"
1820,"    public boolean supportsSideEffectGlobal() {
        return getFeature(SIDE_EFFECT_GLOBAL);
    }","  public void test432()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.arrayReferenceExpr(false);
      JexlFeatures jexlFeatures1 = jexlFeatures0.lambda(false);
}"
1821,"    public boolean supportsLocalVar() {
        return getFeature(LOCAL_VAR);
    }","  public void test433()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.annotation(false);
      JexlFeatures jexlFeatures1 = jexlFeatures0.lambda(false);
}"
1822,"    public boolean supportsAnnotation() {
        return getFeature(ANNOTATION);
    }","  public void test434()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.annotation(false);
      JexlFeatures jexlFeatures1 = jexlFeatures0.lambda(false);
}"
1823,"    public boolean supportsRegister() {
        return getFeature(REGISTER);
    }","  public void test435()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      JexlFeatures jexlFeatures1 = jexlFeatures0.lexicalShade(true);
      JexlFeatures jexlFeatures2 = jexlFeatures1.lambda(true);
}"
1824,"    public boolean isLexicalShade() {
        return getFeature(LEXICAL_SHADE);
    }","  public void test436()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      JexlFeatures jexlFeatures1 = jexlFeatures0.lexicalShade(true);
      JexlFeatures jexlFeatures2 = jexlFeatures1.lambda(true);
}"
1825,"    public boolean supportsRegister() {
        return getFeature(REGISTER);
    }","  public void test437()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.lexicalShade(true);
      boolean boolean0 = jexlFeatures0.isLexicalShade();
}"
1826,"    public boolean isLexicalShade() {
        return getFeature(LEXICAL_SHADE);
    }","  public void test438()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.lexicalShade(true);
      boolean boolean0 = jexlFeatures0.isLexicalShade();
}"
1827,"    public boolean supportsRegister() {
        return getFeature(REGISTER);
    }","  public void test439()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      JexlFeatures jexlFeatures1 = jexlFeatures0.lexicalShade(true);
      boolean boolean0 = jexlFeatures1.isLexical();
}"
1828,"    public boolean isLexicalShade() {
        return getFeature(LEXICAL_SHADE);
    }","  public void test440()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      JexlFeatures jexlFeatures1 = jexlFeatures0.lexicalShade(true);
      boolean boolean0 = jexlFeatures1.isLexical();
}"
1829,"    public boolean isLexical() {
        return getFeature(LEXICAL);
    }","  public void test441()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      JexlFeatures jexlFeatures1 = jexlFeatures0.lexicalShade(true);
      boolean boolean0 = jexlFeatures1.isLexical();
}"
1830,"    public boolean supportsStructuredLiteral() {
        return getFeature(STRUCTURED_LITERAL);
    }","  public void test442()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.structuredLiteral(false);
      JexlFeatures jexlFeatures1 = jexlFeatures0.arrayReferenceExpr(true);
}"
1831,"    public boolean supportsLambda() {
        return getFeature(LAMBDA);
    }","  public void test443()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.structuredLiteral(false);
      JexlFeatures jexlFeatures1 = jexlFeatures0.arrayReferenceExpr(true);
}"
1832,"    public boolean supportsArrayReferenceExpr() {
        return getFeature(ARRAY_REF_EXPR);
    }","  public void test444()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      JexlFeatures jexlFeatures1 = jexlFeatures0.sideEffectGlobal(false);
      jexlFeatures1.arrayReferenceExpr(true);
}"
1833,"    public boolean supportsSideEffectGlobal() {
        return getFeature(SIDE_EFFECT_GLOBAL);
    }","  public void test445()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      JexlFeatures jexlFeatures1 = jexlFeatures0.sideEffectGlobal(false);
      jexlFeatures1.arrayReferenceExpr(true);
}"
1834,"    public boolean supportsSideEffect() {
        return getFeature(SIDE_EFFECT);
    }","  public void test446()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.sideEffect(false);
      jexlFeatures0.arrayReferenceExpr(true);
}"
1835,"    public boolean supportsArrayReferenceExpr() {
        return getFeature(ARRAY_REF_EXPR);
    }","  public void test447()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.sideEffect(false);
      jexlFeatures0.arrayReferenceExpr(true);
}"
1836,"    public boolean supportsArrayReferenceExpr() {
        return getFeature(ARRAY_REF_EXPR);
    }","  public void test448()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.register(true);
      JexlFeatures jexlFeatures1 = jexlFeatures0.arrayReferenceExpr(false);
}"
1837,"    public boolean supportsMethodCall() {
        return getFeature(METHOD_CALL);
    }","  public void test449()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.register(true);
      JexlFeatures jexlFeatures1 = jexlFeatures0.arrayReferenceExpr(false);
}"
1838,"    public boolean supportsPragma() {
        return getFeature(PRAGMA);
    }","  public void test450()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.pragma(false);
      JexlFeatures jexlFeatures1 = jexlFeatures0.arrayReferenceExpr(false);
}"
1839,"    public boolean supportsMethodCall() {
        return getFeature(METHOD_CALL);
    }","  public void test451()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.pragma(false);
      JexlFeatures jexlFeatures1 = jexlFeatures0.arrayReferenceExpr(false);
}"
1840,"    public boolean supportsArrayReferenceExpr() {
        return getFeature(ARRAY_REF_EXPR);
    }","  public void test452()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.newInstance(false);
      JexlFeatures jexlFeatures1 = jexlFeatures0.arrayReferenceExpr(false);
}"
1841,"    public boolean supportsSideEffect() {
        return getFeature(SIDE_EFFECT);
    }","  public void test453()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.newInstance(false);
      JexlFeatures jexlFeatures1 = jexlFeatures0.arrayReferenceExpr(false);
}"
1842,"    public boolean supportsMethodCall() {
        return getFeature(METHOD_CALL);
    }","  public void test454()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.methodCall(false);
      jexlFeatures0.arrayReferenceExpr(true);
}"
1843,"    public boolean supportsArrayReferenceExpr() {
        return getFeature(ARRAY_REF_EXPR);
    }","  public void test455()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.methodCall(false);
      jexlFeatures0.arrayReferenceExpr(true);
}"
1844,"    public boolean supportsLoops() {
        return getFeature(LOOP);
    }","  public void test456()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.loops(false);
      jexlFeatures0.arrayReferenceExpr(true);
}"
1845,"    public boolean supportsArrayReferenceExpr() {
        return getFeature(ARRAY_REF_EXPR);
    }","  public void test457()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.loops(false);
      jexlFeatures0.arrayReferenceExpr(true);
}"
1846,"    public boolean supportsExpression() {
        return !getFeature(SCRIPT);
    }","  public void test458()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.localVar(false);
      JexlFeatures jexlFeatures1 = jexlFeatures0.arrayReferenceExpr(false);
}"
1847,"    public boolean supportsArrayReferenceExpr() {
        return getFeature(ARRAY_REF_EXPR);
    }","  public void test459()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.localVar(false);
      JexlFeatures jexlFeatures1 = jexlFeatures0.arrayReferenceExpr(false);
}"
1848,"    public boolean supportsLambda() {
        return getFeature(LAMBDA);
    }","  public void test460()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.lambda(false);
      JexlFeatures jexlFeatures1 = jexlFeatures0.arrayReferenceExpr(false);
}"
1849,"    public boolean supportsSideEffect() {
        return getFeature(SIDE_EFFECT);
    }","  public void test461()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.lambda(false);
      JexlFeatures jexlFeatures1 = jexlFeatures0.arrayReferenceExpr(false);
}"
1850,"    public boolean supportsScript() {
        return getFeature(SCRIPT);
    }","  public void test462()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      JexlFeatures jexlFeatures1 = jexlFeatures0.script(false);
      jexlFeatures1.arrayReferenceExpr(true);
}"
1851,"    public boolean supportsArrayReferenceExpr() {
        return getFeature(ARRAY_REF_EXPR);
    }","  public void test463()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      JexlFeatures jexlFeatures1 = jexlFeatures0.script(false);
      jexlFeatures1.arrayReferenceExpr(true);
}"
1852,"    public boolean supportsRegister() {
        return getFeature(REGISTER);
    }","  public void test464()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      JexlFeatures jexlFeatures1 = jexlFeatures0.lexicalShade(true);
      JexlFeatures jexlFeatures2 = jexlFeatures1.arrayReferenceExpr(false);
}"
1853,"    public boolean isLexical() {
        return getFeature(LEXICAL);
    }","  public void test465()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      JexlFeatures jexlFeatures1 = jexlFeatures0.lexicalShade(true);
      JexlFeatures jexlFeatures2 = jexlFeatures1.arrayReferenceExpr(false);
}"
1854,"    public boolean supportsSideEffectGlobal() {
        return getFeature(SIDE_EFFECT_GLOBAL);
    }","  public void test466()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      JexlFeatures jexlFeatures1 = jexlFeatures0.sideEffectGlobal(false);
      JexlFeatures jexlFeatures2 = jexlFeatures1.annotation(false);
}"
1855,"    public boolean supportsStructuredLiteral() {
        return getFeature(STRUCTURED_LITERAL);
    }","  public void test467()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      JexlFeatures jexlFeatures1 = jexlFeatures0.sideEffectGlobal(false);
      JexlFeatures jexlFeatures2 = jexlFeatures1.annotation(false);
}"
1856,"    public boolean supportsAnnotation() {
        return getFeature(ANNOTATION);
    }","  public void test468()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.pragma(false);
      JexlFeatures jexlFeatures1 = jexlFeatures0.annotation(false);
}"
1857,"    public boolean supportsLocalVar() {
        return getFeature(LOCAL_VAR);
    }","  public void test469()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.pragma(false);
      JexlFeatures jexlFeatures1 = jexlFeatures0.annotation(false);
}"
1858,"    public boolean supportsAnnotation() {
        return getFeature(ANNOTATION);
    }","  public void test470()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      JexlFeatures jexlFeatures1 = jexlFeatures0.newInstance(false);
      jexlFeatures1.annotation(true);
}"
1859,"    public boolean supportsNewInstance() {
        return getFeature(NEW_INSTANCE);
    }","  public void test471()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      JexlFeatures jexlFeatures1 = jexlFeatures0.newInstance(false);
      jexlFeatures1.annotation(true);
}"
1860,"    public boolean supportsAnnotation() {
        return getFeature(ANNOTATION);
    }","  public void test472()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.loops(false);
      jexlFeatures0.annotation(true);
}"
1861,"    public boolean supportsLoops() {
        return getFeature(LOOP);
    }","  public void test473()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.loops(false);
      jexlFeatures0.annotation(true);
}"
1862,"    public boolean supportsAnnotation() {
        return getFeature(ANNOTATION);
    }","  public void test474()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.localVar(false);
      JexlFeatures jexlFeatures1 = jexlFeatures0.annotation(false);
}"
1863,"    public boolean supportsPragma() {
        return getFeature(PRAGMA);
    }","  public void test475()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.localVar(false);
      JexlFeatures jexlFeatures1 = jexlFeatures0.annotation(false);
}"
1864,"    public boolean supportsAnnotation() {
        return getFeature(ANNOTATION);
    }","  public void test476()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.lambda(false);
      jexlFeatures0.annotation(true);
}"
1865,"    public boolean supportsLambda() {
        return getFeature(LAMBDA);
    }","  public void test477()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.lambda(false);
      jexlFeatures0.annotation(true);
}"
1866,"    public boolean supportsNewInstance() {
        return getFeature(NEW_INSTANCE);
    }","  public void test478()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.script(false);
      JexlFeatures jexlFeatures1 = jexlFeatures0.annotation(false);
}"
1867,"    public boolean supportsScript() {
        return getFeature(SCRIPT);
    }","  public void test479()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.script(false);
      JexlFeatures jexlFeatures1 = jexlFeatures0.annotation(false);
}"
1868,"    public boolean supportsSideEffect() {
        return getFeature(SIDE_EFFECT);
    }","  public void test480()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.annotation(false);
      JexlFeatures jexlFeatures1 = jexlFeatures0.arrayReferenceExpr(false);
}"
1869,"    public boolean supportsArrayReferenceExpr() {
        return getFeature(ARRAY_REF_EXPR);
    }","  public void test481()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.annotation(false);
      JexlFeatures jexlFeatures1 = jexlFeatures0.arrayReferenceExpr(false);
}"
1870,"    public JexlFeatures reservedNames(final Collection<String> names) {
        if (names == null || names.isEmpty()) {
            reservedNames = Collections.emptySet();
        } else {
            reservedNames = Collections.unmodifiableSet(new TreeSet<String>(names));
        }
        setFeature(RESERVED, !reservedNames.isEmpty());
        return this;
    }","  public void test482()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add((String) null);
      // Undeclared exception!
      try { 
        jexlFeatures0.reservedNames(linkedList0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
1871,"    public JexlFeatures() {
        flags = (1L << LOCAL_VAR)
                | (1L << SIDE_EFFECT)
                | (1L << SIDE_EFFECT_GLOBAL)
                | (1L << ARRAY_REF_EXPR)
                | (1L << NEW_INSTANCE)
                | (1L << LOOP)
                | (1L << LAMBDA)
                | (1L << METHOD_CALL)
                | (1L << STRUCTURED_LITERAL)
                | (1L << PRAGMA)
                | (1L << ANNOTATION)
                | (1L << SCRIPT);
        reservedNames = Collections.emptySet();
        nameSpaces = TEST_STR_FALSE;
    }","  public void test483()  throws Throwable  {
      JexlFeatures jexlFeatures0 = null;
      try {
        jexlFeatures0 = new JexlFeatures((JexlFeatures) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.JexlFeatures"", e);
      }
  }"
1872,"    public boolean supportsRegister() {
        return getFeature(REGISTER);
    }","  public void test484()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.lexicalShade(true);
      JexlFeatures jexlFeatures1 = jexlFeatures0.annotation(true);
}"
1873,"    public boolean isLexical() {
        return getFeature(LEXICAL);
    }","  public void test485()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.lexicalShade(true);
      JexlFeatures jexlFeatures1 = jexlFeatures0.annotation(true);
}"
1874,"    public boolean supportsRegister() {
        return getFeature(REGISTER);
    }","  public void test486()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      boolean boolean0 = jexlFeatures0.supportsExpression();
}"
1875,"    public boolean supportsLocalVar() {
        return getFeature(LOCAL_VAR);
    }","  public void test487()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      boolean boolean0 = jexlFeatures0.supportsExpression();
}"
1876,"    public boolean supportsExpression() {
        return !getFeature(SCRIPT);
    }","  public void test488()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      boolean boolean0 = jexlFeatures0.supportsExpression();
}"
1877,"    public boolean supportsRegister() {
        return getFeature(REGISTER);
    }","  public void test489()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      boolean boolean0 = jexlFeatures0.isReservedName(""lexical"");
}"
1878,"    public boolean supportsPragma() {
        return getFeature(PRAGMA);
    }","  public void test490()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      boolean boolean0 = jexlFeatures0.isReservedName(""lexical"");
}"
1879,"    public boolean isReservedName(final String name) {
        return name != null && reservedNames.contains(name);
    }","  public void test491()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      boolean boolean0 = jexlFeatures0.isReservedName(""lexical"");
}"
1880,"    public boolean supportsRegister() {
        return getFeature(REGISTER);
    }","  public void test492()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      boolean boolean0 = jexlFeatures0.isReservedName((String) null);
}"
1881,"    public boolean supportsArrayReferenceExpr() {
        return getFeature(ARRAY_REF_EXPR);
    }","  public void test493()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      boolean boolean0 = jexlFeatures0.isReservedName((String) null);
}"
1882,"    public boolean isReservedName(final String name) {
        return name != null && reservedNames.contains(name);
    }","  public void test494()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      boolean boolean0 = jexlFeatures0.isReservedName((String) null);
}"
1883,"    public boolean isReservedName(final String name) {
        return name != null && reservedNames.contains(name);
    }","  public void test495()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add(""unsupported feature"");
      jexlFeatures0.reservedNames(linkedList0);
      boolean boolean0 = jexlFeatures0.isReservedName(""unsupported feature"");
}"
1884,"    public boolean isLexical() {
        return getFeature(LEXICAL);
    }","  public void test496()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add(""unsupported feature"");
      jexlFeatures0.reservedNames(linkedList0);
      boolean boolean0 = jexlFeatures0.isReservedName(""unsupported feature"");
}"
1885,"    public boolean isLexicalShade() {
        return getFeature(LEXICAL_SHADE);
    }","  public void test497()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add(""unsupported feature"");
      jexlFeatures0.reservedNames(linkedList0);
      boolean boolean0 = jexlFeatures0.isReservedName(""unsupported feature"");
}"
1886,"    public boolean supportsLoops() {
        return getFeature(LOOP);
    }","  public void test498()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add(""unsupported feature"");
      jexlFeatures0.reservedNames(linkedList0);
      boolean boolean0 = jexlFeatures0.isReservedName(""unsupported feature"");
}"
1887,"    public boolean supportsRegister() {
        return getFeature(REGISTER);
    }","  public void test499()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add(""unsupported feature"");
      jexlFeatures0.reservedNames(linkedList0);
      boolean boolean0 = jexlFeatures0.isReservedName(""unsupported feature"");
}"
1888,"    public static String stringify(final int feature) {
        return feature >= 0 && feature < F_NAMES.length ? F_NAMES[feature] : ""unsupported feature"";
    }","  public void test500()  throws Throwable  {
      String string0 = JexlFeatures.stringify(231);
}"
1889,"    public static String stringify(final int feature) {
        return feature >= 0 && feature < F_NAMES.length ? F_NAMES[feature] : ""unsupported feature"";
    }","  public void test501()  throws Throwable  {
      String string0 = JexlFeatures.stringify((-25));
}"
1890,"    public boolean supportsRegister() {
        return getFeature(REGISTER);
    }","  public void test502()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      JexlFeatures jexlFeatures1 = new JexlFeatures();
      boolean boolean0 = jexlFeatures1.equals(jexlFeatures0);
}"
1891,"    public boolean equals(final Object obj) {
        if (this == obj) {
            return true;
        }
        if (obj == null) {
            return false;
        }
        if (getClass() != obj.getClass()) {
            return false;
        }
        final JexlFeatures other = (JexlFeatures) obj;
        if (this.flags != other.flags) {
            return false;
        }
        if (!Objects.equals(this.reservedNames, other.reservedNames)) {
            return false;
        }
        return true;
    }","  public void test503()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      JexlFeatures jexlFeatures1 = new JexlFeatures();
      boolean boolean0 = jexlFeatures1.equals(jexlFeatures0);
}"
1892,"    public boolean supportsExpression() {
        return !getFeature(SCRIPT);
    }","  public void test504()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      JexlFeatures jexlFeatures1 = new JexlFeatures();
      boolean boolean0 = jexlFeatures1.equals(jexlFeatures0);
}"
1893,"    public boolean supportsRegister() {
        return getFeature(REGISTER);
    }","  public void test505()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      boolean boolean0 = jexlFeatures0.equals((Object) null);
}"
1894,"    public boolean supportsSideEffect() {
        return getFeature(SIDE_EFFECT);
    }","  public void test506()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      boolean boolean0 = jexlFeatures0.equals((Object) null);
}"
1895,"    public boolean equals(final Object obj) {
        if (this == obj) {
            return true;
        }
        if (obj == null) {
            return false;
        }
        if (getClass() != obj.getClass()) {
            return false;
        }
        final JexlFeatures other = (JexlFeatures) obj;
        if (this.flags != other.flags) {
            return false;
        }
        if (!Objects.equals(this.reservedNames, other.reservedNames)) {
            return false;
        }
        return true;
    }","  public void test507()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      boolean boolean0 = jexlFeatures0.equals((Object) null);
}"
1896,"    public boolean equals(final Object obj) {
        if (this == obj) {
            return true;
        }
        if (obj == null) {
            return false;
        }
        if (getClass() != obj.getClass()) {
            return false;
        }
        final JexlFeatures other = (JexlFeatures) obj;
        if (this.flags != other.flags) {
            return false;
        }
        if (!Objects.equals(this.reservedNames, other.reservedNames)) {
            return false;
        }
        return true;
    }","  public void test508()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      boolean boolean0 = jexlFeatures0.equals(jexlFeatures0);
}"
1897,"    public boolean supportsRegister() {
        return getFeature(REGISTER);
    }","  public void test509()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      boolean boolean0 = jexlFeatures0.equals(jexlFeatures0);
}"
1898,"    public boolean supportsExpression() {
        return !getFeature(SCRIPT);
    }","  public void test510()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      boolean boolean0 = jexlFeatures0.equals(jexlFeatures0);
}"
1899,"    public boolean supportsRegister() {
        return getFeature(REGISTER);
    }","  public void test511()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      Object object0 = new Object();
      boolean boolean0 = jexlFeatures0.equals(object0);
}"
1900,"    public boolean equals(final Object obj) {
        if (this == obj) {
            return true;
        }
        if (obj == null) {
            return false;
        }
        if (getClass() != obj.getClass()) {
            return false;
        }
        final JexlFeatures other = (JexlFeatures) obj;
        if (this.flags != other.flags) {
            return false;
        }
        if (!Objects.equals(this.reservedNames, other.reservedNames)) {
            return false;
        }
        return true;
    }","  public void test512()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      Object object0 = new Object();
      boolean boolean0 = jexlFeatures0.equals(object0);
}"
1901,"    public boolean supportsNewInstance() {
        return getFeature(NEW_INSTANCE);
    }","  public void test513()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      Object object0 = new Object();
      boolean boolean0 = jexlFeatures0.equals(object0);
}"
1902,"    public boolean supportsLocalVar() {
        return getFeature(LOCAL_VAR);
    }","  public void test514()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      boolean boolean0 = jexlFeatures0.supportsLocalVar();
}"
1903,"    public boolean supportsScript() {
        return getFeature(SCRIPT);
    }","  public void test515()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      boolean boolean0 = jexlFeatures0.supportsLocalVar();
}"
1904,"    public boolean supportsRegister() {
        return getFeature(REGISTER);
    }","  public void test516()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      boolean boolean0 = jexlFeatures0.supportsLocalVar();
}"
1905,"    public boolean supportsExpression() {
        return !getFeature(SCRIPT);
    }","  public void test517()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      boolean boolean0 = jexlFeatures0.supportsStructuredLiteral();
}"
1906,"    public boolean supportsStructuredLiteral() {
        return getFeature(STRUCTURED_LITERAL);
    }","  public void test518()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      boolean boolean0 = jexlFeatures0.supportsStructuredLiteral();
}"
1907,"    public boolean supportsRegister() {
        return getFeature(REGISTER);
    }","  public void test519()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      boolean boolean0 = jexlFeatures0.supportsStructuredLiteral();
}"
1908,"    public boolean isLexical() {
        return getFeature(LEXICAL);
    }","  public void test520()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      boolean boolean0 = jexlFeatures0.supportsStructuredLiteral();
}"
1909,"    public boolean supportsExpression() {
        return !getFeature(SCRIPT);
    }","  public void test521()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      boolean boolean0 = jexlFeatures0.isLexicalShade();
}"
1910,"    public boolean supportsLocalVar() {
        return getFeature(LOCAL_VAR);
    }","  public void test522()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      boolean boolean0 = jexlFeatures0.isLexicalShade();
}"
1911,"    public boolean supportsRegister() {
        return getFeature(REGISTER);
    }","  public void test523()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      boolean boolean0 = jexlFeatures0.isLexicalShade();
}"
1912,"    public boolean isLexicalShade() {
        return getFeature(LEXICAL_SHADE);
    }","  public void test524()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      boolean boolean0 = jexlFeatures0.isLexicalShade();
}"
1913,"    public boolean supportsRegister() {
        return getFeature(REGISTER);
    }","  public void test525()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      boolean boolean0 = jexlFeatures0.supportsMethodCall();
}"
1914,"    public boolean supportsMethodCall() {
        return getFeature(METHOD_CALL);
    }","  public void test526()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      boolean boolean0 = jexlFeatures0.supportsMethodCall();
}"
1915,"    public boolean supportsExpression() {
        return !getFeature(SCRIPT);
    }","  public void test527()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      boolean boolean0 = jexlFeatures0.supportsMethodCall();
}"
1916,"    public boolean isLexical() {
        return getFeature(LEXICAL);
    }","  public void test528()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      boolean boolean0 = jexlFeatures0.supportsMethodCall();
}"
1917,"    public boolean supportsRegister() {
        return getFeature(REGISTER);
    }","  public void test529()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      boolean boolean0 = jexlFeatures0.supportsNewInstance();
}"
1918,"    public boolean supportsLocalVar() {
        return getFeature(LOCAL_VAR);
    }","  public void test530()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      boolean boolean0 = jexlFeatures0.supportsNewInstance();
}"
1919,"    public boolean supportsScript() {
        return getFeature(SCRIPT);
    }","  public void test531()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      boolean boolean0 = jexlFeatures0.supportsNewInstance();
}"
1920,"    public boolean supportsNewInstance() {
        return getFeature(NEW_INSTANCE);
    }","  public void test532()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      boolean boolean0 = jexlFeatures0.supportsNewInstance();
}"
1921,"    public boolean supportsLoops() {
        return getFeature(LOOP);
    }","  public void test533()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      JexlFeatures jexlFeatures1 = jexlFeatures0.structuredLiteral(false);
      JexlFeatures jexlFeatures2 = jexlFeatures1.annotation(false);
}"
1922,"    public boolean supportsStructuredLiteral() {
        return getFeature(STRUCTURED_LITERAL);
    }","  public void test534()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      JexlFeatures jexlFeatures1 = jexlFeatures0.structuredLiteral(false);
      JexlFeatures jexlFeatures2 = jexlFeatures1.annotation(false);
}"
1923,"    public boolean isLexical() {
        return getFeature(LEXICAL);
    }","  public void test535()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      boolean boolean0 = jexlFeatures0.supportsSideEffect();
}"
1924,"    public boolean supportsRegister() {
        return getFeature(REGISTER);
    }","  public void test536()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      boolean boolean0 = jexlFeatures0.supportsSideEffect();
}"
1925,"    public boolean supportsExpression() {
        return !getFeature(SCRIPT);
    }","  public void test537()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      boolean boolean0 = jexlFeatures0.supportsSideEffect();
}"
1926,"    public boolean supportsSideEffect() {
        return getFeature(SIDE_EFFECT);
    }","  public void test538()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      boolean boolean0 = jexlFeatures0.supportsSideEffect();
}"
1927,"    public boolean supportsSideEffect() {
        return getFeature(SIDE_EFFECT);
    }","  public void test539()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      JexlFeatures jexlFeatures1 = jexlFeatures0.sideEffect(false);
      jexlFeatures1.annotation(true);
}"
1928,"    public boolean supportsAnnotation() {
        return getFeature(ANNOTATION);
    }","  public void test540()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      JexlFeatures jexlFeatures1 = jexlFeatures0.sideEffect(false);
      jexlFeatures1.annotation(true);
}"
1929,"    public boolean isLexical() {
        return getFeature(LEXICAL);
    }","  public void test541()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      boolean boolean0 = jexlFeatures0.supportsRegister();
}"
1930,"    public boolean supportsExpression() {
        return !getFeature(SCRIPT);
    }","  public void test542()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      boolean boolean0 = jexlFeatures0.supportsRegister();
}"
1931,"    public boolean supportsRegister() {
        return getFeature(REGISTER);
    }","  public void test543()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      boolean boolean0 = jexlFeatures0.supportsRegister();
}"
1932,"    public boolean supportsRegister() {
        return getFeature(REGISTER);
    }","  public void test544()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      boolean boolean0 = jexlFeatures0.supportsPragma();
}"
1933,"    public boolean supportsPragma() {
        return getFeature(PRAGMA);
    }","  public void test545()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      boolean boolean0 = jexlFeatures0.supportsPragma();
}"
1934,"    public boolean supportsLocalVar() {
        return getFeature(LOCAL_VAR);
    }","  public void test546()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      boolean boolean0 = jexlFeatures0.supportsPragma();
}"
1935,"    public boolean supportsScript() {
        return getFeature(SCRIPT);
    }","  public void test547()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      boolean boolean0 = jexlFeatures0.supportsPragma();
}"
1936,"    public boolean supportsAnnotation() {
        return getFeature(ANNOTATION);
    }","  public void test548()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.register(true);
      JexlFeatures jexlFeatures1 = jexlFeatures0.annotation(false);
}"
1937,"    public boolean supportsScript() {
        return getFeature(SCRIPT);
    }","  public void test549()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.register(true);
      JexlFeatures jexlFeatures1 = jexlFeatures0.annotation(false);
}"
1938,"    public boolean isLexical() {
        return getFeature(LEXICAL);
    }","  public void test550()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      boolean boolean0 = jexlFeatures0.isLexical();
}"
1939,"    public boolean supportsExpression() {
        return !getFeature(SCRIPT);
    }","  public void test551()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      boolean boolean0 = jexlFeatures0.isLexical();
}"
1940,"    public boolean supportsRegister() {
        return getFeature(REGISTER);
    }","  public void test552()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      boolean boolean0 = jexlFeatures0.isLexical();
}"
1941,"    public boolean supportsScript() {
        return getFeature(SCRIPT);
    }","  public void test553()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      boolean boolean0 = jexlFeatures0.supportsArrayReferenceExpr();
}"
1942,"    public boolean supportsLocalVar() {
        return getFeature(LOCAL_VAR);
    }","  public void test554()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      boolean boolean0 = jexlFeatures0.supportsArrayReferenceExpr();
}"
1943,"    public boolean supportsRegister() {
        return getFeature(REGISTER);
    }","  public void test555()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      boolean boolean0 = jexlFeatures0.supportsArrayReferenceExpr();
}"
1944,"    public boolean supportsArrayReferenceExpr() {
        return getFeature(ARRAY_REF_EXPR);
    }","  public void test556()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      boolean boolean0 = jexlFeatures0.supportsArrayReferenceExpr();
}"
1945,"    public boolean supportsAnnotation() {
        return getFeature(ANNOTATION);
    }","  public void test557()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      JexlFeatures jexlFeatures1 = jexlFeatures0.arrayReferenceExpr(false);
      JexlFeatures jexlFeatures2 = jexlFeatures1.annotation(false);
}"
1946,"    public boolean supportsSideEffect() {
        return getFeature(SIDE_EFFECT);
    }","  public void test558()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      JexlFeatures jexlFeatures1 = jexlFeatures0.arrayReferenceExpr(false);
      JexlFeatures jexlFeatures2 = jexlFeatures1.annotation(false);
}"
1947,"    public boolean supportsSideEffectGlobal() {
        return getFeature(SIDE_EFFECT_GLOBAL);
    }","  public void test559()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      boolean boolean0 = jexlFeatures0.supportsSideEffectGlobal();
}"
1948,"    public boolean supportsLocalVar() {
        return getFeature(LOCAL_VAR);
    }","  public void test560()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      boolean boolean0 = jexlFeatures0.supportsSideEffectGlobal();
}"
1949,"    public boolean supportsExpression() {
        return !getFeature(SCRIPT);
    }","  public void test561()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      boolean boolean0 = jexlFeatures0.supportsSideEffectGlobal();
}"
1950,"    public boolean supportsRegister() {
        return getFeature(REGISTER);
    }","  public void test562()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      boolean boolean0 = jexlFeatures0.supportsSideEffectGlobal();
}"
1951,"    public boolean supportsMethodCall() {
        return getFeature(METHOD_CALL);
    }","  public void test563()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      JexlFeatures jexlFeatures1 = new JexlFeatures(jexlFeatures0);
      JexlFeatures jexlFeatures2 = jexlFeatures1.methodCall(false);
      boolean boolean0 = jexlFeatures2.equals(jexlFeatures0);
}"
1952,"    public boolean supportsScript() {
        return getFeature(SCRIPT);
    }","  public void test564()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      JexlFeatures jexlFeatures1 = new JexlFeatures(jexlFeatures0);
      JexlFeatures jexlFeatures2 = jexlFeatures1.methodCall(false);
      boolean boolean0 = jexlFeatures2.equals(jexlFeatures0);
}"
1953,"    public boolean equals(final Object obj) {
        if (this == obj) {
            return true;
        }
        if (obj == null) {
            return false;
        }
        if (getClass() != obj.getClass()) {
            return false;
        }
        final JexlFeatures other = (JexlFeatures) obj;
        if (this.flags != other.flags) {
            return false;
        }
        if (!Objects.equals(this.reservedNames, other.reservedNames)) {
            return false;
        }
        return true;
    }","  public void test565()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      JexlFeatures jexlFeatures1 = new JexlFeatures(jexlFeatures0);
      JexlFeatures jexlFeatures2 = jexlFeatures1.methodCall(false);
      boolean boolean0 = jexlFeatures2.equals(jexlFeatures0);
}"
1954,"    public boolean supportsScript() {
        return getFeature(SCRIPT);
    }","  public void test566()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      boolean boolean0 = jexlFeatures0.supportsScript();
}"
1955,"    public boolean isLexical() {
        return getFeature(LEXICAL);
    }","  public void test567()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      boolean boolean0 = jexlFeatures0.supportsScript();
}"
1956,"    public boolean supportsRegister() {
        return getFeature(REGISTER);
    }","  public void test568()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      boolean boolean0 = jexlFeatures0.supportsScript();
}"
1957,"    public boolean supportsLoops() {
        return getFeature(LOOP);
    }","  public void test569()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      boolean boolean0 = jexlFeatures0.supportsLoops();
}"
1958,"    public boolean isLexical() {
        return getFeature(LEXICAL);
    }","  public void test570()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      boolean boolean0 = jexlFeatures0.supportsLoops();
}"
1959,"    public boolean supportsExpression() {
        return !getFeature(SCRIPT);
    }","  public void test571()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      boolean boolean0 = jexlFeatures0.supportsLoops();
}"
1960,"    public boolean supportsRegister() {
        return getFeature(REGISTER);
    }","  public void test572()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      boolean boolean0 = jexlFeatures0.supportsLoops();
}"
1961,"    public boolean supportsLocalVar() {
        return getFeature(LOCAL_VAR);
    }","  public void test573()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      boolean boolean0 = jexlFeatures0.supportsAnnotation();
}"
1962,"    public boolean supportsRegister() {
        return getFeature(REGISTER);
    }","  public void test574()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      boolean boolean0 = jexlFeatures0.supportsAnnotation();
}"
1963,"    public boolean supportsAnnotation() {
        return getFeature(ANNOTATION);
    }","  public void test575()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      boolean boolean0 = jexlFeatures0.supportsAnnotation();
}"
1964,"    public boolean supportsScript() {
        return getFeature(SCRIPT);
    }","  public void test576()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      boolean boolean0 = jexlFeatures0.supportsAnnotation();
}"
1965,"    public boolean supportsRegister() {
        return getFeature(REGISTER);
    }","  public void test577()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      boolean boolean0 = jexlFeatures0.supportsLambda();
}"
1966,"    public boolean supportsExpression() {
        return !getFeature(SCRIPT);
    }","  public void test578()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      boolean boolean0 = jexlFeatures0.supportsLambda();
}"
1967,"    public boolean supportsLambda() {
        return getFeature(LAMBDA);
    }","  public void test579()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      boolean boolean0 = jexlFeatures0.supportsLambda();
}"
1968,"    public boolean supportsLocalVar() {
        return getFeature(LOCAL_VAR);
    }","  public void test580()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      boolean boolean0 = jexlFeatures0.supportsLambda();
}"
1969,"    public boolean supportsScript() {
        return getFeature(SCRIPT);
    }","  public void test581()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.script(false);
      boolean boolean0 = jexlFeatures0.supportsExpression();
}"
1970,"    public boolean supportsAnnotation() {
        return getFeature(ANNOTATION);
    }","  public void test582()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.script(false);
      boolean boolean0 = jexlFeatures0.supportsExpression();
}"
1971,"    public boolean supportsExpression() {
        return !getFeature(SCRIPT);
    }","  public void test583()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.script(false);
      boolean boolean0 = jexlFeatures0.supportsExpression();
}"
1972,"    public boolean supportsAnnotation() {
        return getFeature(ANNOTATION);
    }","  public void test584()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      JexlFeatures jexlFeatures1 = jexlFeatures0.methodCall(false);
      jexlFeatures1.annotation(true);
}"
1973,"    public boolean supportsMethodCall() {
        return getFeature(METHOD_CALL);
    }","  public void test585()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      JexlFeatures jexlFeatures1 = jexlFeatures0.methodCall(false);
      jexlFeatures1.annotation(true);
}"
1974,"    public static void main(final String[] args) throws Exception {
        final JexlScriptEngineFactory fac = new JexlScriptEngineFactory();
        final ScriptEngine engine = fac.getScriptEngine();
        engine.put(""args"", args);
        if (args.length == 1){
            final Object value = engine.eval(read(null, args[0]));
            System.out.println(""Return value: ""+value);
        } else {
            final BufferedReader console = read(null, null);
            String line;
            System.out.print(""> "");
            while(null != (line=console.readLine())){
                try {
                    final Object value = engine.eval(line);
                    System.out.println(""Return value: ""+value);
                } catch (final ScriptException e) {
                    System.out.println(e.getLocalizedMessage());
                }
                System.out.print(""> "");
            }
        }
    }","  public void test0()  throws Throwable  {
      String[] stringArray0 = new String[5];
      SystemInUtil.addInputLine(""aY#%2{.n/4"");
      try { 
        Main.main(stringArray0);
        fail(""Expecting exception: IOException"");
      } catch(IOException e) {
         //
         // Simulated exception in System.in
         //
         verifyException(""org.evosuite.runtime.util.SystemInUtil"", e);
      }
  }"
1975,"    static BufferedReader read(final Charset charset, final String fileName) throws Exception {
        return new BufferedReader(
            new InputStreamReader(
                    fileName == null
                        ? System.in
                        : new FileInputStream(new File(fileName)),
                    charset == null
                        ? Charset.defaultCharset()
                        : charset));
    }","  public void test1()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      try { 
        Main.read(charset0, """");
        fail(""Expecting exception: FileNotFoundException"");
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.evosuite.runtime.mock.java.io.MockFileInputStream"", e);
      }
  }"
1976,"    public static void main(final String[] args) throws Exception {
        final JexlScriptEngineFactory fac = new JexlScriptEngineFactory();
        final ScriptEngine engine = fac.getScriptEngine();
        engine.put(""args"", args);
        if (args.length == 1){
            final Object value = engine.eval(read(null, args[0]));
            System.out.println(""Return value: ""+value);
        } else {
            final BufferedReader console = read(null, null);
            String line;
            System.out.print(""> "");
            while(null != (line=console.readLine())){
                try {
                    final Object value = engine.eval(line);
                    System.out.println(""Return value: ""+value);
                } catch (final ScriptException e) {
                    System.out.println(e.getLocalizedMessage());
                }
                System.out.print(""> "");
            }
        }
    }","  public void test2()  throws Throwable  {
      String[] stringArray0 = new String[1];
      Main.main(stringArray0);
      try { 
        Main.main(stringArray0);
        fail(""Expecting exception: ScriptException"");
      } catch(ScriptException e) {
         //
         // java.io.IOException: Simulated exception in System.in
         //
         verifyException(""org.apache.commons.jexl3.scripting.JexlScriptEngine"", e);
      }
  }"
1977,"    public static void main(final String[] args) throws Exception {
        final JexlScriptEngineFactory fac = new JexlScriptEngineFactory();
        final ScriptEngine engine = fac.getScriptEngine();
        engine.put(""args"", args);
        if (args.length == 1){
            final Object value = engine.eval(read(null, args[0]));
            System.out.println(""Return value: ""+value);
        } else {
            final BufferedReader console = read(null, null);
            String line;
            System.out.print(""> "");
            while(null != (line=console.readLine())){
                try {
                    final Object value = engine.eval(line);
                    System.out.println(""Return value: ""+value);
                } catch (final ScriptException e) {
                    System.out.println(e.getLocalizedMessage());
                }
                System.out.print(""> "");
            }
        }
    }","  public void test3()  throws Throwable  {
      try { 
        Main.main((String[]) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.scripting.Main"", e);
      }
  }"
1978,"    public static void main(final String[] args) throws Exception {
        final JexlScriptEngineFactory fac = new JexlScriptEngineFactory();
        final ScriptEngine engine = fac.getScriptEngine();
        engine.put(""args"", args);
        if (args.length == 1){
            final Object value = engine.eval(read(null, args[0]));
            System.out.println(""Return value: ""+value);
        } else {
            final BufferedReader console = read(null, null);
            String line;
            System.out.print(""> "");
            while(null != (line=console.readLine())){
                try {
                    final Object value = engine.eval(line);
                    System.out.println(""Return value: ""+value);
                } catch (final ScriptException e) {
                    System.out.println(e.getLocalizedMessage());
                }
                System.out.print(""> "");
            }
        }
    }","  public void test4()  throws Throwable  {
      String[] stringArray0 = new String[12];
      SystemInUtil.addInputLine("""");
      try { 
        Main.main(stringArray0);
        fail(""Expecting exception: IOException"");
      } catch(IOException e) {
         //
         // Simulated exception in System.in
         //
         verifyException(""org.evosuite.runtime.util.SystemInUtil"", e);
      }
  }"
1979,"    static BufferedReader read(final Charset charset, final String fileName) throws Exception {
        return new BufferedReader(
            new InputStreamReader(
                    fileName == null
                        ? System.in
                        : new FileInputStream(new File(fileName)),
                    charset == null
                        ? Charset.defaultCharset()
                        : charset));
    }","  public void test5()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      BufferedReader bufferedReader0 = Main.read(charset0, (String) null);
}"
1980,"    public static void main(final String[] args) throws Exception {
        final JexlScriptEngineFactory fac = new JexlScriptEngineFactory();
        final ScriptEngine engine = fac.getScriptEngine();
        engine.put(""args"", args);
        if (args.length == 1){
            final Object value = engine.eval(read(null, args[0]));
            System.out.println(""Return value: ""+value);
        } else {
            final BufferedReader console = read(null, null);
            String line;
            System.out.print(""> "");
            while(null != (line=console.readLine())){
                try {
                    final Object value = engine.eval(line);
                    System.out.println(""Return value: ""+value);
                } catch (final ScriptException e) {
                    System.out.println(e.getLocalizedMessage());
                }
                System.out.print(""> "");
            }
        }
    }","  public void test6()  throws Throwable  {
      String[] stringArray0 = new String[6];
      Main.main(stringArray0);
}"
1981,"    public static void main(final String[] args) throws Exception {
        final JexlScriptEngineFactory fac = new JexlScriptEngineFactory();
        final ScriptEngine engine = fac.getScriptEngine();
        engine.put(""args"", args);
        if (args.length == 1){
            final Object value = engine.eval(read(null, args[0]));
            System.out.println(""Return value: ""+value);
        } else {
            final BufferedReader console = read(null, null);
            String line;
            System.out.print(""> "");
            while(null != (line=console.readLine())){
                try {
                    final Object value = engine.eval(line);
                    System.out.println(""Return value: ""+value);
                } catch (final ScriptException e) {
                    System.out.println(e.getLocalizedMessage());
                }
                System.out.print(""> "");
            }
        }
    }","  public void test7()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = ""3beHtB&V)"";
      try { 
        Main.main(stringArray0);
        fail(""Expecting exception: FileNotFoundException"");
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.evosuite.runtime.mock.java.io.MockFileInputStream"", e);
      }
  }"
1982,,"  public void test8()  throws Throwable  {
      Main main0 = new Main();
  }"
1983,"    public String getProgram(final String... statements) {
        final StringBuilder sb = new StringBuilder();
        for(final String statement : statements){
            sb.append(statement.trim());
            if (!statement.endsWith("";"")){
                sb.append(';');
            }
        }
        return sb.toString();
    }","  public void test0()  throws Throwable  {
      JexlScriptEngineFactory jexlScriptEngineFactory0 = new JexlScriptEngineFactory();
      String[] stringArray0 = new String[0];
      String string0 = jexlScriptEngineFactory0.getProgram(stringArray0);
}"
1984,"    public Object getParameter(final String key) {
        switch (key) {
            case ScriptEngine.ENGINE:
                return getEngineName();
            case ScriptEngine.ENGINE_VERSION:
                return getEngineVersion();
            case ScriptEngine.NAME:
                return getNames();
            case ScriptEngine.LANGUAGE:
                return getLanguageName();
            case ScriptEngine.LANGUAGE_VERSION:
                return getLanguageVersion();
            case ""THREADING"":
                /*
                 * To implement multithreading, the scripting engine context (inherited from AbstractScriptEngine)
                 * would need to be made thread-safe; so would the setContext/getContext methods.
                 * It is easier to share the underlying Uberspect and JEXL engine instance, especially
                 * with an expression cache.
                 */
            default:
                return null;
        }
    }","  public void test1()  throws Throwable  {
      JexlScriptEngineFactory jexlScriptEngineFactory0 = new JexlScriptEngineFactory();
      // Undeclared exception!
      try { 
        jexlScriptEngineFactory0.getParameter((String) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.scripting.JexlScriptEngineFactory"", e);
      }
  }"
1985,"    public String getMethodCallSyntax(final String obj, final String m, final String... args) {
        final StringBuilder sb = new StringBuilder();
        sb.append(obj);
        sb.append('.');
        sb.append(m);
        sb.append('(');
        boolean needComma = false;
        for(final String arg : args){
            if (needComma) {
                sb.append(',');
            }
            sb.append(arg);
            needComma = true;
        }
        sb.append(')');
        return sb.toString();
    }","  public void test2()  throws Throwable  {
      JexlScriptEngineFactory jexlScriptEngineFactory0 = new JexlScriptEngineFactory();
      // Undeclared exception!
      try { 
        jexlScriptEngineFactory0.getMethodCallSyntax("""", """", (String[]) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.scripting.JexlScriptEngineFactory"", e);
      }
  }"
1986,"    public String getEngineVersion() {
        return ""3.2""; // ensure this is updated if function changes are made to this class
    }","  public void test3()  throws Throwable  {
      JexlScriptEngineFactory jexlScriptEngineFactory0 = new JexlScriptEngineFactory();
      String string0 = jexlScriptEngineFactory0.getEngineVersion();
}"
1987,"    public String getLanguageName() {
        return ""JEXL"";
    }","  public void test4()  throws Throwable  {
      JexlScriptEngineFactory jexlScriptEngineFactory0 = new JexlScriptEngineFactory();
      String string0 = jexlScriptEngineFactory0.getLanguageName();
}"
1988,"    public String getEngineName() {
        return ""JEXL Engine"";
    }","  public void test5()  throws Throwable  {
      JexlScriptEngineFactory jexlScriptEngineFactory0 = new JexlScriptEngineFactory();
      String string0 = jexlScriptEngineFactory0.getEngineName();
}"
1989,"    public String getLanguageVersion() {
        return ""3.2""; // TODO this should be derived from the actual version
    }","  public void test6()  throws Throwable  {
      JexlScriptEngineFactory jexlScriptEngineFactory0 = new JexlScriptEngineFactory();
      String string0 = jexlScriptEngineFactory0.getLanguageVersion();
}"
1990,"    public List<String> getNames() {
        return Collections.unmodifiableList(Arrays.asList(""JEXL"", ""Jexl"", ""jexl"",
                                                          ""JEXL2"", ""Jexl2"", ""jexl2"",
                                                          ""JEXL3"", ""Jexl3"", ""jexl3""));
    }","  public void test7()  throws Throwable  {
      JexlScriptEngineFactory jexlScriptEngineFactory0 = new JexlScriptEngineFactory();
      List<String> list0 = jexlScriptEngineFactory0.getNames();
}"
1991,"    public String getProgram(final String... statements) {
        final StringBuilder sb = new StringBuilder();
        for(final String statement : statements){
            sb.append(statement.trim());
            if (!statement.endsWith("";"")){
                sb.append(';');
            }
        }
        return sb.toString();
    }","  public void test8()  throws Throwable  {
      JexlScriptEngineFactory jexlScriptEngineFactory0 = new JexlScriptEngineFactory();
      String[] stringArray0 = new String[6];
      stringArray0[0] = ""3.@cTC(T"";
      // Undeclared exception!
      try { 
        jexlScriptEngineFactory0.getProgram(stringArray0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.scripting.JexlScriptEngineFactory"", e);
      }
  }"
1992,"    public String getProgram(final String... statements) {
        final StringBuilder sb = new StringBuilder();
        for(final String statement : statements){
            sb.append(statement.trim());
            if (!statement.endsWith("";"")){
                sb.append(';');
            }
        }
        return sb.toString();
    }","  public void test9()  throws Throwable  {
      JexlScriptEngineFactory jexlScriptEngineFactory0 = new JexlScriptEngineFactory();
      String[] stringArray0 = new String[1];
      stringArray0[0] = ""B2K4xQhI?= &:;"";
      String string0 = jexlScriptEngineFactory0.getProgram(stringArray0);
}"
1993,"    public Object getParameter(final String key) {
        switch (key) {
            case ScriptEngine.ENGINE:
                return getEngineName();
            case ScriptEngine.ENGINE_VERSION:
                return getEngineVersion();
            case ScriptEngine.NAME:
                return getNames();
            case ScriptEngine.LANGUAGE:
                return getLanguageName();
            case ScriptEngine.LANGUAGE_VERSION:
                return getLanguageVersion();
            case ""THREADING"":
                /*
                 * To implement multithreading, the scripting engine context (inherited from AbstractScriptEngine)
                 * would need to be made thread-safe; so would the setContext/getContext methods.
                 * It is easier to share the underlying Uberspect and JEXL engine instance, especially
                 * with an expression cache.
                 */
            default:
                return null;
        }
    }","  public void test10()  throws Throwable  {
      JexlScriptEngineFactory jexlScriptEngineFactory0 = new JexlScriptEngineFactory();
      Object object0 = jexlScriptEngineFactory0.getParameter(""B2K4xQhI?= &:;"");
}"
1994,"    public Object getParameter(final String key) {
        switch (key) {
            case ScriptEngine.ENGINE:
                return getEngineName();
            case ScriptEngine.ENGINE_VERSION:
                return getEngineVersion();
            case ScriptEngine.NAME:
                return getNames();
            case ScriptEngine.LANGUAGE:
                return getLanguageName();
            case ScriptEngine.LANGUAGE_VERSION:
                return getLanguageVersion();
            case ""THREADING"":
                /*
                 * To implement multithreading, the scripting engine context (inherited from AbstractScriptEngine)
                 * would need to be made thread-safe; so would the setContext/getContext methods.
                 * It is easier to share the underlying Uberspect and JEXL engine instance, especially
                 * with an expression cache.
                 */
            default:
                return null;
        }
    }","  public void test11()  throws Throwable  {
      JexlScriptEngineFactory jexlScriptEngineFactory0 = new JexlScriptEngineFactory();
      Object object0 = jexlScriptEngineFactory0.getParameter(""THREADING"");
}"
1995,"    public String getOutputStatement(final String toDisplay) {
        if (toDisplay == null) {
            return ""JEXL.out.print(null)"";
        }
        return ""JEXL.out.print(""+StringParser.escapeString(toDisplay, '\'')+"")"";
    }","  public void test12()  throws Throwable  {
      JexlScriptEngineFactory jexlScriptEngineFactory0 = new JexlScriptEngineFactory();
      String string0 = jexlScriptEngineFactory0.getOutputStatement((String) null);
}"
1996,"    public String getOutputStatement(final String toDisplay) {
        if (toDisplay == null) {
            return ""JEXL.out.print(null)"";
        }
        return ""JEXL.out.print(""+StringParser.escapeString(toDisplay, '\'')+"")"";
    }","  public void test13()  throws Throwable  {
      JexlScriptEngineFactory jexlScriptEngineFactory0 = new JexlScriptEngineFactory();
      String string0 = jexlScriptEngineFactory0.getOutputStatement(""javax.script.name"");
}"
1997,"    public String getMethodCallSyntax(final String obj, final String m, final String... args) {
        final StringBuilder sb = new StringBuilder();
        sb.append(obj);
        sb.append('.');
        sb.append(m);
        sb.append('(');
        boolean needComma = false;
        for(final String arg : args){
            if (needComma) {
                sb.append(',');
            }
            sb.append(arg);
            needComma = true;
        }
        sb.append(')');
        return sb.toString();
    }","  public void test14()  throws Throwable  {
      JexlScriptEngineFactory jexlScriptEngineFactory0 = new JexlScriptEngineFactory();
      String[] stringArray0 = new String[6];
      String string0 = jexlScriptEngineFactory0.getMethodCallSyntax(""3.@cTC(T"", ""3.@cTC(T"", stringArray0);
}"
1998,"    public List<String> getExtensions() {
        return Collections.unmodifiableList(Arrays.asList(""jexl"", ""jexl2"", ""jexl3""));
    }","  public void test15()  throws Throwable  {
      JexlScriptEngineFactory jexlScriptEngineFactory0 = new JexlScriptEngineFactory();
      List<String> list0 = jexlScriptEngineFactory0.getExtensions();
}"
1999,"    public Object getParameter(final String key) {
        switch (key) {
            case ScriptEngine.ENGINE:
                return getEngineName();
            case ScriptEngine.ENGINE_VERSION:
                return getEngineVersion();
            case ScriptEngine.NAME:
                return getNames();
            case ScriptEngine.LANGUAGE:
                return getLanguageName();
            case ScriptEngine.LANGUAGE_VERSION:
                return getLanguageVersion();
            case ""THREADING"":
                /*
                 * To implement multithreading, the scripting engine context (inherited from AbstractScriptEngine)
                 * would need to be made thread-safe; so would the setContext/getContext methods.
                 * It is easier to share the underlying Uberspect and JEXL engine instance, especially
                 * with an expression cache.
                 */
            default:
                return null;
        }
    }","  public void test16()  throws Throwable  {
      JexlScriptEngineFactory jexlScriptEngineFactory0 = new JexlScriptEngineFactory();
      Object object0 = jexlScriptEngineFactory0.getParameter(""javax.script.language"");
}"
2000,"    public Object getParameter(final String key) {
        switch (key) {
            case ScriptEngine.ENGINE:
                return getEngineName();
            case ScriptEngine.ENGINE_VERSION:
                return getEngineVersion();
            case ScriptEngine.NAME:
                return getNames();
            case ScriptEngine.LANGUAGE:
                return getLanguageName();
            case ScriptEngine.LANGUAGE_VERSION:
                return getLanguageVersion();
            case ""THREADING"":
                /*
                 * To implement multithreading, the scripting engine context (inherited from AbstractScriptEngine)
                 * would need to be made thread-safe; so would the setContext/getContext methods.
                 * It is easier to share the underlying Uberspect and JEXL engine instance, especially
                 * with an expression cache.
                 */
            default:
                return null;
        }
    }","  public void test17()  throws Throwable  {
      JexlScriptEngineFactory jexlScriptEngineFactory0 = new JexlScriptEngineFactory();
      Object object0 = jexlScriptEngineFactory0.getParameter(""javax.script.language"");
}"
2001,"    public Object getParameter(final String key) {
        switch (key) {
            case ScriptEngine.ENGINE:
                return getEngineName();
            case ScriptEngine.ENGINE_VERSION:
                return getEngineVersion();
            case ScriptEngine.NAME:
                return getNames();
            case ScriptEngine.LANGUAGE:
                return getLanguageName();
            case ScriptEngine.LANGUAGE_VERSION:
                return getLanguageVersion();
            case ""THREADING"":
                /*
                 * To implement multithreading, the scripting engine context (inherited from AbstractScriptEngine)
                 * would need to be made thread-safe; so would the setContext/getContext methods.
                 * It is easier to share the underlying Uberspect and JEXL engine instance, especially
                 * with an expression cache.
                 */
            default:
                return null;
        }
    }","  public void test18()  throws Throwable  {
      JexlScriptEngineFactory jexlScriptEngineFactory0 = new JexlScriptEngineFactory();
      Object object0 = jexlScriptEngineFactory0.getParameter(""javax.script.engine_version"");
}"
2002,"    public Object getParameter(final String key) {
        switch (key) {
            case ScriptEngine.ENGINE:
                return getEngineName();
            case ScriptEngine.ENGINE_VERSION:
                return getEngineVersion();
            case ScriptEngine.NAME:
                return getNames();
            case ScriptEngine.LANGUAGE:
                return getLanguageName();
            case ScriptEngine.LANGUAGE_VERSION:
                return getLanguageVersion();
            case ""THREADING"":
                /*
                 * To implement multithreading, the scripting engine context (inherited from AbstractScriptEngine)
                 * would need to be made thread-safe; so would the setContext/getContext methods.
                 * It is easier to share the underlying Uberspect and JEXL engine instance, especially
                 * with an expression cache.
                 */
            default:
                return null;
        }
    }","  public void test19()  throws Throwable  {
      JexlScriptEngineFactory jexlScriptEngineFactory0 = new JexlScriptEngineFactory();
      Object object0 = jexlScriptEngineFactory0.getParameter(""javax.script.engine_version"");
}"
2003,"    public List<String> getMimeTypes() {
        return Collections.unmodifiableList(Arrays.asList(""application/x-jexl"",
                                                          ""application/x-jexl2"",
                                                          ""application/x-jexl3""));
    }","  public void test20()  throws Throwable  {
      JexlScriptEngineFactory jexlScriptEngineFactory0 = new JexlScriptEngineFactory();
      List<String> list0 = jexlScriptEngineFactory0.getMimeTypes();
}"
2004,"    public ScriptEngine getScriptEngine() {
        return new JexlScriptEngine(this);
    }","  public void test21()  throws Throwable  {
      JexlScriptEngineFactory jexlScriptEngineFactory0 = new JexlScriptEngineFactory();
      ScriptEngine scriptEngine0 = jexlScriptEngineFactory0.getScriptEngine();
}"
2005,"    public Object getParameter(final String key) {
        switch (key) {
            case ScriptEngine.ENGINE:
                return getEngineName();
            case ScriptEngine.ENGINE_VERSION:
                return getEngineVersion();
            case ScriptEngine.NAME:
                return getNames();
            case ScriptEngine.LANGUAGE:
                return getLanguageName();
            case ScriptEngine.LANGUAGE_VERSION:
                return getLanguageVersion();
            case ""THREADING"":
                /*
                 * To implement multithreading, the scripting engine context (inherited from AbstractScriptEngine)
                 * would need to be made thread-safe; so would the setContext/getContext methods.
                 * It is easier to share the underlying Uberspect and JEXL engine instance, especially
                 * with an expression cache.
                 */
            default:
                return null;
        }
    }","  public void test22()  throws Throwable  {
      JexlScriptEngineFactory jexlScriptEngineFactory0 = new JexlScriptEngineFactory();
      Object object0 = jexlScriptEngineFactory0.getParameter(""javax.script.language_version"");
}"
2006,"    public Object getParameter(final String key) {
        switch (key) {
            case ScriptEngine.ENGINE:
                return getEngineName();
            case ScriptEngine.ENGINE_VERSION:
                return getEngineVersion();
            case ScriptEngine.NAME:
                return getNames();
            case ScriptEngine.LANGUAGE:
                return getLanguageName();
            case ScriptEngine.LANGUAGE_VERSION:
                return getLanguageVersion();
            case ""THREADING"":
                /*
                 * To implement multithreading, the scripting engine context (inherited from AbstractScriptEngine)
                 * would need to be made thread-safe; so would the setContext/getContext methods.
                 * It is easier to share the underlying Uberspect and JEXL engine instance, especially
                 * with an expression cache.
                 */
            default:
                return null;
        }
    }","  public void test23()  throws Throwable  {
      JexlScriptEngineFactory jexlScriptEngineFactory0 = new JexlScriptEngineFactory();
      Object object0 = jexlScriptEngineFactory0.getParameter(""javax.script.language_version"");
}"
2007,"    public Object getParameter(final String key) {
        switch (key) {
            case ScriptEngine.ENGINE:
                return getEngineName();
            case ScriptEngine.ENGINE_VERSION:
                return getEngineVersion();
            case ScriptEngine.NAME:
                return getNames();
            case ScriptEngine.LANGUAGE:
                return getLanguageName();
            case ScriptEngine.LANGUAGE_VERSION:
                return getLanguageVersion();
            case ""THREADING"":
                /*
                 * To implement multithreading, the scripting engine context (inherited from AbstractScriptEngine)
                 * would need to be made thread-safe; so would the setContext/getContext methods.
                 * It is easier to share the underlying Uberspect and JEXL engine instance, especially
                 * with an expression cache.
                 */
            default:
                return null;
        }
    }","  public void test24()  throws Throwable  {
      JexlScriptEngineFactory jexlScriptEngineFactory0 = new JexlScriptEngineFactory();
      Object object0 = jexlScriptEngineFactory0.getParameter(""javax.script.engine"");
}"
2008,"    public Object getParameter(final String key) {
        switch (key) {
            case ScriptEngine.ENGINE:
                return getEngineName();
            case ScriptEngine.ENGINE_VERSION:
                return getEngineVersion();
            case ScriptEngine.NAME:
                return getNames();
            case ScriptEngine.LANGUAGE:
                return getLanguageName();
            case ScriptEngine.LANGUAGE_VERSION:
                return getLanguageVersion();
            case ""THREADING"":
                /*
                 * To implement multithreading, the scripting engine context (inherited from AbstractScriptEngine)
                 * would need to be made thread-safe; so would the setContext/getContext methods.
                 * It is easier to share the underlying Uberspect and JEXL engine instance, especially
                 * with an expression cache.
                 */
            default:
                return null;
        }
    }","  public void test25()  throws Throwable  {
      JexlScriptEngineFactory jexlScriptEngineFactory0 = new JexlScriptEngineFactory();
      Object object0 = jexlScriptEngineFactory0.getParameter(""javax.script.engine"");
}"
2009,"    public Object getParameter(final String key) {
        switch (key) {
            case ScriptEngine.ENGINE:
                return getEngineName();
            case ScriptEngine.ENGINE_VERSION:
                return getEngineVersion();
            case ScriptEngine.NAME:
                return getNames();
            case ScriptEngine.LANGUAGE:
                return getLanguageName();
            case ScriptEngine.LANGUAGE_VERSION:
                return getLanguageVersion();
            case ""THREADING"":
                /*
                 * To implement multithreading, the scripting engine context (inherited from AbstractScriptEngine)
                 * would need to be made thread-safe; so would the setContext/getContext methods.
                 * It is easier to share the underlying Uberspect and JEXL engine instance, especially
                 * with an expression cache.
                 */
            default:
                return null;
        }
    }","  public void test26()  throws Throwable  {
      JexlScriptEngineFactory jexlScriptEngineFactory0 = new JexlScriptEngineFactory();
      Object object0 = jexlScriptEngineFactory0.getParameter(""javax.script.name"");
}"
2010,"    public Object eval(final Reader reader, final ScriptContext context) throws ScriptException {
        // This is mandated by JSR-223 (see SCR.5.5.2   Methods)
        if (reader == null || context == null) {
            throw new NullPointerException(""script and context must be non-null"");
        }
        return eval(readerToString(reader), context);
    }","  public void test0()  throws Throwable  {
      JexlScriptEngineFactory jexlScriptEngineFactory0 = new JexlScriptEngineFactory();
      JexlScriptEngine jexlScriptEngine0 = new JexlScriptEngine(jexlScriptEngineFactory0);
      ScriptContext scriptContext0 = jexlScriptEngine0.getContext();
      Object object0 = jexlScriptEngine0.eval("""", scriptContext0);
}"
2011,"    public Object eval(final Reader reader, final ScriptContext context) throws ScriptException {
        // This is mandated by JSR-223 (see SCR.5.5.2   Methods)
        if (reader == null || context == null) {
            throw new NullPointerException(""script and context must be non-null"");
        }
        return eval(readerToString(reader), context);
    }","  public void test1()  throws Throwable  {
      JexlScriptEngine jexlScriptEngine0 = new JexlScriptEngine();
      StringReader stringReader0 = new StringReader(""JEXL"");
      SimpleScriptContext simpleScriptContext0 = new SimpleScriptContext();
      Object object0 = jexlScriptEngine0.eval((Reader) stringReader0, (ScriptContext) simpleScriptContext0);
}"
2012,"    public Object eval(final Reader reader, final ScriptContext context) throws ScriptException {
        // This is mandated by JSR-223 (see SCR.5.5.2   Methods)
        if (reader == null || context == null) {
            throw new NullPointerException(""script and context must be non-null"");
        }
        return eval(readerToString(reader), context);
    }","  public void test2()  throws Throwable  {
      JexlScriptEngineFactory jexlScriptEngineFactory0 = new JexlScriptEngineFactory();
      JexlScriptEngine jexlScriptEngine0 = new JexlScriptEngine(jexlScriptEngineFactory0);
      SimpleScriptContext simpleScriptContext0 = new SimpleScriptContext();
      Reader reader0 = simpleScriptContext0.getReader();
      jexlScriptEngine0.compile(reader0);
      try { 
        jexlScriptEngine0.eval(reader0, (ScriptContext) simpleScriptContext0);
        fail(""Expecting exception: ScriptException"");
      } catch(ScriptException e) {
         //
         // java.io.IOException: Simulated exception in System.in
         //
         verifyException(""org.apache.commons.jexl3.scripting.JexlScriptEngine"", e);
      }
  }"
2013,"    public CompiledScript compile(final String script) throws ScriptException {
        // This is mandated by JSR-223
        if (script == null) {
            throw new NullPointerException(""script must be non-null"");
        }
        try {
            final JexlScript jexlScript = jexlEngine.createScript(script);
            return new JexlCompiledScript(jexlScript);
        } catch (final Exception e) {
            throw new ScriptException(e.toString());
        }
    }","  public void test3()  throws Throwable  {
      JexlScriptEngine jexlScriptEngine0 = new JexlScriptEngine();
      try { 
        jexlScriptEngine0.compile(""Log4J 1.2 not available"");
        fail(""Expecting exception: ScriptException"");
      } catch(ScriptException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Log4J 1.2 not available
         //
         verifyException(""org.apache.commons.jexl3.scripting.JexlScriptEngine"", e);
      }
  }"
2014,"    public CompiledScript compile(final String script) throws ScriptException {
        // This is mandated by JSR-223
        if (script == null) {
            throw new NullPointerException(""script must be non-null"");
        }
        try {
            final JexlScript jexlScript = jexlEngine.createScript(script);
            return new JexlCompiledScript(jexlScript);
        } catch (final Exception e) {
            throw new ScriptException(e.toString());
        }
    }","  public void test4()  throws Throwable  {
      JexlScriptEngine jexlScriptEngine0 = new JexlScriptEngine();
      StringReader stringReader0 = new StringReader(""nPbXY<\be["");
      BufferedReader bufferedReader0 = new BufferedReader(stringReader0);
      try { 
        jexlScriptEngine0.compile((Reader) bufferedReader0);
        fail(""Expecting exception: ScriptException"");
      } catch(ScriptException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: 
         //
         verifyException(""org.apache.commons.jexl3.scripting.JexlScriptEngine"", e);
      }
  }"
2015,"    public CompiledScript compile(final String script) throws ScriptException {
        // This is mandated by JSR-223
        if (script == null) {
            throw new NullPointerException(""script must be non-null"");
        }
        try {
            final JexlScript jexlScript = jexlEngine.createScript(script);
            return new JexlCompiledScript(jexlScript);
        } catch (final Exception e) {
            throw new ScriptException(e.toString());
        }
    }","  public void test5()  throws Throwable  {
      JexlScriptEngine jexlScriptEngine0 = new JexlScriptEngine();
      CompiledScript compiledScript0 = jexlScriptEngine0.compile(""JEXL"");
}"
2016,"    public Object eval(final Reader reader, final ScriptContext context) throws ScriptException {
        // This is mandated by JSR-223 (see SCR.5.5.2   Methods)
        if (reader == null || context == null) {
            throw new NullPointerException(""script and context must be non-null"");
        }
        return eval(readerToString(reader), context);
    }","  public void test6()  throws Throwable  {
      JexlScriptEngine jexlScriptEngine0 = new JexlScriptEngine();
      jexlScriptEngine0.eval(""GA=7"");
      ScriptContext scriptContext0 = jexlScriptEngine0.getContext();
      Object object0 = jexlScriptEngine0.eval(""GA=7"", scriptContext0);
}"
2017,"    public Object eval(final Reader reader, final ScriptContext context) throws ScriptException {
        // This is mandated by JSR-223 (see SCR.5.5.2   Methods)
        if (reader == null || context == null) {
            throw new NullPointerException(""script and context must be non-null"");
        }
        return eval(readerToString(reader), context);
    }","  public void test7()  throws Throwable  {
      JexlScriptEngineFactory jexlScriptEngineFactory0 = new JexlScriptEngineFactory();
      JexlScriptEngine jexlScriptEngine0 = new JexlScriptEngine(jexlScriptEngineFactory0);
      JexlScriptEngine.JexlScriptObject jexlScriptEngine_JexlScriptObject0 = jexlScriptEngine0.new JexlScriptObject();
      SimpleBindings simpleBindings0 = new SimpleBindings();
      simpleBindings0.put(""JEXL"", (Object) jexlScriptEngine_JexlScriptObject0);
      Object object0 = jexlScriptEngine0.eval(""JEXL"", (Bindings) simpleBindings0);
}"
2018,"    public Object eval(final Reader reader, final ScriptContext context) throws ScriptException {
        // This is mandated by JSR-223 (see SCR.5.5.2   Methods)
        if (reader == null || context == null) {
            throw new NullPointerException(""script and context must be non-null"");
        }
        return eval(readerToString(reader), context);
    }","  public void test8()  throws Throwable  {
      JexlScriptEngineFactory jexlScriptEngineFactory0 = new JexlScriptEngineFactory();
      JexlScriptEngine jexlScriptEngine0 = new JexlScriptEngine(jexlScriptEngineFactory0);
      JexlScriptEngine.JexlScriptObject jexlScriptEngine_JexlScriptObject0 = jexlScriptEngine0.new JexlScriptObject();
      SimpleBindings simpleBindings0 = new SimpleBindings();
      simpleBindings0.put(""JEXL"", (Object) jexlScriptEngine_JexlScriptObject0);
      Object object0 = jexlScriptEngine0.eval(""JEXL"", (Bindings) simpleBindings0);
}"
2019,"    public CompiledScript compile(final String script) throws ScriptException {
        // This is mandated by JSR-223
        if (script == null) {
            throw new NullPointerException(""script must be non-null"");
        }
        try {
            final JexlScript jexlScript = jexlEngine.createScript(script);
            return new JexlCompiledScript(jexlScript);
        } catch (final Exception e) {
            throw new ScriptException(e.toString());
        }
    }","  public void test9()  throws Throwable  {
      JexlScriptEngine jexlScriptEngine0 = new JexlScriptEngine();
      // Undeclared exception!
      try { 
        jexlScriptEngine0.compile((Reader) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // script must be non-null
         //
         verifyException(""org.apache.commons.jexl3.scripting.JexlScriptEngine"", e);
      }
  }"
2020,"    public CompiledScript compile(final String script) throws ScriptException {
        // This is mandated by JSR-223
        if (script == null) {
            throw new NullPointerException(""script must be non-null"");
        }
        try {
            final JexlScript jexlScript = jexlEngine.createScript(script);
            return new JexlCompiledScript(jexlScript);
        } catch (final Exception e) {
            throw new ScriptException(e.toString());
        }
    }","  public void test10()  throws Throwable  {
      JexlScriptEngine jexlScriptEngine0 = new JexlScriptEngine();
      // Undeclared exception!
      try { 
        jexlScriptEngine0.compile((String) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // script must be non-null
         //
         verifyException(""org.apache.commons.jexl3.scripting.JexlScriptEngine"", e);
      }
  }"
2021,"    public Object eval(final Reader reader, final ScriptContext context) throws ScriptException {
        // This is mandated by JSR-223 (see SCR.5.5.2   Methods)
        if (reader == null || context == null) {
            throw new NullPointerException(""script and context must be non-null"");
        }
        return eval(readerToString(reader), context);
    }","  public void test11()  throws Throwable  {
      JexlScriptEngine jexlScriptEngine0 = new JexlScriptEngine();
      // Undeclared exception!
      try { 
        jexlScriptEngine0.eval(""\""and\"""", (ScriptContext) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // script and context must be non-null
         //
         verifyException(""org.apache.commons.jexl3.scripting.JexlScriptEngine"", e);
      }
  }"
2022,"    public Object eval(final Reader reader, final ScriptContext context) throws ScriptException {
        // This is mandated by JSR-223 (see SCR.5.5.2   Methods)
        if (reader == null || context == null) {
            throw new NullPointerException(""script and context must be non-null"");
        }
        return eval(readerToString(reader), context);
    }","  public void test12()  throws Throwable  {
      JexlScriptEngine jexlScriptEngine0 = new JexlScriptEngine();
      ScriptContext scriptContext0 = jexlScriptEngine0.getContext();
      // Undeclared exception!
      try { 
        jexlScriptEngine0.eval((String) null, scriptContext0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // script and context must be non-null
         //
         verifyException(""org.apache.commons.jexl3.scripting.JexlScriptEngine"", e);
      }
  }"
2023,"    public Object eval(final Reader reader, final ScriptContext context) throws ScriptException {
        // This is mandated by JSR-223 (see SCR.5.5.2   Methods)
        if (reader == null || context == null) {
            throw new NullPointerException(""script and context must be non-null"");
        }
        return eval(readerToString(reader), context);
    }","  public void test13()  throws Throwable  {
      JexlScriptEngine jexlScriptEngine0 = new JexlScriptEngine();
      StringReader stringReader0 = new StringReader(""context"");
      // Undeclared exception!
      try { 
        jexlScriptEngine0.eval((Reader) stringReader0, (ScriptContext) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // script and context must be non-null
         //
         verifyException(""org.apache.commons.jexl3.scripting.JexlScriptEngine"", e);
      }
  }"
2024,"    public Object eval(final Reader reader, final ScriptContext context) throws ScriptException {
        // This is mandated by JSR-223 (see SCR.5.5.2   Methods)
        if (reader == null || context == null) {
            throw new NullPointerException(""script and context must be non-null"");
        }
        return eval(readerToString(reader), context);
    }","  public void test14()  throws Throwable  {
      JexlScriptEngine jexlScriptEngine0 = new JexlScriptEngine();
      ScriptContext scriptContext0 = jexlScriptEngine0.getContext();
      // Undeclared exception!
      try { 
        jexlScriptEngine0.eval((Reader) null, scriptContext0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // script and context must be non-null
         //
         verifyException(""org.apache.commons.jexl3.scripting.JexlScriptEngine"", e);
      }
  }"
2025,"    public JexlScriptEngine() {
        this(FactorySingletonHolder.DEFAULT_FACTORY);
    }","  public void test15()  throws Throwable  {
      JexlScriptEngine jexlScriptEngine0 = null;
      try {
        jexlScriptEngine0 = new JexlScriptEngine((ScriptEngineFactory) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // ScriptEngineFactory must not be null
         //
         verifyException(""org.apache.commons.jexl3.scripting.JexlScriptEngine"", e);
      }
  }"
2026,"    public JexlScriptEngine() {
        this(FactorySingletonHolder.DEFAULT_FACTORY);
    }","  public void test16()  throws Throwable  {
      JexlScriptEngine jexlScriptEngine0 = new JexlScriptEngine();
      SimpleScriptContext simpleScriptContext0 = new SimpleScriptContext();
      StringWriter stringWriter0 = new StringWriter();
      simpleScriptContext0.setErrorWriter(stringWriter0);
      jexlScriptEngine0.setContext(simpleScriptContext0);
      JexlScriptEngine.JexlScriptObject jexlScriptEngine_JexlScriptObject0 = jexlScriptEngine0.new JexlScriptObject();
      PrintWriter printWriter0 = jexlScriptEngine_JexlScriptObject0.getErr();
}"
2027,"    public JexlScriptEngine() {
        this(FactorySingletonHolder.DEFAULT_FACTORY);
    }","  public void test17()  throws Throwable  {
      JexlScriptEngine jexlScriptEngine0 = new JexlScriptEngine();
      JexlScriptEngine.JexlScriptObject jexlScriptEngine_JexlScriptObject0 = jexlScriptEngine0.new JexlScriptObject();
      PrintWriter printWriter0 = jexlScriptEngine_JexlScriptObject0.getErr();
}"
2028,"    public JexlScriptEngine() {
        this(FactorySingletonHolder.DEFAULT_FACTORY);
    }","  public void test18()  throws Throwable  {
      JexlScriptEngine jexlScriptEngine0 = new JexlScriptEngine();
      SimpleScriptContext simpleScriptContext0 = new SimpleScriptContext();
      simpleScriptContext0.setErrorWriter((Writer) null);
      jexlScriptEngine0.setContext(simpleScriptContext0);
      JexlScriptEngine.JexlScriptObject jexlScriptEngine_JexlScriptObject0 = jexlScriptEngine0.new JexlScriptObject();
      PrintWriter printWriter0 = jexlScriptEngine_JexlScriptObject0.getErr();
}"
2029,"    public JexlScriptEngine() {
        this(FactorySingletonHolder.DEFAULT_FACTORY);
    }","  public void test19()  throws Throwable  {
      JexlScriptEngine jexlScriptEngine0 = new JexlScriptEngine();
      SimpleScriptContext simpleScriptContext0 = new SimpleScriptContext();
      StringWriter stringWriter0 = new StringWriter();
      simpleScriptContext0.setWriter(stringWriter0);
      jexlScriptEngine0.setContext(simpleScriptContext0);
      JexlScriptEngine.JexlScriptObject jexlScriptEngine_JexlScriptObject0 = jexlScriptEngine0.new JexlScriptObject();
      PrintWriter printWriter0 = jexlScriptEngine_JexlScriptObject0.getOut();
}"
2030,"    public JexlScriptEngine() {
        this(FactorySingletonHolder.DEFAULT_FACTORY);
    }","  public void test20()  throws Throwable  {
      JexlScriptEngine jexlScriptEngine0 = new JexlScriptEngine();
      JexlScriptEngine.JexlScriptObject jexlScriptEngine_JexlScriptObject0 = jexlScriptEngine0.new JexlScriptObject();
      PrintWriter printWriter0 = jexlScriptEngine_JexlScriptObject0.getOut();
}"
2031,"    public JexlScriptEngine() {
        this(FactorySingletonHolder.DEFAULT_FACTORY);
    }","  public void test21()  throws Throwable  {
      JexlScriptEngine jexlScriptEngine0 = new JexlScriptEngine();
      SimpleScriptContext simpleScriptContext0 = new SimpleScriptContext();
      simpleScriptContext0.setWriter((Writer) null);
      jexlScriptEngine0.setContext(simpleScriptContext0);
      JexlScriptEngine.JexlScriptObject jexlScriptEngine_JexlScriptObject0 = jexlScriptEngine0.new JexlScriptObject();
      PrintWriter printWriter0 = jexlScriptEngine_JexlScriptObject0.getOut();
}"
2032,"    public JexlScriptEngine() {
        this(FactorySingletonHolder.DEFAULT_FACTORY);
    }","  public void test22()  throws Throwable  {
      JexlScriptEngine jexlScriptEngine0 = new JexlScriptEngine();
      JexlScriptEngine.JexlScriptObject jexlScriptEngine_JexlScriptObject0 = jexlScriptEngine0.new JexlScriptObject();
      Log log0 = jexlScriptEngine_JexlScriptObject0.getLogger();
}"
2033,"    public JexlScriptEngine() {
        this(FactorySingletonHolder.DEFAULT_FACTORY);
    }","  public void test23()  throws Throwable  {
      JexlScriptEngine jexlScriptEngine0 = new JexlScriptEngine();
      JexlScriptEngine.JexlScriptObject jexlScriptEngine_JexlScriptObject0 = jexlScriptEngine0.new JexlScriptObject();
      Class<System> class0 = jexlScriptEngine_JexlScriptObject0.getSystem();
}"
2034,"    public Object eval(final Reader reader, final ScriptContext context) throws ScriptException {
        // This is mandated by JSR-223 (see SCR.5.5.2   Methods)
        if (reader == null || context == null) {
            throw new NullPointerException(""script and context must be non-null"");
        }
        return eval(readerToString(reader), context);
    }","  public void test24()  throws Throwable  {
      JexlScriptEngine jexlScriptEngine0 = new JexlScriptEngine();
      JexlScriptEngine.JexlScriptObject jexlScriptEngine_JexlScriptObject0 = jexlScriptEngine0.new JexlScriptObject();
      Reader reader0 = jexlScriptEngine_JexlScriptObject0.getIn();
      ScriptContext scriptContext0 = jexlScriptEngine0.getContext();
      Object object0 = jexlScriptEngine0.eval(reader0, scriptContext0);
}"
2035,"    public JexlScriptEngine() {
        this(FactorySingletonHolder.DEFAULT_FACTORY);
    }","  public void test25()  throws Throwable  {
      JexlScriptEngineFactory jexlScriptEngineFactory0 = new JexlScriptEngineFactory();
      JexlScriptEngine jexlScriptEngine0 = new JexlScriptEngine(jexlScriptEngineFactory0);
      JexlScriptEngine.JexlScriptObject jexlScriptEngine_JexlScriptObject0 = jexlScriptEngine0.new JexlScriptObject();
      JexlEngine jexlEngine0 = jexlScriptEngine_JexlScriptObject0.getEngine();
}"
2036,"    public Object eval(final Reader reader, final ScriptContext context) throws ScriptException {
        // This is mandated by JSR-223 (see SCR.5.5.2   Methods)
        if (reader == null || context == null) {
            throw new NullPointerException(""script and context must be non-null"");
        }
        return eval(readerToString(reader), context);
    }","  public void test26()  throws Throwable  {
      JexlScriptEngine jexlScriptEngine0 = new JexlScriptEngine();
      SimpleScriptContext simpleScriptContext0 = new SimpleScriptContext();
      try { 
        jexlScriptEngine0.eval(""ZADD"", (ScriptContext) simpleScriptContext0);
        fail(""Expecting exception: ScriptException"");
      } catch(ScriptException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: ZADD
         //
         verifyException(""org.apache.commons.jexl3.scripting.JexlScriptEngine"", e);
      }
  }"
2037,"    public ScriptEngineFactory getFactory() {
        return parentFactory;
    }","  public void test27()  throws Throwable  {
      JexlScriptEngine jexlScriptEngine0 = new JexlScriptEngine();
      ScriptEngineFactory scriptEngineFactory0 = jexlScriptEngine0.getFactory();
}"
2038,"    public Bindings createBindings() {
        return new SimpleBindings();
    }","  public void test28()  throws Throwable  {
      JexlScriptEngine jexlScriptEngine0 = new JexlScriptEngine();
      Bindings bindings0 = jexlScriptEngine0.createBindings();
}"
2039,"    public Permissions permissions(final String clazz,
                                   final boolean readFlag,
                                   final boolean writeFlag,
                                   final boolean executeFlag) {
        return permissions(clazz, inherit, readFlag, writeFlag, executeFlag);
    }","  public void test0()  throws Throwable  {
      JexlSandbox jexlSandbox0 = new JexlSandbox();
      JexlSandbox.Permissions jexlSandbox_Permissions0 = jexlSandbox0.permissions("""", false, true, true);
}"
2040,"    public String write(final Class<?> clazz, final String name) {
        return get(clazz).write().get(name);
    }","  public void test1()  throws Throwable  {
      HashMap<String, JexlSandbox.Permissions> hashMap0 = new HashMap<String, JexlSandbox.Permissions>();
      JexlSandbox jexlSandbox0 = new JexlSandbox(true, hashMap0);
      String string0 = jexlSandbox0.write(""#j1oJuHL}CI{K"", ""pR`l.`f@\""CDx9"");
}"
2041,"    public String write(final Class<?> clazz, final String name) {
        return get(clazz).write().get(name);
    }","  public void test2()  throws Throwable  {
      HashMap<String, JexlSandbox.Permissions> hashMap0 = new HashMap<String, JexlSandbox.Permissions>();
      JexlSandbox jexlSandbox0 = new JexlSandbox(true, hashMap0);
      String string0 = jexlSandbox0.write(""#j1oJuHL}CI{K"", ""pR`l.`f@\""CDx9"");
}"
2042,"    public JexlSandbox copy() {
        // modified concurrently at runtime so...
        final Map<String, Permissions> map = new ConcurrentHashMap<>();
        for (final Map.Entry<String, Permissions> entry : sandbox.entrySet()) {
            map.put(entry.getKey(), entry.getValue().copy());
        }
        return new JexlSandbox(allow, inherit, map);
    }","  public void test3()  throws Throwable  {
      JexlSandbox.AllowSet jexlSandbox_AllowSet0 = new JexlSandbox.AllowSet();
      JexlSandbox.Names jexlSandbox_Names0 = jexlSandbox_AllowSet0.copy();
}"
2043,"    public JexlSandbox copy() {
        // modified concurrently at runtime so...
        final Map<String, Permissions> map = new ConcurrentHashMap<>();
        for (final Map.Entry<String, Permissions> entry : sandbox.entrySet()) {
            map.put(entry.getKey(), entry.getValue().copy());
        }
        return new JexlSandbox(allow, inherit, map);
    }","  public void test4()  throws Throwable  {
      JexlSandbox.BlockSet jexlSandbox_BlockSet0 = new JexlSandbox.BlockSet();
      JexlSandbox.Names jexlSandbox_Names0 = jexlSandbox_BlockSet0.copy();
}"
2044,"    public String write(final Class<?> clazz, final String name) {
        return get(clazz).write().get(name);
    }","  public void test5()  throws Throwable  {
      JexlSandbox jexlSandbox0 = new JexlSandbox(true, false);
      String string0 = jexlSandbox0.write("""", """");
}"
2045,"    public String write(final Class<?> clazz, final String name) {
        return get(clazz).write().get(name);
    }","  public void test6()  throws Throwable  {
      JexlSandbox jexlSandbox0 = new JexlSandbox(true, false);
      String string0 = jexlSandbox0.write("""", """");
}"
2046,"    public String write(final Class<?> clazz, final String name) {
        return get(clazz).write().get(name);
    }","  public void test7()  throws Throwable  {
      JexlSandbox jexlSandbox0 = new JexlSandbox();
      Class<Integer> class0 = Integer.class;
      String string0 = jexlSandbox0.write(class0, ""Ud.]a1A|wm%cS;feLI"");
}"
2047,"    public String write(final Class<?> clazz, final String name) {
        return get(clazz).write().get(name);
    }","  public void test8()  throws Throwable  {
      JexlSandbox jexlSandbox0 = new JexlSandbox();
      Class<Integer> class0 = Integer.class;
      String string0 = jexlSandbox0.write(class0, ""Ud.]a1A|wm%cS;feLI"");
}"
2048,"    public String read(final Class<?> clazz, final String name) {
        return get(clazz).read().get(name);
    }","  public void test9()  throws Throwable  {
      JexlSandbox jexlSandbox0 = new JexlSandbox();
      String string0 = jexlSandbox0.read((String) null, (String) null);
}"
2049,"    public Permissions block(final String clazz) {
        return permissions(clazz, false, false, false);
    }","  public void test10()  throws Throwable  {
      JexlSandbox jexlSandbox0 = new JexlSandbox();
      JexlSandbox.Permissions jexlSandbox_Permissions0 = jexlSandbox0.block(""<K4% 9~EC=12!cE34"");
}"
2050,"    public String read(final Class<?> clazz, final String name) {
        return get(clazz).read().get(name);
    }","  public void test11()  throws Throwable  {
      JexlSandbox jexlSandbox0 = new JexlSandbox();
      JexlSandbox.Permissions jexlSandbox_Permissions0 = jexlSandbox0.block(""<K4% 9~EC=12!cE34"");
      String string0 = jexlSandbox0.read(""<K4% 9~EC=12!cE34"", (String) null);
}"
2051,"    public String read(final Class<?> clazz, final String name) {
        return get(clazz).read().get(name);
    }","  public void test12()  throws Throwable  {
      JexlSandbox jexlSandbox0 = new JexlSandbox();
      JexlSandbox.Permissions jexlSandbox_Permissions0 = jexlSandbox0.block(""<K4% 9~EC=12!cE34"");
      String string0 = jexlSandbox0.read(""<K4% 9~EC=12!cE34"", (String) null);
}"
2052,"    public String read(final Class<?> clazz, final String name) {
        return get(clazz).read().get(name);
    }","  public void test13()  throws Throwable  {
      JexlSandbox jexlSandbox0 = new JexlSandbox(true);
      Class<Integer> class0 = Integer.class;
      String string0 = jexlSandbox0.read(class0, (String) null);
}"
2053,"    public String read(final Class<?> clazz, final String name) {
        return get(clazz).read().get(name);
    }","  public void test14()  throws Throwable  {
      JexlSandbox jexlSandbox0 = new JexlSandbox(true, false);
      Class<Integer> class0 = Integer.class;
      String string0 = jexlSandbox0.read(class0, """");
}"
2054,"    public String read(final Class<?> clazz, final String name) {
        return get(clazz).read().get(name);
    }","  public void test15()  throws Throwable  {
      JexlSandbox jexlSandbox0 = new JexlSandbox(true, false);
      Class<Integer> class0 = Integer.class;
      String string0 = jexlSandbox0.read(class0, """");
}"
2055,"    public Permissions permissions(final String clazz,
                                   final boolean readFlag,
                                   final boolean writeFlag,
                                   final boolean executeFlag) {
        return permissions(clazz, inherit, readFlag, writeFlag, executeFlag);
    }","  public void test16()  throws Throwable  {
      JexlSandbox jexlSandbox0 = new JexlSandbox(false);
      JexlSandbox.Permissions jexlSandbox_Permissions0 = jexlSandbox0.permissions(""g2ZR18K&EeW[W"", false, false, true, true);
}"
2056,"    public Permissions get(final String clazz) {
        if (inherit) {
            return get(forName(clazz));
        }
        final Permissions permissions = sandbox.get(clazz);
        if (permissions == null) {
            return allow ? ALLOW_ALL : BLOCK_ALL;
        }
        return permissions;
    }","  public void test17()  throws Throwable  {
      JexlSandbox jexlSandbox0 = new JexlSandbox(true);
      jexlSandbox0.permissions(""0f.hfuDNM~Q/"", true, false, false, true);
      JexlSandbox.Permissions jexlSandbox_Permissions0 = jexlSandbox0.get(""0f.hfuDNM~Q/"");
}"
2057,"    static Class<?> forName(final String cname) {
        try {
            return Class.forName(cname);
        } catch(final Exception xany) {
            return null;
        }
    }","  public void test18()  throws Throwable  {
      Class<?> class0 = JexlSandbox.forName(""org.apache.commons.jexl3.introspection.JexlSandbox$AllowSet"");
}"
2058,"    public String execute(final Class<?> clazz, final String name) {
        final String m = get(clazz).execute().get(name);
        return """".equals(name) && m != null? clazz.getName() : m;
    }","  public void test19()  throws Throwable  {
      HashMap<String, JexlSandbox.Permissions> hashMap0 = new HashMap<String, JexlSandbox.Permissions>();
      JexlSandbox jexlSandbox0 = new JexlSandbox(true, false, hashMap0);
      String string0 = jexlSandbox0.execute("""", """");
}"
2059,"    public String execute(final Class<?> clazz, final String name) {
        final String m = get(clazz).execute().get(name);
        return """".equals(name) && m != null? clazz.getName() : m;
    }","  public void test20()  throws Throwable  {
      HashMap<String, JexlSandbox.Permissions> hashMap0 = new HashMap<String, JexlSandbox.Permissions>();
      JexlSandbox jexlSandbox0 = new JexlSandbox(true, false, hashMap0);
      String string0 = jexlSandbox0.execute("""", """");
}"
2060,"    public Permissions black(final String clazz) {
        return block(clazz);
    }","  public void test21()  throws Throwable  {
      HashMap<String, JexlSandbox.Permissions> hashMap0 = new HashMap<String, JexlSandbox.Permissions>();
      JexlSandbox jexlSandbox0 = new JexlSandbox(false, true, hashMap0);
      JexlSandbox.Permissions jexlSandbox_Permissions0 = jexlSandbox0.black("""");
}"
2061,"    public String write(final Class<?> clazz, final String name) {
        return get(clazz).write().get(name);
    }","  public void test22()  throws Throwable  {
      HashMap<String, JexlSandbox.Permissions> hashMap0 = new HashMap<String, JexlSandbox.Permissions>();
      JexlSandbox jexlSandbox0 = new JexlSandbox(hashMap0);
      JexlSandbox jexlSandbox1 = jexlSandbox0.copy();
      // Undeclared exception!
      try { 
        jexlSandbox1.write((String) null, ""y"");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
2062,"    public String read(final Class<?> clazz, final String name) {
        return get(clazz).read().get(name);
    }","  public void test23()  throws Throwable  {
      HashMap<String, JexlSandbox.Permissions> hashMap0 = new HashMap<String, JexlSandbox.Permissions>();
      JexlSandbox jexlSandbox0 = new JexlSandbox(true, hashMap0);
      JexlSandbox jexlSandbox1 = jexlSandbox0.copy();
      // Undeclared exception!
      try { 
        jexlSandbox1.read((String) null, """");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
2063,"    public Permissions permissions(final String clazz,
                                   final boolean readFlag,
                                   final boolean writeFlag,
                                   final boolean executeFlag) {
        return permissions(clazz, inherit, readFlag, writeFlag, executeFlag);
    }","  public void test24()  throws Throwable  {
      JexlSandbox jexlSandbox0 = new JexlSandbox(false);
      JexlSandbox jexlSandbox1 = jexlSandbox0.copy();
      // Undeclared exception!
      try { 
        jexlSandbox1.permissions((String) null, false, false, false);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.util.concurrent.ConcurrentHashMap"", e);
      }
  }"
2064,"    public JexlSandbox copy() {
        // modified concurrently at runtime so...
        final Map<String, Permissions> map = new ConcurrentHashMap<>();
        for (final Map.Entry<String, Permissions> entry : sandbox.entrySet()) {
            map.put(entry.getKey(), entry.getValue().copy());
        }
        return new JexlSandbox(allow, inherit, map);
    }","  public void test25()  throws Throwable  {
      JexlSandbox jexlSandbox0 = new JexlSandbox();
      jexlSandbox0.permissions((String) null, true, true, true, true);
      // Undeclared exception!
      try { 
        jexlSandbox0.copy();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.util.concurrent.ConcurrentHashMap"", e);
      }
  }"
2065,"    public Permissions block(final String clazz) {
        return permissions(clazz, false, false, false);
    }","  public void test26()  throws Throwable  {
      HashMap<String, JexlSandbox.Permissions> hashMap0 = new HashMap<String, JexlSandbox.Permissions>();
      JexlSandbox jexlSandbox0 = new JexlSandbox(hashMap0);
      JexlSandbox jexlSandbox1 = jexlSandbox0.copy();
      // Undeclared exception!
      try { 
        jexlSandbox1.block((String) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.util.concurrent.ConcurrentHashMap"", e);
      }
  }"
2066,"    public Permissions black(final String clazz) {
        return block(clazz);
    }","  public void test27()  throws Throwable  {
      JexlSandbox jexlSandbox0 = new JexlSandbox(true, true);
      JexlSandbox jexlSandbox1 = jexlSandbox0.copy();
      // Undeclared exception!
      try { 
        jexlSandbox1.black((String) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.util.concurrent.ConcurrentHashMap"", e);
      }
  }"
2067,"    public Permissions get(final String clazz) {
        if (inherit) {
            return get(forName(clazz));
        }
        final Permissions permissions = sandbox.get(clazz);
        if (permissions == null) {
            return allow ? ALLOW_ALL : BLOCK_ALL;
        }
        return permissions;
    }","  public void test28()  throws Throwable  {
      JexlSandbox jexlSandbox0 = new JexlSandbox(true, true);
      Class<Object> class0 = Object.class;
      JexlSandbox.Permissions jexlSandbox_Permissions0 = jexlSandbox0.get(class0);
}"
2068,"    public Permissions get(final String clazz) {
        if (inherit) {
            return get(forName(clazz));
        }
        final Permissions permissions = sandbox.get(clazz);
        if (permissions == null) {
            return allow ? ALLOW_ALL : BLOCK_ALL;
        }
        return permissions;
    }","  public void test29()  throws Throwable  {
      HashMap<String, JexlSandbox.Permissions> hashMap0 = new HashMap<String, JexlSandbox.Permissions>();
      JexlSandbox jexlSandbox0 = new JexlSandbox(false, true, hashMap0);
      Class<JexlSandbox.Permissions> class0 = JexlSandbox.Permissions.class;
      jexlSandbox0.get(class0);
}"
2069,"    public Permissions get(final String clazz) {
        if (inherit) {
            return get(forName(clazz));
        }
        final Permissions permissions = sandbox.get(clazz);
        if (permissions == null) {
            return allow ? ALLOW_ALL : BLOCK_ALL;
        }
        return permissions;
    }","  public void test30()  throws Throwable  {
      HashMap<String, JexlSandbox.Permissions> hashMap0 = new HashMap<String, JexlSandbox.Permissions>();
      JexlSandbox jexlSandbox0 = new JexlSandbox(false, true, hashMap0);
      Class<JexlSandbox.Permissions> class0 = JexlSandbox.Permissions.class;
      jexlSandbox0.get(class0);
}"
2070,"    public Permissions get(final String clazz) {
        if (inherit) {
            return get(forName(clazz));
        }
        final Permissions permissions = sandbox.get(clazz);
        if (permissions == null) {
            return allow ? ALLOW_ALL : BLOCK_ALL;
        }
        return permissions;
    }","  public void test31()  throws Throwable  {
      HashMap<String, JexlSandbox.Permissions> hashMap0 = new HashMap<String, JexlSandbox.Permissions>();
      JexlSandbox jexlSandbox0 = new JexlSandbox(hashMap0);
      JexlSandbox.Permissions jexlSandbox_Permissions0 = jexlSandbox0.get((Class<?>) null);
}"
2071,"    public String write(final Class<?> clazz, final String name) {
        return get(clazz).write().get(name);
    }","  public void test32()  throws Throwable  {
      HashMap<String, JexlSandbox.Permissions> hashMap0 = new HashMap<String, JexlSandbox.Permissions>();
      JexlSandbox jexlSandbox0 = new JexlSandbox(false, hashMap0);
      JexlSandbox.Permissions jexlSandbox_Permissions0 = jexlSandbox0.get(""xjP6Q\""-4sMNy@"");
      String[] stringArray0 = new String[3];
      JexlSandbox.Permissions jexlSandbox_Permissions1 = jexlSandbox_Permissions0.write(stringArray0);
}"
2072,"    public JexlSandbox() {
        this(true, false, null);
    }","  public void test33()  throws Throwable  {
      JexlSandbox jexlSandbox0 = new JexlSandbox(true, true, (Map<String, JexlSandbox.Permissions>) null);
  }"
2073,"    public String write(final Class<?> clazz, final String name) {
        return get(clazz).write().get(name);
    }","  public void test34()  throws Throwable  {
      HashMap<String, JexlSandbox.Permissions> hashMap0 = new HashMap<String, JexlSandbox.Permissions>();
      JexlSandbox jexlSandbox0 = new JexlSandbox(false, hashMap0);
      Class<Object> class0 = Object.class;
      String string0 = jexlSandbox0.write(class0, ""?"");
}"
2074,"    public String write(final Class<?> clazz, final String name) {
        return get(clazz).write().get(name);
    }","  public void test35()  throws Throwable  {
      HashMap<String, JexlSandbox.Permissions> hashMap0 = new HashMap<String, JexlSandbox.Permissions>();
      JexlSandbox jexlSandbox0 = new JexlSandbox(false, hashMap0);
      Class<Object> class0 = Object.class;
      String string0 = jexlSandbox0.write(class0, ""?"");
}"
2075,"    public String write(final Class<?> clazz, final String name) {
        return get(clazz).write().get(name);
    }","  public void test36()  throws Throwable  {
      HashMap<String, JexlSandbox.Permissions> hashMap0 = new HashMap<String, JexlSandbox.Permissions>();
      JexlSandbox jexlSandbox0 = new JexlSandbox(false, hashMap0);
      Class<Object> class0 = Object.class;
      String string0 = jexlSandbox0.write(class0, ""?"");
}"
2076,"    public String read(final Class<?> clazz, final String name) {
        return get(clazz).read().get(name);
    }","  public void test37()  throws Throwable  {
      JexlSandbox.AllowSet jexlSandbox_AllowSet0 = new JexlSandbox.AllowSet();
      JexlSandbox.Permissions jexlSandbox_Permissions0 = new JexlSandbox.Permissions(false, jexlSandbox_AllowSet0, jexlSandbox_AllowSet0, jexlSandbox_AllowSet0);
      jexlSandbox_Permissions0.read();
}"
2077,"    public String execute(final Class<?> clazz, final String name) {
        final String m = get(clazz).execute().get(name);
        return """".equals(name) && m != null? clazz.getName() : m;
    }","  public void test38()  throws Throwable  {
      JexlSandbox.Permissions jexlSandbox_Permissions0 = new JexlSandbox.Permissions(false, false, false, true);
      jexlSandbox_Permissions0.execute();
}"
2078,"    public Permissions permissions(final String clazz,
                                   final boolean readFlag,
                                   final boolean writeFlag,
                                   final boolean executeFlag) {
        return permissions(clazz, inherit, readFlag, writeFlag, executeFlag);
    }","  public void test39()  throws Throwable  {
      JexlSandbox jexlSandbox0 = new JexlSandbox(true);
      JexlSandbox.Permissions jexlSandbox_Permissions0 = jexlSandbox0.permissions(""org.apache.commons.jexl3.introspection.JexlSandbox$1"", false, false, true);
}"
2079,"    public Permissions get(final String clazz) {
        if (inherit) {
            return get(forName(clazz));
        }
        final Permissions permissions = sandbox.get(clazz);
        if (permissions == null) {
            return allow ? ALLOW_ALL : BLOCK_ALL;
        }
        return permissions;
    }","  public void test40()  throws Throwable  {
      JexlSandbox jexlSandbox0 = new JexlSandbox(false);
      Class<Integer> class0 = Integer.class;
      JexlSandbox.Permissions jexlSandbox_Permissions0 = jexlSandbox0.get(class0);
}"
2080,"    public JexlSandbox() {
        this(true, false, null);
    }","  public void test41()  throws Throwable  {
      JexlSandbox.Permissions jexlSandbox_Permissions0 = new JexlSandbox.Permissions(true, (JexlSandbox.Names) null, (JexlSandbox.Names) null, (JexlSandbox.Names) null);
}"
2081,"    public Permissions black(final String clazz) {
        return block(clazz);
    }","  public void test42()  throws Throwable  {
      HashMap<String, JexlSandbox.Permissions> hashMap0 = new HashMap<String, JexlSandbox.Permissions>();
      JexlSandbox jexlSandbox0 = new JexlSandbox(hashMap0);
      JexlSandbox.Permissions jexlSandbox_Permissions0 = jexlSandbox0.black((String) null);
}"
2082,"    public String execute(final Class<?> clazz, final String name) {
        final String m = get(clazz).execute().get(name);
        return """".equals(name) && m != null? clazz.getName() : m;
    }","  public void test43()  throws Throwable  {
      HashMap<String, JexlSandbox.Permissions> hashMap0 = new HashMap<String, JexlSandbox.Permissions>();
      JexlSandbox jexlSandbox0 = new JexlSandbox(hashMap0);
      JexlSandbox.Permissions jexlSandbox_Permissions0 = jexlSandbox0.black((String) null);
      String string0 = jexlSandbox0.execute((String) null, (String) null);
}"
2083,"    public String execute(final Class<?> clazz, final String name) {
        final String m = get(clazz).execute().get(name);
        return """".equals(name) && m != null? clazz.getName() : m;
    }","  public void test44()  throws Throwable  {
      HashMap<String, JexlSandbox.Permissions> hashMap0 = new HashMap<String, JexlSandbox.Permissions>();
      JexlSandbox jexlSandbox0 = new JexlSandbox(hashMap0);
      JexlSandbox.Permissions jexlSandbox_Permissions0 = jexlSandbox0.black((String) null);
      String string0 = jexlSandbox0.execute((String) null, (String) null);
}"
2084,"    public Permissions get(final String clazz) {
        if (inherit) {
            return get(forName(clazz));
        }
        final Permissions permissions = sandbox.get(clazz);
        if (permissions == null) {
            return allow ? ALLOW_ALL : BLOCK_ALL;
        }
        return permissions;
    }","  public void test45()  throws Throwable  {
      JexlSandbox.BlockSet jexlSandbox_BlockSet0 = new JexlSandbox.BlockSet();
      jexlSandbox_BlockSet0.add(""-@"");
      String string0 = jexlSandbox_BlockSet0.get(""-@"");
}"
2085,"    public Permissions get(final String clazz) {
        if (inherit) {
            return get(forName(clazz));
        }
        final Permissions permissions = sandbox.get(clazz);
        if (permissions == null) {
            return allow ? ALLOW_ALL : BLOCK_ALL;
        }
        return permissions;
    }","  public void test46()  throws Throwable  {
      JexlSandbox.BlockSet jexlSandbox_BlockSet0 = new JexlSandbox.BlockSet();
      jexlSandbox_BlockSet0.add(""c]8KvN17m"");
      String string0 = jexlSandbox_BlockSet0.get((String) null);
}"
2086,"    public JexlSandbox() {
        this(true, false, null);
    }","  public void test47()  throws Throwable  {
      JexlSandbox.BlockSet jexlSandbox_BlockSet0 = new JexlSandbox.BlockSet();
      boolean boolean0 = jexlSandbox_BlockSet0.add(""c]8KvN17m"");
      boolean boolean1 = jexlSandbox_BlockSet0.add(""c]8KvN17m"");
}"
2087,"    public Permissions get(final String clazz) {
        if (inherit) {
            return get(forName(clazz));
        }
        final Permissions permissions = sandbox.get(clazz);
        if (permissions == null) {
            return allow ? ALLOW_ALL : BLOCK_ALL;
        }
        return permissions;
    }","  public void test48()  throws Throwable  {
      JexlSandbox.AllowSet jexlSandbox_AllowSet0 = new JexlSandbox.AllowSet();
      jexlSandbox_AllowSet0.add((String) null);
      String string0 = jexlSandbox_AllowSet0.get((String) null);
}"
2088,"    public JexlSandbox() {
        this(true, false, null);
    }","  public void test49()  throws Throwable  {
      JexlSandbox.AllowSet jexlSandbox_AllowSet0 = new JexlSandbox.AllowSet();
      boolean boolean0 = jexlSandbox_AllowSet0.alias(""gr.x"", (String) null);
}"
2089,"    public Permissions get(final String clazz) {
        if (inherit) {
            return get(forName(clazz));
        }
        final Permissions permissions = sandbox.get(clazz);
        if (permissions == null) {
            return allow ? ALLOW_ALL : BLOCK_ALL;
        }
        return permissions;
    }","  public void test50()  throws Throwable  {
      JexlSandbox.AllowSet jexlSandbox_AllowSet0 = new JexlSandbox.AllowSet();
      boolean boolean0 = jexlSandbox_AllowSet0.alias(""gr.x"", (String) null);
      String string0 = jexlSandbox_AllowSet0.get((String) null);
}"
2090,"    public Permissions get(final String clazz) {
        if (inherit) {
            return get(forName(clazz));
        }
        final Permissions permissions = sandbox.get(clazz);
        if (permissions == null) {
            return allow ? ALLOW_ALL : BLOCK_ALL;
        }
        return permissions;
    }","  public void test51()  throws Throwable  {
      JexlSandbox.AllowSet jexlSandbox_AllowSet0 = new JexlSandbox.AllowSet();
      boolean boolean0 = jexlSandbox_AllowSet0.alias(""gr.x"", (String) null);
      String string0 = jexlSandbox_AllowSet0.get((String) null);
}"
2091,"    public JexlSandbox() {
        this(true, false, null);
    }","  public void test52()  throws Throwable  {
      JexlSandbox.AllowSet jexlSandbox_AllowSet0 = new JexlSandbox.AllowSet();
      boolean boolean0 = jexlSandbox_AllowSet0.alias((String) null, ""e=d't-mzTz'b{sUIz-"");
}"
2092,"    public Permissions get(final String clazz) {
        if (inherit) {
            return get(forName(clazz));
        }
        final Permissions permissions = sandbox.get(clazz);
        if (permissions == null) {
            return allow ? ALLOW_ALL : BLOCK_ALL;
        }
        return permissions;
    }","  public void test53()  throws Throwable  {
      JexlSandbox.AllowSet jexlSandbox_AllowSet0 = new JexlSandbox.AllowSet();
      boolean boolean0 = jexlSandbox_AllowSet0.alias((String) null, ""e=d't-mzTz'b{sUIz-"");
      String string0 = jexlSandbox_AllowSet0.get((String) null);
}"
2093,"    public Permissions get(final String clazz) {
        if (inherit) {
            return get(forName(clazz));
        }
        final Permissions permissions = sandbox.get(clazz);
        if (permissions == null) {
            return allow ? ALLOW_ALL : BLOCK_ALL;
        }
        return permissions;
    }","  public void test54()  throws Throwable  {
      JexlSandbox.AllowSet jexlSandbox_AllowSet0 = new JexlSandbox.AllowSet();
      boolean boolean0 = jexlSandbox_AllowSet0.alias((String) null, ""e=d't-mzTz'b{sUIz-"");
      String string0 = jexlSandbox_AllowSet0.get((String) null);
}"
2094,"    public Permissions get(final String clazz) {
        if (inherit) {
            return get(forName(clazz));
        }
        final Permissions permissions = sandbox.get(clazz);
        if (permissions == null) {
            return allow ? ALLOW_ALL : BLOCK_ALL;
        }
        return permissions;
    }","  public void test55()  throws Throwable  {
      JexlSandbox.AllowSet jexlSandbox_AllowSet0 = new JexlSandbox.AllowSet();
      jexlSandbox_AllowSet0.alias(""cK2(ifPfV\""#A"", ""Qa2/%%{|lP\""k58"");
      String string0 = jexlSandbox_AllowSet0.get(""0f.hfuDNM~Q/"");
}"
2095,"    public JexlSandbox() {
        this(true, false, null);
    }","  public void test56()  throws Throwable  {
      JexlSandbox.AllowSet jexlSandbox_AllowSet0 = new JexlSandbox.AllowSet();
      boolean boolean0 = jexlSandbox_AllowSet0.add("""");
      boolean boolean1 = jexlSandbox_AllowSet0.alias(""?"", """");
}"
2096,"    public JexlSandbox() {
        this(true, false, null);
    }","  public void test57()  throws Throwable  {
      JexlSandbox.AllowSet jexlSandbox_AllowSet0 = new JexlSandbox.AllowSet();
      boolean boolean0 = jexlSandbox_AllowSet0.add("""");
      boolean boolean1 = jexlSandbox_AllowSet0.alias(""?"", """");
}"
2097,"    public JexlSandbox() {
        this(true, false, null);
    }","  public void test58()  throws Throwable  {
      JexlSandbox.AllowSet jexlSandbox_AllowSet0 = new JexlSandbox.AllowSet();
      boolean boolean0 = jexlSandbox_AllowSet0.alias(""cK2(ifPfV\""#A"", ""Qa2/%%{|lP\""k58"");
      boolean boolean1 = jexlSandbox_AllowSet0.add(""0f.hfuDNM~Q/"");
}"
2098,"    public JexlSandbox() {
        this(true, false, null);
    }","  public void test59()  throws Throwable  {
      JexlSandbox.AllowSet jexlSandbox_AllowSet0 = new JexlSandbox.AllowSet();
      boolean boolean0 = jexlSandbox_AllowSet0.alias(""cK2(ifPfV\""#A"", ""Qa2/%%{|lP\""k58"");
      boolean boolean1 = jexlSandbox_AllowSet0.add(""0f.hfuDNM~Q/"");
}"
2099,"    public JexlSandbox copy() {
        // modified concurrently at runtime so...
        final Map<String, Permissions> map = new ConcurrentHashMap<>();
        for (final Map.Entry<String, Permissions> entry : sandbox.entrySet()) {
            map.put(entry.getKey(), entry.getValue().copy());
        }
        return new JexlSandbox(allow, inherit, map);
    }","  public void test60()  throws Throwable  {
      JexlSandbox.AllowSet jexlSandbox_AllowSet0 = new JexlSandbox.AllowSet();
      JexlSandbox.Names jexlSandbox_Names0 = jexlSandbox_AllowSet0.copy();
}"
2100,"    public JexlSandbox() {
        this(true, false, null);
    }","  public void test61()  throws Throwable  {
      JexlSandbox.AllowSet jexlSandbox_AllowSet0 = new JexlSandbox.AllowSet();
      boolean boolean0 = jexlSandbox_AllowSet0.alias((String) null, ""e=d't-mzTz'b{sUIz-"");
}"
2101,"    public JexlSandbox copy() {
        // modified concurrently at runtime so...
        final Map<String, Permissions> map = new ConcurrentHashMap<>();
        for (final Map.Entry<String, Permissions> entry : sandbox.entrySet()) {
            map.put(entry.getKey(), entry.getValue().copy());
        }
        return new JexlSandbox(allow, inherit, map);
    }","  public void test62()  throws Throwable  {
      JexlSandbox.AllowSet jexlSandbox_AllowSet0 = new JexlSandbox.AllowSet();
      boolean boolean0 = jexlSandbox_AllowSet0.alias((String) null, ""e=d't-mzTz'b{sUIz-"");
      JexlSandbox.Names jexlSandbox_Names0 = jexlSandbox_AllowSet0.copy();
}"
2102,"    public String execute(final Class<?> clazz, final String name) {
        final String m = get(clazz).execute().get(name);
        return """".equals(name) && m != null? clazz.getName() : m;
    }","  public void test63()  throws Throwable  {
      JexlSandbox jexlSandbox0 = new JexlSandbox(true, true);
      String string0 = jexlSandbox0.execute(""e=d't-mzTz'b{sUIz-"", """");
}"
2103,"    public String execute(final Class<?> clazz, final String name) {
        final String m = get(clazz).execute().get(name);
        return """".equals(name) && m != null? clazz.getName() : m;
    }","  public void test64()  throws Throwable  {
      JexlSandbox jexlSandbox0 = new JexlSandbox(true, true);
      String string0 = jexlSandbox0.execute((String) null, (String) null);
}"
2104,"    public String execute(final Class<?> clazz, final String name) {
        final String m = get(clazz).execute().get(name);
        return """".equals(name) && m != null? clazz.getName() : m;
    }","  public void test65()  throws Throwable  {
      JexlSandbox jexlSandbox0 = new JexlSandbox(true, true);
      String string0 = jexlSandbox0.execute((String) null, (String) null);
}"
2105,"    public String execute(final Class<?> clazz, final String name) {
        final String m = get(clazz).execute().get(name);
        return """".equals(name) && m != null? clazz.getName() : m;
    }","  public void test66()  throws Throwable  {
      HashMap<String, JexlSandbox.Permissions> hashMap0 = new HashMap<String, JexlSandbox.Permissions>();
      JexlSandbox jexlSandbox0 = new JexlSandbox(false, true, hashMap0);
      Class<JexlSandbox.Permissions> class0 = JexlSandbox.Permissions.class;
      jexlSandbox0.execute(class0, """");
}"
2106,"    public String execute(final Class<?> clazz, final String name) {
        final String m = get(clazz).execute().get(name);
        return """".equals(name) && m != null? clazz.getName() : m;
    }","  public void test67()  throws Throwable  {
      HashMap<String, JexlSandbox.Permissions> hashMap0 = new HashMap<String, JexlSandbox.Permissions>();
      JexlSandbox jexlSandbox0 = new JexlSandbox(false, true, hashMap0);
      Class<JexlSandbox.Permissions> class0 = JexlSandbox.Permissions.class;
      jexlSandbox0.execute(class0, """");
}"
2107,"    public String execute(final Class<?> clazz, final String name) {
        final String m = get(clazz).execute().get(name);
        return """".equals(name) && m != null? clazz.getName() : m;
    }","  public void test68()  throws Throwable  {
      HashMap<String, JexlSandbox.Permissions> hashMap0 = new HashMap<String, JexlSandbox.Permissions>();
      JexlSandbox jexlSandbox0 = new JexlSandbox(true, hashMap0);
      Class<Object> class0 = Object.class;
      JexlSandbox.Permissions jexlSandbox_Permissions0 = jexlSandbox0.get(class0);
      String[] stringArray0 = new String[9];
      jexlSandbox_Permissions0.execute(stringArray0);
}"
2108,"    public String execute(final Class<?> clazz, final String name) {
        final String m = get(clazz).execute().get(name);
        return """".equals(name) && m != null? clazz.getName() : m;
    }","  public void test69()  throws Throwable  {
      HashMap<String, JexlSandbox.Permissions> hashMap0 = new HashMap<String, JexlSandbox.Permissions>();
      JexlSandbox jexlSandbox0 = new JexlSandbox(true, hashMap0);
      Class<Object> class0 = Object.class;
      JexlSandbox.Permissions jexlSandbox_Permissions0 = jexlSandbox0.get(class0);
      String[] stringArray0 = new String[9];
      jexlSandbox_Permissions0.execute(stringArray0);
}"
2109,"    public JexlSandbox copy() {
        // modified concurrently at runtime so...
        final Map<String, Permissions> map = new ConcurrentHashMap<>();
        for (final Map.Entry<String, Permissions> entry : sandbox.entrySet()) {
            map.put(entry.getKey(), entry.getValue().copy());
        }
        return new JexlSandbox(allow, inherit, map);
    }","  public void test70()  throws Throwable  {
      HashMap<String, JexlSandbox.Permissions> hashMap0 = new HashMap<String, JexlSandbox.Permissions>();
      JexlSandbox jexlSandbox0 = new JexlSandbox(false, true, hashMap0);
      JexlSandbox.Permissions jexlSandbox_Permissions0 = jexlSandbox0.get((String) null);
      JexlSandbox.Permissions jexlSandbox_Permissions1 = jexlSandbox_Permissions0.copy();
}"
2110,"    public String read(final Class<?> clazz, final String name) {
        return get(clazz).read().get(name);
    }","  public void test71()  throws Throwable  {
      HashMap<String, JexlSandbox.Permissions> hashMap0 = new HashMap<String, JexlSandbox.Permissions>();
      JexlSandbox jexlSandbox0 = new JexlSandbox(false, true, hashMap0);
      JexlSandbox.Permissions jexlSandbox_Permissions0 = jexlSandbox0.get((String) null);
      String[] stringArray0 = new String[1];
      JexlSandbox.Permissions jexlSandbox_Permissions1 = jexlSandbox_Permissions0.read(stringArray0);
}"
2111,"    public Permissions get(final String clazz) {
        if (inherit) {
            return get(forName(clazz));
        }
        final Permissions permissions = sandbox.get(clazz);
        if (permissions == null) {
            return allow ? ALLOW_ALL : BLOCK_ALL;
        }
        return permissions;
    }","  public void test72()  throws Throwable  {
      JexlSandbox jexlSandbox0 = new JexlSandbox(true, true);
      Class<Object> class0 = Object.class;
      jexlSandbox0.execute(class0, ""5U6wqM#,Pv/"");
      Class<String> class1 = String.class;
      JexlSandbox.Permissions jexlSandbox_Permissions0 = jexlSandbox0.get(class1);
}"
2112,"    public String execute(final Class<?> clazz, final String name) {
        final String m = get(clazz).execute().get(name);
        return """".equals(name) && m != null? clazz.getName() : m;
    }","  public void test73()  throws Throwable  {
      JexlSandbox jexlSandbox0 = new JexlSandbox();
      Class<Integer> class0 = Integer.class;
      String string0 = jexlSandbox0.execute(class0, """");
}"
2113,"    public String execute(final Class<?> clazz, final String name) {
        final String m = get(clazz).execute().get(name);
        return """".equals(name) && m != null? clazz.getName() : m;
    }","  public void test74()  throws Throwable  {
      JexlSandbox jexlSandbox0 = new JexlSandbox();
      Class<Integer> class0 = Integer.class;
      String string0 = jexlSandbox0.execute(class0, """");
}"
2114,"    public JexlSandbox() {
        this(true, false, null);
    }","  public void test75()  throws Throwable  {
      JexlSandbox.BlockSet jexlSandbox_BlockSet0 = new JexlSandbox.BlockSet();
      boolean boolean0 = jexlSandbox_BlockSet0.alias("""", """");
}"
2115,"    public String read(final Class<?> clazz, final String name) {
        return get(clazz).read().get(name);
    }","  public void test76()  throws Throwable  {
      JexlSandbox jexlSandbox0 = new JexlSandbox();
      Class<Object> class0 = Object.class;
      String string0 = jexlSandbox0.read(class0, ""G)q;63>cm"");
}"
2116,"    public String read(final Class<?> clazz, final String name) {
        return get(clazz).read().get(name);
    }","  public void test77()  throws Throwable  {
      JexlSandbox jexlSandbox0 = new JexlSandbox();
      Class<Object> class0 = Object.class;
      String string0 = jexlSandbox0.read(class0, ""G)q;63>cm"");
}"
2117,"    public String read(final Class<?> clazz, final String name) {
        return get(clazz).read().get(name);
    }","  public void test78()  throws Throwable  {
      JexlSandbox jexlSandbox0 = new JexlSandbox();
      String string0 = jexlSandbox0.read(""?"", """");
}"
2118,"    public String read(final Class<?> clazz, final String name) {
        return get(clazz).read().get(name);
    }","  public void test79()  throws Throwable  {
      JexlSandbox jexlSandbox0 = new JexlSandbox();
      String string0 = jexlSandbox0.read(""?"", """");
}"
2119,"    public JexlSandbox copy() {
        // modified concurrently at runtime so...
        final Map<String, Permissions> map = new ConcurrentHashMap<>();
        for (final Map.Entry<String, Permissions> entry : sandbox.entrySet()) {
            map.put(entry.getKey(), entry.getValue().copy());
        }
        return new JexlSandbox(allow, inherit, map);
    }","  public void test80()  throws Throwable  {
      JexlSandbox jexlSandbox0 = new JexlSandbox();
      jexlSandbox0.black("""");
      JexlSandbox jexlSandbox1 = jexlSandbox0.copy();
}"
2120,"    static Class<?> forName(final String cname) {
        try {
            return Class.forName(cname);
        } catch(final Exception xany) {
            return null;
        }
    }","  public void test81()  throws Throwable  {
      Class<?> class0 = JexlSandbox.forName(""?"");
}"
2121,"    public Permissions get(final String clazz) {
        if (inherit) {
            return get(forName(clazz));
        }
        final Permissions permissions = sandbox.get(clazz);
        if (permissions == null) {
            return allow ? ALLOW_ALL : BLOCK_ALL;
        }
        return permissions;
    }","  public void test82()  throws Throwable  {
      HashMap<String, JexlSandbox.Permissions> hashMap0 = new HashMap<String, JexlSandbox.Permissions>();
      JexlSandbox jexlSandbox0 = new JexlSandbox(hashMap0);
      JexlSandbox.Permissions jexlSandbox_Permissions0 = jexlSandbox0.get((String) null);
}"
2122,"    public JexlSandbox copy() {
        // modified concurrently at runtime so...
        final Map<String, Permissions> map = new ConcurrentHashMap<>();
        for (final Map.Entry<String, Permissions> entry : sandbox.entrySet()) {
            map.put(entry.getKey(), entry.getValue().copy());
        }
        return new JexlSandbox(allow, inherit, map);
    }","  public void test83()  throws Throwable  {
      HashMap<String, JexlSandbox.Permissions> hashMap0 = new HashMap<String, JexlSandbox.Permissions>();
      JexlSandbox jexlSandbox0 = new JexlSandbox(hashMap0);
      JexlSandbox.Permissions jexlSandbox_Permissions0 = jexlSandbox0.get((String) null);
      JexlSandbox.Permissions jexlSandbox_Permissions1 = jexlSandbox_Permissions0.copy();
}"
2123,"    public Object jjtAccept(final ParserVisitor visitor, final Object data) {
        return visitor.visit(this, data);
    }","  public void test0()  throws Throwable  {
      ASTBlock aSTBlock0 = new ASTBlock((-97));
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      FeatureController featureController0 = new FeatureController(jexlFeatures0);
      Object object0 = aSTBlock0.jjtAccept(featureController0, (Object) null);
}"
2124,"    public Object jjtAccept(final ParserVisitor visitor, final Object data) {
        return visitor.visit(this, data);
    }","  public void test1()  throws Throwable  {
      ASTBlock aSTBlock0 = new ASTBlock(1);
      // Undeclared exception!
      try { 
        aSTBlock0.jjtAccept((ParserVisitor) null, (Object) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.parser.ASTBlock"", e);
      }
  }"
2125,"    public Object jjtAccept(final ParserVisitor visitor, final Object data) {
        return visitor.visit(this, data);
    }","  public void test2()  throws Throwable  {
      ASTBlock aSTBlock0 = new ASTBlock((-1584));
      OperatorController operatorController0 = new OperatorController();
      Object object0 = aSTBlock0.jjtAccept(operatorController0, (Object) null);
}"
2126,"    public ASTBlock(final int id) {
        super(id);
    }","  public void test3()  throws Throwable  {
      Parser parser0 = new Parser("""");
      ASTBlock aSTBlock0 = new ASTBlock(parser0, 0);
}"
2127,,"  public void test0()  throws Throwable  {
      Parser parser0 = new Parser(""Oo>@0.7Irxb"");
      parser0.loopCount = (-1718);
      // Undeclared exception!
      try { 
        parser0.LambdaLookahead();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.parser.JexlParser"", e);
      }
  }"
2128,"    protected void declareVariable(final ASTVar variable, final Token token) {
        final String name = token.image;
        if (!allowVariable(name)) {
            throwFeatureException(JexlFeatures.LOCAL_VAR, token);
        }
        if (frame == null) {
            frame = new Scope(null, (String[]) null);
        }
        final int symbol = frame.declareVariable(name);
        variable.setSymbol(symbol, name);
        if (frame.isCapturedSymbol(symbol)) {
            variable.setCaptured(true);
        }
        // lexical feature error
        if (!declareSymbol(symbol)) {
            if (getFeatures().isLexical()) {
                throw new JexlException(variable, name + "": variable is already declared"");
            }
            variable.setRedefined(true);
        }
    }","  public void test1()  throws Throwable  {
      Parser parser0 = new Parser(""X"");
      ASTVar aSTVar0 = new ASTVar(parser0, (-379));
      parser0.declareVariable(aSTVar0, parser0.jj_nt);
      parser0.declareVariable(aSTVar0, parser0.token);
}"
2129,"    protected void declareVariable(final ASTVar variable, final Token token) {
        final String name = token.image;
        if (!allowVariable(name)) {
            throwFeatureException(JexlFeatures.LOCAL_VAR, token);
        }
        if (frame == null) {
            frame = new Scope(null, (String[]) null);
        }
        final int symbol = frame.declareVariable(name);
        variable.setSymbol(symbol, name);
        if (frame.isCapturedSymbol(symbol)) {
            variable.setCaptured(true);
        }
        // lexical feature error
        if (!declareSymbol(symbol)) {
            if (getFeatures().isLexical()) {
                throw new JexlException(variable, name + "": variable is already declared"");
            }
            variable.setRedefined(true);
        }
    }","  public void test2()  throws Throwable  {
      Parser parser0 = new Parser(""X"");
      ASTVar aSTVar0 = new ASTVar(parser0, (-379));
      parser0.declareVariable(aSTVar0, parser0.jj_nt);
      parser0.declareVariable(aSTVar0, parser0.token);
}"
2130,"    protected static String readSourceLine(final String src, final int lineno) {
        String msg = """";
        if (src != null && lineno >= 0) {
            try {
                final BufferedReader reader = new BufferedReader(new StringReader(src));
                for (int l = 0; l < lineno; ++l) {
                    msg = reader.readLine();
                }
            } catch (final IOException xio) {
                // ignore, very unlikely but then again...
            }
        }
        return msg;
    }","  public void test3()  throws Throwable  {
      String string0 = JexlParser.readSourceLine("""", 0);
}"
2131,"    protected static String readSourceLine(final String src, final int lineno) {
        String msg = """";
        if (src != null && lineno >= 0) {
            try {
                final BufferedReader reader = new BufferedReader(new StringReader(src));
                for (int l = 0; l < lineno; ++l) {
                    msg = reader.readLine();
                }
            } catch (final IOException xio) {
                // ignore, very unlikely but then again...
            }
        }
        return msg;
    }","  public void test4()  throws Throwable  {
      String string0 = JexlParser.readSourceLine("""", 0);
}"
2132,"    protected void Identifier(final boolean top) throws ParseException {
        // Overridden by generated code
    }","  public void test5()  throws Throwable  {
      Parser parser0 = new Parser(""4IWP(,^xHH]QjzL~?r"");
      parser0.getNextToken();
      parser0.Identifier(false);
}"
2133,,"  public void test6()  throws Throwable  {
      Parser parser0 = new Parser(""aqGA"");
      ASTBlock aSTBlock0 = new ASTBlock(parser0, 11);
      boolean boolean0 = aSTBlock0.hasSymbol(60);
}"
2134,,"  public void test7()  throws Throwable  {
      JexlLexicalNode jexlLexicalNode0 = new JexlLexicalNode((-395));
      int int0 = jexlLexicalNode0.getSymbolCount();
}"
2135,,"  public void test8()  throws Throwable  {
      ASTForeachStatement aSTForeachStatement0 = new ASTForeachStatement(0);
      LexicalScope lexicalScope0 = aSTForeachStatement0.getLexicalScope();
}"
2136,"    private boolean declareSymbol(final int symbol) {
        for (final LexicalUnit lu : blocks) {
            if (lu.hasSymbol(symbol)) {
                return false;
            }
            // stop at first new scope reset, aka lambda
            if (lu instanceof ASTJexlLambda) {
                break;
            }
        }
        return block == null || block.declareSymbol(symbol);
    }","  public void test9()  throws Throwable  {
      StringProvider stringProvider0 = new StringProvider(""G0T7-f]aqGA>e"");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringProvider0, (-477), (-477));
      ParserTokenManager parserTokenManager0 = new ParserTokenManager(simpleCharStream0);
      Parser parser0 = new Parser(parserTokenManager0);
      ASTJexlScript aSTJexlScript0 = new ASTJexlScript(parser0, 0);
      boolean boolean0 = aSTJexlScript0.declareSymbol(5);
}"
2137,"    protected void popFrame() {
        if (!frames.isEmpty()) {
            frame = frames.pop();
        } else {
            frame = null;
        }
        if (!loopCounts.isEmpty()) {
            loopCount = loopCounts.pop();
        }
    }","  public void test10()  throws Throwable  {
      Parser parser0 = new Parser(""?s5m+rWvl"");
      parser0.popFrame();
}"
2138,"    protected void jjtreeOpenNodeScope(final JexlNode node) {
        // nothing
    }","  public void test11()  throws Throwable  {
      Parser parser0 = new Parser("""");
      ASTNullpNode aSTNullpNode0 = new ASTNullpNode(parser0, 1701);
      parser0.jjtreeOpenNodeScope(aSTNullpNode0);
}"
2139,"    protected void cleanup(final JexlFeatures features) {
        info = null;
        source = null;
        frame = null;
        frames.clear();
        pragmas = null;
        namespaces = null;
        loopCounts.clear();
        loopCount = 0;
        blocks.clear();
        block = null;
        this.setFeatures(features);
    }","  public void test12()  throws Throwable  {
      Parser parser0 = new Parser(""state"");
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      parser0.cleanup(jexlFeatures0);
}"
2140,"    protected static String readSourceLine(final String src, final int lineno) {
        String msg = """";
        if (src != null && lineno >= 0) {
            try {
                final BufferedReader reader = new BufferedReader(new StringReader(src));
                for (int l = 0; l < lineno; ++l) {
                    msg = reader.readLine();
                }
            } catch (final IOException xio) {
                // ignore, very unlikely but then again...
            }
        }
        return msg;
    }","  public void test13()  throws Throwable  {
      String string0 = JexlParser.readSourceLine("""", 46);
}"
2141,"    protected static String readSourceLine(final String src, final int lineno) {
        String msg = """";
        if (src != null && lineno >= 0) {
            try {
                final BufferedReader reader = new BufferedReader(new StringReader(src));
                for (int l = 0; l < lineno; ++l) {
                    msg = reader.readLine();
                }
            } catch (final IOException xio) {
                // ignore, very unlikely but then again...
            }
        }
        return msg;
    }","  public void test14()  throws Throwable  {
      String string0 = JexlParser.readSourceLine(""m&Gn"", 1);
}"
2142,"    protected static String readSourceLine(final String src, final int lineno) {
        String msg = """";
        if (src != null && lineno >= 0) {
            try {
                final BufferedReader reader = new BufferedReader(new StringReader(src));
                for (int l = 0; l < lineno; ++l) {
                    msg = reader.readLine();
                }
            } catch (final IOException xio) {
                // ignore, very unlikely but then again...
            }
        }
        return msg;
    }","  public void test15()  throws Throwable  {
      String string0 = JexlParser.readSourceLine(""m&Gn"", 1);
}"
2143,"    protected boolean isVariable(String name) {
        return frame != null && frame.getSymbol(name) != null;
    }","  public void test16()  throws Throwable  {
      Parser parser0 = new Parser(""Oo>@0.7Irxb"");
      String[] stringArray0 = new String[9];
      Scope scope0 = new Scope((Scope) null, stringArray0);
      parser0.frame = scope0;
      boolean boolean0 = parser0.isVariable(stringArray0[5]);
}"
2144,"    protected boolean isVariable(String name) {
        return frame != null && frame.getSymbol(name) != null;
    }","  public void test17()  throws Throwable  {
      Parser parser0 = new Parser("""");
      boolean boolean0 = parser0.isVariable(""x2TvHH<44o"");
}"
2145,"    protected boolean isDeclaredNamespace(final Token token, final Token colon) {
        // syntactic hint, the namespace sticks to the colon
        if (colon != null && "":"".equals(colon.image) && colon.beginColumn - 1 == token.endColumn) {
            return true;
        }
        // if name is shared with a variable name, use syntactic hint
        String name = token.image;
        if (!isVariable(name)) {
            final Set<String> ns = namespaces;
            // declared through local pragma ?
            if (ns != null && ns.contains(name)) {
                return true;
            }
            // declared through engine features ?
            if (getFeatures().namespaceTest().test(name)) {
                return true;
            }
        }
        return false;
    }","  public void test18()  throws Throwable  {
      Parser parser0 = new Parser("""");
      boolean boolean0 = parser0.isDeclaredNamespace(parser0.jj_nt, parser0.jj_nt);
}"
2146,"    protected LexicalUnit getUnit() {
        return block;
    }","  public void test19()  throws Throwable  {
      StringReader stringReader0 = new StringReader("":"");
      StreamProvider streamProvider0 = new StreamProvider(stringReader0);
      Parser parser0 = new Parser(streamProvider0);
      JexlLexicalNode jexlLexicalNode0 = new JexlLexicalNode((-1577));
      parser0.pushUnit(jexlLexicalNode0);
      JexlLexicalNode jexlLexicalNode1 = (JexlLexicalNode)parser0.getUnit();
}"
2147,"    protected Scope getFrame() {
        return frame;
    }","  public void test20()  throws Throwable  {
      Parser parser0 = new Parser(""d^;YF`"");
      parser0.DeclareVar();
      Scope scope0 = parser0.getFrame();
}"
2148,"    protected void setFeatures(final JexlFeatures features) {
        this.featureController.setFeatures(features);
    }","  public void test21()  throws Throwable  {
      Parser parser0 = new Parser(""7;<N0"");
      JexlFeatures jexlFeatures0 = parser0.getFeatures();
      parser0.setFeatures(jexlFeatures0);
}"
2149,"    protected String checkVariable(final ASTIdentifier identifier, final String name) {
        if (frame != null) {
            final Integer symbol = frame.getSymbol(name);
            if (symbol != null) {
                boolean declared = true;
                if (frame.isCapturedSymbol(symbol)) {
                    // captured are declared in all cases
                    identifier.setCaptured(true);
                } else {
                    declared = block.hasSymbol(symbol);
                    // one of the lexical blocks above should declare it
                    if (!declared) {
                        for (final LexicalUnit u : blocks) {
                            if (u.hasSymbol(symbol)) {
                                declared = true;
                                break;
                            }
                        }
                    }
                    if (!declared && info instanceof JexlNode.Info) {
                        declared = isSymbolDeclared((JexlNode.Info) info, symbol);
                    }
                }
                identifier.setSymbol(symbol, name);
                if (!declared) {
                    identifier.setShaded(true);
                    if (getFeatures().isLexicalShade()) {
                        // can not reuse a local as a global
                        throw new JexlException(identifier, name + "": variable is not defined"");
                    }
                }
            }
        }
        return name;
    }","  public void test22()  throws Throwable  {
      StringProvider stringProvider0 = new StringProvider(""jexl.namespace."");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringProvider0, 1255, 2387);
      ParserTokenManager parserTokenManager0 = new ParserTokenManager(simpleCharStream0);
      Parser parser0 = new Parser(parserTokenManager0);
      ASTVar aSTVar0 = new ASTVar(parser0, 864);
      String string0 = parser0.checkVariable(aSTVar0, (String) null);
}"
2150,"    protected String checkVariable(final ASTIdentifier identifier, final String name) {
        if (frame != null) {
            final Integer symbol = frame.getSymbol(name);
            if (symbol != null) {
                boolean declared = true;
                if (frame.isCapturedSymbol(symbol)) {
                    // captured are declared in all cases
                    identifier.setCaptured(true);
                } else {
                    declared = block.hasSymbol(symbol);
                    // one of the lexical blocks above should declare it
                    if (!declared) {
                        for (final LexicalUnit u : blocks) {
                            if (u.hasSymbol(symbol)) {
                                declared = true;
                                break;
                            }
                        }
                    }
                    if (!declared && info instanceof JexlNode.Info) {
                        declared = isSymbolDeclared((JexlNode.Info) info, symbol);
                    }
                }
                identifier.setSymbol(symbol, name);
                if (!declared) {
                    identifier.setShaded(true);
                    if (getFeatures().isLexicalShade()) {
                        // can not reuse a local as a global
                        throw new JexlException(identifier, name + "": variable is not defined"");
                    }
                }
            }
        }
        return name;
    }","  public void test23()  throws Throwable  {
      Parser parser0 = new Parser("":"");
      ASTNamespaceIdentifier aSTNamespaceIdentifier0 = new ASTNamespaceIdentifier(11);
      String string0 = parser0.checkVariable(aSTNamespaceIdentifier0, "":"");
}"
2151,"    protected String checkVariable(final ASTIdentifier identifier, final String name) {
        if (frame != null) {
            final Integer symbol = frame.getSymbol(name);
            if (symbol != null) {
                boolean declared = true;
                if (frame.isCapturedSymbol(symbol)) {
                    // captured are declared in all cases
                    identifier.setCaptured(true);
                } else {
                    declared = block.hasSymbol(symbol);
                    // one of the lexical blocks above should declare it
                    if (!declared) {
                        for (final LexicalUnit u : blocks) {
                            if (u.hasSymbol(symbol)) {
                                declared = true;
                                break;
                            }
                        }
                    }
                    if (!declared && info instanceof JexlNode.Info) {
                        declared = isSymbolDeclared((JexlNode.Info) info, symbol);
                    }
                }
                identifier.setSymbol(symbol, name);
                if (!declared) {
                    identifier.setShaded(true);
                    if (getFeatures().isLexicalShade()) {
                        // can not reuse a local as a global
                        throw new JexlException(identifier, name + "": variable is not defined"");
                    }
                }
            }
        }
        return name;
    }","  public void test24()  throws Throwable  {
      Parser parser0 = new Parser(""aNtjRvmX"");
      String string0 = parser0.checkVariable((ASTIdentifier) null, """");
}"
2152,"    protected boolean allowVariable(final String image) {
        final JexlFeatures features = getFeatures();
        if (!features.supportsLocalVar()) {
            return false;
        }
        if (features.isReservedName(image)) {
            return false;
        }
        return true;
    }","  public void test25()  throws Throwable  {
      Parser parser0 = new Parser(""aqGA"");
      boolean boolean0 = parser0.allowVariable(""xltO~%U/HCsJWa#Ab9"");
}"
2153,"    protected void throwAmbiguousException(final JexlNode node) {
        final JexlInfo begin = node.jexlInfo();
        final Token t = getToken(0);
        final JexlInfo end = info.at(t.beginLine, t.endColumn);
        final String msg = readSourceLine(source, end.getLine());
        throw new JexlException.Ambiguous(begin, end, msg);
    }","  public void test26()  throws Throwable  {
      Parser parser0 = new Parser(""t"");
      ASTVar aSTVar0 = new ASTVar((-1073741822));
      // Undeclared exception!
      try { 
        parser0.throwAmbiguousException(aSTVar0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.parser.JexlParser"", e);
      }
  }"
2154,"    protected static String stringify(final Iterable<String> lstr) {
        final StringBuilder strb = new StringBuilder();
        boolean dot = false;
        for(final String str : lstr) {
            if (!dot) {
               dot = true;
            } else {
               strb.append('.');
            }
            strb.append(str);
        }
        return strb.toString();
    }","  public void test27()  throws Throwable  {
      // Undeclared exception!
      try { 
        JexlParser.stringify((Iterable<String>) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.parser.JexlParser"", e);
      }
  }"
2155,"    protected void jjtreeCloseNodeScope(final JexlNode node) {
        if (node instanceof ASTAmbiguous) {
            throwAmbiguousException(node);
        }
        if (node instanceof ASTJexlScript) {
            if (node instanceof ASTJexlLambda && !getFeatures().supportsLambda()) {
                throwFeatureException(JexlFeatures.LAMBDA, node.jexlInfo());
            }
            final ASTJexlScript script = (ASTJexlScript) node;
            // reaccess in case local variables have been declared
            if (script.getScope() != frame) {
                script.setScope(frame);
            }
            popFrame();
        } else if (ASSIGN_NODES.contains(node.getClass())) {
            final JexlNode lv = node.jjtGetChild(0);
            if (!lv.isLeftValue()) {
                throwParsingException(JexlException.Assignment.class, null);
            }
        }
        // heavy check
        featureController.controlNode(node);
    }","  public void test28()  throws Throwable  {
      Parser parser0 = new Parser(""ncTdcdjt_GuV[9eH\"""");
      JexlLexicalNode jexlLexicalNode0 = new JexlLexicalNode(1660);
      // Undeclared exception!
      try { 
        parser0.jjtreeCloseNodeScope(jexlLexicalNode0);
        fail(""Expecting exception: UnsupportedOperationException"");
      } catch(UnsupportedOperationException e) {
         //
         // JexlLexicalNode : not supported yet.
         //
         verifyException(""org.apache.commons.jexl3.parser.ParserVisitor"", e);
      }
  }"
2156,"    protected static Token errorToken(final Token... tokens) {
        for (final Token token : tokens) {
            if (token != null && token.image != null && !token.image.isEmpty()) {
                return token;
            }
        }
        return null;
    }","  public void test29()  throws Throwable  {
      // Undeclared exception!
      try { 
        JexlParser.errorToken((Token[]) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.parser.JexlParser"", e);
      }
  }"
2157,"    protected void declareVariable(final ASTVar variable, final Token token) {
        final String name = token.image;
        if (!allowVariable(name)) {
            throwFeatureException(JexlFeatures.LOCAL_VAR, token);
        }
        if (frame == null) {
            frame = new Scope(null, (String[]) null);
        }
        final int symbol = frame.declareVariable(name);
        variable.setSymbol(symbol, name);
        if (frame.isCapturedSymbol(symbol)) {
            variable.setCaptured(true);
        }
        // lexical feature error
        if (!declareSymbol(symbol)) {
            if (getFeatures().isLexical()) {
                throw new JexlException(variable, name + "": variable is already declared"");
            }
            variable.setRedefined(true);
        }
    }","  public void test30()  throws Throwable  {
      Parser parser0 = new Parser(""X"");
      ASTVar aSTVar0 = new ASTVar(48);
      // Undeclared exception!
      try { 
        parser0.declareVariable(aSTVar0, (Token) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.parser.JexlParser"", e);
      }
  }"
2158,"    protected void declarePragma(final String key, final Object value) {
        if (!getFeatures().supportsPragma()) {
            throwFeatureException(JexlFeatures.PRAGMA, getToken(0));
        }
        if (pragmas == null) {
            pragmas = new TreeMap<>();
        }
        // declaring a namespace
        Predicate<String> ns = getFeatures().namespaceTest();
        if (ns != null && key.startsWith(PRAGMA_JEXLNS)) {
            // jexl.namespace.***
            final String nsname = key.substring(PRAGMA_JEXLNS.length());
            if (nsname != null && !nsname.isEmpty()) {
                if (namespaces == null) {
                    namespaces = new HashSet<>();
                }
                namespaces.add(nsname);
            }
        }
        pragmas.put(key, value);
    }","  public void test31()  throws Throwable  {
      Parser parser0 = new Parser(""Oo>@0.7Irxb"");
      // Undeclared exception!
      try { 
        parser0.declarePragma((String) null, ""Oo>@0.7Irxb"");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
      }
  }"
2159,"    protected void declareParameter(final Token token) {
        final String identifier =  token.image;
        if (!allowVariable(identifier)) {
            throwFeatureException(JexlFeatures.LOCAL_VAR, token);
        }
        if (frame == null) {
            frame = new Scope(null, (String[]) null);
        }
        final int symbol = frame.declareParameter(identifier);
        // not sure how declaring a parameter could fail...
        // lexical feature error
        if (!block.declareSymbol(symbol) && getFeatures().isLexical()) {
            final JexlInfo xinfo = info.at(token.beginLine, token.beginColumn);
            throw new JexlException(xinfo,  identifier + "": variable is already declared"", null);
        }
    }","  public void test32()  throws Throwable  {
      Parser parser0 = new Parser(""}|{B>=v1M8(>OzqvS"");
      // Undeclared exception!
      try { 
        parser0.declareParameter(parser0.jj_nt);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.parser.JexlParser"", e);
      }
  }"
2160,"    protected String checkVariable(final ASTIdentifier identifier, final String name) {
        if (frame != null) {
            final Integer symbol = frame.getSymbol(name);
            if (symbol != null) {
                boolean declared = true;
                if (frame.isCapturedSymbol(symbol)) {
                    // captured are declared in all cases
                    identifier.setCaptured(true);
                } else {
                    declared = block.hasSymbol(symbol);
                    // one of the lexical blocks above should declare it
                    if (!declared) {
                        for (final LexicalUnit u : blocks) {
                            if (u.hasSymbol(symbol)) {
                                declared = true;
                                break;
                            }
                        }
                    }
                    if (!declared && info instanceof JexlNode.Info) {
                        declared = isSymbolDeclared((JexlNode.Info) info, symbol);
                    }
                }
                identifier.setSymbol(symbol, name);
                if (!declared) {
                    identifier.setShaded(true);
                    if (getFeatures().isLexicalShade()) {
                        // can not reuse a local as a global
                        throw new JexlException(identifier, name + "": variable is not defined"");
                    }
                }
            }
        }
        return name;
    }","  public void test33()  throws Throwable  {
      Parser parser0 = new Parser(""X"");
      ASTVar aSTVar0 = new ASTVar(parser0, (-379));
      parser0.declareVariable(aSTVar0, parser0.jj_nt);
      // Undeclared exception!
      try { 
        parser0.checkVariable(aSTVar0, ""X"");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.parser.JexlParser"", e);
      }
  }"
2161,"    protected void Identifier(final boolean top) throws ParseException {
        // Overridden by generated code
    }","  public void test34()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""Inhal'?5U_"");
      StreamProvider streamProvider0 = new StreamProvider(stringReader0);
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(streamProvider0);
      ParserTokenManager parserTokenManager0 = new ParserTokenManager(simpleCharStream0, 1);
      Parser parser0 = new Parser(parserTokenManager0);
      // Undeclared exception!
      try { 
        parser0.Identifier(true);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // Lexical error at line 1, column 11.  Encountered: <EOF> after : \""\\'?5U_\""
         //
         verifyException(""org.apache.commons.jexl3.parser.ParserTokenManager"", e);
      }
  }"
2162,"    protected void Identifier(final boolean top) throws ParseException {
        // Overridden by generated code
    }","  public void test35()  throws Throwable  {
      Parser parser0 = new Parser(""N.FbsoTakSn="");
      parser0.Identifier(true);
      try { 
        parser0.Identifier(true);
        fail(""Expecting exception: Exception"");
      } catch(Exception e) {
         //
         // Parse error at line 1, column 2.  Encountered: .
         //
         verifyException(""org.apache.commons.jexl3.parser.Parser"", e);
      }
  }"
2163,"    protected void Identifier(final boolean top) throws ParseException {
        // Overridden by generated code
    }","  public void test36()  throws Throwable  {
      Parser parser0 = new Parser(""1G3%%Th9K7_4.0)"");
      parser0.token = null;
      // Undeclared exception!
      try { 
        parser0.Identifier(false);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
2164,"    protected void jjtreeCloseNodeScope(final JexlNode node) {
        if (node instanceof ASTAmbiguous) {
            throwAmbiguousException(node);
        }
        if (node instanceof ASTJexlScript) {
            if (node instanceof ASTJexlLambda && !getFeatures().supportsLambda()) {
                throwFeatureException(JexlFeatures.LAMBDA, node.jexlInfo());
            }
            final ASTJexlScript script = (ASTJexlScript) node;
            // reaccess in case local variables have been declared
            if (script.getScope() != frame) {
                script.setScope(frame);
            }
            popFrame();
        } else if (ASSIGN_NODES.contains(node.getClass())) {
            final JexlNode lv = node.jjtGetChild(0);
            if (!lv.isLeftValue()) {
                throwParsingException(JexlException.Assignment.class, null);
            }
        }
        // heavy check
        featureController.controlNode(node);
    }","  public void test37()  throws Throwable  {
      Parser parser0 = new Parser(""org.apache.commons.jexl3.internal.LexicalScope"");
      ASTSetAddNode aSTSetAddNode0 = new ASTSetAddNode(parser0, 308);
      // Undeclared exception!
      try { 
        parser0.jjtreeCloseNodeScope(aSTSetAddNode0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.parser.SimpleNode"", e);
      }
  }"
2165,,"  public void test38()  throws Throwable  {
      StringProvider stringProvider0 = new StringProvider(""malformed expression: "");
      Parser parser0 = new Parser(stringProvider0);
      // Undeclared exception!
      try { 
        parser0.JexlScript((Scope) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.parser.JexlParser"", e);
      }
  }"
2166,"    protected static Token errorToken(final Token... tokens) {
        for (final Token token : tokens) {
            if (token != null && token.image != null && !token.image.isEmpty()) {
                return token;
            }
        }
        return null;
    }","  public void test39()  throws Throwable  {
      Token[] tokenArray0 = new Token[3];
      Parser parser0 = new Parser(""m&Gn"");
      parser0.InclusiveOrExpression();
      Token token0 = parser0.jj_nt;
      tokenArray0[2] = token0;
      Token token1 = JexlParser.errorToken(tokenArray0);
}"
2167,"    protected static Token errorToken(final Token... tokens) {
        for (final Token token : tokens) {
            if (token != null && token.image != null && !token.image.isEmpty()) {
                return token;
            }
        }
        return null;
    }","  public void test40()  throws Throwable  {
      Parser parser0 = new Parser(""vzJ[6\""vHjz@FI>j"");
      Token[] tokenArray0 = new Token[3];
      tokenArray0[0] = parser0.token;
      Token token0 = JexlParser.errorToken(tokenArray0);
}"
2168,"    protected static Token errorToken(final Token... tokens) {
        for (final Token token : tokens) {
            if (token != null && token.image != null && !token.image.isEmpty()) {
                return token;
            }
        }
        return null;
    }","  public void test41()  throws Throwable  {
      Token[] tokenArray0 = new Token[3];
      Parser parser0 = new Parser(""m&Gn"");
      tokenArray0[2] = parser0.jj_nt;
      Token token0 = JexlParser.errorToken(tokenArray0);
}"
2169,"    protected <T extends JexlException.Parsing> void throwParsingException(final Class<T> xclazz, Token tok) {
        JexlInfo xinfo  = null;
        String msg = ""unrecoverable state"";
        JexlException.Parsing xparse = null;
        if (tok == null) {
            tok = this.getToken(0);
        }
        if (tok != null) {
            xinfo = info.at(tok.beginLine, tok.beginColumn);
            msg = tok.image;
            if (xclazz != null) {
                try {
                    final Constructor<T> ctor = xclazz.getConstructor(JexlInfo.class, String.class);
                    xparse = ctor.newInstance(xinfo, msg);
                } catch (final Exception xany) {
                    // ignore, very unlikely but then again..
                }
            }
        }
        // unlikely but safe
        throw xparse != null ? xparse : new JexlException.Parsing(xinfo, msg);
    }","  public void test42()  throws Throwable  {
      Parser parser0 = new Parser(""1G3%%Th9K7_4.0)"");
      Class<JexlException.Assignment> class0 = JexlException.Assignment.class;
      parser0.token = null;
      // Undeclared exception!
      try { 
        parser0.throwParsingException(class0, (Token) null);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // ?: parsing error in 'unrecoverable state'
         //
         verifyException(""org.apache.commons.jexl3.parser.JexlParser"", e);
      }
  }"
2170,"    protected <T extends JexlException.Parsing> void throwParsingException(final Class<T> xclazz, Token tok) {
        JexlInfo xinfo  = null;
        String msg = ""unrecoverable state"";
        JexlException.Parsing xparse = null;
        if (tok == null) {
            tok = this.getToken(0);
        }
        if (tok != null) {
            xinfo = info.at(tok.beginLine, tok.beginColumn);
            msg = tok.image;
            if (xclazz != null) {
                try {
                    final Constructor<T> ctor = xclazz.getConstructor(JexlInfo.class, String.class);
                    xparse = ctor.newInstance(xinfo, msg);
                } catch (final Exception xany) {
                    // ignore, very unlikely but then again..
                }
            }
        }
        // unlikely but safe
        throw xparse != null ? xparse : new JexlException.Parsing(xinfo, msg);
    }","  public void test43()  throws Throwable  {
      Parser parser0 = new Parser(""1G3%%Th9K7_4.0)"");
      Class<JexlException.Assignment> class0 = JexlException.Assignment.class;
      // Undeclared exception!
      try { 
        parser0.throwParsingException(class0, (Token) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.parser.JexlParser"", e);
      }
  }"
2171,"    protected <T extends JexlException.Parsing> void throwParsingException(final Class<T> xclazz, Token tok) {
        JexlInfo xinfo  = null;
        String msg = ""unrecoverable state"";
        JexlException.Parsing xparse = null;
        if (tok == null) {
            tok = this.getToken(0);
        }
        if (tok != null) {
            xinfo = info.at(tok.beginLine, tok.beginColumn);
            msg = tok.image;
            if (xclazz != null) {
                try {
                    final Constructor<T> ctor = xclazz.getConstructor(JexlInfo.class, String.class);
                    xparse = ctor.newInstance(xinfo, msg);
                } catch (final Exception xany) {
                    // ignore, very unlikely but then again..
                }
            }
        }
        // unlikely but safe
        throw xparse != null ? xparse : new JexlException.Parsing(xinfo, msg);
    }","  public void test44()  throws Throwable  {
      Parser parser0 = new Parser(""X"");
      Class<JexlException.Assignment> class0 = JexlException.Assignment.class;
      // Undeclared exception!
      try { 
        parser0.throwParsingException(class0, parser0.jj_nt);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.parser.JexlParser"", e);
      }
  }"
2172,"    protected void throwFeatureException(final int feature, final JexlInfo info) {
        final String msg = info != null? readSourceLine(source, info.getLine()) : null;
        throw new JexlException.Feature(info, feature, msg);
    }","  public void test45()  throws Throwable  {
      Parser parser0 = new Parser(""vzJ[6\""vHjz@FI>j"");
      parser0.token = null;
      // Undeclared exception!
      try { 
        parser0.throwFeatureException(1049, (Token) null);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // ?: parsing error in 'unsupported feature'
         //
         verifyException(""org.apache.commons.jexl3.parser.JexlParser"", e);
      }
  }"
2173,"    protected void throwFeatureException(final int feature, final JexlInfo info) {
        final String msg = info != null? readSourceLine(source, info.getLine()) : null;
        throw new JexlException.Feature(info, feature, msg);
    }","  public void test46()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""org.apache.commons.jexl3.parser.ASTForeachStatement"");
      StreamProvider streamProvider0 = new StreamProvider(stringReader0);
      Parser parser0 = new Parser(streamProvider0);
      // Undeclared exception!
      try { 
        parser0.throwFeatureException((-2922), (Token) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.parser.JexlParser"", e);
      }
  }"
2174,"    protected void throwFeatureException(final int feature, final JexlInfo info) {
        final String msg = info != null? readSourceLine(source, info.getLine()) : null;
        throw new JexlException.Feature(info, feature, msg);
    }","  public void test47()  throws Throwable  {
      Parser parser0 = new Parser(""vzJ[6\""vHjz@FI>j"");
      // Undeclared exception!
      try { 
        parser0.throwFeatureException(1049, parser0.jj_nt);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.parser.JexlParser"", e);
      }
  }"
2175,"    protected void throwFeatureException(final int feature, final JexlInfo info) {
        final String msg = info != null? readSourceLine(source, info.getLine()) : null;
        throw new JexlException.Feature(info, feature, msg);
    }","  public void test48()  throws Throwable  {
      Parser parser0 = new Parser(""1==Q+O;7fOl%"");
      // Undeclared exception!
      try { 
        parser0.throwFeatureException((-350), (JexlInfo) null);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // ?: unsupported feature error in ''
         //
         verifyException(""org.apache.commons.jexl3.parser.JexlParser"", e);
      }
  }"
2176,,"  public void test49()  throws Throwable  {
      Parser parser0 = new Parser(""jexl.namespace."");
      JexlInfo jexlInfo0 = new JexlInfo(""jexl.namespace."", 1224, 0);
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      Predicate<String> predicate0 = jexlFeatures0.TEST_STR_FALSE.negate();
      jexlFeatures0.namespaceTest(predicate0);
      ASTJexlScript aSTJexlScript0 = parser0.parse(jexlInfo0, jexlFeatures0, ""xl.name"", (Scope) null);
}"
2177,"    protected boolean isDeclaredNamespace(final Token token, final Token colon) {
        // syntactic hint, the namespace sticks to the colon
        if (colon != null && "":"".equals(colon.image) && colon.beginColumn - 1 == token.endColumn) {
            return true;
        }
        // if name is shared with a variable name, use syntactic hint
        String name = token.image;
        if (!isVariable(name)) {
            final Set<String> ns = namespaces;
            // declared through local pragma ?
            if (ns != null && ns.contains(name)) {
                return true;
            }
            // declared through engine features ?
            if (getFeatures().namespaceTest().test(name)) {
                return true;
            }
        }
        return false;
    }","  public void test50()  throws Throwable  {
      Parser parser0 = new Parser(""Ov=6"");
      // Undeclared exception!
      try { 
        parser0.isDeclaredNamespace((Token) null, (Token) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.parser.JexlParser"", e);
      }
  }"
2178,"    protected void declarePragma(final String key, final Object value) {
        if (!getFeatures().supportsPragma()) {
            throwFeatureException(JexlFeatures.PRAGMA, getToken(0));
        }
        if (pragmas == null) {
            pragmas = new TreeMap<>();
        }
        // declaring a namespace
        Predicate<String> ns = getFeatures().namespaceTest();
        if (ns != null && key.startsWith(PRAGMA_JEXLNS)) {
            // jexl.namespace.***
            final String nsname = key.substring(PRAGMA_JEXLNS.length());
            if (nsname != null && !nsname.isEmpty()) {
                if (namespaces == null) {
                    namespaces = new HashSet<>();
                }
                namespaces.add(nsname);
            }
        }
        pragmas.put(key, value);
    }","  public void test51()  throws Throwable  {
      Parser parser0 = new Parser(""jexl.namespace."");
      parser0.declarePragma(""jexl.namespace."", ""jexl.namespace."");
}"
2179,"    protected void declarePragma(final String key, final Object value) {
        if (!getFeatures().supportsPragma()) {
            throwFeatureException(JexlFeatures.PRAGMA, getToken(0));
        }
        if (pragmas == null) {
            pragmas = new TreeMap<>();
        }
        // declaring a namespace
        Predicate<String> ns = getFeatures().namespaceTest();
        if (ns != null && key.startsWith(PRAGMA_JEXLNS)) {
            // jexl.namespace.***
            final String nsname = key.substring(PRAGMA_JEXLNS.length());
            if (nsname != null && !nsname.isEmpty()) {
                if (namespaces == null) {
                    namespaces = new HashSet<>();
                }
                namespaces.add(nsname);
            }
        }
        pragmas.put(key, value);
    }","  public void test52()  throws Throwable  {
      Parser parser0 = new Parser(""jexl.namespace.J$6f"");
      ASTSetAndNode aSTSetAndNode0 = new ASTSetAndNode((byte)110);
      parser0.declarePragma(""jexl.namespace.J$6f"", aSTSetAndNode0);
      parser0.ConditionalExpression();
}"
2180,"    protected void declarePragma(final String key, final Object value) {
        if (!getFeatures().supportsPragma()) {
            throwFeatureException(JexlFeatures.PRAGMA, getToken(0));
        }
        if (pragmas == null) {
            pragmas = new TreeMap<>();
        }
        // declaring a namespace
        Predicate<String> ns = getFeatures().namespaceTest();
        if (ns != null && key.startsWith(PRAGMA_JEXLNS)) {
            // jexl.namespace.***
            final String nsname = key.substring(PRAGMA_JEXLNS.length());
            if (nsname != null && !nsname.isEmpty()) {
                if (namespaces == null) {
                    namespaces = new HashSet<>();
                }
                namespaces.add(nsname);
            }
        }
        pragmas.put(key, value);
    }","  public void test53()  throws Throwable  {
      Parser parser0 = new Parser(""Ji$8?I64f"");
      Integer integer0 = new Integer((-1726));
      parser0.declarePragma(""Ji$8?I64f"", integer0);
      parser0.declarePragma(""Ji$8?I64f"", ""Ji$8?I64f"");
}"
2181,"    protected void pushFrame() {
        if (frame != null) {
            frames.push(frame);
        }
        frame = new Scope(frame, (String[]) null);
        loopCounts.push(loopCount);
        loopCount = 0;
    }","  public void test54()  throws Throwable  {
      Parser parser0 = new Parser(""X"");
      ASTVar aSTVar0 = new ASTVar(parser0, (-379));
      parser0.declareVariable(aSTVar0, parser0.jj_nt);
      parser0.pushFrame();
      parser0.DeclareVar();
}"
2182,"    protected void declareVariable(final ASTVar variable, final Token token) {
        final String name = token.image;
        if (!allowVariable(name)) {
            throwFeatureException(JexlFeatures.LOCAL_VAR, token);
        }
        if (frame == null) {
            frame = new Scope(null, (String[]) null);
        }
        final int symbol = frame.declareVariable(name);
        variable.setSymbol(symbol, name);
        if (frame.isCapturedSymbol(symbol)) {
            variable.setCaptured(true);
        }
        // lexical feature error
        if (!declareSymbol(symbol)) {
            if (getFeatures().isLexical()) {
                throw new JexlException(variable, name + "": variable is already declared"");
            }
            variable.setRedefined(true);
        }
    }","  public void test55()  throws Throwable  {
      Parser parser0 = new Parser(""X"");
      ASTVar aSTVar0 = new ASTVar(parser0, (-379));
      parser0.pushFrame();
      parser0.declareVariable(aSTVar0, parser0.jj_nt);
}"
2183,"    protected void declareVariable(final ASTVar variable, final Token token) {
        final String name = token.image;
        if (!allowVariable(name)) {
            throwFeatureException(JexlFeatures.LOCAL_VAR, token);
        }
        if (frame == null) {
            frame = new Scope(null, (String[]) null);
        }
        final int symbol = frame.declareVariable(name);
        variable.setSymbol(symbol, name);
        if (frame.isCapturedSymbol(symbol)) {
            variable.setCaptured(true);
        }
        // lexical feature error
        if (!declareSymbol(symbol)) {
            if (getFeatures().isLexical()) {
                throw new JexlException(variable, name + "": variable is already declared"");
            }
            variable.setRedefined(true);
        }
    }","  public void test56()  throws Throwable  {
      Parser parser0 = new Parser(""X"");
      ASTVar aSTVar0 = new ASTVar(parser0, (-379));
      parser0.pushFrame();
      parser0.declareVariable(aSTVar0, parser0.jj_nt);
}"
2184,"    protected void declareVariable(final ASTVar variable, final Token token) {
        final String name = token.image;
        if (!allowVariable(name)) {
            throwFeatureException(JexlFeatures.LOCAL_VAR, token);
        }
        if (frame == null) {
            frame = new Scope(null, (String[]) null);
        }
        final int symbol = frame.declareVariable(name);
        variable.setSymbol(symbol, name);
        if (frame.isCapturedSymbol(symbol)) {
            variable.setCaptured(true);
        }
        // lexical feature error
        if (!declareSymbol(symbol)) {
            if (getFeatures().isLexical()) {
                throw new JexlException(variable, name + "": variable is already declared"");
            }
            variable.setRedefined(true);
        }
    }","  public void test57()  throws Throwable  {
      Parser parser0 = new Parser(""X"");
      JexlLexicalNode jexlLexicalNode0 = new JexlLexicalNode((-1703));
      parser0.pushUnit(jexlLexicalNode0);
      ASTVar aSTVar0 = new ASTVar(parser0, (-379));
      parser0.declareVariable(aSTVar0, parser0.jj_nt);
      parser0.InclusiveOrExpression();
}"
2185,"    protected void pushFrame() {
        if (frame != null) {
            frames.push(frame);
        }
        frame = new Scope(frame, (String[]) null);
        loopCounts.push(loopCount);
        loopCount = 0;
    }","  public void test58()  throws Throwable  {
      Parser parser0 = new Parser(""X"");
      ASTVar aSTVar0 = new ASTVar((-1703));
      parser0.declareVariable(aSTVar0, parser0.jj_nt);
      parser0.pushFrame();
      parser0.InclusiveOrExpression();
}"
2186,,"  public void test59()  throws Throwable  {
      Parser parser0 = new Parser(""Oo>@0.7Irxb"");
      String[] stringArray0 = new String[9];
      Scope scope0 = new Scope((Scope) null, stringArray0);
      parser0.frame = scope0;
      parser0.MultiplicativeExpression();
}"
2187,"    protected void popUnit(final LexicalUnit unit) {
        if (block == unit){
            if (!blocks.isEmpty()) {
                block = blocks.pop();
            } else {
                block = null;
            }
        }
    }","  public void test60()  throws Throwable  {
      Parser parser0 = new Parser(""s9UYhY"");
      ASTBlock aSTBlock0 = new ASTBlock(0);
      parser0.popUnit(aSTBlock0);
}"
2188,"    protected void pushUnit(final LexicalUnit unit) {
        if (block != null) {
            blocks.push(block);
        }
        block = unit;
    }","  public void test61()  throws Throwable  {
      Parser parser0 = new Parser(""8G`E>rHxN#XBSvQq\"""");
      ASTBlock aSTBlock0 = new ASTBlock(1369);
      parser0.pushUnit(aSTBlock0);
      try { 
        parser0.ForeachStatement();
        fail(""Expecting exception: Exception"");
      } catch(Exception e) {
         //
         // Parse error at line 1, column 1.  Encountered: 8
         //
         verifyException(""org.apache.commons.jexl3.parser.Parser"", e);
      }
  }"
2189,"    protected void jjtreeCloseNodeScope(final JexlNode node) {
        if (node instanceof ASTAmbiguous) {
            throwAmbiguousException(node);
        }
        if (node instanceof ASTJexlScript) {
            if (node instanceof ASTJexlLambda && !getFeatures().supportsLambda()) {
                throwFeatureException(JexlFeatures.LAMBDA, node.jexlInfo());
            }
            final ASTJexlScript script = (ASTJexlScript) node;
            // reaccess in case local variables have been declared
            if (script.getScope() != frame) {
                script.setScope(frame);
            }
            popFrame();
        } else if (ASSIGN_NODES.contains(node.getClass())) {
            final JexlNode lv = node.jjtGetChild(0);
            if (!lv.isLeftValue()) {
                throwParsingException(JexlException.Assignment.class, null);
            }
        }
        // heavy check
        featureController.controlNode(node);
    }","  public void test62()  throws Throwable  {
      Parser parser0 = new Parser(""Oo>@0.7Irxb"");
      String[] stringArray0 = new String[9];
      Scope scope0 = new Scope((Scope) null, stringArray0);
      parser0.frame = scope0;
      parser0.pushFrame();
      ASTJexlLambda aSTJexlLambda0 = new ASTJexlLambda(0);
      parser0.jjtreeCloseNodeScope(aSTJexlLambda0);
}"
2190,,"  public void test63()  throws Throwable  {
      Parser parser0 = new Parser(""Ji$8?C'I64f"");
      try { 
        parser0.Lambda();
        fail(""Expecting exception: Exception"");
      } catch(Exception e) {
         //
         // Parse error at line 1, column 5.  Encountered: ?
         //
         verifyException(""org.apache.commons.jexl3.parser.Parser"", e);
      }
  }"
2191,"    protected static String readSourceLine(final String src, final int lineno) {
        String msg = """";
        if (src != null && lineno >= 0) {
            try {
                final BufferedReader reader = new BufferedReader(new StringReader(src));
                for (int l = 0; l < lineno; ++l) {
                    msg = reader.readLine();
                }
            } catch (final IOException xio) {
                // ignore, very unlikely but then again...
            }
        }
        return msg;
    }","  public void test64()  throws Throwable  {
      String string0 = JexlParser.readSourceLine(""Oo>@0.7Irxb"", (-1726));
}"
2192,"    protected void throwFeatureException(final int feature, final JexlInfo info) {
        final String msg = info != null? readSourceLine(source, info.getLine()) : null;
        throw new JexlException.Feature(info, feature, msg);
    }","  public void test65()  throws Throwable  {
      StringProvider stringProvider0 = new StringProvider(""bv?\""4$;!-"");
      Parser parser0 = new Parser(stringProvider0);
      JexlInfo jexlInfo0 = new JexlInfo();
      // Undeclared exception!
      try { 
        parser0.throwFeatureException((-309), jexlInfo0);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // <evosuite>.<evosuite>:-1 unsupported feature error in ''
         //
         verifyException(""org.apache.commons.jexl3.parser.JexlParser"", e);
      }
  }"
2193,"    protected static String stringify(final Iterable<String> lstr) {
        final StringBuilder strb = new StringBuilder();
        boolean dot = false;
        for(final String str : lstr) {
            if (!dot) {
               dot = true;
            } else {
               strb.append('.');
            }
            strb.append(str);
        }
        return strb.toString();
    }","  public void test66()  throws Throwable  {
      PriorityQueue<String> priorityQueue0 = new PriorityQueue<String>();
      priorityQueue0.add(""vzJ[6\""vHjz@4I>j"");
      priorityQueue0.add(""vzJ[6\""vHjz@4I>j"");
      String string0 = JexlParser.stringify(priorityQueue0);
}"
2194,"    protected static String stringify(final Iterable<String> lstr) {
        final StringBuilder strb = new StringBuilder();
        boolean dot = false;
        for(final String str : lstr) {
            if (!dot) {
               dot = true;
            } else {
               strb.append('.');
            }
            strb.append(str);
        }
        return strb.toString();
    }","  public void test67()  throws Throwable  {
      PriorityQueue<String> priorityQueue0 = new PriorityQueue<String>();
      String string0 = JexlParser.stringify(priorityQueue0);
}"
2195,"    protected LexicalUnit getUnit() {
        return block;
    }","  public void test68()  throws Throwable  {
      Parser parser0 = new Parser("""");
      JexlParser.LexicalUnit jexlParser_LexicalUnit0 = parser0.getUnit();
}"
2196,"    protected JexlFeatures getFeatures() {
        return featureController.getFeatures();
    }","  public void test69()  throws Throwable  {
      Parser parser0 = new Parser(""7;<N0"");
      parser0.allowRegisters(true);
      JexlFeatures jexlFeatures0 = parser0.getFeatures();
}"
2197,,"  public void test70()  throws Throwable  {
      Parser parser0 = new Parser(""unrecoverable state"");
      JexlInfo jexlInfo0 = new JexlInfo(""recoverable stat"", 3381, 2400);
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      // Undeclared exception!
      try { 
        parser0.parse(jexlInfo0, jexlFeatures0, ""recoverable stat"", (Scope) null);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // @1:13 ambiguous statement error in 'recoverable stat'
         //
         verifyException(""org.apache.commons.jexl3.parser.JexlParser"", e);
      }
  }"
2198,"    protected Scope getFrame() {
        return frame;
    }","  public void test71()  throws Throwable  {
      StringProvider stringProvider0 = new StringProvider(""maformed exp=essYon:"");
      Parser parser0 = new Parser(stringProvider0);
      Scope scope0 = parser0.getFrame();
}"
2199,,"  public void test72()  throws Throwable  {
      StringProvider stringProvider0 = new StringProvider(""maformed exp=essYon:"");
      Parser parser0 = new Parser(stringProvider0);
      // Undeclared exception!
      try { 
        parser0.JexlScript((Scope) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.parser.JexlParser"", e);
      }
  }"
2200,"    ASTIdentifierAccessJxlt(final int id) {
        super(id);
    }","  public void test0()  throws Throwable  {
      Parser parser0 = new Parser(""true"");
      ASTIdentifierAccessJxlt aSTIdentifierAccessJxlt0 = new ASTIdentifierAccessJxlt(parser0, 1205);
}"
2201,"    ASTIdentifierAccessJxlt(final int id) {
        super(id);
    }","  public void test1()  throws Throwable  {
      ASTIdentifierAccessJxlt aSTIdentifierAccessJxlt0 = new ASTIdentifierAccessJxlt(0);
}"
2202,"    public boolean isExpression() {
        return true;
    }","  public void test2()  throws Throwable  {
      ASTIdentifierAccessSafeJxlt aSTIdentifierAccessSafeJxlt0 = new ASTIdentifierAccessSafeJxlt((Parser) null, (-12));
      boolean boolean0 = aSTIdentifierAccessSafeJxlt0.isExpression();
}"
2203,"    public void setExpression(final JxltEngine.Expression tp) {
        jxltExpr = tp;
    }","  public void test3()  throws Throwable  {
      ASTIdentifierAccessSafeJxlt aSTIdentifierAccessSafeJxlt0 = new ASTIdentifierAccessSafeJxlt(2708);
      aSTIdentifierAccessSafeJxlt0.setExpression((JxltEngine.Expression) null);
}"
2204,"    public JxltEngine.Expression getExpression() {
        return jxltExpr;
    }","  public void test4()  throws Throwable  {
      ASTIdentifierAccessSafeJxlt aSTIdentifierAccessSafeJxlt0 = new ASTIdentifierAccessSafeJxlt(2708);
      JxltEngine.Expression jxltEngine_Expression0 = aSTIdentifierAccessSafeJxlt0.getExpression();
}"
2205,"    public String getNamespace() {
        return namespace;
    }","  public void test0()  throws Throwable  {
      ASTNamespaceIdentifier aSTNamespaceIdentifier0 = new ASTNamespaceIdentifier(38);
      aSTNamespaceIdentifier0.setNamespace("""", ""org.apache.commons.jexl3.parser.ASTNamespaceIdentifier"");
      String string0 = aSTNamespaceIdentifier0.getNamespace();
}"
2206,"    public String getNamespace() {
        return namespace;
    }","  public void test1()  throws Throwable  {
      ASTNamespaceIdentifier aSTNamespaceIdentifier0 = new ASTNamespaceIdentifier(38);
      aSTNamespaceIdentifier0.setNamespace("""", ""org.apache.commons.jexl3.parser.ASTNamespaceIdentifier"");
      String string0 = aSTNamespaceIdentifier0.getNamespace();
}"
2207,"    public String getNamespace() {
        return namespace;
    }","  public void test2()  throws Throwable  {
      ASTNamespaceIdentifier aSTNamespaceIdentifier0 = new ASTNamespaceIdentifier(38);
      aSTNamespaceIdentifier0.setNamespace("""", ""org.apache.commons.jexl3.parser.ASTNamespaceIdentifier"");
      String string0 = aSTNamespaceIdentifier0.getNamespace();
}"
2208,"    public String getNamespace() {
        return namespace;
    }","  public void test3()  throws Throwable  {
      ASTNamespaceIdentifier aSTNamespaceIdentifier0 = new ASTNamespaceIdentifier(38);
      String string0 = aSTNamespaceIdentifier0.getNamespace();
}"
2209,"    public String getNamespace() {
        return namespace;
    }","  public void test4()  throws Throwable  {
      ASTNamespaceIdentifier aSTNamespaceIdentifier0 = new ASTNamespaceIdentifier(38);
      aSTNamespaceIdentifier0.setNamespace(""X?8$c"", ""X?8$c"");
      String string0 = aSTNamespaceIdentifier0.getNamespace();
}"
2210,"    public int getLine() {
        return line;
    }","  public void test0()  throws Throwable  {
      Token token0 = Token.newToken(2423, ""g(~[ rtMSAJ:n="");
      int[][] intArray0 = new int[0][9];
      String[] stringArray0 = new String[7];
      token0.next = token0;
      ParseException parseException0 = new ParseException(token0, intArray0, stringArray0);
      int int0 = parseException0.getLine();
}"
2211,"    public int getColumn() {
        return column;
    }","  public void test1()  throws Throwable  {
      Token token0 = new Token(1);
      int[][] intArray0 = new int[1][1];
      token0.next = token0;
      String[] stringArray0 = new String[0];
      ParseException parseException0 = new ParseException(token0, intArray0, stringArray0);
      int int0 = parseException0.getColumn();
}"
2212,"    public String getAfter() {
        return after;
    }","  public void test2()  throws Throwable  {
      Token token0 = new Token(1);
      int[][] intArray0 = new int[1][1];
      token0.next = token0;
      String[] stringArray0 = new String[0];
      ParseException parseException0 = new ParseException(token0, intArray0, stringArray0);
      String string0 = parseException0.getAfter();
}"
2213,"    public String getAfter() {
        return after;
    }","  public void test3()  throws Throwable  {
      Token token0 = Token.newToken(2423, ""g(~[ rtMSAJ:n="");
      int[][] intArray0 = new int[0][9];
      String[] stringArray0 = new String[7];
      token0.next = token0;
      ParseException parseException0 = new ParseException(token0, intArray0, stringArray0);
      String string0 = parseException0.getAfter();
}"
2214,"    public int getLine() {
        return line;
    }","  public void test4()  throws Throwable  {
      ParseException parseException0 = new ParseException(""j"");
      int int0 = parseException0.getLine();
}"
2215,"    public String getAfter() {
        return after;
    }","  public void test5()  throws Throwable  {
      ParseException parseException0 = new ParseException(""j"");
      String string0 = parseException0.getAfter();
}"
2216,"    public int getColumn() {
        return column;
    }","  public void test6()  throws Throwable  {
      ParseException parseException0 = new ParseException();
      int int0 = parseException0.getColumn();
}"
2217,"    public ParseException(final Token currentToken, final int[][] expectedTokenSequences, final String[] tokenImage) {
        super(""parse error"");
        final Token tok = currentToken.next;
        after = tok.image;
        line = tok.beginLine;
        column = tok.beginColumn;
    }","  public void test7()  throws Throwable  {
      Token token0 = new Token();
      int[][] intArray0 = new int[8][6];
      String[] stringArray0 = new String[9];
      ParseException parseException0 = null;
      try {
        parseException0 = new ParseException(token0, intArray0, stringArray0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.parser.ParseException"", e);
      }
  }"
2218,"    public Object jjtAccept(final ParserVisitor visitor, final Object data) {
        return visitor.visit(this, data);
    }","  public void test0()  throws Throwable  {
      ASTAmbiguous aSTAmbiguous0 = new ASTAmbiguous(3841);
      // Undeclared exception!
      try { 
        aSTAmbiguous0.jjtAccept((ParserVisitor) null, (Object) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.parser.ASTAmbiguous"", e);
      }
  }"
2219,"    public Object jjtAccept(final ParserVisitor visitor, final Object data) {
        return visitor.visit(this, data);
    }","  public void test1()  throws Throwable  {
      ASTAmbiguous aSTAmbiguous0 = new ASTAmbiguous(0);
      OperatorController operatorController0 = new OperatorController();
      Integer integer0 = ASTIdentifierAccess.parseIdentifier("""");
      // Undeclared exception!
      try { 
        aSTAmbiguous0.jjtAccept(operatorController0, integer0);
        fail(""Expecting exception: UnsupportedOperationException"");
      } catch(UnsupportedOperationException e) {
         //
         // unexpected type of node
         //
         verifyException(""org.apache.commons.jexl3.parser.ParserVisitor"", e);
      }
  }"
2220,"    ASTAmbiguous(final int id) {
        super(id);
    }","  public void test2()  throws Throwable  {
      Parser parser0 = new Parser("""");
      ASTAmbiguous aSTAmbiguous0 = new ASTAmbiguous(parser0, 0);
}"
2221,"    public String getMessage() {
        return (""Lexical error at line ""
                + line + "", column ""
                + column + "".  Encountered: ""
                + (eof ? ""<EOF> ""
                   : (StringParser.escapeString(String.valueOf(current), '""')) + "" ("" + (int) current + ""), "")
                + ""after : "" + StringParser.escapeString(after, '""'));
    }","  public void test0()  throws Throwable  {
      TokenMgrException tokenMgrException0 = new TokenMgrException(true, 2282, 2282, 10, ""_"", 0, 0);
      String string0 = tokenMgrException0.getMessage();
}"
2222,"    public int getLine() {
        return line;
    }","  public void test1()  throws Throwable  {
      TokenMgrException tokenMgrException0 = new TokenMgrException(true, 2282, 2282, 10, ""_"", 0, 0);
      int int0 = tokenMgrException0.getLine();
}"
2223,"    public int getLine() {
        return line;
    }","  public void test2()  throws Throwable  {
      TokenMgrException tokenMgrException0 = new TokenMgrException(true, 0, (-1356), 0, """", 74, 0);
      int int0 = tokenMgrException0.getLine();
}"
2224,"    public int getErrorCode() {
        return errorCode;
    }","  public void test3()  throws Throwable  {
      TokenMgrException tokenMgrException0 = new TokenMgrException((String) null, 1);
      int int0 = tokenMgrException0.getErrorCode();
}"
2225,"    public int getErrorCode() {
        return errorCode;
    }","  public void test4()  throws Throwable  {
      TokenMgrException tokenMgrException0 = new TokenMgrException(false, 0, 0, 0, ""0@<itq'0;LBUEco"", 0, (-2394));
      int int0 = tokenMgrException0.getErrorCode();
}"
2226,"    public int getColumn() {
        return column;
    }","  public void test5()  throws Throwable  {
      TokenMgrException tokenMgrException0 = new TokenMgrException(true, 2282, 2282, 10, ""_"", 0, 0);
      int int0 = tokenMgrException0.getColumn();
}"
2227,"    public int getColumn() {
        return column;
    }","  public void test6()  throws Throwable  {
      TokenMgrException tokenMgrException0 = new TokenMgrException(true, (-1738), (-1), (-1738), ""cY2P E4N$ %#"", (-1), (-1738));
      int int0 = tokenMgrException0.getColumn();
}"
2228,"    public String getAfter() {
        return after;
    }","  public void test7()  throws Throwable  {
      TokenMgrException tokenMgrException0 = new TokenMgrException(""*{_3;>!5"", (-1));
      String string0 = tokenMgrException0.getAfter();
}"
2229,"    public String getAfter() {
        return after;
    }","  public void test8()  throws Throwable  {
      TokenMgrException tokenMgrException0 = new TokenMgrException(true, 0, 0, 0, "";x=B~L//\""f+10"", 0, 0);
      String string0 = tokenMgrException0.getAfter();
}"
2230,"     protected static String addEscapes(final String str) {
        final StringBuilder retval = new StringBuilder();
        char ch;
        for (int i = 0; i < str.length(); i++) {
          switch (str.charAt(i))
          {
             case 0 :
                continue;
             case '\b':
                retval.append(""//b"");
                continue;
             case '\t':
                retval.append(""//t"");
                continue;
             case '\n':
                retval.append(""//n"");
                continue;
             case '\f':
                retval.append(""//f"");
                continue;
             case '\r':
                retval.append(""//r"");
                continue;
             case '\""':
                retval.append(""//\"""");
                continue;
             case '\'':
                retval.append(""//\'"");
                continue;
             case '/':
                retval.append(""////"");
                continue;
             default:
                if ((ch = str.charAt(i)) < 0x20 || ch > 0x7e) {
                   final String s = ""0000"" + Integer.toString(ch, 16);
                   retval.append(""//u"").append(s.substring(s.length() - 4));
                } else {
                   retval.append(ch);
                }
                continue;
          }
        }
        return retval.toString();
     }","  public void test9()  throws Throwable  {
      String string0 = TokenMgrException.addEscapes("""");
}"
2231,"     protected static String addEscapes(final String str) {
        final StringBuilder retval = new StringBuilder();
        char ch;
        for (int i = 0; i < str.length(); i++) {
          switch (str.charAt(i))
          {
             case 0 :
                continue;
             case '\b':
                retval.append(""//b"");
                continue;
             case '\t':
                retval.append(""//t"");
                continue;
             case '\n':
                retval.append(""//n"");
                continue;
             case '\f':
                retval.append(""//f"");
                continue;
             case '\r':
                retval.append(""//r"");
                continue;
             case '\""':
                retval.append(""//\"""");
                continue;
             case '\'':
                retval.append(""//\'"");
                continue;
             case '/':
                retval.append(""////"");
                continue;
             default:
                if ((ch = str.charAt(i)) < 0x20 || ch > 0x7e) {
                   final String s = ""0000"" + Integer.toString(ch, 16);
                   retval.append(""//u"").append(s.substring(s.length() - 4));
                } else {
                   retval.append(ch);
                }
                continue;
          }
        }
        return retval.toString();
     }","  public void test10()  throws Throwable  {
      // Undeclared exception!
      try { 
        TokenMgrException.addEscapes((String) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.parser.TokenMgrException"", e);
      }
  }"
2232,"     protected static String addEscapes(final String str) {
        final StringBuilder retval = new StringBuilder();
        char ch;
        for (int i = 0; i < str.length(); i++) {
          switch (str.charAt(i))
          {
             case 0 :
                continue;
             case '\b':
                retval.append(""//b"");
                continue;
             case '\t':
                retval.append(""//t"");
                continue;
             case '\n':
                retval.append(""//n"");
                continue;
             case '\f':
                retval.append(""//f"");
                continue;
             case '\r':
                retval.append(""//r"");
                continue;
             case '\""':
                retval.append(""//\"""");
                continue;
             case '\'':
                retval.append(""//\'"");
                continue;
             case '/':
                retval.append(""////"");
                continue;
             default:
                if ((ch = str.charAt(i)) < 0x20 || ch > 0x7e) {
                   final String s = ""0000"" + Integer.toString(ch, 16);
                   retval.append(""//u"").append(s.substring(s.length() - 4));
                } else {
                   retval.append(ch);
                }
                continue;
          }
        }
        return retval.toString();
     }","  public void test11()  throws Throwable  {
      String string0 = TokenMgrException.addEscapes(""2j/V.]qch~aFQOm&fgy"");
}"
2233,"     protected static String addEscapes(final String str) {
        final StringBuilder retval = new StringBuilder();
        char ch;
        for (int i = 0; i < str.length(); i++) {
          switch (str.charAt(i))
          {
             case 0 :
                continue;
             case '\b':
                retval.append(""//b"");
                continue;
             case '\t':
                retval.append(""//t"");
                continue;
             case '\n':
                retval.append(""//n"");
                continue;
             case '\f':
                retval.append(""//f"");
                continue;
             case '\r':
                retval.append(""//r"");
                continue;
             case '\""':
                retval.append(""//\"""");
                continue;
             case '\'':
                retval.append(""//\'"");
                continue;
             case '/':
                retval.append(""////"");
                continue;
             default:
                if ((ch = str.charAt(i)) < 0x20 || ch > 0x7e) {
                   final String s = ""0000"" + Integer.toString(ch, 16);
                   retval.append(""//u"").append(s.substring(s.length() - 4));
                } else {
                   retval.append(ch);
                }
                continue;
          }
        }
        return retval.toString();
     }","  public void test12()  throws Throwable  {
      String string0 = TokenMgrException.addEscapes(""FXyY'|k9H)ip#"");
}"
2234,"     protected static String addEscapes(final String str) {
        final StringBuilder retval = new StringBuilder();
        char ch;
        for (int i = 0; i < str.length(); i++) {
          switch (str.charAt(i))
          {
             case 0 :
                continue;
             case '\b':
                retval.append(""//b"");
                continue;
             case '\t':
                retval.append(""//t"");
                continue;
             case '\n':
                retval.append(""//n"");
                continue;
             case '\f':
                retval.append(""//f"");
                continue;
             case '\r':
                retval.append(""//r"");
                continue;
             case '\""':
                retval.append(""//\"""");
                continue;
             case '\'':
                retval.append(""//\'"");
                continue;
             case '/':
                retval.append(""////"");
                continue;
             default:
                if ((ch = str.charAt(i)) < 0x20 || ch > 0x7e) {
                   final String s = ""0000"" + Integer.toString(ch, 16);
                   retval.append(""//u"").append(s.substring(s.length() - 4));
                } else {
                   retval.append(ch);
                }
                continue;
          }
        }
        return retval.toString();
     }","  public void test13()  throws Throwable  {
      String string0 = TokenMgrException.addEscapes(""Lexical error at line 0, column 0.  Encountered: \""\"" (0), after : null"");
}"
2235,"    public String getMessage() {
        return (""Lexical error at line ""
                + line + "", column ""
                + column + "".  Encountered: ""
                + (eof ? ""<EOF> ""
                   : (StringParser.escapeString(String.valueOf(current), '""')) + "" ("" + (int) current + ""), "")
                + ""after : "" + StringParser.escapeString(after, '""'));
    }","  public void test14()  throws Throwable  {
      TokenMgrException tokenMgrException0 = new TokenMgrException("""", (-9));
      String string0 = tokenMgrException0.getMessage();
}"
2236,"    public int getColumn() {
        return column;
    }","  public void test15()  throws Throwable  {
      TokenMgrException tokenMgrException0 = new TokenMgrException(true, 0, 0, 0, """", 0, 0);
      int int0 = tokenMgrException0.getColumn();
}"
2237,"    public String getAfter() {
        return after;
    }","  public void test16()  throws Throwable  {
      TokenMgrException tokenMgrException0 = new TokenMgrException(true, 0, 0, 0, """", 0, 0);
      String string0 = tokenMgrException0.getAfter();
}"
2238,"    public int getErrorCode() {
        return errorCode;
    }","  public void test17()  throws Throwable  {
      TokenMgrException tokenMgrException0 = new TokenMgrException(true, 0, 0, 0, """", 0, 0);
      int int0 = tokenMgrException0.getErrorCode();
}"
2239,"    public int getLine() {
        return line;
    }","  public void test18()  throws Throwable  {
      TokenMgrException tokenMgrException0 = new TokenMgrException("""", (-9));
      int int0 = tokenMgrException0.getLine();
}"
2240,"    protected Object visit(final ASTNotNode node, final Object data) {
        return true;
    }","  public void test0()  throws Throwable  {
      OperatorController operatorController0 = OperatorController.INSTANCE;
      ASTNRNode aSTNRNode0 = new ASTNRNode(0);
      File file0 = MockFile.createTempFile(""a:"", ""a:"");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      Object object0 = operatorController0.visit(aSTNRNode0, mockFileInputStream0);
}"
2241,"    protected Object visit(final ASTNotNode node, final Object data) {
        return true;
    }","  public void test1()  throws Throwable  {
      OperatorController operatorController0 = OperatorController.INSTANCE;
      StringProvider stringProvider0 = new StringProvider(""AX$.edG'{}-D{f"");
      Parser parser0 = new Parser(stringProvider0);
      ASTNENode aSTNENode0 = new ASTNENode(parser0, (-1));
      Object object0 = operatorController0.visit(aSTNENode0, (Object) null);
}"
2242,"    protected Object visit(final ASTNotNode node, final Object data) {
        return true;
    }","  public void test2()  throws Throwable  {
      OperatorController operatorController0 = OperatorController.INSTANCE;
      ASTEQNode aSTEQNode0 = new ASTEQNode(0);
      Object object0 = operatorController0.visit(aSTEQNode0, (Object) null);
}"
2243,"    boolean control(final JexlNode node, Boolean safe) {
        return Boolean.TRUE.equals(node.jjtAccept(this, safe));
    }","  public void test3()  throws Throwable  {
      OperatorController operatorController0 = new OperatorController();
      ASTStringLiteral aSTStringLiteral0 = new ASTStringLiteral(88);
      Boolean boolean0 = new Boolean(false);
      boolean boolean1 = operatorController0.control(aSTStringLiteral0, boolean0);
}"
2244,"    boolean control(final JexlNode node, Boolean safe) {
        return Boolean.TRUE.equals(node.jjtAccept(this, safe));
    }","  public void test4()  throws Throwable  {
      OperatorController operatorController0 = new OperatorController();
      JexlLexicalNode jexlLexicalNode0 = new JexlLexicalNode(0);
      Boolean boolean0 = new Boolean("""");
      // Undeclared exception!
      try { 
        operatorController0.control(jexlLexicalNode0, boolean0);
        fail(""Expecting exception: UnsupportedOperationException"");
      } catch(UnsupportedOperationException e) {
         //
         // JexlLexicalNode : not supported yet.
         //
         verifyException(""org.apache.commons.jexl3.parser.ParserVisitor"", e);
      }
  }"
2245,"    boolean control(final JexlNode node, Boolean safe) {
        return Boolean.TRUE.equals(node.jjtAccept(this, safe));
    }","  public void test5()  throws Throwable  {
      OperatorController operatorController0 = new OperatorController();
      Boolean boolean0 = Boolean.TRUE;
      // Undeclared exception!
      try { 
        operatorController0.control((JexlNode) null, boolean0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.parser.OperatorController"", e);
      }
  }"
2246,"    protected Object visit(final ASTNotNode node, final Object data) {
        return true;
    }","  public void test6()  throws Throwable  {
      OperatorController operatorController0 = OperatorController.INSTANCE;
      ASTEWNode aSTEWNode0 = new ASTEWNode((-195));
      Object object0 = operatorController0.visit(aSTEWNode0, aSTEWNode0);
}"
2247,"    protected Object visit(final ASTNotNode node, final Object data) {
        return true;
    }","  public void test7()  throws Throwable  {
      OperatorController operatorController0 = new OperatorController();
      StringProvider stringProvider0 = new StringProvider("" _>-Oz7~9Rg+imUTop?"");
      Parser parser0 = new Parser(stringProvider0);
      ASTBitwiseComplNode aSTBitwiseComplNode0 = new ASTBitwiseComplNode(parser0, 0);
      Object object0 = operatorController0.visit(aSTBitwiseComplNode0, parser0);
}"
2248,"    protected Object visit(final ASTNotNode node, final Object data) {
        return true;
    }","  public void test8()  throws Throwable  {
      OperatorController operatorController0 = new OperatorController();
      StringProvider stringProvider0 = new StringProvider("" _>-Oz7~9Rg+imUTop?"");
      Parser parser0 = new Parser(stringProvider0);
      ASTBitwiseComplNode aSTBitwiseComplNode0 = new ASTBitwiseComplNode(parser0, 0);
      Object object0 = operatorController0.visit(aSTBitwiseComplNode0, parser0);
      ASTSetDivNode aSTSetDivNode0 = new ASTSetDivNode(0);
      Object object1 = operatorController0.visit(aSTSetDivNode0, object0);
}"
2249,"    protected Object visit(final ASTNotNode node, final Object data) {
        return true;
    }","  public void test9()  throws Throwable  {
      OperatorController operatorController0 = new OperatorController();
      StringProvider stringProvider0 = new StringProvider("" _>-Oz7~9Rg+imUTop?"");
      Parser parser0 = new Parser(stringProvider0);
      ASTLTNode aSTLTNode0 = new ASTLTNode(parser0, 0);
      Integer integer0 = new Integer(0);
      Object object0 = operatorController0.visit(aSTLTNode0, integer0);
}"
2250,"    protected Object visit(final ASTNotNode node, final Object data) {
        return true;
    }","  public void test10()  throws Throwable  {
      OperatorController operatorController0 = new OperatorController();
      ASTAssignment aSTAssignment0 = new ASTAssignment(0);
      ASTSetOrNode aSTSetOrNode0 = new ASTSetOrNode((Parser) null, 0);
      Object object0 = operatorController0.visit(aSTSetOrNode0, aSTAssignment0);
}"
2251,"    protected Object visit(final ASTNotNode node, final Object data) {
        return true;
    }","  public void test11()  throws Throwable  {
      OperatorController operatorController0 = new OperatorController();
      ASTAddNode aSTAddNode0 = new ASTAddNode(1833);
      Object object0 = operatorController0.visit(aSTAddNode0, operatorController0);
}"
2252,"    protected Object visitNode(final JexlNode node, final Object data) {
        return false;
    }","  public void test12()  throws Throwable  {
      OperatorController operatorController0 = new OperatorController();
      ASTAddNode aSTAddNode0 = new ASTAddNode(1833);
      Object object0 = operatorController0.visit(aSTAddNode0, operatorController0);
      ASTBitwiseXorNode aSTBitwiseXorNode0 = new ASTBitwiseXorNode((Parser) null, 1833);
      Object object1 = operatorController0.visitNode(aSTBitwiseXorNode0, object0);
}"
2253,"    protected Object visit(final ASTNotNode node, final Object data) {
        return true;
    }","  public void test13()  throws Throwable  {
      OperatorController operatorController0 = OperatorController.INSTANCE;
      Boolean boolean0 = Boolean.TRUE;
      ASTNENode aSTNENode0 = new ASTNENode((-195));
      Object object0 = operatorController0.visit(aSTNENode0, boolean0);
}"
2254,"    protected Object visit(final ASTNotNode node, final Object data) {
        return true;
    }","  public void test14()  throws Throwable  {
      OperatorController operatorController0 = new OperatorController();
      StringProvider stringProvider0 = new StringProvider("" _>-Oz7~9Rg+imUTop?"");
      Parser parser0 = new Parser(stringProvider0);
      ASTBitwiseComplNode aSTBitwiseComplNode0 = new ASTBitwiseComplNode(parser0, 0);
      Object object0 = operatorController0.visit(aSTBitwiseComplNode0, parser0);
}"
2255,"    protected Object visit(final ASTNotNode node, final Object data) {
        return true;
    }","  public void test15()  throws Throwable  {
      OperatorController operatorController0 = new OperatorController();
      StringProvider stringProvider0 = new StringProvider("" _>-Oz7~9Rg+imUTop?"");
      Parser parser0 = new Parser(stringProvider0);
      ASTBitwiseComplNode aSTBitwiseComplNode0 = new ASTBitwiseComplNode(parser0, 0);
      Object object0 = operatorController0.visit(aSTBitwiseComplNode0, parser0);
      ASTNEWNode aSTNEWNode0 = new ASTNEWNode(0);
      Object object1 = operatorController0.visit(aSTNEWNode0, object0);
}"
2256,"    protected Object visit(final ASTNotNode node, final Object data) {
        return true;
    }","  public void test16()  throws Throwable  {
      OperatorController operatorController0 = OperatorController.INSTANCE;
      ASTNSWNode aSTNSWNode0 = new ASTNSWNode(2128);
      Object object0 = operatorController0.visit(aSTNSWNode0, ""\""lt\"""");
}"
2257,"    protected Object visit(final ASTNotNode node, final Object data) {
        return true;
    }","  public void test17()  throws Throwable  {
      OperatorController operatorController0 = OperatorController.INSTANCE;
      Parser parser0 = new Parser(""\""lt\"""");
      Boolean boolean0 = Boolean.valueOf(""\""lt\"""");
      ASTBitwiseOrNode aSTBitwiseOrNode0 = new ASTBitwiseOrNode(parser0, 2128);
      Object object0 = operatorController0.visit(aSTBitwiseOrNode0, boolean0);
}"
2258,"    protected Object visit(final ASTNotNode node, final Object data) {
        return true;
    }","  public void test18()  throws Throwable  {
      OperatorController operatorController0 = OperatorController.INSTANCE;
      Parser parser0 = new Parser(""\""lt\"""");
      ASTLENode aSTLENode0 = new ASTLENode(parser0, 2128);
      ASTERNode aSTERNode0 = new ASTERNode((Parser) null, 2128);
      Object object0 = operatorController0.visit(aSTERNode0, aSTLENode0);
}"
2259,"    protected Object visit(final ASTNotNode node, final Object data) {
        return true;
    }","  public void test19()  throws Throwable  {
      OperatorController operatorController0 = new OperatorController();
      StringProvider stringProvider0 = new StringProvider("" _>-Oz7~9Rg+imUTop?"");
      Parser parser0 = new Parser(stringProvider0);
      ASTBitwiseComplNode aSTBitwiseComplNode0 = new ASTBitwiseComplNode(parser0, 0);
      Object object0 = operatorController0.visit(aSTBitwiseComplNode0, parser0);
}"
2260,"    protected Object visit(final ASTNotNode node, final Object data) {
        return true;
    }","  public void test20()  throws Throwable  {
      OperatorController operatorController0 = new OperatorController();
      StringProvider stringProvider0 = new StringProvider("" _>-Oz7~9Rg+imUTop?"");
      Parser parser0 = new Parser(stringProvider0);
      ASTBitwiseComplNode aSTBitwiseComplNode0 = new ASTBitwiseComplNode(parser0, 0);
      Object object0 = operatorController0.visit(aSTBitwiseComplNode0, parser0);
      ASTSetSubNode aSTSetSubNode0 = new ASTSetSubNode(0);
      Object object1 = operatorController0.visit(aSTSetSubNode0, object0);
}"
2261,"    protected Object visit(final ASTNotNode node, final Object data) {
        return true;
    }","  public void test21()  throws Throwable  {
      OperatorController operatorController0 = OperatorController.INSTANCE;
      Parser parser0 = new Parser(""\""lt\"""");
      Boolean boolean0 = Boolean.valueOf(""\""lt\"""");
      ASTEQNode aSTEQNode0 = new ASTEQNode(parser0, 2128);
      Object object0 = operatorController0.visit(aSTEQNode0, boolean0);
}"
2262,"    protected Object visit(final ASTNotNode node, final Object data) {
        return true;
    }","  public void test22()  throws Throwable  {
      OperatorController operatorController0 = OperatorController.INSTANCE;
      ASTMulNode aSTMulNode0 = new ASTMulNode(0);
      Object object0 = operatorController0.visit(aSTMulNode0, operatorController0);
}"
2263,"    protected Object visit(final ASTNotNode node, final Object data) {
        return true;
    }","  public void test23()  throws Throwable  {
      OperatorController operatorController0 = new OperatorController();
      ASTDivNode aSTDivNode0 = new ASTDivNode(0);
      Object object0 = operatorController0.visit(aSTDivNode0, "" _>-Oz7~9Rg+imUTop?"");
}"
2264,"    protected Object visit(final ASTNotNode node, final Object data) {
        return true;
    }","  public void test24()  throws Throwable  {
      OperatorController operatorController0 = new OperatorController();
      ASTSWNode aSTSWNode0 = new ASTSWNode((Parser) null, 0);
      Object object0 = operatorController0.visit(aSTSWNode0, aSTSWNode0);
}"
2265,"    protected Object visit(final ASTNotNode node, final Object data) {
        return true;
    }","  public void test25()  throws Throwable  {
      OperatorController operatorController0 = OperatorController.INSTANCE;
      ASTNRNode aSTNRNode0 = new ASTNRNode(0);
      ASTSetXorNode aSTSetXorNode0 = new ASTSetXorNode(0);
      Object object0 = operatorController0.visit(aSTSetXorNode0, aSTNRNode0);
}"
2266,"    protected Object visit(final ASTNotNode node, final Object data) {
        return true;
    }","  public void test26()  throws Throwable  {
      OperatorController operatorController0 = new OperatorController();
      ASTBitwiseXorNode aSTBitwiseXorNode0 = new ASTBitwiseXorNode((Parser) null, 1833);
      ASTSubNode aSTSubNode0 = new ASTSubNode((Parser) null, 1833);
      Object object0 = operatorController0.visit(aSTSubNode0, aSTBitwiseXorNode0);
}"
2267,"    protected Object visit(final ASTNotNode node, final Object data) {
        return true;
    }","  public void test27()  throws Throwable  {
      OperatorController operatorController0 = OperatorController.INSTANCE;
      Parser parser0 = new Parser(""\""lt\"""");
      ASTLENode aSTLENode0 = new ASTLENode(parser0, 2128);
      Object object0 = operatorController0.visit(aSTLENode0, ""\""lt\"""");
}"
2268,"    protected Object visit(final ASTNotNode node, final Object data) {
        return true;
    }","  public void test28()  throws Throwable  {
      OperatorController operatorController0 = new OperatorController();
      ASTGENode aSTGENode0 = new ASTGENode((Parser) null, 0);
      Object object0 = operatorController0.visit(aSTGENode0, aSTGENode0);
}"
2269,"    boolean control(final JexlNode node, Boolean safe) {
        return Boolean.TRUE.equals(node.jjtAccept(this, safe));
    }","  public void test29()  throws Throwable  {
      OperatorController operatorController0 = OperatorController.INSTANCE;
      ASTNRNode aSTNRNode0 = new ASTNRNode(0);
      Boolean boolean0 = Boolean.FALSE;
      boolean boolean1 = operatorController0.control(aSTNRNode0, boolean0);
}"
2270,"    protected Object visit(final ASTNotNode node, final Object data) {
        return true;
    }","  public void test30()  throws Throwable  {
      OperatorController operatorController0 = new OperatorController();
      Object object0 = operatorController0.visit((ASTBitwiseAndNode) null, ""unable to get object property, class: "");
}"
2271,"    protected Object visit(final ASTNotNode node, final Object data) {
        return true;
    }","  public void test31()  throws Throwable  {
      OperatorController operatorController0 = OperatorController.INSTANCE;
      Boolean boolean0 = Boolean.valueOf(""\""lt\"""");
      ASTNotNode aSTNotNode0 = new ASTNotNode(2128);
      Object object0 = operatorController0.visit(aSTNotNode0, boolean0);
}"
2272,"    protected Object visit(final ASTNotNode node, final Object data) {
        return true;
    }","  public void test32()  throws Throwable  {
      OperatorController operatorController0 = new OperatorController();
      StringProvider stringProvider0 = new StringProvider("" _>-Oz7~9Rg+imUTop?"");
      Parser parser0 = new Parser(stringProvider0);
      ASTBitwiseComplNode aSTBitwiseComplNode0 = new ASTBitwiseComplNode(parser0, 0);
      Object object0 = operatorController0.visit(aSTBitwiseComplNode0, parser0);
}"
2273,"    protected Object visit(final ASTNotNode node, final Object data) {
        return true;
    }","  public void test33()  throws Throwable  {
      OperatorController operatorController0 = new OperatorController();
      StringProvider stringProvider0 = new StringProvider("" _>-Oz7~9Rg+imUTop?"");
      Parser parser0 = new Parser(stringProvider0);
      ASTBitwiseComplNode aSTBitwiseComplNode0 = new ASTBitwiseComplNode(parser0, 0);
      Object object0 = operatorController0.visit(aSTBitwiseComplNode0, parser0);
      ASTGTNode aSTGTNode0 = new ASTGTNode(0);
      Object object1 = operatorController0.visit(aSTGTNode0, object0);
}"
2274,"    protected Object visit(final ASTNotNode node, final Object data) {
        return true;
    }","  public void test34()  throws Throwable  {
      OperatorController operatorController0 = OperatorController.INSTANCE;
      ASTSetAddNode aSTSetAddNode0 = new ASTSetAddNode(2128);
      Object object0 = operatorController0.visit(aSTSetAddNode0, (Object) null);
}"
2275,"    protected Object visit(final ASTNotNode node, final Object data) {
        return true;
    }","  public void test35()  throws Throwable  {
      OperatorController operatorController0 = OperatorController.INSTANCE;
      ASTSetModNode aSTSetModNode0 = new ASTSetModNode(2128);
      Object object0 = operatorController0.visit(aSTSetModNode0, aSTSetModNode0);
}"
2276,"    protected Object visit(final ASTNotNode node, final Object data) {
        return true;
    }","  public void test36()  throws Throwable  {
      OperatorController operatorController0 = OperatorController.INSTANCE;
      ASTSetMultNode aSTSetMultNode0 = new ASTSetMultNode(2128);
      Object object0 = operatorController0.visit(aSTSetMultNode0, aSTSetMultNode0);
}"
2277,"    protected Object visit(final ASTNotNode node, final Object data) {
        return true;
    }","  public void test37()  throws Throwable  {
      OperatorController operatorController0 = OperatorController.INSTANCE;
      ASTSetMultNode aSTSetMultNode0 = new ASTSetMultNode(2128);
      Object object0 = operatorController0.visit(aSTSetMultNode0, aSTSetMultNode0);
      ASTModNode aSTModNode0 = new ASTModNode(2128);
      Object object1 = operatorController0.visit(aSTModNode0, object0);
}"
2278,"    protected Object visit(final ASTNotNode node, final Object data) {
        return true;
    }","  public void test38()  throws Throwable  {
      OperatorController operatorController0 = OperatorController.INSTANCE;
      Integer integer0 = new Integer(0);
      Object object0 = operatorController0.visit((ASTSetAndNode) null, integer0);
}"
2279,"    protected Object visit(final ASTNotNode node, final Object data) {
        return true;
    }","  public void test39()  throws Throwable  {
      OperatorController operatorController0 = new OperatorController();
      ASTAddNode aSTAddNode0 = new ASTAddNode(1833);
      Object object0 = operatorController0.visit(aSTAddNode0, operatorController0);
}"
2280,"    protected Object visit(final ASTNotNode node, final Object data) {
        return true;
    }","  public void test40()  throws Throwable  {
      OperatorController operatorController0 = new OperatorController();
      ASTAddNode aSTAddNode0 = new ASTAddNode(1833);
      Object object0 = operatorController0.visit(aSTAddNode0, operatorController0);
      ASTBitwiseXorNode aSTBitwiseXorNode0 = new ASTBitwiseXorNode((Parser) null, 1833);
      Object object1 = operatorController0.visit(aSTBitwiseXorNode0, object0);
}"
2281,"    static Number parseInteger(final String s) {
        final NumberParser np  = new NumberParser();
        np.setNatural(s);
        return np.getLiteralValue();
    }","  public void test0()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberParser.parseInteger(""0~cb"");
        fail(""Expecting exception: NumberFormatException"");
      } catch(NumberFormatException e) {
         //
         // For input string: \""~cb\""
         //
         verifyException(""java.lang.NumberFormatException"", e);
      }
  }"
2282,"    static Number parseDouble(final String s) {
        final NumberParser np  = new NumberParser();
        np.setReal(s);
        return np.getLiteralValue();
    }","  public void test1()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberParser.parseDouble(""jH-e-snN"");
        fail(""Expecting exception: NumberFormatException"");
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.math.BigDecimal"", e);
      }
  }"
2283,"    static Number parseDouble(final String s) {
        final NumberParser np  = new NumberParser();
        np.setReal(s);
        return np.getLiteralValue();
    }","  public void test2()  throws Throwable  {
      Number number0 = NumberParser.parseDouble(""4D"");
}"
2284,"    static Number parseInteger(final String s) {
        final NumberParser np  = new NumberParser();
        np.setNatural(s);
        return np.getLiteralValue();
    }","  public void test3()  throws Throwable  {
      Number number0 = NumberParser.parseInteger(""-6"");
}"
2285,"    static Number parseInteger(final String s) {
        final NumberParser np  = new NumberParser();
        np.setNatural(s);
        return np.getLiteralValue();
    }","  public void test4()  throws Throwable  {
      Number number0 = NumberParser.parseInteger(""0"");
}"
2286,"    static Number parseDouble(final String s) {
        final NumberParser np  = new NumberParser();
        np.setReal(s);
        return np.getLiteralValue();
    }","  public void test5()  throws Throwable  {
      Number number0 = NumberParser.parseDouble(""0"");
}"
2287,"    static Number parseDouble(final String s) {
        final NumberParser np  = new NumberParser();
        np.setReal(s);
        return np.getLiteralValue();
    }","  public void test6()  throws Throwable  {
      Number number0 = NumberParser.parseDouble(""-6"");
}"
2288,"    boolean isInteger() {
        return Integer.class.equals(clazz);
    }","  public void test7()  throws Throwable  {
      NumberParser numberParser0 = new NumberParser();
      numberParser0.setNatural(""0"");
      boolean boolean0 = numberParser0.isInteger();
}"
2289,"    Number getLiteralValue() {
        return literal;
    }","  public void test8()  throws Throwable  {
      NumberParser numberParser0 = new NumberParser();
      Number number0 = numberParser0.getLiteralValue();
}"
2290,"    Number getLiteralValue() {
        return literal;
    }","  public void test9()  throws Throwable  {
      NumberParser numberParser0 = new NumberParser();
      numberParser0.setNatural(""0"");
      Number number0 = numberParser0.getLiteralValue();
}"
2291,"    Number getLiteralValue() {
        return literal;
    }","  public void test10()  throws Throwable  {
      NumberParser numberParser0 = new NumberParser();
      numberParser0.setReal(""6"");
      Number number0 = numberParser0.getLiteralValue();
}"
2292,"    public String toString() {
        if (literal == null || clazz == null || Double.isNaN(literal.doubleValue())) {
            return ""NaN"";
        }
        if (BigDecimal.class.equals(clazz)) {
            synchronized (BIGDF) {
                return BIGDF.format(literal);
            }
        }
        final StringBuilder strb = new StringBuilder(literal.toString());
        if (Float.class.equals(clazz)) {
            strb.append('f');
        } else if (Double.class.equals(clazz)) {
            strb.append('d');
        } else if (BigInteger.class.equals(clazz)) {
            strb.append('h');
        } else if (Long.class.equals(clazz)) {
            strb.append('l');
        }
        return strb.toString();
    }","  public void test11()  throws Throwable  {
      NumberParser numberParser0 = new NumberParser();
      numberParser0.setNatural(""6"");
      Class<? extends Number> class0 = numberParser0.getLiteralClass();
}"
2293,"    void setReal(final String s) {
        Number result;
        Class<? extends Number> rclass;
        if (""#NaN"".equals(s) || ""NaN"".equals(s)) {
            result = Double.NaN;
            rclass = Double.class;
        } else {
            final int last = s.length() - 1;
            switch (s.charAt(last)) {
                case 'b':
                case 'B': {
                    rclass = BigDecimal.class;
                    result = new BigDecimal(s.substring(0, last));
                    break;
                }
                case 'f':
                case 'F': {
                    rclass = Float.class;
                    result = Float.valueOf(s.substring(0, last));
                    break;
                }
                case 'd':
                case 'D':
                    rclass = Double.class;
                    result = Double.valueOf(s.substring(0, last));
                    break;
                default: {
                    rclass = Double.class;
                    try {
                        result = Double.valueOf(s);
                    } catch (final NumberFormatException take3) {
                        result = new BigDecimal(s);
                    }
                    break;
                }
            }
        }
        literal = result;
        clazz = rclass;
    }","  public void test12()  throws Throwable  {
      NumberParser numberParser0 = new NumberParser();
      // Undeclared exception!
      try { 
        numberParser0.setReal("""");
        fail(""Expecting exception: StringIndexOutOfBoundsException"");
      } catch(StringIndexOutOfBoundsException e) {
      }
  }"
2294,"    void setReal(final String s) {
        Number result;
        Class<? extends Number> rclass;
        if (""#NaN"".equals(s) || ""NaN"".equals(s)) {
            result = Double.NaN;
            rclass = Double.class;
        } else {
            final int last = s.length() - 1;
            switch (s.charAt(last)) {
                case 'b':
                case 'B': {
                    rclass = BigDecimal.class;
                    result = new BigDecimal(s.substring(0, last));
                    break;
                }
                case 'f':
                case 'F': {
                    rclass = Float.class;
                    result = Float.valueOf(s.substring(0, last));
                    break;
                }
                case 'd':
                case 'D':
                    rclass = Double.class;
                    result = Double.valueOf(s.substring(0, last));
                    break;
                default: {
                    rclass = Double.class;
                    try {
                        result = Double.valueOf(s);
                    } catch (final NumberFormatException take3) {
                        result = new BigDecimal(s);
                    }
                    break;
                }
            }
        }
        literal = result;
        clazz = rclass;
    }","  public void test13()  throws Throwable  {
      NumberParser numberParser0 = new NumberParser();
      // Undeclared exception!
      try { 
        numberParser0.setReal((String) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.parser.NumberParser"", e);
      }
  }"
2295,"    void setNatural(String s) {
        Number result;
        Class<? extends Number> rclass;
        // determine the base
        final int base;
        if (s.charAt(0) == '0') {
            if ((s.length() > 1 && (s.charAt(1) == 'x' || s.charAt(1) == 'X'))) {
                base = 16;
                s = s.substring(2); // Trim the 0x off the front
            } else {
                base = 8;
            }
        } else {
            base = 10;
        }
        final int last = s.length() - 1;
        switch (s.charAt(last)) {
            case 'l':
            case 'L': {
                rclass = Long.class;
                result = Long.valueOf(s.substring(0, last), base);
                break;
            }
            case 'h':
            case 'H': {
                rclass = BigInteger.class;
                result = new BigInteger(s.substring(0, last), base);
                break;
            }
            default: {
                rclass = Integer.class;
                try {
                    result = Integer.valueOf(s, base);
                } catch (final NumberFormatException take2) {
                    try {
                        result = Long.valueOf(s, base);
                    } catch (final NumberFormatException take3) {
                        result = new BigInteger(s, base);
                    }
                }
            }
        }
        literal = result;
        clazz = rclass;
    }","  public void test14()  throws Throwable  {
      NumberParser numberParser0 = new NumberParser();
      // Undeclared exception!
      try { 
        numberParser0.setNatural("""");
        fail(""Expecting exception: StringIndexOutOfBoundsException"");
      } catch(StringIndexOutOfBoundsException e) {
      }
  }"
2296,"    void setNatural(String s) {
        Number result;
        Class<? extends Number> rclass;
        // determine the base
        final int base;
        if (s.charAt(0) == '0') {
            if ((s.length() > 1 && (s.charAt(1) == 'x' || s.charAt(1) == 'X'))) {
                base = 16;
                s = s.substring(2); // Trim the 0x off the front
            } else {
                base = 8;
            }
        } else {
            base = 10;
        }
        final int last = s.length() - 1;
        switch (s.charAt(last)) {
            case 'l':
            case 'L': {
                rclass = Long.class;
                result = Long.valueOf(s.substring(0, last), base);
                break;
            }
            case 'h':
            case 'H': {
                rclass = BigInteger.class;
                result = new BigInteger(s.substring(0, last), base);
                break;
            }
            default: {
                rclass = Integer.class;
                try {
                    result = Integer.valueOf(s, base);
                } catch (final NumberFormatException take2) {
                    try {
                        result = Long.valueOf(s, base);
                    } catch (final NumberFormatException take3) {
                        result = new BigInteger(s, base);
                    }
                }
            }
        }
        literal = result;
        clazz = rclass;
    }","  public void test15()  throws Throwable  {
      NumberParser numberParser0 = new NumberParser();
      // Undeclared exception!
      try { 
        numberParser0.setNatural(""Iw+o"");
        fail(""Expecting exception: NumberFormatException"");
      } catch(NumberFormatException e) {
         //
         // Illegal embedded sign character
         //
         verifyException(""java.math.BigInteger"", e);
      }
  }"
2297,"    void setNatural(String s) {
        Number result;
        Class<? extends Number> rclass;
        // determine the base
        final int base;
        if (s.charAt(0) == '0') {
            if ((s.length() > 1 && (s.charAt(1) == 'x' || s.charAt(1) == 'X'))) {
                base = 16;
                s = s.substring(2); // Trim the 0x off the front
            } else {
                base = 8;
            }
        } else {
            base = 10;
        }
        final int last = s.length() - 1;
        switch (s.charAt(last)) {
            case 'l':
            case 'L': {
                rclass = Long.class;
                result = Long.valueOf(s.substring(0, last), base);
                break;
            }
            case 'h':
            case 'H': {
                rclass = BigInteger.class;
                result = new BigInteger(s.substring(0, last), base);
                break;
            }
            default: {
                rclass = Integer.class;
                try {
                    result = Integer.valueOf(s, base);
                } catch (final NumberFormatException take2) {
                    try {
                        result = Long.valueOf(s, base);
                    } catch (final NumberFormatException take3) {
                        result = new BigInteger(s, base);
                    }
                }
            }
        }
        literal = result;
        clazz = rclass;
    }","  public void test16()  throws Throwable  {
      NumberParser numberParser0 = new NumberParser();
      // Undeclared exception!
      try { 
        numberParser0.setNatural((String) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.parser.NumberParser"", e);
      }
  }"
2298,"    static Number parseInteger(final String s) {
        final NumberParser np  = new NumberParser();
        np.setNatural(s);
        return np.getLiteralValue();
    }","  public void test17()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberParser.parseInteger("""");
        fail(""Expecting exception: StringIndexOutOfBoundsException"");
      } catch(StringIndexOutOfBoundsException e) {
      }
  }"
2299,"    static Number parseInteger(final String s) {
        final NumberParser np  = new NumberParser();
        np.setNatural(s);
        return np.getLiteralValue();
    }","  public void test18()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberParser.parseInteger((String) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.parser.NumberParser"", e);
      }
  }"
2300,"    static Number parseDouble(final String s) {
        final NumberParser np  = new NumberParser();
        np.setReal(s);
        return np.getLiteralValue();
    }","  public void test19()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberParser.parseDouble((String) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.parser.NumberParser"", e);
      }
  }"
2301,"    void setReal(final String s) {
        Number result;
        Class<? extends Number> rclass;
        if (""#NaN"".equals(s) || ""NaN"".equals(s)) {
            result = Double.NaN;
            rclass = Double.class;
        } else {
            final int last = s.length() - 1;
            switch (s.charAt(last)) {
                case 'b':
                case 'B': {
                    rclass = BigDecimal.class;
                    result = new BigDecimal(s.substring(0, last));
                    break;
                }
                case 'f':
                case 'F': {
                    rclass = Float.class;
                    result = Float.valueOf(s.substring(0, last));
                    break;
                }
                case 'd':
                case 'D':
                    rclass = Double.class;
                    result = Double.valueOf(s.substring(0, last));
                    break;
                default: {
                    rclass = Double.class;
                    try {
                        result = Double.valueOf(s);
                    } catch (final NumberFormatException take3) {
                        result = new BigDecimal(s);
                    }
                    break;
                }
            }
        }
        literal = result;
        clazz = rclass;
    }","  public void test20()  throws Throwable  {
      NumberParser numberParser0 = new NumberParser();
      // Undeclared exception!
      try { 
        numberParser0.setReal(""f"");
        fail(""Expecting exception: NumberFormatException"");
      } catch(NumberFormatException e) {
      }
  }"
2302,"    void setReal(final String s) {
        Number result;
        Class<? extends Number> rclass;
        if (""#NaN"".equals(s) || ""NaN"".equals(s)) {
            result = Double.NaN;
            rclass = Double.class;
        } else {
            final int last = s.length() - 1;
            switch (s.charAt(last)) {
                case 'b':
                case 'B': {
                    rclass = BigDecimal.class;
                    result = new BigDecimal(s.substring(0, last));
                    break;
                }
                case 'f':
                case 'F': {
                    rclass = Float.class;
                    result = Float.valueOf(s.substring(0, last));
                    break;
                }
                case 'd':
                case 'D':
                    rclass = Double.class;
                    result = Double.valueOf(s.substring(0, last));
                    break;
                default: {
                    rclass = Double.class;
                    try {
                        result = Double.valueOf(s);
                    } catch (final NumberFormatException take3) {
                        result = new BigDecimal(s);
                    }
                    break;
                }
            }
        }
        literal = result;
        clazz = rclass;
    }","  public void test21()  throws Throwable  {
      NumberParser numberParser0 = new NumberParser();
      // Undeclared exception!
      try { 
        numberParser0.setReal(""java.lang.Double@0000000002d"");
        fail(""Expecting exception: NumberFormatException"");
      } catch(NumberFormatException e) {
      }
  }"
2303,"    static Number parseDouble(final String s) {
        final NumberParser np  = new NumberParser();
        np.setReal(s);
        return np.getLiteralValue();
    }","  public void test22()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberParser.parseDouble(""MeF"");
        fail(""Expecting exception: NumberFormatException"");
      } catch(NumberFormatException e) {
      }
  }"
2304,"    static Number parseDouble(final String s) {
        final NumberParser np  = new NumberParser();
        np.setReal(s);
        return np.getLiteralValue();
    }","  public void test23()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberParser.parseDouble(""!qQB"");
        fail(""Expecting exception: NumberFormatException"");
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.math.BigDecimal"", e);
      }
  }"
2305,"    void setReal(final String s) {
        Number result;
        Class<? extends Number> rclass;
        if (""#NaN"".equals(s) || ""NaN"".equals(s)) {
            result = Double.NaN;
            rclass = Double.class;
        } else {
            final int last = s.length() - 1;
            switch (s.charAt(last)) {
                case 'b':
                case 'B': {
                    rclass = BigDecimal.class;
                    result = new BigDecimal(s.substring(0, last));
                    break;
                }
                case 'f':
                case 'F': {
                    rclass = Float.class;
                    result = Float.valueOf(s.substring(0, last));
                    break;
                }
                case 'd':
                case 'D':
                    rclass = Double.class;
                    result = Double.valueOf(s.substring(0, last));
                    break;
                default: {
                    rclass = Double.class;
                    try {
                        result = Double.valueOf(s);
                    } catch (final NumberFormatException take3) {
                        result = new BigDecimal(s);
                    }
                    break;
                }
            }
        }
        literal = result;
        clazz = rclass;
    }","  public void test24()  throws Throwable  {
      NumberParser numberParser0 = new NumberParser();
      numberParser0.setReal(""NaN"");
  }"
2306,"    static Number parseInteger(final String s) {
        final NumberParser np  = new NumberParser();
        np.setNatural(s);
        return np.getLiteralValue();
    }","  public void test25()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberParser.parseInteger(""+3@1T{ruKxYc8Bl"");
        fail(""Expecting exception: NumberFormatException"");
      } catch(NumberFormatException e) {
         //
         // For input string: \""+3@1T{ruKxYc8B\""
         //
         verifyException(""java.lang.NumberFormatException"", e);
      }
  }"
2307,"    static Number parseInteger(final String s) {
        final NumberParser np  = new NumberParser();
        np.setNatural(s);
        return np.getLiteralValue();
    }","  public void test26()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberParser.parseInteger(""Gh"");
        fail(""Expecting exception: NumberFormatException"");
      } catch(NumberFormatException e) {
         //
         // For input string: \""G\""
         //
         verifyException(""java.lang.NumberFormatException"", e);
      }
  }"
2308,"    static Number parseInteger(final String s) {
        final NumberParser np  = new NumberParser();
        np.setNatural(s);
        return np.getLiteralValue();
    }","  public void test27()  throws Throwable  {
      Number number0 = NumberParser.parseInteger(""0X88"");
}"
2309,"    static Number parseInteger(final String s) {
        final NumberParser np  = new NumberParser();
        np.setNatural(s);
        return np.getLiteralValue();
    }","  public void test28()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberParser.parseInteger(""0.0b"");
        fail(""Expecting exception: NumberFormatException"");
      } catch(NumberFormatException e) {
         //
         // For input string: \"".0b\""
         //
         verifyException(""java.lang.NumberFormatException"", e);
      }
  }"
2310,"    public String toString() {
        if (literal == null || clazz == null || Double.isNaN(literal.doubleValue())) {
            return ""NaN"";
        }
        if (BigDecimal.class.equals(clazz)) {
            synchronized (BIGDF) {
                return BIGDF.format(literal);
            }
        }
        final StringBuilder strb = new StringBuilder(literal.toString());
        if (Float.class.equals(clazz)) {
            strb.append('f');
        } else if (Double.class.equals(clazz)) {
            strb.append('d');
        } else if (BigInteger.class.equals(clazz)) {
            strb.append('h');
        } else if (Long.class.equals(clazz)) {
            strb.append('l');
        }
        return strb.toString();
    }","  public void test29()  throws Throwable  {
      NumberParser numberParser0 = new NumberParser();
      numberParser0.setNatural(""5L"");
      String string0 = numberParser0.toString();
}"
2311,"    public String toString() {
        if (literal == null || clazz == null || Double.isNaN(literal.doubleValue())) {
            return ""NaN"";
        }
        if (BigDecimal.class.equals(clazz)) {
            synchronized (BIGDF) {
                return BIGDF.format(literal);
            }
        }
        final StringBuilder strb = new StringBuilder(literal.toString());
        if (Float.class.equals(clazz)) {
            strb.append('f');
        } else if (Double.class.equals(clazz)) {
            strb.append('d');
        } else if (BigInteger.class.equals(clazz)) {
            strb.append('h');
        } else if (Long.class.equals(clazz)) {
            strb.append('l');
        }
        return strb.toString();
    }","  public void test30()  throws Throwable  {
      NumberParser numberParser0 = new NumberParser();
      numberParser0.setNatural(""1H"");
      String string0 = numberParser0.toString();
}"
2312,"    public String toString() {
        if (literal == null || clazz == null || Double.isNaN(literal.doubleValue())) {
            return ""NaN"";
        }
        if (BigDecimal.class.equals(clazz)) {
            synchronized (BIGDF) {
                return BIGDF.format(literal);
            }
        }
        final StringBuilder strb = new StringBuilder(literal.toString());
        if (Float.class.equals(clazz)) {
            strb.append('f');
        } else if (Double.class.equals(clazz)) {
            strb.append('d');
        } else if (BigInteger.class.equals(clazz)) {
            strb.append('h');
        } else if (Long.class.equals(clazz)) {
            strb.append('l');
        }
        return strb.toString();
    }","  public void test31()  throws Throwable  {
      NumberParser numberParser0 = new NumberParser();
      numberParser0.setReal(""6"");
      String string0 = numberParser0.toString();
}"
2313,"    public String toString() {
        if (literal == null || clazz == null || Double.isNaN(literal.doubleValue())) {
            return ""NaN"";
        }
        if (BigDecimal.class.equals(clazz)) {
            synchronized (BIGDF) {
                return BIGDF.format(literal);
            }
        }
        final StringBuilder strb = new StringBuilder(literal.toString());
        if (Float.class.equals(clazz)) {
            strb.append('f');
        } else if (Double.class.equals(clazz)) {
            strb.append('d');
        } else if (BigInteger.class.equals(clazz)) {
            strb.append('h');
        } else if (Long.class.equals(clazz)) {
            strb.append('l');
        }
        return strb.toString();
    }","  public void test32()  throws Throwable  {
      NumberParser numberParser0 = new NumberParser();
      numberParser0.setReal(""0.0b"");
      String string0 = numberParser0.toString();
}"
2314,"    public String toString() {
        if (literal == null || clazz == null || Double.isNaN(literal.doubleValue())) {
            return ""NaN"";
        }
        if (BigDecimal.class.equals(clazz)) {
            synchronized (BIGDF) {
                return BIGDF.format(literal);
            }
        }
        final StringBuilder strb = new StringBuilder(literal.toString());
        if (Float.class.equals(clazz)) {
            strb.append('f');
        } else if (Double.class.equals(clazz)) {
            strb.append('d');
        } else if (BigInteger.class.equals(clazz)) {
            strb.append('h');
        } else if (Long.class.equals(clazz)) {
            strb.append('l');
        }
        return strb.toString();
    }","  public void test33()  throws Throwable  {
      NumberParser numberParser0 = new NumberParser();
      numberParser0.setNatural(""0"");
      String string0 = numberParser0.toString();
}"
2315,"    public String toString() {
        if (literal == null || clazz == null || Double.isNaN(literal.doubleValue())) {
            return ""NaN"";
        }
        if (BigDecimal.class.equals(clazz)) {
            synchronized (BIGDF) {
                return BIGDF.format(literal);
            }
        }
        final StringBuilder strb = new StringBuilder(literal.toString());
        if (Float.class.equals(clazz)) {
            strb.append('f');
        } else if (Double.class.equals(clazz)) {
            strb.append('d');
        } else if (BigInteger.class.equals(clazz)) {
            strb.append('h');
        } else if (Long.class.equals(clazz)) {
            strb.append('l');
        }
        return strb.toString();
    }","  public void test34()  throws Throwable  {
      NumberParser numberParser0 = new NumberParser();
      numberParser0.setReal(""#NaN"");
      String string0 = numberParser0.toString();
}"
2316,"    public String toString() {
        if (literal == null || clazz == null || Double.isNaN(literal.doubleValue())) {
            return ""NaN"";
        }
        if (BigDecimal.class.equals(clazz)) {
            synchronized (BIGDF) {
                return BIGDF.format(literal);
            }
        }
        final StringBuilder strb = new StringBuilder(literal.toString());
        if (Float.class.equals(clazz)) {
            strb.append('f');
        } else if (Double.class.equals(clazz)) {
            strb.append('d');
        } else if (BigInteger.class.equals(clazz)) {
            strb.append('h');
        } else if (Long.class.equals(clazz)) {
            strb.append('l');
        }
        return strb.toString();
    }","  public void test35()  throws Throwable  {
      NumberParser numberParser0 = new NumberParser();
      String string0 = numberParser0.toString();
}"
2317,"    static Number parseInteger(final String s) {
        final NumberParser np  = new NumberParser();
        np.setNatural(s);
        return np.getLiteralValue();
    }","  public void test36()  throws Throwable  {
      Number number0 = NumberParser.parseInteger(""0x0b"");
}"
2318,"    static Number parseDouble(final String s) {
        final NumberParser np  = new NumberParser();
        np.setReal(s);
        return np.getLiteralValue();
    }","  public void test37()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberParser.parseDouble("""");
        fail(""Expecting exception: StringIndexOutOfBoundsException"");
      } catch(StringIndexOutOfBoundsException e) {
      }
  }"
2319,"    boolean isInteger() {
        return Integer.class.equals(clazz);
    }","  public void test38()  throws Throwable  {
      NumberParser numberParser0 = new NumberParser();
      boolean boolean0 = numberParser0.isInteger();
}"
2320,"    Class<? extends Number> getLiteralClass() {
        return clazz;
    }","  public void test39()  throws Throwable  {
      NumberParser numberParser0 = new NumberParser();
      Class<? extends Number> class0 = numberParser0.getLiteralClass();
}"
2321,"    public boolean isRedefined() {
        return isSet(REDEFINED, flags);
    }","  public void test0()  throws Throwable  {
      ASTNamespaceIdentifier aSTNamespaceIdentifier0 = new ASTNamespaceIdentifier((-930));
      aSTNamespaceIdentifier0.setCaptured(false);
}"
2322,"    public int getSymbol() {
        return symbol;
    }","  public void test1()  throws Throwable  {
      ASTNamespaceIdentifier aSTNamespaceIdentifier0 = new ASTNamespaceIdentifier((-930));
      aSTNamespaceIdentifier0.setCaptured(false);
}"
2323,"    public boolean isShaded() {
        return isSet(SHADED, flags);
    }","  public void test2()  throws Throwable  {
      ASTNamespaceIdentifier aSTNamespaceIdentifier0 = new ASTNamespaceIdentifier((-930));
      aSTNamespaceIdentifier0.setCaptured(false);
}"
2324,"    public boolean isCaptured() {
        return isSet(CAPTURED, flags);
    }","  public void test3()  throws Throwable  {
      ASTNamespaceIdentifier aSTNamespaceIdentifier0 = new ASTNamespaceIdentifier((-930));
      aSTNamespaceIdentifier0.setCaptured(false);
}"
2325,"    public boolean isShaded() {
        return isSet(SHADED, flags);
    }","  public void test4()  throws Throwable  {
      ASTIdentifier aSTIdentifier0 = new ASTIdentifier(0);
      aSTIdentifier0.setCaptured(true);
      boolean boolean0 = aSTIdentifier0.isShaded();
}"
2326,"    public boolean isCaptured() {
        return isSet(CAPTURED, flags);
    }","  public void test5()  throws Throwable  {
      ASTIdentifier aSTIdentifier0 = new ASTIdentifier(0);
      aSTIdentifier0.setCaptured(true);
      boolean boolean0 = aSTIdentifier0.isShaded();
}"
2327,"    public int getSymbol() {
        return symbol;
    }","  public void test6()  throws Throwable  {
      ASTNamespaceIdentifier aSTNamespaceIdentifier0 = new ASTNamespaceIdentifier(58);
      aSTNamespaceIdentifier0.setShaded(false);
}"
2328,"    public boolean isRedefined() {
        return isSet(REDEFINED, flags);
    }","  public void test7()  throws Throwable  {
      ASTNamespaceIdentifier aSTNamespaceIdentifier0 = new ASTNamespaceIdentifier(58);
      aSTNamespaceIdentifier0.setShaded(false);
}"
2329,"    public boolean isShaded() {
        return isSet(SHADED, flags);
    }","  public void test8()  throws Throwable  {
      ASTNamespaceIdentifier aSTNamespaceIdentifier0 = new ASTNamespaceIdentifier(58);
      aSTNamespaceIdentifier0.setShaded(false);
}"
2330,"    public boolean isRedefined() {
        return isSet(REDEFINED, flags);
    }","  public void test9()  throws Throwable  {
      ASTNamespaceIdentifier aSTNamespaceIdentifier0 = new ASTNamespaceIdentifier(58);
      aSTNamespaceIdentifier0.setRedefined(true);
}"
2331,"    public boolean isRedefined() {
        return isSet(REDEFINED, flags);
    }","  public void test10()  throws Throwable  {
      ASTNamespaceIdentifier aSTNamespaceIdentifier0 = new ASTNamespaceIdentifier(58);
      aSTNamespaceIdentifier0.setRedefined(true);
      aSTNamespaceIdentifier0.setRedefined(false);
}"
2332,"    public boolean isShaded() {
        return isSet(SHADED, flags);
    }","  public void test11()  throws Throwable  {
      ASTVar aSTVar0 = new ASTVar(0);
      aSTVar0.setShaded(true);
      aSTVar0.setShaded(true);
}"
2333,"    public boolean isRedefined() {
        return isSet(REDEFINED, flags);
    }","  public void test12()  throws Throwable  {
      ASTNamespaceIdentifier aSTNamespaceIdentifier0 = new ASTNamespaceIdentifier((-930));
      aSTNamespaceIdentifier0.setSymbol(""\""return\"""");
}"
2334,"    public int getSymbol() {
        return symbol;
    }","  public void test13()  throws Throwable  {
      ASTNamespaceIdentifier aSTNamespaceIdentifier0 = new ASTNamespaceIdentifier((-930));
      aSTNamespaceIdentifier0.setSymbol(""\""return\"""");
}"
2335,"    public int getSymbol() {
        return symbol;
    }","  public void test14()  throws Throwable  {
      ASTNamespaceIdentifier aSTNamespaceIdentifier0 = new ASTNamespaceIdentifier(58);
      aSTNamespaceIdentifier0.setNamespace(""Oj"", ""}iKCE?Gu)vGOiOw;xo"");
      aSTNamespaceIdentifier0.toString();
}"
2336,"    public boolean isRedefined() {
        return isSet(REDEFINED, flags);
    }","  public void test15()  throws Throwable  {
      ASTNamespaceIdentifier aSTNamespaceIdentifier0 = new ASTNamespaceIdentifier(58);
      aSTNamespaceIdentifier0.setNamespace(""Oj"", ""}iKCE?Gu)vGOiOw;xo"");
      aSTNamespaceIdentifier0.toString();
}"
2337,"    public int getSymbol() {
        return symbol;
    }","  public void test16()  throws Throwable  {
      ASTNamespaceIdentifier aSTNamespaceIdentifier0 = new ASTNamespaceIdentifier(58);
      aSTNamespaceIdentifier0.setSymbol(1153, """");
      aSTNamespaceIdentifier0.toString();
}"
2338,"    public boolean isRedefined() {
        return isSet(REDEFINED, flags);
    }","  public void test17()  throws Throwable  {
      ASTIdentifier aSTIdentifier0 = new ASTIdentifier((Parser) null, 9);
      JexlFeatures jexlFeatures0 = JexlEngine.DEFAULT_FEATURES;
      FeatureController featureController0 = new FeatureController(jexlFeatures0);
      aSTIdentifier0.jjtAccept(featureController0, (Object) null);
}"
2339,"    public int getSymbol() {
        return symbol;
    }","  public void test18()  throws Throwable  {
      ASTIdentifier aSTIdentifier0 = new ASTIdentifier((Parser) null, 9);
      JexlFeatures jexlFeatures0 = JexlEngine.DEFAULT_FEATURES;
      FeatureController featureController0 = new FeatureController(jexlFeatures0);
      aSTIdentifier0.jjtAccept(featureController0, (Object) null);
}"
2340,"    public boolean isRedefined() {
        return isSet(REDEFINED, flags);
    }","  public void test19()  throws Throwable  {
      ASTNamespaceIdentifier aSTNamespaceIdentifier0 = new ASTNamespaceIdentifier((-930));
}"
2341,"    public boolean isRedefined() {
        return isSet(REDEFINED, flags);
    }","  public void test20()  throws Throwable  {
      ASTNamespaceIdentifier aSTNamespaceIdentifier0 = new ASTNamespaceIdentifier((-930));
      aSTNamespaceIdentifier0.setRedefined(true);
      boolean boolean0 = aSTNamespaceIdentifier0.isRedefined();
}"
2342,"    public int getSymbol() {
        return symbol;
    }","  public void test21()  throws Throwable  {
      Parser parser0 = new Parser("""");
      ASTVar aSTVar0 = new ASTVar(parser0, 0);
}"
2343,"    public int getSymbol() {
        return symbol;
    }","  public void test22()  throws Throwable  {
      Parser parser0 = new Parser("""");
      ASTVar aSTVar0 = new ASTVar(parser0, 0);
      aSTVar0.setSymbol(0, """");
      int int0 = aSTVar0.getSymbol();
}"
2344,"    public int getSymbol() {
        return symbol;
    }","  public void test23()  throws Throwable  {
      StringProvider stringProvider0 = new StringProvider("""");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringProvider0, 1472, 1472);
      ParserTokenManager parserTokenManager0 = new ParserTokenManager(simpleCharStream0);
      Parser parser0 = new Parser(parserTokenManager0);
      ASTVar aSTVar0 = new ASTVar(parser0, 1472);
      aSTVar0.setSymbol(35, """");
      int int0 = aSTVar0.getSymbol();
}"
2345,"    public boolean isRedefined() {
        return isSet(REDEFINED, flags);
    }","  public void test24()  throws Throwable  {
      ASTNamespaceIdentifier aSTNamespaceIdentifier0 = new ASTNamespaceIdentifier(58);
      aSTNamespaceIdentifier0.setNamespace(""}iKCE?Gu)vGOiOw;xo"", """");
      aSTNamespaceIdentifier0.getNamespace();
}"
2346,"    public int getSymbol() {
        return symbol;
    }","  public void test25()  throws Throwable  {
      ASTNamespaceIdentifier aSTNamespaceIdentifier0 = new ASTNamespaceIdentifier(58);
      aSTNamespaceIdentifier0.setNamespace(""}iKCE?Gu)vGOiOw;xo"", """");
      aSTNamespaceIdentifier0.getNamespace();
}"
2347,"    public boolean isRedefined() {
        return isSet(REDEFINED, flags);
    }","  public void test26()  throws Throwable  {
      ASTNamespaceIdentifier aSTNamespaceIdentifier0 = new ASTNamespaceIdentifier((-930));
      aSTNamespaceIdentifier0.setNamespace("""", ""IUr[Q2oA"");
      aSTNamespaceIdentifier0.getNamespace();
}"
2348,"    public int getSymbol() {
        return symbol;
    }","  public void test27()  throws Throwable  {
      ASTNamespaceIdentifier aSTNamespaceIdentifier0 = new ASTNamespaceIdentifier((-930));
      aSTNamespaceIdentifier0.setNamespace("""", ""IUr[Q2oA"");
      aSTNamespaceIdentifier0.getNamespace();
}"
2349,"    public int getSymbol() {
        return symbol;
    }","  public void test28()  throws Throwable  {
      ASTNamespaceIdentifier aSTNamespaceIdentifier0 = new ASTNamespaceIdentifier(58);
      aSTNamespaceIdentifier0.setNamespace(""Oj"", ""}iKCE?Gu)vGOiOw;xo"");
      aSTNamespaceIdentifier0.getName();
}"
2350,"    public boolean isRedefined() {
        return isSet(REDEFINED, flags);
    }","  public void test29()  throws Throwable  {
      ASTNamespaceIdentifier aSTNamespaceIdentifier0 = new ASTNamespaceIdentifier(58);
      aSTNamespaceIdentifier0.setNamespace(""Oj"", ""}iKCE?Gu)vGOiOw;xo"");
      aSTNamespaceIdentifier0.getName();
}"
2351,"    public int getSymbol() {
        return symbol;
    }","  public void test30()  throws Throwable  {
      StringProvider stringProvider0 = new StringProvider("""");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringProvider0, 1472, 1472);
      ParserTokenManager parserTokenManager0 = new ParserTokenManager(simpleCharStream0);
      Parser parser0 = new Parser(parserTokenManager0);
      ASTVar aSTVar0 = new ASTVar(parser0, 1472);
      aSTVar0.setSymbol(35, """");
      aSTVar0.getName();
}"
2352,"    void setSymbol(final String identifier) {
        if (identifier.charAt(0) == '#') {
            symbol = Integer.parseInt(identifier.substring(1));
        }
        name = identifier;
    }","  public void test31()  throws Throwable  {
      ASTIdentifier aSTIdentifier0 = new ASTIdentifier(123);
      // Undeclared exception!
      try { 
        aSTIdentifier0.setSymbol("""");
        fail(""Expecting exception: StringIndexOutOfBoundsException"");
      } catch(StringIndexOutOfBoundsException e) {
      }
  }"
2353,"    void setSymbol(final String identifier) {
        if (identifier.charAt(0) == '#') {
            symbol = Integer.parseInt(identifier.substring(1));
        }
        name = identifier;
    }","  public void test32()  throws Throwable  {
      ASTIdentifier aSTIdentifier0 = new ASTIdentifier(0);
      // Undeclared exception!
      try { 
        aSTIdentifier0.setSymbol((String) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.parser.ASTIdentifier"", e);
      }
  }"
2354,"    public Object jjtAccept(final ParserVisitor visitor, final Object data) {
        return visitor.visit(this, data);
    }","  public void test33()  throws Throwable  {
      ASTIdentifier aSTIdentifier0 = new ASTIdentifier(253);
      // Undeclared exception!
      try { 
        aSTIdentifier0.jjtAccept((ParserVisitor) null, (Object) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.parser.ASTIdentifier"", e);
      }
  }"
2355,"    public int getSymbol() {
        return symbol;
    }","  public void test34()  throws Throwable  {
      ASTNamespaceIdentifier aSTNamespaceIdentifier0 = new ASTNamespaceIdentifier(58);
      OperatorController operatorController0 = OperatorController.INSTANCE;
      Integer integer0 = new Integer(0);
      aSTNamespaceIdentifier0.jjtAccept(operatorController0, integer0);
}"
2356,"    public boolean isRedefined() {
        return isSet(REDEFINED, flags);
    }","  public void test35()  throws Throwable  {
      ASTNamespaceIdentifier aSTNamespaceIdentifier0 = new ASTNamespaceIdentifier(58);
      OperatorController operatorController0 = OperatorController.INSTANCE;
      Integer integer0 = new Integer(0);
      aSTNamespaceIdentifier0.jjtAccept(operatorController0, integer0);
}"
2357,"    public boolean isRedefined() {
        return isSet(REDEFINED, flags);
    }","  public void test36()  throws Throwable  {
      ASTIdentifier aSTIdentifier0 = new ASTIdentifier(0);
      aSTIdentifier0.toString();
}"
2358,"    public int getSymbol() {
        return symbol;
    }","  public void test37()  throws Throwable  {
      ASTIdentifier aSTIdentifier0 = new ASTIdentifier(0);
      aSTIdentifier0.toString();
}"
2359,"    public boolean isShaded() {
        return isSet(SHADED, flags);
    }","  public void test38()  throws Throwable  {
      ASTVar aSTVar0 = new ASTVar(2906);
}"
2360,"    public boolean isShaded() {
        return isSet(SHADED, flags);
    }","  public void test39()  throws Throwable  {
      ASTVar aSTVar0 = new ASTVar(2906);
      aSTVar0.flags = 2906;
      boolean boolean0 = aSTVar0.isShaded();
}"
2361,"    public boolean isRedefined() {
        return isSet(REDEFINED, flags);
    }","  public void test40()  throws Throwable  {
      ASTVar aSTVar0 = new ASTVar(2906);
      aSTVar0.setSymbol(""org.apache.commns.jexl3.parser.ASTdentifier"");
}"
2362,"    public int getSymbol() {
        return symbol;
    }","  public void test41()  throws Throwable  {
      ASTVar aSTVar0 = new ASTVar(2906);
      aSTVar0.setSymbol(""org.apache.commns.jexl3.parser.ASTdentifier"");
}"
2363,"    public int getSymbol() {
        return symbol;
    }","  public void test42()  throws Throwable  {
      ASTIdentifier aSTIdentifier0 = new ASTIdentifier(0);
      boolean boolean0 = aSTIdentifier0.isCaptured();
}"
2364,"    public boolean isCaptured() {
        return isSet(CAPTURED, flags);
    }","  public void test43()  throws Throwable  {
      ASTIdentifier aSTIdentifier0 = new ASTIdentifier(0);
      boolean boolean0 = aSTIdentifier0.isCaptured();
}"
2365,"    public boolean isRedefined() {
        return isSet(REDEFINED, flags);
    }","  public void test44()  throws Throwable  {
      ASTIdentifier aSTIdentifier0 = new ASTIdentifier(0);
      boolean boolean0 = aSTIdentifier0.isCaptured();
}"
2366,"    public int getSymbol() {
        return symbol;
    }","  public void test45()  throws Throwable  {
      ASTVar aSTVar0 = new ASTVar(2906);
      boolean boolean0 = aSTVar0.isRedefined();
}"
2367,"    public boolean isRedefined() {
        return isSet(REDEFINED, flags);
    }","  public void test46()  throws Throwable  {
      ASTVar aSTVar0 = new ASTVar(2906);
      boolean boolean0 = aSTVar0.isRedefined();
}"
2368,"    public int getSymbol() {
        return symbol;
    }","  public void test47()  throws Throwable  {
      ASTIdentifier aSTIdentifier0 = new ASTIdentifier(0);
      int int0 = aSTIdentifier0.getSymbol();
}"
2369,"    public boolean isRedefined() {
        return isSet(REDEFINED, flags);
    }","  public void test48()  throws Throwable  {
      ASTIdentifier aSTIdentifier0 = new ASTIdentifier(0);
      int int0 = aSTIdentifier0.getSymbol();
}"
2370,"    public boolean isCaptured() {
        return isSet(CAPTURED, flags);
    }","  public void test49()  throws Throwable  {
      ASTIdentifier aSTIdentifier0 = new ASTIdentifier(0);
}"
2371,"    public boolean isCaptured() {
        return isSet(CAPTURED, flags);
    }","  public void test50()  throws Throwable  {
      ASTIdentifier aSTIdentifier0 = new ASTIdentifier(0);
      aSTIdentifier0.setCaptured(true);
      boolean boolean0 = aSTIdentifier0.isCaptured();
}"
2372,"    public boolean isRedefined() {
        return isSet(REDEFINED, flags);
    }","  public void test51()  throws Throwable  {
      ASTIdentifier aSTIdentifier0 = new ASTIdentifier(3573);
      aSTIdentifier0.getName();
}"
2373,"    public int getSymbol() {
        return symbol;
    }","  public void test52()  throws Throwable  {
      ASTIdentifier aSTIdentifier0 = new ASTIdentifier(3573);
      aSTIdentifier0.getName();
}"
2374,"    void setSymbol(final String identifier) {
        if (identifier.charAt(0) == '#') {
            symbol = Integer.parseInt(identifier.substring(1));
        }
        name = identifier;
    }","  public void test53()  throws Throwable  {
      ASTIdentifier aSTIdentifier0 = new ASTIdentifier((Parser) null, 75);
      // Undeclared exception!
      try { 
        aSTIdentifier0.setSymbol(""#)DJmP"");
        fail(""Expecting exception: NumberFormatException"");
      } catch(NumberFormatException e) {
         //
         // For input string: \"")DJmP\""
         //
         verifyException(""java.lang.NumberFormatException"", e);
      }
  }"
2375,"    public int getSymbol() {
        return symbol;
    }","  public void test54()  throws Throwable  {
      ASTIdentifier aSTIdentifier0 = new ASTIdentifier(0);
      aSTIdentifier0.getNamespace();
}"
2376,"    public boolean isRedefined() {
        return isSet(REDEFINED, flags);
    }","  public void test55()  throws Throwable  {
      ASTIdentifier aSTIdentifier0 = new ASTIdentifier(0);
      aSTIdentifier0.getNamespace();
}"
2377,"    public boolean isSafe() {
        return true;
    }","  public void test0()  throws Throwable  {
      ASTIdentifierAccessSafe aSTIdentifierAccessSafe0 = new ASTIdentifierAccessSafe((Parser) null, (-3504));
      boolean boolean0 = aSTIdentifierAccessSafe0.isSafe();
}"
2378,"    ASTIdentifierAccessSafe(final int id) {
        super(id);
    }","  public void test1()  throws Throwable  {
      ASTIdentifierAccessSafe aSTIdentifierAccessSafe0 = new ASTIdentifierAccessSafe((-1605));
}"
2379,,"  public void test0()  throws Throwable  {
      ParserDefaultVisitor parserDefaultVisitor0 = new ParserDefaultVisitor();
  }"
2380,"    public ASTJexlScript script() {
        if (scope == null && jjtGetNumChildren() == 1 && jjtGetChild(0) instanceof ASTJexlLambda) {
            final ASTJexlLambda lambda = (ASTJexlLambda) jjtGetChild(0);
            lambda.jjtSetParent(null);
            return lambda;
        }
        return this;
    }","  public void test0()  throws Throwable  {
      StringProvider stringProvider0 = new StringProvider(""k"");
      Parser parser0 = new Parser(stringProvider0);
      ASTJexlScript aSTJexlScript0 = parser0.JexlExpression((Scope) null);
      ASTJexlScript aSTJexlScript1 = aSTJexlScript0.script();
}"
2381,"    public ASTJexlScript script() {
        if (scope == null && jjtGetNumChildren() == 1 && jjtGetChild(0) instanceof ASTJexlLambda) {
            final ASTJexlLambda lambda = (ASTJexlLambda) jjtGetChild(0);
            lambda.jjtSetParent(null);
            return lambda;
        }
        return this;
    }","  public void test1()  throws Throwable  {
      ASTJexlScript aSTJexlScript0 = new ASTJexlScript(4749);
      Token token0 = new Token(4749, ""K[t/o[.Yp4M*p*RN"");
      aSTJexlScript0.jjtSetFirstToken(token0);
      ASTJexlScript aSTJexlScript1 = aSTJexlScript0.script();
}"
2382,"    public Object jjtAccept(final ParserVisitor visitor, final Object data) {
        return visitor.visit(this, data);
    }","  public void test2()  throws Throwable  {
      ASTJexlScript aSTJexlScript0 = new ASTJexlScript(0);
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      FeatureController featureController0 = new FeatureController(jexlFeatures0);
      Object object0 = aSTJexlScript0.jjtAccept(featureController0, (Object) null);
}"
2383,"    public String[] getSymbols() {
        return scope != null? scope.getSymbols() : null;
    }","  public void test3()  throws Throwable  {
      ASTJexlLambda aSTJexlLambda0 = new ASTJexlLambda((-1320));
      String[] stringArray0 = new String[1];
      Scope scope0 = new Scope((Scope) null, stringArray0);
      aSTJexlLambda0.setScope(scope0);
      aSTJexlLambda0.getSymbols();
}"
2384,"    public Scope getScope() {
        return scope;
    }","  public void test4()  throws Throwable  {
      ASTJexlScript aSTJexlScript0 = new ASTJexlScript((-1318));
      String[] stringArray0 = new String[0];
      Scope scope0 = new Scope((Scope) null, stringArray0);
      aSTJexlScript0.setScope(scope0);
      aSTJexlScript0.getScope();
}"
2385,"    public Scope getScope() {
        return scope;
    }","  public void test5()  throws Throwable  {
      ASTJexlScript aSTJexlScript0 = new ASTJexlScript(23);
      String[] stringArray0 = new String[9];
      Scope scope0 = new Scope((Scope) null, stringArray0);
      aSTJexlScript0.setScope(scope0);
      aSTJexlScript0.getScope();
}"
2386,"    public Map<String, Object> getPragmas() {
        return pragmas;
    }","  public void test6()  throws Throwable  {
      ASTJexlScript aSTJexlScript0 = new ASTJexlScript(0);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      aSTJexlScript0.setPragmas(hashMap0);
      Map<String, Object> map0 = aSTJexlScript0.getPragmas();
}"
2387,"    public Map<String, Object> getPragmas() {
        return pragmas;
    }","  public void test7()  throws Throwable  {
      ASTJexlScript aSTJexlScript0 = new ASTJexlScript(622);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      hashMap0.put("""", (Object) null);
      aSTJexlScript0.setPragmas(hashMap0);
      Map<String, Object> map0 = aSTJexlScript0.getPragmas();
}"
2388,"    public String[] getParameters() {
        return scope != null? scope.getParameters() : null;
    }","  public void test8()  throws Throwable  {
      Parser parser0 = new Parser("".4aN^yX=06@*DU"");
      ASTJexlLambda aSTJexlLambda0 = new ASTJexlLambda(parser0, 1);
      Scope scope0 = new Scope((Scope) null, (String[]) null);
      aSTJexlLambda0.setScope(scope0);
      aSTJexlLambda0.getParameters();
}"
2389,"    public String[] getLocalVariables() {
        return scope != null? scope.getLocalVariables() : null;
    }","  public void test9()  throws Throwable  {
      ASTJexlScript aSTJexlScript0 = new ASTJexlScript((-1318));
      String[] stringArray0 = new String[0];
      Scope scope0 = new Scope((Scope) null, stringArray0);
      scope0.declareVariable("""");
      aSTJexlScript0.setScope(scope0);
      aSTJexlScript0.getLocalVariables();
}"
2390,"    public JexlFeatures getFeatures() {
        return features;
    }","  public void test10()  throws Throwable  {
      ASTJexlScript aSTJexlScript0 = new ASTJexlScript(0);
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.structuredLiteral(false);
      aSTJexlScript0.setFeatures(jexlFeatures0);
      JexlFeatures jexlFeatures1 = aSTJexlScript0.getFeatures();
}"
2391,"    public JexlFeatures getFeatures() {
        return features;
    }","  public void test11()  throws Throwable  {
      ASTJexlLambda aSTJexlLambda0 = new ASTJexlLambda((Parser) null, (-1401));
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.sideEffectGlobal(false);
      aSTJexlLambda0.setFeatures(jexlFeatures0);
      JexlFeatures jexlFeatures1 = aSTJexlLambda0.getFeatures();
}"
2392,"    public JexlFeatures getFeatures() {
        return features;
    }","  public void test12()  throws Throwable  {
      ASTJexlScript aSTJexlScript0 = new ASTJexlScript(0);
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.sideEffect(false);
      aSTJexlScript0.setFeatures(jexlFeatures0);
      JexlFeatures jexlFeatures1 = aSTJexlScript0.getFeatures();
}"
2393,"    public JexlFeatures getFeatures() {
        return features;
    }","  public void test13()  throws Throwable  {
      ASTJexlScript aSTJexlScript0 = new ASTJexlScript(0);
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      aSTJexlScript0.setFeatures(jexlFeatures0);
      jexlFeatures0.register(true);
      JexlFeatures jexlFeatures1 = aSTJexlScript0.getFeatures();
}"
2394,"    public JexlFeatures getFeatures() {
        return features;
    }","  public void test14()  throws Throwable  {
      ASTJexlScript aSTJexlScript0 = new ASTJexlScript(0);
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.pragma(false);
      aSTJexlScript0.setFeatures(jexlFeatures0);
      JexlFeatures jexlFeatures1 = aSTJexlScript0.getFeatures();
}"
2395,"    public JexlFeatures getFeatures() {
        return features;
    }","  public void test15()  throws Throwable  {
      ASTJexlScript aSTJexlScript0 = new ASTJexlScript(0);
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.newInstance(false);
      aSTJexlScript0.setFeatures(jexlFeatures0);
      JexlFeatures jexlFeatures1 = aSTJexlScript0.getFeatures();
}"
2396,"    public JexlFeatures getFeatures() {
        return features;
    }","  public void test16()  throws Throwable  {
      ASTJexlScript aSTJexlScript0 = new ASTJexlScript(0);
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.methodCall(false);
      aSTJexlScript0.setFeatures(jexlFeatures0);
      JexlFeatures jexlFeatures1 = aSTJexlScript0.getFeatures();
}"
2397,"    public JexlFeatures getFeatures() {
        return features;
    }","  public void test17()  throws Throwable  {
      ASTJexlScript aSTJexlScript0 = new ASTJexlScript(0);
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.loops(false);
      aSTJexlScript0.setFeatures(jexlFeatures0);
      JexlFeatures jexlFeatures1 = aSTJexlScript0.getFeatures();
}"
2398,"    public JexlFeatures getFeatures() {
        return features;
    }","  public void test18()  throws Throwable  {
      ASTJexlScript aSTJexlScript0 = new ASTJexlScript(0);
      JexlFeatures jexlFeatures0 = JexlEngine.DEFAULT_FEATURES;
      jexlFeatures0.localVar(false);
      aSTJexlScript0.setFeatures(jexlFeatures0);
      JexlFeatures jexlFeatures1 = aSTJexlScript0.getFeatures();
}"
2399,"    public JexlFeatures getFeatures() {
        return features;
    }","  public void test19()  throws Throwable  {
      StringProvider stringProvider0 = new StringProvider("""");
      Parser parser0 = new Parser(stringProvider0);
      ASTJexlScript aSTJexlScript0 = new ASTJexlScript(parser0, (-4017));
      JexlFeatures jexlFeatures0 = JexlEngine.DEFAULT_FEATURES;
      jexlFeatures0.lambda(false);
      aSTJexlScript0.setFeatures(jexlFeatures0);
      JexlFeatures jexlFeatures1 = aSTJexlScript0.getFeatures();
}"
2400,"    public JexlFeatures getFeatures() {
        return features;
    }","  public void test20()  throws Throwable  {
      ASTJexlScript aSTJexlScript0 = new ASTJexlScript(0);
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.script(false);
      aSTJexlScript0.setFeatures(jexlFeatures0);
      JexlFeatures jexlFeatures1 = aSTJexlScript0.getFeatures();
}"
2401,"    public JexlFeatures getFeatures() {
        return features;
    }","  public void test21()  throws Throwable  {
      ASTJexlLambda aSTJexlLambda0 = new ASTJexlLambda((-1318));
      JexlFeatures jexlFeatures0 = JexlEngine.DEFAULT_FEATURES;
      aSTJexlLambda0.setFeatures(jexlFeatures0);
      jexlFeatures0.arrayReferenceExpr(false);
      JexlFeatures jexlFeatures1 = aSTJexlLambda0.getFeatures();
}"
2402,"    public JexlFeatures getFeatures() {
        return features;
    }","  public void test22()  throws Throwable  {
      ASTJexlScript aSTJexlScript0 = new ASTJexlScript(0);
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      aSTJexlScript0.setFeatures(jexlFeatures0);
      jexlFeatures0.annotation(false);
      JexlFeatures jexlFeatures1 = aSTJexlScript0.getFeatures();
}"
2403,"    public JexlFeatures getFeatures() {
        return features;
    }","  public void test23()  throws Throwable  {
      ASTJexlLambda aSTJexlLambda0 = new ASTJexlLambda(109);
      JexlFeatures jexlFeatures0 = JexlEngine.DEFAULT_FEATURES;
      jexlFeatures0.lexicalShade(true);
      aSTJexlLambda0.setFeatures(jexlFeatures0);
      JexlFeatures jexlFeatures1 = aSTJexlLambda0.getFeatures();
}"
2404,"    public Frame createFrame(final Frame caller, final Object... values) {
        return scope != null? scope.createFrame(caller, values) : null;
    }","  public void test24()  throws Throwable  {
      ASTJexlScript aSTJexlScript0 = new ASTJexlScript((-1318));
      String[] stringArray0 = new String[0];
      Scope scope0 = new Scope((Scope) null, stringArray0);
      aSTJexlScript0.setScope(scope0);
      aSTJexlScript0.createFrame((Object[]) stringArray0);
}"
2405,"    public Frame createFrame(final Frame caller, final Object... values) {
        return scope != null? scope.createFrame(caller, values) : null;
    }","  public void test25()  throws Throwable  {
      ASTJexlScript aSTJexlScript0 = new ASTJexlScript((-1318));
      String[] stringArray0 = new String[0];
      Scope scope0 = new Scope((Scope) null, stringArray0);
      aSTJexlScript0.setScope(scope0);
      aSTJexlScript0.createFrame((Frame) null, (Object[]) stringArray0);
}"
2406,"    public Object jjtAccept(final ParserVisitor visitor, final Object data) {
        return visitor.visit(this, data);
    }","  public void test26()  throws Throwable  {
      StringProvider stringProvider0 = new StringProvider("""");
      Parser parser0 = new Parser(stringProvider0);
      ASTJexlLambda aSTJexlLambda0 = new ASTJexlLambda(parser0, 0);
      // Undeclared exception!
      try { 
        aSTJexlLambda0.jjtAccept((ParserVisitor) null, stringProvider0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.parser.ASTJexlScript"", e);
      }
  }"
2407,"    public Frame createFrame(final Frame caller, final Object... values) {
        return scope != null? scope.createFrame(caller, values) : null;
    }","  public void test27()  throws Throwable  {
      ASTJexlLambda aSTJexlLambda0 = new ASTJexlLambda(23);
      String[] stringArray0 = new String[9];
      Scope scope0 = new Scope((Scope) null, stringArray0);
      aSTJexlLambda0.setScope(scope0);
      // Undeclared exception!
      try { 
        aSTJexlLambda0.createFrame((Object[]) stringArray0);
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }"
2408,"    public Frame createFrame(final Frame caller, final Object... values) {
        return scope != null? scope.createFrame(caller, values) : null;
    }","  public void test28()  throws Throwable  {
      ASTJexlLambda aSTJexlLambda0 = new ASTJexlLambda(0);
      JexlNode[] jexlNodeArray0 = new JexlNode[1];
      Frame frame0 = aSTJexlLambda0.createFrame((Frame) null, (Object[]) jexlNodeArray0);
}"
2409,"    public int getArgCount() {
        return scope != null? scope.getArgCount() : 0;
    }","  public void test29()  throws Throwable  {
      ASTJexlLambda aSTJexlLambda0 = new ASTJexlLambda(109);
      aSTJexlLambda0.setScope((Scope) null);
}"
2410,"    public Object jjtAccept(final ParserVisitor visitor, final Object data) {
        return visitor.visit(this, data);
    }","  public void test30()  throws Throwable  {
      ASTJexlScript aSTJexlScript0 = new ASTJexlScript(23);
      Parser parser0 = new Parser(""H1%X_S["");
      FeatureController featureController0 = parser0.featureController;
      Parser parser1 = (Parser)aSTJexlScript0.jjtAccept(featureController0, parser0);
}"
2411,"    public Scope getScope() {
        return scope;
    }","  public void test31()  throws Throwable  {
      ASTJexlScript aSTJexlScript0 = new ASTJexlScript(0);
      Scope scope0 = aSTJexlScript0.getScope();
}"
2412,"    public boolean isCapturedSymbol(final int symbol) {
        return scope != null && scope.isCapturedSymbol(symbol);
    }","  public void test32()  throws Throwable  {
      ASTJexlScript aSTJexlScript0 = new ASTJexlScript((-1318));
      String[] stringArray0 = new String[6];
      Scope scope0 = new Scope((Scope) null, stringArray0);
      aSTJexlScript0.setScope(scope0);
      boolean boolean0 = aSTJexlScript0.isCapturedSymbol(2005);
}"
2413,"    public boolean isCapturedSymbol(final int symbol) {
        return scope != null && scope.isCapturedSymbol(symbol);
    }","  public void test33()  throws Throwable  {
      ASTJexlScript aSTJexlScript0 = new ASTJexlScript((-1318));
      String[] stringArray0 = new String[6];
      Scope scope0 = new Scope((Scope) null, stringArray0);
      aSTJexlScript0.setScope(scope0);
      boolean boolean0 = aSTJexlScript0.isCapturedSymbol(2005);
}"
2414,"    public boolean isCapturedSymbol(final int symbol) {
        return scope != null && scope.isCapturedSymbol(symbol);
    }","  public void test34()  throws Throwable  {
      ASTJexlScript aSTJexlScript0 = new ASTJexlScript(0);
      boolean boolean0 = aSTJexlScript0.isCapturedSymbol((-2981));
}"
2415,"    public String[] getLocalVariables() {
        return scope != null? scope.getLocalVariables() : null;
    }","  public void test35()  throws Throwable  {
      ASTJexlScript aSTJexlScript0 = new ASTJexlScript((-1318));
      String[] stringArray0 = new String[6];
      Scope scope0 = new Scope((Scope) null, stringArray0);
      aSTJexlScript0.setScope(scope0);
      aSTJexlScript0.getLocalVariables();
}"
2416,"    public String[] getLocalVariables() {
        return scope != null? scope.getLocalVariables() : null;
    }","  public void test36()  throws Throwable  {
      ASTJexlLambda aSTJexlLambda0 = new ASTJexlLambda(1620);
      String[] stringArray0 = aSTJexlLambda0.getLocalVariables();
}"
2417,"    public String[] getParameters() {
        return scope != null? scope.getParameters() : null;
    }","  public void test37()  throws Throwable  {
      ASTJexlScript aSTJexlScript0 = new ASTJexlScript(23);
      String[] stringArray0 = new String[9];
      Scope scope0 = new Scope((Scope) null, stringArray0);
      aSTJexlScript0.setScope(scope0);
      aSTJexlScript0.getParameters();
}"
2418,"    public String[] getParameters() {
        return scope != null? scope.getParameters() : null;
    }","  public void test38()  throws Throwable  {
      Parser parser0 = new Parser("""");
      ASTJexlScript aSTJexlScript0 = new ASTJexlScript(parser0, (-4003));
      String[] stringArray0 = aSTJexlScript0.getParameters();
}"
2419,"    public String[] getSymbols() {
        return scope != null? scope.getSymbols() : null;
    }","  public void test39()  throws Throwable  {
      ASTJexlScript aSTJexlScript0 = new ASTJexlScript((-1318));
      String[] stringArray0 = new String[0];
      Scope scope0 = new Scope((Scope) null, stringArray0);
      aSTJexlScript0.setScope(scope0);
      aSTJexlScript0.getSymbols();
}"
2420,"    public String[] getSymbols() {
        return scope != null? scope.getSymbols() : null;
    }","  public void test40()  throws Throwable  {
      ASTJexlScript aSTJexlScript0 = new ASTJexlScript(0);
      String[] stringArray0 = aSTJexlScript0.getSymbols();
}"
2421,"    public int getArgCount() {
        return scope != null? scope.getArgCount() : 0;
    }","  public void test41()  throws Throwable  {
      ASTJexlScript aSTJexlScript0 = new ASTJexlScript((-1318));
      String[] stringArray0 = new String[6];
      Scope scope0 = new Scope((Scope) null, stringArray0);
      aSTJexlScript0.setScope(scope0);
      aSTJexlScript0.getArgCount();
}"
2422,"    public int getArgCount() {
        return scope != null? scope.getArgCount() : 0;
    }","  public void test42()  throws Throwable  {
      ASTJexlLambda aSTJexlLambda0 = new ASTJexlLambda(1620);
      int int0 = aSTJexlLambda0.getArgCount();
}"
2423,"    public Frame createFrame(final Frame caller, final Object... values) {
        return scope != null? scope.createFrame(caller, values) : null;
    }","  public void test43()  throws Throwable  {
      ASTJexlScript aSTJexlScript0 = new ASTJexlScript((-1318));
      String[] stringArray0 = new String[6];
      Scope scope0 = new Scope((Scope) null, stringArray0);
      aSTJexlScript0.setScope(scope0);
      // Undeclared exception!
      try { 
        aSTJexlScript0.createFrame((Frame) null, (Object[]) stringArray0);
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }"
2424,"    public ASTJexlScript script() {
        if (scope == null && jjtGetNumChildren() == 1 && jjtGetChild(0) instanceof ASTJexlLambda) {
            final ASTJexlLambda lambda = (ASTJexlLambda) jjtGetChild(0);
            lambda.jjtSetParent(null);
            return lambda;
        }
        return this;
    }","  public void test44()  throws Throwable  {
      ASTJexlLambda aSTJexlLambda0 = new ASTJexlLambda((-1318));
      String[] stringArray0 = new String[1];
      Scope scope0 = new Scope((Scope) null, stringArray0);
      aSTJexlLambda0.setScope(scope0);
      aSTJexlLambda0.script();
}"
2425,"    public ASTJexlScript script() {
        if (scope == null && jjtGetNumChildren() == 1 && jjtGetChild(0) instanceof ASTJexlLambda) {
            final ASTJexlLambda lambda = (ASTJexlLambda) jjtGetChild(0);
            lambda.jjtSetParent(null);
            return lambda;
        }
        return this;
    }","  public void test45()  throws Throwable  {
      ASTJexlLambda aSTJexlLambda0 = new ASTJexlLambda(0);
      JexlNode[] jexlNodeArray0 = new JexlNode[1];
      jexlNodeArray0[0] = (JexlNode) aSTJexlLambda0;
      aSTJexlLambda0.jjtSetChildren(jexlNodeArray0);
      ASTJexlScript aSTJexlScript0 = aSTJexlLambda0.script();
}"
2426,"    public Frame createFrame(final Frame caller, final Object... values) {
        return scope != null? scope.createFrame(caller, values) : null;
    }","  public void test46()  throws Throwable  {
      Parser parser0 = new Parser("""");
      ASTJexlScript aSTJexlScript0 = new ASTJexlScript(parser0, (-4003));
      Frame frame0 = aSTJexlScript0.createFrame((Object[]) null);
}"
2427,"    public JexlFeatures getFeatures() {
        return features;
    }","  public void test47()  throws Throwable  {
      ASTJexlScript aSTJexlScript0 = new ASTJexlScript(33);
      JexlFeatures jexlFeatures0 = aSTJexlScript0.getFeatures();
}"
2428,"    public Map<String, Object> getPragmas() {
        return pragmas;
    }","  public void test48()  throws Throwable  {
      Parser parser0 = new Parser("""");
      ASTJexlScript aSTJexlScript0 = new ASTJexlScript(parser0, (-4003));
      Map<String, Object> map0 = aSTJexlScript0.getPragmas();
}"
2429,"    public boolean isTopLevel() {
        return jjtGetParent() == null;
    }","  public void test0()  throws Throwable  {
      ASTJexlLambda aSTJexlLambda0 = new ASTJexlLambda((-2333));
      boolean boolean0 = aSTJexlLambda0.isTopLevel();
}"
2430,"    ASTJexlLambda(final int id) {
        super(id);
    }","  public void test1()  throws Throwable  {
      Parser parser0 = new Parser("""");
      ASTJexlLambda aSTJexlLambda0 = new ASTJexlLambda(parser0, 0);
}"
2431,"    public boolean isTopLevel() {
        return jjtGetParent() == null;
    }","  public void test2()  throws Throwable  {
      ASTJexlLambda aSTJexlLambda0 = new ASTJexlLambda((-2333));
      aSTJexlLambda0.jjtSetParent(aSTJexlLambda0);
      boolean boolean0 = aSTJexlLambda0.isTopLevel();
}"
2432,"    public Object jjtAccept(final ParserVisitor visitor, final Object data) {
        return visitor.visit(this, data);
    }","  public void test0()  throws Throwable  {
      ASTNumberLiteral aSTNumberLiteral0 = new ASTNumberLiteral(59);
      JexlFeatures jexlFeatures0 = JexlEngine.DEFAULT_FEATURES;
      FeatureController featureController0 = new FeatureController(jexlFeatures0);
      Object object0 = aSTNumberLiteral0.jjtAccept(featureController0, (Object) null);
}"
2433,"    public boolean isInteger() {
        return nlp.isInteger();
    }","  public void test1()  throws Throwable  {
      ASTNumberLiteral aSTNumberLiteral0 = new ASTNumberLiteral(18);
      aSTNumberLiteral0.setNatural(""8"");
      boolean boolean0 = aSTNumberLiteral0.isInteger();
}"
2434,"    public Class<? extends Number> getLiteralClass() {
        return nlp.getLiteralClass();
    }","  public void test2()  throws Throwable  {
      ASTNumberLiteral aSTNumberLiteral0 = new ASTNumberLiteral((-2147483647));
      aSTNumberLiteral0.setReal(""NaN"");
      Class<? extends Number> class0 = aSTNumberLiteral0.getLiteralClass();
}"
2435,"    public Number getLiteral() {
        return nlp.getLiteralValue();
    }","  public void test3()  throws Throwable  {
      ASTNumberLiteral aSTNumberLiteral0 = new ASTNumberLiteral((-2147483647));
      aSTNumberLiteral0.setReal(""NaN"");
      Number number0 = aSTNumberLiteral0.getLiteral();
}"
2436,"    public Number getLiteral() {
        return nlp.getLiteralValue();
    }","  public void test4()  throws Throwable  {
      ASTNumberLiteral aSTNumberLiteral0 = new ASTNumberLiteral(18);
      aSTNumberLiteral0.setReal(""8"");
      Number number0 = aSTNumberLiteral0.getLiteral();
}"
2437,"    void setReal(final String s) {
        nlp.setReal(s);
    }","  public void test5()  throws Throwable  {
      ASTNumberLiteral aSTNumberLiteral0 = new ASTNumberLiteral(2392);
      // Undeclared exception!
      try { 
        aSTNumberLiteral0.setReal("""");
        fail(""Expecting exception: StringIndexOutOfBoundsException"");
      } catch(StringIndexOutOfBoundsException e) {
      }
  }"
2438,"    void setReal(final String s) {
        nlp.setReal(s);
    }","  public void test6()  throws Throwable  {
      ASTNumberLiteral aSTNumberLiteral0 = new ASTNumberLiteral((-798));
      // Undeclared exception!
      try { 
        aSTNumberLiteral0.setReal((String) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.parser.NumberParser"", e);
      }
  }"
2439,"    void setNatural(final String s) {
        nlp.setNatural(s);
    }","  public void test7()  throws Throwable  {
      ASTNumberLiteral aSTNumberLiteral0 = new ASTNumberLiteral(717);
      // Undeclared exception!
      try { 
        aSTNumberLiteral0.setNatural(""MuL'D8}Z}_%t*"");
        fail(""Expecting exception: NumberFormatException"");
      } catch(NumberFormatException e) {
         //
         // For input string: \""MuL'\""
         //
         verifyException(""java.lang.NumberFormatException"", e);
      }
  }"
2440,"    void setNatural(final String s) {
        nlp.setNatural(s);
    }","  public void test8()  throws Throwable  {
      ASTNumberLiteral aSTNumberLiteral0 = new ASTNumberLiteral(6664);
      // Undeclared exception!
      try { 
        aSTNumberLiteral0.setNatural((String) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.parser.NumberParser"", e);
      }
  }"
2441,"    public Object jjtAccept(final ParserVisitor visitor, final Object data) {
        return visitor.visit(this, data);
    }","  public void test9()  throws Throwable  {
      ASTNumberLiteral aSTNumberLiteral0 = new ASTNumberLiteral(0);
      // Undeclared exception!
      try { 
        aSTNumberLiteral0.jjtAccept((ParserVisitor) null, (Object) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.parser.ASTNumberLiteral"", e);
      }
  }"
2442,"    public Object jjtAccept(final ParserVisitor visitor, final Object data) {
        return visitor.visit(this, data);
    }","  public void test10()  throws Throwable  {
      ASTNumberLiteral aSTNumberLiteral0 = new ASTNumberLiteral(717);
      OperatorController operatorController0 = OperatorController.INSTANCE;
      Object object0 = aSTNumberLiteral0.jjtAccept(operatorController0, operatorController0);
}"
2443,"    void setReal(final String s) {
        nlp.setReal(s);
    }","  public void test11()  throws Throwable  {
      ASTNumberLiteral aSTNumberLiteral0 = new ASTNumberLiteral(1964);
      // Undeclared exception!
      try { 
        aSTNumberLiteral0.setReal(""c04i:"");
        fail(""Expecting exception: NumberFormatException"");
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.math.BigDecimal"", e);
      }
  }"
2444,"    public String toString() {
        return nlp.toString();
    }","  public void test12()  throws Throwable  {
      ASTNumberLiteral aSTNumberLiteral0 = new ASTNumberLiteral(107);
      String string0 = aSTNumberLiteral0.toString();
}"
2445,"    public Class<? extends Number> getLiteralClass() {
        return nlp.getLiteralClass();
    }","  public void test13()  throws Throwable  {
      ASTNumberLiteral aSTNumberLiteral0 = new ASTNumberLiteral(717);
      Class<? extends Number> class0 = aSTNumberLiteral0.getLiteralClass();
}"
2446,"    protected boolean isConstant(final boolean literal) {
        return true;
    }","  public void test14()  throws Throwable  {
      ASTNumberLiteral aSTNumberLiteral0 = new ASTNumberLiteral(107);
      boolean boolean0 = aSTNumberLiteral0.isConstant(false);
}"
2447,"    void setNatural(final String s) {
        nlp.setNatural(s);
    }","  public void test15()  throws Throwable  {
      Parser parser0 = new Parser("""");
      ASTNumberLiteral aSTNumberLiteral0 = new ASTNumberLiteral(parser0, 0);
      // Undeclared exception!
      try { 
        aSTNumberLiteral0.setNatural("""");
        fail(""Expecting exception: StringIndexOutOfBoundsException"");
      } catch(StringIndexOutOfBoundsException e) {
      }
  }"
2448,"    public boolean isInteger() {
        return nlp.isInteger();
    }","  public void test16()  throws Throwable  {
      ASTNumberLiteral aSTNumberLiteral0 = new ASTNumberLiteral(107);
      boolean boolean0 = aSTNumberLiteral0.isInteger();
}"
2449,"    public Number getLiteral() {
        return nlp.getLiteralValue();
    }","  public void test17()  throws Throwable  {
      ASTNumberLiteral aSTNumberLiteral0 = new ASTNumberLiteral(107);
      Number number0 = aSTNumberLiteral0.getLiteral();
}"
2450,"    public String toString() {
        return this.literal;
    }","  public void test0()  throws Throwable  {
      ASTStringLiteral aSTStringLiteral0 = new ASTStringLiteral(952);
      aSTStringLiteral0.setLiteral(""S"");
      String string0 = aSTStringLiteral0.toString();
}"
2451,"    public String toString() {
        return this.literal;
    }","  public void test1()  throws Throwable  {
      ASTStringLiteral aSTStringLiteral0 = new ASTStringLiteral(0);
      aSTStringLiteral0.setLiteral("""");
      String string0 = aSTStringLiteral0.toString();
}"
2452,"    public Object jjtAccept(final ParserVisitor visitor, final Object data) {
        return visitor.visit(this, data);
    }","  public void test2()  throws Throwable  {
      ASTStringLiteral aSTStringLiteral0 = new ASTStringLiteral(0);
      Parser parser0 = new Parser("""");
      JexlFeatures jexlFeatures0 = parser0.getFeatures();
      FeatureController featureController0 = new FeatureController(jexlFeatures0);
      Object object0 = aSTStringLiteral0.jjtAccept(featureController0, (Object) null);
}"
2453,"    public Object jjtAccept(final ParserVisitor visitor, final Object data) {
        return visitor.visit(this, data);
    }","  public void test3()  throws Throwable  {
      StringProvider stringProvider0 = new StringProvider(""UA6sPp_"");
      Parser parser0 = new Parser(stringProvider0);
      ASTStringLiteral aSTStringLiteral0 = new ASTStringLiteral(parser0, 0);
      JexlFeatures jexlFeatures0 = parser0.getFeatures();
      FeatureController featureController0 = new FeatureController(jexlFeatures0);
      JexlFeatures jexlFeatures1 = (JexlFeatures)aSTStringLiteral0.jjtAccept(featureController0, jexlFeatures0);
}"
2454,"    protected boolean isConstant(final boolean literal) {
        return true;
    }","  public void test4()  throws Throwable  {
      ASTStringLiteral aSTStringLiteral0 = new ASTStringLiteral((-468));
      boolean boolean0 = aSTStringLiteral0.isConstant(false);
}"
2455,"    public String getLiteral() {
        return this.literal;
    }","  public void test5()  throws Throwable  {
      ASTStringLiteral aSTStringLiteral0 = new ASTStringLiteral(0);
      aSTStringLiteral0.setLiteral(""Continue"");
      String string0 = aSTStringLiteral0.getLiteral();
}"
2456,"    public String getLiteral() {
        return this.literal;
    }","  public void test6()  throws Throwable  {
      ASTStringLiteral aSTStringLiteral0 = new ASTStringLiteral(0);
      aSTStringLiteral0.setLiteral("""");
      String string0 = aSTStringLiteral0.getLiteral();
}"
2457,"    public String toString() {
        return this.literal;
    }","  public void test7()  throws Throwable  {
      ASTStringLiteral aSTStringLiteral0 = new ASTStringLiteral((Parser) null, (-3095));
      String string0 = aSTStringLiteral0.toString();
}"
2458,"    public String getLiteral() {
        return this.literal;
    }","  public void test8()  throws Throwable  {
      ASTStringLiteral aSTStringLiteral0 = new ASTStringLiteral((Parser) null, (-3095));
      String string0 = aSTStringLiteral0.getLiteral();
}"
2459,"    public Object jjtAccept(final ParserVisitor visitor, final Object data) {
        return visitor.visit(this, data);
    }","  public void test9()  throws Throwable  {
      ASTStringLiteral aSTStringLiteral0 = new ASTStringLiteral(0);
      // Undeclared exception!
      try { 
        aSTStringLiteral0.jjtAccept((ParserVisitor) null, (Object) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.parser.ASTStringLiteral"", e);
      }
  }"
2460,"    public Object jjtAccept(final ParserVisitor visitor, final Object data) {
        return visitor.visit(this, data);
    }","  public void test0()  throws Throwable  {
      Parser parser0 = new Parser(""c"");
      ASTForeachStatement aSTForeachStatement0 = new ASTForeachStatement(parser0, 1);
      FeatureController featureController0 = parser0.featureController;
      Object object0 = aSTForeachStatement0.jjtAccept(featureController0, (Object) null);
}"
2461,"    public Object jjtAccept(final ParserVisitor visitor, final Object data) {
        return visitor.visit(this, data);
    }","  public void test1()  throws Throwable  {
      Parser parser0 = new Parser(""$rqhwZ6F[P\""#P# ,"");
      ASTForeachStatement aSTForeachStatement0 = new ASTForeachStatement(parser0, (-356));
      FeatureController featureController0 = new FeatureController((JexlFeatures) null);
      // Undeclared exception!
      try { 
        aSTForeachStatement0.jjtAccept(featureController0, featureController0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.parser.FeatureController"", e);
      }
  }"
2462,"    public Object jjtAccept(final ParserVisitor visitor, final Object data) {
        return visitor.visit(this, data);
    }","  public void test2()  throws Throwable  {
      ASTForeachStatement aSTForeachStatement0 = new ASTForeachStatement(0);
      OperatorController operatorController0 = new OperatorController();
      Object object0 = aSTForeachStatement0.jjtAccept(operatorController0, operatorController0);
}"
2463,"    protected final Object visit(final SimpleNode node, final Object data) {
        throw new UnsupportedOperationException(node.getClass().getSimpleName() + "" : not supported yet."");
    }","  public void test0()  throws Throwable  {
      OperatorController operatorController0 = new OperatorController();
      // Undeclared exception!
      try { 
        operatorController0.visit((SimpleNode) null, (Object) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.parser.ParserVisitor"", e);
      }
  }"
2464,"    protected final Object visit(final SimpleNode node, final Object data) {
        throw new UnsupportedOperationException(node.getClass().getSimpleName() + "" : not supported yet."");
    }","  public void test1()  throws Throwable  {
      OperatorController operatorController0 = OperatorController.INSTANCE;
      ASTAmbiguous aSTAmbiguous0 = new ASTAmbiguous(2226);
      // Undeclared exception!
      try { 
        operatorController0.visit(aSTAmbiguous0, aSTAmbiguous0);
        fail(""Expecting exception: UnsupportedOperationException"");
      } catch(UnsupportedOperationException e) {
         //
         // unexpected type of node
         //
         verifyException(""org.apache.commons.jexl3.parser.ParserVisitor"", e);
      }
  }"
2465,"    public String toString() {
        return name;
    }","  public void test0()  throws Throwable  {
      ASTAnnotation aSTAnnotation0 = new ASTAnnotation(1606);
      aSTAnnotation0.setName(""Yg:DH%Bos=JN2%Y,2W\"""");
      String string0 = aSTAnnotation0.toString();
}"
2466,"    public Object jjtAccept(final ParserVisitor visitor, final Object data) {
        return visitor.visit(this, data);
    }","  public void test1()  throws Throwable  {
      ASTAnnotation aSTAnnotation0 = new ASTAnnotation((Parser) null, (-417));
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      FeatureController featureController0 = new FeatureController(jexlFeatures0);
      Object object0 = aSTAnnotation0.jjtAccept(featureController0, (Object) null);
}"
2467,"    public String getName() {
        return name;
    }","  public void test2()  throws Throwable  {
      ASTAnnotation aSTAnnotation0 = new ASTAnnotation(0);
      aSTAnnotation0.setName(""Ls(*4>&4F"");
      String string0 = aSTAnnotation0.getName();
}"
2468,"    void setName(final String identifier) {
        if (identifier.charAt(0) == '@') {
            name = identifier.substring(1);
        } else {
            name = identifier;
        }
    }","  public void test3()  throws Throwable  {
      ASTAnnotation aSTAnnotation0 = new ASTAnnotation(57);
      // Undeclared exception!
      try { 
        aSTAnnotation0.setName("""");
        fail(""Expecting exception: StringIndexOutOfBoundsException"");
      } catch(StringIndexOutOfBoundsException e) {
      }
  }"
2469,"    void setName(final String identifier) {
        if (identifier.charAt(0) == '@') {
            name = identifier.substring(1);
        } else {
            name = identifier;
        }
    }","  public void test4()  throws Throwable  {
      ASTAnnotation aSTAnnotation0 = new ASTAnnotation((-2648));
      // Undeclared exception!
      try { 
        aSTAnnotation0.setName((String) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.parser.ASTAnnotation"", e);
      }
  }"
2470,"    public Object jjtAccept(final ParserVisitor visitor, final Object data) {
        return visitor.visit(this, data);
    }","  public void test5()  throws Throwable  {
      ASTAnnotation aSTAnnotation0 = new ASTAnnotation(1);
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.annotation(false);
      FeatureController featureController0 = new FeatureController(jexlFeatures0);
      // Undeclared exception!
      try { 
        aSTAnnotation0.jjtAccept(featureController0, (Object) null);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // ?: annotation error in ''
         //
         verifyException(""org.apache.commons.jexl3.parser.FeatureController"", e);
      }
  }"
2471,"    public Object jjtAccept(final ParserVisitor visitor, final Object data) {
        return visitor.visit(this, data);
    }","  public void test6()  throws Throwable  {
      ASTAnnotation aSTAnnotation0 = new ASTAnnotation((-1));
      // Undeclared exception!
      try { 
        aSTAnnotation0.jjtAccept((ParserVisitor) null, ""03D"");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.parser.ASTAnnotation"", e);
      }
  }"
2472,"    public String toString() {
        return name;
    }","  public void test7()  throws Throwable  {
      ASTAnnotation aSTAnnotation0 = new ASTAnnotation(63);
      aSTAnnotation0.setName(""\""&&\"""");
}"
2473,"    public Object jjtAccept(final ParserVisitor visitor, final Object data) {
        return visitor.visit(this, data);
    }","  public void test8()  throws Throwable  {
      Parser parser0 = new Parser("""");
      ASTAnnotation aSTAnnotation0 = new ASTAnnotation(parser0, 148);
      OperatorController operatorController0 = new OperatorController();
      Object object0 = aSTAnnotation0.jjtAccept(operatorController0, operatorController0);
}"
2474,"    public String getName() {
        return name;
    }","  public void test9()  throws Throwable  {
      ASTAnnotation aSTAnnotation0 = new ASTAnnotation((-1));
      String string0 = aSTAnnotation0.getName();
}"
2475,"    public String toString() {
        return name;
    }","  public void test10()  throws Throwable  {
      ASTAnnotation aSTAnnotation0 = new ASTAnnotation((-1));
      String string0 = aSTAnnotation0.toString();
}"
2476,"    protected boolean isConstant(final boolean literal) {
        return constant;
    }","  public void test0()  throws Throwable  {
      ASTMapLiteral aSTMapLiteral0 = new ASTMapLiteral(0);
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      FeatureController featureController0 = new FeatureController(jexlFeatures0);
      aSTMapLiteral0.jjtAccept(featureController0, (Object) null);
}"
2477,"    protected boolean isConstant(final boolean literal) {
        return constant;
    }","  public void test1()  throws Throwable  {
      ASTMapLiteral aSTMapLiteral0 = new ASTMapLiteral(0);
      OperatorController operatorController0 = OperatorController.INSTANCE;
      aSTMapLiteral0.jjtAccept(operatorController0, operatorController0);
}"
2478,"    protected boolean isConstant(final boolean literal) {
        return constant;
    }","  public void test2()  throws Throwable  {
      ASTMapLiteral aSTMapLiteral0 = new ASTMapLiteral(192);
}"
2479,"    protected boolean isConstant(final boolean literal) {
        return constant;
    }","  public void test3()  throws Throwable  {
      ASTMapLiteral aSTMapLiteral0 = new ASTMapLiteral(192);
      aSTMapLiteral0.jjtClose();
      boolean boolean0 = aSTMapLiteral0.isConstant(false);
}"
2480,"    protected boolean isConstant(final boolean literal) {
        return constant;
    }","  public void test4()  throws Throwable  {
      ASTMapLiteral aSTMapLiteral0 = new ASTMapLiteral(192);
      aSTMapLiteral0.jjtClose();
      boolean boolean0 = aSTMapLiteral0.isConstant(false);
}"
2481,"    public String toString() {
        final Debugger dbg = new Debugger();
        return dbg.data(this);
    }","  public void test5()  throws Throwable  {
      Parser parser0 = new Parser("""");
      ASTMapLiteral aSTMapLiteral0 = new ASTMapLiteral(parser0, (-1056));
      ASTNumberLiteral aSTNumberLiteral0 = new ASTNumberLiteral(parser0, 104);
      aSTMapLiteral0.jjtAddChild(aSTNumberLiteral0, 70);
      // Undeclared exception!
      try { 
        aSTMapLiteral0.toString();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.internal.Debugger"", e);
      }
  }"
2482,"    public Object jjtAccept(final ParserVisitor visitor, final Object data) {
        return visitor.visit(this, data);
    }","  public void test6()  throws Throwable  {
      ASTMapLiteral aSTMapLiteral0 = new ASTMapLiteral((Parser) null, (-360));
      // Undeclared exception!
      try { 
        aSTMapLiteral0.jjtAccept((ParserVisitor) null, (Object) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.parser.ASTMapLiteral"", e);
      }
  }"
2483,"    protected boolean isConstant(final boolean literal) {
        return constant;
    }","  public void test7()  throws Throwable  {
      ASTMapLiteral aSTMapLiteral0 = new ASTMapLiteral((Parser) null, 3351);
      JexlNode[] jexlNodeArray0 = new JexlNode[8];
      jexlNodeArray0[0] = (JexlNode) aSTMapLiteral0;
      ASTNENode aSTNENode0 = new ASTNENode(3351);
      jexlNodeArray0[1] = (JexlNode) aSTNENode0;
      aSTMapLiteral0.jjtSetChildren(jexlNodeArray0);
      aSTMapLiteral0.jjtClose();
}"
2484,"    public void jjtClose() {
        constant = true;
        for (int c = 0; c < jjtGetNumChildren() && constant; ++c) {
            final JexlNode child = jjtGetChild(c);
            if (child instanceof ASTMapEntry) {
                constant = child.isConstant(true);
            } else if (!child.isConstant()) {
                constant = false;
            }
        }
    }","  public void test8()  throws Throwable  {
      ASTMapLiteral aSTMapLiteral0 = new ASTMapLiteral(7);
      ASTJxltLiteral aSTJxltLiteral0 = new ASTJxltLiteral((Parser) null, 7);
      aSTMapLiteral0.jjtAddChild(aSTJxltLiteral0, 7);
      // Undeclared exception!
      try { 
        aSTMapLiteral0.jjtClose();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.parser.ASTMapLiteral"", e);
      }
  }"
2485,"    protected boolean isConstant(final boolean literal) {
        return constant;
    }","  public void test9()  throws Throwable  {
      ASTMapLiteral aSTMapLiteral0 = new ASTMapLiteral(0);
      aSTMapLiteral0.toString();
}"
2486,"    protected boolean isConstant(final boolean literal) {
        return constant;
    }","  public void test10()  throws Throwable  {
      ASTMapLiteral aSTMapLiteral0 = new ASTMapLiteral((Parser) null, 3351);
      boolean boolean0 = aSTMapLiteral0.isConstant(true);
}"
2487,"    public Object jjtAccept(final ParserVisitor visitor, final Object data) {
        return visitor.visit(this, data);
    }","  public void test0()  throws Throwable  {
      ASTVar aSTVar0 = new ASTVar(1);
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      FeatureController featureController0 = new FeatureController(jexlFeatures0);
      Object object0 = aSTVar0.jjtAccept(featureController0, (Object) null);
}"
2488,"    public Object jjtAccept(final ParserVisitor visitor, final Object data) {
        return visitor.visit(this, data);
    }","  public void test1()  throws Throwable  {
      ASTVar aSTVar0 = new ASTVar(1);
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      FeatureController featureController0 = new FeatureController(jexlFeatures0);
      JexlFeatures jexlFeatures1 = (JexlFeatures)aSTVar0.jjtAccept(featureController0, jexlFeatures0);
}"
2489,"    public Object jjtAccept(final ParserVisitor visitor, final Object data) {
        return visitor.visit(this, data);
    }","  public void test2()  throws Throwable  {
      ASTVar aSTVar0 = new ASTVar(0);
      Integer integer0 = new Integer(0);
      // Undeclared exception!
      try { 
        aSTVar0.jjtAccept((ParserVisitor) null, integer0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.parser.ASTVar"", e);
      }
  }"
2490,"    public ASTVar(final int id) {
        super(id);
    }","  public void test3()  throws Throwable  {
      Parser parser0 = new Parser("": variable is already declared"");
      ASTVar aSTVar0 = new ASTVar(parser0, (-3032));
}"
2491,"    public int getSymbolCount() {
        return locals == null? 0 : locals.getSymbolCount();
    }","  public void test0()  throws Throwable  {
      JexlLexicalNode jexlLexicalNode0 = new JexlLexicalNode(0);
      jexlLexicalNode0.declareSymbol(0);
      LexicalScope lexicalScope0 = jexlLexicalNode0.getLexicalScope();
}"
2492,"    public boolean declareSymbol(final int symbol) {
        if (locals == null) {
            locals  = new LexicalScope();
        }
        return locals.addSymbol(symbol);
    }","  public void test1()  throws Throwable  {
      JexlLexicalNode jexlLexicalNode0 = new JexlLexicalNode(0);
      jexlLexicalNode0.declareSymbol(0);
      boolean boolean0 = jexlLexicalNode0.declareSymbol(0);
}"
2493,"    public JexlLexicalNode(final int id) {
        super(id);
    }","  public void test2()  throws Throwable  {
      Parser parser0 = new Parser(""\""or\"""");
      JexlLexicalNode jexlLexicalNode0 = new JexlLexicalNode(parser0, 0);
}"
2494,"    public boolean hasSymbol(final int symbol) {
        return locals != null && locals.hasSymbol(symbol);
    }","  public void test3()  throws Throwable  {
      ASTJexlLambda aSTJexlLambda0 = new ASTJexlLambda((-18));
      aSTJexlLambda0.declareSymbol((-18));
      boolean boolean0 = aSTJexlLambda0.hasSymbol((-18));
}"
2495,"    public boolean hasSymbol(final int symbol) {
        return locals != null && locals.hasSymbol(symbol);
    }","  public void test4()  throws Throwable  {
      ASTJexlLambda aSTJexlLambda0 = new ASTJexlLambda((-18));
      aSTJexlLambda0.declareSymbol((-18));
      boolean boolean0 = aSTJexlLambda0.hasSymbol(1);
}"
2496,"    public boolean hasSymbol(final int symbol) {
        return locals != null && locals.hasSymbol(symbol);
    }","  public void test5()  throws Throwable  {
      ASTBlock aSTBlock0 = new ASTBlock((Parser) null, 763);
      boolean boolean0 = aSTBlock0.hasSymbol(763);
}"
2497,"    public int getSymbolCount() {
        return locals == null? 0 : locals.getSymbolCount();
    }","  public void test6()  throws Throwable  {
      ASTJexlLambda aSTJexlLambda0 = new ASTJexlLambda((-18));
      aSTJexlLambda0.declareSymbol((-18));
      int int0 = aSTJexlLambda0.getSymbolCount();
}"
2498,"    public int getSymbolCount() {
        return locals == null? 0 : locals.getSymbolCount();
    }","  public void test7()  throws Throwable  {
      ASTJexlLambda aSTJexlLambda0 = new ASTJexlLambda((-18));
      aSTJexlLambda0.declareSymbol((-18));
      boolean boolean0 = aSTJexlLambda0.declareSymbol(1);
}"
2499,"    public boolean declareSymbol(final int symbol) {
        if (locals == null) {
            locals  = new LexicalScope();
        }
        return locals.addSymbol(symbol);
    }","  public void test8()  throws Throwable  {
      ASTJexlLambda aSTJexlLambda0 = new ASTJexlLambda((-18));
      aSTJexlLambda0.declareSymbol((-18));
      boolean boolean0 = aSTJexlLambda0.declareSymbol(1);
}"
2500,"    public int getSymbolCount() {
        return locals == null? 0 : locals.getSymbolCount();
    }","  public void test9()  throws Throwable  {
      ASTBlock aSTBlock0 = new ASTBlock((Parser) null, 763);
      int int0 = aSTBlock0.getSymbolCount();
}"
2501,"    public LexicalScope getLexicalScope() {
        return locals;
    }","  public void test10()  throws Throwable  {
      ASTJexlLambda aSTJexlLambda0 = new ASTJexlLambda((-18));
      LexicalScope lexicalScope0 = aSTJexlLambda0.getLexicalScope();
}"
2502,"    public String toString() {
        return this.literal;
    }","  public void test0()  throws Throwable  {
      ASTJxltLiteral aSTJxltLiteral0 = new ASTJxltLiteral(1);
      aSTJxltLiteral0.setLiteral(""org.apache.commons.jexl3.parser.ASTJxltLiteral"");
      String string0 = aSTJxltLiteral0.toString();
}"
2503,"    public String toString() {
        return this.literal;
    }","  public void test1()  throws Throwable  {
      ASTJxltLiteral aSTJxltLiteral0 = new ASTJxltLiteral(0);
      aSTJxltLiteral0.setLiteral("""");
      String string0 = aSTJxltLiteral0.toString();
}"
2504,"    public Object jjtAccept(final ParserVisitor visitor, final Object data) {
        return visitor.visit(this, data);
    }","  public void test2()  throws Throwable  {
      ASTJxltLiteral aSTJxltLiteral0 = new ASTJxltLiteral(0);
      OperatorController operatorController0 = OperatorController.INSTANCE;
      Object object0 = aSTJxltLiteral0.jjtAccept(operatorController0, operatorController0);
}"
2505,"    public String getLiteral() {
        return this.literal;
    }","  public void test3()  throws Throwable  {
      ASTJxltLiteral aSTJxltLiteral0 = new ASTJxltLiteral(1);
      aSTJxltLiteral0.setLiteral(""org.apache.commons.jexl3.parser.ASTJxltLiteral"");
      String string0 = aSTJxltLiteral0.getLiteral();
}"
2506,"    public String getLiteral() {
        return this.literal;
    }","  public void test4()  throws Throwable  {
      ASTJxltLiteral aSTJxltLiteral0 = new ASTJxltLiteral(0);
      aSTJxltLiteral0.setLiteral("""");
      String string0 = aSTJxltLiteral0.getLiteral();
}"
2507,"    public String toString() {
        return this.literal;
    }","  public void test5()  throws Throwable  {
      ASTJxltLiteral aSTJxltLiteral0 = new ASTJxltLiteral(374);
      String string0 = aSTJxltLiteral0.toString();
}"
2508,"    public Object jjtAccept(final ParserVisitor visitor, final Object data) {
        return visitor.visit(this, data);
    }","  public void test6()  throws Throwable  {
      ASTJxltLiteral aSTJxltLiteral0 = new ASTJxltLiteral(374);
      JexlFeatures jexlFeatures0 = JexlEngine.DEFAULT_FEATURES;
      FeatureController featureController0 = new FeatureController(jexlFeatures0);
      Object object0 = aSTJxltLiteral0.jjtAccept(featureController0, (Object) null);
      // Undeclared exception!
      try { 
        aSTJxltLiteral0.jjtAccept((ParserVisitor) null, object0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.parser.ASTJxltLiteral"", e);
      }
  }"
2509,"    public String getLiteral() {
        return this.literal;
    }","  public void test7()  throws Throwable  {
      ASTJxltLiteral aSTJxltLiteral0 = new ASTJxltLiteral(15);
      String string0 = aSTJxltLiteral0.getLiteral();
}"
2510,"    ASTJxltLiteral(final int id) {
        super(id);
    }","  public void test8()  throws Throwable  {
      ASTJxltLiteral aSTJxltLiteral0 = new ASTJxltLiteral((Parser) null, 1868);
}"
2511,"    public String toString() {
        final Debugger dbg = new Debugger();
        return dbg.data(this);
    }","  public void test0()  throws Throwable  {
      ASTSetLiteral aSTSetLiteral0 = new ASTSetLiteral((-1385));
      JexlNode[] jexlNodeArray0 = new JexlNode[4];
      jexlNodeArray0[0] = (JexlNode) aSTSetLiteral0;
      jexlNodeArray0[1] = (JexlNode) aSTSetLiteral0;
      jexlNodeArray0[2] = (JexlNode) aSTSetLiteral0;
      jexlNodeArray0[3] = (JexlNode) aSTSetLiteral0;
      aSTSetLiteral0.jjtSetChildren(jexlNodeArray0);
      aSTSetLiteral0.jjtClose();
      // Undeclared exception!
      try { 
        aSTSetLiteral0.toString();
        fail(""Expecting exception: StackOverflowError"");
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
2512,"    protected boolean isConstant(final boolean literal) {
        return constant;
    }","  public void test1()  throws Throwable  {
      ASTSetLiteral aSTSetLiteral0 = new ASTSetLiteral(0);
}"
2513,"    protected boolean isConstant(final boolean literal) {
        return constant;
    }","  public void test2()  throws Throwable  {
      ASTSetLiteral aSTSetLiteral0 = new ASTSetLiteral(0);
      JexlFeatures jexlFeatures0 = JexlEngine.DEFAULT_FEATURES;
      FeatureController featureController0 = new FeatureController(jexlFeatures0);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      aSTSetLiteral0.jjtClose();
      Locale.FilteringMode.values();
      aSTSetLiteral0.jjtAccept(featureController0, locale_FilteringMode0);
      boolean boolean0 = aSTSetLiteral0.isConstant(true);
}"
2514,"    protected boolean isConstant(final boolean literal) {
        return constant;
    }","  public void test3()  throws Throwable  {
      ASTSetLiteral aSTSetLiteral0 = new ASTSetLiteral(0);
      JexlFeatures jexlFeatures0 = JexlEngine.DEFAULT_FEATURES;
      FeatureController featureController0 = new FeatureController(jexlFeatures0);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      aSTSetLiteral0.jjtClose();
      Locale.FilteringMode.values();
      aSTSetLiteral0.jjtAccept(featureController0, locale_FilteringMode0);
      boolean boolean0 = aSTSetLiteral0.isConstant(true);
}"
2515,"    protected boolean isConstant(final boolean literal) {
        return constant;
    }","  public void test4()  throws Throwable  {
      ASTSetLiteral aSTSetLiteral0 = new ASTSetLiteral((-1));
      JexlFeatures jexlFeatures0 = JexlEngine.DEFAULT_FEATURES;
      FeatureController featureController0 = new FeatureController(jexlFeatures0);
      Integer integer0 = new Integer(12);
      aSTSetLiteral0.jjtAccept(featureController0, integer0);
}"
2516,"    protected boolean isConstant(final boolean literal) {
        return constant;
    }","  public void test5()  throws Throwable  {
      StringProvider stringProvider0 = new StringProvider("""");
      Parser parser0 = new Parser(stringProvider0);
      ASTSetLiteral aSTSetLiteral0 = new ASTSetLiteral(parser0, 0);
      FeatureController featureController0 = parser0.featureController;
      aSTSetLiteral0.jjtGetValue();
      aSTSetLiteral0.childrenAccept(featureController0, (Object) null);
      aSTSetLiteral0.jjtAccept(featureController0, (Object) null);
}"
2517,"    public void jjtClose() {
        constant = true;
        for (int c = 0; c < jjtGetNumChildren() && constant; ++c) {
            final JexlNode child = jjtGetChild(c);
            if (!child.isConstant()) {
                constant = false;
            }
        }
    }","  public void test6()  throws Throwable  {
      ASTSetLiteral aSTSetLiteral0 = new ASTSetLiteral(60);
      aSTSetLiteral0.jjtClose();
      aSTSetLiteral0.isLocalVar();
      aSTSetLiteral0.jjtSetChildren((JexlNode[]) null);
      boolean boolean0 = false;
      aSTSetLiteral0.isSafeLhs(false);
      aSTSetLiteral0.toString();
      aSTSetLiteral0.isSafeLhs(false);
      ASTAssignment aSTAssignment0 = new ASTAssignment(60);
      aSTSetLiteral0.jjtAddChild(aSTAssignment0, 1080);
      // Undeclared exception!
      try { 
        aSTSetLiteral0.jjtClose();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.parser.ASTSetLiteral"", e);
      }
  }"
2518,"    public String toString() {
        final Debugger dbg = new Debugger();
        return dbg.data(this);
    }","  public void test7()  throws Throwable  {
      ASTSetLiteral aSTSetLiteral0 = new ASTSetLiteral(0);
      aSTSetLiteral0.clearCache();
      JexlLexicalNode jexlLexicalNode0 = new JexlLexicalNode((-1734));
      jexlLexicalNode0.jjtClose();
      jexlLexicalNode0.clearCache();
      aSTSetLiteral0.jjtAddChild(jexlLexicalNode0, 112);
      // Undeclared exception!
      try { 
        aSTSetLiteral0.toString();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.internal.Debugger"", e);
      }
  }"
2519,"    public Object jjtAccept(final ParserVisitor visitor, final Object data) {
        return visitor.visit(this, data);
    }","  public void test8()  throws Throwable  {
      Parser parser0 = new Parser(""org.apache.commons.jexl3.parser.ASTSetLiteral"");
      parser0.ReInit(""org.apache.commons.jexl3.parser.ASTSetLiteral"");
      ASTSetLiteral aSTSetLiteral0 = new ASTSetLiteral(parser0, (-1));
      ParserVisitor parserVisitor0 = null;
      // Undeclared exception!
      try { 
        aSTSetLiteral0.jjtAccept((ParserVisitor) null, ""org.apache.commons.jexl3.parser.ASTSetLiteral"");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.parser.ASTSetLiteral"", e);
      }
  }"
2520,"    protected boolean isConstant(final boolean literal) {
        return constant;
    }","  public void test9()  throws Throwable  {
      ASTSetLiteral aSTSetLiteral0 = new ASTSetLiteral((-1227));
      OperatorController operatorController0 = new OperatorController();
      aSTSetLiteral0.jjtAccept(operatorController0, operatorController0);
}"
2521,"    protected boolean isConstant(final boolean literal) {
        return constant;
    }","  public void test10()  throws Throwable  {
      Parser parser0 = new Parser("""");
      ASTSetLiteral aSTSetLiteral0 = new ASTSetLiteral(parser0, 0);
}"
2522,,"  public void test11()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
  }"
2523,"    protected boolean isConstant(final boolean literal) {
        return constant;
    }","  public void test12()  throws Throwable  {
      ASTSetLiteral aSTSetLiteral0 = new ASTSetLiteral(0);
      aSTSetLiteral0.toString();
}"
2524,"    protected boolean isConstant(final boolean literal) {
        return constant;
    }","  public void test13()  throws Throwable  {
      ASTSetLiteral aSTSetLiteral0 = new ASTSetLiteral(0);
      aSTSetLiteral0.toString();
      aSTSetLiteral0.jjtClose();
}"
2525,"    protected boolean isConstant(final boolean literal) {
        return constant;
    }","  public void test14()  throws Throwable  {
      ASTSetLiteral aSTSetLiteral0 = new ASTSetLiteral(669);
      JexlNode[] jexlNodeArray0 = new JexlNode[7];
      jexlNodeArray0[0] = (JexlNode) aSTSetLiteral0;
      jexlNodeArray0[1] = (JexlNode) aSTSetLiteral0;
      jexlNodeArray0[2] = (JexlNode) aSTSetLiteral0;
      jexlNodeArray0[3] = (JexlNode) aSTSetLiteral0;
      jexlNodeArray0[4] = (JexlNode) aSTSetLiteral0;
      ASTSetAddNode aSTSetAddNode0 = new ASTSetAddNode((Parser) null, 669);
      jexlNodeArray0[5] = (JexlNode) aSTSetAddNode0;
      jexlNodeArray0[6] = (JexlNode) aSTSetLiteral0;
      aSTSetLiteral0.jjtSetChildren(jexlNodeArray0);
      aSTSetLiteral0.jexlInfo();
      aSTSetLiteral0.isConstant(false);
      aSTSetLiteral0.jjtClose();
}"
2526,"    ASTSetLiteral(final int id) {
        super(id);
    }","  public void test15()  throws Throwable  {
      Parser parser0 = new Parser("""");
      ASTSetLiteral aSTSetLiteral0 = new ASTSetLiteral(parser0, (-476));
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer((-476));
      Object object0 = new Object();
  }"
2527,"    public int jjtGetNumChildren() {
        return (children == null) ? 0 : children.length;
    }","  public void test0()  throws Throwable  {
      ASTNSWNode aSTNSWNode0 = new ASTNSWNode(22);
      aSTNSWNode0.jjtAddChild(aSTNSWNode0, 0);
      aSTNSWNode0.jjtAddChild(aSTNSWNode0, 1);
}"
2528,"    public int getId() {
        return id;
    }","  public void test1()  throws Throwable  {
      ASTIdentifierAccessJxlt aSTIdentifierAccessJxlt0 = new ASTIdentifierAccessJxlt(0);
      aSTIdentifierAccessJxlt0.setIdentifier("""");
      aSTIdentifierAccessJxlt0.toString("""");
}"
2529,"    public int getId() {
        return id;
    }","  public void test2()  throws Throwable  {
      ASTIdentifierAccessJxlt aSTIdentifierAccessJxlt0 = new ASTIdentifierAccessJxlt(0);
      aSTIdentifierAccessJxlt0.toString();
}"
2530,"    public int getId() {
        return id;
    }","  public void test3()  throws Throwable  {
      ASTIdentifierAccessJxlt aSTIdentifierAccessJxlt0 = new ASTIdentifierAccessJxlt(0);
      aSTIdentifierAccessJxlt0.setIdentifier("""");
      aSTIdentifierAccessJxlt0.toString();
}"
2531,"    public int getId() {
        return id;
    }","  public void test4()  throws Throwable  {
      ASTNSWNode aSTNSWNode0 = new ASTNSWNode(0);
      aSTNSWNode0.jjtSetValue(aSTNSWNode0);
      ASTNSWNode aSTNSWNode1 = (ASTNSWNode)aSTNSWNode0.jjtGetValue();
}"
2532,"    public int jjtGetNumChildren() {
        return (children == null) ? 0 : children.length;
    }","  public void test5()  throws Throwable  {
      ASTIdentifierAccessJxlt aSTIdentifierAccessJxlt0 = new ASTIdentifierAccessJxlt(0);
      Parser parser0 = new Parser(""*D"");
      ASTJexlScript aSTJexlScript0 = new ASTJexlScript(parser0, 0);
      aSTIdentifierAccessJxlt0.jjtAddChild(aSTJexlScript0, 627);
      aSTJexlScript0.jjtSetParent(aSTIdentifierAccessJxlt0);
}"
2533,"    public int jjtGetNumChildren() {
        return (children == null) ? 0 : children.length;
    }","  public void test6()  throws Throwable  {
      ASTIdentifierAccessJxlt aSTIdentifierAccessJxlt0 = new ASTIdentifierAccessJxlt(0);
      Parser parser0 = new Parser(""*D"");
      ASTJexlScript aSTJexlScript0 = new ASTJexlScript(parser0, 0);
      aSTIdentifierAccessJxlt0.jjtAddChild(aSTJexlScript0, 627);
      aSTJexlScript0.jjtSetParent(aSTIdentifierAccessJxlt0);
      JexlNode jexlNode0 = aSTJexlScript0.jjtGetParent();
}"
2534,"    public int getId() {
        return id;
    }","  public void test7()  throws Throwable  {
      ASTIdentifierAccessJxlt aSTIdentifierAccessJxlt0 = new ASTIdentifierAccessJxlt(0);
      Parser parser0 = new Parser(""*D"");
      ASTDivNode aSTDivNode0 = new ASTDivNode(parser0, 8);
      aSTIdentifierAccessJxlt0.jjtSetParent(aSTDivNode0);
      JexlNode jexlNode0 = aSTIdentifierAccessJxlt0.jjtGetParent();
}"
2535,"    public int getId() {
        return id;
    }","  public void test8()  throws Throwable  {
      ASTEmptyFunction aSTEmptyFunction0 = new ASTEmptyFunction((-160));
      ASTSetDivNode aSTSetDivNode0 = new ASTSetDivNode((-160));
      aSTEmptyFunction0.jjtSetParent(aSTSetDivNode0);
      JexlNode jexlNode0 = aSTEmptyFunction0.jjtGetParent();
}"
2536,"    public int getId() {
        return id;
    }","  public void test9()  throws Throwable  {
      ASTIdentifierAccessJxlt aSTIdentifierAccessJxlt0 = new ASTIdentifierAccessJxlt(0);
      Parser parser0 = new Parser("""");
      ASTJexlScript aSTJexlScript0 = new ASTJexlScript(parser0, 0);
      aSTIdentifierAccessJxlt0.jjtSetFirstToken(parser0.jj_nt);
      aSTJexlScript0.jjtSetParent(aSTIdentifierAccessJxlt0);
      JexlNode jexlNode0 = aSTJexlScript0.jjtGetParent();
}"
2537,"    public int jjtGetNumChildren() {
        return (children == null) ? 0 : children.length;
    }","  public void test10()  throws Throwable  {
      ASTIdentifierAccessJxlt aSTIdentifierAccessJxlt0 = new ASTIdentifierAccessJxlt(0);
      Parser parser0 = new Parser(""*D"");
      ASTJexlScript aSTJexlScript0 = new ASTJexlScript(parser0, 0);
      aSTIdentifierAccessJxlt0.jjtAddChild(aSTJexlScript0, 627);
      aSTIdentifierAccessJxlt0.jjtGetChild(0);
}"
2538,"    public int jjtGetNumChildren() {
        return (children == null) ? 0 : children.length;
    }","  public void test11()  throws Throwable  {
      ASTUnaryMinusNode aSTUnaryMinusNode0 = new ASTUnaryMinusNode(831);
      Parser parser0 = new Parser(""[?v9)Hf(y3"");
      ASTBitwiseComplNode aSTBitwiseComplNode0 = new ASTBitwiseComplNode(parser0, 141);
      aSTUnaryMinusNode0.jjtAddChild(aSTBitwiseComplNode0, 141);
      aSTUnaryMinusNode0.jjtGetChild(141);
}"
2539,"    public int getId() {
        return id;
    }","  public void test12()  throws Throwable  {
      Parser parser0 = new Parser("""");
      ASTRegexLiteral aSTRegexLiteral0 = new ASTRegexLiteral(parser0, (-2670));
      JexlNode[] jexlNodeArray0 = new JexlNode[4];
      jexlNodeArray0[0] = (JexlNode) aSTRegexLiteral0;
      ASTUnaryMinusNode aSTUnaryMinusNode0 = new ASTUnaryMinusNode(parser0, 0);
      aSTUnaryMinusNode0.jjtSetChildren(jexlNodeArray0);
      JexlNode jexlNode0 = aSTUnaryMinusNode0.jjtGetChild(0);
}"
2540,"    public int jjtGetNumChildren() {
        return (children == null) ? 0 : children.length;
    }","  public void test13()  throws Throwable  {
      ASTNSWNode aSTNSWNode0 = new ASTNSWNode(0);
      aSTNSWNode0.jjtAddChild(aSTNSWNode0, 0);
      aSTNSWNode0.jjtGetChild(0);
}"
2541,"    public int getId() {
        return id;
    }","  public void test14()  throws Throwable  {
      ASTReferenceExpression aSTReferenceExpression0 = new ASTReferenceExpression(0);
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      FeatureController featureController0 = new FeatureController(jexlFeatures0);
      aSTReferenceExpression0.jjtAccept(featureController0, (Object) null);
}"
2542,"    public int getId() {
        return id;
    }","  public void test15()  throws Throwable  {
      ASTConstructorNode aSTConstructorNode0 = new ASTConstructorNode(0);
      OperatorController operatorController0 = OperatorController.INSTANCE;
      aSTConstructorNode0.jjtAccept(operatorController0, operatorController0);
}"
2543,"    public int getId() {
        return id;
    }","  public void test16()  throws Throwable  {
      ASTModNode aSTModNode0 = new ASTModNode(40);
      int int0 = aSTModNode0.getId();
}"
2544,"    public int getId() {
        return id;
    }","  public void test17()  throws Throwable  {
      ASTIdentifierAccess aSTIdentifierAccess0 = new ASTIdentifierAccess((Parser) null, (-1811));
      int int0 = aSTIdentifierAccess0.getId();
}"
2545,"    public int getId() {
        return id;
    }","  public void test18()  throws Throwable  {
      ASTAmbiguous aSTAmbiguous0 = new ASTAmbiguous(1397);
      aSTAmbiguous0.childrenAccept((ParserVisitor) null, (Object) null);
}"
2546,"    public String toString() {
        return ParserTreeConstants.jjtNodeName[id];
    }","  public void test19()  throws Throwable  {
      ASTJexlLambda aSTJexlLambda0 = new ASTJexlLambda((-553));
      // Undeclared exception!
      try { 
        aSTJexlLambda0.toString("""");
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -553
         //
         verifyException(""org.apache.commons.jexl3.parser.SimpleNode"", e);
      }
  }"
2547,"    public String toString() {
        return ParserTreeConstants.jjtNodeName[id];
    }","  public void test20()  throws Throwable  {
      ASTSetLiteral aSTSetLiteral0 = new ASTSetLiteral(0);
      aSTSetLiteral0.jjtAddChild((Node) null, 1);
      // Undeclared exception!
      try { 
        aSTSetLiteral0.toString();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.internal.Debugger"", e);
      }
  }"
2548,"    public String toString() {
        return ParserTreeConstants.jjtNodeName[id];
    }","  public void test21()  throws Throwable  {
      StringProvider stringProvider0 = new StringProvider(""\""do\"""");
      Parser parser0 = new Parser(stringProvider0);
      ASTAssignment aSTAssignment0 = new ASTAssignment(parser0, 3024);
      // Undeclared exception!
      try { 
        aSTAssignment0.toString();
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3024
         //
         verifyException(""org.apache.commons.jexl3.parser.SimpleNode"", e);
      }
  }"
2549,"    public void jjtSetParent(final Node n) {
        parent = (JexlNode) n;
    }","  public void test22()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(82);
      ASTBitwiseAndNode aSTBitwiseAndNode0 = new ASTBitwiseAndNode(Integer.MIN_VALUE);
      // Undeclared exception!
      try { 
        aSTBitwiseAndNode0.jjtSetParent(simpleNode0);
        fail(""Expecting exception: ClassCastException"");
      } catch(ClassCastException e) {
         //
         // org.apache.commons.jexl3.parser.SimpleNode cannot be cast to org.apache.commons.jexl3.parser.JexlNode
         //
         verifyException(""org.apache.commons.jexl3.parser.SimpleNode"", e);
      }
  }"
2550,"    public JexlNode jjtGetChild(final int i) {
        return children[i];
    }","  public void test23()  throws Throwable  {
      ASTRangeNode aSTRangeNode0 = new ASTRangeNode(1261);
      JexlNode[] jexlNodeArray0 = new JexlNode[4];
      jexlNodeArray0[0] = (JexlNode) aSTRangeNode0;
      aSTRangeNode0.jjtSetChildren(jexlNodeArray0);
      // Undeclared exception!
      try { 
        jexlNodeArray0[0].jjtGetChild(1677);
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
2551,"    public void jjtAddChild(final Node n, final int i) {
        if (children == null) {
            children = new JexlNode[i + 1];
        } else if (i >= children.length) {
            final JexlNode[] c = new JexlNode[i + 1];
            System.arraycopy(children, 0, c, 0, children.length);
            children = c;
        }
        children[i] = (JexlNode) n;
    }","  public void test24()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""X&xasWaGE-c6F>)#1Gv"");
      StreamProvider streamProvider0 = new StreamProvider(stringReader0);
      Parser parser0 = new Parser(streamProvider0);
      ASTSetAndNode aSTSetAndNode0 = new ASTSetAndNode(parser0, (-367));
      ASTSubNode aSTSubNode0 = new ASTSubNode(123);
      // Undeclared exception!
      try { 
        aSTSetAndNode0.jjtAddChild(aSTSubNode0, (-367));
        fail(""Expecting exception: NegativeArraySizeException"");
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.parser.SimpleNode"", e);
      }
  }"
2552,"    public void jjtAddChild(final Node n, final int i) {
        if (children == null) {
            children = new JexlNode[i + 1];
        } else if (i >= children.length) {
            final JexlNode[] c = new JexlNode[i + 1];
            System.arraycopy(children, 0, c, 0, children.length);
            children = c;
        }
        children[i] = (JexlNode) n;
    }","  public void test25()  throws Throwable  {
      ASTMulNode aSTMulNode0 = new ASTMulNode((Parser) null, 2798);
      SimpleNode simpleNode0 = new SimpleNode((Parser) null, 2798);
      // Undeclared exception!
      try { 
        aSTMulNode0.jjtAddChild(simpleNode0, 2798);
        fail(""Expecting exception: ClassCastException"");
      } catch(ClassCastException e) {
         //
         // org.apache.commons.jexl3.parser.SimpleNode cannot be cast to org.apache.commons.jexl3.parser.JexlNode
         //
         verifyException(""org.apache.commons.jexl3.parser.SimpleNode"", e);
      }
  }"
2553,"    public void jjtAddChild(final Node n, final int i) {
        if (children == null) {
            children = new JexlNode[i + 1];
        } else if (i >= children.length) {
            final JexlNode[] c = new JexlNode[i + 1];
            System.arraycopy(children, 0, c, 0, children.length);
            children = c;
        }
        children[i] = (JexlNode) n;
    }","  public void test26()  throws Throwable  {
      ASTDivNode aSTDivNode0 = new ASTDivNode(0);
      Parser parser0 = new Parser("":.=Qf.w81C-K,{p"");
      ASTEQNode aSTEQNode0 = new ASTEQNode(parser0, 0);
      // Undeclared exception!
      try { 
        aSTDivNode0.jjtAddChild(aSTEQNode0, (-1));
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException(""org.apache.commons.jexl3.parser.SimpleNode"", e);
      }
  }"
2554,"    public void dump(final String prefix) {
        System.out.println(toString(prefix));
        if (children != null) {
            for (final SimpleNode n : children) {
                if (n != null) {
                    n.dump(prefix + "" "");
                }
            }
        }
    }","  public void test27()  throws Throwable  {
      ASTSetModNode aSTSetModNode0 = new ASTSetModNode((-1871));
      // Undeclared exception!
      try { 
        aSTSetModNode0.dump("""");
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1871
         //
         verifyException(""org.apache.commons.jexl3.parser.SimpleNode"", e);
      }
  }"
2555,"    public int getId() {
        return id;
    }","  public void test28()  throws Throwable  {
      ASTConstructorNode aSTConstructorNode0 = new ASTConstructorNode(0);
      aSTConstructorNode0.dump("""");
}"
2556,"    public int getId() {
        return id;
    }","  public void test29()  throws Throwable  {
      Parser parser0 = new Parser("""");
      ASTJexlScript aSTJexlScript0 = new ASTJexlScript(parser0, 0);
      aSTJexlScript0.jjtGetParent();
}"
2557,"    public int getId() {
        return id;
    }","  public void test30()  throws Throwable  {
      ASTNSWNode aSTNSWNode0 = new ASTNSWNode(0);
      aSTNSWNode0.jjtGetValue();
}"
2558,"    public String toString() {
        return ParserTreeConstants.jjtNodeName[id];
    }","  public void test31()  throws Throwable  {
      ASTNSWNode aSTNSWNode0 = new ASTNSWNode(0);
      String string0 = aSTNSWNode0.toString(""JexlScript"");
}"
2559,"    public int getId() {
        return id;
    }","  public void test32()  throws Throwable  {
      ASTNSWNode aSTNSWNode0 = new ASTNSWNode(22);
      String string0 = aSTNSWNode0.toString();
}"
2560,"    public String toString() {
        return ParserTreeConstants.jjtNodeName[id];
    }","  public void test33()  throws Throwable  {
      ASTNSWNode aSTNSWNode0 = new ASTNSWNode(22);
      String string0 = aSTNSWNode0.toString();
}"
2561,"    public int getId() {
        return id;
    }","  public void test34()  throws Throwable  {
      ASTNSWNode aSTNSWNode0 = new ASTNSWNode(22);
      JexlNode[] jexlNodeArray0 = new JexlNode[2];
      jexlNodeArray0[0] = (JexlNode) aSTNSWNode0;
      jexlNodeArray0[1] = (JexlNode) aSTNSWNode0;
      aSTNSWNode0.jjtSetChildren(jexlNodeArray0);
      OperatorController operatorController0 = new OperatorController();
      ASTNSWNode aSTNSWNode1 = (ASTNSWNode)aSTNSWNode0.childrenAccept(operatorController0, aSTNSWNode0);
}"
2562,"    public int getId() {
        return id;
    }","  public void test35()  throws Throwable  {
      Parser parser0 = new Parser(""*D"");
      ASTJexlScript aSTJexlScript0 = new ASTJexlScript(parser0, 0);
      int int0 = aSTJexlScript0.jjtGetNumChildren();
}"
2563,"    public int jjtGetNumChildren() {
        return (children == null) ? 0 : children.length;
    }","  public void test36()  throws Throwable  {
      Parser parser0 = new Parser(""*D"");
      ASTJexlScript aSTJexlScript0 = new ASTJexlScript(parser0, 0);
      int int0 = aSTJexlScript0.jjtGetNumChildren();
}"
2564,"    public int jjtGetNumChildren() {
        return (children == null) ? 0 : children.length;
    }","  public void test37()  throws Throwable  {
      ASTNSWNode aSTNSWNode0 = new ASTNSWNode(22);
      JexlNode[] jexlNodeArray0 = new JexlNode[2];
      jexlNodeArray0[0] = (JexlNode) aSTNSWNode0;
      aSTNSWNode0.jjtSetChildren(jexlNodeArray0);
}"
2565,"    public int jjtGetNumChildren() {
        return (children == null) ? 0 : children.length;
    }","  public void test38()  throws Throwable  {
      ASTNSWNode aSTNSWNode0 = new ASTNSWNode(22);
      JexlNode[] jexlNodeArray0 = new JexlNode[2];
      jexlNodeArray0[0] = (JexlNode) aSTNSWNode0;
      aSTNSWNode0.jjtSetChildren(jexlNodeArray0);
      int int0 = jexlNodeArray0[0].jjtGetNumChildren();
}"
2566,"    public int jjtGetNumChildren() {
        return (children == null) ? 0 : children.length;
    }","  public void test39()  throws Throwable  {
      ASTNullLiteral aSTNullLiteral0 = new ASTNullLiteral((-1));
      ASTAnnotation aSTAnnotation0 = new ASTAnnotation(830);
      aSTNullLiteral0.jjtAddChild(aSTAnnotation0, 830);
      ASTNumberLiteral aSTNumberLiteral0 = new ASTNumberLiteral((-1));
      aSTNullLiteral0.jjtAddChild(aSTNumberLiteral0, 57);
}"
2567,"    public void jjtAddChild(final Node n, final int i) {
        if (children == null) {
            children = new JexlNode[i + 1];
        } else if (i >= children.length) {
            final JexlNode[] c = new JexlNode[i + 1];
            System.arraycopy(children, 0, c, 0, children.length);
            children = c;
        }
        children[i] = (JexlNode) n;
    }","  public void test40()  throws Throwable  {
      ASTNSWNode aSTNSWNode0 = new ASTNSWNode(22);
      JexlNode[] jexlNodeArray0 = new JexlNode[2];
      jexlNodeArray0[1] = (JexlNode) aSTNSWNode0;
      aSTNSWNode0.jjtSetChildren(jexlNodeArray0);
      jexlNodeArray0[1].jjtAddChild(jexlNodeArray0[0], 22);
}"
2568,"    public int getId() {
        return id;
    }","  public void test41()  throws Throwable  {
      Parser parser0 = new Parser(""*D"");
      ASTJexlScript aSTJexlScript0 = new ASTJexlScript(parser0, 0);
      int int0 = aSTJexlScript0.getId();
}"
2569,"    public JexlNode jjtGetChild(final int i) {
        return children[i];
    }","  public void test42()  throws Throwable  {
      Parser parser0 = new Parser(""*D"");
      ASTJexlScript aSTJexlScript0 = new ASTJexlScript(parser0, 0);
      // Undeclared exception!
      try { 
        aSTJexlScript0.jjtGetChild(14);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
2570,"    public int getId() {
        return id;
    }","  public void test43()  throws Throwable  {
      ASTNSWNode aSTNSWNode0 = new ASTNSWNode(22);
      aSTNSWNode0.jjtClose();
}"
2571,"    public Object jjtAccept(final ParserVisitor visitor, final Object data) {
        return visitor.visit(this, data);
    }","  public void test44()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(0);
      OperatorController operatorController0 = OperatorController.INSTANCE;
      ASTExtendedLiteral aSTExtendedLiteral0 = new ASTExtendedLiteral((Parser) null, 0);
      // Undeclared exception!
      try { 
        simpleNode0.jjtAccept(operatorController0, aSTExtendedLiteral0);
        fail(""Expecting exception: UnsupportedOperationException"");
      } catch(UnsupportedOperationException e) {
         //
         // SimpleNode : not supported yet.
         //
         verifyException(""org.apache.commons.jexl3.parser.ParserVisitor"", e);
      }
  }"
2572,"    public int getId() {
        return id;
    }","  public void test45()  throws Throwable  {
      ASTNSWNode aSTNSWNode0 = new ASTNSWNode(22);
      aSTNSWNode0.jjtOpen();
}"
2573,"    public Object childrenAccept(final ParserVisitor visitor, final Object data) {
        if (children != null) {
            for (final JexlNode child : children) {
                child.jjtAccept(visitor, data);
            }
        }
        return data;
    }","  public void test46()  throws Throwable  {
      ASTNSWNode aSTNSWNode0 = new ASTNSWNode(22);
      JexlNode[] jexlNodeArray0 = new JexlNode[2];
      aSTNSWNode0.jjtSetChildren(jexlNodeArray0);
      OperatorController operatorController0 = new OperatorController();
      // Undeclared exception!
      try { 
        aSTNSWNode0.childrenAccept(operatorController0, aSTNSWNode0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.parser.SimpleNode"", e);
      }
  }"
2574,"    public int jjtGetNumChildren() {
        return (children == null) ? 0 : children.length;
    }","  public void test47()  throws Throwable  {
      ASTIdentifierAccessJxlt aSTIdentifierAccessJxlt0 = new ASTIdentifierAccessJxlt(0);
      Parser parser0 = new Parser(""*D"");
      ASTJexlScript aSTJexlScript0 = new ASTJexlScript(parser0, 0);
      aSTIdentifierAccessJxlt0.jjtAddChild(aSTJexlScript0, 627);
      aSTIdentifierAccessJxlt0.dump(""*D"");
}"
2575,"    public Object jjtAccept(final ParserVisitor visitor, final Object data) {
        return visitor.visit(this, data);
    }","  public void test48()  throws Throwable  {
      ASTAmbiguous aSTAmbiguous0 = new ASTAmbiguous(1397);
      ASTAssignment aSTAssignment0 = new ASTAssignment((-603));
      // Undeclared exception!
      try { 
        aSTAmbiguous0.jjtAccept((ParserVisitor) null, aSTAssignment0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.parser.ASTAmbiguous"", e);
      }
  }"
2576,"    public Object jjtAccept(final ParserVisitor visitor, final Object data) {
        return visitor.visit(this, data);
    }","  public void test0()  throws Throwable  {
      Parser parser0 = new Parser("""");
      ASTReferenceExpression aSTReferenceExpression0 = new ASTReferenceExpression(parser0, 47);
      FeatureController featureController0 = parser0.featureController;
      Object object0 = aSTReferenceExpression0.jjtAccept(featureController0, (Object) null);
}"
2577,"    public Object jjtAccept(final ParserVisitor visitor, final Object data) {
        return visitor.visit(this, data);
    }","  public void test1()  throws Throwable  {
      Parser parser0 = new Parser(""W"");
      ASTReferenceExpression aSTReferenceExpression0 = new ASTReferenceExpression(parser0, 76);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      // Undeclared exception!
      try { 
        aSTReferenceExpression0.jjtAccept((ParserVisitor) null, sequenceInputStream0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.parser.ASTReferenceExpression"", e);
      }
  }"
2578,"    public Object jjtAccept(final ParserVisitor visitor, final Object data) {
        return visitor.visit(this, data);
    }","  public void test2()  throws Throwable  {
      Parser parser0 = new Parser("""");
      ASTReferenceExpression aSTReferenceExpression0 = new ASTReferenceExpression(parser0, 47);
      FeatureController featureController0 = parser0.featureController;
      Object object0 = aSTReferenceExpression0.jjtAccept(featureController0, """");
}"
2579,"    ASTReferenceExpression(final int id) {
        super(id);
    }","  public void test3()  throws Throwable  {
      ASTReferenceExpression aSTReferenceExpression0 = new ASTReferenceExpression((-1));
      OperatorController operatorController0 = OperatorController.INSTANCE;
      Boolean boolean0 = new Boolean(""\""^\"""");
      boolean boolean1 = operatorController0.control(aSTReferenceExpression0, boolean0);
}"
2580,"    ASTIdentifierAccess(final int id) {
        super(id);
    }","  public void test0()  throws Throwable  {
      Parser parser0 = new Parser(""]'bZYNkqseaYPde \""V"");
      ASTIdentifierAccess aSTIdentifierAccess0 = new ASTIdentifierAccess(parser0, 57);
}"
2581,"    public String toString() {
        return name;
    }","  public void test1()  throws Throwable  {
      ASTIdentifierAccessJxlt aSTIdentifierAccessJxlt0 = new ASTIdentifierAccessJxlt(601);
      aSTIdentifierAccessJxlt0.setIdentifier(""0000"");
      String string0 = aSTIdentifierAccessJxlt0.toString();
}"
2582,"    public String toString() {
        return name;
    }","  public void test2()  throws Throwable  {
      ASTIdentifierAccess aSTIdentifierAccess0 = new ASTIdentifierAccess(0);
      aSTIdentifierAccess0.setIdentifier("""");
      String string0 = aSTIdentifierAccess0.toString();
}"
2583,"    public static Integer parseIdentifier(final String id) {
        // hand coded because the was no way to fail on leading '0's using NumberFormat
        if (id != null) {
            final int length = id.length();
            int val = 0;
            for (int i = 0; i < length; ++i) {
                final char c = id.charAt(i);
                // leading 0s but no just 0, NaN
                if (c == '0') {
                    if (length == 1) {
                        return 0;
                    }
                    if (val == 0) {
                        return null;
                    }
                } // any non numeric, NaN
                else if (c < '0' || c > '9') {
                    return null;
                }
                val *= 10;
                val += (c - '0');
            }
            return val;
        }
        return null;
    }","  public void test3()  throws Throwable  {
      Integer integer0 = ASTIdentifierAccess.parseIdentifier(""49"");
}"
2584,"    public static Integer parseIdentifier(final String id) {
        // hand coded because the was no way to fail on leading '0's using NumberFormat
        if (id != null) {
            final int length = id.length();
            int val = 0;
            for (int i = 0; i < length; ++i) {
                final char c = id.charAt(i);
                // leading 0s but no just 0, NaN
                if (c == '0') {
                    if (length == 1) {
                        return 0;
                    }
                    if (val == 0) {
                        return null;
                    }
                } // any non numeric, NaN
                else if (c < '0' || c > '9') {
                    return null;
                }
                val *= 10;
                val += (c - '0');
            }
            return val;
        }
        return null;
    }","  public void test4()  throws Throwable  {
      Integer integer0 = ASTIdentifierAccess.parseIdentifier(""49"");
}"
2585,"    public static Integer parseIdentifier(final String id) {
        // hand coded because the was no way to fail on leading '0's using NumberFormat
        if (id != null) {
            final int length = id.length();
            int val = 0;
            for (int i = 0; i < length; ++i) {
                final char c = id.charAt(i);
                // leading 0s but no just 0, NaN
                if (c == '0') {
                    if (length == 1) {
                        return 0;
                    }
                    if (val == 0) {
                        return null;
                    }
                } // any non numeric, NaN
                else if (c < '0' || c > '9') {
                    return null;
                }
                val *= 10;
                val += (c - '0');
            }
            return val;
        }
        return null;
    }","  public void test5()  throws Throwable  {
      Integer integer0 = ASTIdentifierAccess.parseIdentifier(""3801"");
}"
2586,"    public static Integer parseIdentifier(final String id) {
        // hand coded because the was no way to fail on leading '0's using NumberFormat
        if (id != null) {
            final int length = id.length();
            int val = 0;
            for (int i = 0; i < length; ++i) {
                final char c = id.charAt(i);
                // leading 0s but no just 0, NaN
                if (c == '0') {
                    if (length == 1) {
                        return 0;
                    }
                    if (val == 0) {
                        return null;
                    }
                } // any non numeric, NaN
                else if (c < '0' || c > '9') {
                    return null;
                }
                val *= 10;
                val += (c - '0');
            }
            return val;
        }
        return null;
    }","  public void test6()  throws Throwable  {
      Integer integer0 = ASTIdentifierAccess.parseIdentifier(""3801"");
}"
2587,"    public Object jjtAccept(final ParserVisitor visitor, final Object data) {
        return visitor.visit(this, data);
    }","  public void test7()  throws Throwable  {
      ASTIdentifierAccessJxlt aSTIdentifierAccessJxlt0 = new ASTIdentifierAccessJxlt(0);
      JexlFeatures jexlFeatures0 = JexlEngine.DEFAULT_FEATURES;
      FeatureController featureController0 = new FeatureController(jexlFeatures0);
      Object object0 = aSTIdentifierAccessJxlt0.jjtAccept(featureController0, (Object) null);
}"
2588,"    public boolean isSafe() {
        return false;
    }","  public void test8()  throws Throwable  {
      ASTIdentifierAccessSafe aSTIdentifierAccessSafe0 = new ASTIdentifierAccessSafe((-1));
      boolean boolean0 = aSTIdentifierAccessSafe0.isSafe();
}"
2589,"    public boolean isExpression() {
        return false;
    }","  public void test9()  throws Throwable  {
      ASTIdentifierAccessJxlt aSTIdentifierAccessJxlt0 = new ASTIdentifierAccessJxlt(0);
      boolean boolean0 = aSTIdentifierAccessJxlt0.isExpression();
}"
2590,"    public String getName() {
        return name;
    }","  public void test10()  throws Throwable  {
      ASTIdentifierAccessJxlt aSTIdentifierAccessJxlt0 = new ASTIdentifierAccessJxlt(601);
      aSTIdentifierAccessJxlt0.setIdentifier(""0000"");
      String string0 = aSTIdentifierAccessJxlt0.getName();
}"
2591,"    public String getName() {
        return name;
    }","  public void test11()  throws Throwable  {
      ASTIdentifierAccess aSTIdentifierAccess0 = new ASTIdentifierAccess(0);
      aSTIdentifierAccess0.setIdentifier("""");
      String string0 = aSTIdentifierAccess0.getName();
}"
2592,"    public Object jjtAccept(final ParserVisitor visitor, final Object data) {
        return visitor.visit(this, data);
    }","  public void test12()  throws Throwable  {
      ASTIdentifierAccessJxlt aSTIdentifierAccessJxlt0 = new ASTIdentifierAccessJxlt((-425));
      // Undeclared exception!
      try { 
        aSTIdentifierAccessJxlt0.jjtAccept((ParserVisitor) null, (Object) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.parser.ASTIdentifierAccess"", e);
      }
  }"
2593,"    public static Integer parseIdentifier(final String id) {
        // hand coded because the was no way to fail on leading '0's using NumberFormat
        if (id != null) {
            final int length = id.length();
            int val = 0;
            for (int i = 0; i < length; ++i) {
                final char c = id.charAt(i);
                // leading 0s but no just 0, NaN
                if (c == '0') {
                    if (length == 1) {
                        return 0;
                    }
                    if (val == 0) {
                        return null;
                    }
                } // any non numeric, NaN
                else if (c < '0' || c > '9') {
                    return null;
                }
                val *= 10;
                val += (c - '0');
            }
            return val;
        }
        return null;
    }","  public void test13()  throws Throwable  {
      Integer integer0 = ASTIdentifierAccess.parseIdentifier("""");
}"
2594,"    public static Integer parseIdentifier(final String id) {
        // hand coded because the was no way to fail on leading '0's using NumberFormat
        if (id != null) {
            final int length = id.length();
            int val = 0;
            for (int i = 0; i < length; ++i) {
                final char c = id.charAt(i);
                // leading 0s but no just 0, NaN
                if (c == '0') {
                    if (length == 1) {
                        return 0;
                    }
                    if (val == 0) {
                        return null;
                    }
                } // any non numeric, NaN
                else if (c < '0' || c > '9') {
                    return null;
                }
                val *= 10;
                val += (c - '0');
            }
            return val;
        }
        return null;
    }","  public void test14()  throws Throwable  {
      Integer integer0 = ASTIdentifierAccess.parseIdentifier((String) null);
}"
2595,"    public boolean isExpression() {
        return false;
    }","  public void test15()  throws Throwable  {
      ASTIdentifierAccess aSTIdentifierAccess0 = new ASTIdentifierAccess(0);
      boolean boolean0 = aSTIdentifierAccess0.isExpression();
}"
2596,"    public boolean isSafe() {
        return false;
    }","  public void test16()  throws Throwable  {
      ASTIdentifierAccessJxlt aSTIdentifierAccessJxlt0 = new ASTIdentifierAccessJxlt((-2603));
      boolean boolean0 = aSTIdentifierAccessJxlt0.isSafe();
}"
2597,"    public Object getIdentifier() {
        return identifier != null? identifier : name;
    }","  public void test17()  throws Throwable  {
      ASTIdentifierAccessSafeJxlt aSTIdentifierAccessSafeJxlt0 = new ASTIdentifierAccessSafeJxlt(1961);
      aSTIdentifierAccessSafeJxlt0.setIdentifier("""");
      Object object0 = aSTIdentifierAccessSafeJxlt0.getIdentifier();
}"
2598,"    public Object getIdentifier() {
        return identifier != null? identifier : name;
    }","  public void test18()  throws Throwable  {
      ASTIdentifierAccess aSTIdentifierAccess0 = new ASTIdentifierAccess(1569);
      Object object0 = aSTIdentifierAccess0.getIdentifier();
}"
2599,"    public static Integer parseIdentifier(final String id) {
        // hand coded because the was no way to fail on leading '0's using NumberFormat
        if (id != null) {
            final int length = id.length();
            int val = 0;
            for (int i = 0; i < length; ++i) {
                final char c = id.charAt(i);
                // leading 0s but no just 0, NaN
                if (c == '0') {
                    if (length == 1) {
                        return 0;
                    }
                    if (val == 0) {
                        return null;
                    }
                } // any non numeric, NaN
                else if (c < '0' || c > '9') {
                    return null;
                }
                val *= 10;
                val += (c - '0');
            }
            return val;
        }
        return null;
    }","  public void test19()  throws Throwable  {
      Integer integer0 = ASTIdentifierAccess.parseIdentifier("")D\""~Tn+dbb_c@"");
}"
2600,"    public static Integer parseIdentifier(final String id) {
        // hand coded because the was no way to fail on leading '0's using NumberFormat
        if (id != null) {
            final int length = id.length();
            int val = 0;
            for (int i = 0; i < length; ++i) {
                final char c = id.charAt(i);
                // leading 0s but no just 0, NaN
                if (c == '0') {
                    if (length == 1) {
                        return 0;
                    }
                    if (val == 0) {
                        return null;
                    }
                } // any non numeric, NaN
                else if (c < '0' || c > '9') {
                    return null;
                }
                val *= 10;
                val += (c - '0');
            }
            return val;
        }
        return null;
    }","  public void test20()  throws Throwable  {
      Integer integer0 = ASTIdentifierAccess.parseIdentifier(""380r"");
}"
2601,"    public static Integer parseIdentifier(final String id) {
        // hand coded because the was no way to fail on leading '0's using NumberFormat
        if (id != null) {
            final int length = id.length();
            int val = 0;
            for (int i = 0; i < length; ++i) {
                final char c = id.charAt(i);
                // leading 0s but no just 0, NaN
                if (c == '0') {
                    if (length == 1) {
                        return 0;
                    }
                    if (val == 0) {
                        return null;
                    }
                } // any non numeric, NaN
                else if (c < '0' || c > '9') {
                    return null;
                }
                val *= 10;
                val += (c - '0');
            }
            return val;
        }
        return null;
    }","  public void test21()  throws Throwable  {
      Integer integer0 = ASTIdentifierAccess.parseIdentifier(""0"");
}"
2602,"    public static Integer parseIdentifier(final String id) {
        // hand coded because the was no way to fail on leading '0's using NumberFormat
        if (id != null) {
            final int length = id.length();
            int val = 0;
            for (int i = 0; i < length; ++i) {
                final char c = id.charAt(i);
                // leading 0s but no just 0, NaN
                if (c == '0') {
                    if (length == 1) {
                        return 0;
                    }
                    if (val == 0) {
                        return null;
                    }
                } // any non numeric, NaN
                else if (c < '0' || c > '9') {
                    return null;
                }
                val *= 10;
                val += (c - '0');
            }
            return val;
        }
        return null;
    }","  public void test22()  throws Throwable  {
      Integer integer0 = ASTIdentifierAccess.parseIdentifier(""0"");
}"
2603,"    public static Integer parseIdentifier(final String id) {
        // hand coded because the was no way to fail on leading '0's using NumberFormat
        if (id != null) {
            final int length = id.length();
            int val = 0;
            for (int i = 0; i < length; ++i) {
                final char c = id.charAt(i);
                // leading 0s but no just 0, NaN
                if (c == '0') {
                    if (length == 1) {
                        return 0;
                    }
                    if (val == 0) {
                        return null;
                    }
                } // any non numeric, NaN
                else if (c < '0' || c > '9') {
                    return null;
                }
                val *= 10;
                val += (c - '0');
            }
            return val;
        }
        return null;
    }","  public void test23()  throws Throwable  {
      Integer integer0 = ASTIdentifierAccess.parseIdentifier(""0}DB,IAF8wirMMR"");
}"
2604,"    public boolean isGlobalVar() {
        return !isSafe() && !isExpression();
    }","  public void test24()  throws Throwable  {
      ASTIdentifierAccessJxlt aSTIdentifierAccessJxlt0 = new ASTIdentifierAccessJxlt(332);
      boolean boolean0 = aSTIdentifierAccessJxlt0.isGlobalVar();
}"
2605,"    public boolean isSafe() {
        return false;
    }","  public void test25()  throws Throwable  {
      ASTIdentifierAccessJxlt aSTIdentifierAccessJxlt0 = new ASTIdentifierAccessJxlt(332);
      boolean boolean0 = aSTIdentifierAccessJxlt0.isGlobalVar();
}"
2606,"    public boolean isGlobalVar() {
        return !isSafe() && !isExpression();
    }","  public void test26()  throws Throwable  {
      ASTIdentifierAccessSafeJxlt aSTIdentifierAccessSafeJxlt0 = new ASTIdentifierAccessSafeJxlt(1961);
      boolean boolean0 = aSTIdentifierAccessSafeJxlt0.isGlobalVar();
}"
2607,"    public String toString() {
        return name;
    }","  public void test27()  throws Throwable  {
      ASTIdentifierAccessJxlt aSTIdentifierAccessJxlt0 = new ASTIdentifierAccessJxlt((-2603));
      String string0 = aSTIdentifierAccessJxlt0.toString();
}"
2608,"    public String getName() {
        return name;
    }","  public void test28()  throws Throwable  {
      ASTIdentifierAccessJxlt aSTIdentifierAccessJxlt0 = new ASTIdentifierAccessJxlt((-2603));
      String string0 = aSTIdentifierAccessJxlt0.getName();
}"
2609,"    public Object jjtAccept(final ParserVisitor visitor, final Object data) {
        return visitor.visit(this, data);
    }","  public void test29()  throws Throwable  {
      ASTIdentifierAccess aSTIdentifierAccess0 = new ASTIdentifierAccess(1569);
      OperatorController operatorController0 = new OperatorController();
      Object object0 = aSTIdentifierAccess0.jjtAccept(operatorController0, """");
}"
2610,"    public boolean isGlobalVar() {
        return !isSafe() && !isExpression();
    }","  public void test30()  throws Throwable  {
      ASTIdentifierAccess aSTIdentifierAccess0 = new ASTIdentifierAccess(1569);
      boolean boolean0 = aSTIdentifierAccess0.isGlobalVar();
}"
2611,"    public Object jjtAccept(final ParserVisitor visitor, final Object data) {
        return visitor.visit(this, data);
    }","  public void test0()  throws Throwable  {
      ASTRegexLiteral aSTRegexLiteral0 = new ASTRegexLiteral((-3016));
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      FeatureController featureController0 = new FeatureController(jexlFeatures0);
      Object object0 = aSTRegexLiteral0.jjtAccept(featureController0, (Object) null);
}"
2612,"    public Object jjtAccept(final ParserVisitor visitor, final Object data) {
        return visitor.visit(this, data);
    }","  public void test1()  throws Throwable  {
      ASTRegexLiteral aSTRegexLiteral0 = new ASTRegexLiteral((-3016));
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      FeatureController featureController0 = new FeatureController(jexlFeatures0);
      JexlFeatures jexlFeatures1 = (JexlFeatures)aSTRegexLiteral0.jjtAccept(featureController0, jexlFeatures0);
}"
2613,"    void setLiteral(final String literal) {
        this.literal = Pattern.compile(literal);
    }","  public void test2()  throws Throwable  {
      ASTRegexLiteral aSTRegexLiteral0 = new ASTRegexLiteral((-1835));
      // Undeclared exception!
      try { 
        aSTRegexLiteral0.setLiteral(""RP)\""h|;h3O=i|fj"");
        fail(""Expecting exception: PatternSyntaxException"");
      } catch(PatternSyntaxException e) {
         //
         // Unmatched closing ')' near index 1
         // RP)\""h|;h3O=i|fj
         //  ^
         //
         verifyException(""java.util.regex.Pattern"", e);
      }
  }"
2614,"    void setLiteral(final String literal) {
        this.literal = Pattern.compile(literal);
    }","  public void test3()  throws Throwable  {
      ASTRegexLiteral aSTRegexLiteral0 = new ASTRegexLiteral((-204));
      // Undeclared exception!
      try { 
        aSTRegexLiteral0.setLiteral((String) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
2615,"    public Object jjtAccept(final ParserVisitor visitor, final Object data) {
        return visitor.visit(this, data);
    }","  public void test4()  throws Throwable  {
      ASTRegexLiteral aSTRegexLiteral0 = new ASTRegexLiteral(0);
      Pattern pattern0 = aSTRegexLiteral0.getLiteral();
      // Undeclared exception!
      try { 
        aSTRegexLiteral0.jjtAccept((ParserVisitor) null, pattern0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.parser.ASTRegexLiteral"", e);
      }
  }"
2616,"    public String toString() {
        return literal != null ? literal.toString() : """";
    }","  public void test5()  throws Throwable  {
      ASTRegexLiteral aSTRegexLiteral0 = new ASTRegexLiteral((-204));
      aSTRegexLiteral0.setLiteral(""Integer coercion: "");
      String string0 = aSTRegexLiteral0.toString();
}"
2617,"    public String toString() {
        return literal != null ? literal.toString() : """";
    }","  public void test6()  throws Throwable  {
      ASTRegexLiteral aSTRegexLiteral0 = new ASTRegexLiteral(0);
      String string0 = aSTRegexLiteral0.toString();
}"
2618,"    public String toString() {
        return literal != null ? literal.toString() : """";
    }","  public void test7()  throws Throwable  {
      ASTRegexLiteral aSTRegexLiteral0 = new ASTRegexLiteral(0);
      aSTRegexLiteral0.setLiteral("""");
      Pattern pattern0 = aSTRegexLiteral0.getLiteral();
}"
2619,"    protected boolean isConstant(final boolean literal) {
        return true;
    }","  public void test8()  throws Throwable  {
      ASTRegexLiteral aSTRegexLiteral0 = new ASTRegexLiteral(0);
      boolean boolean0 = aSTRegexLiteral0.isConstant(false);
}"
2620,"    public Pattern getLiteral() {
        return this.literal;
    }","  public void test9()  throws Throwable  {
      Parser parser0 = new Parser(""KFIT:Im*V|ho"");
      ASTRegexLiteral aSTRegexLiteral0 = new ASTRegexLiteral(parser0, 3);
      Pattern pattern0 = aSTRegexLiteral0.getLiteral();
}"
2621,"    public boolean isSafe() {
        return true;
    }","  public void test0()  throws Throwable  {
      ASTIdentifierAccessSafeJxlt aSTIdentifierAccessSafeJxlt0 = new ASTIdentifierAccessSafeJxlt(400);
      boolean boolean0 = aSTIdentifierAccessSafeJxlt0.isSafe();
}"
2622,"    ASTIdentifierAccessSafeJxlt(final int id) {
        super(id);
    }","  public void test1()  throws Throwable  {
      ASTIdentifierAccessSafeJxlt aSTIdentifierAccessSafeJxlt0 = new ASTIdentifierAccessSafeJxlt((Parser) null, (-108));
}"
2623,"    protected Object visitNode(final JexlNode node, final Object data) {
        // no need to visit them since we close them one by one
        return data;
    }","  public void test0()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      FeatureController featureController0 = new FeatureController(jexlFeatures0);
      ASTMapLiteral aSTMapLiteral0 = new ASTMapLiteral(0);
      Object object0 = featureController0.visitNode(aSTMapLiteral0, (Object) null);
}"
2624,"    protected Object visitNode(final JexlNode node, final Object data) {
        // no need to visit them since we close them one by one
        return data;
    }","  public void test1()  throws Throwable  {
      FeatureController featureController0 = new FeatureController((JexlFeatures) null);
      ASTArrayLiteral aSTArrayLiteral0 = new ASTArrayLiteral(13);
      ASTStringLiteral aSTStringLiteral0 = new ASTStringLiteral(0);
      ASTStringLiteral aSTStringLiteral1 = (ASTStringLiteral)featureController0.visitNode(aSTArrayLiteral0, aSTStringLiteral0);
}"
2625,"    protected Object visit(final ASTArrayAccess node, final Object data) {
        if (!features.supportsArrayReferenceExpr()) {
            for (int i = 0; i < node.jjtGetNumChildren(); ++i) {
                final JexlNode child = node.jjtGetChild(i);
                if (!isArrayReferenceLiteral(child)) {
                    throwFeatureException(JexlFeatures.ARRAY_REF_EXPR, child);
                }
            }
        }
        return data;
    }","  public void test2()  throws Throwable  {
      StringProvider stringProvider0 = new StringProvider("""");
      Parser parser0 = new Parser(stringProvider0);
      FeatureController featureController0 = parser0.featureController;
      ASTWhileStatement aSTWhileStatement0 = new ASTWhileStatement(parser0, 0);
      Object object0 = featureController0.visit(aSTWhileStatement0, (Object) null);
}"
2626,"    protected Object visit(final ASTArrayAccess node, final Object data) {
        if (!features.supportsArrayReferenceExpr()) {
            for (int i = 0; i < node.jjtGetNumChildren(); ++i) {
                final JexlNode child = node.jjtGetChild(i);
                if (!isArrayReferenceLiteral(child)) {
                    throwFeatureException(JexlFeatures.ARRAY_REF_EXPR, child);
                }
            }
        }
        return data;
    }","  public void test3()  throws Throwable  {
      Parser parser0 = new Parser(""?9iey:"");
      FeatureController featureController0 = parser0.featureController;
      ASTSetXorNode aSTSetXorNode0 = new ASTSetXorNode(3);
      ASTSetLiteral aSTSetLiteral0 = new ASTSetLiteral(3);
      aSTSetXorNode0.jjtAddChild(aSTSetLiteral0, 1);
      Object object0 = featureController0.visit(aSTSetXorNode0, (byte)12);
}"
2627,"    protected Object visit(final ASTArrayAccess node, final Object data) {
        if (!features.supportsArrayReferenceExpr()) {
            for (int i = 0; i < node.jjtGetNumChildren(); ++i) {
                final JexlNode child = node.jjtGetChild(i);
                if (!isArrayReferenceLiteral(child)) {
                    throwFeatureException(JexlFeatures.ARRAY_REF_EXPR, child);
                }
            }
        }
        return data;
    }","  public void test4()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""t&z.7}9D|[A>r"");
      StreamProvider streamProvider0 = new StreamProvider(stringReader0);
      Parser parser0 = new Parser(streamProvider0);
      FeatureController featureController0 = parser0.featureController;
      ASTAnnotation aSTAnnotation0 = new ASTAnnotation(1);
      ASTSetSubNode aSTSetSubNode0 = new ASTSetSubNode(parser0, 1);
      aSTSetSubNode0.jjtAddChild(aSTAnnotation0, 4);
      Object object0 = featureController0.visit(aSTSetSubNode0, ""t&z.7}9D|[A>r"");
}"
2628,"    protected Object visit(final ASTArrayAccess node, final Object data) {
        if (!features.supportsArrayReferenceExpr()) {
            for (int i = 0; i < node.jjtGetNumChildren(); ++i) {
                final JexlNode child = node.jjtGetChild(i);
                if (!isArrayReferenceLiteral(child)) {
                    throwFeatureException(JexlFeatures.ARRAY_REF_EXPR, child);
                }
            }
        }
        return data;
    }","  public void test5()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      FeatureController featureController0 = new FeatureController(jexlFeatures0);
      ASTSetOrNode aSTSetOrNode0 = new ASTSetOrNode(1);
      JexlNode[] jexlNodeArray0 = new JexlNode[2];
      aSTSetOrNode0.jjtSetChildren(jexlNodeArray0);
      JexlFeatures jexlFeatures1 = (JexlFeatures)featureController0.visit(aSTSetOrNode0, jexlFeatures0);
}"
2629,"    protected Object visit(final ASTArrayAccess node, final Object data) {
        if (!features.supportsArrayReferenceExpr()) {
            for (int i = 0; i < node.jjtGetNumChildren(); ++i) {
                final JexlNode child = node.jjtGetChild(i);
                if (!isArrayReferenceLiteral(child)) {
                    throwFeatureException(JexlFeatures.ARRAY_REF_EXPR, child);
                }
            }
        }
        return data;
    }","  public void test6()  throws Throwable  {
      JexlFeatures jexlFeatures0 = JexlEngine.DEFAULT_FEATURES;
      FeatureController featureController0 = new FeatureController(jexlFeatures0);
      ASTSetMultNode aSTSetMultNode0 = new ASTSetMultNode(1);
      Parser parser0 = new Parser(""org.apache.commons.jexl3.parser.FeatureController"");
      ASTContinue aSTContinue0 = new ASTContinue(parser0, (-1436));
      aSTSetMultNode0.jjtAddChild(aSTContinue0, 1);
      Object object0 = featureController0.visit(aSTSetMultNode0, ""9b%'ir)_cQ"");
}"
2630,"    protected Object visit(final ASTArrayAccess node, final Object data) {
        if (!features.supportsArrayReferenceExpr()) {
            for (int i = 0; i < node.jjtGetNumChildren(); ++i) {
                final JexlNode child = node.jjtGetChild(i);
                if (!isArrayReferenceLiteral(child)) {
                    throwFeatureException(JexlFeatures.ARRAY_REF_EXPR, child);
                }
            }
        }
        return data;
    }","  public void test7()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      FeatureController featureController0 = new FeatureController(jexlFeatures0);
      ASTSetDivNode aSTSetDivNode0 = new ASTSetDivNode(10);
      ASTIdentifierAccessSafe aSTIdentifierAccessSafe0 = new ASTIdentifierAccessSafe(10);
      aSTSetDivNode0.jjtAddChild(aSTIdentifierAccessSafe0, 3);
      JexlFeatures jexlFeatures1 = (JexlFeatures)featureController0.visit(aSTSetDivNode0, jexlFeatures0);
}"
2631,"    protected Object visit(final ASTArrayAccess node, final Object data) {
        if (!features.supportsArrayReferenceExpr()) {
            for (int i = 0; i < node.jjtGetNumChildren(); ++i) {
                final JexlNode child = node.jjtGetChild(i);
                if (!isArrayReferenceLiteral(child)) {
                    throwFeatureException(JexlFeatures.ARRAY_REF_EXPR, child);
                }
            }
        }
        return data;
    }","  public void test8()  throws Throwable  {
      Parser parser0 = new Parser("""");
      FeatureController featureController0 = parser0.featureController;
      ASTSetAndNode aSTSetAndNode0 = new ASTSetAndNode(parser0, 0);
      ASTERNode aSTERNode0 = new ASTERNode(parser0, 0);
      aSTSetAndNode0.jjtAddChild(aSTERNode0, 0);
      Parser parser1 = (Parser)featureController0.visit(aSTSetAndNode0, parser0);
}"
2632,"    protected Object visit(final ASTArrayAccess node, final Object data) {
        if (!features.supportsArrayReferenceExpr()) {
            for (int i = 0; i < node.jjtGetNumChildren(); ++i) {
                final JexlNode child = node.jjtGetChild(i);
                if (!isArrayReferenceLiteral(child)) {
                    throwFeatureException(JexlFeatures.ARRAY_REF_EXPR, child);
                }
            }
        }
        return data;
    }","  public void test9()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      FeatureController featureController0 = new FeatureController(jexlFeatures0);
      ASTSetDivNode aSTSetDivNode0 = new ASTSetDivNode(10);
      ASTSetAddNode aSTSetAddNode0 = new ASTSetAddNode(1674);
      aSTSetAddNode0.jjtAddChild(aSTSetDivNode0, 3);
      JexlFeatures jexlFeatures1 = (JexlFeatures)featureController0.visit(aSTSetAddNode0, jexlFeatures0);
}"
2633,"    protected Object visit(final ASTArrayAccess node, final Object data) {
        if (!features.supportsArrayReferenceExpr()) {
            for (int i = 0; i < node.jjtGetNumChildren(); ++i) {
                final JexlNode child = node.jjtGetChild(i);
                if (!isArrayReferenceLiteral(child)) {
                    throwFeatureException(JexlFeatures.ARRAY_REF_EXPR, child);
                }
            }
        }
        return data;
    }","  public void test10()  throws Throwable  {
      StringProvider stringProvider0 = new StringProvider(""K"");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringProvider0);
      ParserTokenManager parserTokenManager0 = new ParserTokenManager(simpleCharStream0);
      Parser parser0 = new Parser(parserTokenManager0);
      JexlFeatures jexlFeatures0 = parser0.getFeatures();
      FeatureController featureController0 = new FeatureController(jexlFeatures0);
      ASTStringLiteral aSTStringLiteral0 = new ASTStringLiteral(parser0, 14);
      ASTStringLiteral aSTStringLiteral1 = (ASTStringLiteral)featureController0.visit((ASTMapLiteral) null, aSTStringLiteral0);
}"
2634,"    protected Object visit(final ASTArrayAccess node, final Object data) {
        if (!features.supportsArrayReferenceExpr()) {
            for (int i = 0; i < node.jjtGetNumChildren(); ++i) {
                final JexlNode child = node.jjtGetChild(i);
                if (!isArrayReferenceLiteral(child)) {
                    throwFeatureException(JexlFeatures.ARRAY_REF_EXPR, child);
                }
            }
        }
        return data;
    }","  public void test11()  throws Throwable  {
      Parser parser0 = new Parser(""org.apache.commons.jexl3.parser.ASTNotNode"");
      FeatureController featureController0 = parser0.featureController;
      Object object0 = featureController0.visit((ASTDoWhileStatement) null, (Object) null);
}"
2635,"    protected Object visit(final ASTArrayAccess node, final Object data) {
        if (!features.supportsArrayReferenceExpr()) {
            for (int i = 0; i < node.jjtGetNumChildren(); ++i) {
                final JexlNode child = node.jjtGetChild(i);
                if (!isArrayReferenceLiteral(child)) {
                    throwFeatureException(JexlFeatures.ARRAY_REF_EXPR, child);
                }
            }
        }
        return data;
    }","  public void test12()  throws Throwable  {
      Parser parser0 = new Parser(""?iey:"");
      FeatureController featureController0 = parser0.featureController;
      byte[] byteArray0 = new byte[3];
      Object object0 = null;
      ASTConstructorNode aSTConstructorNode0 = new ASTConstructorNode(byteArray0[1]);
      Object object1 = featureController0.visit(aSTConstructorNode0, object0);
}"
2636,"    protected Object visit(final ASTArrayAccess node, final Object data) {
        if (!features.supportsArrayReferenceExpr()) {
            for (int i = 0; i < node.jjtGetNumChildren(); ++i) {
                final JexlNode child = node.jjtGetChild(i);
                if (!isArrayReferenceLiteral(child)) {
                    throwFeatureException(JexlFeatures.ARRAY_REF_EXPR, child);
                }
            }
        }
        return data;
    }","  public void test13()  throws Throwable  {
      StringProvider stringProvider0 = new StringProvider(""org.apache.commons.jexl3.parser.FeatureController"");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringProvider0, 0, (-830), 0);
      ParserTokenManager parserTokenManager0 = new ParserTokenManager(simpleCharStream0);
      simpleCharStream0.reInit((Provider) stringProvider0);
      Parser parser0 = new Parser(parserTokenManager0);
      FeatureController featureController0 = parser0.featureController;
      ASTMapLiteral aSTMapLiteral0 = new ASTMapLiteral((-830));
      ASTAssignment aSTAssignment0 = new ASTAssignment((-2006));
      aSTAssignment0.jjtAddChild(aSTMapLiteral0, 90);
      Object object0 = featureController0.visit(aSTAssignment0, simpleCharStream0.DEFAULT_BUF_SIZE);
}"
2637,"    protected Object visit(final ASTArrayAccess node, final Object data) {
        if (!features.supportsArrayReferenceExpr()) {
            for (int i = 0; i < node.jjtGetNumChildren(); ++i) {
                final JexlNode child = node.jjtGetChild(i);
                if (!isArrayReferenceLiteral(child)) {
                    throwFeatureException(JexlFeatures.ARRAY_REF_EXPR, child);
                }
            }
        }
        return data;
    }","  public void test14()  throws Throwable  {
      StringProvider stringProvider0 = new StringProvider("""");
      Parser parser0 = new Parser(stringProvider0);
      FeatureController featureController0 = parser0.featureController;
      ASTArrayLiteral aSTArrayLiteral0 = new ASTArrayLiteral(parser0, (-2));
      Object object0 = featureController0.visit(aSTArrayLiteral0, (Object) null);
}"
2638,"    protected Object visit(final ASTArrayAccess node, final Object data) {
        if (!features.supportsArrayReferenceExpr()) {
            for (int i = 0; i < node.jjtGetNumChildren(); ++i) {
                final JexlNode child = node.jjtGetChild(i);
                if (!isArrayReferenceLiteral(child)) {
                    throwFeatureException(JexlFeatures.ARRAY_REF_EXPR, child);
                }
            }
        }
        return data;
    }","  public void test15()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""t&z.7}9D|[A>r"");
      StreamProvider streamProvider0 = new StreamProvider(stringReader0);
      Parser parser0 = new Parser(streamProvider0);
      FeatureController featureController0 = parser0.featureController;
      Object object0 = featureController0.visit((ASTArrayAccess) null, (Object) null);
}"
2639,"    public JexlFeatures getFeatures() {
        return features;
    }","  public void test16()  throws Throwable  {
      FeatureController featureController0 = new FeatureController((JexlFeatures) null);
      JexlFeatures jexlFeatures0 = featureController0.getFeatures();
}"
2640,"    public JexlFeatures getFeatures() {
        return features;
    }","  public void test17()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.structuredLiteral(false);
      FeatureController featureController0 = new FeatureController(jexlFeatures0);
      JexlFeatures jexlFeatures1 = featureController0.getFeatures();
}"
2641,"    public JexlFeatures getFeatures() {
        return features;
    }","  public void test18()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      FeatureController featureController0 = new FeatureController(jexlFeatures0);
      jexlFeatures0.newInstance(false);
      JexlFeatures jexlFeatures1 = featureController0.getFeatures();
}"
2642,"    public JexlFeatures getFeatures() {
        return features;
    }","  public void test19()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      FeatureController featureController0 = new FeatureController(jexlFeatures0);
      jexlFeatures0.methodCall(false);
      JexlFeatures jexlFeatures1 = featureController0.getFeatures();
}"
2643,"    public JexlFeatures getFeatures() {
        return features;
    }","  public void test20()  throws Throwable  {
      JexlFeatures jexlFeatures0 = JexlEngine.DEFAULT_FEATURES;
      jexlFeatures0.loops(false);
      FeatureController featureController0 = new FeatureController(jexlFeatures0);
      JexlFeatures jexlFeatures1 = featureController0.getFeatures();
}"
2644,"    public JexlFeatures getFeatures() {
        return features;
    }","  public void test21()  throws Throwable  {
      JexlFeatures jexlFeatures0 = JexlEngine.DEFAULT_FEATURES;
      FeatureController featureController0 = new FeatureController(jexlFeatures0);
      jexlFeatures0.localVar(false);
      JexlFeatures jexlFeatures1 = featureController0.getFeatures();
}"
2645,"    public JexlFeatures getFeatures() {
        return features;
    }","  public void test22()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      FeatureController featureController0 = new FeatureController(jexlFeatures0);
      jexlFeatures0.lambda(false);
      JexlFeatures jexlFeatures1 = featureController0.getFeatures();
}"
2646,"    public JexlFeatures getFeatures() {
        return features;
    }","  public void test23()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.script(false);
      FeatureController featureController0 = new FeatureController(jexlFeatures0);
      JexlFeatures jexlFeatures1 = featureController0.getFeatures();
}"
2647,"    public JexlFeatures getFeatures() {
        return features;
    }","  public void test24()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.annotation(false);
      FeatureController featureController0 = new FeatureController(jexlFeatures0);
      JexlFeatures jexlFeatures1 = featureController0.getFeatures();
}"
2648,"    public JexlFeatures getFeatures() {
        return features;
    }","  public void test25()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.lexicalShade(true);
      FeatureController featureController0 = new FeatureController(jexlFeatures0);
      JexlFeatures jexlFeatures1 = featureController0.getFeatures();
}"
2649,"    protected Object visit(final ASTArrayAccess node, final Object data) {
        if (!features.supportsArrayReferenceExpr()) {
            for (int i = 0; i < node.jjtGetNumChildren(); ++i) {
                final JexlNode child = node.jjtGetChild(i);
                if (!isArrayReferenceLiteral(child)) {
                    throwFeatureException(JexlFeatures.ARRAY_REF_EXPR, child);
                }
            }
        }
        return data;
    }","  public void test26()  throws Throwable  {
      FeatureController featureController0 = new FeatureController((JexlFeatures) null);
      ASTWhileStatement aSTWhileStatement0 = new ASTWhileStatement(11);
      // Undeclared exception!
      try { 
        featureController0.visit(aSTWhileStatement0, (Object) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.parser.FeatureController"", e);
      }
  }"
2650,"    protected Object visit(final ASTArrayAccess node, final Object data) {
        if (!features.supportsArrayReferenceExpr()) {
            for (int i = 0; i < node.jjtGetNumChildren(); ++i) {
                final JexlNode child = node.jjtGetChild(i);
                if (!isArrayReferenceLiteral(child)) {
                    throwFeatureException(JexlFeatures.ARRAY_REF_EXPR, child);
                }
            }
        }
        return data;
    }","  public void test27()  throws Throwable  {
      Parser parser0 = new Parser(""$,ZcGif[z-"");
      FeatureController featureController0 = parser0.featureController;
      ASTSetOrNode aSTSetOrNode0 = new ASTSetOrNode(parser0, (-537));
      JexlNode[] jexlNodeArray0 = new JexlNode[0];
      aSTSetOrNode0.jjtSetChildren(jexlNodeArray0);
      Integer integer0 = new Integer(1);
      // Undeclared exception!
      try { 
        featureController0.visit(aSTSetOrNode0, integer0);
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
2651,"    protected Object visit(final ASTArrayAccess node, final Object data) {
        if (!features.supportsArrayReferenceExpr()) {
            for (int i = 0; i < node.jjtGetNumChildren(); ++i) {
                final JexlNode child = node.jjtGetChild(i);
                if (!isArrayReferenceLiteral(child)) {
                    throwFeatureException(JexlFeatures.ARRAY_REF_EXPR, child);
                }
            }
        }
        return data;
    }","  public void test28()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      FeatureController featureController0 = new FeatureController(jexlFeatures0);
      ASTSetMultNode aSTSetMultNode0 = new ASTSetMultNode((-1777));
      JexlNode[] jexlNodeArray0 = new JexlNode[0];
      aSTSetMultNode0.jjtSetChildren(jexlNodeArray0);
      // Undeclared exception!
      try { 
        featureController0.visit(aSTSetMultNode0, jexlFeatures0);
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
2652,"    protected Object visit(final ASTArrayAccess node, final Object data) {
        if (!features.supportsArrayReferenceExpr()) {
            for (int i = 0; i < node.jjtGetNumChildren(); ++i) {
                final JexlNode child = node.jjtGetChild(i);
                if (!isArrayReferenceLiteral(child)) {
                    throwFeatureException(JexlFeatures.ARRAY_REF_EXPR, child);
                }
            }
        }
        return data;
    }","  public void test29()  throws Throwable  {
      FeatureController featureController0 = new FeatureController((JexlFeatures) null);
      ASTSetLiteral aSTSetLiteral0 = new ASTSetLiteral(644);
      // Undeclared exception!
      try { 
        featureController0.visit(aSTSetLiteral0, aSTSetLiteral0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.parser.FeatureController"", e);
      }
  }"
2653,"    protected Object visit(final ASTArrayAccess node, final Object data) {
        if (!features.supportsArrayReferenceExpr()) {
            for (int i = 0; i < node.jjtGetNumChildren(); ++i) {
                final JexlNode child = node.jjtGetChild(i);
                if (!isArrayReferenceLiteral(child)) {
                    throwFeatureException(JexlFeatures.ARRAY_REF_EXPR, child);
                }
            }
        }
        return data;
    }","  public void test30()  throws Throwable  {
      Parser parser0 = new Parser("""");
      JexlFeatures jexlFeatures0 = parser0.getFeatures();
      FeatureController featureController0 = new FeatureController(jexlFeatures0);
      ASTSetDivNode aSTSetDivNode0 = new ASTSetDivNode(parser0, 4);
      JexlNode[] jexlNodeArray0 = new JexlNode[0];
      aSTSetDivNode0.jjtSetChildren(jexlNodeArray0);
      // Undeclared exception!
      try { 
        featureController0.visit(aSTSetDivNode0, (Object) null);
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
2654,"    protected Object visit(final ASTArrayAccess node, final Object data) {
        if (!features.supportsArrayReferenceExpr()) {
            for (int i = 0; i < node.jjtGetNumChildren(); ++i) {
                final JexlNode child = node.jjtGetChild(i);
                if (!isArrayReferenceLiteral(child)) {
                    throwFeatureException(JexlFeatures.ARRAY_REF_EXPR, child);
                }
            }
        }
        return data;
    }","  public void test31()  throws Throwable  {
      StringProvider stringProvider0 = new StringProvider(""K"");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringProvider0);
      ParserTokenManager parserTokenManager0 = new ParserTokenManager(simpleCharStream0);
      Parser parser0 = new Parser(parserTokenManager0);
      FeatureController featureController0 = new FeatureController((JexlFeatures) null);
      ASTRangeNode aSTRangeNode0 = new ASTRangeNode((-1777));
      ASTStringLiteral aSTStringLiteral0 = new ASTStringLiteral(parser0, 14);
      // Undeclared exception!
      try { 
        featureController0.visit(aSTRangeNode0, aSTStringLiteral0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.parser.FeatureController"", e);
      }
  }"
2655,"    protected Object visit(final ASTArrayAccess node, final Object data) {
        if (!features.supportsArrayReferenceExpr()) {
            for (int i = 0; i < node.jjtGetNumChildren(); ++i) {
                final JexlNode child = node.jjtGetChild(i);
                if (!isArrayReferenceLiteral(child)) {
                    throwFeatureException(JexlFeatures.ARRAY_REF_EXPR, child);
                }
            }
        }
        return data;
    }","  public void test32()  throws Throwable  {
      FeatureController featureController0 = new FeatureController((JexlFeatures) null);
      Parser parser0 = new Parser(""s2j>bv*r"");
      ASTSetDivNode aSTSetDivNode0 = new ASTSetDivNode(parser0, 0);
      ASTMethodNode aSTMethodNode0 = new ASTMethodNode(0);
      // Undeclared exception!
      try { 
        featureController0.visit(aSTMethodNode0, aSTSetDivNode0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.parser.FeatureController"", e);
      }
  }"
2656,"    protected Object visit(final ASTArrayAccess node, final Object data) {
        if (!features.supportsArrayReferenceExpr()) {
            for (int i = 0; i < node.jjtGetNumChildren(); ++i) {
                final JexlNode child = node.jjtGetChild(i);
                if (!isArrayReferenceLiteral(child)) {
                    throwFeatureException(JexlFeatures.ARRAY_REF_EXPR, child);
                }
            }
        }
        return data;
    }","  public void test33()  throws Throwable  {
      FeatureController featureController0 = new FeatureController((JexlFeatures) null);
      Object object0 = new Object();
      StringProvider stringProvider0 = new StringProvider(""NRNode"");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringProvider0, 5, 7);
      ParserTokenManager parserTokenManager0 = new ParserTokenManager(simpleCharStream0, 2);
      Parser parser0 = new Parser(parserTokenManager0);
      ASTMapLiteral aSTMapLiteral0 = new ASTMapLiteral(parser0, 48);
      // Undeclared exception!
      try { 
        featureController0.visit(aSTMapLiteral0, object0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.parser.FeatureController"", e);
      }
  }"
2657,"    protected Object visit(final ASTArrayAccess node, final Object data) {
        if (!features.supportsArrayReferenceExpr()) {
            for (int i = 0; i < node.jjtGetNumChildren(); ++i) {
                final JexlNode child = node.jjtGetChild(i);
                if (!isArrayReferenceLiteral(child)) {
                    throwFeatureException(JexlFeatures.ARRAY_REF_EXPR, child);
                }
            }
        }
        return data;
    }","  public void test34()  throws Throwable  {
      FeatureController featureController0 = new FeatureController((JexlFeatures) null);
      StringProvider stringProvider0 = new StringProvider(""8sx:#b\"""");
      Parser parser0 = new Parser(stringProvider0);
      ASTForeachStatement aSTForeachStatement0 = new ASTForeachStatement(parser0, 0);
      // Undeclared exception!
      try { 
        featureController0.visit(aSTForeachStatement0, (Object) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.parser.FeatureController"", e);
      }
  }"
2658,"    protected Object visit(final ASTArrayAccess node, final Object data) {
        if (!features.supportsArrayReferenceExpr()) {
            for (int i = 0; i < node.jjtGetNumChildren(); ++i) {
                final JexlNode child = node.jjtGetChild(i);
                if (!isArrayReferenceLiteral(child)) {
                    throwFeatureException(JexlFeatures.ARRAY_REF_EXPR, child);
                }
            }
        }
        return data;
    }","  public void test35()  throws Throwable  {
      FeatureController featureController0 = new FeatureController((JexlFeatures) null);
      StringProvider stringProvider0 = new StringProvider(""JU3P2y1%MZrk\"""");
      Parser parser0 = new Parser(stringProvider0);
      ASTDoWhileStatement aSTDoWhileStatement0 = new ASTDoWhileStatement(parser0, (-3472));
      ASTStringLiteral aSTStringLiteral0 = new ASTStringLiteral(parser0, 278);
      // Undeclared exception!
      try { 
        featureController0.visit(aSTDoWhileStatement0, aSTStringLiteral0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.parser.FeatureController"", e);
      }
  }"
2659,"    protected Object visit(final ASTArrayAccess node, final Object data) {
        if (!features.supportsArrayReferenceExpr()) {
            for (int i = 0; i < node.jjtGetNumChildren(); ++i) {
                final JexlNode child = node.jjtGetChild(i);
                if (!isArrayReferenceLiteral(child)) {
                    throwFeatureException(JexlFeatures.ARRAY_REF_EXPR, child);
                }
            }
        }
        return data;
    }","  public void test36()  throws Throwable  {
      ASTJexlLambda aSTJexlLambda0 = new ASTJexlLambda(447);
      JexlFeatures jexlFeatures0 = aSTJexlLambda0.getFeatures();
      FeatureController featureController0 = new FeatureController((JexlFeatures) null);
      ASTConstructorNode aSTConstructorNode0 = new ASTConstructorNode(5);
      // Undeclared exception!
      try { 
        featureController0.visit(aSTConstructorNode0, jexlFeatures0.LAMBDA);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.parser.FeatureController"", e);
      }
  }"
2660,"    protected Object visit(final ASTArrayAccess node, final Object data) {
        if (!features.supportsArrayReferenceExpr()) {
            for (int i = 0; i < node.jjtGetNumChildren(); ++i) {
                final JexlNode child = node.jjtGetChild(i);
                if (!isArrayReferenceLiteral(child)) {
                    throwFeatureException(JexlFeatures.ARRAY_REF_EXPR, child);
                }
            }
        }
        return data;
    }","  public void test37()  throws Throwable  {
      FeatureController featureController0 = new FeatureController((JexlFeatures) null);
      ASTArrayLiteral aSTArrayLiteral0 = new ASTArrayLiteral(92);
      Integer integer0 = new Integer(92);
      // Undeclared exception!
      try { 
        featureController0.visit(aSTArrayLiteral0, integer0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.parser.FeatureController"", e);
      }
  }"
2661,"    protected Object visit(final ASTArrayAccess node, final Object data) {
        if (!features.supportsArrayReferenceExpr()) {
            for (int i = 0; i < node.jjtGetNumChildren(); ++i) {
                final JexlNode child = node.jjtGetChild(i);
                if (!isArrayReferenceLiteral(child)) {
                    throwFeatureException(JexlFeatures.ARRAY_REF_EXPR, child);
                }
            }
        }
        return data;
    }","  public void test38()  throws Throwable  {
      FeatureController featureController0 = new FeatureController((JexlFeatures) null);
      ASTArrayAccess aSTArrayAccess0 = new ASTArrayAccess(8);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        featureController0.visit(aSTArrayAccess0, object0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.parser.FeatureController"", e);
      }
  }"
2662,"    protected Object visit(final ASTArrayAccess node, final Object data) {
        if (!features.supportsArrayReferenceExpr()) {
            for (int i = 0; i < node.jjtGetNumChildren(); ++i) {
                final JexlNode child = node.jjtGetChild(i);
                if (!isArrayReferenceLiteral(child)) {
                    throwFeatureException(JexlFeatures.ARRAY_REF_EXPR, child);
                }
            }
        }
        return data;
    }","  public void test39()  throws Throwable  {
      Parser parser0 = new Parser(""rtX@r5F`t"");
      FeatureController featureController0 = new FeatureController((JexlFeatures) null);
      ASTAnnotation aSTAnnotation0 = new ASTAnnotation(parser0, 5);
      ASTNumberLiteral aSTNumberLiteral0 = new ASTNumberLiteral(parser0, 1210);
      // Undeclared exception!
      try { 
        featureController0.visit(aSTAnnotation0, aSTNumberLiteral0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.parser.FeatureController"", e);
      }
  }"
2663,"    public void throwFeatureException(final int feature, final JexlNode node) {
        final JexlInfo dbgInfo = node.jexlInfo();
        throw new JexlException.Feature(dbgInfo, feature, """");
    }","  public void test40()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      FeatureController featureController0 = new FeatureController(jexlFeatures0);
      ASTUnaryPlusNode aSTUnaryPlusNode0 = new ASTUnaryPlusNode(0);
      // Undeclared exception!
      try { 
        featureController0.throwFeatureException(0, aSTUnaryPlusNode0);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // ?: register error in ''
         //
         verifyException(""org.apache.commons.jexl3.parser.FeatureController"", e);
      }
  }"
2664,"    public void controlNode(final JexlNode node) {
        node.jjtAccept(this, null);
    }","  public void test41()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, (byte) (-111));
      Charset charset0 = Charset.defaultCharset();
      StreamProvider streamProvider0 = new StreamProvider(byteArrayInputStream0, charset0);
      Parser parser0 = new Parser(streamProvider0);
      FeatureController featureController0 = parser0.featureController;
      ASTAmbiguous aSTAmbiguous0 = new ASTAmbiguous((byte)17);
      // Undeclared exception!
      try { 
        featureController0.controlNode(aSTAmbiguous0);
        fail(""Expecting exception: UnsupportedOperationException"");
      } catch(UnsupportedOperationException e) {
         //
         // unexpected type of node
         //
         verifyException(""org.apache.commons.jexl3.parser.ParserVisitor"", e);
      }
  }"
2665,"    public void controlNode(final JexlNode node) {
        node.jjtAccept(this, null);
    }","  public void test42()  throws Throwable  {
      Parser parser0 = new Parser(""org.apache.commons.jexl3.parser.ASTNotNode"");
      FeatureController featureController0 = parser0.featureController;
      // Undeclared exception!
      try { 
        featureController0.controlNode((JexlNode) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.parser.FeatureController"", e);
      }
  }"
2666,"    protected Object visit(final ASTArrayAccess node, final Object data) {
        if (!features.supportsArrayReferenceExpr()) {
            for (int i = 0; i < node.jjtGetNumChildren(); ++i) {
                final JexlNode child = node.jjtGetChild(i);
                if (!isArrayReferenceLiteral(child)) {
                    throwFeatureException(JexlFeatures.ARRAY_REF_EXPR, child);
                }
            }
        }
        return data;
    }","  public void test43()  throws Throwable  {
      StringProvider stringProvider0 = new StringProvider(""K"");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringProvider0);
      ParserTokenManager parserTokenManager0 = new ParserTokenManager(simpleCharStream0);
      Parser parser0 = new Parser(parserTokenManager0);
      JexlFeatures jexlFeatures0 = parser0.getFeatures();
      FeatureController featureController0 = new FeatureController(jexlFeatures0);
      ASTRangeNode aSTRangeNode0 = new ASTRangeNode((-1777));
      ASTStringLiteral aSTStringLiteral0 = new ASTStringLiteral(parser0, 14);
      Object object0 = featureController0.visit(aSTRangeNode0, aSTStringLiteral0);
}"
2667,"    protected Object visit(final ASTArrayAccess node, final Object data) {
        if (!features.supportsArrayReferenceExpr()) {
            for (int i = 0; i < node.jjtGetNumChildren(); ++i) {
                final JexlNode child = node.jjtGetChild(i);
                if (!isArrayReferenceLiteral(child)) {
                    throwFeatureException(JexlFeatures.ARRAY_REF_EXPR, child);
                }
            }
        }
        return data;
    }","  public void test44()  throws Throwable  {
      JexlFeatures jexlFeatures0 = JexlEngine.DEFAULT_FEATURES;
      FeatureController featureController0 = new FeatureController(jexlFeatures0);
      String string0 = ""|"";
      Parser parser0 = new Parser(string0);
      ASTArrayLiteral aSTArrayLiteral0 = new ASTArrayLiteral(parser0, jexlFeatures0.LAMBDA);
      JexlFeatures jexlFeatures1 = (JexlFeatures)featureController0.visit(aSTArrayLiteral0, jexlFeatures0);
}"
2668,"    protected Object visit(final ASTArrayAccess node, final Object data) {
        if (!features.supportsArrayReferenceExpr()) {
            for (int i = 0; i < node.jjtGetNumChildren(); ++i) {
                final JexlNode child = node.jjtGetChild(i);
                if (!isArrayReferenceLiteral(child)) {
                    throwFeatureException(JexlFeatures.ARRAY_REF_EXPR, child);
                }
            }
        }
        return data;
    }","  public void test45()  throws Throwable  {
      JexlFeatures jexlFeatures0 = JexlEngine.DEFAULT_FEATURES;
      FeatureController featureController0 = new FeatureController(jexlFeatures0);
      Parser parser0 = new Parser(""KuL#1S|3p(Jr9Cpt"");
      ASTMethodNode aSTMethodNode0 = new ASTMethodNode(parser0, 12);
      JexlFeatures jexlFeatures1 = (JexlFeatures)featureController0.visit(aSTMethodNode0, jexlFeatures0);
}"
2669,"    protected Object visit(final ASTArrayAccess node, final Object data) {
        if (!features.supportsArrayReferenceExpr()) {
            for (int i = 0; i < node.jjtGetNumChildren(); ++i) {
                final JexlNode child = node.jjtGetChild(i);
                if (!isArrayReferenceLiteral(child)) {
                    throwFeatureException(JexlFeatures.ARRAY_REF_EXPR, child);
                }
            }
        }
        return data;
    }","  public void test46()  throws Throwable  {
      StringProvider stringProvider0 = new StringProvider(""org.apache.commons.jexl3.parser.FeatureController"");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringProvider0, 0, (-830), 0);
      ParserTokenManager parserTokenManager0 = new ParserTokenManager(simpleCharStream0);
      simpleCharStream0.reInit((Provider) stringProvider0);
      Parser parser0 = new Parser(parserTokenManager0);
      FeatureController featureController0 = parser0.featureController;
      ASTMapLiteral aSTMapLiteral0 = new ASTMapLiteral((-830));
      ASTForeachStatement aSTForeachStatement0 = new ASTForeachStatement(parser0, (-830));
      Object object0 = featureController0.visit(aSTForeachStatement0, aSTMapLiteral0);
}"
2670,"    public void throwFeatureException(final int feature, final JexlNode node) {
        final JexlInfo dbgInfo = node.jexlInfo();
        throw new JexlException.Feature(dbgInfo, feature, """");
    }","  public void test47()  throws Throwable  {
      FeatureController featureController0 = new FeatureController((JexlFeatures) null);
      // Undeclared exception!
      try { 
        featureController0.throwFeatureException(0, (JexlNode) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.parser.FeatureController"", e);
      }
  }"
2671,"    public void controlNode(final JexlNode node) {
        node.jjtAccept(this, null);
    }","  public void test48()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      FeatureController featureController0 = new FeatureController(jexlFeatures0);
      ASTMapLiteral aSTMapLiteral0 = new ASTMapLiteral(0);
      featureController0.controlNode(aSTMapLiteral0);
}"
2672,"    protected Object visit(final ASTArrayAccess node, final Object data) {
        if (!features.supportsArrayReferenceExpr()) {
            for (int i = 0; i < node.jjtGetNumChildren(); ++i) {
                final JexlNode child = node.jjtGetChild(i);
                if (!isArrayReferenceLiteral(child)) {
                    throwFeatureException(JexlFeatures.ARRAY_REF_EXPR, child);
                }
            }
        }
        return data;
    }","  public void test49()  throws Throwable  {
      Parser parser0 = new Parser(""org.apache.commons.jexl3.parser.FeatureController"");
      FeatureController featureController0 = parser0.featureController;
      ASTSetXorNode aSTSetXorNode0 = new ASTSetXorNode(3);
      ASTSetLiteral aSTSetLiteral0 = new ASTSetLiteral(3);
      aSTSetXorNode0.jjtAddChild(aSTSetLiteral0, 1);
      Object object0 = featureController0.visit(aSTSetXorNode0, (Object) null);
}"
2673,"    protected Object visit(final ASTArrayAccess node, final Object data) {
        if (!features.supportsArrayReferenceExpr()) {
            for (int i = 0; i < node.jjtGetNumChildren(); ++i) {
                final JexlNode child = node.jjtGetChild(i);
                if (!isArrayReferenceLiteral(child)) {
                    throwFeatureException(JexlFeatures.ARRAY_REF_EXPR, child);
                }
            }
        }
        return data;
    }","  public void test50()  throws Throwable  {
      Parser parser0 = new Parser(""sMREq)O9vq!"");
      FeatureController featureController0 = parser0.featureController;
      ASTSetSubNode aSTSetSubNode0 = new ASTSetSubNode(parser0, 1335);
      JexlNode[] jexlNodeArray0 = new JexlNode[8];
      ASTGENode aSTGENode0 = new ASTGENode(570);
      jexlNodeArray0[0] = (JexlNode) aSTGENode0;
      jexlNodeArray0[1] = (JexlNode) aSTSetSubNode0;
      jexlNodeArray0[2] = (JexlNode) aSTSetSubNode0;
      jexlNodeArray0[3] = (JexlNode) aSTSetSubNode0;
      jexlNodeArray0[4] = (JexlNode) aSTSetSubNode0;
      jexlNodeArray0[5] = (JexlNode) aSTSetSubNode0;
      jexlNodeArray0[6] = (JexlNode) aSTSetSubNode0;
      jexlNodeArray0[7] = (JexlNode) aSTSetSubNode0;
      aSTSetSubNode0.jjtSetChildren(jexlNodeArray0);
      featureController0.visit(aSTSetSubNode0, (Object) null);
      featureController0.getFeatures();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      DataInputStream dataInputStream0 = new DataInputStream(mockFileInputStream0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(dataInputStream0);
      Object object0 = featureController0.visit((ASTMethodNode) null, bufferedInputStream0);
}"
2674,"    protected Object visit(final ASTArrayAccess node, final Object data) {
        if (!features.supportsArrayReferenceExpr()) {
            for (int i = 0; i < node.jjtGetNumChildren(); ++i) {
                final JexlNode child = node.jjtGetChild(i);
                if (!isArrayReferenceLiteral(child)) {
                    throwFeatureException(JexlFeatures.ARRAY_REF_EXPR, child);
                }
            }
        }
        return data;
    }","  public void test51()  throws Throwable  {
      JexlFeatures jexlFeatures0 = JexlEngine.DEFAULT_FEATURES;
      FeatureController featureController0 = new FeatureController(jexlFeatures0);
      ASTSetDivNode aSTSetDivNode0 = new ASTSetDivNode(9);
      JexlNode[] jexlNodeArray0 = new JexlNode[7];
      aSTSetDivNode0.jjtSetChildren(jexlNodeArray0);
      Object object0 = featureController0.visit(aSTSetDivNode0, (Object) null);
}"
2675,"    protected Object visit(final ASTArrayAccess node, final Object data) {
        if (!features.supportsArrayReferenceExpr()) {
            for (int i = 0; i < node.jjtGetNumChildren(); ++i) {
                final JexlNode child = node.jjtGetChild(i);
                if (!isArrayReferenceLiteral(child)) {
                    throwFeatureException(JexlFeatures.ARRAY_REF_EXPR, child);
                }
            }
        }
        return data;
    }","  public void test52()  throws Throwable  {
      JexlFeatures jexlFeatures0 = JexlEngine.DEFAULT_FEATURES;
      FeatureController featureController0 = new FeatureController(jexlFeatures0);
      Object object0 = featureController0.visit((ASTRangeNode) null, (Object) null);
}"
2676,"    protected Object visit(final ASTArrayAccess node, final Object data) {
        if (!features.supportsArrayReferenceExpr()) {
            for (int i = 0; i < node.jjtGetNumChildren(); ++i) {
                final JexlNode child = node.jjtGetChild(i);
                if (!isArrayReferenceLiteral(child)) {
                    throwFeatureException(JexlFeatures.ARRAY_REF_EXPR, child);
                }
            }
        }
        return data;
    }","  public void test53()  throws Throwable  {
      Parser parser0 = new Parser(""t&z.7HW}9D|[A>r"");
      FeatureController featureController0 = parser0.featureController;
      ASTSetLiteral aSTSetLiteral0 = new ASTSetLiteral(1);
      Object object0 = featureController0.visit(aSTSetLiteral0, (Object) null);
}"
2677,"    protected Object visit(final ASTArrayAccess node, final Object data) {
        if (!features.supportsArrayReferenceExpr()) {
            for (int i = 0; i < node.jjtGetNumChildren(); ++i) {
                final JexlNode child = node.jjtGetChild(i);
                if (!isArrayReferenceLiteral(child)) {
                    throwFeatureException(JexlFeatures.ARRAY_REF_EXPR, child);
                }
            }
        }
        return data;
    }","  public void test54()  throws Throwable  {
      JexlFeatures jexlFeatures0 = JexlEngine.DEFAULT_FEATURES;
      FeatureController featureController0 = new FeatureController(jexlFeatures0);
      ASTBitwiseXorNode aSTBitwiseXorNode0 = new ASTBitwiseXorNode(10);
      ASTSetLiteral aSTSetLiteral0 = new ASTSetLiteral(7);
      ASTBitwiseXorNode aSTBitwiseXorNode1 = (ASTBitwiseXorNode)featureController0.visit(aSTSetLiteral0, aSTBitwiseXorNode0);
}"
2678,"    protected Object visit(final ASTArrayAccess node, final Object data) {
        if (!features.supportsArrayReferenceExpr()) {
            for (int i = 0; i < node.jjtGetNumChildren(); ++i) {
                final JexlNode child = node.jjtGetChild(i);
                if (!isArrayReferenceLiteral(child)) {
                    throwFeatureException(JexlFeatures.ARRAY_REF_EXPR, child);
                }
            }
        }
        return data;
    }","  public void test55()  throws Throwable  {
      JexlFeatures jexlFeatures0 = JexlEngine.DEFAULT_FEATURES;
      FeatureController featureController0 = new FeatureController(jexlFeatures0);
      ASTMapLiteral aSTMapLiteral0 = new ASTMapLiteral((Parser) null, 453);
      Object object0 = featureController0.visit(aSTMapLiteral0, (Object) null);
}"
2679,"    protected Object visit(final ASTArrayAccess node, final Object data) {
        if (!features.supportsArrayReferenceExpr()) {
            for (int i = 0; i < node.jjtGetNumChildren(); ++i) {
                final JexlNode child = node.jjtGetChild(i);
                if (!isArrayReferenceLiteral(child)) {
                    throwFeatureException(JexlFeatures.ARRAY_REF_EXPR, child);
                }
            }
        }
        return data;
    }","  public void test56()  throws Throwable  {
      StringProvider stringProvider0 = new StringProvider(""K"");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringProvider0);
      ParserTokenManager parserTokenManager0 = new ParserTokenManager(simpleCharStream0);
      Parser parser0 = new Parser(parserTokenManager0);
      JexlFeatures jexlFeatures0 = parser0.getFeatures();
      FeatureController featureController0 = new FeatureController(jexlFeatures0);
      ASTAnnotation aSTAnnotation0 = new ASTAnnotation(5);
      Object object0 = featureController0.visit(aSTAnnotation0, ""K"");
}"
2680,"    protected Object visit(final ASTArrayAccess node, final Object data) {
        if (!features.supportsArrayReferenceExpr()) {
            for (int i = 0; i < node.jjtGetNumChildren(); ++i) {
                final JexlNode child = node.jjtGetChild(i);
                if (!isArrayReferenceLiteral(child)) {
                    throwFeatureException(JexlFeatures.ARRAY_REF_EXPR, child);
                }
            }
        }
        return data;
    }","  public void test57()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""t&z.7}9D|[A>r"");
      StreamProvider streamProvider0 = new StreamProvider(stringReader0);
      Parser parser0 = new Parser(streamProvider0);
      FeatureController featureController0 = parser0.featureController;
      ASTAnnotation aSTAnnotation0 = new ASTAnnotation(1);
      Object object0 = featureController0.visit(aSTAnnotation0, (Object) null);
}"
2681,"    protected Object visit(final ASTArrayAccess node, final Object data) {
        if (!features.supportsArrayReferenceExpr()) {
            for (int i = 0; i < node.jjtGetNumChildren(); ++i) {
                final JexlNode child = node.jjtGetChild(i);
                if (!isArrayReferenceLiteral(child)) {
                    throwFeatureException(JexlFeatures.ARRAY_REF_EXPR, child);
                }
            }
        }
        return data;
    }","  public void test58()  throws Throwable  {
      JexlFeatures jexlFeatures0 = JexlEngine.DEFAULT_FEATURES;
      FeatureController featureController0 = new FeatureController(jexlFeatures0);
      ASTMethodNode aSTMethodNode0 = new ASTMethodNode(14);
      Object object0 = featureController0.visit(aSTMethodNode0, (Object) null);
}"
2682,"    protected Object visit(final ASTArrayAccess node, final Object data) {
        if (!features.supportsArrayReferenceExpr()) {
            for (int i = 0; i < node.jjtGetNumChildren(); ++i) {
                final JexlNode child = node.jjtGetChild(i);
                if (!isArrayReferenceLiteral(child)) {
                    throwFeatureException(JexlFeatures.ARRAY_REF_EXPR, child);
                }
            }
        }
        return data;
    }","  public void test59()  throws Throwable  {
      JexlFeatures jexlFeatures0 = JexlEngine.DEFAULT_FEATURES;
      FeatureController featureController0 = new FeatureController(jexlFeatures0);
      Parser parser0 = new Parser("""");
      ASTConstructorNode aSTConstructorNode0 = new ASTConstructorNode(parser0, 0);
      ASTNumberLiteral aSTNumberLiteral0 = new ASTNumberLiteral(parser0, (-1926));
      ASTNumberLiteral aSTNumberLiteral1 = (ASTNumberLiteral)featureController0.visit(aSTConstructorNode0, aSTNumberLiteral0);
}"
2683,"    protected Object visit(final ASTArrayAccess node, final Object data) {
        if (!features.supportsArrayReferenceExpr()) {
            for (int i = 0; i < node.jjtGetNumChildren(); ++i) {
                final JexlNode child = node.jjtGetChild(i);
                if (!isArrayReferenceLiteral(child)) {
                    throwFeatureException(JexlFeatures.ARRAY_REF_EXPR, child);
                }
            }
        }
        return data;
    }","  public void test60()  throws Throwable  {
      Parser parser0 = new Parser(""xf!Oi`\""5k[WrgAaDtz"");
      FeatureController featureController0 = parser0.featureController;
      ASTForeachStatement aSTForeachStatement0 = new ASTForeachStatement(parser0, 5);
      Object object0 = featureController0.visit(aSTForeachStatement0, (Object) null);
}"
2684,"    protected Object visit(final ASTArrayAccess node, final Object data) {
        if (!features.supportsArrayReferenceExpr()) {
            for (int i = 0; i < node.jjtGetNumChildren(); ++i) {
                final JexlNode child = node.jjtGetChild(i);
                if (!isArrayReferenceLiteral(child)) {
                    throwFeatureException(JexlFeatures.ARRAY_REF_EXPR, child);
                }
            }
        }
        return data;
    }","  public void test61()  throws Throwable  {
      StringProvider stringProvider0 = new StringProvider(""org.apache.commons.jexl3.parser.FeatureController"");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringProvider0, 0, (-830), 0);
      ParserTokenManager parserTokenManager0 = new ParserTokenManager(simpleCharStream0);
      simpleCharStream0.reInit((Provider) stringProvider0);
      Parser parser0 = new Parser(parserTokenManager0);
      FeatureController featureController0 = parser0.featureController;
      ASTDoWhileStatement aSTDoWhileStatement0 = new ASTDoWhileStatement(parser0, 4096);
      ASTNumberLiteral aSTNumberLiteral0 = new ASTNumberLiteral(parser0, 0);
      ASTNumberLiteral aSTNumberLiteral1 = (ASTNumberLiteral)featureController0.visit(aSTDoWhileStatement0, aSTNumberLiteral0);
}"
2685,"    protected Object visit(final ASTArrayAccess node, final Object data) {
        if (!features.supportsArrayReferenceExpr()) {
            for (int i = 0; i < node.jjtGetNumChildren(); ++i) {
                final JexlNode child = node.jjtGetChild(i);
                if (!isArrayReferenceLiteral(child)) {
                    throwFeatureException(JexlFeatures.ARRAY_REF_EXPR, child);
                }
            }
        }
        return data;
    }","  public void test62()  throws Throwable  {
      JexlFeatures jexlFeatures0 = JexlEngine.DEFAULT_FEATURES;
      FeatureController featureController0 = new FeatureController(jexlFeatures0);
      ASTWhileStatement aSTWhileStatement0 = new ASTWhileStatement(5);
      JexlFeatures jexlFeatures1 = (JexlFeatures)featureController0.visit(aSTWhileStatement0, jexlFeatures0);
}"
2686,"    protected Object visit(final ASTArrayAccess node, final Object data) {
        if (!features.supportsArrayReferenceExpr()) {
            for (int i = 0; i < node.jjtGetNumChildren(); ++i) {
                final JexlNode child = node.jjtGetChild(i);
                if (!isArrayReferenceLiteral(child)) {
                    throwFeatureException(JexlFeatures.ARRAY_REF_EXPR, child);
                }
            }
        }
        return data;
    }","  public void test63()  throws Throwable  {
      JexlFeatures jexlFeatures0 = JexlEngine.DEFAULT_FEATURES;
      FeatureController featureController0 = new FeatureController(jexlFeatures0);
      Parser parser0 = new Parser("")"");
      ASTArrayAccess aSTArrayAccess0 = new ASTArrayAccess(parser0, 11);
      Parser parser1 = (Parser)featureController0.visit(aSTArrayAccess0, parser0);
}"
2687,"    protected Object visit(final ASTArrayAccess node, final Object data) {
        if (!features.supportsArrayReferenceExpr()) {
            for (int i = 0; i < node.jjtGetNumChildren(); ++i) {
                final JexlNode child = node.jjtGetChild(i);
                if (!isArrayReferenceLiteral(child)) {
                    throwFeatureException(JexlFeatures.ARRAY_REF_EXPR, child);
                }
            }
        }
        return data;
    }","  public void test64()  throws Throwable  {
      Parser parser0 = new Parser(""Tw"");
      JexlFeatures jexlFeatures0 = parser0.getFeatures();
      FeatureController featureController0 = new FeatureController(jexlFeatures0);
      ASTSetSubNode aSTSetSubNode0 = new ASTSetSubNode(778);
      // Undeclared exception!
      try { 
        featureController0.visit(aSTSetSubNode0, (Object) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
2688,"    protected Object visit(final ASTArrayAccess node, final Object data) {
        if (!features.supportsArrayReferenceExpr()) {
            for (int i = 0; i < node.jjtGetNumChildren(); ++i) {
                final JexlNode child = node.jjtGetChild(i);
                if (!isArrayReferenceLiteral(child)) {
                    throwFeatureException(JexlFeatures.ARRAY_REF_EXPR, child);
                }
            }
        }
        return data;
    }","  public void test65()  throws Throwable  {
      Parser parser0 = new Parser(""?9iey:"");
      FeatureController featureController0 = parser0.featureController;
      ASTSetAddNode aSTSetAddNode0 = new ASTSetAddNode((byte)12);
      ASTStringLiteral aSTStringLiteral0 = new ASTStringLiteral(parser0, (byte)109);
      // Undeclared exception!
      try { 
        featureController0.visit(aSTSetAddNode0, aSTStringLiteral0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
2689,"    protected Object visit(final ASTArrayAccess node, final Object data) {
        if (!features.supportsArrayReferenceExpr()) {
            for (int i = 0; i < node.jjtGetNumChildren(); ++i) {
                final JexlNode child = node.jjtGetChild(i);
                if (!isArrayReferenceLiteral(child)) {
                    throwFeatureException(JexlFeatures.ARRAY_REF_EXPR, child);
                }
            }
        }
        return data;
    }","  public void test66()  throws Throwable  {
      StringProvider stringProvider0 = new StringProvider(""K"");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringProvider0);
      ParserTokenManager parserTokenManager0 = new ParserTokenManager(simpleCharStream0);
      Parser parser0 = new Parser(parserTokenManager0);
      JexlFeatures jexlFeatures0 = parser0.getFeatures();
      FeatureController featureController0 = new FeatureController(jexlFeatures0);
      ASTAnnotation aSTAnnotation0 = new ASTAnnotation(5);
      ASTSetAndNode aSTSetAndNode0 = new ASTSetAndNode((-1777));
      // Undeclared exception!
      try { 
        featureController0.visit(aSTSetAndNode0, aSTAnnotation0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
2690,"    public void setFeatures(final JexlFeatures fdesc) {
        this.features = fdesc;
    }","  public void test67()  throws Throwable  {
      JexlFeatures jexlFeatures0 = JexlEngine.DEFAULT_FEATURES;
      FeatureController featureController0 = new FeatureController(jexlFeatures0);
      featureController0.setFeatures(jexlFeatures0);
}"
2691,"    protected Object visit(final ASTArrayAccess node, final Object data) {
        if (!features.supportsArrayReferenceExpr()) {
            for (int i = 0; i < node.jjtGetNumChildren(); ++i) {
                final JexlNode child = node.jjtGetChild(i);
                if (!isArrayReferenceLiteral(child)) {
                    throwFeatureException(JexlFeatures.ARRAY_REF_EXPR, child);
                }
            }
        }
        return data;
    }","  public void test68()  throws Throwable  {
      Parser parser0 = new Parser(""org.apache.commons.jexl3.parser.FeatureController"");
      FeatureController featureController0 = parser0.featureController;
      // Undeclared exception!
      try { 
        featureController0.visit((ASTSetOrNode) null, """");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.parser.FeatureController"", e);
      }
  }"
2692,"    protected Object visit(final ASTArrayAccess node, final Object data) {
        if (!features.supportsArrayReferenceExpr()) {
            for (int i = 0; i < node.jjtGetNumChildren(); ++i) {
                final JexlNode child = node.jjtGetChild(i);
                if (!isArrayReferenceLiteral(child)) {
                    throwFeatureException(JexlFeatures.ARRAY_REF_EXPR, child);
                }
            }
        }
        return data;
    }","  public void test69()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      FeatureController featureController0 = new FeatureController(jexlFeatures0);
      Parser parser0 = new Parser(""J 0&A;`!U~w[-Xi"");
      ASTSetMultNode aSTSetMultNode0 = new ASTSetMultNode(parser0, 3);
      // Undeclared exception!
      try { 
        featureController0.visit(aSTSetMultNode0, parser0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
2693,"    protected Object visit(final ASTArrayAccess node, final Object data) {
        if (!features.supportsArrayReferenceExpr()) {
            for (int i = 0; i < node.jjtGetNumChildren(); ++i) {
                final JexlNode child = node.jjtGetChild(i);
                if (!isArrayReferenceLiteral(child)) {
                    throwFeatureException(JexlFeatures.ARRAY_REF_EXPR, child);
                }
            }
        }
        return data;
    }","  public void test70()  throws Throwable  {
      Parser parser0 = new Parser("""");
      JexlFeatures jexlFeatures0 = parser0.getFeatures();
      FeatureController featureController0 = new FeatureController(jexlFeatures0);
      ASTSetDivNode aSTSetDivNode0 = new ASTSetDivNode(parser0, 4);
      // Undeclared exception!
      try { 
        featureController0.visit(aSTSetDivNode0, 8);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
2694,"    protected Object visit(final ASTArrayAccess node, final Object data) {
        if (!features.supportsArrayReferenceExpr()) {
            for (int i = 0; i < node.jjtGetNumChildren(); ++i) {
                final JexlNode child = node.jjtGetChild(i);
                if (!isArrayReferenceLiteral(child)) {
                    throwFeatureException(JexlFeatures.ARRAY_REF_EXPR, child);
                }
            }
        }
        return data;
    }","  public void test71()  throws Throwable  {
      Parser parser0 = new Parser(""?9iey:"");
      FeatureController featureController0 = parser0.featureController;
      ASTSetXorNode aSTSetXorNode0 = new ASTSetXorNode(3);
      // Undeclared exception!
      try { 
        featureController0.visit(aSTSetXorNode0, (byte)0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
2695,"    protected Object visit(final ASTArrayAccess node, final Object data) {
        if (!features.supportsArrayReferenceExpr()) {
            for (int i = 0; i < node.jjtGetNumChildren(); ++i) {
                final JexlNode child = node.jjtGetChild(i);
                if (!isArrayReferenceLiteral(child)) {
                    throwFeatureException(JexlFeatures.ARRAY_REF_EXPR, child);
                }
            }
        }
        return data;
    }","  public void test72()  throws Throwable  {
      JexlFeatures jexlFeatures0 = JexlEngine.DEFAULT_FEATURES;
      FeatureController featureController0 = new FeatureController(jexlFeatures0);
      Parser parser0 = new Parser("""");
      ASTAssignment aSTAssignment0 = new ASTAssignment(parser0, 0);
      // Undeclared exception!
      try { 
        featureController0.visit(aSTAssignment0, (Object) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
2696,,"  public void test0()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      TemplateInterpreter.Arguments templateInterpreter_Arguments0 = new TemplateInterpreter.Arguments(engine0);
      TemplateInterpreter templateInterpreter0 = new TemplateInterpreter(templateInterpreter_Arguments0);
      Parser parser0 = engine0.parser;
      ASTVar aSTVar0 = new ASTVar(parser0, 2);
      InterpreterBase.CallDispatcher interpreterBase_CallDispatcher0 = templateInterpreter0.new CallDispatcher(aSTVar0, true);
      Integer integer0 = new Integer(2);
      Object[] objectArray0 = new Object[7];
      aSTVar0.jjtSetValue(templateInterpreter_Arguments0);
      Object object0 = interpreterBase_CallDispatcher0.tryEval(integer0, """", objectArray0);
}"
2697,,"  public void test1()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      Long long0 = new Long(0L);
      // Undeclared exception!
      try { 
        engine0.setProperty((JexlContext) null, (Object) jexlBuilder0, ""JxltLiteral"", (Object) long0);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
      }
  }"
2698,,"  public void test2()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      Object[] objectArray0 = new Object[0];
      JexlOptions jexlOptions0 = engine0.options;
      Interpreter interpreter0 = engine0.createInterpreter(engine0.EMPTY_CONTEXT, (Frame) null, jexlOptions0);
      ASTFalseNode aSTFalseNode0 = new ASTFalseNode((-1738));
      InterpreterBase.CallDispatcher interpreterBase_CallDispatcher0 = interpreter0.new CallDispatcher(aSTFalseNode0, false);
      boolean boolean0 = interpreterBase_CallDispatcher0.isTargetMethod(aSTFalseNode0, ""hAmeUza"", objectArray0);
}"
2699,,"  public void test3()  throws Throwable  {
      Engine engine0 = new Engine();
      Interpreter interpreter0 = engine0.createInterpreter((JexlContext) null, (Frame) null, (JexlOptions) null);
      Object[] objectArray0 = new Object[8];
      ASTNotNode aSTNotNode0 = new ASTNotNode((-1165));
      InterpreterBase.CallDispatcher interpreterBase_CallDispatcher0 = interpreter0.new CallDispatcher(aSTNotNode0, true);
      boolean boolean0 = interpreterBase_CallDispatcher0.isContextMethod(""8%>RZEA@ j}3sgO["", objectArray0);
}"
2700,,"  public void test4()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      JexlOptions jexlOptions0 = new JexlOptions();
      String[] stringArray0 = new String[5];
      Scope scope0 = new Scope((Scope) null, stringArray0);
      Frame frame0 = new Frame(scope0, stringArray0, (-257));
      Interpreter interpreter0 = new Interpreter(engine0, jexlOptions0, engine0.EMPTY_CONTEXT, frame0);
      Parser parser0 = engine0.parser;
      ASTArrayAccess aSTArrayAccess0 = new ASTArrayAccess(parser0, (-257));
      InterpreterBase.CallDispatcher interpreterBase_CallDispatcher0 = interpreter0.new CallDispatcher(aSTArrayAccess0, false);
      boolean boolean0 = interpreterBase_CallDispatcher0.isArithmeticMethod("""", stringArray0);
}"
2701,"    protected InterpreterBase(final Engine engine, final JexlOptions opts, final JexlContext aContext) {
        this.jexl = engine;
        this.logger = jexl.logger;
        this.uberspect = jexl.uberspect;
        this.context = aContext != null ? aContext : Engine.EMPTY_CONTEXT;
        this.cache = engine.cache != null;
        final JexlArithmetic jexla = jexl.arithmetic;
        this.options = opts == null? engine.options(aContext) : opts;
        this.arithmetic = jexla.options(options);
        if (arithmetic != jexla && !arithmetic.getClass().equals(jexla.getClass())) {
            logger.warn(""expected arithmetic to be "" + jexla.getClass().getSimpleName()
                    + "", got "" + arithmetic.getClass().getSimpleName()
            );
        }
        if (this.context instanceof JexlContext.NamespaceResolver) {
            ns = ((JexlContext.NamespaceResolver) context);
        } else {
            ns = Engine.EMPTY_NS;
        }
        AtomicBoolean acancel = null;
        if (this.context instanceof JexlContext.CancellationHandle) {
            acancel = ((JexlContext.CancellationHandle) context).getCancellation();
        }
        this.cancelled = acancel != null? acancel : new AtomicBoolean(false);
        final Map<String,Object> ons = options.getNamespaces();
        this.functions = ons.isEmpty()? jexl.functions : ons;
        this.functors = null;
        this.operators = new Operators(this);
    }","  public void test5()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      Object[] objectArray0 = new Object[7];
      InterpreterBase.ArithmeticFuncall interpreterBase_ArithmeticFuncall0 = new InterpreterBase.ArithmeticFuncall((JexlMethod) null, true);
      TemplateInterpreter.Arguments templateInterpreter_Arguments0 = new TemplateInterpreter.Arguments(engine0);
      TemplateInterpreter templateInterpreter0 = new TemplateInterpreter(templateInterpreter_Arguments0);
      ASTAssignment aSTAssignment0 = new ASTAssignment((-1));
      // Undeclared exception!
      try { 
        interpreterBase_ArithmeticFuncall0.tryInvoke(templateInterpreter0, ""org.apache.commons.jexl3.internal.InterpreterBase$ContextualCtor"", aSTAssignment0, objectArray0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.internal.InterpreterBase$ArithmeticFuncall"", e);
      }
  }"
2702,"    protected void cancelCheck(final JexlNode node) {
        if (isCancelled()) {
            throw new JexlException.Cancel(node);
        }
    }","  public void test6()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      JexlOptions jexlOptions0 = new JexlOptions();
      Object[] objectArray0 = new Object[3];
      Frame frame0 = new Frame((Scope) null, objectArray0, 0);
      Interpreter interpreter0 = new Interpreter(engine0, jexlOptions0, engine0.EMPTY_CONTEXT, frame0);
      ASTBlock aSTBlock0 = new ASTBlock(0);
      interpreter0.cancelCheck(aSTBlock0);
}"
2703,"    protected void setAttribute(final Object object, final Object attribute, final Object value, final JexlNode node) {
        cancelCheck(node);
        final JexlOperator operator = node != null && node.jjtGetParent() instanceof ASTArrayAccess
                                      ? JexlOperator.ARRAY_SET : JexlOperator.PROPERTY_SET;
        final Object result = operators.tryOverload(node, operator, object, attribute, value);
        if (result != JexlEngine.TRY_FAILED) {
            return;
        }
        Exception xcause = null;
        try {
            // attempt to reuse last executor cached in volatile JexlNode.value
            if (node != null && cache) {
                final Object cached = node.jjtGetValue();
                if (cached instanceof JexlPropertySet) {
                    final JexlPropertySet setter = (JexlPropertySet) cached;
                    final Object eval = setter.tryInvoke(object, attribute, value);
                    if (!setter.tryFailed(eval)) {
                        return;
                    }
                }
            }
            final List<JexlUberspect.PropertyResolver> resolvers = uberspect.getResolvers(operator, object);
            JexlPropertySet vs = uberspect.getPropertySet(resolvers, object, attribute, value);
            // if we can't find an exact match, narrow the value argument and try again
            if (vs == null) {
                // replace all numbers with the smallest type that will fit
                final Object[] narrow = {value};
                if (arithmetic.narrowArguments(narrow)) {
                    vs = uberspect.getPropertySet(resolvers, object, attribute, narrow[0]);
                }
            }
            if (vs != null) {
                // cache executor in volatile JexlNode.value
                vs.invoke(object, value);
                if (node != null && cache && vs.isCacheable()) {
                    node.jjtSetValue(vs);
                }
                return;
            }
        } catch (final Exception xany) {
            xcause = xany;
        }
        // lets fail
        if (node == null) {
            // direct call
            final String error = ""unable to set object property""
                    + "", class: "" + object.getClass().getName()
                    + "", property: "" + attribute
                    + "", argument: "" + value.getClass().getSimpleName();
            throw new UnsupportedOperationException(error, xcause);
        }
        final String attrStr = attribute != null ? attribute.toString() : null;
        unsolvableProperty(node, attrStr, true, xcause);
    }","  public void test7()  throws Throwable  {
      Engine engine0 = new Engine();
      TemplateInterpreter.Arguments templateInterpreter_Arguments0 = new TemplateInterpreter.Arguments(engine0);
      TemplateInterpreter templateInterpreter0 = new TemplateInterpreter(templateInterpreter_Arguments0);
      Byte byte0 = new Byte((byte)39);
      // Undeclared exception!
      try { 
        templateInterpreter0.setAttribute(engine0, engine0, byte0);
        fail(""Expecting exception: UnsupportedOperationException"");
      } catch(UnsupportedOperationException e) {
         //
         // unable to set object property, class: org.apache.commons.jexl3.internal.Engine, property: org.apache.commons.jexl3.internal.Engine@3, argument: Byte
         //
         verifyException(""org.apache.commons.jexl3.internal.InterpreterBase"", e);
      }
  }"
2704,"    protected Object unsolvableVariable(final JexlNode node, final String var, final boolean undef) {
        return variableError(node, var, undef? VariableIssue.UNDEFINED : VariableIssue.NULLVALUE);
    }","  public void test8()  throws Throwable  {
      Engine engine0 = new Engine();
      JexlEngine.EmptyContext jexlEngine_EmptyContext0 = (JexlEngine.EmptyContext)JexlEngine.EMPTY_CONTEXT;
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.strict(false);
      JexlOptions jexlOptions0 = jexlBuilder0.options();
      Interpreter interpreter0 = engine0.createInterpreter(jexlEngine_EmptyContext0, (Frame) null, jexlOptions0);
      ASTIfStatement aSTIfStatement0 = new ASTIfStatement(4);
      Object object0 = interpreter0.unsolvableVariable(aSTIfStatement0, ""`y4<W"", false);
}"
2705,"    protected Object unsolvableMethod(final JexlNode node, final String method) {
        return unsolvableMethod(node, method, null);
    }","  public void test9()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.strict(false);
      Engine engine0 = new Engine(jexlBuilder0);
      MapContext mapContext0 = new MapContext();
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      Scope scope1 = new Scope(scope0, (String[]) null);
      Frame frame0 = new Frame(scope1, (Object[]) null, 9);
      ASTJexlScript aSTJexlScript0 = new ASTJexlScript(85);
      JexlOptions jexlOptions0 = engine0.options(aSTJexlScript0, mapContext0);
      Interpreter interpreter0 = engine0.createInterpreter(mapContext0, frame0, jexlOptions0);
      Object object0 = interpreter0.unsolvableMethod(aSTJexlScript0, ""Kgx{9IokaCu "");
}"
2706,"    protected Object undefinedVariable(final JexlNode node, final String var) {
        return variableError(node, var, VariableIssue.UNDEFINED);
    }","  public void test10()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlBuilder jexlBuilder1 = jexlBuilder0.strict(false);
      Engine engine0 = new Engine(jexlBuilder1);
      MapContext mapContext0 = new MapContext();
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      Scope scope1 = new Scope(scope0, (String[]) null);
      Frame frame0 = new Frame(scope1, (Object[]) null, 9);
      ASTJexlScript aSTJexlScript0 = new ASTJexlScript(85);
      JexlOptions jexlOptions0 = engine0.options(aSTJexlScript0, mapContext0);
      Interpreter interpreter0 = engine0.createInterpreter(mapContext0, frame0, jexlOptions0);
      Object object0 = interpreter0.undefinedVariable(aSTJexlScript0, ""org.apache.commons.jexl3.internal.InterpreterBase$Funcall"");
}"
2707,"    protected static String stringifyPropertyValue(final JexlNode node) {
        return node != null? new Debugger().depth(1).data(node) : ""???"";
    }","  public void test11()  throws Throwable  {
      ASTSetSubNode aSTSetSubNode0 = new ASTSetSubNode((-1981));
      String string0 = InterpreterBase.stringifyPropertyValue(aSTSetSubNode0);
}"
2708,"    protected String stringifyProperty(final JexlNode node) {
        if (node instanceof ASTArrayAccess) {
            return ""[""
                    + stringifyPropertyValue(node.jjtGetChild(0))
                    + ""]"";
        }
        if (node instanceof ASTMethodNode) {
            return stringifyPropertyValue(node.jjtGetChild(0));
        }
        if (node instanceof ASTFunctionNode) {
            return stringifyPropertyValue(node.jjtGetChild(0));
        }
        if (node instanceof ASTIdentifier) {
            return ((ASTIdentifier) node).getName();
        }
        if (node instanceof ASTReference) {
            return stringifyProperty(node.jjtGetChild(0));
        }
        return stringifyPropertyValue(node);
    }","  public void test12()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      JexlOptions jexlOptions0 = new JexlOptions();
      Interpreter interpreter0 = new Interpreter(engine0, jexlOptions0, engine0.EMPTY_CONTEXT, (Frame) null);
      StringProvider stringProvider0 = new StringProvider("""");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringProvider0);
      ParserTokenManager parserTokenManager0 = new ParserTokenManager(simpleCharStream0);
      Parser parser0 = new Parser(parserTokenManager0);
      ASTArguments aSTArguments0 = new ASTArguments(parser0, 849);
      String string0 = interpreter0.stringifyProperty(aSTArguments0);
}"
2709,"    protected boolean isStrictEngine() {
        return options.isStrict();
    }","  public void test13()  throws Throwable  {
      Engine engine0 = new Engine();
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[8];
      Scope scope1 = new Scope(scope0, stringArray0);
      Frame frame0 = new Frame(scope1, stringArray0, 0);
      JexlOptions jexlOptions0 = new JexlOptions();
      Interpreter interpreter0 = engine0.createInterpreter((JexlContext) null, frame0, jexlOptions0);
      boolean boolean0 = interpreter0.isStrictEngine();
}"
2710,"    protected boolean isSilent() {
        return options.isSilent();
    }","  public void test14()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      TemplateInterpreter.Arguments templateInterpreter_Arguments0 = new TemplateInterpreter.Arguments(engine0);
      JexlOptions jexlOptions0 = new JexlOptions();
      jexlOptions0.setSilent(true);
      templateInterpreter_Arguments0.options(jexlOptions0);
      TemplateInterpreter templateInterpreter0 = new TemplateInterpreter(templateInterpreter_Arguments0);
      boolean boolean0 = templateInterpreter0.isSilent();
}"
2711,"    protected boolean isSilent() {
        return options.isSilent();
    }","  public void test15()  throws Throwable  {
      Engine engine0 = new Engine();
      Interpreter interpreter0 = engine0.createInterpreter((JexlContext) null, (Frame) null, (JexlOptions) null);
      boolean boolean0 = interpreter0.isSilent();
}"
2712,"    protected boolean isSafe() {
        return options.isSafe();
    }","  public void test16()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      JexlOptions jexlOptions0 = engine0.options;
      Map<String, Object> map0 = jexlBuilder0.namespaces();
      MapContext mapContext0 = new MapContext(map0);
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[4];
      Scope scope1 = new Scope(scope0, stringArray0);
      Frame frame0 = new Frame(scope1, stringArray0, (-1981));
      Interpreter interpreter0 = new Interpreter(engine0, jexlOptions0, mapContext0, frame0);
      boolean boolean0 = interpreter0.isSafe();
}"
2713,"    protected boolean isCancelled() {
        return cancelled.get() | Thread.currentThread().isInterrupted();
    }","  public void test17()  throws Throwable  {
      Engine engine0 = new Engine();
      TemplateInterpreter.Arguments templateInterpreter_Arguments0 = new TemplateInterpreter.Arguments(engine0);
      TemplateInterpreter templateInterpreter0 = new TemplateInterpreter(templateInterpreter_Arguments0);
      boolean boolean0 = templateInterpreter0.isCancelled();
}"
2714,"    protected boolean isCancellable() {
        return options.isCancellable();
    }","  public void test18()  throws Throwable  {
      Engine engine0 = new Engine();
      Interpreter interpreter0 = engine0.createInterpreter((JexlContext) null, (Frame) null, (JexlOptions) null);
      boolean boolean0 = interpreter0.isCancellable();
}"
2715,"    protected Object functionArgument(final boolean narrow, final Object arg) {
        return narrow && arg instanceof Number ? arithmetic.narrow((Number) arg) : arg;
    }","  public void test19()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      TemplateInterpreter.Arguments templateInterpreter_Arguments0 = new TemplateInterpreter.Arguments(engine0);
      TemplateInterpreter templateInterpreter0 = new TemplateInterpreter(templateInterpreter_Arguments0);
      Long long0 = new Long(0);
      Object object0 = templateInterpreter0.functionArgument(false, long0);
}"
2716,"    protected JexlNode findNullOperand(final RuntimeException xrt, final JexlNode node, final Object left, final Object right) {
        if (xrt instanceof JexlArithmetic.NullOperand) {
            if (left == null) {
                return node.jjtGetChild(0);
            }
            if (right == null) {
                return node.jjtGetChild(1);
            }
        }
        return node;
    }","  public void test20()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      ASTNotNode aSTNotNode0 = new ASTNotNode((-1073));
      ASTBitwiseAndNode aSTBitwiseAndNode0 = new ASTBitwiseAndNode(1);
      Interpreter interpreter0 = engine0.createInterpreter((JexlContext) null, (Frame) null, (JexlOptions) null);
      aSTNotNode0.jjtAddChild(aSTBitwiseAndNode0, 6);
      JexlArithmetic.NullOperand jexlArithmetic_NullOperand0 = new JexlArithmetic.NullOperand();
      JexlNode jexlNode0 = interpreter0.findNullOperand(jexlArithmetic_NullOperand0, aSTNotNode0, engine0, jexlBuilder0);
}"
2717,"    protected JexlNode findNullOperand(final RuntimeException xrt, final JexlNode node, final Object left, final Object right) {
        if (xrt instanceof JexlArithmetic.NullOperand) {
            if (left == null) {
                return node.jjtGetChild(0);
            }
            if (right == null) {
                return node.jjtGetChild(1);
            }
        }
        return node;
    }","  public void test21()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      TemplateInterpreter.Arguments templateInterpreter_Arguments0 = new TemplateInterpreter.Arguments(engine0);
      TemplateInterpreter templateInterpreter0 = new TemplateInterpreter(templateInterpreter_Arguments0);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      InvocationTargetException invocationTargetException0 = new InvocationTargetException(mockRuntimeException0);
      JexlException jexlException0 = JexlException.tryFailed(invocationTargetException0);
      ASTNamespaceIdentifier aSTNamespaceIdentifier0 = new ASTNamespaceIdentifier(15);
      TemplateEngine templateEngine0 = engine0.jxlt();
      JexlInfo jexlInfo0 = engine0.createInfo((String) null, 15, 15);
      TemplateEngine.TemplateExpression templateEngine_TemplateExpression0 = templateEngine0.parseExpression(jexlInfo0, ""[DEBUG] "", (Scope) null);
      JexlNode jexlNode0 = templateInterpreter0.findNullOperand(jexlException0, aSTNamespaceIdentifier0, templateEngine_TemplateExpression0, mockRuntimeException0);
}"
2718,"    protected JexlNode findNullOperand(final RuntimeException xrt, final JexlNode node, final Object left, final Object right) {
        if (xrt instanceof JexlArithmetic.NullOperand) {
            if (left == null) {
                return node.jjtGetChild(0);
            }
            if (right == null) {
                return node.jjtGetChild(1);
            }
        }
        return node;
    }","  public void test22()  throws Throwable  {
      Engine engine0 = new Engine();
      JexlOptions jexlOptions0 = engine0.options;
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Map<String, Object> map0 = jexlBuilder0.namespaces();
      MapContext mapContext0 = new MapContext(map0);
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[8];
      Scope scope1 = new Scope(scope0, stringArray0);
      Frame frame0 = new Frame(scope1, stringArray0, (-789));
      Interpreter interpreter0 = new Interpreter(engine0, jexlOptions0, mapContext0, frame0);
      InvocationTargetException invocationTargetException0 = new InvocationTargetException((Throwable) null, ""org.apache.commons.jexl3.parser.ASTForeachStatement"");
      JexlException jexlException0 = JexlException.tryFailed(invocationTargetException0);
      ASTAnnotatedStatement aSTAnnotatedStatement0 = new ASTAnnotatedStatement(0);
      Class<Short> class0 = Short.TYPE;
      JexlNode jexlNode0 = interpreter0.findNullOperand(jexlException0, aSTAnnotatedStatement0, class0, class0);
}"
2719,"    protected JexlNode findNullOperand(final RuntimeException xrt, final JexlNode node, final Object left, final Object right) {
        if (xrt instanceof JexlArithmetic.NullOperand) {
            if (left == null) {
                return node.jjtGetChild(0);
            }
            if (right == null) {
                return node.jjtGetChild(1);
            }
        }
        return node;
    }","  public void test23()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      ASTNotNode aSTNotNode0 = new ASTNotNode((-1073));
      Interpreter interpreter0 = engine0.createInterpreter((JexlContext) null, (Frame) null, (JexlOptions) null);
      Token token0 = new Token(14);
      aSTNotNode0.jjtSetFirstToken(token0);
      JexlArithmetic.NullOperand jexlArithmetic_NullOperand0 = new JexlArithmetic.NullOperand();
      JexlNode jexlNode0 = interpreter0.findNullOperand(jexlArithmetic_NullOperand0, aSTNotNode0, engine0, jexlBuilder0);
}"
2720,"    protected  boolean cancel() {
        return cancelled.compareAndSet(false, true);
    }","  public void test24()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      JexlOptions jexlOptions0 = new JexlOptions();
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[2];
      Scope scope1 = new Scope(scope0, stringArray0);
      Frame frame0 = new Frame(scope1, stringArray0, 2);
      Interpreter interpreter0 = new Interpreter(engine0, jexlOptions0, engine0.EMPTY_CONTEXT, frame0);
      boolean boolean0 = interpreter0.cancel();
      boolean boolean1 = interpreter0.cancel();
}"
2721,"    protected  boolean cancel() {
        return cancelled.compareAndSet(false, true);
    }","  public void test25()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      JexlOptions jexlOptions0 = new JexlOptions();
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[2];
      Scope scope1 = new Scope(scope0, stringArray0);
      Frame frame0 = new Frame(scope1, stringArray0, 2);
      Interpreter interpreter0 = new Interpreter(engine0, jexlOptions0, engine0.EMPTY_CONTEXT, frame0);
      boolean boolean0 = interpreter0.cancel();
      boolean boolean1 = interpreter0.cancel();
}"
2722,"    protected Object variableError(final JexlNode node, final String var, final VariableIssue issue) {
        if (isStrictEngine() && !node.isTernaryProtected()) {
            throw new JexlException.Variable(node, var, issue);
        }
        if (logger.isDebugEnabled()) {
            logger.debug(JexlException.variableError(node, var, issue));
        }
        return null;
    }","  public void test26()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      JexlOptions jexlOptions0 = engine0.options;
      Interpreter interpreter0 = engine0.createInterpreter(engine0.EMPTY_CONTEXT, (Frame) null, jexlOptions0);
      ASTVar aSTVar0 = new ASTVar((-1));
      JexlException.VariableIssue jexlException_VariableIssue0 = JexlException.VariableIssue.UNDEFINED;
      // Undeclared exception!
      try { 
        interpreter0.variableError(aSTVar0, ""hAmeUza"", jexlException_VariableIssue0);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // ?: variable 'hAmeUza' is undefined
         //
         verifyException(""org.apache.commons.jexl3.internal.InterpreterBase"", e);
      }
  }"
2723,"    protected Object variableError(final JexlNode node, final String var, final VariableIssue issue) {
        if (isStrictEngine() && !node.isTernaryProtected()) {
            throw new JexlException.Variable(node, var, issue);
        }
        if (logger.isDebugEnabled()) {
            logger.debug(JexlException.variableError(node, var, issue));
        }
        return null;
    }","  public void test27()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      TemplateInterpreter.Arguments templateInterpreter_Arguments0 = new TemplateInterpreter.Arguments(engine0);
      TemplateInterpreter templateInterpreter0 = new TemplateInterpreter(templateInterpreter_Arguments0);
      JexlException.VariableIssue jexlException_VariableIssue0 = JexlException.VariableIssue.NULLVALUE;
      // Undeclared exception!
      try { 
        templateInterpreter0.variableError((JexlNode) null, """", jexlException_VariableIssue0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.internal.InterpreterBase"", e);
      }
  }"
2724,"    protected Object unsolvableVariable(final JexlNode node, final String var, final boolean undef) {
        return variableError(node, var, undef? VariableIssue.UNDEFINED : VariableIssue.NULLVALUE);
    }","  public void test28()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      TemplateInterpreter.Arguments templateInterpreter_Arguments0 = new TemplateInterpreter.Arguments(engine0);
      TemplateInterpreter templateInterpreter0 = new TemplateInterpreter(templateInterpreter_Arguments0);
      // Undeclared exception!
      try { 
        templateInterpreter0.unsolvableVariable((JexlNode) null, ""j"", true);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.internal.InterpreterBase"", e);
      }
  }"
2725,"    protected Object unsolvableProperty(final JexlNode node, final String property, final boolean undef, final Throwable cause) {
        if (isStrictEngine() && !node.isTernaryProtected()) {
            throw new JexlException.Property(node, property, undef, cause);
        }
        if (logger.isDebugEnabled()) {
            logger.debug(JexlException.propertyError(node, property, undef));
        }
        return null;
    }","  public void test29()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      TemplateInterpreter.Arguments templateInterpreter_Arguments0 = new TemplateInterpreter.Arguments(engine0);
      TemplateInterpreter templateInterpreter0 = new TemplateInterpreter(templateInterpreter_Arguments0);
      StringReader stringReader0 = new StringReader(""<j;S:mN1SxL]@D3"");
      StreamProvider streamProvider0 = new StreamProvider(stringReader0);
      Parser parser0 = new Parser(streamProvider0);
      ASTUnaryMinusNode aSTUnaryMinusNode0 = new ASTUnaryMinusNode(parser0, 2147483645);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("""");
      // Undeclared exception!
      try { 
        templateInterpreter0.unsolvableProperty(aSTUnaryMinusNode0, ""hmu-wgt&j4WWZ!"", false, mockRuntimeException0);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // ?: null value property 'hmu-wgt&j4WWZ!'
         //
         verifyException(""org.apache.commons.jexl3.internal.InterpreterBase"", e);
      }
  }"
2726,"    protected Object unsolvableProperty(final JexlNode node, final String property, final boolean undef, final Throwable cause) {
        if (isStrictEngine() && !node.isTernaryProtected()) {
            throw new JexlException.Property(node, property, undef, cause);
        }
        if (logger.isDebugEnabled()) {
            logger.debug(JexlException.propertyError(node, property, undef));
        }
        return null;
    }","  public void test30()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      TemplateInterpreter.Arguments templateInterpreter_Arguments0 = new TemplateInterpreter.Arguments(engine0);
      TemplateInterpreter templateInterpreter0 = new TemplateInterpreter(templateInterpreter_Arguments0);
      InterruptedException interruptedException0 = new InterruptedException();
      // Undeclared exception!
      try { 
        templateInterpreter0.unsolvableProperty((JexlNode) null, ""unable to set object property, class: "", false, interruptedException0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.internal.InterpreterBase"", e);
      }
  }"
2727,"    protected Object unsolvableMethod(final JexlNode node, final String method) {
        return unsolvableMethod(node, method, null);
    }","  public void test31()  throws Throwable  {
      Engine engine0 = new Engine();
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlOptions jexlOptions0 = jexlBuilder0.options();
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[1];
      Scope scope1 = new Scope(scope0, stringArray0);
      Frame frame0 = new Frame(scope1, stringArray0, 0);
      Interpreter interpreter0 = new Interpreter(engine0, jexlOptions0, engine0.EMPTY_CONTEXT, frame0);
      ASTConstructorNode aSTConstructorNode0 = new ASTConstructorNode(0);
      // Undeclared exception!
      try { 
        interpreter0.unsolvableMethod(aSTConstructorNode0, ""?y"", stringArray0);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // ?: unsolvable function/method '?y(Object)'
         //
         verifyException(""org.apache.commons.jexl3.internal.InterpreterBase"", e);
      }
  }"
2728,"    protected Object unsolvableMethod(final JexlNode node, final String method) {
        return unsolvableMethod(node, method, null);
    }","  public void test32()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      JexlOptions jexlOptions0 = new JexlOptions();
      Object[] objectArray0 = new Object[3];
      Frame frame0 = new Frame((Scope) null, objectArray0, 0);
      Interpreter interpreter0 = new Interpreter(engine0, jexlOptions0, engine0.EMPTY_CONTEXT, frame0);
      ASTBlock aSTBlock0 = new ASTBlock(0);
      // Undeclared exception!
      try { 
        interpreter0.unsolvableMethod(aSTBlock0, (String) null, objectArray0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
2729,"    protected Object unsolvableMethod(final JexlNode node, final String method) {
        return unsolvableMethod(node, method, null);
    }","  public void test33()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      TemplateInterpreter.Arguments templateInterpreter_Arguments0 = new TemplateInterpreter.Arguments(engine0);
      TemplateInterpreter templateInterpreter0 = new TemplateInterpreter(templateInterpreter_Arguments0);
      // Undeclared exception!
      try { 
        templateInterpreter0.unsolvableMethod((JexlNode) null, "")[M4~'mr"");
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // ?: unsolvable function/method ')[M4~'mr'
         //
         verifyException(""org.apache.commons.jexl3.internal.InterpreterBase"", e);
      }
  }"
2730,"    protected Object undefinedVariable(final JexlNode node, final String var) {
        return variableError(node, var, VariableIssue.UNDEFINED);
    }","  public void test34()  throws Throwable  {
      Engine engine0 = new Engine();
      Interpreter interpreter0 = engine0.createInterpreter((JexlContext) null, (Frame) null, (JexlOptions) null);
      ASTNotNode aSTNotNode0 = new ASTNotNode((-1165));
      // Undeclared exception!
      try { 
        interpreter0.undefinedVariable(aSTNotNode0, ""EN:K"");
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // ?: variable 'EN:K' is undefined
         //
         verifyException(""org.apache.commons.jexl3.internal.InterpreterBase"", e);
      }
  }"
2731,"    protected Object undefinedVariable(final JexlNode node, final String var) {
        return variableError(node, var, VariableIssue.UNDEFINED);
    }","  public void test35()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      JexlEngine.EmptyContext jexlEngine_EmptyContext0 = (JexlEngine.EmptyContext)JexlEngine.EMPTY_CONTEXT;
      Frame frame0 = new Frame((Scope) null, objectArray0, 669);
      JexlOptions jexlOptions0 = engine0.options;
      Interpreter interpreter0 = engine0.createInterpreter(jexlEngine_EmptyContext0, frame0, jexlOptions0);
      // Undeclared exception!
      try { 
        interpreter0.undefinedVariable((JexlNode) null, ""qe^t)&"");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.internal.InterpreterBase"", e);
      }
  }"
2732,"    protected static String stringifyPropertyValue(final JexlNode node) {
        return node != null? new Debugger().depth(1).data(node) : ""???"";
    }","  public void test36()  throws Throwable  {
      ASTNullpNode aSTNullpNode0 = new ASTNullpNode(0);
      // Undeclared exception!
      try { 
        InterpreterBase.stringifyPropertyValue(aSTNullpNode0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.parser.SimpleNode"", e);
      }
  }"
2733,"    protected Object redefinedVariable(final JexlNode node, final String var) {
        return variableError(node, var, VariableIssue.REDEFINED);
    }","  public void test37()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      JexlOptions jexlOptions0 = engine0.options;
      Interpreter interpreter0 = engine0.createInterpreter(engine0.EMPTY_CONTEXT, (Frame) null, jexlOptions0);
      // Undeclared exception!
      try { 
        interpreter0.redefinedVariable((JexlNode) null, ""unable to set object property, class: "");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.internal.InterpreterBase"", e);
      }
  }"
2734,"    protected boolean isLocalVariable(final ASTReference node, final int which) {
        return (node.jjtGetNumChildren() > which
                && node.jjtGetChild(which) instanceof ASTIdentifier
                && ((ASTIdentifier) node.jjtGetChild(which)).getSymbol() >= 0);
    }","  public void test38()  throws Throwable  {
      Engine engine0 = new Engine();
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[6];
      Scope scope1 = new Scope(scope0, stringArray0);
      Frame frame0 = new Frame(scope1, stringArray0, (-260));
      JexlOptions jexlOptions0 = engine0.options;
      Interpreter interpreter0 = engine0.createInterpreter((JexlContext) null, frame0, jexlOptions0);
      Parser parser0 = engine0.parser;
      ASTReference aSTReference0 = new ASTReference(parser0, 3734);
      // Undeclared exception!
      try { 
        interpreter0.isLocalVariable(aSTReference0, (-260));
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.parser.SimpleNode"", e);
      }
  }"
2735,"    protected boolean isFunctionCall(final ASTReference node) {
        return (node.jjtGetNumChildren() > 0
                && node.jjtGetChild(0) instanceof ASTFunctionNode);
    }","  public void test39()  throws Throwable  {
      Engine engine0 = new Engine();
      TemplateInterpreter.Arguments templateInterpreter_Arguments0 = new TemplateInterpreter.Arguments(engine0);
      TemplateInterpreter templateInterpreter0 = new TemplateInterpreter(templateInterpreter_Arguments0);
      // Undeclared exception!
      try { 
        templateInterpreter0.isFunctionCall((ASTReference) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.internal.InterpreterBase"", e);
      }
  }"
2736,"    protected JexlException invocationException(final JexlNode node, final String methodName, final Throwable xany) {
        final Throwable cause = xany.getCause();
        if (cause instanceof JexlException) {
            return (JexlException) cause;
        }
        if (cause instanceof InterruptedException) {
            return new JexlException.Cancel(node);
        }
        return new JexlException(node, methodName, xany);
    }","  public void test40()  throws Throwable  {
      Engine engine0 = new Engine();
      Interpreter interpreter0 = engine0.createInterpreter((JexlContext) null, (Frame) null, (JexlOptions) null);
      ASTSetOrNode aSTSetOrNode0 = new ASTSetOrNode(4);
      // Undeclared exception!
      try { 
        interpreter0.invocationException(aSTSetOrNode0, ""n[fyFwN& pOuk"", (Throwable) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.internal.InterpreterBase"", e);
      }
  }"
2737,"    protected Object getVariable(final Frame frame, final LexicalScope block, final ASTIdentifier identifier) {
        final int symbol = identifier.getSymbol();
        final String name = identifier.getName();
        // if we have a symbol, we have a scope thus a frame
        if (options.isLexicalShade() && identifier.isShaded()) {
            return undefinedVariable(identifier, name);
        }
        // a local var ?
        if ((symbol >= 0) && frame.has(symbol)) {
            final Object value = frame.get(symbol);
            // not out of scope with no lexical shade ?
            if (value != Scope.UNDEFINED) {
                // null argument of an arithmetic operator ?
                if (value == null && arithmetic.isStrict() && identifier.jjtGetParent().isStrictOperator()) {
                    return unsolvableVariable(identifier, name, false); // defined but null
                }
                return value;
            }
        }
        // consider global
        final Object value = context.get(name);
        // is it null ?
        if (value == null) {
            // is it defined ?
            if (!context.has(name)) {
                // not defined, ignore in some cases...
                final boolean ignore =
                        (isSafe() && (symbol >= 0 || identifier.jjtGetParent() instanceof ASTAssignment))
                         || (identifier.jjtGetParent() instanceof ASTReference);
                if (!ignore) {
                    return undefinedVariable(identifier, name); // undefined
                }
            } else if (arithmetic.isStrict() && identifier.jjtGetParent().isStrictOperator()) {
                return unsolvableVariable(identifier, name, false); // defined but null
            }
        }
        return value;
    }","  public void test41()  throws Throwable  {
      Engine engine0 = new Engine();
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[7];
      Scope scope1 = new Scope(scope0, stringArray0);
      Frame frame0 = new Frame(scope1, stringArray0, 8);
      JexlOptions jexlOptions0 = new JexlOptions();
      Interpreter interpreter0 = engine0.createInterpreter((JexlContext) null, frame0, jexlOptions0);
      long[] longArray0 = new long[1];
      LongBuffer longBuffer0 = LongBuffer.wrap(longArray0);
      BitSet bitSet0 = BitSet.valueOf(longBuffer0);
      LexicalScope lexicalScope0 = new LexicalScope(10, bitSet0);
      // Undeclared exception!
      try { 
        interpreter0.getVariable(frame0, lexicalScope0, (ASTIdentifier) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.internal.InterpreterBase"", e);
      }
  }"
2738,"    protected Object getAttribute(final Object object, final Object attribute, final JexlNode node) {
        if (object == null) {
            throw new JexlException(node, ""object is null"");
        }
        cancelCheck(node);
        final JexlOperator operator = node != null && node.jjtGetParent() instanceof ASTArrayAccess
                ? JexlOperator.ARRAY_GET : JexlOperator.PROPERTY_GET;
        final Object result = operators.tryOverload(node, operator, object, attribute);
        if (result != JexlEngine.TRY_FAILED) {
            return result;
        }
        Exception xcause = null;
        try {
            // attempt to reuse last executor cached in volatile JexlNode.value
            if (node != null && cache) {
                final Object cached = node.jjtGetValue();
                if (cached instanceof JexlPropertyGet) {
                    final JexlPropertyGet vg = (JexlPropertyGet) cached;
                    final Object value = vg.tryInvoke(object, attribute);
                    if (!vg.tryFailed(value)) {
                        return value;
                    }
                }
            }
            // resolve that property
            final List<JexlUberspect.PropertyResolver> resolvers = uberspect.getResolvers(operator, object);
            final JexlPropertyGet vg = uberspect.getPropertyGet(resolvers, object, attribute);
            if (vg != null) {
                final Object value = vg.invoke(object);
                // cache executor in volatile JexlNode.value
                if (node != null && cache && vg.isCacheable()) {
                    node.jjtSetValue(vg);
                }
                return value;
            }
        } catch (final Exception xany) {
            xcause = xany;
        }
        // lets fail
        if (node == null) {
            // direct call
            final String error = ""unable to get object property""
                    + "", class: "" + object.getClass().getName()
                    + "", property: "" + attribute;
            throw new UnsupportedOperationException(error, xcause);
        }
        final boolean safe = (node instanceof ASTIdentifierAccess) && ((ASTIdentifierAccess) node).isSafe();
        if (safe) {
            return null;
        }
        final String attrStr = attribute != null ? attribute.toString() : null;
        return unsolvableProperty(node, attrStr, true, xcause);
    }","  public void test42()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      TemplateInterpreter.Arguments templateInterpreter_Arguments0 = new TemplateInterpreter.Arguments(engine0);
      ASTJexlScript aSTJexlScript0 = new ASTJexlScript((-1));
      TemplateInterpreter templateInterpreter0 = new TemplateInterpreter(templateInterpreter_Arguments0);
      ASTArrayAccess aSTArrayAccess0 = new ASTArrayAccess(0);
      // Undeclared exception!
      try { 
        templateInterpreter0.getAttribute((Object) null, aSTArrayAccess0, aSTJexlScript0);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // ?: JEXL error : object is null
         //
         verifyException(""org.apache.commons.jexl3.internal.InterpreterBase"", e);
      }
  }"
2739,"    protected Object getAttribute(final Object object, final Object attribute, final JexlNode node) {
        if (object == null) {
            throw new JexlException(node, ""object is null"");
        }
        cancelCheck(node);
        final JexlOperator operator = node != null && node.jjtGetParent() instanceof ASTArrayAccess
                ? JexlOperator.ARRAY_GET : JexlOperator.PROPERTY_GET;
        final Object result = operators.tryOverload(node, operator, object, attribute);
        if (result != JexlEngine.TRY_FAILED) {
            return result;
        }
        Exception xcause = null;
        try {
            // attempt to reuse last executor cached in volatile JexlNode.value
            if (node != null && cache) {
                final Object cached = node.jjtGetValue();
                if (cached instanceof JexlPropertyGet) {
                    final JexlPropertyGet vg = (JexlPropertyGet) cached;
                    final Object value = vg.tryInvoke(object, attribute);
                    if (!vg.tryFailed(value)) {
                        return value;
                    }
                }
            }
            // resolve that property
            final List<JexlUberspect.PropertyResolver> resolvers = uberspect.getResolvers(operator, object);
            final JexlPropertyGet vg = uberspect.getPropertyGet(resolvers, object, attribute);
            if (vg != null) {
                final Object value = vg.invoke(object);
                // cache executor in volatile JexlNode.value
                if (node != null && cache && vg.isCacheable()) {
                    node.jjtSetValue(vg);
                }
                return value;
            }
        } catch (final Exception xany) {
            xcause = xany;
        }
        // lets fail
        if (node == null) {
            // direct call
            final String error = ""unable to get object property""
                    + "", class: "" + object.getClass().getName()
                    + "", property: "" + attribute;
            throw new UnsupportedOperationException(error, xcause);
        }
        final boolean safe = (node instanceof ASTIdentifierAccess) && ((ASTIdentifierAccess) node).isSafe();
        if (safe) {
            return null;
        }
        final String attrStr = attribute != null ? attribute.toString() : null;
        return unsolvableProperty(node, attrStr, true, xcause);
    }","  public void test43()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      TemplateInterpreter.Arguments templateInterpreter_Arguments0 = new TemplateInterpreter.Arguments(engine0);
      TemplateInterpreter templateInterpreter0 = new TemplateInterpreter(templateInterpreter_Arguments0);
      Parser parser0 = engine0.parser;
      ASTArrayAccess aSTArrayAccess0 = new ASTArrayAccess(parser0, 2);
      // Undeclared exception!
      try { 
        templateInterpreter0.getAttribute(aSTArrayAccess0, jexlBuilder0, aSTArrayAccess0);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // ?: undefined property 'org.apache.commons.jexl3.JexlBuilder@0000000002'
         //
         verifyException(""org.apache.commons.jexl3.internal.InterpreterBase"", e);
      }
  }"
2740,"    protected Object getAttribute(final Object object, final Object attribute, final JexlNode node) {
        if (object == null) {
            throw new JexlException(node, ""object is null"");
        }
        cancelCheck(node);
        final JexlOperator operator = node != null && node.jjtGetParent() instanceof ASTArrayAccess
                ? JexlOperator.ARRAY_GET : JexlOperator.PROPERTY_GET;
        final Object result = operators.tryOverload(node, operator, object, attribute);
        if (result != JexlEngine.TRY_FAILED) {
            return result;
        }
        Exception xcause = null;
        try {
            // attempt to reuse last executor cached in volatile JexlNode.value
            if (node != null && cache) {
                final Object cached = node.jjtGetValue();
                if (cached instanceof JexlPropertyGet) {
                    final JexlPropertyGet vg = (JexlPropertyGet) cached;
                    final Object value = vg.tryInvoke(object, attribute);
                    if (!vg.tryFailed(value)) {
                        return value;
                    }
                }
            }
            // resolve that property
            final List<JexlUberspect.PropertyResolver> resolvers = uberspect.getResolvers(operator, object);
            final JexlPropertyGet vg = uberspect.getPropertyGet(resolvers, object, attribute);
            if (vg != null) {
                final Object value = vg.invoke(object);
                // cache executor in volatile JexlNode.value
                if (node != null && cache && vg.isCacheable()) {
                    node.jjtSetValue(vg);
                }
                return value;
            }
        } catch (final Exception xany) {
            xcause = xany;
        }
        // lets fail
        if (node == null) {
            // direct call
            final String error = ""unable to get object property""
                    + "", class: "" + object.getClass().getName()
                    + "", property: "" + attribute;
            throw new UnsupportedOperationException(error, xcause);
        }
        final boolean safe = (node instanceof ASTIdentifierAccess) && ((ASTIdentifierAccess) node).isSafe();
        if (safe) {
            return null;
        }
        final String attrStr = attribute != null ? attribute.toString() : null;
        return unsolvableProperty(node, attrStr, true, xcause);
    }","  public void test44()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      TemplateInterpreter.Arguments templateInterpreter_Arguments0 = new TemplateInterpreter.Arguments(engine0);
      TemplateInterpreter templateInterpreter0 = new TemplateInterpreter(templateInterpreter_Arguments0);
      Parser parser0 = engine0.parser;
      ASTArrayAccess aSTArrayAccess0 = new ASTArrayAccess(parser0, 2);
      // Undeclared exception!
      try { 
        templateInterpreter0.getAttribute(aSTArrayAccess0, jexlBuilder0, (JexlNode) null);
        fail(""Expecting exception: UnsupportedOperationException"");
      } catch(UnsupportedOperationException e) {
         //
         // unable to get object property, class: org.apache.commons.jexl3.parser.ASTArrayAccess, property: org.apache.commons.jexl3.JexlBuilder@2
         //
         verifyException(""org.apache.commons.jexl3.internal.InterpreterBase"", e);
      }
  }"
2741,"    protected boolean defineVariable(final ASTVar var, final LexicalFrame frame) {
        final int symbol = var.getSymbol();
        if (symbol < 0) {
            return false;
        }
        if (var.isRedefined()) {
            return false;
        }
        return frame.defineSymbol(symbol, var.isCaptured());
    }","  public void test45()  throws Throwable  {
      Engine engine0 = new Engine();
      TemplateInterpreter.Arguments templateInterpreter_Arguments0 = new TemplateInterpreter.Arguments(engine0);
      TemplateInterpreter templateInterpreter0 = new TemplateInterpreter(templateInterpreter_Arguments0);
      // Undeclared exception!
      try { 
        templateInterpreter0.defineVariable((ASTVar) null, (LexicalFrame) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.internal.InterpreterBase"", e);
      }
  }"
2742,"    protected Object[] callArguments(final Object target, final boolean narrow, final Object[] args) {
        // makes target 1st args, copy others - optionally narrow numbers
        final Object[] nargv = new Object[args.length + 1];
        if (narrow) {
            nargv[0] = functionArgument(true, target);
            for (int a = 1; a <= args.length; ++a) {
                nargv[a] = functionArgument(true, args[a - 1]);
            }
        } else {
            nargv[0] = target;
            System.arraycopy(args, 0, nargv, 1, args.length);
        }
        return nargv;
    }","  public void test46()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      JexlOptions jexlOptions0 = engine0.options;
      Interpreter interpreter0 = engine0.createInterpreter((JexlContext) null, (Frame) null, jexlOptions0);
      // Undeclared exception!
      try { 
        interpreter0.callArguments((Object) null, false, (Object[]) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.internal.InterpreterBase"", e);
      }
  }"
2743,"    protected void setAttribute(final Object object, final Object attribute, final Object value, final JexlNode node) {
        cancelCheck(node);
        final JexlOperator operator = node != null && node.jjtGetParent() instanceof ASTArrayAccess
                                      ? JexlOperator.ARRAY_SET : JexlOperator.PROPERTY_SET;
        final Object result = operators.tryOverload(node, operator, object, attribute, value);
        if (result != JexlEngine.TRY_FAILED) {
            return;
        }
        Exception xcause = null;
        try {
            // attempt to reuse last executor cached in volatile JexlNode.value
            if (node != null && cache) {
                final Object cached = node.jjtGetValue();
                if (cached instanceof JexlPropertySet) {
                    final JexlPropertySet setter = (JexlPropertySet) cached;
                    final Object eval = setter.tryInvoke(object, attribute, value);
                    if (!setter.tryFailed(eval)) {
                        return;
                    }
                }
            }
            final List<JexlUberspect.PropertyResolver> resolvers = uberspect.getResolvers(operator, object);
            JexlPropertySet vs = uberspect.getPropertySet(resolvers, object, attribute, value);
            // if we can't find an exact match, narrow the value argument and try again
            if (vs == null) {
                // replace all numbers with the smallest type that will fit
                final Object[] narrow = {value};
                if (arithmetic.narrowArguments(narrow)) {
                    vs = uberspect.getPropertySet(resolvers, object, attribute, narrow[0]);
                }
            }
            if (vs != null) {
                // cache executor in volatile JexlNode.value
                vs.invoke(object, value);
                if (node != null && cache && vs.isCacheable()) {
                    node.jjtSetValue(vs);
                }
                return;
            }
        } catch (final Exception xany) {
            xcause = xany;
        }
        // lets fail
        if (node == null) {
            // direct call
            final String error = ""unable to set object property""
                    + "", class: "" + object.getClass().getName()
                    + "", property: "" + attribute
                    + "", argument: "" + value.getClass().getSimpleName();
            throw new UnsupportedOperationException(error, xcause);
        }
        final String attrStr = attribute != null ? attribute.toString() : null;
        unsolvableProperty(node, attrStr, true, xcause);
    }","  public void test47()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      TemplateInterpreter.Arguments templateInterpreter_Arguments0 = new TemplateInterpreter.Arguments(engine0);
      JexlOptions jexlOptions0 = jexlBuilder0.options();
      TemplateInterpreter templateInterpreter0 = new TemplateInterpreter(templateInterpreter_Arguments0);
      StringProvider stringProvider0 = new StringProvider(""unable to set object property, class: "");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringProvider0, 1024, 1024);
      ParserTokenManager parserTokenManager0 = new ParserTokenManager(simpleCharStream0);
      Parser parser0 = new Parser(parserTokenManager0);
      ASTFunctionNode aSTFunctionNode0 = new ASTFunctionNode(parser0, 463);
      Short short0 = new Short((short)2);
      // Undeclared exception!
      try { 
        templateInterpreter0.setAttribute(stringProvider0, jexlOptions0, short0, aSTFunctionNode0);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // ?: undefined property 'org.apache.commons.jexl3.JexlOptions@0000000001'
         //
         verifyException(""org.apache.commons.jexl3.internal.InterpreterBase"", e);
      }
  }"
2744,"    protected void setAttribute(final Object object, final Object attribute, final Object value, final JexlNode node) {
        cancelCheck(node);
        final JexlOperator operator = node != null && node.jjtGetParent() instanceof ASTArrayAccess
                                      ? JexlOperator.ARRAY_SET : JexlOperator.PROPERTY_SET;
        final Object result = operators.tryOverload(node, operator, object, attribute, value);
        if (result != JexlEngine.TRY_FAILED) {
            return;
        }
        Exception xcause = null;
        try {
            // attempt to reuse last executor cached in volatile JexlNode.value
            if (node != null && cache) {
                final Object cached = node.jjtGetValue();
                if (cached instanceof JexlPropertySet) {
                    final JexlPropertySet setter = (JexlPropertySet) cached;
                    final Object eval = setter.tryInvoke(object, attribute, value);
                    if (!setter.tryFailed(eval)) {
                        return;
                    }
                }
            }
            final List<JexlUberspect.PropertyResolver> resolvers = uberspect.getResolvers(operator, object);
            JexlPropertySet vs = uberspect.getPropertySet(resolvers, object, attribute, value);
            // if we can't find an exact match, narrow the value argument and try again
            if (vs == null) {
                // replace all numbers with the smallest type that will fit
                final Object[] narrow = {value};
                if (arithmetic.narrowArguments(narrow)) {
                    vs = uberspect.getPropertySet(resolvers, object, attribute, narrow[0]);
                }
            }
            if (vs != null) {
                // cache executor in volatile JexlNode.value
                vs.invoke(object, value);
                if (node != null && cache && vs.isCacheable()) {
                    node.jjtSetValue(vs);
                }
                return;
            }
        } catch (final Exception xany) {
            xcause = xany;
        }
        // lets fail
        if (node == null) {
            // direct call
            final String error = ""unable to set object property""
                    + "", class: "" + object.getClass().getName()
                    + "", property: "" + attribute
                    + "", argument: "" + value.getClass().getSimpleName();
            throw new UnsupportedOperationException(error, xcause);
        }
        final String attrStr = attribute != null ? attribute.toString() : null;
        unsolvableProperty(node, attrStr, true, xcause);
    }","  public void test48()  throws Throwable  {
      Engine engine0 = new Engine();
      MapContext mapContext0 = new MapContext();
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[7];
      Scope scope1 = new Scope(scope0, stringArray0);
      Frame frame0 = new Frame(scope1, stringArray0, (-2126));
      JexlOptions jexlOptions0 = engine0.options((ASTJexlScript) null, mapContext0);
      Interpreter interpreter0 = engine0.createInterpreter(mapContext0, frame0, jexlOptions0);
      ASTMethodNode aSTMethodNode0 = new ASTMethodNode((-289));
      Byte byte0 = new Byte((byte)53);
      // Undeclared exception!
      try { 
        interpreter0.setAttribute((Object) null, aSTMethodNode0, byte0, (JexlNode) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.internal.InterpreterBase"", e);
      }
  }"
2745,"    protected final Object visit(final SimpleNode node, final Object data) {
        throw new UnsupportedOperationException(node.getClass().getSimpleName() + "" : not supported yet."");
    }","  public void test49()  throws Throwable  {
      Engine engine0 = new Engine();
      JexlOptions jexlOptions0 = new JexlOptions();
      Parser parser0 = new Parser(""org.apache.commons.jexl3.parser.ASTLENode"");
      Interpreter interpreter0 = new Interpreter(engine0, jexlOptions0, engine0.EMPTY_CONTEXT, (Frame) null);
      ASTMethodNode aSTMethodNode0 = new ASTMethodNode(parser0, (-2147483647));
      ASTIdentifierAccess aSTIdentifierAccess0 = mock(ASTIdentifierAccess.class, new ViolatedAssumptionAnswer());
      doReturn(""p>fqDb7h"").when(aSTIdentifierAccess0).getIdentifier();
      doReturn(true).when(aSTIdentifierAccess0).isSafe();
      doReturn(aSTMethodNode0).when(aSTIdentifierAccess0).jjtGetParent();
      Object object0 = interpreter0.visit(aSTIdentifierAccess0, """");
}"
2746,"    protected Object getAttribute(final Object object, final Object attribute, final JexlNode node) {
        if (object == null) {
            throw new JexlException(node, ""object is null"");
        }
        cancelCheck(node);
        final JexlOperator operator = node != null && node.jjtGetParent() instanceof ASTArrayAccess
                ? JexlOperator.ARRAY_GET : JexlOperator.PROPERTY_GET;
        final Object result = operators.tryOverload(node, operator, object, attribute);
        if (result != JexlEngine.TRY_FAILED) {
            return result;
        }
        Exception xcause = null;
        try {
            // attempt to reuse last executor cached in volatile JexlNode.value
            if (node != null && cache) {
                final Object cached = node.jjtGetValue();
                if (cached instanceof JexlPropertyGet) {
                    final JexlPropertyGet vg = (JexlPropertyGet) cached;
                    final Object value = vg.tryInvoke(object, attribute);
                    if (!vg.tryFailed(value)) {
                        return value;
                    }
                }
            }
            // resolve that property
            final List<JexlUberspect.PropertyResolver> resolvers = uberspect.getResolvers(operator, object);
            final JexlPropertyGet vg = uberspect.getPropertyGet(resolvers, object, attribute);
            if (vg != null) {
                final Object value = vg.invoke(object);
                // cache executor in volatile JexlNode.value
                if (node != null && cache && vg.isCacheable()) {
                    node.jjtSetValue(vg);
                }
                return value;
            }
        } catch (final Exception xany) {
            xcause = xany;
        }
        // lets fail
        if (node == null) {
            // direct call
            final String error = ""unable to get object property""
                    + "", class: "" + object.getClass().getName()
                    + "", property: "" + attribute;
            throw new UnsupportedOperationException(error, xcause);
        }
        final boolean safe = (node instanceof ASTIdentifierAccess) && ((ASTIdentifierAccess) node).isSafe();
        if (safe) {
            return null;
        }
        final String attrStr = attribute != null ? attribute.toString() : null;
        return unsolvableProperty(node, attrStr, true, xcause);
    }","  public void test50()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      JexlOptions jexlOptions0 = engine0.options;
      Map<String, Object> map0 = jexlBuilder0.namespaces();
      MapContext mapContext0 = new MapContext(map0);
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[4];
      Scope scope1 = new Scope(scope0, stringArray0);
      Frame frame0 = new Frame(scope1, stringArray0, (-2002));
      Interpreter interpreter0 = new Interpreter(engine0, jexlOptions0, mapContext0, frame0);
      Object object0 = interpreter0.getAttribute(map0, jexlOptions0);
}"
2747,,"  public void test51()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      ASTBitwiseAndNode aSTBitwiseAndNode0 = new ASTBitwiseAndNode(1);
      Interpreter interpreter0 = engine0.createInterpreter((JexlContext) null, (Frame) null, (JexlOptions) null);
      InterpreterBase.CallDispatcher interpreterBase_CallDispatcher0 = interpreter0.new CallDispatcher(aSTBitwiseAndNode0, true);
      try { 
        interpreterBase_CallDispatcher0.eval((String) null);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // ?: unsolvable function/method ''
         //
         verifyException(""org.apache.commons.jexl3.internal.InterpreterBase"", e);
      }
  }"
2748,,"  public void test52()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      JexlOptions jexlOptions0 = engine0.options;
      Interpreter interpreter0 = engine0.createInterpreter((JexlContext) null, (Frame) null, jexlOptions0);
      InterpreterBase.CallDispatcher interpreterBase_CallDispatcher0 = interpreter0.new CallDispatcher((JexlNode) null, false);
      Object[] objectArray0 = new Object[5];
      Object object0 = interpreterBase_CallDispatcher0.tryEval(jexlBuilder0, ""\""||\"""", objectArray0);
}"
2749,,"  public void test53()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      TemplateInterpreter.Arguments templateInterpreter_Arguments0 = new TemplateInterpreter.Arguments(engine0);
      TemplateInterpreter templateInterpreter0 = new TemplateInterpreter(templateInterpreter_Arguments0);
      Parser parser0 = engine0.parser;
      ASTVar aSTVar0 = new ASTVar(parser0, 2);
      InterpreterBase.CallDispatcher interpreterBase_CallDispatcher0 = templateInterpreter0.new CallDispatcher(aSTVar0, true);
      Object[] objectArray0 = new Object[7];
      Object object0 = interpreterBase_CallDispatcher0.tryEval((Object) null, """", objectArray0);
}"
2750,"    protected InterpreterBase(final Engine engine, final JexlOptions opts, final JexlContext aContext) {
        this.jexl = engine;
        this.logger = jexl.logger;
        this.uberspect = jexl.uberspect;
        this.context = aContext != null ? aContext : Engine.EMPTY_CONTEXT;
        this.cache = engine.cache != null;
        final JexlArithmetic jexla = jexl.arithmetic;
        this.options = opts == null? engine.options(aContext) : opts;
        this.arithmetic = jexla.options(options);
        if (arithmetic != jexla && !arithmetic.getClass().equals(jexla.getClass())) {
            logger.warn(""expected arithmetic to be "" + jexla.getClass().getSimpleName()
                    + "", got "" + arithmetic.getClass().getSimpleName()
            );
        }
        if (this.context instanceof JexlContext.NamespaceResolver) {
            ns = ((JexlContext.NamespaceResolver) context);
        } else {
            ns = Engine.EMPTY_NS;
        }
        AtomicBoolean acancel = null;
        if (this.context instanceof JexlContext.CancellationHandle) {
            acancel = ((JexlContext.CancellationHandle) context).getCancellation();
        }
        this.cancelled = acancel != null? acancel : new AtomicBoolean(false);
        final Map<String,Object> ons = options.getNamespaces();
        this.functions = ons.isEmpty()? jexl.functions : ons;
        this.functors = null;
        this.operators = new Operators(this);
    }","  public void test54()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[0];
      Scope scope1 = new Scope(scope0, stringArray0);
      Frame frame0 = new Frame(scope1, stringArray0, 59);
      JexlOptions jexlOptions0 = jexlBuilder0.options();
      Interpreter interpreter0 = engine0.createInterpreter((JexlContext) null, frame0, jexlOptions0);
      InterpreterBase.ContextFuncall interpreterBase_ContextFuncall0 = new InterpreterBase.ContextFuncall((JexlMethod) null, true);
      Short short0 = new Short((short)3);
      // Undeclared exception!
      try { 
        interpreterBase_ContextFuncall0.tryInvoke(interpreter0, ""?"", short0, stringArray0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.internal.InterpreterBase$ContextFuncall"", e);
      }
  }"
2751,"    protected Object functionArgument(final boolean narrow, final Object arg) {
        return narrow && arg instanceof Number ? arithmetic.narrow((Number) arg) : arg;
    }","  public void test55()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      Interpreter interpreter0 = engine0.createInterpreter((JexlContext) null, (Frame) null, (JexlOptions) null);
      Object object0 = interpreter0.functionArgument(false, (Object) null);
}"
2752,"    protected Object[] callArguments(final Object target, final boolean narrow, final Object[] args) {
        // makes target 1st args, copy others - optionally narrow numbers
        final Object[] nargv = new Object[args.length + 1];
        if (narrow) {
            nargv[0] = functionArgument(true, target);
            for (int a = 1; a <= args.length; ++a) {
                nargv[a] = functionArgument(true, args[a - 1]);
            }
        } else {
            nargv[0] = target;
            System.arraycopy(args, 0, nargv, 1, args.length);
        }
        return nargv;
    }","  public void test56()  throws Throwable  {
      Engine engine0 = new Engine();
      Interpreter interpreter0 = engine0.createInterpreter((JexlContext) null, (Frame) null, (JexlOptions) null);
      Object[] objectArray0 = new Object[8];
      Object[] objectArray1 = interpreter0.callArguments((Object) null, false, objectArray0);
}"
2753,"    protected Object[] functionArguments(final Object target, final boolean narrow, final Object[] args) {
        // when target == context, we are dealing with the null namespace
        if (target == null || target == context) {
            if (narrow) {
                arithmetic.narrowArguments(args);
            }
            return args;
        }
        // makes target 1st args, copy others - optionally narrow numbers
        final Object[] nargv = new Object[args.length + 1];
        if (narrow) {
            nargv[0] = functionArgument(true, target);
            for (int a = 1; a <= args.length; ++a) {
                nargv[a] = functionArgument(true, args[a - 1]);
            }
        } else {
            nargv[0] = target;
            System.arraycopy(args, 0, nargv, 1, args.length);
        }
        return nargv;
    }","  public void test57()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      JexlInfo jexlInfo0 = new JexlInfo(""hAmeUza"", (-1738), (-1));
      JexlOptions jexlOptions0 = engine0.options;
      Interpreter interpreter0 = engine0.createInterpreter(engine0.EMPTY_CONTEXT, (Frame) null, jexlOptions0);
      Object[] objectArray0 = new Object[6];
      Object[] objectArray1 = interpreter0.functionArguments(jexlInfo0, true, objectArray0);
}"
2754,"    protected Object[] functionArguments(final Object target, final boolean narrow, final Object[] args) {
        // when target == context, we are dealing with the null namespace
        if (target == null || target == context) {
            if (narrow) {
                arithmetic.narrowArguments(args);
            }
            return args;
        }
        // makes target 1st args, copy others - optionally narrow numbers
        final Object[] nargv = new Object[args.length + 1];
        if (narrow) {
            nargv[0] = functionArgument(true, target);
            for (int a = 1; a <= args.length; ++a) {
                nargv[a] = functionArgument(true, args[a - 1]);
            }
        } else {
            nargv[0] = target;
            System.arraycopy(args, 0, nargv, 1, args.length);
        }
        return nargv;
    }","  public void test58()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      MapContext mapContext0 = new MapContext();
      JexlOptions jexlOptions0 = engine0.options(mapContext0);
      Interpreter interpreter0 = new Interpreter(engine0, jexlOptions0, mapContext0, (Frame) null);
      Object[] objectArray0 = interpreter0.functionArguments(mapContext0, false, (Object[]) null);
}"
2755,"    protected JexlException invocationException(final JexlNode node, final String methodName, final Throwable xany) {
        final Throwable cause = xany.getCause();
        if (cause instanceof JexlException) {
            return (JexlException) cause;
        }
        if (cause instanceof InterruptedException) {
            return new JexlException.Cancel(node);
        }
        return new JexlException(node, methodName, xany);
    }","  public void test59()  throws Throwable  {
      Engine engine0 = new Engine();
      JexlEngine.EmptyContext jexlEngine_EmptyContext0 = (JexlEngine.EmptyContext)JexlEngine.EMPTY_CONTEXT;
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlOptions jexlOptions0 = jexlBuilder0.options();
      Interpreter interpreter0 = engine0.createInterpreter(jexlEngine_EmptyContext0, (Frame) null, jexlOptions0);
      ASTSWNode aSTSWNode0 = new ASTSWNode(346);
      InterruptedException interruptedException0 = new InterruptedException();
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException(""org.apache.commons.jexl3.parser.ASTSetXorNode"", interruptedException0);
      JexlException jexlException0 = interpreter0.invocationException(aSTSWNode0, (String) null, mockRuntimeException0);
}"
2756,"    protected JexlException invocationException(final JexlNode node, final String methodName, final Throwable xany) {
        final Throwable cause = xany.getCause();
        if (cause instanceof JexlException) {
            return (JexlException) cause;
        }
        if (cause instanceof InterruptedException) {
            return new JexlException.Cancel(node);
        }
        return new JexlException(node, methodName, xany);
    }","  public void test60()  throws Throwable  {
      Engine engine0 = new Engine();
      Interpreter interpreter0 = engine0.createInterpreter((JexlContext) null, (Frame) null, (JexlOptions) null);
      ASTNotNode aSTNotNode0 = new ASTNotNode((-1165));
      MockThrowable mockThrowable0 = new MockThrowable("""", (Throwable) null);
      JexlException jexlException0 = interpreter0.invocationException(aSTNotNode0, """", mockThrowable0);
}"
2757,"    protected Object annotationError(final JexlNode node, final String annotation, final Throwable cause) {
        if (isStrictEngine()) {
            throw new JexlException.Annotation(node, annotation, cause);
        }
        if (logger.isDebugEnabled()) {
            logger.debug(JexlException.annotationError(node, annotation), cause);
        }
        return null;
    }","  public void test61()  throws Throwable  {
      Engine engine0 = new Engine();
      TemplateInterpreter.Arguments templateInterpreter_Arguments0 = new TemplateInterpreter.Arguments(engine0);
      TemplateInterpreter templateInterpreter0 = new TemplateInterpreter(templateInterpreter_Arguments0);
      ASTConstructorNode aSTConstructorNode0 = new ASTConstructorNode(5);
      InterruptedException interruptedException0 = new InterruptedException();
      // Undeclared exception!
      try { 
        templateInterpreter0.annotationError(aSTConstructorNode0, ""-.\""5"", interruptedException0);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // ?: error processing annotation '-.\""5'
         //
         verifyException(""org.apache.commons.jexl3.internal.InterpreterBase"", e);
      }
  }"
2758,"    protected Object operatorError(final JexlNode node, final JexlOperator operator, final Throwable cause) {
        if (isStrictEngine()) {
            throw new JexlException.Operator(node, operator.getOperatorSymbol(), cause);
        }
        if (logger.isDebugEnabled()) {
            logger.debug(JexlException.operatorError(node, operator.getOperatorSymbol()), cause);
        }
        return null;
    }","  public void test62()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      TemplateInterpreter.Arguments templateInterpreter_Arguments0 = new TemplateInterpreter.Arguments(engine0);
      TemplateInterpreter templateInterpreter0 = new TemplateInterpreter(templateInterpreter_Arguments0);
      ASTAnnotatedStatement aSTAnnotatedStatement0 = new ASTAnnotatedStatement(3);
      JexlOperator jexlOperator0 = JexlOperator.PROPERTY_GET;
      InterruptedException interruptedException0 = new InterruptedException();
      // Undeclared exception!
      try { 
        templateInterpreter0.operatorError(aSTAnnotatedStatement0, jexlOperator0, interruptedException0);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // ?: error calling operator '.'
         //
         verifyException(""org.apache.commons.jexl3.internal.InterpreterBase"", e);
      }
  }"
2759,"    protected static String stringifyPropertyValue(final JexlNode node) {
        return node != null? new Debugger().depth(1).data(node) : ""???"";
    }","  public void test63()  throws Throwable  {
      String string0 = InterpreterBase.stringifyPropertyValue((JexlNode) null);
}"
2760,"    protected String stringifyProperty(final JexlNode node) {
        if (node instanceof ASTArrayAccess) {
            return ""[""
                    + stringifyPropertyValue(node.jjtGetChild(0))
                    + ""]"";
        }
        if (node instanceof ASTMethodNode) {
            return stringifyPropertyValue(node.jjtGetChild(0));
        }
        if (node instanceof ASTFunctionNode) {
            return stringifyPropertyValue(node.jjtGetChild(0));
        }
        if (node instanceof ASTIdentifier) {
            return ((ASTIdentifier) node).getName();
        }
        if (node instanceof ASTReference) {
            return stringifyProperty(node.jjtGetChild(0));
        }
        return stringifyPropertyValue(node);
    }","  public void test64()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      TemplateInterpreter.Arguments templateInterpreter_Arguments0 = new TemplateInterpreter.Arguments(engine0);
      TemplateInterpreter templateInterpreter0 = new TemplateInterpreter(templateInterpreter_Arguments0);
      Parser parser0 = engine0.parser;
      ASTVar aSTVar0 = new ASTVar(parser0, 2);
      String string0 = templateInterpreter0.stringifyProperty(aSTVar0);
}"
2761,"    protected String stringifyProperty(final JexlNode node) {
        if (node instanceof ASTArrayAccess) {
            return ""[""
                    + stringifyPropertyValue(node.jjtGetChild(0))
                    + ""]"";
        }
        if (node instanceof ASTMethodNode) {
            return stringifyPropertyValue(node.jjtGetChild(0));
        }
        if (node instanceof ASTFunctionNode) {
            return stringifyPropertyValue(node.jjtGetChild(0));
        }
        if (node instanceof ASTIdentifier) {
            return ((ASTIdentifier) node).getName();
        }
        if (node instanceof ASTReference) {
            return stringifyProperty(node.jjtGetChild(0));
        }
        return stringifyPropertyValue(node);
    }","  public void test65()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      TemplateInterpreter.Arguments templateInterpreter_Arguments0 = new TemplateInterpreter.Arguments(engine0);
      TemplateInterpreter templateInterpreter0 = new TemplateInterpreter(templateInterpreter_Arguments0);
      StringProvider stringProvider0 = new StringProvider(""unable to set object property, class: "");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringProvider0, 1024, 1024);
      ParserTokenManager parserTokenManager0 = new ParserTokenManager(simpleCharStream0);
      Parser parser0 = new Parser(parserTokenManager0);
      ASTFunctionNode aSTFunctionNode0 = new ASTFunctionNode(parser0, 463);
      // Undeclared exception!
      try { 
        templateInterpreter0.stringifyProperty(aSTFunctionNode0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.parser.SimpleNode"", e);
      }
  }"
2762,"    protected String stringifyProperty(final JexlNode node) {
        if (node instanceof ASTArrayAccess) {
            return ""[""
                    + stringifyPropertyValue(node.jjtGetChild(0))
                    + ""]"";
        }
        if (node instanceof ASTMethodNode) {
            return stringifyPropertyValue(node.jjtGetChild(0));
        }
        if (node instanceof ASTFunctionNode) {
            return stringifyPropertyValue(node.jjtGetChild(0));
        }
        if (node instanceof ASTIdentifier) {
            return ((ASTIdentifier) node).getName();
        }
        if (node instanceof ASTReference) {
            return stringifyProperty(node.jjtGetChild(0));
        }
        return stringifyPropertyValue(node);
    }","  public void test66()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      TemplateInterpreter.Arguments templateInterpreter_Arguments0 = new TemplateInterpreter.Arguments(engine0);
      TemplateInterpreter templateInterpreter0 = new TemplateInterpreter(templateInterpreter_Arguments0);
      ASTSetXorNode aSTSetXorNode0 = new ASTSetXorNode(3);
      String string0 = templateInterpreter0.stringifyProperty(aSTSetXorNode0);
}"
2763,"    protected boolean isFunctionCall(final ASTReference node) {
        return (node.jjtGetNumChildren() > 0
                && node.jjtGetChild(0) instanceof ASTFunctionNode);
    }","  public void test67()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      JexlOptions jexlOptions0 = new JexlOptions();
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[2];
      Scope scope1 = new Scope(scope0, stringArray0);
      Frame frame0 = new Frame(scope1, stringArray0, 2);
      Interpreter interpreter0 = new Interpreter(engine0, jexlOptions0, engine0.EMPTY_CONTEXT, frame0);
      ASTReference aSTReference0 = new ASTReference(6);
      Parser parser0 = new Parser(""?"");
      ASTBlock aSTBlock0 = new ASTBlock(parser0, 783);
      aSTReference0.jjtAddChild(aSTBlock0, 783);
      boolean boolean0 = interpreter0.isFunctionCall(aSTReference0);
}"
2764,"    protected boolean isFunctionCall(final ASTReference node) {
        return (node.jjtGetNumChildren() > 0
                && node.jjtGetChild(0) instanceof ASTFunctionNode);
    }","  public void test68()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      JexlOptions jexlOptions0 = jexlBuilder0.options();
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[2];
      Scope scope1 = new Scope(scope0, stringArray0);
      Frame frame0 = new Frame(scope1, stringArray0, 2);
      Interpreter interpreter0 = new Interpreter(engine0, jexlOptions0, engine0.EMPTY_CONTEXT, frame0);
      ASTReference aSTReference0 = new ASTReference(6);
      boolean boolean0 = interpreter0.isFunctionCall(aSTReference0);
}"
2765,"    protected boolean isLocalVariable(final ASTReference node, final int which) {
        return (node.jjtGetNumChildren() > which
                && node.jjtGetChild(which) instanceof ASTIdentifier
                && ((ASTIdentifier) node.jjtGetChild(which)).getSymbol() >= 0);
    }","  public void test69()  throws Throwable  {
      Engine engine0 = new Engine();
      TemplateInterpreter.Arguments templateInterpreter_Arguments0 = new TemplateInterpreter.Arguments(engine0);
      TemplateInterpreter templateInterpreter0 = new TemplateInterpreter(templateInterpreter_Arguments0);
      Parser parser0 = new Parser("""");
      ASTReference aSTReference0 = new ASTReference(parser0, 22);
      ASTBreak aSTBreak0 = new ASTBreak(parser0, (-833));
      aSTReference0.jjtAddChild(aSTBreak0, 22);
      boolean boolean0 = templateInterpreter0.isLocalVariable(aSTReference0, 22);
}"
2766,"    protected boolean isLocalVariable(final ASTReference node, final int which) {
        return (node.jjtGetNumChildren() > which
                && node.jjtGetChild(which) instanceof ASTIdentifier
                && ((ASTIdentifier) node.jjtGetChild(which)).getSymbol() >= 0);
    }","  public void test70()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      JexlOptions jexlOptions0 = new JexlOptions();
      MapContext mapContext0 = new MapContext();
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[1];
      Scope scope1 = new Scope(scope0, stringArray0);
      Frame frame0 = new Frame(scope1, stringArray0, (-1));
      Interpreter interpreter0 = new Interpreter(engine0, jexlOptions0, mapContext0, frame0);
      Parser parser0 = new Parser(""<JXLT_LITERAL>"");
      ASTReference aSTReference0 = new ASTReference(parser0, (-1));
      boolean boolean0 = interpreter0.isLocalVariable(aSTReference0, 3);
}"
2767,"    protected void setAttribute(final Object object, final Object attribute, final Object value, final JexlNode node) {
        cancelCheck(node);
        final JexlOperator operator = node != null && node.jjtGetParent() instanceof ASTArrayAccess
                                      ? JexlOperator.ARRAY_SET : JexlOperator.PROPERTY_SET;
        final Object result = operators.tryOverload(node, operator, object, attribute, value);
        if (result != JexlEngine.TRY_FAILED) {
            return;
        }
        Exception xcause = null;
        try {
            // attempt to reuse last executor cached in volatile JexlNode.value
            if (node != null && cache) {
                final Object cached = node.jjtGetValue();
                if (cached instanceof JexlPropertySet) {
                    final JexlPropertySet setter = (JexlPropertySet) cached;
                    final Object eval = setter.tryInvoke(object, attribute, value);
                    if (!setter.tryFailed(eval)) {
                        return;
                    }
                }
            }
            final List<JexlUberspect.PropertyResolver> resolvers = uberspect.getResolvers(operator, object);
            JexlPropertySet vs = uberspect.getPropertySet(resolvers, object, attribute, value);
            // if we can't find an exact match, narrow the value argument and try again
            if (vs == null) {
                // replace all numbers with the smallest type that will fit
                final Object[] narrow = {value};
                if (arithmetic.narrowArguments(narrow)) {
                    vs = uberspect.getPropertySet(resolvers, object, attribute, narrow[0]);
                }
            }
            if (vs != null) {
                // cache executor in volatile JexlNode.value
                vs.invoke(object, value);
                if (node != null && cache && vs.isCacheable()) {
                    node.jjtSetValue(vs);
                }
                return;
            }
        } catch (final Exception xany) {
            xcause = xany;
        }
        // lets fail
        if (node == null) {
            // direct call
            final String error = ""unable to set object property""
                    + "", class: "" + object.getClass().getName()
                    + "", property: "" + attribute
                    + "", argument: "" + value.getClass().getSimpleName();
            throw new UnsupportedOperationException(error, xcause);
        }
        final String attrStr = attribute != null ? attribute.toString() : null;
        unsolvableProperty(node, attrStr, true, xcause);
    }","  public void test71()  throws Throwable  {
      Engine engine0 = new Engine();
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlOptions jexlOptions0 = jexlBuilder0.options();
      ASTJexlScript aSTJexlScript0 = new ASTJexlScript((-3247));
      Interpreter interpreter0 = new Interpreter(engine0, jexlOptions0, engine0.EMPTY_CONTEXT, (Frame) null);
      Byte byte0 = new Byte((byte) (-33));
      // Undeclared exception!
      try { 
        interpreter0.setAttribute(byte0, (Object) null, (Object) null, aSTJexlScript0);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // ?: undefined property ''
         //
         verifyException(""org.apache.commons.jexl3.internal.InterpreterBase"", e);
      }
  }"
2768,"    protected final Object visit(final SimpleNode node, final Object data) {
        throw new UnsupportedOperationException(node.getClass().getSimpleName() + "" : not supported yet."");
    }","  public void test72()  throws Throwable  {
      Engine engine0 = new Engine();
      JexlOptions jexlOptions0 = new JexlOptions();
      Interpreter interpreter0 = engine0.createInterpreter(engine0.EMPTY_CONTEXT, (Frame) null, jexlOptions0);
      ASTOrNode aSTOrNode0 = new ASTOrNode((-2205));
      ASTIdentifierAccess aSTIdentifierAccess0 = mock(ASTIdentifierAccess.class, new ViolatedAssumptionAnswer());
      doReturn(""pQfqK!7h"").when(aSTIdentifierAccess0).getIdentifier();
      doReturn(false).when(aSTIdentifierAccess0).isSafe();
      doReturn(true).when(aSTIdentifierAccess0).isTernaryProtected();
      doReturn(aSTOrNode0).when(aSTIdentifierAccess0).jjtGetParent();
      Object object0 = interpreter0.visit(aSTIdentifierAccess0, """");
}"
2769,,"  public void test73()  throws Throwable  {
      Engine engine0 = new Engine();
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[7];
      Scope scope1 = new Scope(scope0, stringArray0);
      Frame frame0 = new Frame(scope1, stringArray0, 8);
      JexlInfo jexlInfo0 = new JexlInfo(""&ea-TCf_@"", 1215, 8);
      ASTJexlScript aSTJexlScript0 = engine0.parse(jexlInfo0, engine0.DEFAULT_FEATURES, ""6|ff$zRZ"", scope1);
      JexlOptions jexlOptions0 = new JexlOptions();
      Interpreter interpreter0 = engine0.createInterpreter((JexlContext) null, frame0, jexlOptions0);
      MockThrowable mockThrowable0 = new MockThrowable();
      jexlOptions0.setStrict(false);
      JexlException jexlException0 = new JexlException(jexlInfo0, ""YEWS9pEjie@+4RR/wl4"", mockThrowable0);
      ASTArguments aSTArguments0 = new ASTArguments(8);
      Object object0 = interpreter0.call(aSTJexlScript0, jexlException0, aSTJexlScript0, aSTArguments0);
}"
2770,"    protected Object getVariable(final Frame frame, final LexicalScope block, final ASTIdentifier identifier) {
        final int symbol = identifier.getSymbol();
        final String name = identifier.getName();
        // if we have a symbol, we have a scope thus a frame
        if (options.isLexicalShade() && identifier.isShaded()) {
            return undefinedVariable(identifier, name);
        }
        // a local var ?
        if ((symbol >= 0) && frame.has(symbol)) {
            final Object value = frame.get(symbol);
            // not out of scope with no lexical shade ?
            if (value != Scope.UNDEFINED) {
                // null argument of an arithmetic operator ?
                if (value == null && arithmetic.isStrict() && identifier.jjtGetParent().isStrictOperator()) {
                    return unsolvableVariable(identifier, name, false); // defined but null
                }
                return value;
            }
        }
        // consider global
        final Object value = context.get(name);
        // is it null ?
        if (value == null) {
            // is it defined ?
            if (!context.has(name)) {
                // not defined, ignore in some cases...
                final boolean ignore =
                        (isSafe() && (symbol >= 0 || identifier.jjtGetParent() instanceof ASTAssignment))
                         || (identifier.jjtGetParent() instanceof ASTReference);
                if (!ignore) {
                    return undefinedVariable(identifier, name); // undefined
                }
            } else if (arithmetic.isStrict() && identifier.jjtGetParent().isStrictOperator()) {
                return unsolvableVariable(identifier, name, false); // defined but null
            }
        }
        return value;
    }","  public void test74()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      JexlOptions jexlOptions0 = new JexlOptions();
      Object[] objectArray0 = new Object[3];
      jexlOptions0.setStrict(false);
      Frame frame0 = new Frame((Scope) null, objectArray0, 0);
      Interpreter interpreter0 = new Interpreter(engine0, jexlOptions0, engine0.EMPTY_CONTEXT, frame0);
      ASTVar aSTVar0 = new ASTVar(0);
      Object object0 = interpreter0.getVariable(frame0, (LexicalScope) null, aSTVar0);
}"
2771,"    protected Object unsolvableVariable(final JexlNode node, final String var, final boolean undef) {
        return variableError(node, var, undef? VariableIssue.UNDEFINED : VariableIssue.NULLVALUE);
    }","  public void test75()  throws Throwable  {
      Engine engine0 = new Engine();
      JexlOptions jexlOptions0 = new JexlOptions();
      Interpreter interpreter0 = engine0.createInterpreter(engine0.EMPTY_CONTEXT, (Frame) null, jexlOptions0);
      ASTOrNode aSTOrNode0 = new ASTOrNode((-2205));
      // Undeclared exception!
      try { 
        interpreter0.unsolvableVariable(aSTOrNode0, """", true);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // ?: variable '' is undefined
         //
         verifyException(""org.apache.commons.jexl3.internal.InterpreterBase"", e);
      }
  }"
2772,"    protected JexlNode findNullOperand(final RuntimeException xrt, final JexlNode node, final Object left, final Object right) {
        if (xrt instanceof JexlArithmetic.NullOperand) {
            if (left == null) {
                return node.jjtGetChild(0);
            }
            if (right == null) {
                return node.jjtGetChild(1);
            }
        }
        return node;
    }","  public void test76()  throws Throwable  {
      Engine engine0 = new Engine();
      TemplateInterpreter.Arguments templateInterpreter_Arguments0 = new TemplateInterpreter.Arguments(engine0);
      TemplateInterpreter templateInterpreter0 = new TemplateInterpreter(templateInterpreter_Arguments0);
      JexlArithmetic.NullOperand jexlArithmetic_NullOperand0 = new JexlArithmetic.NullOperand();
      Parser parser0 = new Parser("""");
      ASTConstructorNode aSTConstructorNode0 = new ASTConstructorNode(parser0, 0);
      // Undeclared exception!
      try { 
        templateInterpreter0.findNullOperand(jexlArithmetic_NullOperand0, aSTConstructorNode0, templateInterpreter_Arguments0, (Object) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.parser.SimpleNode"", e);
      }
  }"
2773,"    protected JexlNode findNullOperand(final RuntimeException xrt, final JexlNode node, final Object left, final Object right) {
        if (xrt instanceof JexlArithmetic.NullOperand) {
            if (left == null) {
                return node.jjtGetChild(0);
            }
            if (right == null) {
                return node.jjtGetChild(1);
            }
        }
        return node;
    }","  public void test77()  throws Throwable  {
      Engine engine0 = new Engine();
      TemplateInterpreter.Arguments templateInterpreter_Arguments0 = new TemplateInterpreter.Arguments(engine0);
      TemplateInterpreter templateInterpreter0 = new TemplateInterpreter(templateInterpreter_Arguments0);
      JexlArithmetic.NullOperand jexlArithmetic_NullOperand0 = new JexlArithmetic.NullOperand();
      ASTNRNode aSTNRNode0 = new ASTNRNode(2);
      Byte byte0 = new Byte((byte)3);
      // Undeclared exception!
      try { 
        templateInterpreter0.findNullOperand(jexlArithmetic_NullOperand0, aSTNRNode0, (Object) null, byte0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.parser.SimpleNode"", e);
      }
  }"
2774,"    protected JexlNode findNullOperand(final RuntimeException xrt, final JexlNode node, final Object left, final Object right) {
        if (xrt instanceof JexlArithmetic.NullOperand) {
            if (left == null) {
                return node.jjtGetChild(0);
            }
            if (right == null) {
                return node.jjtGetChild(1);
            }
        }
        return node;
    }","  public void test78()  throws Throwable  {
      Engine engine0 = new Engine();
      TemplateInterpreter.Arguments templateInterpreter_Arguments0 = new TemplateInterpreter.Arguments(engine0);
      TemplateInterpreter templateInterpreter0 = new TemplateInterpreter(templateInterpreter_Arguments0);
      Double double0 = new Double((-828.6587024175));
      JexlNode jexlNode0 = templateInterpreter0.findNullOperand((RuntimeException) null, (JexlNode) null, (Object) null, double0);
}"
2775,"    protected void setContextVariable(final JexlNode node, final String name, final Object value) {
        if (options.isLexicalShade() && !context.has(name)) {
            throw new JexlException.Variable(node, name, true);
        }
        try {
            context.set(name, value);
        } catch (final UnsupportedOperationException xsupport) {
            throw new JexlException(node, ""context is readonly"", xsupport);
        }
    }","  public void test79()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      TemplateInterpreter.Arguments templateInterpreter_Arguments0 = new TemplateInterpreter.Arguments(engine0);
      TemplateInterpreter templateInterpreter0 = new TemplateInterpreter(templateInterpreter_Arguments0);
      ASTSetXorNode aSTSetXorNode0 = new ASTSetXorNode(3);
      // Undeclared exception!
      try { 
        templateInterpreter0.setContextVariable(aSTSetXorNode0, ""org.apache.commons.jexl3.internal.Interpreter$AnnotatedCall"", ""!t^#U7/0,_rm"");
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // ?: JEXL error : context is readonly
         //
         verifyException(""org.apache.commons.jexl3.internal.InterpreterBase"", e);
      }
  }"
2776,,"  public void test80()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      TemplateInterpreter.Arguments templateInterpreter_Arguments0 = new TemplateInterpreter.Arguments(engine0);
      TemplateInterpreter templateInterpreter0 = new TemplateInterpreter(templateInterpreter_Arguments0);
      Script script0 = engine0.createExpression((JexlInfo) null, ""org.apache.commons.jexl3.internal.InterpreterBase$ContextualCtor"");
      Object[] objectArray0 = new Object[9];
      Script.Callable script_Callable0 = script0.new Callable(templateInterpreter0);
      Object object0 = templateInterpreter0.processAnnotation(""org.apache.commons.jexl3.internal.InterpreterBase$ContextualCtor"", objectArray0, script_Callable0);
}"
2777,,"  public void test81()  throws Throwable  {
      Engine engine0 = new Engine();
      JexlEngine.EmptyContext jexlEngine_EmptyContext0 = (JexlEngine.EmptyContext)JexlEngine.EMPTY_CONTEXT;
      Object object0 = engine0.getProperty((JexlContext) jexlEngine_EmptyContext0, (Object) null, ""Reference"");
}"
2778,,"  public void test82()  throws Throwable  {
      Engine engine0 = new Engine();
      JexlEngine.EmptyContext jexlEngine_EmptyContext0 = (JexlEngine.EmptyContext)JexlEngine.EMPTY_CONTEXT;
      Object object0 = engine0.getProperty((Object) jexlEngine_EmptyContext0, ""Reference"");
}"
2779,"    protected Object getVariable(final Frame frame, final LexicalScope block, final ASTIdentifier identifier) {
        final int symbol = identifier.getSymbol();
        final String name = identifier.getName();
        // if we have a symbol, we have a scope thus a frame
        if (options.isLexicalShade() && identifier.isShaded()) {
            return undefinedVariable(identifier, name);
        }
        // a local var ?
        if ((symbol >= 0) && frame.has(symbol)) {
            final Object value = frame.get(symbol);
            // not out of scope with no lexical shade ?
            if (value != Scope.UNDEFINED) {
                // null argument of an arithmetic operator ?
                if (value == null && arithmetic.isStrict() && identifier.jjtGetParent().isStrictOperator()) {
                    return unsolvableVariable(identifier, name, false); // defined but null
                }
                return value;
            }
        }
        // consider global
        final Object value = context.get(name);
        // is it null ?
        if (value == null) {
            // is it defined ?
            if (!context.has(name)) {
                // not defined, ignore in some cases...
                final boolean ignore =
                        (isSafe() && (symbol >= 0 || identifier.jjtGetParent() instanceof ASTAssignment))
                         || (identifier.jjtGetParent() instanceof ASTReference);
                if (!ignore) {
                    return undefinedVariable(identifier, name); // undefined
                }
            } else if (arithmetic.isStrict() && identifier.jjtGetParent().isStrictOperator()) {
                return unsolvableVariable(identifier, name, false); // defined but null
            }
        }
        return value;
    }","  public void test83()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      JexlOptions jexlOptions0 = new JexlOptions();
      Object[] objectArray0 = new Object[3];
      Frame frame0 = new Frame((Scope) null, objectArray0, 0);
      Interpreter interpreter0 = engine0.createInterpreter(engine0.EMPTY_CONTEXT, frame0, jexlOptions0);
      jexlOptions0.setLexicalShade(true);
      ASTVar aSTVar0 = new ASTVar((-25));
      // Undeclared exception!
      try { 
        interpreter0.getVariable(frame0, (LexicalScope) null, aSTVar0);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // ?: variable '' is undefined
         //
         verifyException(""org.apache.commons.jexl3.internal.InterpreterBase"", e);
      }
  }"
2780,"    protected boolean isVariableDefined(final Frame frame, final LexicalScope block, final String name) {
        if (frame != null && block != null) {
            final Integer ref = frame.getScope().getSymbol(name);
            final int symbol = ref != null? ref : -1;
            if (symbol >= 0  && block.hasSymbol(symbol)) {
                final Object value = frame.get(symbol);
                return value != Scope.UNDEFINED && value != Scope.UNDECLARED;
            }
        }
        return context.has(name);
    }","  public void test84()  throws Throwable  {
      Engine engine0 = new Engine();
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[7];
      stringArray0[1] = ""&ea-TCf_@"";
      Scope scope1 = new Scope(scope0, stringArray0);
      Frame frame0 = new Frame(scope1, stringArray0, 8);
      JexlOptions jexlOptions0 = new JexlOptions();
      Interpreter interpreter0 = engine0.createInterpreter((JexlContext) null, frame0, jexlOptions0);
      LexicalScope lexicalScope0 = new LexicalScope();
      lexicalScope0.symbols = 2178L;
      boolean boolean0 = interpreter0.isVariableDefined(frame0, lexicalScope0, ""&ea-TCf_@"");
}"
2781,"    protected boolean isVariableDefined(final Frame frame, final LexicalScope block, final String name) {
        if (frame != null && block != null) {
            final Integer ref = frame.getScope().getSymbol(name);
            final int symbol = ref != null? ref : -1;
            if (symbol >= 0  && block.hasSymbol(symbol)) {
                final Object value = frame.get(symbol);
                return value != Scope.UNDEFINED && value != Scope.UNDECLARED;
            }
        }
        return context.has(name);
    }","  public void test85()  throws Throwable  {
      Engine engine0 = new Engine();
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[7];
      stringArray0[1] = ""&ea-TCf_@"";
      Scope scope1 = new Scope(scope0, stringArray0);
      Frame frame0 = new Frame(scope1, stringArray0, 8);
      JexlOptions jexlOptions0 = new JexlOptions();
      Interpreter interpreter0 = engine0.createInterpreter((JexlContext) null, frame0, jexlOptions0);
      LexicalScope lexicalScope0 = new LexicalScope();
      boolean boolean0 = interpreter0.isVariableDefined(frame0, lexicalScope0, ""&ea-TCf_@"");
}"
2782,"    protected boolean isVariableDefined(final Frame frame, final LexicalScope block, final String name) {
        if (frame != null && block != null) {
            final Integer ref = frame.getScope().getSymbol(name);
            final int symbol = ref != null? ref : -1;
            if (symbol >= 0  && block.hasSymbol(symbol)) {
                final Object value = frame.get(symbol);
                return value != Scope.UNDEFINED && value != Scope.UNDECLARED;
            }
        }
        return context.has(name);
    }","  public void test86()  throws Throwable  {
      Engine engine0 = new Engine();
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[7];
      Scope scope1 = new Scope(scope0, stringArray0);
      Frame frame0 = new Frame(scope1, stringArray0, 8);
      JexlOptions jexlOptions0 = new JexlOptions();
      Interpreter interpreter0 = engine0.createInterpreter((JexlContext) null, frame0, jexlOptions0);
      LexicalScope lexicalScope0 = new LexicalScope();
      boolean boolean0 = interpreter0.isVariableDefined(frame0, lexicalScope0, ""&ea-TCf_@"");
}"
2783,"    protected boolean isVariableDefined(final Frame frame, final LexicalScope block, final String name) {
        if (frame != null && block != null) {
            final Integer ref = frame.getScope().getSymbol(name);
            final int symbol = ref != null? ref : -1;
            if (symbol >= 0  && block.hasSymbol(symbol)) {
                final Object value = frame.get(symbol);
                return value != Scope.UNDEFINED && value != Scope.UNDECLARED;
            }
        }
        return context.has(name);
    }","  public void test87()  throws Throwable  {
      Engine engine0 = new Engine();
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[6];
      Scope scope1 = new Scope(scope0, stringArray0);
      Frame frame0 = new Frame(scope1, stringArray0, (-260));
      JexlOptions jexlOptions0 = engine0.options;
      Interpreter interpreter0 = engine0.createInterpreter((JexlContext) null, frame0, jexlOptions0);
      boolean boolean0 = interpreter0.isVariableDefined(frame0, (LexicalScope) null, ""org.apache.commons.jexl3.internal.InterpreterBase$Funcall"");
}"
2784,"    protected boolean isVariableDefined(final Frame frame, final LexicalScope block, final String name) {
        if (frame != null && block != null) {
            final Integer ref = frame.getScope().getSymbol(name);
            final int symbol = ref != null? ref : -1;
            if (symbol >= 0  && block.hasSymbol(symbol)) {
                final Object value = frame.get(symbol);
                return value != Scope.UNDEFINED && value != Scope.UNDECLARED;
            }
        }
        return context.has(name);
    }","  public void test88()  throws Throwable  {
      Engine engine0 = new Engine();
      JexlOptions jexlOptions0 = new JexlOptions();
      Interpreter interpreter0 = engine0.createInterpreter(engine0.EMPTY_CONTEXT, (Frame) null, jexlOptions0);
      boolean boolean0 = interpreter0.isVariableDefined((Frame) null, (LexicalScope) null, """");
}"
2785,"    protected boolean defineVariable(final ASTVar var, final LexicalFrame frame) {
        final int symbol = var.getSymbol();
        if (symbol < 0) {
            return false;
        }
        if (var.isRedefined()) {
            return false;
        }
        return frame.defineSymbol(symbol, var.isCaptured());
    }","  public void test89()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      JexlOptions jexlOptions0 = new JexlOptions();
      Object[] objectArray0 = new Object[3];
      Frame frame0 = new Frame((Scope) null, objectArray0, 0);
      Interpreter interpreter0 = engine0.createInterpreter(engine0.EMPTY_CONTEXT, frame0, jexlOptions0);
      ASTVar aSTVar0 = new ASTVar((-25));
      boolean boolean0 = interpreter0.defineVariable(aSTVar0, (LexicalFrame) null);
}"
2786,"    protected Object resolveNamespace(final String prefix, final JexlNode node) {
        Object namespace;
        // check whether this namespace is a functor
        synchronized (this) {
            if (functors != null) {
                namespace = functors.get(prefix);
                if (namespace != null) {
                    return namespace;
                }
            }
        }
        // check if namespace is a resolver
        namespace = ns.resolveNamespace(prefix);
        if (namespace == null) {
            namespace = functions.get(prefix);
            if (prefix != null && namespace == null) {
                throw new JexlException(node, ""no such function namespace "" + prefix, null);
            }
        }
        // shortcut if ns is known to be not-a-functor
        final boolean cacheable = cache;
        final Object cached = cacheable ? node.jjtGetValue() : null;
        if (cached != JexlContext.NamespaceFunctor.class) {
            // allow namespace to instantiate a functor with context if possible, not an error otherwise
            Object functor = null;
            if (namespace instanceof JexlContext.NamespaceFunctor) {
                functor = ((JexlContext.NamespaceFunctor) namespace).createFunctor(context);
            } else if (namespace instanceof Class<?> || namespace instanceof String) {
                // attempt to reuse last ctor cached in volatile JexlNode.value
                if (cached instanceof JexlMethod) {
                    try {
                        final Object eval = ((JexlMethod) cached).tryInvoke(null, context);
                        if (JexlEngine.TRY_FAILED != eval) {
                            functor = eval;
                        }
                    } catch (final JexlException.TryFailed xtry) {
                        throw new JexlException(node, ""unable to instantiate namespace "" + prefix, xtry.getCause());
                    }
                }
                // find a ctor with that context class
                if (functor == null) {
                    JexlMethod ctor = uberspect.getConstructor(namespace, context);
                    if (ctor != null) {
                        try {
                            functor = ctor.invoke(namespace, context);
                            if (cacheable && ctor.isCacheable()) {
                                node.jjtSetValue(ctor);
                            }
                        } catch (final Exception xinst) {
                            throw new JexlException(node, ""unable to instantiate namespace "" + prefix, xinst);
                        }
                    }
                    // try again; find a ctor with no arg
                    if (functor == null) {
                        ctor = uberspect.getConstructor(namespace);
                        if (ctor != null) {
                            try {
                                functor = ctor.invoke(namespace);
                            } catch (final Exception xinst) {
                                throw new JexlException(node, ""unable to instantiate namespace "" + prefix, xinst);
                            }
                        }
                        // try again; use a class, namespace of static methods
                        // try to find a class with that name
                        if (functor == null && namespace instanceof String) {
                            try {
                                namespace = uberspect.getClassLoader().loadClass((String) namespace);
                            } catch (final ClassNotFoundException xignore) {
                                // not a class
                                namespace = null;
                            }
                        } // we know it's a class
                    }
                }
            }
            // got a functor, store it and return it
            if (functor != null) {
                synchronized (this) {
                    if (functors == null) {
                        functors = new HashMap<>();
                    }
                    functors.put(prefix, functor);
                }
                return functor;
            }
            // use the NamespaceFunctor class to tag this node as not-a-functor
            node.jjtSetValue(JexlContext.NamespaceFunctor.class);
        }
        return namespace;
    }","  public void test90()  throws Throwable  {
      Engine engine0 = new Engine();
      TemplateInterpreter.Arguments templateInterpreter_Arguments0 = new TemplateInterpreter.Arguments(engine0);
      TemplateInterpreter templateInterpreter0 = new TemplateInterpreter(templateInterpreter_Arguments0);
      Parser parser0 = engine0.parser;
      ASTFalseNode aSTFalseNode0 = new ASTFalseNode(parser0, 4359);
      // Undeclared exception!
      try { 
        templateInterpreter0.resolveNamespace("",GJ+gv(;@DH"", aSTFalseNode0);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // ?: JEXL error : no such function namespace ,GJ+gv(;@DH
         //
         verifyException(""org.apache.commons.jexl3.internal.InterpreterBase"", e);
      }
  }"
2787,"    protected Object resolveNamespace(final String prefix, final JexlNode node) {
        Object namespace;
        // check whether this namespace is a functor
        synchronized (this) {
            if (functors != null) {
                namespace = functors.get(prefix);
                if (namespace != null) {
                    return namespace;
                }
            }
        }
        // check if namespace is a resolver
        namespace = ns.resolveNamespace(prefix);
        if (namespace == null) {
            namespace = functions.get(prefix);
            if (prefix != null && namespace == null) {
                throw new JexlException(node, ""no such function namespace "" + prefix, null);
            }
        }
        // shortcut if ns is known to be not-a-functor
        final boolean cacheable = cache;
        final Object cached = cacheable ? node.jjtGetValue() : null;
        if (cached != JexlContext.NamespaceFunctor.class) {
            // allow namespace to instantiate a functor with context if possible, not an error otherwise
            Object functor = null;
            if (namespace instanceof JexlContext.NamespaceFunctor) {
                functor = ((JexlContext.NamespaceFunctor) namespace).createFunctor(context);
            } else if (namespace instanceof Class<?> || namespace instanceof String) {
                // attempt to reuse last ctor cached in volatile JexlNode.value
                if (cached instanceof JexlMethod) {
                    try {
                        final Object eval = ((JexlMethod) cached).tryInvoke(null, context);
                        if (JexlEngine.TRY_FAILED != eval) {
                            functor = eval;
                        }
                    } catch (final JexlException.TryFailed xtry) {
                        throw new JexlException(node, ""unable to instantiate namespace "" + prefix, xtry.getCause());
                    }
                }
                // find a ctor with that context class
                if (functor == null) {
                    JexlMethod ctor = uberspect.getConstructor(namespace, context);
                    if (ctor != null) {
                        try {
                            functor = ctor.invoke(namespace, context);
                            if (cacheable && ctor.isCacheable()) {
                                node.jjtSetValue(ctor);
                            }
                        } catch (final Exception xinst) {
                            throw new JexlException(node, ""unable to instantiate namespace "" + prefix, xinst);
                        }
                    }
                    // try again; find a ctor with no arg
                    if (functor == null) {
                        ctor = uberspect.getConstructor(namespace);
                        if (ctor != null) {
                            try {
                                functor = ctor.invoke(namespace);
                            } catch (final Exception xinst) {
                                throw new JexlException(node, ""unable to instantiate namespace "" + prefix, xinst);
                            }
                        }
                        // try again; use a class, namespace of static methods
                        // try to find a class with that name
                        if (functor == null && namespace instanceof String) {
                            try {
                                namespace = uberspect.getClassLoader().loadClass((String) namespace);
                            } catch (final ClassNotFoundException xignore) {
                                // not a class
                                namespace = null;
                            }
                        } // we know it's a class
                    }
                }
            }
            // got a functor, store it and return it
            if (functor != null) {
                synchronized (this) {
                    if (functors == null) {
                        functors = new HashMap<>();
                    }
                    functors.put(prefix, functor);
                }
                return functor;
            }
            // use the NamespaceFunctor class to tag this node as not-a-functor
            node.jjtSetValue(JexlContext.NamespaceFunctor.class);
        }
        return namespace;
    }","  public void test91()  throws Throwable  {
      Engine engine0 = new Engine();
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[6];
      Scope scope1 = new Scope(scope0, stringArray0);
      Frame frame0 = new Frame(scope1, stringArray0, (-260));
      JexlOptions jexlOptions0 = engine0.options;
      Interpreter interpreter0 = engine0.createInterpreter((JexlContext) null, frame0, jexlOptions0);
      ASTJexlScript aSTJexlScript0 = new ASTJexlScript(3734);
      Object object0 = interpreter0.resolveNamespace(stringArray0[2], aSTJexlScript0);
}"
2788,"    protected void closeIfSupported(final Object closeable) {
        if (closeable != null) {
            final JexlMethod mclose = uberspect.getMethod(closeable, ""close"", EMPTY_PARAMS);
            if (mclose != null) {
                try {
                    mclose.invoke(closeable, EMPTY_PARAMS);
                } catch (final Exception xignore) {
                    logger.warn(xignore);
                }
            }
        }
    }","  public void test92()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      JexlOptions jexlOptions0 = engine0.options;
      Map<String, Object> map0 = jexlBuilder0.namespaces();
      MapContext mapContext0 = new MapContext(map0);
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[4];
      Scope scope1 = new Scope(scope0, stringArray0);
      Frame frame0 = new Frame(scope1, stringArray0, (-1981));
      Interpreter interpreter0 = new Interpreter(engine0, jexlOptions0, mapContext0, frame0);
      interpreter0.closeIfSupported(scope1);
}"
2789,"    protected void closeIfSupported(final Object closeable) {
        if (closeable != null) {
            final JexlMethod mclose = uberspect.getMethod(closeable, ""close"", EMPTY_PARAMS);
            if (mclose != null) {
                try {
                    mclose.invoke(closeable, EMPTY_PARAMS);
                } catch (final Exception xignore) {
                    logger.warn(xignore);
                }
            }
        }
    }","  public void test93()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      JexlOptions jexlOptions0 = engine0.options;
      Interpreter interpreter0 = engine0.createInterpreter(engine0.EMPTY_CONTEXT, (Frame) null, jexlOptions0);
      interpreter0.closeIfSupported((Object) null);
  }"
2790,,"  public void test94()  throws Throwable  {
      Engine engine0 = new Engine();
      ASTReference aSTReference0 = new ASTReference((-203));
      ObjectContext<ASTReference> objectContext0 = new ObjectContext<ASTReference>(engine0, aSTReference0);
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[6];
      Scope scope1 = new Scope(scope0, stringArray0);
      Frame frame0 = new Frame(scope1, stringArray0, (-192));
      JexlOptions jexlOptions0 = engine0.options(engine0.EMPTY_CONTEXT);
      Interpreter interpreter0 = engine0.createInterpreter(objectContext0, frame0, jexlOptions0);
}"
2791,,"  public void test95()  throws Throwable  {
      Engine engine0 = new Engine();
      JexlOptions jexlOptions0 = new JexlOptions();
      jexlOptions0.setStrictArithmetic(false);
      Interpreter interpreter0 = engine0.createInterpreter(engine0.EMPTY_CONTEXT, (Frame) null, jexlOptions0);
}"
2792,,"  public void test96()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlBuilder jexlBuilder1 = jexlBuilder0.cache(1064);
      Engine engine0 = new Engine(jexlBuilder1);
      Object[] objectArray0 = new Object[1];
      Frame frame0 = new Frame((Scope) null, objectArray0, 1064);
      JexlOptions jexlOptions0 = new JexlOptions();
      Interpreter interpreter0 = engine0.createInterpreter((JexlContext) null, frame0, jexlOptions0);
}"
2793,"    protected InterpreterBase(final Engine engine, final JexlOptions opts, final JexlContext aContext) {
        this.jexl = engine;
        this.logger = jexl.logger;
        this.uberspect = jexl.uberspect;
        this.context = aContext != null ? aContext : Engine.EMPTY_CONTEXT;
        this.cache = engine.cache != null;
        final JexlArithmetic jexla = jexl.arithmetic;
        this.options = opts == null? engine.options(aContext) : opts;
        this.arithmetic = jexla.options(options);
        if (arithmetic != jexla && !arithmetic.getClass().equals(jexla.getClass())) {
            logger.warn(""expected arithmetic to be "" + jexla.getClass().getSimpleName()
                    + "", got "" + arithmetic.getClass().getSimpleName()
            );
        }
        if (this.context instanceof JexlContext.NamespaceResolver) {
            ns = ((JexlContext.NamespaceResolver) context);
        } else {
            ns = Engine.EMPTY_NS;
        }
        AtomicBoolean acancel = null;
        if (this.context instanceof JexlContext.CancellationHandle) {
            acancel = ((JexlContext.CancellationHandle) context).getCancellation();
        }
        this.cancelled = acancel != null? acancel : new AtomicBoolean(false);
        final Map<String,Object> ons = options.getNamespaces();
        this.functions = ons.isEmpty()? jexl.functions : ons;
        this.functors = null;
        this.operators = new Operators(this);
    }","  public void test97()  throws Throwable  {
      Engine engine0 = new Engine();
      JexlEngine.EmptyContext jexlEngine_EmptyContext0 = (JexlEngine.EmptyContext)JexlEngine.EMPTY_CONTEXT;
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlOptions jexlOptions0 = jexlBuilder0.options();
      Interpreter interpreter0 = engine0.createInterpreter(jexlEngine_EmptyContext0, (Frame) null, jexlOptions0);
      Object[] objectArray0 = new Object[2];
      InterpreterBase.ArithmeticFuncall interpreterBase_ArithmeticFuncall0 = new InterpreterBase.ArithmeticFuncall((JexlMethod) null, true);
      // Undeclared exception!
      try { 
        interpreterBase_ArithmeticFuncall0.tryInvoke(interpreter0, ""\"")P^}jf"", (Object) null, objectArray0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.internal.InterpreterBase$ArithmeticFuncall"", e);
      }
  }"
2794,"    protected Object redefinedVariable(final JexlNode node, final String var) {
        return variableError(node, var, VariableIssue.REDEFINED);
    }","  public void test98()  throws Throwable  {
      Engine engine0 = new Engine();
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[7];
      Scope scope1 = new Scope(scope0, stringArray0);
      Frame frame0 = new Frame(scope1, stringArray0, 8);
      JexlInfo jexlInfo0 = new JexlInfo(""&ea-TCf_@"", 8, 8);
      ASTJexlScript aSTJexlScript0 = engine0.parse(jexlInfo0, engine0.DEFAULT_FEATURES, ""6|ff$zRZ"", scope1);
      JexlOptions jexlOptions0 = new JexlOptions();
      Interpreter interpreter0 = engine0.createInterpreter((JexlContext) null, frame0, jexlOptions0);
      // Undeclared exception!
      try { 
        interpreter0.redefinedVariable(aSTJexlScript0, ""YEWS9pEjie@+4RR/wl4"");
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // &ea-TCf_@@8:1 variable 'YEWS9pEjie@+4RR/wl4' is already defined
         //
         verifyException(""org.apache.commons.jexl3.internal.InterpreterBase"", e);
      }
  }"
2795,,"  public void test99()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true);
      JexlOptions jexlOptions0 = engine0.options;
      Map<String, Object> map0 = jexlBuilder0.namespaces();
      MapContext mapContext0 = new MapContext(map0);
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[4];
      Scope scope1 = new Scope(scope0, stringArray0);
      Frame frame0 = new Frame(scope1, stringArray0, (-1981));
      Interpreter interpreter0 = new Interpreter(engine0, jexlOptions0, mapContext0, frame0);
      Interpreter interpreter1 = new Interpreter(interpreter0, jexlArithmetic0);
}"
2796,"    protected  boolean cancel() {
        return cancelled.compareAndSet(false, true);
    }","  public void test100()  throws Throwable  {
      Engine engine0 = new Engine();
      Interpreter interpreter0 = engine0.createInterpreter((JexlContext) null, (Frame) null, (JexlOptions) null);
      ASTNotNode aSTNotNode0 = new ASTNotNode((-1165));
      interpreter0.cancel();
      // Undeclared exception!
      try { 
        interpreter0.interpret(aSTNotNode0);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
      }
  }"
2797,"    protected InterpreterBase(final Engine engine, final JexlOptions opts, final JexlContext aContext) {
        this.jexl = engine;
        this.logger = jexl.logger;
        this.uberspect = jexl.uberspect;
        this.context = aContext != null ? aContext : Engine.EMPTY_CONTEXT;
        this.cache = engine.cache != null;
        final JexlArithmetic jexla = jexl.arithmetic;
        this.options = opts == null? engine.options(aContext) : opts;
        this.arithmetic = jexla.options(options);
        if (arithmetic != jexla && !arithmetic.getClass().equals(jexla.getClass())) {
            logger.warn(""expected arithmetic to be "" + jexla.getClass().getSimpleName()
                    + "", got "" + arithmetic.getClass().getSimpleName()
            );
        }
        if (this.context instanceof JexlContext.NamespaceResolver) {
            ns = ((JexlContext.NamespaceResolver) context);
        } else {
            ns = Engine.EMPTY_NS;
        }
        AtomicBoolean acancel = null;
        if (this.context instanceof JexlContext.CancellationHandle) {
            acancel = ((JexlContext.CancellationHandle) context).getCancellation();
        }
        this.cancelled = acancel != null? acancel : new AtomicBoolean(false);
        final Map<String,Object> ons = options.getNamespaces();
        this.functions = ons.isEmpty()? jexl.functions : ons;
        this.functors = null;
        this.operators = new Operators(this);
    }","  public void test101()  throws Throwable  {
      InterpreterBase.Funcall interpreterBase_Funcall0 = new InterpreterBase.Funcall((JexlMethod) null, false);
      Object[] objectArray0 = new Object[5];
      // Undeclared exception!
      try { 
        interpreterBase_Funcall0.tryInvoke((InterpreterBase) null, ""\""|\"""", (Object) null, objectArray0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.internal.InterpreterBase$Funcall"", e);
      }
  }"
2798,"    protected InterpreterBase(final Engine engine, final JexlOptions opts, final JexlContext aContext) {
        this.jexl = engine;
        this.logger = jexl.logger;
        this.uberspect = jexl.uberspect;
        this.context = aContext != null ? aContext : Engine.EMPTY_CONTEXT;
        this.cache = engine.cache != null;
        final JexlArithmetic jexla = jexl.arithmetic;
        this.options = opts == null? engine.options(aContext) : opts;
        this.arithmetic = jexla.options(options);
        if (arithmetic != jexla && !arithmetic.getClass().equals(jexla.getClass())) {
            logger.warn(""expected arithmetic to be "" + jexla.getClass().getSimpleName()
                    + "", got "" + arithmetic.getClass().getSimpleName()
            );
        }
        if (this.context instanceof JexlContext.NamespaceResolver) {
            ns = ((JexlContext.NamespaceResolver) context);
        } else {
            ns = Engine.EMPTY_NS;
        }
        AtomicBoolean acancel = null;
        if (this.context instanceof JexlContext.CancellationHandle) {
            acancel = ((JexlContext.CancellationHandle) context).getCancellation();
        }
        this.cancelled = acancel != null? acancel : new AtomicBoolean(false);
        final Map<String,Object> ons = options.getNamespaces();
        this.functions = ons.isEmpty()? jexl.functions : ons;
        this.functors = null;
        this.operators = new Operators(this);
    }","  public void test102()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      TemplateInterpreter.Arguments templateInterpreter_Arguments0 = new TemplateInterpreter.Arguments(engine0);
      TemplateInterpreter templateInterpreter0 = new TemplateInterpreter(templateInterpreter_Arguments0);
      Object[] objectArray0 = new Object[22];
      InterpreterBase.ContextualCtor interpreterBase_ContextualCtor0 = new InterpreterBase.ContextualCtor((JexlMethod) null, true);
      MockThrowable mockThrowable0 = new MockThrowable();
      MockException mockException0 = new MockException(""25(Z|?=sa{y[/f"", mockThrowable0);
      JexlException jexlException0 = new JexlException((JexlNode) null, """", mockException0);
      // Undeclared exception!
      try { 
        interpreterBase_ContextualCtor0.tryInvoke(templateInterpreter0, """", jexlException0, objectArray0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.internal.InterpreterBase$ContextualCtor"", e);
      }
  }"
2799,"    public Object[] toArray() {
        final int size = size();
        final Object[] array = new Object[size];
        for (int a = 0; a < size; ++a) {
            array[a] = min + a;
        }
        return array;
    }","  public void test0()  throws Throwable  {
      LongRange longRange0 = LongRange.create((-2168L), (-2168L));
      Object[] objectArray0 = new Object[1];
      Object[] objectArray1 = longRange0.toArray(objectArray0);
}"
2800,"    public int size() {
        return (int) (max - min + 1);
    }","  public void test1()  throws Throwable  {
      LongRange longRange0 = LongRange.create((-2168L), (-2168L));
      Object[] objectArray0 = new Object[1];
      Object[] objectArray1 = longRange0.toArray(objectArray0);
}"
2801,"    public int size() {
        return (int) (max - min + 1);
    }","  public void test2()  throws Throwable  {
      LongRange longRange0 = LongRange.create((-5148L), (-119L));
      Object[] objectArray0 = longRange0.toArray();
}"
2802,"    public Object[] toArray() {
        final int size = size();
        final Object[] array = new Object[size];
        for (int a = 0; a < size; ++a) {
            array[a] = min + a;
        }
        return array;
    }","  public void test3()  throws Throwable  {
      LongRange longRange0 = LongRange.create((-5148L), (-119L));
      Object[] objectArray0 = longRange0.toArray();
}"
2803,"    public boolean equals(final Object obj) {
        if (obj == null) {
            return false;
        }
        if (getClass() != obj.getClass()) {
            return false;
        }
        final LongRange other = (LongRange) obj;
        if (this.min != other.min) {
            return false;
        }
        if (this.max != other.max) {
            return false;
        }
        return true;
    }","  public void test4()  throws Throwable  {
      LongRange.Descending longRange_Descending0 = new LongRange.Descending(13L, 0L);
      LongRange.Descending longRange_Descending1 = new LongRange.Descending(13L, 13L);
      boolean boolean0 = longRange_Descending0.equals(longRange_Descending1);
}"
2804,"    public boolean equals(final Object obj) {
        if (obj == null) {
            return false;
        }
        if (getClass() != obj.getClass()) {
            return false;
        }
        final LongRange other = (LongRange) obj;
        if (this.min != other.min) {
            return false;
        }
        if (this.max != other.max) {
            return false;
        }
        return true;
    }","  public void test5()  throws Throwable  {
      LongRange.Descending longRange_Descending0 = new LongRange.Descending(13L, 0L);
      LongRange.Descending longRange_Descending1 = new LongRange.Descending(13L, 13L);
      boolean boolean0 = longRange_Descending0.equals(longRange_Descending1);
}"
2805,"    public long getMin() {
        return min;
    }","  public void test6()  throws Throwable  {
      LongRange.Descending longRange_Descending0 = new LongRange.Descending(13L, 0L);
      LongRange.Descending longRange_Descending1 = new LongRange.Descending(13L, 13L);
      boolean boolean0 = longRange_Descending0.equals(longRange_Descending1);
}"
2806,"    public int size() {
        return (int) (max - min + 1);
    }","  public void test7()  throws Throwable  {
      LongRange.Descending longRange_Descending0 = new LongRange.Descending(0L, 0L);
      LongRange longRange0 = LongRange.create(0L, (-17L));
      boolean boolean0 = longRange_Descending0.equals(longRange0);
}"
2807,"    public boolean equals(final Object obj) {
        if (obj == null) {
            return false;
        }
        if (getClass() != obj.getClass()) {
            return false;
        }
        final LongRange other = (LongRange) obj;
        if (this.min != other.min) {
            return false;
        }
        if (this.max != other.max) {
            return false;
        }
        return true;
    }","  public void test8()  throws Throwable  {
      LongRange.Descending longRange_Descending0 = new LongRange.Descending(0L, 0L);
      LongRange longRange0 = LongRange.create(0L, (-17L));
      boolean boolean0 = longRange_Descending0.equals(longRange0);
}"
2808,"    public boolean equals(final Object obj) {
        if (obj == null) {
            return false;
        }
        if (getClass() != obj.getClass()) {
            return false;
        }
        final LongRange other = (LongRange) obj;
        if (this.min != other.min) {
            return false;
        }
        if (this.max != other.max) {
            return false;
        }
        return true;
    }","  public void test9()  throws Throwable  {
      LongRange.Descending longRange_Descending0 = new LongRange.Descending(0L, 0L);
      LongRange longRange0 = LongRange.create(0L, (-17L));
      boolean boolean0 = longRange_Descending0.equals(longRange0);
}"
2809,"    public int size() {
        return (int) (max - min + 1);
    }","  public void test10()  throws Throwable  {
      LongRange.Descending longRange_Descending0 = new LongRange.Descending((-1531L), (-17L));
      boolean boolean0 = longRange_Descending0.equals(longRange_Descending0);
}"
2810,"    public boolean equals(final Object obj) {
        if (obj == null) {
            return false;
        }
        if (getClass() != obj.getClass()) {
            return false;
        }
        final LongRange other = (LongRange) obj;
        if (this.min != other.min) {
            return false;
        }
        if (this.max != other.max) {
            return false;
        }
        return true;
    }","  public void test11()  throws Throwable  {
      LongRange.Descending longRange_Descending0 = new LongRange.Descending((-1531L), (-17L));
      boolean boolean0 = longRange_Descending0.equals(longRange_Descending0);
}"
2811,"    public int size() {
        return (int) (max - min + 1);
    }","  public void test12()  throws Throwable  {
      LongRange longRange0 = LongRange.create((-1009L), (-1009L));
      longRange0.hashCode();
}"
2812,"    public int size() {
        return (int) (max - min + 1);
    }","  public void test13()  throws Throwable  {
      LongRange.Ascending longRange_Ascending0 = new LongRange.Ascending(66L, (-2873L));
      longRange_Ascending0.hashCode();
}"
2813,"    public long getMax() {
        return max;
    }","  public void test14()  throws Throwable  {
      LongRange.Descending longRange_Descending0 = new LongRange.Descending((-2779L), (-2779L));
      longRange_Descending0.iterator();
}"
2814,"    public int size() {
        return (int) (max - min + 1);
    }","  public void test15()  throws Throwable  {
      LongRange longRange0 = LongRange.create((-5148L), (-119L));
      longRange0.iterator();
}"
2815,"    public int size() {
        return (int) (max - min + 1);
    }","  public void test16()  throws Throwable  {
      LongRange.Descending longRange_Descending0 = new LongRange.Descending(1L, 0L);
      Object[] objectArray0 = longRange_Descending0.toArray();
}"
2816,"    public Object[] toArray() {
        final int size = size();
        final Object[] array = new Object[size];
        for (int a = 0; a < size; ++a) {
            array[a] = min + a;
        }
        return array;
    }","  public void test17()  throws Throwable  {
      LongRange.Descending longRange_Descending0 = new LongRange.Descending(1L, 0L);
      Object[] objectArray0 = longRange_Descending0.toArray();
}"
2817,"    public int size() {
        return (int) (max - min + 1);
    }","  public void test18()  throws Throwable  {
      LongRange longRange0 = LongRange.create(4016L, 1008L);
      int int0 = longRange0.size();
}"
2818,"    public int size() {
        return (int) (max - min + 1);
    }","  public void test19()  throws Throwable  {
      LongRange.Ascending longRange_Ascending0 = new LongRange.Ascending(2865L, 732L);
      int int0 = longRange_Ascending0.size();
}"
2819,"    public long getMin() {
        return min;
    }","  public void test20()  throws Throwable  {
      LongRange.Descending longRange_Descending0 = new LongRange.Descending(0L, 1L);
      long long0 = longRange_Descending0.getMin();
}"
2820,"    public int size() {
        return (int) (max - min + 1);
    }","  public void test21()  throws Throwable  {
      LongRange.Descending longRange_Descending0 = new LongRange.Descending(0L, 1L);
      long long0 = longRange_Descending0.getMin();
}"
2821,"    public int size() {
        return (int) (max - min + 1);
    }","  public void test22()  throws Throwable  {
      LongRange.Descending longRange_Descending0 = new LongRange.Descending(1120L, 1120L);
      long long0 = longRange_Descending0.getMin();
}"
2822,"    public long getMin() {
        return min;
    }","  public void test23()  throws Throwable  {
      LongRange.Descending longRange_Descending0 = new LongRange.Descending(1120L, 1120L);
      long long0 = longRange_Descending0.getMin();
}"
2823,"    public long getMax() {
        return max;
    }","  public void test24()  throws Throwable  {
      LongRange.Ascending longRange_Ascending0 = new LongRange.Ascending(0L, 0L);
      long long0 = longRange_Ascending0.getMax();
}"
2824,"    public long getMax() {
        return max;
    }","  public void test25()  throws Throwable  {
      LongRange longRange0 = LongRange.create(4016L, 1008L);
      long long0 = longRange0.getMax();
}"
2825,"    public int size() {
        return (int) (max - min + 1);
    }","  public void test26()  throws Throwable  {
      LongRange longRange0 = LongRange.create(4016L, 1008L);
      long long0 = longRange0.getMax();
}"
2826,"    public boolean isEmpty() {
        return false;
    }","  public void test27()  throws Throwable  {
      LongRange longRange0 = LongRange.create(0L, 0L);
}"
2827,"    public Object[] toArray() {
        final int size = size();
        final Object[] array = new Object[size];
        for (int a = 0; a < size; ++a) {
            array[a] = min + a;
        }
        return array;
    }","  public void test28()  throws Throwable  {
      LongRange.Ascending longRange_Ascending0 = new LongRange.Ascending((-1563L), 0L);
      // Undeclared exception!
      try { 
        longRange_Ascending0.toArray((Object[]) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.internal.LongRange"", e);
      }
  }"
2828,"    public Object[] toArray() {
        final int size = size();
        final Object[] array = new Object[size];
        for (int a = 0; a < size; ++a) {
            array[a] = min + a;
        }
        return array;
    }","  public void test29()  throws Throwable  {
      LongRange.Descending longRange_Descending0 = new LongRange.Descending(1615L, 0L);
      Object[] objectArray0 = new Object[3];
      // Undeclared exception!
      try { 
        longRange_Descending0.toArray(objectArray0);
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1614
         //
         verifyException(""org.apache.commons.jexl3.internal.LongRange"", e);
      }
  }"
2829,"    public Object[] toArray() {
        final int size = size();
        final Object[] array = new Object[size];
        for (int a = 0; a < size; ++a) {
            array[a] = min + a;
        }
        return array;
    }","  public void test30()  throws Throwable  {
      LongRange.Ascending longRange_Ascending0 = new LongRange.Ascending(2913L, 1L);
      // Undeclared exception!
      try { 
        longRange_Ascending0.toArray();
        fail(""Expecting exception: NegativeArraySizeException"");
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.internal.LongRange"", e);
      }
  }"
2830,"    public boolean containsAll(final Collection<?> c) {
        for (final Object cc : c) {
            if (!contains(cc)) {
                return false;
            }
        }
        return true;
    }","  public void test31()  throws Throwable  {
      LongRange longRange0 = LongRange.create((-189L), 0L);
      // Undeclared exception!
      try { 
        longRange0.containsAll((Collection<?>) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.internal.LongRange"", e);
      }
  }"
2831,"    public boolean contains(final Object o) {
        if (o instanceof Number) {
            final long v = ((Number) o).longValue();
            return min <= v && v <= max;
        }
        return false;
    }","  public void test32()  throws Throwable  {
      LongRange.Descending longRange_Descending0 = new LongRange.Descending(0L, 0L);
      Byte byte0 = new Byte((byte) (-13));
      boolean boolean0 = longRange_Descending0.contains(byte0);
}"
2832,"    public boolean contains(final Object o) {
        if (o instanceof Number) {
            final long v = ((Number) o).longValue();
            return min <= v && v <= max;
        }
        return false;
    }","  public void test33()  throws Throwable  {
      LongRange longRange0 = LongRange.create(4016L, 1008L);
      Float float0 = new Float((float) 3009);
      boolean boolean0 = longRange0.contains(float0);
}"
2833,"    public long getMin() {
        return min;
    }","  public void test34()  throws Throwable  {
      LongRange longRange0 = LongRange.create(4016L, 1008L);
      Float float0 = new Float((float) 3009);
      boolean boolean0 = longRange0.contains(float0);
}"
2834,"    public int size() {
        return (int) (max - min + 1);
    }","  public void test35()  throws Throwable  {
      LongRange longRange0 = LongRange.create(1L, 3810L);
      Object object0 = new Object();
      boolean boolean0 = longRange0.contains(object0);
}"
2835,"    public boolean contains(final Object o) {
        if (o instanceof Number) {
            final long v = ((Number) o).longValue();
            return min <= v && v <= max;
        }
        return false;
    }","  public void test36()  throws Throwable  {
      LongRange longRange0 = LongRange.create(1L, 3810L);
      Object object0 = new Object();
      boolean boolean0 = longRange0.contains(object0);
}"
2836,"    public int size() {
        return (int) (max - min + 1);
    }","  public void test37()  throws Throwable  {
      LongRange.Descending longRange_Descending0 = new LongRange.Descending(1L, 0L);
      int int0 = longRange_Descending0.size();
}"
2837,"    public Object[] toArray() {
        final int size = size();
        final Object[] array = new Object[size];
        for (int a = 0; a < size; ++a) {
            array[a] = min + a;
        }
        return array;
    }","  public void test38()  throws Throwable  {
      LongRange.Ascending longRange_Ascending0 = new LongRange.Ascending(0L, 597L);
      Object[] objectArray0 = new Object[5];
      Object[] objectArray1 = longRange_Ascending0.toArray(objectArray0);
}"
2838,"    public int size() {
        return (int) (max - min + 1);
    }","  public void test39()  throws Throwable  {
      LongRange.Ascending longRange_Ascending0 = new LongRange.Ascending(0L, 597L);
      Object[] objectArray0 = new Object[5];
      Object[] objectArray1 = longRange_Ascending0.toArray(objectArray0);
}"
2839,"    public Object[] toArray() {
        final int size = size();
        final Object[] array = new Object[size];
        for (int a = 0; a < size; ++a) {
            array[a] = min + a;
        }
        return array;
    }","  public void test40()  throws Throwable  {
      LongRange longRange0 = LongRange.create(1L, (-2627L));
      LongRange.Ascending[] longRange_AscendingArray0 = new LongRange.Ascending[9];
      // Undeclared exception!
      try { 
        longRange0.toArray(longRange_AscendingArray0);
        fail(""Expecting exception: UnsupportedOperationException"");
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.internal.LongRange"", e);
      }
  }"
2840,"    public boolean containsAll(final Collection<?> c) {
        for (final Object cc : c) {
            if (!contains(cc)) {
                return false;
            }
        }
        return true;
    }","  public void test41()  throws Throwable  {
      LongRange longRange0 = LongRange.create((-442L), (-442L));
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      Float float0 = new Float((double) (-442L));
      linkedList0.addFirst(float0);
      boolean boolean0 = longRange0.containsAll(linkedList0);
}"
2841,"    public long getMax() {
        return max;
    }","  public void test42()  throws Throwable  {
      LongRange longRange0 = LongRange.create((-442L), (-442L));
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      Float float0 = new Float((double) (-442L));
      linkedList0.addFirst(float0);
      boolean boolean0 = longRange0.containsAll(linkedList0);
}"
2842,"    public boolean contains(final Object o) {
        if (o instanceof Number) {
            final long v = ((Number) o).longValue();
            return min <= v && v <= max;
        }
        return false;
    }","  public void test43()  throws Throwable  {
      LongRange.Descending longRange_Descending0 = new LongRange.Descending((-33L), (-33L));
      Byte byte0 = new Byte((byte)8);
      boolean boolean0 = longRange_Descending0.contains(byte0);
}"
2843,"    public int size() {
        return (int) (max - min + 1);
    }","  public void test44()  throws Throwable  {
      LongRange.Descending longRange_Descending0 = new LongRange.Descending((-33L), (-33L));
      Byte byte0 = new Byte((byte)8);
      boolean boolean0 = longRange_Descending0.contains(byte0);
}"
2844,"    public int size() {
        return (int) (max - min + 1);
    }","  public void test45()  throws Throwable  {
      LongRange.Descending longRange_Descending0 = new LongRange.Descending((-12L), (-5554L));
      LinkedList<LongRange.Ascending> linkedList0 = new LinkedList<LongRange.Ascending>();
      LongRange.Ascending longRange_Ascending0 = new LongRange.Ascending((-5554L), (-5554L));
      linkedList0.add(longRange_Ascending0);
      boolean boolean0 = longRange_Descending0.containsAll(linkedList0);
}"
2845,"    public boolean containsAll(final Collection<?> c) {
        for (final Object cc : c) {
            if (!contains(cc)) {
                return false;
            }
        }
        return true;
    }","  public void test46()  throws Throwable  {
      LongRange.Descending longRange_Descending0 = new LongRange.Descending((-12L), (-5554L));
      LinkedList<LongRange.Ascending> linkedList0 = new LinkedList<LongRange.Ascending>();
      LongRange.Ascending longRange_Ascending0 = new LongRange.Ascending((-5554L), (-5554L));
      linkedList0.add(longRange_Ascending0);
      boolean boolean0 = longRange_Descending0.containsAll(linkedList0);
}"
2846,"    public int size() {
        return (int) (max - min + 1);
    }","  public void test47()  throws Throwable  {
      LongRange.Descending longRange_Descending0 = new LongRange.Descending(0L, 0L);
      LongRange.Descending longRange_Descending1 = new LongRange.Descending(0L, (-17L));
      boolean boolean0 = longRange_Descending0.equals(longRange_Descending1);
}"
2847,"    public boolean equals(final Object obj) {
        if (obj == null) {
            return false;
        }
        if (getClass() != obj.getClass()) {
            return false;
        }
        final LongRange other = (LongRange) obj;
        if (this.min != other.min) {
            return false;
        }
        if (this.max != other.max) {
            return false;
        }
        return true;
    }","  public void test48()  throws Throwable  {
      LongRange.Descending longRange_Descending0 = new LongRange.Descending(0L, 0L);
      LongRange.Descending longRange_Descending1 = new LongRange.Descending(0L, (-17L));
      boolean boolean0 = longRange_Descending0.equals(longRange_Descending1);
}"
2848,"    public boolean equals(final Object obj) {
        if (obj == null) {
            return false;
        }
        if (getClass() != obj.getClass()) {
            return false;
        }
        final LongRange other = (LongRange) obj;
        if (this.min != other.min) {
            return false;
        }
        if (this.max != other.max) {
            return false;
        }
        return true;
    }","  public void test49()  throws Throwable  {
      LongRange.Descending longRange_Descending0 = new LongRange.Descending(0L, 0L);
      LongRange.Descending longRange_Descending1 = new LongRange.Descending(0L, (-17L));
      boolean boolean0 = longRange_Descending0.equals(longRange_Descending1);
}"
2849,"    public boolean equals(final Object obj) {
        if (obj == null) {
            return false;
        }
        if (getClass() != obj.getClass()) {
            return false;
        }
        final LongRange other = (LongRange) obj;
        if (this.min != other.min) {
            return false;
        }
        if (this.max != other.max) {
            return false;
        }
        return true;
    }","  public void test50()  throws Throwable  {
      LongRange.Descending longRange_Descending0 = new LongRange.Descending(29L, 264L);
      LongRange.Descending longRange_Descending1 = new LongRange.Descending(264L, 264L);
      boolean boolean0 = longRange_Descending0.equals(longRange_Descending1);
}"
2850,"    public boolean equals(final Object obj) {
        if (obj == null) {
            return false;
        }
        if (getClass() != obj.getClass()) {
            return false;
        }
        final LongRange other = (LongRange) obj;
        if (this.min != other.min) {
            return false;
        }
        if (this.max != other.max) {
            return false;
        }
        return true;
    }","  public void test51()  throws Throwable  {
      LongRange.Descending longRange_Descending0 = new LongRange.Descending(29L, 264L);
      LongRange.Descending longRange_Descending1 = new LongRange.Descending(264L, 264L);
      boolean boolean0 = longRange_Descending0.equals(longRange_Descending1);
}"
2851,"    public long getMax() {
        return max;
    }","  public void test52()  throws Throwable  {
      LongRange.Descending longRange_Descending0 = new LongRange.Descending(29L, 264L);
      LongRange.Descending longRange_Descending1 = new LongRange.Descending(264L, 264L);
      boolean boolean0 = longRange_Descending0.equals(longRange_Descending1);
}"
2852,"    public boolean equals(final Object obj) {
        if (obj == null) {
            return false;
        }
        if (getClass() != obj.getClass()) {
            return false;
        }
        final LongRange other = (LongRange) obj;
        if (this.min != other.min) {
            return false;
        }
        if (this.max != other.max) {
            return false;
        }
        return true;
    }","  public void test53()  throws Throwable  {
      LongRange.Descending longRange_Descending0 = new LongRange.Descending(4L, 4L);
      boolean boolean0 = longRange_Descending0.equals((Object) null);
}"
2853,"    public long getMax() {
        return max;
    }","  public void test54()  throws Throwable  {
      LongRange.Descending longRange_Descending0 = new LongRange.Descending(4L, 4L);
      boolean boolean0 = longRange_Descending0.equals((Object) null);
}"
2854,"    public boolean addAll(final Collection<? extends Long> c) {
        throw new UnsupportedOperationException();
    }","  public void test55()  throws Throwable  {
      LongRange longRange0 = LongRange.create(1L, (-584L));
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      // Undeclared exception!
      try { 
        longRange0.addAll(linkedList0);
        fail(""Expecting exception: UnsupportedOperationException"");
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.internal.LongRange"", e);
      }
  }"
2855,"    public boolean isEmpty() {
        return false;
    }","  public void test56()  throws Throwable  {
      LongRange.Descending longRange_Descending0 = new LongRange.Descending((-33L), (-33L));
      boolean boolean0 = longRange_Descending0.isEmpty();
}"
2856,"    public long getMax() {
        return max;
    }","  public void test57()  throws Throwable  {
      LongRange.Descending longRange_Descending0 = new LongRange.Descending((-33L), (-33L));
      boolean boolean0 = longRange_Descending0.isEmpty();
}"
2857,"    public int size() {
        return (int) (max - min + 1);
    }","  public void test58()  throws Throwable  {
      LongRange longRange0 = LongRange.create(1L, (-584L));
      long long0 = longRange0.getMin();
}"
2858,"    public long getMin() {
        return min;
    }","  public void test59()  throws Throwable  {
      LongRange longRange0 = LongRange.create(1L, (-584L));
      long long0 = longRange0.getMin();
}"
2859,"    public boolean equals(final Object obj) {
        if (obj == null) {
            return false;
        }
        if (getClass() != obj.getClass()) {
            return false;
        }
        final LongRange other = (LongRange) obj;
        if (this.min != other.min) {
            return false;
        }
        if (this.max != other.max) {
            return false;
        }
        return true;
    }","  public void test60()  throws Throwable  {
      LongRange.Ascending longRange_Ascending0 = new LongRange.Ascending((-11L), (-11L));
      Object[] objectArray0 = new Object[2];
      Object[] objectArray1 = longRange_Ascending0.toArray(objectArray0);
      boolean boolean0 = longRange_Ascending0.equals(objectArray0[0]);
}"
2860,"    public int size() {
        return (int) (max - min + 1);
    }","  public void test61()  throws Throwable  {
      LongRange.Ascending longRange_Ascending0 = new LongRange.Ascending((-11L), (-11L));
      Object[] objectArray0 = new Object[2];
      Object[] objectArray1 = longRange_Ascending0.toArray(objectArray0);
      boolean boolean0 = longRange_Ascending0.equals(objectArray0[0]);
}"
2861,"    public boolean equals(final Object obj) {
        if (obj == null) {
            return false;
        }
        if (getClass() != obj.getClass()) {
            return false;
        }
        final LongRange other = (LongRange) obj;
        if (this.min != other.min) {
            return false;
        }
        if (this.max != other.max) {
            return false;
        }
        return true;
    }","  public void test62()  throws Throwable  {
      LongRange.Ascending longRange_Ascending0 = new LongRange.Ascending((-11L), (-11L));
      Object[] objectArray0 = new Object[2];
      Object[] objectArray1 = longRange_Ascending0.toArray(objectArray0);
      boolean boolean0 = longRange_Ascending0.equals(objectArray0[0]);
}"
2862,"    public int size() {
        return (int) (max - min + 1);
    }","  public void test63()  throws Throwable  {
      LongRange.Ascending longRange_Ascending0 = new LongRange.Ascending((-11L), (-11L));
      long long0 = longRange_Ascending0.getMax();
}"
2863,"    public long getMax() {
        return max;
    }","  public void test64()  throws Throwable  {
      LongRange.Ascending longRange_Ascending0 = new LongRange.Ascending((-11L), (-11L));
      long long0 = longRange_Ascending0.getMax();
}"
2864,"    public boolean remove(final Object o) {
        throw new UnsupportedOperationException();
    }","  public void test65()  throws Throwable  {
      LongRange longRange0 = LongRange.create((-2979L), (-442L));
      Short short0 = new Short((short)1289);
      // Undeclared exception!
      try { 
        longRange0.remove(short0);
        fail(""Expecting exception: UnsupportedOperationException"");
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.internal.LongRange"", e);
      }
  }"
2865,"    public void clear() {
        throw new UnsupportedOperationException();
    }","  public void test66()  throws Throwable  {
      LongRange.Descending longRange_Descending0 = new LongRange.Descending((-12L), (-5554L));
      // Undeclared exception!
      try { 
        longRange_Descending0.clear();
        fail(""Expecting exception: UnsupportedOperationException"");
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.internal.LongRange"", e);
      }
  }"
2866,"    public boolean removeAll(final Collection<?> c) {
        throw new UnsupportedOperationException();
    }","  public void test67()  throws Throwable  {
      LongRange.Ascending longRange_Ascending0 = new LongRange.Ascending(1119L, 0L);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      // Undeclared exception!
      try { 
        longRange_Ascending0.removeAll(linkedList0);
        fail(""Expecting exception: UnsupportedOperationException"");
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.internal.LongRange"", e);
      }
  }"
2867,"    public boolean add(final Long e) {
        throw new UnsupportedOperationException();
    }","  public void test68()  throws Throwable  {
      LongRange.Descending longRange_Descending0 = new LongRange.Descending(0L, 0L);
      Long long0 = new Long(0L);
      // Undeclared exception!
      try { 
        longRange_Descending0.add(long0);
        fail(""Expecting exception: UnsupportedOperationException"");
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.internal.LongRange"", e);
      }
  }"
2868,"    public int size() {
        return (int) (max - min + 1);
    }","  public void test69()  throws Throwable  {
      LongRange longRange0 = LongRange.create(1L, (-584L));
      longRange0.iterator();
}"
2869,"    public boolean retainAll(final Collection<?> c) {
        throw new UnsupportedOperationException();
    }","  public void test70()  throws Throwable  {
      LongRange longRange0 = LongRange.create((-1209L), 2632L);
      LinkedList<LongRange.Ascending> linkedList0 = new LinkedList<LongRange.Ascending>();
      // Undeclared exception!
      try { 
        longRange0.retainAll(linkedList0);
        fail(""Expecting exception: UnsupportedOperationException"");
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.internal.LongRange"", e);
      }
  }"
2870,"    public SetBuilder(final int size) {
        set = new HashSet<Object>(size);
    }","  public void test0()  throws Throwable  {
      SetBuilder setBuilder0 = null;
      try {
        setBuilder0 = new SetBuilder((-3741));
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Illegal initial capacity: -3741
         //
         verifyException(""java.util.HashMap"", e);
      }
  }"
2871,"    public void add(final Object value) {
        set.add(value);
    }","  public void test1()  throws Throwable  {
      SetBuilder setBuilder0 = new SetBuilder(0);
      Object object0 = setBuilder0.create();
      setBuilder0.add(object0);
      // Undeclared exception!
      try { 
        setBuilder0.add(object0);
        fail(""Expecting exception: StackOverflowError"");
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
2872,"    public String toString() {
        final StringBuilder strb = new StringBuilder();
        for (final Block block : source) {
            block.toString(strb, prefix);
        }
        return strb.toString();
    }","  public void test0()  throws Throwable  {
      Engine engine0 = new Engine();
      TemplateEngine templateEngine0 = engine0.jxlt();
      JexlInfo jexlInfo0 = new JexlInfo(""gt#"", 1288, (-97));
      StringReader stringReader0 = new StringReader(""gt#"");
      TemplateScript templateScript0 = templateEngine0.createTemplate(jexlInfo0, ""gt#"", (Reader) stringReader0, (String[]) null);
      String string0 = templateScript0.toString();
}"
2873,"    public Set<List<String>> getVariables() {
        final Engine.VarCollector collector = jxlt.getEngine().varCollector();
        for (final TemplateExpression expr : exprs) {
            expr.getVariables(collector);
        }
        return collector.collected();
    }","  public void test1()  throws Throwable  {
      Engine engine0 = new Engine();
      TemplateEngine templateEngine0 = engine0.createJxltEngine(false, 2564, 'w', 'w');
      TemplateEngine.Block[] templateEngine_BlockArray0 = new TemplateEngine.Block[6];
      Parser parser0 = new Parser(""Ambiguous"");
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[1];
      Scope scope1 = new Scope(scope0, stringArray0);
      ASTJexlScript aSTJexlScript0 = parser0.JexlExpression(scope1);
      TemplateEngine.TemplateExpression[] templateEngine_TemplateExpressionArray0 = new TemplateEngine.TemplateExpression[1];
      TemplateEngine.NestedExpression templateEngine_NestedExpression0 = templateEngine0.new NestedExpression(""i8+{y!K:/RCW][k}/y"", aSTJexlScript0, (TemplateEngine.TemplateExpression) null);
      templateEngine_TemplateExpressionArray0[0] = (TemplateEngine.TemplateExpression) templateEngine_NestedExpression0;
      TemplateScript templateScript0 = new TemplateScript(templateEngine0, ""Ambiguous"", templateEngine_BlockArray0, aSTJexlScript0, templateEngine_TemplateExpressionArray0);
      Set<List<String>> set0 = templateScript0.getVariables();
}"
2874,"    ASTJexlScript getScript() {
        return script;
    }","  public void test2()  throws Throwable  {
      TemplateEngine.Block[] templateEngine_BlockArray0 = new TemplateEngine.Block[1];
      TemplateEngine.TemplateExpression[] templateEngine_TemplateExpressionArray0 = new TemplateEngine.TemplateExpression[0];
      TemplateScript templateScript0 = new TemplateScript((TemplateEngine) null, ""{"", templateEngine_BlockArray0, (ASTJexlScript) null, templateEngine_TemplateExpressionArray0);
      ASTJexlScript aSTJexlScript0 = templateScript0.getScript();
}"
2875,"    ASTJexlScript getScript() {
        return script;
    }","  public void test3()  throws Throwable  {
      TemplateEngine.Block[] templateEngine_BlockArray0 = new TemplateEngine.Block[0];
      Parser parser0 = new Parser(""TRACE"");
      ASTJexlScript aSTJexlScript0 = parser0.JexlScript((Scope) null);
      TemplateEngine.TemplateExpression[] templateEngine_TemplateExpressionArray0 = new TemplateEngine.TemplateExpression[0];
      TemplateScript templateScript0 = new TemplateScript((TemplateEngine) null, ""TRACE"", templateEngine_BlockArray0, aSTJexlScript0, templateEngine_TemplateExpressionArray0);
      ASTJexlScript aSTJexlScript1 = templateScript0.getScript();
}"
2876,"    ASTJexlScript getScript() {
        return script;
    }","  public void test4()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      TemplateEngine templateEngine0 = engine0.jxlt();
      TemplateEngine.Block[] templateEngine_BlockArray0 = new TemplateEngine.Block[3];
      ASTJexlScript aSTJexlScript0 = new ASTJexlScript(443);
      TemplateScript templateScript0 = new TemplateScript(templateEngine0, "";S3n&Y:9qs=("", templateEngine_BlockArray0, aSTJexlScript0, (TemplateEngine.TemplateExpression[]) null);
      ASTJexlScript aSTJexlScript1 = templateScript0.getScript();
}"
2877,"    ASTJexlScript getScript() {
        return script;
    }","  public void test5()  throws Throwable  {
      Engine engine0 = new Engine();
      TemplateEngine templateEngine0 = engine0.createJxltEngine(true, (-55675502), '0', '`');
      TemplateEngine.Block[] templateEngine_BlockArray0 = new TemplateEngine.Block[5];
      ASTJexlScript aSTJexlScript0 = new ASTJexlScript((-787));
      TemplateEngine.TemplateExpression[] templateEngine_TemplateExpressionArray0 = new TemplateEngine.TemplateExpression[0];
      TemplateScript templateScript0 = new TemplateScript(templateEngine0, ""XRCE[fE}8m?xN"", templateEngine_BlockArray0, aSTJexlScript0, templateEngine_TemplateExpressionArray0);
      ASTJexlScript aSTJexlScript1 = templateScript0.getScript();
}"
2878,"    ASTJexlScript getScript() {
        return script;
    }","  public void test6()  throws Throwable  {
      Engine engine0 = new Engine();
      TemplateEngine templateEngine0 = new TemplateEngine(engine0, false, 0, '(', '(');
      JexlInfo jexlInfo0 = engine0.createInfo();
      StringReader stringReader0 = new StringReader(""[pzg14Q)Y"");
      String[] stringArray0 = new String[7];
      TemplateScript templateScript0 = templateEngine0.createTemplate(jexlInfo0, ""[pzg14Q)Y"", (Reader) stringReader0, stringArray0);
      ASTJexlScript aSTJexlScript0 = templateScript0.getScript();
}"
2879,"    ASTJexlScript getScript() {
        return script;
    }","  public void test7()  throws Throwable  {
      Engine engine0 = new Engine();
      TemplateEngine templateEngine0 = engine0.jxlt();
      JexlInfo jexlInfo0 = new JexlInfo();
      JexlNode.Info jexlNode_Info0 = new JexlNode.Info((JexlNode) null, jexlInfo0);
      StringReader stringReader0 = new StringReader(""c~Hi$a.!_-}N9EC[9|"");
      String[] stringArray0 = new String[2];
      TemplateScript templateScript0 = new TemplateScript(templateEngine0, jexlNode_Info0, ""qK((Ixe%o8.)"", stringReader0, stringArray0);
      ASTJexlScript aSTJexlScript0 = templateScript0.getScript();
}"
2880,"    public Map<String, Object> getPragmas() {
        return script.getPragmas();
    }","  public void test8()  throws Throwable  {
      Engine engine0 = new Engine();
      TemplateEngine templateEngine0 = new TemplateEngine(engine0, true, (-2887), '=', '=');
      TemplateEngine.Block[] templateEngine_BlockArray0 = new TemplateEngine.Block[4];
      StringProvider stringProvider0 = new StringProvider("""");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringProvider0, 0, 0, 1);
      ParserTokenManager parserTokenManager0 = new ParserTokenManager(simpleCharStream0);
      Parser parser0 = new Parser(parserTokenManager0);
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      Scope scope1 = new Scope(scope0, parserTokenManager0.jjstrLiteralImages);
      ASTJexlScript aSTJexlScript0 = parser0.JexlExpression(scope1);
      TemplateScript templateScript0 = new TemplateScript(templateEngine0, ""N"", templateEngine_BlockArray0, aSTJexlScript0, (TemplateEngine.TemplateExpression[]) null);
      Map<String, Object> map0 = templateScript0.getPragmas();
}"
2881,"    public String toString() {
        final StringBuilder strb = new StringBuilder();
        for (final Block block : source) {
            block.toString(strb, prefix);
        }
        return strb.toString();
    }","  public void test9()  throws Throwable  {
      Engine engine0 = new Engine();
      JexlInfo jexlInfo0 = engine0.createInfo(""N"", 1989, 1989);
      TemplateEngine templateEngine0 = engine0.createJxltEngine(false, 2564, 'w', 'w');
      TemplateEngine.Block[] templateEngine_BlockArray0 = new TemplateEngine.Block[6];
      Parser parser0 = new Parser(""Ambiguous"");
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[1];
      Scope scope1 = new Scope(scope0, stringArray0);
      TemplateEngine.TemplateExpression[] templateEngine_TemplateExpressionArray0 = new TemplateEngine.TemplateExpression[1];
      StringReader stringReader0 = new StringReader(""Ambiguous"");
      String[] stringArray1 = new String[4];
      JexlOptions jexlOptions0 = new JexlOptions();
      Frame frame0 = new Frame(scope1, stringArray1, (-1727573867));
      Interpreter interpreter0 = new Interpreter(engine0, jexlOptions0, engine0.EMPTY_CONTEXT, frame0);
      ASTJexlLambda aSTJexlLambda0 = mock(ASTJexlLambda.class, new ViolatedAssumptionAnswer());
      doReturn((Frame) null).when(aSTJexlLambda0).createFrame(any(org.apache.commons.jexl3.internal.Frame.class) , any(java.lang.Object[].class));
      doReturn((Map) null).when(aSTJexlLambda0).getPragmas();
      Closure closure0 = new Closure(interpreter0, aSTJexlLambda0);
      ASTJexlScript aSTJexlScript0 = closure0.script;
      TemplateScript templateScript0 = new TemplateScript(templateEngine0, ""gRK7o"", templateEngine_BlockArray0, aSTJexlScript0, templateEngine_TemplateExpressionArray0);
      templateScript0.getPragmas();
      stringArray1[0] = ""N"";
      stringArray1[1] = ""N"";
      stringArray1[2] = ""Ambiguous"";
      stringArray1[3] = ""N"";
      TemplateScript templateScript1 = templateEngine0.createTemplate(jexlInfo0, ""N"", (Reader) stringReader0, stringArray1);
      String string0 = templateScript1.toString();
}"
2882,"    public String[] getParameters() {
        return script.getParameters();
    }","  public void test10()  throws Throwable  {
      Engine engine0 = new Engine();
      TemplateEngine templateEngine0 = engine0.jxlt();
      JexlInfo jexlInfo0 = new JexlInfo();
      StringReader stringReader0 = new StringReader(""vR"");
      String[] stringArray0 = new String[5];
      TemplateScript templateScript0 = templateEngine0.createTemplate(jexlInfo0, ""Ce[3oiHs=B"", (Reader) stringReader0, stringArray0);
      String[] stringArray1 = templateScript0.getParameters();
}"
2883,"    public String[] getParameters() {
        return script.getParameters();
    }","  public void test11()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      TemplateEngine templateEngine0 = engine0.jxlt();
      StringReader stringReader0 = new StringReader("""");
      String[] stringArray0 = new String[0];
      TemplateScript templateScript0 = new TemplateScript(templateEngine0, (JexlInfo) null, """", stringReader0, stringArray0);
      String[] stringArray1 = templateScript0.getParameters();
}"
2884,"    TemplateExpression[] getExpressions() {
        return exprs;
    }","  public void test12()  throws Throwable  {
      TemplateEngine.Block[] templateEngine_BlockArray0 = new TemplateEngine.Block[3];
      ASTJexlScript aSTJexlScript0 = new ASTJexlScript((-2555));
      TemplateScript templateScript0 = new TemplateScript((TemplateEngine) null, ""o"", templateEngine_BlockArray0, aSTJexlScript0, (TemplateEngine.TemplateExpression[]) null);
      TemplateEngine.TemplateExpression[] templateEngine_TemplateExpressionArray0 = templateScript0.getExpressions();
}"
2885,"    TemplateExpression[] getExpressions() {
        return exprs;
    }","  public void test13()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      TemplateEngine templateEngine0 = new TemplateEngine(engine0, false, (-1534), 'X', '=');
      JexlInfo jexlInfo0 = new JexlInfo(""L`v8QERkMY"", (-1534), 0);
      StringReader stringReader0 = new StringReader("""");
      String[] stringArray0 = new String[6];
      TemplateScript templateScript0 = new TemplateScript(templateEngine0, jexlInfo0, ""L`v8QERkMY"", stringReader0, stringArray0);
      TemplateEngine.TemplateExpression[] templateEngine_TemplateExpressionArray0 = templateScript0.getExpressions();
}"
2886,"    public String asString() {
        final StringBuilder strb = new StringBuilder();
        int e = 0;
        for (final Block block : source) {
            if (block.getType() == BlockType.DIRECTIVE) {
                strb.append(prefix);
                strb.append(block.getBody());
            } else {
                exprs[e++].asString(strb);
            }
        }
        return strb.toString();
    }","  public void test14()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      TemplateEngine templateEngine0 = new TemplateEngine(engine0, false, (-1534), 'X', '=');
      JexlInfo jexlInfo0 = new JexlInfo(""L`v8QERkMY"", (-1534), 0);
      StringReader stringReader0 = new StringReader("""");
      String[] stringArray0 = new String[6];
      TemplateScript templateScript0 = new TemplateScript(templateEngine0, jexlInfo0, ""L`v8QERkMY"", stringReader0, stringArray0);
      String string0 = templateScript0.asString();
}"
2887,"    public String toString() {
        final StringBuilder strb = new StringBuilder();
        for (final Block block : source) {
            block.toString(strb, prefix);
        }
        return strb.toString();
    }","  public void test15()  throws Throwable  {
      TemplateEngine.Block[] templateEngine_BlockArray0 = new TemplateEngine.Block[4];
      Parser parser0 = new Parser("""");
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      Scope scope1 = new Scope(scope0, (String[]) null);
      ASTJexlScript aSTJexlScript0 = parser0.JexlExpression(scope1);
      TemplateEngine.TemplateExpression[] templateEngine_TemplateExpressionArray0 = new TemplateEngine.TemplateExpression[0];
      TemplateScript templateScript0 = new TemplateScript((TemplateEngine) null, (String) null, templateEngine_BlockArray0, aSTJexlScript0, templateEngine_TemplateExpressionArray0);
      // Undeclared exception!
      try { 
        templateScript0.toString();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.internal.TemplateScript"", e);
      }
  }"
2888,"    public TemplateScript prepare(final JexlContext context) {
        final Engine jexl = jxlt.getEngine();
        final JexlOptions options = jexl.options(script, context);
        final Frame frame = script.createFrame((Object[]) null);
        final TemplateInterpreter.Arguments targs = new TemplateInterpreter
                .Arguments(jxlt.getEngine())
                .context(context)
                .options(options)
                .frame(frame);
        final Interpreter interpreter = new TemplateInterpreter(targs);
        final TemplateExpression[] immediates = new TemplateExpression[exprs.length];
        for (int e = 0; e < exprs.length; ++e) {
            try {
                immediates[e] = exprs[e].prepare(interpreter);
            } catch (final JexlException xjexl) {
                final JexlException xuel = TemplateEngine.createException(xjexl.getInfo(), ""prepare"", exprs[e], xjexl);
                if (jexl.isSilent()) {
                    jexl.logger.warn(xuel.getMessage(), xuel.getCause());
                    return null;
                }
                throw xuel;
            }
        }
        return new TemplateScript(jxlt, prefix, source, script, immediates);
    }","  public void test16()  throws Throwable  {
      Engine engine0 = new Engine();
      TemplateEngine.Block[] templateEngine_BlockArray0 = new TemplateEngine.Block[1];
      Parser parser0 = new Parser(""jexl:print("");
      ASTJexlScript aSTJexlScript0 = new ASTJexlScript(parser0, 689);
      TemplateEngine.TemplateExpression[] templateEngine_TemplateExpressionArray0 = new TemplateEngine.TemplateExpression[0];
      TemplateScript templateScript0 = new TemplateScript((TemplateEngine) null, ""prepare"", templateEngine_BlockArray0, aSTJexlScript0, templateEngine_TemplateExpressionArray0);
      // Undeclared exception!
      try { 
        templateScript0.prepare(engine0.EMPTY_CONTEXT);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.internal.TemplateScript"", e);
      }
  }"
2889,"    public TemplateScript prepare(final JexlContext context) {
        final Engine jexl = jxlt.getEngine();
        final JexlOptions options = jexl.options(script, context);
        final Frame frame = script.createFrame((Object[]) null);
        final TemplateInterpreter.Arguments targs = new TemplateInterpreter
                .Arguments(jxlt.getEngine())
                .context(context)
                .options(options)
                .frame(frame);
        final Interpreter interpreter = new TemplateInterpreter(targs);
        final TemplateExpression[] immediates = new TemplateExpression[exprs.length];
        for (int e = 0; e < exprs.length; ++e) {
            try {
                immediates[e] = exprs[e].prepare(interpreter);
            } catch (final JexlException xjexl) {
                final JexlException xuel = TemplateEngine.createException(xjexl.getInfo(), ""prepare"", exprs[e], xjexl);
                if (jexl.isSilent()) {
                    jexl.logger.warn(xuel.getMessage(), xuel.getCause());
                    return null;
                }
                throw xuel;
            }
        }
        return new TemplateScript(jxlt, prefix, source, script, immediates);
    }","  public void test17()  throws Throwable  {
      Engine engine0 = new Engine();
      TemplateEngine templateEngine0 = engine0.createJxltEngine(false, (-803), '!', '#');
      ASTDivNode aSTDivNode0 = new ASTDivNode((-750));
      JexlInfo jexlInfo0 = new JexlInfo();
      JexlNode.Info jexlNode_Info0 = new JexlNode.Info(aSTDivNode0, jexlInfo0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = ""|{"";
      Scope scope0 = new Scope((Scope) null, stringArray0);
      ASTJexlScript aSTJexlScript0 = engine0.parse(jexlNode_Info0, engine0.DEFAULT_FEATURES, ""DEFERRED1"", scope0);
      TemplateEngine.TemplateExpression[] templateEngine_TemplateExpressionArray0 = new TemplateEngine.TemplateExpression[4];
      TemplateEngine.DeferredExpression templateEngine_DeferredExpression0 = templateEngine0.new DeferredExpression(""|{"", aSTDivNode0, (TemplateEngine.TemplateExpression) null);
      templateEngine_TemplateExpressionArray0[0] = (TemplateEngine.TemplateExpression) templateEngine_DeferredExpression0;
      templateEngine_TemplateExpressionArray0[1] = (TemplateEngine.TemplateExpression) templateEngine_DeferredExpression0;
      TemplateEngine.ImmediateExpression templateEngine_ImmediateExpression0 = templateEngine0.new ImmediateExpression(""DEFERRED1"", aSTDivNode0, templateEngine_DeferredExpression0);
      templateEngine_TemplateExpressionArray0[2] = (TemplateEngine.TemplateExpression) templateEngine_ImmediateExpression0;
      TemplateScript templateScript0 = new TemplateScript(templateEngine0, ""DEFERRED1"", (TemplateEngine.Block[]) null, aSTJexlScript0, templateEngine_TemplateExpressionArray0);
      // Undeclared exception!
      try { 
        templateScript0.prepare(engine0.EMPTY_CONTEXT);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
2890,"    public TemplateScript prepare(final JexlContext context) {
        final Engine jexl = jxlt.getEngine();
        final JexlOptions options = jexl.options(script, context);
        final Frame frame = script.createFrame((Object[]) null);
        final TemplateInterpreter.Arguments targs = new TemplateInterpreter
                .Arguments(jxlt.getEngine())
                .context(context)
                .options(options)
                .frame(frame);
        final Interpreter interpreter = new TemplateInterpreter(targs);
        final TemplateExpression[] immediates = new TemplateExpression[exprs.length];
        for (int e = 0; e < exprs.length; ++e) {
            try {
                immediates[e] = exprs[e].prepare(interpreter);
            } catch (final JexlException xjexl) {
                final JexlException xuel = TemplateEngine.createException(xjexl.getInfo(), ""prepare"", exprs[e], xjexl);
                if (jexl.isSilent()) {
                    jexl.logger.warn(xuel.getMessage(), xuel.getCause());
                    return null;
                }
                throw xuel;
            }
        }
        return new TemplateScript(jxlt, prefix, source, script, immediates);
    }","  public void test18()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      TemplateEngine templateEngine0 = engine0.jxlt();
      StringReader stringReader0 = new StringReader(""ERNode"");
      String[] stringArray0 = new String[7];
      TemplateScript templateScript0 = templateEngine0.createTemplate((JexlInfo) null, ""s9|`\""V+K"", (Reader) stringReader0, stringArray0);
      // Undeclared exception!
      try { 
        templateScript0.prepare(engine0.EMPTY_CONTEXT);
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 7
         //
         verifyException(""java.util.Arrays"", e);
      }
  }"
2891,"    public Set<List<String>> getVariables() {
        final Engine.VarCollector collector = jxlt.getEngine().varCollector();
        for (final TemplateExpression expr : exprs) {
            expr.getVariables(collector);
        }
        return collector.collected();
    }","  public void test19()  throws Throwable  {
      Engine engine0 = new Engine();
      TemplateEngine templateEngine0 = engine0.jxlt();
      TemplateEngine.Block[] templateEngine_BlockArray0 = new TemplateEngine.Block[0];
      TemplateScript templateScript0 = new TemplateScript(templateEngine0, ""//\n"", templateEngine_BlockArray0, (ASTJexlScript) null, (TemplateEngine.TemplateExpression[]) null);
      // Undeclared exception!
      try { 
        templateScript0.getVariables();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.internal.TemplateScript"", e);
      }
  }"
2892,"    public Map<String, Object> getPragmas() {
        return script.getPragmas();
    }","  public void test20()  throws Throwable  {
      TemplateEngine.Block[] templateEngine_BlockArray0 = new TemplateEngine.Block[1];
      TemplateEngine.TemplateExpression[] templateEngine_TemplateExpressionArray0 = new TemplateEngine.TemplateExpression[0];
      TemplateScript templateScript0 = new TemplateScript((TemplateEngine) null, ""SW"", templateEngine_BlockArray0, (ASTJexlScript) null, templateEngine_TemplateExpressionArray0);
      // Undeclared exception!
      try { 
        templateScript0.getPragmas();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.internal.TemplateScript"", e);
      }
  }"
2893,"    public String[] getParameters() {
        return script.getParameters();
    }","  public void test21()  throws Throwable  {
      TemplateEngine.Block[] templateEngine_BlockArray0 = new TemplateEngine.Block[1];
      TemplateEngine.TemplateExpression[] templateEngine_TemplateExpressionArray0 = new TemplateEngine.TemplateExpression[0];
      TemplateScript templateScript0 = new TemplateScript((TemplateEngine) null, ""SW"", templateEngine_BlockArray0, (ASTJexlScript) null, templateEngine_TemplateExpressionArray0);
      // Undeclared exception!
      try { 
        templateScript0.getParameters();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.internal.TemplateScript"", e);
      }
  }"
2894,"    public void evaluate(final JexlContext context, final Writer writer) {
        evaluate(context, writer, (Object[]) null);
    }","  public void test22()  throws Throwable  {
      Engine engine0 = new Engine();
      TemplateEngine templateEngine0 = engine0.jxlt();
      StringReader stringReader0 = new StringReader(""t"");
      String[] stringArray0 = new String[0];
      TemplateScript templateScript0 = new TemplateScript(templateEngine0, (JexlInfo) null, """", stringReader0, stringArray0);
      Object[] objectArray0 = new Object[3];
      // Undeclared exception!
      try { 
        templateScript0.evaluate(engine0.EMPTY_CONTEXT, (Writer) null, objectArray0);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
      }
  }"
2895,"    public void evaluate(final JexlContext context, final Writer writer) {
        evaluate(context, writer, (Object[]) null);
    }","  public void test23()  throws Throwable  {
      TemplateEngine.Block[] templateEngine_BlockArray0 = new TemplateEngine.Block[9];
      Parser parser0 = new Parser(""TRACE"");
      ASTJexlScript aSTJexlScript0 = parser0.JexlScript((Scope) null);
      TemplateEngine.TemplateExpression[] templateEngine_TemplateExpressionArray0 = new TemplateEngine.TemplateExpression[0];
      TemplateScript templateScript0 = new TemplateScript((TemplateEngine) null, ""TRACE"", templateEngine_BlockArray0, aSTJexlScript0, templateEngine_TemplateExpressionArray0);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      MapContext mapContext0 = new MapContext(hashMap0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(""|se6"");
      // Undeclared exception!
      try { 
        templateScript0.evaluate((JexlContext) mapContext0, (Writer) mockPrintWriter0, (Object[]) templateEngine_TemplateExpressionArray0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.internal.TemplateScript"", e);
      }
  }"
2896,"    public void evaluate(final JexlContext context, final Writer writer) {
        evaluate(context, writer, (Object[]) null);
    }","  public void test24()  throws Throwable  {
      Engine engine0 = new Engine();
      TemplateEngine templateEngine0 = new TemplateEngine(engine0, true, 90, '~', '\""');
      JexlInfo jexlInfo0 = new JexlInfo();
      StringReader stringReader0 = new StringReader("";"");
      String[] stringArray0 = new String[3];
      StringWriter stringWriter0 = new StringWriter();
      TemplateScript templateScript0 = new TemplateScript(templateEngine0, jexlInfo0, ""ud"", stringReader0, stringArray0);
      // Undeclared exception!
      try { 
        templateScript0.evaluate(engine0.EMPTY_CONTEXT, (Writer) stringWriter0, (Object[]) stringArray0);
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }"
2897,"    public void evaluate(final JexlContext context, final Writer writer) {
        evaluate(context, writer, (Object[]) null);
    }","  public void test25()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      TemplateEngine.Block[] templateEngine_BlockArray0 = new TemplateEngine.Block[1];
      ASTJexlScript aSTJexlScript0 = new ASTJexlScript(0);
      TemplateEngine.TemplateExpression[] templateEngine_TemplateExpressionArray0 = new TemplateEngine.TemplateExpression[0];
      TemplateScript templateScript0 = new TemplateScript((TemplateEngine) null, ""D&-(]#OZvc}"", templateEngine_BlockArray0, aSTJexlScript0, templateEngine_TemplateExpressionArray0);
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      // Undeclared exception!
      try { 
        templateScript0.evaluate(engine0.EMPTY_CONTEXT, (Writer) mockPrintWriter0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.internal.TemplateScript"", e);
      }
  }"
2898,"    public void evaluate(final JexlContext context, final Writer writer) {
        evaluate(context, writer, (Object[]) null);
    }","  public void test26()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      TemplateEngine templateEngine0 = new TemplateEngine(engine0, false, (-848), '+', '+');
      StringReader stringReader0 = new StringReader(""org.apache.commons.jexl3.internal.TemplateEngine$Block"");
      String[] stringArray0 = new String[8];
      TemplateScript templateScript0 = templateEngine0.createTemplate((JexlInfo) null, ""org.apache.commons.jexl3.internal.TemplateEngine$Block"", (Reader) stringReader0, stringArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(""org.apache.commons.jexl3.internal.TemplateEngine$Block"");
      // Undeclared exception!
      try { 
        templateScript0.evaluate(engine0.EMPTY_CONTEXT, (Writer) mockPrintWriter0);
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 8
         //
         verifyException(""java.util.Arrays"", e);
      }
  }"
2899,"    public String asString() {
        final StringBuilder strb = new StringBuilder();
        int e = 0;
        for (final Block block : source) {
            if (block.getType() == BlockType.DIRECTIVE) {
                strb.append(prefix);
                strb.append(block.getBody());
            } else {
                exprs[e++].asString(strb);
            }
        }
        return strb.toString();
    }","  public void test27()  throws Throwable  {
      Engine engine0 = new Engine();
      TemplateEngine templateEngine0 = new TemplateEngine(engine0, true, (-2887), '=', '=');
      TemplateEngine.Block[] templateEngine_BlockArray0 = new TemplateEngine.Block[4];
      StringProvider stringProvider0 = new StringProvider("""");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringProvider0, 0, 0, 1);
      ParserTokenManager parserTokenManager0 = new ParserTokenManager(simpleCharStream0);
      Parser parser0 = new Parser(parserTokenManager0);
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      Scope scope1 = new Scope(scope0, parserTokenManager0.jjstrLiteralImages);
      ASTJexlScript aSTJexlScript0 = parser0.JexlExpression(scope1);
      TemplateScript templateScript0 = new TemplateScript(templateEngine0, ""N"", templateEngine_BlockArray0, aSTJexlScript0, (TemplateEngine.TemplateExpression[]) null);
      // Undeclared exception!
      try { 
        templateScript0.asString();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.internal.TemplateScript"", e);
      }
  }"
2900,"    public String asString() {
        final StringBuilder strb = new StringBuilder();
        int e = 0;
        for (final Block block : source) {
            if (block.getType() == BlockType.DIRECTIVE) {
                strb.append(prefix);
                strb.append(block.getBody());
            } else {
                exprs[e++].asString(strb);
            }
        }
        return strb.toString();
    }","  public void test28()  throws Throwable  {
      TemplateEngine.Block[] templateEngine_BlockArray0 = new TemplateEngine.Block[1];
      TemplateEngine.BlockType templateEngine_BlockType0 = TemplateEngine.BlockType.VERBATIM;
      TemplateEngine.Block templateEngine_Block0 = new TemplateEngine.Block(templateEngine_BlockType0, (-1286), ""d[-:=}wQ:#@"");
      templateEngine_BlockArray0[0] = templateEngine_Block0;
      TemplateEngine.TemplateExpression[] templateEngine_TemplateExpressionArray0 = new TemplateEngine.TemplateExpression[0];
      TemplateScript templateScript0 = new TemplateScript((TemplateEngine) null, ""SW"", templateEngine_BlockArray0, (ASTJexlScript) null, templateEngine_TemplateExpressionArray0);
      // Undeclared exception!
      try { 
        templateScript0.asString();
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException(""org.apache.commons.jexl3.internal.TemplateScript"", e);
      }
  }"
2901,"    public TemplateScript(final TemplateEngine engine,
                          JexlInfo info,
                          final String directive,
                          final Reader reader,
                          final String... parms) {
        if (directive == null) {
            throw new NullPointerException(""null prefix"");
        }
        final String engineImmediateCharString = Character.toString(engine.getImmediateChar());
        final String engineDeferredCharString = Character.toString(engine.getDeferredChar());

        if (engineImmediateCharString.equals(directive)
                || engineDeferredCharString.equals(directive)
                || (engineImmediateCharString + ""{"").equals(directive)
                || (engineDeferredCharString + ""{"").equals(directive)) {
            throw new IllegalArgumentException(directive + "": is not a valid directive pattern"");
        }
        if (reader == null) {
            throw new NullPointerException(""null input"");
        }
        this.jxlt = engine;
        this.prefix = directive;
        final List<Block> blocks = jxlt.readTemplate(prefix, reader);
        final List<TemplateExpression> uexprs = new ArrayList<>();
        final StringBuilder strb = new StringBuilder();
        int nuexpr = 0;
        int codeStart = -1;
        int line = 1;
        for (int b = 0; b < blocks.size(); ++b) {
            final Block block = blocks.get(b);
            final int bl = block.getLine();
            while(line < bl) {
                strb.append(""//\n"");
                line += 1;
            }
            if (block.getType() == BlockType.VERBATIM) {
                strb.append(""jexl:print("");
                strb.append(nuexpr++);
                strb.append("");\n"");
                line += 1;
            } else {
                // keep track of first block of code, the frame creator
                if (codeStart < 0) {
                    codeStart = b;
                }
                final String body = block.getBody();
                strb.append(body);
                for(int c = 0; c < body.length(); ++c) {
                    if (body.charAt(c) == '\n') {
                        line += 1;
                    }
                }
            }
        }
        // create the script
        if (info == null) {
            info = jxlt.getEngine().createInfo();
        }
        // allow lambda defining params
        final Scope scope = parms == null ? null : new Scope(null, parms);
        script = jxlt.getEngine().parse(info.at(1, 1), false, strb.toString(), scope).script();
        // seek the map of expression number to scope so we can parse Unified
        // expression blocks with the appropriate symbols
        final Map<Integer, JexlNode.Info> minfo = new TreeMap<>();
        collectPrintScope(script.script(), minfo);
        // jexl:print(...) expression counter
        int jpe = 0;
        // create the exprs using the intended scopes
        for (final Block block : blocks) {
            if (block.getType() == BlockType.VERBATIM) {
                final JexlNode.Info ji = minfo.get(jpe);
                TemplateExpression te;
                // no node info means this verbatim is surrounded by comments markers;
                // expr at this index is never called
                if (ji != null) {
                    te = jxlt.parseExpression(ji, block.getBody(), scopeOf(ji));
                } else {
                    te = jxlt.new ConstantExpression(block.getBody(), null);
                }
                uexprs.add(te);
                jpe += 1;
            }
        }
        source = blocks.toArray(new Block[blocks.size()]);
        exprs = uexprs.toArray(new TemplateExpression[uexprs.size()]);
    }","  public void test29()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      TemplateEngine templateEngine0 = engine0.createJxltEngine(true, (-1316), 'o', 'o');
      JexlInfo jexlInfo0 = new JexlInfo("""", (-1316), (-1316));
      JexlNode.Info jexlNode_Info0 = new JexlNode.Info((JexlNode) null, jexlInfo0);
      StringReader stringReader0 = new StringReader(""c~Hi$a.!_-}YN9EC[9|"");
      String[] stringArray0 = new String[1];
      TemplateScript templateScript0 = null;
      try {
        templateScript0 = new TemplateScript(templateEngine0, jexlNode_Info0, """", stringReader0, stringArray0);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // @1:2 ambiguous statement error in 'c~Hi$a.!_-}YN9EC[9|'
         //
         verifyException(""org.apache.commons.jexl3.parser.JexlParser"", e);
      }
  }"
2902,"    public TemplateScript(final TemplateEngine engine,
                          JexlInfo info,
                          final String directive,
                          final Reader reader,
                          final String... parms) {
        if (directive == null) {
            throw new NullPointerException(""null prefix"");
        }
        final String engineImmediateCharString = Character.toString(engine.getImmediateChar());
        final String engineDeferredCharString = Character.toString(engine.getDeferredChar());

        if (engineImmediateCharString.equals(directive)
                || engineDeferredCharString.equals(directive)
                || (engineImmediateCharString + ""{"").equals(directive)
                || (engineDeferredCharString + ""{"").equals(directive)) {
            throw new IllegalArgumentException(directive + "": is not a valid directive pattern"");
        }
        if (reader == null) {
            throw new NullPointerException(""null input"");
        }
        this.jxlt = engine;
        this.prefix = directive;
        final List<Block> blocks = jxlt.readTemplate(prefix, reader);
        final List<TemplateExpression> uexprs = new ArrayList<>();
        final StringBuilder strb = new StringBuilder();
        int nuexpr = 0;
        int codeStart = -1;
        int line = 1;
        for (int b = 0; b < blocks.size(); ++b) {
            final Block block = blocks.get(b);
            final int bl = block.getLine();
            while(line < bl) {
                strb.append(""//\n"");
                line += 1;
            }
            if (block.getType() == BlockType.VERBATIM) {
                strb.append(""jexl:print("");
                strb.append(nuexpr++);
                strb.append("");\n"");
                line += 1;
            } else {
                // keep track of first block of code, the frame creator
                if (codeStart < 0) {
                    codeStart = b;
                }
                final String body = block.getBody();
                strb.append(body);
                for(int c = 0; c < body.length(); ++c) {
                    if (body.charAt(c) == '\n') {
                        line += 1;
                    }
                }
            }
        }
        // create the script
        if (info == null) {
            info = jxlt.getEngine().createInfo();
        }
        // allow lambda defining params
        final Scope scope = parms == null ? null : new Scope(null, parms);
        script = jxlt.getEngine().parse(info.at(1, 1), false, strb.toString(), scope).script();
        // seek the map of expression number to scope so we can parse Unified
        // expression blocks with the appropriate symbols
        final Map<Integer, JexlNode.Info> minfo = new TreeMap<>();
        collectPrintScope(script.script(), minfo);
        // jexl:print(...) expression counter
        int jpe = 0;
        // create the exprs using the intended scopes
        for (final Block block : blocks) {
            if (block.getType() == BlockType.VERBATIM) {
                final JexlNode.Info ji = minfo.get(jpe);
                TemplateExpression te;
                // no node info means this verbatim is surrounded by comments markers;
                // expr at this index is never called
                if (ji != null) {
                    te = jxlt.parseExpression(ji, block.getBody(), scopeOf(ji));
                } else {
                    te = jxlt.new ConstantExpression(block.getBody(), null);
                }
                uexprs.add(te);
                jpe += 1;
            }
        }
        source = blocks.toArray(new Block[blocks.size()]);
        exprs = uexprs.toArray(new TemplateExpression[uexprs.size()]);
    }","  public void test30()  throws Throwable  {
      Engine engine0 = new Engine();
      TemplateEngine templateEngine0 = new TemplateEngine(engine0, true, 0, 'u', '_');
      JexlInfo jexlInfo0 = engine0.createInfo();
      StringReader stringReader0 = new StringReader(""\""Y"");
      String[] stringArray0 = new String[9];
      TemplateScript templateScript0 = null;
      try {
        templateScript0 = new TemplateScript(templateEngine0, jexlInfo0, """", stringReader0, stringArray0);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
      }
  }"
2903,"    public TemplateScript(final TemplateEngine engine,
                          JexlInfo info,
                          final String directive,
                          final Reader reader,
                          final String... parms) {
        if (directive == null) {
            throw new NullPointerException(""null prefix"");
        }
        final String engineImmediateCharString = Character.toString(engine.getImmediateChar());
        final String engineDeferredCharString = Character.toString(engine.getDeferredChar());

        if (engineImmediateCharString.equals(directive)
                || engineDeferredCharString.equals(directive)
                || (engineImmediateCharString + ""{"").equals(directive)
                || (engineDeferredCharString + ""{"").equals(directive)) {
            throw new IllegalArgumentException(directive + "": is not a valid directive pattern"");
        }
        if (reader == null) {
            throw new NullPointerException(""null input"");
        }
        this.jxlt = engine;
        this.prefix = directive;
        final List<Block> blocks = jxlt.readTemplate(prefix, reader);
        final List<TemplateExpression> uexprs = new ArrayList<>();
        final StringBuilder strb = new StringBuilder();
        int nuexpr = 0;
        int codeStart = -1;
        int line = 1;
        for (int b = 0; b < blocks.size(); ++b) {
            final Block block = blocks.get(b);
            final int bl = block.getLine();
            while(line < bl) {
                strb.append(""//\n"");
                line += 1;
            }
            if (block.getType() == BlockType.VERBATIM) {
                strb.append(""jexl:print("");
                strb.append(nuexpr++);
                strb.append("");\n"");
                line += 1;
            } else {
                // keep track of first block of code, the frame creator
                if (codeStart < 0) {
                    codeStart = b;
                }
                final String body = block.getBody();
                strb.append(body);
                for(int c = 0; c < body.length(); ++c) {
                    if (body.charAt(c) == '\n') {
                        line += 1;
                    }
                }
            }
        }
        // create the script
        if (info == null) {
            info = jxlt.getEngine().createInfo();
        }
        // allow lambda defining params
        final Scope scope = parms == null ? null : new Scope(null, parms);
        script = jxlt.getEngine().parse(info.at(1, 1), false, strb.toString(), scope).script();
        // seek the map of expression number to scope so we can parse Unified
        // expression blocks with the appropriate symbols
        final Map<Integer, JexlNode.Info> minfo = new TreeMap<>();
        collectPrintScope(script.script(), minfo);
        // jexl:print(...) expression counter
        int jpe = 0;
        // create the exprs using the intended scopes
        for (final Block block : blocks) {
            if (block.getType() == BlockType.VERBATIM) {
                final JexlNode.Info ji = minfo.get(jpe);
                TemplateExpression te;
                // no node info means this verbatim is surrounded by comments markers;
                // expr at this index is never called
                if (ji != null) {
                    te = jxlt.parseExpression(ji, block.getBody(), scopeOf(ji));
                } else {
                    te = jxlt.new ConstantExpression(block.getBody(), null);
                }
                uexprs.add(te);
                jpe += 1;
            }
        }
        source = blocks.toArray(new Block[blocks.size()]);
        exprs = uexprs.toArray(new TemplateExpression[uexprs.size()]);
    }","  public void test31()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      TemplateEngine templateEngine0 = new TemplateEngine(engine0, false, 0, 'l', 'l');
      StringReader stringReader0 = new StringReader(""^dS<{Nk"");
      TemplateScript templateScript0 = new TemplateScript(templateEngine0, (JexlInfo) null, ""8I={\""IZ?VF&KxJO"", stringReader0, (String[]) null);
  }"
2904,"    public void evaluate(final JexlContext context, final Writer writer) {
        evaluate(context, writer, (Object[]) null);
    }","  public void test32()  throws Throwable  {
      Engine engine0 = new Engine();
      TemplateEngine templateEngine0 = new TemplateEngine(engine0, true, 90, '~', '\""');
      JexlInfo jexlInfo0 = new JexlInfo();
      String[] stringArray0 = new String[3];
      JxltEngine.Template jxltEngine_Template0 = templateEngine0.createTemplate(jexlInfo0, ""ZAw:=DChz;6"");
      StringWriter stringWriter0 = new StringWriter();
      jxltEngine_Template0.evaluate(engine0.EMPTY_CONTEXT, (Writer) stringWriter0, (Object[]) stringArray0);
}"
2905,"    public Set<List<String>> getVariables() {
        final Engine.VarCollector collector = jxlt.getEngine().varCollector();
        for (final TemplateExpression expr : exprs) {
            expr.getVariables(collector);
        }
        return collector.collected();
    }","  public void test33()  throws Throwable  {
      Engine engine0 = new Engine();
      TemplateEngine templateEngine0 = engine0.jxlt();
      JexlInfo jexlInfo0 = new JexlInfo();
      JexlNode.Info jexlNode_Info0 = new JexlNode.Info((JexlNode) null, jexlInfo0);
      StringReader stringReader0 = new StringReader(""c~Hi$a.!_-}N9EC[9|"");
      String[] stringArray0 = new String[2];
      TemplateScript templateScript0 = new TemplateScript(templateEngine0, jexlNode_Info0, ""qK((Ixe%o8.)"", stringReader0, stringArray0);
      Set<List<String>> set0 = templateScript0.getVariables();
}"
2906,"    public TemplateScript prepare(final JexlContext context) {
        final Engine jexl = jxlt.getEngine();
        final JexlOptions options = jexl.options(script, context);
        final Frame frame = script.createFrame((Object[]) null);
        final TemplateInterpreter.Arguments targs = new TemplateInterpreter
                .Arguments(jxlt.getEngine())
                .context(context)
                .options(options)
                .frame(frame);
        final Interpreter interpreter = new TemplateInterpreter(targs);
        final TemplateExpression[] immediates = new TemplateExpression[exprs.length];
        for (int e = 0; e < exprs.length; ++e) {
            try {
                immediates[e] = exprs[e].prepare(interpreter);
            } catch (final JexlException xjexl) {
                final JexlException xuel = TemplateEngine.createException(xjexl.getInfo(), ""prepare"", exprs[e], xjexl);
                if (jexl.isSilent()) {
                    jexl.logger.warn(xuel.getMessage(), xuel.getCause());
                    return null;
                }
                throw xuel;
            }
        }
        return new TemplateScript(jxlt, prefix, source, script, immediates);
    }","  public void test34()  throws Throwable  {
      Engine engine0 = new Engine();
      TemplateEngine templateEngine0 = engine0.createJxltEngine(false, 2564, 'w', 'w');
      TemplateEngine.Block[] templateEngine_BlockArray0 = new TemplateEngine.Block[6];
      Parser parser0 = new Parser(""AmbiguXouu"");
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[1];
      Scope scope1 = new Scope(scope0, stringArray0);
      ASTJexlScript aSTJexlScript0 = parser0.JexlExpression(scope1);
      TemplateEngine.TemplateExpression[] templateEngine_TemplateExpressionArray0 = new TemplateEngine.TemplateExpression[1];
      TemplateEngine.NestedExpression templateEngine_NestedExpression0 = templateEngine0.new NestedExpression(""AmbiguXouu"", aSTJexlScript0, (TemplateEngine.TemplateExpression) null);
      templateEngine_TemplateExpressionArray0[0] = (TemplateEngine.TemplateExpression) templateEngine_NestedExpression0;
      TemplateScript templateScript0 = new TemplateScript(templateEngine0, ""AmbiguXouu"", templateEngine_BlockArray0, aSTJexlScript0, templateEngine_TemplateExpressionArray0);
      // Undeclared exception!
      try { 
        templateScript0.prepare(engine0.EMPTY_CONTEXT);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // @1:1![0,10]: 'AmbiguXouu' exception error : failed to prepare 'AmbiguXouu'
         //
         verifyException(""org.apache.commons.jexl3.internal.TemplateEngine"", e);
      }
  }"
2907,"    public String asString() {
        final StringBuilder strb = new StringBuilder();
        int e = 0;
        for (final Block block : source) {
            if (block.getType() == BlockType.DIRECTIVE) {
                strb.append(prefix);
                strb.append(block.getBody());
            } else {
                exprs[e++].asString(strb);
            }
        }
        return strb.toString();
    }","  public void test35()  throws Throwable  {
      Engine engine0 = new Engine();
      JexlInfo jexlInfo0 = engine0.createInfo();
      String[] stringArray0 = new String[8];
      TemplateEngine templateEngine0 = engine0.jxlt();
      StringReader stringReader0 = new StringReader(""//\n"");
      TemplateScript templateScript0 = templateEngine0.createTemplate(jexlInfo0, """", (Reader) stringReader0, stringArray0);
      String string0 = templateScript0.asString();
}"
2908,"    public TemplateScript(final TemplateEngine engine,
                          JexlInfo info,
                          final String directive,
                          final Reader reader,
                          final String... parms) {
        if (directive == null) {
            throw new NullPointerException(""null prefix"");
        }
        final String engineImmediateCharString = Character.toString(engine.getImmediateChar());
        final String engineDeferredCharString = Character.toString(engine.getDeferredChar());

        if (engineImmediateCharString.equals(directive)
                || engineDeferredCharString.equals(directive)
                || (engineImmediateCharString + ""{"").equals(directive)
                || (engineDeferredCharString + ""{"").equals(directive)) {
            throw new IllegalArgumentException(directive + "": is not a valid directive pattern"");
        }
        if (reader == null) {
            throw new NullPointerException(""null input"");
        }
        this.jxlt = engine;
        this.prefix = directive;
        final List<Block> blocks = jxlt.readTemplate(prefix, reader);
        final List<TemplateExpression> uexprs = new ArrayList<>();
        final StringBuilder strb = new StringBuilder();
        int nuexpr = 0;
        int codeStart = -1;
        int line = 1;
        for (int b = 0; b < blocks.size(); ++b) {
            final Block block = blocks.get(b);
            final int bl = block.getLine();
            while(line < bl) {
                strb.append(""//\n"");
                line += 1;
            }
            if (block.getType() == BlockType.VERBATIM) {
                strb.append(""jexl:print("");
                strb.append(nuexpr++);
                strb.append("");\n"");
                line += 1;
            } else {
                // keep track of first block of code, the frame creator
                if (codeStart < 0) {
                    codeStart = b;
                }
                final String body = block.getBody();
                strb.append(body);
                for(int c = 0; c < body.length(); ++c) {
                    if (body.charAt(c) == '\n') {
                        line += 1;
                    }
                }
            }
        }
        // create the script
        if (info == null) {
            info = jxlt.getEngine().createInfo();
        }
        // allow lambda defining params
        final Scope scope = parms == null ? null : new Scope(null, parms);
        script = jxlt.getEngine().parse(info.at(1, 1), false, strb.toString(), scope).script();
        // seek the map of expression number to scope so we can parse Unified
        // expression blocks with the appropriate symbols
        final Map<Integer, JexlNode.Info> minfo = new TreeMap<>();
        collectPrintScope(script.script(), minfo);
        // jexl:print(...) expression counter
        int jpe = 0;
        // create the exprs using the intended scopes
        for (final Block block : blocks) {
            if (block.getType() == BlockType.VERBATIM) {
                final JexlNode.Info ji = minfo.get(jpe);
                TemplateExpression te;
                // no node info means this verbatim is surrounded by comments markers;
                // expr at this index is never called
                if (ji != null) {
                    te = jxlt.parseExpression(ji, block.getBody(), scopeOf(ji));
                } else {
                    te = jxlt.new ConstantExpression(block.getBody(), null);
                }
                uexprs.add(te);
                jpe += 1;
            }
        }
        source = blocks.toArray(new Block[blocks.size()]);
        exprs = uexprs.toArray(new TemplateExpression[uexprs.size()]);
    }","  public void test36()  throws Throwable  {
      TemplateEngine templateEngine0 = new TemplateEngine((Engine) null, false, 490, '', '');
      StringReader stringReader0 = new StringReader(""X"");
      String[] stringArray0 = new String[4];
      TemplateScript templateScript0 = null;
      try {
        templateScript0 = new TemplateScript(templateEngine0, (JexlInfo) null, """", stringReader0, stringArray0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.internal.TemplateScript"", e);
      }
  }"
2909,"    public TemplateScript(final TemplateEngine engine,
                          JexlInfo info,
                          final String directive,
                          final Reader reader,
                          final String... parms) {
        if (directive == null) {
            throw new NullPointerException(""null prefix"");
        }
        final String engineImmediateCharString = Character.toString(engine.getImmediateChar());
        final String engineDeferredCharString = Character.toString(engine.getDeferredChar());

        if (engineImmediateCharString.equals(directive)
                || engineDeferredCharString.equals(directive)
                || (engineImmediateCharString + ""{"").equals(directive)
                || (engineDeferredCharString + ""{"").equals(directive)) {
            throw new IllegalArgumentException(directive + "": is not a valid directive pattern"");
        }
        if (reader == null) {
            throw new NullPointerException(""null input"");
        }
        this.jxlt = engine;
        this.prefix = directive;
        final List<Block> blocks = jxlt.readTemplate(prefix, reader);
        final List<TemplateExpression> uexprs = new ArrayList<>();
        final StringBuilder strb = new StringBuilder();
        int nuexpr = 0;
        int codeStart = -1;
        int line = 1;
        for (int b = 0; b < blocks.size(); ++b) {
            final Block block = blocks.get(b);
            final int bl = block.getLine();
            while(line < bl) {
                strb.append(""//\n"");
                line += 1;
            }
            if (block.getType() == BlockType.VERBATIM) {
                strb.append(""jexl:print("");
                strb.append(nuexpr++);
                strb.append("");\n"");
                line += 1;
            } else {
                // keep track of first block of code, the frame creator
                if (codeStart < 0) {
                    codeStart = b;
                }
                final String body = block.getBody();
                strb.append(body);
                for(int c = 0; c < body.length(); ++c) {
                    if (body.charAt(c) == '\n') {
                        line += 1;
                    }
                }
            }
        }
        // create the script
        if (info == null) {
            info = jxlt.getEngine().createInfo();
        }
        // allow lambda defining params
        final Scope scope = parms == null ? null : new Scope(null, parms);
        script = jxlt.getEngine().parse(info.at(1, 1), false, strb.toString(), scope).script();
        // seek the map of expression number to scope so we can parse Unified
        // expression blocks with the appropriate symbols
        final Map<Integer, JexlNode.Info> minfo = new TreeMap<>();
        collectPrintScope(script.script(), minfo);
        // jexl:print(...) expression counter
        int jpe = 0;
        // create the exprs using the intended scopes
        for (final Block block : blocks) {
            if (block.getType() == BlockType.VERBATIM) {
                final JexlNode.Info ji = minfo.get(jpe);
                TemplateExpression te;
                // no node info means this verbatim is surrounded by comments markers;
                // expr at this index is never called
                if (ji != null) {
                    te = jxlt.parseExpression(ji, block.getBody(), scopeOf(ji));
                } else {
                    te = jxlt.new ConstantExpression(block.getBody(), null);
                }
                uexprs.add(te);
                jpe += 1;
            }
        }
        source = blocks.toArray(new Block[blocks.size()]);
        exprs = uexprs.toArray(new TemplateExpression[uexprs.size()]);
    }","  public void test37()  throws Throwable  {
      Engine engine0 = new Engine();
      TemplateEngine templateEngine0 = engine0.jxlt();
      JexlInfo jexlInfo0 = engine0.createInfo();
      StringReader stringReader0 = new StringReader(""//\n"");
      String[] stringArray0 = new String[1];
      TemplateScript templateScript0 = new TemplateScript(templateEngine0, jexlInfo0, """", stringReader0, stringArray0);
  }"
2910,"    public void evaluate(final JexlContext context, final Writer writer) {
        evaluate(context, writer, (Object[]) null);
    }","  public void test38()  throws Throwable  {
      Engine engine0 = new Engine();
      TemplateEngine templateEngine0 = new TemplateEngine(engine0, false, (byte)102, '>', '{');
      JexlInfo jexlInfo0 = engine0.createInfo();
      StringReader stringReader0 = new StringReader(""g6i"");
      String[] stringArray0 = new String[1];
      TemplateScript templateScript0 = new TemplateScript(templateEngine0, jexlInfo0, """", stringReader0, stringArray0);
      StringWriter stringWriter0 = new StringWriter();
      // Undeclared exception!
      try { 
        templateScript0.evaluate(engine0.EMPTY_CONTEXT, (Writer) stringWriter0);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
      }
  }"
2911,"    public TemplateScript(final TemplateEngine engine,
                          JexlInfo info,
                          final String directive,
                          final Reader reader,
                          final String... parms) {
        if (directive == null) {
            throw new NullPointerException(""null prefix"");
        }
        final String engineImmediateCharString = Character.toString(engine.getImmediateChar());
        final String engineDeferredCharString = Character.toString(engine.getDeferredChar());

        if (engineImmediateCharString.equals(directive)
                || engineDeferredCharString.equals(directive)
                || (engineImmediateCharString + ""{"").equals(directive)
                || (engineDeferredCharString + ""{"").equals(directive)) {
            throw new IllegalArgumentException(directive + "": is not a valid directive pattern"");
        }
        if (reader == null) {
            throw new NullPointerException(""null input"");
        }
        this.jxlt = engine;
        this.prefix = directive;
        final List<Block> blocks = jxlt.readTemplate(prefix, reader);
        final List<TemplateExpression> uexprs = new ArrayList<>();
        final StringBuilder strb = new StringBuilder();
        int nuexpr = 0;
        int codeStart = -1;
        int line = 1;
        for (int b = 0; b < blocks.size(); ++b) {
            final Block block = blocks.get(b);
            final int bl = block.getLine();
            while(line < bl) {
                strb.append(""//\n"");
                line += 1;
            }
            if (block.getType() == BlockType.VERBATIM) {
                strb.append(""jexl:print("");
                strb.append(nuexpr++);
                strb.append("");\n"");
                line += 1;
            } else {
                // keep track of first block of code, the frame creator
                if (codeStart < 0) {
                    codeStart = b;
                }
                final String body = block.getBody();
                strb.append(body);
                for(int c = 0; c < body.length(); ++c) {
                    if (body.charAt(c) == '\n') {
                        line += 1;
                    }
                }
            }
        }
        // create the script
        if (info == null) {
            info = jxlt.getEngine().createInfo();
        }
        // allow lambda defining params
        final Scope scope = parms == null ? null : new Scope(null, parms);
        script = jxlt.getEngine().parse(info.at(1, 1), false, strb.toString(), scope).script();
        // seek the map of expression number to scope so we can parse Unified
        // expression blocks with the appropriate symbols
        final Map<Integer, JexlNode.Info> minfo = new TreeMap<>();
        collectPrintScope(script.script(), minfo);
        // jexl:print(...) expression counter
        int jpe = 0;
        // create the exprs using the intended scopes
        for (final Block block : blocks) {
            if (block.getType() == BlockType.VERBATIM) {
                final JexlNode.Info ji = minfo.get(jpe);
                TemplateExpression te;
                // no node info means this verbatim is surrounded by comments markers;
                // expr at this index is never called
                if (ji != null) {
                    te = jxlt.parseExpression(ji, block.getBody(), scopeOf(ji));
                } else {
                    te = jxlt.new ConstantExpression(block.getBody(), null);
                }
                uexprs.add(te);
                jpe += 1;
            }
        }
        source = blocks.toArray(new Block[blocks.size()]);
        exprs = uexprs.toArray(new TemplateExpression[uexprs.size()]);
    }","  public void test39()  throws Throwable  {
      Engine engine0 = new Engine();
      TemplateEngine templateEngine0 = engine0.jxlt();
      String[] stringArray0 = new String[1];
      TemplateScript templateScript0 = null;
      try {
        templateScript0 = new TemplateScript(templateEngine0, (JexlInfo) null, ""aQ}"", (Reader) null, stringArray0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // null input
         //
         verifyException(""org.apache.commons.jexl3.internal.TemplateScript"", e);
      }
  }"
2912,"    public TemplateScript(final TemplateEngine engine,
                          JexlInfo info,
                          final String directive,
                          final Reader reader,
                          final String... parms) {
        if (directive == null) {
            throw new NullPointerException(""null prefix"");
        }
        final String engineImmediateCharString = Character.toString(engine.getImmediateChar());
        final String engineDeferredCharString = Character.toString(engine.getDeferredChar());

        if (engineImmediateCharString.equals(directive)
                || engineDeferredCharString.equals(directive)
                || (engineImmediateCharString + ""{"").equals(directive)
                || (engineDeferredCharString + ""{"").equals(directive)) {
            throw new IllegalArgumentException(directive + "": is not a valid directive pattern"");
        }
        if (reader == null) {
            throw new NullPointerException(""null input"");
        }
        this.jxlt = engine;
        this.prefix = directive;
        final List<Block> blocks = jxlt.readTemplate(prefix, reader);
        final List<TemplateExpression> uexprs = new ArrayList<>();
        final StringBuilder strb = new StringBuilder();
        int nuexpr = 0;
        int codeStart = -1;
        int line = 1;
        for (int b = 0; b < blocks.size(); ++b) {
            final Block block = blocks.get(b);
            final int bl = block.getLine();
            while(line < bl) {
                strb.append(""//\n"");
                line += 1;
            }
            if (block.getType() == BlockType.VERBATIM) {
                strb.append(""jexl:print("");
                strb.append(nuexpr++);
                strb.append("");\n"");
                line += 1;
            } else {
                // keep track of first block of code, the frame creator
                if (codeStart < 0) {
                    codeStart = b;
                }
                final String body = block.getBody();
                strb.append(body);
                for(int c = 0; c < body.length(); ++c) {
                    if (body.charAt(c) == '\n') {
                        line += 1;
                    }
                }
            }
        }
        // create the script
        if (info == null) {
            info = jxlt.getEngine().createInfo();
        }
        // allow lambda defining params
        final Scope scope = parms == null ? null : new Scope(null, parms);
        script = jxlt.getEngine().parse(info.at(1, 1), false, strb.toString(), scope).script();
        // seek the map of expression number to scope so we can parse Unified
        // expression blocks with the appropriate symbols
        final Map<Integer, JexlNode.Info> minfo = new TreeMap<>();
        collectPrintScope(script.script(), minfo);
        // jexl:print(...) expression counter
        int jpe = 0;
        // create the exprs using the intended scopes
        for (final Block block : blocks) {
            if (block.getType() == BlockType.VERBATIM) {
                final JexlNode.Info ji = minfo.get(jpe);
                TemplateExpression te;
                // no node info means this verbatim is surrounded by comments markers;
                // expr at this index is never called
                if (ji != null) {
                    te = jxlt.parseExpression(ji, block.getBody(), scopeOf(ji));
                } else {
                    te = jxlt.new ConstantExpression(block.getBody(), null);
                }
                uexprs.add(te);
                jpe += 1;
            }
        }
        source = blocks.toArray(new Block[blocks.size()]);
        exprs = uexprs.toArray(new TemplateExpression[uexprs.size()]);
    }","  public void test40()  throws Throwable  {
      Engine engine0 = new Engine();
      TemplateEngine templateEngine0 = (TemplateEngine)engine0.createJxltEngine(false);
      String[] stringArray0 = new String[2];
      TemplateScript templateScript0 = null;
      try {
        templateScript0 = new TemplateScript(templateEngine0, (JexlInfo) null, ""#{"", (Reader) null, stringArray0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // #{: is not a valid directive pattern
         //
         verifyException(""org.apache.commons.jexl3.internal.TemplateScript"", e);
      }
  }"
2913,"    public TemplateScript(final TemplateEngine engine,
                          JexlInfo info,
                          final String directive,
                          final Reader reader,
                          final String... parms) {
        if (directive == null) {
            throw new NullPointerException(""null prefix"");
        }
        final String engineImmediateCharString = Character.toString(engine.getImmediateChar());
        final String engineDeferredCharString = Character.toString(engine.getDeferredChar());

        if (engineImmediateCharString.equals(directive)
                || engineDeferredCharString.equals(directive)
                || (engineImmediateCharString + ""{"").equals(directive)
                || (engineDeferredCharString + ""{"").equals(directive)) {
            throw new IllegalArgumentException(directive + "": is not a valid directive pattern"");
        }
        if (reader == null) {
            throw new NullPointerException(""null input"");
        }
        this.jxlt = engine;
        this.prefix = directive;
        final List<Block> blocks = jxlt.readTemplate(prefix, reader);
        final List<TemplateExpression> uexprs = new ArrayList<>();
        final StringBuilder strb = new StringBuilder();
        int nuexpr = 0;
        int codeStart = -1;
        int line = 1;
        for (int b = 0; b < blocks.size(); ++b) {
            final Block block = blocks.get(b);
            final int bl = block.getLine();
            while(line < bl) {
                strb.append(""//\n"");
                line += 1;
            }
            if (block.getType() == BlockType.VERBATIM) {
                strb.append(""jexl:print("");
                strb.append(nuexpr++);
                strb.append("");\n"");
                line += 1;
            } else {
                // keep track of first block of code, the frame creator
                if (codeStart < 0) {
                    codeStart = b;
                }
                final String body = block.getBody();
                strb.append(body);
                for(int c = 0; c < body.length(); ++c) {
                    if (body.charAt(c) == '\n') {
                        line += 1;
                    }
                }
            }
        }
        // create the script
        if (info == null) {
            info = jxlt.getEngine().createInfo();
        }
        // allow lambda defining params
        final Scope scope = parms == null ? null : new Scope(null, parms);
        script = jxlt.getEngine().parse(info.at(1, 1), false, strb.toString(), scope).script();
        // seek the map of expression number to scope so we can parse Unified
        // expression blocks with the appropriate symbols
        final Map<Integer, JexlNode.Info> minfo = new TreeMap<>();
        collectPrintScope(script.script(), minfo);
        // jexl:print(...) expression counter
        int jpe = 0;
        // create the exprs using the intended scopes
        for (final Block block : blocks) {
            if (block.getType() == BlockType.VERBATIM) {
                final JexlNode.Info ji = minfo.get(jpe);
                TemplateExpression te;
                // no node info means this verbatim is surrounded by comments markers;
                // expr at this index is never called
                if (ji != null) {
                    te = jxlt.parseExpression(ji, block.getBody(), scopeOf(ji));
                } else {
                    te = jxlt.new ConstantExpression(block.getBody(), null);
                }
                uexprs.add(te);
                jpe += 1;
            }
        }
        source = blocks.toArray(new Block[blocks.size()]);
        exprs = uexprs.toArray(new TemplateExpression[uexprs.size()]);
    }","  public void test41()  throws Throwable  {
      Engine engine0 = new Engine();
      TemplateEngine templateEngine0 = engine0.createJxltEngine(true, (-1721874123), 'p', 'p');
      StringReader stringReader0 = new StringReader("":{"");
      String[] stringArray0 = new String[1];
      JexlInfo jexlInfo0 = new JexlInfo(""L67|1$"", (-2028798559), (-1721874123));
      TemplateScript templateScript0 = null;
      try {
        templateScript0 = new TemplateScript(templateEngine0, jexlInfo0, ""p{"", stringReader0, stringArray0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // p{: is not a valid directive pattern
         //
         verifyException(""org.apache.commons.jexl3.internal.TemplateScript"", e);
      }
  }"
2914,"    public TemplateScript(final TemplateEngine engine,
                          JexlInfo info,
                          final String directive,
                          final Reader reader,
                          final String... parms) {
        if (directive == null) {
            throw new NullPointerException(""null prefix"");
        }
        final String engineImmediateCharString = Character.toString(engine.getImmediateChar());
        final String engineDeferredCharString = Character.toString(engine.getDeferredChar());

        if (engineImmediateCharString.equals(directive)
                || engineDeferredCharString.equals(directive)
                || (engineImmediateCharString + ""{"").equals(directive)
                || (engineDeferredCharString + ""{"").equals(directive)) {
            throw new IllegalArgumentException(directive + "": is not a valid directive pattern"");
        }
        if (reader == null) {
            throw new NullPointerException(""null input"");
        }
        this.jxlt = engine;
        this.prefix = directive;
        final List<Block> blocks = jxlt.readTemplate(prefix, reader);
        final List<TemplateExpression> uexprs = new ArrayList<>();
        final StringBuilder strb = new StringBuilder();
        int nuexpr = 0;
        int codeStart = -1;
        int line = 1;
        for (int b = 0; b < blocks.size(); ++b) {
            final Block block = blocks.get(b);
            final int bl = block.getLine();
            while(line < bl) {
                strb.append(""//\n"");
                line += 1;
            }
            if (block.getType() == BlockType.VERBATIM) {
                strb.append(""jexl:print("");
                strb.append(nuexpr++);
                strb.append("");\n"");
                line += 1;
            } else {
                // keep track of first block of code, the frame creator
                if (codeStart < 0) {
                    codeStart = b;
                }
                final String body = block.getBody();
                strb.append(body);
                for(int c = 0; c < body.length(); ++c) {
                    if (body.charAt(c) == '\n') {
                        line += 1;
                    }
                }
            }
        }
        // create the script
        if (info == null) {
            info = jxlt.getEngine().createInfo();
        }
        // allow lambda defining params
        final Scope scope = parms == null ? null : new Scope(null, parms);
        script = jxlt.getEngine().parse(info.at(1, 1), false, strb.toString(), scope).script();
        // seek the map of expression number to scope so we can parse Unified
        // expression blocks with the appropriate symbols
        final Map<Integer, JexlNode.Info> minfo = new TreeMap<>();
        collectPrintScope(script.script(), minfo);
        // jexl:print(...) expression counter
        int jpe = 0;
        // create the exprs using the intended scopes
        for (final Block block : blocks) {
            if (block.getType() == BlockType.VERBATIM) {
                final JexlNode.Info ji = minfo.get(jpe);
                TemplateExpression te;
                // no node info means this verbatim is surrounded by comments markers;
                // expr at this index is never called
                if (ji != null) {
                    te = jxlt.parseExpression(ji, block.getBody(), scopeOf(ji));
                } else {
                    te = jxlt.new ConstantExpression(block.getBody(), null);
                }
                uexprs.add(te);
                jpe += 1;
            }
        }
        source = blocks.toArray(new Block[blocks.size()]);
        exprs = uexprs.toArray(new TemplateExpression[uexprs.size()]);
    }","  public void test42()  throws Throwable  {
      Engine engine0 = new Engine();
      TemplateEngine templateEngine0 = new TemplateEngine(engine0, true, (byte) (-95), 'p', '{');
      JexlInfo jexlInfo0 = new JexlInfo();
      StringReader stringReader0 = new StringReader(""{"");
      String[] stringArray0 = new String[1];
      TemplateScript templateScript0 = null;
      try {
        templateScript0 = new TemplateScript(templateEngine0, jexlInfo0, ""{"", stringReader0, stringArray0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // {: is not a valid directive pattern
         //
         verifyException(""org.apache.commons.jexl3.internal.TemplateScript"", e);
      }
  }"
2915,"    public TemplateScript(final TemplateEngine engine,
                          JexlInfo info,
                          final String directive,
                          final Reader reader,
                          final String... parms) {
        if (directive == null) {
            throw new NullPointerException(""null prefix"");
        }
        final String engineImmediateCharString = Character.toString(engine.getImmediateChar());
        final String engineDeferredCharString = Character.toString(engine.getDeferredChar());

        if (engineImmediateCharString.equals(directive)
                || engineDeferredCharString.equals(directive)
                || (engineImmediateCharString + ""{"").equals(directive)
                || (engineDeferredCharString + ""{"").equals(directive)) {
            throw new IllegalArgumentException(directive + "": is not a valid directive pattern"");
        }
        if (reader == null) {
            throw new NullPointerException(""null input"");
        }
        this.jxlt = engine;
        this.prefix = directive;
        final List<Block> blocks = jxlt.readTemplate(prefix, reader);
        final List<TemplateExpression> uexprs = new ArrayList<>();
        final StringBuilder strb = new StringBuilder();
        int nuexpr = 0;
        int codeStart = -1;
        int line = 1;
        for (int b = 0; b < blocks.size(); ++b) {
            final Block block = blocks.get(b);
            final int bl = block.getLine();
            while(line < bl) {
                strb.append(""//\n"");
                line += 1;
            }
            if (block.getType() == BlockType.VERBATIM) {
                strb.append(""jexl:print("");
                strb.append(nuexpr++);
                strb.append("");\n"");
                line += 1;
            } else {
                // keep track of first block of code, the frame creator
                if (codeStart < 0) {
                    codeStart = b;
                }
                final String body = block.getBody();
                strb.append(body);
                for(int c = 0; c < body.length(); ++c) {
                    if (body.charAt(c) == '\n') {
                        line += 1;
                    }
                }
            }
        }
        // create the script
        if (info == null) {
            info = jxlt.getEngine().createInfo();
        }
        // allow lambda defining params
        final Scope scope = parms == null ? null : new Scope(null, parms);
        script = jxlt.getEngine().parse(info.at(1, 1), false, strb.toString(), scope).script();
        // seek the map of expression number to scope so we can parse Unified
        // expression blocks with the appropriate symbols
        final Map<Integer, JexlNode.Info> minfo = new TreeMap<>();
        collectPrintScope(script.script(), minfo);
        // jexl:print(...) expression counter
        int jpe = 0;
        // create the exprs using the intended scopes
        for (final Block block : blocks) {
            if (block.getType() == BlockType.VERBATIM) {
                final JexlNode.Info ji = minfo.get(jpe);
                TemplateExpression te;
                // no node info means this verbatim is surrounded by comments markers;
                // expr at this index is never called
                if (ji != null) {
                    te = jxlt.parseExpression(ji, block.getBody(), scopeOf(ji));
                } else {
                    te = jxlt.new ConstantExpression(block.getBody(), null);
                }
                uexprs.add(te);
                jpe += 1;
            }
        }
        source = blocks.toArray(new Block[blocks.size()]);
        exprs = uexprs.toArray(new TemplateExpression[uexprs.size()]);
    }","  public void test43()  throws Throwable  {
      Engine engine0 = new Engine();
      TemplateEngine templateEngine0 = new TemplateEngine(engine0, false, (-2156), '_', '_');
      StringReader stringReader0 = new StringReader(""_"");
      String[] stringArray0 = new String[20];
      TemplateScript templateScript0 = null;
      try {
        templateScript0 = new TemplateScript(templateEngine0, (JexlInfo) null, ""_"", stringReader0, stringArray0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // _: is not a valid directive pattern
         //
         verifyException(""org.apache.commons.jexl3.internal.TemplateScript"", e);
      }
  }"
2916,"    public TemplateScript(final TemplateEngine engine,
                          JexlInfo info,
                          final String directive,
                          final Reader reader,
                          final String... parms) {
        if (directive == null) {
            throw new NullPointerException(""null prefix"");
        }
        final String engineImmediateCharString = Character.toString(engine.getImmediateChar());
        final String engineDeferredCharString = Character.toString(engine.getDeferredChar());

        if (engineImmediateCharString.equals(directive)
                || engineDeferredCharString.equals(directive)
                || (engineImmediateCharString + ""{"").equals(directive)
                || (engineDeferredCharString + ""{"").equals(directive)) {
            throw new IllegalArgumentException(directive + "": is not a valid directive pattern"");
        }
        if (reader == null) {
            throw new NullPointerException(""null input"");
        }
        this.jxlt = engine;
        this.prefix = directive;
        final List<Block> blocks = jxlt.readTemplate(prefix, reader);
        final List<TemplateExpression> uexprs = new ArrayList<>();
        final StringBuilder strb = new StringBuilder();
        int nuexpr = 0;
        int codeStart = -1;
        int line = 1;
        for (int b = 0; b < blocks.size(); ++b) {
            final Block block = blocks.get(b);
            final int bl = block.getLine();
            while(line < bl) {
                strb.append(""//\n"");
                line += 1;
            }
            if (block.getType() == BlockType.VERBATIM) {
                strb.append(""jexl:print("");
                strb.append(nuexpr++);
                strb.append("");\n"");
                line += 1;
            } else {
                // keep track of first block of code, the frame creator
                if (codeStart < 0) {
                    codeStart = b;
                }
                final String body = block.getBody();
                strb.append(body);
                for(int c = 0; c < body.length(); ++c) {
                    if (body.charAt(c) == '\n') {
                        line += 1;
                    }
                }
            }
        }
        // create the script
        if (info == null) {
            info = jxlt.getEngine().createInfo();
        }
        // allow lambda defining params
        final Scope scope = parms == null ? null : new Scope(null, parms);
        script = jxlt.getEngine().parse(info.at(1, 1), false, strb.toString(), scope).script();
        // seek the map of expression number to scope so we can parse Unified
        // expression blocks with the appropriate symbols
        final Map<Integer, JexlNode.Info> minfo = new TreeMap<>();
        collectPrintScope(script.script(), minfo);
        // jexl:print(...) expression counter
        int jpe = 0;
        // create the exprs using the intended scopes
        for (final Block block : blocks) {
            if (block.getType() == BlockType.VERBATIM) {
                final JexlNode.Info ji = minfo.get(jpe);
                TemplateExpression te;
                // no node info means this verbatim is surrounded by comments markers;
                // expr at this index is never called
                if (ji != null) {
                    te = jxlt.parseExpression(ji, block.getBody(), scopeOf(ji));
                } else {
                    te = jxlt.new ConstantExpression(block.getBody(), null);
                }
                uexprs.add(te);
                jpe += 1;
            }
        }
        source = blocks.toArray(new Block[blocks.size()]);
        exprs = uexprs.toArray(new TemplateExpression[uexprs.size()]);
    }","  public void test44()  throws Throwable  {
      Engine engine0 = new Engine();
      StringReader stringReader0 = new StringReader(""N1Gqg3Xg=#& rr2xoQ"");
      String[] stringArray0 = new String[6];
      JexlInfo jexlInfo0 = engine0.createInfo();
      TemplateScript templateScript0 = null;
      try {
        templateScript0 = new TemplateScript((TemplateEngine) null, jexlInfo0, (String) null, stringReader0, stringArray0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // null prefix
         //
         verifyException(""org.apache.commons.jexl3.internal.TemplateScript"", e);
      }
  }"
2917,"    public TemplateScript prepare(final JexlContext context) {
        final Engine jexl = jxlt.getEngine();
        final JexlOptions options = jexl.options(script, context);
        final Frame frame = script.createFrame((Object[]) null);
        final TemplateInterpreter.Arguments targs = new TemplateInterpreter
                .Arguments(jxlt.getEngine())
                .context(context)
                .options(options)
                .frame(frame);
        final Interpreter interpreter = new TemplateInterpreter(targs);
        final TemplateExpression[] immediates = new TemplateExpression[exprs.length];
        for (int e = 0; e < exprs.length; ++e) {
            try {
                immediates[e] = exprs[e].prepare(interpreter);
            } catch (final JexlException xjexl) {
                final JexlException xuel = TemplateEngine.createException(xjexl.getInfo(), ""prepare"", exprs[e], xjexl);
                if (jexl.isSilent()) {
                    jexl.logger.warn(xuel.getMessage(), xuel.getCause());
                    return null;
                }
                throw xuel;
            }
        }
        return new TemplateScript(jxlt, prefix, source, script, immediates);
    }","  public void test45()  throws Throwable  {
      Engine engine0 = new Engine();
      TemplateEngine templateEngine0 = engine0.createJxltEngine(true, (-3237), '1', '1');
      JexlInfo jexlInfo0 = engine0.createInfo();
      TemplateScript templateScript0 = (TemplateScript)templateEngine0.createTemplate(jexlInfo0, ""ud"");
      TemplateScript templateScript1 = templateScript0.prepare(engine0.EMPTY_CONTEXT);
}"
2918,"    public String[] getParameters() {
        return script.getParameters();
    }","  public void test46()  throws Throwable  {
      Engine engine0 = new Engine();
      TemplateEngine templateEngine0 = new TemplateEngine(engine0, true, 90, '~', '\""');
      JexlInfo jexlInfo0 = new JexlInfo();
      JxltEngine.Template jxltEngine_Template0 = templateEngine0.createTemplate(jexlInfo0, ""ZAw:=DChz;6"");
      String[] stringArray0 = jxltEngine_Template0.getParameters();
}"
2919,"    TemplateExpression[] getExpressions() {
        return exprs;
    }","  public void test47()  throws Throwable  {
      Engine engine0 = new Engine();
      TemplateEngine templateEngine0 = engine0.createJxltEngine(true, (-3237), '1', '1');
      JexlInfo jexlInfo0 = engine0.createInfo();
      TemplateScript templateScript0 = (TemplateScript)templateEngine0.createTemplate(jexlInfo0, ""ud"");
      TemplateEngine.TemplateExpression[] templateEngine_TemplateExpressionArray0 = templateScript0.getExpressions();
}"
2920,"    public void evaluate(final JexlContext context, final Writer writer) {
        evaluate(context, writer, (Object[]) null);
    }","  public void test48()  throws Throwable  {
      Engine engine0 = new Engine();
      TemplateEngine templateEngine0 = engine0.createJxltEngine(true, (-3237), '1', '1');
      JexlInfo jexlInfo0 = engine0.createInfo();
      JxltEngine.Template jxltEngine_Template0 = templateEngine0.createTemplate(jexlInfo0, ""ud"");
      StringWriter stringWriter0 = new StringWriter();
      jxltEngine_Template0.evaluate(engine0.EMPTY_CONTEXT, (Writer) stringWriter0);
}"
2921,"    public String[] getParameters() {
        return getParameters(0);
    }","  public void test0()  throws Throwable  {
      String[] stringArray0 = new String[0];
      Scope scope0 = new Scope((Scope) null, stringArray0);
      scope0.declareVariable(""G6$"");
      scope0.declareVariable(""13B>%9^`P#+zY"");
      String[] stringArray1 = scope0.getParameters((-1));
}"
2922,"    public Integer getCaptured(final int symbol) {
        if (capturedVariables != null) {
            for (final Map.Entry<Integer, Integer> capture : capturedVariables.entrySet()) {
                final Integer source = capture.getValue();
                if (source == symbol) {
                    return capture.getKey();
                }
            }
        }
        return null;
    }","  public void test1()  throws Throwable  {
      String[] stringArray0 = new String[0];
      Scope scope0 = new Scope((Scope) null, stringArray0);
      scope0.declareVariable(""G6$"");
      Scope scope1 = new Scope(scope0, stringArray0);
      scope1.declareVariable(""G6$"");
      Integer integer0 = scope1.getCaptured(36);
}"
2923,"    public Frame createFrame(final Frame frame, final Object...args) {
        if (namedVariables == null) {
            return null;
        }
        final Object[] arguments = new Object[namedVariables.size()];
        Arrays.fill(arguments, UNDECLARED);
        if (frame != null && capturedVariables != null && parent != null) {
            for (final Map.Entry<Integer, Integer> capture : capturedVariables.entrySet()) {
                final Integer target = capture.getKey();
                final Integer source = capture.getValue();
                final Object arg = frame.get(source);
                arguments[target] = arg;
            }
        }
        return new Frame(this, arguments, 0).assign(args);
    }","  public void test2()  throws Throwable  {
      String[] stringArray0 = new String[0];
      Scope scope0 = new Scope((Scope) null, stringArray0);
      scope0.declareVariable(""13B>%9^`P#+zY"");
      Frame frame0 = new Frame((Scope) null, stringArray0, 0);
      Frame frame1 = scope0.createFrame(frame0, stringArray0);
      Scope scope1 = new Scope(scope0, stringArray0);
      scope1.declareVariable(""G6$"");
      scope1.declareVariable(""13B>%9^`P#+zY"");
      Frame frame2 = scope1.createFrame(frame1, (Object[]) null);
}"
2924,"    public Frame createFrame(final Frame frame, final Object...args) {
        if (namedVariables == null) {
            return null;
        }
        final Object[] arguments = new Object[namedVariables.size()];
        Arrays.fill(arguments, UNDECLARED);
        if (frame != null && capturedVariables != null && parent != null) {
            for (final Map.Entry<Integer, Integer> capture : capturedVariables.entrySet()) {
                final Integer target = capture.getKey();
                final Integer source = capture.getValue();
                final Object arg = frame.get(source);
                arguments[target] = arg;
            }
        }
        return new Frame(this, arguments, 0).assign(args);
    }","  public void test3()  throws Throwable  {
      String[] stringArray0 = new String[0];
      Scope scope0 = new Scope((Scope) null, stringArray0);
      scope0.declareVariable(""13B>%9^`P#+zY"");
      Frame frame0 = new Frame((Scope) null, stringArray0, 0);
      Scope scope1 = new Scope(scope0, stringArray0);
      scope1.declareVariable(""G6$"");
      scope1.declareVariable(""13B>%9^`P#+zY"");
      // Undeclared exception!
      try { 
        scope1.createFrame(frame0, (Object[]) null);
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException(""org.apache.commons.jexl3.internal.Frame"", e);
      }
  }"
2925,"    public boolean equals(final Object o) {
        if (this == o) {
            return true;
        }
        if (!(o instanceof Scope)) {
            return false;
        }
        final Scope scope = (Scope) o;
        if (parms != scope.parms) {
            return false;
        }
        if (namedVariables == null) {
            return scope.namedVariables == null;
        }
        return namedVariables.equals(scope.namedVariables);
    }","  public void test4()  throws Throwable  {
      String[] stringArray0 = new String[1];
      Scope scope0 = new Scope((Scope) null, stringArray0);
      String[] stringArray1 = new String[0];
      Scope scope1 = new Scope((Scope) null, stringArray1);
      boolean boolean0 = scope0.equals(scope1);
}"
2926,"    public int getArgCount() {
        return parms;
    }","  public void test5()  throws Throwable  {
      String[] stringArray0 = new String[1];
      Scope scope0 = new Scope((Scope) null, stringArray0);
      scope0.declareParameter(""org.apache.commons.jexl3.internal.Frame"");
      scope0.hashCode();
}"
2927,"    public String[] getParameters() {
        return getParameters(0);
    }","  public void test6()  throws Throwable  {
      String[] stringArray0 = new String[1];
      Scope scope0 = new Scope((Scope) null, stringArray0);
      String[] stringArray1 = scope0.getParameters();
}"
2928,"    public int getArgCount() {
        return parms;
    }","  public void test7()  throws Throwable  {
      String[] stringArray0 = new String[0];
      Scope scope0 = new Scope((Scope) null, stringArray0);
      scope0.declareVariable("""");
      scope0.declareVariable(""1S_G`AU@ d}H3Spi["");
      Scope scope1 = new Scope(scope0, (String[]) null);
      scope1.getSymbol(""1S_G`AU@ d}H3Spi["");
      scope1.declareVariable("""");
      Integer integer0 = scope1.getCaptured(0);
}"
2929,"    public Integer getCaptured(final int symbol) {
        if (capturedVariables != null) {
            for (final Map.Entry<Integer, Integer> capture : capturedVariables.entrySet()) {
                final Integer source = capture.getValue();
                if (source == symbol) {
                    return capture.getKey();
                }
            }
        }
        return null;
    }","  public void test8()  throws Throwable  {
      String[] stringArray0 = new String[0];
      Scope scope0 = new Scope((Scope) null, stringArray0);
      scope0.declareVariable("""");
      scope0.declareVariable(""1S_G`AU@ d}H3Spi["");
      Scope scope1 = new Scope(scope0, (String[]) null);
      scope1.getSymbol(""1S_G`AU@ d}H3Spi["");
      scope1.declareVariable("""");
      Integer integer0 = scope1.getCaptured(0);
}"
2930,"    public Integer getCaptured(final int symbol) {
        if (capturedVariables != null) {
            for (final Map.Entry<Integer, Integer> capture : capturedVariables.entrySet()) {
                final Integer source = capture.getValue();
                if (source == symbol) {
                    return capture.getKey();
                }
            }
        }
        return null;
    }","  public void test9()  throws Throwable  {
      String[] stringArray0 = new String[0];
      Scope scope0 = new Scope((Scope) null, stringArray0);
      scope0.declareVariable("""");
      scope0.declareVariable(""1S_G`AU@ d}H3Spi["");
      Scope scope1 = new Scope(scope0, (String[]) null);
      scope1.getSymbol(""1S_G`AU@ d}H3Spi["");
      scope1.declareVariable("""");
      Integer integer0 = scope1.getCaptured(0);
}"
2931,"    public int getArgCount() {
        return parms;
    }","  public void test10()  throws Throwable  {
      Scope scope0 = new Scope((Scope) null, (String[]) null);
      scope0.declareVariable(""=sy{%||ITCZGxs+*6"");
      String[] stringArray0 = scope0.getLocalVariables();
      Scope scope1 = new Scope(scope0, stringArray0);
      int int0 = scope1.declareParameter("""");
}"
2932,"    public int declareParameter(final String name) {
        if (namedVariables == null) {
            namedVariables = new LinkedHashMap<String, Integer>();
        } else if (vars > 0) {
            throw new IllegalStateException(""cant declare parameters after variables"");
        }
        Integer register = namedVariables.get(name);
        if (register == null) {
            register = namedVariables.size();
            namedVariables.put(name, register);
            parms += 1;
        }
        return register;
    }","  public void test11()  throws Throwable  {
      Scope scope0 = new Scope((Scope) null, (String[]) null);
      scope0.declareVariable(""=sy{%||ITCZGxs+*6"");
      String[] stringArray0 = scope0.getLocalVariables();
      Scope scope1 = new Scope(scope0, stringArray0);
      int int0 = scope1.declareParameter("""");
}"
2933,"    public String[] getParameters() {
        return getParameters(0);
    }","  public void test12()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = """";
      stringArray0[1] = ""|y1"";
      stringArray0[3] = "".("";
      Scope scope0 = new Scope((Scope) null, stringArray0);
      scope0.declareVariable(""7q@Oz6*S8~Vi:yx9"");
      // Undeclared exception!
      try { 
        scope0.getParameters(4);
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException(""org.apache.commons.jexl3.internal.Scope"", e);
      }
  }"
2934,"    public Frame createFrame(final Frame frame, final Object...args) {
        if (namedVariables == null) {
            return null;
        }
        final Object[] arguments = new Object[namedVariables.size()];
        Arrays.fill(arguments, UNDECLARED);
        if (frame != null && capturedVariables != null && parent != null) {
            for (final Map.Entry<Integer, Integer> capture : capturedVariables.entrySet()) {
                final Integer target = capture.getKey();
                final Integer source = capture.getValue();
                final Object arg = frame.get(source);
                arguments[target] = arg;
            }
        }
        return new Frame(this, arguments, 0).assign(args);
    }","  public void test13()  throws Throwable  {
      String[] stringArray0 = new String[1];
      Scope scope0 = new Scope((Scope) null, stringArray0);
      scope0.declareVariable("""");
      Frame frame0 = new Frame((Scope) null, (Object[]) null, 1);
      Scope scope1 = new Scope(scope0, stringArray0);
      scope1.getSymbol("""");
      // Undeclared exception!
      try { 
        scope1.createFrame(frame0, stringArray0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.internal.Frame"", e);
      }
  }"
2935,"    public int getArgCount() {
        return parms;
    }","  public void test14()  throws Throwable  {
      Scope scope0 = new Scope((Scope) null, (String[]) null);
      scope0.getParameters(0);
}"
2936,"    public String[] getParameters() {
        return getParameters(0);
    }","  public void test15()  throws Throwable  {
      String[] stringArray0 = new String[0];
      Scope scope0 = new Scope((Scope) null, stringArray0);
      String[] stringArray1 = scope0.getParameters(2487);
}"
2937,"    public String[] getLocalVariables() {
        if ((namedVariables == null) || (vars <= 0)) {
            return EMPTY_STRS;
        }
        final List<String> locals = new ArrayList<String>(vars);
        for (final Map.Entry<String, Integer> entry : namedVariables.entrySet()) {
            final int symnum = entry.getValue();
            if (symnum >= parms && (capturedVariables == null || !capturedVariables.containsKey(symnum))) {
                locals.add(entry.getKey());
            }
        }
        return locals.toArray(new String[locals.size()]);
    }","  public void test16()  throws Throwable  {
      String[] stringArray0 = new String[0];
      Scope scope0 = new Scope((Scope) null, stringArray0);
      scope0.declareVariable(""G6$"");
      Scope scope1 = new Scope(scope0, stringArray0);
      scope1.declareVariable(""!5B5r(dAlN5QB;9`b^5"");
      scope1.declareVariable(""G6$"");
      String[] stringArray1 = scope1.getLocalVariables();
}"
2938,"    public String[] getLocalVariables() {
        if ((namedVariables == null) || (vars <= 0)) {
            return EMPTY_STRS;
        }
        final List<String> locals = new ArrayList<String>(vars);
        for (final Map.Entry<String, Integer> entry : namedVariables.entrySet()) {
            final int symnum = entry.getValue();
            if (symnum >= parms && (capturedVariables == null || !capturedVariables.containsKey(symnum))) {
                locals.add(entry.getKey());
            }
        }
        return locals.toArray(new String[locals.size()]);
    }","  public void test17()  throws Throwable  {
      String[] stringArray0 = new String[0];
      Scope scope0 = new Scope((Scope) null, stringArray0);
      scope0.declareVariable(""G6$"");
      Scope scope1 = new Scope(scope0, stringArray0);
      scope1.declareVariable(""G6$"");
      String[] stringArray1 = scope1.getLocalVariables();
}"
2939,"    public String[] getLocalVariables() {
        if ((namedVariables == null) || (vars <= 0)) {
            return EMPTY_STRS;
        }
        final List<String> locals = new ArrayList<String>(vars);
        for (final Map.Entry<String, Integer> entry : namedVariables.entrySet()) {
            final int symnum = entry.getValue();
            if (symnum >= parms && (capturedVariables == null || !capturedVariables.containsKey(symnum))) {
                locals.add(entry.getKey());
            }
        }
        return locals.toArray(new String[locals.size()]);
    }","  public void test18()  throws Throwable  {
      String[] stringArray0 = new String[8];
      Scope scope0 = new Scope((Scope) null, stringArray0);
      String[] stringArray1 = scope0.getLocalVariables();
}"
2940,"    public int getArgCount() {
        return parms;
    }","  public void test19()  throws Throwable  {
      Scope scope0 = new Scope((Scope) null, (String[]) null);
      scope0.getSymbols();
}"
2941,"    public Integer getCaptured(final int symbol) {
        if (capturedVariables != null) {
            for (final Map.Entry<Integer, Integer> capture : capturedVariables.entrySet()) {
                final Integer source = capture.getValue();
                if (source == symbol) {
                    return capture.getKey();
                }
            }
        }
        return null;
    }","  public void test20()  throws Throwable  {
      String[] stringArray0 = new String[0];
      Scope scope0 = new Scope((Scope) null, stringArray0);
      scope0.declareVariable(""G6$"");
      Scope scope1 = new Scope(scope0, stringArray0);
      scope1.declareVariable(""G6$"");
      Integer integer0 = scope1.getCaptured(0);
}"
2942,"    public Integer getCaptured(final int symbol) {
        if (capturedVariables != null) {
            for (final Map.Entry<Integer, Integer> capture : capturedVariables.entrySet()) {
                final Integer source = capture.getValue();
                if (source == symbol) {
                    return capture.getKey();
                }
            }
        }
        return null;
    }","  public void test21()  throws Throwable  {
      String[] stringArray0 = new String[0];
      Scope scope0 = new Scope((Scope) null, stringArray0);
      Integer integer0 = scope0.getCaptured(0);
}"
2943,"    public int declareVariable(final String name) {
        if (namedVariables == null) {
            namedVariables = new LinkedHashMap<String, Integer>();
        }
        Integer register = namedVariables.get(name);
        if (register == null) {
            register = namedVariables.size();
            namedVariables.put(name, register);
            vars += 1;
            // check if local is redefining captured
            if (parent != null) {
                final Integer pr = parent.getSymbol(name, true);
                if (pr != null) {
                    if (capturedVariables == null) {
                        capturedVariables = new LinkedHashMap<Integer, Integer>();
                    }
                    capturedVariables.put(register, pr);
                }
            }
        }
        return register;
    }","  public void test22()  throws Throwable  {
      String[] stringArray0 = new String[0];
      Scope scope0 = new Scope((Scope) null, stringArray0);
      scope0.declareVariable(""G6$"");
      Scope scope1 = new Scope(scope0, stringArray0);
      String[] stringArray1 = scope0.getSymbols();
      scope1.declareVariable(""G6$"");
      Frame frame0 = new Frame(scope1, stringArray1, 2);
}"
2944,"    public boolean equals(final Object o) {
        if (this == o) {
            return true;
        }
        if (!(o instanceof Scope)) {
            return false;
        }
        final Scope scope = (Scope) o;
        if (parms != scope.parms) {
            return false;
        }
        if (namedVariables == null) {
            return scope.namedVariables == null;
        }
        return namedVariables.equals(scope.namedVariables);
    }","  public void test23()  throws Throwable  {
      String[] stringArray0 = new String[0];
      Scope scope0 = new Scope((Scope) null, stringArray0);
      scope0.declareVariable(""G6$"");
      Scope scope1 = new Scope(scope0, stringArray0);
      String[] stringArray1 = scope0.getSymbols();
      scope1.declareVariable(""G6$"");
      Frame frame0 = new Frame(scope1, stringArray1, 2);
      Frame frame1 = scope1.createFrame(frame0, stringArray1);
}"
2945,"    public Frame createFrame(final Frame frame, final Object...args) {
        if (namedVariables == null) {
            return null;
        }
        final Object[] arguments = new Object[namedVariables.size()];
        Arrays.fill(arguments, UNDECLARED);
        if (frame != null && capturedVariables != null && parent != null) {
            for (final Map.Entry<Integer, Integer> capture : capturedVariables.entrySet()) {
                final Integer target = capture.getKey();
                final Integer source = capture.getValue();
                final Object arg = frame.get(source);
                arguments[target] = arg;
            }
        }
        return new Frame(this, arguments, 0).assign(args);
    }","  public void test24()  throws Throwable  {
      String[] stringArray0 = new String[0];
      Scope scope0 = new Scope((Scope) null, stringArray0);
      Frame frame0 = scope0.createFrame((Frame) null, stringArray0);
}"
2946,"    public int getArgCount() {
        return parms;
    }","  public void test25()  throws Throwable  {
      Scope scope0 = new Scope((Scope) null, (String[]) null);
      Frame frame0 = new Frame(scope0, (Object[]) null, (-45));
      scope0.createFrame(frame0, (Object[]) null);
}"
2947,"    public int getArgCount() {
        return parms;
    }","  public void test26()  throws Throwable  {
      String[] stringArray0 = new String[0];
      Scope scope0 = new Scope((Scope) null, stringArray0);
}"
2948,"    public Frame createFrame(final Frame frame, final Object...args) {
        if (namedVariables == null) {
            return null;
        }
        final Object[] arguments = new Object[namedVariables.size()];
        Arrays.fill(arguments, UNDECLARED);
        if (frame != null && capturedVariables != null && parent != null) {
            for (final Map.Entry<Integer, Integer> capture : capturedVariables.entrySet()) {
                final Integer target = capture.getKey();
                final Integer source = capture.getValue();
                final Object arg = frame.get(source);
                arguments[target] = arg;
            }
        }
        return new Frame(this, arguments, 0).assign(args);
    }","  public void test27()  throws Throwable  {
      String[] stringArray0 = new String[0];
      Scope scope0 = new Scope((Scope) null, stringArray0);
      Frame frame0 = new Frame((Scope) null, stringArray0, 0);
      Frame frame1 = scope0.createFrame(frame0, stringArray0);
}"
2949,"    public Frame createFrame(final Frame frame, final Object...args) {
        if (namedVariables == null) {
            return null;
        }
        final Object[] arguments = new Object[namedVariables.size()];
        Arrays.fill(arguments, UNDECLARED);
        if (frame != null && capturedVariables != null && parent != null) {
            for (final Map.Entry<Integer, Integer> capture : capturedVariables.entrySet()) {
                final Integer target = capture.getKey();
                final Integer source = capture.getValue();
                final Object arg = frame.get(source);
                arguments[target] = arg;
            }
        }
        return new Frame(this, arguments, 0).assign(args);
    }","  public void test28()  throws Throwable  {
      String[] stringArray0 = new String[0];
      Scope scope0 = new Scope((Scope) null, stringArray0);
      Frame frame0 = new Frame((Scope) null, stringArray0, 0);
      Frame frame1 = scope0.createFrame(frame0, stringArray0);
      String[] stringArray1 = frame1.getUnboundParameters();
}"
2950,"    public int declareVariable(final String name) {
        if (namedVariables == null) {
            namedVariables = new LinkedHashMap<String, Integer>();
        }
        Integer register = namedVariables.get(name);
        if (register == null) {
            register = namedVariables.size();
            namedVariables.put(name, register);
            vars += 1;
            // check if local is redefining captured
            if (parent != null) {
                final Integer pr = parent.getSymbol(name, true);
                if (pr != null) {
                    if (capturedVariables == null) {
                        capturedVariables = new LinkedHashMap<Integer, Integer>();
                    }
                    capturedVariables.put(register, pr);
                }
            }
        }
        return register;
    }","  public void test29()  throws Throwable  {
      String[] stringArray0 = new String[0];
      Scope scope0 = new Scope((Scope) null, stringArray0);
      scope0.declareVariable(""G6$"");
      int int0 = scope0.declareVariable(""G6$"");
}"
2951,"    public int declareParameter(final String name) {
        if (namedVariables == null) {
            namedVariables = new LinkedHashMap<String, Integer>();
        } else if (vars > 0) {
            throw new IllegalStateException(""cant declare parameters after variables"");
        }
        Integer register = namedVariables.get(name);
        if (register == null) {
            register = namedVariables.size();
            namedVariables.put(name, register);
            parms += 1;
        }
        return register;
    }","  public void test30()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = """";
      Scope scope0 = new Scope((Scope) null, stringArray0);
      int int0 = scope0.declareParameter("""");
}"
2952,"    public int getArgCount() {
        return parms;
    }","  public void test31()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = """";
      Scope scope0 = new Scope((Scope) null, stringArray0);
      int int0 = scope0.declareParameter("""");
}"
2953,"    public int declareParameter(final String name) {
        if (namedVariables == null) {
            namedVariables = new LinkedHashMap<String, Integer>();
        } else if (vars > 0) {
            throw new IllegalStateException(""cant declare parameters after variables"");
        }
        Integer register = namedVariables.get(name);
        if (register == null) {
            register = namedVariables.size();
            namedVariables.put(name, register);
            parms += 1;
        }
        return register;
    }","  public void test32()  throws Throwable  {
      String[] stringArray0 = new String[0];
      Scope scope0 = new Scope((Scope) null, stringArray0);
      scope0.declareVariable(""G6$"");
      // Undeclared exception!
      try { 
        scope0.declareParameter(""G6$"");
        fail(""Expecting exception: IllegalStateException"");
      } catch(IllegalStateException e) {
         //
         // cant declare parameters after variables
         //
         verifyException(""org.apache.commons.jexl3.internal.Scope"", e);
      }
  }"
2954,"    public int getArgCount() {
        return parms;
    }","  public void test33()  throws Throwable  {
      Scope scope0 = new Scope((Scope) null, (String[]) null);
      scope0.declareParameter("";N4rO%%Iz4t[wWSl"");
      int int0 = scope0.getArgCount();
}"
2955,"    public boolean isCapturedSymbol(final int symbol) {
        return capturedVariables != null && capturedVariables.containsKey(symbol);
    }","  public void test34()  throws Throwable  {
      String[] stringArray0 = new String[0];
      Scope scope0 = new Scope((Scope) null, stringArray0);
      scope0.declareVariable(""G6$"");
      Scope scope1 = new Scope(scope0, stringArray0);
      scope1.declareVariable(""G6$"");
      boolean boolean0 = scope1.isCapturedSymbol(0);
}"
2956,"    public boolean equals(final Object o) {
        if (this == o) {
            return true;
        }
        if (!(o instanceof Scope)) {
            return false;
        }
        final Scope scope = (Scope) o;
        if (parms != scope.parms) {
            return false;
        }
        if (namedVariables == null) {
            return scope.namedVariables == null;
        }
        return namedVariables.equals(scope.namedVariables);
    }","  public void test35()  throws Throwable  {
      String[] stringArray0 = new String[0];
      Scope scope0 = new Scope((Scope) null, stringArray0);
      scope0.declareVariable(""org.apache.commons.jexl3.internal.Frame"");
      Scope scope1 = new Scope(scope0, (String[]) null);
      scope1.getSymbol(""org.apache.commons.jexl3.internal.Frame"");
      boolean boolean0 = scope1.isCapturedSymbol(2);
}"
2957,"    public boolean isCapturedSymbol(final int symbol) {
        return capturedVariables != null && capturedVariables.containsKey(symbol);
    }","  public void test36()  throws Throwable  {
      String[] stringArray0 = new String[0];
      Scope scope0 = new Scope((Scope) null, stringArray0);
      scope0.declareVariable(""org.apache.commons.jexl3.internal.Frame"");
      Scope scope1 = new Scope(scope0, (String[]) null);
      scope1.getSymbol(""org.apache.commons.jexl3.internal.Frame"");
      boolean boolean0 = scope1.isCapturedSymbol(2);
}"
2958,"    public boolean isCapturedSymbol(final int symbol) {
        return capturedVariables != null && capturedVariables.containsKey(symbol);
    }","  public void test37()  throws Throwable  {
      String[] stringArray0 = new String[0];
      Scope scope0 = new Scope((Scope) null, stringArray0);
      boolean boolean0 = scope0.isCapturedSymbol(0);
}"
2959,"    public boolean equals(final Object o) {
        if (this == o) {
            return true;
        }
        if (!(o instanceof Scope)) {
            return false;
        }
        final Scope scope = (Scope) o;
        if (parms != scope.parms) {
            return false;
        }
        if (namedVariables == null) {
            return scope.namedVariables == null;
        }
        return namedVariables.equals(scope.namedVariables);
    }","  public void test38()  throws Throwable  {
      String[] stringArray0 = new String[0];
      Scope scope0 = new Scope((Scope) null, stringArray0);
      scope0.declareVariable(""G6$"");
      Scope scope1 = new Scope(scope0, stringArray0);
      scope1.declareVariable(""G6$"");
      scope0.declareVariable("""");
      scope1.getSymbol("""");
}"
2960,"    public Integer getSymbol(final String name) {
        return getSymbol(name, true);
    }","  public void test39()  throws Throwable  {
      String[] stringArray0 = new String[0];
      Scope scope0 = new Scope((Scope) null, stringArray0);
      Scope scope1 = new Scope(scope0, (String[]) null);
      Integer integer0 = scope1.getSymbol(""1S_G`AU@ d}H3Spi["");
}"
2961,"    public int getArgCount() {
        return parms;
    }","  public void test40()  throws Throwable  {
      String[] stringArray0 = new String[0];
      Scope scope0 = new Scope((Scope) null, stringArray0);
      Scope scope1 = new Scope(scope0, (String[]) null);
      Integer integer0 = scope1.getSymbol(""1S_G`AU@ d}H3Spi["");
}"
2962,"    public boolean equals(final Object o) {
        if (this == o) {
            return true;
        }
        if (!(o instanceof Scope)) {
            return false;
        }
        final Scope scope = (Scope) o;
        if (parms != scope.parms) {
            return false;
        }
        if (namedVariables == null) {
            return scope.namedVariables == null;
        }
        return namedVariables.equals(scope.namedVariables);
    }","  public void test41()  throws Throwable  {
      Scope scope0 = new Scope((Scope) null, (String[]) null);
      Scope scope1 = new Scope((Scope) null, (String[]) null);
      boolean boolean0 = scope0.equals(scope1);
}"
2963,"    public int getArgCount() {
        return parms;
    }","  public void test42()  throws Throwable  {
      Scope scope0 = new Scope((Scope) null, (String[]) null);
      Scope scope1 = new Scope((Scope) null, (String[]) null);
      boolean boolean0 = scope0.equals(scope1);
}"
2964,"    public boolean equals(final Object o) {
        if (this == o) {
            return true;
        }
        if (!(o instanceof Scope)) {
            return false;
        }
        final Scope scope = (Scope) o;
        if (parms != scope.parms) {
            return false;
        }
        if (namedVariables == null) {
            return scope.namedVariables == null;
        }
        return namedVariables.equals(scope.namedVariables);
    }","  public void test43()  throws Throwable  {
      Scope scope0 = new Scope((Scope) null, (String[]) null);
      scope0.declareVariable(""=sy{%||ITCZGxs+*6"");
      String[] stringArray0 = scope0.getLocalVariables();
      Scope scope1 = new Scope(scope0, stringArray0);
      boolean boolean0 = scope0.equals(scope1);
}"
2965,"    public boolean equals(final Object o) {
        if (this == o) {
            return true;
        }
        if (!(o instanceof Scope)) {
            return false;
        }
        final Scope scope = (Scope) o;
        if (parms != scope.parms) {
            return false;
        }
        if (namedVariables == null) {
            return scope.namedVariables == null;
        }
        return namedVariables.equals(scope.namedVariables);
    }","  public void test44()  throws Throwable  {
      Scope scope0 = new Scope((Scope) null, (String[]) null);
      scope0.declareVariable(""=sy{%||ITCZGxs+*6"");
      String[] stringArray0 = scope0.getLocalVariables();
      Scope scope1 = new Scope(scope0, stringArray0);
      boolean boolean0 = scope0.equals(scope1);
}"
2966,"    public boolean equals(final Object o) {
        if (this == o) {
            return true;
        }
        if (!(o instanceof Scope)) {
            return false;
        }
        final Scope scope = (Scope) o;
        if (parms != scope.parms) {
            return false;
        }
        if (namedVariables == null) {
            return scope.namedVariables == null;
        }
        return namedVariables.equals(scope.namedVariables);
    }","  public void test45()  throws Throwable  {
      Scope scope0 = new Scope((Scope) null, (String[]) null);
      scope0.declareVariable(""=sy{%||ITCZGxs+*6"");
      String[] stringArray0 = scope0.getLocalVariables();
      Scope scope1 = new Scope(scope0, stringArray0);
      boolean boolean0 = scope0.equals(scope1);
}"
2967,"    public boolean equals(final Object o) {
        if (this == o) {
            return true;
        }
        if (!(o instanceof Scope)) {
            return false;
        }
        final Scope scope = (Scope) o;
        if (parms != scope.parms) {
            return false;
        }
        if (namedVariables == null) {
            return scope.namedVariables == null;
        }
        return namedVariables.equals(scope.namedVariables);
    }","  public void test46()  throws Throwable  {
      Scope scope0 = new Scope((Scope) null, (String[]) null);
      Object object0 = new Object();
      boolean boolean0 = scope0.equals(object0);
}"
2968,"    public int getArgCount() {
        return parms;
    }","  public void test47()  throws Throwable  {
      Scope scope0 = new Scope((Scope) null, (String[]) null);
      Object object0 = new Object();
      boolean boolean0 = scope0.equals(object0);
}"
2969,"    public int getArgCount() {
        return parms;
    }","  public void test48()  throws Throwable  {
      Scope scope0 = new Scope((Scope) null, (String[]) null);
      boolean boolean0 = scope0.equals(scope0);
}"
2970,"    public boolean equals(final Object o) {
        if (this == o) {
            return true;
        }
        if (!(o instanceof Scope)) {
            return false;
        }
        final Scope scope = (Scope) o;
        if (parms != scope.parms) {
            return false;
        }
        if (namedVariables == null) {
            return scope.namedVariables == null;
        }
        return namedVariables.equals(scope.namedVariables);
    }","  public void test49()  throws Throwable  {
      Scope scope0 = new Scope((Scope) null, (String[]) null);
      boolean boolean0 = scope0.equals(scope0);
}"
2971,"    public int getArgCount() {
        return parms;
    }","  public void test50()  throws Throwable  {
      Scope scope0 = new Scope((Scope) null, (String[]) null);
      String[] stringArray0 = scope0.getLocalVariables();
      Scope scope1 = new Scope((Scope) null, stringArray0);
      boolean boolean0 = scope0.equals(scope1);
}"
2972,"    public boolean equals(final Object o) {
        if (this == o) {
            return true;
        }
        if (!(o instanceof Scope)) {
            return false;
        }
        final Scope scope = (Scope) o;
        if (parms != scope.parms) {
            return false;
        }
        if (namedVariables == null) {
            return scope.namedVariables == null;
        }
        return namedVariables.equals(scope.namedVariables);
    }","  public void test51()  throws Throwable  {
      Scope scope0 = new Scope((Scope) null, (String[]) null);
      String[] stringArray0 = scope0.getLocalVariables();
      Scope scope1 = new Scope((Scope) null, stringArray0);
      boolean boolean0 = scope0.equals(scope1);
}"
2973,"    public boolean equals(final Object o) {
        if (this == o) {
            return true;
        }
        if (!(o instanceof Scope)) {
            return false;
        }
        final Scope scope = (Scope) o;
        if (parms != scope.parms) {
            return false;
        }
        if (namedVariables == null) {
            return scope.namedVariables == null;
        }
        return namedVariables.equals(scope.namedVariables);
    }","  public void test52()  throws Throwable  {
      Scope scope0 = new Scope((Scope) null, (String[]) null);
      String[] stringArray0 = scope0.getLocalVariables();
      Scope scope1 = new Scope((Scope) null, stringArray0);
      boolean boolean0 = scope0.equals(scope1);
}"
2974,"    public int getArgCount() {
        return parms;
    }","  public void test53()  throws Throwable  {
      Scope scope0 = new Scope((Scope) null, (String[]) null);
      scope0.hashCode();
}"
2975,"    public String[] getLocalVariables() {
        if ((namedVariables == null) || (vars <= 0)) {
            return EMPTY_STRS;
        }
        final List<String> locals = new ArrayList<String>(vars);
        for (final Map.Entry<String, Integer> entry : namedVariables.entrySet()) {
            final int symnum = entry.getValue();
            if (symnum >= parms && (capturedVariables == null || !capturedVariables.containsKey(symnum))) {
                locals.add(entry.getKey());
            }
        }
        return locals.toArray(new String[locals.size()]);
    }","  public void test54()  throws Throwable  {
      String[] stringArray0 = new String[1];
      Scope scope0 = new Scope((Scope) null, stringArray0);
      scope0.declareVariable(""lW(G^y^x+qJ"");
      String[] stringArray1 = scope0.getLocalVariables();
}"
2976,"    public boolean equals(final Object o) {
        if (this == o) {
            return true;
        }
        if (!(o instanceof Scope)) {
            return false;
        }
        final Scope scope = (Scope) o;
        if (parms != scope.parms) {
            return false;
        }
        if (namedVariables == null) {
            return scope.namedVariables == null;
        }
        return namedVariables.equals(scope.namedVariables);
    }","  public void test55()  throws Throwable  {
      String[] stringArray0 = new String[0];
      Scope scope0 = new Scope((Scope) null, stringArray0);
      Scope scope1 = new Scope(scope0, (String[]) null);
      boolean boolean0 = scope0.equals(scope1);
}"
2977,"    public int getArgCount() {
        return parms;
    }","  public void test56()  throws Throwable  {
      String[] stringArray0 = new String[0];
      Scope scope0 = new Scope((Scope) null, stringArray0);
      Scope scope1 = new Scope(scope0, (String[]) null);
      boolean boolean0 = scope0.equals(scope1);
}"
2978,"    public int getArgCount() {
        return parms;
    }","  public void test57()  throws Throwable  {
      Scope scope0 = new Scope((Scope) null, (String[]) null);
      int int0 = scope0.getArgCount();
}"
2979,"    public int getArgCount() {
        return parms;
    }","  public void test58()  throws Throwable  {
      Scope scope0 = new Scope((Scope) null, (String[]) null);
      scope0.getParameters();
}"
2980,"    public int size() {
        return size;
    }","  public void test0()  throws Throwable  {
      SoftCache<Object, HashMap<Object, Object>> softCache0 = new SoftCache<Object, HashMap<Object, Object>>(0);
      int int0 = softCache0.size();
}"
2981,"    public int size() {
        return size;
    }","  public void test1()  throws Throwable  {
      SoftCache<Object, Integer> softCache0 = new SoftCache<Object, Integer>((-1));
      int int0 = softCache0.size();
}"
2982,"    public int size() {
        return size;
    }","  public void test2()  throws Throwable  {
      SoftCache<Integer, String> softCache0 = new SoftCache<Integer, String>(0);
      Integer integer0 = new Integer(1049);
      softCache0.put(integer0, ""6J9c)Q"");
      List<Map.Entry<Integer, String>> list0 = (List<Map.Entry<Integer, String>>)softCache0.entries();
}"
2983,"    public int size() {
        return size;
    }","  public void test3()  throws Throwable  {
      SoftCache<Integer, String> softCache0 = new SoftCache<Integer, String>(0);
      Integer integer0 = new Integer(1049);
      softCache0.put(integer0, ""6J9c)Q"");
      List<Map.Entry<Integer, String>> list0 = (List<Map.Entry<Integer, String>>)softCache0.entries();
}"
2984,"    public void put(final K key, final V script) {
        lock.writeLock().lock();
        try {
            Map<K, V> map = ref != null ? ref.get() : null;
            if (map == null) {
                map = createCache(size);
                ref = new SoftReference<Map<K, V>>(map);
            }
            map.put(key, script);
        } finally {
            lock.writeLock().unlock();
        }
    }","  public void test4()  throws Throwable  {
      SoftCache<String, Integer> softCache0 = new SoftCache<String, Integer>((-1682));
      Integer integer0 = new Integer(0);
      // Undeclared exception!
      try { 
        softCache0.put("""", integer0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Illegal initial capacity: -1682
         //
         verifyException(""java.util.HashMap"", e);
      }
  }"
2985,"    public <K, V> Map<K, V> createCache(final int cacheSize) {
        return new java.util.LinkedHashMap<K, V>(cacheSize, LOAD_FACTOR, true) {
            /**
             * Serial version UID.
             */
            private static final long serialVersionUID = 1L;

            @Override
            protected boolean removeEldestEntry(final Map.Entry<K, V> eldest) {
                return super.size() > cacheSize;
            }
        };
    }","  public void test5()  throws Throwable  {
      SoftCache<AbstractMap.SimpleEntry<Object, String>, Integer> softCache0 = new SoftCache<AbstractMap.SimpleEntry<Object, String>, Integer>((-1));
      // Undeclared exception!
      try { 
        softCache0.createCache((-1));
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Illegal initial capacity: -1
         //
         verifyException(""java.util.HashMap"", e);
      }
  }"
2986,"    public int size() {
        return size;
    }","  public void test6()  throws Throwable  {
      SoftCache<Object, String> softCache0 = new SoftCache<Object, String>(2169);
      Object object0 = new Object();
      softCache0.put(object0, "">"");
      List<Map.Entry<Object, String>> list0 = (List<Map.Entry<Object, String>>)softCache0.entries();
}"
2987,"    public int size() {
        return size;
    }","  public void test7()  throws Throwable  {
      SoftCache<Object, String> softCache0 = new SoftCache<Object, String>(2169);
      Object object0 = new Object();
      softCache0.put(object0, "">"");
      List<Map.Entry<Object, String>> list0 = (List<Map.Entry<Object, String>>)softCache0.entries();
}"
2988,"    public int size() {
        return size;
    }","  public void test8()  throws Throwable  {
      SoftCache<Object, Integer> softCache0 = new SoftCache<Object, Integer>(896);
      softCache0.entries();
}"
2989,"    public int size() {
        return size;
    }","  public void test9()  throws Throwable  {
      SoftCache<String, Object> softCache0 = new SoftCache<String, Object>(1);
      softCache0.put((String) null, (Object) null);
      softCache0.put("""", """");
}"
2990,"    public V get(final K key) {
        lock.readLock().lock();
        try {
            final Map<K, V> map = ref != null ? ref.get() : null;
            return map != null ? map.get(key) : null;
        } finally {
            lock.readLock().unlock();
        }
    }","  public void test10()  throws Throwable  {
      SoftCache<Object, HashMap<String, String>> softCache0 = new SoftCache<Object, HashMap<String, String>>(896);
      Object object0 = new Object();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      softCache0.put(object0, hashMap0);
      HashMap<String, String> hashMap1 = softCache0.get(object0);
}"
2991,"    public int size() {
        return size;
    }","  public void test11()  throws Throwable  {
      SoftCache<Object, HashMap<String, String>> softCache0 = new SoftCache<Object, HashMap<String, String>>(896);
      Object object0 = new Object();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      softCache0.put(object0, hashMap0);
      HashMap<String, String> hashMap1 = softCache0.get(object0);
}"
2992,"    public int size() {
        return size;
    }","  public void test12()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      SoftCache<Object, Integer> softCache0 = new SoftCache<Object, Integer>(896);
      softCache0.get(hashMap0);
}"
2993,"    public int size() {
        return size;
    }","  public void test13()  throws Throwable  {
      SoftCache<Integer, AbstractMap.SimpleEntry<Object, Object>> softCache0 = new SoftCache<Integer, AbstractMap.SimpleEntry<Object, Object>>(0);
      softCache0.createCache(0);
}"
2994,"    public int size() {
        return size;
    }","  public void test14()  throws Throwable  {
      SoftCache<String, AbstractMap.SimpleImmutableEntry<Integer, Object>> softCache0 = new SoftCache<String, AbstractMap.SimpleImmutableEntry<Integer, Object>>(837);
      int int0 = softCache0.size();
}"
2995,"    public int size() {
        return size;
    }","  public void test15()  throws Throwable  {
      SoftCache<String, Object> softCache0 = new SoftCache<String, Object>(0);
      softCache0.clear();
}"
2996,,"  public void test0()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlSandbox jexlSandbox0 = new JexlSandbox(true);
      Engine engine0 = new Engine(jexlBuilder0);
      TemplateEngine templateEngine0 = engine0.jxlt();
      ASTSetOrNode aSTSetOrNode0 = new ASTSetOrNode((-993));
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) ""?"");
      TemplateEngine.ConstantExpression templateEngine_ConstantExpression0 = templateEngine0.new ConstantExpression(jexlSandbox0, (TemplateEngine.TemplateExpression) null);
      TemplateEngine.DeferredExpression templateEngine_DeferredExpression0 = templateEngine0.new DeferredExpression(charBuffer0, aSTSetOrNode0, templateEngine_ConstantExpression0);
      StringBuilder stringBuilder0 = new StringBuilder(""?"");
      templateEngine_DeferredExpression0.asString(stringBuilder0);
}"
2997,,"  public void test1()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlSandbox jexlSandbox0 = new JexlSandbox(true);
      Engine engine0 = new Engine(jexlBuilder0);
      TemplateEngine templateEngine0 = engine0.jxlt();
      ASTSetOrNode aSTSetOrNode0 = new ASTSetOrNode((-993));
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) ""?"");
      TemplateEngine.ConstantExpression templateEngine_ConstantExpression0 = templateEngine0.new ConstantExpression(jexlSandbox0, (TemplateEngine.TemplateExpression) null);
      TemplateEngine.DeferredExpression templateEngine_DeferredExpression0 = templateEngine0.new DeferredExpression(charBuffer0, aSTSetOrNode0, templateEngine_ConstantExpression0);
      StringBuilder stringBuilder0 = new StringBuilder(""?"");
      templateEngine_DeferredExpression0.asString(stringBuilder0);
}"
2998,"    TemplateExpression parseExpression(final JexlInfo info, final String expr, final Scope scope) {  // CSOFF: MethodLength
        final int size = expr.length();
        final ExpressionBuilder builder = new ExpressionBuilder(0);
        final StringBuilder strb = new StringBuilder(size);
        ParseState state = ParseState.CONST;
        int immediate1 = 0;
        int deferred1 = 0;
        int inner1 = 0;
        boolean nested = false;
        int inested = -1;
        int lineno = info.getLine();
        for (int column = 0; column < size; ++column) {
            final char c = expr.charAt(column);
            switch (state) {
                default: // in case we ever add new unified expression type
                    throw new UnsupportedOperationException(""unexpected unified expression type"");
                case CONST:
                    if (c == immediateChar) {
                        state = ParseState.IMMEDIATE0;
                    } else if (c == deferredChar) {
                        inested = column;
                        state = ParseState.DEFERRED0;
                    } else if (c == '\\') {
                        state = ParseState.ESCAPE;
                    } else {
                        // do buildup expr
                        strb.append(c);
                    }
                    break;
                case IMMEDIATE0: // $
                    if (c == '{') {
                        state = ParseState.IMMEDIATE1;
                        // if chars in buffer, create constant
                        if (strb.length() > 0) {
                            final TemplateExpression cexpr = new ConstantExpression(strb.toString(), null);
                            builder.add(cexpr);
                            strb.delete(0, Integer.MAX_VALUE);
                        }
                    } else {
                        // revert to CONST
                        strb.append(immediateChar);
                        strb.append(c);
                        state = ParseState.CONST;
                    }
                    break;
                case DEFERRED0: // #
                    if (c == '{') {
                        state = ParseState.DEFERRED1;
                        // if chars in buffer, create constant
                        if (strb.length() > 0) {
                            final TemplateExpression cexpr = new ConstantExpression(strb.toString(), null);
                            builder.add(cexpr);
                            strb.delete(0, Integer.MAX_VALUE);
                        }
                    } else {
                        // revert to CONST
                        strb.append(deferredChar);
                        strb.append(c);
                        state = ParseState.CONST;
                    }
                    break;
                case IMMEDIATE1: // ${...
                    if (c == '}') {
                        if (immediate1 > 0) {
                            immediate1 -= 1;
                            strb.append(c);
                        } else {
                            // materialize the immediate expr
                            final String src = strb.toString();
                            final TemplateExpression iexpr = new ImmediateExpression(
                                    src,
                                    jexl.parse(info.at(lineno, column), noscript, src, scope),
                                    null);
                            builder.add(iexpr);
                            strb.delete(0, Integer.MAX_VALUE);
                            state = ParseState.CONST;
                        }
                    } else {
                        if (c == '{') {
                            immediate1 += 1;
                        }
                        // do buildup expr
                        column = append(strb, expr, column, c);
                    }
                    break;
                case DEFERRED1: // #{...
                    // skip inner strings (for '}')
                    if (c == '""' || c == '\'') {
                        strb.append(c);
                        column = StringParser.readString(strb, expr, column + 1, c);
                        continue;
                    }
                    // nested immediate in deferred; need to balance count of '{' & '}'
                    if (c == '{') {
                        if (expr.charAt(column - 1) == immediateChar) {
                            inner1 += 1;
                            strb.deleteCharAt(strb.length() - 1);
                            nested = true;
                        } else {
                            deferred1 += 1;
                            strb.append(c);
                        }
                        continue;
                    }
                    // closing '}'
                    if (c == '}') {
                        // balance nested immediate
                        if (deferred1 > 0) {
                            deferred1 -= 1;
                            strb.append(c);
                        } else if (inner1 > 0) {
                            inner1 -= 1;
                        } else  {
                            // materialize the nested/deferred expr
                            final String src = strb.toString();
                            TemplateExpression dexpr;
                            if (nested) {
                                dexpr = new NestedExpression(
                                        expr.substring(inested, column + 1),
                                        jexl.parse(info.at(lineno, column), noscript, src, scope),
                                        null);
                            } else {
                                dexpr = new DeferredExpression(
                                        strb.toString(),
                                        jexl.parse(info.at(lineno, column), noscript, src, scope),
                                        null);
                            }
                            builder.add(dexpr);
                            strb.delete(0, Integer.MAX_VALUE);
                            nested = false;
                            state = ParseState.CONST;
                        }
                    } else {
                        // do buildup expr
                        column = append(strb, expr, column, c);
                    }
                    break;
                case ESCAPE:
                    if (c == deferredChar) {
                        strb.append(deferredChar);
                    } else if (c == immediateChar) {
                        strb.append(immediateChar);
                    } else {
                        strb.append('\\');
                        strb.append(c);
                    }
                    state = ParseState.CONST;
            }
            if (c == '\n') {
                lineno += 1;
            }
        }
        // we should be in that state
        if (state != ParseState.CONST) {
            // otherwise, we ended a line with a \, $ or #
            switch (state) {
                case ESCAPE:
                    strb.append('\\');
                    strb.append('\\');
                    break;
                case DEFERRED0:
                    strb.append(deferredChar);
                    break;
                case IMMEDIATE0:
                    strb.append(immediateChar);
                    break;
                default:
                    throw new Exception(info.at(lineno, 0), ""malformed expression: "" + expr, null);
            }
        }
        // if any chars were buffered, add them as a constant
        if (strb.length() > 0) {
            final TemplateExpression cexpr = new ConstantExpression(strb.toString(), null);
            builder.add(cexpr);
        }
        return builder.build(this, null);
    }","  public void test2()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      TemplateEngine templateEngine0 = engine0.jxlt();
      JexlInfo jexlInfo0 = new JexlInfo(""$,ALwi*W*y><o*]:"", 0, 0);
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[3];
      Scope scope1 = new Scope(scope0, stringArray0);
      TemplateEngine.ConstantExpression templateEngine_ConstantExpression0 = (TemplateEngine.ConstantExpression)templateEngine0.parseExpression(jexlInfo0, ""$,ALwi*W*y><o*]:"", scope1);
      Frame frame0 = new Frame(scope1, stringArray0, 0);
      JexlOptions jexlOptions0 = new JexlOptions();
      Interpreter interpreter0 = new Interpreter(engine0, jexlOptions0, engine0.EMPTY_CONTEXT, frame0);
      TemplateEngine.ConstantExpression templateEngine_ConstantExpression1 = (TemplateEngine.ConstantExpression)templateEngine_ConstantExpression0.prepare(interpreter0);
}"
2999,"    TemplateExpression parseExpression(final JexlInfo info, final String expr, final Scope scope) {  // CSOFF: MethodLength
        final int size = expr.length();
        final ExpressionBuilder builder = new ExpressionBuilder(0);
        final StringBuilder strb = new StringBuilder(size);
        ParseState state = ParseState.CONST;
        int immediate1 = 0;
        int deferred1 = 0;
        int inner1 = 0;
        boolean nested = false;
        int inested = -1;
        int lineno = info.getLine();
        for (int column = 0; column < size; ++column) {
            final char c = expr.charAt(column);
            switch (state) {
                default: // in case we ever add new unified expression type
                    throw new UnsupportedOperationException(""unexpected unified expression type"");
                case CONST:
                    if (c == immediateChar) {
                        state = ParseState.IMMEDIATE0;
                    } else if (c == deferredChar) {
                        inested = column;
                        state = ParseState.DEFERRED0;
                    } else if (c == '\\') {
                        state = ParseState.ESCAPE;
                    } else {
                        // do buildup expr
                        strb.append(c);
                    }
                    break;
                case IMMEDIATE0: // $
                    if (c == '{') {
                        state = ParseState.IMMEDIATE1;
                        // if chars in buffer, create constant
                        if (strb.length() > 0) {
                            final TemplateExpression cexpr = new ConstantExpression(strb.toString(), null);
                            builder.add(cexpr);
                            strb.delete(0, Integer.MAX_VALUE);
                        }
                    } else {
                        // revert to CONST
                        strb.append(immediateChar);
                        strb.append(c);
                        state = ParseState.CONST;
                    }
                    break;
                case DEFERRED0: // #
                    if (c == '{') {
                        state = ParseState.DEFERRED1;
                        // if chars in buffer, create constant
                        if (strb.length() > 0) {
                            final TemplateExpression cexpr = new ConstantExpression(strb.toString(), null);
                            builder.add(cexpr);
                            strb.delete(0, Integer.MAX_VALUE);
                        }
                    } else {
                        // revert to CONST
                        strb.append(deferredChar);
                        strb.append(c);
                        state = ParseState.CONST;
                    }
                    break;
                case IMMEDIATE1: // ${...
                    if (c == '}') {
                        if (immediate1 > 0) {
                            immediate1 -= 1;
                            strb.append(c);
                        } else {
                            // materialize the immediate expr
                            final String src = strb.toString();
                            final TemplateExpression iexpr = new ImmediateExpression(
                                    src,
                                    jexl.parse(info.at(lineno, column), noscript, src, scope),
                                    null);
                            builder.add(iexpr);
                            strb.delete(0, Integer.MAX_VALUE);
                            state = ParseState.CONST;
                        }
                    } else {
                        if (c == '{') {
                            immediate1 += 1;
                        }
                        // do buildup expr
                        column = append(strb, expr, column, c);
                    }
                    break;
                case DEFERRED1: // #{...
                    // skip inner strings (for '}')
                    if (c == '""' || c == '\'') {
                        strb.append(c);
                        column = StringParser.readString(strb, expr, column + 1, c);
                        continue;
                    }
                    // nested immediate in deferred; need to balance count of '{' & '}'
                    if (c == '{') {
                        if (expr.charAt(column - 1) == immediateChar) {
                            inner1 += 1;
                            strb.deleteCharAt(strb.length() - 1);
                            nested = true;
                        } else {
                            deferred1 += 1;
                            strb.append(c);
                        }
                        continue;
                    }
                    // closing '}'
                    if (c == '}') {
                        // balance nested immediate
                        if (deferred1 > 0) {
                            deferred1 -= 1;
                            strb.append(c);
                        } else if (inner1 > 0) {
                            inner1 -= 1;
                        } else  {
                            // materialize the nested/deferred expr
                            final String src = strb.toString();
                            TemplateExpression dexpr;
                            if (nested) {
                                dexpr = new NestedExpression(
                                        expr.substring(inested, column + 1),
                                        jexl.parse(info.at(lineno, column), noscript, src, scope),
                                        null);
                            } else {
                                dexpr = new DeferredExpression(
                                        strb.toString(),
                                        jexl.parse(info.at(lineno, column), noscript, src, scope),
                                        null);
                            }
                            builder.add(dexpr);
                            strb.delete(0, Integer.MAX_VALUE);
                            nested = false;
                            state = ParseState.CONST;
                        }
                    } else {
                        // do buildup expr
                        column = append(strb, expr, column, c);
                    }
                    break;
                case ESCAPE:
                    if (c == deferredChar) {
                        strb.append(deferredChar);
                    } else if (c == immediateChar) {
                        strb.append(immediateChar);
                    } else {
                        strb.append('\\');
                        strb.append(c);
                    }
                    state = ParseState.CONST;
            }
            if (c == '\n') {
                lineno += 1;
            }
        }
        // we should be in that state
        if (state != ParseState.CONST) {
            // otherwise, we ended a line with a \, $ or #
            switch (state) {
                case ESCAPE:
                    strb.append('\\');
                    strb.append('\\');
                    break;
                case DEFERRED0:
                    strb.append(deferredChar);
                    break;
                case IMMEDIATE0:
                    strb.append(immediateChar);
                    break;
                default:
                    throw new Exception(info.at(lineno, 0), ""malformed expression: "" + expr, null);
            }
        }
        // if any chars were buffered, add them as a constant
        if (strb.length() > 0) {
            final TemplateExpression cexpr = new ConstantExpression(strb.toString(), null);
            builder.add(cexpr);
        }
        return builder.build(this, null);
    }","  public void test3()  throws Throwable  {
      Engine engine0 = new Engine();
      TemplateEngine templateEngine0 = engine0.createJxltEngine(false, 144, 'e', 'e');
      JexlInfo jexlInfo0 = new JexlInfo();
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[6];
      Scope scope1 = new Scope(scope0, stringArray0);
      TemplateEngine.CompositeExpression templateEngine_CompositeExpression0 = (TemplateEngine.CompositeExpression)templateEngine0.parseExpression(jexlInfo0, """", scope1);
      templateEngine_CompositeExpression0.options(engine0.EMPTY_CONTEXT);
}"
3000,,"  public void test4()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      TemplateEngine templateEngine0 = engine0.jxlt();
      StringBuffer stringBuffer0 = new StringBuffer(6);
      Parser parser0 = new Parser("""");
      ASTFalseNode aSTFalseNode0 = new ASTFalseNode(parser0, 6);
      TemplateEngine.NestedExpression templateEngine_NestedExpression0 = templateEngine0.new NestedExpression(stringBuffer0, aSTFalseNode0, (TemplateEngine.TemplateExpression) null);
      TemplateEngine.DeferredExpression templateEngine_DeferredExpression0 = templateEngine0.new DeferredExpression(stringBuffer0, (JexlNode) null, templateEngine_NestedExpression0);
      boolean boolean0 = templateEngine_DeferredExpression0.isImmediate();
}"
3001,,"  public void test5()  throws Throwable  {
      Engine engine0 = new Engine();
      TemplateEngine templateEngine0 = engine0.createJxltEngine(false, 0, 'p', 'p');
      TemplateEngine.NestedExpression templateEngine_NestedExpression0 = templateEngine0.new NestedExpression((CharSequence) null, (JexlNode) null, (TemplateEngine.TemplateExpression) null);
      // Undeclared exception!
      try { 
        templateEngine_NestedExpression0.prepare((Interpreter) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.internal.TemplateEngine$NestedExpression"", e);
      }
  }"
3002,,"  public void test6()  throws Throwable  {
      Engine engine0 = new Engine();
      TemplateEngine templateEngine0 = engine0.createJxltEngine(false, 0, 'p', 'p');
      TemplateEngine.NestedExpression templateEngine_NestedExpression0 = templateEngine0.new NestedExpression((CharSequence) null, (JexlNode) null, (TemplateEngine.TemplateExpression) null);
      StringBuilder stringBuilder0 = new StringBuilder(0);
      StringBuilder stringBuilder1 = templateEngine_NestedExpression0.asString(stringBuilder0);
}"
3003,,"  public void test7()  throws Throwable  {
      Engine engine0 = new Engine();
      TemplateEngine templateEngine0 = engine0.createJxltEngine(false, 1635, '4', 'R');
      CharBuffer charBuffer0 = CharBuffer.allocate('4');
      ASTTernaryNode aSTTernaryNode0 = new ASTTernaryNode((-864));
      TemplateEngine.ImmediateExpression templateEngine_ImmediateExpression0 = templateEngine0.new ImmediateExpression(charBuffer0, aSTTernaryNode0, (TemplateEngine.TemplateExpression) null);
      JexlOptions jexlOptions0 = templateEngine_ImmediateExpression0.options(engine0.EMPTY_CONTEXT);
}"
3004,"    TemplateExpression parseExpression(final JexlInfo info, final String expr, final Scope scope) {  // CSOFF: MethodLength
        final int size = expr.length();
        final ExpressionBuilder builder = new ExpressionBuilder(0);
        final StringBuilder strb = new StringBuilder(size);
        ParseState state = ParseState.CONST;
        int immediate1 = 0;
        int deferred1 = 0;
        int inner1 = 0;
        boolean nested = false;
        int inested = -1;
        int lineno = info.getLine();
        for (int column = 0; column < size; ++column) {
            final char c = expr.charAt(column);
            switch (state) {
                default: // in case we ever add new unified expression type
                    throw new UnsupportedOperationException(""unexpected unified expression type"");
                case CONST:
                    if (c == immediateChar) {
                        state = ParseState.IMMEDIATE0;
                    } else if (c == deferredChar) {
                        inested = column;
                        state = ParseState.DEFERRED0;
                    } else if (c == '\\') {
                        state = ParseState.ESCAPE;
                    } else {
                        // do buildup expr
                        strb.append(c);
                    }
                    break;
                case IMMEDIATE0: // $
                    if (c == '{') {
                        state = ParseState.IMMEDIATE1;
                        // if chars in buffer, create constant
                        if (strb.length() > 0) {
                            final TemplateExpression cexpr = new ConstantExpression(strb.toString(), null);
                            builder.add(cexpr);
                            strb.delete(0, Integer.MAX_VALUE);
                        }
                    } else {
                        // revert to CONST
                        strb.append(immediateChar);
                        strb.append(c);
                        state = ParseState.CONST;
                    }
                    break;
                case DEFERRED0: // #
                    if (c == '{') {
                        state = ParseState.DEFERRED1;
                        // if chars in buffer, create constant
                        if (strb.length() > 0) {
                            final TemplateExpression cexpr = new ConstantExpression(strb.toString(), null);
                            builder.add(cexpr);
                            strb.delete(0, Integer.MAX_VALUE);
                        }
                    } else {
                        // revert to CONST
                        strb.append(deferredChar);
                        strb.append(c);
                        state = ParseState.CONST;
                    }
                    break;
                case IMMEDIATE1: // ${...
                    if (c == '}') {
                        if (immediate1 > 0) {
                            immediate1 -= 1;
                            strb.append(c);
                        } else {
                            // materialize the immediate expr
                            final String src = strb.toString();
                            final TemplateExpression iexpr = new ImmediateExpression(
                                    src,
                                    jexl.parse(info.at(lineno, column), noscript, src, scope),
                                    null);
                            builder.add(iexpr);
                            strb.delete(0, Integer.MAX_VALUE);
                            state = ParseState.CONST;
                        }
                    } else {
                        if (c == '{') {
                            immediate1 += 1;
                        }
                        // do buildup expr
                        column = append(strb, expr, column, c);
                    }
                    break;
                case DEFERRED1: // #{...
                    // skip inner strings (for '}')
                    if (c == '""' || c == '\'') {
                        strb.append(c);
                        column = StringParser.readString(strb, expr, column + 1, c);
                        continue;
                    }
                    // nested immediate in deferred; need to balance count of '{' & '}'
                    if (c == '{') {
                        if (expr.charAt(column - 1) == immediateChar) {
                            inner1 += 1;
                            strb.deleteCharAt(strb.length() - 1);
                            nested = true;
                        } else {
                            deferred1 += 1;
                            strb.append(c);
                        }
                        continue;
                    }
                    // closing '}'
                    if (c == '}') {
                        // balance nested immediate
                        if (deferred1 > 0) {
                            deferred1 -= 1;
                            strb.append(c);
                        } else if (inner1 > 0) {
                            inner1 -= 1;
                        } else  {
                            // materialize the nested/deferred expr
                            final String src = strb.toString();
                            TemplateExpression dexpr;
                            if (nested) {
                                dexpr = new NestedExpression(
                                        expr.substring(inested, column + 1),
                                        jexl.parse(info.at(lineno, column), noscript, src, scope),
                                        null);
                            } else {
                                dexpr = new DeferredExpression(
                                        strb.toString(),
                                        jexl.parse(info.at(lineno, column), noscript, src, scope),
                                        null);
                            }
                            builder.add(dexpr);
                            strb.delete(0, Integer.MAX_VALUE);
                            nested = false;
                            state = ParseState.CONST;
                        }
                    } else {
                        // do buildup expr
                        column = append(strb, expr, column, c);
                    }
                    break;
                case ESCAPE:
                    if (c == deferredChar) {
                        strb.append(deferredChar);
                    } else if (c == immediateChar) {
                        strb.append(immediateChar);
                    } else {
                        strb.append('\\');
                        strb.append(c);
                    }
                    state = ParseState.CONST;
            }
            if (c == '\n') {
                lineno += 1;
            }
        }
        // we should be in that state
        if (state != ParseState.CONST) {
            // otherwise, we ended a line with a \, $ or #
            switch (state) {
                case ESCAPE:
                    strb.append('\\');
                    strb.append('\\');
                    break;
                case DEFERRED0:
                    strb.append(deferredChar);
                    break;
                case IMMEDIATE0:
                    strb.append(immediateChar);
                    break;
                default:
                    throw new Exception(info.at(lineno, 0), ""malformed expression: "" + expr, null);
            }
        }
        // if any chars were buffered, add them as a constant
        if (strb.length() > 0) {
            final TemplateExpression cexpr = new ConstantExpression(strb.toString(), null);
            builder.add(cexpr);
        }
        return builder.build(this, null);
    }","  public void test8()  throws Throwable  {
      Engine engine0 = new Engine();
      TemplateEngine templateEngine0 = new TemplateEngine(engine0, true, 39, 'o', 'o');
      JexlInfo jexlInfo0 = engine0.createInfo();
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[0];
      Scope scope1 = new Scope(scope0, stringArray0);
      TemplateEngine.TemplateExpression templateEngine_TemplateExpression0 = templateEngine0.parseExpression(jexlInfo0, """", scope1);
      ASTEQNode aSTEQNode0 = new ASTEQNode(39);
      TemplateEngine.DeferredExpression templateEngine_DeferredExpression0 = templateEngine0.new DeferredExpression("""", aSTEQNode0, templateEngine_TemplateExpression0);
      Parser parser0 = new Parser("""");
      ASTJexlScript aSTJexlScript0 = new ASTJexlScript(parser0, 39);
      JexlOptions jexlOptions0 = engine0.options(aSTJexlScript0, (JexlContext) null);
      Script script0 = new Script(engine0, """", aSTJexlScript0);
      Closure closure0 = new Closure(script0, stringArray0);
      Frame frame0 = closure0.frame;
      Interpreter interpreter0 = new Interpreter(engine0, jexlOptions0, engine0.EMPTY_CONTEXT, frame0);
      // Undeclared exception!
      try { 
        templateEngine_DeferredExpression0.evaluate(interpreter0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.parser.SimpleNode"", e);
      }
  }"
3005,"    public TemplateEngine(final Engine aJexl,
                          final boolean noScript,
                          final int cacheSize,
                          final char immediate,
                          final char deferred) {
        this.jexl = aJexl;
        this.cache = new SoftCache<>(cacheSize);
        immediateChar = immediate;
        deferredChar = deferred;
        noscript = noScript;
    }","  public void test9()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      TemplateEngine templateEngine0 = new TemplateEngine(engine0, true, (-1796), 'o', '0');
      TemplateEngine.ImmediateExpression templateEngine_ImmediateExpression0 = templateEngine0.new ImmediateExpression("""", (JexlNode) null, (TemplateEngine.TemplateExpression) null);
      // Undeclared exception!
      try { 
        templateEngine_ImmediateExpression0.asString((StringBuilder) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.internal.TemplateEngine$JexlBasedExpression"", e);
      }
  }"
3006,,"  public void test10()  throws Throwable  {
      Engine engine0 = new Engine();
      TemplateEngine templateEngine0 = engine0.createJxltEngine(true, 35, '6', '6');
      char[] charArray0 = new char[5];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      TemplateEngine.NestedExpression templateEngine_NestedExpression0 = templateEngine0.new NestedExpression(charBuffer0, (JexlNode) null, (TemplateEngine.TemplateExpression) null);
      TemplateEngine.ImmediateExpression templateEngine_ImmediateExpression0 = templateEngine0.new ImmediateExpression(charBuffer0, (JexlNode) null, templateEngine_NestedExpression0);
      TemplateEngine.DeferredExpression templateEngine_DeferredExpression0 = templateEngine0.new DeferredExpression(charBuffer0, (JexlNode) null, templateEngine_ImmediateExpression0);
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[3];
      Scope scope1 = new Scope(scope0, stringArray0);
      Frame frame0 = new Frame(scope1, stringArray0, 5);
      JexlOptions jexlOptions0 = new JexlOptions();
      Interpreter interpreter0 = engine0.createInterpreter((JexlContext) null, frame0, jexlOptions0);
      TemplateEngine.TemplateExpression templateEngine_TemplateExpression0 = templateEngine_DeferredExpression0.prepare(interpreter0);
}"
3007,"    public TemplateEngine(final Engine aJexl,
                          final boolean noScript,
                          final int cacheSize,
                          final char immediate,
                          final char deferred) {
        this.jexl = aJexl;
        this.cache = new SoftCache<>(cacheSize);
        immediateChar = immediate;
        deferredChar = deferred;
        noscript = noScript;
    }","  public void test11()  throws Throwable  {
      Engine engine0 = new Engine();
      TemplateEngine templateEngine0 = new TemplateEngine(engine0, true, Integer.MAX_VALUE, '-', '&');
      ASTEQNode aSTEQNode0 = new ASTEQNode(0);
      TemplateEngine.NestedExpression templateEngine_NestedExpression0 = templateEngine0.new NestedExpression(""<MH#dONXa,^4t4"", aSTEQNode0, (TemplateEngine.TemplateExpression) null);
      TemplateEngine.ImmediateExpression templateEngine_ImmediateExpression0 = templateEngine0.new ImmediateExpression(""<MH#dONXa,^4t4"", aSTEQNode0, templateEngine_NestedExpression0);
      TemplateEngine.DeferredExpression templateEngine_DeferredExpression0 = templateEngine0.new DeferredExpression(""<MH#dONXa,^4t4"", aSTEQNode0, templateEngine_ImmediateExpression0);
      boolean boolean0 = templateEngine_DeferredExpression0.isImmediate();
}"
3008,"    TemplateExpression parseExpression(final JexlInfo info, final String expr, final Scope scope) {  // CSOFF: MethodLength
        final int size = expr.length();
        final ExpressionBuilder builder = new ExpressionBuilder(0);
        final StringBuilder strb = new StringBuilder(size);
        ParseState state = ParseState.CONST;
        int immediate1 = 0;
        int deferred1 = 0;
        int inner1 = 0;
        boolean nested = false;
        int inested = -1;
        int lineno = info.getLine();
        for (int column = 0; column < size; ++column) {
            final char c = expr.charAt(column);
            switch (state) {
                default: // in case we ever add new unified expression type
                    throw new UnsupportedOperationException(""unexpected unified expression type"");
                case CONST:
                    if (c == immediateChar) {
                        state = ParseState.IMMEDIATE0;
                    } else if (c == deferredChar) {
                        inested = column;
                        state = ParseState.DEFERRED0;
                    } else if (c == '\\') {
                        state = ParseState.ESCAPE;
                    } else {
                        // do buildup expr
                        strb.append(c);
                    }
                    break;
                case IMMEDIATE0: // $
                    if (c == '{') {
                        state = ParseState.IMMEDIATE1;
                        // if chars in buffer, create constant
                        if (strb.length() > 0) {
                            final TemplateExpression cexpr = new ConstantExpression(strb.toString(), null);
                            builder.add(cexpr);
                            strb.delete(0, Integer.MAX_VALUE);
                        }
                    } else {
                        // revert to CONST
                        strb.append(immediateChar);
                        strb.append(c);
                        state = ParseState.CONST;
                    }
                    break;
                case DEFERRED0: // #
                    if (c == '{') {
                        state = ParseState.DEFERRED1;
                        // if chars in buffer, create constant
                        if (strb.length() > 0) {
                            final TemplateExpression cexpr = new ConstantExpression(strb.toString(), null);
                            builder.add(cexpr);
                            strb.delete(0, Integer.MAX_VALUE);
                        }
                    } else {
                        // revert to CONST
                        strb.append(deferredChar);
                        strb.append(c);
                        state = ParseState.CONST;
                    }
                    break;
                case IMMEDIATE1: // ${...
                    if (c == '}') {
                        if (immediate1 > 0) {
                            immediate1 -= 1;
                            strb.append(c);
                        } else {
                            // materialize the immediate expr
                            final String src = strb.toString();
                            final TemplateExpression iexpr = new ImmediateExpression(
                                    src,
                                    jexl.parse(info.at(lineno, column), noscript, src, scope),
                                    null);
                            builder.add(iexpr);
                            strb.delete(0, Integer.MAX_VALUE);
                            state = ParseState.CONST;
                        }
                    } else {
                        if (c == '{') {
                            immediate1 += 1;
                        }
                        // do buildup expr
                        column = append(strb, expr, column, c);
                    }
                    break;
                case DEFERRED1: // #{...
                    // skip inner strings (for '}')
                    if (c == '""' || c == '\'') {
                        strb.append(c);
                        column = StringParser.readString(strb, expr, column + 1, c);
                        continue;
                    }
                    // nested immediate in deferred; need to balance count of '{' & '}'
                    if (c == '{') {
                        if (expr.charAt(column - 1) == immediateChar) {
                            inner1 += 1;
                            strb.deleteCharAt(strb.length() - 1);
                            nested = true;
                        } else {
                            deferred1 += 1;
                            strb.append(c);
                        }
                        continue;
                    }
                    // closing '}'
                    if (c == '}') {
                        // balance nested immediate
                        if (deferred1 > 0) {
                            deferred1 -= 1;
                            strb.append(c);
                        } else if (inner1 > 0) {
                            inner1 -= 1;
                        } else  {
                            // materialize the nested/deferred expr
                            final String src = strb.toString();
                            TemplateExpression dexpr;
                            if (nested) {
                                dexpr = new NestedExpression(
                                        expr.substring(inested, column + 1),
                                        jexl.parse(info.at(lineno, column), noscript, src, scope),
                                        null);
                            } else {
                                dexpr = new DeferredExpression(
                                        strb.toString(),
                                        jexl.parse(info.at(lineno, column), noscript, src, scope),
                                        null);
                            }
                            builder.add(dexpr);
                            strb.delete(0, Integer.MAX_VALUE);
                            nested = false;
                            state = ParseState.CONST;
                        }
                    } else {
                        // do buildup expr
                        column = append(strb, expr, column, c);
                    }
                    break;
                case ESCAPE:
                    if (c == deferredChar) {
                        strb.append(deferredChar);
                    } else if (c == immediateChar) {
                        strb.append(immediateChar);
                    } else {
                        strb.append('\\');
                        strb.append(c);
                    }
                    state = ParseState.CONST;
            }
            if (c == '\n') {
                lineno += 1;
            }
        }
        // we should be in that state
        if (state != ParseState.CONST) {
            // otherwise, we ended a line with a \, $ or #
            switch (state) {
                case ESCAPE:
                    strb.append('\\');
                    strb.append('\\');
                    break;
                case DEFERRED0:
                    strb.append(deferredChar);
                    break;
                case IMMEDIATE0:
                    strb.append(immediateChar);
                    break;
                default:
                    throw new Exception(info.at(lineno, 0), ""malformed expression: "" + expr, null);
            }
        }
        // if any chars were buffered, add them as a constant
        if (strb.length() > 0) {
            final TemplateExpression cexpr = new ConstantExpression(strb.toString(), null);
            builder.add(cexpr);
        }
        return builder.build(this, null);
    }","  public void test12()  throws Throwable  {
      Engine engine0 = new Engine();
      TemplateEngine templateEngine0 = engine0.createJxltEngine(true, 144, 'e', 'e');
      Integer integer0 = ASTIdentifierAccess.parseIdentifier("""");
      JexlInfo jexlInfo0 = new JexlInfo();
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[6];
      Scope scope1 = new Scope(scope0, stringArray0);
      TemplateEngine.TemplateExpression templateEngine_TemplateExpression0 = templateEngine0.parseExpression(jexlInfo0, """", scope1);
      TemplateEngine.ConstantExpression templateEngine_ConstantExpression0 = templateEngine0.new ConstantExpression(integer0, templateEngine_TemplateExpression0);
      templateEngine_ConstantExpression0.getType();
}"
3009,"    TemplateExpression parseExpression(final JexlInfo info, final String expr, final Scope scope) {  // CSOFF: MethodLength
        final int size = expr.length();
        final ExpressionBuilder builder = new ExpressionBuilder(0);
        final StringBuilder strb = new StringBuilder(size);
        ParseState state = ParseState.CONST;
        int immediate1 = 0;
        int deferred1 = 0;
        int inner1 = 0;
        boolean nested = false;
        int inested = -1;
        int lineno = info.getLine();
        for (int column = 0; column < size; ++column) {
            final char c = expr.charAt(column);
            switch (state) {
                default: // in case we ever add new unified expression type
                    throw new UnsupportedOperationException(""unexpected unified expression type"");
                case CONST:
                    if (c == immediateChar) {
                        state = ParseState.IMMEDIATE0;
                    } else if (c == deferredChar) {
                        inested = column;
                        state = ParseState.DEFERRED0;
                    } else if (c == '\\') {
                        state = ParseState.ESCAPE;
                    } else {
                        // do buildup expr
                        strb.append(c);
                    }
                    break;
                case IMMEDIATE0: // $
                    if (c == '{') {
                        state = ParseState.IMMEDIATE1;
                        // if chars in buffer, create constant
                        if (strb.length() > 0) {
                            final TemplateExpression cexpr = new ConstantExpression(strb.toString(), null);
                            builder.add(cexpr);
                            strb.delete(0, Integer.MAX_VALUE);
                        }
                    } else {
                        // revert to CONST
                        strb.append(immediateChar);
                        strb.append(c);
                        state = ParseState.CONST;
                    }
                    break;
                case DEFERRED0: // #
                    if (c == '{') {
                        state = ParseState.DEFERRED1;
                        // if chars in buffer, create constant
                        if (strb.length() > 0) {
                            final TemplateExpression cexpr = new ConstantExpression(strb.toString(), null);
                            builder.add(cexpr);
                            strb.delete(0, Integer.MAX_VALUE);
                        }
                    } else {
                        // revert to CONST
                        strb.append(deferredChar);
                        strb.append(c);
                        state = ParseState.CONST;
                    }
                    break;
                case IMMEDIATE1: // ${...
                    if (c == '}') {
                        if (immediate1 > 0) {
                            immediate1 -= 1;
                            strb.append(c);
                        } else {
                            // materialize the immediate expr
                            final String src = strb.toString();
                            final TemplateExpression iexpr = new ImmediateExpression(
                                    src,
                                    jexl.parse(info.at(lineno, column), noscript, src, scope),
                                    null);
                            builder.add(iexpr);
                            strb.delete(0, Integer.MAX_VALUE);
                            state = ParseState.CONST;
                        }
                    } else {
                        if (c == '{') {
                            immediate1 += 1;
                        }
                        // do buildup expr
                        column = append(strb, expr, column, c);
                    }
                    break;
                case DEFERRED1: // #{...
                    // skip inner strings (for '}')
                    if (c == '""' || c == '\'') {
                        strb.append(c);
                        column = StringParser.readString(strb, expr, column + 1, c);
                        continue;
                    }
                    // nested immediate in deferred; need to balance count of '{' & '}'
                    if (c == '{') {
                        if (expr.charAt(column - 1) == immediateChar) {
                            inner1 += 1;
                            strb.deleteCharAt(strb.length() - 1);
                            nested = true;
                        } else {
                            deferred1 += 1;
                            strb.append(c);
                        }
                        continue;
                    }
                    // closing '}'
                    if (c == '}') {
                        // balance nested immediate
                        if (deferred1 > 0) {
                            deferred1 -= 1;
                            strb.append(c);
                        } else if (inner1 > 0) {
                            inner1 -= 1;
                        } else  {
                            // materialize the nested/deferred expr
                            final String src = strb.toString();
                            TemplateExpression dexpr;
                            if (nested) {
                                dexpr = new NestedExpression(
                                        expr.substring(inested, column + 1),
                                        jexl.parse(info.at(lineno, column), noscript, src, scope),
                                        null);
                            } else {
                                dexpr = new DeferredExpression(
                                        strb.toString(),
                                        jexl.parse(info.at(lineno, column), noscript, src, scope),
                                        null);
                            }
                            builder.add(dexpr);
                            strb.delete(0, Integer.MAX_VALUE);
                            nested = false;
                            state = ParseState.CONST;
                        }
                    } else {
                        // do buildup expr
                        column = append(strb, expr, column, c);
                    }
                    break;
                case ESCAPE:
                    if (c == deferredChar) {
                        strb.append(deferredChar);
                    } else if (c == immediateChar) {
                        strb.append(immediateChar);
                    } else {
                        strb.append('\\');
                        strb.append(c);
                    }
                    state = ParseState.CONST;
            }
            if (c == '\n') {
                lineno += 1;
            }
        }
        // we should be in that state
        if (state != ParseState.CONST) {
            // otherwise, we ended a line with a \, $ or #
            switch (state) {
                case ESCAPE:
                    strb.append('\\');
                    strb.append('\\');
                    break;
                case DEFERRED0:
                    strb.append(deferredChar);
                    break;
                case IMMEDIATE0:
                    strb.append(immediateChar);
                    break;
                default:
                    throw new Exception(info.at(lineno, 0), ""malformed expression: "" + expr, null);
            }
        }
        // if any chars were buffered, add them as a constant
        if (strb.length() > 0) {
            final TemplateExpression cexpr = new ConstantExpression(strb.toString(), null);
            builder.add(cexpr);
        }
        return builder.build(this, null);
    }","  public void test13()  throws Throwable  {
      Engine engine0 = new Engine();
      TemplateEngine templateEngine0 = engine0.createJxltEngine(true, 144, 'e', 'e');
      Integer integer0 = ASTIdentifierAccess.parseIdentifier("""");
      JexlInfo jexlInfo0 = new JexlInfo();
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[6];
      Scope scope1 = new Scope(scope0, stringArray0);
      TemplateEngine.TemplateExpression templateEngine_TemplateExpression0 = templateEngine0.parseExpression(jexlInfo0, """", scope1);
      TemplateEngine.ConstantExpression templateEngine_ConstantExpression0 = templateEngine0.new ConstantExpression(integer0, templateEngine_TemplateExpression0);
      templateEngine_ConstantExpression0.getType();
}"
3010,,"  public void test14()  throws Throwable  {
      Engine engine0 = new Engine();
      TemplateEngine templateEngine0 = engine0.jxlt();
      TemplateEngine.ConstantExpression templateEngine_ConstantExpression0 = templateEngine0.new ConstantExpression(templateEngine0, (TemplateEngine.TemplateExpression) null);
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlOptions jexlOptions0 = jexlBuilder0.options();
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[9];
      Scope scope1 = new Scope(scope0, stringArray0);
      Frame frame0 = new Frame(scope1, stringArray0, 0);
      Interpreter interpreter0 = new Interpreter(engine0, jexlOptions0, engine0.EMPTY_CONTEXT, frame0);
      Object object0 = templateEngine_ConstantExpression0.evaluate(interpreter0);
}"
3011,"    public JxltEngine.Expression createExpression(JexlInfo info, final String expression) {
        if (info == null) {
            info = jexl.createInfo();
        }
        Exception xuel = null;
        TemplateExpression stmt = null;
        try {
            stmt = cache.get(expression);
            if (stmt == null) {
                stmt = parseExpression(info, expression, null);
                cache.put(expression, stmt);
            }
        } catch (final JexlException xjexl) {
            xuel = new Exception(xjexl.getInfo(), ""failed to parse '"" + expression + ""'"", xjexl);
        }
        if (xuel != null) {
            if (!jexl.isSilent()) {
                throw xuel;
            }
            jexl.logger.warn(xuel.getMessage(), xuel.getCause());
            stmt = null;
        }
        return stmt;
    }","  public void test15()  throws Throwable  {
      Engine engine0 = new Engine();
      TemplateEngine templateEngine0 = engine0.createJxltEngine(false, 1677, '4', ']');
      JxltEngine.Expression jxltEngine_Expression0 = templateEngine0.createExpression(""Y_GQG{:=4Rz*T"");
      StringBuilder stringBuilder0 = new StringBuilder(""Y_GQG{:=4Rz*T"");
      StringBuilder stringBuilder1 = jxltEngine_Expression0.asString(stringBuilder0);
}"
3012,"    TemplateExpression parseExpression(final JexlInfo info, final String expr, final Scope scope) {  // CSOFF: MethodLength
        final int size = expr.length();
        final ExpressionBuilder builder = new ExpressionBuilder(0);
        final StringBuilder strb = new StringBuilder(size);
        ParseState state = ParseState.CONST;
        int immediate1 = 0;
        int deferred1 = 0;
        int inner1 = 0;
        boolean nested = false;
        int inested = -1;
        int lineno = info.getLine();
        for (int column = 0; column < size; ++column) {
            final char c = expr.charAt(column);
            switch (state) {
                default: // in case we ever add new unified expression type
                    throw new UnsupportedOperationException(""unexpected unified expression type"");
                case CONST:
                    if (c == immediateChar) {
                        state = ParseState.IMMEDIATE0;
                    } else if (c == deferredChar) {
                        inested = column;
                        state = ParseState.DEFERRED0;
                    } else if (c == '\\') {
                        state = ParseState.ESCAPE;
                    } else {
                        // do buildup expr
                        strb.append(c);
                    }
                    break;
                case IMMEDIATE0: // $
                    if (c == '{') {
                        state = ParseState.IMMEDIATE1;
                        // if chars in buffer, create constant
                        if (strb.length() > 0) {
                            final TemplateExpression cexpr = new ConstantExpression(strb.toString(), null);
                            builder.add(cexpr);
                            strb.delete(0, Integer.MAX_VALUE);
                        }
                    } else {
                        // revert to CONST
                        strb.append(immediateChar);
                        strb.append(c);
                        state = ParseState.CONST;
                    }
                    break;
                case DEFERRED0: // #
                    if (c == '{') {
                        state = ParseState.DEFERRED1;
                        // if chars in buffer, create constant
                        if (strb.length() > 0) {
                            final TemplateExpression cexpr = new ConstantExpression(strb.toString(), null);
                            builder.add(cexpr);
                            strb.delete(0, Integer.MAX_VALUE);
                        }
                    } else {
                        // revert to CONST
                        strb.append(deferredChar);
                        strb.append(c);
                        state = ParseState.CONST;
                    }
                    break;
                case IMMEDIATE1: // ${...
                    if (c == '}') {
                        if (immediate1 > 0) {
                            immediate1 -= 1;
                            strb.append(c);
                        } else {
                            // materialize the immediate expr
                            final String src = strb.toString();
                            final TemplateExpression iexpr = new ImmediateExpression(
                                    src,
                                    jexl.parse(info.at(lineno, column), noscript, src, scope),
                                    null);
                            builder.add(iexpr);
                            strb.delete(0, Integer.MAX_VALUE);
                            state = ParseState.CONST;
                        }
                    } else {
                        if (c == '{') {
                            immediate1 += 1;
                        }
                        // do buildup expr
                        column = append(strb, expr, column, c);
                    }
                    break;
                case DEFERRED1: // #{...
                    // skip inner strings (for '}')
                    if (c == '""' || c == '\'') {
                        strb.append(c);
                        column = StringParser.readString(strb, expr, column + 1, c);
                        continue;
                    }
                    // nested immediate in deferred; need to balance count of '{' & '}'
                    if (c == '{') {
                        if (expr.charAt(column - 1) == immediateChar) {
                            inner1 += 1;
                            strb.deleteCharAt(strb.length() - 1);
                            nested = true;
                        } else {
                            deferred1 += 1;
                            strb.append(c);
                        }
                        continue;
                    }
                    // closing '}'
                    if (c == '}') {
                        // balance nested immediate
                        if (deferred1 > 0) {
                            deferred1 -= 1;
                            strb.append(c);
                        } else if (inner1 > 0) {
                            inner1 -= 1;
                        } else  {
                            // materialize the nested/deferred expr
                            final String src = strb.toString();
                            TemplateExpression dexpr;
                            if (nested) {
                                dexpr = new NestedExpression(
                                        expr.substring(inested, column + 1),
                                        jexl.parse(info.at(lineno, column), noscript, src, scope),
                                        null);
                            } else {
                                dexpr = new DeferredExpression(
                                        strb.toString(),
                                        jexl.parse(info.at(lineno, column), noscript, src, scope),
                                        null);
                            }
                            builder.add(dexpr);
                            strb.delete(0, Integer.MAX_VALUE);
                            nested = false;
                            state = ParseState.CONST;
                        }
                    } else {
                        // do buildup expr
                        column = append(strb, expr, column, c);
                    }
                    break;
                case ESCAPE:
                    if (c == deferredChar) {
                        strb.append(deferredChar);
                    } else if (c == immediateChar) {
                        strb.append(immediateChar);
                    } else {
                        strb.append('\\');
                        strb.append(c);
                    }
                    state = ParseState.CONST;
            }
            if (c == '\n') {
                lineno += 1;
            }
        }
        // we should be in that state
        if (state != ParseState.CONST) {
            // otherwise, we ended a line with a \, $ or #
            switch (state) {
                case ESCAPE:
                    strb.append('\\');
                    strb.append('\\');
                    break;
                case DEFERRED0:
                    strb.append(deferredChar);
                    break;
                case IMMEDIATE0:
                    strb.append(immediateChar);
                    break;
                default:
                    throw new Exception(info.at(lineno, 0), ""malformed expression: "" + expr, null);
            }
        }
        // if any chars were buffered, add them as a constant
        if (strb.length() > 0) {
            final TemplateExpression cexpr = new ConstantExpression(strb.toString(), null);
            builder.add(cexpr);
        }
        return builder.build(this, null);
    }","  public void test16()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      TemplateEngine templateEngine0 = engine0.jxlt();
      JexlInfo jexlInfo0 = new JexlInfo("""", 0, 0);
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[3];
      Scope scope1 = new Scope(scope0, stringArray0);
      TemplateEngine.CompositeExpression templateEngine_CompositeExpression0 = (TemplateEngine.CompositeExpression)templateEngine0.parseExpression(jexlInfo0, """", scope1);
      Frame frame0 = new Frame(scope1, stringArray0, 0);
      JexlOptions jexlOptions0 = jexlBuilder0.options();
      Interpreter interpreter0 = engine0.createInterpreter((JexlContext) null, frame0, jexlOptions0);
      TemplateEngine.CompositeExpression templateEngine_CompositeExpression1 = (TemplateEngine.CompositeExpression)templateEngine_CompositeExpression0.prepare(interpreter0);
}"
3013,"    TemplateExpression parseExpression(final JexlInfo info, final String expr, final Scope scope) {  // CSOFF: MethodLength
        final int size = expr.length();
        final ExpressionBuilder builder = new ExpressionBuilder(0);
        final StringBuilder strb = new StringBuilder(size);
        ParseState state = ParseState.CONST;
        int immediate1 = 0;
        int deferred1 = 0;
        int inner1 = 0;
        boolean nested = false;
        int inested = -1;
        int lineno = info.getLine();
        for (int column = 0; column < size; ++column) {
            final char c = expr.charAt(column);
            switch (state) {
                default: // in case we ever add new unified expression type
                    throw new UnsupportedOperationException(""unexpected unified expression type"");
                case CONST:
                    if (c == immediateChar) {
                        state = ParseState.IMMEDIATE0;
                    } else if (c == deferredChar) {
                        inested = column;
                        state = ParseState.DEFERRED0;
                    } else if (c == '\\') {
                        state = ParseState.ESCAPE;
                    } else {
                        // do buildup expr
                        strb.append(c);
                    }
                    break;
                case IMMEDIATE0: // $
                    if (c == '{') {
                        state = ParseState.IMMEDIATE1;
                        // if chars in buffer, create constant
                        if (strb.length() > 0) {
                            final TemplateExpression cexpr = new ConstantExpression(strb.toString(), null);
                            builder.add(cexpr);
                            strb.delete(0, Integer.MAX_VALUE);
                        }
                    } else {
                        // revert to CONST
                        strb.append(immediateChar);
                        strb.append(c);
                        state = ParseState.CONST;
                    }
                    break;
                case DEFERRED0: // #
                    if (c == '{') {
                        state = ParseState.DEFERRED1;
                        // if chars in buffer, create constant
                        if (strb.length() > 0) {
                            final TemplateExpression cexpr = new ConstantExpression(strb.toString(), null);
                            builder.add(cexpr);
                            strb.delete(0, Integer.MAX_VALUE);
                        }
                    } else {
                        // revert to CONST
                        strb.append(deferredChar);
                        strb.append(c);
                        state = ParseState.CONST;
                    }
                    break;
                case IMMEDIATE1: // ${...
                    if (c == '}') {
                        if (immediate1 > 0) {
                            immediate1 -= 1;
                            strb.append(c);
                        } else {
                            // materialize the immediate expr
                            final String src = strb.toString();
                            final TemplateExpression iexpr = new ImmediateExpression(
                                    src,
                                    jexl.parse(info.at(lineno, column), noscript, src, scope),
                                    null);
                            builder.add(iexpr);
                            strb.delete(0, Integer.MAX_VALUE);
                            state = ParseState.CONST;
                        }
                    } else {
                        if (c == '{') {
                            immediate1 += 1;
                        }
                        // do buildup expr
                        column = append(strb, expr, column, c);
                    }
                    break;
                case DEFERRED1: // #{...
                    // skip inner strings (for '}')
                    if (c == '""' || c == '\'') {
                        strb.append(c);
                        column = StringParser.readString(strb, expr, column + 1, c);
                        continue;
                    }
                    // nested immediate in deferred; need to balance count of '{' & '}'
                    if (c == '{') {
                        if (expr.charAt(column - 1) == immediateChar) {
                            inner1 += 1;
                            strb.deleteCharAt(strb.length() - 1);
                            nested = true;
                        } else {
                            deferred1 += 1;
                            strb.append(c);
                        }
                        continue;
                    }
                    // closing '}'
                    if (c == '}') {
                        // balance nested immediate
                        if (deferred1 > 0) {
                            deferred1 -= 1;
                            strb.append(c);
                        } else if (inner1 > 0) {
                            inner1 -= 1;
                        } else  {
                            // materialize the nested/deferred expr
                            final String src = strb.toString();
                            TemplateExpression dexpr;
                            if (nested) {
                                dexpr = new NestedExpression(
                                        expr.substring(inested, column + 1),
                                        jexl.parse(info.at(lineno, column), noscript, src, scope),
                                        null);
                            } else {
                                dexpr = new DeferredExpression(
                                        strb.toString(),
                                        jexl.parse(info.at(lineno, column), noscript, src, scope),
                                        null);
                            }
                            builder.add(dexpr);
                            strb.delete(0, Integer.MAX_VALUE);
                            nested = false;
                            state = ParseState.CONST;
                        }
                    } else {
                        // do buildup expr
                        column = append(strb, expr, column, c);
                    }
                    break;
                case ESCAPE:
                    if (c == deferredChar) {
                        strb.append(deferredChar);
                    } else if (c == immediateChar) {
                        strb.append(immediateChar);
                    } else {
                        strb.append('\\');
                        strb.append(c);
                    }
                    state = ParseState.CONST;
            }
            if (c == '\n') {
                lineno += 1;
            }
        }
        // we should be in that state
        if (state != ParseState.CONST) {
            // otherwise, we ended a line with a \, $ or #
            switch (state) {
                case ESCAPE:
                    strb.append('\\');
                    strb.append('\\');
                    break;
                case DEFERRED0:
                    strb.append(deferredChar);
                    break;
                case IMMEDIATE0:
                    strb.append(immediateChar);
                    break;
                default:
                    throw new Exception(info.at(lineno, 0), ""malformed expression: "" + expr, null);
            }
        }
        // if any chars were buffered, add them as a constant
        if (strb.length() > 0) {
            final TemplateExpression cexpr = new ConstantExpression(strb.toString(), null);
            builder.add(cexpr);
        }
        return builder.build(this, null);
    }","  public void test17()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      TemplateEngine templateEngine0 = engine0.jxlt();
      JexlInfo jexlInfo0 = new JexlInfo("""", 0, 0);
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[3];
      Scope scope1 = new Scope(scope0, stringArray0);
      TemplateEngine.CompositeExpression templateEngine_CompositeExpression0 = (TemplateEngine.CompositeExpression)templateEngine0.parseExpression(jexlInfo0, """", scope1);
      Frame frame0 = new Frame(scope1, stringArray0, 0);
      JexlOptions jexlOptions0 = jexlBuilder0.options();
      Interpreter interpreter0 = engine0.createInterpreter((JexlContext) null, frame0, jexlOptions0);
      TemplateEngine.CompositeExpression templateEngine_CompositeExpression1 = (TemplateEngine.CompositeExpression)templateEngine_CompositeExpression0.prepare(interpreter0);
}"
3014,"    TemplateExpression parseExpression(final JexlInfo info, final String expr, final Scope scope) {  // CSOFF: MethodLength
        final int size = expr.length();
        final ExpressionBuilder builder = new ExpressionBuilder(0);
        final StringBuilder strb = new StringBuilder(size);
        ParseState state = ParseState.CONST;
        int immediate1 = 0;
        int deferred1 = 0;
        int inner1 = 0;
        boolean nested = false;
        int inested = -1;
        int lineno = info.getLine();
        for (int column = 0; column < size; ++column) {
            final char c = expr.charAt(column);
            switch (state) {
                default: // in case we ever add new unified expression type
                    throw new UnsupportedOperationException(""unexpected unified expression type"");
                case CONST:
                    if (c == immediateChar) {
                        state = ParseState.IMMEDIATE0;
                    } else if (c == deferredChar) {
                        inested = column;
                        state = ParseState.DEFERRED0;
                    } else if (c == '\\') {
                        state = ParseState.ESCAPE;
                    } else {
                        // do buildup expr
                        strb.append(c);
                    }
                    break;
                case IMMEDIATE0: // $
                    if (c == '{') {
                        state = ParseState.IMMEDIATE1;
                        // if chars in buffer, create constant
                        if (strb.length() > 0) {
                            final TemplateExpression cexpr = new ConstantExpression(strb.toString(), null);
                            builder.add(cexpr);
                            strb.delete(0, Integer.MAX_VALUE);
                        }
                    } else {
                        // revert to CONST
                        strb.append(immediateChar);
                        strb.append(c);
                        state = ParseState.CONST;
                    }
                    break;
                case DEFERRED0: // #
                    if (c == '{') {
                        state = ParseState.DEFERRED1;
                        // if chars in buffer, create constant
                        if (strb.length() > 0) {
                            final TemplateExpression cexpr = new ConstantExpression(strb.toString(), null);
                            builder.add(cexpr);
                            strb.delete(0, Integer.MAX_VALUE);
                        }
                    } else {
                        // revert to CONST
                        strb.append(deferredChar);
                        strb.append(c);
                        state = ParseState.CONST;
                    }
                    break;
                case IMMEDIATE1: // ${...
                    if (c == '}') {
                        if (immediate1 > 0) {
                            immediate1 -= 1;
                            strb.append(c);
                        } else {
                            // materialize the immediate expr
                            final String src = strb.toString();
                            final TemplateExpression iexpr = new ImmediateExpression(
                                    src,
                                    jexl.parse(info.at(lineno, column), noscript, src, scope),
                                    null);
                            builder.add(iexpr);
                            strb.delete(0, Integer.MAX_VALUE);
                            state = ParseState.CONST;
                        }
                    } else {
                        if (c == '{') {
                            immediate1 += 1;
                        }
                        // do buildup expr
                        column = append(strb, expr, column, c);
                    }
                    break;
                case DEFERRED1: // #{...
                    // skip inner strings (for '}')
                    if (c == '""' || c == '\'') {
                        strb.append(c);
                        column = StringParser.readString(strb, expr, column + 1, c);
                        continue;
                    }
                    // nested immediate in deferred; need to balance count of '{' & '}'
                    if (c == '{') {
                        if (expr.charAt(column - 1) == immediateChar) {
                            inner1 += 1;
                            strb.deleteCharAt(strb.length() - 1);
                            nested = true;
                        } else {
                            deferred1 += 1;
                            strb.append(c);
                        }
                        continue;
                    }
                    // closing '}'
                    if (c == '}') {
                        // balance nested immediate
                        if (deferred1 > 0) {
                            deferred1 -= 1;
                            strb.append(c);
                        } else if (inner1 > 0) {
                            inner1 -= 1;
                        } else  {
                            // materialize the nested/deferred expr
                            final String src = strb.toString();
                            TemplateExpression dexpr;
                            if (nested) {
                                dexpr = new NestedExpression(
                                        expr.substring(inested, column + 1),
                                        jexl.parse(info.at(lineno, column), noscript, src, scope),
                                        null);
                            } else {
                                dexpr = new DeferredExpression(
                                        strb.toString(),
                                        jexl.parse(info.at(lineno, column), noscript, src, scope),
                                        null);
                            }
                            builder.add(dexpr);
                            strb.delete(0, Integer.MAX_VALUE);
                            nested = false;
                            state = ParseState.CONST;
                        }
                    } else {
                        // do buildup expr
                        column = append(strb, expr, column, c);
                    }
                    break;
                case ESCAPE:
                    if (c == deferredChar) {
                        strb.append(deferredChar);
                    } else if (c == immediateChar) {
                        strb.append(immediateChar);
                    } else {
                        strb.append('\\');
                        strb.append(c);
                    }
                    state = ParseState.CONST;
            }
            if (c == '\n') {
                lineno += 1;
            }
        }
        // we should be in that state
        if (state != ParseState.CONST) {
            // otherwise, we ended a line with a \, $ or #
            switch (state) {
                case ESCAPE:
                    strb.append('\\');
                    strb.append('\\');
                    break;
                case DEFERRED0:
                    strb.append(deferredChar);
                    break;
                case IMMEDIATE0:
                    strb.append(immediateChar);
                    break;
                default:
                    throw new Exception(info.at(lineno, 0), ""malformed expression: "" + expr, null);
            }
        }
        // if any chars were buffered, add them as a constant
        if (strb.length() > 0) {
            final TemplateExpression cexpr = new ConstantExpression(strb.toString(), null);
            builder.add(cexpr);
        }
        return builder.build(this, null);
    }","  public void test18()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      TemplateEngine templateEngine0 = engine0.jxlt();
      JexlInfo jexlInfo0 = new JexlInfo("""", 0, 0);
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[3];
      Scope scope1 = new Scope(scope0, stringArray0);
      TemplateEngine.CompositeExpression templateEngine_CompositeExpression0 = (TemplateEngine.CompositeExpression)templateEngine0.parseExpression(jexlInfo0, """", scope1);
      Frame frame0 = new Frame(scope1, stringArray0, 0);
      MapContext mapContext0 = new MapContext();
      Interpreter interpreter0 = engine0.createInterpreter(mapContext0, frame0, (JexlOptions) null);
      templateEngine_CompositeExpression0.evaluate(interpreter0);
}"
3015,"    TemplateExpression parseExpression(final JexlInfo info, final String expr, final Scope scope) {  // CSOFF: MethodLength
        final int size = expr.length();
        final ExpressionBuilder builder = new ExpressionBuilder(0);
        final StringBuilder strb = new StringBuilder(size);
        ParseState state = ParseState.CONST;
        int immediate1 = 0;
        int deferred1 = 0;
        int inner1 = 0;
        boolean nested = false;
        int inested = -1;
        int lineno = info.getLine();
        for (int column = 0; column < size; ++column) {
            final char c = expr.charAt(column);
            switch (state) {
                default: // in case we ever add new unified expression type
                    throw new UnsupportedOperationException(""unexpected unified expression type"");
                case CONST:
                    if (c == immediateChar) {
                        state = ParseState.IMMEDIATE0;
                    } else if (c == deferredChar) {
                        inested = column;
                        state = ParseState.DEFERRED0;
                    } else if (c == '\\') {
                        state = ParseState.ESCAPE;
                    } else {
                        // do buildup expr
                        strb.append(c);
                    }
                    break;
                case IMMEDIATE0: // $
                    if (c == '{') {
                        state = ParseState.IMMEDIATE1;
                        // if chars in buffer, create constant
                        if (strb.length() > 0) {
                            final TemplateExpression cexpr = new ConstantExpression(strb.toString(), null);
                            builder.add(cexpr);
                            strb.delete(0, Integer.MAX_VALUE);
                        }
                    } else {
                        // revert to CONST
                        strb.append(immediateChar);
                        strb.append(c);
                        state = ParseState.CONST;
                    }
                    break;
                case DEFERRED0: // #
                    if (c == '{') {
                        state = ParseState.DEFERRED1;
                        // if chars in buffer, create constant
                        if (strb.length() > 0) {
                            final TemplateExpression cexpr = new ConstantExpression(strb.toString(), null);
                            builder.add(cexpr);
                            strb.delete(0, Integer.MAX_VALUE);
                        }
                    } else {
                        // revert to CONST
                        strb.append(deferredChar);
                        strb.append(c);
                        state = ParseState.CONST;
                    }
                    break;
                case IMMEDIATE1: // ${...
                    if (c == '}') {
                        if (immediate1 > 0) {
                            immediate1 -= 1;
                            strb.append(c);
                        } else {
                            // materialize the immediate expr
                            final String src = strb.toString();
                            final TemplateExpression iexpr = new ImmediateExpression(
                                    src,
                                    jexl.parse(info.at(lineno, column), noscript, src, scope),
                                    null);
                            builder.add(iexpr);
                            strb.delete(0, Integer.MAX_VALUE);
                            state = ParseState.CONST;
                        }
                    } else {
                        if (c == '{') {
                            immediate1 += 1;
                        }
                        // do buildup expr
                        column = append(strb, expr, column, c);
                    }
                    break;
                case DEFERRED1: // #{...
                    // skip inner strings (for '}')
                    if (c == '""' || c == '\'') {
                        strb.append(c);
                        column = StringParser.readString(strb, expr, column + 1, c);
                        continue;
                    }
                    // nested immediate in deferred; need to balance count of '{' & '}'
                    if (c == '{') {
                        if (expr.charAt(column - 1) == immediateChar) {
                            inner1 += 1;
                            strb.deleteCharAt(strb.length() - 1);
                            nested = true;
                        } else {
                            deferred1 += 1;
                            strb.append(c);
                        }
                        continue;
                    }
                    // closing '}'
                    if (c == '}') {
                        // balance nested immediate
                        if (deferred1 > 0) {
                            deferred1 -= 1;
                            strb.append(c);
                        } else if (inner1 > 0) {
                            inner1 -= 1;
                        } else  {
                            // materialize the nested/deferred expr
                            final String src = strb.toString();
                            TemplateExpression dexpr;
                            if (nested) {
                                dexpr = new NestedExpression(
                                        expr.substring(inested, column + 1),
                                        jexl.parse(info.at(lineno, column), noscript, src, scope),
                                        null);
                            } else {
                                dexpr = new DeferredExpression(
                                        strb.toString(),
                                        jexl.parse(info.at(lineno, column), noscript, src, scope),
                                        null);
                            }
                            builder.add(dexpr);
                            strb.delete(0, Integer.MAX_VALUE);
                            nested = false;
                            state = ParseState.CONST;
                        }
                    } else {
                        // do buildup expr
                        column = append(strb, expr, column, c);
                    }
                    break;
                case ESCAPE:
                    if (c == deferredChar) {
                        strb.append(deferredChar);
                    } else if (c == immediateChar) {
                        strb.append(immediateChar);
                    } else {
                        strb.append('\\');
                        strb.append(c);
                    }
                    state = ParseState.CONST;
            }
            if (c == '\n') {
                lineno += 1;
            }
        }
        // we should be in that state
        if (state != ParseState.CONST) {
            // otherwise, we ended a line with a \, $ or #
            switch (state) {
                case ESCAPE:
                    strb.append('\\');
                    strb.append('\\');
                    break;
                case DEFERRED0:
                    strb.append(deferredChar);
                    break;
                case IMMEDIATE0:
                    strb.append(immediateChar);
                    break;
                default:
                    throw new Exception(info.at(lineno, 0), ""malformed expression: "" + expr, null);
            }
        }
        // if any chars were buffered, add them as a constant
        if (strb.length() > 0) {
            final TemplateExpression cexpr = new ConstantExpression(strb.toString(), null);
            builder.add(cexpr);
        }
        return builder.build(this, null);
    }","  public void test19()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      TemplateEngine templateEngine0 = engine0.jxlt();
      JexlInfo jexlInfo0 = new JexlInfo("""", 0, 0);
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[3];
      Scope scope1 = new Scope(scope0, stringArray0);
      TemplateEngine.TemplateExpression templateEngine_TemplateExpression0 = templateEngine0.parseExpression(jexlInfo0, """", scope1);
      StringBuilder stringBuilder0 = new StringBuilder(""#pragma"");
      ((TemplateEngine.CompositeExpression) templateEngine_TemplateExpression0).asString(stringBuilder0);
}"
3016,"    public TemplateEngine(final Engine aJexl,
                          final boolean noScript,
                          final int cacheSize,
                          final char immediate,
                          final char deferred) {
        this.jexl = aJexl;
        this.cache = new SoftCache<>(cacheSize);
        immediateChar = immediate;
        deferredChar = deferred;
        noscript = noScript;
    }","  public void test20()  throws Throwable  {
      TemplateEngine.BlockType templateEngine_BlockType0 = TemplateEngine.BlockType.DIRECTIVE;
      TemplateEngine.Block templateEngine_Block0 = new TemplateEngine.Block(templateEngine_BlockType0, 95, ""org.apache.commons.jexl3.internal.TemplateEngine$Block"");
      TemplateEngine.BlockType templateEngine_BlockType1 = templateEngine_Block0.getType();
}"
3017,"    public TemplateEngine(final Engine aJexl,
                          final boolean noScript,
                          final int cacheSize,
                          final char immediate,
                          final char deferred) {
        this.jexl = aJexl;
        this.cache = new SoftCache<>(cacheSize);
        immediateChar = immediate;
        deferredChar = deferred;
        noscript = noScript;
    }","  public void test21()  throws Throwable  {
      TemplateEngine.BlockType templateEngine_BlockType0 = TemplateEngine.BlockType.DIRECTIVE;
      TemplateEngine.Block templateEngine_Block0 = new TemplateEngine.Block(templateEngine_BlockType0, 34, ""~WAq^-"");
      int int0 = templateEngine_Block0.getLine();
}"
3018,"    public TemplateEngine(final Engine aJexl,
                          final boolean noScript,
                          final int cacheSize,
                          final char immediate,
                          final char deferred) {
        this.jexl = aJexl;
        this.cache = new SoftCache<>(cacheSize);
        immediateChar = immediate;
        deferredChar = deferred;
        noscript = noScript;
    }","  public void test22()  throws Throwable  {
      TemplateEngine.BlockType templateEngine_BlockType0 = TemplateEngine.BlockType.DIRECTIVE;
      TemplateEngine.Block templateEngine_Block0 = new TemplateEngine.Block(templateEngine_BlockType0, (-991), ""BigDecimal coercion: "");
      String string0 = templateEngine_Block0.getBody();
}"
3019,,"  public void test23()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      TemplateEngine templateEngine0 = engine0.createJxltEngine(true, 66, 'J', '.');
      ASTMapEntry aSTMapEntry0 = new ASTMapEntry(66);
      TemplateEngine.NestedExpression templateEngine_NestedExpression0 = templateEngine0.new NestedExpression(""XGyyq4x;RAgeM"", aSTMapEntry0, (TemplateEngine.TemplateExpression) null);
      Set<List<String>> set0 = templateEngine_NestedExpression0.getVariables();
}"
3020,"    protected static Iterator<CharSequence> readLines(final Reader reader) {
        if (!reader.markSupported()) {
            throw new IllegalArgumentException(""mark support in reader required"");
        }
        return new Iterator<CharSequence>() {
            private CharSequence next = doNext();

            private CharSequence doNext() {
                final StringBuffer strb = new StringBuffer(64); // CSOFF: MagicNumber
                int c;
                boolean eol = false;
                try {
                    while ((c = reader.read()) >= 0) {
                        if (eol) {// && (c != '\n' && c != '\r')) {
                            reader.reset();
                            break;
                        }
                        if (c == '\n') {
                            eol = true;
                        }
                        strb.append((char) c);
                        reader.mark(1);
                    }
                } catch (final IOException xio) {
                    return null;
                }
                return strb.length() > 0 ? strb : null;
            }

            @Override
            public boolean hasNext() {
                return next != null;
            }

            @Override
            public CharSequence next() {
                final CharSequence current = next;
                if (current != null) {
                    next = doNext();
                }
                return current;
            }

            @Override
            public void remove() {
                throw new UnsupportedOperationException(""Not supported."");
            }
        };
    }","  public void test24()  throws Throwable  {
      StringReader stringReader0 = new StringReader("""");
      stringReader0.close();
      Iterator<CharSequence> iterator0 = TemplateEngine.readLines(stringReader0);
}"
3021,"    TemplateExpression parseExpression(final JexlInfo info, final String expr, final Scope scope) {  // CSOFF: MethodLength
        final int size = expr.length();
        final ExpressionBuilder builder = new ExpressionBuilder(0);
        final StringBuilder strb = new StringBuilder(size);
        ParseState state = ParseState.CONST;
        int immediate1 = 0;
        int deferred1 = 0;
        int inner1 = 0;
        boolean nested = false;
        int inested = -1;
        int lineno = info.getLine();
        for (int column = 0; column < size; ++column) {
            final char c = expr.charAt(column);
            switch (state) {
                default: // in case we ever add new unified expression type
                    throw new UnsupportedOperationException(""unexpected unified expression type"");
                case CONST:
                    if (c == immediateChar) {
                        state = ParseState.IMMEDIATE0;
                    } else if (c == deferredChar) {
                        inested = column;
                        state = ParseState.DEFERRED0;
                    } else if (c == '\\') {
                        state = ParseState.ESCAPE;
                    } else {
                        // do buildup expr
                        strb.append(c);
                    }
                    break;
                case IMMEDIATE0: // $
                    if (c == '{') {
                        state = ParseState.IMMEDIATE1;
                        // if chars in buffer, create constant
                        if (strb.length() > 0) {
                            final TemplateExpression cexpr = new ConstantExpression(strb.toString(), null);
                            builder.add(cexpr);
                            strb.delete(0, Integer.MAX_VALUE);
                        }
                    } else {
                        // revert to CONST
                        strb.append(immediateChar);
                        strb.append(c);
                        state = ParseState.CONST;
                    }
                    break;
                case DEFERRED0: // #
                    if (c == '{') {
                        state = ParseState.DEFERRED1;
                        // if chars in buffer, create constant
                        if (strb.length() > 0) {
                            final TemplateExpression cexpr = new ConstantExpression(strb.toString(), null);
                            builder.add(cexpr);
                            strb.delete(0, Integer.MAX_VALUE);
                        }
                    } else {
                        // revert to CONST
                        strb.append(deferredChar);
                        strb.append(c);
                        state = ParseState.CONST;
                    }
                    break;
                case IMMEDIATE1: // ${...
                    if (c == '}') {
                        if (immediate1 > 0) {
                            immediate1 -= 1;
                            strb.append(c);
                        } else {
                            // materialize the immediate expr
                            final String src = strb.toString();
                            final TemplateExpression iexpr = new ImmediateExpression(
                                    src,
                                    jexl.parse(info.at(lineno, column), noscript, src, scope),
                                    null);
                            builder.add(iexpr);
                            strb.delete(0, Integer.MAX_VALUE);
                            state = ParseState.CONST;
                        }
                    } else {
                        if (c == '{') {
                            immediate1 += 1;
                        }
                        // do buildup expr
                        column = append(strb, expr, column, c);
                    }
                    break;
                case DEFERRED1: // #{...
                    // skip inner strings (for '}')
                    if (c == '""' || c == '\'') {
                        strb.append(c);
                        column = StringParser.readString(strb, expr, column + 1, c);
                        continue;
                    }
                    // nested immediate in deferred; need to balance count of '{' & '}'
                    if (c == '{') {
                        if (expr.charAt(column - 1) == immediateChar) {
                            inner1 += 1;
                            strb.deleteCharAt(strb.length() - 1);
                            nested = true;
                        } else {
                            deferred1 += 1;
                            strb.append(c);
                        }
                        continue;
                    }
                    // closing '}'
                    if (c == '}') {
                        // balance nested immediate
                        if (deferred1 > 0) {
                            deferred1 -= 1;
                            strb.append(c);
                        } else if (inner1 > 0) {
                            inner1 -= 1;
                        } else  {
                            // materialize the nested/deferred expr
                            final String src = strb.toString();
                            TemplateExpression dexpr;
                            if (nested) {
                                dexpr = new NestedExpression(
                                        expr.substring(inested, column + 1),
                                        jexl.parse(info.at(lineno, column), noscript, src, scope),
                                        null);
                            } else {
                                dexpr = new DeferredExpression(
                                        strb.toString(),
                                        jexl.parse(info.at(lineno, column), noscript, src, scope),
                                        null);
                            }
                            builder.add(dexpr);
                            strb.delete(0, Integer.MAX_VALUE);
                            nested = false;
                            state = ParseState.CONST;
                        }
                    } else {
                        // do buildup expr
                        column = append(strb, expr, column, c);
                    }
                    break;
                case ESCAPE:
                    if (c == deferredChar) {
                        strb.append(deferredChar);
                    } else if (c == immediateChar) {
                        strb.append(immediateChar);
                    } else {
                        strb.append('\\');
                        strb.append(c);
                    }
                    state = ParseState.CONST;
            }
            if (c == '\n') {
                lineno += 1;
            }
        }
        // we should be in that state
        if (state != ParseState.CONST) {
            // otherwise, we ended a line with a \, $ or #
            switch (state) {
                case ESCAPE:
                    strb.append('\\');
                    strb.append('\\');
                    break;
                case DEFERRED0:
                    strb.append(deferredChar);
                    break;
                case IMMEDIATE0:
                    strb.append(immediateChar);
                    break;
                default:
                    throw new Exception(info.at(lineno, 0), ""malformed expression: "" + expr, null);
            }
        }
        // if any chars were buffered, add them as a constant
        if (strb.length() > 0) {
            final TemplateExpression cexpr = new ConstantExpression(strb.toString(), null);
            builder.add(cexpr);
        }
        return builder.build(this, null);
    }","  public void test25()  throws Throwable  {
      Engine engine0 = new Engine();
      JexlInfo jexlInfo0 = engine0.createInfo(""\"")\"""", 0, (-1337));
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[1];
      Scope scope1 = new Scope(scope0, stringArray0);
      TemplateEngine templateEngine0 = engine0.jxlt();
      TemplateEngine.TemplateExpression templateEngine_TemplateExpression0 = templateEngine0.parseExpression(jexlInfo0, ""kvH5sb-$"", scope1);
}"
3022,"    public TemplateScript createTemplate(final JexlInfo info, final String prefix, final Reader source, final String... parms) {
        return new TemplateScript(this, info, prefix, source,  parms);
    }","  public void test26()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      TemplateEngine templateEngine0 = new TemplateEngine(engine0, true, (-61), 'k', '}');
      JexlInfo jexlInfo0 = new JexlInfo();
      String[] stringArray0 = new String[9];
      JxltEngine.Template jxltEngine_Template0 = templateEngine0.createTemplate(jexlInfo0, ""cFKY&c`x>W}"", stringArray0);
}"
3023,"    protected int startsWith(CharSequence sequence, final CharSequence pattern) {
        final int length = sequence.length();
        int s = 0;
        while (s < length && Character.isSpaceChar(sequence.charAt(s))) {
            s += 1;
        }
        if (s < length && pattern.length() <= (length - s)) {
            sequence = sequence.subSequence(s, length);
            if (sequence.subSequence(0, pattern.length()).equals(pattern)) {
                return s + pattern.length();
            }
        }
        return -1;
    }","  public void test27()  throws Throwable  {
      Engine engine0 = new Engine();
      TemplateEngine templateEngine0 = new TemplateEngine(engine0, true, 123, 'i', 'h');
      int int0 = templateEngine0.startsWith(""org.apache.commons.jexl3.internal.TemplateEngine$Block"", """");
}"
3024,"    protected int startsWith(CharSequence sequence, final CharSequence pattern) {
        final int length = sequence.length();
        int s = 0;
        while (s < length && Character.isSpaceChar(sequence.charAt(s))) {
            s += 1;
        }
        if (s < length && pattern.length() <= (length - s)) {
            sequence = sequence.subSequence(s, length);
            if (sequence.subSequence(0, pattern.length()).equals(pattern)) {
                return s + pattern.length();
            }
        }
        return -1;
    }","  public void test28()  throws Throwable  {
      Engine engine0 = new Engine();
      TemplateEngine templateEngine0 = engine0.createJxltEngine(true, 35, '6', '6');
      char[] charArray0 = new char[5];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      int int0 = templateEngine0.startsWith(charBuffer0, charBuffer0);
}"
3025,"    char getImmediateChar() {
        return immediateChar;
    }","  public void test29()  throws Throwable  {
      Engine engine0 = new Engine();
      TemplateEngine templateEngine0 = engine0.createJxltEngine(false, 1677, '4', ']');
      char char0 = templateEngine0.getImmediateChar();
}"
3026,"    char getImmediateChar() {
        return immediateChar;
    }","  public void test30()  throws Throwable  {
      Engine engine0 = new Engine();
      TemplateEngine templateEngine0 = engine0.createJxltEngine(false, (-1337), 'l', ']');
      char char0 = templateEngine0.getImmediateChar();
}"
3027,"    public Engine getEngine() {
        return jexl;
    }","  public void test31()  throws Throwable  {
      TemplateEngine templateEngine0 = new TemplateEngine((Engine) null, true, 117, 'S', '_');
      Engine engine0 = templateEngine0.getEngine();
}"
3028,"    public Engine getEngine() {
        return jexl;
    }","  public void test32()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlBuilder jexlBuilder1 = jexlBuilder0.silent(true);
      Engine engine0 = new Engine(jexlBuilder1);
      TemplateEngine templateEngine0 = engine0.jxlt();
      Engine engine1 = templateEngine0.getEngine();
}"
3029,"    public Engine getEngine() {
        return jexl;
    }","  public void test33()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlBuilder jexlBuilder1 = jexlBuilder0.strict(false);
      Engine engine0 = new Engine(jexlBuilder1);
      TemplateEngine templateEngine0 = engine0.jxlt();
      Engine engine1 = templateEngine0.getEngine();
}"
3030,"    char getDeferredChar() {
        return deferredChar;
    }","  public void test34()  throws Throwable  {
      Engine engine0 = new Engine();
      TemplateEngine templateEngine0 = engine0.createJxltEngine(false, (-1337), 'l', ']');
      char char0 = templateEngine0.getDeferredChar();
}"
3031,"    char getDeferredChar() {
        return deferredChar;
    }","  public void test35()  throws Throwable  {
      Engine engine0 = new Engine();
      TemplateEngine templateEngine0 = new TemplateEngine(engine0, true, 645, '7', '7');
      char char0 = templateEngine0.getDeferredChar();
}"
3032,"    char getDeferredChar() {
        return deferredChar;
    }","  public void test36()  throws Throwable  {
      Engine engine0 = new Engine();
      TemplateEngine templateEngine0 = new TemplateEngine(engine0, true, 0, 'Z', 'u');
      char char0 = templateEngine0.getDeferredChar();
}"
3033,"    protected int startsWith(CharSequence sequence, final CharSequence pattern) {
        final int length = sequence.length();
        int s = 0;
        while (s < length && Character.isSpaceChar(sequence.charAt(s))) {
            s += 1;
        }
        if (s < length && pattern.length() <= (length - s)) {
            sequence = sequence.subSequence(s, length);
            if (sequence.subSequence(0, pattern.length()).equals(pattern)) {
                return s + pattern.length();
            }
        }
        return -1;
    }","  public void test37()  throws Throwable  {
      Engine engine0 = new Engine();
      TemplateEngine templateEngine0 = new TemplateEngine(engine0, false, 121, 'X', 'v');
      // Undeclared exception!
      try { 
        templateEngine0.startsWith((CharSequence) null, (CharSequence) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.internal.TemplateEngine"", e);
      }
  }"
3034,"    protected List<Block> readTemplate(final String prefix, final Reader source) {
        final ArrayList<Block> blocks = new ArrayList<Block>();
        final BufferedReader reader;
        if (source instanceof BufferedReader) {
            reader = (BufferedReader) source;
        } else {
            reader = new BufferedReader(source);
        }
        final StringBuilder strb = new StringBuilder();
        BlockType type = null;
        int prefixLen;
        final Iterator<CharSequence> lines = readLines(reader);
        int lineno = 1;
        int start = 0;
        while (lines.hasNext()) {
            final CharSequence line = lines.next();
            if (line == null) {
                break;
            }
            if (type == null) {
                // determine starting type if not known yet
                prefixLen = startsWith(line, prefix);
                if (prefixLen >= 0) {
                    type = BlockType.DIRECTIVE;
                    strb.append(line.subSequence(prefixLen, line.length()));
                } else {
                    type = BlockType.VERBATIM;
                    strb.append(line.subSequence(0, line.length()));
                }
                start = lineno;
            } else if (type == BlockType.DIRECTIVE) {
                // switch to verbatim if necessary
                prefixLen = startsWith(line, prefix);
                if (prefixLen < 0) {
                    final Block directive = new Block(BlockType.DIRECTIVE, start, strb.toString());
                    strb.delete(0, Integer.MAX_VALUE);
                    blocks.add(directive);
                    type = BlockType.VERBATIM;
                    strb.append(line.subSequence(0, line.length()));
                    start = lineno;
                } else {
                    // still a directive
                    strb.append(line.subSequence(prefixLen, line.length()));
                }
            } else if (type == BlockType.VERBATIM) {
                // switch to directive if necessary
                prefixLen = startsWith(line, prefix);
                if (prefixLen >= 0) {
                    final Block verbatim = new Block(BlockType.VERBATIM, start, strb.toString());
                    strb.delete(0, Integer.MAX_VALUE);
                    blocks.add(verbatim);
                    type = BlockType.DIRECTIVE;
                    strb.append(line.subSequence(prefixLen, line.length()));
                    start = lineno;
                } else {
                    strb.append(line.subSequence(0, line.length()));
                }
            }
            lineno += 1;
        }
        // input may be null
        if (type != null && strb.length() > 0) {
            final Block block = new Block(type, start, strb.toString());
            blocks.add(block);
        }
        blocks.trimToSize();
        return blocks;
    }","  public void test38()  throws Throwable  {
      Engine engine0 = new Engine();
      TemplateEngine templateEngine0 = new TemplateEngine(engine0, false, 0, '', '^');
      // Undeclared exception!
      try { 
        templateEngine0.readTemplate(""FW)`ux%S**3K@2 V}7|"", (Reader) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.io.Reader"", e);
      }
  }"
3035,"    protected static Iterator<CharSequence> readLines(final Reader reader) {
        if (!reader.markSupported()) {
            throw new IllegalArgumentException(""mark support in reader required"");
        }
        return new Iterator<CharSequence>() {
            private CharSequence next = doNext();

            private CharSequence doNext() {
                final StringBuffer strb = new StringBuffer(64); // CSOFF: MagicNumber
                int c;
                boolean eol = false;
                try {
                    while ((c = reader.read()) >= 0) {
                        if (eol) {// && (c != '\n' && c != '\r')) {
                            reader.reset();
                            break;
                        }
                        if (c == '\n') {
                            eol = true;
                        }
                        strb.append((char) c);
                        reader.mark(1);
                    }
                } catch (final IOException xio) {
                    return null;
                }
                return strb.length() > 0 ? strb : null;
            }

            @Override
            public boolean hasNext() {
                return next != null;
            }

            @Override
            public CharSequence next() {
                final CharSequence current = next;
                if (current != null) {
                    next = doNext();
                }
                return current;
            }

            @Override
            public void remove() {
                throw new UnsupportedOperationException(""Not supported."");
            }
        };
    }","  public void test39()  throws Throwable  {
      // Undeclared exception!
      try { 
        TemplateEngine.readLines((Reader) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.internal.TemplateEngine"", e);
      }
  }"
3036,"    TemplateExpression parseExpression(final JexlInfo info, final String expr, final Scope scope) {  // CSOFF: MethodLength
        final int size = expr.length();
        final ExpressionBuilder builder = new ExpressionBuilder(0);
        final StringBuilder strb = new StringBuilder(size);
        ParseState state = ParseState.CONST;
        int immediate1 = 0;
        int deferred1 = 0;
        int inner1 = 0;
        boolean nested = false;
        int inested = -1;
        int lineno = info.getLine();
        for (int column = 0; column < size; ++column) {
            final char c = expr.charAt(column);
            switch (state) {
                default: // in case we ever add new unified expression type
                    throw new UnsupportedOperationException(""unexpected unified expression type"");
                case CONST:
                    if (c == immediateChar) {
                        state = ParseState.IMMEDIATE0;
                    } else if (c == deferredChar) {
                        inested = column;
                        state = ParseState.DEFERRED0;
                    } else if (c == '\\') {
                        state = ParseState.ESCAPE;
                    } else {
                        // do buildup expr
                        strb.append(c);
                    }
                    break;
                case IMMEDIATE0: // $
                    if (c == '{') {
                        state = ParseState.IMMEDIATE1;
                        // if chars in buffer, create constant
                        if (strb.length() > 0) {
                            final TemplateExpression cexpr = new ConstantExpression(strb.toString(), null);
                            builder.add(cexpr);
                            strb.delete(0, Integer.MAX_VALUE);
                        }
                    } else {
                        // revert to CONST
                        strb.append(immediateChar);
                        strb.append(c);
                        state = ParseState.CONST;
                    }
                    break;
                case DEFERRED0: // #
                    if (c == '{') {
                        state = ParseState.DEFERRED1;
                        // if chars in buffer, create constant
                        if (strb.length() > 0) {
                            final TemplateExpression cexpr = new ConstantExpression(strb.toString(), null);
                            builder.add(cexpr);
                            strb.delete(0, Integer.MAX_VALUE);
                        }
                    } else {
                        // revert to CONST
                        strb.append(deferredChar);
                        strb.append(c);
                        state = ParseState.CONST;
                    }
                    break;
                case IMMEDIATE1: // ${...
                    if (c == '}') {
                        if (immediate1 > 0) {
                            immediate1 -= 1;
                            strb.append(c);
                        } else {
                            // materialize the immediate expr
                            final String src = strb.toString();
                            final TemplateExpression iexpr = new ImmediateExpression(
                                    src,
                                    jexl.parse(info.at(lineno, column), noscript, src, scope),
                                    null);
                            builder.add(iexpr);
                            strb.delete(0, Integer.MAX_VALUE);
                            state = ParseState.CONST;
                        }
                    } else {
                        if (c == '{') {
                            immediate1 += 1;
                        }
                        // do buildup expr
                        column = append(strb, expr, column, c);
                    }
                    break;
                case DEFERRED1: // #{...
                    // skip inner strings (for '}')
                    if (c == '""' || c == '\'') {
                        strb.append(c);
                        column = StringParser.readString(strb, expr, column + 1, c);
                        continue;
                    }
                    // nested immediate in deferred; need to balance count of '{' & '}'
                    if (c == '{') {
                        if (expr.charAt(column - 1) == immediateChar) {
                            inner1 += 1;
                            strb.deleteCharAt(strb.length() - 1);
                            nested = true;
                        } else {
                            deferred1 += 1;
                            strb.append(c);
                        }
                        continue;
                    }
                    // closing '}'
                    if (c == '}') {
                        // balance nested immediate
                        if (deferred1 > 0) {
                            deferred1 -= 1;
                            strb.append(c);
                        } else if (inner1 > 0) {
                            inner1 -= 1;
                        } else  {
                            // materialize the nested/deferred expr
                            final String src = strb.toString();
                            TemplateExpression dexpr;
                            if (nested) {
                                dexpr = new NestedExpression(
                                        expr.substring(inested, column + 1),
                                        jexl.parse(info.at(lineno, column), noscript, src, scope),
                                        null);
                            } else {
                                dexpr = new DeferredExpression(
                                        strb.toString(),
                                        jexl.parse(info.at(lineno, column), noscript, src, scope),
                                        null);
                            }
                            builder.add(dexpr);
                            strb.delete(0, Integer.MAX_VALUE);
                            nested = false;
                            state = ParseState.CONST;
                        }
                    } else {
                        // do buildup expr
                        column = append(strb, expr, column, c);
                    }
                    break;
                case ESCAPE:
                    if (c == deferredChar) {
                        strb.append(deferredChar);
                    } else if (c == immediateChar) {
                        strb.append(immediateChar);
                    } else {
                        strb.append('\\');
                        strb.append(c);
                    }
                    state = ParseState.CONST;
            }
            if (c == '\n') {
                lineno += 1;
            }
        }
        // we should be in that state
        if (state != ParseState.CONST) {
            // otherwise, we ended a line with a \, $ or #
            switch (state) {
                case ESCAPE:
                    strb.append('\\');
                    strb.append('\\');
                    break;
                case DEFERRED0:
                    strb.append(deferredChar);
                    break;
                case IMMEDIATE0:
                    strb.append(immediateChar);
                    break;
                default:
                    throw new Exception(info.at(lineno, 0), ""malformed expression: "" + expr, null);
            }
        }
        // if any chars were buffered, add them as a constant
        if (strb.length() > 0) {
            final TemplateExpression cexpr = new ConstantExpression(strb.toString(), null);
            builder.add(cexpr);
        }
        return builder.build(this, null);
    }","  public void test40()  throws Throwable  {
      Engine engine0 = new Engine();
      TemplateEngine templateEngine0 = new TemplateEngine(engine0, false, 118, '=', '[');
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[8];
      Scope scope1 = new Scope(scope0, stringArray0);
      // Undeclared exception!
      try { 
        templateEngine0.parseExpression((JexlInfo) null, ""malformed expression: "", scope1);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.internal.TemplateEngine"", e);
      }
  }"
3037,"    public TemplateScript createTemplate(final JexlInfo info, final String prefix, final Reader source, final String... parms) {
        return new TemplateScript(this, info, prefix, source,  parms);
    }","  public void test41()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""XGyyq4x;RAgeM"");
      char[] charArray0 = new char[5];
      stringReader0.read(charArray0);
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      TemplateEngine templateEngine0 = engine0.createJxltEngine(true, 66, 'A', '.');
      // Undeclared exception!
      try { 
        templateEngine0.createTemplate((JexlInfo) null, """", (Reader) stringReader0, (String[]) null);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // @1:2 ambiguous statement error in '4x;RAgeM'
         //
         verifyException(""org.apache.commons.jexl3.parser.JexlParser"", e);
      }
  }"
3038,"    public TemplateScript createTemplate(final JexlInfo info, final String prefix, final Reader source, final String... parms) {
        return new TemplateScript(this, info, prefix, source,  parms);
    }","  public void test42()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      TemplateEngine templateEngine0 = engine0.jxlt();
      JexlInfo jexlInfo0 = new JexlInfo("""", 0, 0);
      String[] stringArray0 = new String[3];
      StringReader stringReader0 = new StringReader(""?ly\""k"");
      BufferedReader bufferedReader0 = new BufferedReader(stringReader0);
      // Undeclared exception!
      try { 
        templateEngine0.createTemplate(jexlInfo0, """", (Reader) bufferedReader0, stringArray0);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
      }
  }"
3039,"    public TemplateScript createTemplate(final JexlInfo info, final String prefix, final Reader source, final String... parms) {
        return new TemplateScript(this, info, prefix, source,  parms);
    }","  public void test43()  throws Throwable  {
      TemplateEngine templateEngine0 = new TemplateEngine((Engine) null, true, (-1663), '>', 'z');
      StringReader stringReader0 = new StringReader(""UnaryPlusNode"");
      BufferedReader bufferedReader0 = new BufferedReader(stringReader0);
      ParserTokenManager parserTokenManager0 = new ParserTokenManager((SimpleCharStream) null);
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      JexlInfo jexlInfo0 = engine0.createInfo(""F9=-y"", (-3346), (-2640));
      // Undeclared exception!
      try { 
        templateEngine0.createTemplate(jexlInfo0, ""F9=-y"", (Reader) bufferedReader0, parserTokenManager0.jjstrLiteralImages);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.internal.TemplateScript"", e);
      }
  }"
3040,"    public TemplateScript createTemplate(final JexlInfo info, final String prefix, final Reader source, final String... parms) {
        return new TemplateScript(this, info, prefix, source,  parms);
    }","  public void test44()  throws Throwable  {
      Engine engine0 = new Engine();
      TemplateEngine templateEngine0 = new TemplateEngine(engine0, true, 0, '_', '_');
      String[] stringArray0 = new String[6];
      // Undeclared exception!
      try { 
        templateEngine0.createTemplate((JexlInfo) null, """", (Reader) null, stringArray0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // null input
         //
         verifyException(""org.apache.commons.jexl3.internal.TemplateScript"", e);
      }
  }"
3041,"    public JxltEngine.Expression createExpression(JexlInfo info, final String expression) {
        if (info == null) {
            info = jexl.createInfo();
        }
        Exception xuel = null;
        TemplateExpression stmt = null;
        try {
            stmt = cache.get(expression);
            if (stmt == null) {
                stmt = parseExpression(info, expression, null);
                cache.put(expression, stmt);
            }
        } catch (final JexlException xjexl) {
            xuel = new Exception(xjexl.getInfo(), ""failed to parse '"" + expression + ""'"", xjexl);
        }
        if (xuel != null) {
            if (!jexl.isSilent()) {
                throw xuel;
            }
            jexl.logger.warn(xuel.getMessage(), xuel.getCause());
            stmt = null;
        }
        return stmt;
    }","  public void test45()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      String[] stringArray0 = new String[3];
      TemplateEngine templateEngine0 = engine0.jxlt();
      JexlInfo jexlInfo0 = engine0.createInfo("""", 1015, 1015);
      // Undeclared exception!
      try { 
        templateEngine0.createExpression(jexlInfo0, stringArray0[1]);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.internal.TemplateEngine"", e);
      }
  }"
3042,"    public JxltEngine.Expression createExpression(JexlInfo info, final String expression) {
        if (info == null) {
            info = jexl.createInfo();
        }
        Exception xuel = null;
        TemplateExpression stmt = null;
        try {
            stmt = cache.get(expression);
            if (stmt == null) {
                stmt = parseExpression(info, expression, null);
                cache.put(expression, stmt);
            }
        } catch (final JexlException xjexl) {
            xuel = new Exception(xjexl.getInfo(), ""failed to parse '"" + expression + ""'"", xjexl);
        }
        if (xuel != null) {
            if (!jexl.isSilent()) {
                throw xuel;
            }
            jexl.logger.warn(xuel.getMessage(), xuel.getCause());
            stmt = null;
        }
        return stmt;
    }","  public void test46()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      TemplateEngine templateEngine0 = new TemplateEngine(engine0, false, (-61), 'k', '}');
      JexlInfo jexlInfo0 = new JexlInfo();
      // Undeclared exception!
      try { 
        templateEngine0.createExpression(jexlInfo0, """");
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Illegal initial capacity: -61
         //
         verifyException(""java.util.HashMap"", e);
      }
  }"
3043,"    static Exception createException(final JexlInfo info,
                                     final String action,
                                     final TemplateExpression expr,
                                     final java.lang.Exception xany) {
        final StringBuilder strb = new StringBuilder(""failed to "");
        strb.append(action);
        if (expr != null) {
            strb.append("" '"");
            strb.append(expr.toString());
            strb.append(""'"");
        }
        final Throwable cause = xany.getCause();
        if (cause != null) {
            final String causeMsg = cause.getMessage();
            if (causeMsg != null) {
                strb.append("", "");
                strb.append(causeMsg);
            }
        }
        return new Exception(info, strb.toString(), xany);
    }","  public void test47()  throws Throwable  {
      TemplateEngine.BlockType templateEngine_BlockType0 = TemplateEngine.BlockType.DIRECTIVE;
      TemplateEngine.Block templateEngine_Block0 = new TemplateEngine.Block(templateEngine_BlockType0, 0, """");
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      TemplateEngine templateEngine0 = engine0.jxlt();
      JexlInfo jexlInfo0 = new JexlInfo("""", 0, 0);
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[3];
      Scope scope1 = new Scope(scope0, stringArray0);
      TemplateEngine.TemplateExpression templateEngine_TemplateExpression0 = templateEngine0.parseExpression(jexlInfo0, """", scope1);
      TemplateEngine.ConstantExpression templateEngine_ConstantExpression0 = templateEngine0.new ConstantExpression(templateEngine_Block0, templateEngine_TemplateExpression0);
      // Undeclared exception!
      try { 
        TemplateEngine.createException(jexlInfo0, """", templateEngine_ConstantExpression0, (Exception) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.internal.TemplateEngine"", e);
      }
  }"
3044,"    public JxltEngine.Expression createExpression(JexlInfo info, final String expression) {
        if (info == null) {
            info = jexl.createInfo();
        }
        Exception xuel = null;
        TemplateExpression stmt = null;
        try {
            stmt = cache.get(expression);
            if (stmt == null) {
                stmt = parseExpression(info, expression, null);
                cache.put(expression, stmt);
            }
        } catch (final JexlException xjexl) {
            xuel = new Exception(xjexl.getInfo(), ""failed to parse '"" + expression + ""'"", xjexl);
        }
        if (xuel != null) {
            if (!jexl.isSilent()) {
                throw xuel;
            }
            jexl.logger.warn(xuel.getMessage(), xuel.getCause());
            stmt = null;
        }
        return stmt;
    }","  public void test48()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      TemplateEngine templateEngine0 = engine0.createJxltEngine(true, 4, 'r', 'r');
      JexlInfo jexlInfo0 = engine0.createInfo("""", 4, 0);
      templateEngine0.createExpression("""");
      JxltEngine.Expression jxltEngine_Expression0 = templateEngine0.createExpression(jexlInfo0, """");
}"
3045,"    public JxltEngine.Expression createExpression(JexlInfo info, final String expression) {
        if (info == null) {
            info = jexl.createInfo();
        }
        Exception xuel = null;
        TemplateExpression stmt = null;
        try {
            stmt = cache.get(expression);
            if (stmt == null) {
                stmt = parseExpression(info, expression, null);
                cache.put(expression, stmt);
            }
        } catch (final JexlException xjexl) {
            xuel = new Exception(xjexl.getInfo(), ""failed to parse '"" + expression + ""'"", xjexl);
        }
        if (xuel != null) {
            if (!jexl.isSilent()) {
                throw xuel;
            }
            jexl.logger.warn(xuel.getMessage(), xuel.getCause());
            stmt = null;
        }
        return stmt;
    }","  public void test49()  throws Throwable  {
      Engine engine0 = new Engine();
      TemplateEngine templateEngine0 = engine0.createJxltEngine(true, 36, 'p', 'p');
      JxltEngine.Expression jxltEngine_Expression0 = templateEngine0.createExpression((JexlInfo) null, """");
}"
3046,,"  public void test50()  throws Throwable  {
      Engine engine0 = new Engine();
      TemplateEngine templateEngine0 = engine0.createJxltEngine(false, 27, 'H', 'n');
      StringBuilder stringBuilder0 = new StringBuilder("""");
      TemplateEngine.ImmediateExpression templateEngine_ImmediateExpression0 = templateEngine0.new ImmediateExpression(stringBuilder0, (JexlNode) null, (TemplateEngine.TemplateExpression) null);
      String string0 = templateEngine_ImmediateExpression0.toString();
}"
3047,"    TemplateExpression parseExpression(final JexlInfo info, final String expr, final Scope scope) {  // CSOFF: MethodLength
        final int size = expr.length();
        final ExpressionBuilder builder = new ExpressionBuilder(0);
        final StringBuilder strb = new StringBuilder(size);
        ParseState state = ParseState.CONST;
        int immediate1 = 0;
        int deferred1 = 0;
        int inner1 = 0;
        boolean nested = false;
        int inested = -1;
        int lineno = info.getLine();
        for (int column = 0; column < size; ++column) {
            final char c = expr.charAt(column);
            switch (state) {
                default: // in case we ever add new unified expression type
                    throw new UnsupportedOperationException(""unexpected unified expression type"");
                case CONST:
                    if (c == immediateChar) {
                        state = ParseState.IMMEDIATE0;
                    } else if (c == deferredChar) {
                        inested = column;
                        state = ParseState.DEFERRED0;
                    } else if (c == '\\') {
                        state = ParseState.ESCAPE;
                    } else {
                        // do buildup expr
                        strb.append(c);
                    }
                    break;
                case IMMEDIATE0: // $
                    if (c == '{') {
                        state = ParseState.IMMEDIATE1;
                        // if chars in buffer, create constant
                        if (strb.length() > 0) {
                            final TemplateExpression cexpr = new ConstantExpression(strb.toString(), null);
                            builder.add(cexpr);
                            strb.delete(0, Integer.MAX_VALUE);
                        }
                    } else {
                        // revert to CONST
                        strb.append(immediateChar);
                        strb.append(c);
                        state = ParseState.CONST;
                    }
                    break;
                case DEFERRED0: // #
                    if (c == '{') {
                        state = ParseState.DEFERRED1;
                        // if chars in buffer, create constant
                        if (strb.length() > 0) {
                            final TemplateExpression cexpr = new ConstantExpression(strb.toString(), null);
                            builder.add(cexpr);
                            strb.delete(0, Integer.MAX_VALUE);
                        }
                    } else {
                        // revert to CONST
                        strb.append(deferredChar);
                        strb.append(c);
                        state = ParseState.CONST;
                    }
                    break;
                case IMMEDIATE1: // ${...
                    if (c == '}') {
                        if (immediate1 > 0) {
                            immediate1 -= 1;
                            strb.append(c);
                        } else {
                            // materialize the immediate expr
                            final String src = strb.toString();
                            final TemplateExpression iexpr = new ImmediateExpression(
                                    src,
                                    jexl.parse(info.at(lineno, column), noscript, src, scope),
                                    null);
                            builder.add(iexpr);
                            strb.delete(0, Integer.MAX_VALUE);
                            state = ParseState.CONST;
                        }
                    } else {
                        if (c == '{') {
                            immediate1 += 1;
                        }
                        // do buildup expr
                        column = append(strb, expr, column, c);
                    }
                    break;
                case DEFERRED1: // #{...
                    // skip inner strings (for '}')
                    if (c == '""' || c == '\'') {
                        strb.append(c);
                        column = StringParser.readString(strb, expr, column + 1, c);
                        continue;
                    }
                    // nested immediate in deferred; need to balance count of '{' & '}'
                    if (c == '{') {
                        if (expr.charAt(column - 1) == immediateChar) {
                            inner1 += 1;
                            strb.deleteCharAt(strb.length() - 1);
                            nested = true;
                        } else {
                            deferred1 += 1;
                            strb.append(c);
                        }
                        continue;
                    }
                    // closing '}'
                    if (c == '}') {
                        // balance nested immediate
                        if (deferred1 > 0) {
                            deferred1 -= 1;
                            strb.append(c);
                        } else if (inner1 > 0) {
                            inner1 -= 1;
                        } else  {
                            // materialize the nested/deferred expr
                            final String src = strb.toString();
                            TemplateExpression dexpr;
                            if (nested) {
                                dexpr = new NestedExpression(
                                        expr.substring(inested, column + 1),
                                        jexl.parse(info.at(lineno, column), noscript, src, scope),
                                        null);
                            } else {
                                dexpr = new DeferredExpression(
                                        strb.toString(),
                                        jexl.parse(info.at(lineno, column), noscript, src, scope),
                                        null);
                            }
                            builder.add(dexpr);
                            strb.delete(0, Integer.MAX_VALUE);
                            nested = false;
                            state = ParseState.CONST;
                        }
                    } else {
                        // do buildup expr
                        column = append(strb, expr, column, c);
                    }
                    break;
                case ESCAPE:
                    if (c == deferredChar) {
                        strb.append(deferredChar);
                    } else if (c == immediateChar) {
                        strb.append(immediateChar);
                    } else {
                        strb.append('\\');
                        strb.append(c);
                    }
                    state = ParseState.CONST;
            }
            if (c == '\n') {
                lineno += 1;
            }
        }
        // we should be in that state
        if (state != ParseState.CONST) {
            // otherwise, we ended a line with a \, $ or #
            switch (state) {
                case ESCAPE:
                    strb.append('\\');
                    strb.append('\\');
                    break;
                case DEFERRED0:
                    strb.append(deferredChar);
                    break;
                case IMMEDIATE0:
                    strb.append(immediateChar);
                    break;
                default:
                    throw new Exception(info.at(lineno, 0), ""malformed expression: "" + expr, null);
            }
        }
        // if any chars were buffered, add them as a constant
        if (strb.length() > 0) {
            final TemplateExpression cexpr = new ConstantExpression(strb.toString(), null);
            builder.add(cexpr);
        }
        return builder.build(this, null);
    }","  public void test51()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      ASTJexlScript aSTJexlScript0 = new ASTJexlScript((-3554));
      TemplateEngine templateEngine0 = new TemplateEngine(engine0, true, 123, 'e', 'h');
      JexlInfo jexlInfo0 = engine0.createInfo(""780x,=n>:~IB$}"", 2246, 2246);
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      Scope scope1 = new Scope(scope0, (String[]) null);
      TemplateEngine.TemplateExpression templateEngine_TemplateExpression0 = templateEngine0.parseExpression(jexlInfo0, ""org.apache.commons.jexl3.internal.TemplateEngine$Block"", scope1);
      TemplateEngine.ImmediateExpression templateEngine_ImmediateExpression0 = templateEngine0.new ImmediateExpression(""780x,=n>:~IB$}"", aSTJexlScript0, templateEngine_TemplateExpression0);
      templateEngine_ImmediateExpression0.toString();
}"
3048,"    public Engine getEngine() {
        return jexl;
    }","  public void test52()  throws Throwable  {
      Engine engine0 = new Engine();
      TemplateEngine templateEngine0 = engine0.jxlt();
      Engine engine1 = templateEngine0.getEngine();
}"
3049,"    protected List<Block> readTemplate(final String prefix, final Reader source) {
        final ArrayList<Block> blocks = new ArrayList<Block>();
        final BufferedReader reader;
        if (source instanceof BufferedReader) {
            reader = (BufferedReader) source;
        } else {
            reader = new BufferedReader(source);
        }
        final StringBuilder strb = new StringBuilder();
        BlockType type = null;
        int prefixLen;
        final Iterator<CharSequence> lines = readLines(reader);
        int lineno = 1;
        int start = 0;
        while (lines.hasNext()) {
            final CharSequence line = lines.next();
            if (line == null) {
                break;
            }
            if (type == null) {
                // determine starting type if not known yet
                prefixLen = startsWith(line, prefix);
                if (prefixLen >= 0) {
                    type = BlockType.DIRECTIVE;
                    strb.append(line.subSequence(prefixLen, line.length()));
                } else {
                    type = BlockType.VERBATIM;
                    strb.append(line.subSequence(0, line.length()));
                }
                start = lineno;
            } else if (type == BlockType.DIRECTIVE) {
                // switch to verbatim if necessary
                prefixLen = startsWith(line, prefix);
                if (prefixLen < 0) {
                    final Block directive = new Block(BlockType.DIRECTIVE, start, strb.toString());
                    strb.delete(0, Integer.MAX_VALUE);
                    blocks.add(directive);
                    type = BlockType.VERBATIM;
                    strb.append(line.subSequence(0, line.length()));
                    start = lineno;
                } else {
                    // still a directive
                    strb.append(line.subSequence(prefixLen, line.length()));
                }
            } else if (type == BlockType.VERBATIM) {
                // switch to directive if necessary
                prefixLen = startsWith(line, prefix);
                if (prefixLen >= 0) {
                    final Block verbatim = new Block(BlockType.VERBATIM, start, strb.toString());
                    strb.delete(0, Integer.MAX_VALUE);
                    blocks.add(verbatim);
                    type = BlockType.DIRECTIVE;
                    strb.append(line.subSequence(prefixLen, line.length()));
                    start = lineno;
                } else {
                    strb.append(line.subSequence(0, line.length()));
                }
            }
            lineno += 1;
        }
        // input may be null
        if (type != null && strb.length() > 0) {
            final Block block = new Block(type, start, strb.toString());
            blocks.add(block);
        }
        blocks.trimToSize();
        return blocks;
    }","  public void test53()  throws Throwable  {
      TemplateEngine templateEngine0 = new TemplateEngine((Engine) null, true, (-1663), '>', 'z');
      StringReader stringReader0 = new StringReader(""UnaryPlusNode"");
      BufferedReader bufferedReader0 = new BufferedReader(stringReader0);
      List<TemplateEngine.Block> list0 = templateEngine0.readTemplate(""UnaryPlusNode"", bufferedReader0);
}"
3050,"    protected static Iterator<CharSequence> readLines(final Reader reader) {
        if (!reader.markSupported()) {
            throw new IllegalArgumentException(""mark support in reader required"");
        }
        return new Iterator<CharSequence>() {
            private CharSequence next = doNext();

            private CharSequence doNext() {
                final StringBuffer strb = new StringBuffer(64); // CSOFF: MagicNumber
                int c;
                boolean eol = false;
                try {
                    while ((c = reader.read()) >= 0) {
                        if (eol) {// && (c != '\n' && c != '\r')) {
                            reader.reset();
                            break;
                        }
                        if (c == '\n') {
                            eol = true;
                        }
                        strb.append((char) c);
                        reader.mark(1);
                    }
                } catch (final IOException xio) {
                    return null;
                }
                return strb.length() > 0 ? strb : null;
            }

            @Override
            public boolean hasNext() {
                return next != null;
            }

            @Override
            public CharSequence next() {
                final CharSequence current = next;
                if (current != null) {
                    next = doNext();
                }
                return current;
            }

            @Override
            public void remove() {
                throw new UnsupportedOperationException(""Not supported."");
            }
        };
    }","  public void test54()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""//\n"");
      Iterator<CharSequence> iterator0 = TemplateEngine.readLines(stringReader0);
}"
3051,"    protected List<Block> readTemplate(final String prefix, final Reader source) {
        final ArrayList<Block> blocks = new ArrayList<Block>();
        final BufferedReader reader;
        if (source instanceof BufferedReader) {
            reader = (BufferedReader) source;
        } else {
            reader = new BufferedReader(source);
        }
        final StringBuilder strb = new StringBuilder();
        BlockType type = null;
        int prefixLen;
        final Iterator<CharSequence> lines = readLines(reader);
        int lineno = 1;
        int start = 0;
        while (lines.hasNext()) {
            final CharSequence line = lines.next();
            if (line == null) {
                break;
            }
            if (type == null) {
                // determine starting type if not known yet
                prefixLen = startsWith(line, prefix);
                if (prefixLen >= 0) {
                    type = BlockType.DIRECTIVE;
                    strb.append(line.subSequence(prefixLen, line.length()));
                } else {
                    type = BlockType.VERBATIM;
                    strb.append(line.subSequence(0, line.length()));
                }
                start = lineno;
            } else if (type == BlockType.DIRECTIVE) {
                // switch to verbatim if necessary
                prefixLen = startsWith(line, prefix);
                if (prefixLen < 0) {
                    final Block directive = new Block(BlockType.DIRECTIVE, start, strb.toString());
                    strb.delete(0, Integer.MAX_VALUE);
                    blocks.add(directive);
                    type = BlockType.VERBATIM;
                    strb.append(line.subSequence(0, line.length()));
                    start = lineno;
                } else {
                    // still a directive
                    strb.append(line.subSequence(prefixLen, line.length()));
                }
            } else if (type == BlockType.VERBATIM) {
                // switch to directive if necessary
                prefixLen = startsWith(line, prefix);
                if (prefixLen >= 0) {
                    final Block verbatim = new Block(BlockType.VERBATIM, start, strb.toString());
                    strb.delete(0, Integer.MAX_VALUE);
                    blocks.add(verbatim);
                    type = BlockType.DIRECTIVE;
                    strb.append(line.subSequence(prefixLen, line.length()));
                    start = lineno;
                } else {
                    strb.append(line.subSequence(0, line.length()));
                }
            }
            lineno += 1;
        }
        // input may be null
        if (type != null && strb.length() > 0) {
            final Block block = new Block(type, start, strb.toString());
            blocks.add(block);
        }
        blocks.trimToSize();
        return blocks;
    }","  public void test55()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      TemplateEngine templateEngine0 = engine0.jxlt();
      StringReader stringReader0 = new StringReader(""}c^y5 jF^XjZi-s"");
      List<TemplateEngine.Block> list0 = templateEngine0.readTemplate("""", stringReader0);
}"
3052,"    protected List<Block> readTemplate(final String prefix, final Reader source) {
        final ArrayList<Block> blocks = new ArrayList<Block>();
        final BufferedReader reader;
        if (source instanceof BufferedReader) {
            reader = (BufferedReader) source;
        } else {
            reader = new BufferedReader(source);
        }
        final StringBuilder strb = new StringBuilder();
        BlockType type = null;
        int prefixLen;
        final Iterator<CharSequence> lines = readLines(reader);
        int lineno = 1;
        int start = 0;
        while (lines.hasNext()) {
            final CharSequence line = lines.next();
            if (line == null) {
                break;
            }
            if (type == null) {
                // determine starting type if not known yet
                prefixLen = startsWith(line, prefix);
                if (prefixLen >= 0) {
                    type = BlockType.DIRECTIVE;
                    strb.append(line.subSequence(prefixLen, line.length()));
                } else {
                    type = BlockType.VERBATIM;
                    strb.append(line.subSequence(0, line.length()));
                }
                start = lineno;
            } else if (type == BlockType.DIRECTIVE) {
                // switch to verbatim if necessary
                prefixLen = startsWith(line, prefix);
                if (prefixLen < 0) {
                    final Block directive = new Block(BlockType.DIRECTIVE, start, strb.toString());
                    strb.delete(0, Integer.MAX_VALUE);
                    blocks.add(directive);
                    type = BlockType.VERBATIM;
                    strb.append(line.subSequence(0, line.length()));
                    start = lineno;
                } else {
                    // still a directive
                    strb.append(line.subSequence(prefixLen, line.length()));
                }
            } else if (type == BlockType.VERBATIM) {
                // switch to directive if necessary
                prefixLen = startsWith(line, prefix);
                if (prefixLen >= 0) {
                    final Block verbatim = new Block(BlockType.VERBATIM, start, strb.toString());
                    strb.delete(0, Integer.MAX_VALUE);
                    blocks.add(verbatim);
                    type = BlockType.DIRECTIVE;
                    strb.append(line.subSequence(prefixLen, line.length()));
                    start = lineno;
                } else {
                    strb.append(line.subSequence(0, line.length()));
                }
            }
            lineno += 1;
        }
        // input may be null
        if (type != null && strb.length() > 0) {
            final Block block = new Block(type, start, strb.toString());
            blocks.add(block);
        }
        blocks.trimToSize();
        return blocks;
    }","  public void test56()  throws Throwable  {
      Engine engine0 = new Engine();
      TemplateEngine templateEngine0 = engine0.jxlt();
      StringReader stringReader0 = new StringReader(""wY=XqIr"");
      BufferedReader bufferedReader0 = new BufferedReader(stringReader0);
      List<TemplateEngine.Block> list0 = templateEngine0.readTemplate(""SDSd nZD&:(0RR*"", bufferedReader0);
}"
3053,"    public TemplateScript createTemplate(final JexlInfo info, final String prefix, final Reader source, final String... parms) {
        return new TemplateScript(this, info, prefix, source,  parms);
    }","  public void test57()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      TemplateEngine templateEngine0 = engine0.jxlt();
      JexlInfo jexlInfo0 = engine0.createInfo("" /*= "", 108, 0);
      JxltEngine.Template jxltEngine_Template0 = templateEngine0.createTemplate(jexlInfo0, "" */"", (String[]) null);
}"
3054,"    protected int startsWith(CharSequence sequence, final CharSequence pattern) {
        final int length = sequence.length();
        int s = 0;
        while (s < length && Character.isSpaceChar(sequence.charAt(s))) {
            s += 1;
        }
        if (s < length && pattern.length() <= (length - s)) {
            sequence = sequence.subSequence(s, length);
            if (sequence.subSequence(0, pattern.length()).equals(pattern)) {
                return s + pattern.length();
            }
        }
        return -1;
    }","  public void test58()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      TemplateEngine templateEngine0 = engine0.jxlt();
      int int0 = templateEngine0.startsWith("""", """");
}"
3055,"    public TemplateEngine(final Engine aJexl,
                          final boolean noScript,
                          final int cacheSize,
                          final char immediate,
                          final char deferred) {
        this.jexl = aJexl;
        this.cache = new SoftCache<>(cacheSize);
        immediateChar = immediate;
        deferredChar = deferred;
        noscript = noScript;
    }","  public void test59()  throws Throwable  {
      TemplateEngine.BlockType templateEngine_BlockType0 = TemplateEngine.BlockType.DIRECTIVE;
      TemplateEngine.Block templateEngine_Block0 = new TemplateEngine.Block(templateEngine_BlockType0, 0, ""$,ALwi*W*y><o*]:"");
      StringBuilder stringBuilder0 = new StringBuilder(""$,ALwi*W*y><o*]:"");
      templateEngine_Block0.toString(stringBuilder0, """");
}"
3056,"    public TemplateEngine(final Engine aJexl,
                          final boolean noScript,
                          final int cacheSize,
                          final char immediate,
                          final char deferred) {
        this.jexl = aJexl;
        this.cache = new SoftCache<>(cacheSize);
        immediateChar = immediate;
        deferredChar = deferred;
        noscript = noScript;
    }","  public void test60()  throws Throwable  {
      TemplateEngine.BlockType templateEngine_BlockType0 = TemplateEngine.BlockType.VERBATIM;
      TemplateEngine.Block templateEngine_Block0 = new TemplateEngine.Block(templateEngine_BlockType0, 0, """");
      StringBuilder stringBuilder0 = new StringBuilder(""#pragma"");
      templateEngine_Block0.toString(stringBuilder0, """");
}"
3057,"    public TemplateEngine(final Engine aJexl,
                          final boolean noScript,
                          final int cacheSize,
                          final char immediate,
                          final char deferred) {
        this.jexl = aJexl;
        this.cache = new SoftCache<>(cacheSize);
        immediateChar = immediate;
        deferredChar = deferred;
        noscript = noScript;
    }","  public void test61()  throws Throwable  {
      TemplateEngine.BlockType templateEngine_BlockType0 = TemplateEngine.BlockType.VERBATIM;
      TemplateEngine.Block templateEngine_Block0 = new TemplateEngine.Block(templateEngine_BlockType0, 0, """");
      String string0 = templateEngine_Block0.toString();
}"
3058,"    TemplateExpression parseExpression(final JexlInfo info, final String expr, final Scope scope) {  // CSOFF: MethodLength
        final int size = expr.length();
        final ExpressionBuilder builder = new ExpressionBuilder(0);
        final StringBuilder strb = new StringBuilder(size);
        ParseState state = ParseState.CONST;
        int immediate1 = 0;
        int deferred1 = 0;
        int inner1 = 0;
        boolean nested = false;
        int inested = -1;
        int lineno = info.getLine();
        for (int column = 0; column < size; ++column) {
            final char c = expr.charAt(column);
            switch (state) {
                default: // in case we ever add new unified expression type
                    throw new UnsupportedOperationException(""unexpected unified expression type"");
                case CONST:
                    if (c == immediateChar) {
                        state = ParseState.IMMEDIATE0;
                    } else if (c == deferredChar) {
                        inested = column;
                        state = ParseState.DEFERRED0;
                    } else if (c == '\\') {
                        state = ParseState.ESCAPE;
                    } else {
                        // do buildup expr
                        strb.append(c);
                    }
                    break;
                case IMMEDIATE0: // $
                    if (c == '{') {
                        state = ParseState.IMMEDIATE1;
                        // if chars in buffer, create constant
                        if (strb.length() > 0) {
                            final TemplateExpression cexpr = new ConstantExpression(strb.toString(), null);
                            builder.add(cexpr);
                            strb.delete(0, Integer.MAX_VALUE);
                        }
                    } else {
                        // revert to CONST
                        strb.append(immediateChar);
                        strb.append(c);
                        state = ParseState.CONST;
                    }
                    break;
                case DEFERRED0: // #
                    if (c == '{') {
                        state = ParseState.DEFERRED1;
                        // if chars in buffer, create constant
                        if (strb.length() > 0) {
                            final TemplateExpression cexpr = new ConstantExpression(strb.toString(), null);
                            builder.add(cexpr);
                            strb.delete(0, Integer.MAX_VALUE);
                        }
                    } else {
                        // revert to CONST
                        strb.append(deferredChar);
                        strb.append(c);
                        state = ParseState.CONST;
                    }
                    break;
                case IMMEDIATE1: // ${...
                    if (c == '}') {
                        if (immediate1 > 0) {
                            immediate1 -= 1;
                            strb.append(c);
                        } else {
                            // materialize the immediate expr
                            final String src = strb.toString();
                            final TemplateExpression iexpr = new ImmediateExpression(
                                    src,
                                    jexl.parse(info.at(lineno, column), noscript, src, scope),
                                    null);
                            builder.add(iexpr);
                            strb.delete(0, Integer.MAX_VALUE);
                            state = ParseState.CONST;
                        }
                    } else {
                        if (c == '{') {
                            immediate1 += 1;
                        }
                        // do buildup expr
                        column = append(strb, expr, column, c);
                    }
                    break;
                case DEFERRED1: // #{...
                    // skip inner strings (for '}')
                    if (c == '""' || c == '\'') {
                        strb.append(c);
                        column = StringParser.readString(strb, expr, column + 1, c);
                        continue;
                    }
                    // nested immediate in deferred; need to balance count of '{' & '}'
                    if (c == '{') {
                        if (expr.charAt(column - 1) == immediateChar) {
                            inner1 += 1;
                            strb.deleteCharAt(strb.length() - 1);
                            nested = true;
                        } else {
                            deferred1 += 1;
                            strb.append(c);
                        }
                        continue;
                    }
                    // closing '}'
                    if (c == '}') {
                        // balance nested immediate
                        if (deferred1 > 0) {
                            deferred1 -= 1;
                            strb.append(c);
                        } else if (inner1 > 0) {
                            inner1 -= 1;
                        } else  {
                            // materialize the nested/deferred expr
                            final String src = strb.toString();
                            TemplateExpression dexpr;
                            if (nested) {
                                dexpr = new NestedExpression(
                                        expr.substring(inested, column + 1),
                                        jexl.parse(info.at(lineno, column), noscript, src, scope),
                                        null);
                            } else {
                                dexpr = new DeferredExpression(
                                        strb.toString(),
                                        jexl.parse(info.at(lineno, column), noscript, src, scope),
                                        null);
                            }
                            builder.add(dexpr);
                            strb.delete(0, Integer.MAX_VALUE);
                            nested = false;
                            state = ParseState.CONST;
                        }
                    } else {
                        // do buildup expr
                        column = append(strb, expr, column, c);
                    }
                    break;
                case ESCAPE:
                    if (c == deferredChar) {
                        strb.append(deferredChar);
                    } else if (c == immediateChar) {
                        strb.append(immediateChar);
                    } else {
                        strb.append('\\');
                        strb.append(c);
                    }
                    state = ParseState.CONST;
            }
            if (c == '\n') {
                lineno += 1;
            }
        }
        // we should be in that state
        if (state != ParseState.CONST) {
            // otherwise, we ended a line with a \, $ or #
            switch (state) {
                case ESCAPE:
                    strb.append('\\');
                    strb.append('\\');
                    break;
                case DEFERRED0:
                    strb.append(deferredChar);
                    break;
                case IMMEDIATE0:
                    strb.append(immediateChar);
                    break;
                default:
                    throw new Exception(info.at(lineno, 0), ""malformed expression: "" + expr, null);
            }
        }
        // if any chars were buffered, add them as a constant
        if (strb.length() > 0) {
            final TemplateExpression cexpr = new ConstantExpression(strb.toString(), null);
            builder.add(cexpr);
        }
        return builder.build(this, null);
    }","  public void test62()  throws Throwable  {
      Engine engine0 = new Engine();
      TemplateEngine templateEngine0 = engine0.jxlt();
      JexlInfo jexlInfo0 = new JexlInfo(""org.apache.commons.jexl3.JexlException$Feature"", (-277), (-277));
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[11];
      Scope scope1 = new Scope(scope0, stringArray0);
      // Undeclared exception!
      try { 
        templateEngine0.parseExpression(jexlInfo0, ""#{#WXcJ`"", scope1);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // org.apache.commons.jexl3.JexlException$Feature exception error : malformed expression: #{#WXcJ`
         //
         verifyException(""org.apache.commons.jexl3.internal.TemplateEngine"", e);
      }
  }"
3059,"    TemplateExpression parseExpression(final JexlInfo info, final String expr, final Scope scope) {  // CSOFF: MethodLength
        final int size = expr.length();
        final ExpressionBuilder builder = new ExpressionBuilder(0);
        final StringBuilder strb = new StringBuilder(size);
        ParseState state = ParseState.CONST;
        int immediate1 = 0;
        int deferred1 = 0;
        int inner1 = 0;
        boolean nested = false;
        int inested = -1;
        int lineno = info.getLine();
        for (int column = 0; column < size; ++column) {
            final char c = expr.charAt(column);
            switch (state) {
                default: // in case we ever add new unified expression type
                    throw new UnsupportedOperationException(""unexpected unified expression type"");
                case CONST:
                    if (c == immediateChar) {
                        state = ParseState.IMMEDIATE0;
                    } else if (c == deferredChar) {
                        inested = column;
                        state = ParseState.DEFERRED0;
                    } else if (c == '\\') {
                        state = ParseState.ESCAPE;
                    } else {
                        // do buildup expr
                        strb.append(c);
                    }
                    break;
                case IMMEDIATE0: // $
                    if (c == '{') {
                        state = ParseState.IMMEDIATE1;
                        // if chars in buffer, create constant
                        if (strb.length() > 0) {
                            final TemplateExpression cexpr = new ConstantExpression(strb.toString(), null);
                            builder.add(cexpr);
                            strb.delete(0, Integer.MAX_VALUE);
                        }
                    } else {
                        // revert to CONST
                        strb.append(immediateChar);
                        strb.append(c);
                        state = ParseState.CONST;
                    }
                    break;
                case DEFERRED0: // #
                    if (c == '{') {
                        state = ParseState.DEFERRED1;
                        // if chars in buffer, create constant
                        if (strb.length() > 0) {
                            final TemplateExpression cexpr = new ConstantExpression(strb.toString(), null);
                            builder.add(cexpr);
                            strb.delete(0, Integer.MAX_VALUE);
                        }
                    } else {
                        // revert to CONST
                        strb.append(deferredChar);
                        strb.append(c);
                        state = ParseState.CONST;
                    }
                    break;
                case IMMEDIATE1: // ${...
                    if (c == '}') {
                        if (immediate1 > 0) {
                            immediate1 -= 1;
                            strb.append(c);
                        } else {
                            // materialize the immediate expr
                            final String src = strb.toString();
                            final TemplateExpression iexpr = new ImmediateExpression(
                                    src,
                                    jexl.parse(info.at(lineno, column), noscript, src, scope),
                                    null);
                            builder.add(iexpr);
                            strb.delete(0, Integer.MAX_VALUE);
                            state = ParseState.CONST;
                        }
                    } else {
                        if (c == '{') {
                            immediate1 += 1;
                        }
                        // do buildup expr
                        column = append(strb, expr, column, c);
                    }
                    break;
                case DEFERRED1: // #{...
                    // skip inner strings (for '}')
                    if (c == '""' || c == '\'') {
                        strb.append(c);
                        column = StringParser.readString(strb, expr, column + 1, c);
                        continue;
                    }
                    // nested immediate in deferred; need to balance count of '{' & '}'
                    if (c == '{') {
                        if (expr.charAt(column - 1) == immediateChar) {
                            inner1 += 1;
                            strb.deleteCharAt(strb.length() - 1);
                            nested = true;
                        } else {
                            deferred1 += 1;
                            strb.append(c);
                        }
                        continue;
                    }
                    // closing '}'
                    if (c == '}') {
                        // balance nested immediate
                        if (deferred1 > 0) {
                            deferred1 -= 1;
                            strb.append(c);
                        } else if (inner1 > 0) {
                            inner1 -= 1;
                        } else  {
                            // materialize the nested/deferred expr
                            final String src = strb.toString();
                            TemplateExpression dexpr;
                            if (nested) {
                                dexpr = new NestedExpression(
                                        expr.substring(inested, column + 1),
                                        jexl.parse(info.at(lineno, column), noscript, src, scope),
                                        null);
                            } else {
                                dexpr = new DeferredExpression(
                                        strb.toString(),
                                        jexl.parse(info.at(lineno, column), noscript, src, scope),
                                        null);
                            }
                            builder.add(dexpr);
                            strb.delete(0, Integer.MAX_VALUE);
                            nested = false;
                            state = ParseState.CONST;
                        }
                    } else {
                        // do buildup expr
                        column = append(strb, expr, column, c);
                    }
                    break;
                case ESCAPE:
                    if (c == deferredChar) {
                        strb.append(deferredChar);
                    } else if (c == immediateChar) {
                        strb.append(immediateChar);
                    } else {
                        strb.append('\\');
                        strb.append(c);
                    }
                    state = ParseState.CONST;
            }
            if (c == '\n') {
                lineno += 1;
            }
        }
        // we should be in that state
        if (state != ParseState.CONST) {
            // otherwise, we ended a line with a \, $ or #
            switch (state) {
                case ESCAPE:
                    strb.append('\\');
                    strb.append('\\');
                    break;
                case DEFERRED0:
                    strb.append(deferredChar);
                    break;
                case IMMEDIATE0:
                    strb.append(immediateChar);
                    break;
                default:
                    throw new Exception(info.at(lineno, 0), ""malformed expression: "" + expr, null);
            }
        }
        // if any chars were buffered, add them as a constant
        if (strb.length() > 0) {
            final TemplateExpression cexpr = new ConstantExpression(strb.toString(), null);
            builder.add(cexpr);
        }
        return builder.build(this, null);
    }","  public void test63()  throws Throwable  {
      Engine engine0 = new Engine();
      TemplateEngine templateEngine0 = engine0.jxlt();
      JexlInfo jexlInfo0 = new JexlInfo(""org.apache.commons.jexl3.JexlException$Feature"", (-277), (-277));
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[6];
      Scope scope1 = new Scope(scope0, stringArray0);
      // Undeclared exception!
      try { 
        templateEngine0.parseExpression(jexlInfo0, ""Q#{#WXcJ`"", scope1);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // org.apache.commons.jexl3.JexlException$Feature exception error : malformed expression: Q#{#WXcJ`
         //
         verifyException(""org.apache.commons.jexl3.internal.TemplateEngine"", e);
      }
  }"
3060,"    static Exception createException(final JexlInfo info,
                                     final String action,
                                     final TemplateExpression expr,
                                     final java.lang.Exception xany) {
        final StringBuilder strb = new StringBuilder(""failed to "");
        strb.append(action);
        if (expr != null) {
            strb.append("" '"");
            strb.append(expr.toString());
            strb.append(""'"");
        }
        final Throwable cause = xany.getCause();
        if (cause != null) {
            final String causeMsg = cause.getMessage();
            if (causeMsg != null) {
                strb.append("", "");
                strb.append(causeMsg);
            }
        }
        return new Exception(info, strb.toString(), xany);
    }","  public void test64()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      TemplateEngine templateEngine0 = engine0.jxlt();
      JexlInfo jexlInfo0 = new JexlInfo(""org.apache.commons.jexl3.internal.TemplateEngine$DeferredExpression"", 0, 0);
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[3];
      Scope scope1 = new Scope(scope0, stringArray0);
      TemplateEngine.TemplateExpression templateEngine_TemplateExpression0 = templateEngine0.parseExpression(jexlInfo0, ""org.apache.commons.jexl3.internal.TemplateEngine$DeferredExpression"", scope1);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException();
      MockException mockException0 = new MockException(""=KB`'V7oHRa"", mockRuntimeException0);
      JxltEngine.Exception jxltEngine_Exception0 = TemplateEngine.createException(jexlInfo0, ""org.apache.commons.jexl3.internal.TemplateEngine$DeferredExpression"", templateEngine_TemplateExpression0, mockException0);
}"
3061,"    static Exception createException(final JexlInfo info,
                                     final String action,
                                     final TemplateExpression expr,
                                     final java.lang.Exception xany) {
        final StringBuilder strb = new StringBuilder(""failed to "");
        strb.append(action);
        if (expr != null) {
            strb.append("" '"");
            strb.append(expr.toString());
            strb.append(""'"");
        }
        final Throwable cause = xany.getCause();
        if (cause != null) {
            final String causeMsg = cause.getMessage();
            if (causeMsg != null) {
                strb.append("", "");
                strb.append(causeMsg);
            }
        }
        return new Exception(info, strb.toString(), xany);
    }","  public void test65()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      TemplateEngine templateEngine0 = engine0.jxlt();
      JexlInfo jexlInfo0 = new JexlInfo("""", 0, 0);
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[3];
      Scope scope1 = new Scope(scope0, stringArray0);
      TemplateEngine.TemplateExpression templateEngine_TemplateExpression0 = templateEngine0.parseExpression(jexlInfo0, """", scope1);
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException(""]s.kDj&g$ekh"");
      MockException mockException0 = new MockException(""=KB`'V7oHRa"", mockRuntimeException0);
      JxltEngine.Exception jxltEngine_Exception0 = TemplateEngine.createException(jexlInfo0, """", templateEngine_TemplateExpression0, mockException0);
}"
3062,"    static Exception createException(final JexlInfo info,
                                     final String action,
                                     final TemplateExpression expr,
                                     final java.lang.Exception xany) {
        final StringBuilder strb = new StringBuilder(""failed to "");
        strb.append(action);
        if (expr != null) {
            strb.append("" '"");
            strb.append(expr.toString());
            strb.append(""'"");
        }
        final Throwable cause = xany.getCause();
        if (cause != null) {
            final String causeMsg = cause.getMessage();
            if (causeMsg != null) {
                strb.append("", "");
                strb.append(causeMsg);
            }
        }
        return new Exception(info, strb.toString(), xany);
    }","  public void test66()  throws Throwable  {
      MockRuntimeException mockRuntimeException0 = new MockRuntimeException("""");
      JxltEngine.Exception jxltEngine_Exception0 = TemplateEngine.createException((JexlInfo) null, """", (TemplateEngine.TemplateExpression) null, mockRuntimeException0);
}"
3063,"    TemplateExpression parseExpression(final JexlInfo info, final String expr, final Scope scope) {  // CSOFF: MethodLength
        final int size = expr.length();
        final ExpressionBuilder builder = new ExpressionBuilder(0);
        final StringBuilder strb = new StringBuilder(size);
        ParseState state = ParseState.CONST;
        int immediate1 = 0;
        int deferred1 = 0;
        int inner1 = 0;
        boolean nested = false;
        int inested = -1;
        int lineno = info.getLine();
        for (int column = 0; column < size; ++column) {
            final char c = expr.charAt(column);
            switch (state) {
                default: // in case we ever add new unified expression type
                    throw new UnsupportedOperationException(""unexpected unified expression type"");
                case CONST:
                    if (c == immediateChar) {
                        state = ParseState.IMMEDIATE0;
                    } else if (c == deferredChar) {
                        inested = column;
                        state = ParseState.DEFERRED0;
                    } else if (c == '\\') {
                        state = ParseState.ESCAPE;
                    } else {
                        // do buildup expr
                        strb.append(c);
                    }
                    break;
                case IMMEDIATE0: // $
                    if (c == '{') {
                        state = ParseState.IMMEDIATE1;
                        // if chars in buffer, create constant
                        if (strb.length() > 0) {
                            final TemplateExpression cexpr = new ConstantExpression(strb.toString(), null);
                            builder.add(cexpr);
                            strb.delete(0, Integer.MAX_VALUE);
                        }
                    } else {
                        // revert to CONST
                        strb.append(immediateChar);
                        strb.append(c);
                        state = ParseState.CONST;
                    }
                    break;
                case DEFERRED0: // #
                    if (c == '{') {
                        state = ParseState.DEFERRED1;
                        // if chars in buffer, create constant
                        if (strb.length() > 0) {
                            final TemplateExpression cexpr = new ConstantExpression(strb.toString(), null);
                            builder.add(cexpr);
                            strb.delete(0, Integer.MAX_VALUE);
                        }
                    } else {
                        // revert to CONST
                        strb.append(deferredChar);
                        strb.append(c);
                        state = ParseState.CONST;
                    }
                    break;
                case IMMEDIATE1: // ${...
                    if (c == '}') {
                        if (immediate1 > 0) {
                            immediate1 -= 1;
                            strb.append(c);
                        } else {
                            // materialize the immediate expr
                            final String src = strb.toString();
                            final TemplateExpression iexpr = new ImmediateExpression(
                                    src,
                                    jexl.parse(info.at(lineno, column), noscript, src, scope),
                                    null);
                            builder.add(iexpr);
                            strb.delete(0, Integer.MAX_VALUE);
                            state = ParseState.CONST;
                        }
                    } else {
                        if (c == '{') {
                            immediate1 += 1;
                        }
                        // do buildup expr
                        column = append(strb, expr, column, c);
                    }
                    break;
                case DEFERRED1: // #{...
                    // skip inner strings (for '}')
                    if (c == '""' || c == '\'') {
                        strb.append(c);
                        column = StringParser.readString(strb, expr, column + 1, c);
                        continue;
                    }
                    // nested immediate in deferred; need to balance count of '{' & '}'
                    if (c == '{') {
                        if (expr.charAt(column - 1) == immediateChar) {
                            inner1 += 1;
                            strb.deleteCharAt(strb.length() - 1);
                            nested = true;
                        } else {
                            deferred1 += 1;
                            strb.append(c);
                        }
                        continue;
                    }
                    // closing '}'
                    if (c == '}') {
                        // balance nested immediate
                        if (deferred1 > 0) {
                            deferred1 -= 1;
                            strb.append(c);
                        } else if (inner1 > 0) {
                            inner1 -= 1;
                        } else  {
                            // materialize the nested/deferred expr
                            final String src = strb.toString();
                            TemplateExpression dexpr;
                            if (nested) {
                                dexpr = new NestedExpression(
                                        expr.substring(inested, column + 1),
                                        jexl.parse(info.at(lineno, column), noscript, src, scope),
                                        null);
                            } else {
                                dexpr = new DeferredExpression(
                                        strb.toString(),
                                        jexl.parse(info.at(lineno, column), noscript, src, scope),
                                        null);
                            }
                            builder.add(dexpr);
                            strb.delete(0, Integer.MAX_VALUE);
                            nested = false;
                            state = ParseState.CONST;
                        }
                    } else {
                        // do buildup expr
                        column = append(strb, expr, column, c);
                    }
                    break;
                case ESCAPE:
                    if (c == deferredChar) {
                        strb.append(deferredChar);
                    } else if (c == immediateChar) {
                        strb.append(immediateChar);
                    } else {
                        strb.append('\\');
                        strb.append(c);
                    }
                    state = ParseState.CONST;
            }
            if (c == '\n') {
                lineno += 1;
            }
        }
        // we should be in that state
        if (state != ParseState.CONST) {
            // otherwise, we ended a line with a \, $ or #
            switch (state) {
                case ESCAPE:
                    strb.append('\\');
                    strb.append('\\');
                    break;
                case DEFERRED0:
                    strb.append(deferredChar);
                    break;
                case IMMEDIATE0:
                    strb.append(immediateChar);
                    break;
                default:
                    throw new Exception(info.at(lineno, 0), ""malformed expression: "" + expr, null);
            }
        }
        // if any chars were buffered, add them as a constant
        if (strb.length() > 0) {
            final TemplateExpression cexpr = new ConstantExpression(strb.toString(), null);
            builder.add(cexpr);
        }
        return builder.build(this, null);
    }","  public void test67()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      TemplateEngine templateEngine0 = engine0.jxlt();
      JexlInfo jexlInfo0 = new JexlInfo("""", 0, 0);
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[3];
      Scope scope1 = new Scope(scope0, stringArray0);
      TemplateEngine.TemplateExpression templateEngine_TemplateExpression0 = templateEngine0.parseExpression(jexlInfo0, """", scope1);
      templateEngine_TemplateExpression0.evaluate(engine0.EMPTY_CONTEXT);
}"
3064,"    TemplateExpression parseExpression(final JexlInfo info, final String expr, final Scope scope) {  // CSOFF: MethodLength
        final int size = expr.length();
        final ExpressionBuilder builder = new ExpressionBuilder(0);
        final StringBuilder strb = new StringBuilder(size);
        ParseState state = ParseState.CONST;
        int immediate1 = 0;
        int deferred1 = 0;
        int inner1 = 0;
        boolean nested = false;
        int inested = -1;
        int lineno = info.getLine();
        for (int column = 0; column < size; ++column) {
            final char c = expr.charAt(column);
            switch (state) {
                default: // in case we ever add new unified expression type
                    throw new UnsupportedOperationException(""unexpected unified expression type"");
                case CONST:
                    if (c == immediateChar) {
                        state = ParseState.IMMEDIATE0;
                    } else if (c == deferredChar) {
                        inested = column;
                        state = ParseState.DEFERRED0;
                    } else if (c == '\\') {
                        state = ParseState.ESCAPE;
                    } else {
                        // do buildup expr
                        strb.append(c);
                    }
                    break;
                case IMMEDIATE0: // $
                    if (c == '{') {
                        state = ParseState.IMMEDIATE1;
                        // if chars in buffer, create constant
                        if (strb.length() > 0) {
                            final TemplateExpression cexpr = new ConstantExpression(strb.toString(), null);
                            builder.add(cexpr);
                            strb.delete(0, Integer.MAX_VALUE);
                        }
                    } else {
                        // revert to CONST
                        strb.append(immediateChar);
                        strb.append(c);
                        state = ParseState.CONST;
                    }
                    break;
                case DEFERRED0: // #
                    if (c == '{') {
                        state = ParseState.DEFERRED1;
                        // if chars in buffer, create constant
                        if (strb.length() > 0) {
                            final TemplateExpression cexpr = new ConstantExpression(strb.toString(), null);
                            builder.add(cexpr);
                            strb.delete(0, Integer.MAX_VALUE);
                        }
                    } else {
                        // revert to CONST
                        strb.append(deferredChar);
                        strb.append(c);
                        state = ParseState.CONST;
                    }
                    break;
                case IMMEDIATE1: // ${...
                    if (c == '}') {
                        if (immediate1 > 0) {
                            immediate1 -= 1;
                            strb.append(c);
                        } else {
                            // materialize the immediate expr
                            final String src = strb.toString();
                            final TemplateExpression iexpr = new ImmediateExpression(
                                    src,
                                    jexl.parse(info.at(lineno, column), noscript, src, scope),
                                    null);
                            builder.add(iexpr);
                            strb.delete(0, Integer.MAX_VALUE);
                            state = ParseState.CONST;
                        }
                    } else {
                        if (c == '{') {
                            immediate1 += 1;
                        }
                        // do buildup expr
                        column = append(strb, expr, column, c);
                    }
                    break;
                case DEFERRED1: // #{...
                    // skip inner strings (for '}')
                    if (c == '""' || c == '\'') {
                        strb.append(c);
                        column = StringParser.readString(strb, expr, column + 1, c);
                        continue;
                    }
                    // nested immediate in deferred; need to balance count of '{' & '}'
                    if (c == '{') {
                        if (expr.charAt(column - 1) == immediateChar) {
                            inner1 += 1;
                            strb.deleteCharAt(strb.length() - 1);
                            nested = true;
                        } else {
                            deferred1 += 1;
                            strb.append(c);
                        }
                        continue;
                    }
                    // closing '}'
                    if (c == '}') {
                        // balance nested immediate
                        if (deferred1 > 0) {
                            deferred1 -= 1;
                            strb.append(c);
                        } else if (inner1 > 0) {
                            inner1 -= 1;
                        } else  {
                            // materialize the nested/deferred expr
                            final String src = strb.toString();
                            TemplateExpression dexpr;
                            if (nested) {
                                dexpr = new NestedExpression(
                                        expr.substring(inested, column + 1),
                                        jexl.parse(info.at(lineno, column), noscript, src, scope),
                                        null);
                            } else {
                                dexpr = new DeferredExpression(
                                        strb.toString(),
                                        jexl.parse(info.at(lineno, column), noscript, src, scope),
                                        null);
                            }
                            builder.add(dexpr);
                            strb.delete(0, Integer.MAX_VALUE);
                            nested = false;
                            state = ParseState.CONST;
                        }
                    } else {
                        // do buildup expr
                        column = append(strb, expr, column, c);
                    }
                    break;
                case ESCAPE:
                    if (c == deferredChar) {
                        strb.append(deferredChar);
                    } else if (c == immediateChar) {
                        strb.append(immediateChar);
                    } else {
                        strb.append('\\');
                        strb.append(c);
                    }
                    state = ParseState.CONST;
            }
            if (c == '\n') {
                lineno += 1;
            }
        }
        // we should be in that state
        if (state != ParseState.CONST) {
            // otherwise, we ended a line with a \, $ or #
            switch (state) {
                case ESCAPE:
                    strb.append('\\');
                    strb.append('\\');
                    break;
                case DEFERRED0:
                    strb.append(deferredChar);
                    break;
                case IMMEDIATE0:
                    strb.append(immediateChar);
                    break;
                default:
                    throw new Exception(info.at(lineno, 0), ""malformed expression: "" + expr, null);
            }
        }
        // if any chars were buffered, add them as a constant
        if (strb.length() > 0) {
            final TemplateExpression cexpr = new ConstantExpression(strb.toString(), null);
            builder.add(cexpr);
        }
        return builder.build(this, null);
    }","  public void test68()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      TemplateEngine templateEngine0 = engine0.jxlt();
      JexlInfo jexlInfo0 = new JexlInfo("""", 0, 0);
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[3];
      Scope scope1 = new Scope(scope0, stringArray0);
      TemplateEngine.CompositeExpression templateEngine_CompositeExpression0 = (TemplateEngine.CompositeExpression)templateEngine0.parseExpression(jexlInfo0, """", scope1);
      Frame frame0 = new Frame(scope1, stringArray0, 0);
      TemplateEngine.CompositeExpression templateEngine_CompositeExpression1 = (TemplateEngine.CompositeExpression)templateEngine_CompositeExpression0.prepare(frame0, engine0.EMPTY_CONTEXT);
}"
3065,"    TemplateExpression parseExpression(final JexlInfo info, final String expr, final Scope scope) {  // CSOFF: MethodLength
        final int size = expr.length();
        final ExpressionBuilder builder = new ExpressionBuilder(0);
        final StringBuilder strb = new StringBuilder(size);
        ParseState state = ParseState.CONST;
        int immediate1 = 0;
        int deferred1 = 0;
        int inner1 = 0;
        boolean nested = false;
        int inested = -1;
        int lineno = info.getLine();
        for (int column = 0; column < size; ++column) {
            final char c = expr.charAt(column);
            switch (state) {
                default: // in case we ever add new unified expression type
                    throw new UnsupportedOperationException(""unexpected unified expression type"");
                case CONST:
                    if (c == immediateChar) {
                        state = ParseState.IMMEDIATE0;
                    } else if (c == deferredChar) {
                        inested = column;
                        state = ParseState.DEFERRED0;
                    } else if (c == '\\') {
                        state = ParseState.ESCAPE;
                    } else {
                        // do buildup expr
                        strb.append(c);
                    }
                    break;
                case IMMEDIATE0: // $
                    if (c == '{') {
                        state = ParseState.IMMEDIATE1;
                        // if chars in buffer, create constant
                        if (strb.length() > 0) {
                            final TemplateExpression cexpr = new ConstantExpression(strb.toString(), null);
                            builder.add(cexpr);
                            strb.delete(0, Integer.MAX_VALUE);
                        }
                    } else {
                        // revert to CONST
                        strb.append(immediateChar);
                        strb.append(c);
                        state = ParseState.CONST;
                    }
                    break;
                case DEFERRED0: // #
                    if (c == '{') {
                        state = ParseState.DEFERRED1;
                        // if chars in buffer, create constant
                        if (strb.length() > 0) {
                            final TemplateExpression cexpr = new ConstantExpression(strb.toString(), null);
                            builder.add(cexpr);
                            strb.delete(0, Integer.MAX_VALUE);
                        }
                    } else {
                        // revert to CONST
                        strb.append(deferredChar);
                        strb.append(c);
                        state = ParseState.CONST;
                    }
                    break;
                case IMMEDIATE1: // ${...
                    if (c == '}') {
                        if (immediate1 > 0) {
                            immediate1 -= 1;
                            strb.append(c);
                        } else {
                            // materialize the immediate expr
                            final String src = strb.toString();
                            final TemplateExpression iexpr = new ImmediateExpression(
                                    src,
                                    jexl.parse(info.at(lineno, column), noscript, src, scope),
                                    null);
                            builder.add(iexpr);
                            strb.delete(0, Integer.MAX_VALUE);
                            state = ParseState.CONST;
                        }
                    } else {
                        if (c == '{') {
                            immediate1 += 1;
                        }
                        // do buildup expr
                        column = append(strb, expr, column, c);
                    }
                    break;
                case DEFERRED1: // #{...
                    // skip inner strings (for '}')
                    if (c == '""' || c == '\'') {
                        strb.append(c);
                        column = StringParser.readString(strb, expr, column + 1, c);
                        continue;
                    }
                    // nested immediate in deferred; need to balance count of '{' & '}'
                    if (c == '{') {
                        if (expr.charAt(column - 1) == immediateChar) {
                            inner1 += 1;
                            strb.deleteCharAt(strb.length() - 1);
                            nested = true;
                        } else {
                            deferred1 += 1;
                            strb.append(c);
                        }
                        continue;
                    }
                    // closing '}'
                    if (c == '}') {
                        // balance nested immediate
                        if (deferred1 > 0) {
                            deferred1 -= 1;
                            strb.append(c);
                        } else if (inner1 > 0) {
                            inner1 -= 1;
                        } else  {
                            // materialize the nested/deferred expr
                            final String src = strb.toString();
                            TemplateExpression dexpr;
                            if (nested) {
                                dexpr = new NestedExpression(
                                        expr.substring(inested, column + 1),
                                        jexl.parse(info.at(lineno, column), noscript, src, scope),
                                        null);
                            } else {
                                dexpr = new DeferredExpression(
                                        strb.toString(),
                                        jexl.parse(info.at(lineno, column), noscript, src, scope),
                                        null);
                            }
                            builder.add(dexpr);
                            strb.delete(0, Integer.MAX_VALUE);
                            nested = false;
                            state = ParseState.CONST;
                        }
                    } else {
                        // do buildup expr
                        column = append(strb, expr, column, c);
                    }
                    break;
                case ESCAPE:
                    if (c == deferredChar) {
                        strb.append(deferredChar);
                    } else if (c == immediateChar) {
                        strb.append(immediateChar);
                    } else {
                        strb.append('\\');
                        strb.append(c);
                    }
                    state = ParseState.CONST;
            }
            if (c == '\n') {
                lineno += 1;
            }
        }
        // we should be in that state
        if (state != ParseState.CONST) {
            // otherwise, we ended a line with a \, $ or #
            switch (state) {
                case ESCAPE:
                    strb.append('\\');
                    strb.append('\\');
                    break;
                case DEFERRED0:
                    strb.append(deferredChar);
                    break;
                case IMMEDIATE0:
                    strb.append(immediateChar);
                    break;
                default:
                    throw new Exception(info.at(lineno, 0), ""malformed expression: "" + expr, null);
            }
        }
        // if any chars were buffered, add them as a constant
        if (strb.length() > 0) {
            final TemplateExpression cexpr = new ConstantExpression(strb.toString(), null);
            builder.add(cexpr);
        }
        return builder.build(this, null);
    }","  public void test69()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      TemplateEngine templateEngine0 = engine0.jxlt();
      JexlInfo jexlInfo0 = new JexlInfo("""", 0, 0);
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[3];
      Scope scope1 = new Scope(scope0, stringArray0);
      TemplateEngine.CompositeExpression templateEngine_CompositeExpression0 = (TemplateEngine.CompositeExpression)templateEngine0.parseExpression(jexlInfo0, """", scope1);
      Frame frame0 = new Frame(scope1, stringArray0, 0);
      TemplateEngine.CompositeExpression templateEngine_CompositeExpression1 = (TemplateEngine.CompositeExpression)templateEngine_CompositeExpression0.prepare(frame0, engine0.EMPTY_CONTEXT);
}"
3066,"    TemplateExpression parseExpression(final JexlInfo info, final String expr, final Scope scope) {  // CSOFF: MethodLength
        final int size = expr.length();
        final ExpressionBuilder builder = new ExpressionBuilder(0);
        final StringBuilder strb = new StringBuilder(size);
        ParseState state = ParseState.CONST;
        int immediate1 = 0;
        int deferred1 = 0;
        int inner1 = 0;
        boolean nested = false;
        int inested = -1;
        int lineno = info.getLine();
        for (int column = 0; column < size; ++column) {
            final char c = expr.charAt(column);
            switch (state) {
                default: // in case we ever add new unified expression type
                    throw new UnsupportedOperationException(""unexpected unified expression type"");
                case CONST:
                    if (c == immediateChar) {
                        state = ParseState.IMMEDIATE0;
                    } else if (c == deferredChar) {
                        inested = column;
                        state = ParseState.DEFERRED0;
                    } else if (c == '\\') {
                        state = ParseState.ESCAPE;
                    } else {
                        // do buildup expr
                        strb.append(c);
                    }
                    break;
                case IMMEDIATE0: // $
                    if (c == '{') {
                        state = ParseState.IMMEDIATE1;
                        // if chars in buffer, create constant
                        if (strb.length() > 0) {
                            final TemplateExpression cexpr = new ConstantExpression(strb.toString(), null);
                            builder.add(cexpr);
                            strb.delete(0, Integer.MAX_VALUE);
                        }
                    } else {
                        // revert to CONST
                        strb.append(immediateChar);
                        strb.append(c);
                        state = ParseState.CONST;
                    }
                    break;
                case DEFERRED0: // #
                    if (c == '{') {
                        state = ParseState.DEFERRED1;
                        // if chars in buffer, create constant
                        if (strb.length() > 0) {
                            final TemplateExpression cexpr = new ConstantExpression(strb.toString(), null);
                            builder.add(cexpr);
                            strb.delete(0, Integer.MAX_VALUE);
                        }
                    } else {
                        // revert to CONST
                        strb.append(deferredChar);
                        strb.append(c);
                        state = ParseState.CONST;
                    }
                    break;
                case IMMEDIATE1: // ${...
                    if (c == '}') {
                        if (immediate1 > 0) {
                            immediate1 -= 1;
                            strb.append(c);
                        } else {
                            // materialize the immediate expr
                            final String src = strb.toString();
                            final TemplateExpression iexpr = new ImmediateExpression(
                                    src,
                                    jexl.parse(info.at(lineno, column), noscript, src, scope),
                                    null);
                            builder.add(iexpr);
                            strb.delete(0, Integer.MAX_VALUE);
                            state = ParseState.CONST;
                        }
                    } else {
                        if (c == '{') {
                            immediate1 += 1;
                        }
                        // do buildup expr
                        column = append(strb, expr, column, c);
                    }
                    break;
                case DEFERRED1: // #{...
                    // skip inner strings (for '}')
                    if (c == '""' || c == '\'') {
                        strb.append(c);
                        column = StringParser.readString(strb, expr, column + 1, c);
                        continue;
                    }
                    // nested immediate in deferred; need to balance count of '{' & '}'
                    if (c == '{') {
                        if (expr.charAt(column - 1) == immediateChar) {
                            inner1 += 1;
                            strb.deleteCharAt(strb.length() - 1);
                            nested = true;
                        } else {
                            deferred1 += 1;
                            strb.append(c);
                        }
                        continue;
                    }
                    // closing '}'
                    if (c == '}') {
                        // balance nested immediate
                        if (deferred1 > 0) {
                            deferred1 -= 1;
                            strb.append(c);
                        } else if (inner1 > 0) {
                            inner1 -= 1;
                        } else  {
                            // materialize the nested/deferred expr
                            final String src = strb.toString();
                            TemplateExpression dexpr;
                            if (nested) {
                                dexpr = new NestedExpression(
                                        expr.substring(inested, column + 1),
                                        jexl.parse(info.at(lineno, column), noscript, src, scope),
                                        null);
                            } else {
                                dexpr = new DeferredExpression(
                                        strb.toString(),
                                        jexl.parse(info.at(lineno, column), noscript, src, scope),
                                        null);
                            }
                            builder.add(dexpr);
                            strb.delete(0, Integer.MAX_VALUE);
                            nested = false;
                            state = ParseState.CONST;
                        }
                    } else {
                        // do buildup expr
                        column = append(strb, expr, column, c);
                    }
                    break;
                case ESCAPE:
                    if (c == deferredChar) {
                        strb.append(deferredChar);
                    } else if (c == immediateChar) {
                        strb.append(immediateChar);
                    } else {
                        strb.append('\\');
                        strb.append(c);
                    }
                    state = ParseState.CONST;
            }
            if (c == '\n') {
                lineno += 1;
            }
        }
        // we should be in that state
        if (state != ParseState.CONST) {
            // otherwise, we ended a line with a \, $ or #
            switch (state) {
                case ESCAPE:
                    strb.append('\\');
                    strb.append('\\');
                    break;
                case DEFERRED0:
                    strb.append(deferredChar);
                    break;
                case IMMEDIATE0:
                    strb.append(immediateChar);
                    break;
                default:
                    throw new Exception(info.at(lineno, 0), ""malformed expression: "" + expr, null);
            }
        }
        // if any chars were buffered, add them as a constant
        if (strb.length() > 0) {
            final TemplateExpression cexpr = new ConstantExpression(strb.toString(), null);
            builder.add(cexpr);
        }
        return builder.build(this, null);
    }","  public void test70()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      TemplateEngine templateEngine0 = engine0.jxlt();
      JexlInfo jexlInfo0 = new JexlInfo("""", 0, 0);
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[3];
      Scope scope1 = new Scope(scope0, stringArray0);
      TemplateEngine.CompositeExpression templateEngine_CompositeExpression0 = (TemplateEngine.CompositeExpression)templateEngine0.parseExpression(jexlInfo0, """", scope1);
      Engine.VarCollector engine_VarCollector0 = engine0.varCollector();
      templateEngine_CompositeExpression0.getVariables(engine_VarCollector0);
}"
3067,"    TemplateExpression parseExpression(final JexlInfo info, final String expr, final Scope scope) {  // CSOFF: MethodLength
        final int size = expr.length();
        final ExpressionBuilder builder = new ExpressionBuilder(0);
        final StringBuilder strb = new StringBuilder(size);
        ParseState state = ParseState.CONST;
        int immediate1 = 0;
        int deferred1 = 0;
        int inner1 = 0;
        boolean nested = false;
        int inested = -1;
        int lineno = info.getLine();
        for (int column = 0; column < size; ++column) {
            final char c = expr.charAt(column);
            switch (state) {
                default: // in case we ever add new unified expression type
                    throw new UnsupportedOperationException(""unexpected unified expression type"");
                case CONST:
                    if (c == immediateChar) {
                        state = ParseState.IMMEDIATE0;
                    } else if (c == deferredChar) {
                        inested = column;
                        state = ParseState.DEFERRED0;
                    } else if (c == '\\') {
                        state = ParseState.ESCAPE;
                    } else {
                        // do buildup expr
                        strb.append(c);
                    }
                    break;
                case IMMEDIATE0: // $
                    if (c == '{') {
                        state = ParseState.IMMEDIATE1;
                        // if chars in buffer, create constant
                        if (strb.length() > 0) {
                            final TemplateExpression cexpr = new ConstantExpression(strb.toString(), null);
                            builder.add(cexpr);
                            strb.delete(0, Integer.MAX_VALUE);
                        }
                    } else {
                        // revert to CONST
                        strb.append(immediateChar);
                        strb.append(c);
                        state = ParseState.CONST;
                    }
                    break;
                case DEFERRED0: // #
                    if (c == '{') {
                        state = ParseState.DEFERRED1;
                        // if chars in buffer, create constant
                        if (strb.length() > 0) {
                            final TemplateExpression cexpr = new ConstantExpression(strb.toString(), null);
                            builder.add(cexpr);
                            strb.delete(0, Integer.MAX_VALUE);
                        }
                    } else {
                        // revert to CONST
                        strb.append(deferredChar);
                        strb.append(c);
                        state = ParseState.CONST;
                    }
                    break;
                case IMMEDIATE1: // ${...
                    if (c == '}') {
                        if (immediate1 > 0) {
                            immediate1 -= 1;
                            strb.append(c);
                        } else {
                            // materialize the immediate expr
                            final String src = strb.toString();
                            final TemplateExpression iexpr = new ImmediateExpression(
                                    src,
                                    jexl.parse(info.at(lineno, column), noscript, src, scope),
                                    null);
                            builder.add(iexpr);
                            strb.delete(0, Integer.MAX_VALUE);
                            state = ParseState.CONST;
                        }
                    } else {
                        if (c == '{') {
                            immediate1 += 1;
                        }
                        // do buildup expr
                        column = append(strb, expr, column, c);
                    }
                    break;
                case DEFERRED1: // #{...
                    // skip inner strings (for '}')
                    if (c == '""' || c == '\'') {
                        strb.append(c);
                        column = StringParser.readString(strb, expr, column + 1, c);
                        continue;
                    }
                    // nested immediate in deferred; need to balance count of '{' & '}'
                    if (c == '{') {
                        if (expr.charAt(column - 1) == immediateChar) {
                            inner1 += 1;
                            strb.deleteCharAt(strb.length() - 1);
                            nested = true;
                        } else {
                            deferred1 += 1;
                            strb.append(c);
                        }
                        continue;
                    }
                    // closing '}'
                    if (c == '}') {
                        // balance nested immediate
                        if (deferred1 > 0) {
                            deferred1 -= 1;
                            strb.append(c);
                        } else if (inner1 > 0) {
                            inner1 -= 1;
                        } else  {
                            // materialize the nested/deferred expr
                            final String src = strb.toString();
                            TemplateExpression dexpr;
                            if (nested) {
                                dexpr = new NestedExpression(
                                        expr.substring(inested, column + 1),
                                        jexl.parse(info.at(lineno, column), noscript, src, scope),
                                        null);
                            } else {
                                dexpr = new DeferredExpression(
                                        strb.toString(),
                                        jexl.parse(info.at(lineno, column), noscript, src, scope),
                                        null);
                            }
                            builder.add(dexpr);
                            strb.delete(0, Integer.MAX_VALUE);
                            nested = false;
                            state = ParseState.CONST;
                        }
                    } else {
                        // do buildup expr
                        column = append(strb, expr, column, c);
                    }
                    break;
                case ESCAPE:
                    if (c == deferredChar) {
                        strb.append(deferredChar);
                    } else if (c == immediateChar) {
                        strb.append(immediateChar);
                    } else {
                        strb.append('\\');
                        strb.append(c);
                    }
                    state = ParseState.CONST;
            }
            if (c == '\n') {
                lineno += 1;
            }
        }
        // we should be in that state
        if (state != ParseState.CONST) {
            // otherwise, we ended a line with a \, $ or #
            switch (state) {
                case ESCAPE:
                    strb.append('\\');
                    strb.append('\\');
                    break;
                case DEFERRED0:
                    strb.append(deferredChar);
                    break;
                case IMMEDIATE0:
                    strb.append(immediateChar);
                    break;
                default:
                    throw new Exception(info.at(lineno, 0), ""malformed expression: "" + expr, null);
            }
        }
        // if any chars were buffered, add them as a constant
        if (strb.length() > 0) {
            final TemplateExpression cexpr = new ConstantExpression(strb.toString(), null);
            builder.add(cexpr);
        }
        return builder.build(this, null);
    }","  public void test71()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      TemplateEngine templateEngine0 = engine0.jxlt();
      JexlInfo jexlInfo0 = new JexlInfo("""", 0, 0);
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[3];
      Scope scope1 = new Scope(scope0, stringArray0);
      TemplateEngine.TemplateExpression templateEngine_TemplateExpression0 = templateEngine0.parseExpression(jexlInfo0, """", scope1);
      templateEngine_TemplateExpression0.getVariables();
}"
3068,"    TemplateExpression parseExpression(final JexlInfo info, final String expr, final Scope scope) {  // CSOFF: MethodLength
        final int size = expr.length();
        final ExpressionBuilder builder = new ExpressionBuilder(0);
        final StringBuilder strb = new StringBuilder(size);
        ParseState state = ParseState.CONST;
        int immediate1 = 0;
        int deferred1 = 0;
        int inner1 = 0;
        boolean nested = false;
        int inested = -1;
        int lineno = info.getLine();
        for (int column = 0; column < size; ++column) {
            final char c = expr.charAt(column);
            switch (state) {
                default: // in case we ever add new unified expression type
                    throw new UnsupportedOperationException(""unexpected unified expression type"");
                case CONST:
                    if (c == immediateChar) {
                        state = ParseState.IMMEDIATE0;
                    } else if (c == deferredChar) {
                        inested = column;
                        state = ParseState.DEFERRED0;
                    } else if (c == '\\') {
                        state = ParseState.ESCAPE;
                    } else {
                        // do buildup expr
                        strb.append(c);
                    }
                    break;
                case IMMEDIATE0: // $
                    if (c == '{') {
                        state = ParseState.IMMEDIATE1;
                        // if chars in buffer, create constant
                        if (strb.length() > 0) {
                            final TemplateExpression cexpr = new ConstantExpression(strb.toString(), null);
                            builder.add(cexpr);
                            strb.delete(0, Integer.MAX_VALUE);
                        }
                    } else {
                        // revert to CONST
                        strb.append(immediateChar);
                        strb.append(c);
                        state = ParseState.CONST;
                    }
                    break;
                case DEFERRED0: // #
                    if (c == '{') {
                        state = ParseState.DEFERRED1;
                        // if chars in buffer, create constant
                        if (strb.length() > 0) {
                            final TemplateExpression cexpr = new ConstantExpression(strb.toString(), null);
                            builder.add(cexpr);
                            strb.delete(0, Integer.MAX_VALUE);
                        }
                    } else {
                        // revert to CONST
                        strb.append(deferredChar);
                        strb.append(c);
                        state = ParseState.CONST;
                    }
                    break;
                case IMMEDIATE1: // ${...
                    if (c == '}') {
                        if (immediate1 > 0) {
                            immediate1 -= 1;
                            strb.append(c);
                        } else {
                            // materialize the immediate expr
                            final String src = strb.toString();
                            final TemplateExpression iexpr = new ImmediateExpression(
                                    src,
                                    jexl.parse(info.at(lineno, column), noscript, src, scope),
                                    null);
                            builder.add(iexpr);
                            strb.delete(0, Integer.MAX_VALUE);
                            state = ParseState.CONST;
                        }
                    } else {
                        if (c == '{') {
                            immediate1 += 1;
                        }
                        // do buildup expr
                        column = append(strb, expr, column, c);
                    }
                    break;
                case DEFERRED1: // #{...
                    // skip inner strings (for '}')
                    if (c == '""' || c == '\'') {
                        strb.append(c);
                        column = StringParser.readString(strb, expr, column + 1, c);
                        continue;
                    }
                    // nested immediate in deferred; need to balance count of '{' & '}'
                    if (c == '{') {
                        if (expr.charAt(column - 1) == immediateChar) {
                            inner1 += 1;
                            strb.deleteCharAt(strb.length() - 1);
                            nested = true;
                        } else {
                            deferred1 += 1;
                            strb.append(c);
                        }
                        continue;
                    }
                    // closing '}'
                    if (c == '}') {
                        // balance nested immediate
                        if (deferred1 > 0) {
                            deferred1 -= 1;
                            strb.append(c);
                        } else if (inner1 > 0) {
                            inner1 -= 1;
                        } else  {
                            // materialize the nested/deferred expr
                            final String src = strb.toString();
                            TemplateExpression dexpr;
                            if (nested) {
                                dexpr = new NestedExpression(
                                        expr.substring(inested, column + 1),
                                        jexl.parse(info.at(lineno, column), noscript, src, scope),
                                        null);
                            } else {
                                dexpr = new DeferredExpression(
                                        strb.toString(),
                                        jexl.parse(info.at(lineno, column), noscript, src, scope),
                                        null);
                            }
                            builder.add(dexpr);
                            strb.delete(0, Integer.MAX_VALUE);
                            nested = false;
                            state = ParseState.CONST;
                        }
                    } else {
                        // do buildup expr
                        column = append(strb, expr, column, c);
                    }
                    break;
                case ESCAPE:
                    if (c == deferredChar) {
                        strb.append(deferredChar);
                    } else if (c == immediateChar) {
                        strb.append(immediateChar);
                    } else {
                        strb.append('\\');
                        strb.append(c);
                    }
                    state = ParseState.CONST;
            }
            if (c == '\n') {
                lineno += 1;
            }
        }
        // we should be in that state
        if (state != ParseState.CONST) {
            // otherwise, we ended a line with a \, $ or #
            switch (state) {
                case ESCAPE:
                    strb.append('\\');
                    strb.append('\\');
                    break;
                case DEFERRED0:
                    strb.append(deferredChar);
                    break;
                case IMMEDIATE0:
                    strb.append(immediateChar);
                    break;
                default:
                    throw new Exception(info.at(lineno, 0), ""malformed expression: "" + expr, null);
            }
        }
        // if any chars were buffered, add them as a constant
        if (strb.length() > 0) {
            final TemplateExpression cexpr = new ConstantExpression(strb.toString(), null);
            builder.add(cexpr);
        }
        return builder.build(this, null);
    }","  public void test72()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      TemplateEngine templateEngine0 = engine0.jxlt();
      JexlInfo jexlInfo0 = new JexlInfo("""", 0, 0);
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[3];
      Scope scope1 = new Scope(scope0, stringArray0);
      TemplateEngine.TemplateExpression templateEngine_TemplateExpression0 = templateEngine0.parseExpression(jexlInfo0, """", scope1);
      boolean boolean0 = templateEngine_TemplateExpression0.isImmediate();
}"
3069,"    TemplateExpression parseExpression(final JexlInfo info, final String expr, final Scope scope) {  // CSOFF: MethodLength
        final int size = expr.length();
        final ExpressionBuilder builder = new ExpressionBuilder(0);
        final StringBuilder strb = new StringBuilder(size);
        ParseState state = ParseState.CONST;
        int immediate1 = 0;
        int deferred1 = 0;
        int inner1 = 0;
        boolean nested = false;
        int inested = -1;
        int lineno = info.getLine();
        for (int column = 0; column < size; ++column) {
            final char c = expr.charAt(column);
            switch (state) {
                default: // in case we ever add new unified expression type
                    throw new UnsupportedOperationException(""unexpected unified expression type"");
                case CONST:
                    if (c == immediateChar) {
                        state = ParseState.IMMEDIATE0;
                    } else if (c == deferredChar) {
                        inested = column;
                        state = ParseState.DEFERRED0;
                    } else if (c == '\\') {
                        state = ParseState.ESCAPE;
                    } else {
                        // do buildup expr
                        strb.append(c);
                    }
                    break;
                case IMMEDIATE0: // $
                    if (c == '{') {
                        state = ParseState.IMMEDIATE1;
                        // if chars in buffer, create constant
                        if (strb.length() > 0) {
                            final TemplateExpression cexpr = new ConstantExpression(strb.toString(), null);
                            builder.add(cexpr);
                            strb.delete(0, Integer.MAX_VALUE);
                        }
                    } else {
                        // revert to CONST
                        strb.append(immediateChar);
                        strb.append(c);
                        state = ParseState.CONST;
                    }
                    break;
                case DEFERRED0: // #
                    if (c == '{') {
                        state = ParseState.DEFERRED1;
                        // if chars in buffer, create constant
                        if (strb.length() > 0) {
                            final TemplateExpression cexpr = new ConstantExpression(strb.toString(), null);
                            builder.add(cexpr);
                            strb.delete(0, Integer.MAX_VALUE);
                        }
                    } else {
                        // revert to CONST
                        strb.append(deferredChar);
                        strb.append(c);
                        state = ParseState.CONST;
                    }
                    break;
                case IMMEDIATE1: // ${...
                    if (c == '}') {
                        if (immediate1 > 0) {
                            immediate1 -= 1;
                            strb.append(c);
                        } else {
                            // materialize the immediate expr
                            final String src = strb.toString();
                            final TemplateExpression iexpr = new ImmediateExpression(
                                    src,
                                    jexl.parse(info.at(lineno, column), noscript, src, scope),
                                    null);
                            builder.add(iexpr);
                            strb.delete(0, Integer.MAX_VALUE);
                            state = ParseState.CONST;
                        }
                    } else {
                        if (c == '{') {
                            immediate1 += 1;
                        }
                        // do buildup expr
                        column = append(strb, expr, column, c);
                    }
                    break;
                case DEFERRED1: // #{...
                    // skip inner strings (for '}')
                    if (c == '""' || c == '\'') {
                        strb.append(c);
                        column = StringParser.readString(strb, expr, column + 1, c);
                        continue;
                    }
                    // nested immediate in deferred; need to balance count of '{' & '}'
                    if (c == '{') {
                        if (expr.charAt(column - 1) == immediateChar) {
                            inner1 += 1;
                            strb.deleteCharAt(strb.length() - 1);
                            nested = true;
                        } else {
                            deferred1 += 1;
                            strb.append(c);
                        }
                        continue;
                    }
                    // closing '}'
                    if (c == '}') {
                        // balance nested immediate
                        if (deferred1 > 0) {
                            deferred1 -= 1;
                            strb.append(c);
                        } else if (inner1 > 0) {
                            inner1 -= 1;
                        } else  {
                            // materialize the nested/deferred expr
                            final String src = strb.toString();
                            TemplateExpression dexpr;
                            if (nested) {
                                dexpr = new NestedExpression(
                                        expr.substring(inested, column + 1),
                                        jexl.parse(info.at(lineno, column), noscript, src, scope),
                                        null);
                            } else {
                                dexpr = new DeferredExpression(
                                        strb.toString(),
                                        jexl.parse(info.at(lineno, column), noscript, src, scope),
                                        null);
                            }
                            builder.add(dexpr);
                            strb.delete(0, Integer.MAX_VALUE);
                            nested = false;
                            state = ParseState.CONST;
                        }
                    } else {
                        // do buildup expr
                        column = append(strb, expr, column, c);
                    }
                    break;
                case ESCAPE:
                    if (c == deferredChar) {
                        strb.append(deferredChar);
                    } else if (c == immediateChar) {
                        strb.append(immediateChar);
                    } else {
                        strb.append('\\');
                        strb.append(c);
                    }
                    state = ParseState.CONST;
            }
            if (c == '\n') {
                lineno += 1;
            }
        }
        // we should be in that state
        if (state != ParseState.CONST) {
            // otherwise, we ended a line with a \, $ or #
            switch (state) {
                case ESCAPE:
                    strb.append('\\');
                    strb.append('\\');
                    break;
                case DEFERRED0:
                    strb.append(deferredChar);
                    break;
                case IMMEDIATE0:
                    strb.append(immediateChar);
                    break;
                default:
                    throw new Exception(info.at(lineno, 0), ""malformed expression: "" + expr, null);
            }
        }
        // if any chars were buffered, add them as a constant
        if (strb.length() > 0) {
            final TemplateExpression cexpr = new ConstantExpression(strb.toString(), null);
            builder.add(cexpr);
        }
        return builder.build(this, null);
    }","  public void test73()  throws Throwable  {
      ASTAddNode aSTAddNode0 = new ASTAddNode(461);
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      TemplateEngine templateEngine0 = engine0.jxlt();
      JexlInfo jexlInfo0 = new JexlInfo("""", (-241), 2642);
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[9];
      Scope scope1 = new Scope(scope0, stringArray0);
      TemplateEngine.TemplateExpression templateEngine_TemplateExpression0 = templateEngine0.parseExpression(jexlInfo0, """", scope1);
      TemplateEngine.NestedExpression templateEngine_NestedExpression0 = null;
      try {
        templateEngine_NestedExpression0 = templateEngine0.new NestedExpression((CharSequence) null, aSTAddNode0, templateEngine_TemplateExpression0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Nested TemplateExpression can not have a source
         //
         verifyException(""org.apache.commons.jexl3.internal.TemplateEngine$NestedExpression"", e);
      }
  }"
3070,,"  public void test74()  throws Throwable  {
      Engine engine0 = new Engine();
      TemplateEngine templateEngine0 = engine0.createJxltEngine(true, 36, 'p', 'p');
      TemplateEngine.NestedExpression templateEngine_NestedExpression0 = templateEngine0.new NestedExpression("""", (JexlNode) null, (TemplateEngine.TemplateExpression) null);
      ASTJexlScript aSTJexlScript0 = new ASTJexlScript((-4571));
      TemplateEngine.ImmediateExpression templateEngine_ImmediateExpression0 = templateEngine0.new ImmediateExpression("""", aSTJexlScript0, templateEngine_NestedExpression0);
      JexlOptions jexlOptions0 = engine0.options(aSTJexlScript0, engine0.EMPTY_CONTEXT);
      Interpreter interpreter0 = engine0.createInterpreter(engine0.EMPTY_CONTEXT, (Frame) null, jexlOptions0);
      TemplateEngine.TemplateExpression templateEngine_TemplateExpression0 = templateEngine_ImmediateExpression0.prepare(interpreter0);
}"
3071,"    TemplateExpression parseExpression(final JexlInfo info, final String expr, final Scope scope) {  // CSOFF: MethodLength
        final int size = expr.length();
        final ExpressionBuilder builder = new ExpressionBuilder(0);
        final StringBuilder strb = new StringBuilder(size);
        ParseState state = ParseState.CONST;
        int immediate1 = 0;
        int deferred1 = 0;
        int inner1 = 0;
        boolean nested = false;
        int inested = -1;
        int lineno = info.getLine();
        for (int column = 0; column < size; ++column) {
            final char c = expr.charAt(column);
            switch (state) {
                default: // in case we ever add new unified expression type
                    throw new UnsupportedOperationException(""unexpected unified expression type"");
                case CONST:
                    if (c == immediateChar) {
                        state = ParseState.IMMEDIATE0;
                    } else if (c == deferredChar) {
                        inested = column;
                        state = ParseState.DEFERRED0;
                    } else if (c == '\\') {
                        state = ParseState.ESCAPE;
                    } else {
                        // do buildup expr
                        strb.append(c);
                    }
                    break;
                case IMMEDIATE0: // $
                    if (c == '{') {
                        state = ParseState.IMMEDIATE1;
                        // if chars in buffer, create constant
                        if (strb.length() > 0) {
                            final TemplateExpression cexpr = new ConstantExpression(strb.toString(), null);
                            builder.add(cexpr);
                            strb.delete(0, Integer.MAX_VALUE);
                        }
                    } else {
                        // revert to CONST
                        strb.append(immediateChar);
                        strb.append(c);
                        state = ParseState.CONST;
                    }
                    break;
                case DEFERRED0: // #
                    if (c == '{') {
                        state = ParseState.DEFERRED1;
                        // if chars in buffer, create constant
                        if (strb.length() > 0) {
                            final TemplateExpression cexpr = new ConstantExpression(strb.toString(), null);
                            builder.add(cexpr);
                            strb.delete(0, Integer.MAX_VALUE);
                        }
                    } else {
                        // revert to CONST
                        strb.append(deferredChar);
                        strb.append(c);
                        state = ParseState.CONST;
                    }
                    break;
                case IMMEDIATE1: // ${...
                    if (c == '}') {
                        if (immediate1 > 0) {
                            immediate1 -= 1;
                            strb.append(c);
                        } else {
                            // materialize the immediate expr
                            final String src = strb.toString();
                            final TemplateExpression iexpr = new ImmediateExpression(
                                    src,
                                    jexl.parse(info.at(lineno, column), noscript, src, scope),
                                    null);
                            builder.add(iexpr);
                            strb.delete(0, Integer.MAX_VALUE);
                            state = ParseState.CONST;
                        }
                    } else {
                        if (c == '{') {
                            immediate1 += 1;
                        }
                        // do buildup expr
                        column = append(strb, expr, column, c);
                    }
                    break;
                case DEFERRED1: // #{...
                    // skip inner strings (for '}')
                    if (c == '""' || c == '\'') {
                        strb.append(c);
                        column = StringParser.readString(strb, expr, column + 1, c);
                        continue;
                    }
                    // nested immediate in deferred; need to balance count of '{' & '}'
                    if (c == '{') {
                        if (expr.charAt(column - 1) == immediateChar) {
                            inner1 += 1;
                            strb.deleteCharAt(strb.length() - 1);
                            nested = true;
                        } else {
                            deferred1 += 1;
                            strb.append(c);
                        }
                        continue;
                    }
                    // closing '}'
                    if (c == '}') {
                        // balance nested immediate
                        if (deferred1 > 0) {
                            deferred1 -= 1;
                            strb.append(c);
                        } else if (inner1 > 0) {
                            inner1 -= 1;
                        } else  {
                            // materialize the nested/deferred expr
                            final String src = strb.toString();
                            TemplateExpression dexpr;
                            if (nested) {
                                dexpr = new NestedExpression(
                                        expr.substring(inested, column + 1),
                                        jexl.parse(info.at(lineno, column), noscript, src, scope),
                                        null);
                            } else {
                                dexpr = new DeferredExpression(
                                        strb.toString(),
                                        jexl.parse(info.at(lineno, column), noscript, src, scope),
                                        null);
                            }
                            builder.add(dexpr);
                            strb.delete(0, Integer.MAX_VALUE);
                            nested = false;
                            state = ParseState.CONST;
                        }
                    } else {
                        // do buildup expr
                        column = append(strb, expr, column, c);
                    }
                    break;
                case ESCAPE:
                    if (c == deferredChar) {
                        strb.append(deferredChar);
                    } else if (c == immediateChar) {
                        strb.append(immediateChar);
                    } else {
                        strb.append('\\');
                        strb.append(c);
                    }
                    state = ParseState.CONST;
            }
            if (c == '\n') {
                lineno += 1;
            }
        }
        // we should be in that state
        if (state != ParseState.CONST) {
            // otherwise, we ended a line with a \, $ or #
            switch (state) {
                case ESCAPE:
                    strb.append('\\');
                    strb.append('\\');
                    break;
                case DEFERRED0:
                    strb.append(deferredChar);
                    break;
                case IMMEDIATE0:
                    strb.append(immediateChar);
                    break;
                default:
                    throw new Exception(info.at(lineno, 0), ""malformed expression: "" + expr, null);
            }
        }
        // if any chars were buffered, add them as a constant
        if (strb.length() > 0) {
            final TemplateExpression cexpr = new ConstantExpression(strb.toString(), null);
            builder.add(cexpr);
        }
        return builder.build(this, null);
    }","  public void test75()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      ASTJexlScript aSTJexlScript0 = new ASTJexlScript((-3554));
      TemplateEngine templateEngine0 = new TemplateEngine(engine0, true, 123, 'i', 'h');
      JexlInfo jexlInfo0 = engine0.createInfo(""780x,=n>:~IB$}"", 2246, 2246);
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      Scope scope1 = new Scope(scope0, (String[]) null);
      TemplateEngine.TemplateExpression templateEngine_TemplateExpression0 = templateEngine0.parseExpression(jexlInfo0, ""org.apache.commons.jexl3.internal.TemplateEngine$Block"", scope1);
      TemplateEngine.ImmediateExpression templateEngine_ImmediateExpression0 = templateEngine0.new ImmediateExpression(""780x,=n>:~IB$}"", aSTJexlScript0, templateEngine_TemplateExpression0);
      Engine.VarCollector engine_VarCollector0 = engine0.varCollector();
      templateEngine_ImmediateExpression0.getVariables(engine_VarCollector0);
}"
3072,"    public TemplateEngine(final Engine aJexl,
                          final boolean noScript,
                          final int cacheSize,
                          final char immediate,
                          final char deferred) {
        this.jexl = aJexl;
        this.cache = new SoftCache<>(cacheSize);
        immediateChar = immediate;
        deferredChar = deferred;
        noscript = noScript;
    }","  public void test76()  throws Throwable  {
      Engine engine0 = new Engine();
      TemplateEngine templateEngine0 = new TemplateEngine(engine0, true, 34, ' ', ' ');
      TemplateEngine.ConstantExpression templateEngine_ConstantExpression0 = null;
      try {
        templateEngine_ConstantExpression0 = templateEngine0.new ConstantExpression((Object) null, (TemplateEngine.TemplateExpression) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // constant can not be null
         //
         verifyException(""org.apache.commons.jexl3.internal.TemplateEngine$ConstantExpression"", e);
      }
  }"
3073,"    public TemplateEngine(final Engine aJexl,
                          final boolean noScript,
                          final int cacheSize,
                          final char immediate,
                          final char deferred) {
        this.jexl = aJexl;
        this.cache = new SoftCache<>(cacheSize);
        immediateChar = immediate;
        deferredChar = deferred;
        noscript = noScript;
    }","  public void test77()  throws Throwable  {
      TemplateEngine templateEngine0 = new TemplateEngine((Engine) null, true, (-1663), '>', 'z');
      ASTSetModNode aSTSetModNode0 = new ASTSetModNode(54);
      TemplateEngine.DeferredExpression templateEngine_DeferredExpression0 = templateEngine0.new DeferredExpression(""UnaryPlusNode"", aSTSetModNode0, (TemplateEngine.TemplateExpression) null);
      boolean boolean0 = templateEngine_DeferredExpression0.isDeferred();
}"
3074,"    public TemplateScript createTemplate(final JexlInfo info, final String prefix, final Reader source, final String... parms) {
        return new TemplateScript(this, info, prefix, source,  parms);
    }","  public void test78()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      TemplateEngine templateEngine0 = new TemplateEngine(engine0, true, 123, 'i', 'h');
      JexlInfo jexlInfo0 = engine0.createInfo(""780x,=n>:~IB$}"", 2246, 2246);
      StringReader stringReader0 = new StringReader("""");
      BufferedReader bufferedReader0 = new BufferedReader(stringReader0);
      TemplateScript templateScript0 = templateEngine0.createTemplate(jexlInfo0, ""]+N,:XLmJX5kb"", (Reader) bufferedReader0, (String[]) null);
}"
3075,"    public void clearCache() {
        synchronized (cache) {
            cache.clear();
        }
    }","  public void test79()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      TemplateEngine templateEngine0 = new TemplateEngine(engine0, true, 123, 'i', 'h');
      templateEngine0.clearCache();
  }"
3076,"    char getImmediateChar() {
        return immediateChar;
    }","  public void test80()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      TemplateEngine templateEngine0 = engine0.jxlt();
      char char0 = templateEngine0.getImmediateChar();
}"
3077,"    TemplateExpression parseExpression(final JexlInfo info, final String expr, final Scope scope) {  // CSOFF: MethodLength
        final int size = expr.length();
        final ExpressionBuilder builder = new ExpressionBuilder(0);
        final StringBuilder strb = new StringBuilder(size);
        ParseState state = ParseState.CONST;
        int immediate1 = 0;
        int deferred1 = 0;
        int inner1 = 0;
        boolean nested = false;
        int inested = -1;
        int lineno = info.getLine();
        for (int column = 0; column < size; ++column) {
            final char c = expr.charAt(column);
            switch (state) {
                default: // in case we ever add new unified expression type
                    throw new UnsupportedOperationException(""unexpected unified expression type"");
                case CONST:
                    if (c == immediateChar) {
                        state = ParseState.IMMEDIATE0;
                    } else if (c == deferredChar) {
                        inested = column;
                        state = ParseState.DEFERRED0;
                    } else if (c == '\\') {
                        state = ParseState.ESCAPE;
                    } else {
                        // do buildup expr
                        strb.append(c);
                    }
                    break;
                case IMMEDIATE0: // $
                    if (c == '{') {
                        state = ParseState.IMMEDIATE1;
                        // if chars in buffer, create constant
                        if (strb.length() > 0) {
                            final TemplateExpression cexpr = new ConstantExpression(strb.toString(), null);
                            builder.add(cexpr);
                            strb.delete(0, Integer.MAX_VALUE);
                        }
                    } else {
                        // revert to CONST
                        strb.append(immediateChar);
                        strb.append(c);
                        state = ParseState.CONST;
                    }
                    break;
                case DEFERRED0: // #
                    if (c == '{') {
                        state = ParseState.DEFERRED1;
                        // if chars in buffer, create constant
                        if (strb.length() > 0) {
                            final TemplateExpression cexpr = new ConstantExpression(strb.toString(), null);
                            builder.add(cexpr);
                            strb.delete(0, Integer.MAX_VALUE);
                        }
                    } else {
                        // revert to CONST
                        strb.append(deferredChar);
                        strb.append(c);
                        state = ParseState.CONST;
                    }
                    break;
                case IMMEDIATE1: // ${...
                    if (c == '}') {
                        if (immediate1 > 0) {
                            immediate1 -= 1;
                            strb.append(c);
                        } else {
                            // materialize the immediate expr
                            final String src = strb.toString();
                            final TemplateExpression iexpr = new ImmediateExpression(
                                    src,
                                    jexl.parse(info.at(lineno, column), noscript, src, scope),
                                    null);
                            builder.add(iexpr);
                            strb.delete(0, Integer.MAX_VALUE);
                            state = ParseState.CONST;
                        }
                    } else {
                        if (c == '{') {
                            immediate1 += 1;
                        }
                        // do buildup expr
                        column = append(strb, expr, column, c);
                    }
                    break;
                case DEFERRED1: // #{...
                    // skip inner strings (for '}')
                    if (c == '""' || c == '\'') {
                        strb.append(c);
                        column = StringParser.readString(strb, expr, column + 1, c);
                        continue;
                    }
                    // nested immediate in deferred; need to balance count of '{' & '}'
                    if (c == '{') {
                        if (expr.charAt(column - 1) == immediateChar) {
                            inner1 += 1;
                            strb.deleteCharAt(strb.length() - 1);
                            nested = true;
                        } else {
                            deferred1 += 1;
                            strb.append(c);
                        }
                        continue;
                    }
                    // closing '}'
                    if (c == '}') {
                        // balance nested immediate
                        if (deferred1 > 0) {
                            deferred1 -= 1;
                            strb.append(c);
                        } else if (inner1 > 0) {
                            inner1 -= 1;
                        } else  {
                            // materialize the nested/deferred expr
                            final String src = strb.toString();
                            TemplateExpression dexpr;
                            if (nested) {
                                dexpr = new NestedExpression(
                                        expr.substring(inested, column + 1),
                                        jexl.parse(info.at(lineno, column), noscript, src, scope),
                                        null);
                            } else {
                                dexpr = new DeferredExpression(
                                        strb.toString(),
                                        jexl.parse(info.at(lineno, column), noscript, src, scope),
                                        null);
                            }
                            builder.add(dexpr);
                            strb.delete(0, Integer.MAX_VALUE);
                            nested = false;
                            state = ParseState.CONST;
                        }
                    } else {
                        // do buildup expr
                        column = append(strb, expr, column, c);
                    }
                    break;
                case ESCAPE:
                    if (c == deferredChar) {
                        strb.append(deferredChar);
                    } else if (c == immediateChar) {
                        strb.append(immediateChar);
                    } else {
                        strb.append('\\');
                        strb.append(c);
                    }
                    state = ParseState.CONST;
            }
            if (c == '\n') {
                lineno += 1;
            }
        }
        // we should be in that state
        if (state != ParseState.CONST) {
            // otherwise, we ended a line with a \, $ or #
            switch (state) {
                case ESCAPE:
                    strb.append('\\');
                    strb.append('\\');
                    break;
                case DEFERRED0:
                    strb.append(deferredChar);
                    break;
                case IMMEDIATE0:
                    strb.append(immediateChar);
                    break;
                default:
                    throw new Exception(info.at(lineno, 0), ""malformed expression: "" + expr, null);
            }
        }
        // if any chars were buffered, add them as a constant
        if (strb.length() > 0) {
            final TemplateExpression cexpr = new ConstantExpression(strb.toString(), null);
            builder.add(cexpr);
        }
        return builder.build(this, null);
    }","  public void test81()  throws Throwable  {
      Engine engine0 = new Engine();
      TemplateEngine templateEngine0 = engine0.createJxltEngine(true, 3, '$', '.');
      ASTDoWhileStatement aSTDoWhileStatement0 = new ASTDoWhileStatement(3);
      JexlInfo jexlInfo0 = new JexlInfo();
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[1];
      Scope scope1 = new Scope(scope0, stringArray0);
      TemplateEngine.TemplateExpression templateEngine_TemplateExpression0 = templateEngine0.parseExpression(jexlInfo0, ""$$t"", scope1);
      TemplateEngine.DeferredExpression templateEngine_DeferredExpression0 = templateEngine0.new DeferredExpression(""$$t"", aSTDoWhileStatement0, templateEngine_TemplateExpression0);
      templateEngine_DeferredExpression0.getType();
  }"
3078,"    TemplateExpression parseExpression(final JexlInfo info, final String expr, final Scope scope) {  // CSOFF: MethodLength
        final int size = expr.length();
        final ExpressionBuilder builder = new ExpressionBuilder(0);
        final StringBuilder strb = new StringBuilder(size);
        ParseState state = ParseState.CONST;
        int immediate1 = 0;
        int deferred1 = 0;
        int inner1 = 0;
        boolean nested = false;
        int inested = -1;
        int lineno = info.getLine();
        for (int column = 0; column < size; ++column) {
            final char c = expr.charAt(column);
            switch (state) {
                default: // in case we ever add new unified expression type
                    throw new UnsupportedOperationException(""unexpected unified expression type"");
                case CONST:
                    if (c == immediateChar) {
                        state = ParseState.IMMEDIATE0;
                    } else if (c == deferredChar) {
                        inested = column;
                        state = ParseState.DEFERRED0;
                    } else if (c == '\\') {
                        state = ParseState.ESCAPE;
                    } else {
                        // do buildup expr
                        strb.append(c);
                    }
                    break;
                case IMMEDIATE0: // $
                    if (c == '{') {
                        state = ParseState.IMMEDIATE1;
                        // if chars in buffer, create constant
                        if (strb.length() > 0) {
                            final TemplateExpression cexpr = new ConstantExpression(strb.toString(), null);
                            builder.add(cexpr);
                            strb.delete(0, Integer.MAX_VALUE);
                        }
                    } else {
                        // revert to CONST
                        strb.append(immediateChar);
                        strb.append(c);
                        state = ParseState.CONST;
                    }
                    break;
                case DEFERRED0: // #
                    if (c == '{') {
                        state = ParseState.DEFERRED1;
                        // if chars in buffer, create constant
                        if (strb.length() > 0) {
                            final TemplateExpression cexpr = new ConstantExpression(strb.toString(), null);
                            builder.add(cexpr);
                            strb.delete(0, Integer.MAX_VALUE);
                        }
                    } else {
                        // revert to CONST
                        strb.append(deferredChar);
                        strb.append(c);
                        state = ParseState.CONST;
                    }
                    break;
                case IMMEDIATE1: // ${...
                    if (c == '}') {
                        if (immediate1 > 0) {
                            immediate1 -= 1;
                            strb.append(c);
                        } else {
                            // materialize the immediate expr
                            final String src = strb.toString();
                            final TemplateExpression iexpr = new ImmediateExpression(
                                    src,
                                    jexl.parse(info.at(lineno, column), noscript, src, scope),
                                    null);
                            builder.add(iexpr);
                            strb.delete(0, Integer.MAX_VALUE);
                            state = ParseState.CONST;
                        }
                    } else {
                        if (c == '{') {
                            immediate1 += 1;
                        }
                        // do buildup expr
                        column = append(strb, expr, column, c);
                    }
                    break;
                case DEFERRED1: // #{...
                    // skip inner strings (for '}')
                    if (c == '""' || c == '\'') {
                        strb.append(c);
                        column = StringParser.readString(strb, expr, column + 1, c);
                        continue;
                    }
                    // nested immediate in deferred; need to balance count of '{' & '}'
                    if (c == '{') {
                        if (expr.charAt(column - 1) == immediateChar) {
                            inner1 += 1;
                            strb.deleteCharAt(strb.length() - 1);
                            nested = true;
                        } else {
                            deferred1 += 1;
                            strb.append(c);
                        }
                        continue;
                    }
                    // closing '}'
                    if (c == '}') {
                        // balance nested immediate
                        if (deferred1 > 0) {
                            deferred1 -= 1;
                            strb.append(c);
                        } else if (inner1 > 0) {
                            inner1 -= 1;
                        } else  {
                            // materialize the nested/deferred expr
                            final String src = strb.toString();
                            TemplateExpression dexpr;
                            if (nested) {
                                dexpr = new NestedExpression(
                                        expr.substring(inested, column + 1),
                                        jexl.parse(info.at(lineno, column), noscript, src, scope),
                                        null);
                            } else {
                                dexpr = new DeferredExpression(
                                        strb.toString(),
                                        jexl.parse(info.at(lineno, column), noscript, src, scope),
                                        null);
                            }
                            builder.add(dexpr);
                            strb.delete(0, Integer.MAX_VALUE);
                            nested = false;
                            state = ParseState.CONST;
                        }
                    } else {
                        // do buildup expr
                        column = append(strb, expr, column, c);
                    }
                    break;
                case ESCAPE:
                    if (c == deferredChar) {
                        strb.append(deferredChar);
                    } else if (c == immediateChar) {
                        strb.append(immediateChar);
                    } else {
                        strb.append('\\');
                        strb.append(c);
                    }
                    state = ParseState.CONST;
            }
            if (c == '\n') {
                lineno += 1;
            }
        }
        // we should be in that state
        if (state != ParseState.CONST) {
            // otherwise, we ended a line with a \, $ or #
            switch (state) {
                case ESCAPE:
                    strb.append('\\');
                    strb.append('\\');
                    break;
                case DEFERRED0:
                    strb.append(deferredChar);
                    break;
                case IMMEDIATE0:
                    strb.append(immediateChar);
                    break;
                default:
                    throw new Exception(info.at(lineno, 0), ""malformed expression: "" + expr, null);
            }
        }
        // if any chars were buffered, add them as a constant
        if (strb.length() > 0) {
            final TemplateExpression cexpr = new ConstantExpression(strb.toString(), null);
            builder.add(cexpr);
        }
        return builder.build(this, null);
    }","  public void test82()  throws Throwable  {
      TemplateEngine templateEngine0 = new TemplateEngine((Engine) null, true, (-1663), '>', 'z');
      ParserTokenManager parserTokenManager0 = new ParserTokenManager((SimpleCharStream) null);
      Parser parser0 = new Parser(""UnaryPlusNode"");
      ASTAndNode aSTAndNode0 = new ASTAndNode(parser0, (-3346));
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      JexlInfo jexlInfo0 = engine0.createInfo(""F9=-y"", (-3346), (-2640));
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      Scope scope1 = new Scope(scope0, parserTokenManager0.jjstrLiteralImages);
      TemplateEngine.TemplateExpression templateEngine_TemplateExpression0 = templateEngine0.parseExpression(jexlInfo0, ""{c> ZC,+.9f(\"""", scope1);
      TemplateEngine.DeferredExpression templateEngine_DeferredExpression0 = templateEngine0.new DeferredExpression(""UnaryPlusNode"", aSTAndNode0, templateEngine_TemplateExpression0);
      templateEngine_DeferredExpression0.getVariables((Engine.VarCollector) null);
}"
3079,"    public TemplateEngine(final Engine aJexl,
                          final boolean noScript,
                          final int cacheSize,
                          final char immediate,
                          final char deferred) {
        this.jexl = aJexl;
        this.cache = new SoftCache<>(cacheSize);
        immediateChar = immediate;
        deferredChar = deferred;
        noscript = noScript;
    }","  public void test83()  throws Throwable  {
      TemplateEngine.BlockType templateEngine_BlockType0 = TemplateEngine.BlockType.DIRECTIVE;
      TemplateEngine.Block templateEngine_Block0 = new TemplateEngine.Block(templateEngine_BlockType0, 0, ""org.apache.commons.jexl3.internal.TemplateEngine$DeferredExpression"");
      String string0 = templateEngine_Block0.toString();
}"
3080,,"  public void test84()  throws Throwable  {
      Engine engine0 = new Engine();
      TemplateEngine templateEngine0 = engine0.createJxltEngine(false, 48, 'F', 'F');
      ASTAddNode aSTAddNode0 = new ASTAddNode(95);
      TemplateEngine.NestedExpression templateEngine_NestedExpression0 = templateEngine0.new NestedExpression(""org.apache.commons.jexl3.internal.TemplateEngine$Block"", aSTAddNode0, (TemplateEngine.TemplateExpression) null);
      templateEngine_NestedExpression0.getType();
  }"
3081,,"  public void test85()  throws Throwable  {
      Engine engine0 = new Engine();
      TemplateEngine templateEngine0 = engine0.createJxltEngine(true, 36, 'p', 'p');
      TemplateEngine.NestedExpression templateEngine_NestedExpression0 = templateEngine0.new NestedExpression("""", (JexlNode) null, (TemplateEngine.TemplateExpression) null);
      boolean boolean0 = templateEngine_NestedExpression0.isImmediate();
}"
3082,,"  public void test86()  throws Throwable  {
      Engine engine0 = new Engine();
      TemplateEngine templateEngine0 = engine0.createJxltEngine(false, 0, 'p', 'p');
      TemplateEngine.NestedExpression templateEngine_NestedExpression0 = templateEngine0.new NestedExpression((CharSequence) null, (JexlNode) null, (TemplateEngine.TemplateExpression) null);
      JexlOptions jexlOptions0 = new JexlOptions();
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[9];
      Scope scope1 = new Scope(scope0, stringArray0);
      Frame frame0 = new Frame(scope1, stringArray0, 1623);
      Interpreter interpreter0 = new Interpreter(engine0, jexlOptions0, engine0.EMPTY_CONTEXT, frame0);
      // Undeclared exception!
      try { 
        templateEngine_NestedExpression0.evaluate(interpreter0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.internal.Interpreter"", e);
      }
  }"
3083,,"  public void test87()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      TemplateEngine templateEngine0 = engine0.createJxltEngine(true, 66, 'A', '.');
      ASTMapEntry aSTMapEntry0 = new ASTMapEntry(66);
      TemplateEngine.NestedExpression templateEngine_NestedExpression0 = templateEngine0.new NestedExpression(""XGyyq4x;RAgeM"", aSTMapEntry0, (TemplateEngine.TemplateExpression) null);
      JexlInfo jexlInfo0 = templateEngine_NestedExpression0.getInfo();
}"
3084,"    TemplateExpression parseExpression(final JexlInfo info, final String expr, final Scope scope) {  // CSOFF: MethodLength
        final int size = expr.length();
        final ExpressionBuilder builder = new ExpressionBuilder(0);
        final StringBuilder strb = new StringBuilder(size);
        ParseState state = ParseState.CONST;
        int immediate1 = 0;
        int deferred1 = 0;
        int inner1 = 0;
        boolean nested = false;
        int inested = -1;
        int lineno = info.getLine();
        for (int column = 0; column < size; ++column) {
            final char c = expr.charAt(column);
            switch (state) {
                default: // in case we ever add new unified expression type
                    throw new UnsupportedOperationException(""unexpected unified expression type"");
                case CONST:
                    if (c == immediateChar) {
                        state = ParseState.IMMEDIATE0;
                    } else if (c == deferredChar) {
                        inested = column;
                        state = ParseState.DEFERRED0;
                    } else if (c == '\\') {
                        state = ParseState.ESCAPE;
                    } else {
                        // do buildup expr
                        strb.append(c);
                    }
                    break;
                case IMMEDIATE0: // $
                    if (c == '{') {
                        state = ParseState.IMMEDIATE1;
                        // if chars in buffer, create constant
                        if (strb.length() > 0) {
                            final TemplateExpression cexpr = new ConstantExpression(strb.toString(), null);
                            builder.add(cexpr);
                            strb.delete(0, Integer.MAX_VALUE);
                        }
                    } else {
                        // revert to CONST
                        strb.append(immediateChar);
                        strb.append(c);
                        state = ParseState.CONST;
                    }
                    break;
                case DEFERRED0: // #
                    if (c == '{') {
                        state = ParseState.DEFERRED1;
                        // if chars in buffer, create constant
                        if (strb.length() > 0) {
                            final TemplateExpression cexpr = new ConstantExpression(strb.toString(), null);
                            builder.add(cexpr);
                            strb.delete(0, Integer.MAX_VALUE);
                        }
                    } else {
                        // revert to CONST
                        strb.append(deferredChar);
                        strb.append(c);
                        state = ParseState.CONST;
                    }
                    break;
                case IMMEDIATE1: // ${...
                    if (c == '}') {
                        if (immediate1 > 0) {
                            immediate1 -= 1;
                            strb.append(c);
                        } else {
                            // materialize the immediate expr
                            final String src = strb.toString();
                            final TemplateExpression iexpr = new ImmediateExpression(
                                    src,
                                    jexl.parse(info.at(lineno, column), noscript, src, scope),
                                    null);
                            builder.add(iexpr);
                            strb.delete(0, Integer.MAX_VALUE);
                            state = ParseState.CONST;
                        }
                    } else {
                        if (c == '{') {
                            immediate1 += 1;
                        }
                        // do buildup expr
                        column = append(strb, expr, column, c);
                    }
                    break;
                case DEFERRED1: // #{...
                    // skip inner strings (for '}')
                    if (c == '""' || c == '\'') {
                        strb.append(c);
                        column = StringParser.readString(strb, expr, column + 1, c);
                        continue;
                    }
                    // nested immediate in deferred; need to balance count of '{' & '}'
                    if (c == '{') {
                        if (expr.charAt(column - 1) == immediateChar) {
                            inner1 += 1;
                            strb.deleteCharAt(strb.length() - 1);
                            nested = true;
                        } else {
                            deferred1 += 1;
                            strb.append(c);
                        }
                        continue;
                    }
                    // closing '}'
                    if (c == '}') {
                        // balance nested immediate
                        if (deferred1 > 0) {
                            deferred1 -= 1;
                            strb.append(c);
                        } else if (inner1 > 0) {
                            inner1 -= 1;
                        } else  {
                            // materialize the nested/deferred expr
                            final String src = strb.toString();
                            TemplateExpression dexpr;
                            if (nested) {
                                dexpr = new NestedExpression(
                                        expr.substring(inested, column + 1),
                                        jexl.parse(info.at(lineno, column), noscript, src, scope),
                                        null);
                            } else {
                                dexpr = new DeferredExpression(
                                        strb.toString(),
                                        jexl.parse(info.at(lineno, column), noscript, src, scope),
                                        null);
                            }
                            builder.add(dexpr);
                            strb.delete(0, Integer.MAX_VALUE);
                            nested = false;
                            state = ParseState.CONST;
                        }
                    } else {
                        // do buildup expr
                        column = append(strb, expr, column, c);
                    }
                    break;
                case ESCAPE:
                    if (c == deferredChar) {
                        strb.append(deferredChar);
                    } else if (c == immediateChar) {
                        strb.append(immediateChar);
                    } else {
                        strb.append('\\');
                        strb.append(c);
                    }
                    state = ParseState.CONST;
            }
            if (c == '\n') {
                lineno += 1;
            }
        }
        // we should be in that state
        if (state != ParseState.CONST) {
            // otherwise, we ended a line with a \, $ or #
            switch (state) {
                case ESCAPE:
                    strb.append('\\');
                    strb.append('\\');
                    break;
                case DEFERRED0:
                    strb.append(deferredChar);
                    break;
                case IMMEDIATE0:
                    strb.append(immediateChar);
                    break;
                default:
                    throw new Exception(info.at(lineno, 0), ""malformed expression: "" + expr, null);
            }
        }
        // if any chars were buffered, add them as a constant
        if (strb.length() > 0) {
            final TemplateExpression cexpr = new ConstantExpression(strb.toString(), null);
            builder.add(cexpr);
        }
        return builder.build(this, null);
    }","  public void test88()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      TemplateEngine templateEngine0 = engine0.jxlt();
      JexlInfo jexlInfo0 = new JexlInfo("""", 0, 0);
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[3];
      Scope scope1 = new Scope(scope0, stringArray0);
      TemplateEngine.CompositeExpression templateEngine_CompositeExpression0 = (TemplateEngine.CompositeExpression)templateEngine0.parseExpression(jexlInfo0, """", scope1);
      templateEngine_CompositeExpression0.getType();
}"
3085,,"  public void test89()  throws Throwable  {
      Engine engine0 = new Engine();
      TemplateEngine templateEngine0 = engine0.createJxltEngine(false, 48, 'F', 'F');
      ASTAddNode aSTAddNode0 = new ASTAddNode(95);
      TemplateEngine.NestedExpression templateEngine_NestedExpression0 = templateEngine0.new NestedExpression(""org.apache.commons.jexl3.internal.TemplateEngine$Block"", aSTAddNode0, (TemplateEngine.TemplateExpression) null);
      TemplateEngine.ImmediateExpression templateEngine_ImmediateExpression0 = templateEngine0.new ImmediateExpression(""$$org.apache.commons.jexl3.internal.TemplateEngine$Block"", aSTAddNode0, templateEngine_NestedExpression0);
      templateEngine_ImmediateExpression0.getType();
  }"
3086,"    TemplateExpression parseExpression(final JexlInfo info, final String expr, final Scope scope) {  // CSOFF: MethodLength
        final int size = expr.length();
        final ExpressionBuilder builder = new ExpressionBuilder(0);
        final StringBuilder strb = new StringBuilder(size);
        ParseState state = ParseState.CONST;
        int immediate1 = 0;
        int deferred1 = 0;
        int inner1 = 0;
        boolean nested = false;
        int inested = -1;
        int lineno = info.getLine();
        for (int column = 0; column < size; ++column) {
            final char c = expr.charAt(column);
            switch (state) {
                default: // in case we ever add new unified expression type
                    throw new UnsupportedOperationException(""unexpected unified expression type"");
                case CONST:
                    if (c == immediateChar) {
                        state = ParseState.IMMEDIATE0;
                    } else if (c == deferredChar) {
                        inested = column;
                        state = ParseState.DEFERRED0;
                    } else if (c == '\\') {
                        state = ParseState.ESCAPE;
                    } else {
                        // do buildup expr
                        strb.append(c);
                    }
                    break;
                case IMMEDIATE0: // $
                    if (c == '{') {
                        state = ParseState.IMMEDIATE1;
                        // if chars in buffer, create constant
                        if (strb.length() > 0) {
                            final TemplateExpression cexpr = new ConstantExpression(strb.toString(), null);
                            builder.add(cexpr);
                            strb.delete(0, Integer.MAX_VALUE);
                        }
                    } else {
                        // revert to CONST
                        strb.append(immediateChar);
                        strb.append(c);
                        state = ParseState.CONST;
                    }
                    break;
                case DEFERRED0: // #
                    if (c == '{') {
                        state = ParseState.DEFERRED1;
                        // if chars in buffer, create constant
                        if (strb.length() > 0) {
                            final TemplateExpression cexpr = new ConstantExpression(strb.toString(), null);
                            builder.add(cexpr);
                            strb.delete(0, Integer.MAX_VALUE);
                        }
                    } else {
                        // revert to CONST
                        strb.append(deferredChar);
                        strb.append(c);
                        state = ParseState.CONST;
                    }
                    break;
                case IMMEDIATE1: // ${...
                    if (c == '}') {
                        if (immediate1 > 0) {
                            immediate1 -= 1;
                            strb.append(c);
                        } else {
                            // materialize the immediate expr
                            final String src = strb.toString();
                            final TemplateExpression iexpr = new ImmediateExpression(
                                    src,
                                    jexl.parse(info.at(lineno, column), noscript, src, scope),
                                    null);
                            builder.add(iexpr);
                            strb.delete(0, Integer.MAX_VALUE);
                            state = ParseState.CONST;
                        }
                    } else {
                        if (c == '{') {
                            immediate1 += 1;
                        }
                        // do buildup expr
                        column = append(strb, expr, column, c);
                    }
                    break;
                case DEFERRED1: // #{...
                    // skip inner strings (for '}')
                    if (c == '""' || c == '\'') {
                        strb.append(c);
                        column = StringParser.readString(strb, expr, column + 1, c);
                        continue;
                    }
                    // nested immediate in deferred; need to balance count of '{' & '}'
                    if (c == '{') {
                        if (expr.charAt(column - 1) == immediateChar) {
                            inner1 += 1;
                            strb.deleteCharAt(strb.length() - 1);
                            nested = true;
                        } else {
                            deferred1 += 1;
                            strb.append(c);
                        }
                        continue;
                    }
                    // closing '}'
                    if (c == '}') {
                        // balance nested immediate
                        if (deferred1 > 0) {
                            deferred1 -= 1;
                            strb.append(c);
                        } else if (inner1 > 0) {
                            inner1 -= 1;
                        } else  {
                            // materialize the nested/deferred expr
                            final String src = strb.toString();
                            TemplateExpression dexpr;
                            if (nested) {
                                dexpr = new NestedExpression(
                                        expr.substring(inested, column + 1),
                                        jexl.parse(info.at(lineno, column), noscript, src, scope),
                                        null);
                            } else {
                                dexpr = new DeferredExpression(
                                        strb.toString(),
                                        jexl.parse(info.at(lineno, column), noscript, src, scope),
                                        null);
                            }
                            builder.add(dexpr);
                            strb.delete(0, Integer.MAX_VALUE);
                            nested = false;
                            state = ParseState.CONST;
                        }
                    } else {
                        // do buildup expr
                        column = append(strb, expr, column, c);
                    }
                    break;
                case ESCAPE:
                    if (c == deferredChar) {
                        strb.append(deferredChar);
                    } else if (c == immediateChar) {
                        strb.append(immediateChar);
                    } else {
                        strb.append('\\');
                        strb.append(c);
                    }
                    state = ParseState.CONST;
            }
            if (c == '\n') {
                lineno += 1;
            }
        }
        // we should be in that state
        if (state != ParseState.CONST) {
            // otherwise, we ended a line with a \, $ or #
            switch (state) {
                case ESCAPE:
                    strb.append('\\');
                    strb.append('\\');
                    break;
                case DEFERRED0:
                    strb.append(deferredChar);
                    break;
                case IMMEDIATE0:
                    strb.append(immediateChar);
                    break;
                default:
                    throw new Exception(info.at(lineno, 0), ""malformed expression: "" + expr, null);
            }
        }
        // if any chars were buffered, add them as a constant
        if (strb.length() > 0) {
            final TemplateExpression cexpr = new ConstantExpression(strb.toString(), null);
            builder.add(cexpr);
        }
        return builder.build(this, null);
    }","  public void test90()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      TemplateEngine templateEngine0 = engine0.jxlt();
      JexlInfo jexlInfo0 = new JexlInfo("""", 0, 0);
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[3];
      Scope scope1 = new Scope(scope0, stringArray0);
      TemplateEngine.TemplateExpression templateEngine_TemplateExpression0 = templateEngine0.parseExpression(jexlInfo0, """", scope1);
      TemplateEngine.ConstantExpression templateEngine_ConstantExpression0 = templateEngine0.new ConstantExpression("""", templateEngine_TemplateExpression0);
      templateEngine_ConstantExpression0.getVariables();
}"
3087,"    TemplateExpression parseExpression(final JexlInfo info, final String expr, final Scope scope) {  // CSOFF: MethodLength
        final int size = expr.length();
        final ExpressionBuilder builder = new ExpressionBuilder(0);
        final StringBuilder strb = new StringBuilder(size);
        ParseState state = ParseState.CONST;
        int immediate1 = 0;
        int deferred1 = 0;
        int inner1 = 0;
        boolean nested = false;
        int inested = -1;
        int lineno = info.getLine();
        for (int column = 0; column < size; ++column) {
            final char c = expr.charAt(column);
            switch (state) {
                default: // in case we ever add new unified expression type
                    throw new UnsupportedOperationException(""unexpected unified expression type"");
                case CONST:
                    if (c == immediateChar) {
                        state = ParseState.IMMEDIATE0;
                    } else if (c == deferredChar) {
                        inested = column;
                        state = ParseState.DEFERRED0;
                    } else if (c == '\\') {
                        state = ParseState.ESCAPE;
                    } else {
                        // do buildup expr
                        strb.append(c);
                    }
                    break;
                case IMMEDIATE0: // $
                    if (c == '{') {
                        state = ParseState.IMMEDIATE1;
                        // if chars in buffer, create constant
                        if (strb.length() > 0) {
                            final TemplateExpression cexpr = new ConstantExpression(strb.toString(), null);
                            builder.add(cexpr);
                            strb.delete(0, Integer.MAX_VALUE);
                        }
                    } else {
                        // revert to CONST
                        strb.append(immediateChar);
                        strb.append(c);
                        state = ParseState.CONST;
                    }
                    break;
                case DEFERRED0: // #
                    if (c == '{') {
                        state = ParseState.DEFERRED1;
                        // if chars in buffer, create constant
                        if (strb.length() > 0) {
                            final TemplateExpression cexpr = new ConstantExpression(strb.toString(), null);
                            builder.add(cexpr);
                            strb.delete(0, Integer.MAX_VALUE);
                        }
                    } else {
                        // revert to CONST
                        strb.append(deferredChar);
                        strb.append(c);
                        state = ParseState.CONST;
                    }
                    break;
                case IMMEDIATE1: // ${...
                    if (c == '}') {
                        if (immediate1 > 0) {
                            immediate1 -= 1;
                            strb.append(c);
                        } else {
                            // materialize the immediate expr
                            final String src = strb.toString();
                            final TemplateExpression iexpr = new ImmediateExpression(
                                    src,
                                    jexl.parse(info.at(lineno, column), noscript, src, scope),
                                    null);
                            builder.add(iexpr);
                            strb.delete(0, Integer.MAX_VALUE);
                            state = ParseState.CONST;
                        }
                    } else {
                        if (c == '{') {
                            immediate1 += 1;
                        }
                        // do buildup expr
                        column = append(strb, expr, column, c);
                    }
                    break;
                case DEFERRED1: // #{...
                    // skip inner strings (for '}')
                    if (c == '""' || c == '\'') {
                        strb.append(c);
                        column = StringParser.readString(strb, expr, column + 1, c);
                        continue;
                    }
                    // nested immediate in deferred; need to balance count of '{' & '}'
                    if (c == '{') {
                        if (expr.charAt(column - 1) == immediateChar) {
                            inner1 += 1;
                            strb.deleteCharAt(strb.length() - 1);
                            nested = true;
                        } else {
                            deferred1 += 1;
                            strb.append(c);
                        }
                        continue;
                    }
                    // closing '}'
                    if (c == '}') {
                        // balance nested immediate
                        if (deferred1 > 0) {
                            deferred1 -= 1;
                            strb.append(c);
                        } else if (inner1 > 0) {
                            inner1 -= 1;
                        } else  {
                            // materialize the nested/deferred expr
                            final String src = strb.toString();
                            TemplateExpression dexpr;
                            if (nested) {
                                dexpr = new NestedExpression(
                                        expr.substring(inested, column + 1),
                                        jexl.parse(info.at(lineno, column), noscript, src, scope),
                                        null);
                            } else {
                                dexpr = new DeferredExpression(
                                        strb.toString(),
                                        jexl.parse(info.at(lineno, column), noscript, src, scope),
                                        null);
                            }
                            builder.add(dexpr);
                            strb.delete(0, Integer.MAX_VALUE);
                            nested = false;
                            state = ParseState.CONST;
                        }
                    } else {
                        // do buildup expr
                        column = append(strb, expr, column, c);
                    }
                    break;
                case ESCAPE:
                    if (c == deferredChar) {
                        strb.append(deferredChar);
                    } else if (c == immediateChar) {
                        strb.append(immediateChar);
                    } else {
                        strb.append('\\');
                        strb.append(c);
                    }
                    state = ParseState.CONST;
            }
            if (c == '\n') {
                lineno += 1;
            }
        }
        // we should be in that state
        if (state != ParseState.CONST) {
            // otherwise, we ended a line with a \, $ or #
            switch (state) {
                case ESCAPE:
                    strb.append('\\');
                    strb.append('\\');
                    break;
                case DEFERRED0:
                    strb.append(deferredChar);
                    break;
                case IMMEDIATE0:
                    strb.append(immediateChar);
                    break;
                default:
                    throw new Exception(info.at(lineno, 0), ""malformed expression: "" + expr, null);
            }
        }
        // if any chars were buffered, add them as a constant
        if (strb.length() > 0) {
            final TemplateExpression cexpr = new ConstantExpression(strb.toString(), null);
            builder.add(cexpr);
        }
        return builder.build(this, null);
    }","  public void test91()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      TemplateEngine templateEngine0 = engine0.jxlt();
      JexlInfo jexlInfo0 = new JexlInfo("""", 0, 0);
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[3];
      Scope scope1 = new Scope(scope0, stringArray0);
      TemplateEngine.TemplateExpression templateEngine_TemplateExpression0 = templateEngine0.parseExpression(jexlInfo0, """", scope1);
      TemplateEngine.ConstantExpression templateEngine_ConstantExpression0 = templateEngine0.new ConstantExpression("""", templateEngine_TemplateExpression0);
      templateEngine_ConstantExpression0.getVariables();
}"
3088,,"  public void test92()  throws Throwable  {
      Engine engine0 = new Engine();
      TemplateEngine templateEngine0 = engine0.createJxltEngine(true, 36, 'p', 'p');
      TemplateEngine.NestedExpression templateEngine_NestedExpression0 = templateEngine0.new NestedExpression("""", (JexlNode) null, (TemplateEngine.TemplateExpression) null);
      String string0 = templateEngine_NestedExpression0.asString();
}"
3089,"    public JxltEngine.Expression createExpression(JexlInfo info, final String expression) {
        if (info == null) {
            info = jexl.createInfo();
        }
        Exception xuel = null;
        TemplateExpression stmt = null;
        try {
            stmt = cache.get(expression);
            if (stmt == null) {
                stmt = parseExpression(info, expression, null);
                cache.put(expression, stmt);
            }
        } catch (final JexlException xjexl) {
            xuel = new Exception(xjexl.getInfo(), ""failed to parse '"" + expression + ""'"", xjexl);
        }
        if (xuel != null) {
            if (!jexl.isSilent()) {
                throw xuel;
            }
            jexl.logger.warn(xuel.getMessage(), xuel.getCause());
            stmt = null;
        }
        return stmt;
    }","  public void test93()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      TemplateEngine templateEngine0 = engine0.createJxltEngine(true, 4, 'r', 'r');
      TemplateEngine.CompositeExpression templateEngine_CompositeExpression0 = (TemplateEngine.CompositeExpression)templateEngine0.createExpression("""");
}"
3090,"    public JxltEngine.Expression createExpression(JexlInfo info, final String expression) {
        if (info == null) {
            info = jexl.createInfo();
        }
        Exception xuel = null;
        TemplateExpression stmt = null;
        try {
            stmt = cache.get(expression);
            if (stmt == null) {
                stmt = parseExpression(info, expression, null);
                cache.put(expression, stmt);
            }
        } catch (final JexlException xjexl) {
            xuel = new Exception(xjexl.getInfo(), ""failed to parse '"" + expression + ""'"", xjexl);
        }
        if (xuel != null) {
            if (!jexl.isSilent()) {
                throw xuel;
            }
            jexl.logger.warn(xuel.getMessage(), xuel.getCause());
            stmt = null;
        }
        return stmt;
    }","  public void test94()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      TemplateEngine templateEngine0 = engine0.createJxltEngine(true, 4, 'r', 'r');
      TemplateEngine.CompositeExpression templateEngine_CompositeExpression0 = (TemplateEngine.CompositeExpression)templateEngine0.createExpression("""");
      TemplateEngine.CompositeExpression templateEngine_CompositeExpression1 = (TemplateEngine.CompositeExpression)templateEngine_CompositeExpression0.getSource();
}"
3091,"    TemplateExpression parseExpression(final JexlInfo info, final String expr, final Scope scope) {  // CSOFF: MethodLength
        final int size = expr.length();
        final ExpressionBuilder builder = new ExpressionBuilder(0);
        final StringBuilder strb = new StringBuilder(size);
        ParseState state = ParseState.CONST;
        int immediate1 = 0;
        int deferred1 = 0;
        int inner1 = 0;
        boolean nested = false;
        int inested = -1;
        int lineno = info.getLine();
        for (int column = 0; column < size; ++column) {
            final char c = expr.charAt(column);
            switch (state) {
                default: // in case we ever add new unified expression type
                    throw new UnsupportedOperationException(""unexpected unified expression type"");
                case CONST:
                    if (c == immediateChar) {
                        state = ParseState.IMMEDIATE0;
                    } else if (c == deferredChar) {
                        inested = column;
                        state = ParseState.DEFERRED0;
                    } else if (c == '\\') {
                        state = ParseState.ESCAPE;
                    } else {
                        // do buildup expr
                        strb.append(c);
                    }
                    break;
                case IMMEDIATE0: // $
                    if (c == '{') {
                        state = ParseState.IMMEDIATE1;
                        // if chars in buffer, create constant
                        if (strb.length() > 0) {
                            final TemplateExpression cexpr = new ConstantExpression(strb.toString(), null);
                            builder.add(cexpr);
                            strb.delete(0, Integer.MAX_VALUE);
                        }
                    } else {
                        // revert to CONST
                        strb.append(immediateChar);
                        strb.append(c);
                        state = ParseState.CONST;
                    }
                    break;
                case DEFERRED0: // #
                    if (c == '{') {
                        state = ParseState.DEFERRED1;
                        // if chars in buffer, create constant
                        if (strb.length() > 0) {
                            final TemplateExpression cexpr = new ConstantExpression(strb.toString(), null);
                            builder.add(cexpr);
                            strb.delete(0, Integer.MAX_VALUE);
                        }
                    } else {
                        // revert to CONST
                        strb.append(deferredChar);
                        strb.append(c);
                        state = ParseState.CONST;
                    }
                    break;
                case IMMEDIATE1: // ${...
                    if (c == '}') {
                        if (immediate1 > 0) {
                            immediate1 -= 1;
                            strb.append(c);
                        } else {
                            // materialize the immediate expr
                            final String src = strb.toString();
                            final TemplateExpression iexpr = new ImmediateExpression(
                                    src,
                                    jexl.parse(info.at(lineno, column), noscript, src, scope),
                                    null);
                            builder.add(iexpr);
                            strb.delete(0, Integer.MAX_VALUE);
                            state = ParseState.CONST;
                        }
                    } else {
                        if (c == '{') {
                            immediate1 += 1;
                        }
                        // do buildup expr
                        column = append(strb, expr, column, c);
                    }
                    break;
                case DEFERRED1: // #{...
                    // skip inner strings (for '}')
                    if (c == '""' || c == '\'') {
                        strb.append(c);
                        column = StringParser.readString(strb, expr, column + 1, c);
                        continue;
                    }
                    // nested immediate in deferred; need to balance count of '{' & '}'
                    if (c == '{') {
                        if (expr.charAt(column - 1) == immediateChar) {
                            inner1 += 1;
                            strb.deleteCharAt(strb.length() - 1);
                            nested = true;
                        } else {
                            deferred1 += 1;
                            strb.append(c);
                        }
                        continue;
                    }
                    // closing '}'
                    if (c == '}') {
                        // balance nested immediate
                        if (deferred1 > 0) {
                            deferred1 -= 1;
                            strb.append(c);
                        } else if (inner1 > 0) {
                            inner1 -= 1;
                        } else  {
                            // materialize the nested/deferred expr
                            final String src = strb.toString();
                            TemplateExpression dexpr;
                            if (nested) {
                                dexpr = new NestedExpression(
                                        expr.substring(inested, column + 1),
                                        jexl.parse(info.at(lineno, column), noscript, src, scope),
                                        null);
                            } else {
                                dexpr = new DeferredExpression(
                                        strb.toString(),
                                        jexl.parse(info.at(lineno, column), noscript, src, scope),
                                        null);
                            }
                            builder.add(dexpr);
                            strb.delete(0, Integer.MAX_VALUE);
                            nested = false;
                            state = ParseState.CONST;
                        }
                    } else {
                        // do buildup expr
                        column = append(strb, expr, column, c);
                    }
                    break;
                case ESCAPE:
                    if (c == deferredChar) {
                        strb.append(deferredChar);
                    } else if (c == immediateChar) {
                        strb.append(immediateChar);
                    } else {
                        strb.append('\\');
                        strb.append(c);
                    }
                    state = ParseState.CONST;
            }
            if (c == '\n') {
                lineno += 1;
            }
        }
        // we should be in that state
        if (state != ParseState.CONST) {
            // otherwise, we ended a line with a \, $ or #
            switch (state) {
                case ESCAPE:
                    strb.append('\\');
                    strb.append('\\');
                    break;
                case DEFERRED0:
                    strb.append(deferredChar);
                    break;
                case IMMEDIATE0:
                    strb.append(immediateChar);
                    break;
                default:
                    throw new Exception(info.at(lineno, 0), ""malformed expression: "" + expr, null);
            }
        }
        // if any chars were buffered, add them as a constant
        if (strb.length() > 0) {
            final TemplateExpression cexpr = new ConstantExpression(strb.toString(), null);
            builder.add(cexpr);
        }
        return builder.build(this, null);
    }","  public void test95()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      ASTJexlScript aSTJexlScript0 = new ASTJexlScript((-3554));
      TemplateEngine templateEngine0 = new TemplateEngine(engine0, true, 123, 'i', 'h');
      JexlInfo jexlInfo0 = engine0.createInfo(""780x,=n>:~IB$}"", 2246, 2246);
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      Scope scope1 = new Scope(scope0, (String[]) null);
      TemplateEngine.TemplateExpression templateEngine_TemplateExpression0 = templateEngine0.parseExpression(jexlInfo0, ""org.apache.commons.jexl3.internal.TemplateEngine$Block"", scope1);
      TemplateEngine.ImmediateExpression templateEngine_ImmediateExpression0 = templateEngine0.new ImmediateExpression(""780x,=n>:~IB$}"", aSTJexlScript0, templateEngine_TemplateExpression0);
      Object object0 = templateEngine_ImmediateExpression0.evaluate(engine0.EMPTY_CONTEXT);
}"
3092,,"  public void test96()  throws Throwable  {
      Engine engine0 = new Engine();
      TemplateEngine templateEngine0 = engine0.createJxltEngine(false, 48, 'F', 'F');
      ASTAddNode aSTAddNode0 = new ASTAddNode(95);
      TemplateEngine.NestedExpression templateEngine_NestedExpression0 = templateEngine0.new NestedExpression(""org.apache.commons.jexl3.internal.TemplateEngine$Block"", aSTAddNode0, (TemplateEngine.TemplateExpression) null);
      TemplateEngine.ImmediateExpression templateEngine_ImmediateExpression0 = templateEngine0.new ImmediateExpression(""$$org.apache.commons.jexl3.internal.TemplateEngine$Block"", aSTAddNode0, templateEngine_NestedExpression0);
      TemplateEngine.DeferredExpression templateEngine_DeferredExpression0 = templateEngine0.new DeferredExpression(""?"", aSTAddNode0, templateEngine_ImmediateExpression0);
      StringReader stringReader0 = new StringReader(""org.apache.commons.jexl3.internal.TemplateEngine$Block"");
      BufferedReader bufferedReader0 = new BufferedReader(stringReader0, 269);
      ObjectContext<BufferedReader> objectContext0 = new ObjectContext<BufferedReader>(engine0, bufferedReader0);
      TemplateEngine.TemplateExpression templateEngine_TemplateExpression0 = templateEngine_DeferredExpression0.prepare(objectContext0);
}"
3093,"    TemplateExpression parseExpression(final JexlInfo info, final String expr, final Scope scope) {  // CSOFF: MethodLength
        final int size = expr.length();
        final ExpressionBuilder builder = new ExpressionBuilder(0);
        final StringBuilder strb = new StringBuilder(size);
        ParseState state = ParseState.CONST;
        int immediate1 = 0;
        int deferred1 = 0;
        int inner1 = 0;
        boolean nested = false;
        int inested = -1;
        int lineno = info.getLine();
        for (int column = 0; column < size; ++column) {
            final char c = expr.charAt(column);
            switch (state) {
                default: // in case we ever add new unified expression type
                    throw new UnsupportedOperationException(""unexpected unified expression type"");
                case CONST:
                    if (c == immediateChar) {
                        state = ParseState.IMMEDIATE0;
                    } else if (c == deferredChar) {
                        inested = column;
                        state = ParseState.DEFERRED0;
                    } else if (c == '\\') {
                        state = ParseState.ESCAPE;
                    } else {
                        // do buildup expr
                        strb.append(c);
                    }
                    break;
                case IMMEDIATE0: // $
                    if (c == '{') {
                        state = ParseState.IMMEDIATE1;
                        // if chars in buffer, create constant
                        if (strb.length() > 0) {
                            final TemplateExpression cexpr = new ConstantExpression(strb.toString(), null);
                            builder.add(cexpr);
                            strb.delete(0, Integer.MAX_VALUE);
                        }
                    } else {
                        // revert to CONST
                        strb.append(immediateChar);
                        strb.append(c);
                        state = ParseState.CONST;
                    }
                    break;
                case DEFERRED0: // #
                    if (c == '{') {
                        state = ParseState.DEFERRED1;
                        // if chars in buffer, create constant
                        if (strb.length() > 0) {
                            final TemplateExpression cexpr = new ConstantExpression(strb.toString(), null);
                            builder.add(cexpr);
                            strb.delete(0, Integer.MAX_VALUE);
                        }
                    } else {
                        // revert to CONST
                        strb.append(deferredChar);
                        strb.append(c);
                        state = ParseState.CONST;
                    }
                    break;
                case IMMEDIATE1: // ${...
                    if (c == '}') {
                        if (immediate1 > 0) {
                            immediate1 -= 1;
                            strb.append(c);
                        } else {
                            // materialize the immediate expr
                            final String src = strb.toString();
                            final TemplateExpression iexpr = new ImmediateExpression(
                                    src,
                                    jexl.parse(info.at(lineno, column), noscript, src, scope),
                                    null);
                            builder.add(iexpr);
                            strb.delete(0, Integer.MAX_VALUE);
                            state = ParseState.CONST;
                        }
                    } else {
                        if (c == '{') {
                            immediate1 += 1;
                        }
                        // do buildup expr
                        column = append(strb, expr, column, c);
                    }
                    break;
                case DEFERRED1: // #{...
                    // skip inner strings (for '}')
                    if (c == '""' || c == '\'') {
                        strb.append(c);
                        column = StringParser.readString(strb, expr, column + 1, c);
                        continue;
                    }
                    // nested immediate in deferred; need to balance count of '{' & '}'
                    if (c == '{') {
                        if (expr.charAt(column - 1) == immediateChar) {
                            inner1 += 1;
                            strb.deleteCharAt(strb.length() - 1);
                            nested = true;
                        } else {
                            deferred1 += 1;
                            strb.append(c);
                        }
                        continue;
                    }
                    // closing '}'
                    if (c == '}') {
                        // balance nested immediate
                        if (deferred1 > 0) {
                            deferred1 -= 1;
                            strb.append(c);
                        } else if (inner1 > 0) {
                            inner1 -= 1;
                        } else  {
                            // materialize the nested/deferred expr
                            final String src = strb.toString();
                            TemplateExpression dexpr;
                            if (nested) {
                                dexpr = new NestedExpression(
                                        expr.substring(inested, column + 1),
                                        jexl.parse(info.at(lineno, column), noscript, src, scope),
                                        null);
                            } else {
                                dexpr = new DeferredExpression(
                                        strb.toString(),
                                        jexl.parse(info.at(lineno, column), noscript, src, scope),
                                        null);
                            }
                            builder.add(dexpr);
                            strb.delete(0, Integer.MAX_VALUE);
                            nested = false;
                            state = ParseState.CONST;
                        }
                    } else {
                        // do buildup expr
                        column = append(strb, expr, column, c);
                    }
                    break;
                case ESCAPE:
                    if (c == deferredChar) {
                        strb.append(deferredChar);
                    } else if (c == immediateChar) {
                        strb.append(immediateChar);
                    } else {
                        strb.append('\\');
                        strb.append(c);
                    }
                    state = ParseState.CONST;
            }
            if (c == '\n') {
                lineno += 1;
            }
        }
        // we should be in that state
        if (state != ParseState.CONST) {
            // otherwise, we ended a line with a \, $ or #
            switch (state) {
                case ESCAPE:
                    strb.append('\\');
                    strb.append('\\');
                    break;
                case DEFERRED0:
                    strb.append(deferredChar);
                    break;
                case IMMEDIATE0:
                    strb.append(immediateChar);
                    break;
                default:
                    throw new Exception(info.at(lineno, 0), ""malformed expression: "" + expr, null);
            }
        }
        // if any chars were buffered, add them as a constant
        if (strb.length() > 0) {
            final TemplateExpression cexpr = new ConstantExpression(strb.toString(), null);
            builder.add(cexpr);
        }
        return builder.build(this, null);
    }","  public void test97()  throws Throwable  {
      Engine engine0 = new Engine();
      TemplateEngine templateEngine0 = engine0.createJxltEngine(false, (-1337), 'l', ']');
      JexlInfo jexlInfo0 = engine0.createInfo(""\"")\"""", (int) ']', (-1337));
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[1];
      Scope scope1 = new Scope(scope0, stringArray0);
      TemplateEngine.TemplateExpression templateEngine_TemplateExpression0 = templateEngine0.parseExpression(jexlInfo0, ""\"")\"""", scope1);
      boolean boolean0 = templateEngine_TemplateExpression0.isDeferred();
}"
3094,"    TemplateExpression parseExpression(final JexlInfo info, final String expr, final Scope scope) {  // CSOFF: MethodLength
        final int size = expr.length();
        final ExpressionBuilder builder = new ExpressionBuilder(0);
        final StringBuilder strb = new StringBuilder(size);
        ParseState state = ParseState.CONST;
        int immediate1 = 0;
        int deferred1 = 0;
        int inner1 = 0;
        boolean nested = false;
        int inested = -1;
        int lineno = info.getLine();
        for (int column = 0; column < size; ++column) {
            final char c = expr.charAt(column);
            switch (state) {
                default: // in case we ever add new unified expression type
                    throw new UnsupportedOperationException(""unexpected unified expression type"");
                case CONST:
                    if (c == immediateChar) {
                        state = ParseState.IMMEDIATE0;
                    } else if (c == deferredChar) {
                        inested = column;
                        state = ParseState.DEFERRED0;
                    } else if (c == '\\') {
                        state = ParseState.ESCAPE;
                    } else {
                        // do buildup expr
                        strb.append(c);
                    }
                    break;
                case IMMEDIATE0: // $
                    if (c == '{') {
                        state = ParseState.IMMEDIATE1;
                        // if chars in buffer, create constant
                        if (strb.length() > 0) {
                            final TemplateExpression cexpr = new ConstantExpression(strb.toString(), null);
                            builder.add(cexpr);
                            strb.delete(0, Integer.MAX_VALUE);
                        }
                    } else {
                        // revert to CONST
                        strb.append(immediateChar);
                        strb.append(c);
                        state = ParseState.CONST;
                    }
                    break;
                case DEFERRED0: // #
                    if (c == '{') {
                        state = ParseState.DEFERRED1;
                        // if chars in buffer, create constant
                        if (strb.length() > 0) {
                            final TemplateExpression cexpr = new ConstantExpression(strb.toString(), null);
                            builder.add(cexpr);
                            strb.delete(0, Integer.MAX_VALUE);
                        }
                    } else {
                        // revert to CONST
                        strb.append(deferredChar);
                        strb.append(c);
                        state = ParseState.CONST;
                    }
                    break;
                case IMMEDIATE1: // ${...
                    if (c == '}') {
                        if (immediate1 > 0) {
                            immediate1 -= 1;
                            strb.append(c);
                        } else {
                            // materialize the immediate expr
                            final String src = strb.toString();
                            final TemplateExpression iexpr = new ImmediateExpression(
                                    src,
                                    jexl.parse(info.at(lineno, column), noscript, src, scope),
                                    null);
                            builder.add(iexpr);
                            strb.delete(0, Integer.MAX_VALUE);
                            state = ParseState.CONST;
                        }
                    } else {
                        if (c == '{') {
                            immediate1 += 1;
                        }
                        // do buildup expr
                        column = append(strb, expr, column, c);
                    }
                    break;
                case DEFERRED1: // #{...
                    // skip inner strings (for '}')
                    if (c == '""' || c == '\'') {
                        strb.append(c);
                        column = StringParser.readString(strb, expr, column + 1, c);
                        continue;
                    }
                    // nested immediate in deferred; need to balance count of '{' & '}'
                    if (c == '{') {
                        if (expr.charAt(column - 1) == immediateChar) {
                            inner1 += 1;
                            strb.deleteCharAt(strb.length() - 1);
                            nested = true;
                        } else {
                            deferred1 += 1;
                            strb.append(c);
                        }
                        continue;
                    }
                    // closing '}'
                    if (c == '}') {
                        // balance nested immediate
                        if (deferred1 > 0) {
                            deferred1 -= 1;
                            strb.append(c);
                        } else if (inner1 > 0) {
                            inner1 -= 1;
                        } else  {
                            // materialize the nested/deferred expr
                            final String src = strb.toString();
                            TemplateExpression dexpr;
                            if (nested) {
                                dexpr = new NestedExpression(
                                        expr.substring(inested, column + 1),
                                        jexl.parse(info.at(lineno, column), noscript, src, scope),
                                        null);
                            } else {
                                dexpr = new DeferredExpression(
                                        strb.toString(),
                                        jexl.parse(info.at(lineno, column), noscript, src, scope),
                                        null);
                            }
                            builder.add(dexpr);
                            strb.delete(0, Integer.MAX_VALUE);
                            nested = false;
                            state = ParseState.CONST;
                        }
                    } else {
                        // do buildup expr
                        column = append(strb, expr, column, c);
                    }
                    break;
                case ESCAPE:
                    if (c == deferredChar) {
                        strb.append(deferredChar);
                    } else if (c == immediateChar) {
                        strb.append(immediateChar);
                    } else {
                        strb.append('\\');
                        strb.append(c);
                    }
                    state = ParseState.CONST;
            }
            if (c == '\n') {
                lineno += 1;
            }
        }
        // we should be in that state
        if (state != ParseState.CONST) {
            // otherwise, we ended a line with a \, $ or #
            switch (state) {
                case ESCAPE:
                    strb.append('\\');
                    strb.append('\\');
                    break;
                case DEFERRED0:
                    strb.append(deferredChar);
                    break;
                case IMMEDIATE0:
                    strb.append(immediateChar);
                    break;
                default:
                    throw new Exception(info.at(lineno, 0), ""malformed expression: "" + expr, null);
            }
        }
        // if any chars were buffered, add them as a constant
        if (strb.length() > 0) {
            final TemplateExpression cexpr = new ConstantExpression(strb.toString(), null);
            builder.add(cexpr);
        }
        return builder.build(this, null);
    }","  public void test98()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      TemplateEngine templateEngine0 = engine0.jxlt();
      JexlInfo jexlInfo0 = new JexlInfo(""org.apache.commons.jexl3.internal.TemplateEngine$DeferredExpression"", 0, 0);
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[3];
      Scope scope1 = new Scope(scope0, stringArray0);
      TemplateEngine.ConstantExpression templateEngine_ConstantExpression0 = (TemplateEngine.ConstantExpression)templateEngine0.parseExpression(jexlInfo0, ""org.apache.commons.jexl3.internal.TemplateEngine$DeferredExpression"", scope1);
      Frame frame0 = new Frame(scope1, stringArray0, 0);
      String string0 = (String)templateEngine_ConstantExpression0.evaluate(frame0, engine0.EMPTY_CONTEXT);
}"
3095,"    TemplateExpression parseExpression(final JexlInfo info, final String expr, final Scope scope) {  // CSOFF: MethodLength
        final int size = expr.length();
        final ExpressionBuilder builder = new ExpressionBuilder(0);
        final StringBuilder strb = new StringBuilder(size);
        ParseState state = ParseState.CONST;
        int immediate1 = 0;
        int deferred1 = 0;
        int inner1 = 0;
        boolean nested = false;
        int inested = -1;
        int lineno = info.getLine();
        for (int column = 0; column < size; ++column) {
            final char c = expr.charAt(column);
            switch (state) {
                default: // in case we ever add new unified expression type
                    throw new UnsupportedOperationException(""unexpected unified expression type"");
                case CONST:
                    if (c == immediateChar) {
                        state = ParseState.IMMEDIATE0;
                    } else if (c == deferredChar) {
                        inested = column;
                        state = ParseState.DEFERRED0;
                    } else if (c == '\\') {
                        state = ParseState.ESCAPE;
                    } else {
                        // do buildup expr
                        strb.append(c);
                    }
                    break;
                case IMMEDIATE0: // $
                    if (c == '{') {
                        state = ParseState.IMMEDIATE1;
                        // if chars in buffer, create constant
                        if (strb.length() > 0) {
                            final TemplateExpression cexpr = new ConstantExpression(strb.toString(), null);
                            builder.add(cexpr);
                            strb.delete(0, Integer.MAX_VALUE);
                        }
                    } else {
                        // revert to CONST
                        strb.append(immediateChar);
                        strb.append(c);
                        state = ParseState.CONST;
                    }
                    break;
                case DEFERRED0: // #
                    if (c == '{') {
                        state = ParseState.DEFERRED1;
                        // if chars in buffer, create constant
                        if (strb.length() > 0) {
                            final TemplateExpression cexpr = new ConstantExpression(strb.toString(), null);
                            builder.add(cexpr);
                            strb.delete(0, Integer.MAX_VALUE);
                        }
                    } else {
                        // revert to CONST
                        strb.append(deferredChar);
                        strb.append(c);
                        state = ParseState.CONST;
                    }
                    break;
                case IMMEDIATE1: // ${...
                    if (c == '}') {
                        if (immediate1 > 0) {
                            immediate1 -= 1;
                            strb.append(c);
                        } else {
                            // materialize the immediate expr
                            final String src = strb.toString();
                            final TemplateExpression iexpr = new ImmediateExpression(
                                    src,
                                    jexl.parse(info.at(lineno, column), noscript, src, scope),
                                    null);
                            builder.add(iexpr);
                            strb.delete(0, Integer.MAX_VALUE);
                            state = ParseState.CONST;
                        }
                    } else {
                        if (c == '{') {
                            immediate1 += 1;
                        }
                        // do buildup expr
                        column = append(strb, expr, column, c);
                    }
                    break;
                case DEFERRED1: // #{...
                    // skip inner strings (for '}')
                    if (c == '""' || c == '\'') {
                        strb.append(c);
                        column = StringParser.readString(strb, expr, column + 1, c);
                        continue;
                    }
                    // nested immediate in deferred; need to balance count of '{' & '}'
                    if (c == '{') {
                        if (expr.charAt(column - 1) == immediateChar) {
                            inner1 += 1;
                            strb.deleteCharAt(strb.length() - 1);
                            nested = true;
                        } else {
                            deferred1 += 1;
                            strb.append(c);
                        }
                        continue;
                    }
                    // closing '}'
                    if (c == '}') {
                        // balance nested immediate
                        if (deferred1 > 0) {
                            deferred1 -= 1;
                            strb.append(c);
                        } else if (inner1 > 0) {
                            inner1 -= 1;
                        } else  {
                            // materialize the nested/deferred expr
                            final String src = strb.toString();
                            TemplateExpression dexpr;
                            if (nested) {
                                dexpr = new NestedExpression(
                                        expr.substring(inested, column + 1),
                                        jexl.parse(info.at(lineno, column), noscript, src, scope),
                                        null);
                            } else {
                                dexpr = new DeferredExpression(
                                        strb.toString(),
                                        jexl.parse(info.at(lineno, column), noscript, src, scope),
                                        null);
                            }
                            builder.add(dexpr);
                            strb.delete(0, Integer.MAX_VALUE);
                            nested = false;
                            state = ParseState.CONST;
                        }
                    } else {
                        // do buildup expr
                        column = append(strb, expr, column, c);
                    }
                    break;
                case ESCAPE:
                    if (c == deferredChar) {
                        strb.append(deferredChar);
                    } else if (c == immediateChar) {
                        strb.append(immediateChar);
                    } else {
                        strb.append('\\');
                        strb.append(c);
                    }
                    state = ParseState.CONST;
            }
            if (c == '\n') {
                lineno += 1;
            }
        }
        // we should be in that state
        if (state != ParseState.CONST) {
            // otherwise, we ended a line with a \, $ or #
            switch (state) {
                case ESCAPE:
                    strb.append('\\');
                    strb.append('\\');
                    break;
                case DEFERRED0:
                    strb.append(deferredChar);
                    break;
                case IMMEDIATE0:
                    strb.append(immediateChar);
                    break;
                default:
                    throw new Exception(info.at(lineno, 0), ""malformed expression: "" + expr, null);
            }
        }
        // if any chars were buffered, add them as a constant
        if (strb.length() > 0) {
            final TemplateExpression cexpr = new ConstantExpression(strb.toString(), null);
            builder.add(cexpr);
        }
        return builder.build(this, null);
    }","  public void test99()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      TemplateEngine templateEngine0 = engine0.jxlt();
      JexlInfo jexlInfo0 = new JexlInfo(""org.apache.commons.jexl3.internal.TemplateEngine$DeferredExpression"", 0, 0);
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[3];
      Scope scope1 = new Scope(scope0, stringArray0);
      TemplateEngine.ConstantExpression templateEngine_ConstantExpression0 = (TemplateEngine.ConstantExpression)templateEngine0.parseExpression(jexlInfo0, ""org.apache.commons.jexl3.internal.TemplateEngine$DeferredExpression"", scope1);
      Engine.VarCollector engine_VarCollector0 = engine0.varCollector();
      templateEngine_ConstantExpression0.getVariables(engine_VarCollector0);
}"
3096,"    TemplateExpression parseExpression(final JexlInfo info, final String expr, final Scope scope) {  // CSOFF: MethodLength
        final int size = expr.length();
        final ExpressionBuilder builder = new ExpressionBuilder(0);
        final StringBuilder strb = new StringBuilder(size);
        ParseState state = ParseState.CONST;
        int immediate1 = 0;
        int deferred1 = 0;
        int inner1 = 0;
        boolean nested = false;
        int inested = -1;
        int lineno = info.getLine();
        for (int column = 0; column < size; ++column) {
            final char c = expr.charAt(column);
            switch (state) {
                default: // in case we ever add new unified expression type
                    throw new UnsupportedOperationException(""unexpected unified expression type"");
                case CONST:
                    if (c == immediateChar) {
                        state = ParseState.IMMEDIATE0;
                    } else if (c == deferredChar) {
                        inested = column;
                        state = ParseState.DEFERRED0;
                    } else if (c == '\\') {
                        state = ParseState.ESCAPE;
                    } else {
                        // do buildup expr
                        strb.append(c);
                    }
                    break;
                case IMMEDIATE0: // $
                    if (c == '{') {
                        state = ParseState.IMMEDIATE1;
                        // if chars in buffer, create constant
                        if (strb.length() > 0) {
                            final TemplateExpression cexpr = new ConstantExpression(strb.toString(), null);
                            builder.add(cexpr);
                            strb.delete(0, Integer.MAX_VALUE);
                        }
                    } else {
                        // revert to CONST
                        strb.append(immediateChar);
                        strb.append(c);
                        state = ParseState.CONST;
                    }
                    break;
                case DEFERRED0: // #
                    if (c == '{') {
                        state = ParseState.DEFERRED1;
                        // if chars in buffer, create constant
                        if (strb.length() > 0) {
                            final TemplateExpression cexpr = new ConstantExpression(strb.toString(), null);
                            builder.add(cexpr);
                            strb.delete(0, Integer.MAX_VALUE);
                        }
                    } else {
                        // revert to CONST
                        strb.append(deferredChar);
                        strb.append(c);
                        state = ParseState.CONST;
                    }
                    break;
                case IMMEDIATE1: // ${...
                    if (c == '}') {
                        if (immediate1 > 0) {
                            immediate1 -= 1;
                            strb.append(c);
                        } else {
                            // materialize the immediate expr
                            final String src = strb.toString();
                            final TemplateExpression iexpr = new ImmediateExpression(
                                    src,
                                    jexl.parse(info.at(lineno, column), noscript, src, scope),
                                    null);
                            builder.add(iexpr);
                            strb.delete(0, Integer.MAX_VALUE);
                            state = ParseState.CONST;
                        }
                    } else {
                        if (c == '{') {
                            immediate1 += 1;
                        }
                        // do buildup expr
                        column = append(strb, expr, column, c);
                    }
                    break;
                case DEFERRED1: // #{...
                    // skip inner strings (for '}')
                    if (c == '""' || c == '\'') {
                        strb.append(c);
                        column = StringParser.readString(strb, expr, column + 1, c);
                        continue;
                    }
                    // nested immediate in deferred; need to balance count of '{' & '}'
                    if (c == '{') {
                        if (expr.charAt(column - 1) == immediateChar) {
                            inner1 += 1;
                            strb.deleteCharAt(strb.length() - 1);
                            nested = true;
                        } else {
                            deferred1 += 1;
                            strb.append(c);
                        }
                        continue;
                    }
                    // closing '}'
                    if (c == '}') {
                        // balance nested immediate
                        if (deferred1 > 0) {
                            deferred1 -= 1;
                            strb.append(c);
                        } else if (inner1 > 0) {
                            inner1 -= 1;
                        } else  {
                            // materialize the nested/deferred expr
                            final String src = strb.toString();
                            TemplateExpression dexpr;
                            if (nested) {
                                dexpr = new NestedExpression(
                                        expr.substring(inested, column + 1),
                                        jexl.parse(info.at(lineno, column), noscript, src, scope),
                                        null);
                            } else {
                                dexpr = new DeferredExpression(
                                        strb.toString(),
                                        jexl.parse(info.at(lineno, column), noscript, src, scope),
                                        null);
                            }
                            builder.add(dexpr);
                            strb.delete(0, Integer.MAX_VALUE);
                            nested = false;
                            state = ParseState.CONST;
                        }
                    } else {
                        // do buildup expr
                        column = append(strb, expr, column, c);
                    }
                    break;
                case ESCAPE:
                    if (c == deferredChar) {
                        strb.append(deferredChar);
                    } else if (c == immediateChar) {
                        strb.append(immediateChar);
                    } else {
                        strb.append('\\');
                        strb.append(c);
                    }
                    state = ParseState.CONST;
            }
            if (c == '\n') {
                lineno += 1;
            }
        }
        // we should be in that state
        if (state != ParseState.CONST) {
            // otherwise, we ended a line with a \, $ or #
            switch (state) {
                case ESCAPE:
                    strb.append('\\');
                    strb.append('\\');
                    break;
                case DEFERRED0:
                    strb.append(deferredChar);
                    break;
                case IMMEDIATE0:
                    strb.append(immediateChar);
                    break;
                default:
                    throw new Exception(info.at(lineno, 0), ""malformed expression: "" + expr, null);
            }
        }
        // if any chars were buffered, add them as a constant
        if (strb.length() > 0) {
            final TemplateExpression cexpr = new ConstantExpression(strb.toString(), null);
            builder.add(cexpr);
        }
        return builder.build(this, null);
    }","  public void test100()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      TemplateEngine templateEngine0 = engine0.jxlt();
      JexlInfo jexlInfo0 = new JexlInfo(""org.apache.commons.jexl3.internal.TemplateEngine$DeferredExpression"", 0, 0);
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[3];
      Scope scope1 = new Scope(scope0, stringArray0);
      TemplateEngine.ConstantExpression templateEngine_ConstantExpression0 = (TemplateEngine.ConstantExpression)templateEngine0.parseExpression(jexlInfo0, ""org.apache.commons.jexl3.internal.TemplateEngine$DeferredExpression"", scope1);
      JexlInfo jexlInfo1 = templateEngine_ConstantExpression0.getInfo();
}"
3097,"    public boolean debug(final JxltEngine.Expression je) {
        if (je instanceof TemplateExpression) {
            final TemplateEngine.TemplateExpression te = (TemplateEngine.TemplateExpression) je;
            return visit(te, this) != null;
        }
        return false;
    }","  public void test0()  throws Throwable  {
      TemplateDebugger templateDebugger0 = new TemplateDebugger();
      Engine engine0 = new Engine();
      TemplateEngine templateEngine0 = engine0.jxlt();
      StringReader stringReader0 = new StringReader("""");
      JxltEngine.Template jxltEngine_Template0 = templateEngine0.createTemplate("""", (Reader) stringReader0, (String[]) null);
      templateDebugger0.debug(jxltEngine_Template0);
      ASTBlock aSTBlock0 = new ASTBlock(0);
      ASTFalseNode aSTFalseNode0 = new ASTFalseNode(0);
      aSTBlock0.jjtAddChild(aSTFalseNode0, 0);
      aSTBlock0.jjtAddChild(aSTBlock0, 10);
      TemplateEngine.ImmediateExpression templateEngine_ImmediateExpression0 = templateEngine0.new ImmediateExpression("""", aSTBlock0, (TemplateEngine.TemplateExpression) null);
      // Undeclared exception!
      try { 
        templateDebugger0.debug((JxltEngine.Expression) templateEngine_ImmediateExpression0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.internal.Debugger"", e);
      }
  }"
3098,"    protected Object visit(final ASTBlock node, final Object data) {
        // if not really a template, must use super impl
        if (exprs == null) {
            return super.visit(node, data);
        }
        // open the block
        builder.append('{');
        if (indent > 0) {
            indentLevel += 1;
            builder.append('\n');
        } else {
            builder.append(' ');
        }
        final int num = node.jjtGetNumChildren();
        for (int i = 0; i < num; ++i) {
            final JexlNode child = node.jjtGetChild(i);
            acceptStatement(child, data);
        }
        // before we close this block node, $$ might be needed
        newJexlLine();
        if (indent > 0) {
            indentLevel -= 1;
            for (int i = 0; i < indentLevel; ++i) {
                for(int s = 0; s < indent; ++s) {
                    builder.append(' ');
                }
            }
        }
        builder.append('}');
        // closed the block
        return data;
    }","  public void test1()  throws Throwable  {
      TemplateDebugger templateDebugger0 = new TemplateDebugger();
      templateDebugger0.indent = (-540);
      ASTBlock aSTBlock0 = new ASTBlock((-540));
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      TemplateEngine templateEngine0 = engine0.jxlt();
      JxltEngine.Template jxltEngine_Template0 = templateEngine0.createTemplate(""=$"");
      templateDebugger0.debug(jxltEngine_Template0);
      templateDebugger0.visit(aSTBlock0, ""(pTFQ=pYb$P"");
}"
3099,"    public boolean debug(final JxltEngine.Expression je) {
        if (je instanceof TemplateExpression) {
            final TemplateEngine.TemplateExpression te = (TemplateEngine.TemplateExpression) je;
            return visit(te, this) != null;
        }
        return false;
    }","  public void test2()  throws Throwable  {
      TemplateDebugger templateDebugger0 = new TemplateDebugger();
      Parser parser0 = new Parser(""Block"");
      ASTSetAddNode aSTSetAddNode0 = new ASTSetAddNode(parser0, (-807));
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      TemplateEngine templateEngine0 = engine0.jxlt();
      TemplateEngine.NestedExpression templateEngine_NestedExpression0 = templateEngine0.new NestedExpression(""Block"", aSTSetAddNode0, (TemplateEngine.TemplateExpression) null);
      boolean boolean0 = templateDebugger0.debug((JxltEngine.Expression) templateEngine_NestedExpression0);
}"
3100,"    protected Object visit(final ASTBlock node, final Object data) {
        // if not really a template, must use super impl
        if (exprs == null) {
            return super.visit(node, data);
        }
        // open the block
        builder.append('{');
        if (indent > 0) {
            indentLevel += 1;
            builder.append('\n');
        } else {
            builder.append(' ');
        }
        final int num = node.jjtGetNumChildren();
        for (int i = 0; i < num; ++i) {
            final JexlNode child = node.jjtGetChild(i);
            acceptStatement(child, data);
        }
        // before we close this block node, $$ might be needed
        newJexlLine();
        if (indent > 0) {
            indentLevel -= 1;
            for (int i = 0; i < indentLevel; ++i) {
                for(int s = 0; s < indent; ++s) {
                    builder.append(' ');
                }
            }
        }
        builder.append('}');
        // closed the block
        return data;
    }","  public void test3()  throws Throwable  {
      TemplateDebugger templateDebugger0 = new TemplateDebugger();
      ASTBlock aSTBlock0 = new ASTBlock((-507));
      templateDebugger0.visit(aSTBlock0, (Object) null);
}"
3101,"    protected Object acceptStatement(final JexlNode child, final Object data) {
        // if not really a template, must use super impl
        if (exprs == null) {
            return super.acceptStatement(child, data);
        }
        final TemplateExpression te = getPrintStatement(child);
        if (te != null) {
            // if statement is a jexl:print(...), may need to prepend '\n'
            newJxltLine();
            return visit(te, data);
        }
        // if statement is not a jexl:print(...), need to prepend '$$'
        newJexlLine();
        return super.acceptStatement(child, data);
    }","  public void test4()  throws Throwable  {
      TemplateDebugger templateDebugger0 = new TemplateDebugger();
      ASTBlock aSTBlock0 = new ASTBlock(1462);
      templateDebugger0.acceptStatement(aSTBlock0, (Object) null);
}"
3102,"    protected Object visit(final ASTBlock node, final Object data) {
        // if not really a template, must use super impl
        if (exprs == null) {
            return super.visit(node, data);
        }
        // open the block
        builder.append('{');
        if (indent > 0) {
            indentLevel += 1;
            builder.append('\n');
        } else {
            builder.append(' ');
        }
        final int num = node.jjtGetNumChildren();
        for (int i = 0; i < num; ++i) {
            final JexlNode child = node.jjtGetChild(i);
            acceptStatement(child, data);
        }
        // before we close this block node, $$ might be needed
        newJexlLine();
        if (indent > 0) {
            indentLevel -= 1;
            for (int i = 0; i < indentLevel; ++i) {
                for(int s = 0; s < indent; ++s) {
                    builder.append(' ');
                }
            }
        }
        builder.append('}');
        // closed the block
        return data;
    }","  public void test5()  throws Throwable  {
      TemplateDebugger templateDebugger0 = new TemplateDebugger();
      templateDebugger0.indentLevel = 2715;
      Parser parser0 = new Parser("""");
      ASTBlock aSTBlock0 = new ASTBlock(parser0, 2715);
      aSTBlock0.jjtAccept(templateDebugger0, """");
      // Undeclared exception!
      templateDebugger0.visit(aSTBlock0, aSTBlock0);
  }"
3103,"    protected Object visit(final ASTBlock node, final Object data) {
        // if not really a template, must use super impl
        if (exprs == null) {
            return super.visit(node, data);
        }
        // open the block
        builder.append('{');
        if (indent > 0) {
            indentLevel += 1;
            builder.append('\n');
        } else {
            builder.append(' ');
        }
        final int num = node.jjtGetNumChildren();
        for (int i = 0; i < num; ++i) {
            final JexlNode child = node.jjtGetChild(i);
            acceptStatement(child, data);
        }
        // before we close this block node, $$ might be needed
        newJexlLine();
        if (indent > 0) {
            indentLevel -= 1;
            for (int i = 0; i < indentLevel; ++i) {
                for(int s = 0; s < indent; ++s) {
                    builder.append(' ');
                }
            }
        }
        builder.append('}');
        // closed the block
        return data;
    }","  public void test6()  throws Throwable  {
      TemplateDebugger templateDebugger0 = new TemplateDebugger();
      // Undeclared exception!
      try { 
        templateDebugger0.visit((ASTBlock) null, (Object) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.internal.Debugger"", e);
      }
  }"
3104,"    public boolean debug(final JxltEngine.Expression je) {
        if (je instanceof TemplateExpression) {
            final TemplateEngine.TemplateExpression te = (TemplateEngine.TemplateExpression) je;
            return visit(te, this) != null;
        }
        return false;
    }","  public void test7()  throws Throwable  {
      TemplateDebugger templateDebugger0 = new TemplateDebugger();
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      TemplateEngine templateEngine0 = new TemplateEngine(engine0, false, (-3194), '$', 'h');
      TemplateEngine.Block[] templateEngine_BlockArray0 = new TemplateEngine.Block[6];
      TemplateEngine.TemplateExpression[] templateEngine_TemplateExpressionArray0 = new TemplateEngine.TemplateExpression[7];
      TemplateScript templateScript0 = new TemplateScript(templateEngine0, """", templateEngine_BlockArray0, (ASTJexlScript) null, templateEngine_TemplateExpressionArray0);
      // Undeclared exception!
      try { 
        templateDebugger0.debug((JxltEngine.Template) templateScript0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.internal.TemplateDebugger"", e);
      }
  }"
3105,"    protected Object acceptStatement(final JexlNode child, final Object data) {
        // if not really a template, must use super impl
        if (exprs == null) {
            return super.acceptStatement(child, data);
        }
        final TemplateExpression te = getPrintStatement(child);
        if (te != null) {
            // if statement is a jexl:print(...), may need to prepend '\n'
            newJxltLine();
            return visit(te, data);
        }
        // if statement is not a jexl:print(...), need to prepend '$$'
        newJexlLine();
        return super.acceptStatement(child, data);
    }","  public void test8()  throws Throwable  {
      TemplateDebugger templateDebugger0 = new TemplateDebugger();
      JexlLexicalNode jexlLexicalNode0 = new JexlLexicalNode((Parser) null, (-1532));
      // Undeclared exception!
      try { 
        templateDebugger0.acceptStatement(jexlLexicalNode0, (Object) null);
        fail(""Expecting exception: UnsupportedOperationException"");
      } catch(UnsupportedOperationException e) {
         //
         // JexlLexicalNode : not supported yet.
         //
         verifyException(""org.apache.commons.jexl3.parser.ParserVisitor"", e);
      }
  }"
3106,"    protected Object acceptStatement(final JexlNode child, final Object data) {
        // if not really a template, must use super impl
        if (exprs == null) {
            return super.acceptStatement(child, data);
        }
        final TemplateExpression te = getPrintStatement(child);
        if (te != null) {
            // if statement is a jexl:print(...), may need to prepend '\n'
            newJxltLine();
            return visit(te, data);
        }
        // if statement is not a jexl:print(...), need to prepend '$$'
        newJexlLine();
        return super.acceptStatement(child, data);
    }","  public void test9()  throws Throwable  {
      TemplateDebugger templateDebugger0 = new TemplateDebugger();
      // Undeclared exception!
      try { 
        templateDebugger0.acceptStatement((JexlNode) null, (Object) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.internal.Debugger"", e);
      }
  }"
3107,"    public boolean debug(final JxltEngine.Expression je) {
        if (je instanceof TemplateExpression) {
            final TemplateEngine.TemplateExpression te = (TemplateEngine.TemplateExpression) je;
            return visit(te, this) != null;
        }
        return false;
    }","  public void test10()  throws Throwable  {
      TemplateDebugger templateDebugger0 = new TemplateDebugger();
      Engine engine0 = new Engine();
      TemplateEngine templateEngine0 = engine0.createJxltEngine(true, (-6472), 'z', 'z');
      StringBuilder stringBuilder0 = new StringBuilder(""_;JdztAe"");
      Parser parser0 = new Parser(""_;JdztAe"");
      ASTMapEntry aSTMapEntry0 = new ASTMapEntry(parser0, (-3814));
      TemplateEngine.DeferredExpression templateEngine_DeferredExpression0 = templateEngine0.new DeferredExpression(stringBuilder0, aSTMapEntry0, (TemplateEngine.TemplateExpression) null);
      // Undeclared exception!
      try { 
        templateDebugger0.debug((JxltEngine.Expression) templateEngine_DeferredExpression0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
3108,"    protected Object acceptStatement(final JexlNode child, final Object data) {
        // if not really a template, must use super impl
        if (exprs == null) {
            return super.acceptStatement(child, data);
        }
        final TemplateExpression te = getPrintStatement(child);
        if (te != null) {
            // if statement is a jexl:print(...), may need to prepend '\n'
            newJxltLine();
            return visit(te, data);
        }
        // if statement is not a jexl:print(...), need to prepend '$$'
        newJexlLine();
        return super.acceptStatement(child, data);
    }","  public void test11()  throws Throwable  {
      TemplateDebugger templateDebugger0 = new TemplateDebugger();
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      TemplateEngine templateEngine0 = engine0.createJxltEngine(false, 2185, '/', '/');
      JxltEngine.Template jxltEngine_Template0 = templateEngine0.createTemplate(""K]%p(L#+"");
      templateDebugger0.debug(jxltEngine_Template0);
      ASTBlock aSTBlock0 = new ASTBlock(1462);
      templateDebugger0.visit(aSTBlock0, templateEngine0);
      TemplateEngine.ConstantExpression templateEngine_ConstantExpression0 = templateEngine0.new ConstantExpression(jexlBuilder0, (TemplateEngine.TemplateExpression) null);
      templateDebugger0.acceptStatement(aSTBlock0, templateEngine_ConstantExpression0);
}"
3109,"    protected Object acceptStatement(final JexlNode child, final Object data) {
        // if not really a template, must use super impl
        if (exprs == null) {
            return super.acceptStatement(child, data);
        }
        final TemplateExpression te = getPrintStatement(child);
        if (te != null) {
            // if statement is a jexl:print(...), may need to prepend '\n'
            newJxltLine();
            return visit(te, data);
        }
        // if statement is not a jexl:print(...), need to prepend '$$'
        newJexlLine();
        return super.acceptStatement(child, data);
    }","  public void test12()  throws Throwable  {
      TemplateDebugger templateDebugger0 = new TemplateDebugger();
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      TemplateEngine templateEngine0 = engine0.createJxltEngine(false, 2185, '/', '/');
      JxltEngine.Template jxltEngine_Template0 = templateEngine0.createTemplate(""K]%p(L#+"");
      templateDebugger0.debug(jxltEngine_Template0);
      ASTBlock aSTBlock0 = new ASTBlock(1462);
      TemplateEngine.ConstantExpression templateEngine_ConstantExpression0 = templateEngine0.new ConstantExpression(jexlBuilder0, (TemplateEngine.TemplateExpression) null);
      ASTNumberLiteral aSTNumberLiteral0 = mock(ASTNumberLiteral.class, new ViolatedAssumptionAnswer());
      doReturn(""vu=k9;:C_"").when(aSTNumberLiteral0).toString();
      templateDebugger0.visit(aSTNumberLiteral0, aSTBlock0);
      templateDebugger0.acceptStatement(aSTBlock0, templateEngine_ConstantExpression0);
}"
3110,"    protected Object visit(final ASTBlock node, final Object data) {
        // if not really a template, must use super impl
        if (exprs == null) {
            return super.visit(node, data);
        }
        // open the block
        builder.append('{');
        if (indent > 0) {
            indentLevel += 1;
            builder.append('\n');
        } else {
            builder.append(' ');
        }
        final int num = node.jjtGetNumChildren();
        for (int i = 0; i < num; ++i) {
            final JexlNode child = node.jjtGetChild(i);
            acceptStatement(child, data);
        }
        // before we close this block node, $$ might be needed
        newJexlLine();
        if (indent > 0) {
            indentLevel -= 1;
            for (int i = 0; i < indentLevel; ++i) {
                for(int s = 0; s < indent; ++s) {
                    builder.append(' ');
                }
            }
        }
        builder.append('}');
        // closed the block
        return data;
    }","  public void test13()  throws Throwable  {
      TemplateDebugger templateDebugger0 = new TemplateDebugger();
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine();
      TemplateEngine templateEngine0 = engine0.jxlt();
      JxltEngine.Template jxltEngine_Template0 = templateEngine0.createTemplate(""K]%p(L#+"");
      templateDebugger0.debug(jxltEngine_Template0);
      ASTBlock aSTBlock0 = new ASTBlock('/');
      templateDebugger0.indentLevel = 75;
      TemplateEngine.ConstantExpression templateEngine_ConstantExpression0 = templateEngine0.new ConstantExpression(jexlBuilder0, (TemplateEngine.TemplateExpression) null);
      templateDebugger0.visit(aSTBlock0, templateEngine_ConstantExpression0);
}"
3111,"    public boolean debug(final JxltEngine.Expression je) {
        if (je instanceof TemplateExpression) {
            final TemplateEngine.TemplateExpression te = (TemplateEngine.TemplateExpression) je;
            return visit(te, this) != null;
        }
        return false;
    }","  public void test14()  throws Throwable  {
      TemplateDebugger templateDebugger0 = new TemplateDebugger();
      Engine engine0 = new Engine();
      TemplateEngine templateEngine0 = engine0.jxlt();
      StringReader stringReader0 = new StringReader("""");
      JxltEngine.Template jxltEngine_Template0 = templateEngine0.createTemplate("""", (Reader) stringReader0, (String[]) null);
      templateDebugger0.debug(jxltEngine_Template0);
      ASTBlock aSTBlock0 = new ASTBlock(0);
      ASTFalseNode aSTFalseNode0 = new ASTFalseNode(0);
      aSTBlock0.jjtAddChild(aSTFalseNode0, 0);
      TemplateEngine.ImmediateExpression templateEngine_ImmediateExpression0 = templateEngine0.new ImmediateExpression("""", aSTBlock0, (TemplateEngine.TemplateExpression) null);
      templateDebugger0.debug((JxltEngine.Expression) templateEngine_ImmediateExpression0);
}"
3112,"    protected Object visit(final ASTBlock node, final Object data) {
        // if not really a template, must use super impl
        if (exprs == null) {
            return super.visit(node, data);
        }
        // open the block
        builder.append('{');
        if (indent > 0) {
            indentLevel += 1;
            builder.append('\n');
        } else {
            builder.append(' ');
        }
        final int num = node.jjtGetNumChildren();
        for (int i = 0; i < num; ++i) {
            final JexlNode child = node.jjtGetChild(i);
            acceptStatement(child, data);
        }
        // before we close this block node, $$ might be needed
        newJexlLine();
        if (indent > 0) {
            indentLevel -= 1;
            for (int i = 0; i < indentLevel; ++i) {
                for(int s = 0; s < indent; ++s) {
                    builder.append(' ');
                }
            }
        }
        builder.append('}');
        // closed the block
        return data;
    }","  public void test15()  throws Throwable  {
      TemplateDebugger templateDebugger0 = new TemplateDebugger();
      Engine engine0 = new Engine();
      templateDebugger0.indentation((-1419));
      ASTBlock aSTBlock0 = new ASTBlock((-1419));
      TemplateEngine templateEngine0 = engine0.jxlt();
      JexlInfo jexlInfo0 = new JexlInfo();
      String[] stringArray0 = new String[3];
      JxltEngine.Template jxltEngine_Template0 = templateEngine0.createTemplate(jexlInfo0, ""r;Ik,k;qi.a%b^~-|0"", stringArray0);
      templateDebugger0.debug(jxltEngine_Template0);
      templateDebugger0.visit(aSTBlock0, ""r;Ik,k;qi.a%b^~-|0"");
}"
3113,"    public boolean debug(final JxltEngine.Expression je) {
        if (je instanceof TemplateExpression) {
            final TemplateEngine.TemplateExpression te = (TemplateEngine.TemplateExpression) je;
            return visit(te, this) != null;
        }
        return false;
    }","  public void test16()  throws Throwable  {
      TemplateDebugger templateDebugger0 = new TemplateDebugger();
      Engine engine0 = new Engine();
      TemplateEngine templateEngine0 = new TemplateEngine(engine0, false, 5, 'I', 'I');
      StringReader stringReader0 = new StringReader(""ses"");
      String[] stringArray0 = new String[3];
      JxltEngine.Template jxltEngine_Template0 = templateEngine0.createTemplate("""", (Reader) stringReader0, stringArray0);
      boolean boolean0 = templateDebugger0.debug(jxltEngine_Template0);
}"
3114,"    public boolean debug(final JxltEngine.Expression je) {
        if (je instanceof TemplateExpression) {
            final TemplateEngine.TemplateExpression te = (TemplateEngine.TemplateExpression) je;
            return visit(te, this) != null;
        }
        return false;
    }","  public void test17()  throws Throwable  {
      TemplateDebugger templateDebugger0 = new TemplateDebugger();
      Engine engine0 = new Engine();
      TemplateEngine templateEngine0 = new TemplateEngine(engine0, false, 5, 'I', 'I');
      StringReader stringReader0 = new StringReader(""ses"");
      String[] stringArray0 = new String[3];
      JxltEngine.Template jxltEngine_Template0 = templateEngine0.createTemplate("""", (Reader) stringReader0, stringArray0);
      boolean boolean0 = templateDebugger0.debug(jxltEngine_Template0);
}"
3115,"    public boolean debug(final JxltEngine.Expression je) {
        if (je instanceof TemplateExpression) {
            final TemplateEngine.TemplateExpression te = (TemplateEngine.TemplateExpression) je;
            return visit(te, this) != null;
        }
        return false;
    }","  public void test18()  throws Throwable  {
      TemplateDebugger templateDebugger0 = new TemplateDebugger();
      TemplateEngine.Block[] templateEngine_BlockArray0 = new TemplateEngine.Block[1];
      ASTJexlScript aSTJexlScript0 = new ASTJexlScript((byte)2);
      TemplateScript templateScript0 = new TemplateScript((TemplateEngine) null, """", templateEngine_BlockArray0, aSTJexlScript0, (TemplateEngine.TemplateExpression[]) null);
      boolean boolean0 = templateDebugger0.debug((JxltEngine.Template) templateScript0);
}"
3116,"    public boolean debug(final JxltEngine.Expression je) {
        if (je instanceof TemplateExpression) {
            final TemplateEngine.TemplateExpression te = (TemplateEngine.TemplateExpression) je;
            return visit(te, this) != null;
        }
        return false;
    }","  public void test19()  throws Throwable  {
      TemplateDebugger templateDebugger0 = new TemplateDebugger();
      TemplateEngine.Block[] templateEngine_BlockArray0 = new TemplateEngine.Block[1];
      ASTJexlScript aSTJexlScript0 = new ASTJexlScript((byte)2);
      TemplateScript templateScript0 = new TemplateScript((TemplateEngine) null, """", templateEngine_BlockArray0, aSTJexlScript0, (TemplateEngine.TemplateExpression[]) null);
      boolean boolean0 = templateDebugger0.debug((JxltEngine.Template) templateScript0);
}"
3117,"    public boolean debug(final JxltEngine.Expression je) {
        if (je instanceof TemplateExpression) {
            final TemplateEngine.TemplateExpression te = (TemplateEngine.TemplateExpression) je;
            return visit(te, this) != null;
        }
        return false;
    }","  public void test20()  throws Throwable  {
      TemplateDebugger templateDebugger0 = new TemplateDebugger();
      boolean boolean0 = templateDebugger0.debug((JxltEngine.Template) null);
}"
3118,"    public boolean debug(final JxltEngine.Expression je) {
        if (je instanceof TemplateExpression) {
            final TemplateEngine.TemplateExpression te = (TemplateEngine.TemplateExpression) je;
            return visit(te, this) != null;
        }
        return false;
    }","  public void test21()  throws Throwable  {
      TemplateDebugger templateDebugger0 = new TemplateDebugger();
      boolean boolean0 = templateDebugger0.debug((JxltEngine.Expression) null);
}"
3119,"    public void reset() {
        super.reset();
        // so we can use it more than one time
        exprs = null;
        script = null;
    }","  public void test22()  throws Throwable  {
      TemplateDebugger templateDebugger0 = new TemplateDebugger();
      templateDebugger0.reset();
}"
3120,"    public boolean debug(final JxltEngine.Expression je) {
        if (je instanceof TemplateExpression) {
            final TemplateEngine.TemplateExpression te = (TemplateEngine.TemplateExpression) je;
            return visit(te, this) != null;
        }
        return false;
    }","  public void test23()  throws Throwable  {
      TemplateDebugger templateDebugger0 = new TemplateDebugger();
      Engine engine0 = new Engine();
      TemplateEngine templateEngine0 = new TemplateEngine(engine0, false, (-507), 'A', '<');
      String[] stringArray0 = new String[6];
      JxltEngine.Template jxltEngine_Template0 = templateEngine0.createTemplate(""<{null} /*= null */"", stringArray0);
      boolean boolean0 = templateDebugger0.debug(jxltEngine_Template0);
}"
3121,"    public boolean debug(final JxltEngine.Expression je) {
        if (je instanceof TemplateExpression) {
            final TemplateEngine.TemplateExpression te = (TemplateEngine.TemplateExpression) je;
            return visit(te, this) != null;
        }
        return false;
    }","  public void test24()  throws Throwable  {
      TemplateDebugger templateDebugger0 = new TemplateDebugger();
      Engine engine0 = new Engine();
      TemplateEngine templateEngine0 = new TemplateEngine(engine0, false, (-507), 'A', '<');
      String[] stringArray0 = new String[6];
      JxltEngine.Template jxltEngine_Template0 = templateEngine0.createTemplate(""<{null} /*= null */"", stringArray0);
      boolean boolean0 = templateDebugger0.debug(jxltEngine_Template0);
}"
3122,"    protected Object tryAssignOverload(final JexlNode node, final JexlOperator operator, final Object...args) {
        final JexlArithmetic arithmetic = interpreter.arithmetic;
        if (args.length != operator.getArity()) {
            return JexlEngine.TRY_FAILED;
        }
        // try to call overload with side effect
        Object result = tryOverload(node, operator, args);
        if (result != JexlEngine.TRY_FAILED) {
            return result;
        }
        // call base operator
        final JexlOperator base = operator.getBaseOperator();
        if (base == null) {
            throw new IllegalArgumentException(""must be called with a side-effect operator"");
        }
        if (operators != null && operators.overloads(base)) {
            // in case there is an overload on the base operator
            try {
                final JexlMethod vm = operators.getOperator(base, args);
                if (vm != null) {
                    result = vm.invoke(arithmetic, args);
                    if (result != JexlEngine.TRY_FAILED) {
                        return result;
                    }
                }
            } catch (final Exception xany) {
                interpreter.operatorError(node, base, xany);
            }
        }
        // base eval
        try {
            switch (operator) {
                case SELF_ADD:
                    return arithmetic.add(args[0], args[1]);
                case SELF_SUBTRACT:
                    return arithmetic.subtract(args[0], args[1]);
                case SELF_MULTIPLY:
                    return arithmetic.multiply(args[0], args[1]);
                case SELF_DIVIDE:
                    return arithmetic.divide(args[0], args[1]);
                case SELF_MOD:
                    return arithmetic.mod(args[0], args[1]);
                case SELF_AND:
                    return arithmetic.and(args[0], args[1]);
                case SELF_OR:
                    return arithmetic.or(args[0], args[1]);
                case SELF_XOR:
                    return arithmetic.xor(args[0], args[1]);
                default:
                    // unexpected, new operator added?
                    throw new UnsupportedOperationException(operator.getOperatorSymbol());
            }
        } catch (final Exception xany) {
            interpreter.operatorError(node, base, xany);
        }
        return JexlEngine.TRY_FAILED;
    }","  public void test0()  throws Throwable  {
      Engine engine0 = new Engine();
      JexlOptions jexlOptions0 = new JexlOptions();
      Object[] objectArray0 = new Object[0];
      Frame frame0 = new Frame((Scope) null, objectArray0, (-1110));
      Interpreter interpreter0 = new Interpreter(engine0, jexlOptions0, engine0.EMPTY_CONTEXT, frame0);
      Operators operators0 = new Operators(interpreter0);
      JexlOperator jexlOperator0 = JexlOperator.ARRAY_SET;
      ASTEWNode aSTEWNode0 = new ASTEWNode(0);
      Object object0 = operators0.tryAssignOverload(aSTEWNode0, jexlOperator0, objectArray0);
}"
3123,"    protected Object tryAssignOverload(final JexlNode node, final JexlOperator operator, final Object...args) {
        final JexlArithmetic arithmetic = interpreter.arithmetic;
        if (args.length != operator.getArity()) {
            return JexlEngine.TRY_FAILED;
        }
        // try to call overload with side effect
        Object result = tryOverload(node, operator, args);
        if (result != JexlEngine.TRY_FAILED) {
            return result;
        }
        // call base operator
        final JexlOperator base = operator.getBaseOperator();
        if (base == null) {
            throw new IllegalArgumentException(""must be called with a side-effect operator"");
        }
        if (operators != null && operators.overloads(base)) {
            // in case there is an overload on the base operator
            try {
                final JexlMethod vm = operators.getOperator(base, args);
                if (vm != null) {
                    result = vm.invoke(arithmetic, args);
                    if (result != JexlEngine.TRY_FAILED) {
                        return result;
                    }
                }
            } catch (final Exception xany) {
                interpreter.operatorError(node, base, xany);
            }
        }
        // base eval
        try {
            switch (operator) {
                case SELF_ADD:
                    return arithmetic.add(args[0], args[1]);
                case SELF_SUBTRACT:
                    return arithmetic.subtract(args[0], args[1]);
                case SELF_MULTIPLY:
                    return arithmetic.multiply(args[0], args[1]);
                case SELF_DIVIDE:
                    return arithmetic.divide(args[0], args[1]);
                case SELF_MOD:
                    return arithmetic.mod(args[0], args[1]);
                case SELF_AND:
                    return arithmetic.and(args[0], args[1]);
                case SELF_OR:
                    return arithmetic.or(args[0], args[1]);
                case SELF_XOR:
                    return arithmetic.xor(args[0], args[1]);
                default:
                    // unexpected, new operator added?
                    throw new UnsupportedOperationException(operator.getOperatorSymbol());
            }
        } catch (final Exception xany) {
            interpreter.operatorError(node, base, xany);
        }
        return JexlEngine.TRY_FAILED;
    }","  public void test1()  throws Throwable  {
      Engine engine0 = new Engine();
      JexlOptions jexlOptions0 = new JexlOptions();
      Interpreter interpreter0 = engine0.createInterpreter((JexlContext) null, (Frame) null, jexlOptions0);
      Operators operators0 = new Operators(interpreter0);
      ASTForeachStatement aSTForeachStatement0 = new ASTForeachStatement(5);
      JexlOperator jexlOperator0 = JexlOperator.SELF_SUBTRACT;
      jexlOptions0.setStrict(false);
      Object[] objectArray0 = new Object[2];
      Object object0 = operators0.tryAssignOverload(aSTForeachStatement0, jexlOperator0, objectArray0);
}"
3124,"    protected boolean endsWith(final JexlNode node, final String operator, final Object left, final Object right) {
        final JexlArithmetic arithmetic = interpreter.arithmetic;
        final JexlUberspect uberspect = interpreter.uberspect;
        try {
            // try operator overload
            final Object result = tryOverload(node, JexlOperator.ENDSWITH, left, right);
            if (result instanceof Boolean) {
                return (Boolean) result;
            }
            // use arithmetic / pattern matching ?
            final Boolean matched = arithmetic.endsWith(left, right);
            if (matched != null) {
                return matched;
            }
            // try a endsWith method (duck type)
            try {
                final Object[] argv = {right};
                JexlMethod vm = uberspect.getMethod(left, ""endsWith"", argv);
                if (returnsBoolean(vm)) {
                    return (Boolean) vm.invoke(left, argv);
                }
                if (arithmetic.narrowArguments(argv)) {
                    vm = uberspect.getMethod(left, ""endsWith"", argv);
                    if (returnsBoolean(vm)) {
                        return (Boolean) vm.invoke(left, argv);
                    }
                }
            } catch (final Exception e) {
                throw new JexlException(node, operator + "" error"", e);
            }
            // defaults to equal
            return arithmetic.equals(left, right);
        } catch (final ArithmeticException xrt) {
            throw new JexlException(node, operator + "" error"", xrt);
        }
    }","  public void test2()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlUberspect.ResolverStrategy jexlUberspect_ResolverStrategy0 = JexlUberspect.MAP_STRATEGY;
      jexlBuilder0.strategy(jexlUberspect_ResolverStrategy0);
      Engine engine0 = new Engine(jexlBuilder0);
      JexlOptions jexlOptions0 = engine0.options((JexlContext) null);
      Interpreter interpreter0 = engine0.createInterpreter((JexlContext) null, (Frame) null, jexlOptions0);
      Operators operators0 = interpreter0.operators;
      SimpleLog simpleLog0 = new SimpleLog("")1wJM+#/"");
      Parser parser0 = engine0.parser;
      ASTEmptyFunction aSTEmptyFunction0 = new ASTEmptyFunction(parser0, (-1));
      // Undeclared exception!
      try { 
        operators0.endsWith(aSTEmptyFunction0, ""IK1$T6-!Fr`~"", simpleLog0.LOG_LEVEL_OFF, ""org.apache.commons.jexl3.parser.ASTMulNode"");
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // ?: JEXL error : IK1$T6-!Fr`~ error
         //
         verifyException(""org.apache.commons.jexl3.internal.Operators"", e);
      }
  }"
3125,"    protected Object tryOverload(final JexlNode node, final JexlOperator operator, final Object... args) {
        if (operators != null && operators.overloads(operator)) {
            final JexlArithmetic arithmetic = interpreter.arithmetic;
            final boolean cache = interpreter.cache;
            try {
                if (cache) {
                    final Object cached = node.jjtGetValue();
                    if (cached instanceof JexlMethod) {
                        final JexlMethod me = (JexlMethod) cached;
                        final Object eval = me.tryInvoke(operator.getMethodName(), arithmetic, args);
                        if (!me.tryFailed(eval)) {
                            return eval;
                        }
                    }
                }
                final JexlMethod vm = operators.getOperator(operator, args);
                if (vm != null && !isArithmetic(vm)) {
                    final Object result = vm.invoke(arithmetic, args);
                    if (cache) {
                        node.jjtSetValue(vm);
                    }
                    return result;
                }
            } catch (final Exception xany) {
                return interpreter.operatorError(node, operator, xany);
            }
        }
        return JexlEngine.TRY_FAILED;
    }","  public void test3()  throws Throwable  {
      Engine engine0 = new Engine();
      ASTJexlScript aSTJexlScript0 = new ASTJexlScript(1);
      MapContext mapContext0 = new MapContext();
      JexlOptions jexlOptions0 = engine0.options(aSTJexlScript0, mapContext0);
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[3];
      Scope scope1 = new Scope(scope0, stringArray0);
      Frame frame0 = new Frame(scope1, (Object[]) null, 921);
      Interpreter interpreter0 = new Interpreter(engine0, jexlOptions0, engine0.EMPTY_CONTEXT, frame0);
      Operators operators0 = new Operators(interpreter0);
      JexlOperator jexlOperator0 = JexlOperator.SELF_MOD;
      Object object0 = operators0.tryOverload(aSTJexlScript0, jexlOperator0, (Object[]) null);
}"
3126,"    protected boolean contains(final JexlNode node, final String op, final Object left, final Object right) {
        final JexlArithmetic arithmetic = interpreter.arithmetic;
        final JexlUberspect uberspect = interpreter.uberspect;
        try {
            // try operator overload
            final Object result = tryOverload(node, JexlOperator.CONTAINS, left, right);
            if (result instanceof Boolean) {
                return (Boolean) result;
            }
            // use arithmetic / pattern matching ?
            final Boolean matched = arithmetic.contains(left, right);
            if (matched != null) {
                return matched;
            }
            // try a contains method (duck type set)
            try {
                final Object[] argv = {right};
                JexlMethod vm = uberspect.getMethod(left, ""contains"", argv);
                if (returnsBoolean(vm)) {
                    return (Boolean) vm.invoke(left, argv);
                }
                if (arithmetic.narrowArguments(argv)) {
                    vm = uberspect.getMethod(left, ""contains"", argv);
                    if (returnsBoolean(vm)) {
                        return (Boolean) vm.invoke(left, argv);
                    }
                }
            } catch (final Exception e) {
                throw new JexlException(node, op + "" error"", e);
            }
            // defaults to equal
            return arithmetic.equals(left, right);
        } catch (final ArithmeticException xrt) {
            throw new JexlException(node, op + "" error"", xrt);
        }
    }","  public void test4()  throws Throwable  {
      Engine engine0 = new Engine();
      TemplateInterpreter.Arguments templateInterpreter_Arguments0 = new TemplateInterpreter.Arguments(engine0);
      TemplateInterpreter templateInterpreter0 = new TemplateInterpreter(templateInterpreter_Arguments0);
      Operators operators0 = new Operators(templateInterpreter0);
      Integer integer0 = new Integer((short)0);
      boolean boolean0 = operators0.contains((JexlNode) null, ""D%cm`@"", integer0, """");
}"
3127,"    protected Object tryAssignOverload(final JexlNode node, final JexlOperator operator, final Object...args) {
        final JexlArithmetic arithmetic = interpreter.arithmetic;
        if (args.length != operator.getArity()) {
            return JexlEngine.TRY_FAILED;
        }
        // try to call overload with side effect
        Object result = tryOverload(node, operator, args);
        if (result != JexlEngine.TRY_FAILED) {
            return result;
        }
        // call base operator
        final JexlOperator base = operator.getBaseOperator();
        if (base == null) {
            throw new IllegalArgumentException(""must be called with a side-effect operator"");
        }
        if (operators != null && operators.overloads(base)) {
            // in case there is an overload on the base operator
            try {
                final JexlMethod vm = operators.getOperator(base, args);
                if (vm != null) {
                    result = vm.invoke(arithmetic, args);
                    if (result != JexlEngine.TRY_FAILED) {
                        return result;
                    }
                }
            } catch (final Exception xany) {
                interpreter.operatorError(node, base, xany);
            }
        }
        // base eval
        try {
            switch (operator) {
                case SELF_ADD:
                    return arithmetic.add(args[0], args[1]);
                case SELF_SUBTRACT:
                    return arithmetic.subtract(args[0], args[1]);
                case SELF_MULTIPLY:
                    return arithmetic.multiply(args[0], args[1]);
                case SELF_DIVIDE:
                    return arithmetic.divide(args[0], args[1]);
                case SELF_MOD:
                    return arithmetic.mod(args[0], args[1]);
                case SELF_AND:
                    return arithmetic.and(args[0], args[1]);
                case SELF_OR:
                    return arithmetic.or(args[0], args[1]);
                case SELF_XOR:
                    return arithmetic.xor(args[0], args[1]);
                default:
                    // unexpected, new operator added?
                    throw new UnsupportedOperationException(operator.getOperatorSymbol());
            }
        } catch (final Exception xany) {
            interpreter.operatorError(node, base, xany);
        }
        return JexlEngine.TRY_FAILED;
    }","  public void test5()  throws Throwable  {
      Engine engine0 = new Engine();
      TemplateInterpreter.Arguments templateInterpreter_Arguments0 = new TemplateInterpreter.Arguments(engine0);
      TemplateInterpreter templateInterpreter0 = new TemplateInterpreter(templateInterpreter_Arguments0);
      Operators operators0 = new Operators(templateInterpreter0);
      ASTBitwiseComplNode aSTBitwiseComplNode0 = new ASTBitwiseComplNode(0);
      JexlOperator jexlOperator0 = JexlOperator.PROPERTY_GET;
      // Undeclared exception!
      try { 
        operators0.tryAssignOverload(aSTBitwiseComplNode0, jexlOperator0, (Object[]) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.internal.Operators"", e);
      }
  }"
3128,"    protected boolean startsWith(final JexlNode node, final String operator, final Object left, final Object right) {
        final JexlArithmetic arithmetic = interpreter.arithmetic;
        final JexlUberspect uberspect = interpreter.uberspect;
        try {
            // try operator overload
            final Object result = tryOverload(node, JexlOperator.STARTSWITH, left, right);
            if (result instanceof Boolean) {
                return (Boolean) result;
            }
            // use arithmetic / pattern matching ?
            final Boolean matched = arithmetic.startsWith(left, right);
            if (matched != null) {
                return matched;
            }
            // try a startsWith method (duck type)
            try {
                final Object[] argv = {right};
                JexlMethod vm = uberspect.getMethod(left, ""startsWith"", argv);
                if (returnsBoolean(vm)) {
                    return (Boolean) vm.invoke(left, argv);
                }
                if (arithmetic.narrowArguments(argv)) {
                    vm = uberspect.getMethod(left, ""startsWith"", argv);
                    if (returnsBoolean(vm)) {
                        return (Boolean) vm.invoke(left, argv);
                    }
                }
            } catch (final Exception e) {
                throw new JexlException(node, operator + "" error"", e);
            }
            // defaults to equal
            return arithmetic.equals(left, right);
        } catch (final ArithmeticException xrt) {
            throw new JexlException(node, operator + "" error"", xrt);
        }
    }","  public void test6()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      JexlEngine.EmptyContext jexlEngine_EmptyContext0 = (JexlEngine.EmptyContext)JexlEngine.EMPTY_CONTEXT;
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[2];
      Scope scope1 = new Scope(scope0, stringArray0);
      Frame frame0 = new Frame(scope1, stringArray0, (-1982));
      JexlOptions jexlOptions0 = new JexlOptions();
      Interpreter interpreter0 = engine0.createInterpreter(jexlEngine_EmptyContext0, frame0, jexlOptions0);
      Operators operators0 = new Operators(interpreter0);
      ASTSetXorNode aSTSetXorNode0 = new ASTSetXorNode((-1982));
      Float float0 = new Float((float) 2);
      // Undeclared exception!
      try { 
        operators0.startsWith(aSTSetXorNode0, ""i-hwZ41"", float0, ""endsWith"");
        fail(""Expecting exception: NumberFormatException"");
      } catch(NumberFormatException e) {
      }
  }"
3129,"    protected boolean startsWith(final JexlNode node, final String operator, final Object left, final Object right) {
        final JexlArithmetic arithmetic = interpreter.arithmetic;
        final JexlUberspect uberspect = interpreter.uberspect;
        try {
            // try operator overload
            final Object result = tryOverload(node, JexlOperator.STARTSWITH, left, right);
            if (result instanceof Boolean) {
                return (Boolean) result;
            }
            // use arithmetic / pattern matching ?
            final Boolean matched = arithmetic.startsWith(left, right);
            if (matched != null) {
                return matched;
            }
            // try a startsWith method (duck type)
            try {
                final Object[] argv = {right};
                JexlMethod vm = uberspect.getMethod(left, ""startsWith"", argv);
                if (returnsBoolean(vm)) {
                    return (Boolean) vm.invoke(left, argv);
                }
                if (arithmetic.narrowArguments(argv)) {
                    vm = uberspect.getMethod(left, ""startsWith"", argv);
                    if (returnsBoolean(vm)) {
                        return (Boolean) vm.invoke(left, argv);
                    }
                }
            } catch (final Exception e) {
                throw new JexlException(node, operator + "" error"", e);
            }
            // defaults to equal
            return arithmetic.equals(left, right);
        } catch (final ArithmeticException xrt) {
            throw new JexlException(node, operator + "" error"", xrt);
        }
    }","  public void test7()  throws Throwable  {
      Engine engine0 = new Engine();
      JexlOptions jexlOptions0 = new JexlOptions();
      Interpreter interpreter0 = engine0.createInterpreter((JexlContext) null, (Frame) null, jexlOptions0);
      Interpreter interpreter1 = new Interpreter(interpreter0, (JexlArithmetic) null);
      Operators operators0 = new Operators(interpreter1);
      ASTForeachStatement aSTForeachStatement0 = new ASTForeachStatement(5);
      Short short0 = new Short((short) (-1845));
      // Undeclared exception!
      try { 
        operators0.startsWith(aSTForeachStatement0, """", aSTForeachStatement0, short0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.internal.Operators"", e);
      }
  }"
3130,"    protected boolean startsWith(final JexlNode node, final String operator, final Object left, final Object right) {
        final JexlArithmetic arithmetic = interpreter.arithmetic;
        final JexlUberspect uberspect = interpreter.uberspect;
        try {
            // try operator overload
            final Object result = tryOverload(node, JexlOperator.STARTSWITH, left, right);
            if (result instanceof Boolean) {
                return (Boolean) result;
            }
            // use arithmetic / pattern matching ?
            final Boolean matched = arithmetic.startsWith(left, right);
            if (matched != null) {
                return matched;
            }
            // try a startsWith method (duck type)
            try {
                final Object[] argv = {right};
                JexlMethod vm = uberspect.getMethod(left, ""startsWith"", argv);
                if (returnsBoolean(vm)) {
                    return (Boolean) vm.invoke(left, argv);
                }
                if (arithmetic.narrowArguments(argv)) {
                    vm = uberspect.getMethod(left, ""startsWith"", argv);
                    if (returnsBoolean(vm)) {
                        return (Boolean) vm.invoke(left, argv);
                    }
                }
            } catch (final Exception e) {
                throw new JexlException(node, operator + "" error"", e);
            }
            // defaults to equal
            return arithmetic.equals(left, right);
        } catch (final ArithmeticException xrt) {
            throw new JexlException(node, operator + "" error"", xrt);
        }
    }","  public void test8()  throws Throwable  {
      Engine engine0 = new Engine();
      Parser parser0 = new Parser("""");
      ASTJexlScript aSTJexlScript0 = new ASTJexlScript(parser0, 432);
      ObjectContext<Object> objectContext0 = new ObjectContext<Object>(engine0, """");
      JexlOptions jexlOptions0 = engine0.options(aSTJexlScript0, objectContext0);
      JexlEngine.EmptyContext jexlEngine_EmptyContext0 = (JexlEngine.EmptyContext)JexlEngine.EMPTY_CONTEXT;
      Interpreter interpreter0 = new Interpreter(engine0, jexlOptions0, jexlEngine_EmptyContext0, (Frame) null);
      Operators operators0 = new Operators(interpreter0);
      ASTTrueNode aSTTrueNode0 = new ASTTrueNode(parser0, 432);
      Object object0 = operators0.size(aSTTrueNode0, aSTTrueNode0);
      // Undeclared exception!
      try { 
        operators0.startsWith(aSTJexlScript0, """", aSTJexlScript0, object0);
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 432
         //
         verifyException(""org.apache.commons.jexl3.parser.SimpleNode"", e);
      }
  }"
3131,"    protected Object size(final JexlNode node, final Object object) {
        if (object == null) {
            return 0;
        }
        Object result = tryOverload(node, JexlOperator.SIZE, object);
        if (result != JexlEngine.TRY_FAILED) {
            return result;
        }
        final JexlArithmetic arithmetic = interpreter.arithmetic;
        result = arithmetic.size(object, null);
        if (result == null) {
            final JexlUberspect uberspect = interpreter.uberspect;
            // check if there is a size method on the object that returns an
            // integer and if so, just use it
            final JexlMethod vm = uberspect.getMethod(object, ""size"", Interpreter.EMPTY_PARAMS);
            if (returnsInteger(vm)) {
                try {
                    result = vm.invoke(object, Interpreter.EMPTY_PARAMS);
                } catch (final Exception xany) {
                    interpreter.operatorError(node, JexlOperator.SIZE, xany);
                }
            }
        }
        return result instanceof Number ? ((Number) result).intValue() : 0;
    }","  public void test9()  throws Throwable  {
      Engine engine0 = new Engine();
      TemplateInterpreter.Arguments templateInterpreter_Arguments0 = new TemplateInterpreter.Arguments(engine0);
      TemplateInterpreter templateInterpreter0 = new TemplateInterpreter(templateInterpreter_Arguments0);
      Interpreter interpreter0 = new Interpreter(templateInterpreter0, (JexlArithmetic) null);
      Operators operators0 = new Operators(interpreter0);
      Parser parser0 = engine0.parser;
      ASTGENode aSTGENode0 = new ASTGENode(parser0, (-2850));
      // Undeclared exception!
      try { 
        operators0.size(aSTGENode0, interpreter0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.internal.Operators"", e);
      }
  }"
3132,"    protected Object size(final JexlNode node, final Object object) {
        if (object == null) {
            return 0;
        }
        Object result = tryOverload(node, JexlOperator.SIZE, object);
        if (result != JexlEngine.TRY_FAILED) {
            return result;
        }
        final JexlArithmetic arithmetic = interpreter.arithmetic;
        result = arithmetic.size(object, null);
        if (result == null) {
            final JexlUberspect uberspect = interpreter.uberspect;
            // check if there is a size method on the object that returns an
            // integer and if so, just use it
            final JexlMethod vm = uberspect.getMethod(object, ""size"", Interpreter.EMPTY_PARAMS);
            if (returnsInteger(vm)) {
                try {
                    result = vm.invoke(object, Interpreter.EMPTY_PARAMS);
                } catch (final Exception xany) {
                    interpreter.operatorError(node, JexlOperator.SIZE, xany);
                }
            }
        }
        return result instanceof Number ? ((Number) result).intValue() : 0;
    }","  public void test10()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlUberspect.ResolverStrategy jexlUberspect_ResolverStrategy0 = JexlUberspect.MAP_STRATEGY;
      JexlBuilder jexlBuilder1 = jexlBuilder0.strategy(jexlUberspect_ResolverStrategy0);
      Engine engine0 = new Engine(jexlBuilder1);
      TemplateInterpreter.Arguments templateInterpreter_Arguments0 = new TemplateInterpreter.Arguments(engine0);
      TemplateInterpreter templateInterpreter0 = new TemplateInterpreter(templateInterpreter_Arguments0);
      Operators operators0 = new Operators(templateInterpreter0);
      ASTUnaryMinusNode aSTUnaryMinusNode0 = new ASTUnaryMinusNode((-2637));
      Long long0 = new Long(1L);
      // Undeclared exception!
      try { 
        operators0.size(aSTUnaryMinusNode0, long0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.internal.introspection.ClassMap"", e);
      }
  }"
3133,"    protected boolean endsWith(final JexlNode node, final String operator, final Object left, final Object right) {
        final JexlArithmetic arithmetic = interpreter.arithmetic;
        final JexlUberspect uberspect = interpreter.uberspect;
        try {
            // try operator overload
            final Object result = tryOverload(node, JexlOperator.ENDSWITH, left, right);
            if (result instanceof Boolean) {
                return (Boolean) result;
            }
            // use arithmetic / pattern matching ?
            final Boolean matched = arithmetic.endsWith(left, right);
            if (matched != null) {
                return matched;
            }
            // try a endsWith method (duck type)
            try {
                final Object[] argv = {right};
                JexlMethod vm = uberspect.getMethod(left, ""endsWith"", argv);
                if (returnsBoolean(vm)) {
                    return (Boolean) vm.invoke(left, argv);
                }
                if (arithmetic.narrowArguments(argv)) {
                    vm = uberspect.getMethod(left, ""endsWith"", argv);
                    if (returnsBoolean(vm)) {
                        return (Boolean) vm.invoke(left, argv);
                    }
                }
            } catch (final Exception e) {
                throw new JexlException(node, operator + "" error"", e);
            }
            // defaults to equal
            return arithmetic.equals(left, right);
        } catch (final ArithmeticException xrt) {
            throw new JexlException(node, operator + "" error"", xrt);
        }
    }","  public void test11()  throws Throwable  {
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      ASTFunctionNode aSTFunctionNode0 = new ASTFunctionNode(0);
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      Object[] objectArray0 = new Object[0];
      Frame frame0 = new Frame(scope0, objectArray0, (short)2);
      Interpreter interpreter0 = new Interpreter(engine0, (JexlOptions) null, engine0.EMPTY_CONTEXT, frame0);
      Interpreter interpreter1 = new Interpreter(interpreter0, (JexlArithmetic) null);
      Operators operators0 = new Operators(interpreter1);
      JexlArithmetic jexlArithmetic0 = engine0.arithmetic;
      // Undeclared exception!
      try { 
        operators0.endsWith(aSTFunctionNode0, ""org.apache.commons.jexl3.JexlFeatures"", frame0, jexlArithmetic0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.internal.Operators"", e);
      }
  }"
3134,"    protected boolean endsWith(final JexlNode node, final String operator, final Object left, final Object right) {
        final JexlArithmetic arithmetic = interpreter.arithmetic;
        final JexlUberspect uberspect = interpreter.uberspect;
        try {
            // try operator overload
            final Object result = tryOverload(node, JexlOperator.ENDSWITH, left, right);
            if (result instanceof Boolean) {
                return (Boolean) result;
            }
            // use arithmetic / pattern matching ?
            final Boolean matched = arithmetic.endsWith(left, right);
            if (matched != null) {
                return matched;
            }
            // try a endsWith method (duck type)
            try {
                final Object[] argv = {right};
                JexlMethod vm = uberspect.getMethod(left, ""endsWith"", argv);
                if (returnsBoolean(vm)) {
                    return (Boolean) vm.invoke(left, argv);
                }
                if (arithmetic.narrowArguments(argv)) {
                    vm = uberspect.getMethod(left, ""endsWith"", argv);
                    if (returnsBoolean(vm)) {
                        return (Boolean) vm.invoke(left, argv);
                    }
                }
            } catch (final Exception e) {
                throw new JexlException(node, operator + "" error"", e);
            }
            // defaults to equal
            return arithmetic.equals(left, right);
        } catch (final ArithmeticException xrt) {
            throw new JexlException(node, operator + "" error"", xrt);
        }
    }","  public void test12()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      TemplateInterpreter.Arguments templateInterpreter_Arguments0 = new TemplateInterpreter.Arguments(engine0);
      TemplateInterpreter templateInterpreter0 = new TemplateInterpreter(templateInterpreter_Arguments0);
      Operators operators0 = templateInterpreter0.operators;
      ASTFalseNode aSTFalseNode0 = new ASTFalseNode((Parser) null, (-3016));
      ASTNRNode aSTNRNode0 = new ASTNRNode((-702));
      Short short0 = new Short((short)28);
      // Undeclared exception!
      try { 
        operators0.endsWith(aSTNRNode0, ""uTzq5R"", aSTFalseNode0, short0);
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3016
         //
         verifyException(""org.apache.commons.jexl3.parser.SimpleNode"", e);
      }
  }"
3135,"    protected Object empty(final JexlNode node, final Object object) {
        if (object == null) {
            return true;
        }
        Object result = tryOverload(node, JexlOperator.EMPTY, object);
        if (result != JexlEngine.TRY_FAILED) {
            return result;
        }
        final JexlArithmetic arithmetic = interpreter.arithmetic;
        result = arithmetic.isEmpty(object, null);
        if (result == null) {
            final JexlUberspect uberspect = interpreter.uberspect;
            result = false;
            // check if there is an isEmpty method on the object that returns a
            // boolean and if so, just use it
            final JexlMethod vm = uberspect.getMethod(object, ""isEmpty"", Interpreter.EMPTY_PARAMS);
            if (returnsBoolean(vm)) {
                try {
                    result = vm.invoke(object, Interpreter.EMPTY_PARAMS);
                } catch (final Exception xany) {
                    interpreter.operatorError(node, JexlOperator.EMPTY, xany);
                }
            }
        }
        return !(result instanceof Boolean) || (Boolean) result;
    }","  public void test13()  throws Throwable  {
      Engine engine0 = new Engine();
      TemplateInterpreter.Arguments templateInterpreter_Arguments0 = new TemplateInterpreter.Arguments(engine0);
      TemplateInterpreter templateInterpreter0 = new TemplateInterpreter(templateInterpreter_Arguments0);
      Interpreter interpreter0 = new Interpreter(templateInterpreter0, (JexlArithmetic) null);
      Operators operators0 = new Operators(interpreter0);
      ASTEmptyFunction aSTEmptyFunction0 = new ASTEmptyFunction(0);
      JexlArithmetic jexlArithmetic0 = engine0.getArithmetic();
      // Undeclared exception!
      try { 
        operators0.empty(aSTEmptyFunction0, jexlArithmetic0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.internal.Operators"", e);
      }
  }"
3136,"    protected boolean contains(final JexlNode node, final String op, final Object left, final Object right) {
        final JexlArithmetic arithmetic = interpreter.arithmetic;
        final JexlUberspect uberspect = interpreter.uberspect;
        try {
            // try operator overload
            final Object result = tryOverload(node, JexlOperator.CONTAINS, left, right);
            if (result instanceof Boolean) {
                return (Boolean) result;
            }
            // use arithmetic / pattern matching ?
            final Boolean matched = arithmetic.contains(left, right);
            if (matched != null) {
                return matched;
            }
            // try a contains method (duck type set)
            try {
                final Object[] argv = {right};
                JexlMethod vm = uberspect.getMethod(left, ""contains"", argv);
                if (returnsBoolean(vm)) {
                    return (Boolean) vm.invoke(left, argv);
                }
                if (arithmetic.narrowArguments(argv)) {
                    vm = uberspect.getMethod(left, ""contains"", argv);
                    if (returnsBoolean(vm)) {
                        return (Boolean) vm.invoke(left, argv);
                    }
                }
            } catch (final Exception e) {
                throw new JexlException(node, op + "" error"", e);
            }
            // defaults to equal
            return arithmetic.equals(left, right);
        } catch (final ArithmeticException xrt) {
            throw new JexlException(node, op + "" error"", xrt);
        }
    }","  public void test14()  throws Throwable  {
      Engine engine0 = new Engine();
      JexlOptions jexlOptions0 = new JexlOptions();
      Interpreter interpreter0 = engine0.createInterpreter((JexlContext) null, (Frame) null, jexlOptions0);
      Interpreter interpreter1 = new Interpreter(interpreter0, (JexlArithmetic) null);
      Operators operators0 = new Operators(interpreter1);
      ASTForeachStatement aSTForeachStatement0 = new ASTForeachStatement(34);
      // Undeclared exception!
      try { 
        operators0.contains(aSTForeachStatement0, ""@{]}4"", (Object) null, interpreter1);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.internal.Operators"", e);
      }
  }"
3137,"    protected boolean contains(final JexlNode node, final String op, final Object left, final Object right) {
        final JexlArithmetic arithmetic = interpreter.arithmetic;
        final JexlUberspect uberspect = interpreter.uberspect;
        try {
            // try operator overload
            final Object result = tryOverload(node, JexlOperator.CONTAINS, left, right);
            if (result instanceof Boolean) {
                return (Boolean) result;
            }
            // use arithmetic / pattern matching ?
            final Boolean matched = arithmetic.contains(left, right);
            if (matched != null) {
                return matched;
            }
            // try a contains method (duck type set)
            try {
                final Object[] argv = {right};
                JexlMethod vm = uberspect.getMethod(left, ""contains"", argv);
                if (returnsBoolean(vm)) {
                    return (Boolean) vm.invoke(left, argv);
                }
                if (arithmetic.narrowArguments(argv)) {
                    vm = uberspect.getMethod(left, ""contains"", argv);
                    if (returnsBoolean(vm)) {
                        return (Boolean) vm.invoke(left, argv);
                    }
                }
            } catch (final Exception e) {
                throw new JexlException(node, op + "" error"", e);
            }
            // defaults to equal
            return arithmetic.equals(left, right);
        } catch (final ArithmeticException xrt) {
            throw new JexlException(node, op + "" error"", xrt);
        }
    }","  public void test15()  throws Throwable  {
      Engine engine0 = new Engine();
      TemplateInterpreter.Arguments templateInterpreter_Arguments0 = new TemplateInterpreter.Arguments(engine0);
      TemplateInterpreter templateInterpreter0 = new TemplateInterpreter(templateInterpreter_Arguments0);
      ASTFunctionNode aSTFunctionNode0 = new ASTFunctionNode((-19));
      Operators operators0 = new Operators(templateInterpreter0);
      Short short0 = new Short((short)2);
      // Undeclared exception!
      try { 
        operators0.contains(aSTFunctionNode0, ""org.apache.commons.jexl3.internal.Operators$1"", aSTFunctionNode0, short0);
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -19
         //
         verifyException(""org.apache.commons.jexl3.parser.SimpleNode"", e);
      }
  }"
3138,"    protected Operators(final InterpreterBase owner) {
        final JexlArithmetic arithmetic = owner.arithmetic;
        final JexlUberspect uberspect = owner.uberspect;
        this.interpreter = owner;
        this.operators = uberspect.getArithmetic(arithmetic);
    }","  public void test16()  throws Throwable  {
      Operators operators0 = null;
      try {
        operators0 = new Operators((InterpreterBase) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.internal.Operators"", e);
      }
  }"
3139,"    protected boolean endsWith(final JexlNode node, final String operator, final Object left, final Object right) {
        final JexlArithmetic arithmetic = interpreter.arithmetic;
        final JexlUberspect uberspect = interpreter.uberspect;
        try {
            // try operator overload
            final Object result = tryOverload(node, JexlOperator.ENDSWITH, left, right);
            if (result instanceof Boolean) {
                return (Boolean) result;
            }
            // use arithmetic / pattern matching ?
            final Boolean matched = arithmetic.endsWith(left, right);
            if (matched != null) {
                return matched;
            }
            // try a endsWith method (duck type)
            try {
                final Object[] argv = {right};
                JexlMethod vm = uberspect.getMethod(left, ""endsWith"", argv);
                if (returnsBoolean(vm)) {
                    return (Boolean) vm.invoke(left, argv);
                }
                if (arithmetic.narrowArguments(argv)) {
                    vm = uberspect.getMethod(left, ""endsWith"", argv);
                    if (returnsBoolean(vm)) {
                        return (Boolean) vm.invoke(left, argv);
                    }
                }
            } catch (final Exception e) {
                throw new JexlException(node, operator + "" error"", e);
            }
            // defaults to equal
            return arithmetic.equals(left, right);
        } catch (final ArithmeticException xrt) {
            throw new JexlException(node, operator + "" error"", xrt);
        }
    }","  public void test17()  throws Throwable  {
      Engine engine0 = new Engine();
      JexlOptions jexlOptions0 = engine0.options((JexlContext) null);
      Interpreter interpreter0 = engine0.createInterpreter((JexlContext) null, (Frame) null, jexlOptions0);
      Operators operators0 = interpreter0.operators;
      Parser parser0 = engine0.parser;
      ASTEmptyFunction aSTEmptyFunction0 = new ASTEmptyFunction(parser0, 1286);
      Object object0 = operators0.size(aSTEmptyFunction0, ""%K1$T6-!Fr`~"");
      // Undeclared exception!
      try { 
        operators0.endsWith(aSTEmptyFunction0, ""%K1$T6-!Fr`~"", object0, ""%K1$T6-!Fr`~"");
        fail(""Expecting exception: NumberFormatException"");
      } catch(NumberFormatException e) {
         //
         // For input string: \""%K1$T6-!Fr`~\""
         //
         verifyException(""java.lang.NumberFormatException"", e);
      }
  }"
3140,"    protected Object size(final JexlNode node, final Object object) {
        if (object == null) {
            return 0;
        }
        Object result = tryOverload(node, JexlOperator.SIZE, object);
        if (result != JexlEngine.TRY_FAILED) {
            return result;
        }
        final JexlArithmetic arithmetic = interpreter.arithmetic;
        result = arithmetic.size(object, null);
        if (result == null) {
            final JexlUberspect uberspect = interpreter.uberspect;
            // check if there is a size method on the object that returns an
            // integer and if so, just use it
            final JexlMethod vm = uberspect.getMethod(object, ""size"", Interpreter.EMPTY_PARAMS);
            if (returnsInteger(vm)) {
                try {
                    result = vm.invoke(object, Interpreter.EMPTY_PARAMS);
                } catch (final Exception xany) {
                    interpreter.operatorError(node, JexlOperator.SIZE, xany);
                }
            }
        }
        return result instanceof Number ? ((Number) result).intValue() : 0;
    }","  public void test18()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      JexlOptions jexlOptions0 = new JexlOptions();
      Interpreter interpreter0 = engine0.createInterpreter((JexlContext) null, (Frame) null, jexlOptions0);
      Operators operators0 = interpreter0.operators;
      ASTExtendedLiteral aSTExtendedLiteral0 = new ASTExtendedLiteral(14);
      Object object0 = operators0.size(aSTExtendedLiteral0, (Object) null);
}"
3141,"    protected Object empty(final JexlNode node, final Object object) {
        if (object == null) {
            return true;
        }
        Object result = tryOverload(node, JexlOperator.EMPTY, object);
        if (result != JexlEngine.TRY_FAILED) {
            return result;
        }
        final JexlArithmetic arithmetic = interpreter.arithmetic;
        result = arithmetic.isEmpty(object, null);
        if (result == null) {
            final JexlUberspect uberspect = interpreter.uberspect;
            result = false;
            // check if there is an isEmpty method on the object that returns a
            // boolean and if so, just use it
            final JexlMethod vm = uberspect.getMethod(object, ""isEmpty"", Interpreter.EMPTY_PARAMS);
            if (returnsBoolean(vm)) {
                try {
                    result = vm.invoke(object, Interpreter.EMPTY_PARAMS);
                } catch (final Exception xany) {
                    interpreter.operatorError(node, JexlOperator.EMPTY, xany);
                }
            }
        }
        return !(result instanceof Boolean) || (Boolean) result;
    }","  public void test19()  throws Throwable  {
      Engine engine0 = new Engine();
      TemplateInterpreter.Arguments templateInterpreter_Arguments0 = new TemplateInterpreter.Arguments(engine0);
      TemplateInterpreter templateInterpreter0 = new TemplateInterpreter(templateInterpreter_Arguments0);
      Operators operators0 = new Operators(templateInterpreter0);
      Short short0 = new Short((short)0);
      Object object0 = operators0.empty((JexlNode) null, short0);
}"
3142,"    protected Object empty(final JexlNode node, final Object object) {
        if (object == null) {
            return true;
        }
        Object result = tryOverload(node, JexlOperator.EMPTY, object);
        if (result != JexlEngine.TRY_FAILED) {
            return result;
        }
        final JexlArithmetic arithmetic = interpreter.arithmetic;
        result = arithmetic.isEmpty(object, null);
        if (result == null) {
            final JexlUberspect uberspect = interpreter.uberspect;
            result = false;
            // check if there is an isEmpty method on the object that returns a
            // boolean and if so, just use it
            final JexlMethod vm = uberspect.getMethod(object, ""isEmpty"", Interpreter.EMPTY_PARAMS);
            if (returnsBoolean(vm)) {
                try {
                    result = vm.invoke(object, Interpreter.EMPTY_PARAMS);
                } catch (final Exception xany) {
                    interpreter.operatorError(node, JexlOperator.EMPTY, xany);
                }
            }
        }
        return !(result instanceof Boolean) || (Boolean) result;
    }","  public void test20()  throws Throwable  {
      Engine engine0 = new Engine();
      JexlOptions jexlOptions0 = new JexlOptions();
      Interpreter interpreter0 = engine0.createInterpreter((JexlContext) null, (Frame) null, jexlOptions0);
      Operators operators0 = new Operators(interpreter0);
      StringProvider stringProvider0 = new StringProvider("""");
      Parser parser0 = new Parser(stringProvider0);
      ASTGTNode aSTGTNode0 = new ASTGTNode(parser0, 34);
      Object object0 = operators0.empty(aSTGTNode0, (Object) null);
}"
3143,"    protected Object empty(final JexlNode node, final Object object) {
        if (object == null) {
            return true;
        }
        Object result = tryOverload(node, JexlOperator.EMPTY, object);
        if (result != JexlEngine.TRY_FAILED) {
            return result;
        }
        final JexlArithmetic arithmetic = interpreter.arithmetic;
        result = arithmetic.isEmpty(object, null);
        if (result == null) {
            final JexlUberspect uberspect = interpreter.uberspect;
            result = false;
            // check if there is an isEmpty method on the object that returns a
            // boolean and if so, just use it
            final JexlMethod vm = uberspect.getMethod(object, ""isEmpty"", Interpreter.EMPTY_PARAMS);
            if (returnsBoolean(vm)) {
                try {
                    result = vm.invoke(object, Interpreter.EMPTY_PARAMS);
                } catch (final Exception xany) {
                    interpreter.operatorError(node, JexlOperator.EMPTY, xany);
                }
            }
        }
        return !(result instanceof Boolean) || (Boolean) result;
    }","  public void test21()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      TemplateInterpreter.Arguments templateInterpreter_Arguments0 = new TemplateInterpreter.Arguments(engine0);
      TemplateInterpreter templateInterpreter0 = new TemplateInterpreter(templateInterpreter_Arguments0);
      Operators operators0 = new Operators(templateInterpreter0);
      ASTBitwiseXorNode aSTBitwiseXorNode0 = new ASTBitwiseXorNode(1490);
      MathContext mathContext0 = MathContext.UNLIMITED;
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false, mathContext0, 1490);
      Object object0 = operators0.empty(aSTBitwiseXorNode0, jexlArithmetic0);
}"
3144,"    protected boolean contains(final JexlNode node, final String op, final Object left, final Object right) {
        final JexlArithmetic arithmetic = interpreter.arithmetic;
        final JexlUberspect uberspect = interpreter.uberspect;
        try {
            // try operator overload
            final Object result = tryOverload(node, JexlOperator.CONTAINS, left, right);
            if (result instanceof Boolean) {
                return (Boolean) result;
            }
            // use arithmetic / pattern matching ?
            final Boolean matched = arithmetic.contains(left, right);
            if (matched != null) {
                return matched;
            }
            // try a contains method (duck type set)
            try {
                final Object[] argv = {right};
                JexlMethod vm = uberspect.getMethod(left, ""contains"", argv);
                if (returnsBoolean(vm)) {
                    return (Boolean) vm.invoke(left, argv);
                }
                if (arithmetic.narrowArguments(argv)) {
                    vm = uberspect.getMethod(left, ""contains"", argv);
                    if (returnsBoolean(vm)) {
                        return (Boolean) vm.invoke(left, argv);
                    }
                }
            } catch (final Exception e) {
                throw new JexlException(node, op + "" error"", e);
            }
            // defaults to equal
            return arithmetic.equals(left, right);
        } catch (final ArithmeticException xrt) {
            throw new JexlException(node, op + "" error"", xrt);
        }
    }","  public void test22()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      JexlOptions jexlOptions0 = engine0.options(engine0.EMPTY_CONTEXT);
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[3];
      Scope scope1 = new Scope(scope0, stringArray0);
      Frame frame0 = new Frame(scope1, stringArray0, (-833));
      Interpreter interpreter0 = new Interpreter(engine0, jexlOptions0, engine0.EMPTY_CONTEXT, frame0);
      Operators operators0 = interpreter0.operators;
      ASTConstructorNode aSTConstructorNode0 = new ASTConstructorNode((-833));
      Long long0 = new Long((-833));
      // Undeclared exception!
      try { 
        operators0.contains(aSTConstructorNode0, ""Tm9kN)^r0obasr3#uWs"", jexlOptions0, long0);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // ?: JEXL error : Tm9kN)^r0obasr3#uWs error
         //
         verifyException(""org.apache.commons.jexl3.internal.Operators"", e);
      }
  }"
3145,"    protected boolean contains(final JexlNode node, final String op, final Object left, final Object right) {
        final JexlArithmetic arithmetic = interpreter.arithmetic;
        final JexlUberspect uberspect = interpreter.uberspect;
        try {
            // try operator overload
            final Object result = tryOverload(node, JexlOperator.CONTAINS, left, right);
            if (result instanceof Boolean) {
                return (Boolean) result;
            }
            // use arithmetic / pattern matching ?
            final Boolean matched = arithmetic.contains(left, right);
            if (matched != null) {
                return matched;
            }
            // try a contains method (duck type set)
            try {
                final Object[] argv = {right};
                JexlMethod vm = uberspect.getMethod(left, ""contains"", argv);
                if (returnsBoolean(vm)) {
                    return (Boolean) vm.invoke(left, argv);
                }
                if (arithmetic.narrowArguments(argv)) {
                    vm = uberspect.getMethod(left, ""contains"", argv);
                    if (returnsBoolean(vm)) {
                        return (Boolean) vm.invoke(left, argv);
                    }
                }
            } catch (final Exception e) {
                throw new JexlException(node, op + "" error"", e);
            }
            // defaults to equal
            return arithmetic.equals(left, right);
        } catch (final ArithmeticException xrt) {
            throw new JexlException(node, op + "" error"", xrt);
        }
    }","  public void test23()  throws Throwable  {
      Engine engine0 = new Engine();
      JexlOptions jexlOptions0 = engine0.options((JexlContext) null);
      Interpreter interpreter0 = engine0.createInterpreter((JexlContext) null, (Frame) null, jexlOptions0);
      Operators operators0 = interpreter0.operators;
      Parser parser0 = engine0.parser;
      ASTEmptyFunction aSTEmptyFunction0 = new ASTEmptyFunction(parser0, 1286);
      boolean boolean0 = operators0.contains(aSTEmptyFunction0, (String) null, (Object) null, aSTEmptyFunction0);
}"
3146,"    protected boolean endsWith(final JexlNode node, final String operator, final Object left, final Object right) {
        final JexlArithmetic arithmetic = interpreter.arithmetic;
        final JexlUberspect uberspect = interpreter.uberspect;
        try {
            // try operator overload
            final Object result = tryOverload(node, JexlOperator.ENDSWITH, left, right);
            if (result instanceof Boolean) {
                return (Boolean) result;
            }
            // use arithmetic / pattern matching ?
            final Boolean matched = arithmetic.endsWith(left, right);
            if (matched != null) {
                return matched;
            }
            // try a endsWith method (duck type)
            try {
                final Object[] argv = {right};
                JexlMethod vm = uberspect.getMethod(left, ""endsWith"", argv);
                if (returnsBoolean(vm)) {
                    return (Boolean) vm.invoke(left, argv);
                }
                if (arithmetic.narrowArguments(argv)) {
                    vm = uberspect.getMethod(left, ""endsWith"", argv);
                    if (returnsBoolean(vm)) {
                        return (Boolean) vm.invoke(left, argv);
                    }
                }
            } catch (final Exception e) {
                throw new JexlException(node, operator + "" error"", e);
            }
            // defaults to equal
            return arithmetic.equals(left, right);
        } catch (final ArithmeticException xrt) {
            throw new JexlException(node, operator + "" error"", xrt);
        }
    }","  public void test24()  throws Throwable  {
      Engine engine0 = new Engine();
      TemplateInterpreter.Arguments templateInterpreter_Arguments0 = new TemplateInterpreter.Arguments(engine0);
      TemplateInterpreter templateInterpreter0 = new TemplateInterpreter(templateInterpreter_Arguments0);
      Operators operators0 = templateInterpreter0.operators;
      ASTFunctionNode aSTFunctionNode0 = new ASTFunctionNode(0);
      boolean boolean0 = operators0.endsWith(aSTFunctionNode0, """", engine0, """");
}"
3147,"    protected boolean endsWith(final JexlNode node, final String operator, final Object left, final Object right) {
        final JexlArithmetic arithmetic = interpreter.arithmetic;
        final JexlUberspect uberspect = interpreter.uberspect;
        try {
            // try operator overload
            final Object result = tryOverload(node, JexlOperator.ENDSWITH, left, right);
            if (result instanceof Boolean) {
                return (Boolean) result;
            }
            // use arithmetic / pattern matching ?
            final Boolean matched = arithmetic.endsWith(left, right);
            if (matched != null) {
                return matched;
            }
            // try a endsWith method (duck type)
            try {
                final Object[] argv = {right};
                JexlMethod vm = uberspect.getMethod(left, ""endsWith"", argv);
                if (returnsBoolean(vm)) {
                    return (Boolean) vm.invoke(left, argv);
                }
                if (arithmetic.narrowArguments(argv)) {
                    vm = uberspect.getMethod(left, ""endsWith"", argv);
                    if (returnsBoolean(vm)) {
                        return (Boolean) vm.invoke(left, argv);
                    }
                }
            } catch (final Exception e) {
                throw new JexlException(node, operator + "" error"", e);
            }
            // defaults to equal
            return arithmetic.equals(left, right);
        } catch (final ArithmeticException xrt) {
            throw new JexlException(node, operator + "" error"", xrt);
        }
    }","  public void test25()  throws Throwable  {
      Engine engine0 = new Engine();
      TemplateInterpreter.Arguments templateInterpreter_Arguments0 = new TemplateInterpreter.Arguments(engine0);
      TemplateInterpreter templateInterpreter0 = new TemplateInterpreter(templateInterpreter_Arguments0);
      Operators operators0 = templateInterpreter0.operators;
      ASTFunctionNode aSTFunctionNode0 = new ASTFunctionNode(0);
      boolean boolean0 = operators0.endsWith(aSTFunctionNode0, ""org.apache.commons.jexl3.internal.Operators$1"", ""org.apache.commons.jexl3.internal.Operators$1"", ""org.apache.commons.jexl3.internal.Operators$1"");
}"
3148,"    protected boolean endsWith(final JexlNode node, final String operator, final Object left, final Object right) {
        final JexlArithmetic arithmetic = interpreter.arithmetic;
        final JexlUberspect uberspect = interpreter.uberspect;
        try {
            // try operator overload
            final Object result = tryOverload(node, JexlOperator.ENDSWITH, left, right);
            if (result instanceof Boolean) {
                return (Boolean) result;
            }
            // use arithmetic / pattern matching ?
            final Boolean matched = arithmetic.endsWith(left, right);
            if (matched != null) {
                return matched;
            }
            // try a endsWith method (duck type)
            try {
                final Object[] argv = {right};
                JexlMethod vm = uberspect.getMethod(left, ""endsWith"", argv);
                if (returnsBoolean(vm)) {
                    return (Boolean) vm.invoke(left, argv);
                }
                if (arithmetic.narrowArguments(argv)) {
                    vm = uberspect.getMethod(left, ""endsWith"", argv);
                    if (returnsBoolean(vm)) {
                        return (Boolean) vm.invoke(left, argv);
                    }
                }
            } catch (final Exception e) {
                throw new JexlException(node, operator + "" error"", e);
            }
            // defaults to equal
            return arithmetic.equals(left, right);
        } catch (final ArithmeticException xrt) {
            throw new JexlException(node, operator + "" error"", xrt);
        }
    }","  public void test26()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      TemplateInterpreter.Arguments templateInterpreter_Arguments0 = new TemplateInterpreter.Arguments(engine0);
      TemplateInterpreter templateInterpreter0 = new TemplateInterpreter(templateInterpreter_Arguments0);
      Operators operators0 = templateInterpreter0.operators;
      JexlOperator jexlOperator0 = JexlOperator.SELF_DIVIDE;
      ASTNRNode aSTNRNode0 = new ASTNRNode((-702));
      Short short0 = new Short((short)28);
      // Undeclared exception!
      try { 
        operators0.endsWith(aSTNRNode0, ""uTzq5R"", jexlOperator0, short0);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // ?: JEXL error : uTzq5R error
         //
         verifyException(""org.apache.commons.jexl3.internal.Operators"", e);
      }
  }"
3149,"    protected boolean startsWith(final JexlNode node, final String operator, final Object left, final Object right) {
        final JexlArithmetic arithmetic = interpreter.arithmetic;
        final JexlUberspect uberspect = interpreter.uberspect;
        try {
            // try operator overload
            final Object result = tryOverload(node, JexlOperator.STARTSWITH, left, right);
            if (result instanceof Boolean) {
                return (Boolean) result;
            }
            // use arithmetic / pattern matching ?
            final Boolean matched = arithmetic.startsWith(left, right);
            if (matched != null) {
                return matched;
            }
            // try a startsWith method (duck type)
            try {
                final Object[] argv = {right};
                JexlMethod vm = uberspect.getMethod(left, ""startsWith"", argv);
                if (returnsBoolean(vm)) {
                    return (Boolean) vm.invoke(left, argv);
                }
                if (arithmetic.narrowArguments(argv)) {
                    vm = uberspect.getMethod(left, ""startsWith"", argv);
                    if (returnsBoolean(vm)) {
                        return (Boolean) vm.invoke(left, argv);
                    }
                }
            } catch (final Exception e) {
                throw new JexlException(node, operator + "" error"", e);
            }
            // defaults to equal
            return arithmetic.equals(left, right);
        } catch (final ArithmeticException xrt) {
            throw new JexlException(node, operator + "" error"", xrt);
        }
    }","  public void test27()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      JexlOptions jexlOptions0 = engine0.options(engine0.EMPTY_CONTEXT);
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[3];
      Scope scope1 = new Scope(scope0, stringArray0);
      Frame frame0 = new Frame(scope1, stringArray0, (-833));
      Interpreter interpreter0 = new Interpreter(engine0, jexlOptions0, engine0.EMPTY_CONTEXT, frame0);
      Operators operators0 = interpreter0.operators;
      ASTConstructorNode aSTConstructorNode0 = new ASTConstructorNode((-833));
      Integer integer0 = new Integer((-833));
      Long long0 = new Long((-833));
      boolean boolean0 = operators0.startsWith(aSTConstructorNode0, ""Tm9kN)^r0obasr3#uWs"", integer0, long0);
}"
3150,"    protected boolean startsWith(final JexlNode node, final String operator, final Object left, final Object right) {
        final JexlArithmetic arithmetic = interpreter.arithmetic;
        final JexlUberspect uberspect = interpreter.uberspect;
        try {
            // try operator overload
            final Object result = tryOverload(node, JexlOperator.STARTSWITH, left, right);
            if (result instanceof Boolean) {
                return (Boolean) result;
            }
            // use arithmetic / pattern matching ?
            final Boolean matched = arithmetic.startsWith(left, right);
            if (matched != null) {
                return matched;
            }
            // try a startsWith method (duck type)
            try {
                final Object[] argv = {right};
                JexlMethod vm = uberspect.getMethod(left, ""startsWith"", argv);
                if (returnsBoolean(vm)) {
                    return (Boolean) vm.invoke(left, argv);
                }
                if (arithmetic.narrowArguments(argv)) {
                    vm = uberspect.getMethod(left, ""startsWith"", argv);
                    if (returnsBoolean(vm)) {
                        return (Boolean) vm.invoke(left, argv);
                    }
                }
            } catch (final Exception e) {
                throw new JexlException(node, operator + "" error"", e);
            }
            // defaults to equal
            return arithmetic.equals(left, right);
        } catch (final ArithmeticException xrt) {
            throw new JexlException(node, operator + "" error"", xrt);
        }
    }","  public void test28()  throws Throwable  {
      Engine engine0 = new Engine();
      Interpreter interpreter0 = new Interpreter(engine0, (JexlOptions) null, engine0.EMPTY_CONTEXT, (Frame) null);
      Operators operators0 = new Operators(interpreter0);
      ASTNSWNode aSTNSWNode0 = new ASTNSWNode(0);
      Long long0 = new Long(0L);
      // Undeclared exception!
      try { 
        operators0.startsWith(aSTNSWNode0, ""W<Mn:?tv;B@a}k]"", long0, interpreter0);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // ?: JEXL error : W<Mn:?tv;B@a}k] error
         //
         verifyException(""org.apache.commons.jexl3.internal.Operators"", e);
      }
  }"
3151,"    protected boolean startsWith(final JexlNode node, final String operator, final Object left, final Object right) {
        final JexlArithmetic arithmetic = interpreter.arithmetic;
        final JexlUberspect uberspect = interpreter.uberspect;
        try {
            // try operator overload
            final Object result = tryOverload(node, JexlOperator.STARTSWITH, left, right);
            if (result instanceof Boolean) {
                return (Boolean) result;
            }
            // use arithmetic / pattern matching ?
            final Boolean matched = arithmetic.startsWith(left, right);
            if (matched != null) {
                return matched;
            }
            // try a startsWith method (duck type)
            try {
                final Object[] argv = {right};
                JexlMethod vm = uberspect.getMethod(left, ""startsWith"", argv);
                if (returnsBoolean(vm)) {
                    return (Boolean) vm.invoke(left, argv);
                }
                if (arithmetic.narrowArguments(argv)) {
                    vm = uberspect.getMethod(left, ""startsWith"", argv);
                    if (returnsBoolean(vm)) {
                        return (Boolean) vm.invoke(left, argv);
                    }
                }
            } catch (final Exception e) {
                throw new JexlException(node, operator + "" error"", e);
            }
            // defaults to equal
            return arithmetic.equals(left, right);
        } catch (final ArithmeticException xrt) {
            throw new JexlException(node, operator + "" error"", xrt);
        }
    }","  public void test29()  throws Throwable  {
      Engine engine0 = new Engine();
      Interpreter interpreter0 = new Interpreter(engine0, (JexlOptions) null, engine0.EMPTY_CONTEXT, (Frame) null);
      Operators operators0 = new Operators(interpreter0);
      ASTNSWNode aSTNSWNode0 = new ASTNSWNode(0);
      boolean boolean0 = operators0.startsWith(aSTNSWNode0, """", interpreter0, (Object) null);
}"
3152,"    protected Object tryAssignOverload(final JexlNode node, final JexlOperator operator, final Object...args) {
        final JexlArithmetic arithmetic = interpreter.arithmetic;
        if (args.length != operator.getArity()) {
            return JexlEngine.TRY_FAILED;
        }
        // try to call overload with side effect
        Object result = tryOverload(node, operator, args);
        if (result != JexlEngine.TRY_FAILED) {
            return result;
        }
        // call base operator
        final JexlOperator base = operator.getBaseOperator();
        if (base == null) {
            throw new IllegalArgumentException(""must be called with a side-effect operator"");
        }
        if (operators != null && operators.overloads(base)) {
            // in case there is an overload on the base operator
            try {
                final JexlMethod vm = operators.getOperator(base, args);
                if (vm != null) {
                    result = vm.invoke(arithmetic, args);
                    if (result != JexlEngine.TRY_FAILED) {
                        return result;
                    }
                }
            } catch (final Exception xany) {
                interpreter.operatorError(node, base, xany);
            }
        }
        // base eval
        try {
            switch (operator) {
                case SELF_ADD:
                    return arithmetic.add(args[0], args[1]);
                case SELF_SUBTRACT:
                    return arithmetic.subtract(args[0], args[1]);
                case SELF_MULTIPLY:
                    return arithmetic.multiply(args[0], args[1]);
                case SELF_DIVIDE:
                    return arithmetic.divide(args[0], args[1]);
                case SELF_MOD:
                    return arithmetic.mod(args[0], args[1]);
                case SELF_AND:
                    return arithmetic.and(args[0], args[1]);
                case SELF_OR:
                    return arithmetic.or(args[0], args[1]);
                case SELF_XOR:
                    return arithmetic.xor(args[0], args[1]);
                default:
                    // unexpected, new operator added?
                    throw new UnsupportedOperationException(operator.getOperatorSymbol());
            }
        } catch (final Exception xany) {
            interpreter.operatorError(node, base, xany);
        }
        return JexlEngine.TRY_FAILED;
    }","  public void test30()  throws Throwable  {
      Engine engine0 = new Engine();
      JexlOptions jexlOptions0 = new JexlOptions();
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[2];
      Scope scope1 = new Scope(scope0, stringArray0);
      Frame frame0 = new Frame(scope1, stringArray0, (-1637));
      Interpreter interpreter0 = new Interpreter(engine0, jexlOptions0, engine0.EMPTY_CONTEXT, frame0);
      Operators operators0 = interpreter0.operators;
      ASTAnnotatedStatement aSTAnnotatedStatement0 = new ASTAnnotatedStatement((-1637));
      JexlOperator jexlOperator0 = JexlOperator.SELF_OR;
      // Undeclared exception!
      try { 
        operators0.tryAssignOverload(aSTAnnotatedStatement0, jexlOperator0, stringArray0);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // ?: error calling operator '|' caused by null operand
         //
         verifyException(""org.apache.commons.jexl3.internal.InterpreterBase"", e);
      }
  }"
3153,"    protected Object tryAssignOverload(final JexlNode node, final JexlOperator operator, final Object...args) {
        final JexlArithmetic arithmetic = interpreter.arithmetic;
        if (args.length != operator.getArity()) {
            return JexlEngine.TRY_FAILED;
        }
        // try to call overload with side effect
        Object result = tryOverload(node, operator, args);
        if (result != JexlEngine.TRY_FAILED) {
            return result;
        }
        // call base operator
        final JexlOperator base = operator.getBaseOperator();
        if (base == null) {
            throw new IllegalArgumentException(""must be called with a side-effect operator"");
        }
        if (operators != null && operators.overloads(base)) {
            // in case there is an overload on the base operator
            try {
                final JexlMethod vm = operators.getOperator(base, args);
                if (vm != null) {
                    result = vm.invoke(arithmetic, args);
                    if (result != JexlEngine.TRY_FAILED) {
                        return result;
                    }
                }
            } catch (final Exception xany) {
                interpreter.operatorError(node, base, xany);
            }
        }
        // base eval
        try {
            switch (operator) {
                case SELF_ADD:
                    return arithmetic.add(args[0], args[1]);
                case SELF_SUBTRACT:
                    return arithmetic.subtract(args[0], args[1]);
                case SELF_MULTIPLY:
                    return arithmetic.multiply(args[0], args[1]);
                case SELF_DIVIDE:
                    return arithmetic.divide(args[0], args[1]);
                case SELF_MOD:
                    return arithmetic.mod(args[0], args[1]);
                case SELF_AND:
                    return arithmetic.and(args[0], args[1]);
                case SELF_OR:
                    return arithmetic.or(args[0], args[1]);
                case SELF_XOR:
                    return arithmetic.xor(args[0], args[1]);
                default:
                    // unexpected, new operator added?
                    throw new UnsupportedOperationException(operator.getOperatorSymbol());
            }
        } catch (final Exception xany) {
            interpreter.operatorError(node, base, xany);
        }
        return JexlEngine.TRY_FAILED;
    }","  public void test31()  throws Throwable  {
      Engine engine0 = new Engine();
      TemplateInterpreter.Arguments templateInterpreter_Arguments0 = new TemplateInterpreter.Arguments(engine0);
      TemplateInterpreter templateInterpreter0 = new TemplateInterpreter(templateInterpreter_Arguments0);
      Operators operators0 = templateInterpreter0.operators;
      String[] stringArray0 = new String[2];
      ASTFunctionNode aSTFunctionNode0 = new ASTFunctionNode(0);
      JexlOperator jexlOperator0 = JexlOperator.SELF_AND;
      // Undeclared exception!
      try { 
        operators0.tryAssignOverload(aSTFunctionNode0, jexlOperator0, stringArray0);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // ?: error calling operator '&' caused by null operand
         //
         verifyException(""org.apache.commons.jexl3.internal.InterpreterBase"", e);
      }
  }"
3154,"    protected Object tryAssignOverload(final JexlNode node, final JexlOperator operator, final Object...args) {
        final JexlArithmetic arithmetic = interpreter.arithmetic;
        if (args.length != operator.getArity()) {
            return JexlEngine.TRY_FAILED;
        }
        // try to call overload with side effect
        Object result = tryOverload(node, operator, args);
        if (result != JexlEngine.TRY_FAILED) {
            return result;
        }
        // call base operator
        final JexlOperator base = operator.getBaseOperator();
        if (base == null) {
            throw new IllegalArgumentException(""must be called with a side-effect operator"");
        }
        if (operators != null && operators.overloads(base)) {
            // in case there is an overload on the base operator
            try {
                final JexlMethod vm = operators.getOperator(base, args);
                if (vm != null) {
                    result = vm.invoke(arithmetic, args);
                    if (result != JexlEngine.TRY_FAILED) {
                        return result;
                    }
                }
            } catch (final Exception xany) {
                interpreter.operatorError(node, base, xany);
            }
        }
        // base eval
        try {
            switch (operator) {
                case SELF_ADD:
                    return arithmetic.add(args[0], args[1]);
                case SELF_SUBTRACT:
                    return arithmetic.subtract(args[0], args[1]);
                case SELF_MULTIPLY:
                    return arithmetic.multiply(args[0], args[1]);
                case SELF_DIVIDE:
                    return arithmetic.divide(args[0], args[1]);
                case SELF_MOD:
                    return arithmetic.mod(args[0], args[1]);
                case SELF_AND:
                    return arithmetic.and(args[0], args[1]);
                case SELF_OR:
                    return arithmetic.or(args[0], args[1]);
                case SELF_XOR:
                    return arithmetic.xor(args[0], args[1]);
                default:
                    // unexpected, new operator added?
                    throw new UnsupportedOperationException(operator.getOperatorSymbol());
            }
        } catch (final Exception xany) {
            interpreter.operatorError(node, base, xany);
        }
        return JexlEngine.TRY_FAILED;
    }","  public void test32()  throws Throwable  {
      Engine engine0 = new Engine();
      JexlOptions jexlOptions0 = new JexlOptions();
      Interpreter interpreter0 = engine0.createInterpreter((JexlContext) null, (Frame) null, jexlOptions0);
      Operators operators0 = interpreter0.operators;
      ASTForeachStatement aSTForeachStatement0 = new ASTForeachStatement(5);
      JexlOperator jexlOperator0 = JexlOperator.SELF_DIVIDE;
      Object[] objectArray0 = new Object[2];
      // Undeclared exception!
      try { 
        operators0.tryAssignOverload(aSTForeachStatement0, jexlOperator0, objectArray0);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // ?: error calling operator '/' caused by null operand
         //
         verifyException(""org.apache.commons.jexl3.internal.InterpreterBase"", e);
      }
  }"
3155,"    protected Object tryAssignOverload(final JexlNode node, final JexlOperator operator, final Object...args) {
        final JexlArithmetic arithmetic = interpreter.arithmetic;
        if (args.length != operator.getArity()) {
            return JexlEngine.TRY_FAILED;
        }
        // try to call overload with side effect
        Object result = tryOverload(node, operator, args);
        if (result != JexlEngine.TRY_FAILED) {
            return result;
        }
        // call base operator
        final JexlOperator base = operator.getBaseOperator();
        if (base == null) {
            throw new IllegalArgumentException(""must be called with a side-effect operator"");
        }
        if (operators != null && operators.overloads(base)) {
            // in case there is an overload on the base operator
            try {
                final JexlMethod vm = operators.getOperator(base, args);
                if (vm != null) {
                    result = vm.invoke(arithmetic, args);
                    if (result != JexlEngine.TRY_FAILED) {
                        return result;
                    }
                }
            } catch (final Exception xany) {
                interpreter.operatorError(node, base, xany);
            }
        }
        // base eval
        try {
            switch (operator) {
                case SELF_ADD:
                    return arithmetic.add(args[0], args[1]);
                case SELF_SUBTRACT:
                    return arithmetic.subtract(args[0], args[1]);
                case SELF_MULTIPLY:
                    return arithmetic.multiply(args[0], args[1]);
                case SELF_DIVIDE:
                    return arithmetic.divide(args[0], args[1]);
                case SELF_MOD:
                    return arithmetic.mod(args[0], args[1]);
                case SELF_AND:
                    return arithmetic.and(args[0], args[1]);
                case SELF_OR:
                    return arithmetic.or(args[0], args[1]);
                case SELF_XOR:
                    return arithmetic.xor(args[0], args[1]);
                default:
                    // unexpected, new operator added?
                    throw new UnsupportedOperationException(operator.getOperatorSymbol());
            }
        } catch (final Exception xany) {
            interpreter.operatorError(node, base, xany);
        }
        return JexlEngine.TRY_FAILED;
    }","  public void test33()  throws Throwable  {
      Engine engine0 = new Engine();
      JexlOptions jexlOptions0 = engine0.options((JexlContext) null);
      Interpreter interpreter0 = engine0.createInterpreter((JexlContext) null, (Frame) null, jexlOptions0);
      Operators operators0 = new Operators(interpreter0);
      ASTForeachStatement aSTForeachStatement0 = new ASTForeachStatement(5);
      JexlOperator jexlOperator0 = JexlOperator.SELF_MULTIPLY;
      Object[] objectArray0 = new Object[2];
      // Undeclared exception!
      try { 
        operators0.tryAssignOverload(aSTForeachStatement0, jexlOperator0, objectArray0);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // ?: error calling operator '*' caused by null operand
         //
         verifyException(""org.apache.commons.jexl3.internal.InterpreterBase"", e);
      }
  }"
3156,"    protected Object tryAssignOverload(final JexlNode node, final JexlOperator operator, final Object...args) {
        final JexlArithmetic arithmetic = interpreter.arithmetic;
        if (args.length != operator.getArity()) {
            return JexlEngine.TRY_FAILED;
        }
        // try to call overload with side effect
        Object result = tryOverload(node, operator, args);
        if (result != JexlEngine.TRY_FAILED) {
            return result;
        }
        // call base operator
        final JexlOperator base = operator.getBaseOperator();
        if (base == null) {
            throw new IllegalArgumentException(""must be called with a side-effect operator"");
        }
        if (operators != null && operators.overloads(base)) {
            // in case there is an overload on the base operator
            try {
                final JexlMethod vm = operators.getOperator(base, args);
                if (vm != null) {
                    result = vm.invoke(arithmetic, args);
                    if (result != JexlEngine.TRY_FAILED) {
                        return result;
                    }
                }
            } catch (final Exception xany) {
                interpreter.operatorError(node, base, xany);
            }
        }
        // base eval
        try {
            switch (operator) {
                case SELF_ADD:
                    return arithmetic.add(args[0], args[1]);
                case SELF_SUBTRACT:
                    return arithmetic.subtract(args[0], args[1]);
                case SELF_MULTIPLY:
                    return arithmetic.multiply(args[0], args[1]);
                case SELF_DIVIDE:
                    return arithmetic.divide(args[0], args[1]);
                case SELF_MOD:
                    return arithmetic.mod(args[0], args[1]);
                case SELF_AND:
                    return arithmetic.and(args[0], args[1]);
                case SELF_OR:
                    return arithmetic.or(args[0], args[1]);
                case SELF_XOR:
                    return arithmetic.xor(args[0], args[1]);
                default:
                    // unexpected, new operator added?
                    throw new UnsupportedOperationException(operator.getOperatorSymbol());
            }
        } catch (final Exception xany) {
            interpreter.operatorError(node, base, xany);
        }
        return JexlEngine.TRY_FAILED;
    }","  public void test34()  throws Throwable  {
      Engine engine0 = new Engine();
      JexlOptions jexlOptions0 = engine0.options((JexlContext) null);
      Interpreter interpreter0 = engine0.createInterpreter((JexlContext) null, (Frame) null, jexlOptions0);
      Operators operators0 = new Operators(interpreter0);
      ASTForeachStatement aSTForeachStatement0 = new ASTForeachStatement(5);
      JexlOperator jexlOperator0 = JexlOperator.SELF_ADD;
      Object[] objectArray0 = new Object[2];
      // Undeclared exception!
      try { 
        operators0.tryAssignOverload(aSTForeachStatement0, jexlOperator0, objectArray0);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // ?: error calling operator '+' caused by null operand
         //
         verifyException(""org.apache.commons.jexl3.internal.InterpreterBase"", e);
      }
  }"
3157,"    protected Object tryAssignOverload(final JexlNode node, final JexlOperator operator, final Object...args) {
        final JexlArithmetic arithmetic = interpreter.arithmetic;
        if (args.length != operator.getArity()) {
            return JexlEngine.TRY_FAILED;
        }
        // try to call overload with side effect
        Object result = tryOverload(node, operator, args);
        if (result != JexlEngine.TRY_FAILED) {
            return result;
        }
        // call base operator
        final JexlOperator base = operator.getBaseOperator();
        if (base == null) {
            throw new IllegalArgumentException(""must be called with a side-effect operator"");
        }
        if (operators != null && operators.overloads(base)) {
            // in case there is an overload on the base operator
            try {
                final JexlMethod vm = operators.getOperator(base, args);
                if (vm != null) {
                    result = vm.invoke(arithmetic, args);
                    if (result != JexlEngine.TRY_FAILED) {
                        return result;
                    }
                }
            } catch (final Exception xany) {
                interpreter.operatorError(node, base, xany);
            }
        }
        // base eval
        try {
            switch (operator) {
                case SELF_ADD:
                    return arithmetic.add(args[0], args[1]);
                case SELF_SUBTRACT:
                    return arithmetic.subtract(args[0], args[1]);
                case SELF_MULTIPLY:
                    return arithmetic.multiply(args[0], args[1]);
                case SELF_DIVIDE:
                    return arithmetic.divide(args[0], args[1]);
                case SELF_MOD:
                    return arithmetic.mod(args[0], args[1]);
                case SELF_AND:
                    return arithmetic.and(args[0], args[1]);
                case SELF_OR:
                    return arithmetic.or(args[0], args[1]);
                case SELF_XOR:
                    return arithmetic.xor(args[0], args[1]);
                default:
                    // unexpected, new operator added?
                    throw new UnsupportedOperationException(operator.getOperatorSymbol());
            }
        } catch (final Exception xany) {
            interpreter.operatorError(node, base, xany);
        }
        return JexlEngine.TRY_FAILED;
    }","  public void test35()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      TemplateInterpreter.Arguments templateInterpreter_Arguments0 = new TemplateInterpreter.Arguments(engine0);
      TemplateInterpreter templateInterpreter0 = new TemplateInterpreter(templateInterpreter_Arguments0);
      Operators operators0 = new Operators(templateInterpreter0);
      JexlOperator jexlOperator0 = JexlOperator.SELF_XOR;
      Object[] objectArray0 = new Object[2];
      ASTSetMultNode aSTSetMultNode0 = new ASTSetMultNode(1);
      // Undeclared exception!
      try { 
        operators0.tryAssignOverload(aSTSetMultNode0, jexlOperator0, objectArray0);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // ?: error calling operator '^' caused by null operand
         //
         verifyException(""org.apache.commons.jexl3.internal.InterpreterBase"", e);
      }
  }"
3158,"    protected Object tryAssignOverload(final JexlNode node, final JexlOperator operator, final Object...args) {
        final JexlArithmetic arithmetic = interpreter.arithmetic;
        if (args.length != operator.getArity()) {
            return JexlEngine.TRY_FAILED;
        }
        // try to call overload with side effect
        Object result = tryOverload(node, operator, args);
        if (result != JexlEngine.TRY_FAILED) {
            return result;
        }
        // call base operator
        final JexlOperator base = operator.getBaseOperator();
        if (base == null) {
            throw new IllegalArgumentException(""must be called with a side-effect operator"");
        }
        if (operators != null && operators.overloads(base)) {
            // in case there is an overload on the base operator
            try {
                final JexlMethod vm = operators.getOperator(base, args);
                if (vm != null) {
                    result = vm.invoke(arithmetic, args);
                    if (result != JexlEngine.TRY_FAILED) {
                        return result;
                    }
                }
            } catch (final Exception xany) {
                interpreter.operatorError(node, base, xany);
            }
        }
        // base eval
        try {
            switch (operator) {
                case SELF_ADD:
                    return arithmetic.add(args[0], args[1]);
                case SELF_SUBTRACT:
                    return arithmetic.subtract(args[0], args[1]);
                case SELF_MULTIPLY:
                    return arithmetic.multiply(args[0], args[1]);
                case SELF_DIVIDE:
                    return arithmetic.divide(args[0], args[1]);
                case SELF_MOD:
                    return arithmetic.mod(args[0], args[1]);
                case SELF_AND:
                    return arithmetic.and(args[0], args[1]);
                case SELF_OR:
                    return arithmetic.or(args[0], args[1]);
                case SELF_XOR:
                    return arithmetic.xor(args[0], args[1]);
                default:
                    // unexpected, new operator added?
                    throw new UnsupportedOperationException(operator.getOperatorSymbol());
            }
        } catch (final Exception xany) {
            interpreter.operatorError(node, base, xany);
        }
        return JexlEngine.TRY_FAILED;
    }","  public void test36()  throws Throwable  {
      Engine engine0 = new Engine();
      JexlOptions jexlOptions0 = new JexlOptions();
      String[] stringArray0 = new String[1];
      Scope scope0 = new Scope((Scope) null, stringArray0);
      Frame frame0 = new Frame(scope0, stringArray0, 3);
      Interpreter interpreter0 = new Interpreter(engine0, jexlOptions0, engine0.EMPTY_CONTEXT, frame0);
      Operators operators0 = interpreter0.operators;
      StringProvider stringProvider0 = new StringProvider(""TbT_9fI.Ct=GVb"");
      Parser parser0 = new Parser(stringProvider0);
      ASTGENode aSTGENode0 = new ASTGENode(parser0, 3);
      JexlOperator jexlOperator0 = JexlOperator.POSITIVIZE;
      // Undeclared exception!
      try { 
        operators0.tryAssignOverload(aSTGENode0, jexlOperator0, stringArray0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // must be called with a side-effect operator
         //
         verifyException(""org.apache.commons.jexl3.internal.Operators"", e);
      }
  }"
3159,"    protected Object tryAssignOverload(final JexlNode node, final JexlOperator operator, final Object...args) {
        final JexlArithmetic arithmetic = interpreter.arithmetic;
        if (args.length != operator.getArity()) {
            return JexlEngine.TRY_FAILED;
        }
        // try to call overload with side effect
        Object result = tryOverload(node, operator, args);
        if (result != JexlEngine.TRY_FAILED) {
            return result;
        }
        // call base operator
        final JexlOperator base = operator.getBaseOperator();
        if (base == null) {
            throw new IllegalArgumentException(""must be called with a side-effect operator"");
        }
        if (operators != null && operators.overloads(base)) {
            // in case there is an overload on the base operator
            try {
                final JexlMethod vm = operators.getOperator(base, args);
                if (vm != null) {
                    result = vm.invoke(arithmetic, args);
                    if (result != JexlEngine.TRY_FAILED) {
                        return result;
                    }
                }
            } catch (final Exception xany) {
                interpreter.operatorError(node, base, xany);
            }
        }
        // base eval
        try {
            switch (operator) {
                case SELF_ADD:
                    return arithmetic.add(args[0], args[1]);
                case SELF_SUBTRACT:
                    return arithmetic.subtract(args[0], args[1]);
                case SELF_MULTIPLY:
                    return arithmetic.multiply(args[0], args[1]);
                case SELF_DIVIDE:
                    return arithmetic.divide(args[0], args[1]);
                case SELF_MOD:
                    return arithmetic.mod(args[0], args[1]);
                case SELF_AND:
                    return arithmetic.and(args[0], args[1]);
                case SELF_OR:
                    return arithmetic.or(args[0], args[1]);
                case SELF_XOR:
                    return arithmetic.xor(args[0], args[1]);
                default:
                    // unexpected, new operator added?
                    throw new UnsupportedOperationException(operator.getOperatorSymbol());
            }
        } catch (final Exception xany) {
            interpreter.operatorError(node, base, xany);
        }
        return JexlEngine.TRY_FAILED;
    }","  public void test37()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      TemplateInterpreter.Arguments templateInterpreter_Arguments0 = new TemplateInterpreter.Arguments(engine0);
      TemplateInterpreter templateInterpreter0 = new TemplateInterpreter(templateInterpreter_Arguments0);
      Operators operators0 = new Operators(templateInterpreter0);
      ASTBitwiseXorNode aSTBitwiseXorNode0 = new ASTBitwiseXorNode(1490);
      JexlOperator jexlOperator0 = JexlOperator.EMPTY;
      Object[] objectArray0 = new Object[8];
      Object object0 = operators0.tryAssignOverload(aSTBitwiseXorNode0, jexlOperator0, objectArray0);
}"
3160,"    protected Object tryAssignOverload(final JexlNode node, final JexlOperator operator, final Object...args) {
        final JexlArithmetic arithmetic = interpreter.arithmetic;
        if (args.length != operator.getArity()) {
            return JexlEngine.TRY_FAILED;
        }
        // try to call overload with side effect
        Object result = tryOverload(node, operator, args);
        if (result != JexlEngine.TRY_FAILED) {
            return result;
        }
        // call base operator
        final JexlOperator base = operator.getBaseOperator();
        if (base == null) {
            throw new IllegalArgumentException(""must be called with a side-effect operator"");
        }
        if (operators != null && operators.overloads(base)) {
            // in case there is an overload on the base operator
            try {
                final JexlMethod vm = operators.getOperator(base, args);
                if (vm != null) {
                    result = vm.invoke(arithmetic, args);
                    if (result != JexlEngine.TRY_FAILED) {
                        return result;
                    }
                }
            } catch (final Exception xany) {
                interpreter.operatorError(node, base, xany);
            }
        }
        // base eval
        try {
            switch (operator) {
                case SELF_ADD:
                    return arithmetic.add(args[0], args[1]);
                case SELF_SUBTRACT:
                    return arithmetic.subtract(args[0], args[1]);
                case SELF_MULTIPLY:
                    return arithmetic.multiply(args[0], args[1]);
                case SELF_DIVIDE:
                    return arithmetic.divide(args[0], args[1]);
                case SELF_MOD:
                    return arithmetic.mod(args[0], args[1]);
                case SELF_AND:
                    return arithmetic.and(args[0], args[1]);
                case SELF_OR:
                    return arithmetic.or(args[0], args[1]);
                case SELF_XOR:
                    return arithmetic.xor(args[0], args[1]);
                default:
                    // unexpected, new operator added?
                    throw new UnsupportedOperationException(operator.getOperatorSymbol());
            }
        } catch (final Exception xany) {
            interpreter.operatorError(node, base, xany);
        }
        return JexlEngine.TRY_FAILED;
    }","  public void test38()  throws Throwable  {
      Engine engine0 = new Engine();
      JexlOptions jexlOptions0 = engine0.options(engine0.EMPTY_CONTEXT);
      Interpreter interpreter0 = new Interpreter(engine0, jexlOptions0, engine0.EMPTY_CONTEXT, (Frame) null);
      Interpreter interpreter1 = new Interpreter(interpreter0, (JexlArithmetic) null);
      Operators operators0 = new Operators(interpreter1);
      ASTForeachStatement aSTForeachStatement0 = new ASTForeachStatement(5);
      JexlOperator jexlOperator0 = JexlOperator.SELF_SUBTRACT;
      Object[] objectArray0 = new Object[2];
      // Undeclared exception!
      try { 
        operators0.tryAssignOverload(aSTForeachStatement0, jexlOperator0, objectArray0);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // ?: error calling operator '-'
         //
         verifyException(""org.apache.commons.jexl3.internal.InterpreterBase"", e);
      }
  }"
3161,"    protected boolean contains(final JexlNode node, final String op, final Object left, final Object right) {
        final JexlArithmetic arithmetic = interpreter.arithmetic;
        final JexlUberspect uberspect = interpreter.uberspect;
        try {
            // try operator overload
            final Object result = tryOverload(node, JexlOperator.CONTAINS, left, right);
            if (result instanceof Boolean) {
                return (Boolean) result;
            }
            // use arithmetic / pattern matching ?
            final Boolean matched = arithmetic.contains(left, right);
            if (matched != null) {
                return matched;
            }
            // try a contains method (duck type set)
            try {
                final Object[] argv = {right};
                JexlMethod vm = uberspect.getMethod(left, ""contains"", argv);
                if (returnsBoolean(vm)) {
                    return (Boolean) vm.invoke(left, argv);
                }
                if (arithmetic.narrowArguments(argv)) {
                    vm = uberspect.getMethod(left, ""contains"", argv);
                    if (returnsBoolean(vm)) {
                        return (Boolean) vm.invoke(left, argv);
                    }
                }
            } catch (final Exception e) {
                throw new JexlException(node, op + "" error"", e);
            }
            // defaults to equal
            return arithmetic.equals(left, right);
        } catch (final ArithmeticException xrt) {
            throw new JexlException(node, op + "" error"", xrt);
        }
    }","  public void test39()  throws Throwable  {
      Engine engine0 = new Engine();
      ASTJexlScript aSTJexlScript0 = new ASTJexlScript((-799));
      TemplateInterpreter.Arguments templateInterpreter_Arguments0 = new TemplateInterpreter.Arguments(engine0);
      TemplateInterpreter templateInterpreter0 = new TemplateInterpreter(templateInterpreter_Arguments0);
      Operators operators0 = new Operators(templateInterpreter0);
      Short short0 = new Short((short)0);
      // Undeclared exception!
      try { 
        operators0.contains(aSTJexlScript0, ""*<~zDN1C"", short0, ""size"");
        fail(""Expecting exception: NumberFormatException"");
      } catch(NumberFormatException e) {
         //
         // For input string: \""size\""
         //
         verifyException(""java.lang.NumberFormatException"", e);
      }
  }"
3162,"    protected Object tryAssignOverload(final JexlNode node, final JexlOperator operator, final Object...args) {
        final JexlArithmetic arithmetic = interpreter.arithmetic;
        if (args.length != operator.getArity()) {
            return JexlEngine.TRY_FAILED;
        }
        // try to call overload with side effect
        Object result = tryOverload(node, operator, args);
        if (result != JexlEngine.TRY_FAILED) {
            return result;
        }
        // call base operator
        final JexlOperator base = operator.getBaseOperator();
        if (base == null) {
            throw new IllegalArgumentException(""must be called with a side-effect operator"");
        }
        if (operators != null && operators.overloads(base)) {
            // in case there is an overload on the base operator
            try {
                final JexlMethod vm = operators.getOperator(base, args);
                if (vm != null) {
                    result = vm.invoke(arithmetic, args);
                    if (result != JexlEngine.TRY_FAILED) {
                        return result;
                    }
                }
            } catch (final Exception xany) {
                interpreter.operatorError(node, base, xany);
            }
        }
        // base eval
        try {
            switch (operator) {
                case SELF_ADD:
                    return arithmetic.add(args[0], args[1]);
                case SELF_SUBTRACT:
                    return arithmetic.subtract(args[0], args[1]);
                case SELF_MULTIPLY:
                    return arithmetic.multiply(args[0], args[1]);
                case SELF_DIVIDE:
                    return arithmetic.divide(args[0], args[1]);
                case SELF_MOD:
                    return arithmetic.mod(args[0], args[1]);
                case SELF_AND:
                    return arithmetic.and(args[0], args[1]);
                case SELF_OR:
                    return arithmetic.or(args[0], args[1]);
                case SELF_XOR:
                    return arithmetic.xor(args[0], args[1]);
                default:
                    // unexpected, new operator added?
                    throw new UnsupportedOperationException(operator.getOperatorSymbol());
            }
        } catch (final Exception xany) {
            interpreter.operatorError(node, base, xany);
        }
        return JexlEngine.TRY_FAILED;
    }","  public void test40()  throws Throwable  {
      Engine engine0 = new Engine();
      TemplateInterpreter.Arguments templateInterpreter_Arguments0 = new TemplateInterpreter.Arguments(engine0);
      TemplateInterpreter templateInterpreter0 = new TemplateInterpreter(templateInterpreter_Arguments0);
      Operators operators0 = templateInterpreter0.operators;
      String[] stringArray0 = new String[2];
      ASTFunctionNode aSTFunctionNode0 = new ASTFunctionNode(0);
      JexlOperator jexlOperator0 = JexlOperator.SELF_MOD;
      // Undeclared exception!
      try { 
        operators0.tryAssignOverload(aSTFunctionNode0, jexlOperator0, stringArray0);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // ?: error calling operator '%' caused by null operand
         //
         verifyException(""org.apache.commons.jexl3.internal.InterpreterBase"", e);
      }
  }"
3163,"    public Map<Object,Object> create() {
        return map;
    }","  public void test0()  throws Throwable  {
      MapBuilder mapBuilder0 = new MapBuilder(1659);
      Object object0 = new Object();
      mapBuilder0.put(object0, ""2Qw(j[ew:kv"");
      Map<Object, Object> map0 = mapBuilder0.create();
}"
3164,"    public void put(final Object key, final Object value) {
        map.put(key, value);
    }","  public void test1()  throws Throwable  {
      MapBuilder mapBuilder0 = new MapBuilder(1659);
      Object object0 = new Object();
      Map<Object, Object> map0 = mapBuilder0.create();
      mapBuilder0.put(map0, object0);
      // Undeclared exception!
      try { 
        mapBuilder0.put(map0, (Object) null);
        fail(""Expecting exception: StackOverflowError"");
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
3165,"    public MapBuilder(final int size) {
        map = new HashMap<Object, Object>(size);
    }","  public void test2()  throws Throwable  {
      MapBuilder mapBuilder0 = null;
      try {
        mapBuilder0 = new MapBuilder((-146));
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Illegal initial capacity: -146
         //
         verifyException(""java.util.HashMap"", e);
      }
  }"
3166,"    protected Object call(final JexlNode node, final Object target, Object functor, final ASTArguments argNode) {
        cancelCheck(node);
        // evaluate the arguments
        final Object[] argv = visit(argNode, null);
        // get the method name if identifier
        final int symbol;
        final String methodName;
        boolean cacheable = cache;
        boolean isavar = false;
        if (functor instanceof ASTIdentifier) {
            // function call, target is context or namespace (if there was one)
            final ASTIdentifier methodIdentifier = (ASTIdentifier) functor;
            symbol = methodIdentifier.getSymbol();
            methodName = methodIdentifier.getName();
            functor = null;
            // is it a global or local variable ?
            if (target == context) {
                if (frame != null && frame.has(symbol)) {
                    functor = frame.get(symbol);
                    isavar = functor != null;
                } else if (context.has(methodName)) {
                    functor = context.get(methodName);
                    isavar = functor != null;
                }
                // name is a variable, can't be cached
                cacheable &= !isavar;
            }
        } else if (functor instanceof ASTIdentifierAccess) {
            // a method call on target
            methodName = ((ASTIdentifierAccess) functor).getName();
            symbol = -1;
            functor = null;
            cacheable = true;
        } else if (functor != null) {
            // ...(x)(y)
            symbol = -1 - 1; // -2;
            methodName = null;
            cacheable = false;
        } else if (!node.isSafeLhs(isSafe())) {
            return unsolvableMethod(node, ""?(...)"");
        } else {
            // safe lhs
            return null;
        }

        // solving the call site
        final CallDispatcher call = new CallDispatcher(node, cacheable);
        try {
            // do we have a  cached version method/function name ?
            final Object eval = call.tryEval(target, methodName, argv);
            if (JexlEngine.TRY_FAILED != eval) {
                return eval;
            }
            boolean functorp = false;
            boolean narrow = false;
            // pseudo loop to try acquiring methods without and with argument narrowing
            while (true) {
                call.narrow = narrow;
                // direct function or method call
                if (functor == null || functorp) {
                    // try a method or function from context
                    if (call.isTargetMethod(target, methodName, argv)) {
                        return call.eval(methodName);
                    }
                    if (target == context) {
                        // solve 'null' namespace
                        final Object namespace = resolveNamespace(null, node);
                        if (namespace != null
                            && namespace != context
                            && call.isTargetMethod(namespace, methodName, argv)) {
                            return call.eval(methodName);
                        }
                        // do not try context function since this was attempted
                        // 10 lines above...; solve as an arithmetic function
                        if (call.isArithmeticMethod(methodName, argv)) {
                            return call.eval(methodName);
                        }
                        // could not find a method, try as a property of a non-context target (performed once)
                    } else {
                        // try prepending target to arguments and look for
                        // applicable method in context...
                        final Object[] pargv = functionArguments(target, narrow, argv);
                        if (call.isContextMethod(methodName, pargv)) {
                            return call.eval(methodName);
                        }
                        // ...or arithmetic
                        if (call.isArithmeticMethod(methodName, pargv)) {
                            return call.eval(methodName);
                        }
                        // the method may also be a functor stored in a property of the target
                        if (!narrow) {
                            final JexlPropertyGet get = uberspect.getPropertyGet(target, methodName);
                            if (get != null) {
                                functor = get.tryInvoke(target, methodName);
                                functorp = functor != null;
                            }
                        }
                    }
                }
                // this may happen without the above when we are chaining call like x(a)(b)
                // or when a var/symbol or antish var is used as a ""function"" name
                if (functor != null) {
                    // lambda, script or jexl method will do
                    if (functor instanceof JexlScript) {
                        return ((JexlScript) functor).execute(context, argv);
                    }
                    if (functor instanceof JexlMethod) {
                        return ((JexlMethod) functor).invoke(target, argv);
                    }
                    final String mCALL = ""call"";
                    // may be a generic callable, try a 'call' method
                    if (call.isTargetMethod(functor, mCALL, argv)) {
                        return call.eval(mCALL);
                    }
                    // functor is a var, may be method is a global one ?
                    if (isavar && target == context) {
                        if (call.isContextMethod(methodName, argv)) {
                            return call.eval(methodName);
                        }
                        if (call.isArithmeticMethod(methodName, argv)) {
                            return call.eval(methodName);
                        }
                    }
                    // try prepending functor to arguments and look for
                    // context or arithmetic function called 'call'
                    final Object[] pargv = functionArguments(functor, narrow, argv);
                    if (call.isContextMethod(mCALL, pargv)) {
                        return call.eval(mCALL);
                    }
                    if (call.isArithmeticMethod(mCALL, pargv)) {
                        return call.eval(mCALL);
                    }
                }
                // if we did not find an exact method by name and we haven't tried yet,
                // attempt to narrow the parameters and if this succeeds, try again in next loop
                if (narrow || !arithmetic.narrowArguments(argv)) {
                    break;
                }
                narrow = true;
                // continue;
            }
        } catch (JexlException.Method xmethod) {
            // ignore and handle at end; treat as an inner discover that fails
        } catch (final JexlException.TryFailed xany) {
            throw invocationException(node, methodName, xany);
        } catch (final JexlException xthru) {
            throw xthru;
        } catch (final Exception xany) {
            throw invocationException(node, methodName, xany);
        }
        // we have either evaluated and returned or no method was found
        return node.isSafeLhs(isSafe())
                ? null
                : unsolvableMethod(node, methodName, argv);
    }","  public void test0()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      Double double0 = Double.valueOf(0.0);
      ObjectContext<Double> objectContext0 = new ObjectContext<Double>(engine0, double0);
      JexlOptions jexlOptions0 = engine0.options;
      Interpreter interpreter0 = engine0.createInterpreter(objectContext0, (Frame) null, jexlOptions0);
      TemplateInterpreter.Arguments templateInterpreter_Arguments0 = new TemplateInterpreter.Arguments(engine0);
      ASTAnnotatedStatement aSTAnnotatedStatement0 = new ASTAnnotatedStatement(60);
      Interpreter.AnnotatedCall interpreter_AnnotatedCall0 = interpreter0.new AnnotatedCall(aSTAnnotatedStatement0, (-852), templateInterpreter_Arguments0);
      try { 
        interpreter_AnnotatedCall0.call();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
3167,"    protected Object call(final JexlNode node, final Object target, Object functor, final ASTArguments argNode) {
        cancelCheck(node);
        // evaluate the arguments
        final Object[] argv = visit(argNode, null);
        // get the method name if identifier
        final int symbol;
        final String methodName;
        boolean cacheable = cache;
        boolean isavar = false;
        if (functor instanceof ASTIdentifier) {
            // function call, target is context or namespace (if there was one)
            final ASTIdentifier methodIdentifier = (ASTIdentifier) functor;
            symbol = methodIdentifier.getSymbol();
            methodName = methodIdentifier.getName();
            functor = null;
            // is it a global or local variable ?
            if (target == context) {
                if (frame != null && frame.has(symbol)) {
                    functor = frame.get(symbol);
                    isavar = functor != null;
                } else if (context.has(methodName)) {
                    functor = context.get(methodName);
                    isavar = functor != null;
                }
                // name is a variable, can't be cached
                cacheable &= !isavar;
            }
        } else if (functor instanceof ASTIdentifierAccess) {
            // a method call on target
            methodName = ((ASTIdentifierAccess) functor).getName();
            symbol = -1;
            functor = null;
            cacheable = true;
        } else if (functor != null) {
            // ...(x)(y)
            symbol = -1 - 1; // -2;
            methodName = null;
            cacheable = false;
        } else if (!node.isSafeLhs(isSafe())) {
            return unsolvableMethod(node, ""?(...)"");
        } else {
            // safe lhs
            return null;
        }

        // solving the call site
        final CallDispatcher call = new CallDispatcher(node, cacheable);
        try {
            // do we have a  cached version method/function name ?
            final Object eval = call.tryEval(target, methodName, argv);
            if (JexlEngine.TRY_FAILED != eval) {
                return eval;
            }
            boolean functorp = false;
            boolean narrow = false;
            // pseudo loop to try acquiring methods without and with argument narrowing
            while (true) {
                call.narrow = narrow;
                // direct function or method call
                if (functor == null || functorp) {
                    // try a method or function from context
                    if (call.isTargetMethod(target, methodName, argv)) {
                        return call.eval(methodName);
                    }
                    if (target == context) {
                        // solve 'null' namespace
                        final Object namespace = resolveNamespace(null, node);
                        if (namespace != null
                            && namespace != context
                            && call.isTargetMethod(namespace, methodName, argv)) {
                            return call.eval(methodName);
                        }
                        // do not try context function since this was attempted
                        // 10 lines above...; solve as an arithmetic function
                        if (call.isArithmeticMethod(methodName, argv)) {
                            return call.eval(methodName);
                        }
                        // could not find a method, try as a property of a non-context target (performed once)
                    } else {
                        // try prepending target to arguments and look for
                        // applicable method in context...
                        final Object[] pargv = functionArguments(target, narrow, argv);
                        if (call.isContextMethod(methodName, pargv)) {
                            return call.eval(methodName);
                        }
                        // ...or arithmetic
                        if (call.isArithmeticMethod(methodName, pargv)) {
                            return call.eval(methodName);
                        }
                        // the method may also be a functor stored in a property of the target
                        if (!narrow) {
                            final JexlPropertyGet get = uberspect.getPropertyGet(target, methodName);
                            if (get != null) {
                                functor = get.tryInvoke(target, methodName);
                                functorp = functor != null;
                            }
                        }
                    }
                }
                // this may happen without the above when we are chaining call like x(a)(b)
                // or when a var/symbol or antish var is used as a ""function"" name
                if (functor != null) {
                    // lambda, script or jexl method will do
                    if (functor instanceof JexlScript) {
                        return ((JexlScript) functor).execute(context, argv);
                    }
                    if (functor instanceof JexlMethod) {
                        return ((JexlMethod) functor).invoke(target, argv);
                    }
                    final String mCALL = ""call"";
                    // may be a generic callable, try a 'call' method
                    if (call.isTargetMethod(functor, mCALL, argv)) {
                        return call.eval(mCALL);
                    }
                    // functor is a var, may be method is a global one ?
                    if (isavar && target == context) {
                        if (call.isContextMethod(methodName, argv)) {
                            return call.eval(methodName);
                        }
                        if (call.isArithmeticMethod(methodName, argv)) {
                            return call.eval(methodName);
                        }
                    }
                    // try prepending functor to arguments and look for
                    // context or arithmetic function called 'call'
                    final Object[] pargv = functionArguments(functor, narrow, argv);
                    if (call.isContextMethod(mCALL, pargv)) {
                        return call.eval(mCALL);
                    }
                    if (call.isArithmeticMethod(mCALL, pargv)) {
                        return call.eval(mCALL);
                    }
                }
                // if we did not find an exact method by name and we haven't tried yet,
                // attempt to narrow the parameters and if this succeeds, try again in next loop
                if (narrow || !arithmetic.narrowArguments(argv)) {
                    break;
                }
                narrow = true;
                // continue;
            }
        } catch (JexlException.Method xmethod) {
            // ignore and handle at end; treat as an inner discover that fails
        } catch (final JexlException.TryFailed xany) {
            throw invocationException(node, methodName, xany);
        } catch (final JexlException xthru) {
            throw xthru;
        } catch (final Exception xany) {
            throw invocationException(node, methodName, xany);
        }
        // we have either evaluated and returned or no method was found
        return node.isSafeLhs(isSafe())
                ? null
                : unsolvableMethod(node, methodName, argv);
    }","  public void test1()  throws Throwable  {
      Engine engine0 = new Engine();
      TemplateInterpreter.Arguments templateInterpreter_Arguments0 = new TemplateInterpreter.Arguments(engine0);
      TemplateInterpreter templateInterpreter0 = new TemplateInterpreter(templateInterpreter_Arguments0);
      ASTAnnotatedStatement aSTAnnotatedStatement0 = new ASTAnnotatedStatement(601);
      Interpreter.AnnotatedCall interpreter_AnnotatedCall0 = templateInterpreter0.new AnnotatedCall(aSTAnnotatedStatement0, 601, templateInterpreter0);
      try { 
        interpreter_AnnotatedCall0.call();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
3168,"    protected Object visit(final ASTAddNode node, final Object data) {
        final Object left = node.jjtGetChild(0).jjtAccept(this, data);
        final Object right = node.jjtGetChild(1).jjtAccept(this, data);
        try {
            final Object result = operators.tryOverload(node, JexlOperator.ADD, left, right);
            return result != JexlEngine.TRY_FAILED ? result : arithmetic.add(left, right);
        } catch (final ArithmeticException xrt) {
            throw new JexlException(node, ""+ error"", xrt);
        }
    }","  public void test2()  throws Throwable  {
      Engine engine0 = new Engine();
      Object[] objectArray0 = new Object[0];
      Frame frame0 = new Frame((Scope) null, objectArray0, (-3215));
      Parser parser0 = new Parser("""");
      ASTJexlScript aSTJexlScript0 = parser0.JexlScript((Scope) null);
      JexlOptions jexlOptions0 = engine0.options(aSTJexlScript0, (JexlContext) null);
      Interpreter interpreter0 = engine0.createInterpreter((JexlContext) null, frame0, jexlOptions0);
      ASTIfStatement aSTIfStatement0 = new ASTIfStatement(parser0, 3);
      ASTUnaryMinusNode aSTUnaryMinusNode0 = new ASTUnaryMinusNode(parser0, (-3215));
      aSTUnaryMinusNode0.jjtAddChild(aSTIfStatement0, 3);
      // Undeclared exception!
      try { 
        interpreter0.visit(aSTUnaryMinusNode0, (Object) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.internal.Interpreter"", e);
      }
  }"
3169,"    protected Object visitLexicalNode(final JexlNode node, final Object data) {
        block = new LexicalFrame(frame, null);
        try {
            return node.jjtAccept(this, data);
        } finally {
            block = block.pop();
        }
    }","  public void test3()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      ASTJexlScript aSTJexlScript0 = new ASTJexlScript(129);
      Script script0 = new Script(engine0, ""5;OhwE$#"", aSTJexlScript0);
      Object[] objectArray0 = new Object[7];
      TemplateInterpreter.Arguments templateInterpreter_Arguments0 = new TemplateInterpreter.Arguments(engine0);
      TemplateInterpreter templateInterpreter0 = new TemplateInterpreter(templateInterpreter_Arguments0);
      Closure closure0 = new Closure(script0, objectArray0);
      Object object0 = templateInterpreter0.visitLexicalNode(aSTJexlScript0, closure0);
}"
3170,"    protected Object visitLexicalNode(final JexlNode node, final Object data) {
        block = new LexicalFrame(frame, null);
        try {
            return node.jjtAccept(this, data);
        } finally {
            block = block.pop();
        }
    }","  public void test4()  throws Throwable  {
      Engine engine0 = new Engine();
      TemplateInterpreter.Arguments templateInterpreter_Arguments0 = new TemplateInterpreter.Arguments(engine0);
      TemplateInterpreter templateInterpreter0 = new TemplateInterpreter(templateInterpreter_Arguments0);
      ASTExtendedLiteral aSTExtendedLiteral0 = new ASTExtendedLiteral(1642);
      Object object0 = templateInterpreter0.visitLexicalNode(aSTExtendedLiteral0, (Object) null);
}"
3171,"    protected Object visit(final ASTAddNode node, final Object data) {
        final Object left = node.jjtGetChild(0).jjtAccept(this, data);
        final Object right = node.jjtGetChild(1).jjtAccept(this, data);
        try {
            final Object result = operators.tryOverload(node, JexlOperator.ADD, left, right);
            return result != JexlEngine.TRY_FAILED ? result : arithmetic.add(left, right);
        } catch (final ArithmeticException xrt) {
            throw new JexlException(node, ""+ error"", xrt);
        }
    }","  public void test5()  throws Throwable  {
      Engine engine0 = new Engine();
      TemplateInterpreter.Arguments templateInterpreter_Arguments0 = new TemplateInterpreter.Arguments(engine0);
      TemplateInterpreter templateInterpreter0 = new TemplateInterpreter(templateInterpreter_Arguments0);
      String[] stringArray0 = new String[4];
      ASTStringLiteral aSTStringLiteral0 = mock(ASTStringLiteral.class, new ViolatedAssumptionAnswer());
      doReturn(stringArray0[0]).when(aSTStringLiteral0).getLiteral();
      Object object0 = templateInterpreter0.visit(aSTStringLiteral0, stringArray0[0]);
}"
3172,"    protected Object visit(final ASTAddNode node, final Object data) {
        final Object left = node.jjtGetChild(0).jjtAccept(this, data);
        final Object right = node.jjtGetChild(1).jjtAccept(this, data);
        try {
            final Object result = operators.tryOverload(node, JexlOperator.ADD, left, right);
            return result != JexlEngine.TRY_FAILED ? result : arithmetic.add(left, right);
        } catch (final ArithmeticException xrt) {
            throw new JexlException(node, ""+ error"", xrt);
        }
    }","  public void test6()  throws Throwable  {
      Engine engine0 = new Engine();
      TemplateInterpreter.Arguments templateInterpreter_Arguments0 = new TemplateInterpreter.Arguments(engine0);
      TemplateInterpreter templateInterpreter0 = new TemplateInterpreter(templateInterpreter_Arguments0);
      ASTRegexLiteral aSTRegexLiteral0 = mock(ASTRegexLiteral.class, new ViolatedAssumptionAnswer());
      doReturn((Pattern) null).when(aSTRegexLiteral0).getLiteral();
      Object object0 = templateInterpreter0.visit(aSTRegexLiteral0, aSTRegexLiteral0);
}"
3173,"    protected Object visit(final ASTAddNode node, final Object data) {
        final Object left = node.jjtGetChild(0).jjtAccept(this, data);
        final Object right = node.jjtGetChild(1).jjtAccept(this, data);
        try {
            final Object result = operators.tryOverload(node, JexlOperator.ADD, left, right);
            return result != JexlEngine.TRY_FAILED ? result : arithmetic.add(left, right);
        } catch (final ArithmeticException xrt) {
            throw new JexlException(node, ""+ error"", xrt);
        }
    }","  public void test7()  throws Throwable  {
      Engine engine0 = new Engine();
      TemplateInterpreter.Arguments templateInterpreter_Arguments0 = new TemplateInterpreter.Arguments(engine0);
      TemplateInterpreter templateInterpreter0 = new TemplateInterpreter(templateInterpreter_Arguments0);
      ASTExtendedLiteral aSTExtendedLiteral0 = new ASTExtendedLiteral((-929));
      ASTReferenceExpression aSTReferenceExpression0 = mock(ASTReferenceExpression.class, new ViolatedAssumptionAnswer());
      doReturn(aSTExtendedLiteral0).when(aSTReferenceExpression0).jjtGetChild(anyInt());
      ASTExtendedLiteral aSTExtendedLiteral1 = (ASTExtendedLiteral)templateInterpreter0.visit(aSTReferenceExpression0, (Object) null);
}"
3174,"    protected Object visit(final ASTAddNode node, final Object data) {
        final Object left = node.jjtGetChild(0).jjtAccept(this, data);
        final Object right = node.jjtGetChild(1).jjtAccept(this, data);
        try {
            final Object result = operators.tryOverload(node, JexlOperator.ADD, left, right);
            return result != JexlEngine.TRY_FAILED ? result : arithmetic.add(left, right);
        } catch (final ArithmeticException xrt) {
            throw new JexlException(node, ""+ error"", xrt);
        }
    }","  public void test8()  throws Throwable  {
      Engine engine0 = new Engine();
      TemplateInterpreter.Arguments templateInterpreter_Arguments0 = new TemplateInterpreter.Arguments(engine0);
      TemplateInterpreter templateInterpreter0 = new TemplateInterpreter(templateInterpreter_Arguments0);
      ASTNumberLiteral aSTNumberLiteral0 = mock(ASTNumberLiteral.class, new ViolatedAssumptionAnswer());
      doReturn((Number) null).when(aSTNumberLiteral0).getLiteral();
      doReturn(false).when(aSTNumberLiteral0).isInteger();
      Byte byte0 = new Byte((byte)113);
      Object object0 = templateInterpreter0.visit(aSTNumberLiteral0, byte0);
}"
3175,"    protected Object visit(final ASTAddNode node, final Object data) {
        final Object left = node.jjtGetChild(0).jjtAccept(this, data);
        final Object right = node.jjtGetChild(1).jjtAccept(this, data);
        try {
            final Object result = operators.tryOverload(node, JexlOperator.ADD, left, right);
            return result != JexlEngine.TRY_FAILED ? result : arithmetic.add(left, right);
        } catch (final ArithmeticException xrt) {
            throw new JexlException(node, ""+ error"", xrt);
        }
    }","  public void test9()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Engine engine0 = new Engine();
      JexlInfo jexlInfo0 = engine0.createInfo((String) null, 3552, 1162);
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[4];
      Scope scope1 = new Scope(scope0, stringArray0);
      ASTJexlScript aSTJexlScript0 = engine0.parse(jexlInfo0, false, ""org.apache.commons.jexl3.parser.ASTIdentifier"", scope1);
      JexlOptions jexlOptions0 = new JexlOptions();
      Interpreter interpreter0 = engine0.createInterpreter((JexlContext) null, (Frame) null, jexlOptions0);
      Object object0 = interpreter0.visit(aSTJexlScript0, fileSystemHandling0);
}"
3176,"    protected Object visit(final ASTAddNode node, final Object data) {
        final Object left = node.jjtGetChild(0).jjtAccept(this, data);
        final Object right = node.jjtGetChild(1).jjtAccept(this, data);
        try {
            final Object result = operators.tryOverload(node, JexlOperator.ADD, left, right);
            return result != JexlEngine.TRY_FAILED ? result : arithmetic.add(left, right);
        } catch (final ArithmeticException xrt) {
            throw new JexlException(node, ""+ error"", xrt);
        }
    }","  public void test10()  throws Throwable  {
      Engine engine0 = new Engine();
      JexlEngine.EmptyContext jexlEngine_EmptyContext0 = (JexlEngine.EmptyContext)JexlEngine.EMPTY_CONTEXT;
      JexlOptions jexlOptions0 = engine0.options(jexlEngine_EmptyContext0);
      Interpreter interpreter0 = new Interpreter(engine0, jexlOptions0, jexlEngine_EmptyContext0, (Frame) null);
      Parser parser0 = new Parser("""");
      ASTAnnotatedStatement aSTAnnotatedStatement0 = new ASTAnnotatedStatement(parser0, (-1));
      ASTIdentifierAccess aSTIdentifierAccess0 = mock(ASTIdentifierAccess.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(aSTIdentifierAccess0).getIdentifier();
      doReturn(false).when(aSTIdentifierAccess0).isSafe();
      doReturn(false).when(aSTIdentifierAccess0).isTernaryProtected();
      doReturn((JexlInfo) null).when(aSTIdentifierAccess0).jexlInfo();
      doReturn((JexlNode) null).when(aSTIdentifierAccess0).jjtGetParent();
      // Undeclared exception!
      try { 
        interpreter0.visit(aSTIdentifierAccess0, aSTIdentifierAccess0);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // ?: undefined property ''
         //
         verifyException(""org.apache.commons.jexl3.internal.InterpreterBase"", e);
      }
  }"
3177,"    protected Object visit(final ASTAddNode node, final Object data) {
        final Object left = node.jjtGetChild(0).jjtAccept(this, data);
        final Object right = node.jjtGetChild(1).jjtAccept(this, data);
        try {
            final Object result = operators.tryOverload(node, JexlOperator.ADD, left, right);
            return result != JexlEngine.TRY_FAILED ? result : arithmetic.add(left, right);
        } catch (final ArithmeticException xrt) {
            throw new JexlException(node, ""+ error"", xrt);
        }
    }","  public void test11()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      TemplateInterpreter.Arguments templateInterpreter_Arguments0 = new TemplateInterpreter.Arguments(engine0);
      TemplateInterpreter templateInterpreter0 = new TemplateInterpreter(templateInterpreter_Arguments0);
      MockThrowable mockThrowable0 = new MockThrowable();
      JexlException jexlException0 = new JexlException((JexlNode) null, """", mockThrowable0);
      Object object0 = templateInterpreter0.visit((ASTExtendedLiteral) null, jexlException0);
}"
3178,"    protected Object visit(final ASTAddNode node, final Object data) {
        final Object left = node.jjtGetChild(0).jjtAccept(this, data);
        final Object right = node.jjtGetChild(1).jjtAccept(this, data);
        try {
            final Object result = operators.tryOverload(node, JexlOperator.ADD, left, right);
            return result != JexlEngine.TRY_FAILED ? result : arithmetic.add(left, right);
        } catch (final ArithmeticException xrt) {
            throw new JexlException(node, ""+ error"", xrt);
        }
    }","  public void test12()  throws Throwable  {
      Engine engine0 = new Engine();
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[7];
      Scope scope1 = new Scope(scope0, stringArray0);
      Frame frame0 = new Frame(scope1, stringArray0, (-518));
      Interpreter interpreter0 = new Interpreter(engine0, (JexlOptions) null, engine0.EMPTY_CONTEXT, frame0);
      ASTExtendedLiteral aSTExtendedLiteral0 = new ASTExtendedLiteral((-518));
      ASTExtendedLiteral aSTExtendedLiteral1 = (ASTExtendedLiteral)interpreter0.visit(aSTExtendedLiteral0, (Object) null);
}"
3179,"    protected Object visit(final ASTAddNode node, final Object data) {
        final Object left = node.jjtGetChild(0).jjtAccept(this, data);
        final Object right = node.jjtGetChild(1).jjtAccept(this, data);
        try {
            final Object result = operators.tryOverload(node, JexlOperator.ADD, left, right);
            return result != JexlEngine.TRY_FAILED ? result : arithmetic.add(left, right);
        } catch (final ArithmeticException xrt) {
            throw new JexlException(node, ""+ error"", xrt);
        }
    }","  public void test13()  throws Throwable  {
      Engine engine0 = new Engine();
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[7];
      Scope scope1 = new Scope(scope0, stringArray0);
      Frame frame0 = new Frame(scope1, stringArray0, (-518));
      Interpreter interpreter0 = new Interpreter(engine0, (JexlOptions) null, engine0.EMPTY_CONTEXT, frame0);
      ASTArrayAccess aSTArrayAccess0 = new ASTArrayAccess((Parser) null, (-132));
      Object object0 = interpreter0.visit(aSTArrayAccess0, (Object) null);
}"
3180,"    protected Object visit(final ASTAddNode node, final Object data) {
        final Object left = node.jjtGetChild(0).jjtAccept(this, data);
        final Object right = node.jjtGetChild(1).jjtAccept(this, data);
        try {
            final Object result = operators.tryOverload(node, JexlOperator.ADD, left, right);
            return result != JexlEngine.TRY_FAILED ? result : arithmetic.add(left, right);
        } catch (final ArithmeticException xrt) {
            throw new JexlException(node, ""+ error"", xrt);
        }
    }","  public void test14()  throws Throwable  {
      Engine engine0 = new Engine();
      Interpreter interpreter0 = engine0.createInterpreter(engine0.EMPTY_CONTEXT, (Frame) null, (JexlOptions) null);
      ASTArguments aSTArguments0 = new ASTArguments(44);
      Object[] objectArray0 = interpreter0.visit(aSTArguments0, engine0);
}"
3181,"    protected Object runClosure(final Closure closure, final Object data) {
        final ASTJexlScript script = closure.getScript();
        block = new LexicalFrame(frame, block).defineArgs();
        try {
            final JexlNode body = script.jjtGetChild(script.jjtGetNumChildren() - 1);
            return interpret(body);
        } finally {
            block = block.pop();
        }
    }","  public void test15()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      Double double0 = Double.valueOf(0.0);
      ObjectContext<Double> objectContext0 = new ObjectContext<Double>(engine0, double0);
      JexlOptions jexlOptions0 = engine0.options;
      Interpreter interpreter0 = engine0.createInterpreter(objectContext0, (Frame) null, jexlOptions0);
      ASTJexlLambda aSTJexlLambda0 = mock(ASTJexlLambda.class, new ViolatedAssumptionAnswer());
      doReturn((Frame) null).when(aSTJexlLambda0).createFrame(any(org.apache.commons.jexl3.internal.Frame.class) , any(java.lang.Object[].class));
      doReturn((Object) null).when(aSTJexlLambda0).jjtAccept(any(org.apache.commons.jexl3.parser.ParserVisitor.class) , any());
      Closure closure0 = new Closure(interpreter0, aSTJexlLambda0);
      ASTJexlScript aSTJexlScript0 = closure0.getScript();
      ASTJexlLambda aSTJexlLambda1 = mock(ASTJexlLambda.class, new ViolatedAssumptionAnswer());
      doReturn((Frame) null).when(aSTJexlLambda1).createFrame(any(org.apache.commons.jexl3.internal.Frame.class) , any(java.lang.Object[].class));
      doReturn(aSTJexlScript0).when(aSTJexlLambda1).jjtGetChild(anyInt());
      doReturn(60).when(aSTJexlLambda1).jjtGetNumChildren();
      Closure closure1 = new Closure(interpreter0, aSTJexlLambda1);
      TemplateInterpreter.Arguments templateInterpreter_Arguments0 = new TemplateInterpreter.Arguments(engine0);
      TemplateInterpreter templateInterpreter0 = new TemplateInterpreter(templateInterpreter_Arguments0);
      Object object0 = interpreter0.runClosure(closure1, templateInterpreter0);
}"
3182,"    protected Object runClosure(final Closure closure, final Object data) {
        final ASTJexlScript script = closure.getScript();
        block = new LexicalFrame(frame, block).defineArgs();
        try {
            final JexlNode body = script.jjtGetChild(script.jjtGetNumChildren() - 1);
            return interpret(body);
        } finally {
            block = block.pop();
        }
    }","  public void test16()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      Double double0 = Double.valueOf(0.0);
      ObjectContext<Double> objectContext0 = new ObjectContext<Double>(engine0, double0);
      JexlOptions jexlOptions0 = engine0.options;
      ASTArguments aSTArguments0 = new ASTArguments(60);
      Interpreter interpreter0 = engine0.createInterpreter(objectContext0, (Frame) null, jexlOptions0);
      ASTJexlLambda aSTJexlLambda0 = mock(ASTJexlLambda.class, new ViolatedAssumptionAnswer());
      doReturn((Frame) null).when(aSTJexlLambda0).createFrame(any(org.apache.commons.jexl3.internal.Frame.class) , any(java.lang.Object[].class));
      doReturn(aSTArguments0).when(aSTJexlLambda0).jjtGetChild(anyInt());
      doReturn(60).when(aSTJexlLambda0).jjtGetNumChildren();
      Closure closure0 = new Closure(interpreter0, aSTJexlLambda0);
      TemplateInterpreter.Arguments templateInterpreter_Arguments0 = new TemplateInterpreter.Arguments(engine0);
      TemplateInterpreter templateInterpreter0 = new TemplateInterpreter(templateInterpreter_Arguments0);
      Object object0 = interpreter0.runClosure(closure0, templateInterpreter0);
}"
3183,"    protected Object processAnnotation(final ASTAnnotatedStatement stmt, final int index, final Object data) {
        // are we evaluating the block ?
        final int last = stmt.jjtGetNumChildren() - 1;
        if (index == last) {
            final JexlNode cblock = stmt.jjtGetChild(last);
            // if the context has changed, might need a new interpreter
            final JexlArithmetic jexla = arithmetic.options(context);
            if (jexla == arithmetic) {
                return cblock.jjtAccept(Interpreter.this, data);
            }
            if (!arithmetic.getClass().equals(jexla.getClass())) {
                logger.warn(""expected arithmetic to be "" + arithmetic.getClass().getSimpleName()
                        + "", got "" + jexla.getClass().getSimpleName()
                );
            }
            final Interpreter ii = new Interpreter(Interpreter.this, jexla);
            final Object r = cblock.jjtAccept(ii, data);
            if (ii.isCancelled()) {
                Interpreter.this.cancel();
            }
            return r;
        }
        // tracking whether we processed the annotation
        final AnnotatedCall jstmt = new AnnotatedCall(stmt, index + 1, data);
        // the annotation node and name
        final ASTAnnotation anode = (ASTAnnotation) stmt.jjtGetChild(index);
        final String aname = anode.getName();
        // evaluate the arguments
        final Object[] argv = anode.jjtGetNumChildren() > 0
                        ? visit((ASTArguments) anode.jjtGetChild(0), null) : null;
        // wrap the future, will recurse through annotation processor
        Object result;
        try {
            result = processAnnotation(aname, argv, jstmt);
            // not processing an annotation is an error
            if (!jstmt.isProcessed()) {
                return annotationError(anode, aname, null);
            }
        } catch (final JexlException xany) {
            throw xany;
        } catch (final Exception xany) {
            return annotationError(anode, aname, xany);
        }
        // the caller may return a return, break or continue
        if (result instanceof JexlException) {
            throw (JexlException) result;
        }
        return result;
    }","  public void test17()  throws Throwable  {
      Engine engine0 = new Engine();
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Map<String, Object> map0 = jexlBuilder0.namespaces();
      MapContext mapContext0 = new MapContext(map0);
      JexlOptions jexlOptions0 = jexlBuilder0.options();
      Interpreter interpreter0 = engine0.createInterpreter(mapContext0, (Frame) null, jexlOptions0);
      Object[] objectArray0 = new Object[5];
      JexlInfo jexlInfo0 = new JexlInfo("""", 8, 14);
      String[] stringArray0 = new String[6];
      Script script0 = engine0.createScript(engine0.DEFAULT_FEATURES, jexlInfo0, """", stringArray0);
      Script.Callable script_Callable0 = script0.new Callable(interpreter0);
      Object object0 = interpreter0.processAnnotation("""", objectArray0, script_Callable0);
}"
3184,"    public Object getAttribute(final Object object, final Object attribute) {
        return getAttribute(object, attribute, null);
    }","  public void test18()  throws Throwable  {
      Engine engine0 = new Engine();
      JexlOptions jexlOptions0 = new JexlOptions();
      Map<String, Object> map0 = jexlOptions0.getNamespaces();
      MapContext mapContext0 = new MapContext(map0);
      TemplateInterpreter.Arguments templateInterpreter_Arguments0 = new TemplateInterpreter.Arguments(engine0);
      TemplateInterpreter templateInterpreter0 = new TemplateInterpreter(templateInterpreter_Arguments0);
      Object object0 = templateInterpreter0.getAttribute(mapContext0, ""l6HSa&VSd{CaDfuZ;"");
}"
3185,"    protected Object call(final JexlNode node, final Object target, Object functor, final ASTArguments argNode) {
        cancelCheck(node);
        // evaluate the arguments
        final Object[] argv = visit(argNode, null);
        // get the method name if identifier
        final int symbol;
        final String methodName;
        boolean cacheable = cache;
        boolean isavar = false;
        if (functor instanceof ASTIdentifier) {
            // function call, target is context or namespace (if there was one)
            final ASTIdentifier methodIdentifier = (ASTIdentifier) functor;
            symbol = methodIdentifier.getSymbol();
            methodName = methodIdentifier.getName();
            functor = null;
            // is it a global or local variable ?
            if (target == context) {
                if (frame != null && frame.has(symbol)) {
                    functor = frame.get(symbol);
                    isavar = functor != null;
                } else if (context.has(methodName)) {
                    functor = context.get(methodName);
                    isavar = functor != null;
                }
                // name is a variable, can't be cached
                cacheable &= !isavar;
            }
        } else if (functor instanceof ASTIdentifierAccess) {
            // a method call on target
            methodName = ((ASTIdentifierAccess) functor).getName();
            symbol = -1;
            functor = null;
            cacheable = true;
        } else if (functor != null) {
            // ...(x)(y)
            symbol = -1 - 1; // -2;
            methodName = null;
            cacheable = false;
        } else if (!node.isSafeLhs(isSafe())) {
            return unsolvableMethod(node, ""?(...)"");
        } else {
            // safe lhs
            return null;
        }

        // solving the call site
        final CallDispatcher call = new CallDispatcher(node, cacheable);
        try {
            // do we have a  cached version method/function name ?
            final Object eval = call.tryEval(target, methodName, argv);
            if (JexlEngine.TRY_FAILED != eval) {
                return eval;
            }
            boolean functorp = false;
            boolean narrow = false;
            // pseudo loop to try acquiring methods without and with argument narrowing
            while (true) {
                call.narrow = narrow;
                // direct function or method call
                if (functor == null || functorp) {
                    // try a method or function from context
                    if (call.isTargetMethod(target, methodName, argv)) {
                        return call.eval(methodName);
                    }
                    if (target == context) {
                        // solve 'null' namespace
                        final Object namespace = resolveNamespace(null, node);
                        if (namespace != null
                            && namespace != context
                            && call.isTargetMethod(namespace, methodName, argv)) {
                            return call.eval(methodName);
                        }
                        // do not try context function since this was attempted
                        // 10 lines above...; solve as an arithmetic function
                        if (call.isArithmeticMethod(methodName, argv)) {
                            return call.eval(methodName);
                        }
                        // could not find a method, try as a property of a non-context target (performed once)
                    } else {
                        // try prepending target to arguments and look for
                        // applicable method in context...
                        final Object[] pargv = functionArguments(target, narrow, argv);
                        if (call.isContextMethod(methodName, pargv)) {
                            return call.eval(methodName);
                        }
                        // ...or arithmetic
                        if (call.isArithmeticMethod(methodName, pargv)) {
                            return call.eval(methodName);
                        }
                        // the method may also be a functor stored in a property of the target
                        if (!narrow) {
                            final JexlPropertyGet get = uberspect.getPropertyGet(target, methodName);
                            if (get != null) {
                                functor = get.tryInvoke(target, methodName);
                                functorp = functor != null;
                            }
                        }
                    }
                }
                // this may happen without the above when we are chaining call like x(a)(b)
                // or when a var/symbol or antish var is used as a ""function"" name
                if (functor != null) {
                    // lambda, script or jexl method will do
                    if (functor instanceof JexlScript) {
                        return ((JexlScript) functor).execute(context, argv);
                    }
                    if (functor instanceof JexlMethod) {
                        return ((JexlMethod) functor).invoke(target, argv);
                    }
                    final String mCALL = ""call"";
                    // may be a generic callable, try a 'call' method
                    if (call.isTargetMethod(functor, mCALL, argv)) {
                        return call.eval(mCALL);
                    }
                    // functor is a var, may be method is a global one ?
                    if (isavar && target == context) {
                        if (call.isContextMethod(methodName, argv)) {
                            return call.eval(methodName);
                        }
                        if (call.isArithmeticMethod(methodName, argv)) {
                            return call.eval(methodName);
                        }
                    }
                    // try prepending functor to arguments and look for
                    // context or arithmetic function called 'call'
                    final Object[] pargv = functionArguments(functor, narrow, argv);
                    if (call.isContextMethod(mCALL, pargv)) {
                        return call.eval(mCALL);
                    }
                    if (call.isArithmeticMethod(mCALL, pargv)) {
                        return call.eval(mCALL);
                    }
                }
                // if we did not find an exact method by name and we haven't tried yet,
                // attempt to narrow the parameters and if this succeeds, try again in next loop
                if (narrow || !arithmetic.narrowArguments(argv)) {
                    break;
                }
                narrow = true;
                // continue;
            }
        } catch (JexlException.Method xmethod) {
            // ignore and handle at end; treat as an inner discover that fails
        } catch (final JexlException.TryFailed xany) {
            throw invocationException(node, methodName, xany);
        } catch (final JexlException xthru) {
            throw xthru;
        } catch (final Exception xany) {
            throw invocationException(node, methodName, xany);
        }
        // we have either evaluated and returned or no method was found
        return node.isSafeLhs(isSafe())
                ? null
                : unsolvableMethod(node, methodName, argv);
    }","  public void test19()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlBuilder jexlBuilder1 = jexlBuilder0.strict(false);
      Engine engine0 = new Engine(jexlBuilder1);
      Double double0 = Double.valueOf(0.0);
      ObjectContext<Double> objectContext0 = new ObjectContext<Double>(engine0, double0);
      JexlOptions jexlOptions0 = engine0.options;
      Interpreter interpreter0 = engine0.createInterpreter(objectContext0, (Frame) null, jexlOptions0);
      ASTNENode aSTNENode0 = new ASTNENode(60);
      Byte byte0 = new Byte((byte)56);
      ASTArguments aSTArguments0 = new ASTArguments(60);
      Object object0 = interpreter0.call(aSTNENode0, byte0, aSTNENode0, aSTArguments0);
}"
3186,"    protected Object visitLexicalNode(final JexlNode node, final Object data) {
        block = new LexicalFrame(frame, null);
        try {
            return node.jjtAccept(this, data);
        } finally {
            block = block.pop();
        }
    }","  public void test20()  throws Throwable  {
      Engine engine0 = new Engine();
      TemplateInterpreter.Arguments templateInterpreter_Arguments0 = new TemplateInterpreter.Arguments(engine0);
      TemplateInterpreter templateInterpreter0 = new TemplateInterpreter(templateInterpreter_Arguments0);
      ASTGTNode aSTGTNode0 = new ASTGTNode(1528);
      Short short0 = new Short((short) (-2108));
      // Undeclared exception!
      try { 
        templateInterpreter0.visitLexicalNode(aSTGTNode0, short0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
3187,"    protected Object visitLexicalNode(final JexlNode node, final Object data) {
        block = new LexicalFrame(frame, null);
        try {
            return node.jjtAccept(this, data);
        } finally {
            block = block.pop();
        }
    }","  public void test21()  throws Throwable  {
      Engine engine0 = new Engine();
      JexlInfo jexlInfo0 = engine0.createInfo((String) null, 3552, 1162);
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[4];
      Scope scope1 = new Scope(scope0, stringArray0);
      ASTJexlScript aSTJexlScript0 = engine0.parse(jexlInfo0, false, ""org.apache.commons.jexl3.parser.ASTIdentifier"", scope1);
      JexlOptions jexlOptions0 = new JexlOptions();
      Frame frame0 = new Frame(scope1, stringArray0, 1162);
      Interpreter interpreter0 = new Interpreter(engine0, jexlOptions0, (JexlContext) null, frame0);
      ASTArguments aSTArguments0 = new ASTArguments(1162);
      // Undeclared exception!
      try { 
        interpreter0.visitLexicalNode(aSTJexlScript0, aSTArguments0);
        fail(""Expecting exception: ArrayStoreException"");
      } catch(ArrayStoreException e) {
         //
         // org.apache.commons.jexl3.internal.Scope$2
         //
         verifyException(""org.apache.commons.jexl3.internal.Frame"", e);
      }
  }"
3188,"    protected Object visit(final ASTAddNode node, final Object data) {
        final Object left = node.jjtGetChild(0).jjtAccept(this, data);
        final Object right = node.jjtGetChild(1).jjtAccept(this, data);
        try {
            final Object result = operators.tryOverload(node, JexlOperator.ADD, left, right);
            return result != JexlEngine.TRY_FAILED ? result : arithmetic.add(left, right);
        } catch (final ArithmeticException xrt) {
            throw new JexlException(node, ""+ error"", xrt);
        }
    }","  public void test22()  throws Throwable  {
      Engine engine0 = new Engine();
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlOptions jexlOptions0 = jexlBuilder0.options();
      Map<String, Object> map0 = jexlOptions0.getNamespaces();
      MapContext mapContext0 = new MapContext(map0);
      Interpreter interpreter0 = new Interpreter(engine0, jexlOptions0, mapContext0, (Frame) null);
      ASTIfStatement aSTIfStatement0 = new ASTIfStatement(0);
      ASTWhileStatement aSTWhileStatement0 = new ASTWhileStatement(0);
      // Undeclared exception!
      try { 
        interpreter0.visit(aSTWhileStatement0, aSTIfStatement0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
3189,"    protected Object visit(final ASTAddNode node, final Object data) {
        final Object left = node.jjtGetChild(0).jjtAccept(this, data);
        final Object right = node.jjtGetChild(1).jjtAccept(this, data);
        try {
            final Object result = operators.tryOverload(node, JexlOperator.ADD, left, right);
            return result != JexlEngine.TRY_FAILED ? result : arithmetic.add(left, right);
        } catch (final ArithmeticException xrt) {
            throw new JexlException(node, ""+ error"", xrt);
        }
    }","  public void test23()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      Double double0 = new Double(60);
      ObjectContext<Double> objectContext0 = new ObjectContext<Double>(engine0, double0);
      JexlOptions jexlOptions0 = engine0.options;
      Interpreter interpreter0 = new Interpreter(engine0, jexlOptions0, objectContext0, (Frame) null);
      Parser parser0 = engine0.parser;
      ASTVar aSTVar0 = new ASTVar(parser0, (-495));
      // Undeclared exception!
      try { 
        interpreter0.visit(aSTVar0, engine0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.internal.Interpreter"", e);
      }
  }"
3190,"    protected Object visit(final ASTAddNode node, final Object data) {
        final Object left = node.jjtGetChild(0).jjtAccept(this, data);
        final Object right = node.jjtGetChild(1).jjtAccept(this, data);
        try {
            final Object result = operators.tryOverload(node, JexlOperator.ADD, left, right);
            return result != JexlEngine.TRY_FAILED ? result : arithmetic.add(left, right);
        } catch (final ArithmeticException xrt) {
            throw new JexlException(node, ""+ error"", xrt);
        }
    }","  public void test24()  throws Throwable  {
      Engine engine0 = new Engine();
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[4];
      Scope scope1 = new Scope(scope0, stringArray0);
      Frame frame0 = new Frame(scope1, stringArray0, (-1));
      Interpreter interpreter0 = engine0.createInterpreter((JexlContext) null, frame0, (JexlOptions) null);
      ASTTernaryNode aSTTernaryNode0 = new ASTTernaryNode(0);
      // Undeclared exception!
      try { 
        interpreter0.visit(aSTTernaryNode0, engine0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
3191,"    protected Object visit(final ASTAddNode node, final Object data) {
        final Object left = node.jjtGetChild(0).jjtAccept(this, data);
        final Object right = node.jjtGetChild(1).jjtAccept(this, data);
        try {
            final Object result = operators.tryOverload(node, JexlOperator.ADD, left, right);
            return result != JexlEngine.TRY_FAILED ? result : arithmetic.add(left, right);
        } catch (final ArithmeticException xrt) {
            throw new JexlException(node, ""+ error"", xrt);
        }
    }","  public void test25()  throws Throwable  {
      Engine engine0 = new Engine();
      TemplateInterpreter.Arguments templateInterpreter_Arguments0 = new TemplateInterpreter.Arguments(engine0);
      TemplateInterpreter templateInterpreter0 = new TemplateInterpreter(templateInterpreter_Arguments0);
      JexlArithmetic jexlArithmetic0 = engine0.getArithmetic();
      ASTSubNode aSTSubNode0 = new ASTSubNode((-2147483647));
      // Undeclared exception!
      try { 
        templateInterpreter0.visit(aSTSubNode0, jexlArithmetic0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
3192,"    protected Object visit(final ASTAddNode node, final Object data) {
        final Object left = node.jjtGetChild(0).jjtAccept(this, data);
        final Object right = node.jjtGetChild(1).jjtAccept(this, data);
        try {
            final Object result = operators.tryOverload(node, JexlOperator.ADD, left, right);
            return result != JexlEngine.TRY_FAILED ? result : arithmetic.add(left, right);
        } catch (final ArithmeticException xrt) {
            throw new JexlException(node, ""+ error"", xrt);
        }
    }","  public void test26()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      TemplateInterpreter.Arguments templateInterpreter_Arguments0 = new TemplateInterpreter.Arguments(engine0);
      TemplateInterpreter templateInterpreter0 = new TemplateInterpreter(templateInterpreter_Arguments0);
      ASTStringLiteral aSTStringLiteral0 = mock(ASTStringLiteral.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(aSTStringLiteral0).getLiteral();
      doReturn(false).when(aSTStringLiteral0).isTernaryProtected();
      doReturn((JexlInfo) null).when(aSTStringLiteral0).jexlInfo();
      doReturn((JexlNode) null).when(aSTStringLiteral0).jjtGetParent();
      TemplateEngine templateEngine0 = new TemplateEngine(engine0, false, 0, 'H', 'H');
      StringBuffer stringBuffer0 = new StringBuffer(0);
      TemplateEngine.NestedExpression templateEngine_NestedExpression0 = templateEngine0.new NestedExpression(stringBuffer0, aSTStringLiteral0, (TemplateEngine.TemplateExpression) null);
      // Undeclared exception!
      try { 
        templateInterpreter0.visit(aSTStringLiteral0, templateEngine_NestedExpression0);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // ?: undefined property ''
         //
         verifyException(""org.apache.commons.jexl3.internal.InterpreterBase"", e);
      }
  }"
3193,"    protected Object visit(final ASTAddNode node, final Object data) {
        final Object left = node.jjtGetChild(0).jjtAccept(this, data);
        final Object right = node.jjtGetChild(1).jjtAccept(this, data);
        try {
            final Object result = operators.tryOverload(node, JexlOperator.ADD, left, right);
            return result != JexlEngine.TRY_FAILED ? result : arithmetic.add(left, right);
        } catch (final ArithmeticException xrt) {
            throw new JexlException(node, ""+ error"", xrt);
        }
    }","  public void test27()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      Object[] objectArray0 = new Object[6];
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[1];
      Scope scope1 = new Scope(scope0, stringArray0);
      Frame frame0 = new Frame(scope1, objectArray0, (-1900));
      Interpreter interpreter0 = new Interpreter(engine0, (JexlOptions) null, engine0.EMPTY_CONTEXT, frame0);
      Parser parser0 = engine0.parser;
      ASTArguments aSTArguments0 = new ASTArguments(parser0, 2408);
      // Undeclared exception!
      try { 
        interpreter0.visit((ASTSetSubNode) null, aSTArguments0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.internal.Interpreter"", e);
      }
  }"
3194,"    protected Object visit(final ASTAddNode node, final Object data) {
        final Object left = node.jjtGetChild(0).jjtAccept(this, data);
        final Object right = node.jjtGetChild(1).jjtAccept(this, data);
        try {
            final Object result = operators.tryOverload(node, JexlOperator.ADD, left, right);
            return result != JexlEngine.TRY_FAILED ? result : arithmetic.add(left, right);
        } catch (final ArithmeticException xrt) {
            throw new JexlException(node, ""+ error"", xrt);
        }
    }","  public void test28()  throws Throwable  {
      Engine engine0 = new Engine();
      JexlEngine.EmptyContext jexlEngine_EmptyContext0 = (JexlEngine.EmptyContext)JexlEngine.EMPTY_CONTEXT;
      JexlOptions jexlOptions0 = engine0.options(jexlEngine_EmptyContext0);
      Interpreter interpreter0 = new Interpreter(engine0, jexlOptions0, jexlEngine_EmptyContext0, (Frame) null);
      Parser parser0 = new Parser("""");
      ASTSetLiteral aSTSetLiteral0 = mock(ASTSetLiteral.class, new ViolatedAssumptionAnswer());
      doReturn((JexlNode) null).when(aSTSetLiteral0).jjtGetChild(anyInt());
      doReturn(256).when(aSTSetLiteral0).jjtGetNumChildren();
      // Undeclared exception!
      try { 
        interpreter0.visit(aSTSetLiteral0, parser0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.internal.Interpreter"", e);
      }
  }"
3195,"    protected Object visit(final ASTAddNode node, final Object data) {
        final Object left = node.jjtGetChild(0).jjtAccept(this, data);
        final Object right = node.jjtGetChild(1).jjtAccept(this, data);
        try {
            final Object result = operators.tryOverload(node, JexlOperator.ADD, left, right);
            return result != JexlEngine.TRY_FAILED ? result : arithmetic.add(left, right);
        } catch (final ArithmeticException xrt) {
            throw new JexlException(node, ""+ error"", xrt);
        }
    }","  public void test29()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      Double double0 = Double.valueOf(0.0);
      ObjectContext<Double> objectContext0 = new ObjectContext<Double>(engine0, double0);
      JexlOptions jexlOptions0 = engine0.options;
      Interpreter interpreter0 = engine0.createInterpreter(objectContext0, (Frame) null, jexlOptions0);
      ASTNENode aSTNENode0 = new ASTNENode(60);
      ASTSetLiteral aSTSetLiteral0 = mock(ASTSetLiteral.class, new ViolatedAssumptionAnswer());
      doReturn((-1134)).when(aSTSetLiteral0).jjtGetNumChildren();
      // Undeclared exception!
      try { 
        interpreter0.visit(aSTSetLiteral0, aSTNENode0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Illegal initial capacity: -1134
         //
         verifyException(""java.util.HashMap"", e);
      }
  }"
3196,"    protected Object visit(final ASTAddNode node, final Object data) {
        final Object left = node.jjtGetChild(0).jjtAccept(this, data);
        final Object right = node.jjtGetChild(1).jjtAccept(this, data);
        try {
            final Object result = operators.tryOverload(node, JexlOperator.ADD, left, right);
            return result != JexlEngine.TRY_FAILED ? result : arithmetic.add(left, right);
        } catch (final ArithmeticException xrt) {
            throw new JexlException(node, ""+ error"", xrt);
        }
    }","  public void test30()  throws Throwable  {
      Engine engine0 = new Engine();
      TemplateInterpreter.Arguments templateInterpreter_Arguments0 = new TemplateInterpreter.Arguments(engine0);
      TemplateInterpreter templateInterpreter0 = new TemplateInterpreter(templateInterpreter_Arguments0);
      Parser parser0 = new Parser(""org.apache.commons.jexl3.parser.ASTSetSubNode"");
      ASTReference aSTReference0 = new ASTReference(parser0, (-444));
      Short short0 = new Short((short)2274);
      // Undeclared exception!
      try { 
        templateInterpreter0.visit(aSTReference0, short0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
3197,"    protected Object visit(final ASTAddNode node, final Object data) {
        final Object left = node.jjtGetChild(0).jjtAccept(this, data);
        final Object right = node.jjtGetChild(1).jjtAccept(this, data);
        try {
            final Object result = operators.tryOverload(node, JexlOperator.ADD, left, right);
            return result != JexlEngine.TRY_FAILED ? result : arithmetic.add(left, right);
        } catch (final ArithmeticException xrt) {
            throw new JexlException(node, ""+ error"", xrt);
        }
    }","  public void test31()  throws Throwable  {
      Engine engine0 = new Engine();
      JexlEngine.EmptyContext jexlEngine_EmptyContext0 = (JexlEngine.EmptyContext)JexlEngine.EMPTY_CONTEXT;
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      Scope scope1 = new Scope(scope0, (String[]) null);
      Frame frame0 = new Frame(scope1, (Object[]) null, 92);
      JexlOptions jexlOptions0 = engine0.options;
      Interpreter interpreter0 = engine0.createInterpreter(jexlEngine_EmptyContext0, frame0, jexlOptions0);
      ASTOrNode aSTOrNode0 = new ASTOrNode(546);
      // Undeclared exception!
      try { 
        interpreter0.visit(aSTOrNode0, frame0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
3198,"    protected Object visit(final ASTAddNode node, final Object data) {
        final Object left = node.jjtGetChild(0).jjtAccept(this, data);
        final Object right = node.jjtGetChild(1).jjtAccept(this, data);
        try {
            final Object result = operators.tryOverload(node, JexlOperator.ADD, left, right);
            return result != JexlEngine.TRY_FAILED ? result : arithmetic.add(left, right);
        } catch (final ArithmeticException xrt) {
            throw new JexlException(node, ""+ error"", xrt);
        }
    }","  public void test32()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      TemplateInterpreter.Arguments templateInterpreter_Arguments0 = new TemplateInterpreter.Arguments(engine0);
      TemplateInterpreter templateInterpreter0 = new TemplateInterpreter(templateInterpreter_Arguments0);
      // Undeclared exception!
      try { 
        templateInterpreter0.visit((ASTNumberLiteral) null, (Object) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.internal.Interpreter"", e);
      }
  }"
3199,"    protected Object visit(final ASTAddNode node, final Object data) {
        final Object left = node.jjtGetChild(0).jjtAccept(this, data);
        final Object right = node.jjtGetChild(1).jjtAccept(this, data);
        try {
            final Object result = operators.tryOverload(node, JexlOperator.ADD, left, right);
            return result != JexlEngine.TRY_FAILED ? result : arithmetic.add(left, right);
        } catch (final ArithmeticException xrt) {
            throw new JexlException(node, ""+ error"", xrt);
        }
    }","  public void test33()  throws Throwable  {
      Engine engine0 = new Engine();
      TemplateInterpreter.Arguments templateInterpreter_Arguments0 = new TemplateInterpreter.Arguments(engine0);
      TemplateInterpreter templateInterpreter0 = new TemplateInterpreter(templateInterpreter_Arguments0);
      Parser parser0 = engine0.parser;
      ASTNullpNode aSTNullpNode0 = new ASTNullpNode(parser0, 0);
      Long long0 = new Long((-1197L));
      // Undeclared exception!
      try { 
        templateInterpreter0.visit(aSTNullpNode0, long0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
3200,"    protected Object visit(final ASTAddNode node, final Object data) {
        final Object left = node.jjtGetChild(0).jjtAccept(this, data);
        final Object right = node.jjtGetChild(1).jjtAccept(this, data);
        try {
            final Object result = operators.tryOverload(node, JexlOperator.ADD, left, right);
            return result != JexlEngine.TRY_FAILED ? result : arithmetic.add(left, right);
        } catch (final ArithmeticException xrt) {
            throw new JexlException(node, ""+ error"", xrt);
        }
    }","  public void test34()  throws Throwable  {
      Engine engine0 = new Engine();
      JexlEngine.EmptyContext jexlEngine_EmptyContext0 = (JexlEngine.EmptyContext)JexlEngine.EMPTY_CONTEXT;
      Interpreter interpreter0 = new Interpreter(engine0, (JexlOptions) null, jexlEngine_EmptyContext0, (Frame) null);
      ASTNotNode aSTNotNode0 = new ASTNotNode(2086);
      // Undeclared exception!
      try { 
        interpreter0.visit(aSTNotNode0, aSTNotNode0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
3201,"    protected Object visit(final ASTAddNode node, final Object data) {
        final Object left = node.jjtGetChild(0).jjtAccept(this, data);
        final Object right = node.jjtGetChild(1).jjtAccept(this, data);
        try {
            final Object result = operators.tryOverload(node, JexlOperator.ADD, left, right);
            return result != JexlEngine.TRY_FAILED ? result : arithmetic.add(left, right);
        } catch (final ArithmeticException xrt) {
            throw new JexlException(node, ""+ error"", xrt);
        }
    }","  public void test35()  throws Throwable  {
      Engine engine0 = new Engine();
      TemplateInterpreter.Arguments templateInterpreter_Arguments0 = new TemplateInterpreter.Arguments(engine0);
      StringWriter stringWriter0 = new StringWriter();
      TemplateInterpreter templateInterpreter0 = new TemplateInterpreter(templateInterpreter_Arguments0);
      ASTNSWNode aSTNSWNode0 = new ASTNSWNode((-2646));
      // Undeclared exception!
      try { 
        templateInterpreter0.visit(aSTNSWNode0, stringWriter0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
3202,"    protected Object visit(final ASTAddNode node, final Object data) {
        final Object left = node.jjtGetChild(0).jjtAccept(this, data);
        final Object right = node.jjtGetChild(1).jjtAccept(this, data);
        try {
            final Object result = operators.tryOverload(node, JexlOperator.ADD, left, right);
            return result != JexlEngine.TRY_FAILED ? result : arithmetic.add(left, right);
        } catch (final ArithmeticException xrt) {
            throw new JexlException(node, ""+ error"", xrt);
        }
    }","  public void test36()  throws Throwable  {
      Engine engine0 = new Engine();
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlOptions jexlOptions0 = jexlBuilder0.options();
      Interpreter interpreter0 = engine0.createInterpreter((JexlContext) null, (Frame) null, jexlOptions0);
      ASTNRNode aSTNRNode0 = new ASTNRNode((-1284));
      // Undeclared exception!
      try { 
        interpreter0.visit(aSTNRNode0, jexlOptions0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
3203,"    protected Object visit(final ASTAddNode node, final Object data) {
        final Object left = node.jjtGetChild(0).jjtAccept(this, data);
        final Object right = node.jjtGetChild(1).jjtAccept(this, data);
        try {
            final Object result = operators.tryOverload(node, JexlOperator.ADD, left, right);
            return result != JexlEngine.TRY_FAILED ? result : arithmetic.add(left, right);
        } catch (final ArithmeticException xrt) {
            throw new JexlException(node, ""+ error"", xrt);
        }
    }","  public void test37()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      Double double0 = new Double(1);
      ObjectContext<Double> objectContext0 = new ObjectContext<Double>(engine0, double0);
      JexlOptions jexlOptions0 = engine0.options(objectContext0);
      Interpreter interpreter0 = engine0.createInterpreter(objectContext0, (Frame) null, jexlOptions0);
      ASTNEWNode aSTNEWNode0 = new ASTNEWNode(1);
      // Undeclared exception!
      try { 
        interpreter0.visit(aSTNEWNode0, """");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
3204,"    protected Object visit(final ASTAddNode node, final Object data) {
        final Object left = node.jjtGetChild(0).jjtAccept(this, data);
        final Object right = node.jjtGetChild(1).jjtAccept(this, data);
        try {
            final Object result = operators.tryOverload(node, JexlOperator.ADD, left, right);
            return result != JexlEngine.TRY_FAILED ? result : arithmetic.add(left, right);
        } catch (final ArithmeticException xrt) {
            throw new JexlException(node, ""+ error"", xrt);
        }
    }","  public void test38()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      MapContext mapContext0 = new MapContext();
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[2];
      Scope scope1 = new Scope(scope0, stringArray0);
      Frame frame0 = new Frame(scope1, stringArray0, 14);
      JexlOptions jexlOptions0 = jexlBuilder0.options();
      Interpreter interpreter0 = engine0.createInterpreter(mapContext0, frame0, jexlOptions0);
      ASTNENode aSTNENode0 = new ASTNENode(0);
      TemplateEngine templateEngine0 = engine0.createJxltEngine(false, (-1265), '5', 'v');
      JexlInfo jexlInfo0 = new JexlInfo(""?"", 14, 13);
      TemplateEngine.TemplateExpression templateEngine_TemplateExpression0 = templateEngine0.parseExpression(jexlInfo0, ""?"", scope1);
      TemplateEngine.DeferredExpression templateEngine_DeferredExpression0 = templateEngine0.new DeferredExpression(""?"", aSTNENode0, templateEngine_TemplateExpression0);
      // Undeclared exception!
      try { 
        interpreter0.visit(aSTNENode0, templateEngine_DeferredExpression0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
3205,"    protected Object visit(final ASTAddNode node, final Object data) {
        final Object left = node.jjtGetChild(0).jjtAccept(this, data);
        final Object right = node.jjtGetChild(1).jjtAccept(this, data);
        try {
            final Object result = operators.tryOverload(node, JexlOperator.ADD, left, right);
            return result != JexlEngine.TRY_FAILED ? result : arithmetic.add(left, right);
        } catch (final ArithmeticException xrt) {
            throw new JexlException(node, ""+ error"", xrt);
        }
    }","  public void test39()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      JexlOptions jexlOptions0 = engine0.options;
      ASTArguments aSTArguments0 = new ASTArguments(60);
      Interpreter interpreter0 = new Interpreter(engine0, jexlOptions0, engine0.EMPTY_CONTEXT, (Frame) null);
      ASTMulNode aSTMulNode0 = new ASTMulNode(60);
      // Undeclared exception!
      try { 
        interpreter0.visit(aSTMulNode0, aSTArguments0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
3206,"    protected Object visit(final ASTAddNode node, final Object data) {
        final Object left = node.jjtGetChild(0).jjtAccept(this, data);
        final Object right = node.jjtGetChild(1).jjtAccept(this, data);
        try {
            final Object result = operators.tryOverload(node, JexlOperator.ADD, left, right);
            return result != JexlEngine.TRY_FAILED ? result : arithmetic.add(left, right);
        } catch (final ArithmeticException xrt) {
            throw new JexlException(node, ""+ error"", xrt);
        }
    }","  public void test40()  throws Throwable  {
      Engine engine0 = new Engine();
      TemplateInterpreter.Arguments templateInterpreter_Arguments0 = new TemplateInterpreter.Arguments(engine0);
      TemplateInterpreter templateInterpreter0 = new TemplateInterpreter(templateInterpreter_Arguments0);
      ASTModNode aSTModNode0 = new ASTModNode(41);
      // Undeclared exception!
      try { 
        templateInterpreter0.visit(aSTModNode0, ""+ er%or"");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
3207,"    protected Object visit(final ASTAddNode node, final Object data) {
        final Object left = node.jjtGetChild(0).jjtAccept(this, data);
        final Object right = node.jjtGetChild(1).jjtAccept(this, data);
        try {
            final Object result = operators.tryOverload(node, JexlOperator.ADD, left, right);
            return result != JexlEngine.TRY_FAILED ? result : arithmetic.add(left, right);
        } catch (final ArithmeticException xrt) {
            throw new JexlException(node, ""+ error"", xrt);
        }
    }","  public void test41()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      MapContext mapContext0 = new MapContext();
      JexlOptions jexlOptions0 = jexlBuilder0.options();
      Interpreter interpreter0 = engine0.createInterpreter(mapContext0, (Frame) null, jexlOptions0);
      ASTMapLiteral aSTMapLiteral0 = mock(ASTMapLiteral.class, new ViolatedAssumptionAnswer());
      doReturn((-1699)).when(aSTMapLiteral0).jjtGetNumChildren();
      // Undeclared exception!
      try { 
        interpreter0.visit(aSTMapLiteral0, (Object) null);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Illegal initial capacity: -1699
         //
         verifyException(""java.util.HashMap"", e);
      }
  }"
3208,"    protected Object visit(final ASTAddNode node, final Object data) {
        final Object left = node.jjtGetChild(0).jjtAccept(this, data);
        final Object right = node.jjtGetChild(1).jjtAccept(this, data);
        try {
            final Object result = operators.tryOverload(node, JexlOperator.ADD, left, right);
            return result != JexlEngine.TRY_FAILED ? result : arithmetic.add(left, right);
        } catch (final ArithmeticException xrt) {
            throw new JexlException(node, ""+ error"", xrt);
        }
    }","  public void test42()  throws Throwable  {
      Engine engine0 = new Engine();
      TemplateInterpreter.Arguments templateInterpreter_Arguments0 = new TemplateInterpreter.Arguments(engine0);
      TemplateInterpreter templateInterpreter0 = new TemplateInterpreter(templateInterpreter_Arguments0);
      Parser parser0 = new Parser(""org.apache.commons.jexl3.parser.ASTDivNode"");
      ASTLTNode aSTLTNode0 = new ASTLTNode(parser0, 0);
      Integer integer0 = new Integer(0);
      // Undeclared exception!
      try { 
        templateInterpreter0.visit(aSTLTNode0, integer0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
3209,"    protected Object visit(final ASTAddNode node, final Object data) {
        final Object left = node.jjtGetChild(0).jjtAccept(this, data);
        final Object right = node.jjtGetChild(1).jjtAccept(this, data);
        try {
            final Object result = operators.tryOverload(node, JexlOperator.ADD, left, right);
            return result != JexlEngine.TRY_FAILED ? result : arithmetic.add(left, right);
        } catch (final ArithmeticException xrt) {
            throw new JexlException(node, ""+ error"", xrt);
        }
    }","  public void test43()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      Parser parser0 = new Parser("""");
      ASTJexlScript aSTJexlScript0 = new ASTJexlScript(parser0, 4768);
      Script script0 = new Script(engine0, ""Vwicl$AA&3d"", aSTJexlScript0);
      Object[] objectArray0 = new Object[3];
      Closure closure0 = new Closure(script0, objectArray0);
      JexlOptions jexlOptions0 = engine0.options;
      Interpreter interpreter0 = new Interpreter(engine0, jexlOptions0, engine0.EMPTY_CONTEXT, (Frame) null);
      ASTLENode aSTLENode0 = new ASTLENode(1);
      // Undeclared exception!
      try { 
        interpreter0.visit(aSTLENode0, closure0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
3210,"    protected Object visit(final ASTAddNode node, final Object data) {
        final Object left = node.jjtGetChild(0).jjtAccept(this, data);
        final Object right = node.jjtGetChild(1).jjtAccept(this, data);
        try {
            final Object result = operators.tryOverload(node, JexlOperator.ADD, left, right);
            return result != JexlEngine.TRY_FAILED ? result : arithmetic.add(left, right);
        } catch (final ArithmeticException xrt) {
            throw new JexlException(node, ""+ error"", xrt);
        }
    }","  public void test44()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      MapContext mapContext0 = new MapContext();
      Engine engine0 = new Engine(jexlBuilder0);
      JexlOptions jexlOptions0 = new JexlOptions();
      Interpreter interpreter0 = engine0.createInterpreter(mapContext0, (Frame) null, jexlOptions0);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      ASTJxltLiteral aSTJxltLiteral0 = mock(ASTJxltLiteral.class, new ViolatedAssumptionAnswer());
      doReturn(mockFileInputStream0).when(aSTJxltLiteral0).jjtGetValue();
      Long long0 = new Long(7);
      // Undeclared exception!
      try { 
        interpreter0.visit(aSTJxltLiteral0, long0);
        fail(""Expecting exception: ClassCastException"");
      } catch(ClassCastException e) {
         //
         // org.evosuite.runtime.mock.java.io.MockFileInputStream cannot be cast to org.apache.commons.jexl3.internal.TemplateEngine$TemplateExpression
         //
         verifyException(""org.apache.commons.jexl3.internal.Interpreter"", e);
      }
  }"
3211,"    protected Object visit(final ASTAddNode node, final Object data) {
        final Object left = node.jjtGetChild(0).jjtAccept(this, data);
        final Object right = node.jjtGetChild(1).jjtAccept(this, data);
        try {
            final Object result = operators.tryOverload(node, JexlOperator.ADD, left, right);
            return result != JexlEngine.TRY_FAILED ? result : arithmetic.add(left, right);
        } catch (final ArithmeticException xrt) {
            throw new JexlException(node, ""+ error"", xrt);
        }
    }","  public void test45()  throws Throwable  {
      Engine engine0 = new Engine();
      Object[] objectArray0 = new Object[0];
      Frame frame0 = new Frame((Scope) null, objectArray0, (-3215));
      Parser parser0 = new Parser("""");
      ASTJexlScript aSTJexlScript0 = parser0.JexlScript((Scope) null);
      JexlOptions jexlOptions0 = engine0.options(aSTJexlScript0, (JexlContext) null);
      Interpreter interpreter0 = engine0.createInterpreter((JexlContext) null, frame0, jexlOptions0);
      ASTUnaryMinusNode aSTUnaryMinusNode0 = new ASTUnaryMinusNode(parser0, (-3215));
      // Undeclared exception!
      try { 
        interpreter0.visit(aSTJexlScript0, aSTUnaryMinusNode0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.internal.LexicalFrame"", e);
      }
  }"
3212,"    protected Object visit(final ASTAddNode node, final Object data) {
        final Object left = node.jjtGetChild(0).jjtAccept(this, data);
        final Object right = node.jjtGetChild(1).jjtAccept(this, data);
        try {
            final Object result = operators.tryOverload(node, JexlOperator.ADD, left, right);
            return result != JexlEngine.TRY_FAILED ? result : arithmetic.add(left, right);
        } catch (final ArithmeticException xrt) {
            throw new JexlException(node, ""+ error"", xrt);
        }
    }","  public void test46()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      TemplateInterpreter.Arguments templateInterpreter_Arguments0 = new TemplateInterpreter.Arguments(engine0);
      TemplateInterpreter templateInterpreter0 = new TemplateInterpreter(templateInterpreter_Arguments0);
      ASTJexlLambda aSTJexlLambda0 = mock(ASTJexlLambda.class, new ViolatedAssumptionAnswer());
      doReturn((Frame) null).when(aSTJexlLambda0).createFrame(any(org.apache.commons.jexl3.internal.Frame.class) , any(java.lang.Object[].class));
      Closure closure0 = new Closure(templateInterpreter0, aSTJexlLambda0);
      Interpreter interpreter0 = new Interpreter(engine0, (JexlOptions) null, engine0.EMPTY_CONTEXT, (Frame) null);
      // Undeclared exception!
      try { 
        interpreter0.visit((ASTJexlScript) null, closure0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.internal.Interpreter"", e);
      }
  }"
3213,"    protected Object visit(final ASTAddNode node, final Object data) {
        final Object left = node.jjtGetChild(0).jjtAccept(this, data);
        final Object right = node.jjtGetChild(1).jjtAccept(this, data);
        try {
            final Object result = operators.tryOverload(node, JexlOperator.ADD, left, right);
            return result != JexlEngine.TRY_FAILED ? result : arithmetic.add(left, right);
        } catch (final ArithmeticException xrt) {
            throw new JexlException(node, ""+ error"", xrt);
        }
    }","  public void test47()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      Parser parser0 = new Parser("""");
      ASTJexlScript aSTJexlScript0 = new ASTJexlScript(parser0, 0);
      Script script0 = new Script(engine0, """", aSTJexlScript0);
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[9];
      Scope scope1 = new Scope(scope0, stringArray0);
      Frame frame0 = new Frame(scope1, stringArray0, 0);
      JexlOptions jexlOptions0 = new JexlOptions();
      Interpreter interpreter0 = engine0.createInterpreter((JexlContext) null, frame0, jexlOptions0);
      // Undeclared exception!
      try { 
        interpreter0.visit((ASTIfStatement) null, script0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.internal.Interpreter"", e);
      }
  }"
3214,"    protected Object visit(final ASTAddNode node, final Object data) {
        final Object left = node.jjtGetChild(0).jjtAccept(this, data);
        final Object right = node.jjtGetChild(1).jjtAccept(this, data);
        try {
            final Object result = operators.tryOverload(node, JexlOperator.ADD, left, right);
            return result != JexlEngine.TRY_FAILED ? result : arithmetic.add(left, right);
        } catch (final ArithmeticException xrt) {
            throw new JexlException(node, ""+ error"", xrt);
        }
    }","  public void test48()  throws Throwable  {
      Engine engine0 = new Engine();
      JexlEngine.EmptyContext jexlEngine_EmptyContext0 = (JexlEngine.EmptyContext)JexlEngine.EMPTY_CONTEXT;
      JexlOptions jexlOptions0 = engine0.options(jexlEngine_EmptyContext0);
      Interpreter interpreter0 = new Interpreter(engine0, jexlOptions0, jexlEngine_EmptyContext0, (Frame) null);
      ASTIdentifierAccess aSTIdentifierAccess0 = mock(ASTIdentifierAccess.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(aSTIdentifierAccess0).getIdentifier();
      doReturn(false).when(aSTIdentifierAccess0).isSafe();
      doReturn(false).when(aSTIdentifierAccess0).isTernaryProtected();
      doReturn((JexlInfo) null).when(aSTIdentifierAccess0).jexlInfo();
      doReturn((JexlNode) null).when(aSTIdentifierAccess0).jjtGetParent();
      // Undeclared exception!
      try { 
        interpreter0.visit(aSTIdentifierAccess0, aSTIdentifierAccess0);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // ?: undefined property ''
         //
         verifyException(""org.apache.commons.jexl3.internal.InterpreterBase"", e);
      }
  }"
3215,"    protected Object visit(final ASTAddNode node, final Object data) {
        final Object left = node.jjtGetChild(0).jjtAccept(this, data);
        final Object right = node.jjtGetChild(1).jjtAccept(this, data);
        try {
            final Object result = operators.tryOverload(node, JexlOperator.ADD, left, right);
            return result != JexlEngine.TRY_FAILED ? result : arithmetic.add(left, right);
        } catch (final ArithmeticException xrt) {
            throw new JexlException(node, ""+ error"", xrt);
        }
    }","  public void test49()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      MathContext mathContext0 = MathContext.DECIMAL64;
      Engine engine0 = new Engine(jexlBuilder0);
      TemplateInterpreter.Arguments templateInterpreter_Arguments0 = new TemplateInterpreter.Arguments(engine0);
      TemplateInterpreter templateInterpreter0 = new TemplateInterpreter(templateInterpreter_Arguments0);
      // Undeclared exception!
      try { 
        templateInterpreter0.visit((ASTIdentifierAccess) null, mathContext0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.internal.Interpreter"", e);
      }
  }"
3216,"    protected Object visit(final ASTAddNode node, final Object data) {
        final Object left = node.jjtGetChild(0).jjtAccept(this, data);
        final Object right = node.jjtGetChild(1).jjtAccept(this, data);
        try {
            final Object result = operators.tryOverload(node, JexlOperator.ADD, left, right);
            return result != JexlEngine.TRY_FAILED ? result : arithmetic.add(left, right);
        } catch (final ArithmeticException xrt) {
            throw new JexlException(node, ""+ error"", xrt);
        }
    }","  public void test50()  throws Throwable  {
      Engine engine0 = new Engine();
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[7];
      Scope scope1 = new Scope(scope0, stringArray0);
      Frame frame0 = new Frame(scope1, stringArray0, (-518));
      Interpreter interpreter0 = new Interpreter(engine0, (JexlOptions) null, engine0.EMPTY_CONTEXT, frame0);
      ASTNamespaceIdentifier aSTNamespaceIdentifier0 = new ASTNamespaceIdentifier((-518));
      // Undeclared exception!
      try { 
        interpreter0.visit(aSTNamespaceIdentifier0, ""jvm"");
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // ?: undefined property ''
         //
         verifyException(""org.apache.commons.jexl3.internal.InterpreterBase"", e);
      }
  }"
3217,"    protected Object visit(final ASTAddNode node, final Object data) {
        final Object left = node.jjtGetChild(0).jjtAccept(this, data);
        final Object right = node.jjtGetChild(1).jjtAccept(this, data);
        try {
            final Object result = operators.tryOverload(node, JexlOperator.ADD, left, right);
            return result != JexlEngine.TRY_FAILED ? result : arithmetic.add(left, right);
        } catch (final ArithmeticException xrt) {
            throw new JexlException(node, ""+ error"", xrt);
        }
    }","  public void test51()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      TemplateInterpreter.Arguments templateInterpreter_Arguments0 = new TemplateInterpreter.Arguments(engine0);
      TemplateInterpreter templateInterpreter0 = new TemplateInterpreter(templateInterpreter_Arguments0);
      // Undeclared exception!
      try { 
        templateInterpreter0.visit((ASTIdentifier) null, (Object) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.internal.TemplateInterpreter"", e);
      }
  }"
3218,"    protected Object visit(final ASTAddNode node, final Object data) {
        final Object left = node.jjtGetChild(0).jjtAccept(this, data);
        final Object right = node.jjtGetChild(1).jjtAccept(this, data);
        try {
            final Object result = operators.tryOverload(node, JexlOperator.ADD, left, right);
            return result != JexlEngine.TRY_FAILED ? result : arithmetic.add(left, right);
        } catch (final ArithmeticException xrt) {
            throw new JexlException(node, ""+ error"", xrt);
        }
    }","  public void test52()  throws Throwable  {
      Engine engine0 = new Engine();
      ASTJexlScript aSTJexlScript0 = new ASTJexlScript(0);
      MapContext mapContext0 = new MapContext();
      JexlOptions jexlOptions0 = engine0.options(aSTJexlScript0, mapContext0);
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[2];
      Scope scope1 = new Scope(scope0, stringArray0);
      Frame frame0 = new Frame(scope1, stringArray0, 97);
      Interpreter interpreter0 = engine0.createInterpreter(engine0.EMPTY_CONTEXT, frame0, jexlOptions0);
      ASTGTNode aSTGTNode0 = new ASTGTNode(46);
      JexlArithmetic.NullOperand jexlArithmetic_NullOperand0 = new JexlArithmetic.NullOperand();
      // Undeclared exception!
      try { 
        interpreter0.visit(aSTGTNode0, jexlArithmetic_NullOperand0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
3219,"    protected Object visit(final ASTAddNode node, final Object data) {
        final Object left = node.jjtGetChild(0).jjtAccept(this, data);
        final Object right = node.jjtGetChild(1).jjtAccept(this, data);
        try {
            final Object result = operators.tryOverload(node, JexlOperator.ADD, left, right);
            return result != JexlEngine.TRY_FAILED ? result : arithmetic.add(left, right);
        } catch (final ArithmeticException xrt) {
            throw new JexlException(node, ""+ error"", xrt);
        }
    }","  public void test53()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      TemplateInterpreter.Arguments templateInterpreter_Arguments0 = new TemplateInterpreter.Arguments(engine0);
      TemplateInterpreter templateInterpreter0 = new TemplateInterpreter(templateInterpreter_Arguments0);
      ASTGENode aSTGENode0 = new ASTGENode((-2231));
      Parser parser0 = engine0.parser;
      ASTVar aSTVar0 = new ASTVar(parser0, (-2231));
      // Undeclared exception!
      try { 
        templateInterpreter0.visit(aSTGENode0, aSTVar0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
3220,"    protected Object visit(final ASTAddNode node, final Object data) {
        final Object left = node.jjtGetChild(0).jjtAccept(this, data);
        final Object right = node.jjtGetChild(1).jjtAccept(this, data);
        try {
            final Object result = operators.tryOverload(node, JexlOperator.ADD, left, right);
            return result != JexlEngine.TRY_FAILED ? result : arithmetic.add(left, right);
        } catch (final ArithmeticException xrt) {
            throw new JexlException(node, ""+ error"", xrt);
        }
    }","  public void test54()  throws Throwable  {
      Engine engine0 = new Engine();
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlOptions jexlOptions0 = jexlBuilder0.options();
      Map<String, Object> map0 = jexlOptions0.getNamespaces();
      MapContext mapContext0 = new MapContext(map0);
      Interpreter interpreter0 = new Interpreter(engine0, jexlOptions0, mapContext0, (Frame) null);
      JexlArithmetic.NullOperand jexlArithmetic_NullOperand0 = new JexlArithmetic.NullOperand();
      // Undeclared exception!
      try { 
        interpreter0.visit((ASTFunctionNode) null, jexlArithmetic_NullOperand0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.internal.Interpreter"", e);
      }
  }"
3221,"    protected Object visit(final ASTAddNode node, final Object data) {
        final Object left = node.jjtGetChild(0).jjtAccept(this, data);
        final Object right = node.jjtGetChild(1).jjtAccept(this, data);
        try {
            final Object result = operators.tryOverload(node, JexlOperator.ADD, left, right);
            return result != JexlEngine.TRY_FAILED ? result : arithmetic.add(left, right);
        } catch (final ArithmeticException xrt) {
            throw new JexlException(node, ""+ error"", xrt);
        }
    }","  public void test55()  throws Throwable  {
      Engine engine0 = new Engine();
      Double double0 = new Double(2065.8033010257);
      ObjectContext<Double> objectContext0 = new ObjectContext<Double>(engine0, double0);
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[4];
      Scope scope1 = new Scope(scope0, stringArray0);
      Frame frame0 = new Frame(scope1, stringArray0, 0);
      Interpreter interpreter0 = engine0.createInterpreter(objectContext0, frame0, (JexlOptions) null);
      ASTForeachStatement aSTForeachStatement0 = new ASTForeachStatement(0);
      InterpreterBase.ContextualCtor interpreterBase_ContextualCtor0 = new InterpreterBase.ContextualCtor((JexlMethod) null, false);
      // Undeclared exception!
      try { 
        interpreter0.visit(aSTForeachStatement0, interpreterBase_ContextualCtor0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
3222,"    protected Object visit(final ASTAddNode node, final Object data) {
        final Object left = node.jjtGetChild(0).jjtAccept(this, data);
        final Object right = node.jjtGetChild(1).jjtAccept(this, data);
        try {
            final Object result = operators.tryOverload(node, JexlOperator.ADD, left, right);
            return result != JexlEngine.TRY_FAILED ? result : arithmetic.add(left, right);
        } catch (final ArithmeticException xrt) {
            throw new JexlException(node, ""+ error"", xrt);
        }
    }","  public void test56()  throws Throwable  {
      Engine engine0 = new Engine();
      TemplateInterpreter.Arguments templateInterpreter_Arguments0 = new TemplateInterpreter.Arguments(engine0);
      TemplateInterpreter templateInterpreter0 = new TemplateInterpreter(templateInterpreter_Arguments0);
      ASTEQNode aSTEQNode0 = new ASTEQNode(0);
      // Undeclared exception!
      try { 
        templateInterpreter0.visit(aSTEQNode0, (Object) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
3223,"    protected Object visit(final ASTAddNode node, final Object data) {
        final Object left = node.jjtGetChild(0).jjtAccept(this, data);
        final Object right = node.jjtGetChild(1).jjtAccept(this, data);
        try {
            final Object result = operators.tryOverload(node, JexlOperator.ADD, left, right);
            return result != JexlEngine.TRY_FAILED ? result : arithmetic.add(left, right);
        } catch (final ArithmeticException xrt) {
            throw new JexlException(node, ""+ error"", xrt);
        }
    }","  public void test57()  throws Throwable  {
      Engine engine0 = new Engine();
      TemplateInterpreter.Arguments templateInterpreter_Arguments0 = new TemplateInterpreter.Arguments(engine0);
      TemplateInterpreter templateInterpreter0 = new TemplateInterpreter(templateInterpreter_Arguments0);
      ASTDoWhileStatement aSTDoWhileStatement0 = new ASTDoWhileStatement(3);
      JexlArithmetic.NullOperand jexlArithmetic_NullOperand0 = new JexlArithmetic.NullOperand();
      // Undeclared exception!
      try { 
        templateInterpreter0.visit(aSTDoWhileStatement0, jexlArithmetic_NullOperand0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
3224,"    protected Object visit(final ASTAddNode node, final Object data) {
        final Object left = node.jjtGetChild(0).jjtAccept(this, data);
        final Object right = node.jjtGetChild(1).jjtAccept(this, data);
        try {
            final Object result = operators.tryOverload(node, JexlOperator.ADD, left, right);
            return result != JexlEngine.TRY_FAILED ? result : arithmetic.add(left, right);
        } catch (final ArithmeticException xrt) {
            throw new JexlException(node, ""+ error"", xrt);
        }
    }","  public void test58()  throws Throwable  {
      Engine engine0 = new Engine();
      String[] stringArray0 = new String[0];
      Scope scope0 = new Scope((Scope) null, stringArray0);
      Frame frame0 = new Frame(scope0, stringArray0, (-60));
      JexlOptions jexlOptions0 = engine0.options((JexlContext) null);
      Interpreter interpreter0 = engine0.createInterpreter((JexlContext) null, frame0, jexlOptions0);
      ASTDivNode aSTDivNode0 = new ASTDivNode((-60));
      JexlArithmetic.NullOperand jexlArithmetic_NullOperand0 = new JexlArithmetic.NullOperand();
      // Undeclared exception!
      try { 
        interpreter0.visit(aSTDivNode0, jexlArithmetic_NullOperand0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
3225,"    protected Object visit(final ASTAddNode node, final Object data) {
        final Object left = node.jjtGetChild(0).jjtAccept(this, data);
        final Object right = node.jjtGetChild(1).jjtAccept(this, data);
        try {
            final Object result = operators.tryOverload(node, JexlOperator.ADD, left, right);
            return result != JexlEngine.TRY_FAILED ? result : arithmetic.add(left, right);
        } catch (final ArithmeticException xrt) {
            throw new JexlException(node, ""+ error"", xrt);
        }
    }","  public void test59()  throws Throwable  {
      Engine engine0 = new Engine();
      TemplateInterpreter.Arguments templateInterpreter_Arguments0 = new TemplateInterpreter.Arguments(engine0);
      TemplateInterpreter templateInterpreter0 = new TemplateInterpreter(templateInterpreter_Arguments0);
      ASTBreak aSTBreak0 = new ASTBreak(81);
      ASTJexlLambda aSTJexlLambda0 = mock(ASTJexlLambda.class, new ViolatedAssumptionAnswer());
      doReturn((Frame) null).when(aSTJexlLambda0).createFrame(any(org.apache.commons.jexl3.internal.Frame.class) , any(java.lang.Object[].class));
      Closure closure0 = new Closure(templateInterpreter0, aSTJexlLambda0);
      // Undeclared exception!
      try { 
        templateInterpreter0.visit(aSTBreak0, closure0);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
      }
  }"
3226,"    protected Object visit(final ASTAddNode node, final Object data) {
        final Object left = node.jjtGetChild(0).jjtAccept(this, data);
        final Object right = node.jjtGetChild(1).jjtAccept(this, data);
        try {
            final Object result = operators.tryOverload(node, JexlOperator.ADD, left, right);
            return result != JexlEngine.TRY_FAILED ? result : arithmetic.add(left, right);
        } catch (final ArithmeticException xrt) {
            throw new JexlException(node, ""+ error"", xrt);
        }
    }","  public void test60()  throws Throwable  {
      Engine engine0 = new Engine();
      ASTJexlScript aSTJexlScript0 = new ASTJexlScript(0);
      MapContext mapContext0 = new MapContext();
      JexlOptions jexlOptions0 = engine0.options(aSTJexlScript0, mapContext0);
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[2];
      Scope scope1 = new Scope(scope0, stringArray0);
      Frame frame0 = new Frame(scope1, stringArray0, 97);
      Interpreter interpreter0 = engine0.createInterpreter(engine0.EMPTY_CONTEXT, frame0, jexlOptions0);
      // Undeclared exception!
      try { 
        interpreter0.visit((ASTBlock) null, (Object) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.internal.Interpreter"", e);
      }
  }"
3227,"    protected Object visit(final ASTAddNode node, final Object data) {
        final Object left = node.jjtGetChild(0).jjtAccept(this, data);
        final Object right = node.jjtGetChild(1).jjtAccept(this, data);
        try {
            final Object result = operators.tryOverload(node, JexlOperator.ADD, left, right);
            return result != JexlEngine.TRY_FAILED ? result : arithmetic.add(left, right);
        } catch (final ArithmeticException xrt) {
            throw new JexlException(node, ""+ error"", xrt);
        }
    }","  public void test61()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      TemplateInterpreter.Arguments templateInterpreter_Arguments0 = new TemplateInterpreter.Arguments(engine0);
      TemplateInterpreter templateInterpreter0 = new TemplateInterpreter(templateInterpreter_Arguments0);
      ASTBitwiseXorNode aSTBitwiseXorNode0 = new ASTBitwiseXorNode(37);
      // Undeclared exception!
      try { 
        templateInterpreter0.visit(aSTBitwiseXorNode0, templateInterpreter_Arguments0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
3228,"    protected Object visit(final ASTAddNode node, final Object data) {
        final Object left = node.jjtGetChild(0).jjtAccept(this, data);
        final Object right = node.jjtGetChild(1).jjtAccept(this, data);
        try {
            final Object result = operators.tryOverload(node, JexlOperator.ADD, left, right);
            return result != JexlEngine.TRY_FAILED ? result : arithmetic.add(left, right);
        } catch (final ArithmeticException xrt) {
            throw new JexlException(node, ""+ error"", xrt);
        }
    }","  public void test62()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      TemplateInterpreter.Arguments templateInterpreter_Arguments0 = new TemplateInterpreter.Arguments(engine0);
      TemplateInterpreter templateInterpreter0 = new TemplateInterpreter(templateInterpreter_Arguments0);
      Parser parser0 = engine0.parser;
      ASTBitwiseOrNode aSTBitwiseOrNode0 = new ASTBitwiseOrNode(parser0, (-4374));
      // Undeclared exception!
      try { 
        templateInterpreter0.visit(aSTBitwiseOrNode0, (Object) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
3229,"    protected Object visit(final ASTAddNode node, final Object data) {
        final Object left = node.jjtGetChild(0).jjtAccept(this, data);
        final Object right = node.jjtGetChild(1).jjtAccept(this, data);
        try {
            final Object result = operators.tryOverload(node, JexlOperator.ADD, left, right);
            return result != JexlEngine.TRY_FAILED ? result : arithmetic.add(left, right);
        } catch (final ArithmeticException xrt) {
            throw new JexlException(node, ""+ error"", xrt);
        }
    }","  public void test63()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      TemplateInterpreter.Arguments templateInterpreter_Arguments0 = new TemplateInterpreter.Arguments(engine0);
      TemplateEngine.TemplateExpression[] templateEngine_TemplateExpressionArray0 = new TemplateEngine.TemplateExpression[3];
      TemplateInterpreter templateInterpreter0 = new TemplateInterpreter(templateInterpreter_Arguments0);
      ASTBitwiseComplNode aSTBitwiseComplNode0 = new ASTBitwiseComplNode((-2213));
      ASTJexlScript aSTJexlScript0 = new ASTJexlScript((-2213));
      Script script0 = new Script(engine0, ""org.apache.commons.jexl3.internal.introspection.AbstractExecutor$Get"", aSTJexlScript0);
      Closure closure0 = new Closure(script0, templateEngine_TemplateExpressionArray0);
      // Undeclared exception!
      try { 
        templateInterpreter0.visit(aSTBitwiseComplNode0, closure0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
3230,"    protected Object visit(final ASTAddNode node, final Object data) {
        final Object left = node.jjtGetChild(0).jjtAccept(this, data);
        final Object right = node.jjtGetChild(1).jjtAccept(this, data);
        try {
            final Object result = operators.tryOverload(node, JexlOperator.ADD, left, right);
            return result != JexlEngine.TRY_FAILED ? result : arithmetic.add(left, right);
        } catch (final ArithmeticException xrt) {
            throw new JexlException(node, ""+ error"", xrt);
        }
    }","  public void test64()  throws Throwable  {
      Engine engine0 = new Engine();
      JexlOptions jexlOptions0 = new JexlOptions();
      Interpreter interpreter0 = new Interpreter(engine0, jexlOptions0, engine0.EMPTY_CONTEXT, (Frame) null);
      Parser parser0 = engine0.parser;
      ASTBitwiseAndNode aSTBitwiseAndNode0 = new ASTBitwiseAndNode(parser0, 4096);
      // Undeclared exception!
      try { 
        interpreter0.visit(aSTBitwiseAndNode0, parser0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
3231,"    protected Object visit(final ASTAddNode node, final Object data) {
        final Object left = node.jjtGetChild(0).jjtAccept(this, data);
        final Object right = node.jjtGetChild(1).jjtAccept(this, data);
        try {
            final Object result = operators.tryOverload(node, JexlOperator.ADD, left, right);
            return result != JexlEngine.TRY_FAILED ? result : arithmetic.add(left, right);
        } catch (final ArithmeticException xrt) {
            throw new JexlException(node, ""+ error"", xrt);
        }
    }","  public void test65()  throws Throwable  {
      Engine engine0 = new Engine();
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlOptions jexlOptions0 = jexlBuilder0.options();
      Object[] objectArray0 = new Object[4];
      Frame frame0 = new Frame((Scope) null, objectArray0, 56);
      Interpreter interpreter0 = new Interpreter(engine0, jexlOptions0, engine0.EMPTY_CONTEXT, frame0);
      Parser parser0 = new Parser(""8"");
      ASTExtendedLiteral aSTExtendedLiteral0 = new ASTExtendedLiteral(parser0, (-3107));
      // Undeclared exception!
      try { 
        interpreter0.visit((ASTAssignment) null, aSTExtendedLiteral0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.internal.Interpreter"", e);
      }
  }"
3232,"    protected Object visit(final ASTAddNode node, final Object data) {
        final Object left = node.jjtGetChild(0).jjtAccept(this, data);
        final Object right = node.jjtGetChild(1).jjtAccept(this, data);
        try {
            final Object result = operators.tryOverload(node, JexlOperator.ADD, left, right);
            return result != JexlEngine.TRY_FAILED ? result : arithmetic.add(left, right);
        } catch (final ArithmeticException xrt) {
            throw new JexlException(node, ""+ error"", xrt);
        }
    }","  public void test66()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      TemplateInterpreter.Arguments templateInterpreter_Arguments0 = new TemplateInterpreter.Arguments(engine0);
      TemplateInterpreter templateInterpreter0 = new TemplateInterpreter(templateInterpreter_Arguments0);
      ASTNotNode aSTNotNode0 = new ASTNotNode(36);
      ASTArrayLiteral aSTArrayLiteral0 = mock(ASTArrayLiteral.class, new ViolatedAssumptionAnswer());
      doReturn(aSTNotNode0, aSTNotNode0).when(aSTArrayLiteral0).jjtGetChild(anyInt());
      doReturn(2).when(aSTArrayLiteral0).jjtGetNumChildren();
      // Undeclared exception!
      try { 
        templateInterpreter0.visit(aSTArrayLiteral0, (Object) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
3233,"    protected Object visit(final ASTAddNode node, final Object data) {
        final Object left = node.jjtGetChild(0).jjtAccept(this, data);
        final Object right = node.jjtGetChild(1).jjtAccept(this, data);
        try {
            final Object result = operators.tryOverload(node, JexlOperator.ADD, left, right);
            return result != JexlEngine.TRY_FAILED ? result : arithmetic.add(left, right);
        } catch (final ArithmeticException xrt) {
            throw new JexlException(node, ""+ error"", xrt);
        }
    }","  public void test67()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      TemplateInterpreter.Arguments templateInterpreter_Arguments0 = new TemplateInterpreter.Arguments(engine0);
      TemplateInterpreter templateInterpreter0 = new TemplateInterpreter(templateInterpreter_Arguments0);
      ASTArrayLiteral aSTArrayLiteral0 = mock(ASTArrayLiteral.class, new ViolatedAssumptionAnswer());
      doReturn((-1326)).when(aSTArrayLiteral0).jjtGetNumChildren();
      // Undeclared exception!
      try { 
        templateInterpreter0.visit(aSTArrayLiteral0, (Object) null);
        fail(""Expecting exception: NegativeArraySizeException"");
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.internal.ArrayBuilder"", e);
      }
  }"
3234,"    protected Object visit(final ASTAddNode node, final Object data) {
        final Object left = node.jjtGetChild(0).jjtAccept(this, data);
        final Object right = node.jjtGetChild(1).jjtAccept(this, data);
        try {
            final Object result = operators.tryOverload(node, JexlOperator.ADD, left, right);
            return result != JexlEngine.TRY_FAILED ? result : arithmetic.add(left, right);
        } catch (final ArithmeticException xrt) {
            throw new JexlException(node, ""+ error"", xrt);
        }
    }","  public void test68()  throws Throwable  {
      Engine engine0 = new Engine();
      Interpreter interpreter0 = engine0.createInterpreter(engine0.EMPTY_CONTEXT, (Frame) null, (JexlOptions) null);
      ASTArguments aSTArguments0 = new ASTArguments(44);
      Parser parser0 = new Parser("""");
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[0];
      Scope scope1 = new Scope(scope0, stringArray0);
      ASTJexlScript aSTJexlScript0 = parser0.JexlScript(scope1);
      aSTArguments0.jjtAddChild(aSTJexlScript0, 44);
      // Undeclared exception!
      try { 
        interpreter0.visit(aSTArguments0, engine0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.internal.Interpreter"", e);
      }
  }"
3235,"    protected Object visit(final ASTAddNode node, final Object data) {
        final Object left = node.jjtGetChild(0).jjtAccept(this, data);
        final Object right = node.jjtGetChild(1).jjtAccept(this, data);
        try {
            final Object result = operators.tryOverload(node, JexlOperator.ADD, left, right);
            return result != JexlEngine.TRY_FAILED ? result : arithmetic.add(left, right);
        } catch (final ArithmeticException xrt) {
            throw new JexlException(node, ""+ error"", xrt);
        }
    }","  public void test69()  throws Throwable  {
      Engine engine0 = new Engine();
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[4];
      Scope scope1 = new Scope(scope0, stringArray0);
      ASTExtendedLiteral aSTExtendedLiteral0 = new ASTExtendedLiteral(1642);
      JexlOptions jexlOptions0 = new JexlOptions();
      Frame frame0 = new Frame(scope1, stringArray0, 1162);
      Interpreter interpreter0 = new Interpreter(engine0, jexlOptions0, (JexlContext) null, frame0);
      ASTAndNode aSTAndNode0 = new ASTAndNode(4779);
      // Undeclared exception!
      try { 
        interpreter0.visit(aSTAndNode0, aSTExtendedLiteral0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
3236,"    protected Object visit(final ASTAddNode node, final Object data) {
        final Object left = node.jjtGetChild(0).jjtAccept(this, data);
        final Object right = node.jjtGetChild(1).jjtAccept(this, data);
        try {
            final Object result = operators.tryOverload(node, JexlOperator.ADD, left, right);
            return result != JexlEngine.TRY_FAILED ? result : arithmetic.add(left, right);
        } catch (final ArithmeticException xrt) {
            throw new JexlException(node, ""+ error"", xrt);
        }
    }","  public void test70()  throws Throwable  {
      Engine engine0 = new Engine();
      Object[] objectArray0 = new Object[4];
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[7];
      Scope scope1 = new Scope(scope0, stringArray0);
      Frame frame0 = new Frame(scope1, objectArray0, (-1039));
      Interpreter interpreter0 = new Interpreter(engine0, (JexlOptions) null, engine0.EMPTY_CONTEXT, frame0);
      ASTAddNode aSTAddNode0 = new ASTAddNode((-1039));
      ASTExtendedLiteral aSTExtendedLiteral0 = new ASTExtendedLiteral((-1039));
      // Undeclared exception!
      try { 
        interpreter0.visit(aSTAddNode0, aSTExtendedLiteral0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
3237,"    public void setAttribute(final Object object, final Object attribute, final Object value) {
        setAttribute(object, attribute, value, null);
    }","  public void test71()  throws Throwable  {
      Engine engine0 = new Engine();
      Interpreter interpreter0 = engine0.createInterpreter(engine0.EMPTY_CONTEXT, (Frame) null, (JexlOptions) null);
      JexlArithmetic.NullOperand jexlArithmetic_NullOperand0 = new JexlArithmetic.NullOperand();
      // Undeclared exception!
      try { 
        interpreter0.setAttribute(jexlArithmetic_NullOperand0, (Object) null, """");
        fail(""Expecting exception: UnsupportedOperationException"");
      } catch(UnsupportedOperationException e) {
         //
         // unable to set object property, class: org.apache.commons.jexl3.JexlArithmetic$NullOperand, property: null, argument: String
         //
         verifyException(""org.apache.commons.jexl3.internal.InterpreterBase"", e);
      }
  }"
3238,"    public void setAttribute(final Object object, final Object attribute, final Object value) {
        setAttribute(object, attribute, value, null);
    }","  public void test72()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      JexlOptions jexlOptions0 = new JexlOptions();
      Object[] objectArray0 = new Object[4];
      Frame frame0 = new Frame((Scope) null, objectArray0, (-1));
      Interpreter interpreter0 = new Interpreter(engine0, jexlOptions0, engine0.EMPTY_CONTEXT, frame0);
      // Undeclared exception!
      try { 
        interpreter0.setAttribute(objectArray0[0], (Object) null, (Object) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.internal.InterpreterBase"", e);
      }
  }"
3239,"    protected Object runClosure(final Closure closure, final Object data) {
        final ASTJexlScript script = closure.getScript();
        block = new LexicalFrame(frame, block).defineArgs();
        try {
            final JexlNode body = script.jjtGetChild(script.jjtGetNumChildren() - 1);
            return interpret(body);
        } finally {
            block = block.pop();
        }
    }","  public void test73()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      TemplateInterpreter.Arguments templateInterpreter_Arguments0 = new TemplateInterpreter.Arguments(engine0);
      TemplateInterpreter templateInterpreter0 = new TemplateInterpreter(templateInterpreter_Arguments0);
      // Undeclared exception!
      try { 
        templateInterpreter0.runClosure((Closure) null, (Object) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.internal.Interpreter"", e);
      }
  }"
3240,"    public Object getAttribute(final Object object, final Object attribute) {
        return getAttribute(object, attribute, null);
    }","  public void test74()  throws Throwable  {
      Engine engine0 = new Engine();
      JexlUberspect.ResolverStrategy jexlUberspect_ResolverStrategy0 = JexlUberspect.MAP_STRATEGY;
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[7];
      Scope scope1 = new Scope(scope0, stringArray0);
      Frame frame0 = new Frame(scope1, stringArray0, (-518));
      Interpreter interpreter0 = new Interpreter(engine0, (JexlOptions) null, engine0.EMPTY_CONTEXT, frame0);
      // Undeclared exception!
      try { 
        interpreter0.getAttribute("""", jexlUberspect_ResolverStrategy0);
        fail(""Expecting exception: UnsupportedOperationException"");
      } catch(UnsupportedOperationException e) {
         //
         // unable to get object property, class: java.lang.String, property: org.apache.commons.jexl3.introspection.JexlUberspect$$Lambda$61/1012325979@4910b55f
         //
         verifyException(""org.apache.commons.jexl3.internal.InterpreterBase"", e);
      }
  }"
3241,"    public Object getAttribute(final Object object, final Object attribute) {
        return getAttribute(object, attribute, null);
    }","  public void test75()  throws Throwable  {
      Engine engine0 = new Engine();
      JexlEngine.EmptyContext jexlEngine_EmptyContext0 = (JexlEngine.EmptyContext)JexlEngine.EMPTY_CONTEXT;
      JexlOptions jexlOptions0 = engine0.options(jexlEngine_EmptyContext0);
      ASTJexlScript aSTJexlScript0 = new ASTJexlScript(46);
      Script script0 = new Script(engine0, ""of!0D$V&m3iGZ?-sh"", aSTJexlScript0);
      Closure closure0 = new Closure(script0, (Object[]) null);
      Interpreter interpreter0 = engine0.createInterpreter(engine0.EMPTY_CONTEXT, (Frame) null, jexlOptions0);
      Parser parser0 = new Parser("""");
      ASTAnnotatedStatement aSTAnnotatedStatement0 = new ASTAnnotatedStatement(parser0, (-1));
      // Undeclared exception!
      try { 
        interpreter0.getAttribute(closure0, aSTAnnotatedStatement0);
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException(""org.apache.commons.jexl3.parser.SimpleNode"", e);
      }
  }"
3242,"    protected Object executeAssign(final JexlNode node, final JexlOperator assignop, final Object data) { // CSOFF: MethodLength
        cancelCheck(node);
        // left contains the reference to assign to
        final JexlNode left = node.jjtGetChild(0);
        ASTIdentifier var = null;
        Object object = null;
        int symbol = -1;
        // check var decl with assign is ok
        if (left instanceof ASTIdentifier) {
            var = (ASTIdentifier) left;
            symbol = var.getSymbol();
            if (symbol >= 0 && options.isLexical()) {
                if (var instanceof ASTVar) {
                    if (!defineVariable((ASTVar) var, block)) {
                        return redefinedVariable(var, var.getName());
                    }
                } else if (options.isLexicalShade() && var.isShaded()) {
                    return undefinedVariable(var, var.getName());
                }
            }
        }
        boolean antish = options.isAntish();
        // 0: determine initial object & property:
        final int last = left.jjtGetNumChildren() - 1;
        // right is the value expression to assign
        Object right = node.jjtGetChild(1).jjtAccept(this, data);
        // a (var?) v = ... expression
        if (var != null) {
            if (symbol >= 0) {
                // check we are not assigning a symbol itself
                if (last < 0) {
                    if (assignop != null) {
                        final Object self = getVariable(frame, block, var);
                        right = operators.tryAssignOverload(node, assignop, self, right);
                        if (right == JexlOperator.ASSIGN) {
                            return self;
                        }
                    }
                    frame.set(symbol, right);
                    // make the closure accessible to itself, ie capture the currently set variable after frame creation
                    if (right instanceof Closure) {
                        ((Closure) right).setCaptured(symbol, right);
                    }
                    return right; // 1
                }
                object = getVariable(frame, block, var);
                // top level is a symbol, can not be an antish var
                antish = false;
            } else {
                // check we are not assigning direct global
                if (last < 0) {
                    if (assignop != null) {
                        final Object self = context.get(var.getName());
                        right = operators.tryAssignOverload(node, assignop, self, right);
                        if (right == JexlOperator.ASSIGN) {
                            return self;
                        }
                    }
                    setContextVariable(node, var.getName(), right);
                    return right; // 2
                }
                object = context.get(var.getName());
                // top level accesses object, can not be an antish var
                if (object != null) {
                    antish = false;
                }
            }
        } else if (!(left instanceof ASTReference)) {
            throw new JexlException(left, ""illegal assignment form 0"");
        }
        // 1: follow children till penultimate, resolve dot/array
        JexlNode objectNode = null;
        StringBuilder ant = null;
        int v = 1;
        // start at 1 if symbol
        main: for (int c = symbol >= 0 ? 1 : 0; c < last; ++c) {
            objectNode = left.jjtGetChild(c);
            object = objectNode.jjtAccept(this, object);
            if (object != null) {
                // disallow mixing antish variable & bean with same root; avoid ambiguity
                antish = false;
            } else if (antish) {
                // initialize if first time
                if (ant == null) {
                    final JexlNode first = left.jjtGetChild(0);
                    final ASTIdentifier firstId = first instanceof ASTIdentifier
                            ? (ASTIdentifier) first
                            : null;
                    if ((firstId == null) || (firstId.getSymbol() >= 0)) {
                        // ant remains null, object is null, stop solving
                        antish = false;
                        break main;
                    }
                    ant = new StringBuilder(firstId.getName());
                }
                // catch up to current child
                for (; v <= c; ++v) {
                    final JexlNode child = left.jjtGetChild(v);
                    final ASTIdentifierAccess aid = child instanceof ASTIdentifierAccess
                            ? (ASTIdentifierAccess) child
                            : null;
                    // remain antish only if unsafe navigation
                    if ((aid == null) || aid.isSafe() || aid.isExpression()) {
                        antish = false;
                        break main;
                    }
                    ant.append('.');
                    ant.append(aid.getName());
                }
                // solve antish
                object = context.get(ant.toString());
            } else {
                throw new JexlException(objectNode, ""illegal assignment form"");
            }
        }
        // 2: last objectNode will perform assignement in all cases
        Object property = null;
        JexlNode propertyNode = left.jjtGetChild(last);
        final ASTIdentifierAccess propertyId = propertyNode instanceof ASTIdentifierAccess
                ? (ASTIdentifierAccess) propertyNode
                : null;
        if (propertyId != null) {
            // deal with creating/assignining antish variable
            if (antish && ant != null && object == null && !propertyId.isSafe() && !propertyId.isExpression()) {
                if (last > 0) {
                    ant.append('.');
                }
                ant.append(propertyId.getName());
                if (assignop != null) {
                    final Object self = context.get(ant.toString());
                    right = operators.tryAssignOverload(node, assignop, self, right);
                    if (right == JexlOperator.ASSIGN) {
                        return self;
                    }
                }
                setContextVariable(propertyNode, ant.toString(), right);
                return right; // 3
            }
            // property of an object ?
            property = evalIdentifier(propertyId);
        } else if (propertyNode instanceof ASTArrayAccess) {
            // can have multiple nodes - either an expression, integer literal or reference
            final int numChildren = propertyNode.jjtGetNumChildren() - 1;
            for (int i = 0; i < numChildren; i++) {
                final JexlNode nindex = propertyNode.jjtGetChild(i);
                final Object index = nindex.jjtAccept(this, null);
                object = getAttribute(object, index, nindex);
            }
            propertyNode = propertyNode.jjtGetChild(numChildren);
            property = propertyNode.jjtAccept(this, null);
        } else {
            throw new JexlException(objectNode, ""illegal assignment form"");
        }
        // we may have a null property as in map[null], no check needed.
        // we can not *have* a null object though.
        if (object == null) {
            // no object, we fail
            return unsolvableProperty(objectNode, ""<null>.<?>"", true, null);
        }
        // 3: one before last, assign
        if (assignop != null) {
            final Object self = getAttribute(object, property, propertyNode);
            right = operators.tryAssignOverload(node, assignop, self, right);
            if (right == JexlOperator.ASSIGN) {
                return self;
            }
        }
        setAttribute(object, property, right, propertyNode);
        return right; // 4
    }","  public void test76()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      TemplateInterpreter.Arguments templateInterpreter_Arguments0 = new TemplateInterpreter.Arguments(engine0);
      ASTJexlScript aSTJexlScript0 = new ASTJexlScript((-2));
      TemplateInterpreter templateInterpreter0 = new TemplateInterpreter(templateInterpreter_Arguments0);
      JexlOperator jexlOperator0 = JexlOperator.COMPLEMENT;
      // Undeclared exception!
      try { 
        templateInterpreter0.executeAssign(aSTJexlScript0, jexlOperator0, jexlOperator0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
3243,"    protected Object executeAssign(final JexlNode node, final JexlOperator assignop, final Object data) { // CSOFF: MethodLength
        cancelCheck(node);
        // left contains the reference to assign to
        final JexlNode left = node.jjtGetChild(0);
        ASTIdentifier var = null;
        Object object = null;
        int symbol = -1;
        // check var decl with assign is ok
        if (left instanceof ASTIdentifier) {
            var = (ASTIdentifier) left;
            symbol = var.getSymbol();
            if (symbol >= 0 && options.isLexical()) {
                if (var instanceof ASTVar) {
                    if (!defineVariable((ASTVar) var, block)) {
                        return redefinedVariable(var, var.getName());
                    }
                } else if (options.isLexicalShade() && var.isShaded()) {
                    return undefinedVariable(var, var.getName());
                }
            }
        }
        boolean antish = options.isAntish();
        // 0: determine initial object & property:
        final int last = left.jjtGetNumChildren() - 1;
        // right is the value expression to assign
        Object right = node.jjtGetChild(1).jjtAccept(this, data);
        // a (var?) v = ... expression
        if (var != null) {
            if (symbol >= 0) {
                // check we are not assigning a symbol itself
                if (last < 0) {
                    if (assignop != null) {
                        final Object self = getVariable(frame, block, var);
                        right = operators.tryAssignOverload(node, assignop, self, right);
                        if (right == JexlOperator.ASSIGN) {
                            return self;
                        }
                    }
                    frame.set(symbol, right);
                    // make the closure accessible to itself, ie capture the currently set variable after frame creation
                    if (right instanceof Closure) {
                        ((Closure) right).setCaptured(symbol, right);
                    }
                    return right; // 1
                }
                object = getVariable(frame, block, var);
                // top level is a symbol, can not be an antish var
                antish = false;
            } else {
                // check we are not assigning direct global
                if (last < 0) {
                    if (assignop != null) {
                        final Object self = context.get(var.getName());
                        right = operators.tryAssignOverload(node, assignop, self, right);
                        if (right == JexlOperator.ASSIGN) {
                            return self;
                        }
                    }
                    setContextVariable(node, var.getName(), right);
                    return right; // 2
                }
                object = context.get(var.getName());
                // top level accesses object, can not be an antish var
                if (object != null) {
                    antish = false;
                }
            }
        } else if (!(left instanceof ASTReference)) {
            throw new JexlException(left, ""illegal assignment form 0"");
        }
        // 1: follow children till penultimate, resolve dot/array
        JexlNode objectNode = null;
        StringBuilder ant = null;
        int v = 1;
        // start at 1 if symbol
        main: for (int c = symbol >= 0 ? 1 : 0; c < last; ++c) {
            objectNode = left.jjtGetChild(c);
            object = objectNode.jjtAccept(this, object);
            if (object != null) {
                // disallow mixing antish variable & bean with same root; avoid ambiguity
                antish = false;
            } else if (antish) {
                // initialize if first time
                if (ant == null) {
                    final JexlNode first = left.jjtGetChild(0);
                    final ASTIdentifier firstId = first instanceof ASTIdentifier
                            ? (ASTIdentifier) first
                            : null;
                    if ((firstId == null) || (firstId.getSymbol() >= 0)) {
                        // ant remains null, object is null, stop solving
                        antish = false;
                        break main;
                    }
                    ant = new StringBuilder(firstId.getName());
                }
                // catch up to current child
                for (; v <= c; ++v) {
                    final JexlNode child = left.jjtGetChild(v);
                    final ASTIdentifierAccess aid = child instanceof ASTIdentifierAccess
                            ? (ASTIdentifierAccess) child
                            : null;
                    // remain antish only if unsafe navigation
                    if ((aid == null) || aid.isSafe() || aid.isExpression()) {
                        antish = false;
                        break main;
                    }
                    ant.append('.');
                    ant.append(aid.getName());
                }
                // solve antish
                object = context.get(ant.toString());
            } else {
                throw new JexlException(objectNode, ""illegal assignment form"");
            }
        }
        // 2: last objectNode will perform assignement in all cases
        Object property = null;
        JexlNode propertyNode = left.jjtGetChild(last);
        final ASTIdentifierAccess propertyId = propertyNode instanceof ASTIdentifierAccess
                ? (ASTIdentifierAccess) propertyNode
                : null;
        if (propertyId != null) {
            // deal with creating/assignining antish variable
            if (antish && ant != null && object == null && !propertyId.isSafe() && !propertyId.isExpression()) {
                if (last > 0) {
                    ant.append('.');
                }
                ant.append(propertyId.getName());
                if (assignop != null) {
                    final Object self = context.get(ant.toString());
                    right = operators.tryAssignOverload(node, assignop, self, right);
                    if (right == JexlOperator.ASSIGN) {
                        return self;
                    }
                }
                setContextVariable(propertyNode, ant.toString(), right);
                return right; // 3
            }
            // property of an object ?
            property = evalIdentifier(propertyId);
        } else if (propertyNode instanceof ASTArrayAccess) {
            // can have multiple nodes - either an expression, integer literal or reference
            final int numChildren = propertyNode.jjtGetNumChildren() - 1;
            for (int i = 0; i < numChildren; i++) {
                final JexlNode nindex = propertyNode.jjtGetChild(i);
                final Object index = nindex.jjtAccept(this, null);
                object = getAttribute(object, index, nindex);
            }
            propertyNode = propertyNode.jjtGetChild(numChildren);
            property = propertyNode.jjtAccept(this, null);
        } else {
            throw new JexlException(objectNode, ""illegal assignment form"");
        }
        // we may have a null property as in map[null], no check needed.
        // we can not *have* a null object though.
        if (object == null) {
            // no object, we fail
            return unsolvableProperty(objectNode, ""<null>.<?>"", true, null);
        }
        // 3: one before last, assign
        if (assignop != null) {
            final Object self = getAttribute(object, property, propertyNode);
            right = operators.tryAssignOverload(node, assignop, self, right);
            if (right == JexlOperator.ASSIGN) {
                return self;
            }
        }
        setAttribute(object, property, right, propertyNode);
        return right; // 4
    }","  public void test77()  throws Throwable  {
      Engine engine0 = new Engine();
      TemplateInterpreter.Arguments templateInterpreter_Arguments0 = new TemplateInterpreter.Arguments(engine0);
      TemplateInterpreter templateInterpreter0 = new TemplateInterpreter(templateInterpreter_Arguments0);
      JexlInfo jexlInfo0 = engine0.createInfo((String) null, 3552, 1162);
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[4];
      Scope scope1 = new Scope(scope0, stringArray0);
      ASTJexlScript aSTJexlScript0 = engine0.parse(jexlInfo0, false, ""org.apache.commons.jexl3.parser.ASTIdentifier"", scope1);
      JexlOperator jexlOperator0 = JexlOperator.PROPERTY_GET;
      ASTExtendedLiteral aSTExtendedLiteral0 = new ASTExtendedLiteral(1642);
      // Undeclared exception!
      try { 
        templateInterpreter0.executeAssign(aSTJexlScript0, jexlOperator0, aSTExtendedLiteral0);
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
3244,"    protected Object call(final JexlNode node, final Object target, Object functor, final ASTArguments argNode) {
        cancelCheck(node);
        // evaluate the arguments
        final Object[] argv = visit(argNode, null);
        // get the method name if identifier
        final int symbol;
        final String methodName;
        boolean cacheable = cache;
        boolean isavar = false;
        if (functor instanceof ASTIdentifier) {
            // function call, target is context or namespace (if there was one)
            final ASTIdentifier methodIdentifier = (ASTIdentifier) functor;
            symbol = methodIdentifier.getSymbol();
            methodName = methodIdentifier.getName();
            functor = null;
            // is it a global or local variable ?
            if (target == context) {
                if (frame != null && frame.has(symbol)) {
                    functor = frame.get(symbol);
                    isavar = functor != null;
                } else if (context.has(methodName)) {
                    functor = context.get(methodName);
                    isavar = functor != null;
                }
                // name is a variable, can't be cached
                cacheable &= !isavar;
            }
        } else if (functor instanceof ASTIdentifierAccess) {
            // a method call on target
            methodName = ((ASTIdentifierAccess) functor).getName();
            symbol = -1;
            functor = null;
            cacheable = true;
        } else if (functor != null) {
            // ...(x)(y)
            symbol = -1 - 1; // -2;
            methodName = null;
            cacheable = false;
        } else if (!node.isSafeLhs(isSafe())) {
            return unsolvableMethod(node, ""?(...)"");
        } else {
            // safe lhs
            return null;
        }

        // solving the call site
        final CallDispatcher call = new CallDispatcher(node, cacheable);
        try {
            // do we have a  cached version method/function name ?
            final Object eval = call.tryEval(target, methodName, argv);
            if (JexlEngine.TRY_FAILED != eval) {
                return eval;
            }
            boolean functorp = false;
            boolean narrow = false;
            // pseudo loop to try acquiring methods without and with argument narrowing
            while (true) {
                call.narrow = narrow;
                // direct function or method call
                if (functor == null || functorp) {
                    // try a method or function from context
                    if (call.isTargetMethod(target, methodName, argv)) {
                        return call.eval(methodName);
                    }
                    if (target == context) {
                        // solve 'null' namespace
                        final Object namespace = resolveNamespace(null, node);
                        if (namespace != null
                            && namespace != context
                            && call.isTargetMethod(namespace, methodName, argv)) {
                            return call.eval(methodName);
                        }
                        // do not try context function since this was attempted
                        // 10 lines above...; solve as an arithmetic function
                        if (call.isArithmeticMethod(methodName, argv)) {
                            return call.eval(methodName);
                        }
                        // could not find a method, try as a property of a non-context target (performed once)
                    } else {
                        // try prepending target to arguments and look for
                        // applicable method in context...
                        final Object[] pargv = functionArguments(target, narrow, argv);
                        if (call.isContextMethod(methodName, pargv)) {
                            return call.eval(methodName);
                        }
                        // ...or arithmetic
                        if (call.isArithmeticMethod(methodName, pargv)) {
                            return call.eval(methodName);
                        }
                        // the method may also be a functor stored in a property of the target
                        if (!narrow) {
                            final JexlPropertyGet get = uberspect.getPropertyGet(target, methodName);
                            if (get != null) {
                                functor = get.tryInvoke(target, methodName);
                                functorp = functor != null;
                            }
                        }
                    }
                }
                // this may happen without the above when we are chaining call like x(a)(b)
                // or when a var/symbol or antish var is used as a ""function"" name
                if (functor != null) {
                    // lambda, script or jexl method will do
                    if (functor instanceof JexlScript) {
                        return ((JexlScript) functor).execute(context, argv);
                    }
                    if (functor instanceof JexlMethod) {
                        return ((JexlMethod) functor).invoke(target, argv);
                    }
                    final String mCALL = ""call"";
                    // may be a generic callable, try a 'call' method
                    if (call.isTargetMethod(functor, mCALL, argv)) {
                        return call.eval(mCALL);
                    }
                    // functor is a var, may be method is a global one ?
                    if (isavar && target == context) {
                        if (call.isContextMethod(methodName, argv)) {
                            return call.eval(methodName);
                        }
                        if (call.isArithmeticMethod(methodName, argv)) {
                            return call.eval(methodName);
                        }
                    }
                    // try prepending functor to arguments and look for
                    // context or arithmetic function called 'call'
                    final Object[] pargv = functionArguments(functor, narrow, argv);
                    if (call.isContextMethod(mCALL, pargv)) {
                        return call.eval(mCALL);
                    }
                    if (call.isArithmeticMethod(mCALL, pargv)) {
                        return call.eval(mCALL);
                    }
                }
                // if we did not find an exact method by name and we haven't tried yet,
                // attempt to narrow the parameters and if this succeeds, try again in next loop
                if (narrow || !arithmetic.narrowArguments(argv)) {
                    break;
                }
                narrow = true;
                // continue;
            }
        } catch (JexlException.Method xmethod) {
            // ignore and handle at end; treat as an inner discover that fails
        } catch (final JexlException.TryFailed xany) {
            throw invocationException(node, methodName, xany);
        } catch (final JexlException xthru) {
            throw xthru;
        } catch (final Exception xany) {
            throw invocationException(node, methodName, xany);
        }
        // we have either evaluated and returned or no method was found
        return node.isSafeLhs(isSafe())
                ? null
                : unsolvableMethod(node, methodName, argv);
    }","  public void test78()  throws Throwable  {
      Engine engine0 = new Engine();
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      Scope scope1 = new Scope(scope0, (String[]) null);
      Frame frame0 = new Frame(scope1, (Object[]) null, 108);
      Interpreter interpreter0 = engine0.createInterpreter((JexlContext) null, frame0, (JexlOptions) null);
      ASTArrayAccess aSTArrayAccess0 = new ASTArrayAccess(2022);
      // Undeclared exception!
      try { 
        interpreter0.call((JexlNode) null, aSTArrayAccess0, (Object) null, (ASTArguments) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.internal.Interpreter"", e);
      }
  }"
3245,"    protected Interpreter(final Engine engine, final JexlOptions opts, final JexlContext aContext, final Frame eFrame) {
        super(engine, opts, aContext);
        this.frame = eFrame;
    }","  public void test79()  throws Throwable  {
      Interpreter interpreter0 = null;
      try {
        interpreter0 = new Interpreter((Interpreter) null, (JexlArithmetic) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.internal.InterpreterBase"", e);
      }
  }"
3246,"    protected Interpreter(final Engine engine, final JexlOptions opts, final JexlContext aContext, final Frame eFrame) {
        super(engine, opts, aContext);
        this.frame = eFrame;
    }","  public void test80()  throws Throwable  {
      Engine engine0 = new Engine();
      ASTJexlScript aSTJexlScript0 = new ASTJexlScript(1810);
      ObjectContext<Double> objectContext0 = new ObjectContext<Double>((JexlEngine) null, (Double) null);
      JexlOptions jexlOptions0 = engine0.options(aSTJexlScript0, objectContext0);
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[7];
      Scope scope1 = new Scope(scope0, stringArray0);
      Frame frame0 = new Frame(scope1, stringArray0, 1810);
      Interpreter interpreter0 = null;
      try {
        interpreter0 = new Interpreter((Engine) null, jexlOptions0, engine0.EMPTY_CONTEXT, frame0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.internal.InterpreterBase"", e);
      }
  }"
3247,"    public Object interpret(final JexlNode node) {
        JexlContext.ThreadLocal tcontext = null;
        JexlEngine tjexl = null;
        Interpreter tinter = null;
        try {
            tinter = putThreadInterpreter(this);
            if (tinter != null) {
                fp = tinter.fp + 1;
            }
            if (context instanceof JexlContext.ThreadLocal) {
                tcontext = jexl.putThreadLocal((JexlContext.ThreadLocal) context);
            }
            tjexl = jexl.putThreadEngine(jexl);
            if (fp > jexl.stackOverflow) {
                throw new JexlException.StackOverflow(node.jexlInfo(), ""jexl ("" + jexl.stackOverflow + "")"", null);
            }
            cancelCheck(node);
            return node.jjtAccept(this, null);
        } catch(final StackOverflowError xstack) {
            final JexlException xjexl = new JexlException.StackOverflow(node.jexlInfo(), ""jvm"", xstack);
            if (!isSilent()) {
                throw xjexl.clean();
            }
            if (logger.isWarnEnabled()) {
                logger.warn(xjexl.getMessage(), xjexl.getCause());
            }
        } catch (final JexlException.Return xreturn) {
            return xreturn.getValue();
        } catch (final JexlException.Cancel xcancel) {
            // cancelled |= Thread.interrupted();
            cancelled.weakCompareAndSet(false, Thread.interrupted());
            if (isCancellable()) {
                throw xcancel.clean();
            }
        } catch (final JexlException xjexl) {
            if (!isSilent()) {
                throw xjexl.clean();
            }
            if (logger.isWarnEnabled()) {
                logger.warn(xjexl.getMessage(), xjexl.getCause());
            }
        } finally {
            synchronized(this) {
                if (functors != null) {
                    for (final Object functor : functors.values()) {
                        closeIfSupported(functor);
                    }
                    functors.clear();
                    functors = null;
                }
            }
            jexl.putThreadEngine(tjexl);
            if (context instanceof JexlContext.ThreadLocal) {
                jexl.putThreadLocal(tcontext);
            }
            if (tinter != null) {
                fp = tinter.fp - 1;
            }
            putThreadInterpreter(tinter);
        }
        return null;
    }","  public void test81()  throws Throwable  {
      ASTArguments aSTArguments0 = new ASTArguments(60);
      Engine engine0 = new Engine();
      TemplateInterpreter.Arguments templateInterpreter_Arguments0 = new TemplateInterpreter.Arguments(engine0);
      TemplateInterpreter templateInterpreter0 = new TemplateInterpreter(templateInterpreter_Arguments0);
      Object object0 = templateInterpreter0.interpret(aSTArguments0);
}"
3248,"    public Object interpret(final JexlNode node) {
        JexlContext.ThreadLocal tcontext = null;
        JexlEngine tjexl = null;
        Interpreter tinter = null;
        try {
            tinter = putThreadInterpreter(this);
            if (tinter != null) {
                fp = tinter.fp + 1;
            }
            if (context instanceof JexlContext.ThreadLocal) {
                tcontext = jexl.putThreadLocal((JexlContext.ThreadLocal) context);
            }
            tjexl = jexl.putThreadEngine(jexl);
            if (fp > jexl.stackOverflow) {
                throw new JexlException.StackOverflow(node.jexlInfo(), ""jexl ("" + jexl.stackOverflow + "")"", null);
            }
            cancelCheck(node);
            return node.jjtAccept(this, null);
        } catch(final StackOverflowError xstack) {
            final JexlException xjexl = new JexlException.StackOverflow(node.jexlInfo(), ""jvm"", xstack);
            if (!isSilent()) {
                throw xjexl.clean();
            }
            if (logger.isWarnEnabled()) {
                logger.warn(xjexl.getMessage(), xjexl.getCause());
            }
        } catch (final JexlException.Return xreturn) {
            return xreturn.getValue();
        } catch (final JexlException.Cancel xcancel) {
            // cancelled |= Thread.interrupted();
            cancelled.weakCompareAndSet(false, Thread.interrupted());
            if (isCancellable()) {
                throw xcancel.clean();
            }
        } catch (final JexlException xjexl) {
            if (!isSilent()) {
                throw xjexl.clean();
            }
            if (logger.isWarnEnabled()) {
                logger.warn(xjexl.getMessage(), xjexl.getCause());
            }
        } finally {
            synchronized(this) {
                if (functors != null) {
                    for (final Object functor : functors.values()) {
                        closeIfSupported(functor);
                    }
                    functors.clear();
                    functors = null;
                }
            }
            jexl.putThreadEngine(tjexl);
            if (context instanceof JexlContext.ThreadLocal) {
                jexl.putThreadLocal(tcontext);
            }
            if (tinter != null) {
                fp = tinter.fp - 1;
            }
            putThreadInterpreter(tinter);
        }
        return null;
    }","  public void test82()  throws Throwable  {
      Engine engine0 = new Engine();
      JexlEngine.EmptyContext jexlEngine_EmptyContext0 = (JexlEngine.EmptyContext)JexlEngine.EMPTY_CONTEXT;
      JexlOptions jexlOptions0 = engine0.options(jexlEngine_EmptyContext0);
      ASTJexlScript aSTJexlScript0 = new ASTJexlScript(46);
      Interpreter interpreter0 = new Interpreter(engine0, jexlOptions0, jexlEngine_EmptyContext0, (Frame) null);
      Object object0 = interpreter0.interpret(aSTJexlScript0);
}"
3249,"    public Object interpret(final JexlNode node) {
        JexlContext.ThreadLocal tcontext = null;
        JexlEngine tjexl = null;
        Interpreter tinter = null;
        try {
            tinter = putThreadInterpreter(this);
            if (tinter != null) {
                fp = tinter.fp + 1;
            }
            if (context instanceof JexlContext.ThreadLocal) {
                tcontext = jexl.putThreadLocal((JexlContext.ThreadLocal) context);
            }
            tjexl = jexl.putThreadEngine(jexl);
            if (fp > jexl.stackOverflow) {
                throw new JexlException.StackOverflow(node.jexlInfo(), ""jexl ("" + jexl.stackOverflow + "")"", null);
            }
            cancelCheck(node);
            return node.jjtAccept(this, null);
        } catch(final StackOverflowError xstack) {
            final JexlException xjexl = new JexlException.StackOverflow(node.jexlInfo(), ""jvm"", xstack);
            if (!isSilent()) {
                throw xjexl.clean();
            }
            if (logger.isWarnEnabled()) {
                logger.warn(xjexl.getMessage(), xjexl.getCause());
            }
        } catch (final JexlException.Return xreturn) {
            return xreturn.getValue();
        } catch (final JexlException.Cancel xcancel) {
            // cancelled |= Thread.interrupted();
            cancelled.weakCompareAndSet(false, Thread.interrupted());
            if (isCancellable()) {
                throw xcancel.clean();
            }
        } catch (final JexlException xjexl) {
            if (!isSilent()) {
                throw xjexl.clean();
            }
            if (logger.isWarnEnabled()) {
                logger.warn(xjexl.getMessage(), xjexl.getCause());
            }
        } finally {
            synchronized(this) {
                if (functors != null) {
                    for (final Object functor : functors.values()) {
                        closeIfSupported(functor);
                    }
                    functors.clear();
                    functors = null;
                }
            }
            jexl.putThreadEngine(tjexl);
            if (context instanceof JexlContext.ThreadLocal) {
                jexl.putThreadLocal(tcontext);
            }
            if (tinter != null) {
                fp = tinter.fp - 1;
            }
            putThreadInterpreter(tinter);
        }
        return null;
    }","  public void test83()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      TemplateInterpreter.Arguments templateInterpreter_Arguments0 = new TemplateInterpreter.Arguments(engine0);
      TemplateInterpreter templateInterpreter0 = new TemplateInterpreter(templateInterpreter_Arguments0);
      ASTBreak aSTBreak0 = new ASTBreak((-1041));
      // Undeclared exception!
      try { 
        templateInterpreter0.interpret(aSTBreak0);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
      }
  }"
3250,"    public Object interpret(final JexlNode node) {
        JexlContext.ThreadLocal tcontext = null;
        JexlEngine tjexl = null;
        Interpreter tinter = null;
        try {
            tinter = putThreadInterpreter(this);
            if (tinter != null) {
                fp = tinter.fp + 1;
            }
            if (context instanceof JexlContext.ThreadLocal) {
                tcontext = jexl.putThreadLocal((JexlContext.ThreadLocal) context);
            }
            tjexl = jexl.putThreadEngine(jexl);
            if (fp > jexl.stackOverflow) {
                throw new JexlException.StackOverflow(node.jexlInfo(), ""jexl ("" + jexl.stackOverflow + "")"", null);
            }
            cancelCheck(node);
            return node.jjtAccept(this, null);
        } catch(final StackOverflowError xstack) {
            final JexlException xjexl = new JexlException.StackOverflow(node.jexlInfo(), ""jvm"", xstack);
            if (!isSilent()) {
                throw xjexl.clean();
            }
            if (logger.isWarnEnabled()) {
                logger.warn(xjexl.getMessage(), xjexl.getCause());
            }
        } catch (final JexlException.Return xreturn) {
            return xreturn.getValue();
        } catch (final JexlException.Cancel xcancel) {
            // cancelled |= Thread.interrupted();
            cancelled.weakCompareAndSet(false, Thread.interrupted());
            if (isCancellable()) {
                throw xcancel.clean();
            }
        } catch (final JexlException xjexl) {
            if (!isSilent()) {
                throw xjexl.clean();
            }
            if (logger.isWarnEnabled()) {
                logger.warn(xjexl.getMessage(), xjexl.getCause());
            }
        } finally {
            synchronized(this) {
                if (functors != null) {
                    for (final Object functor : functors.values()) {
                        closeIfSupported(functor);
                    }
                    functors.clear();
                    functors = null;
                }
            }
            jexl.putThreadEngine(tjexl);
            if (context instanceof JexlContext.ThreadLocal) {
                jexl.putThreadLocal(tcontext);
            }
            if (tinter != null) {
                fp = tinter.fp - 1;
            }
            putThreadInterpreter(tinter);
        }
        return null;
    }","  public void test84()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      ASTJexlScript aSTJexlScript0 = new ASTJexlScript(59);
      Map<String, Object> map0 = engine0.functions;
      MapContext mapContext0 = new MapContext(map0);
      JexlOptions jexlOptions0 = engine0.options(aSTJexlScript0, mapContext0);
      Object[] objectArray0 = new Object[1];
      Frame frame0 = new Frame((Scope) null, objectArray0, (-1265));
      Interpreter interpreter0 = new Interpreter(engine0, jexlOptions0, engine0.EMPTY_CONTEXT, frame0);
      // Undeclared exception!
      try { 
        interpreter0.interpret(aSTJexlScript0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.internal.LexicalFrame"", e);
      }
  }"
3251,"    protected Object processAnnotation(final ASTAnnotatedStatement stmt, final int index, final Object data) {
        // are we evaluating the block ?
        final int last = stmt.jjtGetNumChildren() - 1;
        if (index == last) {
            final JexlNode cblock = stmt.jjtGetChild(last);
            // if the context has changed, might need a new interpreter
            final JexlArithmetic jexla = arithmetic.options(context);
            if (jexla == arithmetic) {
                return cblock.jjtAccept(Interpreter.this, data);
            }
            if (!arithmetic.getClass().equals(jexla.getClass())) {
                logger.warn(""expected arithmetic to be "" + arithmetic.getClass().getSimpleName()
                        + "", got "" + jexla.getClass().getSimpleName()
                );
            }
            final Interpreter ii = new Interpreter(Interpreter.this, jexla);
            final Object r = cblock.jjtAccept(ii, data);
            if (ii.isCancelled()) {
                Interpreter.this.cancel();
            }
            return r;
        }
        // tracking whether we processed the annotation
        final AnnotatedCall jstmt = new AnnotatedCall(stmt, index + 1, data);
        // the annotation node and name
        final ASTAnnotation anode = (ASTAnnotation) stmt.jjtGetChild(index);
        final String aname = anode.getName();
        // evaluate the arguments
        final Object[] argv = anode.jjtGetNumChildren() > 0
                        ? visit((ASTArguments) anode.jjtGetChild(0), null) : null;
        // wrap the future, will recurse through annotation processor
        Object result;
        try {
            result = processAnnotation(aname, argv, jstmt);
            // not processing an annotation is an error
            if (!jstmt.isProcessed()) {
                return annotationError(anode, aname, null);
            }
        } catch (final JexlException xany) {
            throw xany;
        } catch (final Exception xany) {
            return annotationError(anode, aname, xany);
        }
        // the caller may return a return, break or continue
        if (result instanceof JexlException) {
            throw (JexlException) result;
        }
        return result;
    }","  public void test85()  throws Throwable  {
      Engine engine0 = new Engine();
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[8];
      Scope scope1 = new Scope(scope0, stringArray0);
      Frame frame0 = new Frame(scope1, stringArray0, (-4234));
      Interpreter interpreter0 = new Interpreter(engine0, (JexlOptions) null, engine0.EMPTY_CONTEXT, frame0);
      ASTAnnotatedStatement aSTAnnotatedStatement0 = new ASTAnnotatedStatement((-1));
      // Undeclared exception!
      try { 
        interpreter0.processAnnotation(aSTAnnotatedStatement0, (-1), """");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
3252,"    protected Object visit(final ASTAddNode node, final Object data) {
        final Object left = node.jjtGetChild(0).jjtAccept(this, data);
        final Object right = node.jjtGetChild(1).jjtAccept(this, data);
        try {
            final Object result = operators.tryOverload(node, JexlOperator.ADD, left, right);
            return result != JexlEngine.TRY_FAILED ? result : arithmetic.add(left, right);
        } catch (final ArithmeticException xrt) {
            throw new JexlException(node, ""+ error"", xrt);
        }
    }","  public void test86()  throws Throwable  {
      Engine engine0 = new Engine();
      JexlOptions jexlOptions0 = new JexlOptions();
      Interpreter interpreter0 = new Interpreter(engine0, jexlOptions0, engine0.EMPTY_CONTEXT, (Frame) null);
      ASTJxltLiteral aSTJxltLiteral0 = mock(ASTJxltLiteral.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(aSTJxltLiteral0).getLiteral();
      doReturn((JexlInfo) null).when(aSTJxltLiteral0).jexlInfo();
      doReturn((Object) null).when(aSTJxltLiteral0).jjtGetValue();
      // Undeclared exception!
      try { 
        interpreter0.visit(aSTJxltLiteral0, (Object) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.internal.TemplateEngine"", e);
      }
  }"
3253,"    protected Object visit(final ASTAddNode node, final Object data) {
        final Object left = node.jjtGetChild(0).jjtAccept(this, data);
        final Object right = node.jjtGetChild(1).jjtAccept(this, data);
        try {
            final Object result = operators.tryOverload(node, JexlOperator.ADD, left, right);
            return result != JexlEngine.TRY_FAILED ? result : arithmetic.add(left, right);
        } catch (final ArithmeticException xrt) {
            throw new JexlException(node, ""+ error"", xrt);
        }
    }","  public void test87()  throws Throwable  {
      Engine engine0 = new Engine();
      TemplateInterpreter.Arguments templateInterpreter_Arguments0 = new TemplateInterpreter.Arguments(engine0);
      TemplateInterpreter templateInterpreter0 = new TemplateInterpreter(templateInterpreter_Arguments0);
      ASTJxltLiteral aSTJxltLiteral0 = mock(ASTJxltLiteral.class, new ViolatedAssumptionAnswer());
      doReturn((JexlInfo) null).when(aSTJxltLiteral0).jexlInfo();
      doReturn((Object) null).when(aSTJxltLiteral0).jjtGetValue();
      // Undeclared exception!
      try { 
        templateInterpreter0.visit(aSTJxltLiteral0, aSTJxltLiteral0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.parser.JexlNode$Info"", e);
      }
  }"
3254,"    protected Object visit(final ASTAddNode node, final Object data) {
        final Object left = node.jjtGetChild(0).jjtAccept(this, data);
        final Object right = node.jjtGetChild(1).jjtAccept(this, data);
        try {
            final Object result = operators.tryOverload(node, JexlOperator.ADD, left, right);
            return result != JexlEngine.TRY_FAILED ? result : arithmetic.add(left, right);
        } catch (final ArithmeticException xrt) {
            throw new JexlException(node, ""+ error"", xrt);
        }
    }","  public void test88()  throws Throwable  {
      Engine engine0 = new Engine();
      Permissions permissions0 = Permissions.DEFAULT;
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[7];
      Scope scope1 = new Scope(scope0, stringArray0);
      Frame frame0 = new Frame(scope1, stringArray0, (-518));
      Interpreter interpreter0 = new Interpreter(engine0, (JexlOptions) null, engine0.EMPTY_CONTEXT, frame0);
      JexlInfo jexlInfo0 = engine0.createInfo();
      ASTJxltLiteral aSTJxltLiteral0 = mock(ASTJxltLiteral.class, new ViolatedAssumptionAnswer());
      doReturn("""").when(aSTJxltLiteral0).getLiteral();
      doReturn(jexlInfo0).when(aSTJxltLiteral0).jexlInfo();
      doReturn((JexlMethod) null).when(aSTJxltLiteral0).jjtGetValue();
      Object object0 = interpreter0.visit(aSTJxltLiteral0, permissions0);
}"
3255,"    protected Object visit(final ASTAddNode node, final Object data) {
        final Object left = node.jjtGetChild(0).jjtAccept(this, data);
        final Object right = node.jjtGetChild(1).jjtAccept(this, data);
        try {
            final Object result = operators.tryOverload(node, JexlOperator.ADD, left, right);
            return result != JexlEngine.TRY_FAILED ? result : arithmetic.add(left, right);
        } catch (final ArithmeticException xrt) {
            throw new JexlException(node, ""+ error"", xrt);
        }
    }","  public void test89()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      TemplateInterpreter.Arguments templateInterpreter_Arguments0 = new TemplateInterpreter.Arguments(engine0);
      TemplateInterpreter templateInterpreter0 = new TemplateInterpreter(templateInterpreter_Arguments0);
      ASTConstructorNode aSTConstructorNode0 = new ASTConstructorNode(2538);
      // Undeclared exception!
      try { 
        templateInterpreter0.visit(aSTConstructorNode0, templateInterpreter0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
3256,"    protected Object call(final JexlNode node, final Object target, Object functor, final ASTArguments argNode) {
        cancelCheck(node);
        // evaluate the arguments
        final Object[] argv = visit(argNode, null);
        // get the method name if identifier
        final int symbol;
        final String methodName;
        boolean cacheable = cache;
        boolean isavar = false;
        if (functor instanceof ASTIdentifier) {
            // function call, target is context or namespace (if there was one)
            final ASTIdentifier methodIdentifier = (ASTIdentifier) functor;
            symbol = methodIdentifier.getSymbol();
            methodName = methodIdentifier.getName();
            functor = null;
            // is it a global or local variable ?
            if (target == context) {
                if (frame != null && frame.has(symbol)) {
                    functor = frame.get(symbol);
                    isavar = functor != null;
                } else if (context.has(methodName)) {
                    functor = context.get(methodName);
                    isavar = functor != null;
                }
                // name is a variable, can't be cached
                cacheable &= !isavar;
            }
        } else if (functor instanceof ASTIdentifierAccess) {
            // a method call on target
            methodName = ((ASTIdentifierAccess) functor).getName();
            symbol = -1;
            functor = null;
            cacheable = true;
        } else if (functor != null) {
            // ...(x)(y)
            symbol = -1 - 1; // -2;
            methodName = null;
            cacheable = false;
        } else if (!node.isSafeLhs(isSafe())) {
            return unsolvableMethod(node, ""?(...)"");
        } else {
            // safe lhs
            return null;
        }

        // solving the call site
        final CallDispatcher call = new CallDispatcher(node, cacheable);
        try {
            // do we have a  cached version method/function name ?
            final Object eval = call.tryEval(target, methodName, argv);
            if (JexlEngine.TRY_FAILED != eval) {
                return eval;
            }
            boolean functorp = false;
            boolean narrow = false;
            // pseudo loop to try acquiring methods without and with argument narrowing
            while (true) {
                call.narrow = narrow;
                // direct function or method call
                if (functor == null || functorp) {
                    // try a method or function from context
                    if (call.isTargetMethod(target, methodName, argv)) {
                        return call.eval(methodName);
                    }
                    if (target == context) {
                        // solve 'null' namespace
                        final Object namespace = resolveNamespace(null, node);
                        if (namespace != null
                            && namespace != context
                            && call.isTargetMethod(namespace, methodName, argv)) {
                            return call.eval(methodName);
                        }
                        // do not try context function since this was attempted
                        // 10 lines above...; solve as an arithmetic function
                        if (call.isArithmeticMethod(methodName, argv)) {
                            return call.eval(methodName);
                        }
                        // could not find a method, try as a property of a non-context target (performed once)
                    } else {
                        // try prepending target to arguments and look for
                        // applicable method in context...
                        final Object[] pargv = functionArguments(target, narrow, argv);
                        if (call.isContextMethod(methodName, pargv)) {
                            return call.eval(methodName);
                        }
                        // ...or arithmetic
                        if (call.isArithmeticMethod(methodName, pargv)) {
                            return call.eval(methodName);
                        }
                        // the method may also be a functor stored in a property of the target
                        if (!narrow) {
                            final JexlPropertyGet get = uberspect.getPropertyGet(target, methodName);
                            if (get != null) {
                                functor = get.tryInvoke(target, methodName);
                                functorp = functor != null;
                            }
                        }
                    }
                }
                // this may happen without the above when we are chaining call like x(a)(b)
                // or when a var/symbol or antish var is used as a ""function"" name
                if (functor != null) {
                    // lambda, script or jexl method will do
                    if (functor instanceof JexlScript) {
                        return ((JexlScript) functor).execute(context, argv);
                    }
                    if (functor instanceof JexlMethod) {
                        return ((JexlMethod) functor).invoke(target, argv);
                    }
                    final String mCALL = ""call"";
                    // may be a generic callable, try a 'call' method
                    if (call.isTargetMethod(functor, mCALL, argv)) {
                        return call.eval(mCALL);
                    }
                    // functor is a var, may be method is a global one ?
                    if (isavar && target == context) {
                        if (call.isContextMethod(methodName, argv)) {
                            return call.eval(methodName);
                        }
                        if (call.isArithmeticMethod(methodName, argv)) {
                            return call.eval(methodName);
                        }
                    }
                    // try prepending functor to arguments and look for
                    // context or arithmetic function called 'call'
                    final Object[] pargv = functionArguments(functor, narrow, argv);
                    if (call.isContextMethod(mCALL, pargv)) {
                        return call.eval(mCALL);
                    }
                    if (call.isArithmeticMethod(mCALL, pargv)) {
                        return call.eval(mCALL);
                    }
                }
                // if we did not find an exact method by name and we haven't tried yet,
                // attempt to narrow the parameters and if this succeeds, try again in next loop
                if (narrow || !arithmetic.narrowArguments(argv)) {
                    break;
                }
                narrow = true;
                // continue;
            }
        } catch (JexlException.Method xmethod) {
            // ignore and handle at end; treat as an inner discover that fails
        } catch (final JexlException.TryFailed xany) {
            throw invocationException(node, methodName, xany);
        } catch (final JexlException xthru) {
            throw xthru;
        } catch (final Exception xany) {
            throw invocationException(node, methodName, xany);
        }
        // we have either evaluated and returned or no method was found
        return node.isSafeLhs(isSafe())
                ? null
                : unsolvableMethod(node, methodName, argv);
    }","  public void test90()  throws Throwable  {
      Engine engine0 = new Engine();
      MapContext mapContext0 = new MapContext();
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[5];
      Scope scope1 = new Scope(scope0, stringArray0);
      Frame frame0 = new Frame(scope1, stringArray0, (-3783));
      JexlOptions jexlOptions0 = new JexlOptions();
      Interpreter interpreter0 = engine0.createInterpreter(mapContext0, frame0, jexlOptions0);
      ASTAnnotatedStatement aSTAnnotatedStatement0 = new ASTAnnotatedStatement((-3783));
      ASTArrayAccess aSTArrayAccess0 = new ASTArrayAccess((-3783));
      ASTArguments aSTArguments0 = new ASTArguments((Parser) null, 0);
      // Undeclared exception!
      try { 
        interpreter0.call(aSTAnnotatedStatement0, aSTArrayAccess0, aSTAnnotatedStatement0, aSTArguments0);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // ?: unsolvable function/method ''
         //
         verifyException(""org.apache.commons.jexl3.internal.InterpreterBase"", e);
      }
  }"
3257,"    protected Object call(final JexlNode node, final Object target, Object functor, final ASTArguments argNode) {
        cancelCheck(node);
        // evaluate the arguments
        final Object[] argv = visit(argNode, null);
        // get the method name if identifier
        final int symbol;
        final String methodName;
        boolean cacheable = cache;
        boolean isavar = false;
        if (functor instanceof ASTIdentifier) {
            // function call, target is context or namespace (if there was one)
            final ASTIdentifier methodIdentifier = (ASTIdentifier) functor;
            symbol = methodIdentifier.getSymbol();
            methodName = methodIdentifier.getName();
            functor = null;
            // is it a global or local variable ?
            if (target == context) {
                if (frame != null && frame.has(symbol)) {
                    functor = frame.get(symbol);
                    isavar = functor != null;
                } else if (context.has(methodName)) {
                    functor = context.get(methodName);
                    isavar = functor != null;
                }
                // name is a variable, can't be cached
                cacheable &= !isavar;
            }
        } else if (functor instanceof ASTIdentifierAccess) {
            // a method call on target
            methodName = ((ASTIdentifierAccess) functor).getName();
            symbol = -1;
            functor = null;
            cacheable = true;
        } else if (functor != null) {
            // ...(x)(y)
            symbol = -1 - 1; // -2;
            methodName = null;
            cacheable = false;
        } else if (!node.isSafeLhs(isSafe())) {
            return unsolvableMethod(node, ""?(...)"");
        } else {
            // safe lhs
            return null;
        }

        // solving the call site
        final CallDispatcher call = new CallDispatcher(node, cacheable);
        try {
            // do we have a  cached version method/function name ?
            final Object eval = call.tryEval(target, methodName, argv);
            if (JexlEngine.TRY_FAILED != eval) {
                return eval;
            }
            boolean functorp = false;
            boolean narrow = false;
            // pseudo loop to try acquiring methods without and with argument narrowing
            while (true) {
                call.narrow = narrow;
                // direct function or method call
                if (functor == null || functorp) {
                    // try a method or function from context
                    if (call.isTargetMethod(target, methodName, argv)) {
                        return call.eval(methodName);
                    }
                    if (target == context) {
                        // solve 'null' namespace
                        final Object namespace = resolveNamespace(null, node);
                        if (namespace != null
                            && namespace != context
                            && call.isTargetMethod(namespace, methodName, argv)) {
                            return call.eval(methodName);
                        }
                        // do not try context function since this was attempted
                        // 10 lines above...; solve as an arithmetic function
                        if (call.isArithmeticMethod(methodName, argv)) {
                            return call.eval(methodName);
                        }
                        // could not find a method, try as a property of a non-context target (performed once)
                    } else {
                        // try prepending target to arguments and look for
                        // applicable method in context...
                        final Object[] pargv = functionArguments(target, narrow, argv);
                        if (call.isContextMethod(methodName, pargv)) {
                            return call.eval(methodName);
                        }
                        // ...or arithmetic
                        if (call.isArithmeticMethod(methodName, pargv)) {
                            return call.eval(methodName);
                        }
                        // the method may also be a functor stored in a property of the target
                        if (!narrow) {
                            final JexlPropertyGet get = uberspect.getPropertyGet(target, methodName);
                            if (get != null) {
                                functor = get.tryInvoke(target, methodName);
                                functorp = functor != null;
                            }
                        }
                    }
                }
                // this may happen without the above when we are chaining call like x(a)(b)
                // or when a var/symbol or antish var is used as a ""function"" name
                if (functor != null) {
                    // lambda, script or jexl method will do
                    if (functor instanceof JexlScript) {
                        return ((JexlScript) functor).execute(context, argv);
                    }
                    if (functor instanceof JexlMethod) {
                        return ((JexlMethod) functor).invoke(target, argv);
                    }
                    final String mCALL = ""call"";
                    // may be a generic callable, try a 'call' method
                    if (call.isTargetMethod(functor, mCALL, argv)) {
                        return call.eval(mCALL);
                    }
                    // functor is a var, may be method is a global one ?
                    if (isavar && target == context) {
                        if (call.isContextMethod(methodName, argv)) {
                            return call.eval(methodName);
                        }
                        if (call.isArithmeticMethod(methodName, argv)) {
                            return call.eval(methodName);
                        }
                    }
                    // try prepending functor to arguments and look for
                    // context or arithmetic function called 'call'
                    final Object[] pargv = functionArguments(functor, narrow, argv);
                    if (call.isContextMethod(mCALL, pargv)) {
                        return call.eval(mCALL);
                    }
                    if (call.isArithmeticMethod(mCALL, pargv)) {
                        return call.eval(mCALL);
                    }
                }
                // if we did not find an exact method by name and we haven't tried yet,
                // attempt to narrow the parameters and if this succeeds, try again in next loop
                if (narrow || !arithmetic.narrowArguments(argv)) {
                    break;
                }
                narrow = true;
                // continue;
            }
        } catch (JexlException.Method xmethod) {
            // ignore and handle at end; treat as an inner discover that fails
        } catch (final JexlException.TryFailed xany) {
            throw invocationException(node, methodName, xany);
        } catch (final JexlException xthru) {
            throw xthru;
        } catch (final Exception xany) {
            throw invocationException(node, methodName, xany);
        }
        // we have either evaluated and returned or no method was found
        return node.isSafeLhs(isSafe())
                ? null
                : unsolvableMethod(node, methodName, argv);
    }","  public void test91()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      JexlOptions jexlOptions0 = jexlBuilder0.options();
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[0];
      Scope scope1 = new Scope(scope0, stringArray0);
      Object[] objectArray0 = new Object[8];
      Frame frame0 = new Frame(scope1, objectArray0, 107);
      Interpreter interpreter0 = new Interpreter(engine0, jexlOptions0, engine0.EMPTY_CONTEXT, frame0);
      ASTVar aSTVar0 = new ASTVar(107);
      ASTArguments aSTArguments0 = new ASTArguments(46);
      // Undeclared exception!
      try { 
        interpreter0.call((JexlNode) null, jexlOptions0, aSTVar0, aSTArguments0);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // ?: JEXL error : 
         //
         verifyException(""org.apache.commons.jexl3.internal.InterpreterBase"", e);
      }
  }"
3258,"    protected Object call(final JexlNode node, final Object target, Object functor, final ASTArguments argNode) {
        cancelCheck(node);
        // evaluate the arguments
        final Object[] argv = visit(argNode, null);
        // get the method name if identifier
        final int symbol;
        final String methodName;
        boolean cacheable = cache;
        boolean isavar = false;
        if (functor instanceof ASTIdentifier) {
            // function call, target is context or namespace (if there was one)
            final ASTIdentifier methodIdentifier = (ASTIdentifier) functor;
            symbol = methodIdentifier.getSymbol();
            methodName = methodIdentifier.getName();
            functor = null;
            // is it a global or local variable ?
            if (target == context) {
                if (frame != null && frame.has(symbol)) {
                    functor = frame.get(symbol);
                    isavar = functor != null;
                } else if (context.has(methodName)) {
                    functor = context.get(methodName);
                    isavar = functor != null;
                }
                // name is a variable, can't be cached
                cacheable &= !isavar;
            }
        } else if (functor instanceof ASTIdentifierAccess) {
            // a method call on target
            methodName = ((ASTIdentifierAccess) functor).getName();
            symbol = -1;
            functor = null;
            cacheable = true;
        } else if (functor != null) {
            // ...(x)(y)
            symbol = -1 - 1; // -2;
            methodName = null;
            cacheable = false;
        } else if (!node.isSafeLhs(isSafe())) {
            return unsolvableMethod(node, ""?(...)"");
        } else {
            // safe lhs
            return null;
        }

        // solving the call site
        final CallDispatcher call = new CallDispatcher(node, cacheable);
        try {
            // do we have a  cached version method/function name ?
            final Object eval = call.tryEval(target, methodName, argv);
            if (JexlEngine.TRY_FAILED != eval) {
                return eval;
            }
            boolean functorp = false;
            boolean narrow = false;
            // pseudo loop to try acquiring methods without and with argument narrowing
            while (true) {
                call.narrow = narrow;
                // direct function or method call
                if (functor == null || functorp) {
                    // try a method or function from context
                    if (call.isTargetMethod(target, methodName, argv)) {
                        return call.eval(methodName);
                    }
                    if (target == context) {
                        // solve 'null' namespace
                        final Object namespace = resolveNamespace(null, node);
                        if (namespace != null
                            && namespace != context
                            && call.isTargetMethod(namespace, methodName, argv)) {
                            return call.eval(methodName);
                        }
                        // do not try context function since this was attempted
                        // 10 lines above...; solve as an arithmetic function
                        if (call.isArithmeticMethod(methodName, argv)) {
                            return call.eval(methodName);
                        }
                        // could not find a method, try as a property of a non-context target (performed once)
                    } else {
                        // try prepending target to arguments and look for
                        // applicable method in context...
                        final Object[] pargv = functionArguments(target, narrow, argv);
                        if (call.isContextMethod(methodName, pargv)) {
                            return call.eval(methodName);
                        }
                        // ...or arithmetic
                        if (call.isArithmeticMethod(methodName, pargv)) {
                            return call.eval(methodName);
                        }
                        // the method may also be a functor stored in a property of the target
                        if (!narrow) {
                            final JexlPropertyGet get = uberspect.getPropertyGet(target, methodName);
                            if (get != null) {
                                functor = get.tryInvoke(target, methodName);
                                functorp = functor != null;
                            }
                        }
                    }
                }
                // this may happen without the above when we are chaining call like x(a)(b)
                // or when a var/symbol or antish var is used as a ""function"" name
                if (functor != null) {
                    // lambda, script or jexl method will do
                    if (functor instanceof JexlScript) {
                        return ((JexlScript) functor).execute(context, argv);
                    }
                    if (functor instanceof JexlMethod) {
                        return ((JexlMethod) functor).invoke(target, argv);
                    }
                    final String mCALL = ""call"";
                    // may be a generic callable, try a 'call' method
                    if (call.isTargetMethod(functor, mCALL, argv)) {
                        return call.eval(mCALL);
                    }
                    // functor is a var, may be method is a global one ?
                    if (isavar && target == context) {
                        if (call.isContextMethod(methodName, argv)) {
                            return call.eval(methodName);
                        }
                        if (call.isArithmeticMethod(methodName, argv)) {
                            return call.eval(methodName);
                        }
                    }
                    // try prepending functor to arguments and look for
                    // context or arithmetic function called 'call'
                    final Object[] pargv = functionArguments(functor, narrow, argv);
                    if (call.isContextMethod(mCALL, pargv)) {
                        return call.eval(mCALL);
                    }
                    if (call.isArithmeticMethod(mCALL, pargv)) {
                        return call.eval(mCALL);
                    }
                }
                // if we did not find an exact method by name and we haven't tried yet,
                // attempt to narrow the parameters and if this succeeds, try again in next loop
                if (narrow || !arithmetic.narrowArguments(argv)) {
                    break;
                }
                narrow = true;
                // continue;
            }
        } catch (JexlException.Method xmethod) {
            // ignore and handle at end; treat as an inner discover that fails
        } catch (final JexlException.TryFailed xany) {
            throw invocationException(node, methodName, xany);
        } catch (final JexlException xthru) {
            throw xthru;
        } catch (final Exception xany) {
            throw invocationException(node, methodName, xany);
        }
        // we have either evaluated and returned or no method was found
        return node.isSafeLhs(isSafe())
                ? null
                : unsolvableMethod(node, methodName, argv);
    }","  public void test92()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      TemplateInterpreter.Arguments templateInterpreter_Arguments0 = new TemplateInterpreter.Arguments(engine0);
      TemplateInterpreter templateInterpreter0 = new TemplateInterpreter(templateInterpreter_Arguments0);
      ASTBlock aSTBlock0 = new ASTBlock(2);
      ASTArguments aSTArguments0 = new ASTArguments(2);
      // Undeclared exception!
      try { 
        templateInterpreter0.call(aSTBlock0, ""/ error"", (Object) null, aSTArguments0);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // ?: unsolvable function/method '?(...)'
         //
         verifyException(""org.apache.commons.jexl3.internal.InterpreterBase"", e);
      }
  }"
3259,,"  public void test93()  throws Throwable  {
      Engine engine0 = new Engine();
      // Undeclared exception!
      try { 
        engine0.setProperty((Object) null, ""GENode"", (Object) null);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
      }
  }"
3260,,"  public void test94()  throws Throwable  {
      Byte byte0 = new Byte((byte)23);
      Engine engine0 = new Engine();
      // Undeclared exception!
      try { 
        engine0.setProperty((Object) byte0, ""GENode"", (Object) null);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
      }
  }"
3261,,"  public void test95()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      JexlEngine.EmptyContext jexlEngine_EmptyContext0 = (JexlEngine.EmptyContext)JexlEngine.EMPTY_CONTEXT;
      ASTReference aSTReference0 = new ASTReference(0);
      // Undeclared exception!
      try { 
        engine0.getProperty((JexlContext) jexlEngine_EmptyContext0, (Object) aSTReference0, ""org.apache.commons.jexl3.parser.ASTExtendedLiteral"");
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
      }
  }"
3262,"    protected Object visit(final ASTAddNode node, final Object data) {
        final Object left = node.jjtGetChild(0).jjtAccept(this, data);
        final Object right = node.jjtGetChild(1).jjtAccept(this, data);
        try {
            final Object result = operators.tryOverload(node, JexlOperator.ADD, left, right);
            return result != JexlEngine.TRY_FAILED ? result : arithmetic.add(left, right);
        } catch (final ArithmeticException xrt) {
            throw new JexlException(node, ""+ error"", xrt);
        }
    }","  public void test96()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      TemplateInterpreter.Arguments templateInterpreter_Arguments0 = new TemplateInterpreter.Arguments(engine0);
      Object[] objectArray0 = new Object[5];
      ASTVar aSTVar0 = new ASTVar(113);
      Parser parser0 = new Parser("""");
      TemplateInterpreter templateInterpreter0 = new TemplateInterpreter(templateInterpreter_Arguments0);
      ASTArrayAccess aSTArrayAccess0 = new ASTArrayAccess(parser0, 113);
      aSTArrayAccess0.jjtAddChild(aSTVar0, 46);
      // Undeclared exception!
      try { 
        templateInterpreter0.visit(aSTArrayAccess0, objectArray0[4]);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.internal.InterpreterBase"", e);
      }
  }"
3263,"    protected Object visit(final ASTAddNode node, final Object data) {
        final Object left = node.jjtGetChild(0).jjtAccept(this, data);
        final Object right = node.jjtGetChild(1).jjtAccept(this, data);
        try {
            final Object result = operators.tryOverload(node, JexlOperator.ADD, left, right);
            return result != JexlEngine.TRY_FAILED ? result : arithmetic.add(left, right);
        } catch (final ArithmeticException xrt) {
            throw new JexlException(node, ""+ error"", xrt);
        }
    }","  public void test97()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      TemplateInterpreter.Arguments templateInterpreter_Arguments0 = new TemplateInterpreter.Arguments(engine0);
      ASTVar aSTVar0 = new ASTVar(116);
      Parser parser0 = new Parser("""");
      TemplateInterpreter templateInterpreter0 = new TemplateInterpreter(templateInterpreter_Arguments0);
      ASTArrayAccess aSTArrayAccess0 = new ASTArrayAccess(parser0, 116);
      aSTArrayAccess0.jjtAddChild(aSTVar0, 46);
      // Undeclared exception!
      try { 
        templateInterpreter0.visit(aSTArrayAccess0, jexlBuilder0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.internal.Interpreter"", e);
      }
  }"
3264,"    protected Object visit(final ASTAddNode node, final Object data) {
        final Object left = node.jjtGetChild(0).jjtAccept(this, data);
        final Object right = node.jjtGetChild(1).jjtAccept(this, data);
        try {
            final Object result = operators.tryOverload(node, JexlOperator.ADD, left, right);
            return result != JexlEngine.TRY_FAILED ? result : arithmetic.add(left, right);
        } catch (final ArithmeticException xrt) {
            throw new JexlException(node, ""+ error"", xrt);
        }
    }","  public void test98()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      JexlOptions jexlOptions0 = new JexlOptions();
      Object[] objectArray0 = new Object[4];
      Frame frame0 = new Frame((Scope) null, objectArray0, (-1));
      Interpreter interpreter0 = new Interpreter(engine0, jexlOptions0, engine0.EMPTY_CONTEXT, frame0);
      Parser parser0 = engine0.parser;
      ASTArrayAccess aSTArrayAccess0 = new ASTArrayAccess(parser0, (-1));
      Object object0 = interpreter0.visit(aSTArrayAccess0, interpreter0);
}"
3265,"    protected Object visit(final ASTAddNode node, final Object data) {
        final Object left = node.jjtGetChild(0).jjtAccept(this, data);
        final Object right = node.jjtGetChild(1).jjtAccept(this, data);
        try {
            final Object result = operators.tryOverload(node, JexlOperator.ADD, left, right);
            return result != JexlEngine.TRY_FAILED ? result : arithmetic.add(left, right);
        } catch (final ArithmeticException xrt) {
            throw new JexlException(node, ""+ error"", xrt);
        }
    }","  public void test99()  throws Throwable  {
      Engine engine0 = new Engine();
      TemplateInterpreter.Arguments templateInterpreter_Arguments0 = new TemplateInterpreter.Arguments(engine0);
      TemplateInterpreter templateInterpreter0 = new TemplateInterpreter(templateInterpreter_Arguments0);
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[0];
      Scope scope1 = new Scope(scope0, stringArray0);
      ASTJexlScript aSTJexlScript0 = engine0.parse((JexlInfo) null, true, ""MethodNode"", scope1);
      // Undeclared exception!
      try { 
        templateInterpreter0.visit(aSTJexlScript0, templateInterpreter_Arguments0);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // <evosuite>.<evosuite>:-1 undefined property 'java.lang.String@0000000032'
         //
         verifyException(""org.apache.commons.jexl3.internal.InterpreterBase"", e);
      }
  }"
3266,"    protected Object visit(final ASTAddNode node, final Object data) {
        final Object left = node.jjtGetChild(0).jjtAccept(this, data);
        final Object right = node.jjtGetChild(1).jjtAccept(this, data);
        try {
            final Object result = operators.tryOverload(node, JexlOperator.ADD, left, right);
            return result != JexlEngine.TRY_FAILED ? result : arithmetic.add(left, right);
        } catch (final ArithmeticException xrt) {
            throw new JexlException(node, ""+ error"", xrt);
        }
    }","  public void test100()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Engine engine0 = new Engine();
      JexlInfo jexlInfo0 = engine0.createInfo((String) null, 3552, 1162);
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[4];
      Scope scope1 = new Scope(scope0, stringArray0);
      ASTJexlScript aSTJexlScript0 = engine0.parse(jexlInfo0, false, ""org.apache.commons.jexl3.parser.ASTIdentifier"", scope1);
      JexlOptions jexlOptions0 = new JexlOptions();
      Frame frame0 = new Frame(scope1, stringArray0, 1162);
      Interpreter interpreter0 = new Interpreter(engine0, jexlOptions0, (JexlContext) null, frame0);
      // Undeclared exception!
      try { 
        interpreter0.visit(aSTJexlScript0, fileSystemHandling0);
        fail(""Expecting exception: ArrayStoreException"");
      } catch(ArrayStoreException e) {
         //
         // org.apache.commons.jexl3.internal.Scope$2
         //
         verifyException(""org.apache.commons.jexl3.internal.Frame"", e);
      }
  }"
3267,"    protected Object visit(final ASTAddNode node, final Object data) {
        final Object left = node.jjtGetChild(0).jjtAccept(this, data);
        final Object right = node.jjtGetChild(1).jjtAccept(this, data);
        try {
            final Object result = operators.tryOverload(node, JexlOperator.ADD, left, right);
            return result != JexlEngine.TRY_FAILED ? result : arithmetic.add(left, right);
        } catch (final ArithmeticException xrt) {
            throw new JexlException(node, ""+ error"", xrt);
        }
    }","  public void test101()  throws Throwable  {
      Engine engine0 = new Engine();
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlOptions jexlOptions0 = jexlBuilder0.options();
      Map<String, Object> map0 = jexlOptions0.getNamespaces();
      MapContext mapContext0 = new MapContext(map0);
      Interpreter interpreter0 = new Interpreter(engine0, jexlOptions0, mapContext0, (Frame) null);
      ASTJexlLambda aSTJexlLambda0 = mock(ASTJexlLambda.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(aSTJexlLambda0).isTopLevel();
      doReturn((Frame) null, (Frame) null).when(aSTJexlLambda0).createFrame(any(org.apache.commons.jexl3.internal.Frame.class) , any(java.lang.Object[].class));
      doReturn((Object) null).when(aSTJexlLambda0).jjtAccept(any(org.apache.commons.jexl3.parser.ParserVisitor.class) , any());
      Closure closure0 = new Closure(interpreter0, aSTJexlLambda0);
      ASTJexlScript aSTJexlScript0 = closure0.script;
      ASTArguments aSTArguments0 = new ASTArguments((-2445));
      Object object0 = interpreter0.visit(aSTJexlScript0, aSTArguments0);
}"
3268,"    protected Object visit(final ASTAddNode node, final Object data) {
        final Object left = node.jjtGetChild(0).jjtAccept(this, data);
        final Object right = node.jjtGetChild(1).jjtAccept(this, data);
        try {
            final Object result = operators.tryOverload(node, JexlOperator.ADD, left, right);
            return result != JexlEngine.TRY_FAILED ? result : arithmetic.add(left, right);
        } catch (final ArithmeticException xrt) {
            throw new JexlException(node, ""+ error"", xrt);
        }
    }","  public void test102()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      MapContext mapContext0 = new MapContext();
      ASTJexlScript aSTJexlScript0 = new ASTJexlScript(77);
      JexlOptions jexlOptions0 = jexlBuilder0.options();
      Interpreter interpreter0 = engine0.createInterpreter(mapContext0, (Frame) null, jexlOptions0);
      ASTMapLiteral aSTMapLiteral0 = mock(ASTMapLiteral.class, new ViolatedAssumptionAnswer());
      doReturn(aSTJexlScript0).when(aSTMapLiteral0).jjtGetChild(anyInt());
      doReturn(4776).when(aSTMapLiteral0).jjtGetNumChildren();
      // Undeclared exception!
      try { 
        interpreter0.visit(aSTMapLiteral0, (Object) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.internal.Interpreter"", e);
      }
  }"
3269,"    protected Object visit(final ASTAddNode node, final Object data) {
        final Object left = node.jjtGetChild(0).jjtAccept(this, data);
        final Object right = node.jjtGetChild(1).jjtAccept(this, data);
        try {
            final Object result = operators.tryOverload(node, JexlOperator.ADD, left, right);
            return result != JexlEngine.TRY_FAILED ? result : arithmetic.add(left, right);
        } catch (final ArithmeticException xrt) {
            throw new JexlException(node, ""+ error"", xrt);
        }
    }","  public void test103()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      MapContext mapContext0 = new MapContext();
      JexlOptions jexlOptions0 = jexlBuilder0.options();
      Interpreter interpreter0 = engine0.createInterpreter(mapContext0, (Frame) null, jexlOptions0);
      ASTMapLiteral aSTMapLiteral0 = mock(ASTMapLiteral.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(aSTMapLiteral0).jjtGetNumChildren();
      HashMap hashMap0 = (HashMap)interpreter0.visit(aSTMapLiteral0, ""N[sdSr`-3="");
}"
3270,"    protected Object visit(final ASTAddNode node, final Object data) {
        final Object left = node.jjtGetChild(0).jjtAccept(this, data);
        final Object right = node.jjtGetChild(1).jjtAccept(this, data);
        try {
            final Object result = operators.tryOverload(node, JexlOperator.ADD, left, right);
            return result != JexlEngine.TRY_FAILED ? result : arithmetic.add(left, right);
        } catch (final ArithmeticException xrt) {
            throw new JexlException(node, ""+ error"", xrt);
        }
    }","  public void test104()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      TemplateInterpreter.Arguments templateInterpreter_Arguments0 = new TemplateInterpreter.Arguments(engine0);
      TemplateInterpreter templateInterpreter0 = new TemplateInterpreter(templateInterpreter_Arguments0);
      ASTSetLiteral aSTSetLiteral0 = mock(ASTSetLiteral.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(aSTSetLiteral0).jjtGetNumChildren();
      Double double0 = new Double(1189.3259257);
      HashSet hashSet0 = (HashSet)templateInterpreter0.visit(aSTSetLiteral0, double0);
}"
3271,"    protected Object visit(final ASTAddNode node, final Object data) {
        final Object left = node.jjtGetChild(0).jjtAccept(this, data);
        final Object right = node.jjtGetChild(1).jjtAccept(this, data);
        try {
            final Object result = operators.tryOverload(node, JexlOperator.ADD, left, right);
            return result != JexlEngine.TRY_FAILED ? result : arithmetic.add(left, right);
        } catch (final ArithmeticException xrt) {
            throw new JexlException(node, ""+ error"", xrt);
        }
    }","  public void test105()  throws Throwable  {
      Engine engine0 = new Engine();
      TemplateInterpreter.Arguments templateInterpreter_Arguments0 = new TemplateInterpreter.Arguments(engine0);
      TemplateInterpreter templateInterpreter0 = new TemplateInterpreter(templateInterpreter_Arguments0);
      // Undeclared exception!
      try { 
        templateInterpreter0.visit((ASTStringLiteral) null, ""org.apache.commons.jexl3.parser.ASTIdentifier"");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.internal.Interpreter"", e);
      }
  }"
3272,"    protected Object visit(final ASTAddNode node, final Object data) {
        final Object left = node.jjtGetChild(0).jjtAccept(this, data);
        final Object right = node.jjtGetChild(1).jjtAccept(this, data);
        try {
            final Object result = operators.tryOverload(node, JexlOperator.ADD, left, right);
            return result != JexlEngine.TRY_FAILED ? result : arithmetic.add(left, right);
        } catch (final ArithmeticException xrt) {
            throw new JexlException(node, ""+ error"", xrt);
        }
    }","  public void test106()  throws Throwable  {
      Engine engine0 = new Engine();
      TemplateInterpreter.Arguments templateInterpreter_Arguments0 = new TemplateInterpreter.Arguments(engine0);
      TemplateInterpreter templateInterpreter0 = new TemplateInterpreter(templateInterpreter_Arguments0);
      String[] stringArray0 = new String[4];
      ASTStringLiteral aSTStringLiteral0 = mock(ASTStringLiteral.class, new ViolatedAssumptionAnswer());
      doReturn(""<?>.<null>(...)"").when(aSTStringLiteral0).getLiteral();
      Object object0 = templateInterpreter0.visit(aSTStringLiteral0, stringArray0[0]);
}"
3273,"    protected Object visit(final ASTAddNode node, final Object data) {
        final Object left = node.jjtGetChild(0).jjtAccept(this, data);
        final Object right = node.jjtGetChild(1).jjtAccept(this, data);
        try {
            final Object result = operators.tryOverload(node, JexlOperator.ADD, left, right);
            return result != JexlEngine.TRY_FAILED ? result : arithmetic.add(left, right);
        } catch (final ArithmeticException xrt) {
            throw new JexlException(node, ""+ error"", xrt);
        }
    }","  public void test107()  throws Throwable  {
      Engine engine0 = new Engine();
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[7];
      Scope scope1 = new Scope(scope0, stringArray0);
      Frame frame0 = new Frame(scope1, stringArray0, (-518));
      Interpreter interpreter0 = new Interpreter(engine0, (JexlOptions) null, engine0.EMPTY_CONTEXT, frame0);
      ASTNumberLiteral aSTNumberLiteral0 = mock(ASTNumberLiteral.class, new ViolatedAssumptionAnswer());
      doReturn(5).when(aSTNumberLiteral0).getLiteral();
      doReturn(true).when(aSTNumberLiteral0).isInteger();
      doReturn(false).when(aSTNumberLiteral0).isTernaryProtected();
      doReturn((JexlInfo) null).when(aSTNumberLiteral0).jexlInfo();
      doReturn((JexlNode) null).when(aSTNumberLiteral0).jjtGetParent();
      ASTReference aSTReference0 = new ASTReference(7);
      // Undeclared exception!
      try { 
        interpreter0.visit(aSTNumberLiteral0, aSTReference0);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // ?: undefined property 'java.lang.Integer@0000000023'
         //
         verifyException(""org.apache.commons.jexl3.internal.InterpreterBase"", e);
      }
  }"
3274,"    protected Object visit(final ASTAddNode node, final Object data) {
        final Object left = node.jjtGetChild(0).jjtAccept(this, data);
        final Object right = node.jjtGetChild(1).jjtAccept(this, data);
        try {
            final Object result = operators.tryOverload(node, JexlOperator.ADD, left, right);
            return result != JexlEngine.TRY_FAILED ? result : arithmetic.add(left, right);
        } catch (final ArithmeticException xrt) {
            throw new JexlException(node, ""+ error"", xrt);
        }
    }","  public void test108()  throws Throwable  {
      Engine engine0 = new Engine();
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[7];
      Scope scope1 = new Scope(scope0, stringArray0);
      Frame frame0 = new Frame(scope1, stringArray0, (-518));
      Interpreter interpreter0 = new Interpreter(engine0, (JexlOptions) null, engine0.EMPTY_CONTEXT, frame0);
      ASTNumberLiteral aSTNumberLiteral0 = mock(ASTNumberLiteral.class, new ViolatedAssumptionAnswer());
      doReturn(7).when(aSTNumberLiteral0).getLiteral();
      doReturn(false).when(aSTNumberLiteral0).isInteger();
      ASTReference aSTReference0 = new ASTReference(7);
      Object object0 = interpreter0.visit(aSTNumberLiteral0, aSTReference0);
}"
3275,"    protected Object visit(final ASTAddNode node, final Object data) {
        final Object left = node.jjtGetChild(0).jjtAccept(this, data);
        final Object right = node.jjtGetChild(1).jjtAccept(this, data);
        try {
            final Object result = operators.tryOverload(node, JexlOperator.ADD, left, right);
            return result != JexlEngine.TRY_FAILED ? result : arithmetic.add(left, right);
        } catch (final ArithmeticException xrt) {
            throw new JexlException(node, ""+ error"", xrt);
        }
    }","  public void test109()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      TemplateInterpreter.Arguments templateInterpreter_Arguments0 = new TemplateInterpreter.Arguments(engine0);
      TemplateInterpreter templateInterpreter0 = new TemplateInterpreter(templateInterpreter_Arguments0);
      ASTBlock aSTBlock0 = new ASTBlock(2);
      Object object0 = templateInterpreter0.visit(aSTBlock0, engine0);
}"
3276,"    protected Object visit(final ASTAddNode node, final Object data) {
        final Object left = node.jjtGetChild(0).jjtAccept(this, data);
        final Object right = node.jjtGetChild(1).jjtAccept(this, data);
        try {
            final Object result = operators.tryOverload(node, JexlOperator.ADD, left, right);
            return result != JexlEngine.TRY_FAILED ? result : arithmetic.add(left, right);
        } catch (final ArithmeticException xrt) {
            throw new JexlException(node, ""+ error"", xrt);
        }
    }","  public void test110()  throws Throwable  {
      Engine engine0 = new Engine();
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[5];
      Scope scope1 = new Scope(scope0, stringArray0);
      Frame frame0 = new Frame(scope1, stringArray0, (-191));
      Parser parser0 = engine0.parser;
      ASTJexlScript aSTJexlScript0 = parser0.JexlScript(scope1);
      JexlOptions jexlOptions0 = engine0.options(aSTJexlScript0, (JexlContext) null);
      Interpreter interpreter0 = engine0.createInterpreter((JexlContext) null, frame0, jexlOptions0);
      ASTVar aSTVar0 = new ASTVar(0);
      // Undeclared exception!
      try { 
        interpreter0.visit(aSTVar0, (Object) null);
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException(""org.apache.commons.jexl3.internal.Frame"", e);
      }
  }"
3277,"    protected Object visit(final ASTAddNode node, final Object data) {
        final Object left = node.jjtGetChild(0).jjtAccept(this, data);
        final Object right = node.jjtGetChild(1).jjtAccept(this, data);
        try {
            final Object result = operators.tryOverload(node, JexlOperator.ADD, left, right);
            return result != JexlEngine.TRY_FAILED ? result : arithmetic.add(left, right);
        } catch (final ArithmeticException xrt) {
            throw new JexlException(node, ""+ error"", xrt);
        }
    }","  public void test111()  throws Throwable  {
      Engine engine0 = new Engine();
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[5];
      Scope scope1 = new Scope(scope0, stringArray0);
      Frame frame0 = new Frame(scope1, stringArray0, (-191));
      Parser parser0 = engine0.parser;
      ASTJexlScript aSTJexlScript0 = parser0.JexlScript(scope1);
      JexlOptions jexlOptions0 = engine0.options(aSTJexlScript0, (JexlContext) null);
      jexlOptions0.setLexical(true);
      Interpreter interpreter0 = engine0.createInterpreter((JexlContext) null, frame0, jexlOptions0);
      ASTVar aSTVar0 = new ASTVar(0);
      // Undeclared exception!
      try { 
        interpreter0.visit(aSTVar0, (Object) null);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // ?: variable '' is already defined
         //
         verifyException(""org.apache.commons.jexl3.internal.InterpreterBase"", e);
      }
  }"
3278,"    protected Object visit(final ASTAddNode node, final Object data) {
        final Object left = node.jjtGetChild(0).jjtAccept(this, data);
        final Object right = node.jjtGetChild(1).jjtAccept(this, data);
        try {
            final Object result = operators.tryOverload(node, JexlOperator.ADD, left, right);
            return result != JexlEngine.TRY_FAILED ? result : arithmetic.add(left, right);
        } catch (final ArithmeticException xrt) {
            throw new JexlException(node, ""+ error"", xrt);
        }
    }","  public void test112()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      Parser parser0 = new Parser("""");
      ASTJexlScript aSTJexlScript0 = new ASTJexlScript(parser0, 4768);
      JexlOptions jexlOptions0 = engine0.options;
      Interpreter interpreter0 = new Interpreter(engine0, jexlOptions0, engine0.EMPTY_CONTEXT, (Frame) null);
      ASTIfStatement aSTIfStatement0 = new ASTIfStatement(4768);
      Object object0 = interpreter0.visit(aSTIfStatement0, aSTJexlScript0);
}"
3279,"    protected Object visit(final ASTAddNode node, final Object data) {
        final Object left = node.jjtGetChild(0).jjtAccept(this, data);
        final Object right = node.jjtGetChild(1).jjtAccept(this, data);
        try {
            final Object result = operators.tryOverload(node, JexlOperator.ADD, left, right);
            return result != JexlEngine.TRY_FAILED ? result : arithmetic.add(left, right);
        } catch (final ArithmeticException xrt) {
            throw new JexlException(node, ""+ error"", xrt);
        }
    }","  public void test113()  throws Throwable  {
      Engine engine0 = new Engine();
      Interpreter interpreter0 = new Interpreter(engine0, (JexlOptions) null, engine0.EMPTY_CONTEXT, (Frame) null);
      Parser parser0 = new Parser(""V5BDJ:,wi%T445("");
      ASTUnaryPlusNode aSTUnaryPlusNode0 = new ASTUnaryPlusNode(parser0, (-2408));
      // Undeclared exception!
      try { 
        interpreter0.visit(aSTUnaryPlusNode0, (Object) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
3280,"    protected Object runClosure(final Closure closure, final Object data) {
        final ASTJexlScript script = closure.getScript();
        block = new LexicalFrame(frame, block).defineArgs();
        try {
            final JexlNode body = script.jjtGetChild(script.jjtGetNumChildren() - 1);
            return interpret(body);
        } finally {
            block = block.pop();
        }
    }","  public void test114()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      TemplateInterpreter.Arguments templateInterpreter_Arguments0 = new TemplateInterpreter.Arguments(engine0);
      TemplateInterpreter templateInterpreter0 = new TemplateInterpreter(templateInterpreter_Arguments0);
      ASTNENode aSTNENode0 = new ASTNENode(60);
      ASTJexlLambda aSTJexlLambda0 = mock(ASTJexlLambda.class, new ViolatedAssumptionAnswer());
      doReturn((Frame) null).when(aSTJexlLambda0).createFrame(any(org.apache.commons.jexl3.internal.Frame.class) , any(java.lang.Object[].class));
      doReturn(aSTNENode0).when(aSTJexlLambda0).jjtGetChild(anyInt());
      doReturn(1938).when(aSTJexlLambda0).jjtGetNumChildren();
      Closure closure0 = new Closure(templateInterpreter0, aSTJexlLambda0);
      // Undeclared exception!
      try { 
        templateInterpreter0.runClosure(closure0, templateInterpreter0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
3281,"    protected Object processAnnotation(final ASTAnnotatedStatement stmt, final int index, final Object data) {
        // are we evaluating the block ?
        final int last = stmt.jjtGetNumChildren() - 1;
        if (index == last) {
            final JexlNode cblock = stmt.jjtGetChild(last);
            // if the context has changed, might need a new interpreter
            final JexlArithmetic jexla = arithmetic.options(context);
            if (jexla == arithmetic) {
                return cblock.jjtAccept(Interpreter.this, data);
            }
            if (!arithmetic.getClass().equals(jexla.getClass())) {
                logger.warn(""expected arithmetic to be "" + arithmetic.getClass().getSimpleName()
                        + "", got "" + jexla.getClass().getSimpleName()
                );
            }
            final Interpreter ii = new Interpreter(Interpreter.this, jexla);
            final Object r = cblock.jjtAccept(ii, data);
            if (ii.isCancelled()) {
                Interpreter.this.cancel();
            }
            return r;
        }
        // tracking whether we processed the annotation
        final AnnotatedCall jstmt = new AnnotatedCall(stmt, index + 1, data);
        // the annotation node and name
        final ASTAnnotation anode = (ASTAnnotation) stmt.jjtGetChild(index);
        final String aname = anode.getName();
        // evaluate the arguments
        final Object[] argv = anode.jjtGetNumChildren() > 0
                        ? visit((ASTArguments) anode.jjtGetChild(0), null) : null;
        // wrap the future, will recurse through annotation processor
        Object result;
        try {
            result = processAnnotation(aname, argv, jstmt);
            // not processing an annotation is an error
            if (!jstmt.isProcessed()) {
                return annotationError(anode, aname, null);
            }
        } catch (final JexlException xany) {
            throw xany;
        } catch (final Exception xany) {
            return annotationError(anode, aname, xany);
        }
        // the caller may return a return, break or continue
        if (result instanceof JexlException) {
            throw (JexlException) result;
        }
        return result;
    }","  public void test115()  throws Throwable  {
      Engine engine0 = new Engine();
      TemplateInterpreter.Arguments templateInterpreter_Arguments0 = new TemplateInterpreter.Arguments(engine0);
      TemplateInterpreter templateInterpreter0 = new TemplateInterpreter(templateInterpreter_Arguments0);
      Object[] objectArray0 = new Object[6];
      JexlInfo jexlInfo0 = new JexlInfo();
      Script script0 = engine0.createExpression(jexlInfo0, ""p"");
      Closure closure0 = new Closure(script0, objectArray0);
      Script.Callable script_Callable0 = closure0.callable(engine0.EMPTY_CONTEXT, objectArray0);
      try { 
        templateInterpreter0.processAnnotation(""GENode"", objectArray0, script_Callable0);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
      }
  }"
3282,"    protected Interpreter(final Engine engine, final JexlOptions opts, final JexlContext aContext, final Frame eFrame) {
        super(engine, opts, aContext);
        this.frame = eFrame;
    }","  public void test116()  throws Throwable  {
      Engine engine0 = new Engine();
      TemplateInterpreter.Arguments templateInterpreter_Arguments0 = new TemplateInterpreter.Arguments(engine0);
      TemplateInterpreter templateInterpreter0 = new TemplateInterpreter(templateInterpreter_Arguments0);
      JexlArithmetic jexlArithmetic0 = engine0.arithmetic;
      Interpreter interpreter0 = new Interpreter(templateInterpreter0, jexlArithmetic0);
  }"
3283,"    protected Interpreter(final Engine engine, final JexlOptions opts, final JexlContext aContext, final Frame eFrame) {
        super(engine, opts, aContext);
        this.frame = eFrame;
    }","  public void test117()  throws Throwable  {
      Engine engine0 = new Engine();
      JexlEngine.EmptyContext jexlEngine_EmptyContext0 = (JexlEngine.EmptyContext)JexlEngine.EMPTY_CONTEXT;
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[0];
      Scope scope1 = new Scope(scope0, stringArray0);
      Frame frame0 = new Frame(scope1, stringArray0, (-3033));
      JexlOptions jexlOptions0 = engine0.options(jexlEngine_EmptyContext0);
      Interpreter interpreter0 = engine0.createInterpreter(jexlEngine_EmptyContext0, frame0, jexlOptions0);
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true);
      Interpreter interpreter1 = new Interpreter(interpreter0, jexlArithmetic0);
}"
3284,,"  public void test118()  throws Throwable  {
      Engine engine0 = new Engine();
      JexlEngine.EmptyContext jexlEngine_EmptyContext0 = (JexlEngine.EmptyContext)JexlEngine.EMPTY_CONTEXT;
      String[] stringArray0 = new String[6];
      Scope scope0 = new Scope((Scope) null, stringArray0);
      Frame frame0 = new Frame(scope0, stringArray0, (-185));
      JexlOptions jexlOptions0 = new JexlOptions();
      Interpreter interpreter0 = engine0.createInterpreter(jexlEngine_EmptyContext0, frame0, jexlOptions0);
      ASTAnnotatedStatement aSTAnnotatedStatement0 = new ASTAnnotatedStatement(0);
      Interpreter.AnnotatedCall interpreter_AnnotatedCall0 = interpreter0.new AnnotatedCall(aSTAnnotatedStatement0, (-669), ""org.apache.commons.logging.simplelog.showShortLogname"");
      interpreter_AnnotatedCall0.getStatement();
}"
3285,,"  public void test119()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      TemplateInterpreter.Arguments templateInterpreter_Arguments0 = new TemplateInterpreter.Arguments(engine0);
      TemplateInterpreter templateInterpreter0 = new TemplateInterpreter(templateInterpreter_Arguments0);
      Parser parser0 = engine0.parser;
      ASTAnnotatedStatement aSTAnnotatedStatement0 = new ASTAnnotatedStatement(parser0, 2);
      ASTArrayAccess aSTArrayAccess0 = new ASTArrayAccess(2);
      Interpreter.AnnotatedCall interpreter_AnnotatedCall0 = templateInterpreter0.new AnnotatedCall(aSTAnnotatedStatement0, 2, aSTArrayAccess0);
      boolean boolean0 = interpreter_AnnotatedCall0.isProcessed();
}"
3286,"    protected Object processAnnotation(final ASTAnnotatedStatement stmt, final int index, final Object data) {
        // are we evaluating the block ?
        final int last = stmt.jjtGetNumChildren() - 1;
        if (index == last) {
            final JexlNode cblock = stmt.jjtGetChild(last);
            // if the context has changed, might need a new interpreter
            final JexlArithmetic jexla = arithmetic.options(context);
            if (jexla == arithmetic) {
                return cblock.jjtAccept(Interpreter.this, data);
            }
            if (!arithmetic.getClass().equals(jexla.getClass())) {
                logger.warn(""expected arithmetic to be "" + arithmetic.getClass().getSimpleName()
                        + "", got "" + jexla.getClass().getSimpleName()
                );
            }
            final Interpreter ii = new Interpreter(Interpreter.this, jexla);
            final Object r = cblock.jjtAccept(ii, data);
            if (ii.isCancelled()) {
                Interpreter.this.cancel();
            }
            return r;
        }
        // tracking whether we processed the annotation
        final AnnotatedCall jstmt = new AnnotatedCall(stmt, index + 1, data);
        // the annotation node and name
        final ASTAnnotation anode = (ASTAnnotation) stmt.jjtGetChild(index);
        final String aname = anode.getName();
        // evaluate the arguments
        final Object[] argv = anode.jjtGetNumChildren() > 0
                        ? visit((ASTArguments) anode.jjtGetChild(0), null) : null;
        // wrap the future, will recurse through annotation processor
        Object result;
        try {
            result = processAnnotation(aname, argv, jstmt);
            // not processing an annotation is an error
            if (!jstmt.isProcessed()) {
                return annotationError(anode, aname, null);
            }
        } catch (final JexlException xany) {
            throw xany;
        } catch (final Exception xany) {
            return annotationError(anode, aname, xany);
        }
        // the caller may return a return, break or continue
        if (result instanceof JexlException) {
            throw (JexlException) result;
        }
        return result;
    }","  public void test120()  throws Throwable  {
      Engine engine0 = new Engine();
      JexlEngine.EmptyContext jexlEngine_EmptyContext0 = (JexlEngine.EmptyContext)JexlEngine.EMPTY_CONTEXT;
      JexlOptions jexlOptions0 = engine0.options(jexlEngine_EmptyContext0);
      Interpreter interpreter0 = new Interpreter(engine0, jexlOptions0, jexlEngine_EmptyContext0, (Frame) null);
      Parser parser0 = new Parser("""");
      ASTAnnotatedStatement aSTAnnotatedStatement0 = new ASTAnnotatedStatement(parser0, 46);
      ASTArrayAccess aSTArrayAccess0 = new ASTArrayAccess(parser0, 46);
      Interpreter.AnnotatedCall interpreter_AnnotatedCall0 = interpreter0.new AnnotatedCall(aSTAnnotatedStatement0, 46, aSTArrayAccess0);
      try { 
        interpreter0.processAnnotation(""4V^`@lD"", (Object[]) null, interpreter_AnnotatedCall0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
3287,"    protected Object visit(final ASTAddNode node, final Object data) {
        final Object left = node.jjtGetChild(0).jjtAccept(this, data);
        final Object right = node.jjtGetChild(1).jjtAccept(this, data);
        try {
            final Object result = operators.tryOverload(node, JexlOperator.ADD, left, right);
            return result != JexlEngine.TRY_FAILED ? result : arithmetic.add(left, right);
        } catch (final ArithmeticException xrt) {
            throw new JexlException(node, ""+ error"", xrt);
        }
    }","  public void test121()  throws Throwable  {
      Engine engine0 = new Engine();
      JexlEngine.EmptyContext jexlEngine_EmptyContext0 = (JexlEngine.EmptyContext)JexlEngine.EMPTY_CONTEXT;
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[0];
      Scope scope1 = new Scope(scope0, stringArray0);
      Frame frame0 = new Frame(scope1, stringArray0, (-3033));
      JexlOptions jexlOptions0 = engine0.options(jexlEngine_EmptyContext0);
      Interpreter interpreter0 = engine0.createInterpreter(jexlEngine_EmptyContext0, frame0, jexlOptions0);
      ASTERNode aSTERNode0 = new ASTERNode((-3033));
      InterpreterBase.ArithmeticFuncall interpreterBase_ArithmeticFuncall0 = new InterpreterBase.ArithmeticFuncall((JexlMethod) null, true);
      // Undeclared exception!
      try { 
        interpreter0.visit(aSTERNode0, interpreterBase_ArithmeticFuncall0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
3288,"    protected Object visit(final ASTAddNode node, final Object data) {
        final Object left = node.jjtGetChild(0).jjtAccept(this, data);
        final Object right = node.jjtGetChild(1).jjtAccept(this, data);
        try {
            final Object result = operators.tryOverload(node, JexlOperator.ADD, left, right);
            return result != JexlEngine.TRY_FAILED ? result : arithmetic.add(left, right);
        } catch (final ArithmeticException xrt) {
            throw new JexlException(node, ""+ error"", xrt);
        }
    }","  public void test122()  throws Throwable  {
      Engine engine0 = new Engine();
      TemplateInterpreter.Arguments templateInterpreter_Arguments0 = new TemplateInterpreter.Arguments(engine0);
      TemplateInterpreter templateInterpreter0 = new TemplateInterpreter(templateInterpreter_Arguments0);
      Pattern pattern0 = JexlArithmetic.FLOAT_PATTERN;
      ASTRegexLiteral aSTRegexLiteral0 = mock(ASTRegexLiteral.class, new ViolatedAssumptionAnswer());
      doReturn(pattern0).when(aSTRegexLiteral0).getLiteral();
      JexlArithmetic.NullOperand jexlArithmetic_NullOperand0 = new JexlArithmetic.NullOperand();
      Pattern pattern1 = (Pattern)templateInterpreter0.visit(aSTRegexLiteral0, jexlArithmetic_NullOperand0);
}"
3289,"    protected Object visit(final ASTAddNode node, final Object data) {
        final Object left = node.jjtGetChild(0).jjtAccept(this, data);
        final Object right = node.jjtGetChild(1).jjtAccept(this, data);
        try {
            final Object result = operators.tryOverload(node, JexlOperator.ADD, left, right);
            return result != JexlEngine.TRY_FAILED ? result : arithmetic.add(left, right);
        } catch (final ArithmeticException xrt) {
            throw new JexlException(node, ""+ error"", xrt);
        }
    }","  public void test123()  throws Throwable  {
      Engine engine0 = new Engine();
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[5];
      Scope scope1 = new Scope(scope0, stringArray0);
      Parser parser0 = engine0.parser;
      ASTJexlScript aSTJexlScript0 = parser0.JexlScript(scope1);
      JexlOptions jexlOptions0 = engine0.options(aSTJexlScript0, (JexlContext) null);
      Interpreter interpreter0 = engine0.createInterpreter((JexlContext) null, (Frame) null, jexlOptions0);
      ASTSetModNode aSTSetModNode0 = new ASTSetModNode(38);
      // Undeclared exception!
      try { 
        interpreter0.visit(aSTSetModNode0, stringArray0[0]);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
3290,"    protected Object visit(final ASTAddNode node, final Object data) {
        final Object left = node.jjtGetChild(0).jjtAccept(this, data);
        final Object right = node.jjtGetChild(1).jjtAccept(this, data);
        try {
            final Object result = operators.tryOverload(node, JexlOperator.ADD, left, right);
            return result != JexlEngine.TRY_FAILED ? result : arithmetic.add(left, right);
        } catch (final ArithmeticException xrt) {
            throw new JexlException(node, ""+ error"", xrt);
        }
    }","  public void test124()  throws Throwable  {
      Engine engine0 = new Engine();
      JexlEngine.EmptyContext jexlEngine_EmptyContext0 = (JexlEngine.EmptyContext)JexlEngine.EMPTY_CONTEXT;
      JexlOptions jexlOptions0 = engine0.options(jexlEngine_EmptyContext0);
      ASTJexlScript aSTJexlScript0 = new ASTJexlScript(46);
      Interpreter interpreter0 = new Interpreter(engine0, jexlOptions0, jexlEngine_EmptyContext0, (Frame) null);
      Parser parser0 = new Parser("""");
      ASTBreak aSTBreak0 = new ASTBreak(parser0, 2);
      ASTSetLiteral aSTSetLiteral0 = mock(ASTSetLiteral.class, new ViolatedAssumptionAnswer());
      doReturn(aSTJexlScript0, aSTJexlScript0, aSTBreak0).when(aSTSetLiteral0).jjtGetChild(anyInt());
      doReturn(46).when(aSTSetLiteral0).jjtGetNumChildren();
      // Undeclared exception!
      try { 
        interpreter0.visit(aSTSetLiteral0, parser0);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
      }
  }"
3291,"    protected Object visit(final ASTAddNode node, final Object data) {
        final Object left = node.jjtGetChild(0).jjtAccept(this, data);
        final Object right = node.jjtGetChild(1).jjtAccept(this, data);
        try {
            final Object result = operators.tryOverload(node, JexlOperator.ADD, left, right);
            return result != JexlEngine.TRY_FAILED ? result : arithmetic.add(left, right);
        } catch (final ArithmeticException xrt) {
            throw new JexlException(node, ""+ error"", xrt);
        }
    }","  public void test125()  throws Throwable  {
      Engine engine0 = new Engine();
      ASTJexlScript aSTJexlScript0 = new ASTJexlScript((-243));
      JexlOptions jexlOptions0 = engine0.options(aSTJexlScript0, engine0.EMPTY_CONTEXT);
      Interpreter interpreter0 = engine0.createInterpreter((JexlContext) null, (Frame) null, jexlOptions0);
      Parser parser0 = new Parser("""");
      ASTMapEntry aSTMapEntry0 = new ASTMapEntry(parser0, 16);
      // Undeclared exception!
      try { 
        interpreter0.visit(aSTMapEntry0, (Object) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
3292,"    protected Object visit(final ASTAddNode node, final Object data) {
        final Object left = node.jjtGetChild(0).jjtAccept(this, data);
        final Object right = node.jjtGetChild(1).jjtAccept(this, data);
        try {
            final Object result = operators.tryOverload(node, JexlOperator.ADD, left, right);
            return result != JexlEngine.TRY_FAILED ? result : arithmetic.add(left, right);
        } catch (final ArithmeticException xrt) {
            throw new JexlException(node, ""+ error"", xrt);
        }
    }","  public void test126()  throws Throwable  {
      Engine engine0 = new Engine();
      TemplateInterpreter.Arguments templateInterpreter_Arguments0 = new TemplateInterpreter.Arguments(engine0);
      TemplateInterpreter templateInterpreter0 = new TemplateInterpreter(templateInterpreter_Arguments0);
      Parser parser0 = new Parser(""eo?"");
      ASTSetMultNode aSTSetMultNode0 = new ASTSetMultNode(parser0, (-2));
      ASTExtendedLiteral aSTExtendedLiteral0 = new ASTExtendedLiteral(parser0, 1773);
      // Undeclared exception!
      try { 
        templateInterpreter0.visit(aSTSetMultNode0, aSTExtendedLiteral0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
3293,"    protected Object visit(final ASTAddNode node, final Object data) {
        final Object left = node.jjtGetChild(0).jjtAccept(this, data);
        final Object right = node.jjtGetChild(1).jjtAccept(this, data);
        try {
            final Object result = operators.tryOverload(node, JexlOperator.ADD, left, right);
            return result != JexlEngine.TRY_FAILED ? result : arithmetic.add(left, right);
        } catch (final ArithmeticException xrt) {
            throw new JexlException(node, ""+ error"", xrt);
        }
    }","  public void test127()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine();
      ASTJexlScript aSTJexlScript0 = new ASTJexlScript((byte)56);
      JexlOptions jexlOptions0 = jexlBuilder0.options();
      Interpreter interpreter0 = new Interpreter(engine0, jexlOptions0, engine0.EMPTY_CONTEXT, (Frame) null);
      ASTSetOrNode aSTSetOrNode0 = new ASTSetOrNode((byte)56);
      // Undeclared exception!
      try { 
        interpreter0.visit(aSTSetOrNode0, aSTJexlScript0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
3294,"    protected Object visit(final ASTAddNode node, final Object data) {
        final Object left = node.jjtGetChild(0).jjtAccept(this, data);
        final Object right = node.jjtGetChild(1).jjtAccept(this, data);
        try {
            final Object result = operators.tryOverload(node, JexlOperator.ADD, left, right);
            return result != JexlEngine.TRY_FAILED ? result : arithmetic.add(left, right);
        } catch (final ArithmeticException xrt) {
            throw new JexlException(node, ""+ error"", xrt);
        }
    }","  public void test128()  throws Throwable  {
      Engine engine0 = new Engine();
      TemplateInterpreter.Arguments templateInterpreter_Arguments0 = new TemplateInterpreter.Arguments(engine0);
      TemplateInterpreter templateInterpreter0 = new TemplateInterpreter(templateInterpreter_Arguments0);
      ASTTrueNode aSTTrueNode0 = new ASTTrueNode(0);
      Object object0 = templateInterpreter0.visit(aSTTrueNode0, engine0);
}"
3295,"    protected Object visit(final ASTAddNode node, final Object data) {
        final Object left = node.jjtGetChild(0).jjtAccept(this, data);
        final Object right = node.jjtGetChild(1).jjtAccept(this, data);
        try {
            final Object result = operators.tryOverload(node, JexlOperator.ADD, left, right);
            return result != JexlEngine.TRY_FAILED ? result : arithmetic.add(left, right);
        } catch (final ArithmeticException xrt) {
            throw new JexlException(node, ""+ error"", xrt);
        }
    }","  public void test129()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      TemplateInterpreter.Arguments templateInterpreter_Arguments0 = new TemplateInterpreter.Arguments(engine0);
      TemplateInterpreter templateInterpreter0 = new TemplateInterpreter(templateInterpreter_Arguments0);
      ASTContinue aSTContinue0 = new ASTContinue(661);
      // Undeclared exception!
      try { 
        templateInterpreter0.visit(aSTContinue0, templateInterpreter0);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
      }
  }"
3296,"    protected Object visit(final ASTAddNode node, final Object data) {
        final Object left = node.jjtGetChild(0).jjtAccept(this, data);
        final Object right = node.jjtGetChild(1).jjtAccept(this, data);
        try {
            final Object result = operators.tryOverload(node, JexlOperator.ADD, left, right);
            return result != JexlEngine.TRY_FAILED ? result : arithmetic.add(left, right);
        } catch (final ArithmeticException xrt) {
            throw new JexlException(node, ""+ error"", xrt);
        }
    }","  public void test130()  throws Throwable  {
      Engine engine0 = new Engine();
      MapContext mapContext0 = new MapContext();
      JexlOptions jexlOptions0 = engine0.options((ASTJexlScript) null, mapContext0);
      Interpreter interpreter0 = engine0.createInterpreter(mapContext0, (Frame) null, jexlOptions0);
      ASTAnnotatedStatement aSTAnnotatedStatement0 = new ASTAnnotatedStatement(70);
      // Undeclared exception!
      try { 
        interpreter0.visit(aSTAnnotatedStatement0, jexlOptions0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
3297,"    protected Object visit(final ASTAddNode node, final Object data) {
        final Object left = node.jjtGetChild(0).jjtAccept(this, data);
        final Object right = node.jjtGetChild(1).jjtAccept(this, data);
        try {
            final Object result = operators.tryOverload(node, JexlOperator.ADD, left, right);
            return result != JexlEngine.TRY_FAILED ? result : arithmetic.add(left, right);
        } catch (final ArithmeticException xrt) {
            throw new JexlException(node, ""+ error"", xrt);
        }
    }","  public void test131()  throws Throwable  {
      Engine engine0 = new Engine();
      ASTJexlScript aSTJexlScript0 = new ASTJexlScript(0);
      MapContext mapContext0 = new MapContext();
      JexlOptions jexlOptions0 = engine0.options(aSTJexlScript0, mapContext0);
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[2];
      Scope scope1 = new Scope(scope0, stringArray0);
      Frame frame0 = new Frame(scope1, stringArray0, (-1));
      Interpreter interpreter0 = engine0.createInterpreter(mapContext0, frame0, jexlOptions0);
      Parser parser0 = new Parser(""^>2o;H)w"");
      ASTSetDivNode aSTSetDivNode0 = new ASTSetDivNode(parser0, (-465));
      JexlArithmetic.NullOperand jexlArithmetic_NullOperand0 = new JexlArithmetic.NullOperand();
      // Undeclared exception!
      try { 
        interpreter0.visit(aSTSetDivNode0, jexlArithmetic_NullOperand0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
3298,"    protected Object visit(final ASTAddNode node, final Object data) {
        final Object left = node.jjtGetChild(0).jjtAccept(this, data);
        final Object right = node.jjtGetChild(1).jjtAccept(this, data);
        try {
            final Object result = operators.tryOverload(node, JexlOperator.ADD, left, right);
            return result != JexlEngine.TRY_FAILED ? result : arithmetic.add(left, right);
        } catch (final ArithmeticException xrt) {
            throw new JexlException(node, ""+ error"", xrt);
        }
    }","  public void test132()  throws Throwable  {
      Engine engine0 = new Engine();
      TemplateInterpreter.Arguments templateInterpreter_Arguments0 = new TemplateInterpreter.Arguments(engine0);
      TemplateInterpreter templateInterpreter0 = new TemplateInterpreter(templateInterpreter_Arguments0);
      Parser parser0 = engine0.parser;
      ASTMethodNode aSTMethodNode0 = new ASTMethodNode(parser0, (-1));
      Long long0 = Long.valueOf((long) (-1));
      // Undeclared exception!
      try { 
        templateInterpreter0.visit(aSTMethodNode0, long0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
3299,"    protected Object visit(final ASTAddNode node, final Object data) {
        final Object left = node.jjtGetChild(0).jjtAccept(this, data);
        final Object right = node.jjtGetChild(1).jjtAccept(this, data);
        try {
            final Object result = operators.tryOverload(node, JexlOperator.ADD, left, right);
            return result != JexlEngine.TRY_FAILED ? result : arithmetic.add(left, right);
        } catch (final ArithmeticException xrt) {
            throw new JexlException(node, ""+ error"", xrt);
        }
    }","  public void test133()  throws Throwable  {
      Engine engine0 = new Engine();
      TemplateInterpreter.Arguments templateInterpreter_Arguments0 = new TemplateInterpreter.Arguments(engine0);
      TemplateInterpreter templateInterpreter0 = new TemplateInterpreter(templateInterpreter_Arguments0);
      ASTNSWNode aSTNSWNode0 = new ASTNSWNode((-505));
      ASTReferenceExpression aSTReferenceExpression0 = mock(ASTReferenceExpression.class, new ViolatedAssumptionAnswer());
      doReturn(aSTNSWNode0).when(aSTReferenceExpression0).jjtGetChild(anyInt());
      // Undeclared exception!
      try { 
        templateInterpreter0.visit(aSTReferenceExpression0, (Object) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
3300,"    protected Object visit(final ASTAddNode node, final Object data) {
        final Object left = node.jjtGetChild(0).jjtAccept(this, data);
        final Object right = node.jjtGetChild(1).jjtAccept(this, data);
        try {
            final Object result = operators.tryOverload(node, JexlOperator.ADD, left, right);
            return result != JexlEngine.TRY_FAILED ? result : arithmetic.add(left, right);
        } catch (final ArithmeticException xrt) {
            throw new JexlException(node, ""+ error"", xrt);
        }
    }","  public void test134()  throws Throwable  {
      Engine engine0 = new Engine();
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[7];
      Scope scope1 = new Scope(scope0, stringArray0);
      Frame frame0 = new Frame(scope1, stringArray0, (-518));
      Interpreter interpreter0 = new Interpreter(engine0, (JexlOptions) null, engine0.EMPTY_CONTEXT, frame0);
      Parser parser0 = engine0.parser;
      ASTReturnStatement aSTReturnStatement0 = new ASTReturnStatement(parser0, 1964);
      ASTJexlScript aSTJexlScript0 = new ASTJexlScript(1964);
      Script script0 = new Script(engine0, ""{ny`,q"", aSTJexlScript0);
      Closure closure0 = new Closure(script0, stringArray0);
      // Undeclared exception!
      try { 
        interpreter0.visit(aSTReturnStatement0, closure0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
3301,"    protected Object visit(final ASTAddNode node, final Object data) {
        final Object left = node.jjtGetChild(0).jjtAccept(this, data);
        final Object right = node.jjtGetChild(1).jjtAccept(this, data);
        try {
            final Object result = operators.tryOverload(node, JexlOperator.ADD, left, right);
            return result != JexlEngine.TRY_FAILED ? result : arithmetic.add(left, right);
        } catch (final ArithmeticException xrt) {
            throw new JexlException(node, ""+ error"", xrt);
        }
    }","  public void test135()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[0];
      Scope scope1 = new Scope(scope0, stringArray0);
      Frame frame0 = new Frame(scope1, stringArray0, 1052);
      Interpreter interpreter0 = new Interpreter(engine0, (JexlOptions) null, engine0.EMPTY_CONTEXT, frame0);
      ASTSizeFunction aSTSizeFunction0 = new ASTSizeFunction(1052);
      // Undeclared exception!
      try { 
        interpreter0.visit(aSTSizeFunction0, jexlBuilder0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
3302,"    public Object getAttribute(final Object object, final Object attribute) {
        return getAttribute(object, attribute, null);
    }","  public void test136()  throws Throwable  {
      Engine engine0 = new Engine();
      ASTJexlScript aSTJexlScript0 = new ASTJexlScript(0);
      MapContext mapContext0 = new MapContext();
      JexlOptions jexlOptions0 = engine0.options(aSTJexlScript0, mapContext0);
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[2];
      Scope scope1 = new Scope(scope0, stringArray0);
      Frame frame0 = new Frame(scope1, stringArray0, 97);
      Interpreter interpreter0 = engine0.createInterpreter(engine0.EMPTY_CONTEXT, frame0, jexlOptions0);
      // Undeclared exception!
      try { 
        interpreter0.getAttribute((Object) null, (Object) null);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // ?: JEXL error : object is null
         //
         verifyException(""org.apache.commons.jexl3.internal.InterpreterBase"", e);
      }
  }"
3303,"    protected Object visit(final ASTAddNode node, final Object data) {
        final Object left = node.jjtGetChild(0).jjtAccept(this, data);
        final Object right = node.jjtGetChild(1).jjtAccept(this, data);
        try {
            final Object result = operators.tryOverload(node, JexlOperator.ADD, left, right);
            return result != JexlEngine.TRY_FAILED ? result : arithmetic.add(left, right);
        } catch (final ArithmeticException xrt) {
            throw new JexlException(node, ""+ error"", xrt);
        }
    }","  public void test137()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      TemplateInterpreter.Arguments templateInterpreter_Arguments0 = new TemplateInterpreter.Arguments(engine0);
      TemplateInterpreter templateInterpreter0 = new TemplateInterpreter(templateInterpreter_Arguments0);
      ASTNullLiteral aSTNullLiteral0 = new ASTNullLiteral(22);
      ASTNamespaceIdentifier aSTNamespaceIdentifier0 = new ASTNamespaceIdentifier(2538);
      Object object0 = templateInterpreter0.visit(aSTNullLiteral0, aSTNamespaceIdentifier0);
}"
3304,"    public void setAttribute(final Object object, final Object attribute, final Object value) {
        setAttribute(object, attribute, value, null);
    }","  public void test138()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlSandbox jexlSandbox0 = new JexlSandbox(false, true);
      Engine engine0 = new Engine(jexlBuilder0);
      JexlOptions jexlOptions0 = new JexlOptions();
      Interpreter interpreter0 = engine0.createInterpreter((JexlContext) null, (Frame) null, jexlOptions0);
      Parser parser0 = engine0.parser;
      ASTReference aSTReference0 = new ASTReference(parser0, 1799);
      // Undeclared exception!
      try { 
        interpreter0.setAttribute(jexlSandbox0, aSTReference0, jexlBuilder0);
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1799
         //
         verifyException(""org.apache.commons.jexl3.parser.SimpleNode"", e);
      }
  }"
3305,"    protected Object visit(final ASTAddNode node, final Object data) {
        final Object left = node.jjtGetChild(0).jjtAccept(this, data);
        final Object right = node.jjtGetChild(1).jjtAccept(this, data);
        try {
            final Object result = operators.tryOverload(node, JexlOperator.ADD, left, right);
            return result != JexlEngine.TRY_FAILED ? result : arithmetic.add(left, right);
        } catch (final ArithmeticException xrt) {
            throw new JexlException(node, ""+ error"", xrt);
        }
    }","  public void test139()  throws Throwable  {
      Engine engine0 = new Engine();
      JexlEngine.EmptyContext jexlEngine_EmptyContext0 = (JexlEngine.EmptyContext)JexlEngine.EMPTY_CONTEXT;
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[5];
      Scope scope1 = new Scope(scope0, stringArray0);
      Frame frame0 = new Frame(scope1, stringArray0, 100);
      JexlOptions jexlOptions0 = new JexlOptions();
      Interpreter interpreter0 = engine0.createInterpreter(jexlEngine_EmptyContext0, frame0, jexlOptions0);
      Parser parser0 = engine0.parser;
      ASTSetXorNode aSTSetXorNode0 = new ASTSetXorNode(parser0, 100);
      // Undeclared exception!
      try { 
        interpreter0.visit(aSTSetXorNode0, """");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
3306,"    protected Object visit(final ASTAddNode node, final Object data) {
        final Object left = node.jjtGetChild(0).jjtAccept(this, data);
        final Object right = node.jjtGetChild(1).jjtAccept(this, data);
        try {
            final Object result = operators.tryOverload(node, JexlOperator.ADD, left, right);
            return result != JexlEngine.TRY_FAILED ? result : arithmetic.add(left, right);
        } catch (final ArithmeticException xrt) {
            throw new JexlException(node, ""+ error"", xrt);
        }
    }","  public void test140()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      JexlOptions jexlOptions0 = engine0.options;
      Interpreter interpreter0 = new Interpreter(engine0, jexlOptions0, engine0.EMPTY_CONTEXT, (Frame) null);
      ASTRangeNode aSTRangeNode0 = new ASTRangeNode(4768);
      // Undeclared exception!
      try { 
        interpreter0.visit(aSTRangeNode0, jexlBuilder0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
3307,"    protected Object visit(final ASTAddNode node, final Object data) {
        final Object left = node.jjtGetChild(0).jjtAccept(this, data);
        final Object right = node.jjtGetChild(1).jjtAccept(this, data);
        try {
            final Object result = operators.tryOverload(node, JexlOperator.ADD, left, right);
            return result != JexlEngine.TRY_FAILED ? result : arithmetic.add(left, right);
        } catch (final ArithmeticException xrt) {
            throw new JexlException(node, ""+ error"", xrt);
        }
    }","  public void test141()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      TemplateInterpreter.Arguments templateInterpreter_Arguments0 = new TemplateInterpreter.Arguments(engine0);
      TemplateInterpreter templateInterpreter0 = new TemplateInterpreter(templateInterpreter_Arguments0);
      ASTSWNode aSTSWNode0 = new ASTSWNode(10);
      // Undeclared exception!
      try { 
        templateInterpreter0.visit(aSTSWNode0, (Object) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
3308,"    protected Object visit(final ASTAddNode node, final Object data) {
        final Object left = node.jjtGetChild(0).jjtAccept(this, data);
        final Object right = node.jjtGetChild(1).jjtAccept(this, data);
        try {
            final Object result = operators.tryOverload(node, JexlOperator.ADD, left, right);
            return result != JexlEngine.TRY_FAILED ? result : arithmetic.add(left, right);
        } catch (final ArithmeticException xrt) {
            throw new JexlException(node, ""+ error"", xrt);
        }
    }","  public void test142()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      TemplateInterpreter.Arguments templateInterpreter_Arguments0 = new TemplateInterpreter.Arguments(engine0);
      TemplateInterpreter templateInterpreter0 = new TemplateInterpreter(templateInterpreter_Arguments0);
      ASTExtendedLiteral aSTExtendedLiteral0 = new ASTExtendedLiteral(234);
      ASTArrayLiteral aSTArrayLiteral0 = mock(ASTArrayLiteral.class, new ViolatedAssumptionAnswer());
      doReturn(aSTExtendedLiteral0, aSTExtendedLiteral0, aSTExtendedLiteral0, (JexlNode) null, aSTExtendedLiteral0).when(aSTArrayLiteral0).jjtGetChild(anyInt());
      doReturn(22).when(aSTArrayLiteral0).jjtGetNumChildren();
      ArrayList arrayList0 = (ArrayList)templateInterpreter0.visit(aSTArrayLiteral0, (Object) null);
}"
3309,"    protected Object visit(final ASTAddNode node, final Object data) {
        final Object left = node.jjtGetChild(0).jjtAccept(this, data);
        final Object right = node.jjtGetChild(1).jjtAccept(this, data);
        try {
            final Object result = operators.tryOverload(node, JexlOperator.ADD, left, right);
            return result != JexlEngine.TRY_FAILED ? result : arithmetic.add(left, right);
        } catch (final ArithmeticException xrt) {
            throw new JexlException(node, ""+ error"", xrt);
        }
    }","  public void test143()  throws Throwable  {
      Engine engine0 = new Engine();
      TemplateInterpreter.Arguments templateInterpreter_Arguments0 = new TemplateInterpreter.Arguments(engine0);
      TemplateInterpreter templateInterpreter0 = new TemplateInterpreter(templateInterpreter_Arguments0);
      ASTEWNode aSTEWNode0 = new ASTEWNode((-2));
      ASTVar aSTVar0 = new ASTVar(84);
      // Undeclared exception!
      try { 
        templateInterpreter0.visit(aSTEWNode0, aSTVar0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
3310,"    protected Object visit(final ASTAddNode node, final Object data) {
        final Object left = node.jjtGetChild(0).jjtAccept(this, data);
        final Object right = node.jjtGetChild(1).jjtAccept(this, data);
        try {
            final Object result = operators.tryOverload(node, JexlOperator.ADD, left, right);
            return result != JexlEngine.TRY_FAILED ? result : arithmetic.add(left, right);
        } catch (final ArithmeticException xrt) {
            throw new JexlException(node, ""+ error"", xrt);
        }
    }","  public void test144()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      JexlOptions jexlOptions0 = engine0.options((JexlContext) null);
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[4];
      Scope scope1 = new Scope(scope0, stringArray0);
      Frame frame0 = new Frame(scope1, stringArray0, (-1));
      Interpreter interpreter0 = new Interpreter(engine0, jexlOptions0, (JexlContext) null, frame0);
      // Undeclared exception!
      try { 
        interpreter0.visit((ASTAnnotation) null, ""/O(]]MH7.j"");
        fail(""Expecting exception: UnsupportedOperationException"");
      } catch(UnsupportedOperationException e) {
         //
         // org.apache.commons.jexl3.parser.ASTAnnotation: Not supported.
         //
         verifyException(""org.apache.commons.jexl3.internal.Interpreter"", e);
      }
  }"
3311,"    protected Object visit(final ASTAddNode node, final Object data) {
        final Object left = node.jjtGetChild(0).jjtAccept(this, data);
        final Object right = node.jjtGetChild(1).jjtAccept(this, data);
        try {
            final Object result = operators.tryOverload(node, JexlOperator.ADD, left, right);
            return result != JexlEngine.TRY_FAILED ? result : arithmetic.add(left, right);
        } catch (final ArithmeticException xrt) {
            throw new JexlException(node, ""+ error"", xrt);
        }
    }","  public void test145()  throws Throwable  {
      Engine engine0 = new Engine();
      ASTJexlScript aSTJexlScript0 = new ASTJexlScript(0);
      MapContext mapContext0 = new MapContext();
      JexlOptions jexlOptions0 = engine0.options(aSTJexlScript0, mapContext0);
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[2];
      Scope scope1 = new Scope(scope0, stringArray0);
      Frame frame0 = new Frame(scope1, stringArray0, 97);
      Interpreter interpreter0 = engine0.createInterpreter(engine0.EMPTY_CONTEXT, frame0, jexlOptions0);
      ASTSetAddNode aSTSetAddNode0 = new ASTSetAddNode(46);
      // Undeclared exception!
      try { 
        interpreter0.visit(aSTSetAddNode0, ""!*s0[`RZg,#&<,;"");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
3312,"    protected Object visit(final ASTAddNode node, final Object data) {
        final Object left = node.jjtGetChild(0).jjtAccept(this, data);
        final Object right = node.jjtGetChild(1).jjtAccept(this, data);
        try {
            final Object result = operators.tryOverload(node, JexlOperator.ADD, left, right);
            return result != JexlEngine.TRY_FAILED ? result : arithmetic.add(left, right);
        } catch (final ArithmeticException xrt) {
            throw new JexlException(node, ""+ error"", xrt);
        }
    }","  public void test146()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      InterpreterBase.ArithmeticFuncall interpreterBase_ArithmeticFuncall0 = new InterpreterBase.ArithmeticFuncall((JexlMethod) null, false);
      Engine engine0 = new Engine();
      ASTJexlScript aSTJexlScript0 = new ASTJexlScript(73);
      JexlOptions jexlOptions0 = engine0.options(aSTJexlScript0, engine0.EMPTY_CONTEXT);
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      Scope scope1 = new Scope(scope0, (String[]) null);
      Frame frame0 = new Frame(scope1, objectArray0, 73);
      Interpreter interpreter0 = new Interpreter(engine0, jexlOptions0, engine0.EMPTY_CONTEXT, frame0);
      ASTEmptyFunction aSTEmptyFunction0 = new ASTEmptyFunction(1340);
      // Undeclared exception!
      try { 
        interpreter0.visit(aSTEmptyFunction0, interpreterBase_ArithmeticFuncall0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
3313,"    protected Object visit(final ASTAddNode node, final Object data) {
        final Object left = node.jjtGetChild(0).jjtAccept(this, data);
        final Object right = node.jjtGetChild(1).jjtAccept(this, data);
        try {
            final Object result = operators.tryOverload(node, JexlOperator.ADD, left, right);
            return result != JexlEngine.TRY_FAILED ? result : arithmetic.add(left, right);
        } catch (final ArithmeticException xrt) {
            throw new JexlException(node, ""+ error"", xrt);
        }
    }","  public void test147()  throws Throwable  {
      Engine engine0 = new Engine();
      TemplateInterpreter.Arguments templateInterpreter_Arguments0 = new TemplateInterpreter.Arguments(engine0);
      TemplateInterpreter templateInterpreter0 = new TemplateInterpreter(templateInterpreter_Arguments0);
      StringProvider stringProvider0 = new StringProvider(""|SzXdsh9?p+.W<"");
      Parser parser0 = new Parser(stringProvider0);
      ASTFalseNode aSTFalseNode0 = new ASTFalseNode(parser0, (-3249));
      ASTReference aSTReference0 = new ASTReference(parser0, (byte)3);
      Object object0 = templateInterpreter0.visit(aSTFalseNode0, aSTReference0);
}"
3314,"    protected Object runClosure(final Closure closure, final Object data) {
        final ASTJexlScript script = closure.getScript();
        block = new LexicalFrame(frame, block).defineArgs();
        try {
            final JexlNode body = script.jjtGetChild(script.jjtGetNumChildren() - 1);
            return interpret(body);
        } finally {
            block = block.pop();
        }
    }","  public void test148()  throws Throwable  {
      Engine engine0 = new Engine();
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[4];
      Scope scope1 = new Scope(scope0, stringArray0);
      JexlOptions jexlOptions0 = new JexlOptions();
      Frame frame0 = new Frame(scope1, stringArray0, 1162);
      Interpreter interpreter0 = new Interpreter(engine0, jexlOptions0, (JexlContext) null, frame0);
      ASTJexlLambda aSTJexlLambda0 = mock(ASTJexlLambda.class, new ViolatedAssumptionAnswer());
      doReturn(frame0).when(aSTJexlLambda0).createFrame(any(org.apache.commons.jexl3.internal.Frame.class) , any(java.lang.Object[].class));
      doReturn((JexlNode) null).when(aSTJexlLambda0).jjtGetChild(anyInt());
      doReturn(0).when(aSTJexlLambda0).jjtGetNumChildren();
      Closure closure0 = new Closure(interpreter0, aSTJexlLambda0);
      // Undeclared exception!
      try { 
        interpreter0.runClosure(closure0, frame0);
        fail(""Expecting exception: ArrayStoreException"");
      } catch(ArrayStoreException e) {
         //
         // org.apache.commons.jexl3.internal.Scope$2
         //
         verifyException(""org.apache.commons.jexl3.internal.Frame"", e);
      }
  }"
3315,"    protected Object visit(final ASTAddNode node, final Object data) {
        final Object left = node.jjtGetChild(0).jjtAccept(this, data);
        final Object right = node.jjtGetChild(1).jjtAccept(this, data);
        try {
            final Object result = operators.tryOverload(node, JexlOperator.ADD, left, right);
            return result != JexlEngine.TRY_FAILED ? result : arithmetic.add(left, right);
        } catch (final ArithmeticException xrt) {
            throw new JexlException(node, ""+ error"", xrt);
        }
    }","  public void test149()  throws Throwable  {
      Engine engine0 = new Engine();
      TemplateInterpreter.Arguments templateInterpreter_Arguments0 = new TemplateInterpreter.Arguments(engine0);
      TemplateInterpreter templateInterpreter0 = new TemplateInterpreter(templateInterpreter_Arguments0);
      Integer integer0 = new Integer((-8426));
      // Undeclared exception!
      try { 
        templateInterpreter0.visit((ASTSetAndNode) null, integer0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.internal.Interpreter"", e);
      }
  }"
3316,"    public LexicalFrame defineArgs() {
        if (frame != null) {
            final int argc = frame.getScope().getArgCount();
            for (int a = 0; a < argc; ++a) {
                super.addSymbol(a);
            }
        }
        return this;
    }","  public void test0()  throws Throwable  {
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      doReturn((-265)).when(scope0).getArgCount();
      String[] stringArray0 = new String[7];
      Frame frame0 = new Frame(scope0, stringArray0, 106);
      LexicalFrame lexicalFrame0 = new LexicalFrame(frame0, (LexicalFrame) null);
      LexicalFrame lexicalFrame1 = lexicalFrame0.defineArgs();
}"
3317,"    public LexicalFrame pop() {
        // undefine all symbols
        clearSymbols(s ->   frame.set(s, Scope.UNDEFINED) );
        // restore values of captured symbols that were overwritten
        if (stack != null) {
            while (!stack.isEmpty()) {
                Object value = stack.pop();
                if (value == Scope.UNDECLARED) {
                    value = Scope.UNDEFINED;
                } else if (value == this) {
                    value = null;
                }
                final int symbol = (Integer) stack.pop();
                frame.set(symbol, value);
            }
        }
        return previous;
    }","  public void test1()  throws Throwable  {
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[8];
      Scope scope1 = new Scope(scope0, stringArray0);
      Frame frame0 = new Frame(scope1, stringArray0, 1);
      LexicalFrame lexicalFrame0 = new LexicalFrame(frame0, (LexicalFrame) null);
      LexicalFrame lexicalFrame1 = new LexicalFrame(frame0, lexicalFrame0);
      LexicalFrame lexicalFrame2 = lexicalFrame1.pop();
}"
3318,"    public LexicalFrame pop() {
        // undefine all symbols
        clearSymbols(s ->   frame.set(s, Scope.UNDEFINED) );
        // restore values of captured symbols that were overwritten
        if (stack != null) {
            while (!stack.isEmpty()) {
                Object value = stack.pop();
                if (value == Scope.UNDECLARED) {
                    value = Scope.UNDEFINED;
                } else if (value == this) {
                    value = null;
                }
                final int symbol = (Integer) stack.pop();
                frame.set(symbol, value);
            }
        }
        return previous;
    }","  public void test2()  throws Throwable  {
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[8];
      Scope scope1 = new Scope(scope0, stringArray0);
      Frame frame0 = new Frame(scope1, stringArray0, 1);
      LexicalFrame lexicalFrame0 = new LexicalFrame(frame0, (LexicalFrame) null);
      LexicalFrame lexicalFrame1 = new LexicalFrame(frame0, lexicalFrame0);
      LexicalFrame lexicalFrame2 = lexicalFrame1.pop();
}"
3319,"    public boolean defineSymbol(final int symbol, final boolean capture) {
        final boolean declared = addSymbol(symbol);
        if (declared && capture) {
            if (stack == null) {
                stack = new ArrayDeque<>();
            }
            stack.push(symbol);
            Object value = frame.get(symbol);
            if (value == null) {
                value = this;
            }
            stack.push(value);
        }
        return declared;
    }","  public void test3()  throws Throwable  {
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[3];
      Scope scope1 = new Scope(scope0, stringArray0);
      Frame frame0 = new Frame(scope1, stringArray0, 0);
      LexicalFrame lexicalFrame0 = new LexicalFrame(frame0, (LexicalFrame) null);
      LexicalFrame lexicalFrame1 = new LexicalFrame(frame0, lexicalFrame0);
      boolean boolean0 = lexicalFrame0.defineSymbol(2031, false);
}"
3320,"    public LexicalFrame pop() {
        // undefine all symbols
        clearSymbols(s ->   frame.set(s, Scope.UNDEFINED) );
        // restore values of captured symbols that were overwritten
        if (stack != null) {
            while (!stack.isEmpty()) {
                Object value = stack.pop();
                if (value == Scope.UNDECLARED) {
                    value = Scope.UNDEFINED;
                } else if (value == this) {
                    value = null;
                }
                final int symbol = (Integer) stack.pop();
                frame.set(symbol, value);
            }
        }
        return previous;
    }","  public void test4()  throws Throwable  {
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[3];
      Scope scope1 = new Scope(scope0, stringArray0);
      Frame frame0 = new Frame(scope1, stringArray0, 0);
      LexicalFrame lexicalFrame0 = new LexicalFrame(frame0, (LexicalFrame) null);
      LexicalFrame lexicalFrame1 = new LexicalFrame(frame0, lexicalFrame0);
      boolean boolean0 = lexicalFrame0.defineSymbol(2031, false);
      LexicalFrame lexicalFrame2 = lexicalFrame1.pop();
}"
3321,"    public LexicalFrame pop() {
        // undefine all symbols
        clearSymbols(s ->   frame.set(s, Scope.UNDEFINED) );
        // restore values of captured symbols that were overwritten
        if (stack != null) {
            while (!stack.isEmpty()) {
                Object value = stack.pop();
                if (value == Scope.UNDECLARED) {
                    value = Scope.UNDEFINED;
                } else if (value == this) {
                    value = null;
                }
                final int symbol = (Integer) stack.pop();
                frame.set(symbol, value);
            }
        }
        return previous;
    }","  public void test5()  throws Throwable  {
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[3];
      Scope scope1 = new Scope(scope0, stringArray0);
      Frame frame0 = new Frame(scope1, stringArray0, 0);
      LexicalFrame lexicalFrame0 = new LexicalFrame(frame0, (LexicalFrame) null);
      LexicalFrame lexicalFrame1 = new LexicalFrame(frame0, lexicalFrame0);
      boolean boolean0 = lexicalFrame0.defineSymbol(2031, false);
      LexicalFrame lexicalFrame2 = lexicalFrame1.pop();
}"
3322,"    public LexicalFrame pop() {
        // undefine all symbols
        clearSymbols(s ->   frame.set(s, Scope.UNDEFINED) );
        // restore values of captured symbols that were overwritten
        if (stack != null) {
            while (!stack.isEmpty()) {
                Object value = stack.pop();
                if (value == Scope.UNDECLARED) {
                    value = Scope.UNDEFINED;
                } else if (value == this) {
                    value = null;
                }
                final int symbol = (Integer) stack.pop();
                frame.set(symbol, value);
            }
        }
        return previous;
    }","  public void test6()  throws Throwable  {
      LexicalFrame lexicalFrame0 = new LexicalFrame((Frame) null, (LexicalFrame) null);
      lexicalFrame0.addSymbol((-2000));
      // Undeclared exception!
      try { 
        lexicalFrame0.pop();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.internal.LexicalFrame"", e);
      }
  }"
3323,"    public LexicalFrame pop() {
        // undefine all symbols
        clearSymbols(s ->   frame.set(s, Scope.UNDEFINED) );
        // restore values of captured symbols that were overwritten
        if (stack != null) {
            while (!stack.isEmpty()) {
                Object value = stack.pop();
                if (value == Scope.UNDECLARED) {
                    value = Scope.UNDEFINED;
                } else if (value == this) {
                    value = null;
                }
                final int symbol = (Integer) stack.pop();
                frame.set(symbol, value);
            }
        }
        return previous;
    }","  public void test7()  throws Throwable  {
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[6];
      Scope scope1 = new Scope(scope0, stringArray0);
      Frame frame0 = new Frame(scope1, stringArray0, 0);
      LexicalFrame lexicalFrame0 = new LexicalFrame(frame0, (LexicalFrame) null);
      lexicalFrame0.defineArgs();
      // Undeclared exception!
      try { 
        lexicalFrame0.pop();
        fail(""Expecting exception: ArrayStoreException"");
      } catch(ArrayStoreException e) {
         //
         // org.apache.commons.jexl3.internal.Scope$2
         //
         verifyException(""org.apache.commons.jexl3.internal.Frame"", e);
      }
  }"
3324,"    public LexicalFrame pop() {
        // undefine all symbols
        clearSymbols(s ->   frame.set(s, Scope.UNDEFINED) );
        // restore values of captured symbols that were overwritten
        if (stack != null) {
            while (!stack.isEmpty()) {
                Object value = stack.pop();
                if (value == Scope.UNDECLARED) {
                    value = Scope.UNDEFINED;
                } else if (value == this) {
                    value = null;
                }
                final int symbol = (Integer) stack.pop();
                frame.set(symbol, value);
            }
        }
        return previous;
    }","  public void test8()  throws Throwable  {
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[3];
      Scope scope1 = new Scope(scope0, stringArray0);
      Frame frame0 = new Frame(scope1, stringArray0, 0);
      LexicalFrame lexicalFrame0 = new LexicalFrame(frame0, (LexicalFrame) null);
      lexicalFrame0.defineSymbol(2031, false);
      // Undeclared exception!
      try { 
        lexicalFrame0.pop();
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2031
         //
         verifyException(""org.apache.commons.jexl3.internal.Frame"", e);
      }
  }"
3325,"    public boolean defineSymbol(final int symbol, final boolean capture) {
        final boolean declared = addSymbol(symbol);
        if (declared && capture) {
            if (stack == null) {
                stack = new ArrayDeque<>();
            }
            stack.push(symbol);
            Object value = frame.get(symbol);
            if (value == null) {
                value = this;
            }
            stack.push(value);
        }
        return declared;
    }","  public void test9()  throws Throwable  {
      LexicalFrame lexicalFrame0 = new LexicalFrame((Frame) null, (LexicalFrame) null);
      // Undeclared exception!
      try { 
        lexicalFrame0.defineSymbol((-217), true);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.internal.LexicalFrame"", e);
      }
  }"
3326,"    public boolean defineSymbol(final int symbol, final boolean capture) {
        final boolean declared = addSymbol(symbol);
        if (declared && capture) {
            if (stack == null) {
                stack = new ArrayDeque<>();
            }
            stack.push(symbol);
            Object value = frame.get(symbol);
            if (value == null) {
                value = this;
            }
            stack.push(value);
        }
        return declared;
    }","  public void test10()  throws Throwable  {
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[1];
      Scope scope1 = new Scope(scope0, stringArray0);
      Frame frame0 = new Frame(scope1, stringArray0, 1273);
      LexicalFrame lexicalFrame0 = new LexicalFrame(frame0, (LexicalFrame) null);
      // Undeclared exception!
      try { 
        lexicalFrame0.defineSymbol(846, true);
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 846
         //
         verifyException(""org.apache.commons.jexl3.internal.Frame"", e);
      }
  }"
3327,"    public LexicalFrame defineArgs() {
        if (frame != null) {
            final int argc = frame.getScope().getArgCount();
            for (int a = 0; a < argc; ++a) {
                super.addSymbol(a);
            }
        }
        return this;
    }","  public void test11()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Frame frame0 = new Frame((Scope) null, objectArray0, 0);
      LexicalFrame lexicalFrame0 = new LexicalFrame(frame0, (LexicalFrame) null);
      // Undeclared exception!
      try { 
        lexicalFrame0.defineArgs();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.internal.LexicalFrame"", e);
      }
  }"
3328,"    public LexicalFrame(final Frame scriptf, final LexicalFrame outerf) {
        this.previous = outerf;
        this.frame = scriptf;
    }","  public void test12()  throws Throwable  {
      LexicalFrame lexicalFrame0 = null;
      try {
        lexicalFrame0 = new LexicalFrame((LexicalFrame) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.internal.LexicalFrame"", e);
      }
  }"
3329,"    public LexicalFrame pop() {
        // undefine all symbols
        clearSymbols(s ->   frame.set(s, Scope.UNDEFINED) );
        // restore values of captured symbols that were overwritten
        if (stack != null) {
            while (!stack.isEmpty()) {
                Object value = stack.pop();
                if (value == Scope.UNDECLARED) {
                    value = Scope.UNDEFINED;
                } else if (value == this) {
                    value = null;
                }
                final int symbol = (Integer) stack.pop();
                frame.set(symbol, value);
            }
        }
        return previous;
    }","  public void test13()  throws Throwable  {
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[2];
      stringArray0[1] = ""^"";
      Scope scope1 = new Scope(scope0, stringArray0);
      Frame frame0 = new Frame(scope1, stringArray0, (-2224));
      Frame frame1 = scope1.createFrame(frame0, stringArray0);
      LexicalFrame lexicalFrame0 = new LexicalFrame(frame1, (LexicalFrame) null);
      lexicalFrame0.defineSymbol(0, true);
      LexicalFrame lexicalFrame1 = new LexicalFrame(lexicalFrame0);
      lexicalFrame1.pop();
}"
3330,"    public LexicalFrame pop() {
        // undefine all symbols
        clearSymbols(s ->   frame.set(s, Scope.UNDEFINED) );
        // restore values of captured symbols that were overwritten
        if (stack != null) {
            while (!stack.isEmpty()) {
                Object value = stack.pop();
                if (value == Scope.UNDECLARED) {
                    value = Scope.UNDEFINED;
                } else if (value == this) {
                    value = null;
                }
                final int symbol = (Integer) stack.pop();
                frame.set(symbol, value);
            }
        }
        return previous;
    }","  public void test14()  throws Throwable  {
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[2];
      stringArray0[1] = ""^"";
      Scope scope1 = new Scope(scope0, stringArray0);
      Frame frame0 = new Frame(scope1, stringArray0, (-2224));
      Frame frame1 = scope1.createFrame(frame0, stringArray0);
      LexicalFrame lexicalFrame0 = new LexicalFrame(frame1, (LexicalFrame) null);
      lexicalFrame0.defineSymbol(0, true);
      LexicalFrame lexicalFrame1 = new LexicalFrame(lexicalFrame0);
      lexicalFrame1.pop();
}"
3331,"    public boolean defineSymbol(final int symbol, final boolean capture) {
        final boolean declared = addSymbol(symbol);
        if (declared && capture) {
            if (stack == null) {
                stack = new ArrayDeque<>();
            }
            stack.push(symbol);
            Object value = frame.get(symbol);
            if (value == null) {
                value = this;
            }
            stack.push(value);
        }
        return declared;
    }","  public void test15()  throws Throwable  {
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[2];
      stringArray0[0] = """";
      Scope scope1 = new Scope(scope0, stringArray0);
      Frame frame0 = new Frame(scope1, stringArray0, 4276);
      Frame frame1 = scope1.createFrame(frame0, stringArray0);
      LexicalFrame lexicalFrame0 = new LexicalFrame(frame1, (LexicalFrame) null);
      boolean boolean0 = lexicalFrame0.defineSymbol(1, true);
}"
3332,"    public LexicalFrame pop() {
        // undefine all symbols
        clearSymbols(s ->   frame.set(s, Scope.UNDEFINED) );
        // restore values of captured symbols that were overwritten
        if (stack != null) {
            while (!stack.isEmpty()) {
                Object value = stack.pop();
                if (value == Scope.UNDECLARED) {
                    value = Scope.UNDEFINED;
                } else if (value == this) {
                    value = null;
                }
                final int symbol = (Integer) stack.pop();
                frame.set(symbol, value);
            }
        }
        return previous;
    }","  public void test16()  throws Throwable  {
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[2];
      stringArray0[0] = """";
      Scope scope1 = new Scope(scope0, stringArray0);
      Frame frame0 = new Frame(scope1, stringArray0, 4276);
      Frame frame1 = scope1.createFrame(frame0, stringArray0);
      LexicalFrame lexicalFrame0 = new LexicalFrame(frame1, (LexicalFrame) null);
      boolean boolean0 = lexicalFrame0.defineSymbol(1, true);
      LexicalFrame lexicalFrame1 = lexicalFrame0.pop();
}"
3333,"    public LexicalFrame pop() {
        // undefine all symbols
        clearSymbols(s ->   frame.set(s, Scope.UNDEFINED) );
        // restore values of captured symbols that were overwritten
        if (stack != null) {
            while (!stack.isEmpty()) {
                Object value = stack.pop();
                if (value == Scope.UNDECLARED) {
                    value = Scope.UNDEFINED;
                } else if (value == this) {
                    value = null;
                }
                final int symbol = (Integer) stack.pop();
                frame.set(symbol, value);
            }
        }
        return previous;
    }","  public void test17()  throws Throwable  {
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[2];
      stringArray0[0] = """";
      Scope scope1 = new Scope(scope0, stringArray0);
      Frame frame0 = new Frame(scope1, stringArray0, 4276);
      Frame frame1 = scope1.createFrame(frame0, stringArray0);
      LexicalFrame lexicalFrame0 = new LexicalFrame(frame1, (LexicalFrame) null);
      boolean boolean0 = lexicalFrame0.defineSymbol(1, true);
      LexicalFrame lexicalFrame1 = lexicalFrame0.pop();
}"
3334,"    public LexicalFrame pop() {
        // undefine all symbols
        clearSymbols(s ->   frame.set(s, Scope.UNDEFINED) );
        // restore values of captured symbols that were overwritten
        if (stack != null) {
            while (!stack.isEmpty()) {
                Object value = stack.pop();
                if (value == Scope.UNDECLARED) {
                    value = Scope.UNDEFINED;
                } else if (value == this) {
                    value = null;
                }
                final int symbol = (Integer) stack.pop();
                frame.set(symbol, value);
            }
        }
        return previous;
    }","  public void test18()  throws Throwable  {
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[2];
      stringArray0[0] = """";
      Scope scope1 = new Scope(scope0, stringArray0);
      Frame frame0 = new Frame(scope1, stringArray0, 4276);
      Frame frame1 = scope1.createFrame(frame0, stringArray0);
      LexicalFrame lexicalFrame0 = new LexicalFrame(frame1, (LexicalFrame) null);
      boolean boolean0 = lexicalFrame0.defineSymbol(1, true);
      LexicalFrame lexicalFrame1 = lexicalFrame0.pop();
}"
3335,"    public boolean defineSymbol(final int symbol, final boolean capture) {
        final boolean declared = addSymbol(symbol);
        if (declared && capture) {
            if (stack == null) {
                stack = new ArrayDeque<>();
            }
            stack.push(symbol);
            Object value = frame.get(symbol);
            if (value == null) {
                value = this;
            }
            stack.push(value);
        }
        return declared;
    }","  public void test19()  throws Throwable  {
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[2];
      stringArray0[0] = """";
      Scope scope1 = new Scope(scope0, stringArray0);
      Frame frame0 = new Frame(scope1, stringArray0, (-2224));
      LexicalFrame lexicalFrame0 = new LexicalFrame(frame0, (LexicalFrame) null);
      boolean boolean0 = lexicalFrame0.defineSymbol(0, true);
}"
3336,"    public boolean defineSymbol(final int symbol, final boolean capture) {
        final boolean declared = addSymbol(symbol);
        if (declared && capture) {
            if (stack == null) {
                stack = new ArrayDeque<>();
            }
            stack.push(symbol);
            Object value = frame.get(symbol);
            if (value == null) {
                value = this;
            }
            stack.push(value);
        }
        return declared;
    }","  public void test20()  throws Throwable  {
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[2];
      Scope scope1 = new Scope(scope0, stringArray0);
      Frame frame0 = new Frame(scope1, stringArray0, 4276);
      LexicalFrame lexicalFrame0 = new LexicalFrame(frame0, (LexicalFrame) null);
      lexicalFrame0.defineSymbol(1, true);
      boolean boolean0 = lexicalFrame0.defineSymbol(0, true);
}"
3337,"    public boolean defineSymbol(final int symbol, final boolean capture) {
        final boolean declared = addSymbol(symbol);
        if (declared && capture) {
            if (stack == null) {
                stack = new ArrayDeque<>();
            }
            stack.push(symbol);
            Object value = frame.get(symbol);
            if (value == null) {
                value = this;
            }
            stack.push(value);
        }
        return declared;
    }","  public void test21()  throws Throwable  {
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[2];
      Scope scope1 = new Scope(scope0, stringArray0);
      Frame frame0 = new Frame(scope1, stringArray0, 4276);
      LexicalFrame lexicalFrame0 = new LexicalFrame(frame0, (LexicalFrame) null);
      lexicalFrame0.defineSymbol(1, true);
      boolean boolean0 = lexicalFrame0.defineSymbol(0, true);
}"
3338,"    public boolean defineSymbol(final int symbol, final boolean capture) {
        final boolean declared = addSymbol(symbol);
        if (declared && capture) {
            if (stack == null) {
                stack = new ArrayDeque<>();
            }
            stack.push(symbol);
            Object value = frame.get(symbol);
            if (value == null) {
                value = this;
            }
            stack.push(value);
        }
        return declared;
    }","  public void test22()  throws Throwable  {
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[7];
      Frame frame0 = new Frame(scope0, stringArray0, 106);
      LexicalFrame lexicalFrame0 = new LexicalFrame(frame0, (LexicalFrame) null);
      boolean boolean0 = lexicalFrame0.defineSymbol(106, false);
}"
3339,"    public boolean defineSymbol(final int symbol, final boolean capture) {
        final boolean declared = addSymbol(symbol);
        if (declared && capture) {
            if (stack == null) {
                stack = new ArrayDeque<>();
            }
            stack.push(symbol);
            Object value = frame.get(symbol);
            if (value == null) {
                value = this;
            }
            stack.push(value);
        }
        return declared;
    }","  public void test23()  throws Throwable  {
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[7];
      Frame frame0 = new Frame(scope0, stringArray0, 106);
      LexicalFrame lexicalFrame0 = new LexicalFrame(frame0, (LexicalFrame) null);
      boolean boolean0 = lexicalFrame0.defineSymbol(106, false);
      boolean boolean1 = lexicalFrame0.defineSymbol(106, true);
}"
3340,"    public LexicalFrame(final Frame scriptf, final LexicalFrame outerf) {
        this.previous = outerf;
        this.frame = scriptf;
    }","  public void test24()  throws Throwable  {
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[23];
      Scope scope1 = new Scope(scope0, stringArray0);
      Frame frame0 = new Frame(scope1, stringArray0, 127);
      LexicalFrame lexicalFrame0 = new LexicalFrame(frame0, (LexicalFrame) null);
      LexicalFrame lexicalFrame1 = new LexicalFrame(lexicalFrame0);
}"
3341,"    public LexicalFrame defineArgs() {
        if (frame != null) {
            final int argc = frame.getScope().getArgCount();
            for (int a = 0; a < argc; ++a) {
                super.addSymbol(a);
            }
        }
        return this;
    }","  public void test25()  throws Throwable  {
      LexicalFrame lexicalFrame0 = new LexicalFrame((Frame) null, (LexicalFrame) null);
      LexicalFrame lexicalFrame1 = lexicalFrame0.defineArgs();
}"
3342,"    protected Object visitNode(final JexlNode node, final Object data) {
        return node.childrenAccept(this, data);
    }","  public void test0()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      ASTWhileStatement aSTWhileStatement0 = new ASTWhileStatement((-2047));
      Object object0 = scriptVisitor0.visitNode(aSTWhileStatement0, (Object) null);
}"
3343,"    protected Object visitNode(final JexlNode node, final Object data) {
        return node.childrenAccept(this, data);
    }","  public void test1()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      ASTNRNode aSTNRNode0 = new ASTNRNode(0);
      ASTNRNode aSTNRNode1 = (ASTNRNode)scriptVisitor0.visitNode(aSTNRNode0, aSTNRNode0);
}"
3344,"    public Object visitExpression (final JexlExpression jscript, final Object data) {
        if (jscript instanceof Script) {
            return ((Script) jscript).getScript().jjtAccept(this, data);
        }
        return null;
    }","  public void test2()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      Engine engine0 = new Engine();
      JexlInfo jexlInfo0 = new JexlInfo();
      String[] stringArray0 = new String[0];
      Script script0 = engine0.createScript(engine0.DEFAULT_FEATURES, jexlInfo0, """", stringArray0);
      Closure closure0 = new Closure(script0, stringArray0);
      Object object0 = scriptVisitor0.visitExpression(closure0, closure0);
}"
3345,"    protected Object visit(final ASTJexlScript node, final Object data) {
        return visitNode(node, data);
    }","  public void test3()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      ASTWhileStatement aSTWhileStatement0 = new ASTWhileStatement((-2047));
      Object object0 = scriptVisitor0.visit(aSTWhileStatement0, (Object) null);
}"
3346,"    protected Object visit(final ASTJexlScript node, final Object data) {
        return visitNode(node, data);
    }","  public void test4()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      ASTVar aSTVar0 = new ASTVar(31);
      Object object0 = scriptVisitor0.visit(aSTVar0, (Object) null);
}"
3347,"    protected Object visit(final ASTJexlScript node, final Object data) {
        return visitNode(node, data);
    }","  public void test5()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      Parser parser0 = new Parser(""tVGb"");
      ASTUnaryPlusNode aSTUnaryPlusNode0 = new ASTUnaryPlusNode(parser0, (-896));
      Object object0 = scriptVisitor0.visit(aSTUnaryPlusNode0, (Object) null);
}"
3348,"    protected Object visit(final ASTJexlScript node, final Object data) {
        return visitNode(node, data);
    }","  public void test6()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      ASTUnaryPlusNode aSTUnaryPlusNode0 = new ASTUnaryPlusNode((-478));
      Integer integer0 = new Integer((-478));
      Object object0 = scriptVisitor0.visit(aSTUnaryPlusNode0, integer0);
}"
3349,"    protected Object visit(final ASTJexlScript node, final Object data) {
        return visitNode(node, data);
    }","  public void test7()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      ASTUnaryMinusNode aSTUnaryMinusNode0 = new ASTUnaryMinusNode(0);
      Object object0 = scriptVisitor0.visit(aSTUnaryMinusNode0, (Object) null);
}"
3350,"    protected Object visit(final ASTJexlScript node, final Object data) {
        return visitNode(node, data);
    }","  public void test8()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      ASTTrueNode aSTTrueNode0 = new ASTTrueNode((-287));
      Object object0 = scriptVisitor0.visit(aSTTrueNode0, (Object) null);
}"
3351,"    protected Object visit(final ASTJexlScript node, final Object data) {
        return visitNode(node, data);
    }","  public void test9()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      Parser parser0 = new Parser("""");
      ASTTernaryNode aSTTernaryNode0 = new ASTTernaryNode(parser0, 3947);
      Object object0 = scriptVisitor0.visit(aSTTernaryNode0, (Object) null);
}"
3352,"    protected Object visit(final ASTJexlScript node, final Object data) {
        return visitNode(node, data);
    }","  public void test10()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      ASTSubNode aSTSubNode0 = new ASTSubNode(0);
      Object object0 = scriptVisitor0.visit(aSTSubNode0, (Object) null);
}"
3353,"    protected Object visit(final ASTJexlScript node, final Object data) {
        return visitNode(node, data);
    }","  public void test11()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      ASTStringLiteral aSTStringLiteral0 = mock(ASTStringLiteral.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(aSTStringLiteral0).childrenAccept(any(org.apache.commons.jexl3.parser.ParserVisitor.class) , any());
      Object object0 = scriptVisitor0.visit(aSTStringLiteral0, engine0);
}"
3354,"    protected Object visit(final ASTJexlScript node, final Object data) {
        return visitNode(node, data);
    }","  public void test12()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      ASTSizeFunction aSTSizeFunction0 = new ASTSizeFunction(0);
      ASTSizeFunction aSTSizeFunction1 = (ASTSizeFunction)scriptVisitor0.visit(aSTSizeFunction0, aSTSizeFunction0);
}"
3355,"    protected Object visit(final ASTJexlScript node, final Object data) {
        return visitNode(node, data);
    }","  public void test13()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      ASTSetXorNode aSTSetXorNode0 = new ASTSetXorNode((Parser) null, (-2524));
      Object object0 = scriptVisitor0.visit(aSTSetXorNode0, (Object) null);
}"
3356,"    protected Object visit(final ASTJexlScript node, final Object data) {
        return visitNode(node, data);
    }","  public void test14()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      Engine engine0 = new Engine();
      Parser parser0 = engine0.parser;
      ASTSetSubNode aSTSetSubNode0 = new ASTSetSubNode(parser0, 1540);
      Object object0 = scriptVisitor0.visit(aSTSetSubNode0, (Object) null);
}"
3357,"    protected Object visit(final ASTJexlScript node, final Object data) {
        return visitNode(node, data);
    }","  public void test15()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      Parser parser0 = new Parser(""t5=I*`jf"");
      ASTSetOrNode aSTSetOrNode0 = new ASTSetOrNode(parser0, 72);
      Object object0 = scriptVisitor0.visit(aSTSetOrNode0, (Object) null);
}"
3358,"    protected Object visit(final ASTJexlScript node, final Object data) {
        return visitNode(node, data);
    }","  public void test16()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      ASTSetMultNode aSTSetMultNode0 = new ASTSetMultNode(17);
      Object object0 = scriptVisitor0.visit(aSTSetMultNode0, (Object) null);
}"
3359,"    protected Object visit(final ASTJexlScript node, final Object data) {
        return visitNode(node, data);
    }","  public void test17()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      ASTSetModNode aSTSetModNode0 = new ASTSetModNode(1948);
      Object object0 = scriptVisitor0.visit(aSTSetModNode0, (Object) null);
}"
3360,"    protected Object visit(final ASTJexlScript node, final Object data) {
        return visitNode(node, data);
    }","  public void test18()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      Integer integer0 = new Integer(611);
      ASTSetLiteral aSTSetLiteral0 = mock(ASTSetLiteral.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(aSTSetLiteral0).childrenAccept(any(org.apache.commons.jexl3.parser.ParserVisitor.class) , any());
      Object object0 = scriptVisitor0.visit(aSTSetLiteral0, integer0);
}"
3361,"    protected Object visit(final ASTJexlScript node, final Object data) {
        return visitNode(node, data);
    }","  public void test19()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      Parser parser0 = engine0.parser;
      ASTSetDivNode aSTSetDivNode0 = new ASTSetDivNode(parser0, 102);
      Object object0 = scriptVisitor0.visit(aSTSetDivNode0, (Object) null);
}"
3362,"    protected Object visit(final ASTJexlScript node, final Object data) {
        return visitNode(node, data);
    }","  public void test20()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      Parser parser0 = new Parser(""2LYmwns?1z=-]nN?"");
      ASTSetAndNode aSTSetAndNode0 = new ASTSetAndNode(parser0, 77);
      Object object0 = scriptVisitor0.visit(aSTSetAndNode0, ""2LYmwns?1z=-]nN?"");
}"
3363,"    protected Object visit(final ASTJexlScript node, final Object data) {
        return visitNode(node, data);
    }","  public void test21()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      ASTSetAddNode aSTSetAddNode0 = new ASTSetAddNode((-2289));
      Object object0 = scriptVisitor0.visit(aSTSetAddNode0, (Object) null);
}"
3364,"    protected Object visit(final ASTJexlScript node, final Object data) {
        return visitNode(node, data);
    }","  public void test22()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      ASTSWNode aSTSWNode0 = new ASTSWNode((-3833));
      Object object0 = scriptVisitor0.visit(aSTSWNode0, (Object) null);
}"
3365,"    protected Object visit(final ASTJexlScript node, final Object data) {
        return visitNode(node, data);
    }","  public void test23()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      ASTReturnStatement aSTReturnStatement0 = new ASTReturnStatement((-2147483647));
      Object object0 = scriptVisitor0.visit(aSTReturnStatement0, (Object) null);
}"
3366,"    protected Object visit(final ASTJexlScript node, final Object data) {
        return visitNode(node, data);
    }","  public void test24()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      StringReader stringReader0 = new StringReader("""");
      StreamProvider streamProvider0 = new StreamProvider(stringReader0);
      Parser parser0 = new Parser(streamProvider0);
      ASTReturnStatement aSTReturnStatement0 = new ASTReturnStatement(parser0, (-825));
      Object object0 = scriptVisitor0.visit(aSTReturnStatement0, streamProvider0);
}"
3367,"    protected Object visit(final ASTJexlScript node, final Object data) {
        return visitNode(node, data);
    }","  public void test25()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      Integer integer0 = Integer.valueOf(38);
      ASTRegexLiteral aSTRegexLiteral0 = mock(ASTRegexLiteral.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(aSTRegexLiteral0).childrenAccept(any(org.apache.commons.jexl3.parser.ParserVisitor.class) , any());
      Object object0 = scriptVisitor0.visit(aSTRegexLiteral0, integer0);
}"
3368,"    protected Object visit(final ASTJexlScript node, final Object data) {
        return visitNode(node, data);
    }","  public void test26()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      ASTReferenceExpression aSTReferenceExpression0 = mock(ASTReferenceExpression.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(aSTReferenceExpression0).childrenAccept(any(org.apache.commons.jexl3.parser.ParserVisitor.class) , any());
      Object object0 = scriptVisitor0.visit(aSTReferenceExpression0, ""B"");
}"
3369,"    protected Object visit(final ASTJexlScript node, final Object data) {
        return visitNode(node, data);
    }","  public void test27()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      ASTReference aSTReference0 = new ASTReference(0);
      Object object0 = scriptVisitor0.visit(aSTReference0, (Object) null);
}"
3370,"    protected Object visit(final ASTJexlScript node, final Object data) {
        return visitNode(node, data);
    }","  public void test28()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      ASTReference aSTReference0 = new ASTReference(0);
      ASTReference aSTReference1 = (ASTReference)scriptVisitor0.visit(aSTReference0, aSTReference0);
}"
3371,"    protected Object visit(final ASTJexlScript node, final Object data) {
        return visitNode(node, data);
    }","  public void test29()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      ASTRangeNode aSTRangeNode0 = new ASTRangeNode(2051);
      Object object0 = scriptVisitor0.visit(aSTRangeNode0, (Object) null);
}"
3372,"    protected Object visit(final ASTJexlScript node, final Object data) {
        return visitNode(node, data);
    }","  public void test30()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      Parser parser0 = new Parser(""t5=I*`jf"");
      ASTOrNode aSTOrNode0 = new ASTOrNode(parser0, 72);
      Object object0 = scriptVisitor0.visit(aSTOrNode0, (Object) null);
}"
3373,"    protected Object visit(final ASTJexlScript node, final Object data) {
        return visitNode(node, data);
    }","  public void test31()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      Engine engine0 = new Engine();
      Parser parser0 = engine0.parser;
      ASTSetMultNode aSTSetMultNode0 = new ASTSetMultNode(parser0, 332);
      ASTOrNode aSTOrNode0 = new ASTOrNode(parser0, (-1));
      ASTSetMultNode aSTSetMultNode1 = (ASTSetMultNode)scriptVisitor0.visit(aSTOrNode0, aSTSetMultNode0);
}"
3374,"    protected Object visit(final ASTJexlScript node, final Object data) {
        return visitNode(node, data);
    }","  public void test32()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      ASTNumberLiteral aSTNumberLiteral0 = mock(ASTNumberLiteral.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(aSTNumberLiteral0).childrenAccept(any(org.apache.commons.jexl3.parser.ParserVisitor.class) , any());
      Integer integer0 = new Integer(0);
      Object object0 = scriptVisitor0.visit(aSTNumberLiteral0, integer0);
}"
3375,"    protected Object visit(final ASTJexlScript node, final Object data) {
        return visitNode(node, data);
    }","  public void test33()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      StringProvider stringProvider0 = new StringProvider(""B"");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringProvider0, 1356, 984, 1356);
      ASTNumberLiteral aSTNumberLiteral0 = mock(ASTNumberLiteral.class, new ViolatedAssumptionAnswer());
      doReturn(simpleCharStream0.DEFAULT_BUF_SIZE).when(aSTNumberLiteral0).childrenAccept(any(org.apache.commons.jexl3.parser.ParserVisitor.class) , any());
      Object object0 = scriptVisitor0.visit(aSTNumberLiteral0, ""ibx^%?%Gs|GxJcImH"");
}"
3376,"    protected Object visit(final ASTJexlScript node, final Object data) {
        return visitNode(node, data);
    }","  public void test34()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      Engine engine0 = new Engine();
      Parser parser0 = engine0.parser;
      ASTNullpNode aSTNullpNode0 = new ASTNullpNode(parser0, 1);
      Object object0 = scriptVisitor0.visit(aSTNullpNode0, (Object) null);
}"
3377,"    protected Object visit(final ASTJexlScript node, final Object data) {
        return visitNode(node, data);
    }","  public void test35()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      ASTNullLiteral aSTNullLiteral0 = new ASTNullLiteral(7);
      Object object0 = scriptVisitor0.visit(aSTNullLiteral0, (Object) null);
}"
3378,"    protected Object visit(final ASTJexlScript node, final Object data) {
        return visitNode(node, data);
    }","  public void test36()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      ASTNotNode aSTNotNode0 = new ASTNotNode((Parser) null, 2608);
      Object object0 = scriptVisitor0.visit(aSTNotNode0, (Object) null);
}"
3379,"    protected Object visit(final ASTJexlScript node, final Object data) {
        return visitNode(node, data);
    }","  public void test37()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      ASTNSWNode aSTNSWNode0 = new ASTNSWNode((-2374));
      ASTNSWNode aSTNSWNode1 = (ASTNSWNode)scriptVisitor0.visit(aSTNSWNode0, aSTNSWNode0);
}"
3380,"    protected Object visit(final ASTJexlScript node, final Object data) {
        return visitNode(node, data);
    }","  public void test38()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      ASTNRNode aSTNRNode0 = new ASTNRNode(0);
      Object object0 = scriptVisitor0.visit(aSTNRNode0, (Object) null);
}"
3381,"    protected Object visit(final ASTJexlScript node, final Object data) {
        return visitNode(node, data);
    }","  public void test39()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      ASTNEWNode aSTNEWNode0 = new ASTNEWNode(0);
      Object object0 = scriptVisitor0.visit(aSTNEWNode0, (Object) null);
}"
3382,"    protected Object visit(final ASTJexlScript node, final Object data) {
        return visitNode(node, data);
    }","  public void test40()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      ASTNENode aSTNENode0 = new ASTNENode((-1));
      Object object0 = scriptVisitor0.visit(aSTNENode0, (Object) null);
}"
3383,"    protected Object visit(final ASTJexlScript node, final Object data) {
        return visitNode(node, data);
    }","  public void test41()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      ASTMulNode aSTMulNode0 = new ASTMulNode(10);
      Object object0 = scriptVisitor0.visit(aSTMulNode0, (Object) null);
}"
3384,"    protected Object visit(final ASTJexlScript node, final Object data) {
        return visitNode(node, data);
    }","  public void test42()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      ASTModNode aSTModNode0 = new ASTModNode((-2173));
      Object object0 = scriptVisitor0.visit(aSTModNode0, (Object) null);
}"
3385,"    protected Object visit(final ASTJexlScript node, final Object data) {
        return visitNode(node, data);
    }","  public void test43()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      ASTModNode aSTModNode0 = new ASTModNode((-1));
      ASTModNode aSTModNode1 = (ASTModNode)scriptVisitor0.visit(aSTModNode0, aSTModNode0);
}"
3386,"    protected Object visit(final ASTJexlScript node, final Object data) {
        return visitNode(node, data);
    }","  public void test44()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      Parser parser0 = new Parser(""tVGb"");
      ASTUnaryPlusNode aSTUnaryPlusNode0 = new ASTUnaryPlusNode(parser0, (-896));
      ASTMethodNode aSTMethodNode0 = new ASTMethodNode(parser0, 767);
      ASTUnaryPlusNode aSTUnaryPlusNode1 = (ASTUnaryPlusNode)scriptVisitor0.visit(aSTMethodNode0, aSTUnaryPlusNode0);
}"
3387,"    protected Object visit(final ASTJexlScript node, final Object data) {
        return visitNode(node, data);
    }","  public void test45()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      ASTMapLiteral aSTMapLiteral0 = mock(ASTMapLiteral.class, new ViolatedAssumptionAnswer());
      doReturn(scriptVisitor0).when(aSTMapLiteral0).childrenAccept(any(org.apache.commons.jexl3.parser.ParserVisitor.class) , any());
      Object object0 = scriptVisitor0.visit(aSTMapLiteral0, (Object) null);
}"
3388,"    protected Object visit(final ASTJexlScript node, final Object data) {
        return visitNode(node, data);
    }","  public void test46()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      Parser parser0 = new Parser(""tVGb"");
      ASTMapEntry aSTMapEntry0 = new ASTMapEntry(parser0, 425);
      Object object0 = scriptVisitor0.visit(aSTMapEntry0, (Object) null);
}"
3389,"    protected Object visit(final ASTJexlScript node, final Object data) {
        return visitNode(node, data);
    }","  public void test47()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      ASTLTNode aSTLTNode0 = new ASTLTNode(943);
      Object object0 = scriptVisitor0.visit(aSTLTNode0, (Object) null);
}"
3390,"    protected Object visit(final ASTJexlScript node, final Object data) {
        return visitNode(node, data);
    }","  public void test48()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      byte[] byteArray0 = new byte[4];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-41), (byte) (-41));
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      Charset charset0 = Charset.defaultCharset();
      StreamProvider streamProvider0 = new StreamProvider(dataInputStream0, charset0);
      Parser parser0 = new Parser(streamProvider0);
      ASTLTNode aSTLTNode0 = new ASTLTNode(parser0, (byte)101);
      Parser parser1 = (Parser)scriptVisitor0.visit(aSTLTNode0, parser0);
}"
3391,"    protected Object visit(final ASTJexlScript node, final Object data) {
        return visitNode(node, data);
    }","  public void test49()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      ASTDivNode aSTDivNode0 = new ASTDivNode(346);
      ASTLENode aSTLENode0 = new ASTLENode(346);
      ASTDivNode aSTDivNode1 = (ASTDivNode)scriptVisitor0.visit(aSTLENode0, aSTDivNode0);
}"
3392,"    protected Object visit(final ASTJexlScript node, final Object data) {
        return visitNode(node, data);
    }","  public void test50()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      ASTJxltLiteral aSTJxltLiteral0 = mock(ASTJxltLiteral.class, new ViolatedAssumptionAnswer());
      doReturn(scriptVisitor0).when(aSTJxltLiteral0).childrenAccept(any(org.apache.commons.jexl3.parser.ParserVisitor.class) , any());
      Object object0 = scriptVisitor0.visit(aSTJxltLiteral0, aSTJxltLiteral0);
}"
3393,"    protected Object visit(final ASTJexlScript node, final Object data) {
        return visitNode(node, data);
    }","  public void test51()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      Parser parser0 = new Parser(""sO<0%+@"");
      JexlFeatures jexlFeatures0 = JexlEngine.DEFAULT_FEATURES;
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[9];
      Scope scope1 = new Scope(scope0, stringArray0);
      ASTJexlScript aSTJexlScript0 = parser0.parse((JexlInfo) null, jexlFeatures0, ""sO<0%+@"", scope1);
      Object object0 = scriptVisitor0.visit(aSTJexlScript0, stringArray0[4]);
}"
3394,"    protected Object visit(final ASTJexlScript node, final Object data) {
        return visitNode(node, data);
    }","  public void test52()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      Parser parser0 = new Parser(""sO<0%+@"");
      JexlFeatures jexlFeatures0 = JexlEngine.DEFAULT_FEATURES;
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[9];
      Scope scope1 = new Scope(scope0, stringArray0);
      ASTJexlScript aSTJexlScript0 = parser0.parse((JexlInfo) null, jexlFeatures0, ""sO<0%+@"", scope1);
      Object object0 = scriptVisitor0.visit(aSTJexlScript0, ""sO<0%+@"");
}"
3395,"    protected Object visit(final ASTJexlScript node, final Object data) {
        return visitNode(node, data);
    }","  public void test53()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      Parser parser0 = new Parser(""t5=I*`jf"");
      ASTIfStatement aSTIfStatement0 = new ASTIfStatement(parser0, 0);
      Object object0 = scriptVisitor0.visit(aSTIfStatement0, (Object) null);
}"
3396,"    protected Object visit(final ASTJexlScript node, final Object data) {
        return visitNode(node, data);
    }","  public void test54()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      Engine engine0 = new Engine();
      Parser parser0 = engine0.parser;
      ASTSetMultNode aSTSetMultNode0 = new ASTSetMultNode(parser0, 332);
      ASTIfStatement aSTIfStatement0 = new ASTIfStatement(parser0, 332);
      ASTSetMultNode aSTSetMultNode1 = (ASTSetMultNode)scriptVisitor0.visit(aSTIfStatement0, aSTSetMultNode0);
}"
3397,"    protected Object visit(final ASTJexlScript node, final Object data) {
        return visitNode(node, data);
    }","  public void test55()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      ASTIdentifierAccess aSTIdentifierAccess0 = mock(ASTIdentifierAccess.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(aSTIdentifierAccess0).childrenAccept(any(org.apache.commons.jexl3.parser.ParserVisitor.class) , any());
      Object object0 = scriptVisitor0.visit(aSTIdentifierAccess0, aSTIdentifierAccess0);
}"
3398,"    protected Object visit(final ASTJexlScript node, final Object data) {
        return visitNode(node, data);
    }","  public void test56()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      ASTVar aSTVar0 = new ASTVar(0);
      Object object0 = scriptVisitor0.visit(aSTVar0, (Object) null);
}"
3399,"    protected Object visit(final ASTJexlScript node, final Object data) {
        return visitNode(node, data);
    }","  public void test57()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      ASTNamespaceIdentifier aSTNamespaceIdentifier0 = new ASTNamespaceIdentifier(1005);
      Engine engine0 = new Engine();
      JexlInfo jexlInfo0 = new JexlInfo();
      Script script0 = engine0.createExpression(jexlInfo0, ""tjZr"");
      Object[] objectArray0 = new Object[0];
      Closure closure0 = new Closure(script0, objectArray0);
      Object object0 = scriptVisitor0.visit(aSTNamespaceIdentifier0, closure0);
}"
3400,"    protected Object visit(final ASTJexlScript node, final Object data) {
        return visitNode(node, data);
    }","  public void test58()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      ASTGTNode aSTGTNode0 = new ASTGTNode((Parser) null, (-2870));
      Object object0 = scriptVisitor0.visit(aSTGTNode0, (Object) null);
}"
3401,"    protected Object visit(final ASTJexlScript node, final Object data) {
        return visitNode(node, data);
    }","  public void test59()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      Engine engine0 = new Engine();
      Parser parser0 = engine0.parser;
      ASTGENode aSTGENode0 = new ASTGENode(parser0, (-2289));
      Object object0 = scriptVisitor0.visit(aSTGENode0, (Object) null);
}"
3402,"    protected Object visit(final ASTJexlScript node, final Object data) {
        return visitNode(node, data);
    }","  public void test60()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      Engine engine0 = new Engine();
      Parser parser0 = engine0.parser;
      ASTFunctionNode aSTFunctionNode0 = new ASTFunctionNode(parser0, (-2439));
      Object object0 = scriptVisitor0.visit(aSTFunctionNode0, (Object) null);
}"
3403,"    protected Object visit(final ASTJexlScript node, final Object data) {
        return visitNode(node, data);
    }","  public void test61()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      ASTFunctionNode aSTFunctionNode0 = new ASTFunctionNode((-2454));
      Object object0 = scriptVisitor0.visit(aSTFunctionNode0, ""' is undefined"");
}"
3404,"    protected Object visit(final ASTJexlScript node, final Object data) {
        return visitNode(node, data);
    }","  public void test62()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      ASTForeachStatement aSTForeachStatement0 = new ASTForeachStatement((-1));
      Object object0 = scriptVisitor0.visit(aSTForeachStatement0, ""!@9K"");
}"
3405,"    protected Object visit(final ASTJexlScript node, final Object data) {
        return visitNode(node, data);
    }","  public void test63()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      ASTFalseNode aSTFalseNode0 = new ASTFalseNode((Parser) null, (-1631));
      Object object0 = scriptVisitor0.visit(aSTFalseNode0, (Object) null);
}"
3406,"    protected Object visit(final ASTJexlScript node, final Object data) {
        return visitNode(node, data);
    }","  public void test64()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      Parser parser0 = new Parser(""t5=I*`jf"");
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      ASTFalseNode aSTFalseNode0 = new ASTFalseNode(parser0, 72);
      JexlBuilder jexlBuilder1 = (JexlBuilder)scriptVisitor0.visit(aSTFalseNode0, jexlBuilder0);
}"
3407,"    protected Object visit(final ASTJexlScript node, final Object data) {
        return visitNode(node, data);
    }","  public void test65()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      ASTExtendedLiteral aSTExtendedLiteral0 = new ASTExtendedLiteral(834);
      Object object0 = scriptVisitor0.visit(aSTExtendedLiteral0, (Object) null);
}"
3408,"    protected Object visit(final ASTJexlScript node, final Object data) {
        return visitNode(node, data);
    }","  public void test66()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      ASTEmptyFunction aSTEmptyFunction0 = new ASTEmptyFunction((-2047));
      Object object0 = scriptVisitor0.visit(aSTEmptyFunction0, (Object) null);
}"
3409,"    protected Object visit(final ASTJexlScript node, final Object data) {
        return visitNode(node, data);
    }","  public void test67()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      Object object0 = new Object();
      ASTEmptyFunction aSTEmptyFunction0 = new ASTEmptyFunction((-2047));
      Object object1 = scriptVisitor0.visit(aSTEmptyFunction0, object0);
}"
3410,"    protected Object visit(final ASTJexlScript node, final Object data) {
        return visitNode(node, data);
    }","  public void test68()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      StringReader stringReader0 = new StringReader("""");
      StreamProvider streamProvider0 = new StreamProvider(stringReader0);
      Parser parser0 = new Parser(streamProvider0);
      ASTEWNode aSTEWNode0 = new ASTEWNode(parser0, (-1289));
      Object object0 = scriptVisitor0.visit(aSTEWNode0, (Object) null);
}"
3411,"    protected Object visit(final ASTJexlScript node, final Object data) {
        return visitNode(node, data);
    }","  public void test69()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      ASTEWNode aSTEWNode0 = new ASTEWNode(68);
      Object object0 = scriptVisitor0.visit(aSTEWNode0, ""?N;t\""c_`)\""a3"");
}"
3412,"    protected Object visit(final ASTJexlScript node, final Object data) {
        return visitNode(node, data);
    }","  public void test70()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      ASTERNode aSTERNode0 = new ASTERNode((-2439));
      Object object0 = scriptVisitor0.visit(aSTERNode0, (Object) null);
}"
3413,"    protected Object visit(final ASTJexlScript node, final Object data) {
        return visitNode(node, data);
    }","  public void test71()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      ASTERNode aSTERNode0 = new ASTERNode(2252);
      ASTERNode aSTERNode1 = (ASTERNode)scriptVisitor0.visit(aSTERNode0, aSTERNode0);
}"
3414,"    protected Object visit(final ASTJexlScript node, final Object data) {
        return visitNode(node, data);
    }","  public void test72()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      ASTEQNode aSTEQNode0 = new ASTEQNode((-1));
      Object object0 = scriptVisitor0.visit(aSTEQNode0, (Object) null);
}"
3415,"    protected Object visit(final ASTJexlScript node, final Object data) {
        return visitNode(node, data);
    }","  public void test73()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      ASTDoWhileStatement aSTDoWhileStatement0 = new ASTDoWhileStatement(36);
      Object object0 = new Object();
      Object object1 = scriptVisitor0.visit(aSTDoWhileStatement0, object0);
}"
3416,"    protected Object visit(final ASTJexlScript node, final Object data) {
        return visitNode(node, data);
    }","  public void test74()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      ASTDivNode aSTDivNode0 = new ASTDivNode(0);
      ASTDivNode aSTDivNode1 = (ASTDivNode)scriptVisitor0.visit(aSTDivNode0, aSTDivNode0);
}"
3417,"    protected Object visit(final ASTJexlScript node, final Object data) {
        return visitNode(node, data);
    }","  public void test75()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      Engine engine0 = new Engine();
      Parser parser0 = engine0.parser;
      ASTContinue aSTContinue0 = new ASTContinue(parser0, 1123);
      Object object0 = scriptVisitor0.visit(aSTContinue0, (Object) null);
}"
3418,"    protected Object visit(final ASTJexlScript node, final Object data) {
        return visitNode(node, data);
    }","  public void test76()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      ASTConstructorNode aSTConstructorNode0 = new ASTConstructorNode((-2289));
      Object object0 = scriptVisitor0.visit(aSTConstructorNode0, (Object) null);
}"
3419,"    protected Object visit(final ASTJexlScript node, final Object data) {
        return visitNode(node, data);
    }","  public void test77()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      ASTBreak aSTBreak0 = new ASTBreak((-1));
      Object object0 = scriptVisitor0.visit(aSTBreak0, (Object) null);
}"
3420,"    protected Object visit(final ASTJexlScript node, final Object data) {
        return visitNode(node, data);
    }","  public void test78()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      StringProvider stringProvider0 = new StringProvider("""");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringProvider0, 1356, 984, 1356);
      ParserTokenManager parserTokenManager0 = new ParserTokenManager(simpleCharStream0);
      Parser parser0 = new Parser(parserTokenManager0);
      ASTBlock aSTBlock0 = new ASTBlock(parser0, (-620));
      Object object0 = scriptVisitor0.visit(aSTBlock0, (Object) null);
}"
3421,"    protected Object visit(final ASTJexlScript node, final Object data) {
        return visitNode(node, data);
    }","  public void test79()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      ASTBitwiseXorNode aSTBitwiseXorNode0 = new ASTBitwiseXorNode(1);
      Object object0 = scriptVisitor0.visit(aSTBitwiseXorNode0, (Object) null);
}"
3422,"    protected Object visit(final ASTJexlScript node, final Object data) {
        return visitNode(node, data);
    }","  public void test80()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      ASTBitwiseOrNode aSTBitwiseOrNode0 = new ASTBitwiseOrNode((-431));
      Object object0 = scriptVisitor0.visit(aSTBitwiseOrNode0, (Object) null);
}"
3423,"    protected Object visit(final ASTJexlScript node, final Object data) {
        return visitNode(node, data);
    }","  public void test81()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      JexlFeatures jexlFeatures0 = JexlEngine.DEFAULT_FEATURES;
      ASTBitwiseOrNode aSTBitwiseOrNode0 = new ASTBitwiseOrNode((-1));
      Object object0 = scriptVisitor0.visit(aSTBitwiseOrNode0, jexlFeatures0.NEW_INSTANCE);
}"
3424,"    protected Object visit(final ASTJexlScript node, final Object data) {
        return visitNode(node, data);
    }","  public void test82()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      ASTBitwiseComplNode aSTBitwiseComplNode0 = new ASTBitwiseComplNode((Parser) null, 0);
      Object object0 = scriptVisitor0.visit(aSTBitwiseComplNode0, (Object) null);
}"
3425,"    protected Object visit(final ASTJexlScript node, final Object data) {
        return visitNode(node, data);
    }","  public void test83()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      ASTBitwiseAndNode aSTBitwiseAndNode0 = new ASTBitwiseAndNode(555);
      Object object0 = scriptVisitor0.visit(aSTBitwiseAndNode0, (Object) null);
}"
3426,"    protected Object visit(final ASTJexlScript node, final Object data) {
        return visitNode(node, data);
    }","  public void test84()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      Parser parser0 = new Parser("""");
      ASTAssignment aSTAssignment0 = new ASTAssignment(parser0, 5);
      ASTAssignment aSTAssignment1 = (ASTAssignment)scriptVisitor0.visit(aSTAssignment0, aSTAssignment0);
}"
3427,"    protected Object visit(final ASTJexlScript node, final Object data) {
        return visitNode(node, data);
    }","  public void test85()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      ASTArrayLiteral aSTArrayLiteral0 = mock(ASTArrayLiteral.class, new ViolatedAssumptionAnswer());
      doReturn(scriptVisitor0).when(aSTArrayLiteral0).childrenAccept(any(org.apache.commons.jexl3.parser.ParserVisitor.class) , any());
      Integer integer0 = Integer.valueOf(38);
      Object object0 = scriptVisitor0.visit(aSTArrayLiteral0, integer0);
}"
3428,"    protected Object visit(final ASTJexlScript node, final Object data) {
        return visitNode(node, data);
    }","  public void test86()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      Parser parser0 = engine0.parser;
      ASTArrayAccess aSTArrayAccess0 = new ASTArrayAccess(parser0, 103);
      Object object0 = scriptVisitor0.visit(aSTArrayAccess0, (Object) null);
}"
3429,"    protected Object visit(final ASTJexlScript node, final Object data) {
        return visitNode(node, data);
    }","  public void test87()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      Parser parser0 = new Parser(""sO<0%+@"");
      ASTArguments aSTArguments0 = new ASTArguments(parser0, 2387);
      Object object0 = scriptVisitor0.visit(aSTArguments0, (Object) null);
}"
3430,"    protected Object visit(final ASTJexlScript node, final Object data) {
        return visitNode(node, data);
    }","  public void test88()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      ASTArguments aSTArguments0 = new ASTArguments(1540);
      Object object0 = scriptVisitor0.visit(aSTArguments0, ""Ko?r>)5>vIF Ve"");
}"
3431,"    protected Object visit(final ASTJexlScript node, final Object data) {
        return visitNode(node, data);
    }","  public void test89()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      Engine engine0 = new Engine();
      ASTAnnotation aSTAnnotation0 = mock(ASTAnnotation.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(aSTAnnotation0).childrenAccept(any(org.apache.commons.jexl3.parser.ParserVisitor.class) , any());
      Object object0 = scriptVisitor0.visit(aSTAnnotation0, engine0);
}"
3432,"    protected Object visit(final ASTJexlScript node, final Object data) {
        return visitNode(node, data);
    }","  public void test90()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      ASTAnnotatedStatement aSTAnnotatedStatement0 = new ASTAnnotatedStatement(0);
      Object object0 = scriptVisitor0.visit(aSTAnnotatedStatement0, (Object) null);
}"
3433,"    protected Object visit(final ASTJexlScript node, final Object data) {
        return visitNode(node, data);
    }","  public void test91()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      Engine engine0 = new Engine();
      Parser parser0 = engine0.parser;
      ASTAndNode aSTAndNode0 = new ASTAndNode(parser0, 0);
      Object object0 = scriptVisitor0.visit(aSTAndNode0, (Object) null);
}"
3434,"    protected Object visit(final ASTJexlScript node, final Object data) {
        return visitNode(node, data);
    }","  public void test92()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      ASTAddNode aSTAddNode0 = new ASTAddNode(1);
      Object object0 = scriptVisitor0.visit(aSTAddNode0, (Object) null);
}"
3435,"    protected Object visitNode(final JexlNode node, final Object data) {
        return node.childrenAccept(this, data);
    }","  public void test93()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      Parser parser0 = new Parser(""t:"");
      ASTWhileStatement aSTWhileStatement0 = new ASTWhileStatement(parser0, 1675);
      aSTWhileStatement0.jjtAddChild((Node) null, 53);
      // Undeclared exception!
      try { 
        scriptVisitor0.visitNode(aSTWhileStatement0, parser0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.parser.SimpleNode"", e);
      }
  }"
3436,"    public Object visitExpression (final JexlExpression jscript, final Object data) {
        if (jscript instanceof Script) {
            return ((Script) jscript).getScript().jjtAccept(this, data);
        }
        return null;
    }","  public void test94()  throws Throwable  {
      JexlFeatures jexlFeatures0 = Engine.PROPERTY_FEATURES;
      FeatureController featureController0 = new FeatureController(jexlFeatures0);
      Engine engine0 = new Engine();
      Script script0 = new Script(engine0, ""5XPjIIopt)%+/5Hg"", (ASTJexlScript) null);
      // Undeclared exception!
      try { 
        featureController0.visitExpression(script0, """");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.internal.ScriptVisitor"", e);
      }
  }"
3437,"    protected Object visit(final ASTJexlScript node, final Object data) {
        return visitNode(node, data);
    }","  public void test95()  throws Throwable  {
      JexlFeatures jexlFeatures0 = Engine.PROPERTY_FEATURES;
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      // Undeclared exception!
      try { 
        scriptVisitor0.visit((ASTWhileStatement) null, jexlFeatures0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.internal.ScriptVisitor"", e);
      }
  }"
3438,"    protected Object visit(final ASTJexlScript node, final Object data) {
        return visitNode(node, data);
    }","  public void test96()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      Integer integer0 = new Integer((-2537));
      // Undeclared exception!
      try { 
        scriptVisitor0.visit((ASTVar) null, integer0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.internal.ScriptVisitor"", e);
      }
  }"
3439,"    protected Object visit(final ASTJexlScript node, final Object data) {
        return visitNode(node, data);
    }","  public void test97()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      ASTUnaryMinusNode aSTUnaryMinusNode0 = new ASTUnaryMinusNode(0);
      // Undeclared exception!
      try { 
        scriptVisitor0.visit((ASTUnaryPlusNode) null, aSTUnaryMinusNode0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.internal.ScriptVisitor"", e);
      }
  }"
3440,"    protected Object visit(final ASTJexlScript node, final Object data) {
        return visitNode(node, data);
    }","  public void test98()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      // Undeclared exception!
      try { 
        scriptVisitor0.visit((ASTUnaryMinusNode) null, (Object) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.internal.ScriptVisitor"", e);
      }
  }"
3441,"    protected Object visit(final ASTJexlScript node, final Object data) {
        return visitNode(node, data);
    }","  public void test99()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      ASTForeachStatement aSTForeachStatement0 = new ASTForeachStatement((-1));
      ASTTrueNode aSTTrueNode0 = new ASTTrueNode((-287));
      aSTTrueNode0.jjtAddChild(aSTForeachStatement0, 38);
      // Undeclared exception!
      try { 
        scriptVisitor0.visit(aSTTrueNode0, aSTTrueNode0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.parser.SimpleNode"", e);
      }
  }"
3442,"    protected Object visit(final ASTJexlScript node, final Object data) {
        return visitNode(node, data);
    }","  public void test100()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      Integer integer0 = new Integer(611);
      // Undeclared exception!
      try { 
        scriptVisitor0.visit((ASTTernaryNode) null, integer0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.internal.ScriptVisitor"", e);
      }
  }"
3443,"    protected Object visit(final ASTJexlScript node, final Object data) {
        return visitNode(node, data);
    }","  public void test101()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      ASTOrNode aSTOrNode0 = new ASTOrNode(0);
      // Undeclared exception!
      try { 
        scriptVisitor0.visit((ASTStringLiteral) null, aSTOrNode0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.internal.ScriptVisitor"", e);
      }
  }"
3444,"    protected Object visit(final ASTJexlScript node, final Object data) {
        return visitNode(node, data);
    }","  public void test102()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      // Undeclared exception!
      try { 
        scriptVisitor0.visit((ASTSetXorNode) null, (Object) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.internal.ScriptVisitor"", e);
      }
  }"
3445,"    protected Object visit(final ASTJexlScript node, final Object data) {
        return visitNode(node, data);
    }","  public void test103()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      // Undeclared exception!
      try { 
        scriptVisitor0.visit((ASTSetSubNode) null, (Object) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.internal.ScriptVisitor"", e);
      }
  }"
3446,"    protected Object visit(final ASTJexlScript node, final Object data) {
        return visitNode(node, data);
    }","  public void test104()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      // Undeclared exception!
      try { 
        scriptVisitor0.visit((ASTSetOrNode) null, (Object) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.internal.ScriptVisitor"", e);
      }
  }"
3447,"    protected Object visit(final ASTJexlScript node, final Object data) {
        return visitNode(node, data);
    }","  public void test105()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      Integer integer0 = Integer.valueOf(38);
      StringReader stringReader0 = new StringReader(""A~+-<M5J`|cE$Lh"");
      StreamProvider streamProvider0 = new StreamProvider(stringReader0);
      Parser parser0 = new Parser(streamProvider0);
      ASTSWNode aSTSWNode0 = new ASTSWNode(parser0, 103);
      ASTSetMultNode aSTSetMultNode0 = new ASTSetMultNode(parser0, 103);
      aSTSetMultNode0.jjtAddChild(aSTSWNode0, 2677);
      // Undeclared exception!
      try { 
        scriptVisitor0.visit(aSTSetMultNode0, integer0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.parser.SimpleNode"", e);
      }
  }"
3448,"    protected Object visit(final ASTJexlScript node, final Object data) {
        return visitNode(node, data);
    }","  public void test106()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      // Undeclared exception!
      try { 
        scriptVisitor0.visit((ASTSetModNode) null, (Object) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.internal.ScriptVisitor"", e);
      }
  }"
3449,"    protected Object visit(final ASTJexlScript node, final Object data) {
        return visitNode(node, data);
    }","  public void test107()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      // Undeclared exception!
      try { 
        scriptVisitor0.visit((ASTSetLiteral) null, ""//f"");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.internal.ScriptVisitor"", e);
      }
  }"
3450,"    protected Object visit(final ASTJexlScript node, final Object data) {
        return visitNode(node, data);
    }","  public void test108()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      // Undeclared exception!
      try { 
        scriptVisitor0.visit((ASTSetDivNode) null, (Object) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.internal.ScriptVisitor"", e);
      }
  }"
3451,"    protected Object visit(final ASTJexlScript node, final Object data) {
        return visitNode(node, data);
    }","  public void test109()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      ASTSetSubNode aSTSetSubNode0 = new ASTSetSubNode((Parser) null, 1);
      // Undeclared exception!
      try { 
        scriptVisitor0.visit((ASTSetAndNode) null, aSTSetSubNode0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.internal.ScriptVisitor"", e);
      }
  }"
3452,"    protected Object visit(final ASTJexlScript node, final Object data) {
        return visitNode(node, data);
    }","  public void test110()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      ASTNumberLiteral aSTNumberLiteral0 = mock(ASTNumberLiteral.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        scriptVisitor0.visit((ASTSetAddNode) null, aSTNumberLiteral0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.internal.ScriptVisitor"", e);
      }
  }"
3453,"    protected Object visit(final ASTJexlScript node, final Object data) {
        return visitNode(node, data);
    }","  public void test111()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      ASTTrueNode aSTTrueNode0 = new ASTTrueNode((-287));
      StringReader stringReader0 = new StringReader(""A~+-<M5J`|cE$Lh"");
      StreamProvider streamProvider0 = new StreamProvider(stringReader0);
      Parser parser0 = new Parser(streamProvider0);
      ASTSWNode aSTSWNode0 = new ASTSWNode(parser0, 103);
      aSTSWNode0.jjtAddChild(aSTTrueNode0, 38);
      // Undeclared exception!
      try { 
        scriptVisitor0.visit(aSTSWNode0, stringReader0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.parser.SimpleNode"", e);
      }
  }"
3454,"    protected Object visit(final ASTJexlScript node, final Object data) {
        return visitNode(node, data);
    }","  public void test112()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      // Undeclared exception!
      try { 
        scriptVisitor0.visit((ASTRegexLiteral) null, (Object) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.internal.ScriptVisitor"", e);
      }
  }"
3455,"    protected Object visit(final ASTJexlScript node, final Object data) {
        return visitNode(node, data);
    }","  public void test113()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      // Undeclared exception!
      try { 
        scriptVisitor0.visit((ASTReferenceExpression) null, (Object) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.internal.ScriptVisitor"", e);
      }
  }"
3456,"    protected Object visit(final ASTJexlScript node, final Object data) {
        return visitNode(node, data);
    }","  public void test114()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      ASTArrayAccess aSTArrayAccess0 = new ASTArrayAccess(38);
      // Undeclared exception!
      try { 
        scriptVisitor0.visit((ASTRangeNode) null, aSTArrayAccess0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.internal.ScriptVisitor"", e);
      }
  }"
3457,"    protected Object visit(final ASTJexlScript node, final Object data) {
        return visitNode(node, data);
    }","  public void test115()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      StringReader stringReader0 = new StringReader(""A~+-<M5J`|cE$Lh"");
      StreamProvider streamProvider0 = new StreamProvider(stringReader0);
      Parser parser0 = new Parser(streamProvider0);
      ASTSWNode aSTSWNode0 = new ASTSWNode(parser0, 103);
      // Undeclared exception!
      try { 
        scriptVisitor0.visit((ASTNumberLiteral) null, aSTSWNode0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.internal.ScriptVisitor"", e);
      }
  }"
3458,"    protected Object visit(final ASTJexlScript node, final Object data) {
        return visitNode(node, data);
    }","  public void test116()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      Parser parser0 = new Parser("""");
      ASTSetModNode aSTSetModNode0 = new ASTSetModNode(parser0, 69);
      // Undeclared exception!
      try { 
        scriptVisitor0.visit((ASTNullpNode) null, aSTSetModNode0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.internal.ScriptVisitor"", e);
      }
  }"
3459,"    protected Object visit(final ASTJexlScript node, final Object data) {
        return visitNode(node, data);
    }","  public void test117()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      // Undeclared exception!
      try { 
        scriptVisitor0.visit((ASTNullLiteral) null, ""t5=I*`jf"");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.internal.ScriptVisitor"", e);
      }
  }"
3460,"    protected Object visit(final ASTJexlScript node, final Object data) {
        return visitNode(node, data);
    }","  public void test118()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      // Undeclared exception!
      try { 
        scriptVisitor0.visit((ASTNotNode) null, scriptVisitor0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.internal.ScriptVisitor"", e);
      }
  }"
3461,"    protected Object visit(final ASTJexlScript node, final Object data) {
        return visitNode(node, data);
    }","  public void test119()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      // Undeclared exception!
      try { 
        scriptVisitor0.visit((ASTNSWNode) null, (Object) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.internal.ScriptVisitor"", e);
      }
  }"
3462,"    protected Object visit(final ASTJexlScript node, final Object data) {
        return visitNode(node, data);
    }","  public void test120()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      // Undeclared exception!
      try { 
        scriptVisitor0.visit((ASTNRNode) null, (Object) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.internal.ScriptVisitor"", e);
      }
  }"
3463,"    protected Object visit(final ASTJexlScript node, final Object data) {
        return visitNode(node, data);
    }","  public void test121()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      // Undeclared exception!
      try { 
        scriptVisitor0.visit((ASTNEWNode) null, (Object) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.internal.ScriptVisitor"", e);
      }
  }"
3464,"    protected Object visit(final ASTJexlScript node, final Object data) {
        return visitNode(node, data);
    }","  public void test122()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      ASTAddNode aSTAddNode0 = new ASTAddNode(0);
      // Undeclared exception!
      try { 
        scriptVisitor0.visit((ASTNENode) null, aSTAddNode0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.internal.ScriptVisitor"", e);
      }
  }"
3465,"    protected Object visit(final ASTJexlScript node, final Object data) {
        return visitNode(node, data);
    }","  public void test123()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      ASTDivNode aSTDivNode0 = new ASTDivNode(346);
      // Undeclared exception!
      try { 
        scriptVisitor0.visit((ASTMulNode) null, aSTDivNode0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.internal.ScriptVisitor"", e);
      }
  }"
3466,"    protected Object visit(final ASTJexlScript node, final Object data) {
        return visitNode(node, data);
    }","  public void test124()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      Integer integer0 = new Integer(0);
      // Undeclared exception!
      try { 
        scriptVisitor0.visit((ASTModNode) null, integer0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.internal.ScriptVisitor"", e);
      }
  }"
3467,"    protected Object visit(final ASTJexlScript node, final Object data) {
        return visitNode(node, data);
    }","  public void test125()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      // Undeclared exception!
      try { 
        scriptVisitor0.visit((ASTMethodNode) null, (Object) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.internal.ScriptVisitor"", e);
      }
  }"
3468,"    protected Object visit(final ASTJexlScript node, final Object data) {
        return visitNode(node, data);
    }","  public void test126()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      Engine engine0 = new Engine();
      Parser parser0 = engine0.parser;
      ASTSetMultNode aSTSetMultNode0 = new ASTSetMultNode(parser0, 332);
      ASTIfStatement aSTIfStatement0 = new ASTIfStatement(parser0, 332);
      ASTMapEntry aSTMapEntry0 = new ASTMapEntry(parser0, 1);
      aSTMapEntry0.jjtAddChild(aSTIfStatement0, 1);
      // Undeclared exception!
      try { 
        scriptVisitor0.visit(aSTMapEntry0, aSTSetMultNode0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.parser.SimpleNode"", e);
      }
  }"
3469,"    protected Object visit(final ASTJexlScript node, final Object data) {
        return visitNode(node, data);
    }","  public void test127()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      // Undeclared exception!
      try { 
        scriptVisitor0.visit((ASTLTNode) null, ""EmFHp}f!xoY{2!8&"");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.internal.ScriptVisitor"", e);
      }
  }"
3470,"    protected Object visit(final ASTJexlScript node, final Object data) {
        return visitNode(node, data);
    }","  public void test128()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      ASTTernaryNode aSTTernaryNode0 = new ASTTernaryNode(0);
      // Undeclared exception!
      try { 
        scriptVisitor0.visit((ASTLENode) null, aSTTernaryNode0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.internal.ScriptVisitor"", e);
      }
  }"
3471,"    protected Object visit(final ASTJexlScript node, final Object data) {
        return visitNode(node, data);
    }","  public void test129()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      // Undeclared exception!
      try { 
        scriptVisitor0.visit((ASTJxltLiteral) null, (Object) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.internal.ScriptVisitor"", e);
      }
  }"
3472,"    protected Object visit(final ASTJexlScript node, final Object data) {
        return visitNode(node, data);
    }","  public void test130()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      // Undeclared exception!
      try { 
        scriptVisitor0.visit((ASTJexlScript) null, (Object) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.internal.ScriptVisitor"", e);
      }
  }"
3473,"    protected Object visit(final ASTJexlScript node, final Object data) {
        return visitNode(node, data);
    }","  public void test131()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      ASTBitwiseOrNode aSTBitwiseOrNode0 = new ASTBitwiseOrNode(67);
      // Undeclared exception!
      try { 
        scriptVisitor0.visit((ASTIdentifierAccess) null, aSTBitwiseOrNode0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.internal.ScriptVisitor"", e);
      }
  }"
3474,"    protected Object visit(final ASTJexlScript node, final Object data) {
        return visitNode(node, data);
    }","  public void test132()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      ASTVar aSTVar0 = new ASTVar((-422));
      ASTAnnotatedStatement aSTAnnotatedStatement0 = new ASTAnnotatedStatement(666);
      aSTVar0.jjtAddChild(aSTAnnotatedStatement0, 1);
      // Undeclared exception!
      try { 
        scriptVisitor0.visit(aSTVar0, aSTVar0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.parser.SimpleNode"", e);
      }
  }"
3475,"    protected Object visit(final ASTJexlScript node, final Object data) {
        return visitNode(node, data);
    }","  public void test133()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      // Undeclared exception!
      try { 
        scriptVisitor0.visit((ASTGTNode) null, (Object) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.internal.ScriptVisitor"", e);
      }
  }"
3476,"    protected Object visit(final ASTJexlScript node, final Object data) {
        return visitNode(node, data);
    }","  public void test134()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      Engine engine0 = new Engine();
      Script script0 = engine0.createExpression((JexlInfo) null, """");
      Closure closure0 = new Closure(script0, (Object[]) null);
      // Undeclared exception!
      try { 
        scriptVisitor0.visit((ASTGENode) null, closure0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.internal.ScriptVisitor"", e);
      }
  }"
3477,"    protected Object visit(final ASTJexlScript node, final Object data) {
        return visitNode(node, data);
    }","  public void test135()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      Parser parser0 = new Parser(""tVGb"");
      // Undeclared exception!
      try { 
        scriptVisitor0.visit((ASTFunctionNode) null, parser0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.internal.ScriptVisitor"", e);
      }
  }"
3478,"    protected Object visit(final ASTJexlScript node, final Object data) {
        return visitNode(node, data);
    }","  public void test136()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      JexlFeatures jexlFeatures0 = JexlEngine.DEFAULT_FEATURES;
      // Undeclared exception!
      try { 
        scriptVisitor0.visit((ASTForeachStatement) null, jexlFeatures0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.internal.ScriptVisitor"", e);
      }
  }"
3479,"    protected Object visit(final ASTJexlScript node, final Object data) {
        return visitNode(node, data);
    }","  public void test137()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      JexlInfo jexlInfo0 = engine0.createInfo();
      String[] stringArray0 = new String[8];
      Script script0 = engine0.createScript(engine0.DEFAULT_FEATURES, jexlInfo0, ""org.apache.commons.jexl3.internal.ScriptVisitor"", stringArray0);
      // Undeclared exception!
      try { 
        scriptVisitor0.visit((ASTExtendedLiteral) null, script0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.internal.ScriptVisitor"", e);
      }
  }"
3480,"    protected Object visit(final ASTJexlScript node, final Object data) {
        return visitNode(node, data);
    }","  public void test138()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      Object object0 = new Object();
      ASTEmptyFunction aSTEmptyFunction0 = new ASTEmptyFunction((-2047));
      Parser parser0 = new Parser(""org.apache.commons.jexl3.parser.Parser$LookaheadSuccess"");
      JexlLexicalNode jexlLexicalNode0 = new JexlLexicalNode(parser0, (-2047));
      aSTEmptyFunction0.jjtAddChild(jexlLexicalNode0, 0);
      // Undeclared exception!
      try { 
        scriptVisitor0.visit(aSTEmptyFunction0, object0);
        fail(""Expecting exception: UnsupportedOperationException"");
      } catch(UnsupportedOperationException e) {
         //
         // JexlLexicalNode : not supported yet.
         //
         verifyException(""org.apache.commons.jexl3.parser.ParserVisitor"", e);
      }
  }"
3481,"    protected Object visit(final ASTJexlScript node, final Object data) {
        return visitNode(node, data);
    }","  public void test139()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      ASTAssignment aSTAssignment0 = new ASTAssignment((Parser) null, 0);
      ASTERNode aSTERNode0 = new ASTERNode(2252);
      aSTERNode0.jjtAddChild(aSTAssignment0, 123);
      // Undeclared exception!
      try { 
        scriptVisitor0.visit(aSTERNode0, aSTERNode0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.parser.SimpleNode"", e);
      }
  }"
3482,"    protected Object visit(final ASTJexlScript node, final Object data) {
        return visitNode(node, data);
    }","  public void test140()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      ASTConstructorNode aSTConstructorNode0 = new ASTConstructorNode((-2289));
      Engine engine0 = new Engine();
      Parser parser0 = engine0.parser;
      StringProvider stringProvider0 = new StringProvider(""B"");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringProvider0, 1356, 984, 1356);
      ASTEQNode aSTEQNode0 = new ASTEQNode(parser0, (-2289));
      aSTEQNode0.jjtAddChild(aSTConstructorNode0, 122);
      // Undeclared exception!
      try { 
        scriptVisitor0.visit(aSTEQNode0, simpleCharStream0.DEFAULT_BUF_SIZE);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.parser.SimpleNode"", e);
      }
  }"
3483,"    protected Object visit(final ASTJexlScript node, final Object data) {
        return visitNode(node, data);
    }","  public void test141()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      // Undeclared exception!
      try { 
        scriptVisitor0.visit((ASTDoWhileStatement) null, (Object) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.internal.ScriptVisitor"", e);
      }
  }"
3484,"    protected Object visit(final ASTJexlScript node, final Object data) {
        return visitNode(node, data);
    }","  public void test142()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      // Undeclared exception!
      try { 
        scriptVisitor0.visit((ASTDivNode) null, (Object) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.internal.ScriptVisitor"", e);
      }
  }"
3485,"    protected Object visit(final ASTJexlScript node, final Object data) {
        return visitNode(node, data);
    }","  public void test143()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      // Undeclared exception!
      try { 
        scriptVisitor0.visit((ASTContinue) null, ""2"");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.internal.ScriptVisitor"", e);
      }
  }"
3486,"    protected Object visit(final ASTJexlScript node, final Object data) {
        return visitNode(node, data);
    }","  public void test144()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      // Undeclared exception!
      try { 
        scriptVisitor0.visit((ASTConstructorNode) null, (Object) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.internal.ScriptVisitor"", e);
      }
  }"
3487,"    protected Object visit(final ASTJexlScript node, final Object data) {
        return visitNode(node, data);
    }","  public void test145()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      ASTAddNode aSTAddNode0 = new ASTAddNode((-2289));
      Engine engine0 = new Engine();
      Parser parser0 = engine0.parser;
      StringProvider stringProvider0 = new StringProvider(""B"");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringProvider0, 1356, 984, 1356);
      ASTBreak aSTBreak0 = new ASTBreak(parser0, 1356);
      aSTBreak0.jjtAddChild(aSTAddNode0, 834);
      // Undeclared exception!
      try { 
        scriptVisitor0.visit(aSTBreak0, simpleCharStream0.DEFAULT_BUF_SIZE);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.parser.SimpleNode"", e);
      }
  }"
3488,"    protected Object visit(final ASTJexlScript node, final Object data) {
        return visitNode(node, data);
    }","  public void test146()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      // Undeclared exception!
      try { 
        scriptVisitor0.visit((ASTBlock) null, (Object) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.internal.ScriptVisitor"", e);
      }
  }"
3489,"    protected Object visit(final ASTJexlScript node, final Object data) {
        return visitNode(node, data);
    }","  public void test147()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      ASTRegexLiteral aSTRegexLiteral0 = mock(ASTRegexLiteral.class, new ViolatedAssumptionAnswer());
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      ASTBitwiseXorNode aSTBitwiseXorNode0 = new ASTBitwiseXorNode(99);
      aSTBitwiseXorNode0.jjtAddChild(aSTRegexLiteral0, 99);
      // Undeclared exception!
      try { 
        scriptVisitor0.visit(aSTBitwiseXorNode0, engine0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.parser.SimpleNode"", e);
      }
  }"
3490,"    protected Object visit(final ASTJexlScript node, final Object data) {
        return visitNode(node, data);
    }","  public void test148()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      // Undeclared exception!
      try { 
        scriptVisitor0.visit((ASTBitwiseComplNode) null, ""|`f;%$/_CXR"");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.internal.ScriptVisitor"", e);
      }
  }"
3491,"    protected Object visit(final ASTJexlScript node, final Object data) {
        return visitNode(node, data);
    }","  public void test149()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      ASTDoWhileStatement aSTDoWhileStatement0 = new ASTDoWhileStatement(487);
      ASTBitwiseAndNode aSTBitwiseAndNode0 = new ASTBitwiseAndNode((-2756));
      aSTBitwiseAndNode0.jjtAddChild(aSTDoWhileStatement0, 487);
      // Undeclared exception!
      try { 
        scriptVisitor0.visit(aSTBitwiseAndNode0, (Object) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.parser.SimpleNode"", e);
      }
  }"
3492,"    protected Object visit(final ASTJexlScript node, final Object data) {
        return visitNode(node, data);
    }","  public void test150()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      ASTFalseNode aSTFalseNode0 = new ASTFalseNode((-2575));
      ASTAssignment aSTAssignment0 = new ASTAssignment((Parser) null, 888);
      aSTAssignment0.jjtAddChild(aSTFalseNode0, 91);
      // Undeclared exception!
      try { 
        scriptVisitor0.visit(aSTAssignment0, (Object) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.parser.SimpleNode"", e);
      }
  }"
3493,"    protected Object visit(final ASTJexlScript node, final Object data) {
        return visitNode(node, data);
    }","  public void test151()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      // Undeclared exception!
      try { 
        scriptVisitor0.visit((ASTArrayLiteral) null, (Object) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.internal.ScriptVisitor"", e);
      }
  }"
3494,"    protected Object visit(final ASTJexlScript node, final Object data) {
        return visitNode(node, data);
    }","  public void test152()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      Parser parser0 = new Parser("""");
      ASTArrayAccess aSTArrayAccess0 = new ASTArrayAccess(parser0, 2);
      JexlLexicalNode jexlLexicalNode0 = new JexlLexicalNode((-1));
      aSTArrayAccess0.jjtAddChild(jexlLexicalNode0, 13);
      // Undeclared exception!
      try { 
        scriptVisitor0.visit(aSTArrayAccess0, """");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.parser.SimpleNode"", e);
      }
  }"
3495,"    protected Object visit(final ASTJexlScript node, final Object data) {
        return visitNode(node, data);
    }","  public void test153()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      // Undeclared exception!
      try { 
        scriptVisitor0.visit((ASTArguments) null, (Object) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.internal.ScriptVisitor"", e);
      }
  }"
3496,"    protected Object visit(final ASTJexlScript node, final Object data) {
        return visitNode(node, data);
    }","  public void test154()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      // Undeclared exception!
      try { 
        scriptVisitor0.visit((ASTAddNode) null, (Object) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.internal.ScriptVisitor"", e);
      }
  }"
3497,"    public Object visitScript(final JexlScript jscript, final Object data) {
        if (jscript instanceof Script) {
            return ((Script) jscript).getScript().jjtAccept(this, data);
        }
        return null;
    }","  public void test155()  throws Throwable  {
      JexlFeatures jexlFeatures0 = JexlEngine.DEFAULT_FEATURES;
      FeatureController featureController0 = new FeatureController(jexlFeatures0);
      Engine engine0 = new Engine();
      JexlInfo jexlInfo0 = engine0.createInfo();
      Script script0 = (Script)engine0.createExpression(jexlInfo0, """");
      TemplateEngine templateEngine0 = new TemplateEngine(engine0, false, 13, 'j', 'j');
      ASTLTNode aSTLTNode0 = new ASTLTNode(13);
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      Scope scope1 = new Scope(scope0, (String[]) null);
      TemplateEngine.ConstantExpression templateEngine_ConstantExpression0 = (TemplateEngine.ConstantExpression)templateEngine0.parseExpression(jexlInfo0, ""J%>440LbXJ==[Sb"", scope1);
      TemplateEngine.DeferredExpression templateEngine_DeferredExpression0 = templateEngine0.new DeferredExpression(""U"", aSTLTNode0, templateEngine_ConstantExpression0);
      TemplateEngine.DeferredExpression templateEngine_DeferredExpression1 = (TemplateEngine.DeferredExpression)featureController0.visitScript(script0, templateEngine_DeferredExpression0);
}"
3498,"    public Object visitScript(final JexlScript jscript, final Object data) {
        if (jscript instanceof Script) {
            return ((Script) jscript).getScript().jjtAccept(this, data);
        }
        return null;
    }","  public void test156()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      Object object0 = scriptVisitor0.visitScript((JexlScript) null, (Object) null);
}"
3499,"    public Object visitExpression (final JexlExpression jscript, final Object data) {
        if (jscript instanceof Script) {
            return ((Script) jscript).getScript().jjtAccept(this, data);
        }
        return null;
    }","  public void test157()  throws Throwable  {
      JexlFeatures jexlFeatures0 = JexlEngine.DEFAULT_FEATURES;
      FeatureController featureController0 = new FeatureController(jexlFeatures0);
      Engine engine0 = new Engine();
      JexlInfo jexlInfo0 = engine0.createInfo();
      JexlExpression jexlExpression0 = engine0.createExpression(jexlInfo0, """");
      Object object0 = featureController0.visitExpression(jexlExpression0, (Object) null);
}"
3500,"    public Object visitExpression (final JexlExpression jscript, final Object data) {
        if (jscript instanceof Script) {
            return ((Script) jscript).getScript().jjtAccept(this, data);
        }
        return null;
    }","  public void test158()  throws Throwable  {
      JexlFeatures jexlFeatures0 = JexlEngine.DEFAULT_FEATURES;
      FeatureController featureController0 = new FeatureController(jexlFeatures0);
      Object object0 = featureController0.visitExpression((JexlExpression) null, jexlFeatures0);
}"
3501,"    protected Object visit(final ASTJexlScript node, final Object data) {
        return visitNode(node, data);
    }","  public void test159()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      ASTTernaryNode aSTTernaryNode0 = new ASTTernaryNode(0);
      Integer integer0 = new Integer(611);
      Object object0 = scriptVisitor0.visit(aSTTernaryNode0, integer0);
}"
3502,"    protected Object visit(final ASTJexlScript node, final Object data) {
        return visitNode(node, data);
    }","  public void test160()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      ASTExtendedLiteral aSTExtendedLiteral0 = new ASTExtendedLiteral(834);
      Object object0 = scriptVisitor0.visit(aSTExtendedLiteral0, ""rjVe2]98Pt[W?o"");
}"
3503,"    protected Object visit(final ASTJexlScript node, final Object data) {
        return visitNode(node, data);
    }","  public void test161()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      ASTAddNode aSTAddNode0 = new ASTAddNode((-2289));
      ASTAddNode aSTAddNode1 = (ASTAddNode)scriptVisitor0.visit(aSTAddNode0, aSTAddNode0);
}"
3504,"    protected Object visit(final ASTJexlScript node, final Object data) {
        return visitNode(node, data);
    }","  public void test162()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      ASTJxltLiteral aSTJxltLiteral0 = mock(ASTJxltLiteral.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(aSTJxltLiteral0).toString();
      doReturn((Object) null).when(aSTJxltLiteral0).childrenAccept(any(org.apache.commons.jexl3.parser.ParserVisitor.class) , any());
      ASTBlock aSTBlock0 = new ASTBlock(3384);
      Object object0 = scriptVisitor0.visit(aSTBlock0, aSTJxltLiteral0);
      Object object1 = scriptVisitor0.visit(aSTJxltLiteral0, object0);
}"
3505,"    protected Object visit(final ASTJexlScript node, final Object data) {
        return visitNode(node, data);
    }","  public void test163()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      ASTUnaryMinusNode aSTUnaryMinusNode0 = new ASTUnaryMinusNode(0);
      ASTUnaryMinusNode aSTUnaryMinusNode1 = (ASTUnaryMinusNode)scriptVisitor0.visit(aSTUnaryMinusNode0, aSTUnaryMinusNode0);
}"
3506,"    protected Object visit(final ASTJexlScript node, final Object data) {
        return visitNode(node, data);
    }","  public void test164()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      ASTForeachStatement aSTForeachStatement0 = new ASTForeachStatement((-1));
      Object object0 = scriptVisitor0.visit(aSTForeachStatement0, (Object) null);
}"
3507,"    protected Object visit(final ASTJexlScript node, final Object data) {
        return visitNode(node, data);
    }","  public void test165()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      Parser parser0 = new Parser(""tVGb"");
      ASTWhileStatement aSTWhileStatement0 = new ASTWhileStatement(parser0, 767);
      ASTSetModNode aSTSetModNode0 = new ASTSetModNode(566);
      ASTWhileStatement aSTWhileStatement1 = (ASTWhileStatement)scriptVisitor0.visit(aSTSetModNode0, aSTWhileStatement0);
}"
3508,"    protected Object visit(final ASTJexlScript node, final Object data) {
        return visitNode(node, data);
    }","  public void test166()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      Parser parser0 = new Parser(""tVGb"");
      ASTUnaryPlusNode aSTUnaryPlusNode0 = new ASTUnaryPlusNode(parser0, (-896));
      ASTRangeNode aSTRangeNode0 = new ASTRangeNode(parser0, (-1800));
      ASTUnaryPlusNode aSTUnaryPlusNode1 = (ASTUnaryPlusNode)scriptVisitor0.visit(aSTRangeNode0, aSTUnaryPlusNode0);
}"
3509,"    protected Object visit(final ASTJexlScript node, final Object data) {
        return visitNode(node, data);
    }","  public void test167()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      ASTNullpNode aSTNullpNode0 = new ASTNullpNode((-2870));
      Object object0 = scriptVisitor0.visit(aSTNullpNode0, ""5ketx&q>?E"");
}"
3510,"    protected Object visit(final ASTJexlScript node, final Object data) {
        return visitNode(node, data);
    }","  public void test168()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      ASTTrueNode aSTTrueNode0 = new ASTTrueNode((-287));
      Object object0 = scriptVisitor0.visit(aSTTrueNode0, aSTTrueNode0);
}"
3511,"    protected Object visit(final ASTJexlScript node, final Object data) {
        return visitNode(node, data);
    }","  public void test169()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      Parser parser0 = new Parser(""tVGb"");
      ASTAndNode aSTAndNode0 = new ASTAndNode(parser0, 425);
      ASTAndNode aSTAndNode1 = (ASTAndNode)scriptVisitor0.visit(aSTAndNode0, aSTAndNode0);
}"
3512,"    protected Object visit(final ASTJexlScript node, final Object data) {
        return visitNode(node, data);
    }","  public void test170()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      ASTStringLiteral aSTStringLiteral0 = mock(ASTStringLiteral.class, new ViolatedAssumptionAnswer());
      doReturn(scriptVisitor0).when(aSTStringLiteral0).childrenAccept(any(org.apache.commons.jexl3.parser.ParserVisitor.class) , any());
      Object object0 = scriptVisitor0.visit(aSTStringLiteral0, scriptVisitor0);
}"
3513,"    protected Object visit(final ASTJexlScript node, final Object data) {
        return visitNode(node, data);
    }","  public void test171()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      Engine engine0 = new Engine();
      ASTAnnotation aSTAnnotation0 = mock(ASTAnnotation.class, new ViolatedAssumptionAnswer());
      doReturn(""rjVe2]98Pt[W?o"").when(aSTAnnotation0).childrenAccept(any(org.apache.commons.jexl3.parser.ParserVisitor.class) , any());
      Object object0 = scriptVisitor0.visit(aSTAnnotation0, engine0);
}"
3514,"    protected Object visit(final ASTJexlScript node, final Object data) {
        return visitNode(node, data);
    }","  public void test172()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      ASTGENode aSTGENode0 = new ASTGENode((-2289));
      Object object0 = scriptVisitor0.visit(aSTGENode0, ""rjVe2]98Pt[W?o"");
}"
3515,"    protected Object visit(final ASTJexlScript node, final Object data) {
        return visitNode(node, data);
    }","  public void test173()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      ASTReferenceExpression aSTReferenceExpression0 = mock(ASTReferenceExpression.class, new ViolatedAssumptionAnswer());
      doReturn(""rjVe2]98Pt[W?o"").when(aSTReferenceExpression0).childrenAccept(any(org.apache.commons.jexl3.parser.ParserVisitor.class) , any());
      Object object0 = scriptVisitor0.visit(aSTReferenceExpression0, ""B"");
}"
3516,"    protected Object visit(final ASTJexlScript node, final Object data) {
        return visitNode(node, data);
    }","  public void test174()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      ASTArrayLiteral aSTArrayLiteral0 = mock(ASTArrayLiteral.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(aSTArrayLiteral0).childrenAccept(any(org.apache.commons.jexl3.parser.ParserVisitor.class) , any());
      Integer integer0 = new Integer(3384);
      Object object0 = scriptVisitor0.visit(aSTArrayLiteral0, integer0);
}"
3517,"    protected Object visit(final ASTJexlScript node, final Object data) {
        return visitNode(node, data);
    }","  public void test175()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      Engine engine0 = new Engine();
      Parser parser0 = engine0.parser;
      ASTSetMultNode aSTSetMultNode0 = new ASTSetMultNode(parser0, 332);
      Object object0 = scriptVisitor0.visit(aSTSetMultNode0, aSTSetMultNode0);
}"
3518,"    protected Object visit(final ASTJexlScript node, final Object data) {
        return visitNode(node, data);
    }","  public void test176()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      Engine engine0 = new Engine();
      Parser parser0 = engine0.parser;
      StringProvider stringProvider0 = new StringProvider(""B"");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringProvider0, 1356, 984, 1356);
      ASTEQNode aSTEQNode0 = new ASTEQNode(parser0, (-2289));
      Object object0 = scriptVisitor0.visit(aSTEQNode0, simpleCharStream0.DEFAULT_BUF_SIZE);
}"
3519,"    protected Object visit(final ASTJexlScript node, final Object data) {
        return visitNode(node, data);
    }","  public void test177()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      ASTNotNode aSTNotNode0 = new ASTNotNode(2960);
      Integer integer0 = Integer.valueOf(0);
      Object object0 = scriptVisitor0.visit(aSTNotNode0, integer0);
}"
3520,"    protected Object visit(final ASTJexlScript node, final Object data) {
        return visitNode(node, data);
    }","  public void test178()  throws Throwable  {
      JexlFeatures jexlFeatures0 = Engine.PROPERTY_FEATURES;
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      ASTSubNode aSTSubNode0 = new ASTSubNode((-1));
      JexlFeatures jexlFeatures1 = (JexlFeatures)scriptVisitor0.visit(aSTSubNode0, jexlFeatures0);
}"
3521,"    protected Object visit(final ASTJexlScript node, final Object data) {
        return visitNode(node, data);
    }","  public void test179()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      TemplateEngine templateEngine0 = new TemplateEngine(engine0, false, (-3078), ':', ':');
      ArrayList<TemplateEngine.TemplateExpression> arrayList0 = new ArrayList<TemplateEngine.TemplateExpression>();
      TemplateEngine.ConstantExpression templateEngine_ConstantExpression0 = templateEngine0.new ConstantExpression(arrayList0, (TemplateEngine.TemplateExpression) null);
      // Undeclared exception!
      try { 
        scriptVisitor0.visit((ASTOrNode) null, templateEngine_ConstantExpression0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.internal.ScriptVisitor"", e);
      }
  }"
3522,"    protected Object visit(final ASTJexlScript node, final Object data) {
        return visitNode(node, data);
    }","  public void test180()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      ASTNSWNode aSTNSWNode0 = new ASTNSWNode((Parser) null, 2960);
      Object object0 = scriptVisitor0.visit(aSTNSWNode0, (Object) null);
}"
3523,"    protected Object visit(final ASTJexlScript node, final Object data) {
        return visitNode(node, data);
    }","  public void test181()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      ASTMethodNode aSTMethodNode0 = new ASTMethodNode((Parser) null, 2960);
      ASTSetSubNode aSTSetSubNode0 = new ASTSetSubNode(0);
      ASTMethodNode aSTMethodNode1 = (ASTMethodNode)scriptVisitor0.visit(aSTSetSubNode0, aSTMethodNode0);
}"
3524,"    protected Object visit(final ASTJexlScript node, final Object data) {
        return visitNode(node, data);
    }","  public void test182()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      ASTConstructorNode aSTConstructorNode0 = new ASTConstructorNode((-2289));
      Object object0 = scriptVisitor0.visit(aSTConstructorNode0, ""rjVe2]98Pt[W?o"");
}"
3525,"    protected Object visit(final ASTJexlScript node, final Object data) {
        return visitNode(node, data);
    }","  public void test183()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      ASTWhileStatement aSTWhileStatement0 = new ASTWhileStatement((-2047));
      ASTSetDivNode aSTSetDivNode0 = new ASTSetDivNode(0);
      ASTWhileStatement aSTWhileStatement1 = (ASTWhileStatement)scriptVisitor0.visit(aSTSetDivNode0, aSTWhileStatement0);
}"
3526,"    protected Object visit(final ASTJexlScript node, final Object data) {
        return visitNode(node, data);
    }","  public void test184()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      Parser parser0 = new Parser(""tVGb"");
      ASTUnaryPlusNode aSTUnaryPlusNode0 = new ASTUnaryPlusNode(parser0, (-896));
      ASTNullLiteral aSTNullLiteral0 = new ASTNullLiteral(parser0, (-1800));
      ASTUnaryPlusNode aSTUnaryPlusNode1 = (ASTUnaryPlusNode)scriptVisitor0.visit(aSTNullLiteral0, aSTUnaryPlusNode0);
}"
3527,"    protected Object visit(final ASTJexlScript node, final Object data) {
        return visitNode(node, data);
    }","  public void test185()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      ASTDivNode aSTDivNode0 = new ASTDivNode(346);
      Object object0 = scriptVisitor0.visit(aSTDivNode0, (Object) null);
}"
3528,"    protected Object visit(final ASTJexlScript node, final Object data) {
        return visitNode(node, data);
    }","  public void test186()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      ASTVar aSTVar0 = new ASTVar((-422));
      ASTAnnotatedStatement aSTAnnotatedStatement0 = new ASTAnnotatedStatement(666);
      ASTVar aSTVar1 = (ASTVar)scriptVisitor0.visit(aSTAnnotatedStatement0, aSTVar0);
}"
3529,"    protected Object visit(final ASTJexlScript node, final Object data) {
        return visitNode(node, data);
    }","  public void test187()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      ASTSetAddNode aSTSetAddNode0 = new ASTSetAddNode((-2289));
      Object object0 = scriptVisitor0.visit(aSTSetAddNode0, ""rjVe2]98Pt[W?o"");
}"
3530,"    protected Object visit(final ASTJexlScript node, final Object data) {
        return visitNode(node, data);
    }","  public void test188()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      ASTDoWhileStatement aSTDoWhileStatement0 = new ASTDoWhileStatement(487);
      Object object0 = scriptVisitor0.visit(aSTDoWhileStatement0, (Object) null);
}"
3531,"    protected Object visit(final ASTJexlScript node, final Object data) {
        return visitNode(node, data);
    }","  public void test189()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      // Undeclared exception!
      try { 
        scriptVisitor0.visit((ASTEWNode) null, (Object) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.internal.ScriptVisitor"", e);
      }
  }"
3532,"    protected Object visit(final ASTJexlScript node, final Object data) {
        return visitNode(node, data);
    }","  public void test190()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      Engine engine0 = new Engine();
      Parser parser0 = engine0.parser;
      ASTGTNode aSTGTNode0 = new ASTGTNode(0);
      ASTJexlScript aSTJexlScript0 = new ASTJexlScript(parser0, 2142);
      Script script0 = new Script(engine0, ""[]"", aSTJexlScript0);
      Script script1 = (Script)scriptVisitor0.visit(aSTGTNode0, script0);
}"
3533,"    protected Object visit(final ASTJexlScript node, final Object data) {
        return visitNode(node, data);
    }","  public void test191()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      Integer integer0 = new Integer(611);
      Parser parser0 = new Parser(""org.apache.commons.logging.impl.LogKitLogger"");
      ASTBitwiseAndNode aSTBitwiseAndNode0 = new ASTBitwiseAndNode(parser0, (-2870));
      Object object0 = scriptVisitor0.visit(aSTBitwiseAndNode0, integer0);
}"
3534,"    protected Object visit(final ASTJexlScript node, final Object data) {
        return visitNode(node, data);
    }","  public void test192()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      Engine engine0 = new Engine();
      Parser parser0 = engine0.parser;
      StringProvider stringProvider0 = new StringProvider(""B"");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringProvider0, 1356, 984, 1356);
      ASTBreak aSTBreak0 = new ASTBreak(parser0, 1356);
      Object object0 = scriptVisitor0.visit(aSTBreak0, simpleCharStream0.DEFAULT_BUF_SIZE);
}"
3535,"    protected Object visit(final ASTJexlScript node, final Object data) {
        return visitNode(node, data);
    }","  public void test193()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[4];
      Scope scope1 = new Scope(scope0, stringArray0);
      Frame frame0 = new Frame(scope1, stringArray0, 346);
      // Undeclared exception!
      try { 
        scriptVisitor0.visit((ASTReturnStatement) null, frame0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.internal.ScriptVisitor"", e);
      }
  }"
3536,"    protected Object visit(final ASTJexlScript node, final Object data) {
        return visitNode(node, data);
    }","  public void test194()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      ASTNullpNode aSTNullpNode0 = new ASTNullpNode((-2870));
      ASTNRNode aSTNRNode0 = new ASTNRNode(0);
      ASTNullpNode aSTNullpNode1 = (ASTNullpNode)scriptVisitor0.visit(aSTNRNode0, aSTNullpNode0);
}"
3537,"    protected Object visit(final ASTJexlScript node, final Object data) {
        return visitNode(node, data);
    }","  public void test195()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      Parser parser0 = new Parser("""");
      ASTArrayAccess aSTArrayAccess0 = new ASTArrayAccess(parser0, 2);
      Object object0 = scriptVisitor0.visit(aSTArrayAccess0, """");
}"
3538,"    protected Object visit(final ASTJexlScript node, final Object data) {
        return visitNode(node, data);
    }","  public void test196()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      ASTIdentifierAccess aSTIdentifierAccess0 = mock(ASTIdentifierAccess.class, new ViolatedAssumptionAnswer());
      doReturn(scriptVisitor0).when(aSTIdentifierAccess0).childrenAccept(any(org.apache.commons.jexl3.parser.ParserVisitor.class) , any());
      Object object0 = scriptVisitor0.visit(aSTIdentifierAccess0, aSTIdentifierAccess0);
}"
3539,"    protected Object visit(final ASTJexlScript node, final Object data) {
        return visitNode(node, data);
    }","  public void test197()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      ASTBitwiseComplNode aSTBitwiseComplNode0 = new ASTBitwiseComplNode((-2289));
      ASTBitwiseComplNode aSTBitwiseComplNode1 = (ASTBitwiseComplNode)scriptVisitor0.visit(aSTBitwiseComplNode0, aSTBitwiseComplNode0);
}"
3540,"    protected Object visit(final ASTJexlScript node, final Object data) {
        return visitNode(node, data);
    }","  public void test198()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      ASTSetAndNode aSTSetAndNode0 = new ASTSetAndNode(425);
      Object object0 = scriptVisitor0.visit(aSTSetAndNode0, (Object) null);
}"
3541,"    protected Object visit(final ASTJexlScript node, final Object data) {
        return visitNode(node, data);
    }","  public void test199()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      // Undeclared exception!
      try { 
        scriptVisitor0.visit((ASTEmptyFunction) null, (Object) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.internal.ScriptVisitor"", e);
      }
  }"
3542,"    protected Object visit(final ASTJexlScript node, final Object data) {
        return visitNode(node, data);
    }","  public void test200()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      Parser parser0 = new Parser(""tVGb"");
      ASTNENode aSTNENode0 = new ASTNENode(parser0, 0);
      ASTNENode aSTNENode1 = (ASTNENode)scriptVisitor0.visit(aSTNENode0, aSTNENode0);
}"
3543,"    protected Object visit(final ASTJexlScript node, final Object data) {
        return visitNode(node, data);
    }","  public void test201()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      Parser parser0 = new Parser(""sO<0%+@"");
      String[] stringArray0 = new String[9];
      ASTSizeFunction aSTSizeFunction0 = new ASTSizeFunction(parser0, 13);
      Object object0 = scriptVisitor0.visit(aSTSizeFunction0, stringArray0[3]);
}"
3544,"    protected Object visit(final ASTJexlScript node, final Object data) {
        return visitNode(node, data);
    }","  public void test202()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      ASTMapLiteral aSTMapLiteral0 = mock(ASTMapLiteral.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(aSTMapLiteral0).childrenAccept(any(org.apache.commons.jexl3.parser.ParserVisitor.class) , any());
      Object object0 = scriptVisitor0.visit(aSTMapLiteral0, (Object) null);
}"
3545,"    protected Object visit(final ASTJexlScript node, final Object data) {
        return visitNode(node, data);
    }","  public void test203()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      Engine engine0 = new Engine();
      Parser parser0 = engine0.parser;
      ASTSetXorNode aSTSetXorNode0 = new ASTSetXorNode(parser0, 332);
      ASTSetXorNode aSTSetXorNode1 = (ASTSetXorNode)scriptVisitor0.visit(aSTSetXorNode0, aSTSetXorNode0);
}"
3546,"    protected Object visit(final ASTJexlScript node, final Object data) {
        return visitNode(node, data);
    }","  public void test204()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      ASTMethodNode aSTMethodNode0 = new ASTMethodNode((Parser) null, 2960);
      ASTSetOrNode aSTSetOrNode0 = new ASTSetOrNode(0);
      ASTMethodNode aSTMethodNode1 = (ASTMethodNode)scriptVisitor0.visit(aSTSetOrNode0, aSTMethodNode0);
}"
3547,"    protected Object visit(final ASTJexlScript node, final Object data) {
        return visitNode(node, data);
    }","  public void test205()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      Parser parser0 = new Parser(""org.apache.commons.logging.impl.LogKitLogger"");
      ASTMulNode aSTMulNode0 = new ASTMulNode(parser0, 0);
      Object object0 = scriptVisitor0.visit(aSTMulNode0, ""W3d(=C<e{^3"");
}"
3548,"    protected Object visit(final ASTJexlScript node, final Object data) {
        return visitNode(node, data);
    }","  public void test206()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      ASTMethodNode aSTMethodNode0 = new ASTMethodNode((Parser) null, 2960);
      Object object0 = scriptVisitor0.visit(aSTMethodNode0, (Object) null);
}"
3549,"    protected Object visit(final ASTJexlScript node, final Object data) {
        return visitNode(node, data);
    }","  public void test207()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      Engine engine0 = new Engine();
      Parser parser0 = engine0.parser;
      ASTSetMultNode aSTSetMultNode0 = new ASTSetMultNode(parser0, 332);
      ASTMapEntry aSTMapEntry0 = new ASTMapEntry(parser0, (-6));
      Object object0 = scriptVisitor0.visit(aSTMapEntry0, aSTSetMultNode0);
}"
3550,"    protected Object visit(final ASTJexlScript node, final Object data) {
        return visitNode(node, data);
    }","  public void test208()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      Parser parser0 = new Parser(""tVGb"");
      ASTLENode aSTLENode0 = new ASTLENode(parser0, 425);
      Object object0 = scriptVisitor0.visit(aSTLENode0, (Object) null);
}"
3551,"    protected Object visit(final ASTJexlScript node, final Object data) {
        return visitNode(node, data);
    }","  public void test209()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      ASTContinue aSTContinue0 = new ASTContinue((Parser) null, (-2173));
      Object object0 = scriptVisitor0.visit(aSTContinue0, ""5ketx&q>?E"");
}"
3552,"    protected Object visit(final ASTJexlScript node, final Object data) {
        return visitNode(node, data);
    }","  public void test210()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      Parser parser0 = new Parser(""tVGb"");
      ASTUnaryPlusNode aSTUnaryPlusNode0 = new ASTUnaryPlusNode(parser0, (-896));
      ASTWhileStatement aSTWhileStatement0 = new ASTWhileStatement(parser0, 767);
      ASTUnaryPlusNode aSTUnaryPlusNode1 = (ASTUnaryPlusNode)scriptVisitor0.visit(aSTWhileStatement0, aSTUnaryPlusNode0);
}"
3553,"    protected Object visit(final ASTJexlScript node, final Object data) {
        return visitNode(node, data);
    }","  public void test211()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      Integer integer0 = new Integer(611);
      ASTUnaryMinusNode aSTUnaryMinusNode0 = new ASTUnaryMinusNode(0);
      ASTSetLiteral aSTSetLiteral0 = mock(ASTSetLiteral.class, new ViolatedAssumptionAnswer());
      doReturn(aSTUnaryMinusNode0).when(aSTSetLiteral0).childrenAccept(any(org.apache.commons.jexl3.parser.ParserVisitor.class) , any());
      ASTUnaryMinusNode aSTUnaryMinusNode1 = (ASTUnaryMinusNode)scriptVisitor0.visit(aSTSetLiteral0, integer0);
}"
3554,"    protected Object visit(final ASTJexlScript node, final Object data) {
        return visitNode(node, data);
    }","  public void test212()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      StringReader stringReader0 = new StringReader(""A~+-<M5J`|cE$Lh"");
      StreamProvider streamProvider0 = new StreamProvider(stringReader0);
      Parser parser0 = new Parser(streamProvider0);
      ASTSWNode aSTSWNode0 = new ASTSWNode(parser0, 103);
      Object object0 = scriptVisitor0.visit(aSTSWNode0, stringReader0);
}"
3555,"    protected Object visit(final ASTJexlScript node, final Object data) {
        return visitNode(node, data);
    }","  public void test213()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      ASTAssignment aSTAssignment0 = new ASTAssignment((Parser) null, 888);
      Object object0 = scriptVisitor0.visit(aSTAssignment0, (Object) null);
}"
3556,"    protected Object visit(final ASTJexlScript node, final Object data) {
        return visitNode(node, data);
    }","  public void test214()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      ASTNullpNode aSTNullpNode0 = new ASTNullpNode(79);
      // Undeclared exception!
      try { 
        scriptVisitor0.visit((ASTIfStatement) null, aSTNullpNode0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.internal.ScriptVisitor"", e);
      }
  }"
3557,"    protected Object visit(final ASTJexlScript node, final Object data) {
        return visitNode(node, data);
    }","  public void test215()  throws Throwable  {
      JexlFeatures jexlFeatures0 = Engine.PROPERTY_FEATURES;
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      ASTNEWNode aSTNEWNode0 = new ASTNEWNode(1);
      Object object0 = scriptVisitor0.visit(aSTNEWNode0, jexlFeatures0);
}"
3558,"    protected Object visit(final ASTJexlScript node, final Object data) {
        return visitNode(node, data);
    }","  public void test216()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      // Undeclared exception!
      try { 
        scriptVisitor0.visit((ASTFalseNode) null, jexlBuilder0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.internal.ScriptVisitor"", e);
      }
  }"
3559,"    protected Object visit(final ASTJexlScript node, final Object data) {
        return visitNode(node, data);
    }","  public void test217()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      ASTBitwiseXorNode aSTBitwiseXorNode0 = new ASTBitwiseXorNode(72);
      Engine engine1 = (Engine)scriptVisitor0.visit(aSTBitwiseXorNode0, engine0);
}"
3560,"    protected Object visit(final ASTJexlScript node, final Object data) {
        return visitNode(node, data);
    }","  public void test218()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      // Undeclared exception!
      try { 
        scriptVisitor0.visit((ASTBitwiseOrNode) null, (Object) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.internal.ScriptVisitor"", e);
      }
  }"
3561,"    protected Object visit(final ASTJexlScript node, final Object data) {
        return visitNode(node, data);
    }","  public void test219()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      ASTMethodNode aSTMethodNode0 = new ASTMethodNode((Parser) null, 2960);
      ASTVar aSTVar0 = new ASTVar(1857);
      Object object0 = scriptVisitor0.visit(aSTVar0, aSTMethodNode0);
}"
3562,"    protected Object visit(final ASTJexlScript node, final Object data) {
        return visitNode(node, data);
    }","  public void test220()  throws Throwable  {
      ScriptVisitor scriptVisitor0 = new ScriptVisitor();
      Integer integer0 = Integer.valueOf(38);
      ASTRegexLiteral aSTRegexLiteral0 = mock(ASTRegexLiteral.class, new ViolatedAssumptionAnswer());
      doReturn(""!@9K"").when(aSTRegexLiteral0).childrenAccept(any(org.apache.commons.jexl3.parser.ParserVisitor.class) , any());
      Object object0 = scriptVisitor0.visit(aSTRegexLiteral0, integer0);
}"
3563,"    public Script createScript(final JexlFeatures features, final JexlInfo info, final String scriptText, final String... names) {
        if (scriptText == null) {
            throw new NullPointerException(""source is null"");
        }
        final String source = trimSource(scriptText);
        final Scope scope = names == null || names.length == 0? null : new Scope(null, names);
        final JexlFeatures ftrs = features == null? scriptFeatures : features;
        final ASTJexlScript tree = parse(info, ftrs, source, scope);
        return new Script(this, source, tree);
    }","  public void test0()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      String[] stringArray0 = new String[1];
      jexlBuilder0.cacheThreshold(9);
      Engine engine0 = new Engine(jexlBuilder0);
      // Undeclared exception!
      try { 
        engine0.createScript(engine0.DEFAULT_FEATURES, (JexlInfo) null, "">wWy|([]t)$"", stringArray0);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
      }
  }"
3564,"    public boolean isCancellable() {
        return this.cancellable;
    }","  public void test1()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[1];
      stringArray0[0] = ""Hsm"";
      Scope scope1 = new Scope(scope0, stringArray0);
      JexlInfo jexlInfo0 = engine0.createInfo(""uberspect can not be null"", 91, 91);
      ASTJexlScript aSTJexlScript0 = engine0.parse(jexlInfo0, true, ""Hsm"", scope1);
      Engine.VarCollector engine_VarCollector0 = new Engine.VarCollector(91);
      engine0.getVariables(aSTJexlScript0, aSTJexlScript0, engine_VarCollector0);
}"
3565,"    protected Set<List<String>> getVariables(final ASTJexlScript script) {
        final VarCollector collector = varCollector();
        getVariables(script, script, collector);
        return collector.collected();
    }","  public void test2()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[1];
      stringArray0[0] = ""Hsm"";
      Scope scope1 = new Scope(scope0, stringArray0);
      JexlInfo jexlInfo0 = engine0.createInfo(""uberspect can not be null"", 91, 91);
      ASTJexlScript aSTJexlScript0 = engine0.parse(jexlInfo0, true, ""Hsm"", scope1);
      Engine.VarCollector engine_VarCollector0 = new Engine.VarCollector(91);
      engine0.getVariables(aSTJexlScript0, aSTJexlScript0, engine_VarCollector0);
}"
3566,"    public <T> T newInstance(final Class<? extends T> clazz, final Object... args) {
        return clazz.cast(doCreateInstance(clazz, args));
    }","  public void test3()  throws Throwable  {
      Engine engine0 = new Engine();
      Class<JexlEngine> class0 = JexlEngine.class;
      // Undeclared exception!
      try { 
        engine0.newInstance((Class<? extends JexlEngine>) class0, (Object[]) null);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
      }
  }"
3567,"    public void setProperty(final Object bean, final String expr, final Object value) {
        setProperty(null, bean, expr, value);
    }","  public void test4()  throws Throwable  {
      Engine engine0 = new Engine();
      ASTJexlScript aSTJexlScript0 = engine0.parse((JexlInfo) null, true, """", (Scope) null);
      Parser parser0 = engine0.parser;
      JexlOptions jexlOptions0 = engine0.options(aSTJexlScript0, engine0.EMPTY_CONTEXT);
      // Undeclared exception!
      try { 
        engine0.setProperty((Object) jexlOptions0, "" !~ "", (Object) parser0);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
      }
  }"
3568,"    public boolean isCancellable() {
        return this.cancellable;
    }","  public void test5()  throws Throwable  {
      Engine engine0 = new Engine();
      engine0.createInterpreter(engine0.EMPTY_CONTEXT, (Frame) null, (JexlOptions) null);
}"
3569,"    public boolean isDebug() {
        return this.debug;
    }","  public void test6()  throws Throwable  {
      Engine engine0 = new Engine();
      engine0.createInterpreter(engine0.EMPTY_CONTEXT, (Frame) null, (JexlOptions) null);
}"
3570,"    public boolean isDebug() {
        return this.debug;
    }","  public void test7()  throws Throwable  {
      Engine engine0 = new Engine();
      engine0.createJxltEngine(false, 1433, 'M', 'M');
}"
3571,"    public boolean isCancellable() {
        return this.cancellable;
    }","  public void test8()  throws Throwable  {
      Engine engine0 = new Engine();
      engine0.createJxltEngine(false, 1433, 'M', 'M');
}"
3572,"    public Engine() {
        this(new JexlBuilder());
    }","  public void test9()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      Engine engine0 = new Engine();
      JexlOptions jexlOptions0 = new JexlOptions();
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      Scope scope1 = new Scope(scope0, (String[]) null);
      int int0 = (-2985);
      Frame frame0 = new Frame(scope1, (Object[]) null, (-2985));
      Interpreter interpreter0 = new Interpreter(engine0, jexlOptions0, engine0.EMPTY_CONTEXT, frame0);
      ASTJexlLambda aSTJexlLambda0 = mock(ASTJexlLambda.class, new ViolatedAssumptionAnswer());
      doReturn((Frame) null).when(aSTJexlLambda0).createFrame(any(org.apache.commons.jexl3.internal.Frame.class) , any(java.lang.Object[].class));
      doReturn((Map) null).when(aSTJexlLambda0).getPragmas();
      doReturn((JexlNode) null).when(aSTJexlLambda0).jjtGetChild(anyInt());
      doReturn(0).when(aSTJexlLambda0).jjtGetNumChildren();
      Closure closure0 = new Closure(interpreter0, aSTJexlLambda0);
      // Undeclared exception!
      try { 
        closure0.execute(engine0.EMPTY_CONTEXT);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.internal.Interpreter"", e);
      }
  }"
3573,"    public boolean isCancellable() {
        return this.cancellable;
    }","  public void test10()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlBuilder jexlBuilder1 = jexlBuilder0.cancellable(true);
      JexlBuilder jexlBuilder2 = jexlBuilder1.strict(false);
      Engine engine0 = new Engine(jexlBuilder2);
      boolean boolean0 = engine0.isCancellable();
}"
3574,"    public boolean isDebug() {
        return this.debug;
    }","  public void test11()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlBuilder jexlBuilder1 = jexlBuilder0.cancellable(true);
      JexlBuilder jexlBuilder2 = jexlBuilder1.strict(false);
      Engine engine0 = new Engine(jexlBuilder2);
      boolean boolean0 = engine0.isCancellable();
}"
3575,"    public boolean isCancellable() {
        return this.cancellable;
    }","  public void test12()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.silent(true);
      Engine engine0 = new Engine(jexlBuilder0);
      boolean boolean0 = engine0.isStrict();
}"
3576,"    public boolean isDebug() {
        return this.debug;
    }","  public void test13()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.silent(true);
      Engine engine0 = new Engine(jexlBuilder0);
      boolean boolean0 = engine0.isStrict();
}"
3577,"    public boolean isStrict() {
        return this.strict;
    }","  public void test14()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.silent(true);
      Engine engine0 = new Engine(jexlBuilder0);
      boolean boolean0 = engine0.isStrict();
}"
3578,"    public boolean isCancellable() {
        return this.cancellable;
    }","  public void test15()  throws Throwable  {
      Engine engine0 = new Engine();
      ASTJexlScript aSTJexlScript0 = engine0.parse((JexlInfo) null, true, """", (Scope) null);
      JexlOptions jexlOptions0 = engine0.options(aSTJexlScript0, engine0.EMPTY_CONTEXT);
      engine0.processPragmas(aSTJexlScript0, engine0.EMPTY_CONTEXT, jexlOptions0);
}"
3579,"    public boolean isDebug() {
        return this.debug;
    }","  public void test16()  throws Throwable  {
      Engine engine0 = new Engine();
      ASTJexlScript aSTJexlScript0 = engine0.parse((JexlInfo) null, true, """", (Scope) null);
      JexlOptions jexlOptions0 = engine0.options(aSTJexlScript0, engine0.EMPTY_CONTEXT);
      engine0.processPragmas(aSTJexlScript0, engine0.EMPTY_CONTEXT, jexlOptions0);
}"
3580,"    protected void processPragmas(final ASTJexlScript script, final JexlContext context, final JexlOptions opts) {
        final Map<String, Object> pragmas = script.getPragmas();
        if (pragmas != null && !pragmas.isEmpty()) {
            final JexlContext.PragmaProcessor processor =
                    context instanceof JexlContext.PragmaProcessor
                    ? (JexlContext.PragmaProcessor) context
                    : null;
            Map<String, Object> ns = null;
            for(final Map.Entry<String, Object> pragma : pragmas.entrySet()) {
                final String key = pragma.getKey();
                final Object value = pragma.getValue();
                if (value instanceof String) {
                    if (PRAGMA_OPTIONS.equals(key)) {
                        // jexl.options
                        final String[] vs = value.toString().split("" "");
                        opts.setFlags(vs);
                    } else if (key.startsWith(PRAGMA_JEXLNS)) {
                        // jexl.namespace.***
                        final String nsname = key.substring(PRAGMA_JEXLNS.length());
                        if (nsname != null && !nsname.isEmpty()) {
                            if (ns == null) {
                                ns = new HashMap<>(functions);
                            }
                            final String nsclass = value.toString();
                            try {
                                ns.put(nsname, uberspect.getClassLoader().loadClass(nsclass));
                            } catch (final ClassNotFoundException e) {
                                ns.put(nsname, nsclass);
                            }
                        }
                    }
                }
                if (processor != null) {
                    processor.processPragma(key, value);
                }
            }
            if (ns != null) {
                opts.setNamespaces(ns);
            }
        }
    }","  public void test17()  throws Throwable  {
      Engine engine0 = new Engine();
      ASTJexlScript aSTJexlScript0 = engine0.parse((JexlInfo) null, true, """", (Scope) null);
      JexlOptions jexlOptions0 = engine0.options(aSTJexlScript0, engine0.EMPTY_CONTEXT);
      engine0.processPragmas(aSTJexlScript0, engine0.EMPTY_CONTEXT, jexlOptions0);
}"
3581,"    public boolean isCancellable() {
        return this.cancellable;
    }","  public void test18()  throws Throwable  {
      Engine engine0 = new Engine();
      MapContext mapContext0 = new MapContext();
      engine0.setProperty((JexlContext) mapContext0, (Object) mapContext0, ""MapEntry"", (Object) ""MapEntry"");
}"
3582,"    public boolean isCancellable() {
        return this.cancellable;
    }","  public void test19()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlBuilder jexlBuilder1 = jexlBuilder0.silent(true);
      Engine engine0 = new Engine(jexlBuilder1);
      engine0.setProperty((Object) ""8syx"", ""5MFzI"", (Object) ""5MFzI"");
}"
3583,"    public boolean isDebug() {
        return this.debug;
    }","  public void test20()  throws Throwable  {
      Engine engine0 = new Engine();
      engine0.trimSource((CharSequence) null);
}"
3584,"    public boolean isCancellable() {
        return this.cancellable;
    }","  public void test21()  throws Throwable  {
      Engine engine0 = new Engine();
      engine0.trimSource((CharSequence) null);
}"
3585,"    protected String trimSource(final CharSequence str) {
        if (str != null) {
            int start = 0;
            int end = str.length();
            if (end > 0) {
                // trim front spaces
                while (start < end && Character.isSpaceChar(str.charAt(start))) {
                    ++start;
                }
                // trim ending spaces; end is > 0 since start >= 0
                while (end > start && Character.isSpaceChar(str.charAt(end - 1))) {
                    --end;
                }
                return str.subSequence(start, end).toString();
            }
            return """";
        }
        return null;
    }","  public void test22()  throws Throwable  {
      Engine engine0 = new Engine();
      String string0 = engine0.trimSource(""?"");
}"
3586,"    public boolean isCancellable() {
        return this.cancellable;
    }","  public void test23()  throws Throwable  {
      Engine engine0 = new Engine();
      String string0 = engine0.trimSource(""?"");
}"
3587,"    public boolean isCancellable() {
        return this.cancellable;
    }","  public void test24()  throws Throwable  {
      Engine engine0 = new Engine();
      engine0.trimSource("""");
}"
3588,"    public boolean isDebug() {
        return this.debug;
    }","  public void test25()  throws Throwable  {
      Engine engine0 = new Engine();
      engine0.trimSource("""");
}"
3589,"    protected JexlEngine putThreadEngine(final JexlEngine jexl) {
        final JexlEngine pjexl = ENGINE.get();
        ENGINE.set(jexl);
        return pjexl;
    }","  public void test26()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlBuilder jexlBuilder1 = jexlBuilder0.safe(false);
      JexlUberspect.ResolverStrategy jexlUberspect_ResolverStrategy0 = JexlUberspect.MAP_STRATEGY;
      JexlBuilder jexlBuilder2 = jexlBuilder1.strategy(jexlUberspect_ResolverStrategy0);
      Charset charset0 = Charset.defaultCharset();
      JexlBuilder jexlBuilder3 = jexlBuilder2.charset(charset0);
      Engine engine0 = new Engine(jexlBuilder3);
      JexlInfo jexlInfo0 = engine0.createInfo();
      Script script0 = engine0.createExpression(jexlInfo0, """");
      engine0.getLocalVariables(script0);
      Closure closure0 = new Closure(script0, (Object[]) null);
      JexlEngine jexlEngine0 = closure0.getEngine();
      JexlEngine jexlEngine1 = engine0.putThreadEngine(jexlEngine0);
}"
3590,"    public boolean isCancellable() {
        return this.cancellable;
    }","  public void test27()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlBuilder jexlBuilder1 = jexlBuilder0.safe(false);
      JexlUberspect.ResolverStrategy jexlUberspect_ResolverStrategy0 = JexlUberspect.MAP_STRATEGY;
      JexlBuilder jexlBuilder2 = jexlBuilder1.strategy(jexlUberspect_ResolverStrategy0);
      Charset charset0 = Charset.defaultCharset();
      JexlBuilder jexlBuilder3 = jexlBuilder2.charset(charset0);
      Engine engine0 = new Engine(jexlBuilder3);
      JexlInfo jexlInfo0 = engine0.createInfo();
      Script script0 = engine0.createExpression(jexlInfo0, """");
      engine0.getLocalVariables(script0);
      Closure closure0 = new Closure(script0, (Object[]) null);
      JexlEngine jexlEngine0 = closure0.getEngine();
      JexlEngine jexlEngine1 = engine0.putThreadEngine(jexlEngine0);
      engine0.createExpression(jexlInfo0, """");
      Engine.VarCollector engine_VarCollector0 = engine0.varCollector();
      Parser parser0 = engine0.parser;
      ASTSWNode aSTSWNode0 = new ASTSWNode(parser0, 0);
      engine_VarCollector0.collect(aSTSWNode0);
}"
3591,"    public boolean isCancellable() {
        return this.cancellable;
    }","  public void test28()  throws Throwable  {
      Engine engine0 = new Engine();
      engine0.parse((JexlInfo) null, engine0.DEFAULT_FEATURES, ""add"", (Scope) null);
}"
3592,"    public boolean isDebug() {
        return this.debug;
    }","  public void test29()  throws Throwable  {
      Engine engine0 = new Engine();
      engine0.parse((JexlInfo) null, engine0.DEFAULT_FEATURES, ""add"", (Scope) null);
}"
3593,"    public boolean isCancellable() {
        return this.cancellable;
    }","  public void test30()  throws Throwable  {
      Engine engine0 = new Engine();
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[4];
      Scope scope1 = new Scope(scope0, stringArray0);
      ASTJexlScript aSTJexlScript0 = engine0.parse((JexlInfo) null, engine0.DEFAULT_FEATURES, """", scope1);
}"
3594,"    public boolean isDebug() {
        return this.debug;
    }","  public void test31()  throws Throwable  {
      Engine engine0 = new Engine();
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[4];
      Scope scope1 = new Scope(scope0, stringArray0);
      ASTJexlScript aSTJexlScript0 = engine0.parse((JexlInfo) null, engine0.DEFAULT_FEATURES, """", scope1);
}"
3595,"    protected ASTJexlScript parse(final JexlInfo info, final boolean expr, final String src, final Scope scope) {
        return parse(info, expr? this.expressionFeatures : this.scriptFeatures, src, scope);
    }","  public void test32()  throws Throwable  {
      Engine engine0 = new Engine();
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[4];
      Scope scope1 = new Scope(scope0, stringArray0);
      ASTJexlScript aSTJexlScript0 = engine0.parse((JexlInfo) null, engine0.DEFAULT_FEATURES, """", scope1);
}"
3596,"    public boolean isDebug() {
        return this.debug;
    }","  public void test33()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlBuilder jexlBuilder1 = jexlBuilder0.strict(false);
      Engine engine0 = new Engine(jexlBuilder1);
      JexlEngine.EmptyContext jexlEngine_EmptyContext0 = (JexlEngine.EmptyContext)JexlEngine.EMPTY_CONTEXT;
      JexlOptions jexlOptions0 = engine0.options(jexlEngine_EmptyContext0);
      JexlOptions jexlOptions1 = engine0.optionsSet(jexlOptions0);
}"
3597,"    public boolean isCancellable() {
        return this.cancellable;
    }","  public void test34()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlBuilder jexlBuilder1 = jexlBuilder0.strict(false);
      Engine engine0 = new Engine(jexlBuilder1);
      JexlEngine.EmptyContext jexlEngine_EmptyContext0 = (JexlEngine.EmptyContext)JexlEngine.EMPTY_CONTEXT;
      JexlOptions jexlOptions0 = engine0.options(jexlEngine_EmptyContext0);
      JexlOptions jexlOptions1 = engine0.optionsSet(jexlOptions0);
}"
3598,"    public boolean isCancellable() {
        return this.cancellable;
    }","  public void test35()  throws Throwable  {
      Engine engine0 = new Engine();
      JexlOptions jexlOptions0 = engine0.options;
      jexlOptions0.setSharedInstance(true);
      JexlOptions jexlOptions1 = engine0.optionsSet(jexlOptions0);
}"
3599,"    public boolean isDebug() {
        return this.debug;
    }","  public void test36()  throws Throwable  {
      Engine engine0 = new Engine();
      JexlOptions jexlOptions0 = engine0.options;
      jexlOptions0.setSharedInstance(true);
      JexlOptions jexlOptions1 = engine0.optionsSet(jexlOptions0);
}"
3600,"    public JexlOptions optionsSet(final JexlOptions opts) {
        if (opts != null) {
            opts.set(options);
        }
        return opts;
    }","  public void test37()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.safe(false);
      Engine engine0 = new Engine(jexlBuilder0);
      JexlOptions jexlOptions0 = new JexlOptions();
      engine0.optionsSet(jexlOptions0);
}"
3601,"    public boolean isCancellable() {
        return this.cancellable;
    }","  public void test38()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.safe(false);
      Engine engine0 = new Engine(jexlBuilder0);
      JexlOptions jexlOptions0 = new JexlOptions();
      engine0.optionsSet(jexlOptions0);
}"
3602,"    public boolean isCancellable() {
        return this.cancellable;
    }","  public void test39()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.lexicalShade(true);
      Engine engine0 = new Engine(jexlBuilder0);
      JexlOptions jexlOptions0 = engine0.options(engine0.EMPTY_CONTEXT);
      JexlOptions jexlOptions1 = engine0.optionsSet(jexlOptions0);
}"
3603,"    public boolean isDebug() {
        return this.debug;
    }","  public void test40()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.lexicalShade(true);
      Engine engine0 = new Engine(jexlBuilder0);
      JexlOptions jexlOptions0 = engine0.options(engine0.EMPTY_CONTEXT);
      JexlOptions jexlOptions1 = engine0.optionsSet(jexlOptions0);
}"
3604,"    public JexlOptions optionsSet(final JexlOptions opts) {
        if (opts != null) {
            opts.set(options);
        }
        return opts;
    }","  public void test41()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlBuilder jexlBuilder1 = jexlBuilder0.antish(false);
      Engine engine0 = new Engine(jexlBuilder1);
      JexlOptions jexlOptions0 = new JexlOptions();
      engine0.optionsSet(jexlOptions0);
}"
3605,"    public boolean isCancellable() {
        return this.cancellable;
    }","  public void test42()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlBuilder jexlBuilder1 = jexlBuilder0.antish(false);
      Engine engine0 = new Engine(jexlBuilder1);
      JexlOptions jexlOptions0 = new JexlOptions();
      engine0.optionsSet(jexlOptions0);
}"
3606,"    public boolean isCancellable() {
        return this.cancellable;
    }","  public void test43()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      MathContext mathContext0 = MathContext.DECIMAL64;
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true, mathContext0, 2);
      jexlBuilder0.arithmetic(jexlArithmetic0);
      Engine engine0 = new Engine(jexlBuilder0);
      JexlOptions jexlOptions0 = engine0.options;
      JexlOptions jexlOptions1 = engine0.optionsSet(jexlOptions0);
}"
3607,"    public boolean isDebug() {
        return this.debug;
    }","  public void test44()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      MathContext mathContext0 = MathContext.DECIMAL64;
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true, mathContext0, 2);
      jexlBuilder0.arithmetic(jexlArithmetic0);
      Engine engine0 = new Engine(jexlBuilder0);
      JexlOptions jexlOptions0 = engine0.options;
      JexlOptions jexlOptions1 = engine0.optionsSet(jexlOptions0);
}"
3608,"    public boolean isCancellable() {
        return this.cancellable;
    }","  public void test45()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlBuilder jexlBuilder1 = jexlBuilder0.strict(false);
      Engine engine0 = new Engine(jexlBuilder1);
      Boolean boolean0 = Boolean.valueOf(false);
      ObjectContext<Boolean> objectContext0 = new ObjectContext<Boolean>(engine0, boolean0);
      JexlOptions jexlOptions0 = engine0.options((ASTJexlScript) null, objectContext0);
}"
3609,"    public boolean isDebug() {
        return this.debug;
    }","  public void test46()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlBuilder jexlBuilder1 = jexlBuilder0.strict(false);
      Engine engine0 = new Engine(jexlBuilder1);
      Boolean boolean0 = Boolean.valueOf(false);
      ObjectContext<Boolean> objectContext0 = new ObjectContext<Boolean>(engine0, boolean0);
      JexlOptions jexlOptions0 = engine0.options((ASTJexlScript) null, objectContext0);
}"
3610,"    public boolean isDebug() {
        return this.debug;
    }","  public void test47()  throws Throwable  {
      Engine engine0 = new Engine();
      JexlEngine.EmptyContext jexlEngine_EmptyContext0 = (JexlEngine.EmptyContext)JexlEngine.EMPTY_CONTEXT;
      JexlOptions jexlOptions0 = engine0.options(jexlEngine_EmptyContext0);
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Boolean boolean0 = jexlBuilder0.safe();
      ObjectContext<Boolean> objectContext0 = new ObjectContext<Boolean>(engine0, boolean0);
      jexlOptions0.setSharedInstance(true);
      JexlOptions jexlOptions1 = engine0.options((ASTJexlScript) null, objectContext0);
}"
3611,"    public boolean isCancellable() {
        return this.cancellable;
    }","  public void test48()  throws Throwable  {
      Engine engine0 = new Engine();
      JexlEngine.EmptyContext jexlEngine_EmptyContext0 = (JexlEngine.EmptyContext)JexlEngine.EMPTY_CONTEXT;
      JexlOptions jexlOptions0 = engine0.options(jexlEngine_EmptyContext0);
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Boolean boolean0 = jexlBuilder0.safe();
      ObjectContext<Boolean> objectContext0 = new ObjectContext<Boolean>(engine0, boolean0);
      jexlOptions0.setSharedInstance(true);
      JexlOptions jexlOptions1 = engine0.options((ASTJexlScript) null, objectContext0);
}"
3612,"    public boolean isCancellable() {
        return this.cancellable;
    }","  public void test49()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlBuilder jexlBuilder1 = jexlBuilder0.safe(false);
      Engine engine0 = new Engine(jexlBuilder1);
      Boolean boolean0 = Boolean.valueOf(false);
      ObjectContext<Boolean> objectContext0 = new ObjectContext<Boolean>(engine0, boolean0);
      JexlOptions jexlOptions0 = engine0.options((ASTJexlScript) null, objectContext0);
}"
3613,"    public boolean isDebug() {
        return this.debug;
    }","  public void test50()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlBuilder jexlBuilder1 = jexlBuilder0.safe(false);
      Engine engine0 = new Engine(jexlBuilder1);
      Boolean boolean0 = Boolean.valueOf(false);
      ObjectContext<Boolean> objectContext0 = new ObjectContext<Boolean>(engine0, boolean0);
      JexlOptions jexlOptions0 = engine0.options((ASTJexlScript) null, objectContext0);
}"
3614,"    public boolean isCancellable() {
        return this.cancellable;
    }","  public void test51()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlBuilder jexlBuilder1 = jexlBuilder0.lexicalShade(true);
      Engine engine0 = new Engine(jexlBuilder1);
      Parser parser0 = new Parser(""C9Mx&DD-$"");
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[6];
      Scope scope1 = new Scope(scope0, stringArray0);
      ASTJexlScript aSTJexlScript0 = parser0.JexlScript(scope1);
      Frame frame0 = new Frame(scope1, stringArray0, 0);
      Interpreter interpreter0 = new Interpreter(engine0, (JexlOptions) null, engine0.EMPTY_CONTEXT, frame0);
      ASTJexlLambda aSTJexlLambda0 = mock(ASTJexlLambda.class, new ViolatedAssumptionAnswer());
      doReturn((Frame) null).when(aSTJexlLambda0).createFrame(any(org.apache.commons.jexl3.internal.Frame.class) , any(java.lang.Object[].class));
      doReturn((Map) null).when(aSTJexlLambda0).getPragmas();
      Closure closure0 = new Closure(interpreter0, aSTJexlLambda0);
      Map<String, Object> map0 = closure0.getPragmas();
      MapContext mapContext0 = new MapContext(map0);
      JexlOptions jexlOptions0 = engine0.options(aSTJexlScript0, mapContext0);
}"
3615,"    public boolean isDebug() {
        return this.debug;
    }","  public void test52()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlBuilder jexlBuilder1 = jexlBuilder0.lexicalShade(true);
      Engine engine0 = new Engine(jexlBuilder1);
      Parser parser0 = new Parser(""C9Mx&DD-$"");
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[6];
      Scope scope1 = new Scope(scope0, stringArray0);
      ASTJexlScript aSTJexlScript0 = parser0.JexlScript(scope1);
      Frame frame0 = new Frame(scope1, stringArray0, 0);
      Interpreter interpreter0 = new Interpreter(engine0, (JexlOptions) null, engine0.EMPTY_CONTEXT, frame0);
      ASTJexlLambda aSTJexlLambda0 = mock(ASTJexlLambda.class, new ViolatedAssumptionAnswer());
      doReturn((Frame) null).when(aSTJexlLambda0).createFrame(any(org.apache.commons.jexl3.internal.Frame.class) , any(java.lang.Object[].class));
      doReturn((Map) null).when(aSTJexlLambda0).getPragmas();
      Closure closure0 = new Closure(interpreter0, aSTJexlLambda0);
      Map<String, Object> map0 = closure0.getPragmas();
      MapContext mapContext0 = new MapContext(map0);
      JexlOptions jexlOptions0 = engine0.options(aSTJexlScript0, mapContext0);
}"
3616,"    public boolean isCancellable() {
        return this.cancellable;
    }","  public void test53()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlBuilder jexlBuilder1 = jexlBuilder0.silent(true);
      Engine engine0 = new Engine(jexlBuilder1);
      ASTJexlScript aSTJexlScript0 = new ASTJexlScript(3270);
      JexlEngine.EmptyContext jexlEngine_EmptyContext0 = (JexlEngine.EmptyContext)JexlEngine.EMPTY_CONTEXT;
      JexlOptions jexlOptions0 = engine0.options(aSTJexlScript0, jexlEngine_EmptyContext0);
}"
3617,"    public boolean isDebug() {
        return this.debug;
    }","  public void test54()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlBuilder jexlBuilder1 = jexlBuilder0.silent(true);
      Engine engine0 = new Engine(jexlBuilder1);
      ASTJexlScript aSTJexlScript0 = new ASTJexlScript(3270);
      JexlEngine.EmptyContext jexlEngine_EmptyContext0 = (JexlEngine.EmptyContext)JexlEngine.EMPTY_CONTEXT;
      JexlOptions jexlOptions0 = engine0.options(aSTJexlScript0, jexlEngine_EmptyContext0);
}"
3618,"    public boolean isDebug() {
        return this.debug;
    }","  public void test55()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlBuilder jexlBuilder1 = jexlBuilder0.antish(false);
      Engine engine0 = (Engine)jexlBuilder1.create();
      JexlOptions jexlOptions0 = engine0.options((ASTJexlScript) null, (JexlContext) null);
}"
3619,"    public boolean isCancellable() {
        return this.cancellable;
    }","  public void test56()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlBuilder jexlBuilder1 = jexlBuilder0.antish(false);
      Engine engine0 = (Engine)jexlBuilder1.create();
      JexlOptions jexlOptions0 = engine0.options((ASTJexlScript) null, (JexlContext) null);
}"
3620,"    public boolean isDebug() {
        return this.debug;
    }","  public void test57()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      RoundingMode roundingMode0 = RoundingMode.CEILING;
      MathContext mathContext0 = new MathContext(82, roundingMode0);
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true, mathContext0, 82);
      jexlBuilder0.arithmetic(jexlArithmetic0);
      Engine engine0 = new Engine(jexlBuilder0);
      JexlEngine.EmptyContext jexlEngine_EmptyContext0 = (JexlEngine.EmptyContext)JexlEngine.EMPTY_CONTEXT;
      ASTJexlScript aSTJexlScript0 = new ASTJexlScript(19);
      JexlOptions jexlOptions0 = engine0.options(aSTJexlScript0, jexlEngine_EmptyContext0);
}"
3621,"    public boolean isCancellable() {
        return this.cancellable;
    }","  public void test58()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      RoundingMode roundingMode0 = RoundingMode.CEILING;
      MathContext mathContext0 = new MathContext(82, roundingMode0);
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true, mathContext0, 82);
      jexlBuilder0.arithmetic(jexlArithmetic0);
      Engine engine0 = new Engine(jexlBuilder0);
      JexlEngine.EmptyContext jexlEngine_EmptyContext0 = (JexlEngine.EmptyContext)JexlEngine.EMPTY_CONTEXT;
      ASTJexlScript aSTJexlScript0 = new ASTJexlScript(19);
      JexlOptions jexlOptions0 = engine0.options(aSTJexlScript0, jexlEngine_EmptyContext0);
}"
3622,"    public boolean isCancellable() {
        return this.cancellable;
    }","  public void test59()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlBuilder jexlBuilder1 = jexlBuilder0.silent(true);
      Engine engine0 = new Engine(jexlBuilder1);
      JexlOptions jexlOptions0 = engine0.options(engine0.EMPTY_CONTEXT);
}"
3623,"    public boolean isDebug() {
        return this.debug;
    }","  public void test60()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlBuilder jexlBuilder1 = jexlBuilder0.silent(true);
      Engine engine0 = new Engine(jexlBuilder1);
      JexlOptions jexlOptions0 = engine0.options(engine0.EMPTY_CONTEXT);
}"
3624,"    public boolean isDebug() {
        return this.debug;
    }","  public void test61()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.safe(false);
      Engine engine0 = new Engine(jexlBuilder0);
      Boolean boolean0 = Boolean.valueOf("""");
      ObjectContext<Boolean> objectContext0 = new ObjectContext<Boolean>(engine0, boolean0);
      JexlOptions jexlOptions0 = engine0.options(objectContext0);
}"
3625,"    public boolean isCancellable() {
        return this.cancellable;
    }","  public void test62()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.safe(false);
      Engine engine0 = new Engine(jexlBuilder0);
      Boolean boolean0 = Boolean.valueOf("""");
      ObjectContext<Boolean> objectContext0 = new ObjectContext<Boolean>(engine0, boolean0);
      JexlOptions jexlOptions0 = engine0.options(objectContext0);
}"
3626,"    public boolean isCancellable() {
        return this.cancellable;
    }","  public void test63()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlBuilder jexlBuilder1 = jexlBuilder0.antish(false);
      Engine engine0 = new Engine(jexlBuilder1);
      JexlOptions jexlOptions0 = new JexlOptions();
      Map<String, Object> map0 = jexlOptions0.getNamespaces();
      MapContext mapContext0 = new MapContext(map0);
      JexlOptions jexlOptions1 = engine0.options(mapContext0);
}"
3627,"    public boolean isDebug() {
        return this.debug;
    }","  public void test64()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlBuilder jexlBuilder1 = jexlBuilder0.antish(false);
      Engine engine0 = new Engine(jexlBuilder1);
      JexlOptions jexlOptions0 = new JexlOptions();
      Map<String, Object> map0 = jexlOptions0.getNamespaces();
      MapContext mapContext0 = new MapContext(map0);
      JexlOptions jexlOptions1 = engine0.options(mapContext0);
}"
3628,"    public boolean isDebug() {
        return this.debug;
    }","  public void test65()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.silent(true);
      Engine engine0 = new Engine(jexlBuilder0);
      Class<ASTArrayAccess> class0 = ASTArrayAccess.class;
      Object[] objectArray0 = new Object[5];
      engine0.newInstance((Class<? extends ASTArrayAccess>) class0, objectArray0);
}"
3629,"    public boolean isCancellable() {
        return this.cancellable;
    }","  public void test66()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.silent(true);
      Engine engine0 = new Engine(jexlBuilder0);
      Class<ASTArrayAccess> class0 = ASTArrayAccess.class;
      Object[] objectArray0 = new Object[5];
      engine0.newInstance((Class<? extends ASTArrayAccess>) class0, objectArray0);
}"
3630,"    public boolean isCancellable() {
        return this.cancellable;
    }","  public void test67()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlBuilder jexlBuilder1 = jexlBuilder0.strict(false);
      Engine engine0 = new Engine(jexlBuilder1);
      boolean boolean0 = engine0.isStrict();
}"
3631,"    public boolean isStrict() {
        return this.strict;
    }","  public void test68()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlBuilder jexlBuilder1 = jexlBuilder0.strict(false);
      Engine engine0 = new Engine(jexlBuilder1);
      boolean boolean0 = engine0.isStrict();
}"
3632,"    public boolean isDebug() {
        return this.debug;
    }","  public void test69()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlBuilder jexlBuilder1 = jexlBuilder0.strict(false);
      Engine engine0 = new Engine(jexlBuilder1);
      boolean boolean0 = engine0.isStrict();
}"
3633,"    public boolean isSilent() {
        return this.silent;
    }","  public void test70()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlBuilder jexlBuilder1 = jexlBuilder0.silent(true);
      Engine engine0 = new Engine(jexlBuilder1);
      boolean boolean0 = engine0.isSilent();
}"
3634,"    public boolean isDebug() {
        return this.debug;
    }","  public void test71()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlBuilder jexlBuilder1 = jexlBuilder0.silent(true);
      Engine engine0 = new Engine(jexlBuilder1);
      boolean boolean0 = engine0.isSilent();
}"
3635,"    public boolean isCancellable() {
        return this.cancellable;
    }","  public void test72()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlBuilder jexlBuilder1 = jexlBuilder0.silent(true);
      Engine engine0 = new Engine(jexlBuilder1);
      boolean boolean0 = engine0.isSilent();
}"
3636,"    public boolean isCancellable() {
        return this.cancellable;
    }","  public void test73()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.debug(false);
      Engine engine0 = new Engine(jexlBuilder0);
      boolean boolean0 = engine0.isDebug();
}"
3637,"    public boolean isDebug() {
        return this.debug;
    }","  public void test74()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.debug(false);
      Engine engine0 = new Engine(jexlBuilder0);
      boolean boolean0 = engine0.isDebug();
}"
3638,"    public boolean isCancellable() {
        return this.cancellable;
    }","  public void test75()  throws Throwable  {
      Engine engine0 = new Engine();
      Object[] objectArray0 = new Object[9];
      JexlInfo jexlInfo0 = new JexlInfo(""V_g^f"", 15, 1);
      Script script0 = engine0.createScript(engine0.DEFAULT_FEATURES, jexlInfo0, ""V_g^f"", (String[]) null);
      Closure closure0 = new Closure(script0, objectArray0);
      ASTJexlScript aSTJexlScript0 = closure0.script;
      Set<List<String>> set0 = engine0.getVariables(aSTJexlScript0);
}"
3639,"    public boolean isDebug() {
        return this.debug;
    }","  public void test76()  throws Throwable  {
      Engine engine0 = new Engine();
      Object[] objectArray0 = new Object[9];
      JexlInfo jexlInfo0 = new JexlInfo(""V_g^f"", 15, 1);
      Script script0 = engine0.createScript(engine0.DEFAULT_FEATURES, jexlInfo0, ""V_g^f"", (String[]) null);
      Closure closure0 = new Closure(script0, objectArray0);
      ASTJexlScript aSTJexlScript0 = closure0.script;
      Set<List<String>> set0 = engine0.getVariables(aSTJexlScript0);
}"
3640,"    protected Set<List<String>> getVariables(final ASTJexlScript script) {
        final VarCollector collector = varCollector();
        getVariables(script, script, collector);
        return collector.collected();
    }","  public void test77()  throws Throwable  {
      Engine engine0 = new Engine();
      Object[] objectArray0 = new Object[9];
      JexlInfo jexlInfo0 = new JexlInfo(""V_g^f"", 15, 1);
      Script script0 = engine0.createScript(engine0.DEFAULT_FEATURES, jexlInfo0, ""V_g^f"", (String[]) null);
      Closure closure0 = new Closure(script0, objectArray0);
      ASTJexlScript aSTJexlScript0 = closure0.script;
      Set<List<String>> set0 = engine0.getVariables(aSTJexlScript0);
}"
3641,"    protected Set<List<String>> getVariables(final ASTJexlScript script) {
        final VarCollector collector = varCollector();
        getVariables(script, script, collector);
        return collector.collected();
    }","  public void test78()  throws Throwable  {
      Engine engine0 = new Engine();
      Object[] objectArray0 = new Object[9];
      JexlInfo jexlInfo0 = new JexlInfo(""V_g^f"", 15, 1);
      Script script0 = engine0.createScript(engine0.DEFAULT_FEATURES, jexlInfo0, ""V_g^f"", (String[]) null);
      Closure closure0 = new Closure(script0, objectArray0);
      ASTJexlScript aSTJexlScript0 = closure0.script;
      Set<List<String>> set0 = engine0.getVariables(aSTJexlScript0);
}"
3642,"    public boolean isCancellable() {
        return this.cancellable;
    }","  public void test79()  throws Throwable  {
      SimpleLog simpleLog0 = new SimpleLog(""j~rnUt_"");
      JexlUberspect.ResolverStrategy jexlUberspect_ResolverStrategy0 = JexlUberspect.MAP_STRATEGY;
      Uberspect uberspect0 = Engine.getUberspect((Log) simpleLog0, jexlUberspect_ResolverStrategy0);
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.uberspect((JexlUberspect) uberspect0);
      Engine engine0 = new Engine(jexlBuilder0);
      engine0.getUberspect();
}"
3643,"    public boolean isDebug() {
        return this.debug;
    }","  public void test80()  throws Throwable  {
      SimpleLog simpleLog0 = new SimpleLog(""j~rnUt_"");
      JexlUberspect.ResolverStrategy jexlUberspect_ResolverStrategy0 = JexlUberspect.MAP_STRATEGY;
      Uberspect uberspect0 = Engine.getUberspect((Log) simpleLog0, jexlUberspect_ResolverStrategy0);
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.uberspect((JexlUberspect) uberspect0);
      Engine engine0 = new Engine(jexlBuilder0);
      engine0.getUberspect();
}"
3644,"    protected String[] getParameters(final JexlScript script) {
        return script.getParameters();
    }","  public void test81()  throws Throwable  {
      Engine engine0 = new Engine();
      JexlScript jexlScript0 = engine0.createScript("""");
      engine0.getParameters(jexlScript0);
}"
3645,"    public boolean isCancellable() {
        return this.cancellable;
    }","  public void test82()  throws Throwable  {
      Engine engine0 = new Engine();
      JexlScript jexlScript0 = engine0.createScript("""");
      engine0.getParameters(jexlScript0);
}"
3646,"    public boolean isDebug() {
        return this.debug;
    }","  public void test83()  throws Throwable  {
      Engine engine0 = new Engine();
      JexlScript jexlScript0 = engine0.createScript("""");
      engine0.getParameters(jexlScript0);
}"
3647,"    public boolean isDebug() {
        return this.debug;
    }","  public void test84()  throws Throwable  {
      String[] stringArray0 = new String[4];
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      Scope scope1 = new Scope(scope0, stringArray0);
      Engine engine0 = new Engine();
      JexlOptions jexlOptions0 = new JexlOptions();
      Frame frame0 = new Frame(scope1, stringArray0, 3298);
      Interpreter interpreter0 = new Interpreter(engine0, jexlOptions0, engine0.EMPTY_CONTEXT, frame0);
      ASTJexlLambda aSTJexlLambda0 = mock(ASTJexlLambda.class, new ViolatedAssumptionAnswer());
      doReturn(frame0).when(aSTJexlLambda0).createFrame(any(org.apache.commons.jexl3.internal.Frame.class) , any(java.lang.Object[].class));
      doReturn(stringArray0).when(aSTJexlLambda0).getLocalVariables();
      Closure closure0 = new Closure(interpreter0, aSTJexlLambda0);
      engine0.getLocalVariables(closure0);
}"
3648,"    public boolean isCancellable() {
        return this.cancellable;
    }","  public void test85()  throws Throwable  {
      String[] stringArray0 = new String[4];
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      Scope scope1 = new Scope(scope0, stringArray0);
      Engine engine0 = new Engine();
      JexlOptions jexlOptions0 = new JexlOptions();
      Frame frame0 = new Frame(scope1, stringArray0, 3298);
      Interpreter interpreter0 = new Interpreter(engine0, jexlOptions0, engine0.EMPTY_CONTEXT, frame0);
      ASTJexlLambda aSTJexlLambda0 = mock(ASTJexlLambda.class, new ViolatedAssumptionAnswer());
      doReturn(frame0).when(aSTJexlLambda0).createFrame(any(org.apache.commons.jexl3.internal.Frame.class) , any(java.lang.Object[].class));
      doReturn(stringArray0).when(aSTJexlLambda0).getLocalVariables();
      Closure closure0 = new Closure(interpreter0, aSTJexlLambda0);
      engine0.getLocalVariables(closure0);
}"
3649,"    public boolean isDebug() {
        return this.debug;
    }","  public void test86()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.charset((Charset) null);
      Engine engine0 = new Engine(jexlBuilder0);
      engine0.getCharset();
}"
3650,"    public boolean isCancellable() {
        return this.cancellable;
    }","  public void test87()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.charset((Charset) null);
      Engine engine0 = new Engine(jexlBuilder0);
      engine0.getCharset();
}"
3651,"    public boolean isDebug() {
        return this.debug;
    }","  public void test88()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.strict(false);
      Engine engine0 = new Engine(jexlBuilder0);
      engine0.getArithmetic();
}"
3652,"    public boolean isCancellable() {
        return this.cancellable;
    }","  public void test89()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.strict(false);
      Engine engine0 = new Engine(jexlBuilder0);
      engine0.getArithmetic();
}"
3653,"    public boolean isCancellable() {
        return this.cancellable;
    }","  public void test90()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.silent(true);
      Engine engine0 = new Engine(jexlBuilder0);
      engine0.doCreateInstance(engine0, (Object[]) null);
}"
3654,"    public boolean isDebug() {
        return this.debug;
    }","  public void test91()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.silent(true);
      Engine engine0 = new Engine(jexlBuilder0);
      engine0.doCreateInstance(engine0, (Object[]) null);
}"
3655,"    public void setProperty(final Object bean, final String expr, final Object value) {
        setProperty(null, bean, expr, value);
    }","  public void test92()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.strict(false);
      Engine engine0 = new Engine(jexlBuilder0);
      // Undeclared exception!
      try { 
        engine0.setProperty((JexlContext) null, (Object) jexlBuilder0, ""org.apache.commons.jexl3.internal.Engine$UberspectHolder"", (Object) jexlBuilder0);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
      }
  }"
3656,"    public void setProperty(final Object bean, final String expr, final Object value) {
        setProperty(null, bean, expr, value);
    }","  public void test93()  throws Throwable  {
      Engine engine0 = new Engine();
      Parser parser0 = engine0.parser;
      // Undeclared exception!
      try { 
        engine0.setProperty(engine0.EMPTY_CONTEXT, (Object) parser0, (String) null, (Object) ""T'iH.vSdu"");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.internal.Engine"", e);
      }
  }"
3657,"    public void setProperty(final Object bean, final String expr, final Object value) {
        setProperty(null, bean, expr, value);
    }","  public void test94()  throws Throwable  {
      Engine engine0 = new Engine();
      ASTJexlScript aSTJexlScript0 = engine0.parse((JexlInfo) null, true, """", (Scope) null);
      // Undeclared exception!
      try { 
        engine0.setProperty((Object) null, """", (Object) aSTJexlScript0);
        fail(""Expecting exception: StringIndexOutOfBoundsException"");
      } catch(StringIndexOutOfBoundsException e) {
      }
  }"
3658,"    public void setProperty(final Object bean, final String expr, final Object value) {
        setProperty(null, bean, expr, value);
    }","  public void test95()  throws Throwable  {
      Engine engine0 = new Engine();
      JexlInfo jexlInfo0 = engine0.createInfo();
      TemplateEngine templateEngine0 = new TemplateEngine(engine0, true, 47, '{', '{');
      StringBuilder stringBuilder0 = new StringBuilder(""3lW0xjk/y"");
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[5];
      Scope scope1 = new Scope(scope0, stringArray0);
      TemplateEngine.TemplateExpression templateEngine_TemplateExpression0 = templateEngine0.parseExpression(jexlInfo0, ""3lW0xjk/y"", scope1);
      TemplateEngine.ImmediateExpression templateEngine_ImmediateExpression0 = templateEngine0.new ImmediateExpression(stringBuilder0, (JexlNode) null, templateEngine_TemplateExpression0);
      // Undeclared exception!
      try { 
        engine0.setProperty((Object) templateEngine_ImmediateExpression0, (String) null, (Object) ""3lW0xjk/y"");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.internal.Engine"", e);
      }
  }"
3659,"    protected void processPragmas(final ASTJexlScript script, final JexlContext context, final JexlOptions opts) {
        final Map<String, Object> pragmas = script.getPragmas();
        if (pragmas != null && !pragmas.isEmpty()) {
            final JexlContext.PragmaProcessor processor =
                    context instanceof JexlContext.PragmaProcessor
                    ? (JexlContext.PragmaProcessor) context
                    : null;
            Map<String, Object> ns = null;
            for(final Map.Entry<String, Object> pragma : pragmas.entrySet()) {
                final String key = pragma.getKey();
                final Object value = pragma.getValue();
                if (value instanceof String) {
                    if (PRAGMA_OPTIONS.equals(key)) {
                        // jexl.options
                        final String[] vs = value.toString().split("" "");
                        opts.setFlags(vs);
                    } else if (key.startsWith(PRAGMA_JEXLNS)) {
                        // jexl.namespace.***
                        final String nsname = key.substring(PRAGMA_JEXLNS.length());
                        if (nsname != null && !nsname.isEmpty()) {
                            if (ns == null) {
                                ns = new HashMap<>(functions);
                            }
                            final String nsclass = value.toString();
                            try {
                                ns.put(nsname, uberspect.getClassLoader().loadClass(nsclass));
                            } catch (final ClassNotFoundException e) {
                                ns.put(nsname, nsclass);
                            }
                        }
                    }
                }
                if (processor != null) {
                    processor.processPragma(key, value);
                }
            }
            if (ns != null) {
                opts.setNamespaces(ns);
            }
        }
    }","  public void test96()  throws Throwable  {
      Engine engine0 = new Engine();
      JexlEngine.EmptyContext jexlEngine_EmptyContext0 = (JexlEngine.EmptyContext)JexlEngine.EMPTY_CONTEXT;
      JexlOptions jexlOptions0 = engine0.options(jexlEngine_EmptyContext0);
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Boolean boolean0 = jexlBuilder0.safe();
      ObjectContext<Boolean> objectContext0 = new ObjectContext<Boolean>(engine0, boolean0);
      // Undeclared exception!
      try { 
        engine0.processPragmas((ASTJexlScript) null, objectContext0, jexlOptions0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.internal.Engine"", e);
      }
  }"
3660,"    protected ASTJexlScript parse(final JexlInfo info, final boolean expr, final String src, final Scope scope) {
        return parse(info, expr? this.expressionFeatures : this.scriptFeatures, src, scope);
    }","  public void test97()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      MathContext mathContext0 = MathContext.DECIMAL32;
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(scope0).getArgCount();
      doReturn((Integer) null, (Integer) null, (Integer) null).when(scope0).getSymbol(anyString());
      Engine engine0 = new Engine();
      JexlInfo jexlInfo0 = new JexlInfo("""", 91, 24);
      // Undeclared exception!
      try { 
        engine0.parse(jexlInfo0, false, ""s 5`?Z<^\""!o}i"", scope0);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
      }
  }"
3661,"    protected ASTJexlScript parse(final JexlInfo info, final boolean expr, final String src, final Scope scope) {
        return parse(info, expr? this.expressionFeatures : this.scriptFeatures, src, scope);
    }","  public void test98()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[1];
      Scope scope1 = new Scope(scope0, stringArray0);
      JexlInfo jexlInfo0 = engine0.createInfo(""uberspect can not be null"", 91, 91);
      // Undeclared exception!
      try { 
        engine0.parse(jexlInfo0, false, ""uberspect can not be null"", scope1);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // @1:11 ambiguous statement error in 'uberspect can not be null'
         //
         verifyException(""org.apache.commons.jexl3.parser.JexlParser"", e);
      }
  }"
3662,"    protected ASTJexlScript parse(final JexlInfo info, final boolean expr, final String src, final Scope scope) {
        return parse(info, expr? this.expressionFeatures : this.scriptFeatures, src, scope);
    }","  public void test99()  throws Throwable  {
      Engine engine0 = new Engine();
      JexlInfo jexlInfo0 = new JexlInfo();
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[3];
      Scope scope1 = new Scope(scope0, stringArray0);
      // Undeclared exception!
      try { 
        engine0.parse(jexlInfo0, true, (String) null, scope1);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.internal.Engine"", e);
      }
  }"
3663,"    public static Uberspect getUberspect(final Log logger, final JexlUberspect.ResolverStrategy strategy) {
        if ((logger == null || logger.equals(LogFactory.getLog(JexlEngine.class)))
            && (strategy == null || strategy == JexlUberspect.JEXL_STRATEGY)) {
            return UberspectHolder.UBERSPECT;
        }
        return new Uberspect(logger, strategy);
    }","  public void test100()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlBuilder jexlBuilder1 = jexlBuilder0.collectAll(false);
      JexlBuilder jexlBuilder2 = jexlBuilder1.debug(false);
      JexlSandbox jexlSandbox0 = new JexlSandbox(true, false);
      JexlSandbox jexlSandbox1 = jexlSandbox0.copy();
      JexlBuilder jexlBuilder3 = jexlBuilder2.sandbox(jexlSandbox1);
      Engine engine0 = new Engine(jexlBuilder3);
      JexlContext.ThreadLocal jexlContext_ThreadLocal0 = JexlEngine.getThreadContext();
      engine0.putThreadLocal((JexlContext.ThreadLocal) null);
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      doReturn((Frame) null).when(scope0).createFrame(any(org.apache.commons.jexl3.internal.Frame.class) , any(java.lang.Object[].class));
      doReturn(0).when(scope0).getArgCount();
      doReturn((Integer) null, (Integer) null, (Integer) null, (Integer) null, (Integer) null).when(scope0).getSymbol(anyString());
      String[] stringArray0 = new String[1];
      stringArray0[0] = ""Hsm"";
      Scope scope1 = new Scope(scope0, stringArray0);
      int int0 = 91;
      Frame frame0 = new Frame(scope1, stringArray0, 91);
      Frame frame1 = scope1.createFrame(frame0, stringArray0);
      JexlEngine.EmptyContext jexlEngine_EmptyContext0 = (JexlEngine.EmptyContext)JexlEngine.EMPTY_CONTEXT;
      JexlOptions jexlOptions0 = engine0.options(jexlEngine_EmptyContext0);
      JexlOptions jexlOptions1 = engine0.optionsSet(jexlOptions0);
      Interpreter interpreter0 = engine0.createInterpreter((JexlContext) null, frame1, jexlOptions1);
      Jdk14Logger jdk14Logger0 = (Jdk14Logger)interpreter0.logger;
      JexlUberspect.ResolverStrategy jexlUberspect_ResolverStrategy0 = JexlUberspect.MAP_STRATEGY;
      Uberspect uberspect0 = Engine.getUberspect((Log) jdk14Logger0, jexlUberspect_ResolverStrategy0);
}"
3664,"    public boolean isCancellable() {
        return this.cancellable;
    }","  public void test101()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlBuilder jexlBuilder1 = jexlBuilder0.collectAll(false);
      JexlBuilder jexlBuilder2 = jexlBuilder1.debug(false);
      JexlSandbox jexlSandbox0 = new JexlSandbox(true, false);
      JexlSandbox jexlSandbox1 = jexlSandbox0.copy();
      JexlBuilder jexlBuilder3 = jexlBuilder2.sandbox(jexlSandbox1);
      Engine engine0 = new Engine(jexlBuilder3);
      JexlContext.ThreadLocal jexlContext_ThreadLocal0 = JexlEngine.getThreadContext();
      engine0.putThreadLocal((JexlContext.ThreadLocal) null);
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      doReturn((Frame) null).when(scope0).createFrame(any(org.apache.commons.jexl3.internal.Frame.class) , any(java.lang.Object[].class));
      doReturn(0).when(scope0).getArgCount();
      doReturn((Integer) null, (Integer) null, (Integer) null, (Integer) null, (Integer) null).when(scope0).getSymbol(anyString());
      String[] stringArray0 = new String[1];
      stringArray0[0] = ""Hsm"";
      Scope scope1 = new Scope(scope0, stringArray0);
      int int0 = 91;
      Frame frame0 = new Frame(scope1, stringArray0, 91);
      Frame frame1 = scope1.createFrame(frame0, stringArray0);
      JexlEngine.EmptyContext jexlEngine_EmptyContext0 = (JexlEngine.EmptyContext)JexlEngine.EMPTY_CONTEXT;
      JexlOptions jexlOptions0 = engine0.options(jexlEngine_EmptyContext0);
      JexlOptions jexlOptions1 = engine0.optionsSet(jexlOptions0);
      Interpreter interpreter0 = engine0.createInterpreter((JexlContext) null, frame1, jexlOptions1);
      Jdk14Logger jdk14Logger0 = (Jdk14Logger)interpreter0.logger;
      JexlUberspect.ResolverStrategy jexlUberspect_ResolverStrategy0 = JexlUberspect.MAP_STRATEGY;
      Uberspect uberspect0 = Engine.getUberspect((Log) jdk14Logger0, jexlUberspect_ResolverStrategy0);
      Engine engine1 = new Engine();
      String string0 = ""uberspect can not be null"";
      JexlInfo jexlInfo0 = engine1.createInfo(""uberspect can not be null"", 91, 91);
      ASTJexlScript aSTJexlScript0 = engine1.parse(jexlInfo0, engine1.DEFAULT_FEATURES, ""Hsm"", scope0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Frame frame2 = aSTJexlScript0.createFrame((Object[]) stringArray0);
      engine0.createInterpreter(jexlContext_ThreadLocal0, frame2, jexlOptions0);
}"
3665,"    public boolean isDebug() {
        return this.debug;
    }","  public void test102()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlBuilder jexlBuilder1 = jexlBuilder0.collectAll(false);
      JexlBuilder jexlBuilder2 = jexlBuilder1.debug(false);
      JexlSandbox jexlSandbox0 = new JexlSandbox(true, false);
      JexlSandbox jexlSandbox1 = jexlSandbox0.copy();
      JexlBuilder jexlBuilder3 = jexlBuilder2.sandbox(jexlSandbox1);
      Engine engine0 = new Engine(jexlBuilder3);
      JexlContext.ThreadLocal jexlContext_ThreadLocal0 = JexlEngine.getThreadContext();
      engine0.putThreadLocal((JexlContext.ThreadLocal) null);
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      doReturn((Frame) null).when(scope0).createFrame(any(org.apache.commons.jexl3.internal.Frame.class) , any(java.lang.Object[].class));
      doReturn(0).when(scope0).getArgCount();
      doReturn((Integer) null, (Integer) null, (Integer) null, (Integer) null, (Integer) null).when(scope0).getSymbol(anyString());
      String[] stringArray0 = new String[1];
      stringArray0[0] = ""Hsm"";
      Scope scope1 = new Scope(scope0, stringArray0);
      int int0 = 91;
      Frame frame0 = new Frame(scope1, stringArray0, 91);
      Frame frame1 = scope1.createFrame(frame0, stringArray0);
      JexlEngine.EmptyContext jexlEngine_EmptyContext0 = (JexlEngine.EmptyContext)JexlEngine.EMPTY_CONTEXT;
      JexlOptions jexlOptions0 = engine0.options(jexlEngine_EmptyContext0);
      JexlOptions jexlOptions1 = engine0.optionsSet(jexlOptions0);
      Interpreter interpreter0 = engine0.createInterpreter((JexlContext) null, frame1, jexlOptions1);
      Jdk14Logger jdk14Logger0 = (Jdk14Logger)interpreter0.logger;
      JexlUberspect.ResolverStrategy jexlUberspect_ResolverStrategy0 = JexlUberspect.MAP_STRATEGY;
      Uberspect uberspect0 = Engine.getUberspect((Log) jdk14Logger0, jexlUberspect_ResolverStrategy0);
      Engine engine1 = new Engine();
      String string0 = ""uberspect can not be null"";
      JexlInfo jexlInfo0 = engine1.createInfo(""uberspect can not be null"", 91, 91);
      ASTJexlScript aSTJexlScript0 = engine1.parse(jexlInfo0, engine1.DEFAULT_FEATURES, ""Hsm"", scope0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Frame frame2 = aSTJexlScript0.createFrame((Object[]) stringArray0);
      engine0.createInterpreter(jexlContext_ThreadLocal0, frame2, jexlOptions0);
}"
3666,"    public boolean isDebug() {
        return this.debug;
    }","  public void test103()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlBuilder jexlBuilder1 = jexlBuilder0.collectAll(false);
      JexlBuilder jexlBuilder2 = jexlBuilder1.debug(false);
      JexlSandbox jexlSandbox0 = new JexlSandbox(true, false);
      JexlSandbox jexlSandbox1 = jexlSandbox0.copy();
      JexlBuilder jexlBuilder3 = jexlBuilder2.sandbox(jexlSandbox1);
      Engine engine0 = new Engine(jexlBuilder3);
      JexlContext.ThreadLocal jexlContext_ThreadLocal0 = JexlEngine.getThreadContext();
      engine0.putThreadLocal((JexlContext.ThreadLocal) null);
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      doReturn((Frame) null).when(scope0).createFrame(any(org.apache.commons.jexl3.internal.Frame.class) , any(java.lang.Object[].class));
      doReturn(0).when(scope0).getArgCount();
      doReturn((Integer) null, (Integer) null, (Integer) null, (Integer) null, (Integer) null).when(scope0).getSymbol(anyString());
      String[] stringArray0 = new String[1];
      stringArray0[0] = ""Hsm"";
      Scope scope1 = new Scope(scope0, stringArray0);
      int int0 = 91;
      Frame frame0 = new Frame(scope1, stringArray0, 91);
      Frame frame1 = scope1.createFrame(frame0, stringArray0);
      JexlEngine.EmptyContext jexlEngine_EmptyContext0 = (JexlEngine.EmptyContext)JexlEngine.EMPTY_CONTEXT;
      JexlOptions jexlOptions0 = engine0.options(jexlEngine_EmptyContext0);
      JexlOptions jexlOptions1 = engine0.optionsSet(jexlOptions0);
      Interpreter interpreter0 = engine0.createInterpreter((JexlContext) null, frame1, jexlOptions1);
      Jdk14Logger jdk14Logger0 = (Jdk14Logger)interpreter0.logger;
      JexlUberspect.ResolverStrategy jexlUberspect_ResolverStrategy0 = JexlUberspect.MAP_STRATEGY;
      Uberspect uberspect0 = Engine.getUberspect((Log) jdk14Logger0, jexlUberspect_ResolverStrategy0);
      Engine engine1 = new Engine();
      String string0 = ""uberspect can not be null"";
      JexlInfo jexlInfo0 = engine1.createInfo(""uberspect can not be null"", 91, 91);
      ASTJexlScript aSTJexlScript0 = engine1.parse(jexlInfo0, engine1.DEFAULT_FEATURES, ""Hsm"", scope0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Frame frame2 = aSTJexlScript0.createFrame((Object[]) stringArray0);
      engine0.createInterpreter(jexlContext_ThreadLocal0, frame2, jexlOptions0);
      Jdk13LumberjackLogger jdk13LumberjackLogger0 = new Jdk13LumberjackLogger(string0);
      Engine.getUberspect((Log) jdk13LumberjackLogger0, jexlUberspect_ResolverStrategy0);
      Engine.VarCollector engine_VarCollector0 = new Engine.VarCollector(int0);
      engine1.getVariables(aSTJexlScript0, aSTJexlScript0, engine_VarCollector0);
}"
3667,"    protected ASTJexlScript parse(final JexlInfo info, final boolean expr, final String src, final Scope scope) {
        return parse(info, expr? this.expressionFeatures : this.scriptFeatures, src, scope);
    }","  public void test104()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      doReturn(36, 1262, 624, 624, Integer.MAX_VALUE).when(scope0).getArgCount();
      JexlInfo jexlInfo0 = engine0.createInfo(""uberspect can not be null"", 54, 54);
      // Undeclared exception!
      engine0.parse(jexlInfo0, engine0.DEFAULT_FEATURES, ""Hsm"", scope0);
  }"
3668,"    protected ASTJexlScript parse(final JexlInfo info, final boolean expr, final String src, final Scope scope) {
        return parse(info, expr? this.expressionFeatures : this.scriptFeatures, src, scope);
    }","  public void test105()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[5];
      Scope scope1 = new Scope(scope0, stringArray0);
      // Undeclared exception!
      try { 
        engine0.parse((JexlInfo) null, engine0.DEFAULT_FEATURES, ""Not supported in void context."", scope1);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // @1:5 ambiguous statement error in 'Not supported in void context.'
         //
         verifyException(""org.apache.commons.jexl3.parser.JexlParser"", e);
      }
  }"
3669,"    protected ASTJexlScript parse(final JexlInfo info, final boolean expr, final String src, final Scope scope) {
        return parse(info, expr? this.expressionFeatures : this.scriptFeatures, src, scope);
    }","  public void test106()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[3];
      Scope scope1 = new Scope(scope0, stringArray0);
      // Undeclared exception!
      try { 
        engine0.parse((JexlInfo) null, engine0.DEFAULT_FEATURES, "",SF|K*d"", scope1);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
      }
  }"
3670,"    protected ASTJexlScript parse(final JexlInfo info, final boolean expr, final String src, final Scope scope) {
        return parse(info, expr? this.expressionFeatures : this.scriptFeatures, src, scope);
    }","  public void test107()  throws Throwable  {
      Engine engine0 = new Engine();
      JexlInfo jexlInfo0 = new JexlInfo();
      // Undeclared exception!
      try { 
        engine0.parse(jexlInfo0, engine0.DEFAULT_FEATURES, (String) null, (Scope) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.internal.Engine"", e);
      }
  }"
3671,"    public <T> T newInstance(final Class<? extends T> clazz, final Object... args) {
        return clazz.cast(doCreateInstance(clazz, args));
    }","  public void test108()  throws Throwable  {
      Engine engine0 = new Engine();
      Object[] objectArray0 = new Object[5];
      // Undeclared exception!
      try { 
        engine0.newInstance((String) null, objectArray0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.evosuite.runtime.System"", e);
      }
  }"
3672,"    public Object invokeMethod(final Object obj, final String meth, final Object... args) {
        JexlException xjexl = null;
        Object result = null;
        final JexlInfo info = debug ? createInfo() : null;
        try {
            JexlMethod method = uberspect.getMethod(obj, meth, args);
            if (method == null && arithmetic.narrowArguments(args)) {
                method = uberspect.getMethod(obj, meth, args);
            }
            if (method != null) {
                result = method.invoke(obj, args);
            } else {
                xjexl = new JexlException.Method(info, meth, args);
            }
        } catch (final JexlException xany) {
            xjexl = xany;
        } catch (final Exception xany) {
            xjexl = new JexlException.Method(info, meth, args, xany);
        }
        if (xjexl != null) {
            if (!silent) {
                throw xjexl.clean();
            }
            logger.warn(xjexl.getMessage(), xjexl.getCause());
            result = null;
        }
        return result;
    }","  public void test109()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      Object[] objectArray0 = new Object[8];
      // Undeclared exception!
      try { 
        engine0.invokeMethod(jexlBuilder0, (String) null, objectArray0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
      }
  }"
3673,"    protected Set<List<String>> getVariables(final ASTJexlScript script) {
        final VarCollector collector = varCollector();
        getVariables(script, script, collector);
        return collector.collected();
    }","  public void test110()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      Engine.VarCollector engine_VarCollector0 = new Engine.VarCollector(6);
      // Undeclared exception!
      try { 
        engine0.getVariables((ASTJexlScript) null, (JexlNode) null, engine_VarCollector0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.internal.Engine"", e);
      }
  }"
3674,"    protected Set<List<String>> getVariables(final ASTJexlScript script) {
        final VarCollector collector = varCollector();
        getVariables(script, script, collector);
        return collector.collected();
    }","  public void test111()  throws Throwable  {
      Engine engine0 = new Engine();
      // Undeclared exception!
      try { 
        engine0.getVariables((ASTJexlScript) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.internal.Engine"", e);
      }
  }"
3675,"    public Object getProperty(final Object bean, final String expr) {
        return getProperty(null, bean, expr);
    }","  public void test112()  throws Throwable  {
      Engine engine0 = new Engine();
      JexlEngine.EmptyContext jexlEngine_EmptyContext0 = (JexlEngine.EmptyContext)JexlEngine.EMPTY_CONTEXT;
      // Undeclared exception!
      try { 
        engine0.getProperty((JexlContext) jexlEngine_EmptyContext0, (Object) jexlEngine_EmptyContext0, (String) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.internal.Engine"", e);
      }
  }"
3676,"    public Object getProperty(final Object bean, final String expr) {
        return getProperty(null, bean, expr);
    }","  public void test113()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      ObjectContext<Boolean> objectContext0 = new ObjectContext<Boolean>(engine0, (Boolean) null);
      // Undeclared exception!
      try { 
        engine0.getProperty((JexlContext) objectContext0, (Object) null, ""jexl.options"");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.internal.introspection.Uberspect"", e);
      }
  }"
3677,"    public Object getProperty(final Object bean, final String expr) {
        return getProperty(null, bean, expr);
    }","  public void test114()  throws Throwable  {
      Engine engine0 = new Engine();
      SoftCache<ASTIdentifierAccess, ASTIdentifier> softCache0 = new SoftCache<ASTIdentifierAccess, ASTIdentifier>(1190);
      Map<String, Object> map0 = softCache0.createCache(1190);
      MapContext mapContext0 = new MapContext(map0);
      ASTJexlScript aSTJexlScript0 = new ASTJexlScript(1190);
      // Undeclared exception!
      try { 
        engine0.getProperty((JexlContext) mapContext0, (Object) aSTJexlScript0, "".S.jh"");
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1190
         //
         verifyException(""org.apache.commons.jexl3.parser.SimpleNode"", e);
      }
  }"
3678,"    public Object getProperty(final Object bean, final String expr) {
        return getProperty(null, bean, expr);
    }","  public void test115()  throws Throwable  {
      Engine engine0 = new Engine();
      // Undeclared exception!
      try { 
        engine0.getProperty((Object) """", """");
        fail(""Expecting exception: StringIndexOutOfBoundsException"");
      } catch(StringIndexOutOfBoundsException e) {
      }
  }"
3679,"    protected String[] getParameters(final JexlScript script) {
        return script.getParameters();
    }","  public void test116()  throws Throwable  {
      Engine engine0 = new Engine();
      // Undeclared exception!
      try { 
        engine0.getParameters((JexlScript) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.internal.Engine"", e);
      }
  }"
3680,"    protected String[] getLocalVariables(final JexlScript script) {
        return script.getLocalVariables();
    }","  public void test117()  throws Throwable  {
      Engine engine0 = new Engine();
      // Undeclared exception!
      try { 
        engine0.getLocalVariables((JexlScript) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.internal.Engine"", e);
      }
  }"
3681,"    protected Object doCreateInstance(final Object clazz, final Object... args) {
        JexlException xjexl = null;
        Object result = null;
        final JexlInfo info = debug ? createInfo() : null;
        try {
            JexlMethod ctor = uberspect.getConstructor(clazz, args);
            if (ctor == null && arithmetic.narrowArguments(args)) {
                ctor = uberspect.getConstructor(clazz, args);
            }
            if (ctor != null) {
                result = ctor.invoke(clazz, args);
            } else {
                xjexl = new JexlException.Method(info, clazz.toString(), args);
            }
        } catch (final JexlException xany) {
            xjexl = xany;
        } catch (final Exception xany) {
            xjexl = new JexlException.Method(info, clazz.toString(), args, xany);
        }
        if (xjexl != null) {
            if (silent) {
                logger.warn(xjexl.getMessage(), xjexl.getCause());
                return null;
            }
            throw xjexl.clean();
        }
        return result;
    }","  public void test118()  throws Throwable  {
      Engine engine0 = new Engine();
      Object[] objectArray0 = new Object[9];
      // Undeclared exception!
      try { 
        engine0.doCreateInstance(objectArray0[3], objectArray0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.evosuite.runtime.System"", e);
      }
  }"
3682,"    public Script createScript(final JexlFeatures features, final JexlInfo info, final String scriptText, final String... names) {
        if (scriptText == null) {
            throw new NullPointerException(""source is null"");
        }
        final String source = trimSource(scriptText);
        final Scope scope = names == null || names.length == 0? null : new Scope(null, names);
        final JexlFeatures ftrs = features == null? scriptFeatures : features;
        final ASTJexlScript tree = parse(info, ftrs, source, scope);
        return new Script(this, source, tree);
    }","  public void test119()  throws Throwable  {
      Engine engine0 = new Engine();
      String[] stringArray0 = new String[2];
      // Undeclared exception!
      try { 
        engine0.createScript((JexlFeatures) null, (JexlInfo) null, ""x~C1c"", stringArray0);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // @1:2 ambiguous statement error in 'x~C1c'
         //
         verifyException(""org.apache.commons.jexl3.parser.JexlParser"", e);
      }
  }"
3683,"    public Script createExpression(final JexlInfo info, final String expression) {
        return createScript(expressionFeatures, info, expression, null);
    }","  public void test120()  throws Throwable  {
      Engine engine0 = new Engine();
      // Undeclared exception!
      try { 
        engine0.createExpression((JexlInfo) null, ""cY+{pt{r:\""hJJWIj"");
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
      }
  }"
3684,"    public Script createExpression(final JexlInfo info, final String expression) {
        return createScript(expressionFeatures, info, expression, null);
    }","  public void test121()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      JexlInfo jexlInfo0 = new JexlInfo();
      // Undeclared exception!
      try { 
        engine0.createExpression(jexlInfo0, (String) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // source is null
         //
         verifyException(""org.apache.commons.jexl3.internal.Engine"", e);
      }
  }"
3685,"    public Engine() {
        this(new JexlBuilder());
    }","  public void test122()  throws Throwable  {
      Engine engine0 = null;
      try {
        engine0 = new Engine((JexlBuilder) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
3686,"    public boolean isCancellable() {
        return this.cancellable;
    }","  public void test123()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      Integer integer0 = new Integer(36);
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      doReturn(36, 106, 167, 16, (-454)).when(scope0).getArgCount();
      doReturn(integer0, integer0, integer0, integer0, integer0).when(scope0).getSymbol(anyString());
      doReturn(true, true).when(scope0).isCapturedSymbol(anyInt());
      JexlInfo jexlInfo0 = engine0.createInfo(""uberspect can not be null"", 54, 54);
      ASTJexlScript aSTJexlScript0 = engine0.parse(jexlInfo0, engine0.DEFAULT_FEATURES, ""Hsm"", scope0);
      Engine.VarCollector engine_VarCollector0 = new Engine.VarCollector(54);
      engine0.getVariables(aSTJexlScript0, aSTJexlScript0, engine_VarCollector0);
}"
3687,"    public boolean isDebug() {
        return this.debug;
    }","  public void test124()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      Integer integer0 = new Integer(36);
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      doReturn(36, 106, 167, 16, (-454)).when(scope0).getArgCount();
      doReturn(integer0, integer0, integer0, integer0, integer0).when(scope0).getSymbol(anyString());
      doReturn(true, true).when(scope0).isCapturedSymbol(anyInt());
      JexlInfo jexlInfo0 = engine0.createInfo(""uberspect can not be null"", 54, 54);
      ASTJexlScript aSTJexlScript0 = engine0.parse(jexlInfo0, engine0.DEFAULT_FEATURES, ""Hsm"", scope0);
      Engine.VarCollector engine_VarCollector0 = new Engine.VarCollector(54);
      engine0.getVariables(aSTJexlScript0, aSTJexlScript0, engine_VarCollector0);
}"
3688,"    public boolean isDebug() {
        return this.debug;
    }","  public void test125()  throws Throwable  {
      Engine engine0 = new Engine();
      Engine.VarCollector engine_VarCollector0 = engine0.varCollector();
      engine_VarCollector0.add(""VEE\""w*I"");
      ASTUnaryPlusNode aSTUnaryPlusNode0 = new ASTUnaryPlusNode(35);
      engine_VarCollector0.collect(aSTUnaryPlusNode0);
}"
3689,"    public boolean isCancellable() {
        return this.cancellable;
    }","  public void test126()  throws Throwable  {
      Engine engine0 = new Engine();
      Engine.VarCollector engine_VarCollector0 = engine0.varCollector();
      engine_VarCollector0.add(""VEE\""w*I"");
      ASTUnaryPlusNode aSTUnaryPlusNode0 = new ASTUnaryPlusNode(35);
      engine_VarCollector0.collect(aSTUnaryPlusNode0);
}"
3690,"    public void setProperty(final Object bean, final String expr, final Object value) {
        setProperty(null, bean, expr, value);
    }","  public void test127()  throws Throwable  {
      Engine engine0 = new Engine();
      // Undeclared exception!
      try { 
        engine0.setProperty((JexlContext) null, (Object) null, ""/vn|Co"", (Object) null);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
      }
  }"
3691,"    public void setProperty(final Object bean, final String expr, final Object value) {
        setProperty(null, bean, expr, value);
    }","  public void test128()  throws Throwable  {
      Engine engine0 = new Engine();
      Parser parser0 = engine0.parser;
      ASTFunctionNode aSTFunctionNode0 = new ASTFunctionNode(parser0, (-1781));
      // Undeclared exception!
      try { 
        engine0.setProperty((JexlContext) null, (Object) aSTFunctionNode0, """", (Object) """");
        fail(""Expecting exception: StringIndexOutOfBoundsException"");
      } catch(StringIndexOutOfBoundsException e) {
      }
  }"
3692,"    public boolean isDebug() {
        return this.debug;
    }","  public void test129()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.silent(true);
      Engine engine0 = new Engine(jexlBuilder0);
      Boolean boolean0 = Boolean.FALSE;
      ObjectContext<Boolean> objectContext0 = new ObjectContext<Boolean>(engine0, boolean0);
      engine0.getProperty((JexlContext) objectContext0, (Object) engine0, ""C0s}kXu[+."");
}"
3693,"    public boolean isCancellable() {
        return this.cancellable;
    }","  public void test130()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.silent(true);
      Engine engine0 = new Engine(jexlBuilder0);
      Boolean boolean0 = Boolean.FALSE;
      ObjectContext<Boolean> objectContext0 = new ObjectContext<Boolean>(engine0, boolean0);
      engine0.getProperty((JexlContext) objectContext0, (Object) engine0, ""C0s}kXu[+."");
}"
3694,"    public Object getProperty(final Object bean, final String expr) {
        return getProperty(null, bean, expr);
    }","  public void test131()  throws Throwable  {
      Engine engine0 = new Engine();
      ASTJexlScript aSTJexlScript0 = new ASTJexlScript((-2782));
      // Undeclared exception!
      try { 
        engine0.getProperty((JexlContext) null, (Object) aSTJexlScript0, """");
        fail(""Expecting exception: StringIndexOutOfBoundsException"");
      } catch(StringIndexOutOfBoundsException e) {
      }
  }"
3695,"    public Script createScript(final JexlFeatures features, final JexlInfo info, final String scriptText, final String... names) {
        if (scriptText == null) {
            throw new NullPointerException(""source is null"");
        }
        final String source = trimSource(scriptText);
        final Scope scope = names == null || names.length == 0? null : new Scope(null, names);
        final JexlFeatures ftrs = features == null? scriptFeatures : features;
        final ASTJexlScript tree = parse(info, ftrs, source, scope);
        return new Script(this, source, tree);
    }","  public void test132()  throws Throwable  {
      Engine engine0 = new Engine();
      String[] stringArray0 = new String[0];
      Script script0 = engine0.createScript(engine0.DEFAULT_FEATURES, (JexlInfo) null, """", stringArray0);
}"
3696,"    public boolean isDebug() {
        return this.debug;
    }","  public void test133()  throws Throwable  {
      Engine engine0 = new Engine();
      String[] stringArray0 = new String[0];
      Script script0 = engine0.createScript(engine0.DEFAULT_FEATURES, (JexlInfo) null, """", stringArray0);
}"
3697,"    public boolean isCancellable() {
        return this.cancellable;
    }","  public void test134()  throws Throwable  {
      Engine engine0 = new Engine();
      String[] stringArray0 = new String[0];
      Script script0 = engine0.createScript(engine0.DEFAULT_FEATURES, (JexlInfo) null, """", stringArray0);
}"
3698,"    public boolean isCancellable() {
        return this.cancellable;
    }","  public void test135()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      JexlFeatures jexlFeatures0 = Engine.PROPERTY_FEATURES;
      JexlBuilder jexlBuilder1 = jexlBuilder0.namespaces((Map<String, Object>) hashMap0);
      hashMap0.putIfAbsent("":G'bR"", jexlFeatures0);
      Engine engine0 = new Engine(jexlBuilder1);
      JexlFeatures jexlFeatures1 = engine0.expressionFeatures;
      jexlBuilder0.features(jexlFeatures1);
      Engine engine1 = new Engine(jexlBuilder0);
}"
3699,"    public boolean isDebug() {
        return this.debug;
    }","  public void test136()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      JexlFeatures jexlFeatures0 = Engine.PROPERTY_FEATURES;
      JexlBuilder jexlBuilder1 = jexlBuilder0.namespaces((Map<String, Object>) hashMap0);
      hashMap0.putIfAbsent("":G'bR"", jexlFeatures0);
      Engine engine0 = new Engine(jexlBuilder1);
      JexlFeatures jexlFeatures1 = engine0.expressionFeatures;
      jexlBuilder0.features(jexlFeatures1);
      Engine engine1 = new Engine(jexlBuilder0);
}"
3700,"    public Engine() {
        this(new JexlBuilder());
    }","  public void test137()  throws Throwable  {
      Engine.VarCollector engine_VarCollector0 = new Engine.VarCollector(0);
      boolean boolean0 = engine_VarCollector0.isCollecting();
}"
3701,"    public boolean isDebug() {
        return this.debug;
    }","  public void test138()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      Engine.VarCollector engine_VarCollector0 = engine0.varCollector();
      engine_VarCollector0.collected();
}"
3702,"    public boolean isCancellable() {
        return this.cancellable;
    }","  public void test139()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      Engine.VarCollector engine_VarCollector0 = engine0.varCollector();
      engine_VarCollector0.collected();
}"
3703,"    protected TemplateEngine jxlt() {
        TemplateEngine e = jxlt;
        if (e == null) {
            synchronized(this) {
                e = jxlt;
                if (e == null) {
                    e = new TemplateEngine(this, true, 0, '$', '#');
                    jxlt = e;
                }
            }
        }
        return e;
    }","  public void test140()  throws Throwable  {
      Engine engine0 = new Engine();
      TemplateEngine templateEngine0 = engine0.jxlt();
      TemplateEngine templateEngine1 = engine0.jxlt();
}"
3704,"    public boolean isCancellable() {
        return this.cancellable;
    }","  public void test141()  throws Throwable  {
      Engine engine0 = new Engine();
      TemplateEngine templateEngine0 = engine0.jxlt();
      TemplateEngine templateEngine1 = engine0.jxlt();
}"
3705,"    protected TemplateEngine jxlt() {
        TemplateEngine e = jxlt;
        if (e == null) {
            synchronized(this) {
                e = jxlt;
                if (e == null) {
                    e = new TemplateEngine(this, true, 0, '$', '#');
                    jxlt = e;
                }
            }
        }
        return e;
    }","  public void test142()  throws Throwable  {
      Engine engine0 = new Engine();
      TemplateEngine templateEngine0 = engine0.jxlt();
      TemplateEngine templateEngine1 = engine0.jxlt();
}"
3706,"    public boolean isDebug() {
        return this.debug;
    }","  public void test143()  throws Throwable  {
      Engine engine0 = new Engine();
      TemplateEngine templateEngine0 = engine0.jxlt();
      TemplateEngine templateEngine1 = engine0.jxlt();
}"
3707,"    public Object getProperty(final Object bean, final String expr) {
        return getProperty(null, bean, expr);
    }","  public void test144()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      Integer integer0 = new Integer((-2975));
      // Undeclared exception!
      try { 
        engine0.getProperty(engine0.EMPTY_CONTEXT, (Object) integer0, ""at "");
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
      }
  }"
3708,"    public boolean isCancellable() {
        return this.cancellable;
    }","  public void test145()  throws Throwable  {
      Engine engine0 = new Engine();
      JexlInfo jexlInfo0 = engine0.createInfo();
      Script script0 = engine0.createExpression(jexlInfo0, "" "");
}"
3709,"    public Script createExpression(final JexlInfo info, final String expression) {
        return createScript(expressionFeatures, info, expression, null);
    }","  public void test146()  throws Throwable  {
      Engine engine0 = new Engine();
      JexlInfo jexlInfo0 = engine0.createInfo();
      Script script0 = engine0.createExpression(jexlInfo0, "" "");
}"
3710,"    public Object getProperty(final Object bean, final String expr) {
        return getProperty(null, bean, expr);
    }","  public void test147()  throws Throwable  {
      Engine engine0 = new Engine();
      String[] stringArray0 = new String[7];
      // Undeclared exception!
      try { 
        engine0.getProperty((Object) ""org.apache.commons.jexl3.internal.Engine"", stringArray0[3]);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.internal.Engine"", e);
      }
  }"
3711,"    public Object getProperty(final Object bean, final String expr) {
        return getProperty(null, bean, expr);
    }","  public void test148()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.debug(false);
      Engine engine0 = new Engine(jexlBuilder0);
      ObjectContext<Boolean> objectContext0 = new ObjectContext<Boolean>(engine0, (Boolean) null);
      // Undeclared exception!
      try { 
        engine0.getProperty((JexlContext) objectContext0, (Object) engine0, ""C0s}kXu[+."");
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
      }
  }"
3712,"    public Script createExpression(final JexlInfo info, final String expression) {
        return createScript(expressionFeatures, info, expression, null);
    }","  public void test149()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.cache(7);
      Engine engine0 = new Engine(jexlBuilder0);
      JexlInfo jexlInfo0 = engine0.createInfo();
      Script script0 = engine0.createExpression(jexlInfo0, """");
}"
3713,"    public boolean isCancellable() {
        return this.cancellable;
    }","  public void test150()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.cache(7);
      Engine engine0 = new Engine(jexlBuilder0);
      JexlInfo jexlInfo0 = engine0.createInfo();
      Script script0 = engine0.createExpression(jexlInfo0, """");
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[7];
      Scope scope1 = new Scope(scope0, stringArray0);
      ASTJexlScript aSTJexlScript0 = engine0.parse(jexlInfo0, true, """", scope1);
}"
3714,"    protected ASTJexlScript parse(final JexlInfo info, final boolean expr, final String src, final Scope scope) {
        return parse(info, expr? this.expressionFeatures : this.scriptFeatures, src, scope);
    }","  public void test151()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.cache(7);
      Engine engine0 = new Engine(jexlBuilder0);
      JexlInfo jexlInfo0 = engine0.createInfo();
      Script script0 = engine0.createExpression(jexlInfo0, """");
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[7];
      Scope scope1 = new Scope(scope0, stringArray0);
      ASTJexlScript aSTJexlScript0 = engine0.parse(jexlInfo0, true, """", scope1);
}"
3715,"    protected ASTJexlScript parse(final JexlInfo info, final boolean expr, final String src, final Scope scope) {
        return parse(info, expr? this.expressionFeatures : this.scriptFeatures, src, scope);
    }","  public void test152()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.cache(7);
      Engine engine0 = new Engine(jexlBuilder0);
      JexlInfo jexlInfo0 = engine0.createInfo();
      Script script0 = engine0.createExpression(jexlInfo0, """");
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[7];
      Scope scope1 = new Scope(scope0, stringArray0);
      ASTJexlScript aSTJexlScript0 = engine0.parse(jexlInfo0, true, """", scope1);
}"
3716,"    public boolean isCancellable() {
        return this.cancellable;
    }","  public void test153()  throws Throwable  {
      Engine engine0 = new Engine();
      JexlInfo jexlInfo0 = engine0.createInfo(""#1"", (-2022), (-2022));
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[3];
      Scope scope1 = new Scope(scope0, stringArray0);
      engine0.parse(jexlInfo0, (JexlFeatures) null, ""antish"", scope1);
}"
3717,"    public boolean isDebug() {
        return this.debug;
    }","  public void test154()  throws Throwable  {
      Engine engine0 = new Engine();
      JexlInfo jexlInfo0 = engine0.createInfo(""#1"", (-2022), (-2022));
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[3];
      Scope scope1 = new Scope(scope0, stringArray0);
      engine0.parse(jexlInfo0, (JexlFeatures) null, ""antish"", scope1);
}"
3718,"    public Script createExpression(final JexlInfo info, final String expression) {
        return createScript(expressionFeatures, info, expression, null);
    }","  public void test155()  throws Throwable  {
      Engine engine0 = new Engine();
      String[] stringArray0 = new String[6];
      JexlInfo jexlInfo0 = new JexlInfo(stringArray0[0], 91, 16);
      Script script0 = engine0.createExpression(jexlInfo0, ""org.apache.commons.jexl3.internal.introspection.SandboxUberspect"");
}"
3719,"    public boolean isDebug() {
        return this.debug;
    }","  public void test156()  throws Throwable  {
      Engine engine0 = new Engine();
      String[] stringArray0 = new String[6];
      JexlInfo jexlInfo0 = new JexlInfo(stringArray0[0], 91, 16);
      Script script0 = engine0.createExpression(jexlInfo0, ""org.apache.commons.jexl3.internal.introspection.SandboxUberspect"");
}"
3720,"    public boolean isCancellable() {
        return this.cancellable;
    }","  public void test157()  throws Throwable  {
      Engine engine0 = new Engine();
      String[] stringArray0 = new String[6];
      JexlInfo jexlInfo0 = new JexlInfo(stringArray0[0], 91, 16);
      Script script0 = engine0.createExpression(jexlInfo0, ""org.apache.commons.jexl3.internal.introspection.SandboxUberspect"");
}"
3721,"    public void setProperty(final Object bean, final String expr, final Object value) {
        setProperty(null, bean, expr, value);
    }","  public void test158()  throws Throwable  {
      Engine engine0 = new Engine();
      ASTJexlScript aSTJexlScript0 = engine0.parse((JexlInfo) null, false, """", (Scope) null);
      JexlOptions jexlOptions0 = engine0.options(aSTJexlScript0, engine0.EMPTY_CONTEXT);
      jexlOptions0.setAntish(false);
      // Undeclared exception!
      try { 
        engine0.setProperty((Object) null, ""n"", (Object) null);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
      }
  }"
3722,"    public boolean isCancellable() {
        return this.cancellable;
    }","  public void test159()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlBuilder jexlBuilder1 = jexlBuilder0.silent(true);
      Engine engine0 = new Engine(jexlBuilder1);
      Object[] objectArray0 = new Object[0];
      engine0.newInstance(""X*fF?$"", objectArray0);
}"
3723,"    public boolean isDebug() {
        return this.debug;
    }","  public void test160()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlBuilder jexlBuilder1 = jexlBuilder0.silent(true);
      Engine engine0 = new Engine(jexlBuilder1);
      Object[] objectArray0 = new Object[0];
      engine0.newInstance(""X*fF?$"", objectArray0);
}"
3724,"    protected Object doCreateInstance(final Object clazz, final Object... args) {
        JexlException xjexl = null;
        Object result = null;
        final JexlInfo info = debug ? createInfo() : null;
        try {
            JexlMethod ctor = uberspect.getConstructor(clazz, args);
            if (ctor == null && arithmetic.narrowArguments(args)) {
                ctor = uberspect.getConstructor(clazz, args);
            }
            if (ctor != null) {
                result = ctor.invoke(clazz, args);
            } else {
                xjexl = new JexlException.Method(info, clazz.toString(), args);
            }
        } catch (final JexlException xany) {
            xjexl = xany;
        } catch (final Exception xany) {
            xjexl = new JexlException.Method(info, clazz.toString(), args, xany);
        }
        if (xjexl != null) {
            if (silent) {
                logger.warn(xjexl.getMessage(), xjexl.getCause());
                return null;
            }
            throw xjexl.clean();
        }
        return result;
    }","  public void test161()  throws Throwable  {
      Engine engine0 = new Engine();
      Integer integer0 = new Integer(93);
      Object[] objectArray0 = new Object[3];
      objectArray0[2] = (Object) integer0;
      // Undeclared exception!
      try { 
        engine0.doCreateInstance(integer0, objectArray0);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
      }
  }"
3725,"    public <T> T newInstance(final Class<? extends T> clazz, final Object... args) {
        return clazz.cast(doCreateInstance(clazz, args));
    }","  public void test162()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.debug(false);
      Engine engine0 = new Engine(jexlBuilder0);
      Object[] objectArray0 = new Object[9];
      // Undeclared exception!
      try { 
        engine0.newInstance(""A5Y/Z3"", objectArray0);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
      }
  }"
3726,"    public boolean isDebug() {
        return this.debug;
    }","  public void test163()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlBuilder jexlBuilder1 = jexlBuilder0.silent(true);
      Engine engine0 = new Engine(jexlBuilder1);
      ASTFunctionNode aSTFunctionNode0 = new ASTFunctionNode((-1));
      Object[] objectArray0 = new Object[0];
      engine0.invokeMethod(aSTFunctionNode0, ""X*fF?$"", objectArray0);
}"
3727,"    public boolean isCancellable() {
        return this.cancellable;
    }","  public void test164()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlBuilder jexlBuilder1 = jexlBuilder0.silent(true);
      Engine engine0 = new Engine(jexlBuilder1);
      ASTFunctionNode aSTFunctionNode0 = new ASTFunctionNode((-1));
      Object[] objectArray0 = new Object[0];
      engine0.invokeMethod(aSTFunctionNode0, ""X*fF?$"", objectArray0);
}"
3728,"    public Object invokeMethod(final Object obj, final String meth, final Object... args) {
        JexlException xjexl = null;
        Object result = null;
        final JexlInfo info = debug ? createInfo() : null;
        try {
            JexlMethod method = uberspect.getMethod(obj, meth, args);
            if (method == null && arithmetic.narrowArguments(args)) {
                method = uberspect.getMethod(obj, meth, args);
            }
            if (method != null) {
                result = method.invoke(obj, args);
            } else {
                xjexl = new JexlException.Method(info, meth, args);
            }
        } catch (final JexlException xany) {
            xjexl = xany;
        } catch (final Exception xany) {
            xjexl = new JexlException.Method(info, meth, args, xany);
        }
        if (xjexl != null) {
            if (!silent) {
                throw xjexl.clean();
            }
            logger.warn(xjexl.getMessage(), xjexl.getCause());
            result = null;
        }
        return result;
    }","  public void test165()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      Integer integer0 = new Integer(119);
      Object[] objectArray0 = new Object[4];
      objectArray0[2] = (Object) integer0;
      // Undeclared exception!
      try { 
        engine0.invokeMethod(integer0, ""X*fF?$"", objectArray0);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
      }
  }"
3729,"    public Object invokeMethod(final Object obj, final String meth, final Object... args) {
        JexlException xjexl = null;
        Object result = null;
        final JexlInfo info = debug ? createInfo() : null;
        try {
            JexlMethod method = uberspect.getMethod(obj, meth, args);
            if (method == null && arithmetic.narrowArguments(args)) {
                method = uberspect.getMethod(obj, meth, args);
            }
            if (method != null) {
                result = method.invoke(obj, args);
            } else {
                xjexl = new JexlException.Method(info, meth, args);
            }
        } catch (final JexlException xany) {
            xjexl = xany;
        } catch (final Exception xany) {
            xjexl = new JexlException.Method(info, meth, args, xany);
        }
        if (xjexl != null) {
            if (!silent) {
                throw xjexl.clean();
            }
            logger.warn(xjexl.getMessage(), xjexl.getCause());
            result = null;
        }
        return result;
    }","  public void test166()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.debug(false);
      Engine engine0 = new Engine(jexlBuilder0);
      Object[] objectArray0 = new Object[3];
      // Undeclared exception!
      try { 
        engine0.invokeMethod((Object) null, ""org.apache.commons.jexl3.internal.Engine$UberspectHolder"", objectArray0);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
      }
  }"
3730,"    public boolean isDebug() {
        return this.debug;
    }","  public void test167()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.silent(true);
      Engine engine0 = new Engine(jexlBuilder0);
      byte[] byteArray0 = new byte[3];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      engine0.setProperty(engine0.EMPTY_CONTEXT, (Object) null, ""C0skXu[+."", (Object) byteArrayInputStream0);
}"
3731,"    public boolean isCancellable() {
        return this.cancellable;
    }","  public void test168()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.silent(true);
      Engine engine0 = new Engine(jexlBuilder0);
      byte[] byteArray0 = new byte[3];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      engine0.setProperty(engine0.EMPTY_CONTEXT, (Object) null, ""C0skXu[+."", (Object) byteArrayInputStream0);
}"
3732,"    public Object getProperty(final Object bean, final String expr) {
        return getProperty(null, bean, expr);
    }","  public void test169()  throws Throwable  {
      Engine engine0 = new Engine();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      MapContext mapContext0 = new MapContext(hashMap0);
      // Undeclared exception!
      try { 
        engine0.getProperty((JexlContext) mapContext0, (Object) ""<v~5##w>>,(\""H44rRKE"", ""[dHUe .`/}"");
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
      }
  }"
3733,"    public Script createScript(final JexlFeatures features, final JexlInfo info, final String scriptText, final String... names) {
        if (scriptText == null) {
            throw new NullPointerException(""source is null"");
        }
        final String source = trimSource(scriptText);
        final Scope scope = names == null || names.length == 0? null : new Scope(null, names);
        final JexlFeatures ftrs = features == null? scriptFeatures : features;
        final ASTJexlScript tree = parse(info, ftrs, source, scope);
        return new Script(this, source, tree);
    }","  public void test170()  throws Throwable  {
      Engine engine0 = new Engine();
      JexlInfo jexlInfo0 = engine0.createInfo();
      String[] stringArray0 = new String[3];
      // Undeclared exception!
      try { 
        engine0.createScript(engine0.DEFAULT_FEATURES, jexlInfo0, (String) null, stringArray0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // source is null
         //
         verifyException(""org.apache.commons.jexl3.internal.Engine"", e);
      }
  }"
3734,"    public boolean isCancellable() {
        return this.cancellable;
    }","  public void test171()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.cache(7);
      Engine engine0 = new Engine(jexlBuilder0);
      engine0.clearCache();
}"
3735,"    public boolean isDebug() {
        return this.debug;
    }","  public void test172()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.cache(7);
      Engine engine0 = new Engine(jexlBuilder0);
      engine0.clearCache();
}"
3736,"    public boolean isCancellable() {
        return this.cancellable;
    }","  public void test173()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      engine0.clearCache();
}"
3737,"    public boolean isDebug() {
        return this.debug;
    }","  public void test174()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      engine0.clearCache();
}"
3738,"    public boolean isCancellable() {
        return this.cancellable;
    }","  public void test175()  throws Throwable  {
      Engine engine0 = new Engine();
      JexlOptions jexlOptions0 = engine0.optionsSet((JexlOptions) null);
}"
3739,"    public boolean isDebug() {
        return this.debug;
    }","  public void test176()  throws Throwable  {
      Engine engine0 = new Engine();
      JexlOptions jexlOptions0 = engine0.optionsSet((JexlOptions) null);
}"
3740,"    public JexlOptions optionsSet(final JexlOptions opts) {
        if (opts != null) {
            opts.set(options);
        }
        return opts;
    }","  public void test177()  throws Throwable  {
      Engine engine0 = new Engine();
      JexlOptions jexlOptions0 = engine0.optionsSet((JexlOptions) null);
}"
3741,"    public boolean isCancellable() {
        return this.cancellable;
    }","  public void test178()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      JexlInfo jexlInfo0 = new JexlInfo(""gy9*RJO"", 4, 10);
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[6];
      Scope scope1 = new Scope(scope0, stringArray0);
      ASTJexlScript aSTJexlScript0 = engine0.parse(jexlInfo0, true, ""gy9*RJO"", scope1);
      Map<String, Object> map0 = aSTJexlScript0.getPragmas();
      MapContext mapContext0 = new MapContext(map0);
      JexlOptions jexlOptions0 = engine0.options(aSTJexlScript0, mapContext0);
}"
3742,"    public boolean isDebug() {
        return this.debug;
    }","  public void test179()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      JexlInfo jexlInfo0 = new JexlInfo(""gy9*RJO"", 4, 10);
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[6];
      Scope scope1 = new Scope(scope0, stringArray0);
      ASTJexlScript aSTJexlScript0 = engine0.parse(jexlInfo0, true, ""gy9*RJO"", scope1);
      Map<String, Object> map0 = aSTJexlScript0.getPragmas();
      MapContext mapContext0 = new MapContext(map0);
      JexlOptions jexlOptions0 = engine0.options(aSTJexlScript0, mapContext0);
}"
3743,"    public boolean isDebug() {
        return this.debug;
    }","  public void test180()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      jexlBuilder0.cache(91);
      Engine engine0 = new Engine(jexlBuilder0);
      engine0.setClassLoader(classLoader0);
}"
3744,"    public boolean isCancellable() {
        return this.cancellable;
    }","  public void test181()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      jexlBuilder0.cache(91);
      Engine engine0 = new Engine(jexlBuilder0);
      engine0.setClassLoader(classLoader0);
}"
3745,"    public boolean isCancellable() {
        return this.cancellable;
    }","  public void test182()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      engine0.setClassLoader(classLoader0);
}"
3746,"    public boolean isDebug() {
        return this.debug;
    }","  public void test183()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      engine0.setClassLoader(classLoader0);
}"
3747,"    public boolean isDebug() {
        return this.debug;
    }","  public void test184()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      NoOpLog noOpLog0 = new NoOpLog();
      jexlBuilder0.logger((Log) noOpLog0);
      Engine engine0 = new Engine(jexlBuilder0);
}"
3748,"    public boolean isCancellable() {
        return this.cancellable;
    }","  public void test185()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      NoOpLog noOpLog0 = new NoOpLog();
      jexlBuilder0.logger((Log) noOpLog0);
      Engine engine0 = new Engine(jexlBuilder0);
}"
3749,"    public boolean isCancellable() {
        return this.cancellable;
    }","  public void test186()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      jexlBuilder0.loader(classLoader0);
      Engine engine0 = new Engine(jexlBuilder0);
}"
3750,"    public boolean isDebug() {
        return this.debug;
    }","  public void test187()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      jexlBuilder0.loader(classLoader0);
      Engine engine0 = new Engine(jexlBuilder0);
}"
3751,"    public boolean isDebug() {
        return this.debug;
    }","  public void test188()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.stackOverflow(0);
      Engine engine0 = new Engine(jexlBuilder0);
}"
3752,"    public boolean isCancellable() {
        return this.cancellable;
    }","  public void test189()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      jexlBuilder0.stackOverflow(0);
      Engine engine0 = new Engine(jexlBuilder0);
}"
3753,"    public boolean isCancellable() {
        return this.cancellable;
    }","  public void test190()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlBuilder jexlBuilder1 = jexlBuilder0.strict(false);
      Engine engine0 = new Engine(jexlBuilder1);
      boolean boolean0 = engine0.isCancellable();
}"
3754,"    public boolean isDebug() {
        return this.debug;
    }","  public void test191()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlBuilder jexlBuilder1 = jexlBuilder0.strict(false);
      Engine engine0 = new Engine(jexlBuilder1);
      boolean boolean0 = engine0.isCancellable();
}"
3755,"    public boolean isCancellable() {
        return this.cancellable;
    }","  public void test192()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlBuilder jexlBuilder1 = jexlBuilder0.silent(true);
      Engine engine0 = new Engine(jexlBuilder1);
      engine0.getProperty((Object) jexlBuilder0, ""X*fF?$"");
}"
3756,"    public boolean isDebug() {
        return this.debug;
    }","  public void test193()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlBuilder jexlBuilder1 = jexlBuilder0.silent(true);
      Engine engine0 = new Engine(jexlBuilder1);
      engine0.getProperty((Object) jexlBuilder0, ""X*fF?$"");
}"
3757,"    public boolean isCancellable() {
        return this.cancellable;
    }","  public void test194()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      engine0.getArithmetic();
}"
3758,"    public boolean isDebug() {
        return this.debug;
    }","  public void test195()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      Engine engine0 = new Engine(jexlBuilder0);
      engine0.getArithmetic();
}"
3759,"    public boolean isCancellable() {
        return this.cancellable;
    }","  public void test196()  throws Throwable  {
      Engine engine0 = new Engine();
      boolean boolean0 = engine0.isDebug();
}"
3760,"    public boolean isDebug() {
        return this.debug;
    }","  public void test197()  throws Throwable  {
      Engine engine0 = new Engine();
      boolean boolean0 = engine0.isDebug();
}"
3761,"    public boolean isDebug() {
        return this.debug;
    }","  public void test198()  throws Throwable  {
      Engine engine0 = new Engine();
      engine0.createJxltEngine(true, 2763, ')', '');
}"
3762,"    public boolean isCancellable() {
        return this.cancellable;
    }","  public void test199()  throws Throwable  {
      Engine engine0 = new Engine();
      engine0.createJxltEngine(true, 2763, ')', '');
}"
3763,"    public boolean isCancellable() {
        return this.cancellable;
    }","  public void test200()  throws Throwable  {
      Engine engine0 = new Engine();
      boolean boolean0 = engine0.isSilent();
}"
3764,"    public boolean isDebug() {
        return this.debug;
    }","  public void test201()  throws Throwable  {
      Engine engine0 = new Engine();
      boolean boolean0 = engine0.isSilent();
}"
3765,"    public boolean isSilent() {
        return this.silent;
    }","  public void test202()  throws Throwable  {
      Engine engine0 = new Engine();
      boolean boolean0 = engine0.isSilent();
}"
3766,"    public boolean isCancellable() {
        return this.cancellable;
    }","  public void test203()  throws Throwable  {
      Engine engine0 = new Engine();
      boolean boolean0 = engine0.isStrict();
}"
3767,"    public boolean isDebug() {
        return this.debug;
    }","  public void test204()  throws Throwable  {
      Engine engine0 = new Engine();
      boolean boolean0 = engine0.isStrict();
}"
3768,"    public boolean isStrict() {
        return this.strict;
    }","  public void test205()  throws Throwable  {
      Engine engine0 = new Engine();
      boolean boolean0 = engine0.isStrict();
}"
3769,"    protected String[] getLocalVariables(final JexlScript script) {
        return script.getLocalVariables();
    }","  public void test206()  throws Throwable  {
      Engine engine0 = new Engine();
      String[] stringArray0 = new String[7];
      Script script0 = engine0.createScript(engine0.DEFAULT_FEATURES, (JexlInfo) null, ""org.apache.commons.jexl3.internal.Engine"", stringArray0);
      String[] stringArray1 = engine0.getLocalVariables(script0);
}"
3770,"    public boolean isCancellable() {
        return this.cancellable;
    }","  public void test207()  throws Throwable  {
      Engine engine0 = new Engine();
      String[] stringArray0 = new String[7];
      Script script0 = engine0.createScript(engine0.DEFAULT_FEATURES, (JexlInfo) null, ""org.apache.commons.jexl3.internal.Engine"", stringArray0);
      String[] stringArray1 = engine0.getLocalVariables(script0);
}"
3771,"    public boolean isDebug() {
        return this.debug;
    }","  public void test208()  throws Throwable  {
      Engine engine0 = new Engine();
      String[] stringArray0 = new String[7];
      Script script0 = engine0.createScript(engine0.DEFAULT_FEATURES, (JexlInfo) null, ""org.apache.commons.jexl3.internal.Engine"", stringArray0);
      String[] stringArray1 = engine0.getLocalVariables(script0);
}"
3772,"    protected String[] getLocalVariables(final JexlScript script) {
        return script.getLocalVariables();
    }","  public void test209()  throws Throwable  {
      Engine engine0 = new Engine();
      String[] stringArray0 = new String[7];
      Script script0 = engine0.createScript(engine0.DEFAULT_FEATURES, (JexlInfo) null, ""org.apache.commons.jexl3.internal.Engine"", stringArray0);
      String[] stringArray1 = engine0.getLocalVariables(script0);
}"
3773,"    protected String[] getParameters(final JexlScript script) {
        return script.getParameters();
    }","  public void test210()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlFeatures jexlFeatures0 = JexlEngine.DEFAULT_FEATURES;
      Engine engine0 = new Engine(jexlBuilder0);
      String[] stringArray0 = new String[2];
      Script script0 = engine0.createScript(jexlFeatures0, (JexlInfo) null, """", stringArray0);
      String[] stringArray1 = engine0.getParameters(script0);
}"
3774,"    protected String[] getParameters(final JexlScript script) {
        return script.getParameters();
    }","  public void test211()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlFeatures jexlFeatures0 = JexlEngine.DEFAULT_FEATURES;
      Engine engine0 = new Engine(jexlBuilder0);
      String[] stringArray0 = new String[2];
      Script script0 = engine0.createScript(jexlFeatures0, (JexlInfo) null, """", stringArray0);
      String[] stringArray1 = engine0.getParameters(script0);
}"
3775,"    public boolean isCancellable() {
        return this.cancellable;
    }","  public void test212()  throws Throwable  {
      JexlBuilder jexlBuilder0 = new JexlBuilder();
      JexlFeatures jexlFeatures0 = JexlEngine.DEFAULT_FEATURES;
      Engine engine0 = new Engine(jexlBuilder0);
      String[] stringArray0 = new String[2];
      Script script0 = engine0.createScript(jexlFeatures0, (JexlInfo) null, """", stringArray0);
      String[] stringArray1 = engine0.getParameters(script0);
}"
3776,"    public boolean isDebug() {
        return this.debug;
    }","  public void test213()  throws Throwable  {
      Engine engine0 = new Engine();
      Class<String> class0 = String.class;
      Object[] objectArray0 = new Object[0];
      engine0.newInstance((Class<? extends String>) class0, objectArray0);
}"
3777,"    public boolean isCancellable() {
        return this.cancellable;
    }","  public void test214()  throws Throwable  {
      Engine engine0 = new Engine();
      Class<String> class0 = String.class;
      Object[] objectArray0 = new Object[0];
      engine0.newInstance((Class<? extends String>) class0, objectArray0);
}"
3778,"    public Object getProperty(final Object bean, final String expr) {
        return getProperty(null, bean, expr);
    }","  public void test215()  throws Throwable  {
      Engine engine0 = new Engine();
      Script script0 = engine0.createExpression((JexlInfo) null, ""org.apache.commons.jexl3.parser.Parser$LookaheadSuccess"");
      Closure closure0 = new Closure(script0, (Object[]) null);
      ASTJexlScript aSTJexlScript0 = closure0.getScript();
      // Undeclared exception!
      try { 
        engine0.getProperty((Object) aSTJexlScript0, ""org.apache.commons.jexl3.parser.Parser$LookaheadSuccess"");
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
      }
  }"
3779,"    protected Set<List<String>> getVariables(final ASTJexlScript script) {
        final VarCollector collector = varCollector();
        getVariables(script, script, collector);
        return collector.collected();
    }","  public void test216()  throws Throwable  {
      Engine engine0 = new Engine();
      Script script0 = engine0.createExpression((JexlInfo) null, ""org.apache.commons.jexl3.parser.Parser$LookaheadSuccess"");
      Closure closure0 = new Closure(script0, (Object[]) null);
      ASTJexlScript aSTJexlScript0 = closure0.getScript();
      Engine.VarCollector engine_VarCollector0 = new Engine.VarCollector((-1565));
      engine0.getVariables(aSTJexlScript0, aSTJexlScript0, engine_VarCollector0);
}"
3780,"    public boolean isCancellable() {
        return this.cancellable;
    }","  public void test217()  throws Throwable  {
      Engine engine0 = new Engine();
      Script script0 = engine0.createExpression((JexlInfo) null, ""org.apache.commons.jexl3.parser.Parser$LookaheadSuccess"");
      Closure closure0 = new Closure(script0, (Object[]) null);
      ASTJexlScript aSTJexlScript0 = closure0.getScript();
      Engine.VarCollector engine_VarCollector0 = new Engine.VarCollector((-1565));
      engine0.getVariables(aSTJexlScript0, aSTJexlScript0, engine_VarCollector0);
}"
3781,"    public boolean isCancellable() {
        return this.cancellable;
    }","  public void test218()  throws Throwable  {
      Engine engine0 = new Engine();
      StringProvider stringProvider0 = new StringProvider(""!E'!r/"");
      Parser parser0 = new Parser(stringProvider0);
      ASTJexlScript aSTJexlScript0 = new ASTJexlScript(parser0, (-627));
      Set<List<String>> set0 = engine0.getVariables(aSTJexlScript0);
}"
3782,"    protected Set<List<String>> getVariables(final ASTJexlScript script) {
        final VarCollector collector = varCollector();
        getVariables(script, script, collector);
        return collector.collected();
    }","  public void test219()  throws Throwable  {
      Engine engine0 = new Engine();
      StringProvider stringProvider0 = new StringProvider(""!E'!r/"");
      Parser parser0 = new Parser(stringProvider0);
      ASTJexlScript aSTJexlScript0 = new ASTJexlScript(parser0, (-627));
      Set<List<String>> set0 = engine0.getVariables(aSTJexlScript0);
}"
3783,"    public boolean isDebug() {
        return this.debug;
    }","  public void test220()  throws Throwable  {
      Engine engine0 = new Engine();
      StringProvider stringProvider0 = new StringProvider(""!E'!r/"");
      Parser parser0 = new Parser(stringProvider0);
      ASTJexlScript aSTJexlScript0 = new ASTJexlScript(parser0, (-627));
      Set<List<String>> set0 = engine0.getVariables(aSTJexlScript0);
}"
3784,"    public final void clearSymbols(final java.util.function.IntConsumer cleanSymbol) {
        // undefine symbols getting out of scope
        if (cleanSymbol != null) {
            long clean = symbols;
            while (clean != 0L) {
                final int s = Long.numberOfTrailingZeros(clean);
                clean &= ~(1L << s);
                cleanSymbol.accept(s);
            }
        }
        symbols = 0L;
        if (moreSymbols != null) {
            if (cleanSymbol != null) {
                for (int s = moreSymbols.nextSetBit(0); s != -1; s = moreSymbols.nextSetBit(s + 1)) {
                    cleanSymbol.accept(s + LONGBITS);
                }
            }
            moreSymbols.clear();
        }
    }","  public void test0()  throws Throwable  {
      BitSet bitSet0 = new BitSet(0);
      LexicalScope lexicalScope0 = new LexicalScope(1L, bitSet0);
      lexicalScope0.addSymbol((-1));
      IntSummaryStatistics intSummaryStatistics0 = new IntSummaryStatistics();
      lexicalScope0.clearSymbols(intSummaryStatistics0);
  }"
3785,"    public boolean addSymbol(final int symbol) {
        if (symbol < LONGBITS) {
            if ((symbols & (1L << symbol)) != 0L) {
                return false;
            }
            symbols |= (1L << symbol);
        } else {
            final int s = symbol - LONGBITS;
            final BitSet ms = moreSymbols();
            if (ms.get(s)) {
                return false;
            }
            ms.set(s, true);
        }
        return true;
    }","  public void test1()  throws Throwable  {
      LexicalScope lexicalScope0 = new LexicalScope();
      lexicalScope0.symbols = (-1457L);
      lexicalScope0.addSymbol((-1));
  }"
3786,"    public boolean addSymbol(final int symbol) {
        if (symbol < LONGBITS) {
            if ((symbols & (1L << symbol)) != 0L) {
                return false;
            }
            symbols |= (1L << symbol);
        } else {
            final int s = symbol - LONGBITS;
            final BitSet ms = moreSymbols();
            if (ms.get(s)) {
                return false;
            }
            ms.set(s, true);
        }
        return true;
    }","  public void test2()  throws Throwable  {
      LexicalScope lexicalScope0 = new LexicalScope();
      lexicalScope0.addSymbol(64);
  }"
3787,"    public boolean hasSymbol(final int symbol) {
        if (symbol < LONGBITS) {
            return (symbols & (1L << symbol)) != 0L;
        }
        return moreSymbols != null && moreSymbols.get(symbol - LONGBITS);
    }","  public void test3()  throws Throwable  {
      LexicalScope lexicalScope0 = new LexicalScope();
      lexicalScope0.symbols = (-1457L);
      lexicalScope0.hasSymbol((-1));
  }"
3788,"    public boolean hasSymbol(final int symbol) {
        if (symbol < LONGBITS) {
            return (symbols & (1L << symbol)) != 0L;
        }
        return moreSymbols != null && moreSymbols.get(symbol - LONGBITS);
    }","  public void test4()  throws Throwable  {
      LexicalScope lexicalScope0 = new LexicalScope();
      lexicalScope0.hasSymbol((-1));
  }"
3789,"    public boolean hasSymbol(final int symbol) {
        if (symbol < LONGBITS) {
            return (symbols & (1L << symbol)) != 0L;
        }
        return moreSymbols != null && moreSymbols.get(symbol - LONGBITS);
    }","  public void test5()  throws Throwable  {
      LexicalScope lexicalScope0 = new LexicalScope();
      lexicalScope0.hasSymbol(64);
  }"
3790,"    protected final BitSet moreSymbols() {
        if (moreSymbols == null) {
            moreSymbols = new BitSet();
        }
        return moreSymbols;
    }","  public void test6()  throws Throwable  {
      BitSet bitSet0 = new BitSet(0);
      LexicalScope lexicalScope0 = new LexicalScope(1L, bitSet0);
      lexicalScope0.moreSymbols();
  }"
3791,"    public int getSymbolCount() {
        return Long.bitCount(symbols) + (moreSymbols == null ? 0 : moreSymbols.cardinality());
    }","  public void test7()  throws Throwable  {
      LexicalScope lexicalScope0 = new LexicalScope();
      int int0 = lexicalScope0.getSymbolCount();
}"
3792,"    public int getSymbolCount() {
        return Long.bitCount(symbols) + (moreSymbols == null ? 0 : moreSymbols.cardinality());
    }","  public void test8()  throws Throwable  {
      LexicalScope lexicalScope0 = new LexicalScope(414L, (BitSet) null);
}"
3793,"    public int getSymbolCount() {
        return Long.bitCount(symbols) + (moreSymbols == null ? 0 : moreSymbols.cardinality());
    }","  public void test9()  throws Throwable  {
      LexicalScope lexicalScope0 = new LexicalScope(414L, (BitSet) null);
      IntSummaryStatistics intSummaryStatistics0 = new IntSummaryStatistics();
      lexicalScope0.clearSymbols(intSummaryStatistics0);
}"
3794,"    public final void clearSymbols(final java.util.function.IntConsumer cleanSymbol) {
        // undefine symbols getting out of scope
        if (cleanSymbol != null) {
            long clean = symbols;
            while (clean != 0L) {
                final int s = Long.numberOfTrailingZeros(clean);
                clean &= ~(1L << s);
                cleanSymbol.accept(s);
            }
        }
        symbols = 0L;
        if (moreSymbols != null) {
            if (cleanSymbol != null) {
                for (int s = moreSymbols.nextSetBit(0); s != -1; s = moreSymbols.nextSetBit(s + 1)) {
                    cleanSymbol.accept(s + LONGBITS);
                }
            }
            moreSymbols.clear();
        }
    }","  public void test10()  throws Throwable  {
      BitSet bitSet0 = new BitSet();
      LexicalScope lexicalScope0 = new LexicalScope(0L, bitSet0);
      lexicalScope0.clearSymbols((IntConsumer) null);
}"
3795,"    public boolean addSymbol(final int symbol) {
        if (symbol < LONGBITS) {
            if ((symbols & (1L << symbol)) != 0L) {
                return false;
            }
            symbols |= (1L << symbol);
        } else {
            final int s = symbol - LONGBITS;
            final BitSet ms = moreSymbols();
            if (ms.get(s)) {
                return false;
            }
            ms.set(s, true);
        }
        return true;
    }","  public void test11()  throws Throwable  {
      BitSet bitSet0 = new BitSet();
      bitSet0.flip(0, 4897);
      LexicalScope lexicalScope0 = new LexicalScope(0L, bitSet0);
      boolean boolean0 = lexicalScope0.addSymbol(4897);
}"
3796,"    public boolean addSymbol(final int symbol) {
        if (symbol < LONGBITS) {
            if ((symbols & (1L << symbol)) != 0L) {
                return false;
            }
            symbols |= (1L << symbol);
        } else {
            final int s = symbol - LONGBITS;
            final BitSet ms = moreSymbols();
            if (ms.get(s)) {
                return false;
            }
            ms.set(s, true);
        }
        return true;
    }","  public void test12()  throws Throwable  {
      LexicalScope lexicalScope0 = new LexicalScope(414L, (BitSet) null);
      boolean boolean0 = lexicalScope0.addSymbol(1);
}"
3797,"    public int getSymbolCount() {
        return Long.bitCount(symbols) + (moreSymbols == null ? 0 : moreSymbols.cardinality());
    }","  public void test13()  throws Throwable  {
      LexicalScope lexicalScope0 = new LexicalScope(414L, (BitSet) null);
      boolean boolean0 = lexicalScope0.addSymbol(1);
}"
3798,"    public boolean hasSymbol(final int symbol) {
        if (symbol < LONGBITS) {
            return (symbols & (1L << symbol)) != 0L;
        }
        return moreSymbols != null && moreSymbols.get(symbol - LONGBITS);
    }","  public void test14()  throws Throwable  {
      BitSet bitSet0 = new BitSet();
      LexicalScope lexicalScope0 = new LexicalScope(0L, bitSet0);
      lexicalScope0.addSymbol(0);
      boolean boolean0 = lexicalScope0.hasSymbol(0);
}"
3799,"    public boolean hasSymbol(final int symbol) {
        if (symbol < LONGBITS) {
            return (symbols & (1L << symbol)) != 0L;
        }
        return moreSymbols != null && moreSymbols.get(symbol - LONGBITS);
    }","  public void test15()  throws Throwable  {
      BitSet bitSet0 = new BitSet();
      LexicalScope lexicalScope0 = new LexicalScope(0L, bitSet0);
      lexicalScope0.addSymbol(0);
      boolean boolean0 = lexicalScope0.hasSymbol(0);
}"
3800,"    public boolean hasSymbol(final int symbol) {
        if (symbol < LONGBITS) {
            return (symbols & (1L << symbol)) != 0L;
        }
        return moreSymbols != null && moreSymbols.get(symbol - LONGBITS);
    }","  public void test16()  throws Throwable  {
      LexicalScope lexicalScope0 = new LexicalScope(414L, (BitSet) null);
      boolean boolean0 = lexicalScope0.hasSymbol(2272);
}"
3801,"    public int getSymbolCount() {
        return Long.bitCount(symbols) + (moreSymbols == null ? 0 : moreSymbols.cardinality());
    }","  public void test17()  throws Throwable  {
      LexicalScope lexicalScope0 = new LexicalScope(414L, (BitSet) null);
      boolean boolean0 = lexicalScope0.hasSymbol(2272);
}"
3802,"    public int getSymbolCount() {
        return Long.bitCount(symbols) + (moreSymbols == null ? 0 : moreSymbols.cardinality());
    }","  public void test18()  throws Throwable  {
      LexicalScope lexicalScope0 = new LexicalScope(414L, (BitSet) null);
      lexicalScope0.moreSymbols();
      boolean boolean0 = lexicalScope0.hasSymbol(2272);
}"
3803,"    public boolean hasSymbol(final int symbol) {
        if (symbol < LONGBITS) {
            return (symbols & (1L << symbol)) != 0L;
        }
        return moreSymbols != null && moreSymbols.get(symbol - LONGBITS);
    }","  public void test19()  throws Throwable  {
      LexicalScope lexicalScope0 = new LexicalScope(414L, (BitSet) null);
      lexicalScope0.moreSymbols();
      boolean boolean0 = lexicalScope0.hasSymbol(2272);
}"
3804,"    public int getSymbolCount() {
        return Long.bitCount(symbols) + (moreSymbols == null ? 0 : moreSymbols.cardinality());
    }","  public void test20()  throws Throwable  {
      LexicalScope lexicalScope0 = new LexicalScope();
      lexicalScope0.addSymbol(934);
      boolean boolean0 = lexicalScope0.hasSymbol(934);
}"
3805,"    public boolean hasSymbol(final int symbol) {
        if (symbol < LONGBITS) {
            return (symbols & (1L << symbol)) != 0L;
        }
        return moreSymbols != null && moreSymbols.get(symbol - LONGBITS);
    }","  public void test21()  throws Throwable  {
      LexicalScope lexicalScope0 = new LexicalScope();
      lexicalScope0.addSymbol(934);
      boolean boolean0 = lexicalScope0.hasSymbol(934);
}"
3806,"    public String toString() {
        return str;
    }","  public void test0()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      Source source0 = new Source(jexlFeatures0, """");
      String string0 = source0.toString();
}"
3807,"    int length() {
        return str.length();
    }","  public void test1()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      Source source0 = new Source(jexlFeatures0, """");
      int int0 = source0.length();
}"
3808,"    public JexlFeatures getFeatures() {
        return features;
    }","  public void test2()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      Source source0 = new Source(jexlFeatures0, ""0rI!&RbHva.i T@|;6S"");
      jexlFeatures0.structuredLiteral(false);
      JexlFeatures jexlFeatures1 = source0.getFeatures();
}"
3809,"    public JexlFeatures getFeatures() {
        return features;
    }","  public void test3()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.sideEffectGlobal(false);
      Source source0 = new Source(jexlFeatures0, ""org.apache.commons.jexl3.internal.Source"");
      JexlFeatures jexlFeatures1 = source0.getFeatures();
}"
3810,"    public JexlFeatures getFeatures() {
        return features;
    }","  public void test4()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.sideEffect(false);
      Source source0 = new Source(jexlFeatures0, ""0rI!&RbHva.i T@|;6S"");
      JexlFeatures jexlFeatures1 = source0.getFeatures();
}"
3811,"    public JexlFeatures getFeatures() {
        return features;
    }","  public void test5()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.register(true);
      Source source0 = new Source(jexlFeatures0, ""tvGn[@7yFL2A,t"");
      JexlFeatures jexlFeatures1 = source0.getFeatures();
}"
3812,"    public JexlFeatures getFeatures() {
        return features;
    }","  public void test6()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      Source source0 = new Source(jexlFeatures0, ""org.apache.commons.jexl3.internal.Source"");
      jexlFeatures0.pragma(false);
      JexlFeatures jexlFeatures1 = source0.getFeatures();
}"
3813,"    public JexlFeatures getFeatures() {
        return features;
    }","  public void test7()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.newInstance(false);
      Source source0 = new Source(jexlFeatures0, """");
      JexlFeatures jexlFeatures1 = source0.getFeatures();
}"
3814,"    public JexlFeatures getFeatures() {
        return features;
    }","  public void test8()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.methodCall(false);
      Source source0 = new Source(jexlFeatures0, ""UlP1JA;}K=dY\""L"");
      JexlFeatures jexlFeatures1 = source0.getFeatures();
}"
3815,"    public JexlFeatures getFeatures() {
        return features;
    }","  public void test9()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.loops(false);
      Source source0 = new Source(jexlFeatures0, """");
      JexlFeatures jexlFeatures1 = source0.getFeatures();
}"
3816,"    public JexlFeatures getFeatures() {
        return features;
    }","  public void test10()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.localVar(false);
      Source source0 = new Source(jexlFeatures0, """");
      JexlFeatures jexlFeatures1 = source0.getFeatures();
}"
3817,"    public JexlFeatures getFeatures() {
        return features;
    }","  public void test11()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.lambda(false);
      Source source0 = new Source(jexlFeatures0, ""S*U]U{/KA)V"");
      JexlFeatures jexlFeatures1 = source0.getFeatures();
}"
3818,"    public JexlFeatures getFeatures() {
        return features;
    }","  public void test12()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      JexlFeatures jexlFeatures1 = jexlFeatures0.script(false);
      Source source0 = new Source(jexlFeatures1, ""K9lM>/-C?&}o AaD9__"");
      JexlFeatures jexlFeatures2 = source0.getFeatures();
}"
3819,"    public JexlFeatures getFeatures() {
        return features;
    }","  public void test13()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      Source source0 = new Source(jexlFeatures0, "">q!1"");
      jexlFeatures0.arrayReferenceExpr(false);
      JexlFeatures jexlFeatures1 = source0.getFeatures();
}"
3820,"    public JexlFeatures getFeatures() {
        return features;
    }","  public void test14()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      jexlFeatures0.annotation(false);
      Source source0 = new Source(jexlFeatures0, ""org.apache.commons.jexl3.internal.Source"");
      JexlFeatures jexlFeatures1 = source0.getFeatures();
}"
3821,"    public JexlFeatures getFeatures() {
        return features;
    }","  public void test15()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      JexlFeatures jexlFeatures1 = jexlFeatures0.lexicalShade(true);
      Source source0 = new Source(jexlFeatures0, """");
      JexlFeatures jexlFeatures2 = source0.getFeatures();
}"
3822,"    Source(final JexlFeatures theFeatures, final String theStr) { // CSOFF: MagicNumber
        this.features = theFeatures;
        this.str = theStr;
        int hash = 3;
        hash = 37 * hash + features.hashCode();
        hash = 37 * hash + str.hashCode() ;
        this.hashCode = hash;
    }","  public void test16()  throws Throwable  {
      Source source0 = null;
      try {
        source0 = new Source((JexlFeatures) null, """");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.internal.Source"", e);
      }
  }"
3823,"    public boolean equals(final Object obj) {
        if (this == obj) {
            return true;
        }
        if (obj == null) {
            return false;
        }
        if (getClass() != obj.getClass()) {
            return false;
        }
        final Source other = (Source) obj;
        if (!Objects.equals(this.features, other.features)) {
            return false;
        }
        if (!Objects.equals(this.str, other.str)) {
            return false;
        }
        return true;
    }","  public void test17()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      Source source0 = new Source(jexlFeatures0, ""^Wu&>a6"");
      Source source1 = new Source(jexlFeatures0, """");
      boolean boolean0 = source1.equals(source0);
}"
3824,"    public boolean equals(final Object obj) {
        if (this == obj) {
            return true;
        }
        if (obj == null) {
            return false;
        }
        if (getClass() != obj.getClass()) {
            return false;
        }
        final Source other = (Source) obj;
        if (!Objects.equals(this.features, other.features)) {
            return false;
        }
        if (!Objects.equals(this.str, other.str)) {
            return false;
        }
        return true;
    }","  public void test18()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      Source source0 = new Source(jexlFeatures0, ""K9lM>/-C?&}o AaD9__"");
      Source source1 = new Source(jexlFeatures0, ""K9lM>/-C?&}o AaD9__"");
      boolean boolean0 = source0.equals(source1);
}"
3825,"    public boolean equals(final Object obj) {
        if (this == obj) {
            return true;
        }
        if (obj == null) {
            return false;
        }
        if (getClass() != obj.getClass()) {
            return false;
        }
        final Source other = (Source) obj;
        if (!Objects.equals(this.features, other.features)) {
            return false;
        }
        if (!Objects.equals(this.str, other.str)) {
            return false;
        }
        return true;
    }","  public void test19()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      Source source0 = new Source(jexlFeatures0, ""K9lM>/-C?&}o AaD9__"");
      boolean boolean0 = source0.equals(jexlFeatures0);
}"
3826,"    public boolean equals(final Object obj) {
        if (this == obj) {
            return true;
        }
        if (obj == null) {
            return false;
        }
        if (getClass() != obj.getClass()) {
            return false;
        }
        final Source other = (Source) obj;
        if (!Objects.equals(this.features, other.features)) {
            return false;
        }
        if (!Objects.equals(this.str, other.str)) {
            return false;
        }
        return true;
    }","  public void test20()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      Source source0 = new Source(jexlFeatures0, ""^Wu&>a6"");
      boolean boolean0 = source0.equals((Object) null);
}"
3827,"    public boolean equals(final Object obj) {
        if (this == obj) {
            return true;
        }
        if (obj == null) {
            return false;
        }
        if (getClass() != obj.getClass()) {
            return false;
        }
        final Source other = (Source) obj;
        if (!Objects.equals(this.features, other.features)) {
            return false;
        }
        if (!Objects.equals(this.str, other.str)) {
            return false;
        }
        return true;
    }","  public void test21()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      Source source0 = new Source(jexlFeatures0, ""K9lM>/-C?&}o AaD9__"");
      boolean boolean0 = source0.equals(source0);
}"
3828,"    public boolean equals(final Object obj) {
        if (this == obj) {
            return true;
        }
        if (obj == null) {
            return false;
        }
        if (getClass() != obj.getClass()) {
            return false;
        }
        final Source other = (Source) obj;
        if (!Objects.equals(this.features, other.features)) {
            return false;
        }
        if (!Objects.equals(this.str, other.str)) {
            return false;
        }
        return true;
    }","  public void test22()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      JexlFeatures jexlFeatures1 = new JexlFeatures();
      Source source0 = new Source(jexlFeatures1, ""K9lM>/-C?&}o AaD9__"");
      JexlFeatures jexlFeatures2 = jexlFeatures0.script(false);
      Source source1 = new Source(jexlFeatures2, ""K9lM>/-C?&}o AaD9__"");
      boolean boolean0 = source0.equals(source1);
}"
3829,"    public String toString() {
        return str;
    }","  public void test23()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      Source source0 = new Source(jexlFeatures0, ""xb"");
      String string0 = source0.toString();
}"
3830,"    public int hashCode() {
        return hashCode;
    }","  public void test24()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      Source source0 = new Source(jexlFeatures0, ""K9lM>/-C?&}o AaD9__"");
      source0.hashCode();
  }"
3831,"    int length() {
        return str.length();
    }","  public void test25()  throws Throwable  {
      JexlFeatures jexlFeatures0 = new JexlFeatures();
      Source source0 = new Source(jexlFeatures0, ""K9lM>/-C?&}o AaD9__"");
      int int0 = source0.length();
}"
3832,"    public void add(final Object value) {
        // for all children after first...
        if (!Object.class.equals(commonClass)) {
            if (value == null) {
                isNumber = false;
                unboxing = false;
            } else {
                Class<?> eclass = value.getClass();
                // base common class on first non-null entry
                if (commonClass == null) {
                    commonClass = eclass;
                    isNumber = isNumber && Number.class.isAssignableFrom(commonClass);
                } else if (!commonClass.equals(eclass)) {
                    // if both are numbers...
                    if (isNumber && Number.class.isAssignableFrom(eclass)) {
                        commonClass = Number.class;
                    } else {
                        // attempt to find valid superclass
                        do {
                            eclass = eclass.getSuperclass();
                            if (eclass == null) {
                                commonClass = Object.class;
                                break;
                            }
                        } while (!commonClass.isAssignableFrom(eclass));
                    }
                }
            }
        }
        if (added >= untyped.length) {
            throw new IllegalArgumentException(""add() over size"");
        }
        untyped[added++] = value;
    }","  public void test0()  throws Throwable  {
      ArrayBuilder arrayBuilder0 = new ArrayBuilder(0);
      arrayBuilder0.added = 239;
      // Undeclared exception!
      try { 
        arrayBuilder0.add(""h,Y)nEB"");
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // add() over size
         //
         verifyException(""org.apache.commons.jexl3.internal.ArrayBuilder"", e);
      }
  }"
3833,"    public void add(final Object value) {
        // for all children after first...
        if (!Object.class.equals(commonClass)) {
            if (value == null) {
                isNumber = false;
                unboxing = false;
            } else {
                Class<?> eclass = value.getClass();
                // base common class on first non-null entry
                if (commonClass == null) {
                    commonClass = eclass;
                    isNumber = isNumber && Number.class.isAssignableFrom(commonClass);
                } else if (!commonClass.equals(eclass)) {
                    // if both are numbers...
                    if (isNumber && Number.class.isAssignableFrom(eclass)) {
                        commonClass = Number.class;
                    } else {
                        // attempt to find valid superclass
                        do {
                            eclass = eclass.getSuperclass();
                            if (eclass == null) {
                                commonClass = Object.class;
                                break;
                            }
                        } while (!commonClass.isAssignableFrom(eclass));
                    }
                }
            }
        }
        if (added >= untyped.length) {
            throw new IllegalArgumentException(""add() over size"");
        }
        untyped[added++] = value;
    }","  public void test1()  throws Throwable  {
      ArrayBuilder arrayBuilder0 = new ArrayBuilder(55);
      arrayBuilder0.isNumber = false;
      Double double0 = new Double(55);
      arrayBuilder0.add(double0);
  }"
3834,"    protected static Class<?> unboxingClass(final Class<?> parm) {
        final Class<?> prim = BOXING_CLASSES.get(parm);
        return prim == null ? parm : prim;
    }","  public void test2()  throws Throwable  {
      Class<?> class0 = ArrayBuilder.unboxingClass((Class<?>) null);
}"
3835,"    public Object create(final boolean extended) {
        if (untyped == null) {
            return new Object[0];
        }
        if (extended) {
            final List<Object> list = new ArrayList<Object>(added);
            list.addAll(Arrays.asList(untyped).subList(0, added));
            return list;
        }
        // convert untyped array to the common class if not Object.class
        if ((commonClass == null) || Object.class.equals(commonClass)) {
            return untyped.clone();
        }
        final int size = added;
        // if the commonClass is a number, it has an equivalent primitive type, get it
        if (unboxing) {
            commonClass = unboxingClass(commonClass);
        }
        // allocate and fill up the typed array
        final Object typed = Array.newInstance(commonClass, size);
        for (int i = 0; i < size; ++i) {
            Array.set(typed, i, untyped[i]);
        }
        return typed;
    }","  public void test3()  throws Throwable  {
      ArrayBuilder arrayBuilder0 = new ArrayBuilder(2330);
      arrayBuilder0.added = 2330;
      Class<String> class0 = String.class;
      Class<Integer> class1 = Integer.class;
      arrayBuilder0.commonClass = class1;
      arrayBuilder0.commonClass = class0;
      arrayBuilder0.create(false);
      arrayBuilder0.create(false);
      arrayBuilder0.create(false);
      arrayBuilder0.create(false);
      // Undeclared exception!
      arrayBuilder0.create(false);
  }"
3836,"    public Object create(final boolean extended) {
        if (untyped == null) {
            return new Object[0];
        }
        if (extended) {
            final List<Object> list = new ArrayList<Object>(added);
            list.addAll(Arrays.asList(untyped).subList(0, added));
            return list;
        }
        // convert untyped array to the common class if not Object.class
        if ((commonClass == null) || Object.class.equals(commonClass)) {
            return untyped.clone();
        }
        final int size = added;
        // if the commonClass is a number, it has an equivalent primitive type, get it
        if (unboxing) {
            commonClass = unboxingClass(commonClass);
        }
        // allocate and fill up the typed array
        final Object typed = Array.newInstance(commonClass, size);
        for (int i = 0; i < size; ++i) {
            Array.set(typed, i, untyped[i]);
        }
        return typed;
    }","  public void test4()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      ArrayBuilder arrayBuilder0 = new ArrayBuilder(1824);
      arrayBuilder0.add(class0);
      arrayBuilder0.added = (-2547);
      // Undeclared exception!
      try { 
        arrayBuilder0.create(false);
        fail(""Expecting exception: NegativeArraySizeException"");
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.lang.reflect.Array"", e);
      }
  }"
3837,"    public Object create(final boolean extended) {
        if (untyped == null) {
            return new Object[0];
        }
        if (extended) {
            final List<Object> list = new ArrayList<Object>(added);
            list.addAll(Arrays.asList(untyped).subList(0, added));
            return list;
        }
        // convert untyped array to the common class if not Object.class
        if ((commonClass == null) || Object.class.equals(commonClass)) {
            return untyped.clone();
        }
        final int size = added;
        // if the commonClass is a number, it has an equivalent primitive type, get it
        if (unboxing) {
            commonClass = unboxingClass(commonClass);
        }
        // allocate and fill up the typed array
        final Object typed = Array.newInstance(commonClass, size);
        for (int i = 0; i < size; ++i) {
            Array.set(typed, i, untyped[i]);
        }
        return typed;
    }","  public void test5()  throws Throwable  {
      ArrayBuilder arrayBuilder0 = new ArrayBuilder(0);
      arrayBuilder0.added = 0;
      arrayBuilder0.added = 0;
      arrayBuilder0.added = 31;
      // Undeclared exception!
      try { 
        arrayBuilder0.create(true);
        fail(""Expecting exception: IndexOutOfBoundsException"");
      } catch(IndexOutOfBoundsException e) {
         //
         // toIndex = 31
         //
         verifyException(""java.util.SubList"", e);
      }
  }"
3838,"    public Object create(final boolean extended) {
        if (untyped == null) {
            return new Object[0];
        }
        if (extended) {
            final List<Object> list = new ArrayList<Object>(added);
            list.addAll(Arrays.asList(untyped).subList(0, added));
            return list;
        }
        // convert untyped array to the common class if not Object.class
        if ((commonClass == null) || Object.class.equals(commonClass)) {
            return untyped.clone();
        }
        final int size = added;
        // if the commonClass is a number, it has an equivalent primitive type, get it
        if (unboxing) {
            commonClass = unboxingClass(commonClass);
        }
        // allocate and fill up the typed array
        final Object typed = Array.newInstance(commonClass, size);
        for (int i = 0; i < size; ++i) {
            Array.set(typed, i, untyped[i]);
        }
        return typed;
    }","  public void test6()  throws Throwable  {
      ArrayBuilder arrayBuilder0 = new ArrayBuilder(60);
      arrayBuilder0.added = (-3464);
      // Undeclared exception!
      try { 
        arrayBuilder0.create(true);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -3464
         //
         verifyException(""java.util.ArrayList"", e);
      }
  }"
3839,"    public Object create(final boolean extended) {
        if (untyped == null) {
            return new Object[0];
        }
        if (extended) {
            final List<Object> list = new ArrayList<Object>(added);
            list.addAll(Arrays.asList(untyped).subList(0, added));
            return list;
        }
        // convert untyped array to the common class if not Object.class
        if ((commonClass == null) || Object.class.equals(commonClass)) {
            return untyped.clone();
        }
        final int size = added;
        // if the commonClass is a number, it has an equivalent primitive type, get it
        if (unboxing) {
            commonClass = unboxingClass(commonClass);
        }
        // allocate and fill up the typed array
        final Object typed = Array.newInstance(commonClass, size);
        for (int i = 0; i < size; ++i) {
            Array.set(typed, i, untyped[i]);
        }
        return typed;
    }","  public void test7()  throws Throwable  {
      ArrayBuilder arrayBuilder0 = new ArrayBuilder(0);
      Class<Float> class0 = Float.class;
      arrayBuilder0.commonClass = class0;
      arrayBuilder0.added = 2330;
      // Undeclared exception!
      try { 
        arrayBuilder0.create(false);
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException(""org.apache.commons.jexl3.internal.ArrayBuilder"", e);
      }
  }"
3840,"    public void add(final Object value) {
        // for all children after first...
        if (!Object.class.equals(commonClass)) {
            if (value == null) {
                isNumber = false;
                unboxing = false;
            } else {
                Class<?> eclass = value.getClass();
                // base common class on first non-null entry
                if (commonClass == null) {
                    commonClass = eclass;
                    isNumber = isNumber && Number.class.isAssignableFrom(commonClass);
                } else if (!commonClass.equals(eclass)) {
                    // if both are numbers...
                    if (isNumber && Number.class.isAssignableFrom(eclass)) {
                        commonClass = Number.class;
                    } else {
                        // attempt to find valid superclass
                        do {
                            eclass = eclass.getSuperclass();
                            if (eclass == null) {
                                commonClass = Object.class;
                                break;
                            }
                        } while (!commonClass.isAssignableFrom(eclass));
                    }
                }
            }
        }
        if (added >= untyped.length) {
            throw new IllegalArgumentException(""add() over size"");
        }
        untyped[added++] = value;
    }","  public void test8()  throws Throwable  {
      ArrayBuilder arrayBuilder0 = new ArrayBuilder(0);
      arrayBuilder0.added = (-2283);
      Float float0 = new Float((double) 0);
      // Undeclared exception!
      try { 
        arrayBuilder0.add(float0);
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2283
         //
         verifyException(""org.apache.commons.jexl3.internal.ArrayBuilder"", e);
      }
  }"
3841,"    public ArrayBuilder(final int size) {
        untyped = new Object[size];
    }","  public void test9()  throws Throwable  {
      ArrayBuilder arrayBuilder0 = null;
      try {
        arrayBuilder0 = new ArrayBuilder((-2991));
        fail(""Expecting exception: NegativeArraySizeException"");
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.internal.ArrayBuilder"", e);
      }
  }"
3842,"    public Object create(final boolean extended) {
        if (untyped == null) {
            return new Object[0];
        }
        if (extended) {
            final List<Object> list = new ArrayList<Object>(added);
            list.addAll(Arrays.asList(untyped).subList(0, added));
            return list;
        }
        // convert untyped array to the common class if not Object.class
        if ((commonClass == null) || Object.class.equals(commonClass)) {
            return untyped.clone();
        }
        final int size = added;
        // if the commonClass is a number, it has an equivalent primitive type, get it
        if (unboxing) {
            commonClass = unboxingClass(commonClass);
        }
        // allocate and fill up the typed array
        final Object typed = Array.newInstance(commonClass, size);
        for (int i = 0; i < size; ++i) {
            Array.set(typed, i, untyped[i]);
        }
        return typed;
    }","  public void test10()  throws Throwable  {
      ArrayBuilder arrayBuilder0 = new ArrayBuilder(2339);
      Class<Double> class0 = Double.class;
      arrayBuilder0.commonClass = class0;
      arrayBuilder0.add((Object) null);
      Object object0 = arrayBuilder0.create(false);
}"
3843,"    protected static Class<?> unboxingClass(final Class<?> parm) {
        final Class<?> prim = BOXING_CLASSES.get(parm);
        return prim == null ? parm : prim;
    }","  public void test11()  throws Throwable  {
      ArrayBuilder arrayBuilder0 = new ArrayBuilder(1162);
      Object object0 = arrayBuilder0.create(false);
      arrayBuilder0.add(object0);
      Class<?> class0 = ArrayBuilder.unboxingClass(arrayBuilder0.commonClass);
}"
3844,"    public void add(final Object value) {
        // for all children after first...
        if (!Object.class.equals(commonClass)) {
            if (value == null) {
                isNumber = false;
                unboxing = false;
            } else {
                Class<?> eclass = value.getClass();
                // base common class on first non-null entry
                if (commonClass == null) {
                    commonClass = eclass;
                    isNumber = isNumber && Number.class.isAssignableFrom(commonClass);
                } else if (!commonClass.equals(eclass)) {
                    // if both are numbers...
                    if (isNumber && Number.class.isAssignableFrom(eclass)) {
                        commonClass = Number.class;
                    } else {
                        // attempt to find valid superclass
                        do {
                            eclass = eclass.getSuperclass();
                            if (eclass == null) {
                                commonClass = Object.class;
                                break;
                            }
                        } while (!commonClass.isAssignableFrom(eclass));
                    }
                }
            }
        }
        if (added >= untyped.length) {
            throw new IllegalArgumentException(""add() over size"");
        }
        untyped[added++] = value;
    }","  public void test12()  throws Throwable  {
      ArrayBuilder arrayBuilder0 = new ArrayBuilder(1162);
      Object object0 = arrayBuilder0.create(false);
      arrayBuilder0.add(object0);
      Class<?> class0 = ArrayBuilder.unboxingClass(arrayBuilder0.commonClass);
      arrayBuilder0.add(class0);
}"
3845,"    public void add(final Object value) {
        // for all children after first...
        if (!Object.class.equals(commonClass)) {
            if (value == null) {
                isNumber = false;
                unboxing = false;
            } else {
                Class<?> eclass = value.getClass();
                // base common class on first non-null entry
                if (commonClass == null) {
                    commonClass = eclass;
                    isNumber = isNumber && Number.class.isAssignableFrom(commonClass);
                } else if (!commonClass.equals(eclass)) {
                    // if both are numbers...
                    if (isNumber && Number.class.isAssignableFrom(eclass)) {
                        commonClass = Number.class;
                    } else {
                        // attempt to find valid superclass
                        do {
                            eclass = eclass.getSuperclass();
                            if (eclass == null) {
                                commonClass = Object.class;
                                break;
                            }
                        } while (!commonClass.isAssignableFrom(eclass));
                    }
                }
            }
        }
        if (added >= untyped.length) {
            throw new IllegalArgumentException(""add() over size"");
        }
        untyped[added++] = value;
    }","  public void test13()  throws Throwable  {
      ArrayBuilder arrayBuilder0 = new ArrayBuilder(1162);
      Object object0 = arrayBuilder0.create(false);
      arrayBuilder0.add(object0);
      Class<?> class0 = ArrayBuilder.unboxingClass(arrayBuilder0.commonClass);
      arrayBuilder0.add(class0);
}"
3846,"    public Object create(final boolean extended) {
        if (untyped == null) {
            return new Object[0];
        }
        if (extended) {
            final List<Object> list = new ArrayList<Object>(added);
            list.addAll(Arrays.asList(untyped).subList(0, added));
            return list;
        }
        // convert untyped array to the common class if not Object.class
        if ((commonClass == null) || Object.class.equals(commonClass)) {
            return untyped.clone();
        }
        final int size = added;
        // if the commonClass is a number, it has an equivalent primitive type, get it
        if (unboxing) {
            commonClass = unboxingClass(commonClass);
        }
        // allocate and fill up the typed array
        final Object typed = Array.newInstance(commonClass, size);
        for (int i = 0; i < size; ++i) {
            Array.set(typed, i, untyped[i]);
        }
        return typed;
    }","  public void test14()  throws Throwable  {
      ArrayBuilder arrayBuilder0 = new ArrayBuilder(2339);
      ArrayList arrayList0 = (ArrayList)arrayBuilder0.create(true);
}"
3847,"    public Object create(final boolean extended) {
        if (untyped == null) {
            return new Object[0];
        }
        if (extended) {
            final List<Object> list = new ArrayList<Object>(added);
            list.addAll(Arrays.asList(untyped).subList(0, added));
            return list;
        }
        // convert untyped array to the common class if not Object.class
        if ((commonClass == null) || Object.class.equals(commonClass)) {
            return untyped.clone();
        }
        final int size = added;
        // if the commonClass is a number, it has an equivalent primitive type, get it
        if (unboxing) {
            commonClass = unboxingClass(commonClass);
        }
        // allocate and fill up the typed array
        final Object typed = Array.newInstance(commonClass, size);
        for (int i = 0; i < size; ++i) {
            Array.set(typed, i, untyped[i]);
        }
        return typed;
    }","  public void test15()  throws Throwable  {
      ArrayBuilder arrayBuilder0 = new ArrayBuilder(5);
      Class<Byte> class0 = Byte.TYPE;
      arrayBuilder0.commonClass = class0;
      arrayBuilder0.add(arrayBuilder0.commonClass);
      Object object0 = arrayBuilder0.create(false);
}"
3848,"    public void add(final Object value) {
        // for all children after first...
        if (!Object.class.equals(commonClass)) {
            if (value == null) {
                isNumber = false;
                unboxing = false;
            } else {
                Class<?> eclass = value.getClass();
                // base common class on first non-null entry
                if (commonClass == null) {
                    commonClass = eclass;
                    isNumber = isNumber && Number.class.isAssignableFrom(commonClass);
                } else if (!commonClass.equals(eclass)) {
                    // if both are numbers...
                    if (isNumber && Number.class.isAssignableFrom(eclass)) {
                        commonClass = Number.class;
                    } else {
                        // attempt to find valid superclass
                        do {
                            eclass = eclass.getSuperclass();
                            if (eclass == null) {
                                commonClass = Object.class;
                                break;
                            }
                        } while (!commonClass.isAssignableFrom(eclass));
                    }
                }
            }
        }
        if (added >= untyped.length) {
            throw new IllegalArgumentException(""add() over size"");
        }
        untyped[added++] = value;
    }","  public void test16()  throws Throwable  {
      ArrayBuilder arrayBuilder0 = new ArrayBuilder(1488);
      Class<Integer> class0 = Integer.TYPE;
      arrayBuilder0.add(class0);
      arrayBuilder0.add(class0);
}"
3849,"    public void add(final Object value) {
        // for all children after first...
        if (!Object.class.equals(commonClass)) {
            if (value == null) {
                isNumber = false;
                unboxing = false;
            } else {
                Class<?> eclass = value.getClass();
                // base common class on first non-null entry
                if (commonClass == null) {
                    commonClass = eclass;
                    isNumber = isNumber && Number.class.isAssignableFrom(commonClass);
                } else if (!commonClass.equals(eclass)) {
                    // if both are numbers...
                    if (isNumber && Number.class.isAssignableFrom(eclass)) {
                        commonClass = Number.class;
                    } else {
                        // attempt to find valid superclass
                        do {
                            eclass = eclass.getSuperclass();
                            if (eclass == null) {
                                commonClass = Object.class;
                                break;
                            }
                        } while (!commonClass.isAssignableFrom(eclass));
                    }
                }
            }
        }
        if (added >= untyped.length) {
            throw new IllegalArgumentException(""add() over size"");
        }
        untyped[added++] = value;
    }","  public void test17()  throws Throwable  {
      ArrayBuilder arrayBuilder0 = new ArrayBuilder(2339);
      Class<Double> class0 = Double.class;
      arrayBuilder0.commonClass = class0;
      Float float0 = new Float((float) 2339);
      arrayBuilder0.add(float0);
      arrayBuilder0.add((Object) null);
      arrayBuilder0.add(float0);
  }"
3850,"    public void add(final Object value) {
        // for all children after first...
        if (!Object.class.equals(commonClass)) {
            if (value == null) {
                isNumber = false;
                unboxing = false;
            } else {
                Class<?> eclass = value.getClass();
                // base common class on first non-null entry
                if (commonClass == null) {
                    commonClass = eclass;
                    isNumber = isNumber && Number.class.isAssignableFrom(commonClass);
                } else if (!commonClass.equals(eclass)) {
                    // if both are numbers...
                    if (isNumber && Number.class.isAssignableFrom(eclass)) {
                        commonClass = Number.class;
                    } else {
                        // attempt to find valid superclass
                        do {
                            eclass = eclass.getSuperclass();
                            if (eclass == null) {
                                commonClass = Object.class;
                                break;
                            }
                        } while (!commonClass.isAssignableFrom(eclass));
                    }
                }
            }
        }
        if (added >= untyped.length) {
            throw new IllegalArgumentException(""add() over size"");
        }
        untyped[added++] = value;
    }","  public void test18()  throws Throwable  {
      ArrayBuilder arrayBuilder0 = new ArrayBuilder(2916);
      Class<Object> class0 = Object.class;
      arrayBuilder0.commonClass = class0;
      arrayBuilder0.add((Object) null);
  }"
3851,"    protected static Class<?> unboxingClass(final Class<?> parm) {
        final Class<?> prim = BOXING_CLASSES.get(parm);
        return prim == null ? parm : prim;
    }","  public void test19()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Class<?> class1 = ArrayBuilder.unboxingClass(class0);
}"
3852,"    public void add(final Object value) {
        // for all children after first...
        if (!Object.class.equals(commonClass)) {
            if (value == null) {
                isNumber = false;
                unboxing = false;
            } else {
                Class<?> eclass = value.getClass();
                // base common class on first non-null entry
                if (commonClass == null) {
                    commonClass = eclass;
                    isNumber = isNumber && Number.class.isAssignableFrom(commonClass);
                } else if (!commonClass.equals(eclass)) {
                    // if both are numbers...
                    if (isNumber && Number.class.isAssignableFrom(eclass)) {
                        commonClass = Number.class;
                    } else {
                        // attempt to find valid superclass
                        do {
                            eclass = eclass.getSuperclass();
                            if (eclass == null) {
                                commonClass = Object.class;
                                break;
                            }
                        } while (!commonClass.isAssignableFrom(eclass));
                    }
                }
            }
        }
        if (added >= untyped.length) {
            throw new IllegalArgumentException(""add() over size"");
        }
        untyped[added++] = value;
    }","  public void test20()  throws Throwable  {
      ArrayBuilder arrayBuilder0 = new ArrayBuilder(0);
      Integer integer0 = new Integer(0);
      // Undeclared exception!
      try { 
        arrayBuilder0.add(integer0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // add() over size
         //
         verifyException(""org.apache.commons.jexl3.internal.ArrayBuilder"", e);
      }
  }"
3853,"    boolean has(final int s) {
        return s >= 0 && s < stack.length && stack[s] != Scope.UNDECLARED;
    }","  public void test0()  throws Throwable  {
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[1];
      Scope scope1 = new Scope(scope0, stringArray0);
      Frame frame0 = new Frame(scope1, stringArray0, 1);
      boolean boolean0 = frame0.has(1);
}"
3854,"    public boolean equals(final Object obj) {
        if (obj == null) {
            return false;
        }
        if (getClass() != obj.getClass()) {
            return false;
        }
        final Frame other = (Frame) obj;
        return Arrays.deepEquals(this.stack, other.stack);
    }","  public void test1()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = ""][$O"";
      stringArray0[1] = ""=u."";
      Scope scope0 = new Scope((Scope) null, stringArray0);
      Frame frame0 = new Frame((Scope) null, stringArray0, 1);
      Frame frame1 = scope0.createFrame(frame0, stringArray0);
      boolean boolean0 = frame1.equals(frame0);
}"
3855,"    void set(final int r, final Object value) {
        stack[r] = value;
    }","  public void test2()  throws Throwable  {
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[1];
      Scope scope1 = new Scope(scope0, stringArray0);
      Frame frame0 = new Frame(scope1, stringArray0, 0);
      frame0.set(0, (Object) null);
  }"
3856,"    public String[] getUnboundParameters() {
        return scope.getParameters(curried);
    }","  public void test3()  throws Throwable  {
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      doReturn((String[]) null).when(scope0).getParameters(anyInt());
      String[] stringArray0 = new String[3];
      Frame frame0 = new Frame(scope0, stringArray0, (-1326));
      String[] stringArray1 = frame0.getUnboundParameters();
}"
3857,"    public String[] getUnboundParameters() {
        return scope.getParameters(curried);
    }","  public void test4()  throws Throwable  {
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[1];
      Scope scope1 = new Scope(scope0, stringArray0);
      Frame frame0 = new Frame(scope1, stringArray0, 0);
      String[] stringArray1 = frame0.getUnboundParameters();
}"
3858,"    public Scope getScope() {
        return scope;
    }","  public void test5()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      Frame frame0 = new Frame((Scope) null, objectArray0, 137);
      Scope scope0 = frame0.getScope();
}"
3859,"    public Scope getScope() {
        return scope;
    }","  public void test6()  throws Throwable  {
      Scope scope0 = new Scope((Scope) null, (String[]) null);
      Frame frame0 = new Frame(scope0, (Object[]) null, 1);
      Scope scope1 = frame0.getScope();
}"
3860,"    Object get(final int s) {
        return stack[s];
    }","  public void test7()  throws Throwable  {
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[1];
      Scope scope1 = new Scope(scope0, stringArray0);
      Frame frame0 = new Frame(scope1, stringArray0, 0);
      Object object0 = frame0.get(0);
}"
3861,"    Object get(final int s) {
        return stack[s];
    }","  public void test8()  throws Throwable  {
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[1];
      stringArray0[0] = ""]w~&]a10m{@2oKL"";
      Scope scope1 = new Scope(scope0, stringArray0);
      Frame frame0 = new Frame(scope1, stringArray0, 0);
      Object object0 = frame0.get(0);
}"
3862,"    void set(final int r, final Object value) {
        stack[r] = value;
    }","  public void test9()  throws Throwable  {
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[1];
      Scope scope1 = new Scope(scope0, stringArray0);
      Frame frame0 = new Frame(scope1, stringArray0, 1);
      Integer integer0 = new Integer((-874));
      // Undeclared exception!
      try { 
        frame0.set(0, integer0);
        fail(""Expecting exception: ArrayStoreException"");
      } catch(ArrayStoreException e) {
         //
         // java.lang.Integer
         //
         verifyException(""org.apache.commons.jexl3.internal.Frame"", e);
      }
  }"
3863,"    void set(final int r, final Object value) {
        stack[r] = value;
    }","  public void test10()  throws Throwable  {
      String[] stringArray0 = new String[4];
      Scope scope0 = new Scope((Scope) null, stringArray0);
      Frame frame0 = new Frame(scope0, stringArray0, (-2389));
      // Undeclared exception!
      try { 
        frame0.set((-2389), (Object) null);
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2389
         //
         verifyException(""org.apache.commons.jexl3.internal.Frame"", e);
      }
  }"
3864,"    boolean has(final int s) {
        return s >= 0 && s < stack.length && stack[s] != Scope.UNDECLARED;
    }","  public void test11()  throws Throwable  {
      Scope scope0 = new Scope((Scope) null, (String[]) null);
      Frame frame0 = new Frame(scope0, (Object[]) null, 1);
      // Undeclared exception!
      try { 
        frame0.has(1);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.internal.Frame"", e);
      }
  }"
3865,"    public String[] getUnboundParameters() {
        return scope.getParameters(curried);
    }","  public void test12()  throws Throwable  {
      String[] stringArray0 = new String[2];
      Frame frame0 = new Frame((Scope) null, stringArray0, 1);
      // Undeclared exception!
      try { 
        frame0.getUnboundParameters();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.internal.Frame"", e);
      }
  }"
3866,"    public String[] getUnboundParameters() {
        return scope.getParameters(curried);
    }","  public void test13()  throws Throwable  {
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[5];
      stringArray0[1] = ""W\""U(h]XxV"";
      stringArray0[2] = "">4('s, b.o3u*"";
      stringArray0[3] = """";
      Scope scope1 = new Scope(scope0, stringArray0);
      Frame frame0 = new Frame(scope1, stringArray0, 1);
      scope1.declareVariable(""?"");
      // Undeclared exception!
      try { 
        frame0.getUnboundParameters();
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException(""org.apache.commons.jexl3.internal.Scope"", e);
      }
  }"
3867,"    Object get(final int s) {
        return stack[s];
    }","  public void test14()  throws Throwable  {
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[1];
      Scope scope1 = new Scope(scope0, stringArray0);
      Frame frame0 = scope1.createFrame((Frame) null, stringArray0);
      // Undeclared exception!
      try { 
        frame0.get(1);
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException(""org.apache.commons.jexl3.internal.Frame"", e);
      }
  }"
3868,"    Frame assign(final Object... values) {
        if (stack != null) {
            final int nparm = scope.getArgCount();
            final Object[] copy = stack.clone();
            int ncopy = 0;
            if (values != null && values.length > 0) {
                ncopy = Math.min(nparm - curried, Math.min(nparm, values.length));
                System.arraycopy(values, 0, copy, curried, ncopy);
            }
            // unbound parameters are defined as null
            Arrays.fill(copy, curried + ncopy, nparm, null);
            return new Frame(scope, copy, curried + ncopy);
        }
        return this;
    }","  public void test15()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      Frame frame0 = new Frame((Scope) null, objectArray0, 3819);
      // Undeclared exception!
      try { 
        frame0.assign(objectArray0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.internal.Frame"", e);
      }
  }"
3869,"    Frame assign(final Object... values) {
        if (stack != null) {
            final int nparm = scope.getArgCount();
            final Object[] copy = stack.clone();
            int ncopy = 0;
            if (values != null && values.length > 0) {
                ncopy = Math.min(nparm - curried, Math.min(nparm, values.length));
                System.arraycopy(values, 0, copy, curried, ncopy);
            }
            // unbound parameters are defined as null
            Arrays.fill(copy, curried + ncopy, nparm, null);
            return new Frame(scope, copy, curried + ncopy);
        }
        return this;
    }","  public void test16()  throws Throwable  {
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[0];
      Scope scope1 = new Scope(scope0, stringArray0);
      Object[] objectArray0 = new Object[9];
      String[] stringArray1 = scope1.getLocalVariables();
      Frame frame0 = new Frame(scope1, objectArray0, 1);
      // Undeclared exception!
      try { 
        frame0.assign(stringArray1);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // fromIndex(1) > toIndex(0)
         //
         verifyException(""java.util.Arrays"", e);
      }
  }"
3870,"    Frame assign(final Object... values) {
        if (stack != null) {
            final int nparm = scope.getArgCount();
            final Object[] copy = stack.clone();
            int ncopy = 0;
            if (values != null && values.length > 0) {
                ncopy = Math.min(nparm - curried, Math.min(nparm, values.length));
                System.arraycopy(values, 0, copy, curried, ncopy);
            }
            // unbound parameters are defined as null
            Arrays.fill(copy, curried + ncopy, nparm, null);
            return new Frame(scope, copy, curried + ncopy);
        }
        return this;
    }","  public void test17()  throws Throwable  {
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[2];
      Scope scope1 = new Scope(scope0, stringArray0);
      Frame frame0 = new Frame(scope1, stringArray0, 0);
      Object[] objectArray0 = new Object[5];
      objectArray0[1] = (Object) frame0;
      // Undeclared exception!
      try { 
        frame0.assign(objectArray0);
        fail(""Expecting exception: ArrayStoreException"");
      } catch(ArrayStoreException e) {
      }
  }"
3871,"    Frame assign(final Object... values) {
        if (stack != null) {
            final int nparm = scope.getArgCount();
            final Object[] copy = stack.clone();
            int ncopy = 0;
            if (values != null && values.length > 0) {
                ncopy = Math.min(nparm - curried, Math.min(nparm, values.length));
                System.arraycopy(values, 0, copy, curried, ncopy);
            }
            // unbound parameters are defined as null
            Arrays.fill(copy, curried + ncopy, nparm, null);
            return new Frame(scope, copy, curried + ncopy);
        }
        return this;
    }","  public void test18()  throws Throwable  {
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[8];
      Scope scope1 = new Scope(scope0, stringArray0);
      Frame frame0 = new Frame(scope1, stringArray0, (-560));
      // Undeclared exception!
      try { 
        frame0.assign(stringArray0);
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }"
3872,"    Frame assign(final Object... values) {
        if (stack != null) {
            final int nparm = scope.getArgCount();
            final Object[] copy = stack.clone();
            int ncopy = 0;
            if (values != null && values.length > 0) {
                ncopy = Math.min(nparm - curried, Math.min(nparm, values.length));
                System.arraycopy(values, 0, copy, curried, ncopy);
            }
            // unbound parameters are defined as null
            Arrays.fill(copy, curried + ncopy, nparm, null);
            return new Frame(scope, copy, curried + ncopy);
        }
        return this;
    }","  public void test19()  throws Throwable  {
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[16];
      Scope scope1 = new Scope(scope0, stringArray0);
      Frame frame0 = new Frame(scope1, stringArray0, 3);
      Frame frame1 = frame0.assign(stringArray0);
}"
3873,"    public boolean equals(final Object obj) {
        if (obj == null) {
            return false;
        }
        if (getClass() != obj.getClass()) {
            return false;
        }
        final Frame other = (Frame) obj;
        return Arrays.deepEquals(this.stack, other.stack);
    }","  public void test20()  throws Throwable  {
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[1];
      Scope scope1 = new Scope(scope0, stringArray0);
      Frame frame0 = new Frame(scope1, stringArray0, 0);
      Frame frame1 = scope1.createFrame(frame0, (Object[]) null);
}"
3874,"    Frame assign(final Object... values) {
        if (stack != null) {
            final int nparm = scope.getArgCount();
            final Object[] copy = stack.clone();
            int ncopy = 0;
            if (values != null && values.length > 0) {
                ncopy = Math.min(nparm - curried, Math.min(nparm, values.length));
                System.arraycopy(values, 0, copy, curried, ncopy);
            }
            // unbound parameters are defined as null
            Arrays.fill(copy, curried + ncopy, nparm, null);
            return new Frame(scope, copy, curried + ncopy);
        }
        return this;
    }","  public void test21()  throws Throwable  {
      Scope scope0 = new Scope((Scope) null, (String[]) null);
      Frame frame0 = new Frame(scope0, (Object[]) null, 1);
      Frame frame1 = frame0.assign((Object[]) null);
}"
3875,"    boolean has(final int s) {
        return s >= 0 && s < stack.length && stack[s] != Scope.UNDECLARED;
    }","  public void test22()  throws Throwable  {
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[0];
      Scope scope1 = new Scope(scope0, stringArray0);
      scope1.declareVariable("""");
      Frame frame0 = scope1.createFrame((Frame) null, stringArray0);
      boolean boolean0 = frame0.has(0);
}"
3876,"    boolean has(final int s) {
        return s >= 0 && s < stack.length && stack[s] != Scope.UNDECLARED;
    }","  public void test23()  throws Throwable  {
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[16];
      Scope scope1 = new Scope(scope0, stringArray0);
      Frame frame0 = new Frame(scope1, stringArray0, 3);
      boolean boolean0 = frame0.has(3);
}"
3877,"    boolean has(final int s) {
        return s >= 0 && s < stack.length && stack[s] != Scope.UNDECLARED;
    }","  public void test24()  throws Throwable  {
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[1];
      Scope scope1 = new Scope(scope0, stringArray0);
      Frame frame0 = new Frame(scope1, stringArray0, 1);
      boolean boolean0 = frame0.has(2737);
}"
3878,"    boolean has(final int s) {
        return s >= 0 && s < stack.length && stack[s] != Scope.UNDECLARED;
    }","  public void test25()  throws Throwable  {
      String[] stringArray0 = new String[4];
      Scope scope0 = new Scope((Scope) null, stringArray0);
      Frame frame0 = new Frame(scope0, stringArray0, (-2389));
      boolean boolean0 = frame0.has((-2389));
}"
3879,"    public boolean equals(final Object obj) {
        if (obj == null) {
            return false;
        }
        if (getClass() != obj.getClass()) {
            return false;
        }
        final Frame other = (Frame) obj;
        return Arrays.deepEquals(this.stack, other.stack);
    }","  public void test26()  throws Throwable  {
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      Scope scope1 = new Scope(scope0, (String[]) null);
      Frame frame0 = new Frame(scope1, (Object[]) null, (-1));
      boolean boolean0 = frame0.equals((Object) null);
}"
3880,"    public boolean equals(final Object obj) {
        if (obj == null) {
            return false;
        }
        if (getClass() != obj.getClass()) {
            return false;
        }
        final Frame other = (Frame) obj;
        return Arrays.deepEquals(this.stack, other.stack);
    }","  public void test27()  throws Throwable  {
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[1];
      Scope scope1 = new Scope(scope0, stringArray0);
      Frame frame0 = new Frame(scope1, stringArray0, 1);
      Integer integer0 = new Integer((-874));
      boolean boolean0 = frame0.equals(integer0);
}"
3881,"    void set(final int r, final Object value) {
        stack[r] = value;
    }","  public void test28()  throws Throwable  {
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      Scope scope1 = new Scope(scope0, (String[]) null);
      Frame frame0 = new Frame(scope1, (Object[]) null, 0);
      // Undeclared exception!
      try { 
        frame0.set(0, scope1);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.internal.Frame"", e);
      }
  }"
3882,"    public int hashCode() {
        return Arrays.deepHashCode(this.stack);
    }","  public void test29()  throws Throwable  {
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[2];
      Scope scope1 = new Scope(scope0, stringArray0);
      Frame frame0 = new Frame(scope1, stringArray0, 0);
      frame0.hashCode();
  }"
3883,"    public Scope getScope() {
        return scope;
    }","  public void test30()  throws Throwable  {
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[2];
      Scope scope1 = new Scope(scope0, stringArray0);
      Frame frame0 = new Frame(scope1, stringArray0, 0);
      Scope scope2 = frame0.getScope();
}"
3884,"    Object get(final int s) {
        return stack[s];
    }","  public void test31()  throws Throwable  {
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      Scope scope1 = new Scope(scope0, (String[]) null);
      Frame frame0 = new Frame(scope1, (Object[]) null, (-1));
      // Undeclared exception!
      try { 
        frame0.get((-1));
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.internal.Frame"", e);
      }
  }"
3885,"    public String[] getUnboundParameters() {
        return scope.getParameters(curried);
    }","  public void test32()  throws Throwable  {
      Scope scope0 = mock(Scope.class, new ViolatedAssumptionAnswer());
      Scope scope1 = new Scope(scope0, (String[]) null);
      Frame frame0 = new Frame(scope1, (Object[]) null, (-1));
      String[] stringArray0 = frame0.getUnboundParameters();
}"
3886,"    public int size() {
        return max - min + 1;
    }","  public void test0()  throws Throwable  {
      IntegerRange integerRange0 = IntegerRange.create(1462, 1462);
      Object[] objectArray0 = new Object[1];
      Object[] objectArray1 = integerRange0.toArray(objectArray0);
}"
3887,"    public Object[] toArray() {
        final int size = size();
        final Object[] array = new Object[size];
        for(int a = 0; a < size; ++a) {
            array[a] = min + a;
        }
        return array;
    }","  public void test1()  throws Throwable  {
      IntegerRange integerRange0 = IntegerRange.create(1462, 1462);
      Object[] objectArray0 = new Object[1];
      Object[] objectArray1 = integerRange0.toArray(objectArray0);
}"
3888,"    public boolean equals(final Object obj) {
        if (obj == null) {
            return false;
        }
        if (getClass() != obj.getClass()) {
            return false;
        }
        final IntegerRange other = (IntegerRange) obj;
        if (this.min != other.min) {
            return false;
        }
        if (this.max != other.max) {
            return false;
        }
        return true;
    }","  public void test2()  throws Throwable  {
      IntegerRange.Descending integerRange_Descending0 = new IntegerRange.Descending(1426, 1426);
      IntegerRange.Descending integerRange_Descending1 = new IntegerRange.Descending(1426, 1842);
      boolean boolean0 = integerRange_Descending0.equals(integerRange_Descending1);
}"
3889,"    public boolean equals(final Object obj) {
        if (obj == null) {
            return false;
        }
        if (getClass() != obj.getClass()) {
            return false;
        }
        final IntegerRange other = (IntegerRange) obj;
        if (this.min != other.min) {
            return false;
        }
        if (this.max != other.max) {
            return false;
        }
        return true;
    }","  public void test3()  throws Throwable  {
      IntegerRange.Descending integerRange_Descending0 = new IntegerRange.Descending(1426, 1426);
      IntegerRange.Descending integerRange_Descending1 = new IntegerRange.Descending(1426, 1842);
      boolean boolean0 = integerRange_Descending0.equals(integerRange_Descending1);
}"
3890,"    public int size() {
        return max - min + 1;
    }","  public void test4()  throws Throwable  {
      IntegerRange.Descending integerRange_Descending0 = new IntegerRange.Descending(1426, 1426);
      IntegerRange.Descending integerRange_Descending1 = new IntegerRange.Descending(1426, 1842);
      boolean boolean0 = integerRange_Descending0.equals(integerRange_Descending1);
}"
3891,"    public int size() {
        return max - min + 1;
    }","  public void test5()  throws Throwable  {
      IntegerRange.Ascending integerRange_Ascending0 = new IntegerRange.Ascending(2408, (-1218));
      IntegerRange.Ascending integerRange_Ascending1 = new IntegerRange.Ascending(2042, (-1218));
      boolean boolean0 = integerRange_Ascending0.equals(integerRange_Ascending1);
}"
3892,"    public boolean equals(final Object obj) {
        if (obj == null) {
            return false;
        }
        if (getClass() != obj.getClass()) {
            return false;
        }
        final IntegerRange other = (IntegerRange) obj;
        if (this.min != other.min) {
            return false;
        }
        if (this.max != other.max) {
            return false;
        }
        return true;
    }","  public void test6()  throws Throwable  {
      IntegerRange.Ascending integerRange_Ascending0 = new IntegerRange.Ascending(2408, (-1218));
      IntegerRange.Ascending integerRange_Ascending1 = new IntegerRange.Ascending(2042, (-1218));
      boolean boolean0 = integerRange_Ascending0.equals(integerRange_Ascending1);
}"
3893,"    public boolean equals(final Object obj) {
        if (obj == null) {
            return false;
        }
        if (getClass() != obj.getClass()) {
            return false;
        }
        final IntegerRange other = (IntegerRange) obj;
        if (this.min != other.min) {
            return false;
        }
        if (this.max != other.max) {
            return false;
        }
        return true;
    }","  public void test7()  throws Throwable  {
      IntegerRange.Ascending integerRange_Ascending0 = new IntegerRange.Ascending(2408, (-1218));
      IntegerRange.Ascending integerRange_Ascending1 = new IntegerRange.Ascending(2042, (-1218));
      boolean boolean0 = integerRange_Ascending0.equals(integerRange_Ascending1);
}"
3894,"    public int size() {
        return max - min + 1;
    }","  public void test8()  throws Throwable  {
      IntegerRange integerRange0 = IntegerRange.create((-900), 1);
      integerRange0.hashCode();
}"
3895,"    public int size() {
        return max - min + 1;
    }","  public void test9()  throws Throwable  {
      IntegerRange integerRange0 = IntegerRange.create((-584), (-1));
      int int0 = integerRange0.getMin();
}"
3896,"    public int getMin() {
        return min;
    }","  public void test10()  throws Throwable  {
      IntegerRange integerRange0 = IntegerRange.create((-584), (-1));
      int int0 = integerRange0.getMin();
}"
3897,"    public int size() {
        return max - min + 1;
    }","  public void test11()  throws Throwable  {
      IntegerRange.Ascending integerRange_Ascending0 = new IntegerRange.Ascending((-967), 1);
      integerRange_Ascending0.iterator();
}"
3898,"    public Object[] toArray() {
        final int size = size();
        final Object[] array = new Object[size];
        for(int a = 0; a < size; ++a) {
            array[a] = min + a;
        }
        return array;
    }","  public void test12()  throws Throwable  {
      IntegerRange.Ascending integerRange_Ascending0 = new IntegerRange.Ascending((-5), (-5));
      Object[] objectArray0 = integerRange_Ascending0.toArray();
}"
3899,"    public int size() {
        return max - min + 1;
    }","  public void test13()  throws Throwable  {
      IntegerRange.Ascending integerRange_Ascending0 = new IntegerRange.Ascending((-5), (-5));
      Object[] objectArray0 = integerRange_Ascending0.toArray();
}"
3900,"    public int size() {
        return max - min + 1;
    }","  public void test14()  throws Throwable  {
      IntegerRange.Descending integerRange_Descending0 = new IntegerRange.Descending(1, 0);
      Object[] objectArray0 = integerRange_Descending0.toArray();
}"
3901,"    public Object[] toArray() {
        final int size = size();
        final Object[] array = new Object[size];
        for(int a = 0; a < size; ++a) {
            array[a] = min + a;
        }
        return array;
    }","  public void test15()  throws Throwable  {
      IntegerRange.Descending integerRange_Descending0 = new IntegerRange.Descending(1, 0);
      Object[] objectArray0 = integerRange_Descending0.toArray();
}"
3902,"    public int size() {
        return max - min + 1;
    }","  public void test16()  throws Throwable  {
      IntegerRange.Descending integerRange_Descending0 = new IntegerRange.Descending(1, 1);
      int int0 = integerRange_Descending0.size();
}"
3903,"    public int size() {
        return max - min + 1;
    }","  public void test17()  throws Throwable  {
      IntegerRange.Ascending integerRange_Ascending0 = new IntegerRange.Ascending(1, (-1939));
      int int0 = integerRange_Ascending0.size();
}"
3904,"    public int size() {
        return max - min + 1;
    }","  public void test18()  throws Throwable  {
      IntegerRange integerRange0 = IntegerRange.create(0, 0);
      int int0 = integerRange0.getMin();
}"
3905,"    public int getMin() {
        return min;
    }","  public void test19()  throws Throwable  {
      IntegerRange integerRange0 = IntegerRange.create(0, 0);
      int int0 = integerRange0.getMin();
}"
3906,"    public int getMax() {
        return max;
    }","  public void test20()  throws Throwable  {
      IntegerRange integerRange0 = IntegerRange.create(0, 0);
      int int0 = integerRange0.getMax();
}"
3907,"    public int size() {
        return max - min + 1;
    }","  public void test21()  throws Throwable  {
      IntegerRange integerRange0 = IntegerRange.create(0, 0);
      int int0 = integerRange0.getMax();
}"
3908,"    public int size() {
        return max - min + 1;
    }","  public void test22()  throws Throwable  {
      IntegerRange.Ascending integerRange_Ascending0 = new IntegerRange.Ascending(2294, (-553));
      int int0 = integerRange_Ascending0.getMax();
}"
3909,"    public int getMax() {
        return max;
    }","  public void test23()  throws Throwable  {
      IntegerRange.Ascending integerRange_Ascending0 = new IntegerRange.Ascending(2294, (-553));
      int int0 = integerRange_Ascending0.getMax();
}"
3910,"    public Object[] toArray() {
        final int size = size();
        final Object[] array = new Object[size];
        for(int a = 0; a < size; ++a) {
            array[a] = min + a;
        }
        return array;
    }","  public void test24()  throws Throwable  {
      IntegerRange.Descending integerRange_Descending0 = new IntegerRange.Descending((-1465), 1);
      // Undeclared exception!
      try { 
        integerRange_Descending0.toArray((String[]) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
3911,"    public Object[] toArray() {
        final int size = size();
        final Object[] array = new Object[size];
        for(int a = 0; a < size; ++a) {
            array[a] = min + a;
        }
        return array;
    }","  public void test25()  throws Throwable  {
      IntegerRange.Descending integerRange_Descending0 = new IntegerRange.Descending(1387, (-1490));
      Object[] objectArray0 = new Object[0];
      // Undeclared exception!
      try { 
        integerRange_Descending0.toArray(objectArray0);
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
3912,"    public Object[] toArray() {
        final int size = size();
        final Object[] array = new Object[size];
        for(int a = 0; a < size; ++a) {
            array[a] = min + a;
        }
        return array;
    }","  public void test26()  throws Throwable  {
      IntegerRange.Ascending integerRange_Ascending0 = new IntegerRange.Ascending(1, (-1));
      // Undeclared exception!
      try { 
        integerRange_Ascending0.toArray();
        fail(""Expecting exception: NegativeArraySizeException"");
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.internal.IntegerRange"", e);
      }
  }"
3913,"    public boolean containsAll(final Collection<?> c) {
        for(final Object cc : c) {
            if (!contains(cc)) {
                return false;
            }
        }
        return true;
    }","  public void test27()  throws Throwable  {
      IntegerRange.Ascending integerRange_Ascending0 = new IntegerRange.Ascending((-403), (-403));
      // Undeclared exception!
      try { 
        integerRange_Ascending0.containsAll((Collection<?>) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.internal.IntegerRange"", e);
      }
  }"
3914,"    public boolean contains(final Object o) {
        if (o instanceof Number) {
            final long v = ((Number) o).intValue();
            return min <= v && v <= max;
        }
        return false;
    }","  public void test28()  throws Throwable  {
      IntegerRange.Descending integerRange_Descending0 = new IntegerRange.Descending(1, 1);
      Short short0 = new Short((short)13);
      boolean boolean0 = integerRange_Descending0.contains(short0);
}"
3915,"    public int size() {
        return max - min + 1;
    }","  public void test29()  throws Throwable  {
      IntegerRange.Descending integerRange_Descending0 = new IntegerRange.Descending(1, 1);
      Short short0 = new Short((short)13);
      boolean boolean0 = integerRange_Descending0.contains(short0);
}"
3916,"    public boolean contains(final Object o) {
        if (o instanceof Number) {
            final long v = ((Number) o).intValue();
            return min <= v && v <= max;
        }
        return false;
    }","  public void test30()  throws Throwable  {
      IntegerRange.Descending integerRange_Descending0 = new IntegerRange.Descending(1, 536);
      Short short0 = new Short((short)13);
      boolean boolean0 = integerRange_Descending0.contains(short0);
}"
3917,"    public int size() {
        return max - min + 1;
    }","  public void test31()  throws Throwable  {
      IntegerRange.Descending integerRange_Descending0 = new IntegerRange.Descending(1, 536);
      Short short0 = new Short((short)13);
      boolean boolean0 = integerRange_Descending0.contains(short0);
}"
3918,"    public int size() {
        return max - min + 1;
    }","  public void test32()  throws Throwable  {
      IntegerRange integerRange0 = IntegerRange.create(0, 0);
      boolean boolean0 = integerRange0.contains((Object) null);
}"
3919,"    public boolean contains(final Object o) {
        if (o instanceof Number) {
            final long v = ((Number) o).intValue();
            return min <= v && v <= max;
        }
        return false;
    }","  public void test33()  throws Throwable  {
      IntegerRange integerRange0 = IntegerRange.create(0, 0);
      boolean boolean0 = integerRange0.contains((Object) null);
}"
3920,"    public int size() {
        return max - min + 1;
    }","  public void test34()  throws Throwable  {
      IntegerRange.Ascending integerRange_Ascending0 = new IntegerRange.Ascending(1924, 1923);
      int int0 = integerRange_Ascending0.size();
}"
3921,"    public Object[] toArray() {
        final int size = size();
        final Object[] array = new Object[size];
        for(int a = 0; a < size; ++a) {
            array[a] = min + a;
        }
        return array;
    }","  public void test35()  throws Throwable  {
      IntegerRange.Descending integerRange_Descending0 = new IntegerRange.Descending((-1465), 1);
      Integer[] integerArray0 = new Integer[13];
      Integer[] integerArray1 = integerRange_Descending0.toArray(integerArray0);
}"
3922,"    public int size() {
        return max - min + 1;
    }","  public void test36()  throws Throwable  {
      IntegerRange.Descending integerRange_Descending0 = new IntegerRange.Descending((-1465), 1);
      Integer[] integerArray0 = new Integer[13];
      Integer[] integerArray1 = integerRange_Descending0.toArray(integerArray0);
}"
3923,"    public Object[] toArray() {
        final int size = size();
        final Object[] array = new Object[size];
        for(int a = 0; a < size; ++a) {
            array[a] = min + a;
        }
        return array;
    }","  public void test37()  throws Throwable  {
      IntegerRange.Ascending integerRange_Ascending0 = new IntegerRange.Ascending(3506, 3506);
      IntegerRange[] integerRangeArray0 = new IntegerRange[4];
      // Undeclared exception!
      try { 
        integerRange_Ascending0.toArray(integerRangeArray0);
        fail(""Expecting exception: UnsupportedOperationException"");
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.internal.IntegerRange"", e);
      }
  }"
3924,"    public boolean contains(final Object o) {
        if (o instanceof Number) {
            final long v = ((Number) o).intValue();
            return min <= v && v <= max;
        }
        return false;
    }","  public void test38()  throws Throwable  {
      IntegerRange integerRange0 = IntegerRange.create(1924, 1923);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      boolean boolean0 = linkedList0.addAll((Collection<?>) integerRange0);
}"
3925,"    public boolean addAll(final Collection<? extends Integer> c) {
        throw new UnsupportedOperationException();
    }","  public void test39()  throws Throwable  {
      IntegerRange integerRange0 = IntegerRange.create(1924, 1923);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      boolean boolean0 = linkedList0.addAll((Collection<?>) integerRange0);
}"
3926,"    public int size() {
        return max - min + 1;
    }","  public void test40()  throws Throwable  {
      IntegerRange.Ascending integerRange_Ascending0 = new IntegerRange.Ascending(0, 0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(1445);
      linkedList0.push(integer0);
      boolean boolean0 = integerRange_Ascending0.containsAll(linkedList0);
}"
3927,"    public boolean containsAll(final Collection<?> c) {
        for(final Object cc : c) {
            if (!contains(cc)) {
                return false;
            }
        }
        return true;
    }","  public void test41()  throws Throwable  {
      IntegerRange.Ascending integerRange_Ascending0 = new IntegerRange.Ascending(0, 0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(1445);
      linkedList0.push(integer0);
      boolean boolean0 = integerRange_Ascending0.containsAll(linkedList0);
}"
3928,"    public boolean containsAll(final Collection<?> c) {
        for(final Object cc : c) {
            if (!contains(cc)) {
                return false;
            }
        }
        return true;
    }","  public void test42()  throws Throwable  {
      IntegerRange integerRange0 = IntegerRange.create((-17), (-17));
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      Double double0 = new Double((-17));
      linkedList0.add(double0);
      boolean boolean0 = integerRange0.containsAll(linkedList0);
}"
3929,"    public int size() {
        return max - min + 1;
    }","  public void test43()  throws Throwable  {
      IntegerRange integerRange0 = IntegerRange.create((-17), (-17));
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      Double double0 = new Double((-17));
      linkedList0.add(double0);
      boolean boolean0 = integerRange0.containsAll(linkedList0);
}"
3930,"    public boolean contains(final Object o) {
        if (o instanceof Number) {
            final long v = ((Number) o).intValue();
            return min <= v && v <= max;
        }
        return false;
    }","  public void test44()  throws Throwable  {
      IntegerRange integerRange0 = IntegerRange.create(1924, 1923);
      Float float0 = new Float(636.4452);
      boolean boolean0 = integerRange0.contains(float0);
}"
3931,"    public int size() {
        return max - min + 1;
    }","  public void test45()  throws Throwable  {
      IntegerRange integerRange0 = IntegerRange.create(1924, 1923);
      Float float0 = new Float(636.4452);
      boolean boolean0 = integerRange0.contains(float0);
}"
3932,"    public int size() {
        return max - min + 1;
    }","  public void test46()  throws Throwable  {
      IntegerRange.Descending integerRange_Descending0 = new IntegerRange.Descending(1387, 1435);
      IntegerRange.Descending integerRange_Descending1 = new IntegerRange.Descending(1387, (-1490));
      boolean boolean0 = integerRange_Descending0.equals(integerRange_Descending1);
}"
3933,"    public boolean equals(final Object obj) {
        if (obj == null) {
            return false;
        }
        if (getClass() != obj.getClass()) {
            return false;
        }
        final IntegerRange other = (IntegerRange) obj;
        if (this.min != other.min) {
            return false;
        }
        if (this.max != other.max) {
            return false;
        }
        return true;
    }","  public void test47()  throws Throwable  {
      IntegerRange.Descending integerRange_Descending0 = new IntegerRange.Descending(1387, 1435);
      IntegerRange.Descending integerRange_Descending1 = new IntegerRange.Descending(1387, (-1490));
      boolean boolean0 = integerRange_Descending0.equals(integerRange_Descending1);
}"
3934,"    public boolean equals(final Object obj) {
        if (obj == null) {
            return false;
        }
        if (getClass() != obj.getClass()) {
            return false;
        }
        final IntegerRange other = (IntegerRange) obj;
        if (this.min != other.min) {
            return false;
        }
        if (this.max != other.max) {
            return false;
        }
        return true;
    }","  public void test48()  throws Throwable  {
      IntegerRange.Descending integerRange_Descending0 = new IntegerRange.Descending(1387, 1435);
      IntegerRange.Descending integerRange_Descending1 = new IntegerRange.Descending(1387, (-1490));
      boolean boolean0 = integerRange_Descending0.equals(integerRange_Descending1);
}"
3935,"    public int size() {
        return max - min + 1;
    }","  public void test49()  throws Throwable  {
      IntegerRange integerRange0 = IntegerRange.create((-1215), 2408);
      IntegerRange.Ascending integerRange_Ascending0 = new IntegerRange.Ascending(2042, (-1215));
      boolean boolean0 = integerRange0.equals(integerRange_Ascending0);
}"
3936,"    public boolean equals(final Object obj) {
        if (obj == null) {
            return false;
        }
        if (getClass() != obj.getClass()) {
            return false;
        }
        final IntegerRange other = (IntegerRange) obj;
        if (this.min != other.min) {
            return false;
        }
        if (this.max != other.max) {
            return false;
        }
        return true;
    }","  public void test50()  throws Throwable  {
      IntegerRange integerRange0 = IntegerRange.create((-1215), 2408);
      IntegerRange.Ascending integerRange_Ascending0 = new IntegerRange.Ascending(2042, (-1215));
      boolean boolean0 = integerRange0.equals(integerRange_Ascending0);
}"
3937,"    public boolean equals(final Object obj) {
        if (obj == null) {
            return false;
        }
        if (getClass() != obj.getClass()) {
            return false;
        }
        final IntegerRange other = (IntegerRange) obj;
        if (this.min != other.min) {
            return false;
        }
        if (this.max != other.max) {
            return false;
        }
        return true;
    }","  public void test51()  throws Throwable  {
      IntegerRange.Descending integerRange_Descending0 = new IntegerRange.Descending(1387, 1435);
      boolean boolean0 = integerRange_Descending0.equals(integerRange_Descending0);
}"
3938,"    public int size() {
        return max - min + 1;
    }","  public void test52()  throws Throwable  {
      IntegerRange.Descending integerRange_Descending0 = new IntegerRange.Descending(1387, 1435);
      boolean boolean0 = integerRange_Descending0.equals(integerRange_Descending0);
}"
3939,"    public boolean equals(final Object obj) {
        if (obj == null) {
            return false;
        }
        if (getClass() != obj.getClass()) {
            return false;
        }
        final IntegerRange other = (IntegerRange) obj;
        if (this.min != other.min) {
            return false;
        }
        if (this.max != other.max) {
            return false;
        }
        return true;
    }","  public void test53()  throws Throwable  {
      IntegerRange.Ascending integerRange_Ascending0 = new IntegerRange.Ascending(18, 18);
      boolean boolean0 = integerRange_Ascending0.equals((Object) null);
}"
3940,"    public int size() {
        return max - min + 1;
    }","  public void test54()  throws Throwable  {
      IntegerRange.Ascending integerRange_Ascending0 = new IntegerRange.Ascending(18, 18);
      boolean boolean0 = integerRange_Ascending0.equals((Object) null);
}"
3941,"    public boolean equals(final Object obj) {
        if (obj == null) {
            return false;
        }
        if (getClass() != obj.getClass()) {
            return false;
        }
        final IntegerRange other = (IntegerRange) obj;
        if (this.min != other.min) {
            return false;
        }
        if (this.max != other.max) {
            return false;
        }
        return true;
    }","  public void test55()  throws Throwable  {
      IntegerRange integerRange0 = IntegerRange.create(1924, 1923);
      Float float0 = new Float(636.4452);
      boolean boolean0 = integerRange0.equals(float0);
}"
3942,"    public int size() {
        return max - min + 1;
    }","  public void test56()  throws Throwable  {
      IntegerRange integerRange0 = IntegerRange.create(1924, 1923);
      Float float0 = new Float(636.4452);
      boolean boolean0 = integerRange0.equals(float0);
}"
3943,"    public int size() {
        return max - min + 1;
    }","  public void test57()  throws Throwable  {
      IntegerRange.Descending integerRange_Descending0 = new IntegerRange.Descending((-1465), 1);
      integerRange_Descending0.iterator();
}"
3944,"    public int size() {
        return max - min + 1;
    }","  public void test58()  throws Throwable  {
      IntegerRange.Ascending integerRange_Ascending0 = new IntegerRange.Ascending(5, 5);
      integerRange_Ascending0.iterator();
}"
3945,"    public void clear() {
        throw new UnsupportedOperationException();
    }","  public void test59()  throws Throwable  {
      IntegerRange integerRange0 = IntegerRange.create(1975, 1975);
      // Undeclared exception!
      try { 
        integerRange0.clear();
        fail(""Expecting exception: UnsupportedOperationException"");
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.internal.IntegerRange"", e);
      }
  }"
3946,"    public boolean remove(final Object o) {
        throw new UnsupportedOperationException();
    }","  public void test60()  throws Throwable  {
      IntegerRange.Ascending integerRange_Ascending0 = new IntegerRange.Ascending((-1), (-1));
      Integer integer0 = new Integer((-1));
      // Undeclared exception!
      try { 
        integerRange_Ascending0.remove(integer0);
        fail(""Expecting exception: UnsupportedOperationException"");
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.internal.IntegerRange"", e);
      }
  }"
3947,"    public int size() {
        return max - min + 1;
    }","  public void test61()  throws Throwable  {
      IntegerRange.Ascending integerRange_Ascending0 = new IntegerRange.Ascending(5, 5);
      boolean boolean0 = integerRange_Ascending0.isEmpty();
}"
3948,"    public boolean isEmpty() {
        return false;
    }","  public void test62()  throws Throwable  {
      IntegerRange.Ascending integerRange_Ascending0 = new IntegerRange.Ascending(5, 5);
      boolean boolean0 = integerRange_Ascending0.isEmpty();
}"
3949,"    public int size() {
        return max - min + 1;
    }","  public void test63()  throws Throwable  {
      IntegerRange.Ascending integerRange_Ascending0 = new IntegerRange.Ascending(5, 5);
      int int0 = integerRange_Ascending0.getMax();
}"
3950,"    public int getMax() {
        return max;
    }","  public void test64()  throws Throwable  {
      IntegerRange.Ascending integerRange_Ascending0 = new IntegerRange.Ascending(5, 5);
      int int0 = integerRange_Ascending0.getMax();
}"
3951,"    public boolean add(final Integer e) {
        throw new UnsupportedOperationException();
    }","  public void test65()  throws Throwable  {
      IntegerRange.Ascending integerRange_Ascending0 = new IntegerRange.Ascending(0, 0);
      Integer integer0 = new Integer(1445);
      // Undeclared exception!
      try { 
        integerRange_Ascending0.add(integer0);
        fail(""Expecting exception: UnsupportedOperationException"");
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.internal.IntegerRange"", e);
      }
  }"
3952,"    public int size() {
        return max - min + 1;
    }","  public void test66()  throws Throwable  {
      IntegerRange integerRange0 = IntegerRange.create(1975, 1975);
      int int0 = integerRange0.getMin();
}"
3953,"    public int getMin() {
        return min;
    }","  public void test67()  throws Throwable  {
      IntegerRange integerRange0 = IntegerRange.create(1975, 1975);
      int int0 = integerRange0.getMin();
}"
3954,"    public boolean addAll(final Collection<? extends Integer> c) {
        throw new UnsupportedOperationException();
    }","  public void test68()  throws Throwable  {
      IntegerRange integerRange0 = IntegerRange.create((-17), (-17));
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      // Undeclared exception!
      try { 
        integerRange0.addAll(linkedList0);
        fail(""Expecting exception: UnsupportedOperationException"");
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.internal.IntegerRange"", e);
      }
  }"
3955,"    public boolean retainAll(final Collection<?> c) {
        throw new UnsupportedOperationException();
    }","  public void test69()  throws Throwable  {
      IntegerRange integerRange0 = IntegerRange.create(0, 0);
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      // Undeclared exception!
      try { 
        integerRange0.retainAll(linkedList0);
        fail(""Expecting exception: UnsupportedOperationException"");
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.internal.IntegerRange"", e);
      }
  }"
3956,"    public boolean removeAll(final Collection<?> c) {
        throw new UnsupportedOperationException();
    }","  public void test70()  throws Throwable  {
      IntegerRange.Ascending integerRange_Ascending0 = new IntegerRange.Ascending(13, (-1014));
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      // Undeclared exception!
      try { 
        integerRange_Ascending0.removeAll(linkedList0);
        fail(""Expecting exception: UnsupportedOperationException"");
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.internal.IntegerRange"", e);
      }
  }"
3957,"    public Iterator<?> getIterator(final Object obj) {
        return uberspect.getIterator(obj);
    }","  public void test0()  throws Throwable  {
      Jdk14Logger jdk14Logger0 = new Jdk14Logger("""");
      JexlUberspect.ResolverStrategy jexlUberspect_ResolverStrategy0 = JexlUberspect.MAP_STRATEGY;
      Permissions permissions0 = new Permissions();
      Uberspect uberspect0 = new Uberspect(jdk14Logger0, jexlUberspect_ResolverStrategy0, permissions0);
      JexlSandbox jexlSandbox0 = new JexlSandbox(true, true);
      SandboxUberspect sandboxUberspect0 = new SandboxUberspect(uberspect0, jexlSandbox0);
      JexlOperator jexlOperator0 = JexlOperator.STARTSWITH;
      List<JexlUberspect.PropertyResolver> list0 = sandboxUberspect0.getResolvers(jexlOperator0, jexlSandbox0);
      Iterator<?> iterator0 = sandboxUberspect0.getIterator(list0);
}"
3958,"    public ClassLoader getClassLoader() {
        return uberspect.getClassLoader();
    }","  public void test1()  throws Throwable  {
      JexlUberspect.ResolverStrategy jexlUberspect_ResolverStrategy0 = JexlUberspect.MAP_STRATEGY;
      Permissions permissions0 = Permissions.DEFAULT;
      Uberspect uberspect0 = new Uberspect((Log) null, jexlUberspect_ResolverStrategy0, permissions0);
      JexlSandbox jexlSandbox0 = new JexlSandbox();
      SandboxUberspect sandboxUberspect0 = new SandboxUberspect(uberspect0, jexlSandbox0);
      sandboxUberspect0.setClassLoader((ClassLoader) null);
      ClassLoader classLoader0 = sandboxUberspect0.getClassLoader();
}"
3959,"    public JexlArithmetic.Uberspect getArithmetic(final JexlArithmetic arithmetic) {
        return uberspect.getArithmetic(arithmetic);
    }","  public void test2()  throws Throwable  {
      NoOpLog noOpLog0 = new NoOpLog();
      JexlUberspect.ResolverStrategy jexlUberspect_ResolverStrategy0 = JexlUberspect.MAP_STRATEGY;
      Permissions permissions0 = Permissions.DEFAULT;
      Uberspect uberspect0 = new Uberspect(noOpLog0, jexlUberspect_ResolverStrategy0, permissions0);
      JexlSandbox jexlSandbox0 = new JexlSandbox();
      SandboxUberspect sandboxUberspect0 = new SandboxUberspect(uberspect0, jexlSandbox0);
      JexlArithmetic.Uberspect jexlArithmetic_Uberspect0 = sandboxUberspect0.getArithmetic((JexlArithmetic) null);
}"
3960,"    public JexlPropertySet getPropertySet(final Object obj,final Object identifier,final Object arg) {
        return getPropertySet(null, obj, identifier, arg);
    }","  public void test3()  throws Throwable  {
      NoOpLog noOpLog0 = new NoOpLog("""");
      JexlUberspect.ResolverStrategy jexlUberspect_ResolverStrategy0 = JexlUberspect.MAP_STRATEGY;
      Permissions permissions0 = new Permissions();
      Uberspect uberspect0 = new Uberspect(noOpLog0, jexlUberspect_ResolverStrategy0, permissions0);
      JexlSandbox jexlSandbox0 = new JexlSandbox();
      SandboxUberspect sandboxUberspect0 = new SandboxUberspect(uberspect0, jexlSandbox0);
      LinkedList<JexlUberspect.PropertyResolver> linkedList0 = new LinkedList<JexlUberspect.PropertyResolver>();
      linkedList0.add((JexlUberspect.PropertyResolver) null);
      Class<Integer> class0 = Integer.TYPE;
      // Undeclared exception!
      try { 
        sandboxUberspect0.getPropertySet((List<JexlUberspect.PropertyResolver>) linkedList0, (Object) jexlUberspect_ResolverStrategy0, (Object) class0, (Object) jexlUberspect_ResolverStrategy0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.internal.introspection.Uberspect"", e);
      }
  }"
3961,"    public JexlPropertySet getPropertySet(final Object obj,final Object identifier,final Object arg) {
        return getPropertySet(null, obj, identifier, arg);
    }","  public void test4()  throws Throwable  {
      Permissions permissions0 = new Permissions();
      Uberspect uberspect0 = new Uberspect((Log) null, (JexlUberspect.ResolverStrategy) null, permissions0);
      JexlSandbox jexlSandbox0 = new JexlSandbox(true, true);
      SandboxUberspect sandboxUberspect0 = new SandboxUberspect(uberspect0, jexlSandbox0);
      JexlOperator jexlOperator0 = JexlOperator.STARTSWITH;
      List<JexlUberspect.PropertyResolver> list0 = sandboxUberspect0.getResolvers(jexlOperator0, jexlSandbox0);
      Class<Integer> class0 = Integer.TYPE;
      // Undeclared exception!
      try { 
        sandboxUberspect0.getPropertySet(list0, (Object) class0, (Object) """", (Object) jexlOperator0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.internal.introspection.ClassMap"", e);
      }
  }"
3962,"    public JexlPropertyGet getPropertyGet(final Object obj, final Object identifier) {
        return getPropertyGet(null, obj, identifier);
    }","  public void test5()  throws Throwable  {
      NoOpLog noOpLog0 = new NoOpLog();
      JexlUberspect.ResolverStrategy jexlUberspect_ResolverStrategy0 = JexlUberspect.MAP_STRATEGY;
      Uberspect uberspect0 = new Uberspect(noOpLog0, jexlUberspect_ResolverStrategy0);
      JexlSandbox jexlSandbox0 = new JexlSandbox();
      SandboxUberspect sandboxUberspect0 = new SandboxUberspect(uberspect0, jexlSandbox0);
      LinkedList<JexlUberspect.PropertyResolver> linkedList0 = new LinkedList<JexlUberspect.PropertyResolver>();
      linkedList0.add((JexlUberspect.PropertyResolver) null);
      Integer integer0 = new Integer((-1720));
      // Undeclared exception!
      try { 
        sandboxUberspect0.getPropertyGet((List<JexlUberspect.PropertyResolver>) linkedList0, (Object) linkedList0, (Object) integer0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.internal.introspection.Uberspect"", e);
      }
  }"
3963,"    public JexlPropertyGet getPropertyGet(final Object obj, final Object identifier) {
        return getPropertyGet(null, obj, identifier);
    }","  public void test6()  throws Throwable  {
      JexlUberspect.ResolverStrategy jexlUberspect_ResolverStrategy0 = JexlUberspect.MAP_STRATEGY;
      Permissions permissions0 = Permissions.DEFAULT;
      Uberspect uberspect0 = new Uberspect((Log) null, jexlUberspect_ResolverStrategy0, permissions0);
      JexlSandbox jexlSandbox0 = new JexlSandbox();
      SandboxUberspect sandboxUberspect0 = new SandboxUberspect(uberspect0, jexlSandbox0);
      JexlUberspect.JexlResolver jexlUberspect_JexlResolver0 = JexlUberspect.JexlResolver.DUCK;
      // Undeclared exception!
      try { 
        sandboxUberspect0.getPropertyGet((Object) uberspect0, (Object) jexlUberspect_JexlResolver0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.internal.introspection.ClassMap"", e);
      }
  }"
3964,"    public Iterator<?> getIterator(final Object obj) {
        return uberspect.getIterator(obj);
    }","  public void test7()  throws Throwable  {
      Jdk14Logger jdk14Logger0 = new Jdk14Logger("""");
      JexlUberspect.ResolverStrategy jexlUberspect_ResolverStrategy0 = JexlUberspect.MAP_STRATEGY;
      Permissions permissions0 = new Permissions();
      Uberspect uberspect0 = new Uberspect(jdk14Logger0, jexlUberspect_ResolverStrategy0, permissions0);
      JexlSandbox jexlSandbox0 = new JexlSandbox(true, true);
      SandboxUberspect sandboxUberspect0 = new SandboxUberspect(uberspect0, jexlSandbox0);
      // Undeclared exception!
      try { 
        sandboxUberspect0.getIterator((Object) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.internal.introspection.Uberspect"", e);
      }
  }"
3965,"    public JexlMethod getConstructor(final Object ctorHandle, final Object... args) {
        final String className;
        if (ctorHandle instanceof Class<?>) {
            className = sandbox.execute((Class<?>) ctorHandle, """");
        } else if (ctorHandle != null) {
            className = sandbox.execute(ctorHandle.toString(), """");
        } else {
            className = null;
        }
        return className != null && className != JexlSandbox.NULL ? uberspect.getConstructor(className, args) : null;
    }","  public void test8()  throws Throwable  {
      NoOpLog noOpLog0 = new NoOpLog(""&l:F.}b}Y]N'm"");
      JexlUberspect.ResolverStrategy jexlUberspect_ResolverStrategy0 = JexlUberspect.JEXL_STRATEGY;
      Uberspect uberspect0 = new Uberspect(noOpLog0, jexlUberspect_ResolverStrategy0);
      JexlSandbox jexlSandbox0 = new JexlSandbox();
      SandboxUberspect sandboxUberspect0 = new SandboxUberspect(uberspect0, jexlSandbox0);
      sandboxUberspect0.setClassLoader((ClassLoader) null);
      Object[] objectArray0 = new Object[4];
      // Undeclared exception!
      try { 
        sandboxUberspect0.getConstructor(noOpLog0, objectArray0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.internal.introspection.Introspector"", e);
      }
  }"
3966,"    public SandboxUberspect(final JexlUberspect theUberspect, final JexlSandbox theSandbox) {
        if (theSandbox == null) {
            throw new NullPointerException(""sandbox can not be null"");
        }
        if (theUberspect == null) {
            throw new NullPointerException(""uberspect can not be null"");
        }
        this.uberspect = theUberspect;
        this.sandbox = theSandbox.copy();
    }","  public void test9()  throws Throwable  {
      NoOpLog noOpLog0 = new NoOpLog();
      JexlUberspect.ResolverStrategy jexlUberspect_ResolverStrategy0 = JexlUberspect.JEXL_STRATEGY;
      Uberspect uberspect0 = new Uberspect(noOpLog0, jexlUberspect_ResolverStrategy0);
      JexlSandbox jexlSandbox0 = new JexlSandbox();
      jexlSandbox0.permissions((String) null, false, false, true);
      SandboxUberspect sandboxUberspect0 = null;
      try {
        sandboxUberspect0 = new SandboxUberspect(uberspect0, jexlSandbox0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.util.concurrent.ConcurrentHashMap"", e);
      }
  }"
3967,"    public int getVersion() {
        return uberspect.getVersion();
    }","  public void test10()  throws Throwable  {
      Jdk14Logger jdk14Logger0 = new Jdk14Logger("""");
      JexlUberspect.ResolverStrategy jexlUberspect_ResolverStrategy0 = JexlUberspect.MAP_STRATEGY;
      Permissions permissions0 = Permissions.DEFAULT;
      Uberspect uberspect0 = new Uberspect(jdk14Logger0, jexlUberspect_ResolverStrategy0, permissions0);
      JexlSandbox jexlSandbox0 = new JexlSandbox(true, true);
      JexlSandbox.Permissions jexlSandbox_Permissions0 = jexlSandbox0.permissions("""", true, true, true);
      SandboxUberspect sandboxUberspect0 = new SandboxUberspect(uberspect0, jexlSandbox0);
      Class<Integer> class0 = Integer.TYPE;
      LinkedList<JexlUberspect.PropertyResolver> linkedList0 = new LinkedList<JexlUberspect.PropertyResolver>();
      sandboxUberspect0.getPropertySet((List<JexlUberspect.PropertyResolver>) linkedList0, (Object) jexlSandbox_Permissions0, (Object) null, (Object) class0);
}"
3968,"    public JexlPropertyGet getPropertyGet(final Object obj, final Object identifier) {
        return getPropertyGet(null, obj, identifier);
    }","  public void test11()  throws Throwable  {
      JexlUberspect.ResolverStrategy jexlUberspect_ResolverStrategy0 = JexlUberspect.MAP_STRATEGY;
      Uberspect uberspect0 = new Uberspect((Log) null, jexlUberspect_ResolverStrategy0);
      JexlSandbox jexlSandbox0 = new JexlSandbox(true);
      SandboxUberspect sandboxUberspect0 = new SandboxUberspect(uberspect0, jexlSandbox0);
      JexlOperator jexlOperator0 = JexlOperator.ENDSWITH;
      Integer integer0 = new Integer(0);
      List<JexlUberspect.PropertyResolver> list0 = sandboxUberspect0.getResolvers(jexlOperator0, integer0);
      // Undeclared exception!
      try { 
        sandboxUberspect0.getPropertyGet(list0, (Object) jexlSandbox0, (Object) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.internal.introspection.ClassMap"", e);
      }
  }"
3969,"    public int getVersion() {
        return uberspect.getVersion();
    }","  public void test12()  throws Throwable  {
      SimpleLog simpleLog0 = new SimpleLog(""a1aw"");
      JexlUberspect.ResolverStrategy jexlUberspect_ResolverStrategy0 = JexlUberspect.MAP_STRATEGY;
      Uberspect uberspect0 = new Uberspect(simpleLog0, jexlUberspect_ResolverStrategy0);
      JexlSandbox jexlSandbox0 = new JexlSandbox(false, false);
      SandboxUberspect sandboxUberspect0 = new SandboxUberspect(uberspect0, jexlSandbox0);
      List<JexlUberspect.PropertyResolver> list0 = JexlUberspect.MAP;
      Object object0 = new Object();
      sandboxUberspect0.getPropertyGet(list0, object0, object0);
}"
3970,"    public JexlPropertyGet getPropertyGet(final Object obj, final Object identifier) {
        return getPropertyGet(null, obj, identifier);
    }","  public void test13()  throws Throwable  {
      Jdk13LumberjackLogger jdk13LumberjackLogger0 = new Jdk13LumberjackLogger(""&C5o2^%I"");
      JexlUberspect.ResolverStrategy jexlUberspect_ResolverStrategy0 = JexlUberspect.MAP_STRATEGY;
      Uberspect uberspect0 = new Uberspect(jdk13LumberjackLogger0, jexlUberspect_ResolverStrategy0);
      JexlSandbox jexlSandbox0 = new JexlSandbox(true, true);
      SandboxUberspect sandboxUberspect0 = new SandboxUberspect(uberspect0, jexlSandbox0);
      Integer integer0 = new Integer(1);
      JexlPropertyGet jexlPropertyGet0 = sandboxUberspect0.getPropertyGet((List<JexlUberspect.PropertyResolver>) null, (Object) null, (Object) integer0);
}"
3971,"    public int getVersion() {
        return uberspect.getVersion();
    }","  public void test14()  throws Throwable  {
      NoOpLog noOpLog0 = new NoOpLog();
      JexlUberspect.ResolverStrategy jexlUberspect_ResolverStrategy0 = JexlUberspect.MAP_STRATEGY;
      Uberspect uberspect0 = new Uberspect(noOpLog0, jexlUberspect_ResolverStrategy0);
      JexlSandbox jexlSandbox0 = new JexlSandbox(false, false);
      SandboxUberspect sandboxUberspect0 = new SandboxUberspect(uberspect0, jexlSandbox0);
      Object object0 = new Object();
      sandboxUberspect0.getPropertySet((List<JexlUberspect.PropertyResolver>) null, (Object) jexlSandbox0, (Object) null, object0);
}"
3972,"    public int getVersion() {
        return uberspect.getVersion();
    }","  public void test15()  throws Throwable  {
      NoOpLog noOpLog0 = new NoOpLog();
      JexlUberspect.ResolverStrategy jexlUberspect_ResolverStrategy0 = JexlUberspect.MAP_STRATEGY;
      Uberspect uberspect0 = new Uberspect(noOpLog0, jexlUberspect_ResolverStrategy0);
      JexlSandbox jexlSandbox0 = new JexlSandbox(false, false);
      SandboxUberspect sandboxUberspect0 = new SandboxUberspect(uberspect0, jexlSandbox0);
      JexlUberspect.JexlResolver jexlUberspect_JexlResolver0 = JexlUberspect.JexlResolver.MAP;
      sandboxUberspect0.getPropertySet((Object) jexlUberspect_JexlResolver0, (Object) sandboxUberspect0, (Object) ""%@T[?@|[Zqlza@;Q"");
}"
3973,"    public JexlPropertySet getPropertySet(final Object obj,final Object identifier,final Object arg) {
        return getPropertySet(null, obj, identifier, arg);
    }","  public void test16()  throws Throwable  {
      Jdk14Logger jdk14Logger0 = new Jdk14Logger("""");
      JexlUberspect.ResolverStrategy jexlUberspect_ResolverStrategy0 = JexlUberspect.MAP_STRATEGY;
      Permissions permissions0 = Permissions.DEFAULT;
      Uberspect uberspect0 = new Uberspect(jdk14Logger0, jexlUberspect_ResolverStrategy0, permissions0);
      JexlSandbox jexlSandbox0 = new JexlSandbox(true, true);
      SandboxUberspect sandboxUberspect0 = new SandboxUberspect(uberspect0, jexlSandbox0);
      LinkedList<JexlUberspect.PropertyResolver> linkedList0 = new LinkedList<JexlUberspect.PropertyResolver>();
      JexlUberspect.JexlResolver jexlUberspect_JexlResolver0 = JexlUberspect.JexlResolver.LIST;
      JexlPropertySet jexlPropertySet0 = sandboxUberspect0.getPropertySet((List<JexlUberspect.PropertyResolver>) linkedList0, (Object) null, (Object) ""org.apache.commons.jexl3.JexlArithmetic"", (Object) jexlUberspect_JexlResolver0);
}"
3974,"    public int getVersion() {
        return uberspect.getVersion();
    }","  public void test17()  throws Throwable  {
      NoOpLog noOpLog0 = new NoOpLog();
      JexlUberspect.ResolverStrategy jexlUberspect_ResolverStrategy0 = JexlUberspect.MAP_STRATEGY;
      Uberspect uberspect0 = new Uberspect(noOpLog0, jexlUberspect_ResolverStrategy0);
      JexlSandbox jexlSandbox0 = new JexlSandbox(false, false);
      SandboxUberspect sandboxUberspect0 = new SandboxUberspect(uberspect0, jexlSandbox0);
      Class<JexlUberspect.JexlResolver> class0 = JexlUberspect.JexlResolver.class;
      JexlSandbox.Permissions jexlSandbox_Permissions0 = jexlSandbox0.get(class0);
      sandboxUberspect0.getPropertyGet((List<JexlUberspect.PropertyResolver>) null, (Object) jexlSandbox_Permissions0, (Object) null);
}"
3975,"    public int getVersion() {
        return uberspect.getVersion();
    }","  public void test18()  throws Throwable  {
      NoOpLog noOpLog0 = new NoOpLog();
      JexlUberspect.ResolverStrategy jexlUberspect_ResolverStrategy0 = JexlUberspect.MAP_STRATEGY;
      Uberspect uberspect0 = new Uberspect(noOpLog0, jexlUberspect_ResolverStrategy0);
      JexlSandbox jexlSandbox0 = new JexlSandbox(false, false);
      SandboxUberspect sandboxUberspect0 = new SandboxUberspect(uberspect0, jexlSandbox0);
      sandboxUberspect0.getPropertyGet((Object) jexlUberspect_ResolverStrategy0, (Object) ""?"");
}"
3976,"    public JexlMethod getMethod(final Object obj, final String method, final Object... args) {
        if (obj != null && method != null) {
            final Class<?> clazz = (obj instanceof Class) ? (Class<?>) obj : obj.getClass();
            final String actual = sandbox.execute(clazz, method);
            if (actual != null && actual != JexlSandbox.NULL) {
                return uberspect.getMethod(obj, actual, args);
            }
        }
        return null;
    }","  public void test19()  throws Throwable  {
      NoOpLog noOpLog0 = new NoOpLog();
      JexlUberspect.ResolverStrategy jexlUberspect_ResolverStrategy0 = JexlUberspect.MAP_STRATEGY;
      Uberspect uberspect0 = new Uberspect(noOpLog0, jexlUberspect_ResolverStrategy0);
      JexlSandbox jexlSandbox0 = new JexlSandbox(false, false);
      SandboxUberspect sandboxUberspect0 = new SandboxUberspect(uberspect0, jexlSandbox0);
      Object object0 = new Object();
      JexlMethod jexlMethod0 = sandboxUberspect0.getMethod(object0, ""?"", (Object[]) null);
}"
3977,"    public int getVersion() {
        return uberspect.getVersion();
    }","  public void test20()  throws Throwable  {
      NoOpLog noOpLog0 = new NoOpLog(""&l:F.}b}Y]N'm"");
      JexlUberspect.ResolverStrategy jexlUberspect_ResolverStrategy0 = JexlUberspect.JEXL_STRATEGY;
      Uberspect uberspect0 = new Uberspect(noOpLog0, jexlUberspect_ResolverStrategy0);
      JexlSandbox jexlSandbox0 = new JexlSandbox();
      SandboxUberspect sandboxUberspect0 = new SandboxUberspect(uberspect0, jexlSandbox0);
      Class<Object> class0 = Object.class;
      Object[] objectArray0 = new Object[4];
      sandboxUberspect0.getMethod(class0, ""B-:VR2>Fh8U@yk'y9"", objectArray0);
}"
3978,"    public JexlMethod getMethod(final Object obj, final String method, final Object... args) {
        if (obj != null && method != null) {
            final Class<?> clazz = (obj instanceof Class) ? (Class<?>) obj : obj.getClass();
            final String actual = sandbox.execute(clazz, method);
            if (actual != null && actual != JexlSandbox.NULL) {
                return uberspect.getMethod(obj, actual, args);
            }
        }
        return null;
    }","  public void test21()  throws Throwable  {
      Jdk14Logger jdk14Logger0 = new Jdk14Logger(""fMQR'pUR"");
      JexlUberspect.ResolverStrategy jexlUberspect_ResolverStrategy0 = JexlUberspect.MAP_STRATEGY;
      Permissions permissions0 = new Permissions();
      Uberspect uberspect0 = new Uberspect(jdk14Logger0, jexlUberspect_ResolverStrategy0, permissions0);
      JexlSandbox jexlSandbox0 = new JexlSandbox(true);
      SandboxUberspect sandboxUberspect0 = new SandboxUberspect(uberspect0, jexlSandbox0);
      JexlMethod jexlMethod0 = sandboxUberspect0.getMethod(""fMQR'pUR"", (String) null, (Object[]) null);
}"
3979,"    public int getVersion() {
        return uberspect.getVersion();
    }","  public void test22()  throws Throwable  {
      Jdk14Logger jdk14Logger0 = new Jdk14Logger("""");
      JexlUberspect.ResolverStrategy jexlUberspect_ResolverStrategy0 = JexlUberspect.MAP_STRATEGY;
      Permissions permissions0 = new Permissions();
      Uberspect uberspect0 = new Uberspect(jdk14Logger0, jexlUberspect_ResolverStrategy0, permissions0);
      JexlSandbox jexlSandbox0 = new JexlSandbox(true, true);
      SandboxUberspect sandboxUberspect0 = new SandboxUberspect(uberspect0, jexlSandbox0);
      JexlOptions jexlOptions0 = new JexlOptions();
      Object[] objectArray0 = new Object[7];
      sandboxUberspect0.getMethod(jexlOptions0, """", objectArray0);
}"
3980,"    public JexlMethod getMethod(final Object obj, final String method, final Object... args) {
        if (obj != null && method != null) {
            final Class<?> clazz = (obj instanceof Class) ? (Class<?>) obj : obj.getClass();
            final String actual = sandbox.execute(clazz, method);
            if (actual != null && actual != JexlSandbox.NULL) {
                return uberspect.getMethod(obj, actual, args);
            }
        }
        return null;
    }","  public void test23()  throws Throwable  {
      NoOpLog noOpLog0 = new NoOpLog(""%@T[?@|[Zqlza@;Q"");
      JexlUberspect.ResolverStrategy jexlUberspect_ResolverStrategy0 = JexlUberspect.MAP_STRATEGY;
      Uberspect uberspect0 = new Uberspect(noOpLog0, jexlUberspect_ResolverStrategy0);
      JexlSandbox jexlSandbox0 = new JexlSandbox(false);
      SandboxUberspect sandboxUberspect0 = new SandboxUberspect(uberspect0, jexlSandbox0);
      JexlMethod jexlMethod0 = sandboxUberspect0.getMethod((Object) null, """", (Object[]) null);
}"
3981,"    public int getVersion() {
        return uberspect.getVersion();
    }","  public void test24()  throws Throwable  {
      Jdk14Logger jdk14Logger0 = new Jdk14Logger(""fMQR'pUR"");
      JexlUberspect.ResolverStrategy jexlUberspect_ResolverStrategy0 = JexlUberspect.MAP_STRATEGY;
      Permissions permissions0 = new Permissions();
      Uberspect uberspect0 = new Uberspect(jdk14Logger0, jexlUberspect_ResolverStrategy0, permissions0);
      JexlSandbox jexlSandbox0 = new JexlSandbox(true);
      SandboxUberspect sandboxUberspect0 = new SandboxUberspect(uberspect0, jexlSandbox0);
      sandboxUberspect0.getConstructor(jdk14Logger0, (Object[]) null);
}"
3982,"    public int getVersion() {
        return uberspect.getVersion();
    }","  public void test25()  throws Throwable  {
      Jdk14Logger jdk14Logger0 = new Jdk14Logger("""");
      JexlUberspect.ResolverStrategy jexlUberspect_ResolverStrategy0 = JexlUberspect.MAP_STRATEGY;
      Permissions permissions0 = new Permissions();
      Uberspect uberspect0 = new Uberspect(jdk14Logger0, jexlUberspect_ResolverStrategy0, permissions0);
      JexlSandbox jexlSandbox0 = new JexlSandbox(true, true);
      SandboxUberspect sandboxUberspect0 = new SandboxUberspect(uberspect0, jexlSandbox0);
      Class<Integer> class0 = Integer.TYPE;
      Object[] objectArray0 = new Object[7];
      sandboxUberspect0.getConstructor(class0, objectArray0);
}"
3983,"    public int getVersion() {
        return uberspect.getVersion();
    }","  public void test26()  throws Throwable  {
      Jdk14Logger jdk14Logger0 = new Jdk14Logger("""");
      JexlUberspect.ResolverStrategy jexlUberspect_ResolverStrategy0 = JexlUberspect.MAP_STRATEGY;
      Permissions permissions0 = new Permissions();
      Uberspect uberspect0 = new Uberspect(jdk14Logger0, jexlUberspect_ResolverStrategy0, permissions0);
      JexlSandbox jexlSandbox0 = new JexlSandbox(true, true);
      SandboxUberspect sandboxUberspect0 = new SandboxUberspect(uberspect0, jexlSandbox0);
      Object[] objectArray0 = new Object[7];
      sandboxUberspect0.getConstructor((Object) null, objectArray0);
}"
3984,"    public SandboxUberspect(final JexlUberspect theUberspect, final JexlSandbox theSandbox) {
        if (theSandbox == null) {
            throw new NullPointerException(""sandbox can not be null"");
        }
        if (theUberspect == null) {
            throw new NullPointerException(""uberspect can not be null"");
        }
        this.uberspect = theUberspect;
        this.sandbox = theSandbox.copy();
    }","  public void test27()  throws Throwable  {
      JexlSandbox jexlSandbox0 = new JexlSandbox();
      SandboxUberspect sandboxUberspect0 = null;
      try {
        sandboxUberspect0 = new SandboxUberspect((JexlUberspect) null, jexlSandbox0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // uberspect can not be null
         //
         verifyException(""org.apache.commons.jexl3.internal.introspection.SandboxUberspect"", e);
      }
  }"
3985,"    public SandboxUberspect(final JexlUberspect theUberspect, final JexlSandbox theSandbox) {
        if (theSandbox == null) {
            throw new NullPointerException(""sandbox can not be null"");
        }
        if (theUberspect == null) {
            throw new NullPointerException(""uberspect can not be null"");
        }
        this.uberspect = theUberspect;
        this.sandbox = theSandbox.copy();
    }","  public void test28()  throws Throwable  {
      SandboxUberspect sandboxUberspect0 = null;
      try {
        sandboxUberspect0 = new SandboxUberspect((JexlUberspect) null, (JexlSandbox) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // sandbox can not be null
         //
         verifyException(""org.apache.commons.jexl3.internal.introspection.SandboxUberspect"", e);
      }
  }"
3986,"    public int getVersion() {
        return uberspect.getVersion();
    }","  public void test29()  throws Throwable  {
      Jdk14Logger jdk14Logger0 = new Jdk14Logger("""");
      JexlUberspect.ResolverStrategy jexlUberspect_ResolverStrategy0 = JexlUberspect.MAP_STRATEGY;
      Permissions permissions0 = Permissions.DEFAULT;
      Uberspect uberspect0 = new Uberspect(jdk14Logger0, jexlUberspect_ResolverStrategy0, permissions0);
      JexlSandbox jexlSandbox0 = new JexlSandbox(true, true);
      SandboxUberspect sandboxUberspect0 = new SandboxUberspect(uberspect0, jexlSandbox0);
      Class<Integer> class0 = Integer.TYPE;
      sandboxUberspect0.getPropertyGet((Object) class0, (Object) null);
}"
3987,"    public ClassLoader getClassLoader() {
        return uberspect.getClassLoader();
    }","  public void test30()  throws Throwable  {
      Jdk14Logger jdk14Logger0 = new Jdk14Logger(""fMQR'pUR"");
      JexlUberspect.ResolverStrategy jexlUberspect_ResolverStrategy0 = JexlUberspect.MAP_STRATEGY;
      Permissions permissions0 = new Permissions();
      Uberspect uberspect0 = new Uberspect(jdk14Logger0, jexlUberspect_ResolverStrategy0, permissions0);
      JexlSandbox jexlSandbox0 = new JexlSandbox(true);
      SandboxUberspect sandboxUberspect0 = new SandboxUberspect(uberspect0, jexlSandbox0);
      ClassLoader classLoader0 = sandboxUberspect0.getClassLoader();
}"
3988,"    public JexlArithmetic.Uberspect getArithmetic(final JexlArithmetic arithmetic) {
        return uberspect.getArithmetic(arithmetic);
    }","  public void test31()  throws Throwable  {
      Jdk14Logger jdk14Logger0 = new Jdk14Logger("""");
      JexlUberspect.ResolverStrategy jexlUberspect_ResolverStrategy0 = JexlUberspect.MAP_STRATEGY;
      Permissions permissions0 = new Permissions();
      Uberspect uberspect0 = new Uberspect(jdk14Logger0, jexlUberspect_ResolverStrategy0, permissions0);
      JexlSandbox jexlSandbox0 = new JexlSandbox(true, true);
      SandboxUberspect sandboxUberspect0 = new SandboxUberspect(uberspect0, jexlSandbox0);
      MathContext mathContext0 = MathContext.UNLIMITED;
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true, mathContext0, 0);
      JexlArithmetic.Uberspect jexlArithmetic_Uberspect0 = sandboxUberspect0.getArithmetic(jexlArithmetic0);
}"
3989,"    public Iterator<?> getIterator(final Object obj) {
        return uberspect.getIterator(obj);
    }","  public void test32()  throws Throwable  {
      Jdk14Logger jdk14Logger0 = new Jdk14Logger("""");
      JexlUberspect.ResolverStrategy jexlUberspect_ResolverStrategy0 = JexlUberspect.MAP_STRATEGY;
      Permissions permissions0 = Permissions.DEFAULT;
      Uberspect uberspect0 = new Uberspect(jdk14Logger0, jexlUberspect_ResolverStrategy0, permissions0);
      JexlSandbox jexlSandbox0 = new JexlSandbox(true, true);
      SandboxUberspect sandboxUberspect0 = new SandboxUberspect(uberspect0, jexlSandbox0);
      Object object0 = new Object();
      Iterator<?> iterator0 = sandboxUberspect0.getIterator(object0);
}"
3990,"    public int getVersion() {
        return uberspect.getVersion();
    }","  public void test33()  throws Throwable  {
      Jdk14Logger jdk14Logger0 = new Jdk14Logger("""");
      JexlUberspect.ResolverStrategy jexlUberspect_ResolverStrategy0 = JexlUberspect.MAP_STRATEGY;
      Permissions permissions0 = Permissions.DEFAULT;
      Uberspect uberspect0 = new Uberspect(jdk14Logger0, jexlUberspect_ResolverStrategy0, permissions0);
      JexlSandbox jexlSandbox0 = new JexlSandbox(true, true);
      SandboxUberspect sandboxUberspect0 = new SandboxUberspect(uberspect0, jexlSandbox0);
      int int0 = sandboxUberspect0.getVersion();
}"
3991,"    public int getVersion() {
        return uberspect.getVersion();
    }","  public void test34()  throws Throwable  {
      Jdk14Logger jdk14Logger0 = new Jdk14Logger("""");
      JexlUberspect.ResolverStrategy jexlUberspect_ResolverStrategy0 = JexlUberspect.JEXL_STRATEGY;
      Uberspect uberspect0 = new Uberspect(jdk14Logger0, jexlUberspect_ResolverStrategy0);
      JexlSandbox jexlSandbox0 = new JexlSandbox(false, false);
      SandboxUberspect sandboxUberspect0 = new SandboxUberspect(uberspect0, jexlSandbox0);
      JexlOperator jexlOperator0 = JexlOperator.GT;
      List<JexlUberspect.PropertyResolver> list0 = sandboxUberspect0.getResolvers(jexlOperator0, uberspect0);
      sandboxUberspect0.getPropertySet(list0, (Object) """", (Object) jexlUberspect_ResolverStrategy0, (Object) jdk14Logger0);
}"
3992,"    public int getVersion() {
        return uberspect.getVersion();
    }","  public void test35()  throws Throwable  {
      NoOpLog noOpLog0 = new NoOpLog("""");
      JexlUberspect.ResolverStrategy jexlUberspect_ResolverStrategy0 = JexlUberspect.MAP_STRATEGY;
      Permissions permissions0 = new Permissions();
      Uberspect uberspect0 = new Uberspect(noOpLog0, jexlUberspect_ResolverStrategy0, permissions0);
      JexlSandbox jexlSandbox0 = new JexlSandbox();
      SandboxUberspect sandboxUberspect0 = new SandboxUberspect(uberspect0, jexlSandbox0);
      sandboxUberspect0.getPropertySet((Object) noOpLog0, (Object) permissions0, (Object) uberspect0);
      int int0 = sandboxUberspect0.getVersion();
}"
3993,"    public int getVersion() {
        return uberspect.getVersion();
    }","  public void test36()  throws Throwable  {
      NoOpLog noOpLog0 = new NoOpLog("""");
      JexlUberspect.ResolverStrategy jexlUberspect_ResolverStrategy0 = JexlUberspect.MAP_STRATEGY;
      Permissions permissions0 = new Permissions();
      Uberspect uberspect0 = new Uberspect(noOpLog0, jexlUberspect_ResolverStrategy0, permissions0);
      JexlSandbox jexlSandbox0 = new JexlSandbox();
      SandboxUberspect sandboxUberspect0 = new SandboxUberspect(uberspect0, jexlSandbox0);
      sandboxUberspect0.getPropertySet((Object) noOpLog0, (Object) permissions0, (Object) uberspect0);
      int int0 = sandboxUberspect0.getVersion();
}"
3994,"    public static JexlPropertyGet discover(final Introspector is, final Object object, final String name) {
        if (object != null && name != null && !name.isEmpty()) {
            final String base = name.substring(0, 1).toUpperCase() + name.substring(1);
            final String container = name;
            final Class<?> clazz = object.getClass();
            final Method[] getters = is.getMethods(object.getClass(), ""get"" + base);
            final Method[] setters = is.getMethods(object.getClass(), ""set"" + base);
            if (getters != null) {
                return new IndexedType(container, clazz, getters, setters);
            }
        }
        return null;
    }","  public void test0()  throws Throwable  {
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        IndexedType.discover((Introspector) null, object0, ""NOQn8.&e:oy]@C?Dc#"");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.internal.introspection.IndexedType"", e);
      }
  }"
3995,"    public static JexlPropertyGet discover(final Introspector is, final Object object, final String name) {
        if (object != null && name != null && !name.isEmpty()) {
            final String base = name.substring(0, 1).toUpperCase() + name.substring(1);
            final String container = name;
            final Class<?> clazz = object.getClass();
            final Method[] getters = is.getMethods(object.getClass(), ""get"" + base);
            final Method[] setters = is.getMethods(object.getClass(), ""set"" + base);
            if (getters != null) {
                return new IndexedType(container, clazz, getters, setters);
            }
        }
        return null;
    }","  public void test1()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Introspector introspector0 = new Introspector((Log) null, classLoader0);
      // Undeclared exception!
      try { 
        IndexedType.discover(introspector0, introspector0, ""&qRFo<I,RPcCqUgNi2"");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.internal.introspection.ClassMap"", e);
      }
  }"
3996,"    public static JexlPropertyGet discover(final Introspector is, final Object object, final String name) {
        if (object != null && name != null && !name.isEmpty()) {
            final String base = name.substring(0, 1).toUpperCase() + name.substring(1);
            final String container = name;
            final Class<?> clazz = object.getClass();
            final Method[] getters = is.getMethods(object.getClass(), ""get"" + base);
            final Method[] setters = is.getMethods(object.getClass(), ""set"" + base);
            if (getters != null) {
                return new IndexedType(container, clazz, getters, setters);
            }
        }
        return null;
    }","  public void test2()  throws Throwable  {
      SimpleLog simpleLog0 = new SimpleLog(""B"");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Introspector introspector0 = new Introspector(simpleLog0, classLoader0);
      Object object0 = new Object();
      JexlPropertyGet jexlPropertyGet0 = IndexedType.discover(introspector0, object0, ""B"");
}"
3997,"    public static JexlPropertyGet discover(final Introspector is, final Object object, final String name) {
        if (object != null && name != null && !name.isEmpty()) {
            final String base = name.substring(0, 1).toUpperCase() + name.substring(1);
            final String container = name;
            final Class<?> clazz = object.getClass();
            final Method[] getters = is.getMethods(object.getClass(), ""get"" + base);
            final Method[] setters = is.getMethods(object.getClass(), ""set"" + base);
            if (getters != null) {
                return new IndexedType(container, clazz, getters, setters);
            }
        }
        return null;
    }","  public void test3()  throws Throwable  {
      Object object0 = new Object();
      JexlPropertyGet jexlPropertyGet0 = IndexedType.discover((Introspector) null, object0, (String) null);
}"
3998,"    public static JexlPropertyGet discover(final Introspector is, final Object object, final String name) {
        if (object != null && name != null && !name.isEmpty()) {
            final String base = name.substring(0, 1).toUpperCase() + name.substring(1);
            final String container = name;
            final Class<?> clazz = object.getClass();
            final Method[] getters = is.getMethods(object.getClass(), ""get"" + base);
            final Method[] setters = is.getMethods(object.getClass(), ""set"" + base);
            if (getters != null) {
                return new IndexedType(container, clazz, getters, setters);
            }
        }
        return null;
    }","  public void test4()  throws Throwable  {
      JexlPropertyGet jexlPropertyGet0 = IndexedType.discover((Introspector) null, """", """");
}"
3999,"    public static JexlPropertyGet discover(final Introspector is, final Object object, final String name) {
        if (object != null && name != null && !name.isEmpty()) {
            final String base = name.substring(0, 1).toUpperCase() + name.substring(1);
            final String container = name;
            final Class<?> clazz = object.getClass();
            final Method[] getters = is.getMethods(object.getClass(), ""get"" + base);
            final Method[] setters = is.getMethods(object.getClass(), ""set"" + base);
            if (getters != null) {
                return new IndexedType(container, clazz, getters, setters);
            }
        }
        return null;
    }","  public void test5()  throws Throwable  {
      JexlPropertyGet jexlPropertyGet0 = IndexedType.discover((Introspector) null, (Object) null, """");
}"
4000,"    public T next() {
        return enumeration.nextElement();
    }","  public void test0()  throws Throwable  {
      Enumeration<String> enumeration0 = (Enumeration<String>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(enumeration0).nextElement();
      EnumerationIterator<String> enumerationIterator0 = new EnumerationIterator<String>(enumeration0);
      String string0 = enumerationIterator0.next();
}"
4001,"    public boolean hasNext() {
        return enumeration.hasMoreElements();
    }","  public void test1()  throws Throwable  {
      StringTokenizer stringTokenizer0 = new StringTokenizer(""C[ y ZvVrA|:AZL[]0v"", ""};/`A0@{BV'vskn<}ET"", false);
      EnumerationIterator<Object> enumerationIterator0 = new EnumerationIterator<Object>(stringTokenizer0);
      boolean boolean0 = enumerationIterator0.hasNext();
}"
4002,"    public T next() {
        return enumeration.nextElement();
    }","  public void test2()  throws Throwable  {
      StringTokenizer stringTokenizer0 = new StringTokenizer(""4ky"", ""4ky"", true);
      EnumerationIterator<Object> enumerationIterator0 = new EnumerationIterator<Object>(stringTokenizer0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      enumerationIterator0.forEachRemaining(consumer0);
      // Undeclared exception!
      try { 
        enumerationIterator0.next();
        fail(""Expecting exception: NoSuchElementException"");
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.util.StringTokenizer"", e);
      }
  }"
4003,"    public T next() {
        return enumeration.nextElement();
    }","  public void test3()  throws Throwable  {
      EnumerationIterator<String> enumerationIterator0 = new EnumerationIterator<String>((Enumeration<String>) null);
      // Undeclared exception!
      try { 
        enumerationIterator0.next();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.internal.introspection.EnumerationIterator"", e);
      }
  }"
4004,"    public boolean hasNext() {
        return enumeration.hasMoreElements();
    }","  public void test4()  throws Throwable  {
      EnumerationIterator<String> enumerationIterator0 = new EnumerationIterator<String>((Enumeration<String>) null);
      // Undeclared exception!
      try { 
        enumerationIterator0.hasNext();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.internal.introspection.EnumerationIterator"", e);
      }
  }"
4005,"    public boolean hasNext() {
        return enumeration.hasMoreElements();
    }","  public void test5()  throws Throwable  {
      Enumeration<String> enumeration0 = (Enumeration<String>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      EnumerationIterator<String> enumerationIterator0 = new EnumerationIterator<String>(enumeration0);
      boolean boolean0 = enumerationIterator0.hasNext();
}"
4006,"    public T next() {
        return enumeration.nextElement();
    }","  public void test6()  throws Throwable  {
      StringTokenizer stringTokenizer0 = new StringTokenizer(""4ky"", ""4ky"", true);
      EnumerationIterator<Object> enumerationIterator0 = new EnumerationIterator<Object>(stringTokenizer0);
      Object object0 = enumerationIterator0.next();
}"
4007,"    public void remove() {
        // not implemented
    }","  public void test7()  throws Throwable  {
      Enumeration<String> enumeration0 = (Enumeration<String>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      EnumerationIterator<String> enumerationIterator0 = new EnumerationIterator<String>(enumeration0);
      enumerationIterator0.remove();
  }"
4008,"    public ArrayListWrapper(final Object anArray) {
        if (!anArray.getClass().isArray()) {
            throw new IllegalArgumentException(anArray.getClass() + "" is not an array"");
        }
        this.array = anArray;
    }","  public void test0()  throws Throwable  {
      ArrayListWrapper arrayListWrapper0 = null;
      try {
        arrayListWrapper0 = new ArrayListWrapper((Object) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.internal.introspection.ArrayListWrapper"", e);
      }
  }"
4009,"    public ArrayListWrapper(final Object anArray) {
        if (!anArray.getClass().isArray()) {
            throw new IllegalArgumentException(anArray.getClass() + "" is not an array"");
        }
        this.array = anArray;
    }","  public void test1()  throws Throwable  {
      ArrayListWrapper arrayListWrapper0 = null;
      try {
        arrayListWrapper0 = new ArrayListWrapper(""CvAE DoH>8J6iO\""W]|"");
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // class java.lang.String is not an array
         //
         verifyException(""org.apache.commons.jexl3.internal.introspection.ArrayListWrapper"", e);
      }
  }"
4010,"    public Method[] getMethods(final Class<?> c, final String methodName) {
        if (c == null) {
            return null;
        }
        final ClassMap classMap = getMap(c);
        return classMap.getMethods(methodName);
    }","  public void test0()  throws Throwable  {
      NoOpLog noOpLog0 = new NoOpLog(""yyyy/MM/dd HH:mm:ss:SSS zzz"");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Introspector introspector0 = new Introspector(noOpLog0, classLoader0);
      Class<Object> class0 = Object.class;
      Method[] methodArray0 = introspector0.getMethods(class0, ""cacheMiss"");
}"
4011,"    public String[] getFieldNames(final Class<?> c) {
        if (c == null) {
            return new String[0];
        }
        final ClassMap classMap = getMap(c);
        return classMap.getFieldNames();
    }","  public void test1()  throws Throwable  {
      NoOpLog noOpLog0 = new NoOpLog(""P4yar(J.e]"");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Introspector introspector0 = new Introspector(noOpLog0, classLoader0);
      Class<String> class0 = String.class;
      String[] stringArray0 = introspector0.getFieldNames(class0);
}"
4012,"    public Constructor<?> getConstructor(final MethodKey key) {
        return getConstructor(null, key);
    }","  public void test2()  throws Throwable  {
      Jdk13LumberjackLogger jdk13LumberjackLogger0 = new Jdk13LumberjackLogger(""java.lang.Object"");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Permissions permissions0 = Permissions.DEFAULT;
      Introspector introspector0 = new Introspector(jdk13LumberjackLogger0, classLoader0, permissions0);
      MethodKey methodKey0 = new MethodKey(""java.lang.Object"", (Class<?>[]) null);
      Constructor<?> constructor0 = introspector0.getConstructor(methodKey0);
}"
4013,"    public Class<?> getClassByName(final String className) {
        try {
            return Class.forName(className, false, loader);
        } catch (final ClassNotFoundException xignore) {
            return null;
        }
    }","  public void test3()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Introspector introspector0 = new Introspector((Log) null, classLoader0);
      Class<?> class0 = introspector0.getClassByName(""java.lang.annotation.Annotation"");
}"
4014,"    public Method[] getMethods(final Class<?> c, final String methodName) {
        if (c == null) {
            return null;
        }
        final ClassMap classMap = getMap(c);
        return classMap.getMethods(methodName);
    }","  public void test4()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Permissions permissions0 = new Permissions();
      Introspector introspector0 = new Introspector((Log) null, classLoader0, permissions0);
      Class<String> class0 = String.class;
      // Undeclared exception!
      try { 
        introspector0.getMethods(class0, """");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.internal.introspection.ClassMap"", e);
      }
  }"
4015,"    public String[] getMethodNames(final Class<?> c) {
        if (c == null) {
            return new String[0];
        }
        final ClassMap classMap = getMap(c);
        return classMap.getMethodNames();
    }","  public void test5()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Introspector introspector0 = new Introspector((Log) null, classLoader0);
      Class<Integer> class0 = Integer.class;
      // Undeclared exception!
      try { 
        introspector0.getMethodNames(class0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.internal.introspection.ClassMap"", e);
      }
  }"
4016,"    public Method getMethod(final Class<?> c, final String name, final Object[] params) {
        return getMethod(c, new MethodKey(name, params));
    }","  public void test6()  throws Throwable  {
      Jdk13LumberjackLogger jdk13LumberjackLogger0 = new Jdk13LumberjackLogger(""org.apache.commons.jexl3.internal.introspection.Introspector$CacheMiss"");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Introspector introspector0 = new Introspector(jdk13LumberjackLogger0, classLoader0, (Permissions) null);
      Class<MethodKey> class0 = MethodKey.class;
      // Undeclared exception!
      try { 
        introspector0.getMethod(class0, (MethodKey) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
4017,"    public Method getMethod(final Class<?> c, final String name, final Object[] params) {
        return getMethod(c, new MethodKey(name, params));
    }","  public void test7()  throws Throwable  {
      Jdk13LumberjackLogger jdk13LumberjackLogger0 = new Jdk13LumberjackLogger(""W.:vgy"");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Permissions permissions0 = Permissions.DEFAULT;
      Introspector introspector0 = new Introspector(jdk13LumberjackLogger0, classLoader0, permissions0);
      Method method0 = ClassMap.cacheMiss();
      MethodKey methodKey0 = new MethodKey(method0);
      // Undeclared exception!
      try { 
        introspector0.getMethod((Class<?>) null, methodKey0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.evosuite.runtime.util.ReflectionUtils"", e);
      }
  }"
4018,"    public Method getMethod(final Class<?> c, final String name, final Object[] params) {
        return getMethod(c, new MethodKey(name, params));
    }","  public void test8()  throws Throwable  {
      NoOpLog noOpLog0 = new NoOpLog((String) null);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Permissions permissions0 = Permissions.DEFAULT;
      Introspector introspector0 = new Introspector(noOpLog0, classLoader0, permissions0);
      Class<Integer> class0 = Integer.class;
      Object[] objectArray0 = new Object[5];
      // Undeclared exception!
      try { 
        introspector0.getMethod(class0, (String) null, objectArray0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.internal.introspection.MethodKey"", e);
      }
  }"
4019,"    public Method getMethod(final Class<?> c, final String name, final Object[] params) {
        return getMethod(c, new MethodKey(name, params));
    }","  public void test9()  throws Throwable  {
      Jdk13LumberjackLogger jdk13LumberjackLogger0 = new Jdk13LumberjackLogger("""");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Introspector introspector0 = new Introspector(jdk13LumberjackLogger0, classLoader0);
      // Undeclared exception!
      try { 
        introspector0.getMethod((Class<?>) null, """", (Object[]) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.evosuite.runtime.util.ReflectionUtils"", e);
      }
  }"
4020,"    public String[] getFieldNames(final Class<?> c) {
        if (c == null) {
            return new String[0];
        }
        final ClassMap classMap = getMap(c);
        return classMap.getFieldNames();
    }","  public void test10()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Introspector introspector0 = new Introspector((Log) null, classLoader0);
      Class<MethodKey> class0 = MethodKey.class;
      // Undeclared exception!
      try { 
        introspector0.getFieldNames(class0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.internal.introspection.ClassMap"", e);
      }
  }"
4021,"    public Field getField(final Class<?> c, final String key) {
        return getMap(c).getField(key);
    }","  public void test11()  throws Throwable  {
      NoOpLog noOpLog0 = new NoOpLog();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Introspector introspector0 = new Introspector(noOpLog0, classLoader0);
      // Undeclared exception!
      try { 
        introspector0.getField((Class<?>) null, ""org.apache.commons.jexl3.internal.introspection.Introspector"");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.evosuite.runtime.util.ReflectionUtils"", e);
      }
  }"
4022,"    public Constructor<?> getConstructor(final MethodKey key) {
        return getConstructor(null, key);
    }","  public void test12()  throws Throwable  {
      Jdk13LumberjackLogger jdk13LumberjackLogger0 = new Jdk13LumberjackLogger(""U#.*kyw613e)NIF"");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Introspector introspector0 = new Introspector(jdk13LumberjackLogger0, classLoader0);
      // Undeclared exception!
      try { 
        introspector0.getConstructor((MethodKey) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.internal.introspection.Introspector"", e);
      }
  }"
4023,"    public Constructor<?> getConstructor(final MethodKey key) {
        return getConstructor(null, key);
    }","  public void test13()  throws Throwable  {
      NoOpLog noOpLog0 = new NoOpLog(""NB9fW/3)4}u"");
      Introspector introspector0 = new Introspector(noOpLog0, (ClassLoader) null);
      Class<Integer> class0 = Integer.class;
      Class<Annotation>[] classArray0 = (Class<Annotation>[]) Array.newInstance(Class.class, 1);
      MethodKey methodKey0 = new MethodKey(""NB9fW/3)4}u"", (Class<?>[]) classArray0);
      // Undeclared exception!
      try { 
        introspector0.getConstructor(class0, methodKey0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.internal.introspection.Introspector"", e);
      }
  }"
4024,"    public Class<?> getClassByName(final String className) {
        try {
            return Class.forName(className, false, loader);
        } catch (final ClassNotFoundException xignore) {
            return null;
        }
    }","  public void test14()  throws Throwable  {
      NoOpLog noOpLog0 = new NoOpLog(""iE=^m`/C"");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Introspector introspector0 = new Introspector(noOpLog0, classLoader0);
      // Undeclared exception!
      try { 
        introspector0.getClassByName((String) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
      }
  }"
4025,"    public Constructor<?> getConstructor(final MethodKey key) {
        return getConstructor(null, key);
    }","  public void test15()  throws Throwable  {
      Jdk13LumberjackLogger jdk13LumberjackLogger0 = new Jdk13LumberjackLogger(""Method "");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Permissions permissions0 = Permissions.DEFAULT;
      Introspector introspector0 = new Introspector(jdk13LumberjackLogger0, classLoader0, permissions0);
      Class<String> class0 = String.class;
      Method method0 = ClassMap.cacheMiss();
      MethodKey methodKey0 = new MethodKey(method0);
      Constructor<?> constructor0 = introspector0.getConstructor(class0, methodKey0);
}"
4026,"    public Constructor<?> getConstructor(final MethodKey key) {
        return getConstructor(null, key);
    }","  public void test16()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Class<ClassMap>[] classArray0 = (Class<ClassMap>[]) Array.newInstance(Class.class, 8);
      MethodKey methodKey0 = new MethodKey("""", (Class<?>[]) classArray0);
      Introspector introspector0 = new Introspector((Log) null, classLoader0);
      Constructor<?> constructor0 = introspector0.getConstructor(classArray0[1], methodKey0);
}"
4027,"    public Constructor<?> getConstructor(final MethodKey key) {
        return getConstructor(null, key);
    }","  public void test17()  throws Throwable  {
      Jdk13LumberjackLogger jdk13LumberjackLogger0 = new Jdk13LumberjackLogger(""java.lang.Object"");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Permissions permissions0 = Permissions.DEFAULT;
      Introspector introspector0 = new Introspector(jdk13LumberjackLogger0, classLoader0, permissions0);
      Object[] objectArray0 = new Object[8];
      MethodKey methodKey0 = new MethodKey(""java.lang.Object"", (Class<?>[]) null);
      MethodKey methodKey1 = new MethodKey(""java.lang.Object"", objectArray0);
      introspector0.getConstructor(methodKey1);
      Class<String> class0 = String.class;
      Constructor<?> constructor0 = introspector0.getConstructor(class0, methodKey0);
}"
4028,"    public Constructor<?> getConstructor(final MethodKey key) {
        return getConstructor(null, key);
    }","  public void test18()  throws Throwable  {
      Jdk13LumberjackLogger jdk13LumberjackLogger0 = new Jdk13LumberjackLogger(""java.lang.Object"");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Permissions permissions0 = Permissions.DEFAULT;
      Introspector introspector0 = new Introspector(jdk13LumberjackLogger0, classLoader0, permissions0);
      Object[] objectArray0 = new Object[5];
      Class<ClassMap> class0 = ClassMap.class;
      MethodKey methodKey0 = new MethodKey(""java.lang.Object"", objectArray0);
      introspector0.getConstructor(methodKey0);
      Constructor<?> constructor0 = introspector0.getConstructor(class0, methodKey0);
}"
4029,"    public ClassLoader getLoader() {
        return loader;
    }","  public void test19()  throws Throwable  {
      Introspector introspector0 = new Introspector((Log) null, (ClassLoader) null, (Permissions) null);
      ClassLoader classLoader0 = introspector0.getLoader();
}"
4030,"    public void setLoader(ClassLoader cloader) {
        final ClassLoader previous = loader;
        if (cloader == null) {
            cloader = getClass().getClassLoader();
        }
        if (!cloader.equals(loader)) {
            lock.writeLock().lock();
            try {
                // clean up constructor and class maps
                final Iterator<Map.Entry<MethodKey, Constructor<?>>> mentries = constructorsMap.entrySet().iterator();
                while (mentries.hasNext()) {
                    final Map.Entry<MethodKey, Constructor<?>> entry = mentries.next();
                    final Class<?> clazz = entry.getValue().getDeclaringClass();
                    if (isLoadedBy(previous, clazz)) {
                        mentries.remove();
                        // the method name is the name of the class
                        constructibleClasses.remove(entry.getKey().getMethod());
                    }
                }
                // clean up method maps
                final Iterator<Map.Entry<Class<?>, ClassMap>> centries = classMethodMaps.entrySet().iterator();
                while (centries.hasNext()) {
                    final Map.Entry<Class<?>, ClassMap> entry = centries.next();
                    final Class<?> clazz = entry.getKey();
                    if (isLoadedBy(previous, clazz)) {
                        centries.remove();
                    }
                }
                loader = cloader;
            } finally {
                lock.writeLock().unlock();
            }
        }
    }","  public void test20()  throws Throwable  {
      NoOpLog noOpLog0 = new NoOpLog();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      Introspector introspector0 = new Introspector(noOpLog0, classLoader1);
      Class<MethodKey> class0 = MethodKey.class;
      introspector0.getMethods(class0, (String) null);
      introspector0.setLoader(classLoader0);
}"
4031,"    public void setLoader(ClassLoader cloader) {
        final ClassLoader previous = loader;
        if (cloader == null) {
            cloader = getClass().getClassLoader();
        }
        if (!cloader.equals(loader)) {
            lock.writeLock().lock();
            try {
                // clean up constructor and class maps
                final Iterator<Map.Entry<MethodKey, Constructor<?>>> mentries = constructorsMap.entrySet().iterator();
                while (mentries.hasNext()) {
                    final Map.Entry<MethodKey, Constructor<?>> entry = mentries.next();
                    final Class<?> clazz = entry.getValue().getDeclaringClass();
                    if (isLoadedBy(previous, clazz)) {
                        mentries.remove();
                        // the method name is the name of the class
                        constructibleClasses.remove(entry.getKey().getMethod());
                    }
                }
                // clean up method maps
                final Iterator<Map.Entry<Class<?>, ClassMap>> centries = classMethodMaps.entrySet().iterator();
                while (centries.hasNext()) {
                    final Map.Entry<Class<?>, ClassMap> entry = centries.next();
                    final Class<?> clazz = entry.getKey();
                    if (isLoadedBy(previous, clazz)) {
                        centries.remove();
                    }
                }
                loader = cloader;
            } finally {
                lock.writeLock().unlock();
            }
        }
    }","  public void test21()  throws Throwable  {
      Jdk13LumberjackLogger jdk13LumberjackLogger0 = new Jdk13LumberjackLogger(""java.lang.Object"");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Permissions permissions0 = Permissions.DEFAULT;
      Introspector introspector0 = new Introspector(jdk13LumberjackLogger0, classLoader0, permissions0);
      Class<Object> class0 = Object.class;
      introspector0.getMethods(class0, ""java.lang.Object"");
      ClassLoader classLoader1 = classLoader0.getParent();
      introspector0.setLoader(classLoader1);
}"
4032,"    public void setLoader(ClassLoader cloader) {
        final ClassLoader previous = loader;
        if (cloader == null) {
            cloader = getClass().getClassLoader();
        }
        if (!cloader.equals(loader)) {
            lock.writeLock().lock();
            try {
                // clean up constructor and class maps
                final Iterator<Map.Entry<MethodKey, Constructor<?>>> mentries = constructorsMap.entrySet().iterator();
                while (mentries.hasNext()) {
                    final Map.Entry<MethodKey, Constructor<?>> entry = mentries.next();
                    final Class<?> clazz = entry.getValue().getDeclaringClass();
                    if (isLoadedBy(previous, clazz)) {
                        mentries.remove();
                        // the method name is the name of the class
                        constructibleClasses.remove(entry.getKey().getMethod());
                    }
                }
                // clean up method maps
                final Iterator<Map.Entry<Class<?>, ClassMap>> centries = classMethodMaps.entrySet().iterator();
                while (centries.hasNext()) {
                    final Map.Entry<Class<?>, ClassMap> entry = centries.next();
                    final Class<?> clazz = entry.getKey();
                    if (isLoadedBy(previous, clazz)) {
                        centries.remove();
                    }
                }
                loader = cloader;
            } finally {
                lock.writeLock().unlock();
            }
        }
    }","  public void test22()  throws Throwable  {
      Jdk13LumberjackLogger jdk13LumberjackLogger0 = new Jdk13LumberjackLogger(""java.lang.Object"");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Permissions permissions0 = Permissions.DEFAULT;
      Introspector introspector0 = new Introspector(jdk13LumberjackLogger0, classLoader0, permissions0);
      Object[] objectArray0 = new Object[8];
      MethodKey methodKey0 = new MethodKey(""java.lang.Object"", objectArray0);
      introspector0.getConstructor(methodKey0);
      ClassLoader classLoader1 = classLoader0.getParent();
      introspector0.setLoader(classLoader1);
}"
4033,"    public void setLoader(ClassLoader cloader) {
        final ClassLoader previous = loader;
        if (cloader == null) {
            cloader = getClass().getClassLoader();
        }
        if (!cloader.equals(loader)) {
            lock.writeLock().lock();
            try {
                // clean up constructor and class maps
                final Iterator<Map.Entry<MethodKey, Constructor<?>>> mentries = constructorsMap.entrySet().iterator();
                while (mentries.hasNext()) {
                    final Map.Entry<MethodKey, Constructor<?>> entry = mentries.next();
                    final Class<?> clazz = entry.getValue().getDeclaringClass();
                    if (isLoadedBy(previous, clazz)) {
                        mentries.remove();
                        // the method name is the name of the class
                        constructibleClasses.remove(entry.getKey().getMethod());
                    }
                }
                // clean up method maps
                final Iterator<Map.Entry<Class<?>, ClassMap>> centries = classMethodMaps.entrySet().iterator();
                while (centries.hasNext()) {
                    final Map.Entry<Class<?>, ClassMap> entry = centries.next();
                    final Class<?> clazz = entry.getKey();
                    if (isLoadedBy(previous, clazz)) {
                        centries.remove();
                    }
                }
                loader = cloader;
            } finally {
                lock.writeLock().unlock();
            }
        }
    }","  public void test23()  throws Throwable  {
      Jdk13LumberjackLogger jdk13LumberjackLogger0 = new Jdk13LumberjackLogger(""java.lang.Object"");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Permissions permissions0 = Permissions.DEFAULT;
      Introspector introspector0 = new Introspector(jdk13LumberjackLogger0, classLoader0, permissions0);
      Class<String> class0 = String.class;
      MethodKey methodKey0 = new MethodKey(""java.lang.Object"", (Class<?>[]) null);
      introspector0.getConstructor(class0, methodKey0);
      ClassLoader classLoader1 = classLoader0.getParent();
      introspector0.setLoader(classLoader1);
}"
4034,"    public Class<?> getClassByName(final String className) {
        try {
            return Class.forName(className, false, loader);
        } catch (final ClassNotFoundException xignore) {
            return null;
        }
    }","  public void test24()  throws Throwable  {
      Jdk14Logger jdk14Logger0 = new Jdk14Logger(""Za1H"");
      Permissions permissions0 = Permissions.DEFAULT;
      Introspector introspector0 = new Introspector(jdk14Logger0, (ClassLoader) null, permissions0);
      introspector0.setLoader((ClassLoader) null);
      Class<?> class0 = introspector0.getClassByName(""org.apache.commons.jexl3.internal.introspection.ClassMap"");
}"
4035,"    public void setLoader(ClassLoader cloader) {
        final ClassLoader previous = loader;
        if (cloader == null) {
            cloader = getClass().getClassLoader();
        }
        if (!cloader.equals(loader)) {
            lock.writeLock().lock();
            try {
                // clean up constructor and class maps
                final Iterator<Map.Entry<MethodKey, Constructor<?>>> mentries = constructorsMap.entrySet().iterator();
                while (mentries.hasNext()) {
                    final Map.Entry<MethodKey, Constructor<?>> entry = mentries.next();
                    final Class<?> clazz = entry.getValue().getDeclaringClass();
                    if (isLoadedBy(previous, clazz)) {
                        mentries.remove();
                        // the method name is the name of the class
                        constructibleClasses.remove(entry.getKey().getMethod());
                    }
                }
                // clean up method maps
                final Iterator<Map.Entry<Class<?>, ClassMap>> centries = classMethodMaps.entrySet().iterator();
                while (centries.hasNext()) {
                    final Map.Entry<Class<?>, ClassMap> entry = centries.next();
                    final Class<?> clazz = entry.getKey();
                    if (isLoadedBy(previous, clazz)) {
                        centries.remove();
                    }
                }
                loader = cloader;
            } finally {
                lock.writeLock().unlock();
            }
        }
    }","  public void test25()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Permissions permissions0 = Permissions.DEFAULT;
      Introspector introspector0 = new Introspector((Log) null, classLoader0, permissions0);
      introspector0.setLoader(classLoader0);
  }"
4036,"    public Constructor<?> getConstructor(final MethodKey key) {
        return getConstructor(null, key);
    }","  public void test26()  throws Throwable  {
      SimpleLog simpleLog0 = new SimpleLog(""java.lang.Integer"");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Introspector introspector0 = new Introspector(simpleLog0, classLoader0);
      Object[] objectArray0 = new Object[5];
      simpleLog0.setLevel(2);
      Class<?> class0 = introspector0.getClassByName(""java.lang.Integer"");
      MethodKey methodKey0 = new MethodKey(""j[F;Z<l1[wM@"", objectArray0);
      Constructor<?> constructor0 = introspector0.getConstructor(class0, methodKey0);
}"
4037,"    public Constructor<?> getConstructor(final MethodKey key) {
        return getConstructor(null, key);
    }","  public void test27()  throws Throwable  {
      Jdk14Logger jdk14Logger0 = new Jdk14Logger(""NH;@`dp"");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Permissions permissions0 = new Permissions();
      Introspector introspector0 = new Introspector(jdk14Logger0, classLoader0, permissions0);
      Class<MethodKey> class0 = MethodKey.class;
      Class<Object> class1 = Object.class;
      String[] stringArray0 = introspector0.getMethodNames(class1);
      MethodKey methodKey0 = new MethodKey(""org.apache.commons.jexl3.internal.introspection.Introspector$CacheMiss"", stringArray0);
      Constructor<?> constructor0 = introspector0.getConstructor(class0, methodKey0);
}"
4038,"    public Constructor<?> getConstructor(final MethodKey key) {
        return getConstructor(null, key);
    }","  public void test28()  throws Throwable  {
      SimpleLog simpleLog0 = new SimpleLog(""java.lang.Integer"");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Introspector introspector0 = new Introspector(simpleLog0, classLoader0);
      Object[] objectArray0 = new Object[5];
      MethodKey methodKey0 = new MethodKey(""java.lang.Integer"", objectArray0);
      Class<?> class0 = introspector0.getClassByName(""java.lang.Integer"");
      Constructor<?> constructor0 = introspector0.getConstructor(class0, methodKey0);
}"
4039,"    public Constructor<?> getConstructor(final MethodKey key) {
        return getConstructor(null, key);
    }","  public void test29()  throws Throwable  {
      Jdk13LumberjackLogger jdk13LumberjackLogger0 = new Jdk13LumberjackLogger(""java.lang.Object"");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Permissions permissions0 = Permissions.DEFAULT;
      Introspector introspector0 = new Introspector(jdk13LumberjackLogger0, classLoader0, permissions0);
      Class<String> class0 = String.class;
      MethodKey methodKey0 = new MethodKey(""java.lang.Object"", (Class<?>[]) null);
      introspector0.getConstructor(class0, methodKey0);
      Constructor<?> constructor0 = introspector0.getConstructor(class0, methodKey0);
}"
4040,"    public Method[] getMethods(final Class<?> c, final String methodName) {
        if (c == null) {
            return null;
        }
        final ClassMap classMap = getMap(c);
        return classMap.getMethods(methodName);
    }","  public void test30()  throws Throwable  {
      Jdk14Logger jdk14Logger0 = new Jdk14Logger(""oW#7m6Ab%agz&S?3+D?"");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Permissions permissions0 = Permissions.DEFAULT;
      Introspector introspector0 = new Introspector(jdk14Logger0, classLoader0, permissions0);
      Method[] methodArray0 = introspector0.getMethods((Class<?>) null, ""cacheMiss()"");
}"
4041,"    public Method[] getMethods(final Class<?> c, final String methodName) {
        if (c == null) {
            return null;
        }
        final ClassMap classMap = getMap(c);
        return classMap.getMethods(methodName);
    }","  public void test31()  throws Throwable  {
      Jdk13LumberjackLogger jdk13LumberjackLogger0 = new Jdk13LumberjackLogger(""java.lang.Object"");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Permissions permissions0 = Permissions.DEFAULT;
      Introspector introspector0 = new Introspector(jdk13LumberjackLogger0, classLoader0, permissions0);
      Class<Object> class0 = Object.class;
      introspector0.getMethods(class0, ""java.lang.Object"");
      Method[] methodArray0 = introspector0.getMethods(class0, ""."");
}"
4042,"    public String[] getMethodNames(final Class<?> c) {
        if (c == null) {
            return new String[0];
        }
        final ClassMap classMap = getMap(c);
        return classMap.getMethodNames();
    }","  public void test32()  throws Throwable  {
      Jdk14Logger jdk14Logger0 = new Jdk14Logger(""oW#7m6Ab%agz&S?3+D?"");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Permissions permissions0 = Permissions.DEFAULT;
      Introspector introspector0 = new Introspector(jdk14Logger0, classLoader0, permissions0);
      String[] stringArray0 = introspector0.getMethodNames((Class<?>) null);
}"
4043,"    public String[] getFieldNames(final Class<?> c) {
        if (c == null) {
            return new String[0];
        }
        final ClassMap classMap = getMap(c);
        return classMap.getFieldNames();
    }","  public void test33()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Class<ClassMap>[] classArray0 = (Class<ClassMap>[]) Array.newInstance(Class.class, 8);
      Introspector introspector0 = new Introspector((Log) null, classLoader0);
      String[] stringArray0 = introspector0.getFieldNames(classArray0[3]);
}"
4044,"    public Method getMethod(final Class<?> c, final String name, final Object[] params) {
        return getMethod(c, new MethodKey(name, params));
    }","  public void test34()  throws Throwable  {
      NoOpLog noOpLog0 = new NoOpLog();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Permissions permissions0 = new Permissions();
      Method method0 = ClassMap.cacheMiss();
      Introspector introspector0 = new Introspector(noOpLog0, classLoader0, permissions0);
      Class<String> class0 = String.class;
      MethodKey methodKey0 = new MethodKey(method0);
      Method method1 = introspector0.getMethod(class0, methodKey0);
}"
4045,"    public void setLoader(ClassLoader cloader) {
        final ClassLoader previous = loader;
        if (cloader == null) {
            cloader = getClass().getClassLoader();
        }
        if (!cloader.equals(loader)) {
            lock.writeLock().lock();
            try {
                // clean up constructor and class maps
                final Iterator<Map.Entry<MethodKey, Constructor<?>>> mentries = constructorsMap.entrySet().iterator();
                while (mentries.hasNext()) {
                    final Map.Entry<MethodKey, Constructor<?>> entry = mentries.next();
                    final Class<?> clazz = entry.getValue().getDeclaringClass();
                    if (isLoadedBy(previous, clazz)) {
                        mentries.remove();
                        // the method name is the name of the class
                        constructibleClasses.remove(entry.getKey().getMethod());
                    }
                }
                // clean up method maps
                final Iterator<Map.Entry<Class<?>, ClassMap>> centries = classMethodMaps.entrySet().iterator();
                while (centries.hasNext()) {
                    final Map.Entry<Class<?>, ClassMap> entry = centries.next();
                    final Class<?> clazz = entry.getKey();
                    if (isLoadedBy(previous, clazz)) {
                        centries.remove();
                    }
                }
                loader = cloader;
            } finally {
                lock.writeLock().unlock();
            }
        }
    }","  public void test35()  throws Throwable  {
      Jdk14Logger jdk14Logger0 = new Jdk14Logger(""Za1H"");
      Permissions permissions0 = Permissions.DEFAULT;
      Introspector introspector0 = new Introspector(jdk14Logger0, (ClassLoader) null, permissions0);
      Class<Integer> class0 = Integer.class;
      Method method0 = ClassMap.cacheMiss();
      MethodKey methodKey0 = new MethodKey(method0);
      introspector0.getMethod(class0, methodKey0);
      introspector0.setLoader((ClassLoader) null);
  }"
4046,"    public Method getMethod(final Class<?> c, final String name, final Object[] params) {
        return getMethod(c, new MethodKey(name, params));
    }","  public void test36()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Permissions permissions0 = Permissions.DEFAULT;
      Introspector introspector0 = new Introspector((Log) null, classLoader0, permissions0);
      Class<Object> class0 = Object.class;
      Method method0 = ClassMap.cacheMiss();
      MethodKey methodKey0 = new MethodKey(method0);
      Method method1 = introspector0.getMethod(class0, methodKey0);
}"
4047,"    public Class<?> getClassByName(final String className) {
        try {
            return Class.forName(className, false, loader);
        } catch (final ClassNotFoundException xignore) {
            return null;
        }
    }","  public void test37()  throws Throwable  {
      NoOpLog noOpLog0 = new NoOpLog();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Introspector introspector0 = new Introspector(noOpLog0, classLoader0);
      Class<?> class0 = introspector0.getClassByName(""q?Pi!#(k;{"");
}"
4048,"    public Method getMethod(final Class<?> c, final String name, final Object[] params) {
        return getMethod(c, new MethodKey(name, params));
    }","  public void test38()  throws Throwable  {
      Jdk13LumberjackLogger jdk13LumberjackLogger0 = new Jdk13LumberjackLogger(""java.lang.Object"");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Permissions permissions0 = Permissions.DEFAULT;
      Introspector introspector0 = new Introspector(jdk13LumberjackLogger0, classLoader0, permissions0);
      Class<ClassMap> class0 = ClassMap.class;
      Method method0 = introspector0.getMethod((Class<?>) class0, ""java.lang.Object"", (Object[]) null);
}"
4049,"    public Field getField(final Class<?> c, final String key) {
        return getMap(c).getField(key);
    }","  public void test39()  throws Throwable  {
      NoOpLog noOpLog0 = new NoOpLog();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Introspector introspector0 = new Introspector(noOpLog0, classLoader0);
      Class<Object> class0 = Object.class;
      Field field0 = introspector0.getField(class0, ""org.apachecommons.logging.impl.AvalonLogger"");
}"
4050,"    public ClassLoader getLoader() {
        return loader;
    }","  public void test40()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Permissions permissions0 = new Permissions();
      Introspector introspector0 = new Introspector((Log) null, classLoader0, permissions0);
      ClassLoader classLoader1 = introspector0.getLoader();
}"
4051,"    public static DuckSetExecutor discover(final Introspector is, final Class<?> clazz, final Object key, final Object value) {
        java.lang.reflect.Method method = is.getMethod(clazz, ""set"", makeArgs(key, value));
        if (method == null) {
            method = is.getMethod(clazz, ""put"", makeArgs(key, value));
        }
        return method == null? null : new DuckSetExecutor(clazz, method, key, value);
    }","  public void test0()  throws Throwable  {
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        DuckSetExecutor.discover((Introspector) null, class0, (Object) null, class0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.internal.introspection.DuckSetExecutor"", e);
      }
  }"
4052,"    public static DuckSetExecutor discover(final Introspector is, final Class<?> clazz, final Object key, final Object value) {
        java.lang.reflect.Method method = is.getMethod(clazz, ""set"", makeArgs(key, value));
        if (method == null) {
            method = is.getMethod(clazz, ""put"", makeArgs(key, value));
        }
        return method == null? null : new DuckSetExecutor(clazz, method, key, value);
    }","  public void test1()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Permissions permissions0 = new Permissions();
      Introspector introspector0 = new Introspector((Log) null, classLoader0, permissions0);
      Class<String> class0 = String.class;
      // Undeclared exception!
      try { 
        DuckSetExecutor.discover(introspector0, class0, class0, permissions0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.internal.introspection.ClassMap"", e);
      }
  }"
4053,"    public static DuckSetExecutor discover(final Introspector is, final Class<?> clazz, final Object key, final Object value) {
        java.lang.reflect.Method method = is.getMethod(clazz, ""set"", makeArgs(key, value));
        if (method == null) {
            method = is.getMethod(clazz, ""put"", makeArgs(key, value));
        }
        return method == null? null : new DuckSetExecutor(clazz, method, key, value);
    }","  public void test2()  throws Throwable  {
      Jdk14Logger jdk14Logger0 = new Jdk14Logger(""0d,i?{\""yt'-l:"");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Permissions permissions0 = Permissions.DEFAULT;
      Introspector introspector0 = new Introspector(jdk14Logger0, classLoader0, permissions0);
      Class<Integer> class0 = Integer.class;
      DuckSetExecutor duckSetExecutor0 = DuckSetExecutor.discover(introspector0, class0, classLoader0, ""0d,i?{\""yt'-l:"");
}"
4054,"    public Object tryInvoke(final String name, final Object obj, final Object... params) {
        try {
            final Class<?> ctorClass = ctor.getDeclaringClass();
            boolean invoke = true;
            if (obj != null) {
                if (obj instanceof Class<?>) {
                    invoke = ctorClass.equals(obj);
                } else {
                    invoke = ctorClass.getName().equals(obj.toString());
                }
            }
            invoke &= name == null || ctorClass.getName().equals(name);
            if (invoke) {
                return ctor.newInstance(params);
            }
        } catch (InstantiationException | IllegalArgumentException | IllegalAccessException xinstance) {
            return Uberspect.TRY_FAILED;
        } catch (final InvocationTargetException xinvoke) {
            throw JexlException.tryFailed(xinvoke); // throw
        }
        return Uberspect.TRY_FAILED;
    }","  public void test0()  throws Throwable  {
      ConstructorMethod constructorMethod0 = new ConstructorMethod((Constructor<?>) null);
      Object[] objectArray0 = new Object[0];
      // Undeclared exception!
      try { 
        constructorMethod0.tryInvoke(""+F"", (Object) null, objectArray0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.internal.introspection.ConstructorMethod"", e);
      }
  }"
4055,"    public Object invoke(final Object obj, final Object... params) throws Exception {
        final Class<?> ctorClass = ctor.getDeclaringClass();
        boolean invoke = true;
        if (obj != null) {
            if (obj instanceof Class<?>) {
                invoke = ctorClass.equals(obj);
            } else {
                invoke = ctorClass.getName().equals(obj.toString());
            }
        }
        if (invoke) {
                return ctor.newInstance(params);
            }
        throw new IntrospectionException(""constructor resolution error"");
    }","  public void test1()  throws Throwable  {
      ConstructorMethod constructorMethod0 = new ConstructorMethod((Constructor<?>) null);
      Object[] objectArray0 = new Object[14];
      try { 
        constructorMethod0.invoke(""r[`Cj>KO}L@n<z?}-v"", objectArray0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.internal.introspection.ConstructorMethod"", e);
      }
  }"
4056,"    public static ConstructorMethod discover(final Introspector is, final Object ctorHandle, final Object... args) {
        String className;
        Class<?> clazz = null;
        if (ctorHandle instanceof Class<?>) {
            clazz = (Class<?>) ctorHandle;
            className = clazz.getName();
        } else if (ctorHandle != null) {
            className = ctorHandle.toString();
        } else {
            return null;
        }
        final Constructor<?> ctor = is.getConstructor(clazz, new MethodKey(className, args));
        if (ctor != null) {
            return new ConstructorMethod(ctor);
        }
        return null;
    }","  public void test2()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      // Undeclared exception!
      try { 
        ConstructorMethod.discover((Introspector) null, """", objectArray0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.internal.introspection.ConstructorMethod"", e);
      }
  }"
4057,"    public static ConstructorMethod discover(final Introspector is, final Object ctorHandle, final Object... args) {
        String className;
        Class<?> clazz = null;
        if (ctorHandle instanceof Class<?>) {
            clazz = (Class<?>) ctorHandle;
            className = clazz.getName();
        } else if (ctorHandle != null) {
            className = ctorHandle.toString();
        } else {
            return null;
        }
        final Constructor<?> ctor = is.getConstructor(clazz, new MethodKey(className, args));
        if (ctor != null) {
            return new ConstructorMethod(ctor);
        }
        return null;
    }","  public void test3()  throws Throwable  {
      NoOpLog noOpLog0 = new NoOpLog();
      Introspector introspector0 = new Introspector(noOpLog0, (ClassLoader) null);
      Object[] objectArray0 = new Object[1];
      // Undeclared exception!
      try { 
        ConstructorMethod.discover(introspector0, introspector0, objectArray0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.internal.introspection.Introspector"", e);
      }
  }"
4058,"    public boolean tryFailed(final Object rval) {
        return rval == Uberspect.TRY_FAILED;
    }","  public void test4()  throws Throwable  {
      ConstructorMethod constructorMethod0 = new ConstructorMethod((Constructor<?>) null);
      boolean boolean0 = constructorMethod0.tryFailed(constructorMethod0);
}"
4059,"    public static ConstructorMethod discover(final Introspector is, final Object ctorHandle, final Object... args) {
        String className;
        Class<?> clazz = null;
        if (ctorHandle instanceof Class<?>) {
            clazz = (Class<?>) ctorHandle;
            className = clazz.getName();
        } else if (ctorHandle != null) {
            className = ctorHandle.toString();
        } else {
            return null;
        }
        final Constructor<?> ctor = is.getConstructor(clazz, new MethodKey(className, args));
        if (ctor != null) {
            return new ConstructorMethod(ctor);
        }
        return null;
    }","  public void test5()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Object[] objectArray0 = new Object[7];
      SimpleLog simpleLog0 = new SimpleLog(""qhA+MZ^xZ3yKMwY"");
      Introspector introspector0 = new Introspector(simpleLog0, classLoader0);
      ConstructorMethod constructorMethod0 = ConstructorMethod.discover(introspector0, objectArray0[3], objectArray0);
}"
4060,"    public static ConstructorMethod discover(final Introspector is, final Object ctorHandle, final Object... args) {
        String className;
        Class<?> clazz = null;
        if (ctorHandle instanceof Class<?>) {
            clazz = (Class<?>) ctorHandle;
            className = clazz.getName();
        } else if (ctorHandle != null) {
            className = ctorHandle.toString();
        } else {
            return null;
        }
        final Constructor<?> ctor = is.getConstructor(clazz, new MethodKey(className, args));
        if (ctor != null) {
            return new ConstructorMethod(ctor);
        }
        return null;
    }","  public void test6()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Object[] objectArray0 = new Object[7];
      Class<Annotation> class0 = Annotation.class;
      SimpleLog simpleLog0 = new SimpleLog(""qhA+MZ^xZ3yKMwY"");
      Introspector introspector0 = new Introspector(simpleLog0, classLoader0);
      ConstructorMethod constructorMethod0 = ConstructorMethod.discover(introspector0, class0, objectArray0);
}"
4061,"    public boolean isCacheable() {
        return true;
    }","  public void test7()  throws Throwable  {
      ConstructorMethod constructorMethod0 = new ConstructorMethod((Constructor<?>) null);
      boolean boolean0 = constructorMethod0.isCacheable();
}"
4062,"    public Class<?> getReturnType() {
        return ctor.getDeclaringClass();
    }","  public void test8()  throws Throwable  {
      ConstructorMethod constructorMethod0 = new ConstructorMethod((Constructor<?>) null);
      // Undeclared exception!
      try { 
        constructorMethod0.getReturnType();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.internal.introspection.ConstructorMethod"", e);
      }
  }"
4063,"    public boolean hasNext() {
        return (pos < size);
    }","  public void test0()  throws Throwable  {
      ArrayIterator arrayIterator0 = new ArrayIterator((Object) null);
      boolean boolean0 = arrayIterator0.hasNext();
}"
4064,"    public Object next() {
        if (pos < size) {
            return Array.get(array, pos++);
        }
        // we screwed up...
        throw new NoSuchElementException(""No more elements: "" + pos
                                         + "" / "" + size);
    }","  public void test1()  throws Throwable  {
      ArrayIterator arrayIterator0 = new ArrayIterator((Object) null);
      // Undeclared exception!
      try { 
        arrayIterator0.next();
        fail(""Expecting exception: NoSuchElementException"");
      } catch(NoSuchElementException e) {
         //
         // No more elements: 0 / 0
         //
         verifyException(""org.apache.commons.jexl3.internal.introspection.ArrayIterator"", e);
      }
  }"
4065,"    public ArrayIterator(final Object arr) {
        if (arr == null) {
            array = null;
            pos = 0;
            size = 0;
        } else if (!arr.getClass().isArray()) {
            throw new IllegalArgumentException(arr.getClass() + "" is not an array"");
        } else {
            array = arr;
            pos = 0;
            size = Array.getLength(array);
        }
    }","  public void test2()  throws Throwable  {
      ArrayIterator arrayIterator0 = null;
      try {
        arrayIterator0 = new ArrayIterator(""GyI{M)GK6"");
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // class java.lang.String is not an array
         //
         verifyException(""org.apache.commons.jexl3.internal.introspection.ArrayIterator"", e);
      }
  }"
4066,"    public void remove() {
        throw new UnsupportedOperationException();
    }","  public void test3()  throws Throwable  {
      ArrayIterator arrayIterator0 = new ArrayIterator((Object) null);
      // Undeclared exception!
      try { 
        arrayIterator0.remove();
        fail(""Expecting exception: UnsupportedOperationException"");
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.internal.introspection.ArrayIterator"", e);
      }
  }"
4067,"    public static ListGetExecutor discover(final Introspector is, final Class<?> clazz, final Integer index) {
        if (index != null) {
            if (clazz.isArray()) {
                return new ListGetExecutor(clazz, ARRAY_GET, index);
            }
            if (List.class.isAssignableFrom(clazz)) {
                return new ListGetExecutor(clazz, LIST_GET, index);
            }
        }
        return null;
    }","  public void test0()  throws Throwable  {
      Integer integer0 = new Integer(0);
      // Undeclared exception!
      try { 
        ListGetExecutor.discover((Introspector) null, (Class<?>) null, integer0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.internal.introspection.ListGetExecutor"", e);
      }
  }"
4068,"    public static ListGetExecutor discover(final Introspector is, final Class<?> clazz, final Integer index) {
        if (index != null) {
            if (clazz.isArray()) {
                return new ListGetExecutor(clazz, ARRAY_GET, index);
            }
            if (List.class.isAssignableFrom(clazz)) {
                return new ListGetExecutor(clazz, LIST_GET, index);
            }
        }
        return null;
    }","  public void test1()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      Integer integer0 = new Integer((-3344));
      ListGetExecutor listGetExecutor0 = ListGetExecutor.discover((Introspector) null, class0, integer0);
}"
4069,"    public static ListGetExecutor discover(final Introspector is, final Class<?> clazz, final Integer index) {
        if (index != null) {
            if (clazz.isArray()) {
                return new ListGetExecutor(clazz, ARRAY_GET, index);
            }
            if (List.class.isAssignableFrom(clazz)) {
                return new ListGetExecutor(clazz, LIST_GET, index);
            }
        }
        return null;
    }","  public void test2()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      ListGetExecutor listGetExecutor0 = ListGetExecutor.discover((Introspector) null, class0, (Integer) null);
}"
4070,"    public boolean equals(final Object obj) {
        return this == obj || (obj instanceof AbstractExecutor && equals((AbstractExecutor) obj));
    }","  public void test0()  throws Throwable  {
      Class<MapGetExecutor> class0 = MapGetExecutor.class;
      PropertySetExecutor propertySetExecutor0 = new PropertySetExecutor(class0, (Method) null, ""zP+"", (Object) null);
      PropertySetExecutor propertySetExecutor1 = new PropertySetExecutor(class0, (Method) null, """", (Object) null);
      // Undeclared exception!
      try { 
        propertySetExecutor0.equals((AbstractExecutor) propertySetExecutor1);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.internal.introspection.AbstractExecutor"", e);
      }
  }"
4071,"    public int hashCode() {
        return method.hashCode();
    }","  public void test1()  throws Throwable  {
      SimpleLog simpleLog0 = new SimpleLog((String) null);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Introspector introspector0 = new Introspector(simpleLog0, classLoader0);
      Class<CharBuffer> class0 = CharBuffer.class;
      DuckGetExecutor duckGetExecutor0 = DuckGetExecutor.discover(introspector0, class0, (Object) null);
      duckGetExecutor0.hashCode();
  }"
4072,"    static Object[] makeArgs(final Object... args) {
        return args;
    }","  public void test2()  throws Throwable  {
      Object[] objectArray0 = AbstractExecutor.makeArgs((Object[]) null);
}"
4073,"    static Object[] makeArgs(final Object... args) {
        return args;
    }","  public void test3()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Object[] objectArray1 = AbstractExecutor.makeArgs(objectArray0);
}"
4074,"    static Object[] makeArgs(final Object... args) {
        return args;
    }","  public void test4()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      Object[] objectArray1 = AbstractExecutor.makeArgs(objectArray0);
}"
4075,"    public Object getTargetProperty() {
        return null;
    }","  public void test5()  throws Throwable  {
      SimpleLog simpleLog0 = new SimpleLog((String) null);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Introspector introspector0 = new Introspector(simpleLog0, classLoader0);
      Class<CharBuffer> class0 = CharBuffer.class;
      DuckGetExecutor duckGetExecutor0 = DuckGetExecutor.discover(introspector0, class0, (Object) null);
      Object object0 = duckGetExecutor0.getTargetProperty();
}"
4076,"    public Object getTargetProperty() {
        return null;
    }","  public void test6()  throws Throwable  {
      Class<MapGetExecutor> class0 = MapGetExecutor.class;
      PropertySetExecutor propertySetExecutor0 = new PropertySetExecutor(class0, (Method) null, ""zP+"", (Object) null);
      Object object0 = propertySetExecutor0.getTargetProperty();
}"
4077,"    public final Class<?> getTargetClass() {
        return objectClass;
    }","  public void test7()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      Class<Object> class1 = Object.class;
      PropertySetExecutor propertySetExecutor0 = new PropertySetExecutor(class0, (Method) null, """", class1);
      Class<?> class2 = propertySetExecutor0.getTargetClass();
}"
4078,"    public final String getMethodName() {
        return method.getName();
    }","  public void test8()  throws Throwable  {
      SimpleLog simpleLog0 = new SimpleLog((String) null);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Introspector introspector0 = new Introspector(simpleLog0, classLoader0);
      Class<CharBuffer> class0 = CharBuffer.class;
      DuckGetExecutor duckGetExecutor0 = DuckGetExecutor.discover(introspector0, class0, (Object) null);
      String string0 = duckGetExecutor0.getMethodName();
}"
4079,"    public final java.lang.reflect.Method getMethod() {
        return method;
    }","  public void test9()  throws Throwable  {
      Class<MapGetExecutor> class0 = MapGetExecutor.class;
      PropertySetExecutor propertySetExecutor0 = new PropertySetExecutor(class0, (Method) null, ""zP+"", (Object) null);
      Method method0 = propertySetExecutor0.getMethod();
}"
4080,"    static Class<?> classOf(final Object instance) {
        return instance == null? Object.class : instance.getClass();
    }","  public void test10()  throws Throwable  {
      char[] charArray0 = new char[4];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      Class<?> class0 = AbstractExecutor.classOf(charBuffer0);
}"
4081,"    static Class<?> classOf(final Object instance) {
        return instance == null? Object.class : instance.getClass();
    }","  public void test11()  throws Throwable  {
      Class<?> class0 = AbstractExecutor.classOf((Object) null);
}"
4082,"    static Integer castInteger(final Object arg) {
        return arg instanceof Number? ((Number) arg).intValue() : null;
    }","  public void test12()  throws Throwable  {
      Float float0 = new Float(0.0);
      Integer integer0 = AbstractExecutor.castInteger(float0);
}"
4083,"    public boolean equals(final Object obj) {
        return this == obj || (obj instanceof AbstractExecutor && equals((AbstractExecutor) obj));
    }","  public void test13()  throws Throwable  {
      Integer integer0 = new Integer(1);
      Integer integer1 = AbstractExecutor.castInteger(integer0);
}"
4084,"    public boolean equals(final Object obj) {
        return this == obj || (obj instanceof AbstractExecutor && equals((AbstractExecutor) obj));
    }","  public void test14()  throws Throwable  {
      Integer integer0 = new Integer((-1041));
      Integer integer1 = AbstractExecutor.castInteger(integer0);
}"
4085,"    public final java.lang.reflect.Method getMethod() {
        return method;
    }","  public void test15()  throws Throwable  {
      SimpleLog simpleLog0 = new SimpleLog((String) null);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Introspector introspector0 = new Introspector(simpleLog0, classLoader0);
      Class<CharBuffer> class0 = CharBuffer.class;
      DuckGetExecutor duckGetExecutor0 = DuckGetExecutor.discover(introspector0, class0, (Object) null);
      Method method0 = duckGetExecutor0.getMethod();
}"
4086,"    public final boolean isAlive() {
        return (method != null);
    }","  public void test16()  throws Throwable  {
      SimpleLog simpleLog0 = new SimpleLog((String) null);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Introspector introspector0 = new Introspector(simpleLog0, classLoader0);
      Class<CharBuffer> class0 = CharBuffer.class;
      DuckGetExecutor duckGetExecutor0 = DuckGetExecutor.discover(introspector0, class0, (Object) null);
      Method method0 = duckGetExecutor0.getMethod();
}"
4087,"    public final boolean tryFailed(final Object exec) {
        return exec == JexlEngine.TRY_FAILED;
    }","  public void test17()  throws Throwable  {
      Class<MapGetExecutor> class0 = MapGetExecutor.class;
      PropertySetExecutor propertySetExecutor0 = new PropertySetExecutor(class0, (Method) null, ""zP+"", (Object) null);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      boolean boolean0 = propertySetExecutor0.tryFailed(classLoader0);
}"
4088,"    public boolean isCacheable() {
        return method != null;
    }","  public void test18()  throws Throwable  {
      SimpleLog simpleLog0 = new SimpleLog((String) null);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Introspector introspector0 = new Introspector(simpleLog0, classLoader0);
      Class<CharBuffer> class0 = CharBuffer.class;
      DuckGetExecutor duckGetExecutor0 = DuckGetExecutor.discover(introspector0, class0, (Object) null);
      boolean boolean0 = duckGetExecutor0.isCacheable();
}"
4089,"    public boolean isCacheable() {
        return method != null;
    }","  public void test19()  throws Throwable  {
      Class<MapGetExecutor> class0 = MapGetExecutor.class;
      PropertySetExecutor propertySetExecutor0 = new PropertySetExecutor(class0, (Method) null, ""6P+"", (Object) null);
      boolean boolean0 = propertySetExecutor0.isCacheable();
}"
4090,"    public final boolean isAlive() {
        return (method != null);
    }","  public void test20()  throws Throwable  {
      Class<MapGetExecutor> class0 = MapGetExecutor.class;
      PropertySetExecutor propertySetExecutor0 = new PropertySetExecutor(class0, (Method) null, ""z~+"", (Object) null);
      boolean boolean0 = propertySetExecutor0.isAlive();
}"
4091,"    public boolean equals(final Object obj) {
        return this == obj || (obj instanceof AbstractExecutor && equals((AbstractExecutor) obj));
    }","  public void test21()  throws Throwable  {
      Class<MapGetExecutor> class0 = MapGetExecutor.class;
      PropertySetExecutor propertySetExecutor0 = new PropertySetExecutor(class0, (Method) null, ""zP+"", (Object) null);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      boolean boolean0 = propertySetExecutor0.equals((Object) classLoader0);
}"
4092,"    static String castString(final Object arg) {
        return arg instanceof CharSequence || arg instanceof Integer ? arg.toString() : null;
    }","  public void test22()  throws Throwable  {
      Integer integer0 = new Integer(36);
      String string0 = AbstractExecutor.castString(integer0);
}"
4093,"    static String castString(final Object arg) {
        return arg instanceof CharSequence || arg instanceof Integer ? arg.toString() : null;
    }","  public void test23()  throws Throwable  {
      String string0 = AbstractExecutor.castString((Object) null);
}"
4094,"    static String castString(final Object arg) {
        return arg instanceof CharSequence || arg instanceof Integer ? arg.toString() : null;
    }","  public void test24()  throws Throwable  {
      String string0 = AbstractExecutor.castString(""zP+"");
}"
4095,"    static Integer castInteger(final Object arg) {
        return arg instanceof Number? ((Number) arg).intValue() : null;
    }","  public void test25()  throws Throwable  {
      Integer integer0 = AbstractExecutor.castInteger((Object) null);
}"
4096,"    public final Class<?> getTargetClass() {
        return objectClass;
    }","  public void test26()  throws Throwable  {
      Class<MapGetExecutor> class0 = MapGetExecutor.class;
      PropertySetExecutor propertySetExecutor0 = new PropertySetExecutor(class0, (Method) null, ""zP+"", (Object) null);
      Class<?> class1 = propertySetExecutor0.getTargetClass();
}"
4097,"    static java.lang.reflect.Method initMarker(final Class<?> clazz, final String name, final Class<?>... parms) {
        try {
            return clazz.getMethod(name, parms);
        } catch (final Exception xnever) {
            throw new Error(xnever);
        }
    }","  public void test27()  throws Throwable  {
      Class<ListGetExecutor> class0 = ListGetExecutor.class;
      Class<DuckSetExecutor>[] classArray0 = (Class<DuckSetExecutor>[]) Array.newInstance(Class.class, 0);
      // Undeclared exception!
      try { 
        AbstractExecutor.initMarker(class0, """", classArray0);
        fail(""Expecting exception: Error"");
      } catch(Error e) {
         //
         // java.lang.NoSuchMethodException: org.apache.commons.jexl3.internal.introspection.ListGetExecutor.()
         //
         verifyException(""org.apache.commons.jexl3.internal.introspection.AbstractExecutor"", e);
      }
  }"
4098,"    public final String getMethodName() {
        return method.getName();
    }","  public void test28()  throws Throwable  {
      Class<MapGetExecutor> class0 = MapGetExecutor.class;
      PropertySetExecutor propertySetExecutor0 = new PropertySetExecutor(class0, (Method) null, ""z~+"", (Object) null);
      // Undeclared exception!
      try { 
        propertySetExecutor0.getMethodName();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.internal.introspection.AbstractExecutor"", e);
      }
  }"
4099,"    public int hashCode() {
        return method.hashCode();
    }","  public void test29()  throws Throwable  {
      Class<MapGetExecutor> class0 = MapGetExecutor.class;
      PropertySetExecutor propertySetExecutor0 = new PropertySetExecutor(class0, (Method) null, ""zP+"", (Object) null);
      // Undeclared exception!
      try { 
        propertySetExecutor0.hashCode();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.internal.introspection.AbstractExecutor"", e);
      }
  }"
4100,"    public final boolean isAlive() {
        return (method != null);
    }","  public void test30()  throws Throwable  {
      SimpleLog simpleLog0 = new SimpleLog((String) null);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Introspector introspector0 = new Introspector(simpleLog0, classLoader0);
      Class<CharBuffer> class0 = CharBuffer.class;
      DuckGetExecutor duckGetExecutor0 = DuckGetExecutor.discover(introspector0, class0, (Object) null);
      boolean boolean0 = duckGetExecutor0.isAlive();
}"
4101,"    public static MapSetExecutor discover(final Introspector is,
                                          final Class<?> clazz,
                                          final Object identifier,
                                          final Object value) {
        if (Map.class.isAssignableFrom(clazz)) {
            return new MapSetExecutor(clazz, MAP_SET, identifier, value);
        }
        return null;
    }","  public void test0()  throws Throwable  {
      Class<String> class0 = String.class;
      // Undeclared exception!
      try { 
        MapSetExecutor.discover((Introspector) null, (Class<?>) null, class0, class0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
      }
  }"
4102,"    public static MapSetExecutor discover(final Introspector is,
                                          final Class<?> clazz,
                                          final Object identifier,
                                          final Object value) {
        if (Map.class.isAssignableFrom(clazz)) {
            return new MapSetExecutor(clazz, MAP_SET, identifier, value);
        }
        return null;
    }","  public void test1()  throws Throwable  {
      Class<String> class0 = String.class;
      MapSetExecutor mapSetExecutor0 = MapSetExecutor.discover((Introspector) null, class0, class0, class0);
}"
4103,"    public Object invoke(final Object o, Object arg) throws IllegalAccessException, InvocationTargetException {
        if (method != null) {
            // handle the empty array case
            if (isEmptyArray(arg)) {
                // if array is empty but its component type is different from the method first parameter component type,
                // replace argument with a new empty array instance (of the method first parameter component type)
                final Class<?> componentType = method.getParameterTypes()[0].getComponentType();
                if (componentType != null && !componentType.equals(arg.getClass().getComponentType())) {
                    arg = Array.newInstance(componentType, 0);
                }
            }
                method.invoke(o, arg);
            }
        return arg;
    }","  public void test0()  throws Throwable  {
      Class<String> class0 = String.class;
      Permissions permissions0 = Permissions.DEFAULT;
      PropertySetExecutor propertySetExecutor0 = new PropertySetExecutor(class0, (Method) null, ""source URL is null"", permissions0);
      Object object0 = propertySetExecutor0.invoke(class0, (Object) null);
}"
4104,"    public Object getTargetProperty() {
        return property;
    }","  public void test1()  throws Throwable  {
      Class<Object> class0 = Object.class;
      PropertySetExecutor propertySetExecutor0 = new PropertySetExecutor(class0, (Method) null, (String) null, class0);
      Object object0 = propertySetExecutor0.getTargetProperty();
}"
4105,"    public static PropertySetExecutor discover(final Introspector is,
                                               final Class<?> clazz,
                                               final String property,
                                               final Object value) {
        if (property == null || property.isEmpty()) {
            return null;
        }
        final java.lang.reflect.Method method = discoverSet(is, clazz, property, value);
        return method != null? new PropertySetExecutor(clazz, method, property, value) : null;
    }","  public void test2()  throws Throwable  {
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        PropertySetExecutor.discover((Introspector) null, class0, ""z:ji[&l9eHjR4]"", class0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.internal.introspection.PropertySetExecutor"", e);
      }
  }"
4106,"    public static PropertySetExecutor discover(final Introspector is,
                                               final Class<?> clazz,
                                               final String property,
                                               final Object value) {
        if (property == null || property.isEmpty()) {
            return null;
        }
        final java.lang.reflect.Method method = discoverSet(is, clazz, property, value);
        return method != null? new PropertySetExecutor(clazz, method, property, value) : null;
    }","  public void test3()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Introspector introspector0 = new Introspector((Log) null, classLoader0);
      Class<String> class0 = String.class;
      // Undeclared exception!
      try { 
        PropertySetExecutor.discover(introspector0, class0, ""#A`x_&YQ"", (Object) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.internal.introspection.ClassMap"", e);
      }
  }"
4107,"    public static PropertySetExecutor discover(final Introspector is,
                                               final Class<?> clazz,
                                               final String property,
                                               final Object value) {
        if (property == null || property.isEmpty()) {
            return null;
        }
        final java.lang.reflect.Method method = discoverSet(is, clazz, property, value);
        return method != null? new PropertySetExecutor(clazz, method, property, value) : null;
    }","  public void test4()  throws Throwable  {
      Class<String> class0 = String.class;
      Jdk13LumberjackLogger jdk13LumberjackLogger0 = new Jdk13LumberjackLogger("">S{l[2-\""7J9dA9H"");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Introspector introspector0 = new Introspector(jdk13LumberjackLogger0, classLoader0);
      PropertySetExecutor propertySetExecutor0 = PropertySetExecutor.discover(introspector0, class0, "">S{l[2-\""7J9dA9H"", (Object) null);
}"
4108,"    public Object tryInvoke(final Object o, final Object identifier, final Object value) {
        if (o != null && method != null
            // ensure method name matches the property name
            && property.equals(castString(identifier))
            // object class should be same as executor's method declaring class
            && objectClass.equals(o.getClass())
            // argument class should be eq
            && valueClass.equals(classOf(value))) {
            try {
                return invoke(o, value);
            } catch (IllegalAccessException | IllegalArgumentException xill) {
                return TRY_FAILED;// fail
            } catch (final InvocationTargetException xinvoke) {
                throw JexlException.tryFailed(xinvoke); // throw
            }
        }
        return TRY_FAILED;
    }","  public void test5()  throws Throwable  {
      Class<String> class0 = String.class;
      PropertySetExecutor propertySetExecutor0 = new PropertySetExecutor(class0, (Method) null, "">G"", class0);
      Object object0 = propertySetExecutor0.tryInvoke("">G"", "">G"", propertySetExecutor0);
      Object object1 = propertySetExecutor0.tryInvoke((Object) null, object0, (Object) null);
}"
4109,"    public Object invoke(final Object o, Object arg) throws IllegalAccessException, InvocationTargetException {
        if (method != null) {
            // handle the empty array case
            if (isEmptyArray(arg)) {
                // if array is empty but its component type is different from the method first parameter component type,
                // replace argument with a new empty array instance (of the method first parameter component type)
                final Class<?> componentType = method.getParameterTypes()[0].getComponentType();
                if (componentType != null && !componentType.equals(arg.getClass().getComponentType())) {
                    arg = Array.newInstance(componentType, 0);
                }
            }
                method.invoke(o, arg);
            }
        return arg;
    }","  public void test6()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Jdk14Logger jdk14Logger0 = new Jdk14Logger(""OG`-(j2VY\""I"");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Permissions permissions0 = new Permissions();
      Introspector introspector0 = new Introspector(jdk14Logger0, classLoader0, permissions0);
      PropertySetExecutor propertySetExecutor0 = new PropertySetExecutor(class0, (Method) null, ""OG`-(j2VY\""I"", introspector0);
      Class class1 = (Class)propertySetExecutor0.invoke(class0, class0);
}"
4110,"    public static PropertySetExecutor discover(final Introspector is,
                                               final Class<?> clazz,
                                               final String property,
                                               final Object value) {
        if (property == null || property.isEmpty()) {
            return null;
        }
        final java.lang.reflect.Method method = discoverSet(is, clazz, property, value);
        return method != null? new PropertySetExecutor(clazz, method, property, value) : null;
    }","  public void test7()  throws Throwable  {
      Class<Object> class0 = Object.class;
      PropertySetExecutor propertySetExecutor0 = PropertySetExecutor.discover((Introspector) null, class0, """", (Object) null);
}"
4111,"    public static PropertySetExecutor discover(final Introspector is,
                                               final Class<?> clazz,
                                               final String property,
                                               final Object value) {
        if (property == null || property.isEmpty()) {
            return null;
        }
        final java.lang.reflect.Method method = discoverSet(is, clazz, property, value);
        return method != null? new PropertySetExecutor(clazz, method, property, value) : null;
    }","  public void test8()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Jdk14Logger jdk14Logger0 = new Jdk14Logger(""OG`-(j2VY\""I"");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Permissions permissions0 = new Permissions();
      Introspector introspector0 = new Introspector(jdk14Logger0, classLoader0, permissions0);
      PropertySetExecutor propertySetExecutor0 = PropertySetExecutor.discover(introspector0, class0, ""OG`-(j2VY\""I"", jdk14Logger0);
}"
4112,"    public static PropertySetExecutor discover(final Introspector is,
                                               final Class<?> clazz,
                                               final String property,
                                               final Object value) {
        if (property == null || property.isEmpty()) {
            return null;
        }
        final java.lang.reflect.Method method = discoverSet(is, clazz, property, value);
        return method != null? new PropertySetExecutor(clazz, method, property, value) : null;
    }","  public void test9()  throws Throwable  {
      Class<Object> class0 = Object.class;
      PropertySetExecutor propertySetExecutor0 = PropertySetExecutor.discover((Introspector) null, class0, (String) null, (Object) null);
}"
4113,"    public Object getTargetProperty() {
        return property;
    }","  public void test10()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Jdk14Logger jdk14Logger0 = new Jdk14Logger(""OG`-(j2VY\""I"");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Permissions permissions0 = new Permissions();
      Introspector introspector0 = new Introspector(jdk14Logger0, classLoader0, permissions0);
      PropertySetExecutor propertySetExecutor0 = new PropertySetExecutor(class0, (Method) null, ""OG`-(j2VY\""I"", introspector0);
      Object object0 = propertySetExecutor0.getTargetProperty();
}"
4114,"    public static BooleanGetExecutor discover(final Introspector is, final Class<?> clazz, final String property) {
        if (property != null && !property.isEmpty()) {
            final java.lang.reflect.Method m = PropertyGetExecutor.discoverGet(is, ""is"", clazz, property);
            if (m != null && (m.getReturnType() == Boolean.TYPE || m.getReturnType() == Boolean.class)) {
                return new BooleanGetExecutor(clazz, m, property);
            }
        }
        return null;
    }","  public void test0()  throws Throwable  {
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        BooleanGetExecutor.discover((Introspector) null, class0, ""XQ%Wux8:PQ)-zD~Q2"");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.internal.introspection.PropertyGetExecutor"", e);
      }
  }"
4115,"    public static BooleanGetExecutor discover(final Introspector is, final Class<?> clazz, final String property) {
        if (property != null && !property.isEmpty()) {
            final java.lang.reflect.Method m = PropertyGetExecutor.discoverGet(is, ""is"", clazz, property);
            if (m != null && (m.getReturnType() == Boolean.TYPE || m.getReturnType() == Boolean.class)) {
                return new BooleanGetExecutor(clazz, m, property);
            }
        }
        return null;
    }","  public void test1()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Permissions permissions0 = Permissions.DEFAULT;
      Introspector introspector0 = new Introspector((Log) null, classLoader0, permissions0);
      Class<String> class0 = String.class;
      // Undeclared exception!
      try { 
        BooleanGetExecutor.discover(introspector0, class0, ""</umA$"");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.internal.introspection.ClassMap"", e);
      }
  }"
4116,"    public static BooleanGetExecutor discover(final Introspector is, final Class<?> clazz, final String property) {
        if (property != null && !property.isEmpty()) {
            final java.lang.reflect.Method m = PropertyGetExecutor.discoverGet(is, ""is"", clazz, property);
            if (m != null && (m.getReturnType() == Boolean.TYPE || m.getReturnType() == Boolean.class)) {
                return new BooleanGetExecutor(clazz, m, property);
            }
        }
        return null;
    }","  public void test2()  throws Throwable  {
      Jdk14Logger jdk14Logger0 = new Jdk14Logger("""");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Permissions permissions0 = new Permissions();
      Introspector introspector0 = new Introspector(jdk14Logger0, classLoader0, permissions0);
      Class<Object> class0 = Object.class;
      BooleanGetExecutor booleanGetExecutor0 = BooleanGetExecutor.discover(introspector0, class0, """");
}"
4117,"    public static BooleanGetExecutor discover(final Introspector is, final Class<?> clazz, final String property) {
        if (property != null && !property.isEmpty()) {
            final java.lang.reflect.Method m = PropertyGetExecutor.discoverGet(is, ""is"", clazz, property);
            if (m != null && (m.getReturnType() == Boolean.TYPE || m.getReturnType() == Boolean.class)) {
                return new BooleanGetExecutor(clazz, m, property);
            }
        }
        return null;
    }","  public void test3()  throws Throwable  {
      Jdk14Logger jdk14Logger0 = new Jdk14Logger("""");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Permissions permissions0 = new Permissions();
      Introspector introspector0 = new Introspector(jdk14Logger0, classLoader0, permissions0);
      Class<Object> class0 = Object.class;
      BooleanGetExecutor booleanGetExecutor0 = BooleanGetExecutor.discover(introspector0, class0, ""/"");
}"
4118,"    public static BooleanGetExecutor discover(final Introspector is, final Class<?> clazz, final String property) {
        if (property != null && !property.isEmpty()) {
            final java.lang.reflect.Method m = PropertyGetExecutor.discoverGet(is, ""is"", clazz, property);
            if (m != null && (m.getReturnType() == Boolean.TYPE || m.getReturnType() == Boolean.class)) {
                return new BooleanGetExecutor(clazz, m, property);
            }
        }
        return null;
    }","  public void test4()  throws Throwable  {
      Jdk14Logger jdk14Logger0 = new Jdk14Logger("""");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Permissions permissions0 = new Permissions();
      Introspector introspector0 = new Introspector(jdk14Logger0, classLoader0, permissions0);
      Class<Object> class0 = Object.class;
      BooleanGetExecutor booleanGetExecutor0 = BooleanGetExecutor.discover(introspector0, class0, (String) null);
}"
4119,"    public static MapGetExecutor discover(final Introspector is, final Class<?> clazz, final Object identifier) {
        if (Map.class.isAssignableFrom(clazz)) {
            return new MapGetExecutor(clazz, MAP_GET, identifier);
        }
        return null;
    }","  public void test0()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Permissions permissions0 = Permissions.DEFAULT;
      Introspector introspector0 = new Introspector((Log) null, classLoader0, permissions0);
      // Undeclared exception!
      try { 
        MapGetExecutor.discover(introspector0, (Class<?>) null, (Object) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
      }
  }"
4120,"    public static MapGetExecutor discover(final Introspector is, final Class<?> clazz, final Object identifier) {
        if (Map.class.isAssignableFrom(clazz)) {
            return new MapGetExecutor(clazz, MAP_GET, identifier);
        }
        return null;
    }","  public void test1()  throws Throwable  {
      Class<Object> class0 = Object.class;
      MapGetExecutor mapGetExecutor0 = MapGetExecutor.discover((Introspector) null, class0, class0);
}"
4121,"    public static boolean isInvocationConvertible(final Class<?> formal,
                                                  final Class<?> actual,
                                                  final boolean possibleVarArg) {
        return isInvocationConvertible(formal, actual, false, possibleVarArg);
    }","  public void test0()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      Class<Byte> class1 = Byte.class;
      boolean boolean0 = MethodKey.isInvocationConvertible(class0, class1, true);
}"
4122,"    public static boolean isInvocationConvertible(final Class<?> formal,
                                                  final Class<?> actual,
                                                  final boolean possibleVarArg) {
        return isInvocationConvertible(formal, actual, false, possibleVarArg);
    }","  public void test1()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Class<Double> class1 = Double.class;
      boolean boolean0 = MethodKey.isInvocationConvertible(class0, class1, true);
}"
4123,"    public String toString() {
        final StringBuilder builder = new StringBuilder(method);
        for (final Class<?> c : params) {
            builder.append(c == Void.class ? ""null"" : c.getName());
        }
        return builder.toString();
    }","  public void test2()  throws Throwable  {
      MethodKey methodKey0 = new MethodKey("""", (Class<?>[]) null);
      String string0 = methodKey0.toString();
}"
4124,"    static Class<?> primitiveClass(final Class<?> parm) {
        // it was marginally faster to get from the map than call isPrimitive...
        //if (!parm.isPrimitive()) return parm;
        final Class<?>[] prim = CONVERTIBLES.get(parm);
        return prim == null ? parm : prim[0];
    }","  public void test3()  throws Throwable  {
      Class<?> class0 = MethodKey.primitiveClass((Class<?>) null);
}"
4125,"    static Class<?> primitiveClass(final Class<?> parm) {
        // it was marginally faster to get from the map than call isPrimitive...
        //if (!parm.isPrimitive()) return parm;
        final Class<?>[] prim = CONVERTIBLES.get(parm);
        return prim == null ? parm : prim[0];
    }","  public void test4()  throws Throwable  {
      Class<Void> class0 = Void.TYPE;
      Class<?> class1 = MethodKey.primitiveClass(class0);
}"
4126,"    static Class<?> primitiveClass(final Class<?> parm) {
        // it was marginally faster to get from the map than call isPrimitive...
        //if (!parm.isPrimitive()) return parm;
        final Class<?>[] prim = CONVERTIBLES.get(parm);
        return prim == null ? parm : prim[0];
    }","  public void test5()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      Class<?> class1 = MethodKey.primitiveClass(class0);
}"
4127,"    Class<?>[] getParameters() {
        return params;
    }","  public void test6()  throws Throwable  {
      MethodKey methodKey0 = new MethodKey("""", (Class<?>[]) null);
      Class<?>[] classArray0 = methodKey0.getParameters();
}"
4128,"    public Method getMostSpecificMethod(final Method[] methods) {
        return METHODS.getMostSpecific(this, methods);
    }","  public void test7()  throws Throwable  {
      Class<Character>[] classArray0 = (Class<Character>[]) Array.newInstance(Class.class, 9);
      MethodKey methodKey0 = new MethodKey(""org.apache.commons.jexl3.internal.introspection.MethodKey$Parameters"", (Class<?>[]) classArray0);
      Method[] methodArray0 = new Method[0];
      Method method0 = methodKey0.getMostSpecificMethod(methodArray0);
}"
4129,"    String getMethod() {
        return method;
    }","  public void test8()  throws Throwable  {
      MethodKey methodKey0 = new MethodKey("""", (Class<?>[]) null);
      String string0 = methodKey0.getMethod();
}"
4130,"    public String toString() {
        final StringBuilder builder = new StringBuilder(method);
        for (final Class<?> c : params) {
            builder.append(c == Void.class ? ""null"" : c.getName());
        }
        return builder.toString();
    }","  public void test9()  throws Throwable  {
      Class<Void>[] classArray0 = (Class<Void>[]) Array.newInstance(Class.class, 4);
      MethodKey methodKey0 = new MethodKey(""`>Q8Bta475(~"", (Class<?>[]) classArray0);
      // Undeclared exception!
      try { 
        methodKey0.toString();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.internal.introspection.MethodKey"", e);
      }
  }"
4131,"    public static boolean isInvocationConvertible(final Class<?> formal,
                                                  final Class<?> actual,
                                                  final boolean possibleVarArg) {
        return isInvocationConvertible(formal, actual, false, possibleVarArg);
    }","  public void test10()  throws Throwable  {
      // Undeclared exception!
      try { 
        MethodKey.isInvocationConvertible((Class<?>) null, (Class<?>) null, true);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.internal.introspection.MethodKey"", e);
      }
  }"
4132,"    public String debugString() {
        final StringBuilder builder = new StringBuilder(method);
        builder.append('(');
        for (int i = 0; i < params.length; i++) {
            if (i > 0) {
                builder.append("", "");
            }
            builder.append(Void.class == params[i] ? ""null"" : params[i].getName());
        }
        builder.append(')');
        return builder.toString();
    }","  public void test11()  throws Throwable  {
      Class<String>[] classArray0 = (Class<String>[]) Array.newInstance(Class.class, 8);
      MethodKey methodKey0 = new MethodKey(""e#k&*ER"", (Class<?>[]) classArray0);
      // Undeclared exception!
      try { 
        methodKey0.debugString();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.internal.introspection.MethodKey"", e);
      }
  }"
4133,"    public MethodKey(final String aMethod, final Object[] args) {
        // !! keep this in sync with the other ctor (hash code) !!
        this.method = aMethod;
        int hash = this.method.hashCode();
        final int size;
        // CSOFF: InnerAssignment
        if (args != null && (size = args.length) > 0) {
            this.params = new Class<?>[size];
            for (int p = 0; p < size; ++p) {
                final Object arg = args[p];
                // null arguments use void as Void.class as marker
                final Class<?> parm = arg == null ? Void.class : arg.getClass();
                hash = (HASH * hash) + parm.hashCode();
                this.params[p] = parm;
            }
        } else {
            this.params = NOARGS;
        }
        this.hashCode = hash;
    }","  public void test12()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      MethodKey methodKey0 = null;
      try {
        methodKey0 = new MethodKey((String) null, objectArray0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.internal.introspection.MethodKey"", e);
      }
  }"
4134,"    public MethodKey(final String aMethod, final Object[] args) {
        // !! keep this in sync with the other ctor (hash code) !!
        this.method = aMethod;
        int hash = this.method.hashCode();
        final int size;
        // CSOFF: InnerAssignment
        if (args != null && (size = args.length) > 0) {
            this.params = new Class<?>[size];
            for (int p = 0; p < size; ++p) {
                final Object arg = args[p];
                // null arguments use void as Void.class as marker
                final Class<?> parm = arg == null ? Void.class : arg.getClass();
                hash = (HASH * hash) + parm.hashCode();
                this.params[p] = parm;
            }
        } else {
            this.params = NOARGS;
        }
        this.hashCode = hash;
    }","  public void test13()  throws Throwable  {
      Class<Short>[] classArray0 = (Class<Short>[]) Array.newInstance(Class.class, 8);
      MethodKey methodKey0 = null;
      try {
        methodKey0 = new MethodKey((String) null, (Class<?>[]) classArray0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.internal.introspection.MethodKey"", e);
      }
  }"
4135,"    public static boolean isStrictInvocationConvertible(final Class<?> formal,
                                                        final Class<?> actual,
                                                        final boolean possibleVarArg) {
        return isInvocationConvertible(formal, actual, true, possibleVarArg);
    }","  public void test14()  throws Throwable  {
      Class<Double> class0 = Double.class;
      Class<Integer> class1 = Integer.TYPE;
      boolean boolean0 = MethodKey.isStrictInvocationConvertible(class0, class1, true);
}"
4136,"    public static boolean isStrictInvocationConvertible(final Class<?> formal,
                                                        final Class<?> actual,
                                                        final boolean possibleVarArg) {
        return isInvocationConvertible(formal, actual, true, possibleVarArg);
    }","  public void test15()  throws Throwable  {
      Class<Character> class0 = Character.class;
      Class<Character> class1 = Character.TYPE;
      boolean boolean0 = MethodKey.isStrictInvocationConvertible(class1, class0, false);
}"
4137,"    public static boolean isInvocationConvertible(final Class<?> formal,
                                                  final Class<?> actual,
                                                  final boolean possibleVarArg) {
        return isInvocationConvertible(formal, actual, false, possibleVarArg);
    }","  public void test16()  throws Throwable  {
      Class<Character> class0 = Character.class;
      Class<Character> class1 = Character.TYPE;
      boolean boolean0 = MethodKey.isInvocationConvertible(class1, class0, false);
}"
4138,"    public static boolean isInvocationConvertible(final Class<?> formal,
                                                  final Class<?> actual,
                                                  final boolean possibleVarArg) {
        return isInvocationConvertible(formal, actual, false, possibleVarArg);
    }","  public void test17()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Class<Double> class1 = Double.TYPE;
      boolean boolean0 = MethodKey.isInvocationConvertible(class0, class1, true);
}"
4139,"    public static boolean isStrictInvocationConvertible(final Class<?> formal,
                                                        final Class<?> actual,
                                                        final boolean possibleVarArg) {
        return isInvocationConvertible(formal, actual, true, possibleVarArg);
    }","  public void test18()  throws Throwable  {
      Class<Double> class0 = Double.class;
      boolean boolean0 = MethodKey.isStrictInvocationConvertible(class0, class0, false);
}"
4140,"    public static boolean isStrictInvocationConvertible(final Class<?> formal,
                                                        final Class<?> actual,
                                                        final boolean possibleVarArg) {
        return isInvocationConvertible(formal, actual, true, possibleVarArg);
    }","  public void test19()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      boolean boolean0 = MethodKey.isStrictInvocationConvertible(class0, (Class<?>) null, false);
}"
4141,"    public static boolean isStrictInvocationConvertible(final Class<?> formal,
                                                        final Class<?> actual,
                                                        final boolean possibleVarArg) {
        return isInvocationConvertible(formal, actual, true, possibleVarArg);
    }","  public void test20()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      boolean boolean0 = MethodKey.isStrictInvocationConvertible(class0, (Class<?>) null, false);
}"
4142,"    public MethodKey(final String aMethod, final Object[] args) {
        // !! keep this in sync with the other ctor (hash code) !!
        this.method = aMethod;
        int hash = this.method.hashCode();
        final int size;
        // CSOFF: InnerAssignment
        if (args != null && (size = args.length) > 0) {
            this.params = new Class<?>[size];
            for (int p = 0; p < size; ++p) {
                final Object arg = args[p];
                // null arguments use void as Void.class as marker
                final Class<?> parm = arg == null ? Void.class : arg.getClass();
                hash = (HASH * hash) + parm.hashCode();
                this.params[p] = parm;
            }
        } else {
            this.params = NOARGS;
        }
        this.hashCode = hash;
    }","  public void test21()  throws Throwable  {
      Class<Character>[] classArray0 = (Class<Character>[]) Array.newInstance(Class.class, 9);
      Class<Character> class0 = Character.TYPE;
      classArray0[4] = class0;
      MethodKey methodKey0 = new MethodKey(""org.apache.commons.jexl3.internal.introspection.MethodKey$Parameters"", (Class<?>[]) classArray0);
  }"
4143,"    public static boolean isVarArgs(final Method method) {
        if (method == null) {
            return false;
        }
        if (method.isVarArgs()) {
            return true;
        }
        // before climbing up the hierarchy, verify that the last parameter is an array
        final Class<?>[] ptypes = method.getParameterTypes();
        if (ptypes.length == 0 || ptypes[ptypes.length - 1].getComponentType() == null) {
            return false;
        }
        final String mname = method.getName();
        // if this is an override, was it actually declared as varargs?
        Class<?> clazz = method.getDeclaringClass();
        do {
            try {
                final Method m = clazz.getMethod(mname, ptypes);
                if (m.isVarArgs()) {
                    return true;
                }
            } catch (final NoSuchMethodException xignore) {
                // this should not happen...
            }
            clazz = clazz.getSuperclass();
        } while(clazz != null);
        return false;
    }","  public void test22()  throws Throwable  {
      boolean boolean0 = MethodKey.isVarArgs((Method) null);
}"
4144,"    public String debugString() {
        final StringBuilder builder = new StringBuilder(method);
        builder.append('(');
        for (int i = 0; i < params.length; i++) {
            if (i > 0) {
                builder.append("", "");
            }
            builder.append(Void.class == params[i] ? ""null"" : params[i].getName());
        }
        builder.append(')');
        return builder.toString();
    }","  public void test23()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "",d]}9{!M>"";
      MethodKey methodKey0 = new MethodKey("",d]}9{!M>"", objectArray0);
      String string0 = methodKey0.debugString();
}"
4145,"    public String debugString() {
        final StringBuilder builder = new StringBuilder(method);
        builder.append('(');
        for (int i = 0; i < params.length; i++) {
            if (i > 0) {
                builder.append("", "");
            }
            builder.append(Void.class == params[i] ? ""null"" : params[i].getName());
        }
        builder.append(')');
        return builder.toString();
    }","  public void test24()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      MethodKey methodKey0 = new MethodKey("""", objectArray0);
      String string0 = methodKey0.debugString();
}"
4146,"    public String toString() {
        final StringBuilder builder = new StringBuilder(method);
        for (final Class<?> c : params) {
            builder.append(c == Void.class ? ""null"" : c.getName());
        }
        return builder.toString();
    }","  public void test25()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      MethodKey methodKey0 = new MethodKey(""M"", objectArray0);
      String string0 = methodKey0.toString();
}"
4147,"    public boolean equals(final Object obj) {
        if (obj instanceof MethodKey) {
            final MethodKey key = (MethodKey) obj;
            return method.equals(key.method) && Arrays.equals(params, key.params);
        }
        return false;
    }","  public void test26()  throws Throwable  {
      MethodKey methodKey0 = new MethodKey(""#("", (Object[]) null);
      MethodKey methodKey1 = new MethodKey(""$("", (Object[]) null);
      boolean boolean0 = methodKey0.equals(methodKey1);
}"
4148,"    public boolean equals(final Object obj) {
        if (obj instanceof MethodKey) {
            final MethodKey key = (MethodKey) obj;
            return method.equals(key.method) && Arrays.equals(params, key.params);
        }
        return false;
    }","  public void test27()  throws Throwable  {
      Class<Boolean>[] classArray0 = (Class<Boolean>[]) Array.newInstance(Class.class, 8);
      MethodKey methodKey0 = new MethodKey("".v]2jq&^yg,88U8"", (Class<?>[]) classArray0);
      boolean boolean0 = methodKey0.equals(methodKey0);
}"
4149,"    public boolean equals(final Object obj) {
        if (obj instanceof MethodKey) {
            final MethodKey key = (MethodKey) obj;
            return method.equals(key.method) && Arrays.equals(params, key.params);
        }
        return false;
    }","  public void test28()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      MethodKey methodKey0 = new MethodKey("""", objectArray0);
      boolean boolean0 = methodKey0.equals(""()"");
}"
4150,"    public MethodKey(final String aMethod, final Object[] args) {
        // !! keep this in sync with the other ctor (hash code) !!
        this.method = aMethod;
        int hash = this.method.hashCode();
        final int size;
        // CSOFF: InnerAssignment
        if (args != null && (size = args.length) > 0) {
            this.params = new Class<?>[size];
            for (int p = 0; p < size; ++p) {
                final Object arg = args[p];
                // null arguments use void as Void.class as marker
                final Class<?> parm = arg == null ? Void.class : arg.getClass();
                hash = (HASH * hash) + parm.hashCode();
                this.params[p] = parm;
            }
        } else {
            this.params = NOARGS;
        }
        this.hashCode = hash;
    }","  public void test29()  throws Throwable  {
      Class<Method>[] classArray0 = (Class<Method>[]) Array.newInstance(Class.class, 0);
      MethodKey methodKey0 = new MethodKey(""_SKri\""P61~"", (Class<?>[]) classArray0);
  }"
4151,"    public Constructor<?> getMostSpecificConstructor(final Constructor<?>[] methods) {
        return CONSTRUCTORS.getMostSpecific(this, methods);
    }","  public void test30()  throws Throwable  {
      Object[] objectArray0 = new Object[10];
      MethodKey methodKey0 = new MethodKey(""vax"", objectArray0);
      Constructor<Long>[] constructorArray0 = (Constructor<Long>[]) Array.newInstance(Constructor.class, 26);
      // Undeclared exception!
      try { 
        methodKey0.getMostSpecificConstructor(constructorArray0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.internal.introspection.MethodKey$2"", e);
      }
  }"
4152,"    Class<?>[] getParameters() {
        return params;
    }","  public void test31()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      MethodKey methodKey0 = new MethodKey(""M"", objectArray0);
      Class<?>[] classArray0 = methodKey0.getParameters();
}"
4153,"    public MethodKey(final String aMethod, final Object[] args) {
        // !! keep this in sync with the other ctor (hash code) !!
        this.method = aMethod;
        int hash = this.method.hashCode();
        final int size;
        // CSOFF: InnerAssignment
        if (args != null && (size = args.length) > 0) {
            this.params = new Class<?>[size];
            for (int p = 0; p < size; ++p) {
                final Object arg = args[p];
                // null arguments use void as Void.class as marker
                final Class<?> parm = arg == null ? Void.class : arg.getClass();
                hash = (HASH * hash) + parm.hashCode();
                this.params[p] = parm;
            }
        } else {
            this.params = NOARGS;
        }
        this.hashCode = hash;
    }","  public void test32()  throws Throwable  {
      MethodKey methodKey0 = null;
      try {
        methodKey0 = new MethodKey((Constructor<?>) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.internal.introspection.MethodKey"", e);
      }
  }"
4154,"    String getMethod() {
        return method;
    }","  public void test33()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      MethodKey methodKey0 = new MethodKey(""M"", objectArray0);
      String string0 = methodKey0.getMethod();
}"
4155,"    public MethodKey(final String aMethod, final Object[] args) {
        // !! keep this in sync with the other ctor (hash code) !!
        this.method = aMethod;
        int hash = this.method.hashCode();
        final int size;
        // CSOFF: InnerAssignment
        if (args != null && (size = args.length) > 0) {
            this.params = new Class<?>[size];
            for (int p = 0; p < size; ++p) {
                final Object arg = args[p];
                // null arguments use void as Void.class as marker
                final Class<?> parm = arg == null ? Void.class : arg.getClass();
                hash = (HASH * hash) + parm.hashCode();
                this.params[p] = parm;
            }
        } else {
            this.params = NOARGS;
        }
        this.hashCode = hash;
    }","  public void test34()  throws Throwable  {
      MethodKey methodKey0 = null;
      try {
        methodKey0 = new MethodKey((Method) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.internal.introspection.MethodKey"", e);
      }
  }"
4156,"    public static boolean isInvocationConvertible(final Class<?> formal,
                                                  final Class<?> actual,
                                                  final boolean possibleVarArg) {
        return isInvocationConvertible(formal, actual, false, possibleVarArg);
    }","  public void test35()  throws Throwable  {
      Class<Character> class0 = Character.class;
      Class<Annotation> class1 = Annotation.class;
      boolean boolean0 = MethodKey.isInvocationConvertible(class0, class1, false);
}"
4157,"    public int hashCode() {
        return hashCode;
    }","  public void test36()  throws Throwable  {
      Class<Character>[] classArray0 = (Class<Character>[]) Array.newInstance(Class.class, 9);
      MethodKey methodKey0 = new MethodKey(""org.apache.commons.jexl3.internal.introspection.MethodKey$Parameters"", (Class<?>[]) classArray0);
      methodKey0.hashCode();
  }"
4158,"    public static boolean isStrictInvocationConvertible(final Class<?> formal,
                                                        final Class<?> actual,
                                                        final boolean possibleVarArg) {
        return isInvocationConvertible(formal, actual, true, possibleVarArg);
    }","  public void test37()  throws Throwable  {
      Class<Character>[] classArray0 = (Class<Character>[]) Array.newInstance(Class.class, 9);
      Class<Character> class0 = Character.class;
      // Undeclared exception!
      try { 
        MethodKey.isStrictInvocationConvertible(classArray0[0], class0, false);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.internal.introspection.MethodKey"", e);
      }
  }"
4159,"    public Method getMostSpecificMethod(final Method[] methods) {
        return METHODS.getMostSpecific(this, methods);
    }","  public void test38()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      MethodKey methodKey0 = new MethodKey(""M"", objectArray0);
      Method[] methodArray0 = new Method[6];
      // Undeclared exception!
      try { 
        methodKey0.getMostSpecificMethod(methodArray0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.internal.introspection.MethodKey$1"", e);
      }
  }"
4160,"    public Constructor<?> getMostSpecificConstructor(final Constructor<?>[] methods) {
        return CONSTRUCTORS.getMostSpecific(this, methods);
    }","  public void test39()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      MethodKey methodKey0 = new MethodKey("""", objectArray0);
      Constructor<Double>[] constructorArray0 = (Constructor<Double>[]) Array.newInstance(Constructor.class, 0);
      Constructor<?> constructor0 = methodKey0.getMostSpecificConstructor(constructorArray0);
}"
4161,"    public MethodKey(final String aMethod, final Object[] args) {
        // !! keep this in sync with the other ctor (hash code) !!
        this.method = aMethod;
        int hash = this.method.hashCode();
        final int size;
        // CSOFF: InnerAssignment
        if (args != null && (size = args.length) > 0) {
            this.params = new Class<?>[size];
            for (int p = 0; p < size; ++p) {
                final Object arg = args[p];
                // null arguments use void as Void.class as marker
                final Class<?> parm = arg == null ? Void.class : arg.getClass();
                hash = (HASH * hash) + parm.hashCode();
                this.params[p] = parm;
            }
        } else {
            this.params = NOARGS;
        }
        this.hashCode = hash;
    }","  public void test40()  throws Throwable  {
      MethodKey.AmbiguousException methodKey_AmbiguousException0 = new MethodKey.AmbiguousException(false);
      boolean boolean0 = methodKey_AmbiguousException0.isSevere();
}"
4162,"    public static DuckGetExecutor discover(final Introspector is, final Class<?> clazz, final Object identifier) {
        final java.lang.reflect.Method method = is.getMethod(clazz, ""get"", makeArgs(identifier));
        return method == null? null : new DuckGetExecutor(clazz, method, identifier);
    }","  public void test0()  throws Throwable  {
      Class<String> class0 = String.class;
      // Undeclared exception!
      try { 
        DuckGetExecutor.discover((Introspector) null, class0, (Object) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.internal.introspection.DuckGetExecutor"", e);
      }
  }"
4163,"    public static DuckGetExecutor discover(final Introspector is, final Class<?> clazz, final Object identifier) {
        final java.lang.reflect.Method method = is.getMethod(clazz, ""get"", makeArgs(identifier));
        return method == null? null : new DuckGetExecutor(clazz, method, identifier);
    }","  public void test1()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Introspector introspector0 = new Introspector((Log) null, classLoader0);
      Class<Integer> class0 = Integer.class;
      // Undeclared exception!
      try { 
        DuckGetExecutor.discover(introspector0, class0, class0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.internal.introspection.ClassMap"", e);
      }
  }"
4164,"    public static DuckGetExecutor discover(final Introspector is, final Class<?> clazz, final Object identifier) {
        final java.lang.reflect.Method method = is.getMethod(clazz, ""get"", makeArgs(identifier));
        return method == null? null : new DuckGetExecutor(clazz, method, identifier);
    }","  public void test2()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Permissions permissions0 = new Permissions();
      SimpleLog simpleLog0 = new SimpleLog(""<jgc`k^>~%?"");
      Class<Annotation> class0 = Annotation.class;
      Introspector introspector0 = new Introspector(simpleLog0, classLoader0, permissions0);
      DuckGetExecutor duckGetExecutor0 = DuckGetExecutor.discover(introspector0, class0, simpleLog0);
}"
4165,"    public boolean allow(final Package pack) {
        if (pack == null || pack.getAnnotation(NoJexl.class) != null) {
            return false;
        }
        return true;
    }","  public void test0()  throws Throwable  {
      Permissions permissions0 = Permissions.DEFAULT;
      Class<Integer> class0 = Integer.class;
      boolean boolean0 = permissions0.allow(class0, true);
}"
4166,"    public boolean allow(final Package pack) {
        if (pack == null || pack.getAnnotation(NoJexl.class) != null) {
            return false;
        }
        return true;
    }","  public void test1()  throws Throwable  {
      Permissions permissions0 = Permissions.DEFAULT;
      Class<String> class0 = String.class;
      // Undeclared exception!
      try { 
        permissions0.allow(class0, (Method) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.internal.introspection.Permissions"", e);
      }
  }"
4167,"    public boolean allow(final Package pack) {
        if (pack == null || pack.getAnnotation(NoJexl.class) != null) {
            return false;
        }
        return true;
    }","  public void test2()  throws Throwable  {
      Permissions permissions0 = new Permissions();
      boolean boolean0 = permissions0.allow((Class<?>) null, (Method) null);
}"
4168,"    public boolean allow(final Package pack) {
        if (pack == null || pack.getAnnotation(NoJexl.class) != null) {
            return false;
        }
        return true;
    }","  public void test3()  throws Throwable  {
      Permissions permissions0 = Permissions.DEFAULT;
      Class<String> class0 = String.class;
      boolean boolean0 = permissions0.allow(class0, false);
}"
4169,"    public boolean allow(final Package pack) {
        if (pack == null || pack.getAnnotation(NoJexl.class) != null) {
            return false;
        }
        return true;
    }","  public void test4()  throws Throwable  {
      Permissions permissions0 = new Permissions();
      boolean boolean0 = permissions0.allow((Class<?>) null, false);
}"
4170,"    public boolean allow(final Package pack) {
        if (pack == null || pack.getAnnotation(NoJexl.class) != null) {
            return false;
        }
        return true;
    }","  public void test5()  throws Throwable  {
      Permissions permissions0 = Permissions.DEFAULT;
      boolean boolean0 = permissions0.allow((Method) null);
}"
4171,"    public boolean allow(final Package pack) {
        if (pack == null || pack.getAnnotation(NoJexl.class) != null) {
            return false;
        }
        return true;
    }","  public void test6()  throws Throwable  {
      Permissions permissions0 = new Permissions();
      boolean boolean0 = permissions0.allow((Field) null);
}"
4172,"    public boolean allow(final Package pack) {
        if (pack == null || pack.getAnnotation(NoJexl.class) != null) {
            return false;
        }
        return true;
    }","  public void test7()  throws Throwable  {
      Permissions permissions0 = Permissions.DEFAULT;
      boolean boolean0 = permissions0.allow((Constructor<?>) null);
}"
4173,"    public boolean allow(final Package pack) {
        if (pack == null || pack.getAnnotation(NoJexl.class) != null) {
            return false;
        }
        return true;
    }","  public void test8()  throws Throwable  {
      Permissions permissions0 = new Permissions();
      boolean boolean0 = permissions0.allow((Class<?>) null);
}"
4174,"    public boolean allow(final Package pack) {
        if (pack == null || pack.getAnnotation(NoJexl.class) != null) {
            return false;
        }
        return true;
    }","  public void test9()  throws Throwable  {
      Permissions permissions0 = Permissions.DEFAULT;
      Class<String> class0 = String.class;
      boolean boolean0 = permissions0.DEFAULT.allow(class0);
}"
4175,"    public boolean allow(final Package pack) {
        if (pack == null || pack.getAnnotation(NoJexl.class) != null) {
            return false;
        }
        return true;
    }","  public void test10()  throws Throwable  {
      Permissions permissions0 = new Permissions();
      boolean boolean0 = permissions0.allow((Package) null);
}"
4176,"    public static ListSetExecutor discover(final Introspector is,
                                           final Class<?> clazz,
                                           final Object identifier,
                                           final Object value) {
        final Integer index = castInteger(identifier);
        if (index != null) {
            if (clazz.isArray()) {
                // we could verify if the call can be performed but it does not change
                // the fact we would fail...
                // Class<?> formal = clazz.getComponentType();
                // Class<?> actual = value == null? Object.class : value.getClass();
                // if (IntrospectionUtils.isMethodInvocationConvertible(formal, actual, false)) {
                return new ListSetExecutor(clazz, ARRAY_SET, index);
                // }
            }
            if (List.class.isAssignableFrom(clazz)) {
                return new ListSetExecutor(clazz, LIST_SET, index);
            }
        }
        return null;
    }","  public void test0()  throws Throwable  {
      NoOpLog noOpLog0 = new NoOpLog(""0"");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Permissions permissions0 = Permissions.DEFAULT;
      Introspector introspector0 = new Introspector(noOpLog0, classLoader0, permissions0);
      Integer integer0 = new Integer((-2246));
      // Undeclared exception!
      try { 
        ListSetExecutor.discover(introspector0, (Class<?>) null, integer0, (Object) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.internal.introspection.ListSetExecutor"", e);
      }
  }"
4177,"    public static ListSetExecutor discover(final Introspector is,
                                           final Class<?> clazz,
                                           final Object identifier,
                                           final Object value) {
        final Integer index = castInteger(identifier);
        if (index != null) {
            if (clazz.isArray()) {
                // we could verify if the call can be performed but it does not change
                // the fact we would fail...
                // Class<?> formal = clazz.getComponentType();
                // Class<?> actual = value == null? Object.class : value.getClass();
                // if (IntrospectionUtils.isMethodInvocationConvertible(formal, actual, false)) {
                return new ListSetExecutor(clazz, ARRAY_SET, index);
                // }
            }
            if (List.class.isAssignableFrom(clazz)) {
                return new ListSetExecutor(clazz, LIST_SET, index);
            }
        }
        return null;
    }","  public void test1()  throws Throwable  {
      NoOpLog noOpLog0 = new NoOpLog();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Permissions permissions0 = new Permissions();
      Introspector introspector0 = new Introspector(noOpLog0, classLoader0, permissions0);
      Class<Object> class0 = Object.class;
      Integer integer0 = new Integer(15);
      ListSetExecutor listSetExecutor0 = ListSetExecutor.discover(introspector0, class0, integer0, noOpLog0);
}"
4178,"    public static ListSetExecutor discover(final Introspector is,
                                           final Class<?> clazz,
                                           final Object identifier,
                                           final Object value) {
        final Integer index = castInteger(identifier);
        if (index != null) {
            if (clazz.isArray()) {
                // we could verify if the call can be performed but it does not change
                // the fact we would fail...
                // Class<?> formal = clazz.getComponentType();
                // Class<?> actual = value == null? Object.class : value.getClass();
                // if (IntrospectionUtils.isMethodInvocationConvertible(formal, actual, false)) {
                return new ListSetExecutor(clazz, ARRAY_SET, index);
                // }
            }
            if (List.class.isAssignableFrom(clazz)) {
                return new ListSetExecutor(clazz, LIST_SET, index);
            }
        }
        return null;
    }","  public void test2()  throws Throwable  {
      NoOpLog noOpLog0 = new NoOpLog();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Permissions permissions0 = new Permissions();
      Introspector introspector0 = new Introspector(noOpLog0, classLoader0, permissions0);
      Class<Object> class0 = Object.class;
      Class<String> class1 = String.class;
      ListSetExecutor listSetExecutor0 = ListSetExecutor.discover(introspector0, class0, class1, noOpLog0);
}"
4179,"    public Object invoke(final Object o, Object... args) throws IllegalAccessException, InvocationTargetException {
        if (vaClass != null && args != null) {
            args = handleVarArg(args);
        }
        if (method.getDeclaringClass() == ArrayListWrapper.class && o.getClass().isArray()) {
            return method.invoke(new ArrayListWrapper(o), args);
        }
        return method.invoke(o, args);
    }","  public void test0()  throws Throwable  {
      NoOpLog noOpLog0 = new NoOpLog();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Introspector introspector0 = new Introspector(noOpLog0, classLoader0);
      Object[] objectArray0 = new Object[1];
      MethodExecutor methodExecutor0 = MethodExecutor.discover(introspector0, noOpLog0, ""warn"", objectArray0);
      Object object0 = methodExecutor0.invoke(noOpLog0, objectArray0);
}"
4180,"    public Object tryInvoke(final String name, final Object obj, final Object... args) {
        final MethodKey tkey = new MethodKey(name, args);
        // let's assume that invocation will fly if the declaring class is the
        // same and arguments have the same type
        if (objectClass.equals(obj.getClass()) && tkey.equals(key)) {
            try {
                return invoke(obj, args);
            } catch (IllegalAccessException | IllegalArgumentException xill) {
                return TRY_FAILED;// fail
            } catch (final InvocationTargetException xinvoke) {
                throw JexlException.tryFailed(xinvoke); // throw
            }
        }
        return JexlEngine.TRY_FAILED;
    }","  public void test1()  throws Throwable  {
      NoOpLog noOpLog0 = new NoOpLog();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Introspector introspector0 = new Introspector(noOpLog0, classLoader0);
      Object[] objectArray0 = new Object[1];
      MethodExecutor methodExecutor0 = MethodExecutor.discover(introspector0, noOpLog0, ""warn"", objectArray0);
      // Undeclared exception!
      try { 
        methodExecutor0.tryInvoke((String) null, (Object) null, objectArray0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.internal.introspection.MethodKey"", e);
      }
  }"
4181,"    public Object invoke(final Object o, Object... args) throws IllegalAccessException, InvocationTargetException {
        if (vaClass != null && args != null) {
            args = handleVarArg(args);
        }
        if (method.getDeclaringClass() == ArrayListWrapper.class && o.getClass().isArray()) {
            return method.invoke(new ArrayListWrapper(o), args);
        }
        return method.invoke(o, args);
    }","  public void test2()  throws Throwable  {
      NoOpLog noOpLog0 = new NoOpLog();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Introspector introspector0 = new Introspector(noOpLog0, classLoader0);
      Object[] objectArray0 = new Object[1];
      MethodExecutor methodExecutor0 = MethodExecutor.discover(introspector0, noOpLog0, ""warn"", objectArray0);
      // Undeclared exception!
      try { 
        methodExecutor0.invoke((Object) null, objectArray0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
      }
  }"
4182,"    public static MethodExecutor discover(final Introspector is, final Object obj, final String method, final Object[] args) {
        final Class<?> clazz = obj.getClass();
        final MethodKey key = new MethodKey(method, args);
        java.lang.reflect.Method m = is.getMethod(clazz, key);
        if (m == null && clazz.isArray()) {
            // check for support via our array->list wrapper
            m = is.getMethod(ArrayListWrapper.class, key);
        }
        if (m == null && obj instanceof Class<?>) {
            m = is.getMethod((Class<?>) obj, key);
        }
        return m == null? null : new MethodExecutor(clazz, m, key);
    }","  public void test3()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      // Undeclared exception!
      try { 
        MethodExecutor.discover((Introspector) null, (Object) null, "" i1^IM`|pl"", objectArray0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.internal.introspection.MethodExecutor"", e);
      }
  }"
4183,"    public static MethodExecutor discover(final Introspector is, final Object obj, final String method, final Object[] args) {
        final Class<?> clazz = obj.getClass();
        final MethodKey key = new MethodKey(method, args);
        java.lang.reflect.Method m = is.getMethod(clazz, key);
        if (m == null && clazz.isArray()) {
            // check for support via our array->list wrapper
            m = is.getMethod(ArrayListWrapper.class, key);
        }
        if (m == null && obj instanceof Class<?>) {
            m = is.getMethod((Class<?>) obj, key);
        }
        return m == null? null : new MethodExecutor(clazz, m, key);
    }","  public void test4()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Introspector introspector0 = new Introspector((Log) null, classLoader0);
      Integer integer0 = new Integer(0);
      Object[] objectArray0 = new Object[9];
      // Undeclared exception!
      try { 
        MethodExecutor.discover(introspector0, integer0, ""org.apache.commons.jexl3.internal.introspection.MethodExecutor"", objectArray0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.internal.introspection.ClassMap"", e);
      }
  }"
4184,"    public Object tryInvoke(final String name, final Object obj, final Object... args) {
        final MethodKey tkey = new MethodKey(name, args);
        // let's assume that invocation will fly if the declaring class is the
        // same and arguments have the same type
        if (objectClass.equals(obj.getClass()) && tkey.equals(key)) {
            try {
                return invoke(obj, args);
            } catch (IllegalAccessException | IllegalArgumentException xill) {
                return TRY_FAILED;// fail
            } catch (final InvocationTargetException xinvoke) {
                throw JexlException.tryFailed(xinvoke); // throw
            }
        }
        return JexlEngine.TRY_FAILED;
    }","  public void test5()  throws Throwable  {
      NoOpLog noOpLog0 = new NoOpLog();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Introspector introspector0 = new Introspector(noOpLog0, classLoader0);
      Object[] objectArray0 = new Object[1];
      MethodExecutor methodExecutor0 = MethodExecutor.discover(introspector0, noOpLog0, ""error"", objectArray0);
      Object object0 = methodExecutor0.tryInvoke(""error"", noOpLog0, objectArray0);
}"
4185,"    public Object invoke(final Object o, Object... args) throws IllegalAccessException, InvocationTargetException {
        if (vaClass != null && args != null) {
            args = handleVarArg(args);
        }
        if (method.getDeclaringClass() == ArrayListWrapper.class && o.getClass().isArray()) {
            return method.invoke(new ArrayListWrapper(o), args);
        }
        return method.invoke(o, args);
    }","  public void test6()  throws Throwable  {
      NoOpLog noOpLog0 = new NoOpLog();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Introspector introspector0 = new Introspector(noOpLog0, classLoader0);
      Class<Object> class0 = Object.class;
      Object[] objectArray0 = new Object[1];
      MethodExecutor methodExecutor0 = MethodExecutor.discover(introspector0, noOpLog0, ""warn"", objectArray0);
      Object object0 = methodExecutor0.tryInvoke(""warn"", class0, objectArray0);
      // Undeclared exception!
      try { 
        methodExecutor0.invoke(object0, objectArray0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
      }
  }"
4186,"    public static MethodExecutor discover(final Introspector is, final Object obj, final String method, final Object[] args) {
        final Class<?> clazz = obj.getClass();
        final MethodKey key = new MethodKey(method, args);
        java.lang.reflect.Method m = is.getMethod(clazz, key);
        if (m == null && clazz.isArray()) {
            // check for support via our array->list wrapper
            m = is.getMethod(ArrayListWrapper.class, key);
        }
        if (m == null && obj instanceof Class<?>) {
            m = is.getMethod((Class<?>) obj, key);
        }
        return m == null? null : new MethodExecutor(clazz, m, key);
    }","  public void test7()  throws Throwable  {
      NoOpLog noOpLog0 = new NoOpLog();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Introspector introspector0 = new Introspector(noOpLog0, classLoader0);
      Object[] objectArray0 = new Object[20];
      MethodExecutor methodExecutor0 = MethodExecutor.discover(introspector0, classLoader0, ""mepYa>ZUrj zn\""CEj"", objectArray0);
}"
4187,"    public static MethodExecutor discover(final Introspector is, final Object obj, final String method, final Object[] args) {
        final Class<?> clazz = obj.getClass();
        final MethodKey key = new MethodKey(method, args);
        java.lang.reflect.Method m = is.getMethod(clazz, key);
        if (m == null && clazz.isArray()) {
            // check for support via our array->list wrapper
            m = is.getMethod(ArrayListWrapper.class, key);
        }
        if (m == null && obj instanceof Class<?>) {
            m = is.getMethod((Class<?>) obj, key);
        }
        return m == null? null : new MethodExecutor(clazz, m, key);
    }","  public void test8()  throws Throwable  {
      NoOpLog noOpLog0 = new NoOpLog();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Introspector introspector0 = new Introspector(noOpLog0, classLoader0);
      Class<Object> class0 = Object.class;
      Object[] objectArray0 = new Object[20];
      MethodExecutor methodExecutor0 = MethodExecutor.discover(introspector0, class0, ""mepYa>ZUrj zn\""CEj"", objectArray0);
}"
4188,"    public Object tryInvoke(final String name, final Object obj, final Object... args) {
        final MethodKey tkey = new MethodKey(name, args);
        // let's assume that invocation will fly if the declaring class is the
        // same and arguments have the same type
        if (objectClass.equals(obj.getClass()) && tkey.equals(key)) {
            try {
                return invoke(obj, args);
            } catch (IllegalAccessException | IllegalArgumentException xill) {
                return TRY_FAILED;// fail
            } catch (final InvocationTargetException xinvoke) {
                throw JexlException.tryFailed(xinvoke); // throw
            }
        }
        return JexlEngine.TRY_FAILED;
    }","  public void test9()  throws Throwable  {
      NoOpLog noOpLog0 = new NoOpLog();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Introspector introspector0 = new Introspector(noOpLog0, classLoader0);
      Object[] objectArray0 = new Object[1];
      MethodExecutor methodExecutor0 = MethodExecutor.discover(introspector0, noOpLog0, ""warn"", objectArray0);
      Object object0 = methodExecutor0.tryInvoke("""", noOpLog0, objectArray0);
}"
4189,"    String[] getFieldNames() {
        return fieldCache.keySet().toArray(new String[fieldCache.size()]);
    }","  public void test0()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Permissions permissions0 = new Permissions();
      SimpleLog simpleLog0 = new SimpleLog(""org.apache.commons.logging.impl.SimpleLog"");
      ClassMap classMap0 = new ClassMap(class0, permissions0, simpleLog0);
      String[] stringArray0 = classMap0.getFieldNames();
}"
4190,"    Method getMethod(final MethodKey methodKey) throws MethodKey.AmbiguousException {
        // Look up by key
        Method cacheEntry = byKey.get(methodKey);
        // We looked this up before and failed.
        if (cacheEntry == CACHE_MISS) {
            return null;
        }
        if (cacheEntry == null) {
            try {
                // That one is expensive...
                final Method[] methodList = byName.get(methodKey.getMethod());
                if (methodList != null) {
                    cacheEntry = methodKey.getMostSpecificMethod(methodList);
                }
                if (cacheEntry == null) {
                    byKey.put(methodKey, CACHE_MISS);
                } else {
                    byKey.put(methodKey, cacheEntry);
                }
            } catch (final MethodKey.AmbiguousException ae) {
                // that's a miss :-)
                byKey.put(methodKey, CACHE_MISS);
                throw ae;
            }
        }

        // Yes, this might just be null.
        return cacheEntry;
    }","  public void test1()  throws Throwable  {
      Class<String> class0 = String.class;
      Permissions permissions0 = new Permissions();
      Jdk13LumberjackLogger jdk13LumberjackLogger0 = new Jdk13LumberjackLogger("""");
      ClassMap classMap0 = new ClassMap(class0, permissions0, jdk13LumberjackLogger0);
      // Undeclared exception!
      try { 
        classMap0.getMethod((MethodKey) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
4191,"    ClassMap(final Class<?> aClass, final Permissions permissions, final Log log) {
        // eagerly cache methods
        create(this, permissions, aClass, log);
        // eagerly cache public fields
        final Field[] fields = aClass.getFields();
        if (fields.length > 0) {
            final Map<String, Field> cache = new HashMap<>();
            for (final Field field : fields) {
                if (permissions.allow(field)) {
                    cache.put(field.getName(), field);
                }
            }
            fieldCache = cache;
        } else {
            fieldCache = Collections.emptyMap();
        }
    }","  public void test2()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      Permissions permissions0 = new Permissions();
      SimpleLog simpleLog0 = new SimpleLog(""notify"");
      simpleLog0.setLevel(2);
      ClassMap classMap0 = new ClassMap(class0, permissions0, simpleLog0);
  }"
4192,"    ClassMap(final Class<?> aClass, final Permissions permissions, final Log log) {
        // eagerly cache methods
        create(this, permissions, aClass, log);
        // eagerly cache public fields
        final Field[] fields = aClass.getFields();
        if (fields.length > 0) {
            final Map<String, Field> cache = new HashMap<>();
            for (final Field field : fields) {
                if (permissions.allow(field)) {
                    cache.put(field.getName(), field);
                }
            }
            fieldCache = cache;
        } else {
            fieldCache = Collections.emptyMap();
        }
    }","  public void test3()  throws Throwable  {
      Jdk14Logger jdk14Logger0 = new Jdk14Logger("""");
      ClassMap classMap0 = null;
      try {
        classMap0 = new ClassMap((Class<?>) null, (Permissions) null, jdk14Logger0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
4193,"    Method getMethod(final MethodKey methodKey) throws MethodKey.AmbiguousException {
        // Look up by key
        Method cacheEntry = byKey.get(methodKey);
        // We looked this up before and failed.
        if (cacheEntry == CACHE_MISS) {
            return null;
        }
        if (cacheEntry == null) {
            try {
                // That one is expensive...
                final Method[] methodList = byName.get(methodKey.getMethod());
                if (methodList != null) {
                    cacheEntry = methodKey.getMostSpecificMethod(methodList);
                }
                if (cacheEntry == null) {
                    byKey.put(methodKey, CACHE_MISS);
                } else {
                    byKey.put(methodKey, cacheEntry);
                }
            } catch (final MethodKey.AmbiguousException ae) {
                // that's a miss :-)
                byKey.put(methodKey, CACHE_MISS);
                throw ae;
            }
        }

        // Yes, this might just be null.
        return cacheEntry;
    }","  public void test4()  throws Throwable  {
      Class<Method> class0 = Method.class;
      Permissions permissions0 = new Permissions();
      Jdk13LumberjackLogger jdk13LumberjackLogger0 = new Jdk13LumberjackLogger(""hashCode"");
      ClassMap classMap0 = new ClassMap(class0, permissions0, jdk13LumberjackLogger0);
      Method method0 = ClassMap.cacheMiss();
      MethodKey methodKey0 = new MethodKey(method0);
      try { 
        classMap0.getMethod(methodKey0);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.internal.introspection.MethodKey$Parameters"", e);
      }
  }"
4194,"    Method getMethod(final MethodKey methodKey) throws MethodKey.AmbiguousException {
        // Look up by key
        Method cacheEntry = byKey.get(methodKey);
        // We looked this up before and failed.
        if (cacheEntry == CACHE_MISS) {
            return null;
        }
        if (cacheEntry == null) {
            try {
                // That one is expensive...
                final Method[] methodList = byName.get(methodKey.getMethod());
                if (methodList != null) {
                    cacheEntry = methodKey.getMostSpecificMethod(methodList);
                }
                if (cacheEntry == null) {
                    byKey.put(methodKey, CACHE_MISS);
                } else {
                    byKey.put(methodKey, cacheEntry);
                }
            } catch (final MethodKey.AmbiguousException ae) {
                // that's a miss :-)
                byKey.put(methodKey, CACHE_MISS);
                throw ae;
            }
        }

        // Yes, this might just be null.
        return cacheEntry;
    }","  public void test5()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Permissions permissions0 = Permissions.DEFAULT;
      NoOpLog noOpLog0 = new NoOpLog(""Unexpected InvocationTargetException"");
      ClassMap classMap0 = new ClassMap(class0, permissions0, noOpLog0);
      MethodKey methodKey0 = new MethodKey(""Unexpected InvocationTargetException"", (Object[]) null);
      classMap0.getMethod(methodKey0);
      Method method0 = classMap0.getMethod(methodKey0);
}"
4195,"    Method[] getMethods(final String methodName) {
        final Method[] lm = byName.get(methodName);
        if (lm != null && lm.length > 0) {
            return lm.clone();
        }
        return null;
    }","  public void test6()  throws Throwable  {
      Permissions permissions0 = new Permissions();
      Class<ClassMap> class0 = ClassMap.class;
      Jdk13LumberjackLogger jdk13LumberjackLogger0 = new Jdk13LumberjackLogger(""notify"");
      ClassMap classMap0 = new ClassMap(class0, permissions0, jdk13LumberjackLogger0);
      Method[] methodArray0 = classMap0.getMethods(""notify"");
}"
4196,"    Method[] getMethods(final String methodName) {
        final Method[] lm = byName.get(methodName);
        if (lm != null && lm.length > 0) {
            return lm.clone();
        }
        return null;
    }","  public void test7()  throws Throwable  {
      Class<ClassMap> class0 = ClassMap.class;
      Permissions permissions0 = Permissions.DEFAULT;
      Jdk13LumberjackLogger jdk13LumberjackLogger0 = new Jdk13LumberjackLogger(""hszR|T?/Mn"");
      ClassMap classMap0 = new ClassMap(class0, permissions0, jdk13LumberjackLogger0);
      Method[] methodArray0 = classMap0.getMethods(""hszR|T?/Mn"");
}"
4197,"    Field getField(final String fname) {
        return fieldCache.get(fname);
    }","  public void test8()  throws Throwable  {
      Permissions permissions0 = new Permissions();
      Class<ClassMap> class0 = ClassMap.class;
      Jdk13LumberjackLogger jdk13LumberjackLogger0 = new Jdk13LumberjackLogger(""notify"");
      ClassMap classMap0 = new ClassMap(class0, permissions0, jdk13LumberjackLogger0);
      Field field0 = classMap0.getField(""notify"");
}"
4198,"    String[] getMethodNames() {
        return byName.keySet().toArray(new String[byName.size()]);
    }","  public void test9()  throws Throwable  {
      Class<Method> class0 = Method.class;
      Permissions permissions0 = Permissions.DEFAULT;
      NoOpLog noOpLog0 = new NoOpLog();
      ClassMap classMap0 = new ClassMap(class0, permissions0, noOpLog0);
      String[] stringArray0 = classMap0.getMethodNames();
}"
4199,"    Method getMethod(final MethodKey methodKey) throws MethodKey.AmbiguousException {
        // Look up by key
        Method cacheEntry = byKey.get(methodKey);
        // We looked this up before and failed.
        if (cacheEntry == CACHE_MISS) {
            return null;
        }
        if (cacheEntry == null) {
            try {
                // That one is expensive...
                final Method[] methodList = byName.get(methodKey.getMethod());
                if (methodList != null) {
                    cacheEntry = methodKey.getMostSpecificMethod(methodList);
                }
                if (cacheEntry == null) {
                    byKey.put(methodKey, CACHE_MISS);
                } else {
                    byKey.put(methodKey, cacheEntry);
                }
            } catch (final MethodKey.AmbiguousException ae) {
                // that's a miss :-)
                byKey.put(methodKey, CACHE_MISS);
                throw ae;
            }
        }

        // Yes, this might just be null.
        return cacheEntry;
    }","  public void test10()  throws Throwable  {
      Permissions permissions0 = new Permissions();
      Class<ClassMap> class0 = ClassMap.class;
      Jdk13LumberjackLogger jdk13LumberjackLogger0 = new Jdk13LumberjackLogger(""notify"");
      ClassMap classMap0 = new ClassMap(class0, permissions0, jdk13LumberjackLogger0);
      String[] stringArray0 = classMap0.getFieldNames();
      MethodKey methodKey0 = new MethodKey(""notify"", stringArray0);
      Method method0 = classMap0.getMethod(methodKey0);
}"
4200,"    public static JexlPropertyGet discover(final Introspector is, final Class<?> clazz, final String identifier) {
        if (identifier != null) {
            final Field field = is.getField(clazz, identifier);
            if (field != null) {
                return new FieldGetExecutor(field);
            }
        }
        return null;
    }","  public void test0()  throws Throwable  {
      Class<Annotation> class0 = Annotation.class;
      // Undeclared exception!
      try { 
        FieldGetExecutor.discover((Introspector) null, class0, """");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.internal.introspection.FieldGetExecutor"", e);
      }
  }"
4201,"    public static JexlPropertyGet discover(final Introspector is, final Class<?> clazz, final String identifier) {
        if (identifier != null) {
            final Field field = is.getField(clazz, identifier);
            if (field != null) {
                return new FieldGetExecutor(field);
            }
        }
        return null;
    }","  public void test1()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Introspector introspector0 = new Introspector((Log) null, classLoader0);
      Class<String> class0 = String.class;
      // Undeclared exception!
      try { 
        FieldGetExecutor.discover(introspector0, class0, "":x:,'7f1,,t09F_^V"");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.internal.introspection.ClassMap"", e);
      }
  }"
4202,"    public static JexlPropertyGet discover(final Introspector is, final Class<?> clazz, final String identifier) {
        if (identifier != null) {
            final Field field = is.getField(clazz, identifier);
            if (field != null) {
                return new FieldGetExecutor(field);
            }
        }
        return null;
    }","  public void test2()  throws Throwable  {
      Jdk14Logger jdk14Logger0 = new Jdk14Logger(""5"");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Introspector introspector0 = new Introspector(jdk14Logger0, classLoader0);
      Class<Object> class0 = Object.class;
      JexlPropertyGet jexlPropertyGet0 = FieldGetExecutor.discover(introspector0, class0, ""5"");
}"
4203,"    public static JexlPropertyGet discover(final Introspector is, final Class<?> clazz, final String identifier) {
        if (identifier != null) {
            final Field field = is.getField(clazz, identifier);
            if (field != null) {
                return new FieldGetExecutor(field);
            }
        }
        return null;
    }","  public void test3()  throws Throwable  {
      Jdk14Logger jdk14Logger0 = new Jdk14Logger(""5"");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Introspector introspector0 = new Introspector(jdk14Logger0, classLoader0);
      Class<Object> class0 = Object.class;
      JexlPropertyGet jexlPropertyGet0 = FieldGetExecutor.discover(introspector0, class0, (String) null);
}"
4204,"    public static JexlPropertySet discover(final Introspector is,
                                           final Class<?> clazz,
                                           final String identifier,
                                           final Object value) {
        if (identifier != null) {
            final Field field = is.getField(clazz, identifier);
            if (field != null
                && !Modifier.isFinal(field.getModifiers())
                && (value == null || MethodKey.isInvocationConvertible(field.getType(), value.getClass(), false))) {
                return new FieldSetExecutor(field);
            }
        }
        return null;
    }","  public void test0()  throws Throwable  {
      Class<Object> class0 = Object.class;
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        FieldSetExecutor.discover((Introspector) null, class0, """", object0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.internal.introspection.FieldSetExecutor"", e);
      }
  }"
4205,"    public static JexlPropertySet discover(final Introspector is,
                                           final Class<?> clazz,
                                           final String identifier,
                                           final Object value) {
        if (identifier != null) {
            final Field field = is.getField(clazz, identifier);
            if (field != null
                && !Modifier.isFinal(field.getModifiers())
                && (value == null || MethodKey.isInvocationConvertible(field.getType(), value.getClass(), false))) {
                return new FieldSetExecutor(field);
            }
        }
        return null;
    }","  public void test1()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Permissions permissions0 = new Permissions();
      Introspector introspector0 = new Introspector((Log) null, classLoader0, permissions0);
      Class<String> class0 = String.class;
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        FieldSetExecutor.discover(introspector0, class0, ""lofMaS]RWpA%U|"", object0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.internal.introspection.ClassMap"", e);
      }
  }"
4206,"    public static JexlPropertySet discover(final Introspector is,
                                           final Class<?> clazz,
                                           final String identifier,
                                           final Object value) {
        if (identifier != null) {
            final Field field = is.getField(clazz, identifier);
            if (field != null
                && !Modifier.isFinal(field.getModifiers())
                && (value == null || MethodKey.isInvocationConvertible(field.getType(), value.getClass(), false))) {
                return new FieldSetExecutor(field);
            }
        }
        return null;
    }","  public void test2()  throws Throwable  {
      NoOpLog noOpLog0 = new NoOpLog();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Introspector introspector0 = new Introspector(noOpLog0, classLoader0);
      Class<Object> class0 = Object.class;
      JexlPropertySet jexlPropertySet0 = FieldSetExecutor.discover(introspector0, class0, ""f"", introspector0);
}"
4207,"    public static JexlPropertySet discover(final Introspector is,
                                           final Class<?> clazz,
                                           final String identifier,
                                           final Object value) {
        if (identifier != null) {
            final Field field = is.getField(clazz, identifier);
            if (field != null
                && !Modifier.isFinal(field.getModifiers())
                && (value == null || MethodKey.isInvocationConvertible(field.getType(), value.getClass(), false))) {
                return new FieldSetExecutor(field);
            }
        }
        return null;
    }","  public void test3()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Introspector introspector0 = new Introspector((Log) null, classLoader0);
      Class<Integer> class0 = Integer.class;
      JexlPropertySet jexlPropertySet0 = FieldSetExecutor.discover(introspector0, class0, (String) null, introspector0);
}"
4208,"    static java.lang.reflect.Method discoverGet(final Introspector is,
                                                final String which,
                                                final Class<?> clazz,
                                                final String property) {
        if (property == null || property.isEmpty()) {
            return null;
        }
        //  this is gross and linear, but it keeps it straightforward.
        java.lang.reflect.Method method;
        final int start = which.length(); // ""get"" or ""is"" so 3 or 2 for char case switch
        // start with get<Property>
        final StringBuilder sb = new StringBuilder(which);
        sb.append(property);
        // uppercase nth char
        final char c = sb.charAt(start);
        sb.setCharAt(start, Character.toUpperCase(c));
        method = is.getMethod(clazz, sb.toString(), EMPTY_PARAMS);
        //lowercase nth char
        if (method == null) {
            sb.setCharAt(start, Character.toLowerCase(c));
            method = is.getMethod(clazz, sb.toString(), EMPTY_PARAMS);
        }
        return method;
    }","  public void test0()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Permissions permissions0 = Permissions.DEFAULT;
      Introspector introspector0 = new Introspector((Log) null, classLoader0, permissions0);
      Class<Object> class0 = Object.class;
      Method method0 = PropertyGetExecutor.discoverGet(introspector0, ""/TEHdp"", class0, ""/TEHdp"");
}"
4209,"    static java.lang.reflect.Method discoverGet(final Introspector is,
                                                final String which,
                                                final Class<?> clazz,
                                                final String property) {
        if (property == null || property.isEmpty()) {
            return null;
        }
        //  this is gross and linear, but it keeps it straightforward.
        java.lang.reflect.Method method;
        final int start = which.length(); // ""get"" or ""is"" so 3 or 2 for char case switch
        // start with get<Property>
        final StringBuilder sb = new StringBuilder(which);
        sb.append(property);
        // uppercase nth char
        final char c = sb.charAt(start);
        sb.setCharAt(start, Character.toUpperCase(c));
        method = is.getMethod(clazz, sb.toString(), EMPTY_PARAMS);
        //lowercase nth char
        if (method == null) {
            sb.setCharAt(start, Character.toLowerCase(c));
            method = is.getMethod(clazz, sb.toString(), EMPTY_PARAMS);
        }
        return method;
    }","  public void test1()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      // Undeclared exception!
      try { 
        PropertyGetExecutor.discoverGet((Introspector) null, ""gID^p2"", class0, ""get"");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.internal.introspection.PropertyGetExecutor"", e);
      }
  }"
4210,"    static java.lang.reflect.Method discoverGet(final Introspector is,
                                                final String which,
                                                final Class<?> clazz,
                                                final String property) {
        if (property == null || property.isEmpty()) {
            return null;
        }
        //  this is gross and linear, but it keeps it straightforward.
        java.lang.reflect.Method method;
        final int start = which.length(); // ""get"" or ""is"" so 3 or 2 for char case switch
        // start with get<Property>
        final StringBuilder sb = new StringBuilder(which);
        sb.append(property);
        // uppercase nth char
        final char c = sb.charAt(start);
        sb.setCharAt(start, Character.toUpperCase(c));
        method = is.getMethod(clazz, sb.toString(), EMPTY_PARAMS);
        //lowercase nth char
        if (method == null) {
            sb.setCharAt(start, Character.toLowerCase(c));
            method = is.getMethod(clazz, sb.toString(), EMPTY_PARAMS);
        }
        return method;
    }","  public void test2()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Introspector introspector0 = new Introspector((Log) null, classLoader0);
      Class<Integer> class0 = Integer.class;
      // Undeclared exception!
      try { 
        PropertyGetExecutor.discoverGet(introspector0, ""MRXX]$kt(PG1"", class0, ""MRXX]$kt(PG1"");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.internal.introspection.ClassMap"", e);
      }
  }"
4211,"    public static PropertyGetExecutor discover(final Introspector is, final Class<?> clazz, final String property) {
        final java.lang.reflect.Method method = discoverGet(is, ""get"", clazz, property);
        return method == null? null : new PropertyGetExecutor(clazz, method, property);
    }","  public void test3()  throws Throwable  {
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        PropertyGetExecutor.discover((Introspector) null, class0, ""<6*e\""5`5XrwB!"");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.internal.introspection.PropertyGetExecutor"", e);
      }
  }"
4212,"    public static PropertyGetExecutor discover(final Introspector is, final Class<?> clazz, final String property) {
        final java.lang.reflect.Method method = discoverGet(is, ""get"", clazz, property);
        return method == null? null : new PropertyGetExecutor(clazz, method, property);
    }","  public void test4()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Permissions permissions0 = Permissions.DEFAULT;
      Class<String> class0 = String.class;
      Introspector introspector0 = new Introspector((Log) null, classLoader0, permissions0);
      // Undeclared exception!
      try { 
        PropertyGetExecutor.discover(introspector0, class0, ""E(MEX"");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.internal.introspection.ClassMap"", e);
      }
  }"
4213,"    public static PropertyGetExecutor discover(final Introspector is, final Class<?> clazz, final String property) {
        final java.lang.reflect.Method method = discoverGet(is, ""get"", clazz, property);
        return method == null? null : new PropertyGetExecutor(clazz, method, property);
    }","  public void test5()  throws Throwable  {
      SimpleLog simpleLog0 = new SimpleLog(""l"");
      Class<Object> class0 = Object.class;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Introspector introspector0 = new Introspector(simpleLog0, classLoader0);
      PropertyGetExecutor propertyGetExecutor0 = PropertyGetExecutor.discover(introspector0, class0, """");
}"
4214,"    public static PropertyGetExecutor discover(final Introspector is, final Class<?> clazz, final String property) {
        final java.lang.reflect.Method method = discoverGet(is, ""get"", clazz, property);
        return method == null? null : new PropertyGetExecutor(clazz, method, property);
    }","  public void test6()  throws Throwable  {
      NoOpLog noOpLog0 = new NoOpLog((String) null);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Introspector introspector0 = new Introspector(noOpLog0, classLoader0);
      Class<Object> class0 = Object.class;
      PropertyGetExecutor propertyGetExecutor0 = PropertyGetExecutor.discover(introspector0, class0, (String) null);
}"
4215,"    public int getVersion() {
        return version.intValue();
    }","  public void test0()  throws Throwable  {
      Jdk14Logger jdk14Logger0 = new Jdk14Logger(""ij"");
      JexlUberspect.ResolverStrategy jexlUberspect_ResolverStrategy0 = JexlUberspect.MAP_STRATEGY;
      Permissions permissions0 = new Permissions();
      Uberspect uberspect0 = new Uberspect(jdk14Logger0, jexlUberspect_ResolverStrategy0, permissions0);
      uberspect0.getPropertyGet((Object) ""ij"", (Object) jdk14Logger0);
}"
4216,"    public int getVersion() {
        return version.intValue();
    }","  public void test1()  throws Throwable  {
      SimpleLog simpleLog0 = new SimpleLog(""HB_,b!_#5jz~/;y"");
      JexlUberspect.ResolverStrategy jexlUberspect_ResolverStrategy0 = JexlUberspect.MAP_STRATEGY;
      Uberspect uberspect0 = new Uberspect(simpleLog0, jexlUberspect_ResolverStrategy0);
      uberspect0.base();
      int int0 = uberspect0.getVersion();
}"
4217,"    public int getVersion() {
        return version.intValue();
    }","  public void test2()  throws Throwable  {
      Jdk14Logger jdk14Logger0 = new Jdk14Logger(""@"");
      JexlUberspect.ResolverStrategy jexlUberspect_ResolverStrategy0 = JexlUberspect.MAP_STRATEGY;
      Uberspect uberspect0 = new Uberspect(jdk14Logger0, jexlUberspect_ResolverStrategy0);
      Class<SQLWarning> class0 = SQLWarning.class;
      uberspect0.getMethods(class0, ""@"");
}"
4218,"    public int getVersion() {
        return version.intValue();
    }","  public void test3()  throws Throwable  {
      NoOpLog noOpLog0 = new NoOpLog(""iterator"");
      JexlUberspect.ResolverStrategy jexlUberspect_ResolverStrategy0 = JexlUberspect.JEXL_STRATEGY;
      Permissions permissions0 = Permissions.DEFAULT;
      Uberspect uberspect0 = new Uberspect(noOpLog0, jexlUberspect_ResolverStrategy0, permissions0);
      Class<SQLRecoverableException> class0 = SQLRecoverableException.class;
      uberspect0.getMethods(class0, ""iterator"");
}"
4219,"    public int getVersion() {
        return version.intValue();
    }","  public void test4()  throws Throwable  {
      Jdk14Logger jdk14Logger0 = new Jdk14Logger("""");
      Uberspect uberspect0 = new Uberspect(jdk14Logger0, (JexlUberspect.ResolverStrategy) null);
      uberspect0.getMethodNames((Class<?>) null);
}"
4220,"    public int getVersion() {
        return version.intValue();
    }","  public void test5()  throws Throwable  {
      Jdk13LumberjackLogger jdk13LumberjackLogger0 = new Jdk13LumberjackLogger(""all"");
      Permissions permissions0 = new Permissions();
      Uberspect uberspect0 = new Uberspect(jdk13LumberjackLogger0, (JexlUberspect.ResolverStrategy) null, permissions0);
      Class<SQLDataException> class0 = SQLDataException.class;
      Object[] objectArray0 = new Object[9];
      MethodKey methodKey0 = new MethodKey(""all"", objectArray0);
      uberspect0.getMethod(class0, methodKey0);
}"
4221,"    public int getVersion() {
        return version.intValue();
    }","  public void test6()  throws Throwable  {
      Jdk14Logger jdk14Logger0 = new Jdk14Logger(""iterator"");
      Permissions permissions0 = new Permissions();
      Uberspect uberspect0 = new Uberspect(jdk14Logger0, (JexlUberspect.ResolverStrategy) null, permissions0);
      Class<SQLSyntaxErrorException> class0 = SQLSyntaxErrorException.class;
      Object[] objectArray0 = new Object[0];
      uberspect0.getMethod(class0, ""iterator"", objectArray0);
}"
4222,"    public int getVersion() {
        return version.intValue();
    }","  public void test7()  throws Throwable  {
      Jdk14Logger jdk14Logger0 = new Jdk14Logger(""7"");
      JexlUberspect.ResolverStrategy jexlUberspect_ResolverStrategy0 = JexlUberspect.JEXL_STRATEGY;
      Permissions permissions0 = Permissions.DEFAULT;
      Uberspect uberspect0 = new Uberspect(jdk14Logger0, jexlUberspect_ResolverStrategy0, permissions0);
      Class<SQLRecoverableException> class0 = SQLRecoverableException.class;
      uberspect0.getFieldNames(class0);
}"
4223,"    public int getVersion() {
        return version.intValue();
    }","  public void test8()  throws Throwable  {
      SimpleLog simpleLog0 = new SimpleLog(""Kh"");
      JexlUberspect.ResolverStrategy jexlUberspect_ResolverStrategy0 = JexlUberspect.MAP_STRATEGY;
      Permissions permissions0 = Permissions.DEFAULT;
      Uberspect uberspect0 = new Uberspect(simpleLog0, jexlUberspect_ResolverStrategy0, permissions0);
      Class<String> class0 = String.class;
      uberspect0.getConstructor(class0, (Object[]) null);
}"
4224,"    public int getVersion() {
        return version.intValue();
    }","  public void test9()  throws Throwable  {
      NoOpLog noOpLog0 = new NoOpLog();
      JexlUberspect.ResolverStrategy jexlUberspect_ResolverStrategy0 = JexlUberspect.MAP_STRATEGY;
      Uberspect uberspect0 = new Uberspect(noOpLog0, jexlUberspect_ResolverStrategy0);
      uberspect0.getClassByName(""org.apache.commons.jexl3.internal.Closure$1"");
}"
4225,"    public int getVersion() {
        return version.intValue();
    }","  public void test10()  throws Throwable  {
      Jdk14Logger jdk14Logger0 = new Jdk14Logger(""org.apache.commons.jexl3.internal.introspection.Uberspect$1"");
      JexlUberspect.ResolverStrategy jexlUberspect_ResolverStrategy0 = JexlUberspect.MAP_STRATEGY;
      Uberspect uberspect0 = new Uberspect(jdk14Logger0, jexlUberspect_ResolverStrategy0);
      uberspect0.getClassByName(""org.apache.commons.jexl3.internal.introspection.Uberspect$1"");
}"
4226,"    public JexlPropertySet getPropertySet(final Object obj, final Object identifier, final Object arg) {
        return getPropertySet(null, obj, identifier, arg);
    }","  public void test11()  throws Throwable  {
      SimpleLog simpleLog0 = new SimpleLog(""F5r))y"");
      JexlUberspect.ResolverStrategy jexlUberspect_ResolverStrategy0 = JexlUberspect.JEXL_STRATEGY;
      Uberspect uberspect0 = new Uberspect(simpleLog0, jexlUberspect_ResolverStrategy0);
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException("""", ""org.apache.commons.jexl3.internal.introspection.Uberspect"");
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(""org.apache.commons.jexl3.internal.introspection.Uberspect"", """", 1, sQLTimeoutException0);
      // Undeclared exception!
      try { 
        uberspect0.getPropertySet((Object) null, (Object) jexlUberspect_ResolverStrategy0, (Object) sQLFeatureNotSupportedException0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.internal.introspection.Uberspect"", e);
      }
  }"
4227,"    public JexlPropertySet getPropertySet(final Object obj, final Object identifier, final Object arg) {
        return getPropertySet(null, obj, identifier, arg);
    }","  public void test12()  throws Throwable  {
      JexlUberspect.ResolverStrategy jexlUberspect_ResolverStrategy0 = JexlUberspect.JEXL_STRATEGY;
      Permissions permissions0 = new Permissions();
      Uberspect uberspect0 = new Uberspect((Log) null, jexlUberspect_ResolverStrategy0, permissions0);
      // Undeclared exception!
      try { 
        uberspect0.getPropertySet((Object) permissions0, (Object) jexlUberspect_ResolverStrategy0, (Object) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.internal.introspection.ClassMap"", e);
      }
  }"
4228,"    public JexlPropertyGet getPropertyGet(final Object obj, final Object identifier) {
        return getPropertyGet(null, obj, identifier);
    }","  public void test13()  throws Throwable  {
      JexlUberspect.ResolverStrategy jexlUberspect_ResolverStrategy0 = JexlUberspect.JEXL_STRATEGY;
      Uberspect uberspect0 = new Uberspect((Log) null, jexlUberspect_ResolverStrategy0);
      List<JexlUberspect.PropertyResolver> list0 = JexlUberspect.MAP;
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException((Map<String, ClientInfoStatus>) null);
      DataTruncation dataTruncation0 = new DataTruncation((-3404), false, true, (-3404), (-3404), sQLClientInfoException0);
      // Undeclared exception!
      try { 
        uberspect0.getPropertyGet(list0, (Object) ""[WARN] "", (Object) dataTruncation0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.internal.introspection.ClassMap"", e);
      }
  }"
4229,"    public JexlPropertyGet getPropertyGet(final Object obj, final Object identifier) {
        return getPropertyGet(null, obj, identifier);
    }","  public void test14()  throws Throwable  {
      NoOpLog noOpLog0 = new NoOpLog(""9)L"");
      JexlUberspect.ResolverStrategy jexlUberspect_ResolverStrategy0 = JexlUberspect.MAP_STRATEGY;
      Permissions permissions0 = Permissions.DEFAULT;
      Uberspect uberspect0 = new Uberspect(noOpLog0, jexlUberspect_ResolverStrategy0, permissions0);
      Class<SQLDataException> class0 = SQLDataException.class;
      // Undeclared exception!
      try { 
        uberspect0.getPropertyGet((Object) null, (Object) class0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.internal.introspection.Uberspect"", e);
      }
  }"
4230,"    public JexlPropertyGet getPropertyGet(final Object obj, final Object identifier) {
        return getPropertyGet(null, obj, identifier);
    }","  public void test15()  throws Throwable  {
      JexlUberspect.ResolverStrategy jexlUberspect_ResolverStrategy0 = JexlUberspect.JEXL_STRATEGY;
      Uberspect uberspect0 = new Uberspect((Log) null, jexlUberspect_ResolverStrategy0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("""", """", 14);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("""", sQLIntegrityConstraintViolationException0);
      SQLDataException sQLDataException0 = new SQLDataException("""", ""org.apache.commons.jexl3.parser.JexlLexicalNode"", sQLTransientConnectionException0);
      // Undeclared exception!
      try { 
        uberspect0.getPropertyGet((Object) sQLDataException0, (Object) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.internal.introspection.ClassMap"", e);
      }
  }"
4231,"    public final String[] getMethodNames(final Class<?> c) {
        return base().getMethodNames(c);
    }","  public void test16()  throws Throwable  {
      JexlUberspect.ResolverStrategy jexlUberspect_ResolverStrategy0 = JexlUberspect.JEXL_STRATEGY;
      Uberspect uberspect0 = new Uberspect((Log) null, jexlUberspect_ResolverStrategy0);
      Class<SQLIntegrityConstraintViolationException> class0 = SQLIntegrityConstraintViolationException.class;
      // Undeclared exception!
      try { 
        uberspect0.getMethodNames(class0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.internal.introspection.ClassMap"", e);
      }
  }"
4232,"    public final Method getMethod(final Class<?> c, final String name, final Object[] params) {
        return base().getMethod(c, new MethodKey(name, params));
    }","  public void test17()  throws Throwable  {
      NoOpLog noOpLog0 = new NoOpLog(""'GyaDmSh"");
      Uberspect uberspect0 = new Uberspect(noOpLog0, (JexlUberspect.ResolverStrategy) null);
      Object[] objectArray0 = new Object[8];
      // Undeclared exception!
      try { 
        uberspect0.getMethod((Object) null, """", objectArray0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.internal.introspection.MethodExecutor"", e);
      }
  }"
4233,"    public final Method getMethod(final Class<?> c, final String name, final Object[] params) {
        return base().getMethod(c, new MethodKey(name, params));
    }","  public void test18()  throws Throwable  {
      Uberspect uberspect0 = new Uberspect((Log) null, (JexlUberspect.ResolverStrategy) null);
      SQLDataException sQLDataException0 = new SQLDataException(""&d~"", """", (-4543));
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(""&d~"", sQLDataException0);
      Object[] objectArray0 = new Object[8];
      // Undeclared exception!
      try { 
        uberspect0.getMethod((Object) sQLInvalidAuthorizationSpecException0, ""."", objectArray0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.internal.introspection.ClassMap"", e);
      }
  }"
4234,"    public final Method getMethod(final Class<?> c, final String name, final Object[] params) {
        return base().getMethod(c, new MethodKey(name, params));
    }","  public void test19()  throws Throwable  {
      Jdk13LumberjackLogger jdk13LumberjackLogger0 = new Jdk13LumberjackLogger(""org.apache.commons.jexl3.internal.introspection.Uberspect$1"");
      JexlUberspect.ResolverStrategy jexlUberspect_ResolverStrategy0 = JexlUberspect.MAP_STRATEGY;
      Uberspect uberspect0 = new Uberspect(jdk13LumberjackLogger0, jexlUberspect_ResolverStrategy0);
      Class<Integer> class0 = Integer.class;
      // Undeclared exception!
      try { 
        uberspect0.getMethod(class0, (MethodKey) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
4235,"    public final Method getMethod(final Class<?> c, final String name, final Object[] params) {
        return base().getMethod(c, new MethodKey(name, params));
    }","  public void test20()  throws Throwable  {
      NoOpLog noOpLog0 = new NoOpLog(""unable to solve iterator()"");
      JexlUberspect.ResolverStrategy jexlUberspect_ResolverStrategy0 = JexlUberspect.JEXL_STRATEGY;
      Permissions permissions0 = Permissions.DEFAULT;
      Uberspect uberspect0 = new Uberspect(noOpLog0, jexlUberspect_ResolverStrategy0, permissions0);
      Class<Integer> class0 = Integer.class;
      // Undeclared exception!
      try { 
        uberspect0.getMethod((Class<?>) class0, (String) null, (Object[]) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.internal.introspection.MethodKey"", e);
      }
  }"
4236,"    public final Method getMethod(final Class<?> c, final String name, final Object[] params) {
        return base().getMethod(c, new MethodKey(name, params));
    }","  public void test21()  throws Throwable  {
      Permissions permissions0 = Permissions.DEFAULT;
      Uberspect uberspect0 = new Uberspect((Log) null, (JexlUberspect.ResolverStrategy) null, permissions0);
      SQLDataException sQLDataException0 = new SQLDataException(""org.apache.commons.jexl3.internal.Interpreter"", ""unable to solve iterator()"");
      StackTraceElement[] stackTraceElementArray0 = sQLDataException0.getStackTrace();
      Class<JexlOperator> class0 = JexlOperator.class;
      // Undeclared exception!
      try { 
        uberspect0.getMethod((Class<?>) class0, ""org.apache.commons.jexl3.internal.Interpreter"", (Object[]) stackTraceElementArray0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.internal.introspection.ClassMap"", e);
      }
  }"
4237,"    public Iterator<?> getIterator(final Object obj) {
        if (obj instanceof Iterator<?>) {
            return ((Iterator<?>) obj);
        }
        if (obj.getClass().isArray()) {
            return new ArrayIterator(obj);
        }
        if (obj instanceof Map<?, ?>) {
            return ((Map<?, ?>) obj).values().iterator();
        }
        if (obj instanceof Enumeration<?>) {
            return new EnumerationIterator<Object>((Enumeration<Object>) obj);
        }
        if (obj instanceof Iterable<?>) {
            return ((Iterable<?>) obj).iterator();
        }
        try {
            // look for an iterator() method to support the JDK5 Iterable
            // interface or any user tools/DTOs that want to work in
            // foreach without implementing the Collection interface
            final JexlMethod it = getMethod(obj, ""iterator"", (Object[]) null);
            if (it != null && Iterator.class.isAssignableFrom(it.getReturnType())) {
                return (Iterator<Object>) it.invoke(obj, (Object[]) null);
            }
        } catch (final Exception xany) {
            if (logger != null && logger.isDebugEnabled()) {
                logger.info(""unable to solve iterator()"", xany);
            }
        }
        return null;
    }","  public void test22()  throws Throwable  {
      NoOpLog noOpLog0 = new NoOpLog("""");
      JexlUberspect.ResolverStrategy jexlUberspect_ResolverStrategy0 = JexlUberspect.MAP_STRATEGY;
      Permissions permissions0 = Permissions.DEFAULT;
      Uberspect uberspect0 = new Uberspect(noOpLog0, jexlUberspect_ResolverStrategy0, permissions0);
      // Undeclared exception!
      try { 
        uberspect0.getIterator((Object) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.internal.introspection.Uberspect"", e);
      }
  }"
4238,"    public final String[] getFieldNames(final Class<?> c) {
        return base().getFieldNames(c);
    }","  public void test23()  throws Throwable  {
      JexlUberspect.ResolverStrategy jexlUberspect_ResolverStrategy0 = JexlUberspect.MAP_STRATEGY;
      Permissions permissions0 = Permissions.DEFAULT;
      Uberspect uberspect0 = new Uberspect((Log) null, jexlUberspect_ResolverStrategy0, permissions0);
      Class<SQLIntegrityConstraintViolationException> class0 = SQLIntegrityConstraintViolationException.class;
      // Undeclared exception!
      try { 
        uberspect0.getFieldNames(class0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.internal.introspection.ClassMap"", e);
      }
  }"
4239,"    public final Field getField(final Class<?> c, final String key) {
        return base().getField(c, key);
    }","  public void test24()  throws Throwable  {
      JexlUberspect.ResolverStrategy jexlUberspect_ResolverStrategy0 = JexlUberspect.MAP_STRATEGY;
      Permissions permissions0 = new Permissions();
      Uberspect uberspect0 = new Uberspect((Log) null, jexlUberspect_ResolverStrategy0, permissions0);
      Class<SQLSyntaxErrorException> class0 = SQLSyntaxErrorException.class;
      // Undeclared exception!
      try { 
        uberspect0.getField(class0, ""org.apache.commons.jexl3.JexlEngine$EmptyNamespaceResolver"");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.internal.introspection.ClassMap"", e);
      }
  }"
4240,"    public final Class<?> getClassByName(final String className) {
        return base().getClassByName(className);
    }","  public void test25()  throws Throwable  {
      SimpleLog simpleLog0 = new SimpleLog(""org.apache.commons.jexl3.internal.introspection.Uberspect$1"");
      JexlUberspect.ResolverStrategy jexlUberspect_ResolverStrategy0 = JexlUberspect.JEXL_STRATEGY;
      Uberspect uberspect0 = new Uberspect(simpleLog0, jexlUberspect_ResolverStrategy0, (Permissions) null);
      // Undeclared exception!
      try { 
        uberspect0.getClassByName((String) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
      }
  }"
4241,"    public int getVersion() {
        return version.intValue();
    }","  public void test26()  throws Throwable  {
      Jdk14Logger jdk14Logger0 = new Jdk14Logger(""H'M_h0S^bn]Dy"");
      JexlUberspect.ResolverStrategy jexlUberspect_ResolverStrategy0 = JexlUberspect.MAP_STRATEGY;
      Uberspect uberspect0 = new Uberspect(jdk14Logger0, jexlUberspect_ResolverStrategy0);
      List<JexlUberspect.PropertyResolver> list0 = JexlUberspect.MAP;
      Integer integer0 = new Integer((-4));
      uberspect0.getPropertySet(list0, (Object) integer0, (Object) ""H'M_h0S^bn]Dy"", (Object) integer0);
}"
4242,"    public int getVersion() {
        return version.intValue();
    }","  public void test27()  throws Throwable  {
      Jdk14Logger jdk14Logger0 = new Jdk14Logger(""7"");
      JexlUberspect.ResolverStrategy jexlUberspect_ResolverStrategy0 = JexlUberspect.JEXL_STRATEGY;
      Permissions permissions0 = Permissions.DEFAULT;
      Uberspect uberspect0 = new Uberspect(jdk14Logger0, jexlUberspect_ResolverStrategy0, permissions0);
      List<JexlUberspect.PropertyResolver> list0 = JexlUberspect.POJO;
      uberspect0.getPropertySet(list0, (Object) jexlUberspect_ResolverStrategy0, (Object) jdk14Logger0, (Object) jdk14Logger0);
}"
4243,"    public JexlPropertySet getPropertySet(final Object obj, final Object identifier, final Object arg) {
        return getPropertySet(null, obj, identifier, arg);
    }","  public void test28()  throws Throwable  {
      JexlUberspect.ResolverStrategy jexlUberspect_ResolverStrategy0 = JexlUberspect.MAP_STRATEGY;
      Permissions permissions0 = new Permissions();
      Uberspect uberspect0 = new Uberspect((Log) null, jexlUberspect_ResolverStrategy0, permissions0);
      Introspector introspector0 = uberspect0.base();
      SQLTransientException sQLTransientException0 = new SQLTransientException();
      SQLWarning sQLWarning0 = new SQLWarning(sQLTransientException0);
      // Undeclared exception!
      try { 
        uberspect0.getPropertySet((List<JexlUberspect.PropertyResolver>) null, (Object) sQLTransientException0, (Object) introspector0, (Object) sQLWarning0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.internal.introspection.ClassMap"", e);
      }
  }"
4244,"    public int getVersion() {
        return version.intValue();
    }","  public void test29()  throws Throwable  {
      SimpleLog simpleLog0 = new SimpleLog(""?(a-_&v"");
      JexlUberspect.ResolverStrategy jexlUberspect_ResolverStrategy0 = JexlUberspect.JEXL_STRATEGY;
      Uberspect uberspect0 = new Uberspect(simpleLog0, jexlUberspect_ResolverStrategy0);
      JexlSandbox jexlSandbox0 = new JexlSandbox();
      uberspect0.getPropertyGet((List<JexlUberspect.PropertyResolver>) null, (Object) jexlSandbox0, (Object) ""~ error"");
}"
4245,"    public int getVersion() {
        return version.intValue();
    }","  public void test30()  throws Throwable  {
      NoOpLog noOpLog0 = new NoOpLog("""");
      JexlUberspect.ResolverStrategy jexlUberspect_ResolverStrategy0 = JexlUberspect.MAP_STRATEGY;
      Permissions permissions0 = Permissions.DEFAULT;
      Uberspect uberspect0 = new Uberspect(noOpLog0, jexlUberspect_ResolverStrategy0, permissions0);
      Class<Object> class0 = Object.class;
      uberspect0.getField(class0, """");
      uberspect0.getIterator("""");
}"
4246,"    public int getVersion() {
        return version.intValue();
    }","  public void test31()  throws Throwable  {
      NoOpLog noOpLog0 = new NoOpLog("""");
      JexlUberspect.ResolverStrategy jexlUberspect_ResolverStrategy0 = JexlUberspect.MAP_STRATEGY;
      Permissions permissions0 = Permissions.DEFAULT;
      Uberspect uberspect0 = new Uberspect(noOpLog0, jexlUberspect_ResolverStrategy0, permissions0);
      JexlOperator jexlOperator0 = JexlOperator.SELF_MULTIPLY;
      uberspect0.getResolvers(jexlOperator0, jexlOperator0);
}"
4247,"    public int getVersion() {
        return version.intValue();
    }","  public void test32()  throws Throwable  {
      Jdk14Logger jdk14Logger0 = new Jdk14Logger("""");
      Uberspect uberspect0 = new Uberspect(jdk14Logger0, (JexlUberspect.ResolverStrategy) null);
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(false);
      uberspect0.getArithmetic(jexlArithmetic0);
      uberspect0.getArithmetic(jexlArithmetic0);
}"
4248,"    public int getVersion() {
        return version.intValue();
    }","  public void test33()  throws Throwable  {
      NoOpLog noOpLog0 = new NoOpLog(""4e'|`88Qv7"");
      JexlUberspect.ResolverStrategy jexlUberspect_ResolverStrategy0 = JexlUberspect.JEXL_STRATEGY;
      Permissions permissions0 = Permissions.DEFAULT;
      Uberspect uberspect0 = new Uberspect(noOpLog0, jexlUberspect_ResolverStrategy0, permissions0);
      uberspect0.getArithmetic((JexlArithmetic) null);
}"
4249,"    public JexlArithmetic.Uberspect getArithmetic(final JexlArithmetic arithmetic) {
        JexlArithmetic.Uberspect jau = null;
        if (arithmetic != null) {
            final Class<? extends JexlArithmetic> aclass = arithmetic.getClass();
            Set<JexlOperator> ops = operatorMap.get(aclass);
            if (ops == null) {
                ops = EnumSet.noneOf(JexlOperator.class);
                // deal only with derived classes
                if (!JexlArithmetic.class.equals(aclass)) {
                    for (final JexlOperator op : JexlOperator.values()) {
                        final Method[] methods = getMethods(arithmetic.getClass(), op.getMethodName());
                        if (methods != null) {
                            mloop:
                            for (final Method method : methods) {
                                final Class<?>[] parms = method.getParameterTypes();
                                if (parms.length != op.getArity()) {
                                    continue;
                                }
                                // filter method that is an actual overload:
                                // - not inherited (not declared by base class)
                                // - nor overridden (not present in base class)
                                if (!JexlArithmetic.class.equals(method.getDeclaringClass())) {
                                    try {
                                        JexlArithmetic.class.getMethod(method.getName(), method.getParameterTypes());
                                    } catch (final NoSuchMethodException xmethod) {
                                        // method was not found in JexlArithmetic; this is an operator definition
                                        ops.add(op);
                                    }
                                }
                            }
                        }
                    }
                }
                // register this arithmetic class in the operator map
                operatorMap.put(aclass, ops);
            }
            jau = new ArithmeticUberspect(arithmetic, ops);
        }
        return jau;
    }","  public void test34()  throws Throwable  {
      NoOpLog noOpLog0 = new NoOpLog("""");
      JexlUberspect.ResolverStrategy jexlUberspect_ResolverStrategy0 = JexlUberspect.JEXL_STRATEGY;
      Permissions permissions0 = Permissions.DEFAULT;
      Uberspect uberspect0 = new Uberspect(noOpLog0, jexlUberspect_ResolverStrategy0, permissions0);
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true);
      JexlArithmetic.Uberspect jexlArithmetic_Uberspect0 = uberspect0.getArithmetic(jexlArithmetic0);
      JexlOperator jexlOperator0 = JexlOperator.GTE;
      boolean boolean0 = jexlArithmetic_Uberspect0.overloads(jexlOperator0);
}"
4250,"    public int getVersion() {
        return version.intValue();
    }","  public void test35()  throws Throwable  {
      NoOpLog noOpLog0 = new NoOpLog("""");
      JexlUberspect.ResolverStrategy jexlUberspect_ResolverStrategy0 = JexlUberspect.JEXL_STRATEGY;
      Permissions permissions0 = Permissions.DEFAULT;
      Uberspect uberspect0 = new Uberspect(noOpLog0, jexlUberspect_ResolverStrategy0, permissions0);
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true);
      JexlArithmetic.Uberspect jexlArithmetic_Uberspect0 = uberspect0.getArithmetic(jexlArithmetic0);
      JexlOperator jexlOperator0 = JexlOperator.GTE;
      boolean boolean0 = jexlArithmetic_Uberspect0.overloads(jexlOperator0);
}"
4251,"    public int getVersion() {
        return version.intValue();
    }","  public void test36()  throws Throwable  {
      NoOpLog noOpLog0 = new NoOpLog("""");
      JexlUberspect.ResolverStrategy jexlUberspect_ResolverStrategy0 = JexlUberspect.JEXL_STRATEGY;
      Permissions permissions0 = Permissions.DEFAULT;
      Uberspect uberspect0 = new Uberspect(noOpLog0, jexlUberspect_ResolverStrategy0, permissions0);
      Class<String> class0 = String.class;
      String[] stringArray0 = uberspect0.getFieldNames(class0);
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true);
      JexlArithmetic.Uberspect jexlArithmetic_Uberspect0 = uberspect0.getArithmetic(jexlArithmetic0);
      JexlOperator jexlOperator0 = JexlOperator.GTE;
      jexlArithmetic_Uberspect0.getOperator(jexlOperator0, stringArray0);
}"
4252,"    public int getVersion() {
        return version.intValue();
    }","  public void test37()  throws Throwable  {
      JexlUberspect.ResolverStrategy jexlUberspect_ResolverStrategy0 = JexlUberspect.JEXL_STRATEGY;
      Uberspect uberspect0 = new Uberspect((Log) null, jexlUberspect_ResolverStrategy0);
      uberspect0.getIterator("""");
}"
4253,"    public int getVersion() {
        return version.intValue();
    }","  public void test38()  throws Throwable  {
      Class<SQLDataException> class0 = SQLDataException.class;
      NoOpLog noOpLog0 = new NoOpLog();
      Uberspect uberspect0 = new Uberspect(noOpLog0, (JexlUberspect.ResolverStrategy) null);
      uberspect0.getIterator(class0);
}"
4254,"    public int getVersion() {
        return version.intValue();
    }","  public void test39()  throws Throwable  {
      SimpleLog simpleLog0 = new SimpleLog(""HB_,b!_#5jz~/;y"");
      JexlUberspect.ResolverStrategy jexlUberspect_ResolverStrategy0 = JexlUberspect.JEXL_STRATEGY;
      Uberspect uberspect0 = new Uberspect(simpleLog0, jexlUberspect_ResolverStrategy0);
      StringTokenizer stringTokenizer0 = new StringTokenizer(""HB_,b!_#5jz~/;y"");
      Iterator<?> iterator0 = uberspect0.getIterator(stringTokenizer0);
      uberspect0.getIterator(iterator0);
}"
4255,"    public int getVersion() {
        return version.intValue();
    }","  public void test40()  throws Throwable  {
      Jdk14Logger jdk14Logger0 = new Jdk14Logger(""7"");
      JexlUberspect.ResolverStrategy jexlUberspect_ResolverStrategy0 = JexlUberspect.JEXL_STRATEGY;
      Permissions permissions0 = Permissions.DEFAULT;
      Uberspect uberspect0 = new Uberspect(jdk14Logger0, jexlUberspect_ResolverStrategy0, permissions0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(""7"", ""7"");
      uberspect0.getIterator(sQLTransactionRollbackException0);
}"
4256,"    public int getVersion() {
        return version.intValue();
    }","  public void test41()  throws Throwable  {
      NoOpLog noOpLog0 = new NoOpLog(""false"");
      JexlUberspect.ResolverStrategy jexlUberspect_ResolverStrategy0 = JexlUberspect.JEXL_STRATEGY;
      Permissions permissions0 = Permissions.DEFAULT;
      Uberspect uberspect0 = new Uberspect(noOpLog0, jexlUberspect_ResolverStrategy0, permissions0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(""false"", ""false"");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(""false"", ""false"", (-4), sQLTimeoutException0);
      uberspect0.getPropertySet((Object) classLoader0, (Object) ""false"", (Object) sQLNonTransientConnectionException0);
}"
4257,"    public int getVersion() {
        return version.intValue();
    }","  public void test42()  throws Throwable  {
      Jdk14Logger jdk14Logger0 = new Jdk14Logger(""@"");
      JexlUberspect.ResolverStrategy jexlUberspect_ResolverStrategy0 = JexlUberspect.MAP_STRATEGY;
      Uberspect uberspect0 = new Uberspect(jdk14Logger0, jexlUberspect_ResolverStrategy0);
      List<JexlUberspect.PropertyResolver> list0 = JexlUberspect.MAP;
      Integer integer0 = new Integer((-1507));
      uberspect0.getPropertySet(list0, (Object) list0, (Object) integer0, (Object) jexlUberspect_ResolverStrategy0);
}"
4258,"    public JexlPropertySet getPropertySet(final Object obj, final Object identifier, final Object arg) {
        return getPropertySet(null, obj, identifier, arg);
    }","  public void test43()  throws Throwable  {
      Jdk14Logger jdk14Logger0 = new Jdk14Logger(""oeo/}"");
      JexlUberspect.ResolverStrategy jexlUberspect_ResolverStrategy0 = JexlUberspect.MAP_STRATEGY;
      Uberspect uberspect0 = new Uberspect(jdk14Logger0, jexlUberspect_ResolverStrategy0);
      Vector<JexlUberspect.PropertyResolver> vector0 = new Vector<JexlUberspect.PropertyResolver>();
      vector0.add((JexlUberspect.PropertyResolver) null);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      // Undeclared exception!
      try { 
        uberspect0.getPropertySet((List<JexlUberspect.PropertyResolver>) vector0, (Object) jdk14Logger0, (Object) vector0, (Object) sQLNonTransientConnectionException0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.internal.introspection.Uberspect"", e);
      }
  }"
4259,"    public int getVersion() {
        return version.intValue();
    }","  public void test44()  throws Throwable  {
      NoOpLog noOpLog0 = new NoOpLog("">dL~HJJ/$"");
      JexlUberspect.ResolverStrategy jexlUberspect_ResolverStrategy0 = JexlUberspect.JEXL_STRATEGY;
      Uberspect uberspect0 = new Uberspect(noOpLog0, jexlUberspect_ResolverStrategy0);
      ClassLoader classLoader0 = uberspect0.getClassLoader();
      JexlArithmetic jexlArithmetic0 = new JexlArithmetic(true);
      int[] intArray0 = new int[2];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(""g:7H/Eqx"", intArray0);
      Vector<JexlUberspect.PropertyResolver> vector0 = new Vector<JexlUberspect.PropertyResolver>();
      uberspect0.getPropertySet((List<JexlUberspect.PropertyResolver>) vector0, (Object) jexlArithmetic0, (Object) batchUpdateException0, (Object) classLoader0);
}"
4260,"    public JexlPropertyGet getPropertyGet(final Object obj, final Object identifier) {
        return getPropertyGet(null, obj, identifier);
    }","  public void test45()  throws Throwable  {
      Jdk14Logger jdk14Logger0 = new Jdk14Logger(""oeo/}"");
      JexlUberspect.ResolverStrategy jexlUberspect_ResolverStrategy0 = JexlUberspect.MAP_STRATEGY;
      Uberspect uberspect0 = new Uberspect(jdk14Logger0, jexlUberspect_ResolverStrategy0);
      Class<DataTruncation> class0 = DataTruncation.class;
      Vector<JexlUberspect.PropertyResolver> vector0 = new Vector<JexlUberspect.PropertyResolver>();
      vector0.add((JexlUberspect.PropertyResolver) null);
      // Undeclared exception!
      try { 
        uberspect0.getPropertyGet((List<JexlUberspect.PropertyResolver>) vector0, (Object) class0, (Object) uberspect0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.internal.introspection.Uberspect"", e);
      }
  }"
4261,"    public int getVersion() {
        return version.intValue();
    }","  public void test46()  throws Throwable  {
      NoOpLog noOpLog0 = new NoOpLog("""");
      JexlUberspect.ResolverStrategy jexlUberspect_ResolverStrategy0 = JexlUberspect.JEXL_STRATEGY;
      Permissions permissions0 = Permissions.DEFAULT;
      Class<SQLSyntaxErrorException> class0 = SQLSyntaxErrorException.class;
      Uberspect uberspect0 = new Uberspect(noOpLog0, jexlUberspect_ResolverStrategy0, permissions0);
      Vector<JexlUberspect.PropertyResolver> vector0 = new Vector<JexlUberspect.PropertyResolver>();
      uberspect0.getPropertyGet((List<JexlUberspect.PropertyResolver>) vector0, (Object) class0, (Object) """");
}"
4262,"    public int getVersion() {
        return version.intValue();
    }","  public void test47()  throws Throwable  {
      NoOpLog noOpLog0 = new NoOpLog();
      JexlUberspect.ResolverStrategy jexlUberspect_ResolverStrategy0 = JexlUberspect.MAP_STRATEGY;
      Uberspect uberspect0 = new Uberspect(noOpLog0, jexlUberspect_ResolverStrategy0);
      ClassLoader classLoader0 = uberspect0.getClassLoader();
      Object[] objectArray0 = new Object[2];
      uberspect0.getConstructor(noOpLog0, objectArray0);
      uberspect0.setClassLoader(classLoader0);
}"
4263,"    public int getVersion() {
        return version.intValue();
    }","  public void test48()  throws Throwable  {
      Jdk14Logger jdk14Logger0 = new Jdk14Logger("""");
      Uberspect uberspect0 = new Uberspect(jdk14Logger0, (JexlUberspect.ResolverStrategy) null);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      uberspect0.setClassLoader(classLoader0);
}"
4264,"    public int getVersion() {
        return version.intValue();
    }","  public void test49()  throws Throwable  {
      NoOpLog noOpLog0 = new NoOpLog("""");
      JexlUberspect.ResolverStrategy jexlUberspect_ResolverStrategy0 = JexlUberspect.JEXL_STRATEGY;
      Permissions permissions0 = Permissions.DEFAULT;
      Uberspect uberspect0 = new Uberspect(noOpLog0, jexlUberspect_ResolverStrategy0, permissions0);
      Class<String> class0 = String.class;
      uberspect0.getFieldNames(class0);
      uberspect0.getPropertyGet((List<JexlUberspect.PropertyResolver>) null, (Object) class0, (Object) null);
}"
4265,"    public int getVersion() {
        return version.intValue();
    }","  public void test50()  throws Throwable  {
      SimpleLog simpleLog0 = new SimpleLog(""F5r))y"");
      JexlUberspect.ResolverStrategy jexlUberspect_ResolverStrategy0 = JexlUberspect.JEXL_STRATEGY;
      Uberspect uberspect0 = new Uberspect(simpleLog0, jexlUberspect_ResolverStrategy0);
      Object[] objectArray0 = new Object[2];
      uberspect0.getMethod((Object) """", ""6kj0+R2'8Q"", objectArray0);
}"
4266,"    public int getVersion() {
        return version.intValue();
    }","  public void test51()  throws Throwable  {
      Jdk14Logger jdk14Logger0 = new Jdk14Logger(""Y!#j6g8f]W= FUbd"");
      JexlUberspect.ResolverStrategy jexlUberspect_ResolverStrategy0 = JexlUberspect.MAP_STRATEGY;
      Uberspect uberspect0 = new Uberspect(jdk14Logger0, jexlUberspect_ResolverStrategy0, (Permissions) null);
      int int0 = uberspect0.getVersion();
}"
4267,"    public final Method[] getMethods(final Class<?> c, final String methodName) {
        return base().getMethods(c, methodName);
    }","  public void test52()  throws Throwable  {
      JexlUberspect.ResolverStrategy jexlUberspect_ResolverStrategy0 = JexlUberspect.MAP_STRATEGY;
      Uberspect uberspect0 = new Uberspect((Log) null, jexlUberspect_ResolverStrategy0);
      Class<SQLWarning> class0 = SQLWarning.class;
      // Undeclared exception!
      try { 
        uberspect0.getMethods(class0, ""org.apache.commons.jexl3.internal.InterpreterBase"");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jexl3.internal.introspection.ClassMap"", e);
      }
  }"
4268,"    public int getVersion() {
        return version.intValue();
    }","  public void test53()  throws Throwable  {
      NoOpLog noOpLog0 = new NoOpLog("""");
      JexlUberspect.ResolverStrategy jexlUberspect_ResolverStrategy0 = JexlUberspect.JEXL_STRATEGY;
      Permissions permissions0 = Permissions.DEFAULT;
      Uberspect uberspect0 = new Uberspect(noOpLog0, jexlUberspect_ResolverStrategy0, permissions0);
      Class<SQLException> class0 = SQLException.class;
      uberspect0.getMethodNames(class0);
}"
4269,"    public int getVersion() {
        return version.intValue();
    }","  public void test54()  throws Throwable  {
      NoOpLog noOpLog0 = new NoOpLog("""");
      JexlUberspect.ResolverStrategy jexlUberspect_ResolverStrategy0 = JexlUberspect.JEXL_STRATEGY;
      Permissions permissions0 = Permissions.DEFAULT;
      Uberspect uberspect0 = new Uberspect(noOpLog0, jexlUberspect_ResolverStrategy0, permissions0);
      Class<SQLTransientException> class0 = SQLTransientException.class;
      uberspect0.getPropertyGet((Object) class0, (Object) """");
}"
4270,"    public final Method getMethod(final Class<?> c, final String name, final Object[] params) {
        return base().getMethod(c, new MethodKey(name, params));
    }","  public void test55()  throws Throwable  {
      Jdk14Logger jdk14Logger0 = new Jdk14Logger(""Y!#j6g8f]W= FUbd"");
      JexlUberspect.ResolverStrategy jexlUberspect_ResolverStrategy0 = JexlUberspect.MAP_STRATEGY;
      Uberspect uberspect0 = new Uberspect(jdk14Logger0, jexlUberspect_ResolverStrategy0, (Permissions) null);
      Object[] objectArray0 = new Object[7];
      MethodKey methodKey0 = new MethodKey(""V+dY!Xm"", objectArray0);
      // Undeclared exception!
      try { 
        uberspect0.getMethod((Class<?>) null, methodKey0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.evosuite.runtime.util.ReflectionUtils"", e);
      }
  }"
4271,"    public int getVersion() {
        return version.intValue();
    }","  public void test56()  throws Throwable  {
      Jdk14Logger jdk14Logger0 = new Jdk14Logger(""Y!#j6g8f]W= FUbd"");
      JexlUberspect.ResolverStrategy jexlUberspect_ResolverStrategy0 = JexlUberspect.MAP_STRATEGY;
      Uberspect uberspect0 = new Uberspect(jdk14Logger0, jexlUberspect_ResolverStrategy0, (Permissions) null);
      uberspect0.getClassByName(""V+dY!Xm"");
}"
4272,"    public int getVersion() {
        return version.intValue();
    }","  public void test57()  throws Throwable  {
      Jdk14Logger jdk14Logger0 = new Jdk14Logger(""oeo/}"");
      JexlUberspect.ResolverStrategy jexlUberspect_ResolverStrategy0 = JexlUberspect.MAP_STRATEGY;
      Uberspect uberspect0 = new Uberspect(jdk14Logger0, jexlUberspect_ResolverStrategy0);
      Class<DataTruncation> class0 = DataTruncation.class;
      Object[] objectArray0 = new Object[5];
      uberspect0.getMethod(class0, ""oeo/}"", objectArray0);
}"
4273,"    public int getVersion() {
        return version.intValue();
    }","  public void test58()  throws Throwable  {
      NoOpLog noOpLog0 = new NoOpLog();
      JexlUberspect.ResolverStrategy jexlUberspect_ResolverStrategy0 = JexlUberspect.JEXL_STRATEGY;
      Uberspect uberspect0 = new Uberspect(noOpLog0, jexlUberspect_ResolverStrategy0);
      JexlSandbox jexlSandbox0 = new JexlSandbox(false);
      SandboxUberspect sandboxUberspect0 = new SandboxUberspect(uberspect0, jexlSandbox0);
      JexlOperator jexlOperator0 = JexlOperator.ENDSWITH;
      int[] intArray0 = new int[0];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(""?"", intArray0);
      List<JexlUberspect.PropertyResolver> list0 = sandboxUberspect0.getResolvers(jexlOperator0, batchUpdateException0);
      Integer integer0 = Integer.valueOf((-832));
      uberspect0.getPropertyGet(list0, (Object) batchUpdateException0, (Object) integer0);
}"
4274,"    public int getVersion() {
        return version.intValue();
    }","  public void test59()  throws Throwable  {
      NoOpLog noOpLog0 = new NoOpLog();
      JexlUberspect.ResolverStrategy jexlUberspect_ResolverStrategy0 = JexlUberspect.JEXL_STRATEGY;
      Uberspect uberspect0 = new Uberspect(noOpLog0, jexlUberspect_ResolverStrategy0);
      JexlSandbox jexlSandbox0 = new JexlSandbox(false);
      SandboxUberspect sandboxUberspect0 = new SandboxUberspect(uberspect0, jexlSandbox0);
      JexlOperator jexlOperator0 = JexlOperator.ENDSWITH;
      int[] intArray0 = new int[0];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(""?"", intArray0);
      List<JexlUberspect.PropertyResolver> list0 = sandboxUberspect0.getResolvers(jexlOperator0, batchUpdateException0);
      Integer integer0 = Integer.valueOf((-832));
      uberspect0.getPropertyGet(list0, (Object) batchUpdateException0, (Object) integer0);
}"
