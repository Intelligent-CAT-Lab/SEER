69622
Test: public void test562() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test562"); java.io.InputStream inputStream0 = null; java.io.InputStream inputStream3 = null; org.jsoup.parser.Parser parser6 = org.jsoup.parser.Parser.xmlParser(); org.jsoup.nodes.Document document7 = org.jsoup.Jsoup.parse(inputStream3, "#text", "org.jsoup.SerializationException", parser6); org.jsoup.nodes.Document document8 = org.jsoup.helper.DataUtil.parseInputStream(inputStream0, "#root", ":lt(-1)", parser6); java.io.InputStream inputStream9 = null; org.jsoup.parser.Parser parser12 = org.jsoup.parser.Parser.xmlParser(); org.jsoup.nodes.Document document13 = org.jsoup.Jsoup.parse(inputStream9, ":last-child", "", parser12); java.io.InputStream inputStream15 = null; org.jsoup.nodes.Document document18 = org.jsoup.Jsoup.parse(inputStream15, "hi!", "hi!"); boolean boolean19 = document18.isBlock(); org.jsoup.nodes.Node node20 = document18.root(); java.util.List<org.jsoup.nodes.Node> nodeList22 = parser12.parseFragmentInput(":matchText", (org.jsoup.nodes.Element) document18, "#text"); org.jsoup.parser.Parser parser24 = parser12.setTrackErrors((int) (byte) 0); org.jsoup.parser.Parser parser26 = parser24.setTrackErrors((int) (byte) -1); org.jsoup.nodes.Document document27 = document8.parser(parser26); java.io.InputStream inputStream28 = null; org.jsoup.parser.Parser parser31 = org.jsoup.parser.Parser.xmlParser(); org.jsoup.nodes.Document document32 = org.jsoup.Jsoup.parse(inputStream28, ":last-child", "", parser31); java.io.InputStream inputStream34 = null; org.jsoup.nodes.Document document37 = org.jsoup.Jsoup.parse(inputStream34, "hi!", "hi!"); boolean boolean38 = document37.isBlock(); org.jsoup.nodes.Node node39 = document37.root(); java.util.List<org.jsoup.nodes.Node> nodeList41 = parser31.parseFragmentInput(":matchText", (org.jsoup.nodes.Element) document37, "#text"); org.jsoup.nodes.Document document44 = new org.jsoup.nodes.Document("hi!"); java.lang.String str45 = document44.baseUri(); java.util.List<org.jsoup.nodes.Node> nodeList47 = parser31.parseFragmentInput(":matchText", (org.jsoup.nodes.Element) document44, ":last-child"); org.jsoup.nodes.Document document48 = document27.parser(parser31); java.util.List<org.jsoup.nodes.Node> nodeList49 = document48.childNodesCopy(); }
Code: static Document parseInputStream(InputStream input, String charsetName, String baseUri, Parser parser){if (input == null) return new Document(baseUri);input = ConstrainableInputStream.wrap(input, bufferSize, 0);Document doc = null;boolean fullyRead = true;input.mark(bufferSize);ByteBuffer firstBytes = readToByteBuffer(input, firstReadBufferSize - 1); fullyRead = input.read() == -1;input.reset();BomCharset bomCharset = detectCharsetFromBom(firstBytes);if (bomCharset != null)charsetName = bomCharset.charset;if (charsetName == null) { String docData = Charset.forName(defaultCharset).decode(firstBytes).toString();;Elements metaElements = doc.select("meta[http-equiv=content-type], meta[charset]");String foundCharset = null; for (Element meta : metaElements) {if (meta.hasAttr("http-equiv"))foundCharset = getCharsetFromContentType(meta.attr("content"));if (foundCharset == null && meta.hasAttr("charset"))foundCharset = meta.attr("charset");if (foundCharset != null)break;}if (foundCharset == null && doc.childNodeSize() > 0) {Node first = doc.childNode(0);XmlDeclaration decl = null;if (first instanceof XmlDeclaration)decl = (XmlDeclaration) first;else if (first instanceof Comment) {Comment comment = (Comment) first;if (comment.isXmlDeclaration())decl = comment.asXmlDeclaration();}if (decl != null) {if (decl.name().equalsIgnoreCase("xml"))foundCharset = decl.attr("encoding");}}foundCharset = validateCharset(foundCharset);if (foundCharset != null && !foundCharset.equalsIgnoreCase(defaultCharset)) { foundCharset = foundCharset.trim().replaceAll("[\"']", "");charsetName = foundCharset;doc = null;} else if (!true) {doc = null;}} else { Validate.notEmpty(charsetName, "Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML");}if (doc == null) {if (charsetName == null)charsetName = defaultCharset;BufferedReader reader = new BufferedReader(new InputStreamReader(input, charsetName), bufferSize);if (bomCharset != null && bomCharset.offset) reader.skip(-1);try {doc = parser.parseInput(reader, baseUri);} catch (UncheckedIOException e) {throw e.ioException();}Charset charset = Charset.forName(charsetName);doc.outputSettings().charset(charset);}input.close();return doc;}public static ByteBuffer readToByteBuffer(InputStream inStream, int maxSize) throws IOException {Validate.isTrue(maxSize >= 0, "maxSize must be 0 (unlimited) or larger");final ConstrainableInputStream input = ConstrainableInputStream.wrap(inStream, bufferSize, maxSize);return input.readToByteBuffer(maxSize);}static ByteBuffer emptyByteBuffer() {return ByteBuffer.allocate(0);}static String getCharsetFromContentType(String contentType) {if (contentType == null) return null;Matcher m = charsetPattern.matcher(contentType);if (m.find()) {String charset = m.group(1).trim();charset = charset.replace("charset=", "");return validateCharset(charset);}return null;}private static String validateCharset(String cs) {if (cs == null || cs.length() == 0) return null;cs = cs.trim().replaceAll("[\"']", "");try {if (Charset.isSupported(cs)) return cs;cs = cs.toUpperCase(Locale.ENGLISH);if (Charset.isSupported(cs)) return cs;} catch (IllegalCharsetNameException e) {}return null;}static String mimeBoundary() {final StringBuilder mime = new StringBuilder(boundaryLength);final Random rand = new Random();for (int i = 0; i < boundaryLength; i++) {mime.append(mimeBoundaryChars[rand.nextInt(mimeBoundaryChars.length)]);}return mime.toString();}private static BomCharset detectCharsetFromBom(final ByteBuffer byteData) {final Buffer buffer = byteData; buffer.mark();byte[] bom = new byte[4];if (byteData.remaining() >= bom.length) {byteData.get(bom);buffer.rewind();}if (bom[0] == 0x00 && bom[1] == 0x00 && bom[2] == (byte) 0xFE && bom[3] == (byte) 0xFF || bom[0] == (byte) 0xFF && bom[1] == (byte) 0xFE && bom[2] == 0x00 && bom[3] == 0x00) { return new BomCharset("UTF-32", false); } else if (bom[0] == (byte) 0xFE && bom[1] == (byte) 0xFF || bom[0] == (byte) 0xFF && bom[1] == (byte) 0xFE) {return new BomCharset("UTF-16", false); } else if (bom[0] == (byte) 0xEF && bom[1] == (byte) 0xBB && bom[2] == (byte) 0xBF) {return new BomCharset("UTF-8", true); }return null;}private static class BomCharset {private final String charset;private final boolean offset;public BomCharset(String charset, boolean offset) {this.charset = charset;this.offset = offset;}}}
tensor([[0.0046, 0.0062, 0.0024,  ..., 0.0036, 0.0011, 0.0016],
        [0.0041, 0.0058, 0.0028,  ..., 0.0040, 0.0008, 0.0016],
        [0.0047, 0.0066, 0.0028,  ..., 0.0037, 0.0010, 0.0014],
        ...,
        [0.0039, 0.0069, 0.0029,  ..., 0.0038, 0.0011, 0.0013],
        [0.0047, 0.0044, 0.0016,  ..., 0.0027, 0.0016, 0.0021],
        [0.0041, 0.0055, 0.0028,  ..., 0.0029, 0.0011, 0.0016]])