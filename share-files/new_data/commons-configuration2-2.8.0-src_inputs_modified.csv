,method,test
0,"    protected boolean isCommentLine(final String line) {
        if (line == null) {
            return false;
        }
        // blank lines are also treated as comment lines
        return line.isEmpty() || getCommentLeadingCharsUsedInInput().indexOf(line.charAt(0)) >= 0;
    }","  public void test0()  throws Throwable  {
      INIConfiguration iNIConfiguration0 = new INIConfiguration();
      boolean boolean0 = iNIConfiguration0.isCommentLine(""#;"");
}"
1,"    public void read(final Reader in) throws ConfigurationException, IOException {
        final BufferedReader bufferedReader = new BufferedReader(in);
        final Map<String, ImmutableNode.Builder> sectionBuilders = new LinkedHashMap<>();
        final ImmutableNode.Builder rootBuilder = new ImmutableNode.Builder();

        createNodeBuilders(bufferedReader, rootBuilder, sectionBuilders);
        final ImmutableNode rootNode = createNewRootNode(rootBuilder, sectionBuilders);
        addNodes(null, rootNode.getChildren());
    }","  public void test1()  throws Throwable  {
      INIConfiguration iNIConfiguration0 = new INIConfiguration();
      StringReader stringReader0 = new StringReader(""js=\""&pi&F"");
      iNIConfiguration0.read(stringReader0);
}"
2,"    public void read(final Reader in) throws ConfigurationException, IOException {
        final BufferedReader bufferedReader = new BufferedReader(in);
        final Map<String, ImmutableNode.Builder> sectionBuilders = new LinkedHashMap<>();
        final ImmutableNode.Builder rootBuilder = new ImmutableNode.Builder();

        createNodeBuilders(bufferedReader, rootBuilder, sectionBuilders);
        final ImmutableNode rootNode = createNewRootNode(rootBuilder, sectionBuilders);
        addNodes(null, rootNode.getChildren());
    }","  public void test2()  throws Throwable  {
      INIConfiguration iNIConfiguration0 = new INIConfiguration();
      StringReader stringReader0 = new StringReader(""=\""&dN\""8r"");
      iNIConfiguration0.read(stringReader0);
}"
3,"    public void read(final Reader in) throws ConfigurationException, IOException {
        final BufferedReader bufferedReader = new BufferedReader(in);
        final Map<String, ImmutableNode.Builder> sectionBuilders = new LinkedHashMap<>();
        final ImmutableNode.Builder rootBuilder = new ImmutableNode.Builder();

        createNodeBuilders(bufferedReader, rootBuilder, sectionBuilders);
        final ImmutableNode rootNode = createNewRootNode(rootBuilder, sectionBuilders);
        addNodes(null, rootNode.getChildren());
    }","  public void test3()  throws Throwable  {
      INIConfiguration iNIConfiguration0 = new INIConfiguration();
      StringReader stringReader0 = new StringReader(""='-&&F"");
      iNIConfiguration0.read(stringReader0);
}"
4,"    public void read(final Reader in) throws ConfigurationException, IOException {
        final BufferedReader bufferedReader = new BufferedReader(in);
        final Map<String, ImmutableNode.Builder> sectionBuilders = new LinkedHashMap<>();
        final ImmutableNode.Builder rootBuilder = new ImmutableNode.Builder();

        createNodeBuilders(bufferedReader, rootBuilder, sectionBuilders);
        final ImmutableNode rootNode = createNewRootNode(rootBuilder, sectionBuilders);
        addNodes(null, rootNode.getChildren());
    }","  public void test4()  throws Throwable  {
      INIConfiguration iNIConfiguration0 = new INIConfiguration();
      DefaultListDelimiterHandler defaultListDelimiterHandler0 = new DefaultListDelimiterHandler('G');
      iNIConfiguration0.setListDelimiterHandler(defaultListDelimiterHandler0);
      StringReader stringReader0 = new StringReader(""setSeverName"");
      iNIConfiguration0.read(stringReader0);
}"
5,"    public void write(final Writer writer) throws ConfigurationException, IOException {
        final PrintWriter out = new PrintWriter(writer);
        boolean first = true;
        final String separator = getSeparatorUsedInOutput();

        beginRead(false);
        try {
            for (final ImmutableNode node : getModel().getNodeHandler().getRootNode().getChildren()) {
                if (isSectionNode(node)) {
                    if (!first) {
                        out.println();
                    }
                    out.print(""["");
                    out.print(node.getNodeName());
                    out.print(""]"");
                    out.println();

                    for (final ImmutableNode child : node) {
                        writeProperty(out, child.getNodeName(), child.getValue(), separator);
                    }
                } else {
                    writeProperty(out, node.getNodeName(), node.getValue(), separator);
                }
                first = false;
            }
            out.println();
            out.flush();
        } finally {
            endRead();
        }
    }","  public void test5()  throws Throwable  {
      INIConfiguration iNIConfiguration0 = new INIConfiguration((HierarchicalConfiguration<ImmutableNode>) null);
      iNIConfiguration0.addProperty("".5p L~Znu_gvn>In].p"", ""Invalid 'any-setter' annotation on method '%s()': first argument not of type String or Object, but %s"");
      PipedWriter pipedWriter0 = new PipedWriter();
      iNIConfiguration0.write(pipedWriter0);
}"
6,"    protected boolean isSectionLine(final String line) {
        if (line == null) {
            return false;
        }
        return line.startsWith(""["") && line.endsWith(""]"");
    }","  public void test6()  throws Throwable  {
      UnionCombiner unionCombiner0 = new UnionCombiner();
      CombinedConfiguration combinedConfiguration0 = new CombinedConfiguration(unionCombiner0);
      INIConfiguration iNIConfiguration0 = new INIConfiguration(combinedConfiguration0);
      boolean boolean0 = iNIConfiguration0.isSectionLine(""[#?~CKk]"");
}"
7,"    public String getSeparatorUsedInOutput() {
        beginRead(false);
        try {
            return separatorUsedInOutput;
        } finally {
            endRead();
        }
    }","  public void test7()  throws Throwable  {
      INIConfiguration iNIConfiguration0 = new INIConfiguration();
      iNIConfiguration0.setSeparatorUsedInOutput((String) null);
      String string0 = iNIConfiguration0.getSeparatorUsedInOutput();
}"
8,"    public String getSeparatorUsedInOutput() {
        beginRead(false);
        try {
            return separatorUsedInOutput;
        } finally {
            endRead();
        }
    }","  public void test8()  throws Throwable  {
      INIConfiguration iNIConfiguration0 = new INIConfiguration();
      iNIConfiguration0.setSeparatorUsedInOutput("""");
      String string0 = iNIConfiguration0.getSeparatorUsedInOutput();
}"
9,"    public String getSeparatorUsedInInput() {
        beginRead(false);
        try {
            return separatorUsedInInput;
        } finally {
            endRead();
        }
    }","  public void test9()  throws Throwable  {
      BaseHierarchicalConfiguration baseHierarchicalConfiguration0 = new BaseHierarchicalConfiguration();
      INIConfiguration iNIConfiguration0 = new INIConfiguration(baseHierarchicalConfiguration0);
      iNIConfiguration0.setSeparatorUsedInInput((String) null);
      String string0 = iNIConfiguration0.getSeparatorUsedInInput();
}"
10,"    public String getSeparatorUsedInInput() {
        beginRead(false);
        try {
            return separatorUsedInInput;
        } finally {
            endRead();
        }
    }","  public void test10()  throws Throwable  {
      BaseHierarchicalConfiguration baseHierarchicalConfiguration0 = new BaseHierarchicalConfiguration();
      INIConfiguration iNIConfiguration0 = new INIConfiguration(baseHierarchicalConfiguration0);
      iNIConfiguration0.setSeparatorUsedInInput("""");
      String string0 = iNIConfiguration0.getSeparatorUsedInInput();
}"
11,"    public SubnodeConfiguration getSection(final String name) {
        if (name == null) {
            return getGlobalSection();
        }
        try {
            return (SubnodeConfiguration) configurationAt(name, true);
        } catch (final ConfigurationRuntimeException iex) {
            // the passed in key does not map to exactly one node
            // obtain the node for the section, create it on demand
            final InMemoryNodeModel parentModel = getSubConfigurationParentModel();
            final NodeSelector selector = parentModel.trackChildNodeWithCreation(null, name, this);
            return createSubConfigurationForTrackedNode(selector, this);
        }
    }","  public void test11()  throws Throwable  {
      INIConfiguration iNIConfiguration0 = new INIConfiguration();
      iNIConfiguration0.setThrowExceptionOnMissing(true);
      SubnodeConfiguration subnodeConfiguration0 = iNIConfiguration0.getSection(""K%f%HM\""h1/"");
}"
12,"    public String getCommentLeadingCharsUsedInInput() {
        beginRead(false);
        try {
            return commentCharsUsedInInput;
        } finally {
            endRead();
        }
    }","  public void test12()  throws Throwable  {
      INIConfiguration iNIConfiguration0 = new INIConfiguration();
      iNIConfiguration0.setCommentLeadingCharsUsedInInput((String) null);
      String string0 = iNIConfiguration0.getCommentLeadingCharsUsedInInput();
}"
13,"    public String getCommentLeadingCharsUsedInInput() {
        beginRead(false);
        try {
            return commentCharsUsedInInput;
        } finally {
            endRead();
        }
    }","  public void test13()  throws Throwable  {
      INIConfiguration iNIConfiguration0 = new INIConfiguration();
      iNIConfiguration0.setCommentLeadingCharsUsedInInput("""");
      String string0 = iNIConfiguration0.getCommentLeadingCharsUsedInInput();
}"
14,"    public void write(final Writer writer) throws ConfigurationException, IOException {
        final PrintWriter out = new PrintWriter(writer);
        boolean first = true;
        final String separator = getSeparatorUsedInOutput();

        beginRead(false);
        try {
            for (final ImmutableNode node : getModel().getNodeHandler().getRootNode().getChildren()) {
                if (isSectionNode(node)) {
                    if (!first) {
                        out.println();
                    }
                    out.print(""["");
                    out.print(node.getNodeName());
                    out.print(""]"");
                    out.println();

                    for (final ImmutableNode child : node) {
                        writeProperty(out, child.getNodeName(), child.getValue(), separator);
                    }
                } else {
                    writeProperty(out, node.getNodeName(), node.getValue(), separator);
                }
                first = false;
            }
            out.println();
            out.flush();
        } finally {
            endRead();
        }
    }","  public void test14()  throws Throwable  {
      INIConfiguration iNIConfiguration0 = new INIConfiguration();
      // Undeclared exception!
      try { 
        iNIConfiguration0.write((Writer) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.io.Writer"", e);
      }
  }"
15,"    public void read(final Reader in) throws ConfigurationException, IOException {
        final BufferedReader bufferedReader = new BufferedReader(in);
        final Map<String, ImmutableNode.Builder> sectionBuilders = new LinkedHashMap<>();
        final ImmutableNode.Builder rootBuilder = new ImmutableNode.Builder();

        createNodeBuilders(bufferedReader, rootBuilder, sectionBuilders);
        final ImmutableNode rootNode = createNewRootNode(rootBuilder, sectionBuilders);
        addNodes(null, rootNode.getChildren());
    }","  public void test15()  throws Throwable  {
      INIConfiguration iNIConfiguration0 = new INIConfiguration((HierarchicalConfiguration<ImmutableNode>) null);
      // Undeclared exception!
      try { 
        iNIConfiguration0.read((Reader) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.io.Reader"", e);
      }
  }"
16,"    public void read(final Reader in) throws ConfigurationException, IOException {
        final BufferedReader bufferedReader = new BufferedReader(in);
        final Map<String, ImmutableNode.Builder> sectionBuilders = new LinkedHashMap<>();
        final ImmutableNode.Builder rootBuilder = new ImmutableNode.Builder();

        createNodeBuilders(bufferedReader, rootBuilder, sectionBuilders);
        final ImmutableNode rootNode = createNewRootNode(rootBuilder, sectionBuilders);
        addNodes(null, rootNode.getChildren());
    }","  public void test16()  throws Throwable  {
      INIConfiguration iNIConfiguration0 = new INIConfiguration();
      PipedReader pipedReader0 = new PipedReader();
      try { 
        iNIConfiguration0.read(pipedReader0);
        fail(""Expecting exception: IOException"");
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException(""java.io.PipedReader"", e);
      }
  }"
17,"    protected boolean isCommentLine(final String line) {
        if (line == null) {
            return false;
        }
        // blank lines are also treated as comment lines
        return line.isEmpty() || getCommentLeadingCharsUsedInInput().indexOf(line.charAt(0)) >= 0;
    }","  public void test17()  throws Throwable  {
      INIConfiguration iNIConfiguration0 = new INIConfiguration();
      iNIConfiguration0.setCommentLeadingCharsUsedInInput((String) null);
      // Undeclared exception!
      try { 
        iNIConfiguration0.isCommentLine("",Vr^K&V"");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.configuration2.INIConfiguration"", e);
      }
  }"
18,"    public SubnodeConfiguration getSection(final String name) {
        if (name == null) {
            return getGlobalSection();
        }
        try {
            return (SubnodeConfiguration) configurationAt(name, true);
        } catch (final ConfigurationRuntimeException iex) {
            // the passed in key does not map to exactly one node
            // obtain the node for the section, create it on demand
            final InMemoryNodeModel parentModel = getSubConfigurationParentModel();
            final NodeSelector selector = parentModel.trackChildNodeWithCreation(null, name, this);
            return createSubConfigurationForTrackedNode(selector, this);
        }
    }","  public void test18()  throws Throwable  {
      INIConfiguration iNIConfiguration0 = new INIConfiguration();
      SystemConfiguration systemConfiguration0 = new SystemConfiguration();
      iNIConfiguration0.copy(systemConfiguration0);
      // Undeclared exception!
      iNIConfiguration0.getSection(""q"");
  }"
19,"    public INIConfiguration() {
    }","  public void test19()  throws Throwable  {
      INIConfiguration iNIConfiguration0 = new INIConfiguration();
      InMemoryNodeModel inMemoryNodeModel0 = new InMemoryNodeModel();
      NodeSelector nodeSelector0 = inMemoryNodeModel0.trackChildNodeWithCreation("""", """", iNIConfiguration0);
      AbstractYAMLBasedConfiguration abstractYAMLBasedConfiguration0 = new AbstractYAMLBasedConfiguration();
      SubnodeConfiguration subnodeConfiguration0 = iNIConfiguration0.createSubConfigurationForTrackedNode(nodeSelector0, abstractYAMLBasedConfiguration0);
      INIConfiguration iNIConfiguration1 = null;
      try {
        iNIConfiguration1 = new INIConfiguration(subnodeConfiguration0);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // No tracked node found: org.apache.commons.configuration2.tree.NodeSelector@27[keys=[(0)]]
         //
         verifyException(""org.apache.commons.configuration2.tree.NodeTracker"", e);
      }
  }"
20,"    public INIConfiguration() {
    }","  public void test20()  throws Throwable  {
      YAMLConfiguration yAMLConfiguration0 = new YAMLConfiguration((HierarchicalConfiguration<ImmutableNode>) null);
      NodeSelector nodeSelector0 = new NodeSelector(""[A`jkk):&,b%|XT)|dK"");
      TrackedNodeModel trackedNodeModel0 = new TrackedNodeModel(yAMLConfiguration0, nodeSelector0, false);
      BaseHierarchicalConfiguration baseHierarchicalConfiguration0 = new BaseHierarchicalConfiguration(trackedNodeModel0);
      INIConfiguration iNIConfiguration0 = null;
      try {
        iNIConfiguration0 = new INIConfiguration(baseHierarchicalConfiguration0);
        fail(""Expecting exception: ClassCastException"");
      } catch(ClassCastException e) {
         //
         // org.apache.commons.configuration2.tree.TrackedNodeModel cannot be cast to org.apache.commons.configuration2.tree.InMemoryNodeModel
         //
         verifyException(""org.apache.commons.configuration2.BaseHierarchicalConfiguration"", e);
      }
  }"
21,"    public void read(final Reader in) throws ConfigurationException, IOException {
        final BufferedReader bufferedReader = new BufferedReader(in);
        final Map<String, ImmutableNode.Builder> sectionBuilders = new LinkedHashMap<>();
        final ImmutableNode.Builder rootBuilder = new ImmutableNode.Builder();

        createNodeBuilders(bufferedReader, rootBuilder, sectionBuilders);
        final ImmutableNode rootNode = createNewRootNode(rootBuilder, sectionBuilders);
        addNodes(null, rootNode.getChildren());
    }","  public void test21()  throws Throwable  {
      INIConfiguration iNIConfiguration0 = new INIConfiguration();
      iNIConfiguration0.setSeparatorUsedInInput(""[v_Sr@a'(.ok! N"");
      StringReader stringReader0 = new StringReader(""setSeverName"");
      iNIConfiguration0.read(stringReader0);
}"
22,"    public void read(final Reader in) throws ConfigurationException, IOException {
        final BufferedReader bufferedReader = new BufferedReader(in);
        final Map<String, ImmutableNode.Builder> sectionBuilders = new LinkedHashMap<>();
        final ImmutableNode.Builder rootBuilder = new ImmutableNode.Builder();

        createNodeBuilders(bufferedReader, rootBuilder, sectionBuilders);
        final ImmutableNode rootNode = createNewRootNode(rootBuilder, sectionBuilders);
        addNodes(null, rootNode.getChildren());
    }","  public void test22()  throws Throwable  {
      INIConfiguration iNIConfiguration0 = new INIConfiguration();
      iNIConfiguration0.setSeparatorUsedInInput(""v_Sc@a'(.ok{ N"");
      StringReader stringReader0 = new StringReader(""c.owner"");
      iNIConfiguration0.read(stringReader0);
}"
23,"    public String getCommentLeadingCharsUsedInInput() {
        beginRead(false);
        try {
            return commentCharsUsedInInput;
        } finally {
            endRead();
        }
    }","  public void test23()  throws Throwable  {
      INIConfiguration iNIConfiguration0 = new INIConfiguration();
      String string0 = iNIConfiguration0.getCommentLeadingCharsUsedInInput();
}"
24,"    public String getSeparatorUsedInOutput() {
        beginRead(false);
        try {
            return separatorUsedInOutput;
        } finally {
            endRead();
        }
    }","  public void test24()  throws Throwable  {
      INIConfiguration iNIConfiguration0 = new INIConfiguration((HierarchicalConfiguration<ImmutableNode>) null);
      String string0 = iNIConfiguration0.getSeparatorUsedInOutput();
}"
25,"    public SubnodeConfiguration getSection(final String name) {
        if (name == null) {
            return getGlobalSection();
        }
        try {
            return (SubnodeConfiguration) configurationAt(name, true);
        } catch (final ConfigurationRuntimeException iex) {
            // the passed in key does not map to exactly one node
            // obtain the node for the section, create it on demand
            final InMemoryNodeModel parentModel = getSubConfigurationParentModel();
            final NodeSelector selector = parentModel.trackChildNodeWithCreation(null, name, this);
            return createSubConfigurationForTrackedNode(selector, this);
        }
    }","  public void test25()  throws Throwable  {
      INIConfiguration iNIConfiguration0 = new INIConfiguration();
      SubnodeConfiguration subnodeConfiguration0 = iNIConfiguration0.getSection((String) null);
      InMemoryNodeModel inMemoryNodeModel0 = subnodeConfiguration0.getRootNodeModel();
      inMemoryNodeModel0.trackChildNodeWithCreation((String) null, (String) null, iNIConfiguration0);
      iNIConfiguration0.append(subnodeConfiguration0);
}"
26,"    public SubnodeConfiguration getSection(final String name) {
        if (name == null) {
            return getGlobalSection();
        }
        try {
            return (SubnodeConfiguration) configurationAt(name, true);
        } catch (final ConfigurationRuntimeException iex) {
            // the passed in key does not map to exactly one node
            // obtain the node for the section, create it on demand
            final InMemoryNodeModel parentModel = getSubConfigurationParentModel();
            final NodeSelector selector = parentModel.trackChildNodeWithCreation(null, name, this);
            return createSubConfigurationForTrackedNode(selector, this);
        }
    }","  public void test26()  throws Throwable  {
      INIConfiguration iNIConfiguration0 = new INIConfiguration();
      SubnodeConfiguration subnodeConfiguration0 = iNIConfiguration0.getSection((String) null);
      subnodeConfiguration0.addPropertyInternal(""Yv+i "", ""Yv+i "");
      iNIConfiguration0.append(subnodeConfiguration0);
}"
27,"    public Set<String> getSections() {
        final Set<String> sections = new LinkedHashSet<>();
        boolean globalSection = false;
        boolean inSection = false;

        beginRead(false);
        try {
            for (final ImmutableNode node : getModel().getNodeHandler().getRootNode().getChildren()) {
                if (isSectionNode(node)) {
                    inSection = true;
                    sections.add(node.getNodeName());
                } else if (!inSection && !globalSection) {
                    globalSection = true;
                    sections.add(null);
                }
            }
        } finally {
            endRead();
        }

        return sections;
    }","  public void test27()  throws Throwable  {
      INIConfiguration iNIConfiguration0 = new INIConfiguration();
      CompositeConfiguration compositeConfiguration0 = new CompositeConfiguration();
      CompositeName compositeName0 = new CompositeName(""=:"");
      compositeConfiguration0.addPropertyDirect(""=:"", compositeName0);
      JMSDequeueOptions.StreamingMode jMSDequeueOptions_StreamingMode0 = JMSDequeueOptions.StreamingMode.DEQ_STREAMING_FLAG_DISABLED;
      compositeConfiguration0.addPropertyDirect(""=:"", jMSDequeueOptions_StreamingMode0);
      iNIConfiguration0.append(compositeConfiguration0);
      Set<String> set0 = iNIConfiguration0.getSections();
}"
28,"    public Set<String> getSections() {
        final Set<String> sections = new LinkedHashSet<>();
        boolean globalSection = false;
        boolean inSection = false;

        beginRead(false);
        try {
            for (final ImmutableNode node : getModel().getNodeHandler().getRootNode().getChildren()) {
                if (isSectionNode(node)) {
                    inSection = true;
                    sections.add(node.getNodeName());
                } else if (!inSection && !globalSection) {
                    globalSection = true;
                    sections.add(null);
                }
            }
        } finally {
            endRead();
        }

        return sections;
    }","  public void test28()  throws Throwable  {
      INIConfiguration iNIConfiguration0 = new INIConfiguration();
      CompositeConfiguration compositeConfiguration0 = new CompositeConfiguration();
      CompositeName compositeName0 = new CompositeName(""=:"");
      compositeConfiguration0.addPropertyDirect(""=:"", compositeName0);
      JMSDequeueOptions.StreamingMode jMSDequeueOptions_StreamingMode0 = JMSDequeueOptions.StreamingMode.DEQ_STREAMING_FLAG_DISABLED;
      compositeConfiguration0.addPropertyDirect(""=:"", jMSDequeueOptions_StreamingMode0);
      iNIConfiguration0.append(compositeConfiguration0);
      Set<String> set0 = iNIConfiguration0.getSections();
}"
29,"    public Set<String> getSections() {
        final Set<String> sections = new LinkedHashSet<>();
        boolean globalSection = false;
        boolean inSection = false;

        beginRead(false);
        try {
            for (final ImmutableNode node : getModel().getNodeHandler().getRootNode().getChildren()) {
                if (isSectionNode(node)) {
                    inSection = true;
                    sections.add(node.getNodeName());
                } else if (!inSection && !globalSection) {
                    globalSection = true;
                    sections.add(null);
                }
            }
        } finally {
            endRead();
        }

        return sections;
    }","  public void test29()  throws Throwable  {
      INIConfiguration iNIConfiguration0 = new INIConfiguration();
      Stack<SubnodeConfiguration> stack0 = new Stack<SubnodeConfiguration>();
      CompositeConfiguration compositeConfiguration0 = new CompositeConfiguration(stack0);
      CompositeName compositeName0 = new CompositeName(""getMaxRowSize"");
      compositeConfiguration0.addPropertyDirect(""tGXO)I${LEMf"", compositeName0);
      iNIConfiguration0.getSection(""3pUqkHRYd mE"");
      iNIConfiguration0.append(compositeConfiguration0);
      Set<String> set0 = iNIConfiguration0.getSections();
}"
30,"    public Set<String> getSections() {
        final Set<String> sections = new LinkedHashSet<>();
        boolean globalSection = false;
        boolean inSection = false;

        beginRead(false);
        try {
            for (final ImmutableNode node : getModel().getNodeHandler().getRootNode().getChildren()) {
                if (isSectionNode(node)) {
                    inSection = true;
                    sections.add(node.getNodeName());
                } else if (!inSection && !globalSection) {
                    globalSection = true;
                    sections.add(null);
                }
            }
        } finally {
            endRead();
        }

        return sections;
    }","  public void test30()  throws Throwable  {
      INIConfiguration iNIConfiguration0 = new INIConfiguration();
      Stack<SubnodeConfiguration> stack0 = new Stack<SubnodeConfiguration>();
      CompositeConfiguration compositeConfiguration0 = new CompositeConfiguration(stack0);
      CompositeName compositeName0 = new CompositeName(""getMaxRowSize"");
      compositeConfiguration0.addPropertyDirect(""tGXO)I${LEMf"", compositeName0);
      iNIConfiguration0.getSection(""3pUqkHRYd mE"");
      iNIConfiguration0.append(compositeConfiguration0);
      Set<String> set0 = iNIConfiguration0.getSections();
}"
31,"    public Set<String> getSections() {
        final Set<String> sections = new LinkedHashSet<>();
        boolean globalSection = false;
        boolean inSection = false;

        beginRead(false);
        try {
            for (final ImmutableNode node : getModel().getNodeHandler().getRootNode().getChildren()) {
                if (isSectionNode(node)) {
                    inSection = true;
                    sections.add(node.getNodeName());
                } else if (!inSection && !globalSection) {
                    globalSection = true;
                    sections.add(null);
                }
            }
        } finally {
            endRead();
        }

        return sections;
    }","  public void test31()  throws Throwable  {
      INIConfiguration iNIConfiguration0 = new INIConfiguration();
      Set<String> set0 = iNIConfiguration0.getSections();
}"
32,"    protected boolean isSectionLine(final String line) {
        if (line == null) {
            return false;
        }
        return line.startsWith(""["") && line.endsWith(""]"");
    }","  public void test32()  throws Throwable  {
      INIConfiguration iNIConfiguration0 = new INIConfiguration();
      boolean boolean0 = iNIConfiguration0.isSectionLine(""[V#HIZpN^"");
}"
33,"    protected boolean isSectionLine(final String line) {
        if (line == null) {
            return false;
        }
        return line.startsWith(""["") && line.endsWith(""]"");
    }","  public void test33()  throws Throwable  {
      INIConfiguration iNIConfiguration0 = new INIConfiguration();
      boolean boolean0 = iNIConfiguration0.isSectionLine((String) null);
}"
34,"    protected boolean isCommentLine(final String line) {
        if (line == null) {
            return false;
        }
        // blank lines are also treated as comment lines
        return line.isEmpty() || getCommentLeadingCharsUsedInInput().indexOf(line.charAt(0)) >= 0;
    }","  public void test34()  throws Throwable  {
      INIConfiguration iNIConfiguration0 = new INIConfiguration();
      boolean boolean0 = iNIConfiguration0.isCommentLine("""");
}"
35,"    protected boolean isCommentLine(final String line) {
        if (line == null) {
            return false;
        }
        // blank lines are also treated as comment lines
        return line.isEmpty() || getCommentLeadingCharsUsedInInput().indexOf(line.charAt(0)) >= 0;
    }","  public void test35()  throws Throwable  {
      INIConfiguration iNIConfiguration0 = new INIConfiguration();
      boolean boolean0 = iNIConfiguration0.isCommentLine((String) null);
}"
36,"    public void read(final Reader in) throws ConfigurationException, IOException {
        final BufferedReader bufferedReader = new BufferedReader(in);
        final Map<String, ImmutableNode.Builder> sectionBuilders = new LinkedHashMap<>();
        final ImmutableNode.Builder rootBuilder = new ImmutableNode.Builder();

        createNodeBuilders(bufferedReader, rootBuilder, sectionBuilders);
        final ImmutableNode rootNode = createNewRootNode(rootBuilder, sectionBuilders);
        addNodes(null, rootNode.getChildren());
    }","  public void test36()  throws Throwable  {
      INIConfiguration iNIConfiguration0 = new INIConfiguration();
      StringReader stringReader0 = new StringReader(""n(\""=#H~^j"");
      iNIConfiguration0.read(stringReader0);
}"
37,"    public void read(final Reader in) throws ConfigurationException, IOException {
        final BufferedReader bufferedReader = new BufferedReader(in);
        final Map<String, ImmutableNode.Builder> sectionBuilders = new LinkedHashMap<>();
        final ImmutableNode.Builder rootBuilder = new ImmutableNode.Builder();

        createNodeBuilders(bufferedReader, rootBuilder, sectionBuilders);
        final ImmutableNode rootNode = createNewRootNode(rootBuilder, sectionBuilders);
        addNodes(null, rootNode.getChildren());
    }","  public void test37()  throws Throwable  {
      INIConfiguration iNIConfiguration0 = new INIConfiguration();
      iNIConfiguration0.setSeparatorUsedInInput(""c.column_name"");
      StringReader stringReader0 = new StringReader(""c.column_name"");
      iNIConfiguration0.read(stringReader0);
}"
38,"    public void read(final Reader in) throws ConfigurationException, IOException {
        final BufferedReader bufferedReader = new BufferedReader(in);
        final Map<String, ImmutableNode.Builder> sectionBuilders = new LinkedHashMap<>();
        final ImmutableNode.Builder rootBuilder = new ImmutableNode.Builder();

        createNodeBuilders(bufferedReader, rootBuilder, sectionBuilders);
        final ImmutableNode rootNode = createNewRootNode(rootBuilder, sectionBuilders);
        addNodes(null, rootNode.getChildren());
    }","  public void test38()  throws Throwable  {
      INIConfiguration iNIConfiguration0 = new INIConfiguration();
      iNIConfiguration0.setSeparatorUsedInInput(""VDbfH6glV;rLhuz"");
      StringReader stringReader0 = new StringReader(""c.owner"");
      iNIConfiguration0.read(stringReader0);
}"
39,"    public void read(final Reader in) throws ConfigurationException, IOException {
        final BufferedReader bufferedReader = new BufferedReader(in);
        final Map<String, ImmutableNode.Builder> sectionBuilders = new LinkedHashMap<>();
        final ImmutableNode.Builder rootBuilder = new ImmutableNode.Builder();

        createNodeBuilders(bufferedReader, rootBuilder, sectionBuilders);
        final ImmutableNode rootNode = createNewRootNode(rootBuilder, sectionBuilders);
        addNodes(null, rootNode.getChildren());
    }","  public void test39()  throws Throwable  {
      INIConfiguration iNIConfiguration0 = new INIConfiguration();
      iNIConfiguration0.setSeparatorUsedInInput(""1E(7g0A"");
      StringReader stringReader0 = new StringReader(""n(\""=#H~\\^j"");
      iNIConfiguration0.read(stringReader0);
}"
40,"    public void read(final Reader in) throws ConfigurationException, IOException {
        final BufferedReader bufferedReader = new BufferedReader(in);
        final Map<String, ImmutableNode.Builder> sectionBuilders = new LinkedHashMap<>();
        final ImmutableNode.Builder rootBuilder = new ImmutableNode.Builder();

        createNodeBuilders(bufferedReader, rootBuilder, sectionBuilders);
        final ImmutableNode rootNode = createNewRootNode(rootBuilder, sectionBuilders);
        addNodes(null, rootNode.getChildren());
    }","  public void test40()  throws Throwable  {
      INIConfiguration iNIConfiguration0 = new INIConfiguration();
      iNIConfiguration0.setSeparatorUsedInInput(""DbfH6glV;rLhuz"");
      StringReader stringReader0 = new StringReader(""DbfH6glV;rLhuz"");
      iNIConfiguration0.read(stringReader0);
}"
41,"    public void read(final Reader in) throws ConfigurationException, IOException {
        final BufferedReader bufferedReader = new BufferedReader(in);
        final Map<String, ImmutableNode.Builder> sectionBuilders = new LinkedHashMap<>();
        final ImmutableNode.Builder rootBuilder = new ImmutableNode.Builder();

        createNodeBuilders(bufferedReader, rootBuilder, sectionBuilders);
        final ImmutableNode rootNode = createNewRootNode(rootBuilder, sectionBuilders);
        addNodes(null, rootNode.getChildren());
    }","  public void test41()  throws Throwable  {
      INIConfiguration iNIConfiguration0 = new INIConfiguration();
      StringReader stringReader0 = new StringReader(""[/yV#HIZpN^]"");
      iNIConfiguration0.read(stringReader0);
}"
42,"    public void write(final Writer writer) throws ConfigurationException, IOException {
        final PrintWriter out = new PrintWriter(writer);
        boolean first = true;
        final String separator = getSeparatorUsedInOutput();

        beginRead(false);
        try {
            for (final ImmutableNode node : getModel().getNodeHandler().getRootNode().getChildren()) {
                if (isSectionNode(node)) {
                    if (!first) {
                        out.println();
                    }
                    out.print(""["");
                    out.print(node.getNodeName());
                    out.print(""]"");
                    out.println();

                    for (final ImmutableNode child : node) {
                        writeProperty(out, child.getNodeName(), child.getValue(), separator);
                    }
                } else {
                    writeProperty(out, node.getNodeName(), node.getValue(), separator);
                }
                first = false;
            }
            out.println();
            out.flush();
        } finally {
            endRead();
        }
    }","  public void test42()  throws Throwable  {
      INIConfiguration iNIConfiguration0 = new INIConfiguration();
      CompositeConfiguration compositeConfiguration0 = new CompositeConfiguration();
      JMSDequeueOptions.StreamingMode jMSDequeueOptions_StreamingMode0 = JMSDequeueOptions.StreamingMode.DEQ_STREAMING_FLAG_DISABLED;
      compositeConfiguration0.addPropertyDirect(""org.apache.commons.configuration2.INIConfiguration@9(null)"", jMSDequeueOptions_StreamingMode0);
      iNIConfiguration0.append(compositeConfiguration0);
      StringWriter stringWriter0 = new StringWriter();
      // Undeclared exception!
      try { 
        iNIConfiguration0.write(stringWriter0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.evosuite.runtime.System"", e);
      }
  }"
43,"    public void read(final Reader in) throws ConfigurationException, IOException {
        final BufferedReader bufferedReader = new BufferedReader(in);
        final Map<String, ImmutableNode.Builder> sectionBuilders = new LinkedHashMap<>();
        final ImmutableNode.Builder rootBuilder = new ImmutableNode.Builder();

        createNodeBuilders(bufferedReader, rootBuilder, sectionBuilders);
        final ImmutableNode rootNode = createNewRootNode(rootBuilder, sectionBuilders);
        addNodes(null, rootNode.getChildren());
    }","  public void test43()  throws Throwable  {
      INIConfiguration iNIConfiguration0 = new INIConfiguration();
      iNIConfiguration0.setCommentLeadingCharsUsedInInput(""org.apache.commons.configuration2.INIConfiguration"");
      StringReader stringReader0 = new StringReader("", c.data_precision)\n   AS column_size,\n       0 as buffer_length,\n   c.data_scale ,s decimal_digits,\n   0 as pseudo_column\nFROM all_trigger_cols t, all_tab_columns c\nWHERE t.table_name = :1\n  AND c.owner like :2 escape '/'\n AND t.table_owner = c.owner\n  AND t.table_name = c.table_name\n AND t.column_name = c.column_name\n"");
      iNIConfiguration0.read(stringReader0);
}"
44,"    public void write(final Writer writer) throws ConfigurationException, IOException {
        final PrintWriter out = new PrintWriter(writer);
        boolean first = true;
        final String separator = getSeparatorUsedInOutput();

        beginRead(false);
        try {
            for (final ImmutableNode node : getModel().getNodeHandler().getRootNode().getChildren()) {
                if (isSectionNode(node)) {
                    if (!first) {
                        out.println();
                    }
                    out.print(""["");
                    out.print(node.getNodeName());
                    out.print(""]"");
                    out.println();

                    for (final ImmutableNode child : node) {
                        writeProperty(out, child.getNodeName(), child.getValue(), separator);
                    }
                } else {
                    writeProperty(out, node.getNodeName(), node.getValue(), separator);
                }
                first = false;
            }
            out.println();
            out.flush();
        } finally {
            endRead();
        }
    }","  public void test44()  throws Throwable  {
      INIConfiguration iNIConfiguration0 = new INIConfiguration();
      StringReader stringReader0 = new StringReader(""9\""'"");
      iNIConfiguration0.read(stringReader0);
      iNIConfiguration0.getSection(""[n(\""=#HIZ&^j"");
      PipedWriter pipedWriter0 = new PipedWriter();
      iNIConfiguration0.write(pipedWriter0);
}"
45,"    public String getSeparatorUsedInInput() {
        beginRead(false);
        try {
            return separatorUsedInInput;
        } finally {
            endRead();
        }
    }","  public void test45()  throws Throwable  {
      INIConfiguration iNIConfiguration0 = new INIConfiguration();
      String string0 = iNIConfiguration0.getSeparatorUsedInInput();
}"
46,"    public INIConfiguration() {
    }","  public void test46()  throws Throwable  {
      BaseHierarchicalConfiguration baseHierarchicalConfiguration0 = new BaseHierarchicalConfiguration((NodeModel<ImmutableNode>) null);
      INIConfiguration iNIConfiguration0 = null;
      try {
        iNIConfiguration0 = new INIConfiguration(baseHierarchicalConfiguration0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.configuration2.BaseHierarchicalConfiguration"", e);
      }
  }"
47,"    public boolean isValidating() {
        return validating;
    }","  public void test0()  throws Throwable  {
      XMLConfiguration xMLConfiguration0 = new XMLConfiguration();
      xMLConfiguration0.setPropertyInternal(""configuration"", ""configuration"");
      xMLConfiguration0.addPropertyInternal(""configuration"", xMLConfiguration0);
      xMLConfiguration0.validate();
}"
48,"    public XMLConfiguration() {
        initLogger(new ConfigurationLogger(XMLConfiguration.class));
    }","  public void test1()  throws Throwable  {
      XMLConfiguration xMLConfiguration0 = new XMLConfiguration();
      HashMap<Node, Node> hashMap0 = new HashMap<Node, Node>();
      XMLDocumentHelper xMLDocumentHelper0 = new XMLDocumentHelper((Document) null, hashMap0, "">*X.-T,by2E_|!AP"", ""kr$?"");
      SubsetConfiguration subsetConfiguration0 = new SubsetConfiguration(xMLConfiguration0, """", """");
      ListDelimiterHandler listDelimiterHandler0 = subsetConfiguration0.getListDelimiterHandler();
      XMLConfiguration.XMLBuilderVisitor xMLConfiguration_XMLBuilderVisitor0 = new XMLConfiguration.XMLBuilderVisitor(xMLDocumentHelper0, listDelimiterHandler0);
      NodeSelector nodeSelector0 = new NodeSelector(""[%f%/>L4\""b"");
      TrackedNodeModel trackedNodeModel0 = new TrackedNodeModel(xMLConfiguration0, nodeSelector0, false);
      SubnodeConfiguration subnodeConfiguration0 = new SubnodeConfiguration(xMLConfiguration0, trackedNodeModel0);
      InMemoryNodeModel inMemoryNodeModel0 = subnodeConfiguration0.getRootNodeModel();
      ReferenceNodeHandler referenceNodeHandler0 = inMemoryNodeModel0.getReferenceNodeHandler();
      // Undeclared exception!
      try { 
        xMLConfiguration_XMLBuilderVisitor0.insert((ImmutableNode) null, (ImmutableNode) null, (ImmutableNode) null, (ImmutableNode) null, referenceNodeHandler0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Cannot determine parent! null is not part of this model.
         //
         verifyException(""org.apache.commons.configuration2.tree.TreeData"", e);
      }
  }"
49,"    public XMLConfiguration() {
        initLogger(new ConfigurationLogger(XMLConfiguration.class));
    }","  public void test2()  throws Throwable  {
      XMLConfiguration xMLConfiguration0 = new XMLConfiguration();
      XMLDocumentHelper xMLDocumentHelper0 = XMLDocumentHelper.forNewDocument(""D7"");
      SubsetConfiguration subsetConfiguration0 = new SubsetConfiguration(xMLConfiguration0, ""H;_SjEEXPn."", (String) null);
      ListDelimiterHandler listDelimiterHandler0 = subsetConfiguration0.getListDelimiterHandler();
      XMLConfiguration.XMLBuilderVisitor xMLConfiguration_XMLBuilderVisitor0 = new XMLConfiguration.XMLBuilderVisitor(xMLDocumentHelper0, listDelimiterHandler0);
      InMemoryNodeModel inMemoryNodeModel0 = xMLConfiguration0.getSubConfigurationParentModel();
      ReferenceNodeHandler referenceNodeHandler0 = inMemoryNodeModel0.getReferenceNodeHandler();
      // Undeclared exception!
      try { 
        xMLConfiguration_XMLBuilderVisitor0.update((ImmutableNode) null, (Object) null, referenceNodeHandler0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Cannot determine parent! null is not part of this model.
         //
         verifyException(""org.apache.commons.configuration2.tree.TreeData"", e);
      }
  }"
50,"    public void read(final Reader in) throws ConfigurationException, IOException {
        load(new InputSource(in));
    }","  public void test3()  throws Throwable  {
      XMLConfiguration xMLConfiguration0 = new XMLConfiguration((HierarchicalConfiguration<ImmutableNode>) null);
      FileLocator.FileLocatorBuilder fileLocator_FileLocatorBuilder0 = mock(FileLocator.FileLocatorBuilder.class, new ViolatedAssumptionAnswer());
      FileLocator fileLocator0 = new FileLocator(fileLocator_FileLocatorBuilder0);
      xMLConfiguration0.initFileLocator(fileLocator0);
      RowOutputBinary180 rowOutputBinary180_0 = new RowOutputBinary180(1414, 0);
      rowOutputBinary180_0.writeDouble(2.147483649E9);
      RowInputBinary rowInputBinary0 = new RowInputBinary(rowOutputBinary180_0);
      try { 
        xMLConfiguration0.read((InputStream) rowInputBinary0);
        fail(""Expecting exception: Exception"");
      } catch(Exception e) {
         //
         // Unable to load the configuration
         //
         verifyException(""org.apache.commons.configuration2.XMLConfiguration"", e);
      }
  }"
51,"    public boolean isValidating() {
        return validating;
    }","  public void test4()  throws Throwable  {
      XMLConfiguration xMLConfiguration0 = new XMLConfiguration();
      xMLConfiguration0.setSchemaValidation(true);
      boolean boolean0 = xMLConfiguration0.isValidating();
}"
52,"    public boolean isSchemaValidation() {
        return schemaValidation;
    }","  public void test5()  throws Throwable  {
      JSONConfiguration jSONConfiguration0 = new JSONConfiguration();
      XMLConfiguration xMLConfiguration0 = new XMLConfiguration(jSONConfiguration0);
      xMLConfiguration0.setSchemaValidation(true);
      boolean boolean0 = xMLConfiguration0.isSchemaValidation();
}"
53,"    public String getSystemID() {
        beginRead(false);
        try {
            return systemID;
        } finally {
            endRead();
        }
    }","  public void test6()  throws Throwable  {
      XMLConfiguration xMLConfiguration0 = new XMLConfiguration();
      xMLConfiguration0.setSystemID(""vfs.operation/operation-provider-already-added.error"");
      String string0 = xMLConfiguration0.getSystemID();
}"
54,"    public String getSystemID() {
        beginRead(false);
        try {
            return systemID;
        } finally {
            endRead();
        }
    }","  public void test7()  throws Throwable  {
      XMLConfiguration xMLConfiguration0 = new XMLConfiguration();
      xMLConfiguration0.setSystemID("""");
      String string0 = xMLConfiguration0.getSystemID();
}"
55,"    protected String getRootElementNameInternal() {
        final Document doc = getDocument();
        if (doc == null) {
            return rootElementName == null ? DEFAULT_ROOT_NAME : rootElementName;
        }
        return doc.getDocumentElement().getNodeName();
    }","  public void test8()  throws Throwable  {
      XMLConfiguration xMLConfiguration0 = new XMLConfiguration();
      xMLConfiguration0.setRootElementName("""");
      String string0 = xMLConfiguration0.getRootElementNameInternal();
}"
56,"    public String getPublicID() {
        beginRead(false);
        try {
            return publicID;
        } finally {
            endRead();
        }
    }","  public void test9()  throws Throwable  {
      XMLConfiguration xMLConfiguration0 = new XMLConfiguration();
      xMLConfiguration0.setPublicID(""i{"");
      String string0 = xMLConfiguration0.getPublicID();
}"
57,"    public String getPublicID() {
        beginRead(false);
        try {
            return publicID;
        } finally {
            endRead();
        }
    }","  public void test10()  throws Throwable  {
      XMLConfiguration xMLConfiguration0 = new XMLConfiguration();
      xMLConfiguration0.setPublicID("""");
      String string0 = xMLConfiguration0.getPublicID();
}"
58,"    public EntityResolver getEntityResolver() {
        return this.entityResolver;
    }","  public void test11()  throws Throwable  {
      BaseHierarchicalConfiguration baseHierarchicalConfiguration0 = new BaseHierarchicalConfiguration();
      XMLConfiguration xMLConfiguration0 = new XMLConfiguration(baseHierarchicalConfiguration0);
      xMLConfiguration0.setEntityResolver((EntityResolver) null);
      EntityResolver entityResolver0 = xMLConfiguration0.getEntityResolver();
}"
59,"    public DocumentBuilder getDocumentBuilder() {
        return documentBuilder;
    }","  public void test12()  throws Throwable  {
      JSONConfiguration jSONConfiguration0 = new JSONConfiguration();
      XMLConfiguration xMLConfiguration0 = new XMLConfiguration(jSONConfiguration0);
      DocumentBuilder documentBuilder0 = xMLConfiguration0.createDocumentBuilder();
      xMLConfiguration0.setDocumentBuilder(documentBuilder0);
      DocumentBuilder documentBuilder1 = xMLConfiguration0.getDocumentBuilder();
}"
60,"    public void write(final Writer writer) throws ConfigurationException, IOException {
        write(writer, createTransformer());
    }","  public void test13()  throws Throwable  {
      XMLConfiguration xMLConfiguration0 = new XMLConfiguration();
      xMLConfiguration0.setRootElementName(""H;_SjEEXPn."");
      Transformer transformer0 = xMLConfiguration0.createTransformer();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      // Undeclared exception!
      try { 
        xMLConfiguration0.write((Writer) charArrayWriter0, transformer0);
        fail(""Expecting exception: DOMException"");
      } catch(DOMException e) {
      }
  }"
61,"    public void write(final Writer writer) throws ConfigurationException, IOException {
        write(writer, createTransformer());
    }","  public void test14()  throws Throwable  {
      XMLConfiguration xMLConfiguration0 = new XMLConfiguration();
      Transformer transformer0 = xMLConfiguration0.createTransformer();
      try { 
        xMLConfiguration0.write((Writer) null, transformer0);
        fail(""Expecting exception: Exception"");
      } catch(Exception e) {
         //
         // javax.xml.transform.TransformerException: Result object passed to ''{0}'' is invalid.
         //
         verifyException(""org.apache.commons.configuration2.XMLDocumentHelper"", e);
      }
  }"
62,"    public void write(final Writer writer) throws ConfigurationException, IOException {
        write(writer, createTransformer());
    }","  public void test15()  throws Throwable  {
      DynamicCombinedConfiguration dynamicCombinedConfiguration0 = new DynamicCombinedConfiguration();
      XMLConfiguration xMLConfiguration0 = new XMLConfiguration(dynamicCombinedConfiguration0);
      // Undeclared exception!
      try { 
        xMLConfiguration0.write((Writer) null, (Transformer) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.configuration2.XMLDocumentHelper"", e);
      }
  }"
63,"    public void write(final Writer writer) throws ConfigurationException, IOException {
        write(writer, createTransformer());
    }","  public void test16()  throws Throwable  {
      XMLConfiguration xMLConfiguration0 = new XMLConfiguration();
      try { 
        xMLConfiguration0.write((Writer) null);
        fail(""Expecting exception: Exception"");
      } catch(Exception e) {
         //
         // javax.xml.transform.TransformerException: Result object passed to ''{0}'' is invalid.
         //
         verifyException(""org.apache.commons.configuration2.XMLDocumentHelper"", e);
      }
  }"
64,"    public void validate() throws ConfigurationException {
        beginWrite(false);
        try {
            final Transformer transformer = createTransformer();
            final Source source = new DOMSource(createDocument());
            final StringWriter writer = new StringWriter();
            final Result result = new StreamResult(writer);
            XMLDocumentHelper.transform(transformer, source, result);
            final Reader reader = new StringReader(writer.getBuffer().toString());
            final DocumentBuilder builder = createDocumentBuilder();
            builder.parse(new InputSource(reader));
        } catch (final SAXException | IOException | ParserConfigurationException pce) {
            throw new ConfigurationException(""Validation failed"", pce);
        } finally {
            endWrite();
        }
    }","  public void test17()  throws Throwable  {
      XMLConfiguration xMLConfiguration0 = new XMLConfiguration();
      xMLConfiguration0.setRootElementName(""#eGs N=fp{*d2dGb"");
      // Undeclared exception!
      try { 
        xMLConfiguration0.validate();
        fail(""Expecting exception: DOMException"");
      } catch(DOMException e) {
      }
  }"
65,"    public XMLConfiguration() {
        initLogger(new ConfigurationLogger(XMLConfiguration.class));
    }","  public void test18()  throws Throwable  {
      CombinedConfiguration combinedConfiguration0 = new CombinedConfiguration();
      INIConfiguration iNIConfiguration0 = new INIConfiguration(combinedConfiguration0);
      SubnodeConfiguration subnodeConfiguration0 = iNIConfiguration0.getSection(""SBZHxVLZ9("");
      NodeSelector nodeSelector0 = new NodeSelector(""SBZHxVLZ9("");
      SubnodeConfiguration subnodeConfiguration1 = subnodeConfiguration0.createSubConfigurationForTrackedNode(nodeSelector0, combinedConfiguration0);
      XMLConfiguration xMLConfiguration0 = null;
      try {
        xMLConfiguration0 = new XMLConfiguration(subnodeConfiguration1);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // No tracked node found: org.apache.commons.configuration2.tree.NodeSelector@47[keys=[SBZHxVLZ9(]]
         //
         verifyException(""org.apache.commons.configuration2.tree.NodeTracker"", e);
      }
  }"
66,"    public XMLConfiguration() {
        initLogger(new ConfigurationLogger(XMLConfiguration.class));
    }","  public void test19()  throws Throwable  {
      BaseHierarchicalConfiguration baseHierarchicalConfiguration0 = new BaseHierarchicalConfiguration((NodeModel<ImmutableNode>) null);
      XMLConfiguration xMLConfiguration0 = null;
      try {
        xMLConfiguration0 = new XMLConfiguration(baseHierarchicalConfiguration0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.configuration2.BaseHierarchicalConfiguration"", e);
      }
  }"
67,"    public XMLConfiguration() {
        initLogger(new ConfigurationLogger(XMLConfiguration.class));
    }","  public void test20()  throws Throwable  {
      CombinedConfiguration combinedConfiguration0 = new CombinedConfiguration((NodeCombiner) null);
      NodeSelector nodeSelector0 = new NodeSelector(""Unable to load the configuration"");
      TrackedNodeModel trackedNodeModel0 = new TrackedNodeModel(combinedConfiguration0, nodeSelector0, false);
      BaseHierarchicalConfiguration baseHierarchicalConfiguration0 = new BaseHierarchicalConfiguration(trackedNodeModel0);
      XMLConfiguration xMLConfiguration0 = null;
      try {
        xMLConfiguration0 = new XMLConfiguration(baseHierarchicalConfiguration0);
        fail(""Expecting exception: ClassCastException"");
      } catch(ClassCastException e) {
         //
         // org.apache.commons.configuration2.tree.TrackedNodeModel cannot be cast to org.apache.commons.configuration2.tree.InMemoryNodeModel
         //
         verifyException(""org.apache.commons.configuration2.BaseHierarchicalConfiguration"", e);
      }
  }"
68,"    public XMLConfiguration() {
        initLogger(new ConfigurationLogger(XMLConfiguration.class));
    }","  public void test21()  throws Throwable  {
      XMLConfiguration xMLConfiguration0 = new XMLConfiguration();
      HashMap<Node, Node> hashMap0 = new HashMap<Node, Node>();
      XMLDocumentHelper xMLDocumentHelper0 = new XMLDocumentHelper((Document) null, hashMap0, "">*X.-T,by2E_|!AP"", ""kr$?"");
      SubsetConfiguration subsetConfiguration0 = new SubsetConfiguration(xMLConfiguration0, """", """");
      ListDelimiterHandler listDelimiterHandler0 = subsetConfiguration0.getListDelimiterHandler();
      XMLConfiguration.XMLBuilderVisitor xMLConfiguration_XMLBuilderVisitor0 = new XMLConfiguration.XMLBuilderVisitor(xMLDocumentHelper0, listDelimiterHandler0);
      NodeSelector nodeSelector0 = new NodeSelector(""[%f%/>L4\""b"");
      TrackedNodeModel trackedNodeModel0 = new TrackedNodeModel(xMLConfiguration0, nodeSelector0, false);
      SubnodeConfiguration subnodeConfiguration0 = new SubnodeConfiguration(xMLConfiguration0, trackedNodeModel0);
      InMemoryNodeModel inMemoryNodeModel0 = subnodeConfiguration0.getRootNodeModel();
      ReferenceNodeHandler referenceNodeHandler0 = inMemoryNodeModel0.getReferenceNodeHandler();
      xMLConfiguration_XMLBuilderVisitor0.handleRemovedNodes(referenceNodeHandler0);
}"
69,"    public Document getDocument() {
        final XMLDocumentHelper docHelper = getDocumentHelper();
        return docHelper != null ? docHelper.getDocument() : null;
    }","  public void test22()  throws Throwable  {
      DynamicCombinedConfiguration dynamicCombinedConfiguration0 = new DynamicCombinedConfiguration();
      JSONConfiguration jSONConfiguration0 = new JSONConfiguration(dynamicCombinedConfiguration0);
      XMLConfiguration xMLConfiguration0 = new XMLConfiguration(jSONConfiguration0);
      Document document0 = xMLConfiguration0.getDocument();
}"
70,"    public DocumentBuilder getDocumentBuilder() {
        return documentBuilder;
    }","  public void test23()  throws Throwable  {
      XMLConfiguration xMLConfiguration0 = new XMLConfiguration();
      DocumentBuilder documentBuilder0 = xMLConfiguration0.getDocumentBuilder();
}"
71,"    public boolean isValidating() {
        return validating;
    }","  public void test24()  throws Throwable  {
      XMLConfiguration xMLConfiguration0 = new XMLConfiguration();
      boolean boolean0 = xMLConfiguration0.isValidating();
}"
72,"    public XMLConfiguration() {
        initLogger(new ConfigurationLogger(XMLConfiguration.class));
    }","  public void test25()  throws Throwable  {
      XMLDocumentHelper xMLDocumentHelper0 = XMLDocumentHelper.forNewDocument(""KPDSS_SESSSTATE_NO_OPEN_HANDLES"");
      DisabledListDelimiterHandler disabledListDelimiterHandler0 = new DisabledListDelimiterHandler();
      XMLConfiguration.XMLBuilderVisitor xMLConfiguration_XMLBuilderVisitor0 = new XMLConfiguration.XMLBuilderVisitor(xMLDocumentHelper0, disabledListDelimiterHandler0);
      INIConfiguration iNIConfiguration0 = new INIConfiguration();
      SubnodeConfiguration subnodeConfiguration0 = iNIConfiguration0.getSection(""KPDSS_SESSSTATE_NO_OPEN_HANDLES"");
      CompositeName compositeName0 = new CompositeName(""KPDSS_SESSSTATE_NO_OPEN_HANDLES"");
      subnodeConfiguration0.addPropertyDirect(""KPDSS_SESSSTATE_NO_OPEN_HANDLES"", compositeName0);
      InMemoryNodeModel inMemoryNodeModel0 = subnodeConfiguration0.getSubConfigurationParentModel();
      ReferenceNodeHandler referenceNodeHandler0 = inMemoryNodeModel0.getReferenceNodeHandler();
      xMLConfiguration_XMLBuilderVisitor0.processDocument(referenceNodeHandler0);
}"
73,"    public XMLConfiguration() {
        initLogger(new ConfigurationLogger(XMLConfiguration.class));
    }","  public void test26()  throws Throwable  {
      XMLDocumentHelper xMLDocumentHelper0 = XMLDocumentHelper.forNewDocument(""KPDSS_SESSSTATE_NO_OPEN_HANDLES"");
      DisabledListDelimiterHandler disabledListDelimiterHandler0 = new DisabledListDelimiterHandler();
      XMLConfiguration.XMLBuilderVisitor xMLConfiguration_XMLBuilderVisitor0 = new XMLConfiguration.XMLBuilderVisitor(xMLDocumentHelper0, disabledListDelimiterHandler0);
      INIConfiguration iNIConfiguration0 = new INIConfiguration();
      SubnodeConfiguration subnodeConfiguration0 = iNIConfiguration0.getSection(""KPDSS_SESSSTATE_NO_OPEN_HANDLES"");
      InMemoryNodeModel inMemoryNodeModel0 = subnodeConfiguration0.getSubConfigurationParentModel();
      ReferenceNodeHandler referenceNodeHandler0 = inMemoryNodeModel0.getReferenceNodeHandler();
      xMLConfiguration_XMLBuilderVisitor0.processDocument(referenceNodeHandler0);
}"
74,"    public void read(final Reader in) throws ConfigurationException, IOException {
        load(new InputSource(in));
    }","  public void test27()  throws Throwable  {
      XMLConfiguration xMLConfiguration0 = new XMLConfiguration((HierarchicalConfiguration<ImmutableNode>) null);
      FileLocator.FileLocatorBuilder fileLocator_FileLocatorBuilder0 = mock(FileLocator.FileLocatorBuilder.class, new ViolatedAssumptionAnswer());
      FileLocator fileLocator0 = new FileLocator(fileLocator_FileLocatorBuilder0);
      xMLConfiguration0.initFileLocator(fileLocator0);
      RowOutputBinary180 rowOutputBinary180_0 = new RowOutputBinary180((-2169), (-2169));
      RowInputBinary rowInputBinary0 = new RowInputBinary(rowOutputBinary180_0);
      try { 
        xMLConfiguration0.read((InputStream) rowInputBinary0);
        fail(""Expecting exception: Exception"");
      } catch(Exception e) {
         //
         // Error parsing null
         //
         verifyException(""org.apache.commons.configuration2.XMLConfiguration"", e);
      }
  }"
75,"    public boolean isSchemaValidation() {
        return schemaValidation;
    }","  public void test28()  throws Throwable  {
      XMLConfiguration xMLConfiguration0 = new XMLConfiguration();
      xMLConfiguration0.setPropertyInternal("""", xMLConfiguration0);
      xMLConfiguration0.validate();
}"
76,"    protected Transformer createTransformer() throws ConfigurationException {
        final Transformer transformer = XMLDocumentHelper.createTransformer();

        transformer.setOutputProperty(OutputKeys.INDENT, ""yes"");
        transformer.setOutputProperty(INDENT_AMOUNT_PROPERTY, Integer.toString(DEFAULT_INDENT_SIZE));
        if (locator != null && locator.getEncoding() != null) {
            transformer.setOutputProperty(OutputKeys.ENCODING, locator.getEncoding());
        }
        if (publicID != null) {
            transformer.setOutputProperty(OutputKeys.DOCTYPE_PUBLIC, publicID);
        }
        if (systemID != null) {
            transformer.setOutputProperty(OutputKeys.DOCTYPE_SYSTEM, systemID);
        }

        return transformer;
    }","  public void test29()  throws Throwable  {
      XMLConfiguration xMLConfiguration0 = new XMLConfiguration();
      xMLConfiguration0.setSystemID(""("");
      Transformer transformer0 = xMLConfiguration0.createTransformer();
}"
77,"    protected Transformer createTransformer() throws ConfigurationException {
        final Transformer transformer = XMLDocumentHelper.createTransformer();

        transformer.setOutputProperty(OutputKeys.INDENT, ""yes"");
        transformer.setOutputProperty(INDENT_AMOUNT_PROPERTY, Integer.toString(DEFAULT_INDENT_SIZE));
        if (locator != null && locator.getEncoding() != null) {
            transformer.setOutputProperty(OutputKeys.ENCODING, locator.getEncoding());
        }
        if (publicID != null) {
            transformer.setOutputProperty(OutputKeys.DOCTYPE_PUBLIC, publicID);
        }
        if (systemID != null) {
            transformer.setOutputProperty(OutputKeys.DOCTYPE_SYSTEM, systemID);
        }

        return transformer;
    }","  public void test30()  throws Throwable  {
      XMLConfiguration xMLConfiguration0 = new XMLConfiguration();
      xMLConfiguration0.setPublicID("""");
      Transformer transformer0 = xMLConfiguration0.createTransformer();
}"
78,"    public void write(final Writer writer) throws ConfigurationException, IOException {
        write(writer, createTransformer());
    }","  public void test31()  throws Throwable  {
      BaseHierarchicalConfiguration baseHierarchicalConfiguration0 = new BaseHierarchicalConfiguration();
      XMLConfiguration xMLConfiguration0 = new XMLConfiguration(baseHierarchicalConfiguration0);
      FileLocator.FileLocatorBuilder fileLocator_FileLocatorBuilder0 = mock(FileLocator.FileLocatorBuilder.class, new ViolatedAssumptionAnswer());
      FileLocator fileLocator0 = new FileLocator(fileLocator_FileLocatorBuilder0);
      xMLConfiguration0.initFileLocator(fileLocator0);
      StringWriter stringWriter0 = new StringWriter();
      xMLConfiguration0.write((Writer) stringWriter0);
}"
79,"    public boolean isValidating() {
        return validating;
    }","  public void test32()  throws Throwable  {
      XMLConfiguration xMLConfiguration0 = new XMLConfiguration();
      xMLConfiguration0.setValidating(true);
      xMLConfiguration0.createDocumentBuilder();
}"
80,"    protected DocumentBuilder createDocumentBuilder() throws ParserConfigurationException {
        if (getDocumentBuilder() != null) {
            return getDocumentBuilder();
        }
        final DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
        if (isValidating()) {
            factory.setValidating(true);
            if (isSchemaValidation()) {
                factory.setNamespaceAware(true);
                factory.setAttribute(JAXP_SCHEMA_LANGUAGE, W3C_XML_SCHEMA);
            }
        }

        final DocumentBuilder result = factory.newDocumentBuilder();
        result.setEntityResolver(this.entityResolver);

        if (isValidating()) {
            // register an error handler which detects validation errors
            result.setErrorHandler(new DefaultHandler() {
                @Override
                public void error(final SAXParseException ex) throws SAXException {
                    throw ex;
                }
            });
        }
        return result;
    }","  public void test33()  throws Throwable  {
      JSONConfiguration jSONConfiguration0 = new JSONConfiguration();
      XMLConfiguration xMLConfiguration0 = new XMLConfiguration(jSONConfiguration0);
      DocumentBuilder documentBuilder0 = xMLConfiguration0.createDocumentBuilder();
      xMLConfiguration0.setDocumentBuilder(documentBuilder0);
      DocumentBuilder documentBuilder1 = xMLConfiguration0.createDocumentBuilder();
}"
81,"    public boolean isValidating() {
        return validating;
    }","  public void test34()  throws Throwable  {
      JSONConfiguration jSONConfiguration0 = new JSONConfiguration();
      XMLConfiguration xMLConfiguration0 = new XMLConfiguration(jSONConfiguration0);
      xMLConfiguration0.setSchemaValidation(false);
}"
82,"    public boolean isSchemaValidation() {
        return schemaValidation;
    }","  public void test35()  throws Throwable  {
      XMLConfiguration xMLConfiguration0 = new XMLConfiguration();
      xMLConfiguration0.setSchemaValidation(true);
      xMLConfiguration0.setValidating(true);
}"
83,"    protected String getRootElementNameInternal() {
        final Document doc = getDocument();
        if (doc == null) {
            return rootElementName == null ? DEFAULT_ROOT_NAME : rootElementName;
        }
        return doc.getDocumentElement().getNodeName();
    }","  public void test36()  throws Throwable  {
      XMLConfiguration xMLConfiguration0 = new XMLConfiguration();
      xMLConfiguration0.setRootElementName(""H;_SjEEXPn."");
      String string0 = xMLConfiguration0.getRootElementNameInternal();
}"
84,"    public void validate() throws ConfigurationException {
        beginWrite(false);
        try {
            final Transformer transformer = createTransformer();
            final Source source = new DOMSource(createDocument());
            final StringWriter writer = new StringWriter();
            final Result result = new StreamResult(writer);
            XMLDocumentHelper.transform(transformer, source, result);
            final Reader reader = new StringReader(writer.getBuffer().toString());
            final DocumentBuilder builder = createDocumentBuilder();
            builder.parse(new InputSource(reader));
        } catch (final SAXException | IOException | ParserConfigurationException pce) {
            throw new ConfigurationException(""Validation failed"", pce);
        } finally {
            endWrite();
        }
    }","  public void test37()  throws Throwable  {
      XMLConfiguration xMLConfiguration0 = new XMLConfiguration();
      xMLConfiguration0.setSchemaValidation(true);
      try { 
        xMLConfiguration0.validate();
        fail(""Expecting exception: Exception"");
      } catch(Exception e) {
         //
         // Validation failed
         //
         verifyException(""org.apache.commons.configuration2.XMLConfiguration"", e);
      }
  }"
85,"    public boolean isSchemaValidation() {
        return schemaValidation;
    }","  public void test38()  throws Throwable  {
      XMLConfiguration xMLConfiguration0 = new XMLConfiguration();
      boolean boolean0 = xMLConfiguration0.isSchemaValidation();
}"
86,"    public void write(final Writer writer) throws ConfigurationException, IOException {
        write(writer, createTransformer());
    }","  public void test39()  throws Throwable  {
      XMLConfiguration xMLConfiguration0 = new XMLConfiguration();
      Transformer transformer0 = xMLConfiguration0.createTransformer();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      xMLConfiguration0.write((Writer) charArrayWriter0, transformer0);
}"
87,"    public void write(final Writer writer) throws ConfigurationException, IOException {
        write(writer, createTransformer());
    }","  public void test40()  throws Throwable  {
      XMLConfiguration xMLConfiguration0 = new XMLConfiguration();
      Transformer transformer0 = xMLConfiguration0.createTransformer();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      xMLConfiguration0.write((Writer) charArrayWriter0, transformer0);
}"
88,"    public EntityResolver getEntityResolver() {
        return this.entityResolver;
    }","  public void test41()  throws Throwable  {
      XMLConfiguration xMLConfiguration0 = new XMLConfiguration();
      EntityResolver entityResolver0 = xMLConfiguration0.getEntityResolver();
}"
89,"    public String getSystemID() {
        beginRead(false);
        try {
            return systemID;
        } finally {
            endRead();
        }
    }","  public void test42()  throws Throwable  {
      XMLConfiguration xMLConfiguration0 = new XMLConfiguration();
      String string0 = xMLConfiguration0.getSystemID();
}"
90,"    public void read(final Reader in) throws ConfigurationException, IOException {
        load(new InputSource(in));
    }","  public void test43()  throws Throwable  {
      XMLConfiguration xMLConfiguration0 = new XMLConfiguration((HierarchicalConfiguration<ImmutableNode>) null);
      RowOutputBinary180 rowOutputBinary180_0 = new RowOutputBinary180((-2169), (-2169));
      RowInputBinary rowInputBinary0 = new RowInputBinary(rowOutputBinary180_0);
      try { 
        xMLConfiguration0.read((InputStream) rowInputBinary0);
        fail(""Expecting exception: Exception"");
      } catch(Exception e) {
         //
         // Load operation not properly initialized! Do not call read(InputStream) directly, but use a FileHandler to load a configuration.
         //
         verifyException(""org.apache.commons.configuration2.XMLConfiguration"", e);
      }
  }"
91,"    public void read(final Reader in) throws ConfigurationException, IOException {
        load(new InputSource(in));
    }","  public void test44()  throws Throwable  {
      XMLConfiguration xMLConfiguration0 = new XMLConfiguration();
      try { 
        xMLConfiguration0.read((Reader) null);
        fail(""Expecting exception: Exception"");
      } catch(Exception e) {
         //
         // Load operation not properly initialized! Do not call read(InputStream) directly, but use a FileHandler to load a configuration.
         //
         verifyException(""org.apache.commons.configuration2.XMLConfiguration"", e);
      }
  }"
92,"    public String getPublicID() {
        beginRead(false);
        try {
            return publicID;
        } finally {
            endRead();
        }
    }","  public void test45()  throws Throwable  {
      XMLConfiguration xMLConfiguration0 = new XMLConfiguration();
      String string0 = xMLConfiguration0.getPublicID();
}"
93,"    public void write(final Writer writer) throws ConfigurationException, IOException {
        write(writer, createTransformer());
    }","  public void test46()  throws Throwable  {
      BaseHierarchicalConfiguration baseHierarchicalConfiguration0 = new BaseHierarchicalConfiguration();
      XMLConfiguration xMLConfiguration0 = new XMLConfiguration(baseHierarchicalConfiguration0);
      xMLConfiguration0.setRootElementName(""1nZeo4M"");
      StringWriter stringWriter0 = new StringWriter();
      // Undeclared exception!
      try { 
        xMLConfiguration0.write((Writer) stringWriter0);
        fail(""Expecting exception: DOMException"");
      } catch(DOMException e) {
      }
  }"
94,"    public Object lookup(final String variable) {
        return getConfiguration().getProperty(variable);
    }","  public void test0()  throws Throwable  {
      HashMap<String, Configuration> hashMap0 = new HashMap<String, Configuration>();
      MapConfiguration mapConfiguration0 = new MapConfiguration(hashMap0);
      ConfigurationLookup configurationLookup0 = new ConfigurationLookup(mapConfiguration0);
      Object object0 = configurationLookup0.lookup("""");
}"
95,"    public Object lookup(final String variable) {
        return getConfiguration().getProperty(variable);
    }","  public void test1()  throws Throwable  {
      HashMap<String, Configuration> hashMap0 = new HashMap<String, Configuration>();
      MapConfiguration mapConfiguration0 = new MapConfiguration(hashMap0);
      BiFunction<Configuration, Object, Configuration> biFunction0 = (BiFunction<Configuration, Object, Configuration>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap0.merge((String) null, mapConfiguration0, biFunction0);
      ConfigurationLookup configurationLookup0 = new ConfigurationLookup(mapConfiguration0);
      Object object0 = configurationLookup0.lookup((String) null);
}"
96,"    public Object lookup(final String variable) {
        return getConfiguration().getProperty(variable);
    }","  public void test2()  throws Throwable  {
      Context context0 = mock(Context.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(context0).lookup(anyString());
      JNDIConfiguration jNDIConfiguration0 = new JNDIConfiguration(context0);
      ConfigurationLookup configurationLookup0 = new ConfigurationLookup(jNDIConfiguration0);
      // Undeclared exception!
      try { 
        configurationLookup0.lookup(""SCXT"");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.configuration2.JNDIConfiguration"", e);
      }
  }"
97,"    public Object lookup(final String variable) {
        return getConfiguration().getProperty(variable);
    }","  public void test3()  throws Throwable  {
      Object object0 = new Object();
      Context context0 = mock(Context.class, new ViolatedAssumptionAnswer());
      doReturn(object0).when(context0).lookup(anyString());
      JNDIConfiguration jNDIConfiguration0 = new JNDIConfiguration(context0);
      ConfigurationLookup configurationLookup0 = new ConfigurationLookup(jNDIConfiguration0);
      // Undeclared exception!
      try { 
        configurationLookup0.lookup(""getAbandonedConnectionTimeout"");
        fail(""Expecting exception: ClassCastException"");
      } catch(ClassCastException e) {
         //
         // java.lang.Object cannot be cast to javax.naming.Context
         //
         verifyException(""org.apache.commons.configuration2.JNDIConfiguration"", e);
      }
  }"
98,"    public ImmutableConfiguration getConfiguration() {
        return configuration;
    }","  public void test4()  throws Throwable  {
      HashMap<String, Configuration> hashMap0 = new HashMap<String, Configuration>();
      MapConfiguration mapConfiguration0 = new MapConfiguration(hashMap0);
      ConfigurationLookup configurationLookup0 = new ConfigurationLookup(mapConfiguration0);
      MapConfiguration mapConfiguration1 = (MapConfiguration)configurationLookup0.getConfiguration();
}"
99,"    public ConfigurationLookup(final ImmutableConfiguration config) {
        if (config == null) {
            throw new IllegalArgumentException(""Configuration must not be null!"");
        }
        configuration = config;
    }","  public void test5()  throws Throwable  {
      ConfigurationLookup configurationLookup0 = null;
      try {
        configurationLookup0 = new ConfigurationLookup((ImmutableConfiguration) null);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Configuration must not be null!
         //
         verifyException(""org.apache.commons.configuration2.ConfigurationLookup"", e);
      }
  }"
100,"    public Object lookup(final String variable) {
        return getConfiguration().getProperty(variable);
    }","  public void test6()  throws Throwable  {
      CombinedConfiguration combinedConfiguration0 = new CombinedConfiguration();
      NodeSelector nodeSelector0 = new NodeSelector(""rBsoAa\""C,!5"");
      TrackedNodeModel trackedNodeModel0 = new TrackedNodeModel(combinedConfiguration0, nodeSelector0, true);
      SubnodeConfiguration subnodeConfiguration0 = new SubnodeConfiguration(combinedConfiguration0, trackedNodeModel0);
      ConfigurationLookup configurationLookup0 = new ConfigurationLookup(subnodeConfiguration0);
      // Undeclared exception!
      try { 
        configurationLookup0.lookup(""/'kB(OZE=ro"");
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // No tracked node found: org.apache.commons.configuration2.tree.NodeSelector@11[keys=[rBsoAa\""C,!5]]
         //
         verifyException(""org.apache.commons.configuration2.tree.NodeTracker"", e);
      }
  }"
101,"    protected Object getPropertyInternal(final String key) {
        final Object value = map.get(key);
        if (value instanceof String) {
            final Collection<String> list = getListDelimiterHandler().split((String) value, !isTrimmingDisabled());
            return list.size() > 1 ? list : list.iterator().next();
        }
        return value;
    }","  public void test0()  throws Throwable  {
      Field[] fieldArray0 = new Field[2];
      Field field0 = new Field("">8S\""slciy3Hhz(Yu{K"", 168);
      fieldArray0[0] = field0;
      Field field1 = new Field(""f"", 168, 5608, 5608);
      fieldArray0[1] = field1;
      field1.setFormat(5608);
      FieldMetadata fieldMetadata0 = field0.getMetadata();
      field1.setMetadata(fieldMetadata0);
      Map<String, Integer> map0 = PgResultSet.createColumnNameIndexMap(fieldArray0, false);
      MapConfiguration mapConfiguration0 = new MapConfiguration(map0);
      mapConfiguration0.getKeysInternal();
      Integer integer0 = new Integer(0);
      mapConfiguration0.addPropertyDirect(""f"", integer0);
      mapConfiguration0.isTrimmingDisabled();
      mapConfiguration0.getMap();
      mapConfiguration0.addPropertyDirect(""4/2"", integer0);
      mapConfiguration0.containsKeyInternal(""f"");
      Object object0 = mapConfiguration0.getPropertyInternal(""4/2"");
}"
102,"    protected int sizeInternal() {
        return map.size();
    }","  public void test1()  throws Throwable  {
      int int0 = 1;
      Random.setNextRandom(1);
      System.setCurrentTimeMillis(1);
      OracleConnectionPoolDataSource oracleConnectionPoolDataSource0 = new OracleConnectionPoolDataSource();
      oracleConnectionPoolDataSource0.getConnectionProperties();
      MapConfiguration mapConfiguration0 = new MapConfiguration((Properties) null);
      // Undeclared exception!
      try { 
        mapConfiguration0.sizeInternal();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.configuration2.MapConfiguration"", e);
      }
  }"
103,"    public Object clone() {
        try {
            final MapConfiguration copy = (MapConfiguration) super.clone();
            // Safe because ConfigurationUtils returns a map of the same types.
            @SuppressWarnings(""unchecked"")
            final Map<String, Object> clonedMap = (Map<String, Object>) ConfigurationUtils.clone(map);
            copy.map = clonedMap;
            copy.cloneInterpolator(this);
            return copy;
        } catch (final CloneNotSupportedException cex) {
            // cannot happen
            throw new ConfigurationRuntimeException(cex);
        }
    }","  public void test2()  throws Throwable  {
      PoolXADataSourceImpl poolXADataSourceImpl0 = new PoolXADataSourceImpl();
      poolXADataSourceImpl0.getConnectionProperties();
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ""oracle.jdbc.proxy.oracle$1jdbc$1replay$1driver$1NonTxnReplayableStatement$2oracle$1jdbc$1internal$1OracleCallableStatement$$$Proxy"");
      Map<String, Lookup> map0 = ConfigurationInterpolator.getDefaultPrefixLookups();
      MapConfiguration mapConfiguration0 = new MapConfiguration(map0);
      // Undeclared exception!
      try { 
        mapConfiguration0.clone();
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // java.lang.CloneNotSupportedException: java.util.Collections$UnmodifiableMap does not implement Cloneable
         //
         verifyException(""org.apache.commons.configuration2.MapConfiguration"", e);
      }
  }"
104,"    protected boolean isEmptyInternal() {
        return map.isEmpty();
    }","  public void test3()  throws Throwable  {
      MapConfiguration mapConfiguration0 = new MapConfiguration((Properties) null);
      long long0 = 0L;
      mapConfiguration0.getEventListenerRegistrations();
      // Undeclared exception!
      try { 
        mapConfiguration0.isEmptyInternal();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
      }
  }"
105,"    protected Iterator<String> getKeysInternal() {
        return map.keySet().iterator();
    }","  public void test4()  throws Throwable  {
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      OracleXADataSourceImpl oracleXADataSourceImpl0 = new OracleXADataSourceImpl();
      oracleXADataSourceImpl0.getConnectionProperties();
      MapConfiguration mapConfiguration0 = new MapConfiguration((Properties) null);
      // Undeclared exception!
      try { 
        mapConfiguration0.getKeysInternal();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.configuration2.MapConfiguration"", e);
      }
  }"
106,"    protected void addPropertyDirect(final String key, final Object value) {
        final Object previousValue = getProperty(key);

        if (previousValue == null) {
            map.put(key, value);
        } else if (previousValue instanceof List) {
            // the value is added to the existing list
            // Note: This is problematic. See header comment!
            ((List<Object>) previousValue).add(value);
        } else {
            // the previous value is replaced by a list containing the previous value and the new value
            final List<Object> list = new ArrayList<>();
            list.add(previousValue);
            list.add(value);

            map.put(key, list);
        }
    }","  public void test5()  throws Throwable  {
      SystemConfiguration systemConfiguration0 = new SystemConfiguration();
      systemConfiguration0.getFloat(""GSS_ENC_MODE"", 0.0F);
      systemConfiguration0.clone();
      systemConfiguration0.setDetailEvents(true);
      ConfigurationInterpolator.nullSafeLookup((Lookup) null);
      systemConfiguration0.isEmptyInternal();
      // Undeclared exception!
      try { 
        systemConfiguration0.addPropertyDirect(""GSS_ENC_MODE"", (Object) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.util.Hashtable"", e);
      }
  }"
107,"    public String toString() {
        return getClass().getSimpleName() + "" [map="" + map + "", trimmingDisabled="" + trimmingDisabled + ""]"";
    }","  public void test6()  throws Throwable  {
      PoolXADataSourceImpl poolXADataSourceImpl0 = new PoolXADataSourceImpl();
      Properties properties0 = poolXADataSourceImpl0.getConnectionProperties();
      MapConfiguration mapConfiguration0 = new MapConfiguration(properties0);
      MapConfiguration mapConfiguration1 = new MapConfiguration(properties0);
      EventType<ConfigurationEvent> eventType0 = ConfigurationEvent.SET_PROPERTY;
      ConfigurationEvent configurationEvent0 = new ConfigurationEvent(properties0, eventType0, ""+9 Lq4gw{>GlCK/s=U"", poolXADataSourceImpl0, true);
      properties0.put(mapConfiguration1, configurationEvent0);
      OverrideCombiner overrideCombiner0 = new OverrideCombiner();
      CombinedConfiguration combinedConfiguration0 = new CombinedConfiguration(overrideCombiner0);
      mapConfiguration0.cloneInterpolator(combinedConfiguration0);
      mapConfiguration0.isEmptyInternal();
      EventType<ConfigurationEvent> eventType1 = ConfigurationEvent.CLEAR_TREE;
      ExprLookup.Variables exprLookup_Variables0 = new ExprLookup.Variables();
      ExprLookup exprLookup0 = new ExprLookup(exprLookup_Variables0);
      ConfigurationEvent configurationEvent1 = new ConfigurationEvent(properties0, eventType1, ""ud+[0Emi#A$v1)Es#C"", exprLookup0, false);
      mapConfiguration0.addPropertyDirect(""oracle.security.client.password"", configurationEvent1);
      mapConfiguration0.clearPropertyDirect(""^ 6EQXq;(oZ%7'"");
      mapConfiguration0.clone();
      // Undeclared exception!
      try { 
        mapConfiguration0.toString();
        fail(""Expecting exception: StackOverflowError"");
      } catch(StackOverflowError e) {
      }
  }"
108,"    protected void clearPropertyDirect(final String key) {
        map.remove(key);
    }","  public void test7()  throws Throwable  {
      CombinedConfiguration combinedConfiguration0 = new CombinedConfiguration();
      String string0 = null;
      Properties properties0 = combinedConfiguration0.getProperties((String) null);
      MapConfiguration mapConfiguration0 = new MapConfiguration(properties0);
      // Undeclared exception!
      try { 
        mapConfiguration0.clearPropertyDirect((String) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
109,"    protected void addPropertyDirect(final String key, final Object value) {
        final Object previousValue = getProperty(key);

        if (previousValue == null) {
            map.put(key, value);
        } else if (previousValue instanceof List) {
            // the value is added to the existing list
            // Note: This is problematic. See header comment!
            ((List<Object>) previousValue).add(value);
        } else {
            // the previous value is replaced by a list containing the previous value and the new value
            final List<Object> list = new ArrayList<>();
            list.add(previousValue);
            list.add(value);

            map.put(key, list);
        }
    }","  public void test8()  throws Throwable  {
      Map<String, Lookup> map0 = ConfigurationInterpolator.getDefaultPrefixLookups();
      MapConfiguration mapConfiguration0 = new MapConfiguration(map0);
      String string0 = ""]"";
      // Undeclared exception!
      try { 
        mapConfiguration0.addPropertyDirect(""]"", map0);
        fail(""Expecting exception: UnsupportedOperationException"");
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.util.Collections$UnmodifiableMap"", e);
      }
  }"
110,"    protected void clearPropertyDirect(final String key) {
        map.remove(key);
    }","  public void test9()  throws Throwable  {
      Map<String, Lookup> map0 = ConfigurationInterpolator.getDefaultPrefixLookups();
      MapConfiguration mapConfiguration0 = new MapConfiguration(map0);
      // Undeclared exception!
      try { 
        mapConfiguration0.clearPropertyDirect((String) null);
        fail(""Expecting exception: UnsupportedOperationException"");
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.util.Collections$UnmodifiableMap"", e);
      }
  }"
111,"    protected Object getPropertyInternal(final String key) {
        final Object value = map.get(key);
        if (value instanceof String) {
            final Collection<String> list = getListDelimiterHandler().split((String) value, !isTrimmingDisabled());
            return list.size() > 1 ? list : list.iterator().next();
        }
        return value;
    }","  public void test10()  throws Throwable  {
      MapConfiguration mapConfiguration0 = new MapConfiguration((Map<String, ?>) null);
      mapConfiguration0.getMap();
      String string0 = """";
      // Undeclared exception!
      try { 
        mapConfiguration0.getPropertyInternal("""");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
112,"    protected boolean containsKeyInternal(final String key) {
        return map.containsKey(key);
    }","  public void test11()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put(""Georgian"", ""Georgian"");
      hashMap0.put("""", ""]"");
      hashMap0.put(""R$o7>;V`1J<"", ""]"");
      hashMap0.put("".,/ukQGV"", ""v'0Q(p!(ZG}WcVL"");
      hashMap0.put("""", (String) null);
      MapConfiguration mapConfiguration0 = new MapConfiguration(hashMap0);
      boolean boolean0 = mapConfiguration0.containsKeyInternal(""Georgian"");
}"
113,"    public String toString() {
        return getClass().getSimpleName() + "" [map="" + map + "", trimmingDisabled="" + trimmingDisabled + ""]"";
    }","  public void test12()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put(""Georgian"", ""Georgian"");
      hashMap0.put("""", ""]"");
      hashMap0.put(""R$o7>;V`1J<"", ""]"");
      hashMap0.put("".,/ukQGV"", ""v'0Q(p!(ZG}WcVL"");
      hashMap0.put("""", (String) null);
      MapConfiguration mapConfiguration0 = new MapConfiguration(hashMap0);
      boolean boolean0 = mapConfiguration0.containsKeyInternal(""Georgian"");
      String string0 = mapConfiguration0.toString();
}"
114,"    public boolean isTrimmingDisabled() {
        return trimmingDisabled;
    }","  public void test13()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put(""Georgian"", ""Georgian"");
      hashMap0.put("""", ""]"");
      hashMap0.put(""R$o7>;V`1J<"", ""]"");
      hashMap0.put("".,/ukQGV"", ""v'0Q(p!(ZG}WcVL"");
      hashMap0.put("""", (String) null);
      MapConfiguration mapConfiguration0 = new MapConfiguration(hashMap0);
      boolean boolean0 = mapConfiguration0.containsKeyInternal(""Georgian"");
      String string0 = mapConfiguration0.toString();
      ConfigurationLogger configurationLogger0 = new ConfigurationLogger(""org.postgresql.core.SqlCommand"");
      mapConfiguration0.setLogger(configurationLogger0);
      mapConfiguration0.getKeysInternal();
      boolean boolean1 = mapConfiguration0.isTrimmingDisabled();
}"
115,"    protected void addPropertyDirect(final String key, final Object value) {
        final Object previousValue = getProperty(key);

        if (previousValue == null) {
            map.put(key, value);
        } else if (previousValue instanceof List) {
            // the value is added to the existing list
            // Note: This is problematic. See header comment!
            ((List<Object>) previousValue).add(value);
        } else {
            // the previous value is replaced by a list containing the previous value and the new value
            final List<Object> list = new ArrayList<>();
            list.add(previousValue);
            list.add(value);

            map.put(key, list);
        }
    }","  public void test14()  throws Throwable  {
      EnvironmentConfiguration environmentConfiguration0 = new EnvironmentConfiguration();
      Integer integer0 = new Integer(159);
      EventType<ConfigurationEvent> eventType0 = ConfigurationEvent.CLEAR;
      ConfigurationEvent configurationEvent0 = new ConfigurationEvent(integer0, eventType0, ""Ncq<*QmYo"", environmentConfiguration0, false);
      configurationEvent0.toString();
      ConfigurationEvent configurationEvent1 = new ConfigurationEvent(configurationEvent0, configurationEvent0.ANY_HIERARCHICAL, ""poolIterators"", configurationEvent0, false);
      // Undeclared exception!
      try { 
        environmentConfiguration0.addPropertyDirect(""???"", configurationEvent1);
        fail(""Expecting exception: UnsupportedOperationException"");
      } catch(UnsupportedOperationException e) {
         //
         // EnvironmentConfiguration is read-only!
         //
         verifyException(""org.apache.commons.configuration2.EnvironmentConfiguration"", e);
      }
  }"
116,"    protected void addPropertyDirect(final String key, final Object value) {
        final Object previousValue = getProperty(key);

        if (previousValue == null) {
            map.put(key, value);
        } else if (previousValue instanceof List) {
            // the value is added to the existing list
            // Note: This is problematic. See header comment!
            ((List<Object>) previousValue).add(value);
        } else {
            // the previous value is replaced by a list containing the previous value and the new value
            final List<Object> list = new ArrayList<>();
            list.add(previousValue);
            list.add(value);

            map.put(key, list);
        }
    }","  public void test15()  throws Throwable  {
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      MapConfiguration mapConfiguration0 = new MapConfiguration(hashtable0);
      String string0 = null;
      // Undeclared exception!
      try { 
        mapConfiguration0.addPropertyDirect((String) null, hashtable0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
117,"    public boolean isTrimmingDisabled() {
        return trimmingDisabled;
    }","  public void test16()  throws Throwable  {
      Field[] fieldArray0 = new Field[0];
      Map<String, Integer> map0 = PgResultSet.createColumnNameIndexMap(fieldArray0, false);
      MapConfiguration mapConfiguration0 = new MapConfiguration(map0);
      mapConfiguration0.setTrimmingDisabled(false);
      mapConfiguration0.isTrimmingDisabled();
      mapConfiguration0.containsKeyInternal(""DP\""D"");
      mapConfiguration0.toString();
      mapConfiguration0.sizeInternal();
      mapConfiguration0.clone();
      mapConfiguration0.getFloat(""MapConfiguration [map={}, trimmingDisabled=false]"", (float) 0);
      Class<DummyLookup> class0 = DummyLookup.class;
      mapConfiguration0.getArray(class0, ""DP\""D"");
      mapConfiguration0.getMap();
      mapConfiguration0.clone();
      mapConfiguration0.containsKeyInternal(""?"");
      mapConfiguration0.containsKeyInternal("" TIME_ZONE = '"");
      mapConfiguration0.clearPropertyDirect("" TIME_ZONE = '"");
      mapConfiguration0.clearPropertyDirect("""");
      mapConfiguration0.clearPropertyDirect(""MapConfiguration [map={}, trimmingDisabled=false]"");
      mapConfiguration0.isTrimmingDisabled();
      mapConfiguration0.setTrimmingDisabled(true);
      mapConfiguration0.isEmptyInternal();
      Float float0 = new Float(0.0);
      mapConfiguration0.getFloat("" TIME_ZONE = '"", float0);
      mapConfiguration0.getPropertyInternal((String) null);
      boolean boolean0 = mapConfiguration0.isTrimmingDisabled();
}"
118,"    protected boolean isEmptyInternal() {
        return map.isEmpty();
    }","  public void test17()  throws Throwable  {
      SystemConfiguration systemConfiguration0 = new SystemConfiguration();
      systemConfiguration0.clearErrorListeners();
      Iterator<String> iterator0 = systemConfiguration0.getKeysInternal();
      systemConfiguration0.sizeInternal();
      String string0 = systemConfiguration0.toString();
      systemConfiguration0.addPropertyInternal(string0, iterator0);
      systemConfiguration0.isTrimmingDisabled();
      systemConfiguration0.sizeInternal();
      systemConfiguration0.getMap();
      systemConfiguration0.clearPropertyDirect(""tr-TR"");
      systemConfiguration0.setTrimmingDisabled(false);
      systemConfiguration0.getDouble(""v15"", (double) 107);
      PropertiesConfiguration propertiesConfiguration0 = new PropertiesConfiguration();
      systemConfiguration0.copyEventListeners(propertiesConfiguration0);
      systemConfiguration0.clearPropertyDirect("" [map="");
      boolean boolean0 = systemConfiguration0.isEmptyInternal();
}"
119,"    public boolean isTrimmingDisabled() {
        return trimmingDisabled;
    }","  public void test18()  throws Throwable  {
      SystemConfiguration systemConfiguration0 = new SystemConfiguration();
      systemConfiguration0.clearErrorListeners();
      Iterator<String> iterator0 = systemConfiguration0.getKeysInternal();
      systemConfiguration0.sizeInternal();
      String string0 = systemConfiguration0.toString();
      systemConfiguration0.addPropertyInternal(string0, iterator0);
      systemConfiguration0.isTrimmingDisabled();
      systemConfiguration0.sizeInternal();
      systemConfiguration0.getMap();
      systemConfiguration0.clearPropertyDirect(""tr-TR"");
      systemConfiguration0.setTrimmingDisabled(false);
      systemConfiguration0.getDouble(""v15"", (double) 107);
      PropertiesConfiguration propertiesConfiguration0 = new PropertiesConfiguration();
      systemConfiguration0.copyEventListeners(propertiesConfiguration0);
      systemConfiguration0.clearPropertyDirect("" [map="");
      boolean boolean0 = systemConfiguration0.isEmptyInternal();
      systemConfiguration0.sizeInternal();
      systemConfiguration0.clearPropertyDirect(""v15"");
      systemConfiguration0.clearPropertyDirect(""dlUl%>k3Iw~Jbc1"");
      systemConfiguration0.getKeysInternal();
      systemConfiguration0.clearPropertyDirect(""v15"");
      systemConfiguration0.toString();
      Integer integer0 = new Integer(108);
      systemConfiguration0.addPropertyDirect("""", integer0);
      systemConfiguration0.toString();
      systemConfiguration0.getKeysInternal();
}"
120,"    public boolean isTrimmingDisabled() {
        return trimmingDisabled;
    }","  public void test19()  throws Throwable  {
      SystemConfiguration systemConfiguration0 = new SystemConfiguration();
      systemConfiguration0.getFloat(""GSS_ENC_MODE"", 0.0F);
      systemConfiguration0.clone();
      systemConfiguration0.setDetailEvents(true);
      Lookup lookup0 = ConfigurationInterpolator.nullSafeLookup((Lookup) null);
      systemConfiguration0.addPropertyDirect(""GSS_ENC_MODE"", lookup0);
      systemConfiguration0.isEmptyInternal();
      systemConfiguration0.addPropertyDirect(""GSS_ENC_MODE"", (Object) null);
      systemConfiguration0.getPropertyInternal(""0RWg.)E"");
      systemConfiguration0.setTrimmingDisabled(true);
      Integer integer0 = Integer.valueOf((-1349));
      systemConfiguration0.addPropertyDirect(""0RWg.)E"", integer0);
}"
121,,"  public void test20()  throws Throwable  {
      EnvironmentConfiguration environmentConfiguration0 = new EnvironmentConfiguration();
      BigInteger bigInteger0 = NumberType.MIN_LONG_BI;
      Double double0 = new Double(6312.181287);
      environmentConfiguration0.getDouble("""", double0);
      bigInteger0.isProbablePrime(0);
      environmentConfiguration0.getBigInteger(""6H"", bigInteger0);
      environmentConfiguration0.getShort(""JG(3,VxCSGv"", (short)3713);
      // Undeclared exception!
      try { 
        environmentConfiguration0.interpolatedConfiguration();
        fail(""Expecting exception: UnsupportedOperationException"");
      } catch(UnsupportedOperationException e) {
         //
         // EnvironmentConfiguration is read-only!
         //
         verifyException(""org.apache.commons.configuration2.EnvironmentConfiguration"", e);
      }
  }"
122,"    public Object clone() {
        try {
            final MapConfiguration copy = (MapConfiguration) super.clone();
            // Safe because ConfigurationUtils returns a map of the same types.
            @SuppressWarnings(""unchecked"")
            final Map<String, Object> clonedMap = (Map<String, Object>) ConfigurationUtils.clone(map);
            copy.map = clonedMap;
            copy.cloneInterpolator(this);
            return copy;
        } catch (final CloneNotSupportedException cex) {
            // cannot happen
            throw new ConfigurationRuntimeException(cex);
        }
    }","  public void test21()  throws Throwable  {
      EnvironmentConfiguration environmentConfiguration0 = new EnvironmentConfiguration();
      ConfigurationInterpolator configurationInterpolator0 = new ConfigurationInterpolator();
      InterpolatorSpecification interpolatorSpecification0 = mock(InterpolatorSpecification.class, new ViolatedAssumptionAnswer());
      doReturn((Collection) null).when(interpolatorSpecification0).getDefaultLookups();
      doReturn((ConfigurationInterpolator) null).when(interpolatorSpecification0).getInterpolator();
      doReturn((ConfigurationInterpolator) null).when(interpolatorSpecification0).getParentInterpolator();
      doReturn((Map) null).when(interpolatorSpecification0).getPrefixLookups();
      doReturn((Function) null).when(interpolatorSpecification0).getStringConverter();
      ConfigurationInterpolator.fromSpecification(interpolatorSpecification0);
      configurationInterpolator0.prefixSet();
      configurationInterpolator0.getParentInterpolator();
      environmentConfiguration0.setInterpolator((ConfigurationInterpolator) null);
      ListDelimiterHandler listDelimiterHandler0 = environmentConfiguration0.getListDelimiterHandler();
      environmentConfiguration0.setListDelimiterHandler(listDelimiterHandler0);
      environmentConfiguration0.getPropertyInternal("""");
      environmentConfiguration0.getKeysInternal();
      // Undeclared exception!
      try { 
        environmentConfiguration0.clone();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.configuration2.AbstractConfiguration"", e);
      }
  }"
123,"    protected boolean containsKeyInternal(final String key) {
        return map.containsKey(key);
    }","  public void test22()  throws Throwable  {
      MapConfiguration mapConfiguration0 = new MapConfiguration((Map<String, ?>) null);
      EventType<ConfigurationEvent> eventType0 = ConfigurationEvent.CLEAR_TREE;
      EventType.fetchSuperEventTypes(eventType0);
      mapConfiguration0.getEventListeners(eventType0);
      // Undeclared exception!
      try { 
        mapConfiguration0.containsKeyInternal(""rV4;7"");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
      }
  }"
124,"    protected void clearPropertyDirect(final String key) {
        map.remove(key);
    }","  public void test23()  throws Throwable  {
      EnvironmentConfiguration environmentConfiguration0 = new EnvironmentConfiguration();
      environmentConfiguration0.sizeInternal();
      environmentConfiguration0.clone();
      String string0 = ""5/>FqDJdrF2+)=oZn"";
      environmentConfiguration0.getKeys(""5/>FqDJdrF2+)=oZn"");
      environmentConfiguration0.getMap();
      environmentConfiguration0.initLogger((ConfigurationLogger) null);
      environmentConfiguration0.toString();
      String string1 = """";
      // Undeclared exception!
      try { 
        environmentConfiguration0.clearPropertyDirect("""");
        fail(""Expecting exception: UnsupportedOperationException"");
      } catch(UnsupportedOperationException e) {
         //
         // EnvironmentConfiguration is read-only!
         //
         verifyException(""org.apache.commons.configuration2.EnvironmentConfiguration"", e);
      }
  }"
125,"    protected Iterator<String> getKeysInternal() {
        return map.keySet().iterator();
    }","  public void test24()  throws Throwable  {
      SystemConfiguration systemConfiguration0 = new SystemConfiguration();
      DummyLookup dummyLookup0 = DummyLookup.INSTANCE;
      systemConfiguration0.addPropertyDirect("",W.Mvyh0.:"", dummyLookup0);
      Iterator<String> iterator0 = systemConfiguration0.getKeysInternal();
}"
126,"    public boolean isTrimmingDisabled() {
        return trimmingDisabled;
    }","  public void test25()  throws Throwable  {
      SystemConfiguration systemConfiguration0 = new SystemConfiguration();
      Object object0 = systemConfiguration0.clone();
      systemConfiguration0.getKeys(""b@"");
      systemConfiguration0.isTrimmingDisabled();
}"
127,"    public boolean isTrimmingDisabled() {
        return trimmingDisabled;
    }","  public void test26()  throws Throwable  {
      SystemConfiguration systemConfiguration0 = new SystemConfiguration();
      systemConfiguration0.clearPropertyDirect("""");
}"
128,"    protected boolean containsKeyInternal(final String key) {
        return map.containsKey(key);
    }","  public void test27()  throws Throwable  {
      EnvironmentConfiguration environmentConfiguration0 = new EnvironmentConfiguration();
      boolean boolean0 = environmentConfiguration0.containsKeyInternal(""]"");
}"
129,"    public String toString() {
        return getClass().getSimpleName() + "" [map="" + map + "", trimmingDisabled="" + trimmingDisabled + ""]"";
    }","  public void test28()  throws Throwable  {
      SystemConfiguration systemConfiguration0 = new SystemConfiguration();
      String string0 = systemConfiguration0.toString();
}"
130,"    protected int sizeInternal() {
        return map.size();
    }","  public void test29()  throws Throwable  {
      EnvironmentConfiguration environmentConfiguration0 = new EnvironmentConfiguration();
      environmentConfiguration0.isTrimmingDisabled();
      environmentConfiguration0.beginWrite(false);
      environmentConfiguration0.isTrimmingDisabled();
      int int0 = environmentConfiguration0.sizeInternal();
}"
131,"    protected Object getPropertyInternal(final String key) {
        final Object value = map.get(key);
        if (value instanceof String) {
            final Collection<String> list = getListDelimiterHandler().split((String) value, !isTrimmingDisabled());
            return list.size() > 1 ? list : list.iterator().next();
        }
        return value;
    }","  public void test30()  throws Throwable  {
      EnvironmentConfiguration environmentConfiguration0 = new EnvironmentConfiguration();
      Object object0 = environmentConfiguration0.getPropertyInternal(""7f)Tn$1eb"");
}"
132,"    protected Object getPropertyInternal(final String key) {
        final Object value = map.get(key);
        if (value instanceof String) {
            final Collection<String> list = getListDelimiterHandler().split((String) value, !isTrimmingDisabled());
            return list.size() > 1 ? list : list.iterator().next();
        }
        return value;
    }","  public void test31()  throws Throwable  {
      PoolXADataSourceImpl poolXADataSourceImpl0 = new PoolXADataSourceImpl();
      poolXADataSourceImpl0.getPdbRoles();
      MapConfiguration mapConfiguration0 = new MapConfiguration((Properties) null);
      // Undeclared exception!
      try { 
        mapConfiguration0.getPropertyInternal(""oracle.security.client.default_username"");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
133,"    public boolean isTrimmingDisabled() {
        return trimmingDisabled;
    }","  public void test32()  throws Throwable  {
      EnvironmentConfiguration environmentConfiguration0 = new EnvironmentConfiguration();
      environmentConfiguration0.getKeysInternal();
      environmentConfiguration0.setTrimmingDisabled(false);
}"
134,"    protected boolean isEmptyInternal() {
        return map.isEmpty();
    }","  public void test33()  throws Throwable  {
      SystemConfiguration systemConfiguration0 = new SystemConfiguration();
      systemConfiguration0.clearInternal();
      boolean boolean0 = systemConfiguration0.containsKeyInternal(""pf=@9?-&CStn:gz6P+"");
      boolean boolean1 = systemConfiguration0.isEmptyInternal();
}"
135,"    public Map<String, Object> getMap() {
        return map;
    }","  public void test34()  throws Throwable  {
      SystemConfiguration systemConfiguration0 = new SystemConfiguration();
      systemConfiguration0.clearInternal();
      boolean boolean0 = systemConfiguration0.containsKeyInternal(""pf=@9?-&CStn:gz6P+"");
      boolean boolean1 = systemConfiguration0.isEmptyInternal();
      Map<String, Object> map0 = systemConfiguration0.getMap();
}"
136,"    public Map<String, Object> getMap() {
        return map;
    }","  public void test35()  throws Throwable  {
      Hashtable<String, Delayed> hashtable0 = new Hashtable<String, Delayed>();
      MapConfiguration mapConfiguration0 = new MapConfiguration(hashtable0);
      Map<String, Object> map0 = mapConfiguration0.getMap();
}"
137,"    protected Object getPropertyInternal(final String key) {
        final Object value = map.get(key);
        if (value instanceof String) {
            final Collection<String> list = getListDelimiterHandler().split((String) value, !isTrimmingDisabled());
            return list.size() > 1 ? list : list.iterator().next();
        }
        return value;
    }","  public void test36()  throws Throwable  {
      EnvironmentConfiguration environmentConfiguration0 = new EnvironmentConfiguration();
      environmentConfiguration0.sizeInternal();
      Object object0 = environmentConfiguration0.getPropertyInternal(""d:Z Q]]@#S('"");
}"
138,"    protected Object getPropertyInternal(final String key) {
        final Object value = map.get(key);
        if (value instanceof String) {
            final Collection<String> list = getListDelimiterHandler().split((String) value, !isTrimmingDisabled());
            return list.size() > 1 ? list : list.iterator().next();
        }
        return value;
    }","  public void test37()  throws Throwable  {
      EnvironmentConfiguration environmentConfiguration0 = new EnvironmentConfiguration();
      Object object0 = environmentConfiguration0.getPropertyInternal("">ByrRW"");
}"
139,"    public boolean isTrimmingDisabled() {
        return trimmingDisabled;
    }","  public void test38()  throws Throwable  {
      Hashtable<String, MapConfiguration> hashtable0 = new Hashtable<String, MapConfiguration>();
      MapConfiguration mapConfiguration0 = new MapConfiguration(hashtable0);
}"
140,"    public boolean isTrimmingDisabled() {
        return trimmingDisabled;
    }","  public void test39()  throws Throwable  {
      SystemConfiguration systemConfiguration0 = new SystemConfiguration();
      systemConfiguration0.setTrimmingDisabled(true);
      systemConfiguration0.setPropertyInternal(""getMaxRowSize"", ""getMaxRowSize"");
      systemConfiguration0.append(systemConfiguration0);
      boolean boolean0 = systemConfiguration0.containsKeyInternal(""H5='%m&VV~(A"");
}"
141,"    protected boolean containsKeyInternal(final String key) {
        return map.containsKey(key);
    }","  public void test40()  throws Throwable  {
      SystemConfiguration systemConfiguration0 = new SystemConfiguration();
      systemConfiguration0.setTrimmingDisabled(true);
      systemConfiguration0.setPropertyInternal(""getMaxRowSize"", ""getMaxRowSize"");
      systemConfiguration0.append(systemConfiguration0);
      boolean boolean0 = systemConfiguration0.containsKeyInternal(""H5='%m&VV~(A"");
}"
142,"    public String toString() {
        return getClass().getSimpleName() + "" [map="" + map + "", trimmingDisabled="" + trimmingDisabled + ""]"";
    }","  public void test41()  throws Throwable  {
      SystemConfiguration systemConfiguration0 = new SystemConfiguration();
      Iterator<String> iterator0 = systemConfiguration0.getKeysInternal();
      String string0 = systemConfiguration0.toString();
      systemConfiguration0.addPropertyInternal(string0, iterator0);
}"
143,"    protected boolean isEmptyInternal() {
        return map.isEmpty();
    }","  public void test42()  throws Throwable  {
      Field[] fieldArray0 = new Field[2];
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      MapConfiguration mapConfiguration0 = new MapConfiguration(hashMap0);
      Integer integer0 = new Integer(0);
      mapConfiguration0.addPropertyDirect(""gX0(3!>(}"", integer0);
      boolean boolean0 = mapConfiguration0.containsKeyInternal(""gX0(3!>(}"");
      mapConfiguration0.getMap();
      boolean boolean1 = mapConfiguration0.isEmptyInternal();
}"
144,"    public String toString() {
        return getClass().getSimpleName() + "" [map="" + map + "", trimmingDisabled="" + trimmingDisabled + ""]"";
    }","  public void test43()  throws Throwable  {
      Field[] fieldArray0 = new Field[2];
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      MapConfiguration mapConfiguration0 = new MapConfiguration(hashMap0);
      Integer integer0 = new Integer(0);
      mapConfiguration0.addPropertyDirect(""gX0(3!>(}"", integer0);
      boolean boolean0 = mapConfiguration0.containsKeyInternal(""gX0(3!>(}"");
      mapConfiguration0.getMap();
      boolean boolean1 = mapConfiguration0.isEmptyInternal();
      String string0 = mapConfiguration0.toString();
}"
145,"    protected boolean isEmptyInternal() {
        return map.isEmpty();
    }","  public void test44()  throws Throwable  {
      Hashtable<String, Integer> hashtable0 = new Hashtable<String, Integer>();
      MapConfiguration mapConfiguration0 = new MapConfiguration(hashtable0);
      Object object0 = mapConfiguration0.clone();
      boolean boolean0 = mapConfiguration0.isEmptyInternal();
}"
146,"    protected int sizeInternal() {
        return map.size();
    }","  public void test45()  throws Throwable  {
      Hashtable<String, Integer> hashtable0 = new Hashtable<String, Integer>();
      MapConfiguration mapConfiguration0 = new MapConfiguration(hashtable0);
      Object object0 = mapConfiguration0.clone();
      boolean boolean0 = mapConfiguration0.isEmptyInternal();
      mapConfiguration0.getKeysInternal();
      mapConfiguration0.sizeInternal();
}"
147,"    public static void transform(final Transformer transformer, final Source source, final Result result) throws ConfigurationException {
        try {
            transformer.transform(source, result);
        } catch (final TransformerException tex) {
            throw new ConfigurationException(tex);
        }
    }","  public void test0()  throws Throwable  {
      TransformerFactory transformerFactory0 = TransformerFactory.newInstance();
      Transformer transformer0 = XMLDocumentHelper.createTransformer(transformerFactory0);
      SAXSource sAXSource0 = new SAXSource();
      XMLEventWriter xMLEventWriter0 = mock(XMLEventWriter.class, new ViolatedAssumptionAnswer());
      StAXResult stAXResult0 = new StAXResult(xMLEventWriter0);
      XMLDocumentHelper.transform(transformer0, sAXSource0, stAXResult0);
  }"
148,"    public String getSourcePublicID() {
        return sourcePublicID;
    }","  public void test1()  throws Throwable  {
      HashMap<Node, Node> hashMap0 = new HashMap<Node, Node>();
      XMLDocumentHelper xMLDocumentHelper0 = new XMLDocumentHelper((Document) null, hashMap0, ""I"", "" q->Nk"");
      String string0 = xMLDocumentHelper0.getSourceSystemID();
}"
149,"    public String getSourceSystemID() {
        return sourceSystemID;
    }","  public void test2()  throws Throwable  {
      HashMap<Node, Node> hashMap0 = new HashMap<Node, Node>();
      XMLDocumentHelper xMLDocumentHelper0 = new XMLDocumentHelper((Document) null, hashMap0, ""I"", "" q->Nk"");
      String string0 = xMLDocumentHelper0.getSourceSystemID();
}"
150,"    public String getSourceSystemID() {
        return sourceSystemID;
    }","  public void test3()  throws Throwable  {
      HashMap<Node, Node> hashMap0 = new HashMap<Node, Node>();
      XMLDocumentHelper xMLDocumentHelper0 = new XMLDocumentHelper((Document) null, hashMap0, (String) null, """");
      String string0 = xMLDocumentHelper0.getSourceSystemID();
}"
151,"    public String getSourcePublicID() {
        return sourcePublicID;
    }","  public void test4()  throws Throwable  {
      XMLDocumentHelper xMLDocumentHelper0 = new XMLDocumentHelper((Document) null, (Map<Node, Node>) null, (String) null, ""org.apache.commons.io.file.Counters$NoopPathCounters"");
      String string0 = xMLDocumentHelper0.getSourcePublicID();
}"
152,"    public String getSourceSystemID() {
        return sourceSystemID;
    }","  public void test5()  throws Throwable  {
      HashMap<Node, Node> hashMap0 = new HashMap<Node, Node>();
      XMLDocumentHelper xMLDocumentHelper0 = new XMLDocumentHelper((Document) null, hashMap0, ""@Z}x/ds$vrOL,n;0lu"", """");
      String string0 = xMLDocumentHelper0.getSourcePublicID();
}"
153,"    public String getSourcePublicID() {
        return sourcePublicID;
    }","  public void test6()  throws Throwable  {
      HashMap<Node, Node> hashMap0 = new HashMap<Node, Node>();
      XMLDocumentHelper xMLDocumentHelper0 = new XMLDocumentHelper((Document) null, hashMap0, ""@Z}x/ds$vrOL,n;0lu"", """");
      String string0 = xMLDocumentHelper0.getSourcePublicID();
}"
154,"    public Map<Node, Node> getElementMapping() {
        return elementMapping;
    }","  public void test7()  throws Throwable  {
      XMLDocumentHelper xMLDocumentHelper0 = new XMLDocumentHelper((Document) null, (Map<Node, Node>) null, ""7WQ1^cgW~|EXwj##"", (String) null);
      Map<Node, Node> map0 = xMLDocumentHelper0.getElementMapping();
}"
155,"    public String getSourceSystemID() {
        return sourceSystemID;
    }","  public void test8()  throws Throwable  {
      HashMap<Node, Node> hashMap0 = new HashMap<Node, Node>();
      XMLDocumentHelper xMLDocumentHelper0 = new XMLDocumentHelper((Document) null, hashMap0, """", ""<"");
      xMLDocumentHelper0.getElementMapping();
}"
156,"    public String getSourcePublicID() {
        return sourcePublicID;
    }","  public void test9()  throws Throwable  {
      HashMap<Node, Node> hashMap0 = new HashMap<Node, Node>();
      XMLDocumentHelper xMLDocumentHelper0 = new XMLDocumentHelper((Document) null, hashMap0, """", ""<"");
      xMLDocumentHelper0.getElementMapping();
}"
157,"    public Map<Node, Node> getElementMapping() {
        return elementMapping;
    }","  public void test10()  throws Throwable  {
      XMLDocumentHelper xMLDocumentHelper0 = XMLDocumentHelper.forNewDocument(""org.apache.commons.configuration2.XMLDocumentHelper"");
      XMLDocumentHelper xMLDocumentHelper1 = xMLDocumentHelper0.createCopy();
      Map<Node, Node> map0 = xMLDocumentHelper1.getElementMapping();
}"
158,"    public String getSourcePublicID() {
        return sourcePublicID;
    }","  public void test11()  throws Throwable  {
      HashMap<Node, Node> hashMap0 = new HashMap<Node, Node>();
      XMLDocumentHelper xMLDocumentHelper0 = new XMLDocumentHelper((Document) null, hashMap0, ""I"", "" q->Nk"");
      xMLDocumentHelper0.getDocument();
}"
159,"    public String getSourceSystemID() {
        return sourceSystemID;
    }","  public void test12()  throws Throwable  {
      HashMap<Node, Node> hashMap0 = new HashMap<Node, Node>();
      XMLDocumentHelper xMLDocumentHelper0 = new XMLDocumentHelper((Document) null, hashMap0, ""I"", "" q->Nk"");
      xMLDocumentHelper0.getDocument();
}"
160,"    static DocumentBuilder createDocumentBuilder(final DocumentBuilderFactory factory) throws ConfigurationException {
        try {
            return factory.newDocumentBuilder();
        } catch (final ParserConfigurationException pcex) {
            throw new ConfigurationException(pcex);
        }
    }","  public void test13()  throws Throwable  {
      DocumentBuilderFactory documentBuilderFactory0 = DocumentBuilderFactory.newInstance();
      DocumentBuilder documentBuilder0 = XMLDocumentHelper.createDocumentBuilder(documentBuilderFactory0);
}"
161,"    public static void transform(final Transformer transformer, final Source source, final Result result) throws ConfigurationException {
        try {
            transformer.transform(source, result);
        } catch (final TransformerException tex) {
            throw new ConfigurationException(tex);
        }
    }","  public void test14()  throws Throwable  {
      TransformerFactory transformerFactory0 = TransformerFactory.newInstance();
      Transformer transformer0 = XMLDocumentHelper.createTransformer(transformerFactory0);
      DOMResult dOMResult0 = new DOMResult((Node) null, (Node) null);
      try { 
        XMLDocumentHelper.transform(transformer0, (Source) null, dOMResult0);
        fail(""Expecting exception: Exception"");
      } catch(Exception e) {
         //
         // javax.xml.transform.TransformerException: javax.xml.transform.TransformerException: Source object passed to ''{0}'' has no contents.
         //
         verifyException(""org.apache.commons.configuration2.XMLDocumentHelper"", e);
      }
  }"
162,"    public static XMLDocumentHelper forSourceDocument(final Document srcDoc) throws ConfigurationException {
        final String pubID;
        final String sysID;
        if (srcDoc.getDoctype() != null) {
            pubID = srcDoc.getDoctype().getPublicId();
            sysID = srcDoc.getDoctype().getSystemId();
        } else {
            pubID = null;
            sysID = null;
        }

        return new XMLDocumentHelper(copyDocument(srcDoc), emptyElementMapping(), pubID, sysID);
    }","  public void test15()  throws Throwable  {
      // Undeclared exception!
      try { 
        XMLDocumentHelper.forSourceDocument((Document) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.configuration2.XMLDocumentHelper"", e);
      }
  }"
163,"    public static XMLDocumentHelper forNewDocument(final String rootElementName) throws ConfigurationException {
        final Document doc = createDocumentBuilder(createDocumentBuilderFactory()).newDocument();
        final Element rootElem = doc.createElement(rootElementName);
        doc.appendChild(rootElem);
        return new XMLDocumentHelper(doc, emptyElementMapping(), null, null);
    }","  public void test16()  throws Throwable  {
      // Undeclared exception!
      try { 
        XMLDocumentHelper.forNewDocument(""/K%,#w"");
        fail(""Expecting exception: DOMException"");
      } catch(DOMException e) {
      }
  }"
164,"    public static Transformer createTransformer() throws ConfigurationException {
        return createTransformer(createTransformerFactory());
    }","  public void test17()  throws Throwable  {
      // Undeclared exception!
      try { 
        XMLDocumentHelper.createTransformer((TransformerFactory) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.configuration2.XMLDocumentHelper"", e);
      }
  }"
165,"    static DocumentBuilder createDocumentBuilder(final DocumentBuilderFactory factory) throws ConfigurationException {
        try {
            return factory.newDocumentBuilder();
        } catch (final ParserConfigurationException pcex) {
            throw new ConfigurationException(pcex);
        }
    }","  public void test18()  throws Throwable  {
      // Undeclared exception!
      try { 
        XMLDocumentHelper.createDocumentBuilder((DocumentBuilderFactory) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.configuration2.XMLDocumentHelper"", e);
      }
  }"
166,"    public XMLDocumentHelper createCopy() throws ConfigurationException {
        final Document docCopy = copyDocument(getDocument());
        return new XMLDocumentHelper(docCopy, createElementMapping(getDocument(), docCopy), getSourcePublicID(), getSourceSystemID());
    }","  public void test19()  throws Throwable  {
      XMLDocumentHelper xMLDocumentHelper0 = XMLDocumentHelper.forNewDocument(""org.apache.commons.confi:uration2.XMLDocumentHelper"");
      try { 
        xMLDocumentHelper0.createCopy();
        fail(""Expecting exception: Exception"");
      } catch(Exception e) {
         //
         // javax.xml.transform.TransformerException: java.lang.RuntimeException: Namespace for prefix 'org.apache.commons.confi' has not been declared.
         //
         verifyException(""org.apache.commons.configuration2.XMLDocumentHelper"", e);
      }
  }"
167,"    public XMLDocumentHelper createCopy() throws ConfigurationException {
        final Document docCopy = copyDocument(getDocument());
        return new XMLDocumentHelper(docCopy, createElementMapping(getDocument(), docCopy), getSourcePublicID(), getSourceSystemID());
    }","  public void test20()  throws Throwable  {
      HashMap<Node, Node> hashMap0 = new HashMap<Node, Node>();
      XMLDocumentHelper xMLDocumentHelper0 = new XMLDocumentHelper((Document) null, hashMap0, """", """");
      // Undeclared exception!
      try { 
        xMLDocumentHelper0.createCopy();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.configuration2.XMLDocumentHelper"", e);
      }
  }"
168,"    public static void transform(final Transformer transformer, final Source source, final Result result) throws ConfigurationException {
        try {
            transformer.transform(source, result);
        } catch (final TransformerException tex) {
            throw new ConfigurationException(tex);
        }
    }","  public void test21()  throws Throwable  {
      XMLStreamWriter xMLStreamWriter0 = mock(XMLStreamWriter.class, new ViolatedAssumptionAnswer());
      StAXResult stAXResult0 = new StAXResult(xMLStreamWriter0);
      // Undeclared exception!
      try { 
        XMLDocumentHelper.transform((Transformer) null, (Source) null, stAXResult0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.configuration2.XMLDocumentHelper"", e);
      }
  }"
169,"    public String getSourcePublicID() {
        return sourcePublicID;
    }","  public void test22()  throws Throwable  {
      HashMap<Node, Node> hashMap0 = new HashMap<Node, Node>();
      XMLDocumentHelper xMLDocumentHelper0 = new XMLDocumentHelper((Document) null, hashMap0, """", ""-<:Pp"");
      String string0 = xMLDocumentHelper0.getSourcePublicID();
}"
170,"    public String getSourceSystemID() {
        return sourceSystemID;
    }","  public void test23()  throws Throwable  {
      HashMap<Node, Node> hashMap0 = new HashMap<Node, Node>();
      XMLDocumentHelper xMLDocumentHelper0 = new XMLDocumentHelper((Document) null, hashMap0, """", ""-<:Pp"");
      String string0 = xMLDocumentHelper0.getSourcePublicID();
}"
171,"    public static Transformer createTransformer() throws ConfigurationException {
        return createTransformer(createTransformerFactory());
    }","  public void test24()  throws Throwable  {
      TransformerFactory transformerFactory0 = XMLDocumentHelper.createTransformerFactory();
      Transformer transformer0 = XMLDocumentHelper.createTransformer(transformerFactory0);
}"
172,"    public static Transformer createTransformer() throws ConfigurationException {
        return createTransformer(createTransformerFactory());
    }","  public void test25()  throws Throwable  {
      Transformer transformer0 = XMLDocumentHelper.createTransformer();
}"
173,"    public String getSourceSystemID() {
        return sourceSystemID;
    }","  public void test26()  throws Throwable  {
      XMLDocumentHelper xMLDocumentHelper0 = XMLDocumentHelper.forNewDocument(""org.apache.commons.io.filefilter.NotFileFilter"");
      String string0 = xMLDocumentHelper0.getSourceSystemID();
}"
174,"    public static XMLDocumentHelper forSourceDocument(final Document srcDoc) throws ConfigurationException {
        final String pubID;
        final String sysID;
        if (srcDoc.getDoctype() != null) {
            pubID = srcDoc.getDoctype().getPublicId();
            sysID = srcDoc.getDoctype().getSystemId();
        } else {
            pubID = null;
            sysID = null;
        }

        return new XMLDocumentHelper(copyDocument(srcDoc), emptyElementMapping(), pubID, sysID);
    }","  public void test27()  throws Throwable  {
      XMLDocumentHelper xMLDocumentHelper0 = XMLDocumentHelper.forNewDocument(""org.apwche.commons.configurqtion2.XMLDocumenhHelpe2"");
      Document document0 = xMLDocumentHelper0.getDocument();
      XMLDocumentHelper xMLDocumentHelper1 = XMLDocumentHelper.forSourceDocument(document0);
}"
175,"    protected void initSubConfigurationForThisParent(final SubnodeConfiguration subConfig) {
        initSubConfiguration(subConfig);
        subConfig.addEventListener(ConfigurationEvent.ANY, changeListener);
    }","  public void test0()  throws Throwable  {
      AbstractYAMLBasedConfiguration abstractYAMLBasedConfiguration0 = new AbstractYAMLBasedConfiguration();
      INIConfiguration iNIConfiguration0 = new INIConfiguration(abstractYAMLBasedConfiguration0);
      SubnodeConfiguration subnodeConfiguration0 = iNIConfiguration0.getSection("""");
      abstractYAMLBasedConfiguration0.initSubConfigurationForThisParent(subnodeConfiguration0);
}"
176,"    protected void subnodeConfigurationChanged(final ConfigurationEvent event) {
        fireEvent(ConfigurationEvent.SUBNODE_CHANGED, null, event, event.isBeforeUpdate());
    }","  public void test1()  throws Throwable  {
      BaseHierarchicalConfiguration baseHierarchicalConfiguration0 = new BaseHierarchicalConfiguration();
      YAMLConfiguration yAMLConfiguration0 = new YAMLConfiguration();
      EventType<ConfigurationEvent> eventType0 = ConfigurationEvent.ANY;
      Integer integer0 = new Integer(0);
      ConfigurationEvent configurationEvent0 = new ConfigurationEvent(yAMLConfiguration0, eventType0, ""Passed in key must select exactly one node (found %,d): %s"", integer0, true);
      baseHierarchicalConfiguration0.subnodeConfigurationChanged(configurationEvent0);
}"
177,"    public ImmutableHierarchicalConfiguration immutableConfigurationAt(final String key, final boolean supportUpdates) {
        return ConfigurationUtils.unmodifiableConfiguration(configurationAt(key, supportUpdates));
    }","  public void test2()  throws Throwable  {
      BaseHierarchicalConfiguration baseHierarchicalConfiguration0 = new BaseHierarchicalConfiguration((HierarchicalConfiguration<ImmutableNode>) null);
      Proxy proxy0 = (Proxy)baseHierarchicalConfiguration0.immutableConfigurationAt("""");
}"
178,"    protected InMemoryNodeModel getSubConfigurationParentModel() {
        return (InMemoryNodeModel) getModel();
    }","  public void test3()  throws Throwable  {
      BaseHierarchicalConfiguration baseHierarchicalConfiguration0 = new BaseHierarchicalConfiguration((NodeModel<ImmutableNode>) null);
      InMemoryNodeModel inMemoryNodeModel0 = baseHierarchicalConfiguration0.getSubConfigurationParentModel();
}"
179,"    protected InMemoryNodeModel getSubConfigurationParentModel() {
        return (InMemoryNodeModel) getModel();
    }","  public void test4()  throws Throwable  {
      AbstractYAMLBasedConfiguration abstractYAMLBasedConfiguration0 = new AbstractYAMLBasedConfiguration();
      InMemoryNodeModel inMemoryNodeModel0 = abstractYAMLBasedConfiguration0.getSubConfigurationParentModel();
}"
180,"    protected NodeSelector getSubConfigurationNodeSelector(final String key) {
        return new NodeSelector(key);
    }","  public void test5()  throws Throwable  {
      BaseHierarchicalConfiguration baseHierarchicalConfiguration0 = new BaseHierarchicalConfiguration();
      NodeSelector nodeSelector0 = baseHierarchicalConfiguration0.getSubConfigurationNodeSelector("""");
}"
181,"    public InMemoryNodeModel getNodeModel() {
        return (InMemoryNodeModel) super.getNodeModel();
    }","  public void test6()  throws Throwable  {
      INIConfiguration iNIConfiguration0 = new INIConfiguration();
      InMemoryNodeModel inMemoryNodeModel0 = iNIConfiguration0.getNodeModel();
}"
182,"    public List<HierarchicalConfiguration<ImmutableNode>> configurationsAt(final String key) {
        List<ImmutableNode> nodes;
        beginRead(false);
        try {
            nodes = fetchFilteredNodeResults(key);
        } finally {
            endRead();
        }

        final List<HierarchicalConfiguration<ImmutableNode>> results = new ArrayList<>(nodes.size());
        for (final ImmutableNode node : nodes) {
            final BaseHierarchicalConfiguration sub = createIndependentSubConfigurationForNode(node);
            results.add(sub);
        }

        return results;
    }","  public void test7()  throws Throwable  {
      XMLConfiguration xMLConfiguration0 = new XMLConfiguration();
      List<HierarchicalConfiguration<ImmutableNode>> list0 = xMLConfiguration0.configurationsAt(""4=d>O&O.x[S7?2_"", false);
}"
183,"    public List<HierarchicalConfiguration<ImmutableNode>> configurationsAt(final String key) {
        List<ImmutableNode> nodes;
        beginRead(false);
        try {
            nodes = fetchFilteredNodeResults(key);
        } finally {
            endRead();
        }

        final List<HierarchicalConfiguration<ImmutableNode>> results = new ArrayList<>(nodes.size());
        for (final ImmutableNode node : nodes) {
            final BaseHierarchicalConfiguration sub = createIndependentSubConfigurationForNode(node);
            results.add(sub);
        }

        return results;
    }","  public void test8()  throws Throwable  {
      BaseHierarchicalConfiguration baseHierarchicalConfiguration0 = new BaseHierarchicalConfiguration();
      List<HierarchicalConfiguration<ImmutableNode>> list0 = baseHierarchicalConfiguration0.configurationsAt(""org.hsqldb.rowio.RowOutputBase"");
}"
184,"    public HierarchicalConfiguration<ImmutableNode> configurationAt(final String key, final boolean supportUpdates) {
        beginRead(false);
        try {
            return supportUpdates ? createConnectedSubConfiguration(key) : createIndependentSubConfiguration(key);
        } finally {
            endRead();
        }
    }","  public void test9()  throws Throwable  {
      AbstractYAMLBasedConfiguration abstractYAMLBasedConfiguration0 = new AbstractYAMLBasedConfiguration();
      HierarchicalConfiguration<ImmutableNode> hierarchicalConfiguration0 = abstractYAMLBasedConfiguration0.configurationAt("""");
}"
185,"    public List<HierarchicalConfiguration<ImmutableNode>> childConfigurationsAt(final String key) {
        List<ImmutableNode> nodes;
        beginRead(false);
        try {
            nodes = fetchFilteredNodeResults(key);
        } finally {
            endRead();
        }

        if (nodes.size() != 1) {
            return Collections.emptyList();
        }

        final ImmutableNode parent = nodes.get(0);
        final List<HierarchicalConfiguration<ImmutableNode>> subs = new ArrayList<>(parent.getChildren().size());
        for (final ImmutableNode node : parent) {
            subs.add(createIndependentSubConfigurationForNode(node));
        }

        return subs;
    }","  public void test10()  throws Throwable  {
      INIConfiguration iNIConfiguration0 = new INIConfiguration();
      iNIConfiguration0.getSection(""org.apache.commons.configuration2.BaseHierarchicalConfiguration$BuilderVisitor"");
      List<HierarchicalConfiguration<ImmutableNode>> list0 = iNIConfiguration0.childConfigurationsAt((String) null, false);
}"
186,"    public Configuration subset(final String prefix) {
        beginRead(false);
        try {
            final List<QueryResult<ImmutableNode>> results = fetchNodeList(prefix);
            if (results.isEmpty()) {
                return new BaseHierarchicalConfiguration();
            }

            final BaseHierarchicalConfiguration parent = this;
            final BaseHierarchicalConfiguration result = new BaseHierarchicalConfiguration() {
                // Override interpolate to always interpolate on the parent
                @Override
                protected Object interpolate(final Object value) {
                    return parent.interpolate(value);
                }

                @Override
                public ConfigurationInterpolator getInterpolator() {
                    return parent.getInterpolator();
                }
            };
            result.getModel().setRootNode(createSubsetRootNode(results));

            if (result.isEmpty()) {
                return new BaseHierarchicalConfiguration();
            }
            result.setSynchronizer(getSynchronizer());
            return result;
        } finally {
            endRead();
        }
    }","  public void test11()  throws Throwable  {
      PatternSubtreeConfigurationWrapper patternSubtreeConfigurationWrapper0 = new PatternSubtreeConfigurationWrapper((HierarchicalConfiguration<ImmutableNode>) null, """");
      // Undeclared exception!
      try { 
        patternSubtreeConfigurationWrapper0.subset(""org.apache.commons.configuration2.BaseHierarchicalConfiguration$InterpolatedVisitor"");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.configuration2.PatternSubtreeConfigurationWrapper"", e);
      }
  }"
187,"    public Configuration subset(final String prefix) {
        beginRead(false);
        try {
            final List<QueryResult<ImmutableNode>> results = fetchNodeList(prefix);
            if (results.isEmpty()) {
                return new BaseHierarchicalConfiguration();
            }

            final BaseHierarchicalConfiguration parent = this;
            final BaseHierarchicalConfiguration result = new BaseHierarchicalConfiguration() {
                // Override interpolate to always interpolate on the parent
                @Override
                protected Object interpolate(final Object value) {
                    return parent.interpolate(value);
                }

                @Override
                public ConfigurationInterpolator getInterpolator() {
                    return parent.getInterpolator();
                }
            };
            result.getModel().setRootNode(createSubsetRootNode(results));

            if (result.isEmpty()) {
                return new BaseHierarchicalConfiguration();
            }
            result.setSynchronizer(getSynchronizer());
            return result;
        } finally {
            endRead();
        }
    }","  public void test12()  throws Throwable  {
      OverrideCombiner overrideCombiner0 = new OverrideCombiner();
      DynamicCombinedConfiguration dynamicCombinedConfiguration0 = new DynamicCombinedConfiguration(overrideCombiner0);
      BaseHierarchicalConfiguration baseHierarchicalConfiguration0 = (BaseHierarchicalConfiguration)dynamicCombinedConfiguration0.subset(""T"");
}"
188,"    public Configuration interpolatedConfiguration() {
        final InterpolatedVisitor visitor = new InterpolatedVisitor();
        final NodeHandler<ImmutableNode> handler = getModel().getNodeHandler();
        NodeTreeWalker.INSTANCE.walkDFS(handler.getRootNode(), visitor, handler);

        final BaseHierarchicalConfiguration c = (BaseHierarchicalConfiguration) clone();
        c.getNodeModel().setRootNode(visitor.getInterpolatedRoot());
        return c;
    }","  public void test13()  throws Throwable  {
      INIConfiguration iNIConfiguration0 = new INIConfiguration();
      PatternSubtreeConfigurationWrapper patternSubtreeConfigurationWrapper0 = new PatternSubtreeConfigurationWrapper(iNIConfiguration0, ""hsqldb.log_size"");
      // Undeclared exception!
      try { 
        patternSubtreeConfigurationWrapper0.interpolatedConfiguration();
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // Passed in key must select exactly one node (found 0): hsqldb.log_size
         //
         verifyException(""org.apache.commons.configuration2.BaseHierarchicalConfiguration"", e);
      }
  }"
189,"    public Configuration interpolatedConfiguration() {
        final InterpolatedVisitor visitor = new InterpolatedVisitor();
        final NodeHandler<ImmutableNode> handler = getModel().getNodeHandler();
        NodeTreeWalker.INSTANCE.walkDFS(handler.getRootNode(), visitor, handler);

        final BaseHierarchicalConfiguration c = (BaseHierarchicalConfiguration) clone();
        c.getNodeModel().setRootNode(visitor.getInterpolatedRoot());
        return c;
    }","  public void test14()  throws Throwable  {
      BaseHierarchicalConfiguration baseHierarchicalConfiguration0 = new BaseHierarchicalConfiguration((NodeModel<ImmutableNode>) null);
      // Undeclared exception!
      try { 
        baseHierarchicalConfiguration0.interpolatedConfiguration();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.configuration2.BaseHierarchicalConfiguration"", e);
      }
  }"
190,"    public Configuration interpolatedConfiguration() {
        final InterpolatedVisitor visitor = new InterpolatedVisitor();
        final NodeHandler<ImmutableNode> handler = getModel().getNodeHandler();
        NodeTreeWalker.INSTANCE.walkDFS(handler.getRootNode(), visitor, handler);

        final BaseHierarchicalConfiguration c = (BaseHierarchicalConfiguration) clone();
        c.getNodeModel().setRootNode(visitor.getInterpolatedRoot());
        return c;
    }","  public void test15()  throws Throwable  {
      AbstractYAMLBasedConfiguration abstractYAMLBasedConfiguration0 = new AbstractYAMLBasedConfiguration();
      abstractYAMLBasedConfiguration0.setInterpolator((ConfigurationInterpolator) null);
      // Undeclared exception!
      try { 
        abstractYAMLBasedConfiguration0.interpolatedConfiguration();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.configuration2.AbstractConfiguration"", e);
      }
  }"
191,"    public Configuration interpolatedConfiguration() {
        final InterpolatedVisitor visitor = new InterpolatedVisitor();
        final NodeHandler<ImmutableNode> handler = getModel().getNodeHandler();
        NodeTreeWalker.INSTANCE.walkDFS(handler.getRootNode(), visitor, handler);

        final BaseHierarchicalConfiguration c = (BaseHierarchicalConfiguration) clone();
        c.getNodeModel().setRootNode(visitor.getInterpolatedRoot());
        return c;
    }","  public void test16()  throws Throwable  {
      AbstractYAMLBasedConfiguration abstractYAMLBasedConfiguration0 = new AbstractYAMLBasedConfiguration();
      INIConfiguration iNIConfiguration0 = new INIConfiguration(abstractYAMLBasedConfiguration0);
      SubnodeConfiguration subnodeConfiguration0 = iNIConfiguration0.getSection("""");
      NodeSelector nodeSelector0 = new NodeSelector("""");
      SubnodeConfiguration subnodeConfiguration1 = subnodeConfiguration0.createSubConfigurationForTrackedNode(nodeSelector0, abstractYAMLBasedConfiguration0);
      // Undeclared exception!
      try { 
        subnodeConfiguration1.interpolatedConfiguration();
        fail(""Expecting exception: ClassCastException"");
      } catch(ClassCastException e) {
         //
         // org.apache.commons.configuration2.tree.TrackedNodeModel cannot be cast to org.apache.commons.configuration2.tree.InMemoryNodeModel
         //
         verifyException(""org.apache.commons.configuration2.SubnodeConfiguration"", e);
      }
  }"
192,"    protected void initSubConfigurationForThisParent(final SubnodeConfiguration subConfig) {
        initSubConfiguration(subConfig);
        subConfig.addEventListener(ConfigurationEvent.ANY, changeListener);
    }","  public void test17()  throws Throwable  {
      BaseHierarchicalConfiguration baseHierarchicalConfiguration0 = new BaseHierarchicalConfiguration();
      // Undeclared exception!
      try { 
        baseHierarchicalConfiguration0.initSubConfigurationForThisParent((SubnodeConfiguration) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.configuration2.BaseHierarchicalConfiguration"", e);
      }
  }"
193,"    public List<ImmutableHierarchicalConfiguration> immutableConfigurationsAt(final String key) {
        return toImmutable(configurationsAt(key));
    }","  public void test18()  throws Throwable  {
      INIConfiguration iNIConfiguration0 = new INIConfiguration();
      SubnodeConfiguration subnodeConfiguration0 = iNIConfiguration0.getSection("""");
      BaseHierarchicalConfiguration baseHierarchicalConfiguration0 = new BaseHierarchicalConfiguration(subnodeConfiguration0);
      NodeSelector nodeSelector0 = new NodeSelector("""");
      SubnodeConfiguration subnodeConfiguration1 = baseHierarchicalConfiguration0.createSubConfigurationForTrackedNode(nodeSelector0, subnodeConfiguration0);
      // Undeclared exception!
      try { 
        subnodeConfiguration1.immutableConfigurationsAt("""");
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // No tracked node found: org.apache.commons.configuration2.tree.NodeSelector@3a[keys=[]]
         //
         verifyException(""org.apache.commons.configuration2.tree.NodeTracker"", e);
      }
  }"
194,"    public List<ImmutableHierarchicalConfiguration> immutableConfigurationsAt(final String key) {
        return toImmutable(configurationsAt(key));
    }","  public void test19()  throws Throwable  {
      PatternSubtreeConfigurationWrapper patternSubtreeConfigurationWrapper0 = new PatternSubtreeConfigurationWrapper((HierarchicalConfiguration<ImmutableNode>) null, """");
      // Undeclared exception!
      try { 
        patternSubtreeConfigurationWrapper0.immutableConfigurationsAt("""");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.configuration2.PatternSubtreeConfigurationWrapper"", e);
      }
  }"
195,"    public List<ImmutableHierarchicalConfiguration> immutableConfigurationsAt(final String key) {
        return toImmutable(configurationsAt(key));
    }","  public void test20()  throws Throwable  {
      BaseHierarchicalConfiguration baseHierarchicalConfiguration0 = new BaseHierarchicalConfiguration((NodeModel<ImmutableNode>) null);
      // Undeclared exception!
      try { 
        baseHierarchicalConfiguration0.immutableConfigurationsAt(""$H!:oz|db5"");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.configuration2.BaseHierarchicalConfiguration"", e);
      }
  }"
196,"    public ImmutableHierarchicalConfiguration immutableConfigurationAt(final String key, final boolean supportUpdates) {
        return ConfigurationUtils.unmodifiableConfiguration(configurationAt(key, supportUpdates));
    }","  public void test21()  throws Throwable  {
      BaseHierarchicalConfiguration baseHierarchicalConfiguration0 = new BaseHierarchicalConfiguration();
      // Undeclared exception!
      try { 
        baseHierarchicalConfiguration0.immutableConfigurationAt(""%Sy`92}h#/R)/,oT"", false);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // Passed in key must select exactly one node (found 0): %Sy`92}h#/R)/,oT
         //
         verifyException(""org.apache.commons.configuration2.BaseHierarchicalConfiguration"", e);
      }
  }"
197,"    public ImmutableHierarchicalConfiguration immutableConfigurationAt(final String key, final boolean supportUpdates) {
        return ConfigurationUtils.unmodifiableConfiguration(configurationAt(key, supportUpdates));
    }","  public void test22()  throws Throwable  {
      PatternSubtreeConfigurationWrapper patternSubtreeConfigurationWrapper0 = new PatternSubtreeConfigurationWrapper((HierarchicalConfiguration<ImmutableNode>) null, """");
      // Undeclared exception!
      try { 
        patternSubtreeConfigurationWrapper0.immutableConfigurationAt(""d2)?WK{\""_"", false);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.configuration2.PatternSubtreeConfigurationWrapper"", e);
      }
  }"
198,"    public ImmutableHierarchicalConfiguration immutableConfigurationAt(final String key, final boolean supportUpdates) {
        return ConfigurationUtils.unmodifiableConfiguration(configurationAt(key, supportUpdates));
    }","  public void test23()  throws Throwable  {
      UnionCombiner unionCombiner0 = new UnionCombiner();
      DynamicCombinedConfiguration dynamicCombinedConfiguration0 = new DynamicCombinedConfiguration(unionCombiner0);
      // Undeclared exception!
      try { 
        dynamicCombinedConfiguration0.immutableConfigurationAt(""4S"", false);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // Passed in key must select exactly one node (found 0): 4S
         //
         verifyException(""org.apache.commons.configuration2.BaseHierarchicalConfiguration"", e);
      }
  }"
199,"    public ImmutableHierarchicalConfiguration immutableConfigurationAt(final String key, final boolean supportUpdates) {
        return ConfigurationUtils.unmodifiableConfiguration(configurationAt(key, supportUpdates));
    }","  public void test24()  throws Throwable  {
      JSONConfiguration jSONConfiguration0 = new JSONConfiguration();
      INIConfiguration iNIConfiguration0 = new INIConfiguration(jSONConfiguration0);
      SubnodeConfiguration subnodeConfiguration0 = iNIConfiguration0.getSection("".k-E%pT"");
      NodeModel<ImmutableNode> nodeModel0 = subnodeConfiguration0.cloneNodeModel();
      BaseHierarchicalConfiguration baseHierarchicalConfiguration0 = new BaseHierarchicalConfiguration(nodeModel0);
      // Undeclared exception!
      try { 
        baseHierarchicalConfiguration0.immutableConfigurationAt(""1(y+]]2m"", true);
        fail(""Expecting exception: ClassCastException"");
      } catch(ClassCastException e) {
         //
         // org.apache.commons.configuration2.tree.TrackedNodeModel cannot be cast to org.apache.commons.configuration2.tree.InMemoryNodeModel
         //
         verifyException(""org.apache.commons.configuration2.BaseHierarchicalConfiguration"", e);
      }
  }"
200,"    public ImmutableHierarchicalConfiguration immutableConfigurationAt(final String key, final boolean supportUpdates) {
        return ConfigurationUtils.unmodifiableConfiguration(configurationAt(key, supportUpdates));
    }","  public void test25()  throws Throwable  {
      AbstractYAMLBasedConfiguration abstractYAMLBasedConfiguration0 = new AbstractYAMLBasedConfiguration();
      PatternSubtreeConfigurationWrapper patternSubtreeConfigurationWrapper0 = new PatternSubtreeConfigurationWrapper(abstractYAMLBasedConfiguration0, """");
      // Undeclared exception!
      try { 
        patternSubtreeConfigurationWrapper0.immutableConfigurationAt((String) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.configuration2.PatternSubtreeConfigurationWrapper"", e);
      }
  }"
201,"    public ImmutableHierarchicalConfiguration immutableConfigurationAt(final String key, final boolean supportUpdates) {
        return ConfigurationUtils.unmodifiableConfiguration(configurationAt(key, supportUpdates));
    }","  public void test26()  throws Throwable  {
      DynamicCombinedConfiguration dynamicCombinedConfiguration0 = new DynamicCombinedConfiguration();
      // Undeclared exception!
      try { 
        dynamicCombinedConfiguration0.immutableConfigurationAt(""nL"");
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // Passed in key must select exactly one node (found 0): nL
         //
         verifyException(""org.apache.commons.configuration2.BaseHierarchicalConfiguration"", e);
      }
  }"
202,"    public List<ImmutableHierarchicalConfiguration> immutableChildConfigurationsAt(final String key) {
        return toImmutable(childConfigurationsAt(key));
    }","  public void test27()  throws Throwable  {
      XMLConfiguration xMLConfiguration0 = new XMLConfiguration();
      NodeSelector nodeSelector0 = new NodeSelector(""k/|Ree4ki'"");
      TrackedNodeModel trackedNodeModel0 = new TrackedNodeModel(xMLConfiguration0, nodeSelector0, true);
      SubnodeConfiguration subnodeConfiguration0 = new SubnodeConfiguration(xMLConfiguration0, trackedNodeModel0);
      // Undeclared exception!
      try { 
        subnodeConfiguration0.immutableChildConfigurationsAt(""k/|Ree4ki'"");
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // No tracked node found: org.apache.commons.configuration2.tree.NodeSelector@13[keys=[k/|Ree4ki']]
         //
         verifyException(""org.apache.commons.configuration2.tree.NodeTracker"", e);
      }
  }"
203,"    public List<ImmutableHierarchicalConfiguration> immutableChildConfigurationsAt(final String key) {
        return toImmutable(childConfigurationsAt(key));
    }","  public void test28()  throws Throwable  {
      JSONConfiguration jSONConfiguration0 = new JSONConfiguration();
      NodeSelector nodeSelector0 = new NodeSelector((String) null);
      TrackedNodeModel trackedNodeModel0 = mock(TrackedNodeModel.class, new ViolatedAssumptionAnswer());
      doReturn((NodeHandler) null).when(trackedNodeModel0).getNodeHandler();
      doReturn(nodeSelector0).when(trackedNodeModel0).getSelector();
      SubnodeConfiguration subnodeConfiguration0 = new SubnodeConfiguration(jSONConfiguration0, trackedNodeModel0);
      // Undeclared exception!
      try { 
        subnodeConfiguration0.immutableChildConfigurationsAt(""TIMESTAMP"");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.configuration2.BaseHierarchicalConfiguration"", e);
      }
  }"
204,"    protected InMemoryNodeModel getSubConfigurationParentModel() {
        return (InMemoryNodeModel) getModel();
    }","  public void test29()  throws Throwable  {
      XMLConfiguration xMLConfiguration0 = new XMLConfiguration((HierarchicalConfiguration<ImmutableNode>) null);
      INIConfiguration iNIConfiguration0 = new INIConfiguration(xMLConfiguration0);
      SubnodeConfiguration subnodeConfiguration0 = iNIConfiguration0.getSection(""p`\"")F )DF<<{h"");
      NodeSelector nodeSelector0 = new NodeSelector(""p`\"")F )DF<<{h"");
      TrackedNodeModel trackedNodeModel0 = new TrackedNodeModel(xMLConfiguration0, nodeSelector0, false);
      SubnodeConfiguration subnodeConfiguration1 = new SubnodeConfiguration(subnodeConfiguration0, trackedNodeModel0);
      SubnodeConfiguration subnodeConfiguration2 = subnodeConfiguration1.createSubConfigurationForTrackedNode(nodeSelector0, subnodeConfiguration0);
      SubnodeConfiguration subnodeConfiguration3 = subnodeConfiguration2.createSubConfigurationForTrackedNode(nodeSelector0, subnodeConfiguration0);
      // Undeclared exception!
      try { 
        subnodeConfiguration3.getSubConfigurationParentModel();
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // No tracked node found: org.apache.commons.configuration2.tree.NodeSelector@46[keys=[p`\"")F )DF<<{h]]
         //
         verifyException(""org.apache.commons.configuration2.tree.NodeTracker"", e);
      }
  }"
205,"    protected InMemoryNodeModel getSubConfigurationParentModel() {
        return (InMemoryNodeModel) getModel();
    }","  public void test30()  throws Throwable  {
      CombinedConfiguration combinedConfiguration0 = new CombinedConfiguration();
      InMemoryNodeModel inMemoryNodeModel0 = new InMemoryNodeModel();
      NodeSelector nodeSelector0 = inMemoryNodeModel0.trackChildNodeWithCreation("""", "" char of CLOB data cannot be read"", combinedConfiguration0);
      MergeCombiner mergeCombiner0 = new MergeCombiner();
      DynamicCombinedConfiguration dynamicCombinedConfiguration0 = new DynamicCombinedConfiguration(mergeCombiner0);
      SubnodeConfiguration subnodeConfiguration0 = combinedConfiguration0.createSubConfigurationForTrackedNode(nodeSelector0, dynamicCombinedConfiguration0);
      InMemoryNodeModel inMemoryNodeModel1 = subnodeConfiguration0.getSubConfigurationParentModel();
}"
206,"    public InMemoryNodeModel getNodeModel() {
        return (InMemoryNodeModel) super.getNodeModel();
    }","  public void test31()  throws Throwable  {
      XMLConfiguration xMLConfiguration0 = new XMLConfiguration((HierarchicalConfiguration<ImmutableNode>) null);
      NodeSelector nodeSelector0 = new NodeSelector("""");
      TrackedNodeModel trackedNodeModel0 = new TrackedNodeModel(xMLConfiguration0, nodeSelector0, true);
      SubnodeConfiguration subnodeConfiguration0 = new SubnodeConfiguration(xMLConfiguration0, trackedNodeModel0);
      // Undeclared exception!
      try { 
        subnodeConfiguration0.getNodeModel();
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // No tracked node found: org.apache.commons.configuration2.tree.NodeSelector@13[keys=[]]
         //
         verifyException(""org.apache.commons.configuration2.tree.NodeTracker"", e);
      }
  }"
207,"    public InMemoryNodeModel getNodeModel() {
        return (InMemoryNodeModel) super.getNodeModel();
    }","  public void test32()  throws Throwable  {
      DynamicCombinedConfiguration dynamicCombinedConfiguration0 = new DynamicCombinedConfiguration();
      InMemoryNodeModel inMemoryNodeModel0 = dynamicCombinedConfiguration0.getNodeModel();
}"
208,"    protected SubnodeConfiguration createSubConfigurationForTrackedNode(final NodeSelector selector, final InMemoryNodeModelSupport parentModelSupport) {
        final SubnodeConfiguration subConfig = new SubnodeConfiguration(this, new TrackedNodeModel(parentModelSupport, selector, true));
        initSubConfigurationForThisParent(subConfig);
        return subConfig;
    }","  public void test33()  throws Throwable  {
      PatternSubtreeConfigurationWrapper patternSubtreeConfigurationWrapper0 = new PatternSubtreeConfigurationWrapper((HierarchicalConfiguration<ImmutableNode>) null, ""~gf\""F>_"");
      NodeSelector nodeSelector0 = new NodeSelector("""");
      // Undeclared exception!
      try { 
        patternSubtreeConfigurationWrapper0.createSubConfigurationForTrackedNode(nodeSelector0, patternSubtreeConfigurationWrapper0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.configuration2.PatternSubtreeConfigurationWrapper"", e);
      }
  }"
209,"    protected SubnodeConfiguration createSubConfigurationForTrackedNode(final NodeSelector selector, final InMemoryNodeModelSupport parentModelSupport) {
        final SubnodeConfiguration subConfig = new SubnodeConfiguration(this, new TrackedNodeModel(parentModelSupport, selector, true));
        initSubConfigurationForThisParent(subConfig);
        return subConfig;
    }","  public void test34()  throws Throwable  {
      UnionCombiner unionCombiner0 = new UnionCombiner();
      CombinedConfiguration combinedConfiguration0 = new CombinedConfiguration(unionCombiner0);
      NodeSelector nodeSelector0 = new NodeSelector("""");
      // Undeclared exception!
      try { 
        combinedConfiguration0.createSubConfigurationForTrackedNode(nodeSelector0, (InMemoryNodeModelSupport) null);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Underlying model support must not be null!
         //
         verifyException(""org.apache.commons.configuration2.tree.TrackedNodeModel"", e);
      }
  }"
210,"    public List<HierarchicalConfiguration<ImmutableNode>> configurationsAt(final String key) {
        List<ImmutableNode> nodes;
        beginRead(false);
        try {
            nodes = fetchFilteredNodeResults(key);
        } finally {
            endRead();
        }

        final List<HierarchicalConfiguration<ImmutableNode>> results = new ArrayList<>(nodes.size());
        for (final ImmutableNode node : nodes) {
            final BaseHierarchicalConfiguration sub = createIndependentSubConfigurationForNode(node);
            results.add(sub);
        }

        return results;
    }","  public void test35()  throws Throwable  {
      XMLConfiguration xMLConfiguration0 = new XMLConfiguration();
      NodeSelector nodeSelector0 = new NodeSelector(""org.apache.commons.configuration2.BaseHierarchicalConfiguration"");
      TrackedNodeModel trackedNodeModel0 = new TrackedNodeModel(xMLConfiguration0, nodeSelector0, true);
      BaseHierarchicalConfiguration baseHierarchicalConfiguration0 = new BaseHierarchicalConfiguration(trackedNodeModel0);
      // Undeclared exception!
      try { 
        baseHierarchicalConfiguration0.configurationsAt(""E0"", false);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // No tracked node found: org.apache.commons.configuration2.tree.NodeSelector@13[keys=[org.apache.commons.configuration2.BaseHierarchicalConfiguration]]
         //
         verifyException(""org.apache.commons.configuration2.tree.NodeTracker"", e);
      }
  }"
211,"    public List<HierarchicalConfiguration<ImmutableNode>> configurationsAt(final String key) {
        List<ImmutableNode> nodes;
        beginRead(false);
        try {
            nodes = fetchFilteredNodeResults(key);
        } finally {
            endRead();
        }

        final List<HierarchicalConfiguration<ImmutableNode>> results = new ArrayList<>(nodes.size());
        for (final ImmutableNode node : nodes) {
            final BaseHierarchicalConfiguration sub = createIndependentSubConfigurationForNode(node);
            results.add(sub);
        }

        return results;
    }","  public void test36()  throws Throwable  {
      UnionCombiner unionCombiner0 = new UnionCombiner();
      DynamicCombinedConfiguration dynamicCombinedConfiguration0 = new DynamicCombinedConfiguration(unionCombiner0);
      List<HierarchicalConfiguration<ImmutableNode>> list0 = dynamicCombinedConfiguration0.configurationsAt(""9w"", true);
}"
212,"    public List<HierarchicalConfiguration<ImmutableNode>> configurationsAt(final String key) {
        List<ImmutableNode> nodes;
        beginRead(false);
        try {
            nodes = fetchFilteredNodeResults(key);
        } finally {
            endRead();
        }

        final List<HierarchicalConfiguration<ImmutableNode>> results = new ArrayList<>(nodes.size());
        for (final ImmutableNode node : nodes) {
            final BaseHierarchicalConfiguration sub = createIndependentSubConfigurationForNode(node);
            results.add(sub);
        }

        return results;
    }","  public void test37()  throws Throwable  {
      INIConfiguration iNIConfiguration0 = new INIConfiguration();
      SubnodeConfiguration subnodeConfiguration0 = iNIConfiguration0.getSection("""");
      NodeModel<ImmutableNode> nodeModel0 = subnodeConfiguration0.cloneNodeModel();
      BaseHierarchicalConfiguration baseHierarchicalConfiguration0 = new BaseHierarchicalConfiguration(nodeModel0);
      // Undeclared exception!
      try { 
        baseHierarchicalConfiguration0.configurationsAt(""l"", true);
        fail(""Expecting exception: ClassCastException"");
      } catch(ClassCastException e) {
         //
         // org.apache.commons.configuration2.tree.TrackedNodeModel cannot be cast to org.apache.commons.configuration2.tree.InMemoryNodeModel
         //
         verifyException(""org.apache.commons.configuration2.BaseHierarchicalConfiguration"", e);
      }
  }"
213,"    public List<HierarchicalConfiguration<ImmutableNode>> configurationsAt(final String key) {
        List<ImmutableNode> nodes;
        beginRead(false);
        try {
            nodes = fetchFilteredNodeResults(key);
        } finally {
            endRead();
        }

        final List<HierarchicalConfiguration<ImmutableNode>> results = new ArrayList<>(nodes.size());
        for (final ImmutableNode node : nodes) {
            final BaseHierarchicalConfiguration sub = createIndependentSubConfigurationForNode(node);
            results.add(sub);
        }

        return results;
    }","  public void test38()  throws Throwable  {
      INIConfiguration iNIConfiguration0 = new INIConfiguration();
      NodeSelector nodeSelector0 = new NodeSelector("""");
      TrackedNodeModel trackedNodeModel0 = new TrackedNodeModel(iNIConfiguration0, nodeSelector0, true);
      SubnodeConfiguration subnodeConfiguration0 = new SubnodeConfiguration(iNIConfiguration0, trackedNodeModel0);
      // Undeclared exception!
      try { 
        subnodeConfiguration0.configurationsAt(""Passed in key must select exactly one node (found %,d): %s"");
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // No tracked node found: org.apache.commons.configuration2.tree.NodeSelector@11[keys=[]]
         //
         verifyException(""org.apache.commons.configuration2.tree.NodeTracker"", e);
      }
  }"
214,"    public List<HierarchicalConfiguration<ImmutableNode>> configurationsAt(final String key) {
        List<ImmutableNode> nodes;
        beginRead(false);
        try {
            nodes = fetchFilteredNodeResults(key);
        } finally {
            endRead();
        }

        final List<HierarchicalConfiguration<ImmutableNode>> results = new ArrayList<>(nodes.size());
        for (final ImmutableNode node : nodes) {
            final BaseHierarchicalConfiguration sub = createIndependentSubConfigurationForNode(node);
            results.add(sub);
        }

        return results;
    }","  public void test39()  throws Throwable  {
      DynamicCombinedConfiguration dynamicCombinedConfiguration0 = new DynamicCombinedConfiguration();
      List<HierarchicalConfiguration<ImmutableNode>> list0 = dynamicCombinedConfiguration0.configurationsAt(""Rbg<X$>w>"");
}"
215,"    public HierarchicalConfiguration<ImmutableNode> configurationAt(final String key, final boolean supportUpdates) {
        beginRead(false);
        try {
            return supportUpdates ? createConnectedSubConfiguration(key) : createIndependentSubConfiguration(key);
        } finally {
            endRead();
        }
    }","  public void test40()  throws Throwable  {
      PatternSubtreeConfigurationWrapper patternSubtreeConfigurationWrapper0 = new PatternSubtreeConfigurationWrapper((HierarchicalConfiguration<ImmutableNode>) null, ""032NZl)7$0"");
      // Undeclared exception!
      try { 
        patternSubtreeConfigurationWrapper0.configurationAt(""032NZl)7$0"", true);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.configuration2.PatternSubtreeConfigurationWrapper"", e);
      }
  }"
216,"    public HierarchicalConfiguration<ImmutableNode> configurationAt(final String key, final boolean supportUpdates) {
        beginRead(false);
        try {
            return supportUpdates ? createConnectedSubConfiguration(key) : createIndependentSubConfiguration(key);
        } finally {
            endRead();
        }
    }","  public void test41()  throws Throwable  {
      BaseHierarchicalConfiguration baseHierarchicalConfiguration0 = new BaseHierarchicalConfiguration((NodeModel<ImmutableNode>) null);
      // Undeclared exception!
      try { 
        baseHierarchicalConfiguration0.configurationAt(""i]'"", false);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.configuration2.BaseHierarchicalConfiguration"", e);
      }
  }"
217,"    protected NodeModel<ImmutableNode> cloneNodeModel() {
        return new InMemoryNodeModel(getModel().getNodeHandler().getRootNode());
    }","  public void test42()  throws Throwable  {
      InMemoryNodeModel inMemoryNodeModel0 = new InMemoryNodeModel();
      UnionCombiner unionCombiner0 = new UnionCombiner();
      CombinedConfiguration combinedConfiguration0 = new CombinedConfiguration(unionCombiner0);
      JSONConfiguration jSONConfiguration0 = new JSONConfiguration();
      NodeSelector nodeSelector0 = inMemoryNodeModel0.trackChildNodeWithCreation("""", """", jSONConfiguration0);
      TrackedNodeModel trackedNodeModel0 = new TrackedNodeModel(combinedConfiguration0, nodeSelector0, false);
      SubnodeConfiguration subnodeConfiguration0 = new SubnodeConfiguration(combinedConfiguration0, trackedNodeModel0);
      // Undeclared exception!
      try { 
        subnodeConfiguration0.cloneNodeModel();
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // Selector does not select unique node: org.apache.commons.configuration2.tree.NodeSelector@51[keys=[(0)]]
         //
         verifyException(""org.apache.commons.configuration2.tree.NodeTracker"", e);
      }
  }"
218,"    protected NodeModel<ImmutableNode> cloneNodeModel() {
        return new InMemoryNodeModel(getModel().getNodeHandler().getRootNode());
    }","  public void test43()  throws Throwable  {
      AbstractYAMLBasedConfiguration abstractYAMLBasedConfiguration0 = new AbstractYAMLBasedConfiguration((HierarchicalConfiguration<ImmutableNode>) null);
      INIConfiguration iNIConfiguration0 = new INIConfiguration((HierarchicalConfiguration<ImmutableNode>) null);
      NodeSelector nodeSelector0 = new NodeSelector(""org.apache.commons.configuration2.BaseHierarchicalConfiguration$BuilderVisitor"");
      TrackedNodeModel trackedNodeModel0 = new TrackedNodeModel(iNIConfiguration0, nodeSelector0, true);
      SubnodeConfiguration subnodeConfiguration0 = new SubnodeConfiguration(abstractYAMLBasedConfiguration0, trackedNodeModel0);
      SubnodeConfiguration subnodeConfiguration1 = subnodeConfiguration0.createSubConfigurationForTrackedNode(nodeSelector0, iNIConfiguration0);
      // Undeclared exception!
      try { 
        subnodeConfiguration1.cloneNodeModel();
        fail(""Expecting exception: ClassCastException"");
      } catch(ClassCastException e) {
         //
         // org.apache.commons.configuration2.tree.TrackedNodeModel cannot be cast to org.apache.commons.configuration2.tree.InMemoryNodeModel
         //
         verifyException(""org.apache.commons.configuration2.SubnodeConfiguration"", e);
      }
  }"
219,"    public List<HierarchicalConfiguration<ImmutableNode>> childConfigurationsAt(final String key) {
        List<ImmutableNode> nodes;
        beginRead(false);
        try {
            nodes = fetchFilteredNodeResults(key);
        } finally {
            endRead();
        }

        if (nodes.size() != 1) {
            return Collections.emptyList();
        }

        final ImmutableNode parent = nodes.get(0);
        final List<HierarchicalConfiguration<ImmutableNode>> subs = new ArrayList<>(parent.getChildren().size());
        for (final ImmutableNode node : parent) {
            subs.add(createIndependentSubConfigurationForNode(node));
        }

        return subs;
    }","  public void test44()  throws Throwable  {
      PatternSubtreeConfigurationWrapper patternSubtreeConfigurationWrapper0 = new PatternSubtreeConfigurationWrapper((HierarchicalConfiguration<ImmutableNode>) null, ""lL,O:zw"");
      // Undeclared exception!
      try { 
        patternSubtreeConfigurationWrapper0.childConfigurationsAt(""lL,O:zw"", true);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.configuration2.PatternSubtreeConfigurationWrapper"", e);
      }
  }"
220,"    public List<HierarchicalConfiguration<ImmutableNode>> childConfigurationsAt(final String key) {
        List<ImmutableNode> nodes;
        beginRead(false);
        try {
            nodes = fetchFilteredNodeResults(key);
        } finally {
            endRead();
        }

        if (nodes.size() != 1) {
            return Collections.emptyList();
        }

        final ImmutableNode parent = nodes.get(0);
        final List<HierarchicalConfiguration<ImmutableNode>> subs = new ArrayList<>(parent.getChildren().size());
        for (final ImmutableNode node : parent) {
            subs.add(createIndependentSubConfigurationForNode(node));
        }

        return subs;
    }","  public void test45()  throws Throwable  {
      BaseHierarchicalConfiguration baseHierarchicalConfiguration0 = new BaseHierarchicalConfiguration((NodeModel<ImmutableNode>) null);
      // Undeclared exception!
      try { 
        baseHierarchicalConfiguration0.childConfigurationsAt((String) null, false);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.configuration2.BaseHierarchicalConfiguration"", e);
      }
  }"
221,"    public List<HierarchicalConfiguration<ImmutableNode>> childConfigurationsAt(final String key) {
        List<ImmutableNode> nodes;
        beginRead(false);
        try {
            nodes = fetchFilteredNodeResults(key);
        } finally {
            endRead();
        }

        if (nodes.size() != 1) {
            return Collections.emptyList();
        }

        final ImmutableNode parent = nodes.get(0);
        final List<HierarchicalConfiguration<ImmutableNode>> subs = new ArrayList<>(parent.getChildren().size());
        for (final ImmutableNode node : parent) {
            subs.add(createIndependentSubConfigurationForNode(node));
        }

        return subs;
    }","  public void test46()  throws Throwable  {
      XMLConfiguration xMLConfiguration0 = new XMLConfiguration();
      NodeSelector nodeSelector0 = new NodeSelector(""g:LAL"");
      SubnodeConfiguration subnodeConfiguration0 = xMLConfiguration0.createSubConfigurationForTrackedNode(nodeSelector0, xMLConfiguration0);
      // Undeclared exception!
      try { 
        subnodeConfiguration0.childConfigurationsAt("""");
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // No tracked node found: org.apache.commons.configuration2.tree.NodeSelector@13[keys=[g:LAL]]
         //
         verifyException(""org.apache.commons.configuration2.tree.NodeTracker"", e);
      }
  }"
222,"    public List<HierarchicalConfiguration<ImmutableNode>> childConfigurationsAt(final String key) {
        List<ImmutableNode> nodes;
        beginRead(false);
        try {
            nodes = fetchFilteredNodeResults(key);
        } finally {
            endRead();
        }

        if (nodes.size() != 1) {
            return Collections.emptyList();
        }

        final ImmutableNode parent = nodes.get(0);
        final List<HierarchicalConfiguration<ImmutableNode>> subs = new ArrayList<>(parent.getChildren().size());
        for (final ImmutableNode node : parent) {
            subs.add(createIndependentSubConfigurationForNode(node));
        }

        return subs;
    }","  public void test47()  throws Throwable  {
      DynamicCombinedConfiguration dynamicCombinedConfiguration0 = new DynamicCombinedConfiguration();
      List<HierarchicalConfiguration<ImmutableNode>> list0 = dynamicCombinedConfiguration0.childConfigurationsAt(""nqp-xN}HlPX{>\""TG*"");
}"
223,"    public List<HierarchicalConfiguration<ImmutableNode>> childConfigurationsAt(final String key) {
        List<ImmutableNode> nodes;
        beginRead(false);
        try {
            nodes = fetchFilteredNodeResults(key);
        } finally {
            endRead();
        }

        if (nodes.size() != 1) {
            return Collections.emptyList();
        }

        final ImmutableNode parent = nodes.get(0);
        final List<HierarchicalConfiguration<ImmutableNode>> subs = new ArrayList<>(parent.getChildren().size());
        for (final ImmutableNode node : parent) {
            subs.add(createIndependentSubConfigurationForNode(node));
        }

        return subs;
    }","  public void test48()  throws Throwable  {
      YAMLConfiguration yAMLConfiguration0 = new YAMLConfiguration();
      NodeSelector nodeSelector0 = new NodeSelector("""");
      TrackedNodeModel trackedNodeModel0 = new TrackedNodeModel(yAMLConfiguration0, nodeSelector0, true);
      BaseHierarchicalConfiguration baseHierarchicalConfiguration0 = new BaseHierarchicalConfiguration(trackedNodeModel0);
      SubnodeConfiguration subnodeConfiguration0 = yAMLConfiguration0.createSubConfigurationForTrackedNode(nodeSelector0, baseHierarchicalConfiguration0);
      // Undeclared exception!
      try { 
        subnodeConfiguration0.childConfigurationsAt(""_V]e)_?"");
        fail(""Expecting exception: ClassCastException"");
      } catch(ClassCastException e) {
         //
         // org.apache.commons.configuration2.tree.TrackedNodeModel cannot be cast to org.apache.commons.configuration2.tree.InMemoryNodeModel
         //
         verifyException(""org.apache.commons.configuration2.BaseHierarchicalConfiguration"", e);
      }
  }"
224,"    public BaseHierarchicalConfiguration() {
        this((HierarchicalConfiguration<ImmutableNode>) null);
    }","  public void test49()  throws Throwable  {
      JSONConfiguration jSONConfiguration0 = new JSONConfiguration();
      TrackedNodeModel trackedNodeModel0 = mock(TrackedNodeModel.class, new ViolatedAssumptionAnswer());
      doReturn((NodeSelector) null).when(trackedNodeModel0).getSelector();
      SubnodeConfiguration subnodeConfiguration0 = new SubnodeConfiguration(jSONConfiguration0, trackedNodeModel0);
      BaseHierarchicalConfiguration baseHierarchicalConfiguration0 = null;
      try {
        baseHierarchicalConfiguration0 = new BaseHierarchicalConfiguration(subnodeConfiguration0);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // No tracked node found: null
         //
         verifyException(""org.apache.commons.configuration2.tree.NodeTracker"", e);
      }
  }"
225,"    public BaseHierarchicalConfiguration() {
        this((HierarchicalConfiguration<ImmutableNode>) null);
    }","  public void test50()  throws Throwable  {
      BaseHierarchicalConfiguration baseHierarchicalConfiguration0 = new BaseHierarchicalConfiguration((NodeModel<ImmutableNode>) null);
      BaseHierarchicalConfiguration baseHierarchicalConfiguration1 = null;
      try {
        baseHierarchicalConfiguration1 = new BaseHierarchicalConfiguration(baseHierarchicalConfiguration0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.configuration2.BaseHierarchicalConfiguration"", e);
      }
  }"
226,"    public BaseHierarchicalConfiguration() {
        this((HierarchicalConfiguration<ImmutableNode>) null);
    }","  public void test51()  throws Throwable  {
      DynamicCombinedConfiguration dynamicCombinedConfiguration0 = new DynamicCombinedConfiguration();
      BaseHierarchicalConfiguration baseHierarchicalConfiguration0 = new BaseHierarchicalConfiguration(dynamicCombinedConfiguration0);
}"
227,"    public Configuration interpolatedConfiguration() {
        final InterpolatedVisitor visitor = new InterpolatedVisitor();
        final NodeHandler<ImmutableNode> handler = getModel().getNodeHandler();
        NodeTreeWalker.INSTANCE.walkDFS(handler.getRootNode(), visitor, handler);

        final BaseHierarchicalConfiguration c = (BaseHierarchicalConfiguration) clone();
        c.getNodeModel().setRootNode(visitor.getInterpolatedRoot());
        return c;
    }","  public void test52()  throws Throwable  {
      YAMLConfiguration yAMLConfiguration0 = new YAMLConfiguration();
      Configuration configuration0 = yAMLConfiguration0.interpolatedConfiguration();
      yAMLConfiguration0.setPropertyInternal(""n4YqQEFA\""~+cUIUqv"", configuration0);
      Configuration configuration1 = yAMLConfiguration0.interpolatedConfiguration();
}"
228,"    public List<HierarchicalConfiguration<ImmutableNode>> childConfigurationsAt(final String key) {
        List<ImmutableNode> nodes;
        beginRead(false);
        try {
            nodes = fetchFilteredNodeResults(key);
        } finally {
            endRead();
        }

        if (nodes.size() != 1) {
            return Collections.emptyList();
        }

        final ImmutableNode parent = nodes.get(0);
        final List<HierarchicalConfiguration<ImmutableNode>> subs = new ArrayList<>(parent.getChildren().size());
        for (final ImmutableNode node : parent) {
            subs.add(createIndependentSubConfigurationForNode(node));
        }

        return subs;
    }","  public void test53()  throws Throwable  {
      BaseHierarchicalConfiguration baseHierarchicalConfiguration0 = new BaseHierarchicalConfiguration();
      INIConfiguration iNIConfiguration0 = new INIConfiguration();
      PatternSubtreeConfigurationWrapper patternSubtreeConfigurationWrapper0 = new PatternSubtreeConfigurationWrapper(iNIConfiguration0, ""!]w , *\""} <ZvsB"");
      baseHierarchicalConfiguration0.setProperty(""!]w , *\""} <ZvsB"", patternSubtreeConfigurationWrapper0);
      List<HierarchicalConfiguration<ImmutableNode>> list0 = baseHierarchicalConfiguration0.childConfigurationsAt("""");
}"
229,"    public List<HierarchicalConfiguration<ImmutableNode>> childConfigurationsAt(final String key) {
        List<ImmutableNode> nodes;
        beginRead(false);
        try {
            nodes = fetchFilteredNodeResults(key);
        } finally {
            endRead();
        }

        if (nodes.size() != 1) {
            return Collections.emptyList();
        }

        final ImmutableNode parent = nodes.get(0);
        final List<HierarchicalConfiguration<ImmutableNode>> subs = new ArrayList<>(parent.getChildren().size());
        for (final ImmutableNode node : parent) {
            subs.add(createIndependentSubConfigurationForNode(node));
        }

        return subs;
    }","  public void test54()  throws Throwable  {
      AbstractYAMLBasedConfiguration abstractYAMLBasedConfiguration0 = new AbstractYAMLBasedConfiguration();
      List<HierarchicalConfiguration<ImmutableNode>> list0 = abstractYAMLBasedConfiguration0.childConfigurationsAt("""");
}"
230,"    public List<HierarchicalConfiguration<ImmutableNode>> childConfigurationsAt(final String key) {
        List<ImmutableNode> nodes;
        beginRead(false);
        try {
            nodes = fetchFilteredNodeResults(key);
        } finally {
            endRead();
        }

        if (nodes.size() != 1) {
            return Collections.emptyList();
        }

        final ImmutableNode parent = nodes.get(0);
        final List<HierarchicalConfiguration<ImmutableNode>> subs = new ArrayList<>(parent.getChildren().size());
        for (final ImmutableNode node : parent) {
            subs.add(createIndependentSubConfigurationForNode(node));
        }

        return subs;
    }","  public void test55()  throws Throwable  {
      BaseHierarchicalConfiguration baseHierarchicalConfiguration0 = new BaseHierarchicalConfiguration();
      List<HierarchicalConfiguration<ImmutableNode>> list0 = baseHierarchicalConfiguration0.childConfigurationsAt(""vW2887{J?|]4u9<1M"");
}"
231,"    public List<HierarchicalConfiguration<ImmutableNode>> configurationsAt(final String key) {
        List<ImmutableNode> nodes;
        beginRead(false);
        try {
            nodes = fetchFilteredNodeResults(key);
        } finally {
            endRead();
        }

        final List<HierarchicalConfiguration<ImmutableNode>> results = new ArrayList<>(nodes.size());
        for (final ImmutableNode node : nodes) {
            final BaseHierarchicalConfiguration sub = createIndependentSubConfigurationForNode(node);
            results.add(sub);
        }

        return results;
    }","  public void test56()  throws Throwable  {
      XMLConfiguration xMLConfiguration0 = new XMLConfiguration();
      List<HierarchicalConfiguration<ImmutableNode>> list0 = xMLConfiguration0.configurationsAt((String) null);
}"
232,"    public HierarchicalConfiguration<ImmutableNode> configurationAt(final String key, final boolean supportUpdates) {
        beginRead(false);
        try {
            return supportUpdates ? createConnectedSubConfiguration(key) : createIndependentSubConfiguration(key);
        } finally {
            endRead();
        }
    }","  public void test57()  throws Throwable  {
      XMLConfiguration xMLConfiguration0 = new XMLConfiguration();
      JSONConfiguration jSONConfiguration0 = new JSONConfiguration(xMLConfiguration0);
      HierarchicalConfiguration<ImmutableNode> hierarchicalConfiguration0 = jSONConfiguration0.configurationAt("""", true);
}"
233,"    public HierarchicalConfiguration<ImmutableNode> configurationAt(final String key, final boolean supportUpdates) {
        beginRead(false);
        try {
            return supportUpdates ? createConnectedSubConfiguration(key) : createIndependentSubConfiguration(key);
        } finally {
            endRead();
        }
    }","  public void test58()  throws Throwable  {
      BaseHierarchicalConfiguration baseHierarchicalConfiguration0 = new BaseHierarchicalConfiguration((HierarchicalConfiguration<ImmutableNode>) null);
      // Undeclared exception!
      try { 
        baseHierarchicalConfiguration0.configurationAt(""org.apache.commons.configuration2.BaseHierarchicalConfiguration$1"", false);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // Passed in key must select exactly one node (found 0): org.apache.commons.configuration2.BaseHierarchicalConfiguration$1
         //
         verifyException(""org.apache.commons.configuration2.BaseHierarchicalConfiguration"", e);
      }
  }"
234,"    public InMemoryNodeModel getNodeModel() {
        return (InMemoryNodeModel) super.getNodeModel();
    }","  public void test59()  throws Throwable  {
      BaseHierarchicalConfiguration baseHierarchicalConfiguration0 = new BaseHierarchicalConfiguration((NodeModel<ImmutableNode>) null);
      InMemoryNodeModel inMemoryNodeModel0 = baseHierarchicalConfiguration0.getNodeModel();
}"
235,"    public HierarchicalConfiguration<ImmutableNode> configurationAt(final String key, final boolean supportUpdates) {
        beginRead(false);
        try {
            return supportUpdates ? createConnectedSubConfiguration(key) : createIndependentSubConfiguration(key);
        } finally {
            endRead();
        }
    }","  public void test60()  throws Throwable  {
      BaseHierarchicalConfiguration baseHierarchicalConfiguration0 = new BaseHierarchicalConfiguration((NodeModel<ImmutableNode>) null);
      // Undeclared exception!
      try { 
        baseHierarchicalConfiguration0.configurationAt("""");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.configuration2.BaseHierarchicalConfiguration"", e);
      }
  }"
236,"    protected InMemoryNodeModel getSubConfigurationParentModel() {
        return (InMemoryNodeModel) getModel();
    }","  public void test61()  throws Throwable  {
      AbstractYAMLBasedConfiguration abstractYAMLBasedConfiguration0 = new AbstractYAMLBasedConfiguration();
      PatternSubtreeConfigurationWrapper patternSubtreeConfigurationWrapper0 = new PatternSubtreeConfigurationWrapper(abstractYAMLBasedConfiguration0, """");
      NodeSelector nodeSelector0 = new NodeSelector("""");
      TrackedNodeModel trackedNodeModel0 = new TrackedNodeModel(patternSubtreeConfigurationWrapper0, nodeSelector0, false);
      BaseHierarchicalConfiguration baseHierarchicalConfiguration0 = new BaseHierarchicalConfiguration(trackedNodeModel0);
      // Undeclared exception!
      try { 
        baseHierarchicalConfiguration0.getSubConfigurationParentModel();
        fail(""Expecting exception: ClassCastException"");
      } catch(ClassCastException e) {
         //
         // org.apache.commons.configuration2.tree.TrackedNodeModel cannot be cast to org.apache.commons.configuration2.tree.InMemoryNodeModel
         //
         verifyException(""org.apache.commons.configuration2.BaseHierarchicalConfiguration"", e);
      }
  }"
237,,"  public void test62()  throws Throwable  {
      XMLConfiguration xMLConfiguration0 = new XMLConfiguration();
      xMLConfiguration0.setProperty(""org.apache.commons.configuration2.BaseHierarchicalConfiguration$BuilderVisitor"", ""org.apache.commons.configuration2.BaseHierarchicalConfiguration$BuilderVisitor"");
      xMLConfiguration0.addPropertyInternal(""org.apache.commons.configuration2.BaseHierarchicalConfiguration$BuilderVisitor"", ""org.apache.commons.configuration2.BaseHierarchicalConfiguration$BuilderVisitor"");
      Transformer transformer0 = xMLConfiguration0.createTransformer();
      // Undeclared exception!
      try { 
        xMLConfiguration0.write((Writer) null, transformer0);
        fail(""Expecting exception: DOMException"");
      } catch(DOMException e) {
      }
  }"
238,"    public List<ImmutableHierarchicalConfiguration> immutableChildConfigurationsAt(final String key) {
        return toImmutable(childConfigurationsAt(key));
    }","  public void test63()  throws Throwable  {
      YAMLConfiguration yAMLConfiguration0 = new YAMLConfiguration();
      yAMLConfiguration0.setPropertyInternal(""n4YqQEFA\""~+cUIUqv"", yAMLConfiguration0);
      List<ImmutableHierarchicalConfiguration> list0 = yAMLConfiguration0.immutableChildConfigurationsAt("""");
}"
239,"    public List<HierarchicalConfiguration<ImmutableNode>> configurationsAt(final String key) {
        List<ImmutableNode> nodes;
        beginRead(false);
        try {
            nodes = fetchFilteredNodeResults(key);
        } finally {
            endRead();
        }

        final List<HierarchicalConfiguration<ImmutableNode>> results = new ArrayList<>(nodes.size());
        for (final ImmutableNode node : nodes) {
            final BaseHierarchicalConfiguration sub = createIndependentSubConfigurationForNode(node);
            results.add(sub);
        }

        return results;
    }","  public void test64()  throws Throwable  {
      AbstractYAMLBasedConfiguration abstractYAMLBasedConfiguration0 = new AbstractYAMLBasedConfiguration();
      List<HierarchicalConfiguration<ImmutableNode>> list0 = abstractYAMLBasedConfiguration0.configurationsAt("""", true);
}"
240,"    public List<HierarchicalConfiguration<ImmutableNode>> childConfigurationsAt(final String key) {
        List<ImmutableNode> nodes;
        beginRead(false);
        try {
            nodes = fetchFilteredNodeResults(key);
        } finally {
            endRead();
        }

        if (nodes.size() != 1) {
            return Collections.emptyList();
        }

        final ImmutableNode parent = nodes.get(0);
        final List<HierarchicalConfiguration<ImmutableNode>> subs = new ArrayList<>(parent.getChildren().size());
        for (final ImmutableNode node : parent) {
            subs.add(createIndependentSubConfigurationForNode(node));
        }

        return subs;
    }","  public void test65()  throws Throwable  {
      INIConfiguration iNIConfiguration0 = new INIConfiguration();
      List<HierarchicalConfiguration<ImmutableNode>> list0 = iNIConfiguration0.childConfigurationsAt(""n4YqQEFA\""~+cUIUqv"", true);
}"
241,"    public Configuration subset(final String prefix) {
        beginRead(false);
        try {
            final List<QueryResult<ImmutableNode>> results = fetchNodeList(prefix);
            if (results.isEmpty()) {
                return new BaseHierarchicalConfiguration();
            }

            final BaseHierarchicalConfiguration parent = this;
            final BaseHierarchicalConfiguration result = new BaseHierarchicalConfiguration() {
                // Override interpolate to always interpolate on the parent
                @Override
                protected Object interpolate(final Object value) {
                    return parent.interpolate(value);
                }

                @Override
                public ConfigurationInterpolator getInterpolator() {
                    return parent.getInterpolator();
                }
            };
            result.getModel().setRootNode(createSubsetRootNode(results));

            if (result.isEmpty()) {
                return new BaseHierarchicalConfiguration();
            }
            result.setSynchronizer(getSynchronizer());
            return result;
        } finally {
            endRead();
        }
    }","  public void test66()  throws Throwable  {
      INIConfiguration iNIConfiguration0 = new INIConfiguration();
      YAMLConfiguration yAMLConfiguration0 = new YAMLConfiguration(iNIConfiguration0);
      yAMLConfiguration0.setPropertyInternal(""n4YqQEFA\""~+cUIUqv"", yAMLConfiguration0);
      Configuration configuration0 = yAMLConfiguration0.subset(""n4YqQEFA\""~+cUIUqv"");
}"
242,"    public Configuration subset(final String prefix) {
        beginRead(false);
        try {
            final List<QueryResult<ImmutableNode>> results = fetchNodeList(prefix);
            if (results.isEmpty()) {
                return new BaseHierarchicalConfiguration();
            }

            final BaseHierarchicalConfiguration parent = this;
            final BaseHierarchicalConfiguration result = new BaseHierarchicalConfiguration() {
                // Override interpolate to always interpolate on the parent
                @Override
                protected Object interpolate(final Object value) {
                    return parent.interpolate(value);
                }

                @Override
                public ConfigurationInterpolator getInterpolator() {
                    return parent.getInterpolator();
                }
            };
            result.getModel().setRootNode(createSubsetRootNode(results));

            if (result.isEmpty()) {
                return new BaseHierarchicalConfiguration();
            }
            result.setSynchronizer(getSynchronizer());
            return result;
        } finally {
            endRead();
        }
    }","  public void test67()  throws Throwable  {
      BaseHierarchicalConfiguration baseHierarchicalConfiguration0 = new BaseHierarchicalConfiguration();
      BaseHierarchicalConfiguration baseHierarchicalConfiguration1 = (BaseHierarchicalConfiguration)baseHierarchicalConfiguration0.subset(""xmH~{2k"");
}"
243,"    public ImmutableHierarchicalConfiguration immutableConfigurationAt(final String key, final boolean supportUpdates) {
        return ConfigurationUtils.unmodifiableConfiguration(configurationAt(key, supportUpdates));
    }","  public void test68()  throws Throwable  {
      XMLConfiguration xMLConfiguration0 = new XMLConfiguration();
      Proxy proxy0 = (Proxy)xMLConfiguration0.immutableConfigurationAt((String) null, false);
}"
244,"    public List<ImmutableHierarchicalConfiguration> immutableChildConfigurationsAt(final String key) {
        return toImmutable(childConfigurationsAt(key));
    }","  public void test69()  throws Throwable  {
      AbstractYAMLBasedConfiguration abstractYAMLBasedConfiguration0 = new AbstractYAMLBasedConfiguration();
      List<ImmutableHierarchicalConfiguration> list0 = abstractYAMLBasedConfiguration0.immutableChildConfigurationsAt("""");
}"
245,"    public ImmutableHierarchicalConfiguration immutableConfigurationAt(final String key, final boolean supportUpdates) {
        return ConfigurationUtils.unmodifiableConfiguration(configurationAt(key, supportUpdates));
    }","  public void test70()  throws Throwable  {
      INIConfiguration iNIConfiguration0 = new INIConfiguration();
      SubnodeConfiguration subnodeConfiguration0 = iNIConfiguration0.getSection(""org.apache.commons.configuration2.BaseHierarchicalConfiguration$BuilderVisitor"");
      // Undeclared exception!
      try { 
        subnodeConfiguration0.immutableConfigurationAt(""org.apache.commons.configuration2.BaseHierarchicalConfiguration$BuilderVisitor"");
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // Passed in key must select exactly one node (found 0): org.apache.commons.configuration2.BaseHierarchicalConfiguration$BuilderVisitor
         //
         verifyException(""org.apache.commons.configuration2.BaseHierarchicalConfiguration"", e);
      }
  }"
246,"    protected void subnodeConfigurationChanged(final ConfigurationEvent event) {
        fireEvent(ConfigurationEvent.SUBNODE_CHANGED, null, event, event.isBeforeUpdate());
    }","  public void test71()  throws Throwable  {
      INIConfiguration iNIConfiguration0 = new INIConfiguration();
      // Undeclared exception!
      try { 
        iNIConfiguration0.subnodeConfigurationChanged((ConfigurationEvent) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.configuration2.BaseHierarchicalConfiguration"", e);
      }
  }"
247,"    public List<ImmutableHierarchicalConfiguration> immutableConfigurationsAt(final String key) {
        return toImmutable(configurationsAt(key));
    }","  public void test72()  throws Throwable  {
      INIConfiguration iNIConfiguration0 = new INIConfiguration();
      SubnodeConfiguration subnodeConfiguration0 = iNIConfiguration0.getSection(""org.apache.commons.configuration2.BaseHierarchicalConfiguration$BuilderVisitor"");
      List<ImmutableHierarchicalConfiguration> list0 = subnodeConfiguration0.immutableConfigurationsAt((String) null);
}"
248,"    public Configuration subset(final String prefix) {
        beginRead(false);
        try {
            final List<QueryResult<ImmutableNode>> results = fetchNodeList(prefix);
            if (results.isEmpty()) {
                return new BaseHierarchicalConfiguration();
            }

            final BaseHierarchicalConfiguration parent = this;
            final BaseHierarchicalConfiguration result = new BaseHierarchicalConfiguration() {
                // Override interpolate to always interpolate on the parent
                @Override
                protected Object interpolate(final Object value) {
                    return parent.interpolate(value);
                }

                @Override
                public ConfigurationInterpolator getInterpolator() {
                    return parent.getInterpolator();
                }
            };
            result.getModel().setRootNode(createSubsetRootNode(results));

            if (result.isEmpty()) {
                return new BaseHierarchicalConfiguration();
            }
            result.setSynchronizer(getSynchronizer());
            return result;
        } finally {
            endRead();
        }
    }","  public void test73()  throws Throwable  {
      INIConfiguration iNIConfiguration0 = new INIConfiguration();
      BaseHierarchicalConfiguration baseHierarchicalConfiguration0 = (BaseHierarchicalConfiguration)iNIConfiguration0.subset("""");
}"
249,"    public String getHeader() {
        return header;
    }","  public void test0()  throws Throwable  {
      XMLPropertiesConfiguration xMLPropertiesConfiguration0 = new XMLPropertiesConfiguration();
      xMLPropertiesConfiguration0.setHeader(""\"">"");
      String string0 = xMLPropertiesConfiguration0.getHeader();
}"
250,"    public String getHeader() {
        return header;
    }","  public void test1()  throws Throwable  {
      XMLPropertiesConfiguration xMLPropertiesConfiguration0 = new XMLPropertiesConfiguration();
      xMLPropertiesConfiguration0.setHeader("""");
      String string0 = xMLPropertiesConfiguration0.getHeader();
}"
251,"    public void write(final Writer out) throws ConfigurationException {
        final PrintWriter writer = new PrintWriter(out);

        String encoding = locator != null ? locator.getEncoding() : null;
        if (encoding == null) {
            encoding = DEFAULT_ENCODING;
        }
        writer.println(""<?xml version=\""1.0\"" encoding=\"""" + encoding + ""\""?>"");
        writer.println(""<!DOCTYPE properties SYSTEM \""http://java.sun.com/dtd/properties.dtd\"">"");
        writer.println(""<properties>"");

        if (getHeader() != null) {
            writer.println(""  <comment>"" + StringEscapeUtils.escapeXml10(getHeader()) + ""</comment>"");
        }

        final Iterator<String> keys = getKeys();
        while (keys.hasNext()) {
            final String key = keys.next();
            final Object value = getProperty(key);

            if (value instanceof List) {
                writeProperty(writer, key, (List<?>) value);
            } else {
                writeProperty(writer, key, value);
            }
        }

        writer.println(""</properties>"");
        writer.flush();
    }","  public void test2()  throws Throwable  {
      XMLPropertiesConfiguration xMLPropertiesConfiguration0 = new XMLPropertiesConfiguration();
      // Undeclared exception!
      try { 
        xMLPropertiesConfiguration0.write((Writer) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.io.Writer"", e);
      }
  }"
252,"    public void save(final Document document, final Node parent) {
        final Element properties = document.createElement(""properties"");
        parent.appendChild(properties);
        if (getHeader() != null) {
            final Element comment = document.createElement(""comment"");
            properties.appendChild(comment);
            comment.setTextContent(StringEscapeUtils.escapeXml10(getHeader()));
        }

        final Iterator<String> keys = getKeys();
        while (keys.hasNext()) {
            final String key = keys.next();
            final Object value = getProperty(key);

            if (value instanceof List) {
                writeProperty(document, properties, key, (List<?>) value);
            } else {
                writeProperty(document, properties, key, value);
            }
        }
    }","  public void test3()  throws Throwable  {
      XMLPropertiesConfiguration xMLPropertiesConfiguration0 = new XMLPropertiesConfiguration();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode(""D9,"");
      // Undeclared exception!
      try { 
        xMLPropertiesConfiguration0.save((Document) null, iIOMetadataNode0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.configuration2.XMLPropertiesConfiguration"", e);
      }
  }"
253,"    public void load(final Element element) throws ConfigurationException {
        if (!element.getNodeName().equals(""properties"")) {
            throw new ConfigurationException(MALFORMED_XML_EXCEPTION);
        }
        final NodeList childNodes = element.getChildNodes();
        for (int i = 0; i < childNodes.getLength(); i++) {
            final Node item = childNodes.item(i);
            if (item instanceof Element) {
                if (item.getNodeName().equals(""comment"")) {
                    setHeader(item.getTextContent());
                } else if (item.getNodeName().equals(""entry"")) {
                    final String key = ((Element) item).getAttribute(""key"");
                    addProperty(key, item.getTextContent());
                } else {
                    throw new ConfigurationException(MALFORMED_XML_EXCEPTION);
                }
            }
        }
    }","  public void test4()  throws Throwable  {
      XMLPropertiesConfiguration xMLPropertiesConfiguration0 = new XMLPropertiesConfiguration();
      // Undeclared exception!
      try { 
        xMLPropertiesConfiguration0.load((Element) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.configuration2.XMLPropertiesConfiguration"", e);
      }
  }"
254,"    public XMLPropertiesConfiguration() {
    }","  public void test5()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
      XMLPropertiesConfiguration xMLPropertiesConfiguration0 = null;
      try {
        xMLPropertiesConfiguration0 = new XMLPropertiesConfiguration(iIOMetadataNode0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
      }
  }"
255,"    public void load(final Element element) throws ConfigurationException {
        if (!element.getNodeName().equals(""properties"")) {
            throw new ConfigurationException(MALFORMED_XML_EXCEPTION);
        }
        final NodeList childNodes = element.getChildNodes();
        for (int i = 0; i < childNodes.getLength(); i++) {
            final Node item = childNodes.item(i);
            if (item instanceof Element) {
                if (item.getNodeName().equals(""comment"")) {
                    setHeader(item.getTextContent());
                } else if (item.getNodeName().equals(""entry"")) {
                    final String key = ((Element) item).getAttribute(""key"");
                    addProperty(key, item.getTextContent());
                } else {
                    throw new ConfigurationException(MALFORMED_XML_EXCEPTION);
                }
            }
        }
    }","  public void test6()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode(""properties"");
      iIOMetadataNode0.appendChild(iIOMetadataNode0);
      XMLPropertiesConfiguration xMLPropertiesConfiguration0 = new XMLPropertiesConfiguration();
      try { 
        xMLPropertiesConfiguration0.load(iIOMetadataNode0);
        fail(""Expecting exception: Exception"");
      } catch(Exception e) {
         //
         // Malformed XML
         //
         verifyException(""org.apache.commons.configuration2.XMLPropertiesConfiguration"", e);
      }
  }"
256,"    public void load(final Element element) throws ConfigurationException {
        if (!element.getNodeName().equals(""properties"")) {
            throw new ConfigurationException(MALFORMED_XML_EXCEPTION);
        }
        final NodeList childNodes = element.getChildNodes();
        for (int i = 0; i < childNodes.getLength(); i++) {
            final Node item = childNodes.item(i);
            if (item instanceof Element) {
                if (item.getNodeName().equals(""comment"")) {
                    setHeader(item.getTextContent());
                } else if (item.getNodeName().equals(""entry"")) {
                    final String key = ((Element) item).getAttribute(""key"");
                    addProperty(key, item.getTextContent());
                } else {
                    throw new ConfigurationException(MALFORMED_XML_EXCEPTION);
                }
            }
        }
    }","  public void test7()  throws Throwable  {
      XMLPropertiesConfiguration xMLPropertiesConfiguration0 = new XMLPropertiesConfiguration();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode(""k\""+Jef%lYAMp"");
      try { 
        xMLPropertiesConfiguration0.load(iIOMetadataNode0);
        fail(""Expecting exception: Exception"");
      } catch(Exception e) {
         //
         // Malformed XML
         //
         verifyException(""org.apache.commons.configuration2.XMLPropertiesConfiguration"", e);
      }
  }"
257,"    public String getHeader() {
        return header;
    }","  public void test8()  throws Throwable  {
      XMLPropertiesConfiguration xMLPropertiesConfiguration0 = new XMLPropertiesConfiguration();
      String string0 = xMLPropertiesConfiguration0.getHeader();
}"
258,"    public void read(final Reader in) throws ConfigurationException {
        final SAXParserFactory factory = SAXParserFactory.newInstance();
        factory.setNamespaceAware(false);
        factory.setValidating(true);

        try {
            final SAXParser parser = factory.newSAXParser();

            final XMLReader xmlReader = parser.getXMLReader();
            xmlReader.setEntityResolver((publicId, systemId) -> new InputSource(getClass().getClassLoader().getResourceAsStream(""properties.dtd"")));
            xmlReader.setContentHandler(new XMLPropertiesHandler());
            xmlReader.parse(new InputSource(in));
        } catch (final Exception e) {
            throw new ConfigurationException(""Unable to parse the configuration file"", e);
        }

        // todo: support included properties ?
    }","  public void test9()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""  <comnt>"");
      XMLPropertiesConfiguration xMLPropertiesConfiguration0 = new XMLPropertiesConfiguration();
      try { 
        xMLPropertiesConfiguration0.read(stringReader0);
        fail(""Expecting exception: Exception"");
      } catch(Exception e) {
         //
         // Unable to parse the configuration file
         //
         verifyException(""org.apache.commons.configuration2.XMLPropertiesConfiguration"", e);
      }
  }"
259,"    public void write(final Writer out) throws ConfigurationException {
        final PrintWriter writer = new PrintWriter(out);

        String encoding = locator != null ? locator.getEncoding() : null;
        if (encoding == null) {
            encoding = DEFAULT_ENCODING;
        }
        writer.println(""<?xml version=\""1.0\"" encoding=\"""" + encoding + ""\""?>"");
        writer.println(""<!DOCTYPE properties SYSTEM \""http://java.sun.com/dtd/properties.dtd\"">"");
        writer.println(""<properties>"");

        if (getHeader() != null) {
            writer.println(""  <comment>"" + StringEscapeUtils.escapeXml10(getHeader()) + ""</comment>"");
        }

        final Iterator<String> keys = getKeys();
        while (keys.hasNext()) {
            final String key = keys.next();
            final Object value = getProperty(key);

            if (value instanceof List) {
                writeProperty(writer, key, (List<?>) value);
            } else {
                writeProperty(writer, key, value);
            }
        }

        writer.println(""</properties>"");
        writer.flush();
    }","  public void test10()  throws Throwable  {
      XMLPropertiesConfiguration xMLPropertiesConfiguration0 = new XMLPropertiesConfiguration();
      xMLPropertiesConfiguration0.addPropertyDirect(""UTF-8"", (Object) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(""UTF-8"", ""UTF-8"");
      xMLPropertiesConfiguration0.write(mockPrintWriter0);
}"
260,"    public void write(final Writer out) throws ConfigurationException {
        final PrintWriter writer = new PrintWriter(out);

        String encoding = locator != null ? locator.getEncoding() : null;
        if (encoding == null) {
            encoding = DEFAULT_ENCODING;
        }
        writer.println(""<?xml version=\""1.0\"" encoding=\"""" + encoding + ""\""?>"");
        writer.println(""<!DOCTYPE properties SYSTEM \""http://java.sun.com/dtd/properties.dtd\"">"");
        writer.println(""<properties>"");

        if (getHeader() != null) {
            writer.println(""  <comment>"" + StringEscapeUtils.escapeXml10(getHeader()) + ""</comment>"");
        }

        final Iterator<String> keys = getKeys();
        while (keys.hasNext()) {
            final String key = keys.next();
            final Object value = getProperty(key);

            if (value instanceof List) {
                writeProperty(writer, key, (List<?>) value);
            } else {
                writeProperty(writer, key, value);
            }
        }

        writer.println(""</properties>"");
        writer.flush();
    }","  public void test11()  throws Throwable  {
      XMLPropertiesConfiguration xMLPropertiesConfiguration0 = new XMLPropertiesConfiguration();
      xMLPropertiesConfiguration0.setProperty(""UTF-8"", ""UTF-8"");
      xMLPropertiesConfiguration0.addPropertyDirect(""UTF-8"", ""UTF-8"");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(""UTF-8"", ""UTF-8"");
      xMLPropertiesConfiguration0.write(mockPrintWriter0);
}"
261,"    public XMLPropertiesConfiguration() {
    }","  public void test12()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode(""properties"");
      iIOMetadataNode0.appendChild(iIOMetadataNode0);
      XMLPropertiesConfiguration xMLPropertiesConfiguration0 = null;
      try {
        xMLPropertiesConfiguration0 = new XMLPropertiesConfiguration(iIOMetadataNode0);
        fail(""Expecting exception: Exception"");
      } catch(Throwable e) {
         //
         // Malformed XML
         //
         verifyException(""org.apache.commons.configuration2.XMLPropertiesConfiguration"", e);
      }
  }"
262,"    public void load(final Element element) throws ConfigurationException {
        if (!element.getNodeName().equals(""properties"")) {
            throw new ConfigurationException(MALFORMED_XML_EXCEPTION);
        }
        final NodeList childNodes = element.getChildNodes();
        for (int i = 0; i < childNodes.getLength(); i++) {
            final Node item = childNodes.item(i);
            if (item instanceof Element) {
                if (item.getNodeName().equals(""comment"")) {
                    setHeader(item.getTextContent());
                } else if (item.getNodeName().equals(""entry"")) {
                    final String key = ((Element) item).getAttribute(""key"");
                    addProperty(key, item.getTextContent());
                } else {
                    throw new ConfigurationException(MALFORMED_XML_EXCEPTION);
                }
            }
        }
    }","  public void test13()  throws Throwable  {
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode(""properties"");
      iIOMetadataNode0.insertBefore(iIOMetadataNode0, iIOMetadataNode0);
      XMLPropertiesConfiguration xMLPropertiesConfiguration0 = new XMLPropertiesConfiguration(iIOMetadataNode0);
      xMLPropertiesConfiguration0.load(iIOMetadataNode0);
}"
263,"    public void write(final Writer out) throws ConfigurationException {
        final PrintWriter writer = new PrintWriter(out);

        String encoding = locator != null ? locator.getEncoding() : null;
        if (encoding == null) {
            encoding = DEFAULT_ENCODING;
        }
        writer.println(""<?xml version=\""1.0\"" encoding=\"""" + encoding + ""\""?>"");
        writer.println(""<!DOCTYPE properties SYSTEM \""http://java.sun.com/dtd/properties.dtd\"">"");
        writer.println(""<properties>"");

        if (getHeader() != null) {
            writer.println(""  <comment>"" + StringEscapeUtils.escapeXml10(getHeader()) + ""</comment>"");
        }

        final Iterator<String> keys = getKeys();
        while (keys.hasNext()) {
            final String key = keys.next();
            final Object value = getProperty(key);

            if (value instanceof List) {
                writeProperty(writer, key, (List<?>) value);
            } else {
                writeProperty(writer, key, value);
            }
        }

        writer.println(""</properties>"");
        writer.flush();
    }","  public void test14()  throws Throwable  {
      XMLPropertiesConfiguration xMLPropertiesConfiguration0 = new XMLPropertiesConfiguration();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      EnvironmentConfiguration environmentConfiguration0 = new EnvironmentConfiguration();
      xMLPropertiesConfiguration0.append(environmentConfiguration0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, true);
      // Undeclared exception!
      xMLPropertiesConfiguration0.write(mockPrintWriter0);
  }"
264,"    public void read(final Reader in) throws ConfigurationException {
        final SAXParserFactory factory = SAXParserFactory.newInstance();
        factory.setNamespaceAware(false);
        factory.setValidating(true);

        try {
            final SAXParser parser = factory.newSAXParser();

            final XMLReader xmlReader = parser.getXMLReader();
            xmlReader.setEntityResolver((publicId, systemId) -> new InputSource(getClass().getClassLoader().getResourceAsStream(""properties.dtd"")));
            xmlReader.setContentHandler(new XMLPropertiesHandler());
            xmlReader.parse(new InputSource(in));
        } catch (final Exception e) {
            throw new ConfigurationException(""Unable to parse the configuration file"", e);
        }

        // todo: support included properties ?
    }","  public void test15()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""  <comment>"");
      XMLPropertiesConfiguration xMLPropertiesConfiguration0 = new XMLPropertiesConfiguration();
      try { 
        xMLPropertiesConfiguration0.read(stringReader0);
        fail(""Expecting exception: Exception"");
      } catch(Exception e) {
         //
         // Unable to parse the configuration file
         //
         verifyException(""org.apache.commons.configuration2.XMLPropertiesConfiguration"", e);
      }
  }"
265,"    public void write(final Writer out) throws ConfigurationException {
        final PrintWriter writer = new PrintWriter(out);

        String encoding = locator != null ? locator.getEncoding() : null;
        if (encoding == null) {
            encoding = DEFAULT_ENCODING;
        }
        writer.println(""<?xml version=\""1.0\"" encoding=\"""" + encoding + ""\""?>"");
        writer.println(""<!DOCTYPE properties SYSTEM \""http://java.sun.com/dtd/properties.dtd\"">"");
        writer.println(""<properties>"");

        if (getHeader() != null) {
            writer.println(""  <comment>"" + StringEscapeUtils.escapeXml10(getHeader()) + ""</comment>"");
        }

        final Iterator<String> keys = getKeys();
        while (keys.hasNext()) {
            final String key = keys.next();
            final Object value = getProperty(key);

            if (value instanceof List) {
                writeProperty(writer, key, (List<?>) value);
            } else {
                writeProperty(writer, key, value);
            }
        }

        writer.println(""</properties>"");
        writer.flush();
    }","  public void test16()  throws Throwable  {
      XMLPropertiesConfiguration xMLPropertiesConfiguration0 = new XMLPropertiesConfiguration();
      FileLocator.FileLocatorBuilder fileLocator_FileLocatorBuilder0 = mock(FileLocator.FileLocatorBuilder.class, new ViolatedAssumptionAnswer());
      FileLocator fileLocator0 = new FileLocator(fileLocator_FileLocatorBuilder0);
      xMLPropertiesConfiguration0.initFileLocator(fileLocator0);
      File file0 = MockFile.createTempFile(""org.apache.commons.configuration2.XMLPropertiesConfiguration$1"", ""org.apache.commons.configuration2.XMLPropertiesConfiguration$1"");
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0, ""UTF-8"");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      xMLPropertiesConfiguration0.write(mockPrintWriter0);
}"
266,"    public void write(final Writer out) throws ConfigurationException {
        final PrintWriter writer = new PrintWriter(out);

        String encoding = locator != null ? locator.getEncoding() : null;
        if (encoding == null) {
            encoding = DEFAULT_ENCODING;
        }
        writer.println(""<?xml version=\""1.0\"" encoding=\"""" + encoding + ""\""?>"");
        writer.println(""<!DOCTYPE properties SYSTEM \""http://java.sun.com/dtd/properties.dtd\"">"");
        writer.println(""<properties>"");

        if (getHeader() != null) {
            writer.println(""  <comment>"" + StringEscapeUtils.escapeXml10(getHeader()) + ""</comment>"");
        }

        final Iterator<String> keys = getKeys();
        while (keys.hasNext()) {
            final String key = keys.next();
            final Object value = getProperty(key);

            if (value instanceof List) {
                writeProperty(writer, key, (List<?>) value);
            } else {
                writeProperty(writer, key, value);
            }
        }

        writer.println(""</properties>"");
        writer.flush();
    }","  public void test17()  throws Throwable  {
      XMLPropertiesConfiguration xMLPropertiesConfiguration0 = new XMLPropertiesConfiguration();
      xMLPropertiesConfiguration0.setHeader(""FileLocator [basePath=null, encoding=null, fileName=null, fileSystem=null, locationStrategy=null, sourceURL=null, urlConnectionOptions=null]"");
      File file0 = MockFile.createTempFile(""org.apache.commons.configuration2.XMLPropertiesConfiguration$1"", ""org.apache.commons.configuration2.XMLPropertiesConfiguration$1"");
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0, ""UTF-8"");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      xMLPropertiesConfiguration0.write(mockPrintWriter0);
}"
267,"    public String getHeader() {
        return header;
    }","  public void test18()  throws Throwable  {
      XMLPropertiesConfiguration xMLPropertiesConfiguration0 = new XMLPropertiesConfiguration();
      xMLPropertiesConfiguration0.setHeader(""FileLocator [basePath=null, encoding=null, fileName=null, fileSystem=null, locationStrategy=null, sourceURL=null, urlConnectionOptions=null]"");
      File file0 = MockFile.createTempFile(""org.apache.commons.configuration2.XMLPropertiesConfiguration$1"", ""org.apache.commons.configuration2.XMLPropertiesConfiguration$1"");
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0, ""UTF-8"");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      xMLPropertiesConfiguration0.write(mockPrintWriter0);
}"
268,"    public ConfigurationMap(final Configuration configuration) {
        this.configuration = configuration;
    }","  public void test0()  throws Throwable  {
      CombinedConfiguration combinedConfiguration0 = new CombinedConfiguration();
      ConfigurationMap.ConfigurationSet configurationMap_ConfigurationSet0 = new ConfigurationMap.ConfigurationSet(combinedConfiguration0);
      Iterator<Map.Entry<Object, Object>> iterator0 = (Iterator<Map.Entry<Object, Object>>)configurationMap_ConfigurationSet0.iterator();
}"
269,"    public ConfigurationMap(final Configuration configuration) {
        this.configuration = configuration;
    }","  public void test1()  throws Throwable  {
      CompositeConfiguration compositeConfiguration0 = new CompositeConfiguration((Collection<? extends Configuration>) null);
      DataConfiguration dataConfiguration0 = new DataConfiguration(compositeConfiguration0);
      ConfigurationMap.ConfigurationSet configurationMap_ConfigurationSet0 = new ConfigurationMap.ConfigurationSet(dataConfiguration0);
      int int0 = configurationMap_ConfigurationSet0.size();
}"
270,"    public Set<Map.Entry<Object, Object>> entrySet() {
        return new ConfigurationSet(configuration);
    }","  public void test2()  throws Throwable  {
      CompositeConfiguration compositeConfiguration0 = new CompositeConfiguration();
      ConfigurationMap configurationMap0 = new ConfigurationMap(compositeConfiguration0);
      Set<Map.Entry<Object, Object>> set0 = (Set<Map.Entry<Object, Object>>)configurationMap0.entrySet();
}"
271,"    public Object put(final Object key, final Object value) {
        final String strKey = String.valueOf(key);
        final Object old = configuration.getProperty(strKey);
        configuration.setProperty(strKey, value);
        return old;
    }","  public void test3()  throws Throwable  {
      BaseHierarchicalConfiguration baseHierarchicalConfiguration0 = new BaseHierarchicalConfiguration();
      ConfigurationMap configurationMap0 = new ConfigurationMap(baseHierarchicalConfiguration0);
      Integer integer0 = new Integer((-1738009603));
      configurationMap0.put(integer0, integer0);
      Object object0 = configurationMap0.put(integer0, (Object) null);
}"
272,"    public Configuration getConfiguration() {
        return configuration;
    }","  public void test4()  throws Throwable  {
      ConfigurationMap configurationMap0 = new ConfigurationMap((Configuration) null);
      Configuration configuration0 = configurationMap0.getConfiguration();
}"
273,"    public Object get(final Object key) {
        return configuration.getProperty(String.valueOf(key));
    }","  public void test5()  throws Throwable  {
      CompositeConfiguration compositeConfiguration0 = new CompositeConfiguration((Collection<? extends Configuration>) null);
      ConfigurationMap configurationMap0 = new ConfigurationMap(compositeConfiguration0);
      configurationMap0.putIfAbsent((Object) null, compositeConfiguration0);
      Object object0 = configurationMap0.get((Object) null);
}"
274,"    public Object put(final Object key, final Object value) {
        final String strKey = String.valueOf(key);
        final Object old = configuration.getProperty(strKey);
        configuration.setProperty(strKey, value);
        return old;
    }","  public void test6()  throws Throwable  {
      NodeCombiner nodeCombiner0 = mock(NodeCombiner.class, new ViolatedAssumptionAnswer());
      CombinedConfiguration combinedConfiguration0 = new CombinedConfiguration(nodeCombiner0);
      AbstractYAMLBasedConfiguration abstractYAMLBasedConfiguration0 = new AbstractYAMLBasedConfiguration(combinedConfiguration0);
      NodeSelector nodeSelector0 = abstractYAMLBasedConfiguration0.getSubConfigurationNodeSelector((String) null);
      SubnodeConfiguration subnodeConfiguration0 = abstractYAMLBasedConfiguration0.createSubConfigurationForTrackedNode(nodeSelector0, combinedConfiguration0);
      ConfigurationMap configurationMap0 = new ConfigurationMap(subnodeConfiguration0);
      Integer integer0 = new Integer((-1));
      // Undeclared exception!
      try { 
        configurationMap0.put(integer0, nodeSelector0);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // No tracked node found: org.apache.commons.configuration2.tree.NodeSelector@24[keys=[null]]
         //
         verifyException(""org.apache.commons.configuration2.tree.NodeTracker"", e);
      }
  }"
275,"    public Object put(final Object key, final Object value) {
        final String strKey = String.valueOf(key);
        final Object old = configuration.getProperty(strKey);
        configuration.setProperty(strKey, value);
        return old;
    }","  public void test7()  throws Throwable  {
      CombinedConfiguration combinedConfiguration0 = new CombinedConfiguration();
      ConfigurationMap configurationMap0 = new ConfigurationMap((Configuration) null);
      // Undeclared exception!
      try { 
        configurationMap0.put((Object) null, combinedConfiguration0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.configuration2.ConfigurationMap"", e);
      }
  }"
276,"    public Object put(final Object key, final Object value) {
        final String strKey = String.valueOf(key);
        final Object old = configuration.getProperty(strKey);
        configuration.setProperty(strKey, value);
        return old;
    }","  public void test8()  throws Throwable  {
      CompositeConfiguration compositeConfiguration0 = new CompositeConfiguration((Configuration) null);
      ConfigurationMap configurationMap0 = new ConfigurationMap(compositeConfiguration0);
      // Undeclared exception!
      try { 
        configurationMap0.put("""", ""off"");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.configuration2.CompositeConfiguration"", e);
      }
  }"
277,"    public Object get(final Object key) {
        return configuration.getProperty(String.valueOf(key));
    }","  public void test9()  throws Throwable  {
      BaseHierarchicalConfiguration baseHierarchicalConfiguration0 = new BaseHierarchicalConfiguration();
      AbstractYAMLBasedConfiguration abstractYAMLBasedConfiguration0 = new AbstractYAMLBasedConfiguration(baseHierarchicalConfiguration0);
      NodeSelector nodeSelector0 = abstractYAMLBasedConfiguration0.getSubConfigurationNodeSelector(""K?5Bb`"");
      SubnodeConfiguration subnodeConfiguration0 = abstractYAMLBasedConfiguration0.createSubConfigurationForTrackedNode(nodeSelector0, baseHierarchicalConfiguration0);
      ConfigurationMap configurationMap0 = new ConfigurationMap(subnodeConfiguration0);
      // Undeclared exception!
      try { 
        configurationMap0.get(subnodeConfiguration0);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // No tracked node found: org.apache.commons.configuration2.tree.NodeSelector@20[keys=[K?5Bb`]]
         //
         verifyException(""org.apache.commons.configuration2.tree.NodeTracker"", e);
      }
  }"
278,"    public Object get(final Object key) {
        return configuration.getProperty(String.valueOf(key));
    }","  public void test10()  throws Throwable  {
      ConfigurationMap configurationMap0 = new ConfigurationMap((Configuration) null);
      // Undeclared exception!
      try { 
        configurationMap0.get("""");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.configuration2.ConfigurationMap"", e);
      }
  }"
279,"    public Object put(final Object key, final Object value) {
        final String strKey = String.valueOf(key);
        final Object old = configuration.getProperty(strKey);
        configuration.setProperty(strKey, value);
        return old;
    }","  public void test11()  throws Throwable  {
      CompositeConfiguration compositeConfiguration0 = new CompositeConfiguration();
      ConfigurationMap configurationMap0 = new ConfigurationMap(compositeConfiguration0);
      Class<Integer> class0 = Integer.class;
      Object object0 = configurationMap0.put(compositeConfiguration0, class0);
}"
280,"    public Object put(final Object key, final Object value) {
        final String strKey = String.valueOf(key);
        final Object old = configuration.getProperty(strKey);
        configuration.setProperty(strKey, value);
        return old;
    }","  public void test12()  throws Throwable  {
      CompositeConfiguration compositeConfiguration0 = new CompositeConfiguration();
      ConfigurationMap configurationMap0 = new ConfigurationMap(compositeConfiguration0);
      Class<Integer> class0 = Integer.class;
      Object object0 = configurationMap0.put(compositeConfiguration0, class0);
      boolean boolean0 = configurationMap0.isEmpty();
}"
281,"    public ConfigurationMap(final Configuration configuration) {
        this.configuration = configuration;
    }","  public void test13()  throws Throwable  {
      CombinedConfiguration combinedConfiguration0 = new CombinedConfiguration();
      ConfigurationMap configurationMap0 = new ConfigurationMap(combinedConfiguration0);
      BaseConfiguration baseConfiguration0 = new BaseConfiguration();
      Integer integer0 = new Integer(2106);
      BiFunction<Object, Object, Event> biFunction0 = (BiFunction<Object, Object, Event>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      configurationMap0.merge(integer0, baseConfiguration0, biFunction0);
      configurationMap0.clear();
  }"
282,"    public Configuration getConfiguration() {
        return configuration;
    }","  public void test14()  throws Throwable  {
      CombinedConfiguration combinedConfiguration0 = new CombinedConfiguration();
      ConfigurationMap configurationMap0 = new ConfigurationMap(combinedConfiguration0);
      Configuration configuration0 = configurationMap0.getConfiguration();
}"
283,"    public Object get(final Object key) {
        return configuration.getProperty(String.valueOf(key));
    }","  public void test15()  throws Throwable  {
      CompositeConfiguration compositeConfiguration0 = new CompositeConfiguration();
      ConfigurationMap configurationMap0 = new ConfigurationMap(compositeConfiguration0);
      Object object0 = configurationMap0.get(compositeConfiguration0);
}"
284,"    public Object put(final Object key, final Object value) {
        final String strKey = String.valueOf(key);
        final Object old = configuration.getProperty(strKey);
        configuration.setProperty(strKey, value);
        return old;
    }","  public void test16()  throws Throwable  {
      CompositeConfiguration compositeConfiguration0 = new CompositeConfiguration();
      ConfigurationMap configurationMap0 = new ConfigurationMap(compositeConfiguration0);
      Class<Integer> class0 = Integer.class;
      configurationMap0.put(compositeConfiguration0, class0);
      BiFunction<Object, Object, ImmutableNode> biFunction0 = (BiFunction<Object, Object, ImmutableNode>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , any());
      configurationMap0.replaceAll(biFunction0);
  }"
285,"    protected int sizeInternal() {
        return store.size();
    }","  public void test0()  throws Throwable  {
      BaseConfiguration baseConfiguration0 = new BaseConfiguration();
      baseConfiguration0.addPropertyDirect(""b;c/{w*-F!"", (Object) null);
      int int0 = baseConfiguration0.sizeInternal();
}"
286,"    protected Object getPropertyInternal(final String key) {
        return store.get(key);
    }","  public void test1()  throws Throwable  {
      BaseConfiguration baseConfiguration0 = new BaseConfiguration();
      Object object0 = baseConfiguration0.getPropertyInternal("""");
}"
287,"    protected Object getPropertyInternal(final String key) {
        return store.get(key);
    }","  public void test2()  throws Throwable  {
      BaseConfiguration baseConfiguration0 = new BaseConfiguration();
      baseConfiguration0.addProperty(""catalog-name"", ""catalog-name"");
      Object object0 = baseConfiguration0.getPropertyInternal(""catalog-name"");
}"
288,"    public Object clone() {
        try {
            final BaseConfiguration copy = (BaseConfiguration) super.clone();
            cloneStore(copy);
            copy.cloneInterpolator(this);

            return copy;
        } catch (final CloneNotSupportedException cex) {
            // should not happen
            throw new ConfigurationRuntimeException(cex);
        }
    }","  public void test3()  throws Throwable  {
      PropertiesConfiguration propertiesConfiguration0 = new PropertiesConfiguration();
      propertiesConfiguration0.setInterpolator((ConfigurationInterpolator) null);
      // Undeclared exception!
      try { 
        propertiesConfiguration0.clone();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.configuration2.AbstractConfiguration"", e);
      }
  }"
289,"    public Object clone() {
        try {
            final BaseConfiguration copy = (BaseConfiguration) super.clone();
            cloneStore(copy);
            copy.cloneInterpolator(this);

            return copy;
        } catch (final CloneNotSupportedException cex) {
            // should not happen
            throw new ConfigurationRuntimeException(cex);
        }
    }","  public void test4()  throws Throwable  {
      BaseConfiguration baseConfiguration0 = new BaseConfiguration();
      Object object0 = baseConfiguration0.clone();
}"
290,"    public Object clone() {
        try {
            final BaseConfiguration copy = (BaseConfiguration) super.clone();
            cloneStore(copy);
            copy.cloneInterpolator(this);

            return copy;
        } catch (final CloneNotSupportedException cex) {
            // should not happen
            throw new ConfigurationRuntimeException(cex);
        }
    }","  public void test5()  throws Throwable  {
      PropertiesConfiguration propertiesConfiguration0 = new PropertiesConfiguration();
      propertiesConfiguration0.addPropertyDirect(""/(^qLTycd?C/<jT"", ""/(^qLTycd?C/<jT"");
      Object object0 = propertiesConfiguration0.clone();
}"
291,"    public Object clone() {
        try {
            final BaseConfiguration copy = (BaseConfiguration) super.clone();
            cloneStore(copy);
            copy.cloneInterpolator(this);

            return copy;
        } catch (final CloneNotSupportedException cex) {
            // should not happen
            throw new ConfigurationRuntimeException(cex);
        }
    }","  public void test6()  throws Throwable  {
      PropertiesConfiguration propertiesConfiguration0 = new PropertiesConfiguration();
      EventType<ConfigurationEvent> eventType0 = ConfigurationEvent.CLEAR_PROPERTY;
      Collection<EventListener<? super ConfigurationEvent>> collection0 = propertiesConfiguration0.getEventListeners(eventType0);
      propertiesConfiguration0.addPropertyDirect(""ISO-8859-1"", collection0);
      Object object0 = propertiesConfiguration0.clone();
}"
292,"    protected boolean containsKeyInternal(final String key) {
        return store.containsKey(key);
    }","  public void test7()  throws Throwable  {
      XMLPropertiesConfiguration xMLPropertiesConfiguration0 = new XMLPropertiesConfiguration();
      xMLPropertiesConfiguration0.addProperty(""UTF-8"", ""UTF-8"");
      boolean boolean0 = xMLPropertiesConfiguration0.containsKeyInternal(""UTF-8"");
}"
293,"    protected boolean containsKeyInternal(final String key) {
        return store.containsKey(key);
    }","  public void test8()  throws Throwable  {
      PropertiesConfiguration propertiesConfiguration0 = new PropertiesConfiguration();
      boolean boolean0 = propertiesConfiguration0.containsKeyInternal(""ISO-8859-1"");
}"
294,"    protected boolean isEmptyInternal() {
        return store.isEmpty();
    }","  public void test9()  throws Throwable  {
      XMLPropertiesConfiguration xMLPropertiesConfiguration0 = new XMLPropertiesConfiguration();
      boolean boolean0 = xMLPropertiesConfiguration0.isEmptyInternal();
}"
295,"    protected boolean isEmptyInternal() {
        return store.isEmpty();
    }","  public void test10()  throws Throwable  {
      PropertiesConfiguration propertiesConfiguration0 = new PropertiesConfiguration();
      EventType<ConfigurationEvent> eventType0 = ConfigurationEvent.CLEAR_PROPERTY;
      Collection<EventListener<? super ConfigurationEvent>> collection0 = propertiesConfiguration0.getEventListeners(eventType0);
      propertiesConfiguration0.addPropertyDirect(""ISO-8859-1"", collection0);
      boolean boolean0 = propertiesConfiguration0.isEmptyInternal();
}"
296,"    protected int sizeInternal() {
        return store.size();
    }","  public void test11()  throws Throwable  {
      PropertiesConfiguration propertiesConfiguration0 = new PropertiesConfiguration();
      int int0 = propertiesConfiguration0.sizeInternal();
}"
297,"    protected Iterator<String> getKeysInternal() {
        return store.keySet().iterator();
    }","  public void test12()  throws Throwable  {
      PropertiesConfiguration propertiesConfiguration0 = new PropertiesConfiguration();
      Iterator<String> iterator0 = propertiesConfiguration0.getKeysInternal();
}"
298,"    protected void clearInternal() {
        store.clear();
    }","  public void test13()  throws Throwable  {
      XMLPropertiesConfiguration xMLPropertiesConfiguration0 = new XMLPropertiesConfiguration();
      xMLPropertiesConfiguration0.clearInternal();
}"
299,"    protected void clearPropertyDirect(final String key) {
        store.remove(key);
    }","  public void test14()  throws Throwable  {
      XMLPropertiesConfiguration xMLPropertiesConfiguration0 = new XMLPropertiesConfiguration();
      xMLPropertiesConfiguration0.clearPropertyDirect(""UTF-8"");
}"
300,"    protected void addPropertyDirect(final String key, final Object value) {
        final Object previousValue = getPropertyInternal(key);

        if (previousValue == null) {
            store.put(key, value);
        } else if (previousValue instanceof List) {
            // safe to case because we have created the lists ourselves
            @SuppressWarnings(""unchecked"")
            final List<Object> valueList = (List<Object>) previousValue;
            // the value is added to the existing list
            valueList.add(value);
        } else {
            // the previous value is replaced by a list containing the previous value and the new value
            final List<Object> list = new ArrayList<>();
            list.add(previousValue);
            list.add(value);

            store.put(key, list);
        }
    }","  public void test15()  throws Throwable  {
      PropertiesConfiguration propertiesConfiguration0 = new PropertiesConfiguration();
      EventType<ConfigurationEvent> eventType0 = ConfigurationEvent.CLEAR_PROPERTY;
      Collection<EventListener<? super ConfigurationEvent>> collection0 = propertiesConfiguration0.getEventListeners(eventType0);
      propertiesConfiguration0.addPropertyDirect(""ISO-8859-1"", collection0);
      propertiesConfiguration0.addPropertyDirect(""ISO-8859-1"", ""ISO-8859-1"");
      Integer integer0 = new Integer(0);
      propertiesConfiguration0.addPropertyDirect(""ISO-8859-1"", integer0);
}"
301,"    public void write(final Writer out) throws ConfigurationException, IOException {
        this.mapper.writer().writeValue(out, constructMap(this.getNodeModel().getNodeHandler().getRootNode()));
    }","  public void test0()  throws Throwable  {
      AbstractYAMLBasedConfiguration abstractYAMLBasedConfiguration0 = new AbstractYAMLBasedConfiguration();
      JSONConfiguration jSONConfiguration0 = new JSONConfiguration(abstractYAMLBasedConfiguration0);
      PipedReader pipedReader0 = new PipedReader(251);
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      jSONConfiguration0.write(pipedWriter0);
}"
302,"    public JSONConfiguration() {
    }","  public void test1()  throws Throwable  {
      JSONConfiguration jSONConfiguration0 = new JSONConfiguration();
      PatternSubtreeConfigurationWrapper patternSubtreeConfigurationWrapper0 = new PatternSubtreeConfigurationWrapper(jSONConfiguration0, ""}@Gf*ym"");
      TrackedNodeModel trackedNodeModel0 = mock(TrackedNodeModel.class, new ViolatedAssumptionAnswer());
      doReturn((NodeSelector) null).when(trackedNodeModel0).getSelector();
      SubnodeConfiguration subnodeConfiguration0 = new SubnodeConfiguration(patternSubtreeConfigurationWrapper0, trackedNodeModel0);
      JSONConfiguration jSONConfiguration1 = null;
      try {
        jSONConfiguration1 = new JSONConfiguration(subnodeConfiguration0);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // No tracked node found: null
         //
         verifyException(""org.apache.commons.configuration2.tree.NodeTracker"", e);
      }
  }"
303,"    public void read(final Reader in) throws ConfigurationException {
        try {
            load(mapper.readValue(in, this.type));
        } catch (final Exception e) {
            rethrowException(e);
        }
    }","  public void test2()  throws Throwable  {
      JSONConfiguration jSONConfiguration0 = new JSONConfiguration();
      try { 
        jSONConfiguration0.read((InputStream) null);
        fail(""Expecting exception: Exception"");
      } catch(Exception e) {
         //
         // Unable to load the configuration
         //
         verifyException(""org.apache.commons.configuration2.AbstractYAMLBasedConfiguration"", e);
      }
  }"
304,"    public void write(final Writer out) throws ConfigurationException, IOException {
        this.mapper.writer().writeValue(out, constructMap(this.getNodeModel().getNodeHandler().getRootNode()));
    }","  public void test3()  throws Throwable  {
      BaseHierarchicalConfiguration baseHierarchicalConfiguration0 = new BaseHierarchicalConfiguration();
      JSONConfiguration jSONConfiguration0 = new JSONConfiguration(baseHierarchicalConfiguration0);
      // Undeclared exception!
      try { 
        jSONConfiguration0.write((Writer) null);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // argument \""w\"" is null
         //
         verifyException(""com.fasterxml.jackson.databind.ObjectWriter"", e);
      }
  }"
305,"    public void read(final Reader in) throws ConfigurationException {
        try {
            load(mapper.readValue(in, this.type));
        } catch (final Exception e) {
            rethrowException(e);
        }
    }","  public void test4()  throws Throwable  {
      JSONConfiguration jSONConfiguration0 = new JSONConfiguration();
      try { 
        jSONConfiguration0.read((Reader) null);
        fail(""Expecting exception: Exception"");
      } catch(Exception e) {
         //
         // Unable to load the configuration
         //
         verifyException(""org.apache.commons.configuration2.AbstractYAMLBasedConfiguration"", e);
      }
  }"
306,"    public JSONConfiguration() {
    }","  public void test5()  throws Throwable  {
      BaseHierarchicalConfiguration baseHierarchicalConfiguration0 = new BaseHierarchicalConfiguration((NodeModel<ImmutableNode>) null);
      JSONConfiguration jSONConfiguration0 = null;
      try {
        jSONConfiguration0 = new JSONConfiguration(baseHierarchicalConfiguration0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.configuration2.BaseHierarchicalConfiguration"", e);
      }
  }"
307,"    public Object invoke(final Object proxy, final Method method, final Object[] args) throws Throwable {
        try {
            return handleResult(method.invoke(wrappedConfiguration, args));
        } catch (final InvocationTargetException e) {
            // unwrap
            throw e.getCause();
        }
    }","  public void test0()  throws Throwable  {
      JSONConfiguration jSONConfiguration0 = new JSONConfiguration();
      ImmutableConfigurationInvocationHandler immutableConfigurationInvocationHandler0 = new ImmutableConfigurationInvocationHandler(jSONConfiguration0);
      try { 
        immutableConfigurationInvocationHandler0.invoke(jSONConfiguration0, (Method) null, (Object[]) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.configuration2.ImmutableConfigurationInvocationHandler"", e);
      }
  }"
308,"    public ImmutableConfigurationInvocationHandler(final Configuration configuration) {
        wrappedConfiguration = Objects.requireNonNull(configuration, ""configuration"");
    }","  public void test1()  throws Throwable  {
      ImmutableConfigurationInvocationHandler immutableConfigurationInvocationHandler0 = null;
      try {
        immutableConfigurationInvocationHandler0 = new ImmutableConfigurationInvocationHandler((Configuration) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // configuration
         //
         verifyException(""java.util.Objects"", e);
      }
  }"
309,"    public BaseConfigurationXMLReader() {
    }","  public void test0()  throws Throwable  {
      BaseConfigurationXMLReader baseConfigurationXMLReader0 = new BaseConfigurationXMLReader();
      BaseConfigurationXMLReader.SAXConverter baseConfigurationXMLReader_SAXConverter0 = baseConfigurationXMLReader0.new SAXConverter();
      // Undeclared exception!
      try { 
        baseConfigurationXMLReader_SAXConverter0.elementStart(""#zN+uoG"", ""#zN+uoG"");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.configuration2.ConfigurationXMLReader"", e);
      }
  }"
310,"    public Configuration getParsedConfiguration() {
        return getConfiguration();
    }","  public void test1()  throws Throwable  {
      Configuration configuration0 = mock(Configuration.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(configuration0).toString();
      BaseConfigurationXMLReader baseConfigurationXMLReader0 = new BaseConfigurationXMLReader(configuration0);
      Configuration configuration1 = baseConfigurationXMLReader0.getParsedConfiguration();
}"
311,"    public Configuration getConfiguration() {
        return config;
    }","  public void test2()  throws Throwable  {
      BaseConfigurationXMLReader baseConfigurationXMLReader0 = new BaseConfigurationXMLReader();
      Configuration configuration0 = baseConfigurationXMLReader0.getConfiguration();
}"
312,"    public Configuration getParsedConfiguration() {
        return getConfiguration();
    }","  public void test3()  throws Throwable  {
      BaseConfigurationXMLReader baseConfigurationXMLReader0 = new BaseConfigurationXMLReader();
      Configuration configuration0 = baseConfigurationXMLReader0.getParsedConfiguration();
}"
313,"    public void setConfiguration(final Configuration conf) {
        config = conf;
    }","  public void test4()  throws Throwable  {
      BaseConfigurationXMLReader baseConfigurationXMLReader0 = new BaseConfigurationXMLReader();
      baseConfigurationXMLReader0.setConfiguration((Configuration) null);
}"
314,"    public Configuration getConfiguration() {
        return config;
    }","  public void test5()  throws Throwable  {
      Configuration configuration0 = mock(Configuration.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(configuration0).toString();
      BaseConfigurationXMLReader baseConfigurationXMLReader0 = new BaseConfigurationXMLReader(configuration0);
      Configuration configuration1 = baseConfigurationXMLReader0.getConfiguration();
}"
315,"    protected void processKeys() {
        fireElementStart(getRootName(), null);
        new SAXConverter().process(getConfiguration());
        fireElementEnd(getRootName());
    }","  public void test6()  throws Throwable  {
      Configuration configuration0 = mock(Configuration.class, new ViolatedAssumptionAnswer());
      BaseConfigurationXMLReader baseConfigurationXMLReader0 = new BaseConfigurationXMLReader(configuration0);
      // Undeclared exception!
      try { 
        baseConfigurationXMLReader0.processKeys();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.configuration2.ConfigurationXMLReader"", e);
      }
  }"
316,"    public BaseConfigurationXMLReader() {
    }","  public void test7()  throws Throwable  {
      BaseConfigurationXMLReader baseConfigurationXMLReader0 = new BaseConfigurationXMLReader();
      BaseConfigurationXMLReader.SAXConverter baseConfigurationXMLReader_SAXConverter0 = baseConfigurationXMLReader0.new SAXConverter();
      // Undeclared exception!
      try { 
        baseConfigurationXMLReader_SAXConverter0.elementEnd((String) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.configuration2.ConfigurationXMLReader"", e);
      }
  }"
317,"    protected void clearInternal() {
        throw new UnsupportedOperationException(""EnvironmentConfiguration is read-only!"");
    }","  public void test0()  throws Throwable  {
      EnvironmentConfiguration environmentConfiguration0 = new EnvironmentConfiguration();
      // Undeclared exception!
      try { 
        environmentConfiguration0.clearInternal();
        fail(""Expecting exception: UnsupportedOperationException"");
      } catch(UnsupportedOperationException e) {
         //
         // EnvironmentConfiguration is read-only!
         //
         verifyException(""org.apache.commons.configuration2.EnvironmentConfiguration"", e);
      }
  }"
318,"    protected void clearPropertyDirect(final String key) {
        throw new UnsupportedOperationException(""EnvironmentConfiguration is read-only!"");
    }","  public void test1()  throws Throwable  {
      EnvironmentConfiguration environmentConfiguration0 = new EnvironmentConfiguration();
      // Undeclared exception!
      try { 
        environmentConfiguration0.clearPropertyDirect(""J{0^"");
        fail(""Expecting exception: UnsupportedOperationException"");
      } catch(UnsupportedOperationException e) {
         //
         // EnvironmentConfiguration is read-only!
         //
         verifyException(""org.apache.commons.configuration2.EnvironmentConfiguration"", e);
      }
  }"
319,"    protected void addPropertyDirect(final String key, final Object value) {
        throw new UnsupportedOperationException(""EnvironmentConfiguration is read-only!"");
    }","  public void test2()  throws Throwable  {
      EnvironmentConfiguration environmentConfiguration0 = new EnvironmentConfiguration();
      // Undeclared exception!
      try { 
        environmentConfiguration0.addPropertyDirect(""~WE?%9K`>!|IlP^"", ""~WE?%9K`>!|IlP^"");
        fail(""Expecting exception: UnsupportedOperationException"");
      } catch(UnsupportedOperationException e) {
         //
         // EnvironmentConfiguration is read-only!
         //
         verifyException(""org.apache.commons.configuration2.EnvironmentConfiguration"", e);
      }
  }"
320,"    protected void clearPropertyDirect(final String key) {
        for (final Configuration config : configList) {
            config.clearProperty(key);
        }
    }","  public void test0()  throws Throwable  {
      BaseConfiguration baseConfiguration0 = new BaseConfiguration();
      CompositeConfiguration compositeConfiguration0 = new CompositeConfiguration(baseConfiguration0);
      compositeConfiguration0.clearPropertyDirect("""");
}"
321,"    protected void clearInternal() {
        configList.clear();
        // recreate the in memory configuration
        inMemoryConfiguration = new BaseConfiguration();
        ((BaseConfiguration) inMemoryConfiguration).setThrowExceptionOnMissing(isThrowExceptionOnMissing());
        ((BaseConfiguration) inMemoryConfiguration).setListDelimiterHandler(getListDelimiterHandler());
        configList.add(inMemoryConfiguration);
        inMemoryConfigIsChild = false;
    }","  public void test1()  throws Throwable  {
      CompositeConfiguration compositeConfiguration0 = new CompositeConfiguration();
      compositeConfiguration0.clearInternal();
}"
322,"    public CompositeConfiguration() {
        clear();
    }","  public void test2()  throws Throwable  {
      ArrayDeque<BaseHierarchicalConfiguration> arrayDeque0 = new ArrayDeque<BaseHierarchicalConfiguration>();
      CompositeConfiguration compositeConfiguration0 = new CompositeConfiguration(arrayDeque0);
}"
323,"    protected Object getPropertyInternal(final String key) {
        Configuration firstMatchingConfiguration = null;
        for (final Configuration config : configList) {
            if (config.containsKey(key)) {
                firstMatchingConfiguration = config;
                break;
            }
        }

        if (firstMatchingConfiguration != null) {
            return firstMatchingConfiguration.getProperty(key);
        }
        return null;
    }","  public void test3()  throws Throwable  {
      CompositeConfiguration compositeConfiguration0 = new CompositeConfiguration();
      INIConfiguration iNIConfiguration0 = new INIConfiguration();
      compositeConfiguration0.addPropertyDirect(""Key must not be null!"", iNIConfiguration0);
      INIConfiguration iNIConfiguration1 = (INIConfiguration)compositeConfiguration0.getPropertyInternal(""Key must not be null!"");
}"
324,"    public List<Object> getList(final String key, final List<?> defaultValue) {
        final List<Object> list = new ArrayList<>();

        // add all elements from the first configuration containing the requested key
        final Iterator<Configuration> it = configList.iterator();
        while (it.hasNext() && list.isEmpty()) {
            final Configuration config = it.next();
            if (config != inMemoryConfiguration && config.containsKey(key)) {
                appendListProperty(list, config, key);
            }
        }

        // add all elements from the in memory configuration
        appendListProperty(list, inMemoryConfiguration, key);

        if (list.isEmpty()) {
            // This is okay because we just return this list to the caller
            @SuppressWarnings(""unchecked"")
            final List<Object> resultList = (List<Object>) defaultValue;
            return resultList;
        }

        final ListIterator<Object> lit = list.listIterator();
        while (lit.hasNext()) {
            lit.set(interpolate(lit.next()));
        }

        return list;
    }","  public void test4()  throws Throwable  {
      CompositeConfiguration compositeConfiguration0 = new CompositeConfiguration();
      List<Object> list0 = compositeConfiguration0.getList(""D?ffOg</{WFek7hTXw"", (List<?>) null);
}"
325,"    public Configuration getInMemoryConfiguration() {
        beginRead(false);
        try {
            return inMemoryConfiguration;
        } finally {
            endRead();
        }
    }","  public void test5()  throws Throwable  {
      ArrayDeque<EnvironmentConfiguration> arrayDeque0 = new ArrayDeque<EnvironmentConfiguration>();
      CompositeConfiguration compositeConfiguration0 = new CompositeConfiguration((Configuration) null, arrayDeque0);
      Configuration configuration0 = compositeConfiguration0.getInMemoryConfiguration();
}"
326,"    public Configuration getConfiguration(final int index) {
        beginRead(false);
        try {
            return configList.get(index);
        } finally {
            endRead();
        }
    }","  public void test6()  throws Throwable  {
      CompositeConfiguration compositeConfiguration0 = new CompositeConfiguration((Configuration) null);
      Configuration configuration0 = compositeConfiguration0.getConfiguration(0);
}"
327,"    protected boolean containsKeyInternal(final String key) {
        for (final Configuration config : configList) {
            if (config.containsKey(key)) {
                return true;
            }
        }
        return false;
    }","  public void test7()  throws Throwable  {
      BaseConfiguration baseConfiguration0 = new BaseConfiguration();
      CompositeConfiguration compositeConfiguration0 = new CompositeConfiguration(baseConfiguration0);
      compositeConfiguration0.setPropertyInternal((String) null, ""merge tab into dual"");
      boolean boolean0 = compositeConfiguration0.containsKeyInternal((String) null);
}"
328,"    protected boolean containsKeyInternal(final String key) {
        for (final Configuration config : configList) {
            if (config.containsKey(key)) {
                return true;
            }
        }
        return false;
    }","  public void test8()  throws Throwable  {
      CompositeConfiguration compositeConfiguration0 = new CompositeConfiguration();
      boolean boolean0 = compositeConfiguration0.containsKeyInternal(""<"");
}"
329,"    public void setListDelimiterHandler(final ListDelimiterHandler listDelimiterHandler) {
        if (inMemoryConfiguration instanceof AbstractConfiguration) {
            ((AbstractConfiguration) inMemoryConfiguration).setListDelimiterHandler(listDelimiterHandler);
        }
        super.setListDelimiterHandler(listDelimiterHandler);
    }","  public void test9()  throws Throwable  {
      CompositeConfiguration compositeConfiguration0 = new CompositeConfiguration((Collection<? extends Configuration>) null);
      // Undeclared exception!
      try { 
        compositeConfiguration0.setListDelimiterHandler((ListDelimiterHandler) null);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // List delimiter handler must not be null!
         //
         verifyException(""org.apache.commons.configuration2.AbstractConfiguration"", e);
      }
  }"
330,"    public void removeConfiguration(final Configuration config) {
        beginWrite(false);
        try {
            // Make sure that you can't remove the inMemoryConfiguration from
            // the CompositeConfiguration object
            if (!config.equals(inMemoryConfiguration)) {
                configList.remove(config);
            }
        } finally {
            endWrite();
        }
    }","  public void test10()  throws Throwable  {
      CompositeConfiguration compositeConfiguration0 = new CompositeConfiguration();
      // Undeclared exception!
      try { 
        compositeConfiguration0.removeConfiguration((Configuration) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.configuration2.CompositeConfiguration"", e);
      }
  }"
331,"    protected boolean isEmptyInternal() {
        for (final Configuration config : configList) {
            if (!config.isEmpty()) {
                return false;
            }
        }

        return true;
    }","  public void test11()  throws Throwable  {
      UnionCombiner unionCombiner0 = new UnionCombiner();
      CombinedConfiguration combinedConfiguration0 = new CombinedConfiguration(unionCombiner0);
      NodeSelector nodeSelector0 = new NodeSelector(""#l=Sni|@nQ(;`ClaVX"");
      TrackedNodeModel trackedNodeModel0 = new TrackedNodeModel(combinedConfiguration0, nodeSelector0, false);
      SubnodeConfiguration subnodeConfiguration0 = new SubnodeConfiguration(combinedConfiguration0, trackedNodeModel0);
      ArrayList<XMLPropertiesConfiguration> arrayList0 = new ArrayList<XMLPropertiesConfiguration>();
      CompositeConfiguration compositeConfiguration0 = new CompositeConfiguration(subnodeConfiguration0, arrayList0);
      // Undeclared exception!
      try { 
        compositeConfiguration0.isEmptyInternal();
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // No tracked node found: org.apache.commons.configuration2.tree.NodeSelector@12[keys=[#l=Sni|@nQ(;`ClaVX]]
         //
         verifyException(""org.apache.commons.configuration2.tree.NodeTracker"", e);
      }
  }"
332,"    protected boolean isEmptyInternal() {
        for (final Configuration config : configList) {
            if (!config.isEmpty()) {
                return false;
            }
        }

        return true;
    }","  public void test12()  throws Throwable  {
      CompositeConfiguration compositeConfiguration0 = new CompositeConfiguration();
      compositeConfiguration0.addConfiguration((Configuration) null);
      // Undeclared exception!
      try { 
        compositeConfiguration0.isEmptyInternal();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.configuration2.CompositeConfiguration"", e);
      }
  }"
333,"    protected boolean isEmptyInternal() {
        for (final Configuration config : configList) {
            if (!config.isEmpty()) {
                return false;
            }
        }

        return true;
    }","  public void test13()  throws Throwable  {
      BaseConfiguration baseConfiguration0 = new BaseConfiguration();
      CompositeConfiguration compositeConfiguration0 = new CompositeConfiguration(baseConfiguration0);
      Configuration configuration0 = baseConfiguration0.subset(""k/@3YgTzlS0+<P(^"");
      compositeConfiguration0.setPropertyInternal((String) null, ""merge tab into dual"");
      compositeConfiguration0.addConfigurationFirst(configuration0);
      // Undeclared exception!
      try { 
        compositeConfiguration0.isEmptyInternal();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.configuration2.PrefixedKeysIterator"", e);
      }
  }"
334,"    public String[] getStringArray(final String key) {
        final List<Object> list = getList(key);

        // transform property values into strings
        final String[] tokens = new String[list.size()];

        for (int i = 0; i < tokens.length; i++) {
            tokens[i] = String.valueOf(list.get(i));
        }

        return tokens;
    }","  public void test14()  throws Throwable  {
      AbstractYAMLBasedConfiguration abstractYAMLBasedConfiguration0 = new AbstractYAMLBasedConfiguration();
      NodeSelector nodeSelector0 = new NodeSelector(""!RJy>IL6]B_i`T%a"");
      JSONConfiguration jSONConfiguration0 = new JSONConfiguration();
      SubnodeConfiguration subnodeConfiguration0 = abstractYAMLBasedConfiguration0.createSubConfigurationForTrackedNode(nodeSelector0, jSONConfiguration0);
      PatternSubtreeConfigurationWrapper patternSubtreeConfigurationWrapper0 = new PatternSubtreeConfigurationWrapper(subnodeConfiguration0, ""!RJy>IL6]B_i`T%a"");
      SynchronousQueue<JSONConfiguration> synchronousQueue0 = new SynchronousQueue<JSONConfiguration>();
      CompositeConfiguration compositeConfiguration0 = new CompositeConfiguration(patternSubtreeConfigurationWrapper0, synchronousQueue0);
      // Undeclared exception!
      try { 
        compositeConfiguration0.getStringArray(""updateBoolean"");
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // No tracked node found: org.apache.commons.configuration2.tree.NodeSelector@12[keys=[!RJy>IL6]B_i`T%a]]
         //
         verifyException(""org.apache.commons.configuration2.tree.NodeTracker"", e);
      }
  }"
335,"    public String[] getStringArray(final String key) {
        final List<Object> list = getList(key);

        // transform property values into strings
        final String[] tokens = new String[list.size()];

        for (int i = 0; i < tokens.length; i++) {
            tokens[i] = String.valueOf(list.get(i));
        }

        return tokens;
    }","  public void test15()  throws Throwable  {
      ArrayDeque<EnvironmentConfiguration> arrayDeque0 = new ArrayDeque<EnvironmentConfiguration>();
      CompositeConfiguration compositeConfiguration0 = new CompositeConfiguration((Configuration) null, arrayDeque0);
      // Undeclared exception!
      try { 
        compositeConfiguration0.getStringArray(""The key "");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.configuration2.CompositeConfiguration"", e);
      }
  }"
336,"    public String[] getStringArray(final String key) {
        final List<Object> list = getList(key);

        // transform property values into strings
        final String[] tokens = new String[list.size()];

        for (int i = 0; i < tokens.length; i++) {
            tokens[i] = String.valueOf(list.get(i));
        }

        return tokens;
    }","  public void test16()  throws Throwable  {
      CompositeConfiguration compositeConfiguration0 = new CompositeConfiguration();
      MapConfiguration mapConfiguration0 = new MapConfiguration((Map<String, ?>) null);
      compositeConfiguration0.addConfigurationFirst((Configuration) mapConfiguration0, true);
      // Undeclared exception!
      try { 
        compositeConfiguration0.getStringArray((String) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.configuration2.MapConfiguration"", e);
      }
  }"
337,"    public Configuration getSource(final String key) {
        if (key == null) {
            throw new IllegalArgumentException(""Key must not be null!"");
        }

        Configuration source = null;
        for (final Configuration conf : configList) {
            if (conf.containsKey(key)) {
                if (source != null) {
                    throw new IllegalArgumentException(""The key "" + key + "" is defined by multiple sources!"");
                }
                source = conf;
            }
        }

        return source;
    }","  public void test17()  throws Throwable  {
      XMLConfiguration xMLConfiguration0 = new XMLConfiguration();
      NodeSelector nodeSelector0 = new NodeSelector("""");
      TrackedNodeModel trackedNodeModel0 = new TrackedNodeModel(xMLConfiguration0, nodeSelector0, true);
      SubnodeConfiguration subnodeConfiguration0 = new SubnodeConfiguration(xMLConfiguration0, trackedNodeModel0);
      PriorityBlockingQueue<JSONConfiguration> priorityBlockingQueue0 = new PriorityBlockingQueue<JSONConfiguration>();
      CompositeConfiguration compositeConfiguration0 = new CompositeConfiguration(subnodeConfiguration0, priorityBlockingQueue0);
      // Undeclared exception!
      try { 
        compositeConfiguration0.getSource("""");
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // No tracked node found: org.apache.commons.configuration2.tree.NodeSelector@13[keys=[]]
         //
         verifyException(""org.apache.commons.configuration2.tree.NodeTracker"", e);
      }
  }"
338,"    public Configuration getSource(final String key) {
        if (key == null) {
            throw new IllegalArgumentException(""Key must not be null!"");
        }

        Configuration source = null;
        for (final Configuration conf : configList) {
            if (conf.containsKey(key)) {
                if (source != null) {
                    throw new IllegalArgumentException(""The key "" + key + "" is defined by multiple sources!"");
                }
                source = conf;
            }
        }

        return source;
    }","  public void test18()  throws Throwable  {
      Hashtable<CombinedConfiguration, CompositeConfiguration> hashtable0 = new Hashtable<CombinedConfiguration, CompositeConfiguration>();
      MockInitialContext mockInitialContext0 = new MockInitialContext(hashtable0);
      JNDIConfiguration jNDIConfiguration0 = new JNDIConfiguration(mockInitialContext0, """");
      SynchronousQueue<DataConfiguration> synchronousQueue0 = new SynchronousQueue<DataConfiguration>();
      CompositeConfiguration compositeConfiguration0 = new CompositeConfiguration(jNDIConfiguration0, synchronousQueue0);
      // Undeclared exception!
      try { 
        compositeConfiguration0.getSource("" is defined by multiple sources!"");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.configuration2.JNDIConfiguration"", e);
      }
  }"
339,"    protected Object getPropertyInternal(final String key) {
        Configuration firstMatchingConfiguration = null;
        for (final Configuration config : configList) {
            if (config.containsKey(key)) {
                firstMatchingConfiguration = config;
                break;
            }
        }

        if (firstMatchingConfiguration != null) {
            return firstMatchingConfiguration.getProperty(key);
        }
        return null;
    }","  public void test19()  throws Throwable  {
      CompositeConfiguration compositeConfiguration0 = new CompositeConfiguration((Configuration) null);
      // Undeclared exception!
      try { 
        compositeConfiguration0.getPropertyInternal(""JARS"");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.configuration2.CompositeConfiguration"", e);
      }
  }"
340,"    protected Object getPropertyInternal(final String key) {
        Configuration firstMatchingConfiguration = null;
        for (final Configuration config : configList) {
            if (config.containsKey(key)) {
                firstMatchingConfiguration = config;
                break;
            }
        }

        if (firstMatchingConfiguration != null) {
            return firstMatchingConfiguration.getProperty(key);
        }
        return null;
    }","  public void test20()  throws Throwable  {
      BaseConfiguration baseConfiguration0 = new BaseConfiguration();
      CompositeConfiguration compositeConfiguration0 = new CompositeConfiguration(baseConfiguration0, (Collection<? extends Configuration>) null);
      SystemConfiguration systemConfiguration0 = new SystemConfiguration();
      compositeConfiguration0.addConfigurationFirst((Configuration) systemConfiguration0, true);
      // Undeclared exception!
      try { 
        compositeConfiguration0.getPropertyInternal((String) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
341,"    public List<Object> getList(final String key, final List<?> defaultValue) {
        final List<Object> list = new ArrayList<>();

        // add all elements from the first configuration containing the requested key
        final Iterator<Configuration> it = configList.iterator();
        while (it.hasNext() && list.isEmpty()) {
            final Configuration config = it.next();
            if (config != inMemoryConfiguration && config.containsKey(key)) {
                appendListProperty(list, config, key);
            }
        }

        // add all elements from the in memory configuration
        appendListProperty(list, inMemoryConfiguration, key);

        if (list.isEmpty()) {
            // This is okay because we just return this list to the caller
            @SuppressWarnings(""unchecked"")
            final List<Object> resultList = (List<Object>) defaultValue;
            return resultList;
        }

        final ListIterator<Object> lit = list.listIterator();
        while (lit.hasNext()) {
            lit.set(interpolate(lit.next()));
        }

        return list;
    }","  public void test21()  throws Throwable  {
      CombinedConfiguration combinedConfiguration0 = new CombinedConfiguration();
      YAMLConfiguration yAMLConfiguration0 = new YAMLConfiguration(combinedConfiguration0);
      NodeSelector nodeSelector0 = new NodeSelector("""");
      SubnodeConfiguration subnodeConfiguration0 = yAMLConfiguration0.createSubConfigurationForTrackedNode(nodeSelector0, combinedConfiguration0);
      CompositeConfiguration compositeConfiguration0 = new CompositeConfiguration(subnodeConfiguration0, (Collection<? extends Configuration>) null);
      // Undeclared exception!
      try { 
        compositeConfiguration0.getList(""iQy"", (List<?>) null);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // No tracked node found: org.apache.commons.configuration2.tree.NodeSelector@24[keys=[]]
         //
         verifyException(""org.apache.commons.configuration2.tree.NodeTracker"", e);
      }
  }"
342,"    public List<Object> getList(final String key, final List<?> defaultValue) {
        final List<Object> list = new ArrayList<>();

        // add all elements from the first configuration containing the requested key
        final Iterator<Configuration> it = configList.iterator();
        while (it.hasNext() && list.isEmpty()) {
            final Configuration config = it.next();
            if (config != inMemoryConfiguration && config.containsKey(key)) {
                appendListProperty(list, config, key);
            }
        }

        // add all elements from the in memory configuration
        appendListProperty(list, inMemoryConfiguration, key);

        if (list.isEmpty()) {
            // This is okay because we just return this list to the caller
            @SuppressWarnings(""unchecked"")
            final List<Object> resultList = (List<Object>) defaultValue;
            return resultList;
        }

        final ListIterator<Object> lit = list.listIterator();
        while (lit.hasNext()) {
            lit.set(interpolate(lit.next()));
        }

        return list;
    }","  public void test22()  throws Throwable  {
      CombinedConfiguration combinedConfiguration0 = new CombinedConfiguration();
      ArrayList<BaseHierarchicalConfiguration> arrayList0 = new ArrayList<BaseHierarchicalConfiguration>();
      CompositeConfiguration compositeConfiguration0 = new CompositeConfiguration(combinedConfiguration0, arrayList0);
      compositeConfiguration0.addConfigurationFirst((Configuration) null, true);
      // Undeclared exception!
      try { 
        compositeConfiguration0.getList(""nx.T(~+T%)\""8)TqT"", (List<?>) arrayList0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.configuration2.CompositeConfiguration"", e);
      }
  }"
343,"    public List<Object> getList(final String key, final List<?> defaultValue) {
        final List<Object> list = new ArrayList<>();

        // add all elements from the first configuration containing the requested key
        final Iterator<Configuration> it = configList.iterator();
        while (it.hasNext() && list.isEmpty()) {
            final Configuration config = it.next();
            if (config != inMemoryConfiguration && config.containsKey(key)) {
                appendListProperty(list, config, key);
            }
        }

        // add all elements from the in memory configuration
        appendListProperty(list, inMemoryConfiguration, key);

        if (list.isEmpty()) {
            // This is okay because we just return this list to the caller
            @SuppressWarnings(""unchecked"")
            final List<Object> resultList = (List<Object>) defaultValue;
            return resultList;
        }

        final ListIterator<Object> lit = list.listIterator();
        while (lit.hasNext()) {
            lit.set(interpolate(lit.next()));
        }

        return list;
    }","  public void test23()  throws Throwable  {
      JNDIConfiguration jNDIConfiguration0 = new JNDIConfiguration();
      CompositeConfiguration compositeConfiguration0 = new CompositeConfiguration(jNDIConfiguration0);
      // Undeclared exception!
      try { 
        compositeConfiguration0.getList((String) null, (List<?>) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.configuration2.JNDIConfiguration"", e);
      }
  }"
344,"    protected Iterator<String> getKeysInternal() {
        final Set<String> keys = new LinkedHashSet<>();
        for (final Configuration config : configList) {
            for (final Iterator<String> it = config.getKeys(); it.hasNext();) {
                keys.add(it.next());
            }
        }

        return keys.iterator();
    }","  public void test24()  throws Throwable  {
      INIConfiguration iNIConfiguration0 = new INIConfiguration();
      SubnodeConfiguration subnodeConfiguration0 = iNIConfiguration0.getSection(""hw^`E`9!Ecj"");
      NodeSelector nodeSelector0 = new NodeSelector(""rOelqx&%"");
      SubnodeConfiguration subnodeConfiguration1 = subnodeConfiguration0.createSubConfigurationForTrackedNode(nodeSelector0, iNIConfiguration0);
      ArrayDeque<SubsetConfiguration> arrayDeque0 = new ArrayDeque<SubsetConfiguration>();
      CompositeConfiguration compositeConfiguration0 = new CompositeConfiguration(subnodeConfiguration1, arrayDeque0);
      // Undeclared exception!
      try { 
        compositeConfiguration0.getKeysInternal("""");
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // No tracked node found: org.apache.commons.configuration2.tree.NodeSelector@34[keys=[rOelqx&%]]
         //
         verifyException(""org.apache.commons.configuration2.tree.NodeTracker"", e);
      }
  }"
345,"    protected Iterator<String> getKeysInternal() {
        final Set<String> keys = new LinkedHashSet<>();
        for (final Configuration config : configList) {
            for (final Iterator<String> it = config.getKeys(); it.hasNext();) {
                keys.add(it.next());
            }
        }

        return keys.iterator();
    }","  public void test25()  throws Throwable  {
      LinkedTransferQueue<DatabaseConfiguration> linkedTransferQueue0 = new LinkedTransferQueue<DatabaseConfiguration>();
      DatabaseConfiguration databaseConfiguration0 = new DatabaseConfiguration();
      linkedTransferQueue0.add(databaseConfiguration0);
      CompositeConfiguration compositeConfiguration0 = new CompositeConfiguration(linkedTransferQueue0);
      // Undeclared exception!
      try { 
        compositeConfiguration0.getKeysInternal((String) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.configuration2.DatabaseConfiguration$JdbcOperation"", e);
      }
  }"
346,"    protected Iterator<String> getKeysInternal() {
        final Set<String> keys = new LinkedHashSet<>();
        for (final Configuration config : configList) {
            for (final Iterator<String> it = config.getKeys(); it.hasNext();) {
                keys.add(it.next());
            }
        }

        return keys.iterator();
    }","  public void test26()  throws Throwable  {
      DynamicCombinedConfiguration dynamicCombinedConfiguration0 = new DynamicCombinedConfiguration();
      YAMLConfiguration yAMLConfiguration0 = new YAMLConfiguration();
      NodeSelector nodeSelector0 = new NodeSelector(""Cgtm0Aci'JEh<"");
      SubnodeConfiguration subnodeConfiguration0 = yAMLConfiguration0.createSubConfigurationForTrackedNode(nodeSelector0, dynamicCombinedConfiguration0);
      TreeSet<SubnodeConfiguration> treeSet0 = new TreeSet<SubnodeConfiguration>();
      CompositeConfiguration compositeConfiguration0 = new CompositeConfiguration(subnodeConfiguration0, treeSet0);
      // Undeclared exception!
      try { 
        compositeConfiguration0.getKeysInternal();
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // No tracked node found: org.apache.commons.configuration2.tree.NodeSelector@25[keys=[Cgtm0Aci'JEh<]]
         //
         verifyException(""org.apache.commons.configuration2.tree.NodeTracker"", e);
      }
  }"
347,"    protected Iterator<String> getKeysInternal() {
        final Set<String> keys = new LinkedHashSet<>();
        for (final Configuration config : configList) {
            for (final Iterator<String> it = config.getKeys(); it.hasNext();) {
                keys.add(it.next());
            }
        }

        return keys.iterator();
    }","  public void test27()  throws Throwable  {
      ArrayDeque<JSONConfiguration> arrayDeque0 = new ArrayDeque<JSONConfiguration>();
      CompositeConfiguration compositeConfiguration0 = new CompositeConfiguration((Configuration) null, arrayDeque0);
      // Undeclared exception!
      try { 
        compositeConfiguration0.getKeysInternal();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.configuration2.CompositeConfiguration"", e);
      }
  }"
348,"    public Configuration getConfiguration(final int index) {
        beginRead(false);
        try {
            return configList.get(index);
        } finally {
            endRead();
        }
    }","  public void test28()  throws Throwable  {
      CompositeConfiguration compositeConfiguration0 = new CompositeConfiguration((Configuration) null);
      // Undeclared exception!
      try { 
        compositeConfiguration0.getConfiguration((-2645));
        fail(""Expecting exception: IndexOutOfBoundsException"");
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2645, Size: 1
         //
         verifyException(""java.util.LinkedList"", e);
      }
  }"
349,"    protected boolean containsKeyInternal(final String key) {
        for (final Configuration config : configList) {
            if (config.containsKey(key)) {
                return true;
            }
        }
        return false;
    }","  public void test29()  throws Throwable  {
      CompositeConfiguration compositeConfiguration0 = new CompositeConfiguration();
      MapConfiguration mapConfiguration0 = new MapConfiguration((Map<String, ?>) null);
      compositeConfiguration0.addConfigurationFirst((Configuration) mapConfiguration0, true);
      // Undeclared exception!
      try { 
        compositeConfiguration0.containsKeyInternal("""");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.configuration2.MapConfiguration"", e);
      }
  }"
350,"    public Object clone() {
        try {
            final CompositeConfiguration copy = (CompositeConfiguration) super.clone();
            copy.configList = new LinkedList<>();
            copy.inMemoryConfiguration = ConfigurationUtils.cloneConfiguration(getInMemoryConfiguration());
            copy.configList.add(copy.inMemoryConfiguration);

            for (final Configuration config : configList) {
                if (config != getInMemoryConfiguration()) {
                    copy.addConfiguration(ConfigurationUtils.cloneConfiguration(config));
                }
            }

            copy.cloneInterpolator(this);
            return copy;
        } catch (final CloneNotSupportedException cnex) {
            // cannot happen
            throw new ConfigurationRuntimeException(cnex);
        }
    }","  public void test30()  throws Throwable  {
      BaseConfiguration baseConfiguration0 = new BaseConfiguration();
      CompositeConfiguration compositeConfiguration0 = new CompositeConfiguration(baseConfiguration0);
      DataConfiguration dataConfiguration0 = new DataConfiguration(baseConfiguration0);
      compositeConfiguration0.addConfiguration((Configuration) dataConfiguration0);
      // Undeclared exception!
      try { 
        compositeConfiguration0.clone();
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // java.lang.CloneNotSupportedException: org.apache.commons.configuration2.DataConfiguration does not implement Cloneable
         //
         verifyException(""org.apache.commons.configuration2.ConfigurationUtils"", e);
      }
  }"
351,"    public Object clone() {
        try {
            final CompositeConfiguration copy = (CompositeConfiguration) super.clone();
            copy.configList = new LinkedList<>();
            copy.inMemoryConfiguration = ConfigurationUtils.cloneConfiguration(getInMemoryConfiguration());
            copy.configList.add(copy.inMemoryConfiguration);

            for (final Configuration config : configList) {
                if (config != getInMemoryConfiguration()) {
                    copy.addConfiguration(ConfigurationUtils.cloneConfiguration(config));
                }
            }

            copy.cloneInterpolator(this);
            return copy;
        } catch (final CloneNotSupportedException cnex) {
            // cannot happen
            throw new ConfigurationRuntimeException(cnex);
        }
    }","  public void test31()  throws Throwable  {
      YAMLConfiguration yAMLConfiguration0 = new YAMLConfiguration();
      CompositeConfiguration compositeConfiguration0 = new CompositeConfiguration(yAMLConfiguration0);
      compositeConfiguration0.setInterpolator((ConfigurationInterpolator) null);
      // Undeclared exception!
      try { 
        compositeConfiguration0.clone();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.configuration2.AbstractConfiguration"", e);
      }
  }"
352,"    protected void clearPropertyDirect(final String key) {
        for (final Configuration config : configList) {
            config.clearProperty(key);
        }
    }","  public void test32()  throws Throwable  {
      CompositeConfiguration compositeConfiguration0 = new CompositeConfiguration((Configuration) null);
      // Undeclared exception!
      try { 
        compositeConfiguration0.clearPropertyDirect(""F>B%5l|^)j"");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.configuration2.CompositeConfiguration"", e);
      }
  }"
353,"    protected void addPropertyDirect(final String key, final Object token) {
        inMemoryConfiguration.addProperty(key, token);
    }","  public void test33()  throws Throwable  {
      LinkedBlockingDeque<BaseConfiguration> linkedBlockingDeque0 = new LinkedBlockingDeque<BaseConfiguration>();
      CompositeConfiguration compositeConfiguration0 = new CompositeConfiguration((Configuration) null, linkedBlockingDeque0);
      IntKeyIntValueHashMap intKeyIntValueHashMap0 = new IntKeyIntValueHashMap();
      // Undeclared exception!
      try { 
        compositeConfiguration0.addPropertyDirect(""getOracleStatement"", intKeyIntValueHashMap0.ACCESS_MAX);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.configuration2.CompositeConfiguration"", e);
      }
  }"
354,"    protected void addPropertyDirect(final String key, final Object token) {
        inMemoryConfiguration.addProperty(key, token);
    }","  public void test34()  throws Throwable  {
      JSONConfiguration jSONConfiguration0 = new JSONConfiguration();
      CompositeConfiguration compositeConfiguration0 = new CompositeConfiguration(jSONConfiguration0);
      // Undeclared exception!
      try { 
        compositeConfiguration0.addPropertyDirect("""", """");
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Key for add operation must be defined!
         //
         verifyException(""org.apache.commons.configuration2.tree.DefaultExpressionEngine"", e);
      }
  }"
355,"    public void setListDelimiterHandler(final ListDelimiterHandler listDelimiterHandler) {
        if (inMemoryConfiguration instanceof AbstractConfiguration) {
            ((AbstractConfiguration) inMemoryConfiguration).setListDelimiterHandler(listDelimiterHandler);
        }
        super.setListDelimiterHandler(listDelimiterHandler);
    }","  public void test35()  throws Throwable  {
      CompositeConfiguration compositeConfiguration0 = new CompositeConfiguration((Configuration) null);
      DisabledListDelimiterHandler disabledListDelimiterHandler0 = (DisabledListDelimiterHandler)DisabledListDelimiterHandler.INSTANCE;
      compositeConfiguration0.setListDelimiterHandler(disabledListDelimiterHandler0);
}"
356,"    public List<Object> getList(final String key, final List<?> defaultValue) {
        final List<Object> list = new ArrayList<>();

        // add all elements from the first configuration containing the requested key
        final Iterator<Configuration> it = configList.iterator();
        while (it.hasNext() && list.isEmpty()) {
            final Configuration config = it.next();
            if (config != inMemoryConfiguration && config.containsKey(key)) {
                appendListProperty(list, config, key);
            }
        }

        // add all elements from the in memory configuration
        appendListProperty(list, inMemoryConfiguration, key);

        if (list.isEmpty()) {
            // This is okay because we just return this list to the caller
            @SuppressWarnings(""unchecked"")
            final List<Object> resultList = (List<Object>) defaultValue;
            return resultList;
        }

        final ListIterator<Object> lit = list.listIterator();
        while (lit.hasNext()) {
            lit.set(interpolate(lit.next()));
        }

        return list;
    }","  public void test36()  throws Throwable  {
      CompositeConfiguration compositeConfiguration0 = new CompositeConfiguration();
      PoolXADataSourceImpl poolXADataSourceImpl0 = new PoolXADataSourceImpl();
      Properties properties0 = poolXADataSourceImpl0.getConnectionFactoryProperties();
      MapConfiguration mapConfiguration0 = new MapConfiguration(properties0);
      compositeConfiguration0.addConfigurationFirst((Configuration) mapConfiguration0);
      Stack<XMLConfiguration> stack0 = new Stack<XMLConfiguration>();
      List<Object> list0 = compositeConfiguration0.getList(""oracle.security.client.default_password"", (List<?>) stack0);
}"
357,"    public void addConfigurationFirst(final Configuration config) {
        addConfigurationFirst(config, false);
    }","  public void test37()  throws Throwable  {
      DynamicCombinedConfiguration dynamicCombinedConfiguration0 = new DynamicCombinedConfiguration();
      SubsetConfiguration subsetConfiguration0 = new SubsetConfiguration(dynamicCombinedConfiguration0, ""a]lR|"", ""a]lR|"");
      CompositeConfiguration compositeConfiguration0 = new CompositeConfiguration(subsetConfiguration0);
      compositeConfiguration0.addConfigurationFirst((Configuration) subsetConfiguration0, false);
}"
358,"    protected boolean containsKeyInternal(final String key) {
        for (final Configuration config : configList) {
            if (config.containsKey(key)) {
                return true;
            }
        }
        return false;
    }","  public void test38()  throws Throwable  {
      CompositeConfiguration compositeConfiguration0 = new CompositeConfiguration();
      compositeConfiguration0.addConfiguration((Configuration) null, true);
      // Undeclared exception!
      try { 
        compositeConfiguration0.containsKeyInternal(""oracle.security.client.default_password"");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.configuration2.CompositeConfiguration"", e);
      }
  }"
359,"    public void addConfiguration(final Configuration config) {
        addConfiguration(config, false);
    }","  public void test39()  throws Throwable  {
      MergeCombiner mergeCombiner0 = new MergeCombiner();
      DynamicCombinedConfiguration dynamicCombinedConfiguration0 = new DynamicCombinedConfiguration(mergeCombiner0);
      YAMLConfiguration yAMLConfiguration0 = new YAMLConfiguration();
      CompositeConfiguration compositeConfiguration0 = new CompositeConfiguration(dynamicCombinedConfiguration0);
      compositeConfiguration0.addConfiguration((Configuration) yAMLConfiguration0, false);
}"
360,"    public void addConfiguration(final Configuration config) {
        addConfiguration(config, false);
    }","  public void test40()  throws Throwable  {
      DynamicCombinedConfiguration dynamicCombinedConfiguration0 = new DynamicCombinedConfiguration();
      SubsetConfiguration subsetConfiguration0 = new SubsetConfiguration(dynamicCombinedConfiguration0, """", ""{0} encoding not found, returning default encoding"");
      CompositeConfiguration compositeConfiguration0 = new CompositeConfiguration(subsetConfiguration0);
      compositeConfiguration0.addConfiguration((Configuration) subsetConfiguration0, true);
}"
361,"    public CompositeConfiguration() {
        clear();
    }","  public void test41()  throws Throwable  {
      CompositeConfiguration compositeConfiguration0 = new CompositeConfiguration();
      LinkedHashSet<PropertiesConfiguration> linkedHashSet0 = new LinkedHashSet<PropertiesConfiguration>();
      PropertiesConfiguration propertiesConfiguration0 = new PropertiesConfiguration();
      linkedHashSet0.add(propertiesConfiguration0);
      CompositeConfiguration compositeConfiguration1 = new CompositeConfiguration(compositeConfiguration0, linkedHashSet0);
}"
362,"    public List<Object> getList(final String key, final List<?> defaultValue) {
        final List<Object> list = new ArrayList<>();

        // add all elements from the first configuration containing the requested key
        final Iterator<Configuration> it = configList.iterator();
        while (it.hasNext() && list.isEmpty()) {
            final Configuration config = it.next();
            if (config != inMemoryConfiguration && config.containsKey(key)) {
                appendListProperty(list, config, key);
            }
        }

        // add all elements from the in memory configuration
        appendListProperty(list, inMemoryConfiguration, key);

        if (list.isEmpty()) {
            // This is okay because we just return this list to the caller
            @SuppressWarnings(""unchecked"")
            final List<Object> resultList = (List<Object>) defaultValue;
            return resultList;
        }

        final ListIterator<Object> lit = list.listIterator();
        while (lit.hasNext()) {
            lit.set(interpolate(lit.next()));
        }

        return list;
    }","  public void test42()  throws Throwable  {
      BaseConfiguration baseConfiguration0 = new BaseConfiguration();
      CompositeConfiguration compositeConfiguration0 = new CompositeConfiguration(baseConfiguration0);
      compositeConfiguration0.setPropertyInternal((String) null, ""Cgtm0A'JEh<"");
      baseConfiguration0.append(compositeConfiguration0);
      List<EventListenerRegistrationData<?>> list0 = compositeConfiguration0.getEventListenerRegistrations();
      List<Object> list1 = compositeConfiguration0.getList((String) null, list0);
}"
363,"    public void addConfigurationFirst(final Configuration config) {
        addConfigurationFirst(config, false);
    }","  public void test43()  throws Throwable  {
      CompositeConfiguration compositeConfiguration0 = new CompositeConfiguration();
      PropertiesConfiguration propertiesConfiguration0 = new PropertiesConfiguration();
      XMLPropertiesConfiguration xMLPropertiesConfiguration0 = new XMLPropertiesConfiguration();
      compositeConfiguration0.addConfigurationFirst((Configuration) propertiesConfiguration0, true);
      compositeConfiguration0.addConfigurationFirst((Configuration) xMLPropertiesConfiguration0, true);
}"
364,"    public Configuration getSource(final String key) {
        if (key == null) {
            throw new IllegalArgumentException(""Key must not be null!"");
        }

        Configuration source = null;
        for (final Configuration conf : configList) {
            if (conf.containsKey(key)) {
                if (source != null) {
                    throw new IllegalArgumentException(""The key "" + key + "" is defined by multiple sources!"");
                }
                source = conf;
            }
        }

        return source;
    }","  public void test44()  throws Throwable  {
      DynamicCombinedConfiguration dynamicCombinedConfiguration0 = new DynamicCombinedConfiguration();
      SubsetConfiguration subsetConfiguration0 = new SubsetConfiguration(dynamicCombinedConfiguration0, ""a]lR|"", ""a]lR|"");
      CompositeConfiguration compositeConfiguration0 = new CompositeConfiguration(subsetConfiguration0);
      Configuration configuration0 = compositeConfiguration0.getSource(""a]lR|"");
}"
365,"    public Configuration getSource(final String key) {
        if (key == null) {
            throw new IllegalArgumentException(""Key must not be null!"");
        }

        Configuration source = null;
        for (final Configuration conf : configList) {
            if (conf.containsKey(key)) {
                if (source != null) {
                    throw new IllegalArgumentException(""The key "" + key + "" is defined by multiple sources!"");
                }
                source = conf;
            }
        }

        return source;
    }","  public void test45()  throws Throwable  {
      DynamicCombinedConfiguration dynamicCombinedConfiguration0 = new DynamicCombinedConfiguration();
      SubsetConfiguration subsetConfiguration0 = new SubsetConfiguration(dynamicCombinedConfiguration0, ""org.apache.commons.configuration2.CompositeConfiguration"", ""org.apache.commons.configuration2.CompositeConfiguration"");
      CompositeConfiguration compositeConfiguration0 = new CompositeConfiguration(subsetConfiguration0);
      // Undeclared exception!
      try { 
        compositeConfiguration0.getSource((String) null);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Key must not be null!
         //
         verifyException(""org.apache.commons.configuration2.CompositeConfiguration"", e);
      }
  }"
366,"    public void addConfigurationFirst(final Configuration config) {
        addConfigurationFirst(config, false);
    }","  public void test46()  throws Throwable  {
      CompositeConfiguration compositeConfiguration0 = new CompositeConfiguration();
      compositeConfiguration0.addConfigurationFirst((Configuration) null, true);
      // Undeclared exception!
      try { 
        compositeConfiguration0.interpolatedConfiguration();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.configuration2.CompositeConfiguration"", e);
      }
  }"
367,"    public Object clone() {
        try {
            final CompositeConfiguration copy = (CompositeConfiguration) super.clone();
            copy.configList = new LinkedList<>();
            copy.inMemoryConfiguration = ConfigurationUtils.cloneConfiguration(getInMemoryConfiguration());
            copy.configList.add(copy.inMemoryConfiguration);

            for (final Configuration config : configList) {
                if (config != getInMemoryConfiguration()) {
                    copy.addConfiguration(ConfigurationUtils.cloneConfiguration(config));
                }
            }

            copy.cloneInterpolator(this);
            return copy;
        } catch (final CloneNotSupportedException cnex) {
            // cannot happen
            throw new ConfigurationRuntimeException(cnex);
        }
    }","  public void test47()  throws Throwable  {
      CompositeConfiguration compositeConfiguration0 = new CompositeConfiguration();
      YAMLConfiguration yAMLConfiguration0 = new YAMLConfiguration();
      compositeConfiguration0.addConfigurationFirst((Configuration) yAMLConfiguration0, false);
      Object object0 = compositeConfiguration0.clone();
}"
368,"    public String[] getStringArray(final String key) {
        final List<Object> list = getList(key);

        // transform property values into strings
        final String[] tokens = new String[list.size()];

        for (int i = 0; i < tokens.length; i++) {
            tokens[i] = String.valueOf(list.get(i));
        }

        return tokens;
    }","  public void test48()  throws Throwable  {
      CompositeConfiguration compositeConfiguration0 = new CompositeConfiguration();
      BaseConfiguration baseConfiguration0 = (BaseConfiguration)compositeConfiguration0.getInMemoryConfiguration();
      PropertiesConfiguration propertiesConfiguration0 = new PropertiesConfiguration();
      baseConfiguration0.addPropertyInternal(""vXbw\""lKE"", propertiesConfiguration0);
      String[] stringArray0 = compositeConfiguration0.getStringArray(""vXbw\""lKE"");
}"
369,"    public String[] getStringArray(final String key) {
        final List<Object> list = getList(key);

        // transform property values into strings
        final String[] tokens = new String[list.size()];

        for (int i = 0; i < tokens.length; i++) {
            tokens[i] = String.valueOf(list.get(i));
        }

        return tokens;
    }","  public void test49()  throws Throwable  {
      CompositeConfiguration compositeConfiguration0 = new CompositeConfiguration();
      YAMLConfiguration yAMLConfiguration0 = new YAMLConfiguration();
      compositeConfiguration0.addConfigurationFirst((Configuration) yAMLConfiguration0, false);
      String[] stringArray0 = compositeConfiguration0.getStringArray((String) null);
}"
370,"    public List<Object> getList(final String key, final List<?> defaultValue) {
        final List<Object> list = new ArrayList<>();

        // add all elements from the first configuration containing the requested key
        final Iterator<Configuration> it = configList.iterator();
        while (it.hasNext() && list.isEmpty()) {
            final Configuration config = it.next();
            if (config != inMemoryConfiguration && config.containsKey(key)) {
                appendListProperty(list, config, key);
            }
        }

        // add all elements from the in memory configuration
        appendListProperty(list, inMemoryConfiguration, key);

        if (list.isEmpty()) {
            // This is okay because we just return this list to the caller
            @SuppressWarnings(""unchecked"")
            final List<Object> resultList = (List<Object>) defaultValue;
            return resultList;
        }

        final ListIterator<Object> lit = list.listIterator();
        while (lit.hasNext()) {
            lit.set(interpolate(lit.next()));
        }

        return list;
    }","  public void test50()  throws Throwable  {
      BaseConfiguration baseConfiguration0 = new BaseConfiguration();
      CompositeConfiguration compositeConfiguration0 = new CompositeConfiguration(baseConfiguration0);
      compositeConfiguration0.setPropertyInternal(""Cgtm0A9i'JEh<"", ""Cgtm0A9i'JEh<"");
      DataConfiguration dataConfiguration0 = new DataConfiguration(baseConfiguration0);
      List<EventListenerRegistrationData<?>> list0 = compositeConfiguration0.getEventListenerRegistrations();
      compositeConfiguration0.addConfiguration((Configuration) dataConfiguration0);
      List<Object> list1 = compositeConfiguration0.getList(""Cgtm0A9i'JEh<"", list0);
}"
371,"    protected Object getPropertyInternal(final String key) {
        Configuration firstMatchingConfiguration = null;
        for (final Configuration config : configList) {
            if (config.containsKey(key)) {
                firstMatchingConfiguration = config;
                break;
            }
        }

        if (firstMatchingConfiguration != null) {
            return firstMatchingConfiguration.getProperty(key);
        }
        return null;
    }","  public void test51()  throws Throwable  {
      LinkedHashSet<CompositeConfiguration> linkedHashSet0 = new LinkedHashSet<CompositeConfiguration>();
      UnionCombiner unionCombiner0 = new UnionCombiner();
      DynamicCombinedConfiguration dynamicCombinedConfiguration0 = new DynamicCombinedConfiguration(unionCombiner0);
      CompositeConfiguration compositeConfiguration0 = new CompositeConfiguration(dynamicCombinedConfiguration0, linkedHashSet0);
      linkedHashSet0.add(compositeConfiguration0);
      CompositeConfiguration compositeConfiguration1 = new CompositeConfiguration(linkedHashSet0);
      Object object0 = compositeConfiguration1.getPropertyInternal(""r1wG0.~#055s&Sk5uD"");
}"
372,"    protected boolean isEmptyInternal() {
        for (final Configuration config : configList) {
            if (!config.isEmpty()) {
                return false;
            }
        }

        return true;
    }","  public void test52()  throws Throwable  {
      EnvironmentConfiguration environmentConfiguration0 = new EnvironmentConfiguration();
      Vector<BaseConfiguration> vector0 = new Vector<BaseConfiguration>();
      CompositeConfiguration compositeConfiguration0 = new CompositeConfiguration(environmentConfiguration0, vector0);
      boolean boolean0 = compositeConfiguration0.isEmptyInternal();
}"
373,"    protected boolean isEmptyInternal() {
        for (final Configuration config : configList) {
            if (!config.isEmpty()) {
                return false;
            }
        }

        return true;
    }","  public void test53()  throws Throwable  {
      CompositeConfiguration compositeConfiguration0 = new CompositeConfiguration();
      boolean boolean0 = compositeConfiguration0.isEmptyInternal();
}"
374,"    protected Iterator<String> getKeysInternal() {
        final Set<String> keys = new LinkedHashSet<>();
        for (final Configuration config : configList) {
            for (final Iterator<String> it = config.getKeys(); it.hasNext();) {
                keys.add(it.next());
            }
        }

        return keys.iterator();
    }","  public void test54()  throws Throwable  {
      Stack<CompositeConfiguration> stack0 = new Stack<CompositeConfiguration>();
      CompositeConfiguration compositeConfiguration0 = new CompositeConfiguration(stack0);
      compositeConfiguration0.setPropertyInternal(""?k<Ry\u0001Fg3/B;r&~"", ""?k<Ry\u0001Fg3/B;r&~"");
      Iterator<String> iterator0 = compositeConfiguration0.getKeysInternal(""?k<Ry\u0001Fg3/B;r&~"");
}"
375,"    protected Iterator<String> getKeysInternal() {
        final Set<String> keys = new LinkedHashSet<>();
        for (final Configuration config : configList) {
            for (final Iterator<String> it = config.getKeys(); it.hasNext();) {
                keys.add(it.next());
            }
        }

        return keys.iterator();
    }","  public void test55()  throws Throwable  {
      CompositeConfiguration compositeConfiguration0 = new CompositeConfiguration();
      Iterator<String> iterator0 = compositeConfiguration0.getKeysInternal();
}"
376,"    public void removeConfiguration(final Configuration config) {
        beginWrite(false);
        try {
            // Make sure that you can't remove the inMemoryConfiguration from
            // the CompositeConfiguration object
            if (!config.equals(inMemoryConfiguration)) {
                configList.remove(config);
            }
        } finally {
            endWrite();
        }
    }","  public void test56()  throws Throwable  {
      CompositeConfiguration compositeConfiguration0 = new CompositeConfiguration();
      YAMLConfiguration yAMLConfiguration0 = new YAMLConfiguration();
      compositeConfiguration0.removeConfiguration(yAMLConfiguration0);
}"
377,"    public void removeConfiguration(final Configuration config) {
        beginWrite(false);
        try {
            // Make sure that you can't remove the inMemoryConfiguration from
            // the CompositeConfiguration object
            if (!config.equals(inMemoryConfiguration)) {
                configList.remove(config);
            }
        } finally {
            endWrite();
        }
    }","  public void test57()  throws Throwable  {
      EnvironmentConfiguration environmentConfiguration0 = new EnvironmentConfiguration();
      CompositeConfiguration compositeConfiguration0 = new CompositeConfiguration(environmentConfiguration0);
      compositeConfiguration0.removeConfiguration(environmentConfiguration0);
}"
378,"    protected Iterator<String> getKeysInternal() {
        final Set<String> keys = new LinkedHashSet<>();
        for (final Configuration config : configList) {
            for (final Iterator<String> it = config.getKeys(); it.hasNext();) {
                keys.add(it.next());
            }
        }

        return keys.iterator();
    }","  public void test58()  throws Throwable  {
      LinkedHashSet<CompositeConfiguration> linkedHashSet0 = new LinkedHashSet<CompositeConfiguration>();
      UnionCombiner unionCombiner0 = new UnionCombiner();
      DynamicCombinedConfiguration dynamicCombinedConfiguration0 = new DynamicCombinedConfiguration(unionCombiner0);
      CompositeConfiguration compositeConfiguration0 = new CompositeConfiguration(dynamicCombinedConfiguration0, linkedHashSet0);
      compositeConfiguration0.addConfigurationFirst((Configuration) null, true);
      // Undeclared exception!
      try { 
        compositeConfiguration0.getKeysInternal("""");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.configuration2.CompositeConfiguration"", e);
      }
  }"
379,"    protected Iterator<String> getKeysInternal() {
        final Set<String> keys = new LinkedHashSet<>();
        for (final Configuration config : configList) {
            for (final Iterator<String> it = config.getKeys(); it.hasNext();) {
                keys.add(it.next());
            }
        }

        return keys.iterator();
    }","  public void test59()  throws Throwable  {
      CompositeConfiguration compositeConfiguration0 = new CompositeConfiguration();
      MapConfiguration mapConfiguration0 = new MapConfiguration((Map<String, ?>) null);
      compositeConfiguration0.addConfiguration((Configuration) mapConfiguration0, true);
      // Undeclared exception!
      try { 
        compositeConfiguration0.getKeysInternal();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.configuration2.MapConfiguration"", e);
      }
  }"
380,"    public Configuration getSource(final String key) {
        if (key == null) {
            throw new IllegalArgumentException(""Key must not be null!"");
        }

        Configuration source = null;
        for (final Configuration conf : configList) {
            if (conf.containsKey(key)) {
                if (source != null) {
                    throw new IllegalArgumentException(""The key "" + key + "" is defined by multiple sources!"");
                }
                source = conf;
            }
        }

        return source;
    }","  public void test60()  throws Throwable  {
      ArrayList<SystemConfiguration> arrayList0 = new ArrayList<SystemConfiguration>();
      arrayList0.add((SystemConfiguration) null);
      CompositeConfiguration compositeConfiguration0 = new CompositeConfiguration(arrayList0);
      // Undeclared exception!
      try { 
        compositeConfiguration0.getSource(""P"");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.configuration2.CompositeConfiguration"", e);
      }
  }"
381,"    public void addConfiguration(final Configuration config) {
        addConfiguration(config, false);
    }","  public void test61()  throws Throwable  {
      Stack<CompositeConfiguration> stack0 = new Stack<CompositeConfiguration>();
      CompositeConfiguration compositeConfiguration0 = new CompositeConfiguration(stack0);
      compositeConfiguration0.setPropertyInternal(""?k<Ry\u0001Fg3/B;r&~"", ""?k<Ry\u0001Fg3/B;r&~"");
      BaseConfiguration baseConfiguration0 = (BaseConfiguration)compositeConfiguration0.getSource(""?k<Ry\u0001Fg3/B;r&~"");
      compositeConfiguration0.addConfiguration((Configuration) baseConfiguration0);
}"
382,"    public int getNumberOfConfigurations() {
        beginRead(false);
        try {
            return configList.size();
        } finally {
            endRead();
        }
    }","  public void test62()  throws Throwable  {
      CompositeConfiguration compositeConfiguration0 = new CompositeConfiguration((Collection<? extends Configuration>) null);
      int int0 = compositeConfiguration0.getNumberOfConfigurations();
}"
383,"    public Configuration getConfiguration(final int index) {
        beginRead(false);
        try {
            return configList.get(index);
        } finally {
            endRead();
        }
    }","  public void test63()  throws Throwable  {
      CompositeConfiguration compositeConfiguration0 = new CompositeConfiguration();
      BaseConfiguration baseConfiguration0 = (BaseConfiguration)compositeConfiguration0.getConfiguration(0);
}"
384,"    public boolean terminate() {
        return found;
    }","  public void test0()  throws Throwable  {
      Integer integer0 = new Integer(1);
      FindNodeVisitor<Object> findNodeVisitor0 = new FindNodeVisitor<Object>(integer0);
      NodeHandler<Object> nodeHandler0 = (NodeHandler<Object>) mock(NodeHandler.class, new ViolatedAssumptionAnswer());
      findNodeVisitor0.visitBeforeChildren(integer0, nodeHandler0);
      boolean boolean0 = findNodeVisitor0.terminate();
}"
385,"    public boolean isFound() {
        return found;
    }","  public void test1()  throws Throwable  {
      Integer integer0 = new Integer(1);
      FindNodeVisitor<Object> findNodeVisitor0 = new FindNodeVisitor<Object>(integer0);
      NodeHandler<Object> nodeHandler0 = (NodeHandler<Object>) mock(NodeHandler.class, new ViolatedAssumptionAnswer());
      findNodeVisitor0.visitBeforeChildren(integer0, nodeHandler0);
      boolean boolean0 = findNodeVisitor0.isFound();
}"
386,"    public void visitBeforeChildren(final T node, final NodeHandler<T> handler) {
        if (node.equals(searchNode)) {
            found = true;
        }
    }","  public void test2()  throws Throwable  {
      FindNodeVisitor<String> findNodeVisitor0 = new FindNodeVisitor<String>(""qXY<gQ~;*%2xEu1d"");
      NodeHandler<String> nodeHandler0 = (NodeHandler<String>) mock(NodeHandler.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        findNodeVisitor0.visitBeforeChildren((String) null, nodeHandler0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.configuration2.FindNodeVisitor"", e);
      }
  }"
387,"    public boolean isFound() {
        return found;
    }","  public void test3()  throws Throwable  {
      FindNodeVisitor<Object> findNodeVisitor0 = new FindNodeVisitor<Object>("""");
      Object object0 = new Object();
      NodeHandler<Object> nodeHandler0 = (NodeHandler<Object>) mock(NodeHandler.class, new ViolatedAssumptionAnswer());
      findNodeVisitor0.visitBeforeChildren(object0, nodeHandler0);
}"
388,"    public boolean isFound() {
        return found;
    }","  public void test4()  throws Throwable  {
      FindNodeVisitor<Object> findNodeVisitor0 = new FindNodeVisitor<Object>("""");
      boolean boolean0 = findNodeVisitor0.isFound();
}"
389,"    public boolean terminate() {
        return found;
    }","  public void test5()  throws Throwable  {
      FindNodeVisitor<String> findNodeVisitor0 = new FindNodeVisitor<String>("""");
      boolean boolean0 = findNodeVisitor0.terminate();
}"
390,"    public boolean terminate() {
        return found;
    }","  public void test6()  throws Throwable  {
      FindNodeVisitor<Object> findNodeVisitor0 = new FindNodeVisitor<Object>("""");
      findNodeVisitor0.reset();
}"
391,"    public BaseHierarchicalConfiguration getParent() {
        return parent;
    }","  public void test0()  throws Throwable  {
      INIConfiguration iNIConfiguration0 = new INIConfiguration();
      SubnodeConfiguration subnodeConfiguration0 = iNIConfiguration0.getSection("""");
      iNIConfiguration0.setDetailEvents(true);
      BaseHierarchicalConfiguration baseHierarchicalConfiguration0 = subnodeConfiguration0.getParent();
}"
392,"    protected InMemoryNodeModel getSubConfigurationParentModel() {
        return getTrackedModel().getParentModel();
    }","  public void test1()  throws Throwable  {
      CombinedConfiguration combinedConfiguration0 = new CombinedConfiguration();
      NodeSelector nodeSelector0 = new NodeSelector(""BuMKuR{j"");
      TrackedNodeModel trackedNodeModel0 = new TrackedNodeModel(combinedConfiguration0, nodeSelector0, false);
      SubnodeConfiguration subnodeConfiguration0 = new SubnodeConfiguration(combinedConfiguration0, trackedNodeModel0);
      InMemoryNodeModel inMemoryNodeModel0 = subnodeConfiguration0.getRootNodeModel();
      BaseHierarchicalConfiguration baseHierarchicalConfiguration0 = new BaseHierarchicalConfiguration(inMemoryNodeModel0);
      SubnodeConfiguration subnodeConfiguration1 = baseHierarchicalConfiguration0.createSubConfigurationForTrackedNode(nodeSelector0, subnodeConfiguration0);
      // Undeclared exception!
      try { 
        subnodeConfiguration1.getSubConfigurationParentModel();
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // No tracked node found: org.apache.commons.configuration2.tree.NodeSelector@11[keys=[BuMKuR{j]]
         //
         verifyException(""org.apache.commons.configuration2.tree.NodeTracker"", e);
      }
  }"
393,"    protected InMemoryNodeModel getSubConfigurationParentModel() {
        return getTrackedModel().getParentModel();
    }","  public void test2()  throws Throwable  {
      JSONConfiguration jSONConfiguration0 = new JSONConfiguration((HierarchicalConfiguration<ImmutableNode>) null);
      NodeSelector nodeSelector0 = new NodeSelector(""$"");
      TrackedNodeModel trackedNodeModel0 = new TrackedNodeModel(jSONConfiguration0, nodeSelector0, true);
      BaseHierarchicalConfiguration baseHierarchicalConfiguration0 = new BaseHierarchicalConfiguration(trackedNodeModel0);
      SubnodeConfiguration subnodeConfiguration0 = new SubnodeConfiguration(baseHierarchicalConfiguration0, trackedNodeModel0);
      SubnodeConfiguration subnodeConfiguration1 = subnodeConfiguration0.createSubConfigurationForTrackedNode(nodeSelector0, jSONConfiguration0);
      // Undeclared exception!
      try { 
        subnodeConfiguration1.getSubConfigurationParentModel();
        fail(""Expecting exception: ClassCastException"");
      } catch(ClassCastException e) {
         //
         // org.apache.commons.configuration2.tree.TrackedNodeModel cannot be cast to org.apache.commons.configuration2.tree.InMemoryNodeModel
         //
         verifyException(""org.apache.commons.configuration2.BaseHierarchicalConfiguration"", e);
      }
  }"
394,"    public InMemoryNodeModel getRootNodeModel() {
        if (getParent() instanceof SubnodeConfiguration) {
            return ((SubnodeConfiguration) getParent()).getRootNodeModel();
        }
        return getParent().getNodeModel();
    }","  public void test3()  throws Throwable  {
      INIConfiguration iNIConfiguration0 = new INIConfiguration();
      SubnodeConfiguration subnodeConfiguration0 = iNIConfiguration0.getSection(""$-f/R"");
      NodeModel<ImmutableNode> nodeModel0 = subnodeConfiguration0.cloneNodeModel();
      BaseHierarchicalConfiguration baseHierarchicalConfiguration0 = new BaseHierarchicalConfiguration(nodeModel0);
      InMemoryNodeModel inMemoryNodeModel0 = subnodeConfiguration0.getRootNodeModel();
      NodeSelector nodeSelector0 = inMemoryNodeModel0.trackChildNodeWithCreation(""$-f/R"", ""$-f/R"", subnodeConfiguration0);
      SubnodeConfiguration subnodeConfiguration1 = baseHierarchicalConfiguration0.createSubConfigurationForTrackedNode(nodeSelector0, iNIConfiguration0);
      // Undeclared exception!
      try { 
        subnodeConfiguration1.getRootNodeModel();
        fail(""Expecting exception: ClassCastException"");
      } catch(ClassCastException e) {
         //
         // org.apache.commons.configuration2.tree.TrackedNodeModel cannot be cast to org.apache.commons.configuration2.tree.InMemoryNodeModel
         //
         verifyException(""org.apache.commons.configuration2.BaseHierarchicalConfiguration"", e);
      }
  }"
395,"    public InMemoryNodeModel getNodeModel() {
        final ImmutableNode root = getParent().getNodeModel().getTrackedNode(getRootSelector());
        return new InMemoryNodeModel(root);
    }","  public void test4()  throws Throwable  {
      AbstractYAMLBasedConfiguration abstractYAMLBasedConfiguration0 = new AbstractYAMLBasedConfiguration();
      XMLConfiguration xMLConfiguration0 = new XMLConfiguration(abstractYAMLBasedConfiguration0);
      INIConfiguration iNIConfiguration0 = new INIConfiguration(xMLConfiguration0);
      SubnodeConfiguration subnodeConfiguration0 = iNIConfiguration0.getSection(""zbe@o.>``"");
      NodeSelector nodeSelector0 = new NodeSelector(""zbe@o.>``"");
      SubnodeConfiguration subnodeConfiguration1 = subnodeConfiguration0.createSubConfigurationForTrackedNode(nodeSelector0, iNIConfiguration0);
      // Undeclared exception!
      try { 
        subnodeConfiguration1.getNodeModel();
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // No tracked node found: org.apache.commons.configuration2.tree.NodeSelector@53[keys=[zbe@o.>``]]
         //
         verifyException(""org.apache.commons.configuration2.tree.NodeTracker"", e);
      }
  }"
396,"    public InMemoryNodeModel getNodeModel() {
        final ImmutableNode root = getParent().getNodeModel().getTrackedNode(getRootSelector());
        return new InMemoryNodeModel(root);
    }","  public void test5()  throws Throwable  {
      DynamicCombinedConfiguration dynamicCombinedConfiguration0 = new DynamicCombinedConfiguration();
      NodeSelector nodeSelector0 = new NodeSelector(""O`=cq0[v|<[{V"");
      TrackedNodeModel trackedNodeModel0 = new TrackedNodeModel(dynamicCombinedConfiguration0, nodeSelector0, true);
      BaseHierarchicalConfiguration baseHierarchicalConfiguration0 = new BaseHierarchicalConfiguration(trackedNodeModel0);
      SubnodeConfiguration subnodeConfiguration0 = new SubnodeConfiguration(baseHierarchicalConfiguration0, trackedNodeModel0);
      // Undeclared exception!
      try { 
        subnodeConfiguration0.getNodeModel();
        fail(""Expecting exception: ClassCastException"");
      } catch(ClassCastException e) {
         //
         // org.apache.commons.configuration2.tree.TrackedNodeModel cannot be cast to org.apache.commons.configuration2.tree.InMemoryNodeModel
         //
         verifyException(""org.apache.commons.configuration2.BaseHierarchicalConfiguration"", e);
      }
  }"
397,"    public void close() {
        getTrackedModel().close();
    }","  public void test6()  throws Throwable  {
      OverrideCombiner overrideCombiner0 = new OverrideCombiner();
      DynamicCombinedConfiguration dynamicCombinedConfiguration0 = new DynamicCombinedConfiguration(overrideCombiner0);
      NodeSelector nodeSelector0 = new NodeSelector(""xRmUt?"");
      TrackedNodeModel trackedNodeModel0 = new TrackedNodeModel(dynamicCombinedConfiguration0, nodeSelector0, true);
      SubnodeConfiguration subnodeConfiguration0 = new SubnodeConfiguration(dynamicCombinedConfiguration0, trackedNodeModel0);
      // Undeclared exception!
      try { 
        subnodeConfiguration0.close();
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // No tracked node found: org.apache.commons.configuration2.tree.NodeSelector@15[keys=[xRmUt?]]
         //
         verifyException(""org.apache.commons.configuration2.tree.NodeTracker"", e);
      }
  }"
398,"    protected NodeModel<ImmutableNode> cloneNodeModel() {
        final InMemoryNodeModel parentModel = (InMemoryNodeModel) getParent().getModel();
        parentModel.trackNode(getRootSelector(), getParent());
        return new TrackedNodeModel(getParent(), getRootSelector(), true);
    }","  public void test7()  throws Throwable  {
      YAMLConfiguration yAMLConfiguration0 = new YAMLConfiguration();
      INIConfiguration iNIConfiguration0 = new INIConfiguration(yAMLConfiguration0);
      NodeSelector nodeSelector0 = new NodeSelector(""org.apache.commons.configuration2.SubnodeConfiguration"");
      TrackedNodeModel trackedNodeModel0 = new TrackedNodeModel(yAMLConfiguration0, nodeSelector0, true);
      SubnodeConfiguration subnodeConfiguration0 = new SubnodeConfiguration(iNIConfiguration0, trackedNodeModel0);
      // Undeclared exception!
      try { 
        subnodeConfiguration0.cloneNodeModel();
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // Selector does not select unique node: org.apache.commons.configuration2.tree.NodeSelector@20[keys=[org.apache.commons.configuration2.SubnodeConfiguration]]
         //
         verifyException(""org.apache.commons.configuration2.tree.NodeTracker"", e);
      }
  }"
399,"    protected NodeModel<ImmutableNode> cloneNodeModel() {
        final InMemoryNodeModel parentModel = (InMemoryNodeModel) getParent().getModel();
        parentModel.trackNode(getRootSelector(), getParent());
        return new TrackedNodeModel(getParent(), getRootSelector(), true);
    }","  public void test8()  throws Throwable  {
      BaseHierarchicalConfiguration baseHierarchicalConfiguration0 = new BaseHierarchicalConfiguration((NodeModel<ImmutableNode>) null);
      NodeSelector nodeSelector0 = new NodeSelector(""fj"");
      TrackedNodeModel trackedNodeModel0 = new TrackedNodeModel(baseHierarchicalConfiguration0, nodeSelector0, false);
      SubnodeConfiguration subnodeConfiguration0 = new SubnodeConfiguration(baseHierarchicalConfiguration0, trackedNodeModel0);
      // Undeclared exception!
      try { 
        subnodeConfiguration0.cloneNodeModel();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.configuration2.SubnodeConfiguration"", e);
      }
  }"
400,"    protected NodeModel<ImmutableNode> cloneNodeModel() {
        final InMemoryNodeModel parentModel = (InMemoryNodeModel) getParent().getModel();
        parentModel.trackNode(getRootSelector(), getParent());
        return new TrackedNodeModel(getParent(), getRootSelector(), true);
    }","  public void test9()  throws Throwable  {
      INIConfiguration iNIConfiguration0 = new INIConfiguration();
      SubnodeConfiguration subnodeConfiguration0 = iNIConfiguration0.getSection(""gUP}"");
      NodeSelector nodeSelector0 = new NodeSelector(""gUP}"");
      SubnodeConfiguration subnodeConfiguration1 = subnodeConfiguration0.createSubConfigurationForTrackedNode(nodeSelector0, iNIConfiguration0);
      // Undeclared exception!
      try { 
        subnodeConfiguration1.cloneNodeModel();
        fail(""Expecting exception: ClassCastException"");
      } catch(ClassCastException e) {
         //
         // org.apache.commons.configuration2.tree.TrackedNodeModel cannot be cast to org.apache.commons.configuration2.tree.InMemoryNodeModel
         //
         verifyException(""org.apache.commons.configuration2.SubnodeConfiguration"", e);
      }
  }"
401,"    public NodeSelector getRootSelector() {
        return rootSelector;
    }","  public void test10()  throws Throwable  {
      AbstractYAMLBasedConfiguration abstractYAMLBasedConfiguration0 = new AbstractYAMLBasedConfiguration();
      NodeSelector nodeSelector0 = new NodeSelector(""H-LxdIPq%Y=\""%?S^"");
      SubnodeConfiguration subnodeConfiguration0 = abstractYAMLBasedConfiguration0.createSubConfigurationForTrackedNode(nodeSelector0, abstractYAMLBasedConfiguration0);
      NodeSelector nodeSelector1 = subnodeConfiguration0.getRootSelector();
}"
402,"    public BaseHierarchicalConfiguration getParent() {
        return parent;
    }","  public void test11()  throws Throwable  {
      INIConfiguration iNIConfiguration0 = new INIConfiguration();
      SubnodeConfiguration subnodeConfiguration0 = iNIConfiguration0.getSection(""Parent configuration must not be null!"");
      BaseHierarchicalConfiguration baseHierarchicalConfiguration0 = subnodeConfiguration0.getParent();
}"
403,"    public InMemoryNodeModel getRootNodeModel() {
        if (getParent() instanceof SubnodeConfiguration) {
            return ((SubnodeConfiguration) getParent()).getRootNodeModel();
        }
        return getParent().getNodeModel();
    }","  public void test12()  throws Throwable  {
      YAMLConfiguration yAMLConfiguration0 = new YAMLConfiguration();
      INIConfiguration iNIConfiguration0 = new INIConfiguration(yAMLConfiguration0);
      NodeSelector nodeSelector0 = new NodeSelector(""org.apache.commons.configuration2.SubnodeConfiguration"");
      TrackedNodeModel trackedNodeModel0 = new TrackedNodeModel(yAMLConfiguration0, nodeSelector0, true);
      SubnodeConfiguration subnodeConfiguration0 = new SubnodeConfiguration(iNIConfiguration0, trackedNodeModel0);
      SubnodeConfiguration subnodeConfiguration1 = subnodeConfiguration0.createSubConfigurationForTrackedNode(nodeSelector0, yAMLConfiguration0);
      InMemoryNodeModel inMemoryNodeModel0 = subnodeConfiguration1.getRootNodeModel();
}"
404,"    public SubnodeConfiguration(final BaseHierarchicalConfiguration parent, final TrackedNodeModel model) {
        super(model);
        if (parent == null) {
            throw new IllegalArgumentException(""Parent configuration must not be null!"");
        }
        if (model == null) {
            throw new IllegalArgumentException(""Node model must not be null!"");
        }

        this.parent = parent;
        rootSelector = model.getSelector();
    }","  public void test13()  throws Throwable  {
      DynamicCombinedConfiguration dynamicCombinedConfiguration0 = new DynamicCombinedConfiguration();
      SubnodeConfiguration subnodeConfiguration0 = null;
      try {
        subnodeConfiguration0 = new SubnodeConfiguration(dynamicCombinedConfiguration0, (TrackedNodeModel) null);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Node model must not be null!
         //
         verifyException(""org.apache.commons.configuration2.SubnodeConfiguration"", e);
      }
  }"
405,"    public SubnodeConfiguration(final BaseHierarchicalConfiguration parent, final TrackedNodeModel model) {
        super(model);
        if (parent == null) {
            throw new IllegalArgumentException(""Parent configuration must not be null!"");
        }
        if (model == null) {
            throw new IllegalArgumentException(""Node model must not be null!"");
        }

        this.parent = parent;
        rootSelector = model.getSelector();
    }","  public void test14()  throws Throwable  {
      SubnodeConfiguration subnodeConfiguration0 = null;
      try {
        subnodeConfiguration0 = new SubnodeConfiguration((BaseHierarchicalConfiguration) null, (TrackedNodeModel) null);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Parent configuration must not be null!
         //
         verifyException(""org.apache.commons.configuration2.SubnodeConfiguration"", e);
      }
  }"
406,"    protected SubnodeConfiguration createSubConfigurationForTrackedNode(final NodeSelector selector, final InMemoryNodeModelSupport parentModelSupport) {
        return super.createSubConfigurationForTrackedNode(selector, getParent());
    }","  public void test15()  throws Throwable  {
      INIConfiguration iNIConfiguration0 = new INIConfiguration();
      SubnodeConfiguration subnodeConfiguration0 = iNIConfiguration0.getSection(""Parent configuration must not be null!"");
      // Undeclared exception!
      try { 
        subnodeConfiguration0.createSubConfigurationForTrackedNode((NodeSelector) null, iNIConfiguration0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Selector must not be null!
         //
         verifyException(""org.apache.commons.configuration2.tree.TrackedNodeModel"", e);
      }
  }"
407,"    public void close() {
        getTrackedModel().close();
    }","  public void test16()  throws Throwable  {
      INIConfiguration iNIConfiguration0 = new INIConfiguration();
      SubnodeConfiguration subnodeConfiguration0 = iNIConfiguration0.getSection(""1"");
      subnodeConfiguration0.close();
}"
408,"    protected NodeModel<ImmutableNode> cloneNodeModel() {
        final InMemoryNodeModel parentModel = (InMemoryNodeModel) getParent().getModel();
        parentModel.trackNode(getRootSelector(), getParent());
        return new TrackedNodeModel(getParent(), getRootSelector(), true);
    }","  public void test17()  throws Throwable  {
      INIConfiguration iNIConfiguration0 = new INIConfiguration();
      SubnodeConfiguration subnodeConfiguration0 = iNIConfiguration0.getSection(""1"");
      NodeModel<ImmutableNode> nodeModel0 = subnodeConfiguration0.cloneNodeModel();
}"
409,"    public InMemoryNodeModel getNodeModel() {
        final ImmutableNode root = getParent().getNodeModel().getTrackedNode(getRootSelector());
        return new InMemoryNodeModel(root);
    }","  public void test18()  throws Throwable  {
      INIConfiguration iNIConfiguration0 = new INIConfiguration();
      SubnodeConfiguration subnodeConfiguration0 = iNIConfiguration0.getSection(""1"");
      InMemoryNodeModel inMemoryNodeModel0 = subnodeConfiguration0.getNodeModel();
}"
410,"    protected InMemoryNodeModel getSubConfigurationParentModel() {
        return getTrackedModel().getParentModel();
    }","  public void test19()  throws Throwable  {
      INIConfiguration iNIConfiguration0 = new INIConfiguration();
      SubnodeConfiguration subnodeConfiguration0 = iNIConfiguration0.getSection(""1"");
      InMemoryNodeModel inMemoryNodeModel0 = subnodeConfiguration0.getSubConfigurationParentModel();
}"
411,"    protected NodeSelector getSubConfigurationNodeSelector(final String key) {
        return getRootSelector().subSelector(key);
    }","  public void test20()  throws Throwable  {
      INIConfiguration iNIConfiguration0 = new INIConfiguration();
      SubnodeConfiguration subnodeConfiguration0 = iNIConfiguration0.getSection(""1"");
      NodeSelector nodeSelector0 = subnodeConfiguration0.getSubConfigurationNodeSelector(""1"");
}"
412,"    protected Iterator<String> getKeysInternal() {
        return System.getProperties().stringPropertyNames().iterator();
    }","  public void test0()  throws Throwable  {
      SystemConfiguration systemConfiguration0 = new SystemConfiguration();
      Iterator<String> iterator0 = systemConfiguration0.getKeysInternal();
}"
413,"    public static void setSystemProperties(final String fileName) throws ConfigurationException {
        setSystemProperties(null, fileName);
    }","  public void test1()  throws Throwable  {
      OverrideCombiner overrideCombiner0 = new OverrideCombiner();
      DynamicCombinedConfiguration dynamicCombinedConfiguration0 = new DynamicCombinedConfiguration(overrideCombiner0);
      NodeSelector nodeSelector0 = new NodeSelector(""ys6SSDt"");
      TrackedNodeModel trackedNodeModel0 = new TrackedNodeModel(dynamicCombinedConfiguration0, nodeSelector0, false);
      SubnodeConfiguration subnodeConfiguration0 = new SubnodeConfiguration(dynamicCombinedConfiguration0, trackedNodeModel0);
      // Undeclared exception!
      try { 
        SystemConfiguration.setSystemProperties((Configuration) subnodeConfiguration0);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // No tracked node found: org.apache.commons.configuration2.tree.NodeSelector@15[keys=[ys6SSDt]]
         //
         verifyException(""org.apache.commons.configuration2.tree.NodeTracker"", e);
      }
  }"
414,"    public static void setSystemProperties(final String fileName) throws ConfigurationException {
        setSystemProperties(null, fileName);
    }","  public void test2()  throws Throwable  {
      CombinedConfiguration combinedConfiguration0 = new CombinedConfiguration();
      SystemConfiguration systemConfiguration0 = new SystemConfiguration();
      combinedConfiguration0.addConfiguration((Configuration) systemConfiguration0, """", "".xml"");
      // Undeclared exception!
      SystemConfiguration.setSystemProperties((Configuration) combinedConfiguration0);
  }"
415,"    public static void setSystemProperties(final String fileName) throws ConfigurationException {
        setSystemProperties(null, fileName);
    }","  public void test3()  throws Throwable  {
      // Undeclared exception!
      try { 
        SystemConfiguration.setSystemProperties((Configuration) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.configuration2.SystemConfiguration"", e);
      }
  }"
416,"    public static void setSystemProperties(final String fileName) throws ConfigurationException {
        setSystemProperties(null, fileName);
    }","  public void test4()  throws Throwable  {
      CombinedConfiguration combinedConfiguration0 = new CombinedConfiguration();
      HashSet<SystemConfiguration> hashSet0 = new HashSet<SystemConfiguration>();
      hashSet0.add((SystemConfiguration) null);
      CompositeConfiguration compositeConfiguration0 = new CompositeConfiguration(combinedConfiguration0, hashSet0);
      // Undeclared exception!
      try { 
        SystemConfiguration.setSystemProperties((Configuration) compositeConfiguration0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.configuration2.CompositeConfiguration"", e);
      }
  }"
417,"    public static void setSystemProperties(final String fileName) throws ConfigurationException {
        setSystemProperties(null, fileName);
    }","  public void test5()  throws Throwable  {
      SystemConfiguration systemConfiguration0 = new SystemConfiguration();
      systemConfiguration0.setPropertyInternal("""", """");
      // Undeclared exception!
      try { 
        SystemConfiguration.setSystemProperties((Configuration) systemConfiguration0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
      }
  }"
418,"    public static void setSystemProperties(final String fileName) throws ConfigurationException {
        setSystemProperties(null, fileName);
    }","  public void test6()  throws Throwable  {
      PoolDataSourceImpl poolDataSourceImpl0 = new PoolDataSourceImpl();
      Properties properties0 = poolDataSourceImpl0.getConnectionFactoryProperties();
      CompoundName compoundName0 = new CompoundName(""oracle.security.client.default_password"", properties0);
      properties0.put(poolDataSourceImpl0, compoundName0);
      MapConfiguration mapConfiguration0 = new MapConfiguration(properties0);
      // Undeclared exception!
      try { 
        SystemConfiguration.setSystemProperties((Configuration) mapConfiguration0);
        fail(""Expecting exception: ClassCastException"");
      } catch(ClassCastException e) {
         //
         // oracle.ucp.jdbc.PoolDataSourceImpl cannot be cast to java.lang.String
         //
         verifyException(""org.apache.commons.configuration2.SystemConfiguration"", e);
      }
  }"
419,"    public static void setSystemProperties(final String fileName) throws ConfigurationException {
        setSystemProperties(null, fileName);
    }","  public void test7()  throws Throwable  {
      // Undeclared exception!
      try { 
        SystemConfiguration.setSystemProperties((String) null, (String) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
420,"    public static void setSystemProperties(final String fileName) throws ConfigurationException {
        setSystemProperties(null, fileName);
    }","  public void test8()  throws Throwable  {
      SystemConfiguration systemConfiguration0 = new SystemConfiguration();
      systemConfiguration0.append(systemConfiguration0);
      // Undeclared exception!
      try { 
        SystemConfiguration.setSystemProperties("".xml"");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
421,"    public static void setSystemProperties(final String fileName) throws ConfigurationException {
        setSystemProperties(null, fileName);
    }","  public void test9()  throws Throwable  {
      try { 
        SystemConfiguration.setSystemProperties(""(;I)&1?iFWlKyESo$B"", ""SESSION_NLS_LXCNCHAREXCP"");
        fail(""Expecting exception: Exception"");
      } catch(Exception e) {
         //
         // Unable to load the configuration from the URL file:/media/FSE_USER/extradrive1/toga-eval-FSE_USER-2023/toga-eval/artifacts/commons-configuration2-2.8.0-src/(;I)&1%3FiFWlKyESo$B/SESSION_NLS_LXCNCHAREXCP
         //
         verifyException(""org.apache.commons.configuration2.io.DefaultFileSystem"", e);
      }
  }"
422,"    public static void setSystemProperties(final String fileName) throws ConfigurationException {
        setSystemProperties(null, fileName);
    }","  public void test10()  throws Throwable  {
      String string0 = ""\\uBQ)uoqO.xml"";
      try { 
        SystemConfiguration.setSystemProperties(string0, string0);
        fail(""Expecting exception: Exception"");
      } catch(Exception e) {
         //
         // Unable to load the configuration from the URL file:/media/FSE_USER/extradrive1/toga-eval-FSE_USER-2023/toga-eval/artifacts/commons-configuration2-2.8.0-src/%5CuBQ)uoqO.xml/%5CuBQ)uoqO.xml
         //
         verifyException(""org.apache.commons.configuration2.io.DefaultFileSystem"", e);
      }
  }"
423,"    public static void setSystemProperties(final String fileName) throws ConfigurationException {
        setSystemProperties(null, fileName);
    }","  public void test11()  throws Throwable  {
      SystemConfiguration systemConfiguration0 = new SystemConfiguration();
      SystemConfiguration.setSystemProperties((Configuration) systemConfiguration0);
}"
424,"    public static void setSystemProperties(final String fileName) throws ConfigurationException {
        setSystemProperties(null, fileName);
    }","  public void test12()  throws Throwable  {
      try { 
        SystemConfiguration.setSystemProperties("""");
        fail(""Expecting exception: Exception"");
      } catch(Exception e) {
         //
         // Could not locate: FileLocator [basePath=null, encoding=null, fileName=, fileSystem=null, locationStrategy=null, sourceURL=null, urlConnectionOptions=null]
         //
         verifyException(""org.apache.commons.configuration2.io.FileLocatorUtils"", e);
      }
  }"
425,"    protected Object handleDelimiters(Object value) {
        if (value instanceof String) {
            final Collection<String> values = getListDelimiterHandler().split((String) value, true);
            value = values.size() > 1 ? values : values.iterator().next();
        }

        return value;
    }","  public void test0()  throws Throwable  {
      AppletConfiguration appletConfiguration0 = new AppletConfiguration((Applet) null);
      Object object0 = appletConfiguration0.handleDelimiters((Object) null);
}"
426,"    protected Object handleDelimiters(Object value) {
        if (value instanceof String) {
            final Collection<String> values = getListDelimiterHandler().split((String) value, true);
            value = values.size() > 1 ? values : values.iterator().next();
        }

        return value;
    }","  public void test1()  throws Throwable  {
      Servlet servlet0 = new Servlet();
      ServletConfiguration servletConfiguration0 = new ServletConfiguration((javax.servlet.Servlet) servlet0);
      Object object0 = servletConfiguration0.handleDelimiters(servlet0);
}"
427,"    protected boolean isEmptyInternal() {
        return !getKeysInternal().hasNext();
    }","  public void test2()  throws Throwable  {
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(httpServletRequest0);
      ServletRequestConfiguration servletRequestConfiguration0 = new ServletRequestConfiguration(httpServletRequestWrapper0);
      httpServletRequestWrapper0.setRequest(httpServletRequestWrapper0);
      // Undeclared exception!
      try { 
        servletRequestConfiguration0.isEmptyInternal();
        fail(""Expecting exception: StackOverflowError"");
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
428,"    protected boolean isEmptyInternal() {
        return !getKeysInternal().hasNext();
    }","  public void test3()  throws Throwable  {
      MockFilterConfig mockFilterConfig0 = new MockFilterConfig();
      ServletFilterConfiguration servletFilterConfiguration0 = new ServletFilterConfiguration(mockFilterConfig0);
      // Undeclared exception!
      try { 
        servletFilterConfiguration0.isEmptyInternal();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.util.Collections"", e);
      }
  }"
429,"    protected boolean isEmptyInternal() {
        return !getKeysInternal().hasNext();
    }","  public void test4()  throws Throwable  {
      Servlet servlet0 = new Servlet();
      ServletConfiguration servletConfiguration0 = new ServletConfiguration((ServletConfig) servlet0);
      // Undeclared exception!
      try { 
        servletConfiguration0.isEmptyInternal();
        fail(""Expecting exception: IllegalStateException"");
      } catch(IllegalStateException e) {
         //
         // ServletConfig has not been initialized
         //
         verifyException(""javax.servlet.GenericServlet"", e);
      }
  }"
430,"    protected boolean containsKeyInternal(final String key) {
        return getPropertyInternal(key) != null;
    }","  public void test5()  throws Throwable  {
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(httpServletRequest0);
      ServletRequestConfiguration servletRequestConfiguration0 = new ServletRequestConfiguration(httpServletRequestWrapper0);
      httpServletRequestWrapper0.setRequest(httpServletRequestWrapper0);
      // Undeclared exception!
      try { 
        servletRequestConfiguration0.containsKeyInternal("""");
        fail(""Expecting exception: StackOverflowError"");
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
431,"    protected boolean containsKeyInternal(final String key) {
        return getPropertyInternal(key) != null;
    }","  public void test6()  throws Throwable  {
      Servlet servlet0 = new Servlet();
      ServletConfiguration servletConfiguration0 = new ServletConfiguration((javax.servlet.Servlet) servlet0);
      // Undeclared exception!
      try { 
        servletConfiguration0.containsKeyInternal(""^7"");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.configuration2.web.ServletConfiguration"", e);
      }
  }"
432,"    protected boolean containsKeyInternal(final String key) {
        return getPropertyInternal(key) != null;
    }","  public void test7()  throws Throwable  {
      Servlet servlet0 = new Servlet();
      ServletConfiguration servletConfiguration0 = new ServletConfiguration((ServletConfig) servlet0);
      // Undeclared exception!
      try { 
        servletConfiguration0.containsKeyInternal("";`/QfD=>h="");
        fail(""Expecting exception: IllegalStateException"");
      } catch(IllegalStateException e) {
         //
         // ServletConfig has not been initialized
         //
         verifyException(""javax.servlet.GenericServlet"", e);
      }
  }"
433,"    protected boolean containsKeyInternal(final String key) {
        return getPropertyInternal(key) != null;
    }","  public void test8()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[3] = ""(>E^x\u0001p!BA.^[\""=7"";
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn(stringArray0).when(httpServletRequest0).getParameterValues(anyString());
      HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(httpServletRequest0);
      ServletRequestConfiguration servletRequestConfiguration0 = new ServletRequestConfiguration(httpServletRequestWrapper0);
      boolean boolean0 = servletRequestConfiguration0.containsKeyInternal(""(>E^x\u0001p!BA.^[\""=7"");
}"
434,"    protected boolean containsKeyInternal(final String key) {
        return getPropertyInternal(key) != null;
    }","  public void test9()  throws Throwable  {
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn((String[]) null).when(httpServletRequest0).getParameterValues(anyString());
      HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(httpServletRequest0);
      ServletRequestConfiguration servletRequestConfiguration0 = new ServletRequestConfiguration(httpServletRequestWrapper0);
      boolean boolean0 = servletRequestConfiguration0.containsKeyInternal("""");
}"
435,"    protected boolean isEmptyInternal() {
        return !getKeysInternal().hasNext();
    }","  public void test10()  throws Throwable  {
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn((Map) null).when(httpServletRequest0).getParameterMap();
      HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(httpServletRequest0);
      ServletRequestConfiguration servletRequestConfiguration0 = new ServletRequestConfiguration(httpServletRequestWrapper0);
      // Undeclared exception!
      try { 
        servletRequestConfiguration0.isEmptyInternal();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.configuration2.web.ServletRequestConfiguration"", e);
      }
  }"
436,"    protected boolean isEmptyInternal() {
        return !getKeysInternal().hasNext();
    }","  public void test11()  throws Throwable  {
      Hashtable<FileLocationStrategy, Integer> hashtable0 = new Hashtable<FileLocationStrategy, Integer>();
      AbsoluteNameLocationStrategy absoluteNameLocationStrategy0 = new AbsoluteNameLocationStrategy();
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      hashtable0.put(absoluteNameLocationStrategy0, integer0);
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn(hashtable0).when(httpServletRequest0).getParameterMap();
      HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(httpServletRequest0);
      ServletRequestConfiguration servletRequestConfiguration0 = new ServletRequestConfiguration(httpServletRequestWrapper0);
      boolean boolean0 = servletRequestConfiguration0.isEmptyInternal();
}"
437,"    protected void clearPropertyDirect(final String key) {
        throw new UnsupportedOperationException(""Read only configuration"");
    }","  public void test12()  throws Throwable  {
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(httpServletRequest0);
      ServletRequestConfiguration servletRequestConfiguration0 = new ServletRequestConfiguration(httpServletRequestWrapper0);
      // Undeclared exception!
      try { 
        servletRequestConfiguration0.clearPropertyDirect(""(>E^x\u0001p!BA.^[\""=7"");
        fail(""Expecting exception: UnsupportedOperationException"");
      } catch(UnsupportedOperationException e) {
         //
         // Read only configuration
         //
         verifyException(""org.apache.commons.configuration2.web.BaseWebConfiguration"", e);
      }
  }"
438,"    protected void addPropertyDirect(final String key, final Object obj) {
        throw new UnsupportedOperationException(""Read only configuration"");
    }","  public void test13()  throws Throwable  {
      ServletContextConfiguration servletContextConfiguration0 = new ServletContextConfiguration((ServletContext) null);
      // Undeclared exception!
      try { 
        servletContextConfiguration0.addPropertyDirect(""3]Mn8Dma"", ""3]Mn8Dma"");
        fail(""Expecting exception: UnsupportedOperationException"");
      } catch(UnsupportedOperationException e) {
         //
         // Read only configuration
         //
         verifyException(""org.apache.commons.configuration2.web.BaseWebConfiguration"", e);
      }
  }"
439,"    protected Object getPropertyInternal(final String key) {
        return handleDelimiters(config.getInitParameter(key));
    }","  public void test0()  throws Throwable  {
      MockFilterConfig mockFilterConfig0 = new MockFilterConfig();
      ServletFilterConfiguration servletFilterConfiguration0 = new ServletFilterConfiguration(mockFilterConfig0);
      Object object0 = servletFilterConfiguration0.getPropertyInternal((String) null);
}"
440,"    protected Object getPropertyInternal(final String key) {
        return handleDelimiters(config.getInitParameter(key));
    }","  public void test1()  throws Throwable  {
      ServletFilterConfiguration servletFilterConfiguration0 = new ServletFilterConfiguration((FilterConfig) null);
      // Undeclared exception!
      try { 
        servletFilterConfiguration0.getPropertyInternal(""oracle.jdbc.plsqlVarcharParameter4KOnly"");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.configuration2.web.ServletFilterConfiguration"", e);
      }
  }"
441,"    protected Iterator<String> getKeysInternal() {
        // According to the documentation of getInitParameterNames() the
        // enumeration is of type String.
        final Enumeration<String> en = config.getInitParameterNames();
        return Collections.list(en).iterator();
    }","  public void test2()  throws Throwable  {
      MockFilterConfig mockFilterConfig0 = new MockFilterConfig();
      ServletFilterConfiguration servletFilterConfiguration0 = new ServletFilterConfiguration(mockFilterConfig0);
      // Undeclared exception!
      try { 
        servletFilterConfiguration0.getKeysInternal();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.util.Collections"", e);
      }
  }"
442,"    protected Object getPropertyInternal(final String key) {
        final String[] values = request.getParameterValues(key);

        if (values == null || values.length == 0) {
            return null;
        }
        if (values.length == 1) {
            return handleDelimiters(values[0]);
        }
        // ensure that escape characters in all list elements are removed
        final List<Object> result = new ArrayList<>(values.length);
        for (final String value : values) {
            final Object val = handleDelimiters(value);
            if (val instanceof Collection) {
                result.addAll((Collection<?>) val);
            } else {
                result.add(val);
            }
        }
        return result;
    }","  public void test0()  throws Throwable  {
      ServletRequest servletRequest0 = mock(ServletRequest.class, new ViolatedAssumptionAnswer());
      ServletRequestWrapper servletRequestWrapper0 = new ServletRequestWrapper(servletRequest0);
      servletRequestWrapper0.setRequest(servletRequestWrapper0);
      ServletRequestConfiguration servletRequestConfiguration0 = new ServletRequestConfiguration(servletRequestWrapper0);
      // Undeclared exception!
      try { 
        servletRequestConfiguration0.getPropertyInternal("""");
        fail(""Expecting exception: StackOverflowError"");
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
443,"    protected Object getPropertyInternal(final String key) {
        final String[] values = request.getParameterValues(key);

        if (values == null || values.length == 0) {
            return null;
        }
        if (values.length == 1) {
            return handleDelimiters(values[0]);
        }
        // ensure that escape characters in all list elements are removed
        final List<Object> result = new ArrayList<>(values.length);
        for (final String value : values) {
            final Object val = handleDelimiters(value);
            if (val instanceof Collection) {
                result.addAll((Collection<?>) val);
            } else {
                result.add(val);
            }
        }
        return result;
    }","  public void test1()  throws Throwable  {
      ServletRequestConfiguration servletRequestConfiguration0 = new ServletRequestConfiguration((ServletRequest) null);
      // Undeclared exception!
      try { 
        servletRequestConfiguration0.getPropertyInternal((String) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.configuration2.web.ServletRequestConfiguration"", e);
      }
  }"
444,"    protected Iterator<String> getKeysInternal() {
        // According to the documentation of getParameterMap(), keys are Strings.
        final Map<String, ?> parameterMap = request.getParameterMap();
        return parameterMap.keySet().iterator();
    }","  public void test2()  throws Throwable  {
      ServletRequest servletRequest0 = mock(ServletRequest.class, new ViolatedAssumptionAnswer());
      ServletRequestWrapper servletRequestWrapper0 = new ServletRequestWrapper(servletRequest0);
      servletRequestWrapper0.setRequest(servletRequestWrapper0);
      ServletRequestConfiguration servletRequestConfiguration0 = new ServletRequestConfiguration(servletRequestWrapper0);
      // Undeclared exception!
      try { 
        servletRequestConfiguration0.getKeysInternal();
        fail(""Expecting exception: StackOverflowError"");
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
445,"    protected Iterator<String> getKeysInternal() {
        // According to the documentation of getParameterMap(), keys are Strings.
        final Map<String, ?> parameterMap = request.getParameterMap();
        return parameterMap.keySet().iterator();
    }","  public void test3()  throws Throwable  {
      ServletRequestConfiguration servletRequestConfiguration0 = new ServletRequestConfiguration((ServletRequest) null);
      // Undeclared exception!
      try { 
        servletRequestConfiguration0.getKeysInternal();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.configuration2.web.ServletRequestConfiguration"", e);
      }
  }"
446,"    protected Object getPropertyInternal(final String key) {
        final String[] values = request.getParameterValues(key);

        if (values == null || values.length == 0) {
            return null;
        }
        if (values.length == 1) {
            return handleDelimiters(values[0]);
        }
        // ensure that escape characters in all list elements are removed
        final List<Object> result = new ArrayList<>(values.length);
        for (final String value : values) {
            final Object val = handleDelimiters(value);
            if (val instanceof Collection) {
                result.addAll((Collection<?>) val);
            } else {
                result.add(val);
            }
        }
        return result;
    }","  public void test4()  throws Throwable  {
      String[] stringArray0 = new String[7];
      ServletRequest servletRequest0 = mock(ServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn(stringArray0).when(servletRequest0).getParameterValues(anyString());
      ServletRequestConfiguration servletRequestConfiguration0 = new ServletRequestConfiguration(servletRequest0);
      ArrayList arrayList0 = (ArrayList)servletRequestConfiguration0.getPropertyInternal("""");
}"
447,"    protected Object getPropertyInternal(final String key) {
        final String[] values = request.getParameterValues(key);

        if (values == null || values.length == 0) {
            return null;
        }
        if (values.length == 1) {
            return handleDelimiters(values[0]);
        }
        // ensure that escape characters in all list elements are removed
        final List<Object> result = new ArrayList<>(values.length);
        for (final String value : values) {
            final Object val = handleDelimiters(value);
            if (val instanceof Collection) {
                result.addAll((Collection<?>) val);
            } else {
                result.add(val);
            }
        }
        return result;
    }","  public void test5()  throws Throwable  {
      String[] stringArray0 = new String[7];
      ServletRequest servletRequest0 = mock(ServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn(stringArray0).when(servletRequest0).getParameterValues(anyString());
      ServletRequestConfiguration servletRequestConfiguration0 = new ServletRequestConfiguration(servletRequest0);
      ArrayList arrayList0 = (ArrayList)servletRequestConfiguration0.getPropertyInternal("""");
}"
448,"    protected Object getPropertyInternal(final String key) {
        final String[] values = request.getParameterValues(key);

        if (values == null || values.length == 0) {
            return null;
        }
        if (values.length == 1) {
            return handleDelimiters(values[0]);
        }
        // ensure that escape characters in all list elements are removed
        final List<Object> result = new ArrayList<>(values.length);
        for (final String value : values) {
            final Object val = handleDelimiters(value);
            if (val instanceof Collection) {
                result.addAll((Collection<?>) val);
            } else {
                result.add(val);
            }
        }
        return result;
    }","  public void test6()  throws Throwable  {
      String[] stringArray0 = new String[1];
      ServletRequest servletRequest0 = mock(ServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn(stringArray0).when(servletRequest0).getParameterValues(anyString());
      ServletRequestConfiguration servletRequestConfiguration0 = new ServletRequestConfiguration(servletRequest0);
      Object object0 = servletRequestConfiguration0.getPropertyInternal(""%"");
}"
449,"    public ServletRequestConfiguration(final ServletRequest request) {
        this.request = request;
    }","  public void test7()  throws Throwable  {
      String[] stringArray0 = new String[0];
      ServletRequest servletRequest0 = mock(ServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn(stringArray0).when(servletRequest0).getParameterValues(anyString());
      ServletRequestWrapper servletRequestWrapper0 = new ServletRequestWrapper(servletRequest0);
      ServletRequestConfiguration servletRequestConfiguration0 = new ServletRequestConfiguration(servletRequestWrapper0);
      Object object0 = servletRequestConfiguration0.getProperty(""#{w"");
}"
450,"    public ServletRequestConfiguration(final ServletRequest request) {
        this.request = request;
    }","  public void test8()  throws Throwable  {
      String[] stringArray0 = new String[0];
      ServletRequest servletRequest0 = mock(ServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn(stringArray0).when(servletRequest0).getParameterValues(anyString());
      ServletRequestWrapper servletRequestWrapper0 = new ServletRequestWrapper(servletRequest0);
      ServletRequestConfiguration servletRequestConfiguration0 = new ServletRequestConfiguration(servletRequestWrapper0);
      String string0 = servletRequestConfiguration0.getString((String) null, (String) null);
}"
451,"    protected Iterator<String> getKeysInternal() {
        // According to the documentation of getParameterMap(), keys are Strings.
        final Map<String, ?> parameterMap = request.getParameterMap();
        return parameterMap.keySet().iterator();
    }","  public void test9()  throws Throwable  {
      Hashtable<ConfigurationErrorEvent, Object> hashtable0 = new Hashtable<ConfigurationErrorEvent, Object>();
      ServletRequest servletRequest0 = mock(ServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn((Map) null).when(servletRequest0).getParameterMap();
      ServletRequestWrapper servletRequestWrapper0 = new ServletRequestWrapper(servletRequest0);
      ServletRequestConfiguration servletRequestConfiguration0 = new ServletRequestConfiguration(servletRequestWrapper0);
      // Undeclared exception!
      try { 
        servletRequestConfiguration0.getKeysInternal();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.configuration2.web.ServletRequestConfiguration"", e);
      }
  }"
452,"    protected Iterator<String> getKeysInternal() {
        final String[][] paramsInfo = applet.getParameterInfo();
        final String[] keys = new String[paramsInfo != null ? paramsInfo.length : 0];
        for (int i = 0; i < keys.length; i++) {
            keys[i] = paramsInfo[i][0];
        }

        return Arrays.asList(keys).iterator();
    }","  public void test0()  throws Throwable  {
      AppletConfiguration appletConfiguration0 = new AppletConfiguration((Applet) null);
      // Undeclared exception!
      try { 
        appletConfiguration0.getKeysInternal();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.configuration2.web.AppletConfiguration"", e);
      }
  }"
453,"    protected Object getPropertyInternal(final String key) {
        return handleDelimiters(applet.getParameter(key));
    }","  public void test1()  throws Throwable  {
      AppletConfiguration appletConfiguration0 = new AppletConfiguration((Applet) null);
      // Undeclared exception!
      try { 
        appletConfiguration0.getPropertyInternal(""FVq'"");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.configuration2.web.AppletConfiguration"", e);
      }
  }"
454,"    public InputSource resolveEntity(final String publicId, final String systemId) throws SAXException {
        // Has this system identifier been registered?
        URL entityURL = null;
        if (publicId != null) {
            entityURL = getRegisteredEntities().get(publicId);
        }

        if (entityURL != null) {
            // Obtain an InputSource for this URL. This code is based on the
            // createInputSourceFromURL() method of Commons Digester.
            try {
                final URLConnection connection = entityURL.openConnection();
                connection.setUseCaches(false);
                final InputStream stream = connection.getInputStream();
                final InputSource source = new InputSource(stream);
                source.setSystemId(entityURL.toExternalForm());
                return source;
            } catch (final IOException e) {
                throw new SAXException(e);
            }
        }
        // default processing behavior
        return null;
    }","  public void test0()  throws Throwable  {
      DefaultEntityResolver defaultEntityResolver0 = new DefaultEntityResolver();
      URL uRL0 = MockURL.getHttpExample();
      defaultEntityResolver0.registerEntityId("""", uRL0);
      EvoSuiteURL evoSuiteURL0 = new EvoSuiteURL(""http://www.someFakeButWellFormedURL.org/fooExample"");
      NetworkHandling.createRemoteTextFile(evoSuiteURL0, """");
      InputSource inputSource0 = defaultEntityResolver0.resolveEntity("""", """");
}"
455,"    public Map<String, URL> getRegisteredEntities() {
        return registeredEntities;
    }","  public void test1()  throws Throwable  {
      DefaultEntityResolver defaultEntityResolver0 = new DefaultEntityResolver();
      URL uRL0 = MockURL.getHttpExample();
      defaultEntityResolver0.registerEntityId("""", uRL0);
      Map<String, URL> map0 = defaultEntityResolver0.getRegisteredEntities();
}"
456,"    public InputSource resolveEntity(final String publicId, final String systemId) throws SAXException {
        // Has this system identifier been registered?
        URL entityURL = null;
        if (publicId != null) {
            entityURL = getRegisteredEntities().get(publicId);
        }

        if (entityURL != null) {
            // Obtain an InputSource for this URL. This code is based on the
            // createInputSourceFromURL() method of Commons Digester.
            try {
                final URLConnection connection = entityURL.openConnection();
                connection.setUseCaches(false);
                final InputStream stream = connection.getInputStream();
                final InputSource source = new InputSource(stream);
                source.setSystemId(entityURL.toExternalForm());
                return source;
            } catch (final IOException e) {
                throw new SAXException(e);
            }
        }
        // default processing behavior
        return null;
    }","  public void test2()  throws Throwable  {
      DefaultEntityResolver defaultEntityResolver0 = new DefaultEntityResolver();
      URL uRL0 = MockURL.getHttpExample();
      defaultEntityResolver0.registerEntityId(""{|SxxnSL~.x8-h%*"", uRL0);
      try { 
        defaultEntityResolver0.resolveEntity(""{|SxxnSL~.x8-h%*"", ""{|SxxnSL~.x8-h%*"");
        fail(""Expecting exception: SAXException"");
      } catch(SAXException e) {
         //
         // Could not find: www.someFakeButWellFormedURL.org
         //
         verifyException(""org.apache.commons.configuration2.resolver.DefaultEntityResolver"", e);
      }
  }"
457,"    public Map<String, URL> getRegisteredEntities() {
        return registeredEntities;
    }","  public void test3()  throws Throwable  {
      DefaultEntityResolver defaultEntityResolver0 = new DefaultEntityResolver();
      Map<String, URL> map0 = defaultEntityResolver0.getRegisteredEntities();
}"
458,"    public InputSource resolveEntity(final String publicId, final String systemId) throws SAXException {
        // Has this system identifier been registered?
        URL entityURL = null;
        if (publicId != null) {
            entityURL = getRegisteredEntities().get(publicId);
        }

        if (entityURL != null) {
            // Obtain an InputSource for this URL. This code is based on the
            // createInputSourceFromURL() method of Commons Digester.
            try {
                final URLConnection connection = entityURL.openConnection();
                connection.setUseCaches(false);
                final InputStream stream = connection.getInputStream();
                final InputSource source = new InputSource(stream);
                source.setSystemId(entityURL.toExternalForm());
                return source;
            } catch (final IOException e) {
                throw new SAXException(e);
            }
        }
        // default processing behavior
        return null;
    }","  public void test4()  throws Throwable  {
      DefaultEntityResolver defaultEntityResolver0 = new DefaultEntityResolver();
      InputSource inputSource0 = defaultEntityResolver0.resolveEntity(""W0D; e%-D"", ""5R:=f"");
}"
459,"    public InputSource resolveEntity(final String publicId, final String systemId) throws SAXException {
        // Has this system identifier been registered?
        URL entityURL = null;
        if (publicId != null) {
            entityURL = getRegisteredEntities().get(publicId);
        }

        if (entityURL != null) {
            // Obtain an InputSource for this URL. This code is based on the
            // createInputSourceFromURL() method of Commons Digester.
            try {
                final URLConnection connection = entityURL.openConnection();
                connection.setUseCaches(false);
                final InputStream stream = connection.getInputStream();
                final InputSource source = new InputSource(stream);
                source.setSystemId(entityURL.toExternalForm());
                return source;
            } catch (final IOException e) {
                throw new SAXException(e);
            }
        }
        // default processing behavior
        return null;
    }","  public void test5()  throws Throwable  {
      DefaultEntityResolver defaultEntityResolver0 = new DefaultEntityResolver();
      InputSource inputSource0 = defaultEntityResolver0.resolveEntity((String) null, """");
}"
460,"    public void registerEntityId(final String publicId, final URL entityURL) {
        if (publicId == null) {
            throw new IllegalArgumentException(""Public ID must not be null!"");
        }
        getRegisteredEntities().put(publicId, entityURL);
    }","  public void test6()  throws Throwable  {
      DefaultEntityResolver defaultEntityResolver0 = new DefaultEntityResolver();
      URL uRL0 = MockURL.getFileExample();
      // Undeclared exception!
      try { 
        defaultEntityResolver0.registerEntityId((String) null, uRL0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Public ID must not be null!
         //
         verifyException(""org.apache.commons.configuration2.resolver.DefaultEntityResolver"", e);
      }
  }"
461,"    public InputSource resolveEntity(final String publicId, final String systemId) throws SAXException {
        // Has this system identifier been registered?
        URL entityURL = null;
        if (publicId != null) {
            entityURL = getRegisteredEntities().get(publicId);
        }

        if (entityURL != null) {
            // Obtain an InputSource for this URL. This code is based on the
            // createInputSourceFromURL() method of Commons Digester.
            try {
                final URLConnection connection = entityURL.openConnection();
                connection.setUseCaches(false);
                final InputStream stream = connection.getInputStream();
                final InputSource source = new InputSource(stream);
                source.setSystemId(entityURL.toExternalForm());
                return source;
            } catch (final IOException e) {
                throw new SAXException(e);
            }
        }
        // default processing behavior
        return null;
    }","  public void test7()  throws Throwable  {
      DefaultEntityResolver defaultEntityResolver0 = new DefaultEntityResolver();
      URL uRL0 = MockURL.getFileExample();
      defaultEntityResolver0.registerEntityId("""", uRL0);
      // Undeclared exception!
      try { 
        defaultEntityResolver0.resolveEntity("""", ""vfs.impl/no-temp-file-store.error"");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.configuration2.resolver.DefaultEntityResolver"", e);
      }
  }"
462,"    public InputSource resolveEntity(final String publicId, final String systemId) throws SAXException {
        String resolved = getResolver().getResolvedEntity(publicId, systemId);

        if (resolved != null) {
            final String badFilePrefix = ""file://"";
            final String correctFilePrefix = ""file:///"";

            // Java 5 has a bug when constructing file URLS
            if (resolved.startsWith(badFilePrefix) && !resolved.startsWith(correctFilePrefix)) {
                resolved = correctFilePrefix + resolved.substring(badFilePrefix.length());
            }

            try {
                final URL url = locate(fs, null, resolved);
                if (url == null) {
                    throw new ConfigurationException(""Could not locate "" + resolved);
                }
                final InputStream inputStream = fs.getInputStream(url);
                final InputSource inputSource = new InputSource(resolved);
                inputSource.setPublicId(publicId);
                inputSource.setByteStream(inputStream);
                return inputSource;
            } catch (final Exception e) {
                log.warn(""Failed to create InputSource for "" + resolved, e);
            }
        }

        return null;
    }","  public void test0()  throws Throwable  {
      CatalogResolver catalogResolver0 = new CatalogResolver();
      catalogResolver0.setCatalogFiles(""--SH3Sfd\""e;$gLP6"");
      InputSource inputSource0 = catalogResolver0.resolveEntity(""--SH3Sfd\""e;$gLP6"", """");
}"
463,"    public CatalogResolver() {
        manager.setIgnoreMissingProperties(true);
        manager.setUseStaticCatalog(false);
        manager.setFileSystem(fs);
        initLogger(null);
    }","  public void test1()  throws Throwable  {
      CatalogResolver.CatalogManager catalogResolver_CatalogManager0 = new CatalogResolver.CatalogManager();
      CatalogResolver.Catalog catalogResolver_Catalog0 = (CatalogResolver.Catalog)catalogResolver_CatalogManager0.getPrivateCatalog();
      String string0 = catalogResolver_Catalog0.normalizeURI(""EE.X*g+`!2"");
}"
464,"    public CatalogResolver() {
        manager.setIgnoreMissingProperties(true);
        manager.setUseStaticCatalog(false);
        manager.setFileSystem(fs);
        initLogger(null);
    }","  public void test2()  throws Throwable  {
      CatalogResolver.CatalogManager catalogResolver_CatalogManager0 = new CatalogResolver.CatalogManager();
      ConfigurationInterpolator configurationInterpolator0 = catalogResolver_CatalogManager0.getInterpolator();
}"
465,"    public CatalogResolver() {
        manager.setIgnoreMissingProperties(true);
        manager.setUseStaticCatalog(false);
        manager.setFileSystem(fs);
        initLogger(null);
    }","  public void test3()  throws Throwable  {
      CatalogResolver.CatalogManager catalogResolver_CatalogManager0 = new CatalogResolver.CatalogManager();
      FileSystem fileSystem0 = catalogResolver_CatalogManager0.getFileSystem();
}"
466,"    public CatalogResolver() {
        manager.setIgnoreMissingProperties(true);
        manager.setUseStaticCatalog(false);
        manager.setFileSystem(fs);
        initLogger(null);
    }","  public void test4()  throws Throwable  {
      CatalogResolver.CatalogManager catalogResolver_CatalogManager0 = new CatalogResolver.CatalogManager();
      Catalog catalog0 = catalogResolver_CatalogManager0.getCatalog();
}"
467,"    public CatalogResolver() {
        manager.setIgnoreMissingProperties(true);
        manager.setUseStaticCatalog(false);
        manager.setFileSystem(fs);
        initLogger(null);
    }","  public void test5()  throws Throwable  {
      CatalogResolver.CatalogManager catalogResolver_CatalogManager0 = new CatalogResolver.CatalogManager();
      String string0 = catalogResolver_CatalogManager0.getBaseDir();
}"
468,"    public CatalogResolver() {
        manager.setIgnoreMissingProperties(true);
        manager.setUseStaticCatalog(false);
        manager.setFileSystem(fs);
        initLogger(null);
    }","  public void test6()  throws Throwable  {
      CatalogResolver.Catalog catalogResolver_Catalog0 = new CatalogResolver.Catalog();
      // Undeclared exception!
      try { 
        catalogResolver_Catalog0.normalizeURI(""dVd*moH1}0nV"");
        fail(""Expecting exception: ClassCastException"");
      } catch(ClassCastException e) {
         //
         // org.apache.xml.resolver.CatalogManager cannot be cast to org.apache.commons.configuration2.resolver.CatalogResolver$CatalogManager
         //
         verifyException(""org.apache.commons.configuration2.resolver.CatalogResolver$Catalog"", e);
      }
  }"
469,"    public CatalogResolver() {
        manager.setIgnoreMissingProperties(true);
        manager.setUseStaticCatalog(false);
        manager.setFileSystem(fs);
        initLogger(null);
    }","  public void test7()  throws Throwable  {
      CatalogResolver.Catalog catalogResolver_Catalog0 = new CatalogResolver.Catalog();
      // Undeclared exception!
      try { 
        catalogResolver_Catalog0.loadSystemCatalogs();
        fail(""Expecting exception: ClassCastException"");
      } catch(ClassCastException e) {
         //
         // org.apache.xml.resolver.CatalogManager cannot be cast to org.apache.commons.configuration2.resolver.CatalogResolver$CatalogManager
         //
         verifyException(""org.apache.commons.configuration2.resolver.CatalogResolver$Catalog"", e);
      }
  }"
470,"    public InputSource resolveEntity(final String publicId, final String systemId) throws SAXException {
        String resolved = getResolver().getResolvedEntity(publicId, systemId);

        if (resolved != null) {
            final String badFilePrefix = ""file://"";
            final String correctFilePrefix = ""file:///"";

            // Java 5 has a bug when constructing file URLS
            if (resolved.startsWith(badFilePrefix) && !resolved.startsWith(correctFilePrefix)) {
                resolved = correctFilePrefix + resolved.substring(badFilePrefix.length());
            }

            try {
                final URL url = locate(fs, null, resolved);
                if (url == null) {
                    throw new ConfigurationException(""Could not locate "" + resolved);
                }
                final InputStream inputStream = fs.getInputStream(url);
                final InputSource inputSource = new InputSource(resolved);
                inputSource.setPublicId(publicId);
                inputSource.setByteStream(inputStream);
                return inputSource;
            } catch (final Exception e) {
                log.warn(""Failed to create InputSource for "" + resolved, e);
            }
        }

        return null;
    }","  public void test8()  throws Throwable  {
      CatalogResolver catalogResolver0 = new CatalogResolver();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(""xcatalog"");
      VFSFileSystem vFSFileSystem0 = new VFSFileSystem();
      catalogResolver0.setFileSystem(vFSFileSystem0);
      FileSystemHandling.appendLineToFile(evoSuiteFile0, ""\"":wD;OiT@3lag"");
      InputSource inputSource0 = catalogResolver0.resolveEntity(""\"":wD;OiT@3lag"", ""Xi0u"");
}"
471,"    public void setBaseDir(final String baseDir) {
        manager.setBaseDir(baseDir);
    }","  public void test9()  throws Throwable  {
      CatalogResolver.CatalogManager catalogResolver_CatalogManager0 = new CatalogResolver.CatalogManager();
      catalogResolver_CatalogManager0.setBaseDir((String) null);
}"
472,"    public void setInterpolator(final ConfigurationInterpolator ci) {
        manager.setInterpolator(ci);
    }","  public void test10()  throws Throwable  {
      CatalogResolver.CatalogManager catalogResolver_CatalogManager0 = new CatalogResolver.CatalogManager();
      InterpolatorSpecification interpolatorSpecification0 = mock(InterpolatorSpecification.class, new ViolatedAssumptionAnswer());
      doReturn((Collection) null).when(interpolatorSpecification0).getDefaultLookups();
      doReturn((ConfigurationInterpolator) null).when(interpolatorSpecification0).getInterpolator();
      doReturn((ConfigurationInterpolator) null).when(interpolatorSpecification0).getParentInterpolator();
      doReturn((Map) null).when(interpolatorSpecification0).getPrefixLookups();
      doReturn((Function) null).when(interpolatorSpecification0).getStringConverter();
      ConfigurationInterpolator configurationInterpolator0 = ConfigurationInterpolator.fromSpecification(interpolatorSpecification0);
      catalogResolver_CatalogManager0.setInterpolator(configurationInterpolator0);
}"
473,"    public void setFileSystem(final FileSystem fileSystem) {
        this.fs = fileSystem;
        manager.setFileSystem(fileSystem);
    }","  public void test11()  throws Throwable  {
      CatalogResolver.CatalogManager catalogResolver_CatalogManager0 = new CatalogResolver.CatalogManager();
      DefaultFileSystem defaultFileSystem0 = new DefaultFileSystem();
      catalogResolver_CatalogManager0.setFileSystem(defaultFileSystem0);
}"
474,"    public InputSource resolveEntity(final String publicId, final String systemId) throws SAXException {
        String resolved = getResolver().getResolvedEntity(publicId, systemId);

        if (resolved != null) {
            final String badFilePrefix = ""file://"";
            final String correctFilePrefix = ""file:///"";

            // Java 5 has a bug when constructing file URLS
            if (resolved.startsWith(badFilePrefix) && !resolved.startsWith(correctFilePrefix)) {
                resolved = correctFilePrefix + resolved.substring(badFilePrefix.length());
            }

            try {
                final URL url = locate(fs, null, resolved);
                if (url == null) {
                    throw new ConfigurationException(""Could not locate "" + resolved);
                }
                final InputStream inputStream = fs.getInputStream(url);
                final InputSource inputSource = new InputSource(resolved);
                inputSource.setPublicId(publicId);
                inputSource.setByteStream(inputStream);
                return inputSource;
            } catch (final Exception e) {
                log.warn(""Failed to create InputSource for "" + resolved, e);
            }
        }

        return null;
    }","  public void test12()  throws Throwable  {
      CatalogResolver catalogResolver0 = new CatalogResolver();
      InterpolatorSpecification interpolatorSpecification0 = mock(InterpolatorSpecification.class, new ViolatedAssumptionAnswer());
      doReturn((Collection) null).when(interpolatorSpecification0).getDefaultLookups();
      doReturn((ConfigurationInterpolator) null).when(interpolatorSpecification0).getInterpolator();
      doReturn((ConfigurationInterpolator) null).when(interpolatorSpecification0).getParentInterpolator();
      doReturn((Map) null).when(interpolatorSpecification0).getPrefixLookups();
      doReturn((Function) null).when(interpolatorSpecification0).getStringConverter();
      ConfigurationInterpolator configurationInterpolator0 = ConfigurationInterpolator.fromSpecification(interpolatorSpecification0);
      catalogResolver0.setInterpolator(configurationInterpolator0);
      InputSource inputSource0 = catalogResolver0.resolveEntity(""k^L>r_ys[G"", ""k^L>r_ys[G"");
}"
475,"    public CatalogResolver() {
        manager.setIgnoreMissingProperties(true);
        manager.setUseStaticCatalog(false);
        manager.setFileSystem(fs);
        initLogger(null);
    }","  public void test13()  throws Throwable  {
      CatalogResolver.Catalog catalogResolver_Catalog0 = new CatalogResolver.Catalog();
      catalogResolver_Catalog0.parseCatalog(""Im}*l#zg1MS%"", """");
}"
476,"    public InputSource resolveEntity(final String publicId, final String systemId) throws SAXException {
        String resolved = getResolver().getResolvedEntity(publicId, systemId);

        if (resolved != null) {
            final String badFilePrefix = ""file://"";
            final String correctFilePrefix = ""file:///"";

            // Java 5 has a bug when constructing file URLS
            if (resolved.startsWith(badFilePrefix) && !resolved.startsWith(correctFilePrefix)) {
                resolved = correctFilePrefix + resolved.substring(badFilePrefix.length());
            }

            try {
                final URL url = locate(fs, null, resolved);
                if (url == null) {
                    throw new ConfigurationException(""Could not locate "" + resolved);
                }
                final InputStream inputStream = fs.getInputStream(url);
                final InputSource inputSource = new InputSource(resolved);
                inputSource.setPublicId(publicId);
                inputSource.setByteStream(inputStream);
                return inputSource;
            } catch (final Exception e) {
                log.warn(""Failed to create InputSource for "" + resolved, e);
            }
        }

        return null;
    }","  public void test14()  throws Throwable  {
      CatalogResolver catalogResolver0 = new CatalogResolver();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(""xcatalog"");
      VFSFileSystem vFSFileSystem0 = new VFSFileSystem();
      catalogResolver0.setFileSystem(vFSFileSystem0);
      FileSystemHandling.appendStringToFile(evoSuiteFile0, ""org.apache.comons.jexl2.parser.ASTMapEtry"");
      InputSource inputSource0 = catalogResolver0.resolveEntity(""org.apache.comons.jexl2.parser.ASTMapEtry"", ""org.apache.commons.configuration2.interpol.ConfigurationInterpolator.defaultPrefixLookups"");
}"
477,"    public CatalogResolver() {
        manager.setIgnoreMissingProperties(true);
        manager.setUseStaticCatalog(false);
        manager.setFileSystem(fs);
        initLogger(null);
    }","  public void test15()  throws Throwable  {
      CatalogResolver.CatalogManager catalogResolver_CatalogManager0 = new CatalogResolver.CatalogManager();
      Catalog catalog0 = catalogResolver_CatalogManager0.getPrivateCatalog();
      Catalog catalog1 = catalogResolver_CatalogManager0.getPrivateCatalog();
}"
478,"    public CatalogResolver() {
        manager.setIgnoreMissingProperties(true);
        manager.setUseStaticCatalog(false);
        manager.setFileSystem(fs);
        initLogger(null);
    }","  public void test16()  throws Throwable  {
      CatalogResolver.CatalogManager catalogResolver_CatalogManager0 = new CatalogResolver.CatalogManager();
      Catalog catalog0 = catalogResolver_CatalogManager0.getPrivateCatalog();
      Catalog catalog1 = catalogResolver_CatalogManager0.getPrivateCatalog();
}"
479,"    public InputSource resolveEntity(final String publicId, final String systemId) throws SAXException {
        String resolved = getResolver().getResolvedEntity(publicId, systemId);

        if (resolved != null) {
            final String badFilePrefix = ""file://"";
            final String correctFilePrefix = ""file:///"";

            // Java 5 has a bug when constructing file URLS
            if (resolved.startsWith(badFilePrefix) && !resolved.startsWith(correctFilePrefix)) {
                resolved = correctFilePrefix + resolved.substring(badFilePrefix.length());
            }

            try {
                final URL url = locate(fs, null, resolved);
                if (url == null) {
                    throw new ConfigurationException(""Could not locate "" + resolved);
                }
                final InputStream inputStream = fs.getInputStream(url);
                final InputSource inputSource = new InputSource(resolved);
                inputSource.setPublicId(publicId);
                inputSource.setByteStream(inputStream);
                return inputSource;
            } catch (final Exception e) {
                log.warn(""Failed to create InputSource for "" + resolved, e);
            }
        }

        return null;
    }","  public void test17()  throws Throwable  {
      CatalogResolver.CatalogManager catalogResolver_CatalogManager0 = new CatalogResolver.CatalogManager();
      catalogResolver_CatalogManager0.getPrivateCatalog();
      CatalogResolver catalogResolver0 = new CatalogResolver();
      InputSource inputSource0 = catalogResolver0.resolveEntity(""ePOt5K(99csj"", ""U<[fUHC>0q"");
}"
480,"    public void setBaseDir(final String baseDir) {
        manager.setBaseDir(baseDir);
    }","  public void test18()  throws Throwable  {
      CatalogResolver.CatalogManager catalogResolver_CatalogManager0 = new CatalogResolver.CatalogManager();
      catalogResolver_CatalogManager0.setBaseDir("""");
}"
481,"    public InputSource resolveEntity(final String publicId, final String systemId) throws SAXException {
        String resolved = getResolver().getResolvedEntity(publicId, systemId);

        if (resolved != null) {
            final String badFilePrefix = ""file://"";
            final String correctFilePrefix = ""file:///"";

            // Java 5 has a bug when constructing file URLS
            if (resolved.startsWith(badFilePrefix) && !resolved.startsWith(correctFilePrefix)) {
                resolved = correctFilePrefix + resolved.substring(badFilePrefix.length());
            }

            try {
                final URL url = locate(fs, null, resolved);
                if (url == null) {
                    throw new ConfigurationException(""Could not locate "" + resolved);
                }
                final InputStream inputStream = fs.getInputStream(url);
                final InputSource inputSource = new InputSource(resolved);
                inputSource.setPublicId(publicId);
                inputSource.setByteStream(inputStream);
                return inputSource;
            } catch (final Exception e) {
                log.warn(""Failed to create InputSource for "" + resolved, e);
            }
        }

        return null;
    }","  public void test19()  throws Throwable  {
      CatalogResolver catalogResolver0 = new CatalogResolver();
      catalogResolver0.resolveEntity("""", """");
      InputSource inputSource0 = catalogResolver0.resolveEntity("""", """");
}"
482,"    public void setDebug(final boolean debug) {
        if (debug) {
            manager.setVerbosity(DEBUG_ALL);
        } else {
            manager.setVerbosity(DEBUG_NONE);
        }
    }","  public void test20()  throws Throwable  {
      CatalogResolver catalogResolver0 = new CatalogResolver();
      catalogResolver0.setDebug(true);
  }"
483,"    public void setDebug(final boolean debug) {
        if (debug) {
            manager.setVerbosity(DEBUG_ALL);
        } else {
            manager.setVerbosity(DEBUG_NONE);
        }
    }","  public void test21()  throws Throwable  {
      CatalogResolver catalogResolver0 = new CatalogResolver();
      catalogResolver0.setDebug(false);
  }"
484,"    public void setBaseDir(final String baseDir) {
        manager.setBaseDir(baseDir);
    }","  public void test22()  throws Throwable  {
      CatalogResolver catalogResolver0 = new CatalogResolver();
      catalogResolver0.setBaseDir((String) null);
  }"
485,"    public void setLogger(final ConfigurationLogger log) {
        initLogger(log);
    }","  public void test23()  throws Throwable  {
      CatalogResolver catalogResolver0 = new CatalogResolver();
      ConfigurationLogger configurationLogger0 = catalogResolver0.getLogger();
      catalogResolver0.setLogger(configurationLogger0);
  }"
486,"    public InputSource resolveEntity(final String publicId, final String systemId) throws SAXException {
        String resolved = getResolver().getResolvedEntity(publicId, systemId);

        if (resolved != null) {
            final String badFilePrefix = ""file://"";
            final String correctFilePrefix = ""file:///"";

            // Java 5 has a bug when constructing file URLS
            if (resolved.startsWith(badFilePrefix) && !resolved.startsWith(correctFilePrefix)) {
                resolved = correctFilePrefix + resolved.substring(badFilePrefix.length());
            }

            try {
                final URL url = locate(fs, null, resolved);
                if (url == null) {
                    throw new ConfigurationException(""Could not locate "" + resolved);
                }
                final InputStream inputStream = fs.getInputStream(url);
                final InputSource inputSource = new InputSource(resolved);
                inputSource.setPublicId(publicId);
                inputSource.setByteStream(inputStream);
                return inputSource;
            } catch (final Exception e) {
                log.warn(""Failed to create InputSource for "" + resolved, e);
            }
        }

        return null;
    }","  public void test24()  throws Throwable  {
      CatalogResolver catalogResolver0 = new CatalogResolver();
      ConfigurationInterpolator configurationInterpolator0 = new ConfigurationInterpolator();
      catalogResolver0.setInterpolator(configurationInterpolator0);
      InputSource inputSource0 = catalogResolver0.resolveEntity(""org.apache.commons.jexl2.parser.ASTMapEntry"", (String) null);
}"
487,"    public String[] getPropertyNames() {
        final List<String> keys = new ArrayList<>();
        final Iterator<String> keysIterator = source.getKeys();
        while (keysIterator.hasNext()) {
            keys.add(keysIterator.next());
        }
        return keys.toArray(new String[keys.size()]);
    }","  public void test0()  throws Throwable  {
      PoolXADataSourceImpl poolXADataSourceImpl0 = new PoolXADataSourceImpl();
      Properties properties0 = poolXADataSourceImpl0.getConnectionProperties();
      MapConfiguration mapConfiguration0 = new MapConfiguration(properties0);
      ConfigurationPropertySource configurationPropertySource0 = new ConfigurationPropertySource(""org.apache.commons.configuration2.spring.ConfigurationPropertySource"", mapConfiguration0);
      String[] stringArray0 = configurationPropertySource0.getPropertyNames();
}"
488,"    public Object getProperty(final String name) {
        return source.getProperty(name);
    }","  public void test1()  throws Throwable  {
      PoolXADataSourceImpl poolXADataSourceImpl0 = new PoolXADataSourceImpl();
      Properties properties0 = poolXADataSourceImpl0.getConnectionProperties();
      MapConfiguration mapConfiguration0 = new MapConfiguration(properties0);
      ConfigurationPropertySource configurationPropertySource0 = new ConfigurationPropertySource(""org.apache.commons.configuration2.spring.ConfigurationPropertySource"", mapConfiguration0);
      Object object0 = configurationPropertySource0.getProperty(""oracle.security.client.password"");
}"
489,"    public Object getProperty(final String name) {
        return source.getProperty(name);
    }","  public void test2()  throws Throwable  {
      PoolXADataSourceImpl poolXADataSourceImpl0 = new PoolXADataSourceImpl();
      Properties properties0 = poolXADataSourceImpl0.getConnectionProperties();
      MapConfiguration mapConfiguration0 = new MapConfiguration(properties0);
      ConfigurationPropertySource configurationPropertySource0 = new ConfigurationPropertySource(""org.apache.commons.configuration2.spring.ConfigurationPropertySource"", mapConfiguration0);
      properties0.setProperty("""", ""L$@"");
      Object object0 = configurationPropertySource0.getProperty("""");
}"
490,"    public String[] getPropertyNames() {
        final List<String> keys = new ArrayList<>();
        final Iterator<String> keysIterator = source.getKeys();
        while (keysIterator.hasNext()) {
            keys.add(keysIterator.next());
        }
        return keys.toArray(new String[keys.size()]);
    }","  public void test3()  throws Throwable  {
      OverrideCombiner overrideCombiner0 = new OverrideCombiner();
      DynamicCombinedConfiguration dynamicCombinedConfiguration0 = new DynamicCombinedConfiguration(overrideCombiner0);
      NodeSelector nodeSelector0 = new NodeSelector(""org.apache.commons.configuration2.spring.ConfigurationPropertySource"");
      TrackedNodeModel trackedNodeModel0 = new TrackedNodeModel(dynamicCombinedConfiguration0, nodeSelector0, true);
      SubnodeConfiguration subnodeConfiguration0 = new SubnodeConfiguration(dynamicCombinedConfiguration0, trackedNodeModel0);
      PatternSubtreeConfigurationWrapper patternSubtreeConfigurationWrapper0 = new PatternSubtreeConfigurationWrapper(subnodeConfiguration0, """");
      ConfigurationPropertySource configurationPropertySource0 = new ConfigurationPropertySource(""logout"", patternSubtreeConfigurationWrapper0);
      // Undeclared exception!
      try { 
        configurationPropertySource0.getPropertyNames();
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // No tracked node found: org.apache.commons.configuration2.tree.NodeSelector@15[keys=[org.apache.commons.configuration2.spring.ConfigurationPropertySource]]
         //
         verifyException(""org.apache.commons.configuration2.tree.NodeTracker"", e);
      }
  }"
491,"    public String[] getPropertyNames() {
        final List<String> keys = new ArrayList<>();
        final Iterator<String> keysIterator = source.getKeys();
        while (keysIterator.hasNext()) {
            keys.add(keysIterator.next());
        }
        return keys.toArray(new String[keys.size()]);
    }","  public void test4()  throws Throwable  {
      DatabaseConfiguration databaseConfiguration0 = new DatabaseConfiguration();
      ConfigurationPropertySource configurationPropertySource0 = new ConfigurationPropertySource(""Invalid year value"", databaseConfiguration0);
      // Undeclared exception!
      try { 
        configurationPropertySource0.getPropertyNames();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.configuration2.DatabaseConfiguration$JdbcOperation"", e);
      }
  }"
492,"    public String[] getPropertyNames() {
        final List<String> keys = new ArrayList<>();
        final Iterator<String> keysIterator = source.getKeys();
        while (keysIterator.hasNext()) {
            keys.add(keysIterator.next());
        }
        return keys.toArray(new String[keys.size()]);
    }","  public void test5()  throws Throwable  {
      ConfigurationPropertySource configurationPropertySource0 = new ConfigurationPropertySource(""5Rm|IJFn/p"");
      // Undeclared exception!
      try { 
        configurationPropertySource0.getPropertyNames();
        fail(""Expecting exception: ClassCastException"");
      } catch(ClassCastException e) {
         //
         // java.lang.Object cannot be cast to org.apache.commons.configuration2.Configuration
         //
         verifyException(""org.apache.commons.configuration2.spring.ConfigurationPropertySource"", e);
      }
  }"
493,"    public ConfigurationPropertySource(final String name, final Configuration source) {
        super(name, source);
    }","  public void test6()  throws Throwable  {
      ConfigurationPropertySource configurationPropertySource0 = null;
      try {
        configurationPropertySource0 = new ConfigurationPropertySource(""yLbJQv&MU'g,0)Op"", (Configuration) null);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Property source must not be null
         //
         verifyException(""org.springframework.util.Assert"", e);
      }
  }"
494,"    public ConfigurationPropertySource(final String name, final Configuration source) {
        super(name, source);
    }","  public void test7()  throws Throwable  {
      ConfigurationPropertySource configurationPropertySource0 = null;
      try {
        configurationPropertySource0 = new ConfigurationPropertySource("""");
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Property source name must contain at least one character
         //
         verifyException(""org.springframework.util.Assert"", e);
      }
  }"
495,"    public String[] getPropertyNames() {
        final List<String> keys = new ArrayList<>();
        final Iterator<String> keysIterator = source.getKeys();
        while (keysIterator.hasNext()) {
            keys.add(keysIterator.next());
        }
        return keys.toArray(new String[keys.size()]);
    }","  public void test8()  throws Throwable  {
      EnvironmentConfiguration environmentConfiguration0 = new EnvironmentConfiguration();
      ConfigurationPropertySource configurationPropertySource0 = new ConfigurationPropertySource(""lA@CHV"", environmentConfiguration0);
      String[] stringArray0 = configurationPropertySource0.getPropertyNames();
}"
496,"    public Object getProperty(final String name) {
        return source.getProperty(name);
    }","  public void test9()  throws Throwable  {
      MapConfiguration mapConfiguration0 = new MapConfiguration((Properties) null);
      ConfigurationPropertySource configurationPropertySource0 = new ConfigurationPropertySource(""O iS&NS~#\""_6a"", mapConfiguration0);
      // Undeclared exception!
      try { 
        configurationPropertySource0.getProperty(""%"");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.configuration2.MapConfiguration"", e);
      }
  }"
497,"    public Object getProperty(final String name) {
        return source.getProperty(name);
    }","  public void test10()  throws Throwable  {
      ConfigurationPropertySource configurationPropertySource0 = new ConfigurationPropertySource(""QaU|4tb(6"");
      // Undeclared exception!
      try { 
        configurationPropertySource0.getProperty(""QaU|4tb(6"");
        fail(""Expecting exception: ClassCastException"");
      } catch(ClassCastException e) {
         //
         // java.lang.Object cannot be cast to org.apache.commons.configuration2.Configuration
         //
         verifyException(""org.apache.commons.configuration2.spring.ConfigurationPropertySource"", e);
      }
  }"
498,"    public boolean isThrowExceptionOnMissing() {
        return throwExceptionOnMissing;
    }","  public void test0()  throws Throwable  {
      EnvironmentConfiguration environmentConfiguration0 = new EnvironmentConfiguration();
      ConfigurationPropertiesFactoryBean configurationPropertiesFactoryBean0 = new ConfigurationPropertiesFactoryBean(environmentConfiguration0);
}"
499,"    public boolean isThrowExceptionOnMissing() {
        return throwExceptionOnMissing;
    }","  public void test1()  throws Throwable  {
      EnvironmentConfiguration environmentConfiguration0 = new EnvironmentConfiguration();
      ConfigurationPropertiesFactoryBean configurationPropertiesFactoryBean0 = new ConfigurationPropertiesFactoryBean(environmentConfiguration0);
      configurationPropertiesFactoryBean0.setThrowExceptionOnMissing(false);
      boolean boolean0 = configurationPropertiesFactoryBean0.isThrowExceptionOnMissing();
}"
500,"    public boolean isThrowExceptionOnMissing() {
        return throwExceptionOnMissing;
    }","  public void test2()  throws Throwable  {
      ConfigurationPropertiesFactoryBean configurationPropertiesFactoryBean0 = new ConfigurationPropertiesFactoryBean();
      Configuration[] configurationArray0 = new Configuration[1];
      DynamicCombinedConfiguration dynamicCombinedConfiguration0 = new DynamicCombinedConfiguration();
      configurationArray0[0] = (Configuration) dynamicCombinedConfiguration0;
      configurationPropertiesFactoryBean0.setConfigurations(configurationArray0);
      configurationPropertiesFactoryBean0.afterPropertiesSet();
      configurationPropertiesFactoryBean0.getObject();
}"
501,"    public boolean isThrowExceptionOnMissing() {
        return throwExceptionOnMissing;
    }","  public void test3()  throws Throwable  {
      ConfigurationPropertiesFactoryBean configurationPropertiesFactoryBean0 = new ConfigurationPropertiesFactoryBean();
      Resource[] resourceArray0 = new Resource[5];
      configurationPropertiesFactoryBean0.setLocations(resourceArray0);
      configurationPropertiesFactoryBean0.getLocations();
}"
502,"    public boolean isThrowExceptionOnMissing() {
        return throwExceptionOnMissing;
    }","  public void test4()  throws Throwable  {
      UnionCombiner unionCombiner0 = new UnionCombiner();
      DynamicCombinedConfiguration dynamicCombinedConfiguration0 = new DynamicCombinedConfiguration(unionCombiner0);
      ConfigurationPropertiesFactoryBean configurationPropertiesFactoryBean0 = new ConfigurationPropertiesFactoryBean(dynamicCombinedConfiguration0);
      Resource[] resourceArray0 = new Resource[0];
      configurationPropertiesFactoryBean0.setLocations(resourceArray0);
      configurationPropertiesFactoryBean0.getLocations();
}"
503,"    public boolean isThrowExceptionOnMissing() {
        return throwExceptionOnMissing;
    }","  public void test5()  throws Throwable  {
      UnionCombiner unionCombiner0 = new UnionCombiner();
      DynamicCombinedConfiguration dynamicCombinedConfiguration0 = new DynamicCombinedConfiguration(unionCombiner0);
      ConfigurationPropertiesFactoryBean configurationPropertiesFactoryBean0 = new ConfigurationPropertiesFactoryBean(dynamicCombinedConfiguration0);
      Configuration[] configurationArray0 = new Configuration[2];
      configurationPropertiesFactoryBean0.setConfigurations(configurationArray0);
      configurationPropertiesFactoryBean0.getConfigurations();
}"
504,"    public boolean isThrowExceptionOnMissing() {
        return throwExceptionOnMissing;
    }","  public void test6()  throws Throwable  {
      ConfigurationPropertiesFactoryBean configurationPropertiesFactoryBean0 = new ConfigurationPropertiesFactoryBean();
      Configuration[] configurationArray0 = new Configuration[0];
      configurationPropertiesFactoryBean0.setConfigurations(configurationArray0);
      configurationPropertiesFactoryBean0.getConfigurations();
}"
505,"    public boolean isThrowExceptionOnMissing() {
        return throwExceptionOnMissing;
    }","  public void test7()  throws Throwable  {
      CombinedConfiguration combinedConfiguration0 = new CombinedConfiguration();
      NodeSelector nodeSelector0 = new NodeSelector((String) null);
      TrackedNodeModel trackedNodeModel0 = new TrackedNodeModel(combinedConfiguration0, nodeSelector0, true);
      SubnodeConfiguration subnodeConfiguration0 = new SubnodeConfiguration(combinedConfiguration0, trackedNodeModel0);
      ConfigurationPropertiesFactoryBean configurationPropertiesFactoryBean0 = new ConfigurationPropertiesFactoryBean(subnodeConfiguration0);
      configurationPropertiesFactoryBean0.afterPropertiesSet();
      CompositeConfiguration compositeConfiguration0 = configurationPropertiesFactoryBean0.getConfiguration();
}"
506,"    public boolean isThrowExceptionOnMissing() {
        return throwExceptionOnMissing;
    }","  public void test8()  throws Throwable  {
      CombinedConfiguration combinedConfiguration0 = new CombinedConfiguration();
      NodeSelector nodeSelector0 = new NodeSelector((String) null);
      TrackedNodeModel trackedNodeModel0 = new TrackedNodeModel(combinedConfiguration0, nodeSelector0, true);
      SubnodeConfiguration subnodeConfiguration0 = new SubnodeConfiguration(combinedConfiguration0, trackedNodeModel0);
      ConfigurationPropertiesFactoryBean configurationPropertiesFactoryBean0 = new ConfigurationPropertiesFactoryBean(subnodeConfiguration0);
      configurationPropertiesFactoryBean0.getConfiguration();
}"
507,"    public Properties getObject() throws Exception {
        return compositeConfiguration != null ? ConfigurationConverter.getProperties(compositeConfiguration) : null;
    }","  public void test9()  throws Throwable  {
      CombinedConfiguration combinedConfiguration0 = new CombinedConfiguration();
      NodeSelector nodeSelector0 = new NodeSelector((String) null);
      TrackedNodeModel trackedNodeModel0 = new TrackedNodeModel(combinedConfiguration0, nodeSelector0, true);
      SubnodeConfiguration subnodeConfiguration0 = new SubnodeConfiguration(combinedConfiguration0, trackedNodeModel0);
      ConfigurationPropertiesFactoryBean configurationPropertiesFactoryBean0 = new ConfigurationPropertiesFactoryBean(subnodeConfiguration0);
      try { 
        configurationPropertiesFactoryBean0.getObject();
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // No tracked node found: org.apache.commons.configuration2.tree.NodeSelector@11[keys=[null]]
         //
         verifyException(""org.apache.commons.configuration2.tree.NodeTracker"", e);
      }
  }"
508,"    public Properties getObject() throws Exception {
        return compositeConfiguration != null ? ConfigurationConverter.getProperties(compositeConfiguration) : null;
    }","  public void test10()  throws Throwable  {
      EnvironmentConfiguration environmentConfiguration0 = new EnvironmentConfiguration();
      ConfigurationPropertiesFactoryBean configurationPropertiesFactoryBean0 = new ConfigurationPropertiesFactoryBean(environmentConfiguration0);
      configurationPropertiesFactoryBean0.getObject();
      configurationPropertiesFactoryBean0.getObject();
  }"
509,"    public Properties getObject() throws Exception {
        return compositeConfiguration != null ? ConfigurationConverter.getProperties(compositeConfiguration) : null;
    }","  public void test11()  throws Throwable  {
      Hashtable<PropertiesConfiguration, BaseConfiguration> hashtable0 = new Hashtable<PropertiesConfiguration, BaseConfiguration>();
      MockInitialContext mockInitialContext0 = new MockInitialContext(hashtable0);
      JNDIConfiguration jNDIConfiguration0 = new JNDIConfiguration(mockInitialContext0, ""mB$VjKHYP'xglZ m"");
      ConfigurationPropertiesFactoryBean configurationPropertiesFactoryBean0 = new ConfigurationPropertiesFactoryBean(jNDIConfiguration0);
      DatabaseConfiguration databaseConfiguration0 = new DatabaseConfiguration();
      mockInitialContext0.bind(""mB$VjKHYP'xglZ m"", (Object) databaseConfiguration0);
      try { 
        configurationPropertiesFactoryBean0.getObject();
        fail(""Expecting exception: ClassCastException"");
      } catch(ClassCastException e) {
         //
         // org.apache.commons.configuration2.DatabaseConfiguration cannot be cast to javax.naming.Context
         //
         verifyException(""org.apache.commons.configuration2.JNDIConfiguration"", e);
      }
  }"
510,"    public void afterPropertiesSet() throws Exception {
        if (compositeConfiguration == null && ArrayUtils.isEmpty(configurations) && ArrayUtils.isEmpty(locations)) {
            throw new IllegalArgumentException(""no configuration object or location specified"");
        }

        if (compositeConfiguration == null) {
            compositeConfiguration = new CompositeConfiguration();
        }

        compositeConfiguration.setThrowExceptionOnMissing(throwExceptionOnMissing);

        if (configurations != null) {
            for (final Configuration configuration : configurations) {
                compositeConfiguration.addConfiguration(configuration);
            }
        }

        if (locations != null) {
            for (final Resource location : locations) {
                final URL url = location.getURL();
                final Configuration props = new Configurations().properties(url);
                compositeConfiguration.addConfiguration(props);
            }
        }
    }","  public void test12()  throws Throwable  {
      ConfigurationPropertiesFactoryBean configurationPropertiesFactoryBean0 = new ConfigurationPropertiesFactoryBean();
      Resource[] resourceArray0 = new Resource[5];
      FileSystemResource fileSystemResource0 = new FileSystemResource("""");
      resourceArray0[1] = (Resource) fileSystemResource0;
      ClassPathResource classPathResource0 = new ClassPathResource("""", (ClassLoader) null);
      resourceArray0[0] = (Resource) classPathResource0;
      configurationPropertiesFactoryBean0.setLocations(resourceArray0);
      try { 
        configurationPropertiesFactoryBean0.afterPropertiesSet();
        fail(""Expecting exception: Exception"");
      } catch(Exception e) {
         //
         // Cannot load a configuration from a directory
         //
         verifyException(""org.apache.commons.configuration2.io.DefaultFileSystem"", e);
      }
  }"
511,"    public void afterPropertiesSet() throws Exception {
        if (compositeConfiguration == null && ArrayUtils.isEmpty(configurations) && ArrayUtils.isEmpty(locations)) {
            throw new IllegalArgumentException(""no configuration object or location specified"");
        }

        if (compositeConfiguration == null) {
            compositeConfiguration = new CompositeConfiguration();
        }

        compositeConfiguration.setThrowExceptionOnMissing(throwExceptionOnMissing);

        if (configurations != null) {
            for (final Configuration configuration : configurations) {
                compositeConfiguration.addConfiguration(configuration);
            }
        }

        if (locations != null) {
            for (final Resource location : locations) {
                final URL url = location.getURL();
                final Configuration props = new Configurations().properties(url);
                compositeConfiguration.addConfiguration(props);
            }
        }
    }","  public void test13()  throws Throwable  {
      ConfigurationPropertiesFactoryBean configurationPropertiesFactoryBean0 = new ConfigurationPropertiesFactoryBean();
      Resource[] resourceArray0 = new Resource[1];
      VfsResource vfsResource0 = new VfsResource(configurationPropertiesFactoryBean0);
      resourceArray0[0] = (Resource) vfsResource0;
      configurationPropertiesFactoryBean0.setLocations(resourceArray0);
      // Undeclared exception!
      try { 
        configurationPropertiesFactoryBean0.afterPropertiesSet();
        fail(""Expecting exception: NoClassDefFoundError"");
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class org.springframework.core.io.VfsUtils
         //
         verifyException(""org.springframework.core.io.VfsResource"", e);
      }
  }"
512,"    public void afterPropertiesSet() throws Exception {
        if (compositeConfiguration == null && ArrayUtils.isEmpty(configurations) && ArrayUtils.isEmpty(locations)) {
            throw new IllegalArgumentException(""no configuration object or location specified"");
        }

        if (compositeConfiguration == null) {
            compositeConfiguration = new CompositeConfiguration();
        }

        compositeConfiguration.setThrowExceptionOnMissing(throwExceptionOnMissing);

        if (configurations != null) {
            for (final Configuration configuration : configurations) {
                compositeConfiguration.addConfiguration(configuration);
            }
        }

        if (locations != null) {
            for (final Resource location : locations) {
                final URL url = location.getURL();
                final Configuration props = new Configurations().properties(url);
                compositeConfiguration.addConfiguration(props);
            }
        }
    }","  public void test14()  throws Throwable  {
      ConfigurationPropertiesFactoryBean configurationPropertiesFactoryBean0 = new ConfigurationPropertiesFactoryBean();
      Resource[] resourceArray0 = new Resource[5];
      byte[] byteArray0 = new byte[4];
      ByteArrayResource byteArrayResource0 = new ByteArrayResource(byteArray0);
      resourceArray0[0] = (Resource) byteArrayResource0;
      configurationPropertiesFactoryBean0.setLocations(resourceArray0);
      try { 
        configurationPropertiesFactoryBean0.afterPropertiesSet();
        fail(""Expecting exception: FileNotFoundException"");
      } catch(FileNotFoundException e) {
         //
         // Byte array resource [resource loaded from byte array] cannot be resolved to URL
         //
         verifyException(""org.springframework.core.io.AbstractResource"", e);
      }
  }"
513,"    public ConfigurationPropertiesFactoryBean() {
    }","  public void test15()  throws Throwable  {
      ConfigurationPropertiesFactoryBean configurationPropertiesFactoryBean0 = null;
      try {
        configurationPropertiesFactoryBean0 = new ConfigurationPropertiesFactoryBean((Configuration) null);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // configuration
         //
         verifyException(""org.springframework.util.Assert"", e);
      }
  }"
514,"    public boolean isThrowExceptionOnMissing() {
        return throwExceptionOnMissing;
    }","  public void test16()  throws Throwable  {
      ConfigurationPropertiesFactoryBean configurationPropertiesFactoryBean0 = new ConfigurationPropertiesFactoryBean();
      Resource[] resourceArray0 = new Resource[0];
      Configuration[] configurationArray0 = new Configuration[1];
      configurationPropertiesFactoryBean0.setConfigurations(configurationArray0);
      configurationPropertiesFactoryBean0.setLocations(resourceArray0);
      configurationPropertiesFactoryBean0.afterPropertiesSet();
}"
515,"    public void afterPropertiesSet() throws Exception {
        if (compositeConfiguration == null && ArrayUtils.isEmpty(configurations) && ArrayUtils.isEmpty(locations)) {
            throw new IllegalArgumentException(""no configuration object or location specified"");
        }

        if (compositeConfiguration == null) {
            compositeConfiguration = new CompositeConfiguration();
        }

        compositeConfiguration.setThrowExceptionOnMissing(throwExceptionOnMissing);

        if (configurations != null) {
            for (final Configuration configuration : configurations) {
                compositeConfiguration.addConfiguration(configuration);
            }
        }

        if (locations != null) {
            for (final Resource location : locations) {
                final URL url = location.getURL();
                final Configuration props = new Configurations().properties(url);
                compositeConfiguration.addConfiguration(props);
            }
        }
    }","  public void test17()  throws Throwable  {
      ConfigurationPropertiesFactoryBean configurationPropertiesFactoryBean0 = new ConfigurationPropertiesFactoryBean();
      Resource[] resourceArray0 = new Resource[16];
      configurationPropertiesFactoryBean0.setLocations(resourceArray0);
      try { 
        configurationPropertiesFactoryBean0.afterPropertiesSet();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.configuration2.spring.ConfigurationPropertiesFactoryBean"", e);
      }
  }"
516,"    public void afterPropertiesSet() throws Exception {
        if (compositeConfiguration == null && ArrayUtils.isEmpty(configurations) && ArrayUtils.isEmpty(locations)) {
            throw new IllegalArgumentException(""no configuration object or location specified"");
        }

        if (compositeConfiguration == null) {
            compositeConfiguration = new CompositeConfiguration();
        }

        compositeConfiguration.setThrowExceptionOnMissing(throwExceptionOnMissing);

        if (configurations != null) {
            for (final Configuration configuration : configurations) {
                compositeConfiguration.addConfiguration(configuration);
            }
        }

        if (locations != null) {
            for (final Resource location : locations) {
                final URL url = location.getURL();
                final Configuration props = new Configurations().properties(url);
                compositeConfiguration.addConfiguration(props);
            }
        }
    }","  public void test18()  throws Throwable  {
      ConfigurationPropertiesFactoryBean configurationPropertiesFactoryBean0 = new ConfigurationPropertiesFactoryBean();
      try { 
        configurationPropertiesFactoryBean0.afterPropertiesSet();
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // no configuration object or location specified
         //
         verifyException(""org.apache.commons.configuration2.spring.ConfigurationPropertiesFactoryBean"", e);
      }
  }"
517,"    public boolean isThrowExceptionOnMissing() {
        return throwExceptionOnMissing;
    }","  public void test19()  throws Throwable  {
      ConfigurationPropertiesFactoryBean configurationPropertiesFactoryBean0 = new ConfigurationPropertiesFactoryBean();
      configurationPropertiesFactoryBean0.getObject();
}"
518,"    public boolean isThrowExceptionOnMissing() {
        return throwExceptionOnMissing;
    }","  public void test20()  throws Throwable  {
      ConfigurationPropertiesFactoryBean configurationPropertiesFactoryBean0 = new ConfigurationPropertiesFactoryBean();
      configurationPropertiesFactoryBean0.getConfigurations();
}"
519,"    public boolean isThrowExceptionOnMissing() {
        return throwExceptionOnMissing;
    }","  public void test21()  throws Throwable  {
      ConfigurationPropertiesFactoryBean configurationPropertiesFactoryBean0 = new ConfigurationPropertiesFactoryBean();
      boolean boolean0 = configurationPropertiesFactoryBean0.isThrowExceptionOnMissing();
}"
520,"    public boolean isThrowExceptionOnMissing() {
        return throwExceptionOnMissing;
    }","  public void test22()  throws Throwable  {
      ConfigurationPropertiesFactoryBean configurationPropertiesFactoryBean0 = new ConfigurationPropertiesFactoryBean();
      configurationPropertiesFactoryBean0.getLocations();
}"
521,"    public Properties getObject() throws Exception {
        return compositeConfiguration != null ? ConfigurationConverter.getProperties(compositeConfiguration) : null;
    }","  public void test23()  throws Throwable  {
      ConfigurationPropertiesFactoryBean configurationPropertiesFactoryBean0 = new ConfigurationPropertiesFactoryBean();
      Configuration[] configurationArray0 = new Configuration[1];
      configurationPropertiesFactoryBean0.setConfigurations(configurationArray0);
      configurationPropertiesFactoryBean0.afterPropertiesSet();
      try { 
        configurationPropertiesFactoryBean0.getObject();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.configuration2.CompositeConfiguration"", e);
      }
  }"
522,"    public boolean isThrowExceptionOnMissing() {
        return throwExceptionOnMissing;
    }","  public void test24()  throws Throwable  {
      ConfigurationPropertiesFactoryBean configurationPropertiesFactoryBean0 = new ConfigurationPropertiesFactoryBean();
      configurationPropertiesFactoryBean0.getObjectType();
}"
523,"    public boolean isThrowExceptionOnMissing() {
        return throwExceptionOnMissing;
    }","  public void test25()  throws Throwable  {
      ConfigurationPropertiesFactoryBean configurationPropertiesFactoryBean0 = new ConfigurationPropertiesFactoryBean();
      configurationPropertiesFactoryBean0.getConfiguration();
}"
524,"    public boolean isThrowExceptionOnMissing() {
        return throwExceptionOnMissing;
    }","  public void test26()  throws Throwable  {
      ConfigurationPropertiesFactoryBean configurationPropertiesFactoryBean0 = new ConfigurationPropertiesFactoryBean();
      boolean boolean0 = configurationPropertiesFactoryBean0.isSingleton();
}"
525,"    public boolean isSingleton() {
        return true;
    }","  public void test27()  throws Throwable  {
      ConfigurationPropertiesFactoryBean configurationPropertiesFactoryBean0 = new ConfigurationPropertiesFactoryBean();
      boolean boolean0 = configurationPropertiesFactoryBean0.isSingleton();
}"
526,"    public static Color toColor(final Object value) throws ConversionException {
        if (value instanceof Color) {
            return (Color) value;
        }
        if (!(value instanceof String) || StringUtils.isBlank((String) value)) {
            throw new ConversionException(""The value "" + value + "" can't be converted to a Color"");
        }
        String color = ((String) value).trim();

        final int[] components = new int[3];

        // check the size of the string
        final int minlength = components.length * 2;
        if (color.length() < minlength) {
            throw new ConversionException(""The value "" + value + "" can't be converted to a Color"");
        }

        // remove the leading #
        if (color.startsWith(""#"")) {
            color = color.substring(1);
        }

        try {
            // parse the components
            for (int i = 0; i < components.length; i++) {
                components[i] = Integer.parseInt(color.substring(2 * i, 2 * i + 2), HEX_RADIX);
            }

            // parse the transparency
            final int alpha;
            if (color.length() >= minlength + 2) {
                alpha = Integer.parseInt(color.substring(minlength, minlength + 2), HEX_RADIX);
            } else {
                alpha = Color.black.getAlpha();
            }

            return new Color(components[0], components[1], components[2], alpha);
        } catch (final Exception e) {
            throw new ConversionException(""The value "" + value + "" can't be converted to a Color"", e);
        }
    }","  public void test0()  throws Throwable  {
      try { 
        PropertyConverter.toColor("" object"");
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // The value  object can't be converted to a Color
         //
         verifyException(""org.apache.commons.configuration2.convert.PropertyConverter"", e);
      }
  }"
527,"    public static Locale toLocale(final Object value) throws ConversionException {
        if (value instanceof Locale) {
            return (Locale) value;
        }
        if (!(value instanceof String)) {
            throw new ConversionException(""The value "" + value + "" can't be converted to a Locale"");
        }
        final String[] elements = ((String) value).split(""_"");
        final int size = elements.length;

        if (size >= 1 && (elements[0].length() == 2 || elements[0].isEmpty())) {
            final String language = elements[0];
            final String country = size >= 2 ? elements[1] : """";
            final String variant = size >= 3 ? elements[2] : """";

            return new Locale(language, country, variant);
        }
        throw new ConversionException(""The value "" + value + "" can't be converted to a Locale"");
    }","  public void test1()  throws Throwable  {
      Locale locale0 = PropertyConverter.toLocale(""_am``Trn!\""Q&P"");
}"
528,"    public static Locale toLocale(final Object value) throws ConversionException {
        if (value instanceof Locale) {
            return (Locale) value;
        }
        if (!(value instanceof String)) {
            throw new ConversionException(""The value "" + value + "" can't be converted to a Locale"");
        }
        final String[] elements = ((String) value).split(""_"");
        final int size = elements.length;

        if (size >= 1 && (elements[0].length() == 2 || elements[0].isEmpty())) {
            final String language = elements[0];
            final String country = size >= 2 ? elements[1] : """";
            final String variant = size >= 3 ? elements[2] : """";

            return new Locale(language, country, variant);
        }
        throw new ConversionException(""The value "" + value + "" can't be converted to a Locale"");
    }","  public void test2()  throws Throwable  {
      try { 
        PropertyConverter.toLocale("" can't be converted to a Path"");
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // The value  can't be converted to a Path can't be converted to a Locale
         //
         verifyException(""org.apache.commons.configuration2.convert.PropertyConverter"", e);
      }
  }"
529,"    static Number toNumber(final Object value, final Class<?> targetClass) throws ConversionException {
        if (value instanceof Number) {
            return (Number) value;
        }
        final String str = value.toString();
        if (str.startsWith(HEX_PREFIX)) {
            try {
                return new BigInteger(str.substring(HEX_PREFIX.length()), HEX_RADIX);
            } catch (final NumberFormatException nex) {
                throw new ConversionException(""Could not convert "" + str + "" to "" + targetClass.getName() + ""! Invalid hex number."", nex);
            }
        }

        if (str.startsWith(BIN_PREFIX)) {
            try {
                return new BigInteger(str.substring(BIN_PREFIX.length()), BIN_RADIX);
            } catch (final NumberFormatException nex) {
                throw new ConversionException(""Could not convert "" + str + "" to "" + targetClass.getName() + ""! Invalid binary number."", nex);
            }
        }

        try {
            final Constructor<?> constr = targetClass.getConstructor(CONSTR_ARGS);
            return (Number) constr.newInstance(str);
        } catch (final InvocationTargetException itex) {
            throw new ConversionException(""Could not convert "" + str + "" to "" + targetClass.getName(), itex.getTargetException());
        } catch (final Exception ex) {
            // Treat all possible exceptions the same way
            throw new ConversionException(""Conversion error when trying to convert "" + str + "" to "" + targetClass.getName(), ex);
        }
    }","  public void test3()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.anyLocalAddress();
      Class<DefaultLookups> class0 = DefaultLookups.class;
      try { 
        PropertyConverter.toNumber(inetAddress0, class0);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // Conversion error when trying to convert java.net.Inet4Address@0000000001 to org.apache.commons.configuration2.interpol.DefaultLookups
         //
         verifyException(""org.apache.commons.configuration2.convert.PropertyConverter"", e);
      }
  }"
530,"    static <E extends Enum<E>> E toEnum(final Object value, final Class<E> cls) throws ConversionException {
        if (value.getClass().equals(cls)) {
            return cls.cast(value);
        }
        if (value instanceof String) {
            try {
                return Enum.valueOf(cls, (String) value);
            } catch (final Exception e) {
                throw new ConversionException(""The value "" + value + "" can't be converted to a "" + cls.getName());
            }
        }
        if (!(value instanceof Number)) {
            throw new ConversionException(""The value "" + value + "" can't be converted to a "" + cls.getName());
        }
        try {
            final E[] enumConstants = cls.getEnumConstants();
            return enumConstants[((Number) value).intValue()];
        } catch (final Exception e) {
            throw new ConversionException(""The value "" + value + "" can't be converted to a "" + cls.getName());
        }
    }","  public void test4()  throws Throwable  {
      Integer integer0 = new Integer(1147);
      Class<NodeNameMatchers> class0 = NodeNameMatchers.class;
      try { 
        PropertyConverter.toEnum((Object) integer0, class0);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // The value 1147 can't be converted to a org.apache.commons.configuration2.tree.NodeNameMatchers
         //
         verifyException(""org.apache.commons.configuration2.convert.PropertyConverter"", e);
      }
  }"
531,"    public static Date toDate(final Object value, final String format) throws ConversionException {
        if (value instanceof Date) {
            return (Date) value;
        }
        if (value instanceof Calendar) {
            return ((Calendar) value).getTime();
        }
        if (!(value instanceof String)) {
            throw new ConversionException(""The value "" + value + "" can't be converted to a Date"");
        }
        try {
            return new SimpleDateFormat(format).parse((String) value);
        } catch (final ParseException e) {
            throw new ConversionException(""The value "" + value + "" can't be converted to a Date"", e);
        }
    }","  public void test5()  throws Throwable  {
      try { 
        PropertyConverter.toDate("""", """");
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // The value  can't be converted to a Date
         //
         verifyException(""org.apache.commons.configuration2.convert.PropertyConverter"", e);
      }
  }"
532,"    public static Calendar toCalendar(final Object value, final String format) throws ConversionException {
        if (value instanceof Calendar) {
            return (Calendar) value;
        }
        if (value instanceof Date) {
            final Calendar calendar = Calendar.getInstance();
            calendar.setTime((Date) value);
            return calendar;
        }
        if (!(value instanceof String)) {
            throw new ConversionException(""The value "" + value + "" can't be converted to a Calendar"");
        }
        try {
            final Calendar calendar = Calendar.getInstance();
            calendar.setTime(new SimpleDateFormat(format).parse((String) value));
            return calendar;
        } catch (final ParseException e) {
            throw new ConversionException(""The value "" + value + "" can't be converted to a Calendar"", e);
        }
    }","  public void test6()  throws Throwable  {
      try { 
        PropertyConverter.toCalendar(""Ambiguous statement, missing ';' between expression@"", """");
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // The value Ambiguous statement, missing ';' between expression@ can't be converted to a Calendar
         //
         verifyException(""org.apache.commons.configuration2.convert.PropertyConverter"", e);
      }
  }"
533,"    public static Calendar toCalendar(final Object value, final String format) throws ConversionException {
        if (value instanceof Calendar) {
            return (Calendar) value;
        }
        if (value instanceof Date) {
            final Calendar calendar = Calendar.getInstance();
            calendar.setTime((Date) value);
            return calendar;
        }
        if (!(value instanceof String)) {
            throw new ConversionException(""The value "" + value + "" can't be converted to a Calendar"");
        }
        try {
            final Calendar calendar = Calendar.getInstance();
            calendar.setTime(new SimpleDateFormat(format).parse((String) value));
            return calendar;
        } catch (final ParseException e) {
            throw new ConversionException(""The value "" + value + "" can't be converted to a Calendar"", e);
        }
    }","  public void test7()  throws Throwable  {
      Calendar calendar0 = PropertyConverter.toCalendar(""$"", ""$"");
}"
534,"    public static URL toURL(final Object value) throws ConversionException {
        if (value instanceof URL) {
            return (URL) value;
        }
        if (!(value instanceof String)) {
            throw new ConversionException(""The value "" + value + "" can't be converted to an URL"");
        }
        try {
            return new URL((String) value);
        } catch (final MalformedURLException e) {
            throw new ConversionException(""The value "" + value + "" can't be converted to an URL"", e);
        }
    }","  public void test8()  throws Throwable  {
      VfsComponentContext vfsComponentContext0 = mock(VfsComponentContext.class, new ViolatedAssumptionAnswer());
      FileSystemOptions fileSystemOptions0 = new FileSystemOptions();
      DefaultURLStreamHandler defaultURLStreamHandler0 = new DefaultURLStreamHandler(vfsComponentContext0, fileSystemOptions0);
      URL uRL0 = MockURL.URL(""jLblu-~aLoujadx1@f"", ""jLblu-~aLoujadx1@f"", 0, ""jLblu-~aLoujadx1@f"", (URLStreamHandler) defaultURLStreamHandler0);
      URL uRL1 = PropertyConverter.toURL(uRL0);
}"
535,"    public static URL toURL(final Object value) throws ConversionException {
        if (value instanceof URL) {
            return (URL) value;
        }
        if (!(value instanceof String)) {
            throw new ConversionException(""The value "" + value + "" can't be converted to an URL"");
        }
        try {
            return new URL((String) value);
        } catch (final MalformedURLException e) {
            throw new ConversionException(""The value "" + value + "" can't be converted to an URL"", e);
        }
    }","  public void test9()  throws Throwable  {
      VfsComponentContext vfsComponentContext0 = mock(VfsComponentContext.class, new ViolatedAssumptionAnswer());
      DefaultURLStreamHandler defaultURLStreamHandler0 = new DefaultURLStreamHandler(vfsComponentContext0, (FileSystemOptions) null);
      URL uRL0 = MockURL.URL(""I92XoC6'EX9y;Mk0io"", ""I92XoC6'EX9y;Mk0io"", 3, ""I92XoC6'EX9y;Mk0io"", (URLStreamHandler) defaultURLStreamHandler0);
      URL uRL1 = PropertyConverter.toURL(uRL0);
}"
536,"    public static URI toURI(final Object value) throws ConversionException {
        if (value instanceof URI) {
            return (URI) value;
        }
        if (!(value instanceof String)) {
            throw new ConversionException(""The value "" + value + "" can't be converted to an URI"");
        }
        try {
            return new URI((String) value);
        } catch (final URISyntaxException e) {
            throw new ConversionException(""The value "" + value + "" can't be converted to an URI"", e);
        }
    }","  public void test10()  throws Throwable  {
      URI uRI0 = PropertyConverter.toURI(""S:O"");
}"
537,"    public static URI toURI(final Object value) throws ConversionException {
        if (value instanceof URI) {
            return (URI) value;
        }
        if (!(value instanceof String)) {
            throw new ConversionException(""The value "" + value + "" can't be converted to an URI"");
        }
        try {
            return new URI((String) value);
        } catch (final URISyntaxException e) {
            throw new ConversionException(""The value "" + value + "" can't be converted to an URI"", e);
        }
    }","  public void test11()  throws Throwable  {
      URI uRI0 = PropertyConverter.toURI("""");
}"
538,"    public static Short toShort(final Object value) throws ConversionException {
        final Number n = toNumber(value, Short.class);
        if (n instanceof Short) {
            return (Short) n;
        }
        return n.shortValue();
    }","  public void test12()  throws Throwable  {
      Long long0 = new Long((-1001L));
      Short short0 = PropertyConverter.toShort(long0);
}"
539,"    public static Short toShort(final Object value) throws ConversionException {
        final Number n = toNumber(value, Short.class);
        if (n instanceof Short) {
            return (Short) n;
        }
        return n.shortValue();
    }","  public void test13()  throws Throwable  {
      Long long0 = new Long(902L);
      BigDecimal bigDecimal0 = PropertyConverter.toBigDecimal(long0);
      Short short0 = PropertyConverter.toShort(bigDecimal0);
}"
540,"    public static Pattern toPattern(final Object value) throws ConversionException {
        if (value instanceof Pattern) {
            return (Pattern) value;
        }
        if (!(value instanceof String)) {
            throw new ConversionException(""The value "" + value + "" can't be converted to a Pattern"");
        }
        try {
            return Pattern.compile((String) value);
        } catch (final PatternSyntaxException e) {
            throw new ConversionException(""The value "" + value + "" can't be converted to a Pattern"", e);
        }
    }","  public void test14()  throws Throwable  {
      Pattern pattern0 = Pattern.compile(""zpP"", 4174);
      Pattern pattern1 = PropertyConverter.toPattern(pattern0);
}"
541,"    public static Pattern toPattern(final Object value) throws ConversionException {
        if (value instanceof Pattern) {
            return (Pattern) value;
        }
        if (!(value instanceof String)) {
            throw new ConversionException(""The value "" + value + "" can't be converted to a Pattern"");
        }
        try {
            return Pattern.compile((String) value);
        } catch (final PatternSyntaxException e) {
            throw new ConversionException(""The value "" + value + "" can't be converted to a Pattern"", e);
        }
    }","  public void test15()  throws Throwable  {
      Pattern pattern0 = Pattern.compile(""`x=}]5tAZ&b;@e"", (-1));
      Pattern pattern1 = PropertyConverter.toPattern(pattern0);
}"
542,"    static Number toNumber(final Object value, final Class<?> targetClass) throws ConversionException {
        if (value instanceof Number) {
            return (Number) value;
        }
        final String str = value.toString();
        if (str.startsWith(HEX_PREFIX)) {
            try {
                return new BigInteger(str.substring(HEX_PREFIX.length()), HEX_RADIX);
            } catch (final NumberFormatException nex) {
                throw new ConversionException(""Could not convert "" + str + "" to "" + targetClass.getName() + ""! Invalid hex number."", nex);
            }
        }

        if (str.startsWith(BIN_PREFIX)) {
            try {
                return new BigInteger(str.substring(BIN_PREFIX.length()), BIN_RADIX);
            } catch (final NumberFormatException nex) {
                throw new ConversionException(""Could not convert "" + str + "" to "" + targetClass.getName() + ""! Invalid binary number."", nex);
            }
        }

        try {
            final Constructor<?> constr = targetClass.getConstructor(CONSTR_ARGS);
            return (Number) constr.newInstance(str);
        } catch (final InvocationTargetException itex) {
            throw new ConversionException(""Could not convert "" + str + "" to "" + targetClass.getName(), itex.getTargetException());
        } catch (final Exception ex) {
            // Treat all possible exceptions the same way
            throw new ConversionException(""Conversion error when trying to convert "" + str + "" to "" + targetClass.getName(), ex);
        }
    }","  public void test16()  throws Throwable  {
      Long long0 = new Long(0L);
      Class<Locale> class0 = Locale.class;
      Number number0 = PropertyConverter.toNumber(long0, class0);
}"
543,"    static Number toNumber(final Object value, final Class<?> targetClass) throws ConversionException {
        if (value instanceof Number) {
            return (Number) value;
        }
        final String str = value.toString();
        if (str.startsWith(HEX_PREFIX)) {
            try {
                return new BigInteger(str.substring(HEX_PREFIX.length()), HEX_RADIX);
            } catch (final NumberFormatException nex) {
                throw new ConversionException(""Could not convert "" + str + "" to "" + targetClass.getName() + ""! Invalid hex number."", nex);
            }
        }

        if (str.startsWith(BIN_PREFIX)) {
            try {
                return new BigInteger(str.substring(BIN_PREFIX.length()), BIN_RADIX);
            } catch (final NumberFormatException nex) {
                throw new ConversionException(""Could not convert "" + str + "" to "" + targetClass.getName() + ""! Invalid binary number."", nex);
            }
        }

        try {
            final Constructor<?> constr = targetClass.getConstructor(CONSTR_ARGS);
            return (Number) constr.newInstance(str);
        } catch (final InvocationTargetException itex) {
            throw new ConversionException(""Could not convert "" + str + "" to "" + targetClass.getName(), itex.getTargetException());
        } catch (final Exception ex) {
            // Treat all possible exceptions the same way
            throw new ConversionException(""Conversion error when trying to convert "" + str + "" to "" + targetClass.getName(), ex);
        }
    }","  public void test17()  throws Throwable  {
      Float float0 = new Float(0.75F);
      Class<Integer> class0 = Integer.class;
      Number number0 = PropertyConverter.toNumber(float0, class0);
}"
544,"    static Number toNumber(final Object value, final Class<?> targetClass) throws ConversionException {
        if (value instanceof Number) {
            return (Number) value;
        }
        final String str = value.toString();
        if (str.startsWith(HEX_PREFIX)) {
            try {
                return new BigInteger(str.substring(HEX_PREFIX.length()), HEX_RADIX);
            } catch (final NumberFormatException nex) {
                throw new ConversionException(""Could not convert "" + str + "" to "" + targetClass.getName() + ""! Invalid hex number."", nex);
            }
        }

        if (str.startsWith(BIN_PREFIX)) {
            try {
                return new BigInteger(str.substring(BIN_PREFIX.length()), BIN_RADIX);
            } catch (final NumberFormatException nex) {
                throw new ConversionException(""Could not convert "" + str + "" to "" + targetClass.getName() + ""! Invalid binary number."", nex);
            }
        }

        try {
            final Constructor<?> constr = targetClass.getConstructor(CONSTR_ARGS);
            return (Number) constr.newInstance(str);
        } catch (final InvocationTargetException itex) {
            throw new ConversionException(""Could not convert "" + str + "" to "" + targetClass.getName(), itex.getTargetException());
        } catch (final Exception ex) {
            // Treat all possible exceptions the same way
            throw new ConversionException(""Conversion error when trying to convert "" + str + "" to "" + targetClass.getName(), ex);
        }
    }","  public void test18()  throws Throwable  {
      Long long0 = new Long(137438953504L);
      Class<NodeNameMatchers> class0 = NodeNameMatchers.class;
      Number number0 = PropertyConverter.toNumber(long0, class0);
}"
545,"    static Number toNumber(final Object value, final Class<?> targetClass) throws ConversionException {
        if (value instanceof Number) {
            return (Number) value;
        }
        final String str = value.toString();
        if (str.startsWith(HEX_PREFIX)) {
            try {
                return new BigInteger(str.substring(HEX_PREFIX.length()), HEX_RADIX);
            } catch (final NumberFormatException nex) {
                throw new ConversionException(""Could not convert "" + str + "" to "" + targetClass.getName() + ""! Invalid hex number."", nex);
            }
        }

        if (str.startsWith(BIN_PREFIX)) {
            try {
                return new BigInteger(str.substring(BIN_PREFIX.length()), BIN_RADIX);
            } catch (final NumberFormatException nex) {
                throw new ConversionException(""Could not convert "" + str + "" to "" + targetClass.getName() + ""! Invalid binary number."", nex);
            }
        }

        try {
            final Constructor<?> constr = targetClass.getConstructor(CONSTR_ARGS);
            return (Number) constr.newInstance(str);
        } catch (final InvocationTargetException itex) {
            throw new ConversionException(""Could not convert "" + str + "" to "" + targetClass.getName(), itex.getTargetException());
        } catch (final Exception ex) {
            // Treat all possible exceptions the same way
            throw new ConversionException(""Conversion error when trying to convert "" + str + "" to "" + targetClass.getName(), ex);
        }
    }","  public void test19()  throws Throwable  {
      Double double0 = new Double((-1035.4472665524));
      Class<URL> class0 = URL.class;
      Number number0 = PropertyConverter.toNumber(double0, class0);
}"
546,"    public static Long toLong(final Object value) throws ConversionException {
        final Number n = toNumber(value, Long.class);
        if (n instanceof Long) {
            return (Long) n;
        }
        return n.longValue();
    }","  public void test20()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-60));
      Long long0 = PropertyConverter.toLong(byte0);
}"
547,"    public static Integer toInteger(final Object value) throws ConversionException {
        final Number n = toNumber(value, Integer.class);
        if (n instanceof Integer) {
            return (Integer) n;
        }
        return n.intValue();
    }","  public void test21()  throws Throwable  {
      Long long0 = new Long(0L);
      Integer integer0 = PropertyConverter.toInteger(long0);
}"
548,"    public static Integer toInteger(final Object value) throws ConversionException {
        final Number n = toNumber(value, Integer.class);
        if (n instanceof Integer) {
            return (Integer) n;
        }
        return n.intValue();
    }","  public void test22()  throws Throwable  {
      Short short0 = new Short((short) (-4));
      Double double0 = PropertyConverter.toDouble(short0);
      Float float0 = PropertyConverter.toFloat(double0);
      Integer integer0 = PropertyConverter.toInteger(float0);
}"
549,"    static InetAddress toInetAddress(final Object value) throws ConversionException {
        if (value instanceof InetAddress) {
            return (InetAddress) value;
        }
        if (!(value instanceof String)) {
            throw new ConversionException(""The value "" + value + "" can't be converted to a InetAddress"");
        }
        try {
            return InetAddress.getByName((String) value);
        } catch (final UnknownHostException e) {
            throw new ConversionException(""The value "" + value + "" can't be converted to a InetAddress"", e);
        }
    }","  public void test23()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.getLoopbackAddress();
      InetAddress inetAddress1 = PropertyConverter.toInetAddress(inetAddress0);
}"
550,"    public static Float toFloat(final Object value) throws ConversionException {
        final Number n = toNumber(value, Float.class);
        if (n instanceof Float) {
            return (Float) n;
        }
        return Float.valueOf(n.floatValue());
    }","  public void test24()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      Float float0 = PropertyConverter.toFloat(bigInteger0);
}"
551,"    public static Float toFloat(final Object value) throws ConversionException {
        final Number n = toNumber(value, Float.class);
        if (n instanceof Float) {
            return (Float) n;
        }
        return Float.valueOf(n.floatValue());
    }","  public void test25()  throws Throwable  {
      Integer integer0 = new Integer((-961));
      Float float0 = PropertyConverter.toFloat(integer0);
}"
552,"    public static Float toFloat(final Object value) throws ConversionException {
        final Number n = toNumber(value, Float.class);
        if (n instanceof Float) {
            return (Float) n;
        }
        return Float.valueOf(n.floatValue());
    }","  public void test26()  throws Throwable  {
      Float float0 = new Float(Double.NaN);
      Float float1 = PropertyConverter.toFloat(float0);
}"
553,"    public static File toFile(final Object value) throws ConversionException {
        if (value instanceof File) {
            return (File) value;
        }
        if (value instanceof Path) {
            return ((Path) value).toFile();
        }
        if (value instanceof String) {
            return new File((String) value);
        }
        throw new ConversionException(""The value "" + value + "" can't be converted to a File"");
    }","  public void test27()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("" can't bK converted to a File"");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "" can't bK converted to a File"");
      File file0 = PropertyConverter.toFile("" can't bK converted to a File"");
}"
554,"    public static File toFile(final Object value) throws ConversionException {
        if (value instanceof File) {
            return (File) value;
        }
        if (value instanceof Path) {
            return ((Path) value).toFile();
        }
        if (value instanceof String) {
            return new File((String) value);
        }
        throw new ConversionException(""The value "" + value + "" can't be converted to a File"");
    }","  public void test28()  throws Throwable  {
      File file0 = PropertyConverter.toFile("".X00n$<pJwYay#b[V"");
}"
555,"    public static File toFile(final Object value) throws ConversionException {
        if (value instanceof File) {
            return (File) value;
        }
        if (value instanceof Path) {
            return ((Path) value).toFile();
        }
        if (value instanceof String) {
            return new File((String) value);
        }
        throw new ConversionException(""The value "" + value + "" can't be converted to a File"");
    }","  public void test29()  throws Throwable  {
      MockFile mockFile0 = new MockFile("" can't bK converted to a File"", "" can't bK converted to a File"");
      File file0 = PropertyConverter.toFile(mockFile0);
}"
556,"    public static File toFile(final Object value) throws ConversionException {
        if (value instanceof File) {
            return (File) value;
        }
        if (value instanceof Path) {
            return ((Path) value).toFile();
        }
        if (value instanceof String) {
            return new File((String) value);
        }
        throw new ConversionException(""The value "" + value + "" can't be converted to a File"");
    }","  public void test30()  throws Throwable  {
      File file0 = PropertyConverter.toFile("""");
}"
557,"    public static Double toDouble(final Object value) throws ConversionException {
        final Number n = toNumber(value, Double.class);
        if (n instanceof Double) {
            return (Double) n;
        }
        return Double.valueOf(n.doubleValue());
    }","  public void test31()  throws Throwable  {
      Short short0 = new Short((short)0);
      Long long0 = PropertyConverter.toLong(short0);
      Double double0 = PropertyConverter.toDouble(long0);
}"
558,"    public static Double toDouble(final Object value) throws ConversionException {
        final Number n = toNumber(value, Double.class);
        if (n instanceof Double) {
            return (Double) n;
        }
        return Double.valueOf(n.doubleValue());
    }","  public void test32()  throws Throwable  {
      Double double0 = new Double((-1035.4472665524));
      Double double1 = PropertyConverter.toDouble(double0);
}"
559,"    public static Color toColor(final Object value) throws ConversionException {
        if (value instanceof Color) {
            return (Color) value;
        }
        if (!(value instanceof String) || StringUtils.isBlank((String) value)) {
            throw new ConversionException(""The value "" + value + "" can't be converted to a Color"");
        }
        String color = ((String) value).trim();

        final int[] components = new int[3];

        // check the size of the string
        final int minlength = components.length * 2;
        if (color.length() < minlength) {
            throw new ConversionException(""The value "" + value + "" can't be converted to a Color"");
        }

        // remove the leading #
        if (color.startsWith(""#"")) {
            color = color.substring(1);
        }

        try {
            // parse the components
            for (int i = 0; i < components.length; i++) {
                components[i] = Integer.parseInt(color.substring(2 * i, 2 * i + 2), HEX_RADIX);
            }

            // parse the transparency
            final int alpha;
            if (color.length() >= minlength + 2) {
                alpha = Integer.parseInt(color.substring(minlength, minlength + 2), HEX_RADIX);
            } else {
                alpha = Color.black.getAlpha();
            }

            return new Color(components[0], components[1], components[2], alpha);
        } catch (final Exception e) {
            throw new ConversionException(""The value "" + value + "" can't be converted to a Color"", e);
        }
    }","  public void test33()  throws Throwable  {
      Color color0 = Color.red;
      Color color1 = PropertyConverter.toColor(color0);
}"
560,"    public static Color toColor(final Object value) throws ConversionException {
        if (value instanceof Color) {
            return (Color) value;
        }
        if (!(value instanceof String) || StringUtils.isBlank((String) value)) {
            throw new ConversionException(""The value "" + value + "" can't be converted to a Color"");
        }
        String color = ((String) value).trim();

        final int[] components = new int[3];

        // check the size of the string
        final int minlength = components.length * 2;
        if (color.length() < minlength) {
            throw new ConversionException(""The value "" + value + "" can't be converted to a Color"");
        }

        // remove the leading #
        if (color.startsWith(""#"")) {
            color = color.substring(1);
        }

        try {
            // parse the components
            for (int i = 0; i < components.length; i++) {
                components[i] = Integer.parseInt(color.substring(2 * i, 2 * i + 2), HEX_RADIX);
            }

            // parse the transparency
            final int alpha;
            if (color.length() >= minlength + 2) {
                alpha = Integer.parseInt(color.substring(minlength, minlength + 2), HEX_RADIX);
            } else {
                alpha = Color.black.getAlpha();
            }

            return new Color(components[0], components[1], components[2], alpha);
        } catch (final Exception e) {
            throw new ConversionException(""The value "" + value + "" can't be converted to a Color"", e);
        }
    }","  public void test34()  throws Throwable  {
      Color color0 = Color.YELLOW;
      Color color1 = PropertyConverter.toColor(color0);
}"
561,"    public static Calendar toCalendar(final Object value, final String format) throws ConversionException {
        if (value instanceof Calendar) {
            return (Calendar) value;
        }
        if (value instanceof Date) {
            final Calendar calendar = Calendar.getInstance();
            calendar.setTime((Date) value);
            return calendar;
        }
        if (!(value instanceof String)) {
            throw new ConversionException(""The value "" + value + "" can't be converted to a Calendar"");
        }
        try {
            final Calendar calendar = Calendar.getInstance();
            calendar.setTime(new SimpleDateFormat(format).parse((String) value));
            return calendar;
        } catch (final ParseException e) {
            throw new ConversionException(""The value "" + value + "" can't be converted to a Calendar"", e);
        }
    }","  public void test35()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-23), 1793, (-2048472060));
      mockGregorianCalendar0.setMinimalDaysInFirstWeek((-2048472060));
      Calendar calendar0 = PropertyConverter.toCalendar(mockGregorianCalendar0, ""0xjava.util.ArrayList@0000000001"");
}"
562,"    public static Calendar toCalendar(final Object value, final String format) throws ConversionException {
        if (value instanceof Calendar) {
            return (Calendar) value;
        }
        if (value instanceof Date) {
            final Calendar calendar = Calendar.getInstance();
            calendar.setTime((Date) value);
            return calendar;
        }
        if (!(value instanceof String)) {
            throw new ConversionException(""The value "" + value + "" can't be converted to a Calendar"");
        }
        try {
            final Calendar calendar = Calendar.getInstance();
            calendar.setTime(new SimpleDateFormat(format).parse((String) value));
            return calendar;
        } catch (final ParseException e) {
            throw new ConversionException(""The value "" + value + "" can't be converted to a Calendar"", e);
        }
    }","  public void test36()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(70, (-1579), (-1579));
      mockGregorianCalendar0.setFirstDayOfWeek((-1579));
      Calendar calendar0 = PropertyConverter.toCalendar(mockGregorianCalendar0, "" can't be converted to a "");
}"
563,"    public static Byte toByte(final Object value) throws ConversionException {
        final Number n = toNumber(value, Byte.class);
        if (n instanceof Byte) {
            return (Byte) n;
        }
        return n.byteValue();
    }","  public void test37()  throws Throwable  {
      Byte byte0 = new Byte((byte)0);
      Byte byte1 = PropertyConverter.toByte(byte0);
}"
564,"    public static Boolean toBoolean(final Object value) throws ConversionException {
        if (value instanceof Boolean) {
            return (Boolean) value;
        }
        if (!(value instanceof String)) {
            throw new ConversionException(""The value "" + value + "" can't be converted to a Boolean object"");
        }
        final Boolean b = BooleanUtils.toBooleanObject((String) value);
        if (b == null) {
            throw new ConversionException(""The value "" + value + "" can't be converted to a Boolean object"");
        }
        return b;
    }","  public void test38()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      Boolean boolean1 = PropertyConverter.toBoolean(boolean0);
}"
565,"    public static BigInteger toBigInteger(final Object value) throws ConversionException {
        final Number n = toNumber(value, BigInteger.class);
        if (n instanceof BigInteger) {
            return (BigInteger) n;
        }
        return BigInteger.valueOf(n.longValue());
    }","  public void test39()  throws Throwable  {
      Double double0 = new Double(0.0);
      BigInteger bigInteger0 = PropertyConverter.toBigInteger(double0);
}"
566,"    public static BigInteger toBigInteger(final Object value) throws ConversionException {
        final Number n = toNumber(value, BigInteger.class);
        if (n instanceof BigInteger) {
            return (BigInteger) n;
        }
        return BigInteger.valueOf(n.longValue());
    }","  public void test40()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-96));
      BigInteger bigInteger0 = PropertyConverter.toBigInteger(byte0);
}"
567,"    public static BigDecimal toBigDecimal(final Object value) throws ConversionException {
        final Number n = toNumber(value, BigDecimal.class);
        if (n instanceof BigDecimal) {
            return (BigDecimal) n;
        }
        return new BigDecimal(n.doubleValue());
    }","  public void test41()  throws Throwable  {
      Long long0 = new Long((-1988L));
      BigDecimal bigDecimal0 = PropertyConverter.toBigDecimal(long0);
}"
568,"    static boolean isEnum(final Class<?> cls) {
        return cls.isEnum();
    }","  public void test42()  throws Throwable  {
      Class<BuilderConfigurationWrapperFactory.EventSourceSupport> class0 = BuilderConfigurationWrapperFactory.EventSourceSupport.class;
      boolean boolean0 = PropertyConverter.isEnum(class0);
}"
569,"    public static Short toShort(final Object value) throws ConversionException {
        final Number n = toNumber(value, Short.class);
        if (n instanceof Short) {
            return (Short) n;
        }
        return n.shortValue();
    }","  public void test43()  throws Throwable  {
      MockFile mockFile0 = new MockFile("""", """");
      URL uRL0 = mockFile0.toURL();
      try { 
        PropertyConverter.toShort(uRL0);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // Could not convert java.net.URL@0000000001 to java.lang.Short
         //
         verifyException(""org.apache.commons.configuration2.convert.PropertyConverter"", e);
      }
  }"
570,"    public static Short toShort(final Object value) throws ConversionException {
        final Number n = toNumber(value, Short.class);
        if (n instanceof Short) {
            return (Short) n;
        }
        return n.shortValue();
    }","  public void test44()  throws Throwable  {
      // Undeclared exception!
      try { 
        PropertyConverter.toShort((Object) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.evosuite.runtime.System"", e);
      }
  }"
571,"    static Number toNumber(final Object value, final Class<?> targetClass) throws ConversionException {
        if (value instanceof Number) {
            return (Number) value;
        }
        final String str = value.toString();
        if (str.startsWith(HEX_PREFIX)) {
            try {
                return new BigInteger(str.substring(HEX_PREFIX.length()), HEX_RADIX);
            } catch (final NumberFormatException nex) {
                throw new ConversionException(""Could not convert "" + str + "" to "" + targetClass.getName() + ""! Invalid hex number."", nex);
            }
        }

        if (str.startsWith(BIN_PREFIX)) {
            try {
                return new BigInteger(str.substring(BIN_PREFIX.length()), BIN_RADIX);
            } catch (final NumberFormatException nex) {
                throw new ConversionException(""Could not convert "" + str + "" to "" + targetClass.getName() + ""! Invalid binary number."", nex);
            }
        }

        try {
            final Constructor<?> constr = targetClass.getConstructor(CONSTR_ARGS);
            return (Number) constr.newInstance(str);
        } catch (final InvocationTargetException itex) {
            throw new ConversionException(""Could not convert "" + str + "" to "" + targetClass.getName(), itex.getTargetException());
        } catch (final Exception ex) {
            // Treat all possible exceptions the same way
            throw new ConversionException(""Conversion error when trying to convert "" + str + "" to "" + targetClass.getName(), ex);
        }
    }","  public void test45()  throws Throwable  {
      Class<Float> class0 = Float.class;
      // Undeclared exception!
      try { 
        PropertyConverter.toNumber((Object) null, class0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.evosuite.runtime.System"", e);
      }
  }"
572,"    public static Long toLong(final Object value) throws ConversionException {
        final Number n = toNumber(value, Long.class);
        if (n instanceof Long) {
            return (Long) n;
        }
        return n.longValue();
    }","  public void test46()  throws Throwable  {
      File file0 = PropertyConverter.toFile("" can't bK converted to a File"");
      try { 
        PropertyConverter.toLong(file0);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // Could not convert org.evosuite.runtime.mock.java.io.MockFile@0000000001 to java.lang.Long
         //
         verifyException(""org.apache.commons.configuration2.convert.PropertyConverter"", e);
      }
  }"
573,"    public static Long toLong(final Object value) throws ConversionException {
        final Number n = toNumber(value, Long.class);
        if (n instanceof Long) {
            return (Long) n;
        }
        return n.longValue();
    }","  public void test47()  throws Throwable  {
      // Undeclared exception!
      try { 
        PropertyConverter.toLong((Object) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.evosuite.runtime.System"", e);
      }
  }"
574,"    static Object toInternetAddress(final Object value, final String targetClassName) throws ConversionException {
        if (value.getClass().getName().equals(targetClassName)) {
            return value;
        }
        if (!(value instanceof String)) {
            throw new ConversionException(""The value "" + value + "" can't be converted to an InternetAddress"");
        }
        try {
            final Constructor<?> ctor = Class.forName(targetClassName).getConstructor(String.class);
            return ctor.newInstance(value);
        } catch (final Exception e) {
            throw new ConversionException(""The value "" + value + "" can't be converted to an InternetAddress"", e);
        }
    }","  public void test48()  throws Throwable  {
      // Undeclared exception!
      try { 
        PropertyConverter.toInternetAddress((Object) null, ""k"");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.configuration2.convert.PropertyConverter"", e);
      }
  }"
575,"    public static Integer toInteger(final Object value) throws ConversionException {
        final Number n = toNumber(value, Integer.class);
        if (n instanceof Integer) {
            return (Integer) n;
        }
        return n.intValue();
    }","  public void test49()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      try { 
        PropertyConverter.toInteger(mockDate0);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // Could not convert org.evosuite.runtime.mock.java.util.MockDate@0000000001 to java.lang.Integer
         //
         verifyException(""org.apache.commons.configuration2.convert.PropertyConverter"", e);
      }
  }"
576,"    public static Integer toInteger(final Object value) throws ConversionException {
        final Number n = toNumber(value, Integer.class);
        if (n instanceof Integer) {
            return (Integer) n;
        }
        return n.intValue();
    }","  public void test50()  throws Throwable  {
      // Undeclared exception!
      try { 
        PropertyConverter.toInteger((Object) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.evosuite.runtime.System"", e);
      }
  }"
577,"    static InetAddress toInetAddress(final Object value) throws ConversionException {
        if (value instanceof InetAddress) {
            return (InetAddress) value;
        }
        if (!(value instanceof String)) {
            throw new ConversionException(""The value "" + value + "" can't be converted to a InetAddress"");
        }
        try {
            return InetAddress.getByName((String) value);
        } catch (final UnknownHostException e) {
            throw new ConversionException(""The value "" + value + "" can't be converted to a InetAddress"", e);
        }
    }","  public void test51()  throws Throwable  {
      Character character0 = Character.valueOf('\'');
      try { 
        PropertyConverter.toInetAddress(character0);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // The value ' can't be converted to a InetAddress
         //
         verifyException(""org.apache.commons.configuration2.convert.PropertyConverter"", e);
      }
  }"
578,"    public static Float toFloat(final Object value) throws ConversionException {
        final Number n = toNumber(value, Float.class);
        if (n instanceof Float) {
            return (Float) n;
        }
        return Float.valueOf(n.floatValue());
    }","  public void test52()  throws Throwable  {
      Character character0 = Character.valueOf('{');
      try { 
        PropertyConverter.toFloat(character0);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // Could not convert java.lang.Character@0000000001 to java.lang.Float
         //
         verifyException(""org.apache.commons.configuration2.convert.PropertyConverter"", e);
      }
  }"
579,"    public static Float toFloat(final Object value) throws ConversionException {
        final Number n = toNumber(value, Float.class);
        if (n instanceof Float) {
            return (Float) n;
        }
        return Float.valueOf(n.floatValue());
    }","  public void test53()  throws Throwable  {
      // Undeclared exception!
      try { 
        PropertyConverter.toFloat((Object) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.evosuite.runtime.System"", e);
      }
  }"
580,"    static <E extends Enum<E>> E toEnum(final Object value, final Class<E> cls) throws ConversionException {
        if (value.getClass().equals(cls)) {
            return cls.cast(value);
        }
        if (value instanceof String) {
            try {
                return Enum.valueOf(cls, (String) value);
            } catch (final Exception e) {
                throw new ConversionException(""The value "" + value + "" can't be converted to a "" + cls.getName());
            }
        }
        if (!(value instanceof Number)) {
            throw new ConversionException(""The value "" + value + "" can't be converted to a "" + cls.getName());
        }
        try {
            final E[] enumConstants = cls.getEnumConstants();
            return enumConstants[((Number) value).intValue()];
        } catch (final Exception e) {
            throw new ConversionException(""The value "" + value + "" can't be converted to a "" + cls.getName());
        }
    }","  public void test54()  throws Throwable  {
      Class<BuilderConfigurationWrapperFactory.EventSourceSupport> class0 = BuilderConfigurationWrapperFactory.EventSourceSupport.class;
      // Undeclared exception!
      try { 
        PropertyConverter.toEnum((Object) null, class0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.configuration2.convert.PropertyConverter"", e);
      }
  }"
581,"    public static Double toDouble(final Object value) throws ConversionException {
        final Number n = toNumber(value, Double.class);
        if (n instanceof Double) {
            return (Double) n;
        }
        return Double.valueOf(n.doubleValue());
    }","  public void test55()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      try { 
        PropertyConverter.toDouble(mockGregorianCalendar0);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // Could not convert org.evosuite.runtime.mock.java.util.MockGregorianCalendar@0000000001 to java.lang.Double
         //
         verifyException(""org.apache.commons.configuration2.convert.PropertyConverter"", e);
      }
  }"
582,"    public static Double toDouble(final Object value) throws ConversionException {
        final Number n = toNumber(value, Double.class);
        if (n instanceof Double) {
            return (Double) n;
        }
        return Double.valueOf(n.doubleValue());
    }","  public void test56()  throws Throwable  {
      // Undeclared exception!
      try { 
        PropertyConverter.toDouble((Object) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.evosuite.runtime.System"", e);
      }
  }"
583,"    public static Date toDate(final Object value, final String format) throws ConversionException {
        if (value instanceof Date) {
            return (Date) value;
        }
        if (value instanceof Calendar) {
            return ((Calendar) value).getTime();
        }
        if (!(value instanceof String)) {
            throw new ConversionException(""The value "" + value + "" can't be converted to a Date"");
        }
        try {
            return new SimpleDateFormat(format).parse((String) value);
        } catch (final ParseException e) {
            throw new ConversionException(""The value "" + value + "" can't be converted to a Date"", e);
        }
    }","  public void test57()  throws Throwable  {
      // Undeclared exception!
      try { 
        PropertyConverter.toDate("" can't be converted to a File"", "" can't be converted to a File"");
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern character 'c'
         //
         verifyException(""java.text.SimpleDateFormat"", e);
      }
  }"
584,"    public static Calendar toCalendar(final Object value, final String format) throws ConversionException {
        if (value instanceof Calendar) {
            return (Calendar) value;
        }
        if (value instanceof Date) {
            final Calendar calendar = Calendar.getInstance();
            calendar.setTime((Date) value);
            return calendar;
        }
        if (!(value instanceof String)) {
            throw new ConversionException(""The value "" + value + "" can't be converted to a Calendar"");
        }
        try {
            final Calendar calendar = Calendar.getInstance();
            calendar.setTime(new SimpleDateFormat(format).parse((String) value));
            return calendar;
        } catch (final ParseException e) {
            throw new ConversionException(""The value "" + value + "" can't be converted to a Calendar"", e);
        }
    }","  public void test58()  throws Throwable  {
      // Undeclared exception!
      try { 
        PropertyConverter.toCalendar(""Armenia (``Trn!\""Q&P)"", ""Armenia (``Trn!\""Q&P)"");
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern character 'A'
         //
         verifyException(""java.text.SimpleDateFormat"", e);
      }
  }"
585,"    public static Byte toByte(final Object value) throws ConversionException {
        final Number n = toNumber(value, Byte.class);
        if (n instanceof Byte) {
            return (Byte) n;
        }
        return n.byteValue();
    }","  public void test59()  throws Throwable  {
      URI uRI0 = MockURI.create(""jLblu-~aLoujadx1@f"");
      try { 
        PropertyConverter.toByte(uRI0);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // Could not convert java.net.URI@0000000001 to java.lang.Byte
         //
         verifyException(""org.apache.commons.configuration2.convert.PropertyConverter"", e);
      }
  }"
586,"    public static Byte toByte(final Object value) throws ConversionException {
        final Number n = toNumber(value, Byte.class);
        if (n instanceof Byte) {
            return (Byte) n;
        }
        return n.byteValue();
    }","  public void test60()  throws Throwable  {
      // Undeclared exception!
      try { 
        PropertyConverter.toByte((Object) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.evosuite.runtime.System"", e);
      }
  }"
587,"    public static BigInteger toBigInteger(final Object value) throws ConversionException {
        final Number n = toNumber(value, BigInteger.class);
        if (n instanceof BigInteger) {
            return (BigInteger) n;
        }
        return BigInteger.valueOf(n.longValue());
    }","  public void test61()  throws Throwable  {
      Locale locale0 = Locale.GERMAN;
      try { 
        PropertyConverter.toBigInteger(locale0);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // Could not convert java.util.Locale@0000000001 to java.math.BigInteger
         //
         verifyException(""org.apache.commons.configuration2.convert.PropertyConverter"", e);
      }
  }"
588,"    public static BigInteger toBigInteger(final Object value) throws ConversionException {
        final Number n = toNumber(value, BigInteger.class);
        if (n instanceof BigInteger) {
            return (BigInteger) n;
        }
        return BigInteger.valueOf(n.longValue());
    }","  public void test62()  throws Throwable  {
      // Undeclared exception!
      try { 
        PropertyConverter.toBigInteger((Object) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.evosuite.runtime.System"", e);
      }
  }"
589,"    public static BigDecimal toBigDecimal(final Object value) throws ConversionException {
        final Number n = toNumber(value, BigDecimal.class);
        if (n instanceof BigDecimal) {
            return (BigDecimal) n;
        }
        return new BigDecimal(n.doubleValue());
    }","  public void test63()  throws Throwable  {
      Boolean boolean0 = new Boolean(true);
      try { 
        PropertyConverter.toBigDecimal(boolean0);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // Could not convert java.lang.Boolean@0000000001 to java.math.BigDecimal
         //
         verifyException(""org.apache.commons.configuration2.convert.PropertyConverter"", e);
      }
  }"
590,"    public static BigDecimal toBigDecimal(final Object value) throws ConversionException {
        final Number n = toNumber(value, BigDecimal.class);
        if (n instanceof BigDecimal) {
            return (BigDecimal) n;
        }
        return new BigDecimal(n.doubleValue());
    }","  public void test64()  throws Throwable  {
      // Undeclared exception!
      try { 
        PropertyConverter.toBigDecimal((Object) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.evosuite.runtime.System"", e);
      }
  }"
591,"    public static Object to(final Class<?> cls, final Object value, final DefaultConversionHandler convHandler) throws ConversionException {
        if (cls.isInstance(value)) {
            return value; // no conversion needed
        }

        if (String.class.equals(cls)) {
            return String.valueOf(value);
        }
        if (Boolean.class.equals(cls) || Boolean.TYPE.equals(cls)) {
            return toBoolean(value);
        }
        if (Character.class.equals(cls) || Character.TYPE.equals(cls)) {
            return toCharacter(value);
        }
        if (Number.class.isAssignableFrom(cls) || cls.isPrimitive()) {
            if (Integer.class.equals(cls) || Integer.TYPE.equals(cls)) {
                return toInteger(value);
            }
            if (Long.class.equals(cls) || Long.TYPE.equals(cls)) {
                return toLong(value);
            }
            if (Byte.class.equals(cls) || Byte.TYPE.equals(cls)) {
                return toByte(value);
            }
            if (Short.class.equals(cls) || Short.TYPE.equals(cls)) {
                return toShort(value);
            }
            if (Float.class.equals(cls) || Float.TYPE.equals(cls)) {
                return toFloat(value);
            }
            if (Double.class.equals(cls) || Double.TYPE.equals(cls)) {
                return toDouble(value);
            }
            if (BigInteger.class.equals(cls)) {
                return toBigInteger(value);
            }
            if (BigDecimal.class.equals(cls)) {
                return toBigDecimal(value);
            }
        } else if (Date.class.equals(cls)) {
            return toDate(value, convHandler.getDateFormat());
        } else if (Calendar.class.equals(cls)) {
            return toCalendar(value, convHandler.getDateFormat());
        } else if (File.class.equals(cls)) {
            return toFile(value);
        } else if (Path.class.equals(cls)) {
            return toPath(value);
        } else if (URI.class.equals(cls)) {
            return toURI(value);
        } else if (URL.class.equals(cls)) {
            return toURL(value);
        } else if (Pattern.class.equals(cls)) {
            return toPattern(value);
        } else if (Locale.class.equals(cls)) {
            return toLocale(value);
        } else if (isEnum(cls)) {
            return convertToEnum(cls, value);
        } else if (Color.class.equals(cls)) {
            return toColor(value);
        } else if (cls.getName().equals(INTERNET_ADDRESS_CLASSNAME_JAVAX)) {
            // javamail-1.* With javax.mail.* namespace.
            return toInternetAddress(value, INTERNET_ADDRESS_CLASSNAME_JAVAX);
        } else if (cls.getName().equals(INTERNET_ADDRESS_CLASSNAME_JAKARTA)) {
            // javamail-2.0+, with jakarta.mail.* namespace.
            return toInternetAddress(value, INTERNET_ADDRESS_CLASSNAME_JAKARTA);
        } else if (InetAddress.class.isAssignableFrom(cls)) {
            return toInetAddress(value);
        } else if (Duration.class.equals(cls)) {
            return toDuration(value);
        }

        throw new ConversionException(""The value '"" + value + ""' ("" + value.getClass() + "")"" + "" can't be converted to a "" + cls.getName() + "" object"");
    }","  public void test65()  throws Throwable  {
      Class<Byte> class0 = Byte.TYPE;
      DefaultConversionHandler defaultConversionHandler0 = new DefaultConversionHandler();
      // Undeclared exception!
      try { 
        PropertyConverter.to(class0, (Object) null, defaultConversionHandler0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.evosuite.runtime.System"", e);
      }
  }"
592,"    static boolean isEnum(final Class<?> cls) {
        return cls.isEnum();
    }","  public void test66()  throws Throwable  {
      // Undeclared exception!
      try { 
        PropertyConverter.isEnum((Class<?>) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.configuration2.convert.PropertyConverter"", e);
      }
  }"
593,"    public static Calendar toCalendar(final Object value, final String format) throws ConversionException {
        if (value instanceof Calendar) {
            return (Calendar) value;
        }
        if (value instanceof Date) {
            final Calendar calendar = Calendar.getInstance();
            calendar.setTime((Date) value);
            return calendar;
        }
        if (!(value instanceof String)) {
            throw new ConversionException(""The value "" + value + "" can't be converted to a Calendar"");
        }
        try {
            final Calendar calendar = Calendar.getInstance();
            calendar.setTime(new SimpleDateFormat(format).parse((String) value));
            return calendar;
        } catch (final ParseException e) {
            throw new ConversionException(""The value "" + value + "" can't be converted to a Calendar"", e);
        }
    }","  public void test67()  throws Throwable  {
      Pattern pattern0 = Pattern.compile(""L?V`2`G7Xa9c"");
      try { 
        PropertyConverter.toCalendar(pattern0, ""L?V`2`G7Xa9c"");
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // The value L?V`2`G7Xa9c can't be converted to a Calendar
         //
         verifyException(""org.apache.commons.configuration2.convert.PropertyConverter"", e);
      }
  }"
594,"    public static Date toDate(final Object value, final String format) throws ConversionException {
        if (value instanceof Date) {
            return (Date) value;
        }
        if (value instanceof Calendar) {
            return ((Calendar) value).getTime();
        }
        if (!(value instanceof String)) {
            throw new ConversionException(""The value "" + value + "" can't be converted to a Date"");
        }
        try {
            return new SimpleDateFormat(format).parse((String) value);
        } catch (final ParseException e) {
            throw new ConversionException(""The value "" + value + "" can't be converted to a Date"", e);
        }
    }","  public void test68()  throws Throwable  {
      try { 
        PropertyConverter.toDate((Object) null, """");
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // The value null can't be converted to a Date
         //
         verifyException(""org.apache.commons.configuration2.convert.PropertyConverter"", e);
      }
  }"
595,"    public static Color toColor(final Object value) throws ConversionException {
        if (value instanceof Color) {
            return (Color) value;
        }
        if (!(value instanceof String) || StringUtils.isBlank((String) value)) {
            throw new ConversionException(""The value "" + value + "" can't be converted to a Color"");
        }
        String color = ((String) value).trim();

        final int[] components = new int[3];

        // check the size of the string
        final int minlength = components.length * 2;
        if (color.length() < minlength) {
            throw new ConversionException(""The value "" + value + "" can't be converted to a Color"");
        }

        // remove the leading #
        if (color.startsWith(""#"")) {
            color = color.substring(1);
        }

        try {
            // parse the components
            for (int i = 0; i < components.length; i++) {
                components[i] = Integer.parseInt(color.substring(2 * i, 2 * i + 2), HEX_RADIX);
            }

            // parse the transparency
            final int alpha;
            if (color.length() >= minlength + 2) {
                alpha = Integer.parseInt(color.substring(minlength, minlength + 2), HEX_RADIX);
            } else {
                alpha = Color.black.getAlpha();
            }

            return new Color(components[0], components[1], components[2], alpha);
        } catch (final Exception e) {
            throw new ConversionException(""The value "" + value + "" can't be converted to a Color"", e);
        }
    }","  public void test69()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      try { 
        PropertyConverter.toColor(boolean0);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // The value false can't be converted to a Color
         //
         verifyException(""org.apache.commons.configuration2.convert.PropertyConverter"", e);
      }
  }"
596,"    public static Locale toLocale(final Object value) throws ConversionException {
        if (value instanceof Locale) {
            return (Locale) value;
        }
        if (!(value instanceof String)) {
            throw new ConversionException(""The value "" + value + "" can't be converted to a Locale"");
        }
        final String[] elements = ((String) value).split(""_"");
        final int size = elements.length;

        if (size >= 1 && (elements[0].length() == 2 || elements[0].isEmpty())) {
            final String language = elements[0];
            final String country = size >= 2 ? elements[1] : """";
            final String variant = size >= 3 ? elements[2] : """";

            return new Locale(language, country, variant);
        }
        throw new ConversionException(""The value "" + value + "" can't be converted to a Locale"");
    }","  public void test70()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.getByName(""lwR1u^,SrJ9P&qsPh3"");
      try { 
        PropertyConverter.toLocale(inetAddress0);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // The value lwR1u^,SrJ9P&qsPh3/200.42.42.0 can't be converted to a Locale
         //
         verifyException(""org.apache.commons.configuration2.convert.PropertyConverter"", e);
      }
  }"
597,"    public static Pattern toPattern(final Object value) throws ConversionException {
        if (value instanceof Pattern) {
            return (Pattern) value;
        }
        if (!(value instanceof String)) {
            throw new ConversionException(""The value "" + value + "" can't be converted to a Pattern"");
        }
        try {
            return Pattern.compile((String) value);
        } catch (final PatternSyntaxException e) {
            throw new ConversionException(""The value "" + value + "" can't be converted to a Pattern"", e);
        }
    }","  public void test71()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-128));
      try { 
        PropertyConverter.toPattern(byte0);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // The value -128 can't be converted to a Pattern
         //
         verifyException(""org.apache.commons.configuration2.convert.PropertyConverter"", e);
      }
  }"
598,"    public static URL toURL(final Object value) throws ConversionException {
        if (value instanceof URL) {
            return (URL) value;
        }
        if (!(value instanceof String)) {
            throw new ConversionException(""The value "" + value + "" can't be converted to an URL"");
        }
        try {
            return new URL((String) value);
        } catch (final MalformedURLException e) {
            throw new ConversionException(""The value "" + value + "" can't be converted to an URL"", e);
        }
    }","  public void test72()  throws Throwable  {
      Byte byte0 = new Byte((byte)0);
      try { 
        PropertyConverter.toURL(byte0);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // The value 0 can't be converted to an URL
         //
         verifyException(""org.apache.commons.configuration2.convert.PropertyConverter"", e);
      }
  }"
599,"    public static URI toURI(final Object value) throws ConversionException {
        if (value instanceof URI) {
            return (URI) value;
        }
        if (!(value instanceof String)) {
            throw new ConversionException(""The value "" + value + "" can't be converted to an URI"");
        }
        try {
            return new URI((String) value);
        } catch (final URISyntaxException e) {
            throw new ConversionException(""The value "" + value + "" can't be converted to an URI"", e);
        }
    }","  public void test73()  throws Throwable  {
      Short short0 = new Short((byte)0);
      try { 
        PropertyConverter.toURI(short0);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // The value 0 can't be converted to an URI
         //
         verifyException(""org.apache.commons.configuration2.convert.PropertyConverter"", e);
      }
  }"
600,"    public static File toFile(final Object value) throws ConversionException {
        if (value instanceof File) {
            return (File) value;
        }
        if (value instanceof Path) {
            return ((Path) value).toFile();
        }
        if (value instanceof String) {
            return new File((String) value);
        }
        throw new ConversionException(""The value "" + value + "" can't be converted to a File"");
    }","  public void test74()  throws Throwable  {
      Object object0 = new Object();
      try { 
        PropertyConverter.toFile(object0);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // The value java.lang.Object@82b4ca9 can't be converted to a File
         //
         verifyException(""org.apache.commons.configuration2.convert.PropertyConverter"", e);
      }
  }"
601,"    public static BigDecimal toBigDecimal(final Object value) throws ConversionException {
        final Number n = toNumber(value, BigDecimal.class);
        if (n instanceof BigDecimal) {
            return (BigDecimal) n;
        }
        return new BigDecimal(n.doubleValue());
    }","  public void test75()  throws Throwable  {
      Double double0 = new Double(0.0);
      BigDecimal bigDecimal0 = PropertyConverter.toBigDecimal(double0);
}"
602,"    public static Duration toDuration(final Object value) throws ConversionException {
        if (value instanceof Duration) {
            return (Duration) value;
        }
        if (value instanceof CharSequence) {
            try {
                return Duration.parse((CharSequence) value);
            } catch (final DateTimeParseException e) {
                throw new ConversionException(""Could not convert "" + value + "" to Duration"", e);
            }
        }
        throw new ConversionException(""The value "" + value + "" can't be converted to a Duration"");
    }","  public void test76()  throws Throwable  {
      Locale locale0 = Locale.TAIWAN;
      try { 
        PropertyConverter.toDuration(locale0);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // The value zh_TW can't be converted to a Duration
         //
         verifyException(""org.apache.commons.configuration2.convert.PropertyConverter"", e);
      }
  }"
603,"    public static Float toFloat(final Object value) throws ConversionException {
        final Number n = toNumber(value, Float.class);
        if (n instanceof Float) {
            return (Float) n;
        }
        return Float.valueOf(n.floatValue());
    }","  public void test77()  throws Throwable  {
      BigDecimal bigDecimal0 = new BigDecimal(1.7976931348623157E308);
      Float float0 = PropertyConverter.toFloat(bigDecimal0);
}"
604,"    public static Character toCharacter(final Object value) throws ConversionException {
        final String strValue = String.valueOf(value);
        if (strValue.length() == 1) {
            return Character.valueOf(strValue.charAt(0));
        }
        throw new ConversionException(String.format(""The value '%s' cannot be converted to a Character object!"", strValue));
    }","  public void test78()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      try { 
        PropertyConverter.toCharacter(boolean0);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // The value 'true' cannot be converted to a Character object!
         //
         verifyException(""org.apache.commons.configuration2.convert.PropertyConverter"", e);
      }
  }"
605,"    public static Boolean toBoolean(final Object value) throws ConversionException {
        if (value instanceof Boolean) {
            return (Boolean) value;
        }
        if (!(value instanceof String)) {
            throw new ConversionException(""The value "" + value + "" can't be converted to a Boolean object"");
        }
        final Boolean b = BooleanUtils.toBooleanObject((String) value);
        if (b == null) {
            throw new ConversionException(""The value "" + value + "" can't be converted to a Boolean object"");
        }
        return b;
    }","  public void test79()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(288);
      try { 
        PropertyConverter.toBoolean(charBuffer0);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // The value \u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000 can't be converted to a Boolean object
         //
         verifyException(""org.apache.commons.configuration2.convert.PropertyConverter"", e);
      }
  }"
606,"    public static Object to(final Class<?> cls, final Object value, final DefaultConversionHandler convHandler) throws ConversionException {
        if (cls.isInstance(value)) {
            return value; // no conversion needed
        }

        if (String.class.equals(cls)) {
            return String.valueOf(value);
        }
        if (Boolean.class.equals(cls) || Boolean.TYPE.equals(cls)) {
            return toBoolean(value);
        }
        if (Character.class.equals(cls) || Character.TYPE.equals(cls)) {
            return toCharacter(value);
        }
        if (Number.class.isAssignableFrom(cls) || cls.isPrimitive()) {
            if (Integer.class.equals(cls) || Integer.TYPE.equals(cls)) {
                return toInteger(value);
            }
            if (Long.class.equals(cls) || Long.TYPE.equals(cls)) {
                return toLong(value);
            }
            if (Byte.class.equals(cls) || Byte.TYPE.equals(cls)) {
                return toByte(value);
            }
            if (Short.class.equals(cls) || Short.TYPE.equals(cls)) {
                return toShort(value);
            }
            if (Float.class.equals(cls) || Float.TYPE.equals(cls)) {
                return toFloat(value);
            }
            if (Double.class.equals(cls) || Double.TYPE.equals(cls)) {
                return toDouble(value);
            }
            if (BigInteger.class.equals(cls)) {
                return toBigInteger(value);
            }
            if (BigDecimal.class.equals(cls)) {
                return toBigDecimal(value);
            }
        } else if (Date.class.equals(cls)) {
            return toDate(value, convHandler.getDateFormat());
        } else if (Calendar.class.equals(cls)) {
            return toCalendar(value, convHandler.getDateFormat());
        } else if (File.class.equals(cls)) {
            return toFile(value);
        } else if (Path.class.equals(cls)) {
            return toPath(value);
        } else if (URI.class.equals(cls)) {
            return toURI(value);
        } else if (URL.class.equals(cls)) {
            return toURL(value);
        } else if (Pattern.class.equals(cls)) {
            return toPattern(value);
        } else if (Locale.class.equals(cls)) {
            return toLocale(value);
        } else if (isEnum(cls)) {
            return convertToEnum(cls, value);
        } else if (Color.class.equals(cls)) {
            return toColor(value);
        } else if (cls.getName().equals(INTERNET_ADDRESS_CLASSNAME_JAVAX)) {
            // javamail-1.* With javax.mail.* namespace.
            return toInternetAddress(value, INTERNET_ADDRESS_CLASSNAME_JAVAX);
        } else if (cls.getName().equals(INTERNET_ADDRESS_CLASSNAME_JAKARTA)) {
            // javamail-2.0+, with jakarta.mail.* namespace.
            return toInternetAddress(value, INTERNET_ADDRESS_CLASSNAME_JAKARTA);
        } else if (InetAddress.class.isAssignableFrom(cls)) {
            return toInetAddress(value);
        } else if (Duration.class.equals(cls)) {
            return toDuration(value);
        }

        throw new ConversionException(""The value '"" + value + ""' ("" + value.getClass() + "")"" + "" can't be converted to a "" + cls.getName() + "" object"");
    }","  public void test80()  throws Throwable  {
      Class<URL> class0 = URL.class;
      try { 
        PropertyConverter.to(class0, class0, (DefaultConversionHandler) null);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // The value class java.net.URL can't be converted to an URL
         //
         verifyException(""org.apache.commons.configuration2.convert.PropertyConverter"", e);
      }
  }"
607,"    public static Object to(final Class<?> cls, final Object value, final DefaultConversionHandler convHandler) throws ConversionException {
        if (cls.isInstance(value)) {
            return value; // no conversion needed
        }

        if (String.class.equals(cls)) {
            return String.valueOf(value);
        }
        if (Boolean.class.equals(cls) || Boolean.TYPE.equals(cls)) {
            return toBoolean(value);
        }
        if (Character.class.equals(cls) || Character.TYPE.equals(cls)) {
            return toCharacter(value);
        }
        if (Number.class.isAssignableFrom(cls) || cls.isPrimitive()) {
            if (Integer.class.equals(cls) || Integer.TYPE.equals(cls)) {
                return toInteger(value);
            }
            if (Long.class.equals(cls) || Long.TYPE.equals(cls)) {
                return toLong(value);
            }
            if (Byte.class.equals(cls) || Byte.TYPE.equals(cls)) {
                return toByte(value);
            }
            if (Short.class.equals(cls) || Short.TYPE.equals(cls)) {
                return toShort(value);
            }
            if (Float.class.equals(cls) || Float.TYPE.equals(cls)) {
                return toFloat(value);
            }
            if (Double.class.equals(cls) || Double.TYPE.equals(cls)) {
                return toDouble(value);
            }
            if (BigInteger.class.equals(cls)) {
                return toBigInteger(value);
            }
            if (BigDecimal.class.equals(cls)) {
                return toBigDecimal(value);
            }
        } else if (Date.class.equals(cls)) {
            return toDate(value, convHandler.getDateFormat());
        } else if (Calendar.class.equals(cls)) {
            return toCalendar(value, convHandler.getDateFormat());
        } else if (File.class.equals(cls)) {
            return toFile(value);
        } else if (Path.class.equals(cls)) {
            return toPath(value);
        } else if (URI.class.equals(cls)) {
            return toURI(value);
        } else if (URL.class.equals(cls)) {
            return toURL(value);
        } else if (Pattern.class.equals(cls)) {
            return toPattern(value);
        } else if (Locale.class.equals(cls)) {
            return toLocale(value);
        } else if (isEnum(cls)) {
            return convertToEnum(cls, value);
        } else if (Color.class.equals(cls)) {
            return toColor(value);
        } else if (cls.getName().equals(INTERNET_ADDRESS_CLASSNAME_JAVAX)) {
            // javamail-1.* With javax.mail.* namespace.
            return toInternetAddress(value, INTERNET_ADDRESS_CLASSNAME_JAVAX);
        } else if (cls.getName().equals(INTERNET_ADDRESS_CLASSNAME_JAKARTA)) {
            // javamail-2.0+, with jakarta.mail.* namespace.
            return toInternetAddress(value, INTERNET_ADDRESS_CLASSNAME_JAKARTA);
        } else if (InetAddress.class.isAssignableFrom(cls)) {
            return toInetAddress(value);
        } else if (Duration.class.equals(cls)) {
            return toDuration(value);
        }

        throw new ConversionException(""The value '"" + value + ""' ("" + value.getClass() + "")"" + "" can't be converted to a "" + cls.getName() + "" object"");
    }","  public void test81()  throws Throwable  {
      Class<Calendar> class0 = Calendar.class;
      DefaultConversionHandler defaultConversionHandler0 = DefaultConversionHandler.INSTANCE;
      try { 
        PropertyConverter.to(class0, class0, defaultConversionHandler0);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // The value class java.util.Calendar can't be converted to a Calendar
         //
         verifyException(""org.apache.commons.configuration2.convert.PropertyConverter"", e);
      }
  }"
608,"    public static Object to(final Class<?> cls, final Object value, final DefaultConversionHandler convHandler) throws ConversionException {
        if (cls.isInstance(value)) {
            return value; // no conversion needed
        }

        if (String.class.equals(cls)) {
            return String.valueOf(value);
        }
        if (Boolean.class.equals(cls) || Boolean.TYPE.equals(cls)) {
            return toBoolean(value);
        }
        if (Character.class.equals(cls) || Character.TYPE.equals(cls)) {
            return toCharacter(value);
        }
        if (Number.class.isAssignableFrom(cls) || cls.isPrimitive()) {
            if (Integer.class.equals(cls) || Integer.TYPE.equals(cls)) {
                return toInteger(value);
            }
            if (Long.class.equals(cls) || Long.TYPE.equals(cls)) {
                return toLong(value);
            }
            if (Byte.class.equals(cls) || Byte.TYPE.equals(cls)) {
                return toByte(value);
            }
            if (Short.class.equals(cls) || Short.TYPE.equals(cls)) {
                return toShort(value);
            }
            if (Float.class.equals(cls) || Float.TYPE.equals(cls)) {
                return toFloat(value);
            }
            if (Double.class.equals(cls) || Double.TYPE.equals(cls)) {
                return toDouble(value);
            }
            if (BigInteger.class.equals(cls)) {
                return toBigInteger(value);
            }
            if (BigDecimal.class.equals(cls)) {
                return toBigDecimal(value);
            }
        } else if (Date.class.equals(cls)) {
            return toDate(value, convHandler.getDateFormat());
        } else if (Calendar.class.equals(cls)) {
            return toCalendar(value, convHandler.getDateFormat());
        } else if (File.class.equals(cls)) {
            return toFile(value);
        } else if (Path.class.equals(cls)) {
            return toPath(value);
        } else if (URI.class.equals(cls)) {
            return toURI(value);
        } else if (URL.class.equals(cls)) {
            return toURL(value);
        } else if (Pattern.class.equals(cls)) {
            return toPattern(value);
        } else if (Locale.class.equals(cls)) {
            return toLocale(value);
        } else if (isEnum(cls)) {
            return convertToEnum(cls, value);
        } else if (Color.class.equals(cls)) {
            return toColor(value);
        } else if (cls.getName().equals(INTERNET_ADDRESS_CLASSNAME_JAVAX)) {
            // javamail-1.* With javax.mail.* namespace.
            return toInternetAddress(value, INTERNET_ADDRESS_CLASSNAME_JAVAX);
        } else if (cls.getName().equals(INTERNET_ADDRESS_CLASSNAME_JAKARTA)) {
            // javamail-2.0+, with jakarta.mail.* namespace.
            return toInternetAddress(value, INTERNET_ADDRESS_CLASSNAME_JAKARTA);
        } else if (InetAddress.class.isAssignableFrom(cls)) {
            return toInetAddress(value);
        } else if (Duration.class.equals(cls)) {
            return toDuration(value);
        }

        throw new ConversionException(""The value '"" + value + ""' ("" + value.getClass() + "")"" + "" can't be converted to a "" + cls.getName() + "" object"");
    }","  public void test82()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      try { 
        PropertyConverter.to(class0, class0, (DefaultConversionHandler) null);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // Could not convert java.lang.Class@0000000001 to java.lang.Integer
         //
         verifyException(""org.apache.commons.configuration2.convert.PropertyConverter"", e);
      }
  }"
609,"    public static Object to(final Class<?> cls, final Object value, final DefaultConversionHandler convHandler) throws ConversionException {
        if (cls.isInstance(value)) {
            return value; // no conversion needed
        }

        if (String.class.equals(cls)) {
            return String.valueOf(value);
        }
        if (Boolean.class.equals(cls) || Boolean.TYPE.equals(cls)) {
            return toBoolean(value);
        }
        if (Character.class.equals(cls) || Character.TYPE.equals(cls)) {
            return toCharacter(value);
        }
        if (Number.class.isAssignableFrom(cls) || cls.isPrimitive()) {
            if (Integer.class.equals(cls) || Integer.TYPE.equals(cls)) {
                return toInteger(value);
            }
            if (Long.class.equals(cls) || Long.TYPE.equals(cls)) {
                return toLong(value);
            }
            if (Byte.class.equals(cls) || Byte.TYPE.equals(cls)) {
                return toByte(value);
            }
            if (Short.class.equals(cls) || Short.TYPE.equals(cls)) {
                return toShort(value);
            }
            if (Float.class.equals(cls) || Float.TYPE.equals(cls)) {
                return toFloat(value);
            }
            if (Double.class.equals(cls) || Double.TYPE.equals(cls)) {
                return toDouble(value);
            }
            if (BigInteger.class.equals(cls)) {
                return toBigInteger(value);
            }
            if (BigDecimal.class.equals(cls)) {
                return toBigDecimal(value);
            }
        } else if (Date.class.equals(cls)) {
            return toDate(value, convHandler.getDateFormat());
        } else if (Calendar.class.equals(cls)) {
            return toCalendar(value, convHandler.getDateFormat());
        } else if (File.class.equals(cls)) {
            return toFile(value);
        } else if (Path.class.equals(cls)) {
            return toPath(value);
        } else if (URI.class.equals(cls)) {
            return toURI(value);
        } else if (URL.class.equals(cls)) {
            return toURL(value);
        } else if (Pattern.class.equals(cls)) {
            return toPattern(value);
        } else if (Locale.class.equals(cls)) {
            return toLocale(value);
        } else if (isEnum(cls)) {
            return convertToEnum(cls, value);
        } else if (Color.class.equals(cls)) {
            return toColor(value);
        } else if (cls.getName().equals(INTERNET_ADDRESS_CLASSNAME_JAVAX)) {
            // javamail-1.* With javax.mail.* namespace.
            return toInternetAddress(value, INTERNET_ADDRESS_CLASSNAME_JAVAX);
        } else if (cls.getName().equals(INTERNET_ADDRESS_CLASSNAME_JAKARTA)) {
            // javamail-2.0+, with jakarta.mail.* namespace.
            return toInternetAddress(value, INTERNET_ADDRESS_CLASSNAME_JAKARTA);
        } else if (InetAddress.class.isAssignableFrom(cls)) {
            return toInetAddress(value);
        } else if (Duration.class.equals(cls)) {
            return toDuration(value);
        }

        throw new ConversionException(""The value '"" + value + ""' ("" + value.getClass() + "")"" + "" can't be converted to a "" + cls.getName() + "" object"");
    }","  public void test83()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      Class<Boolean> class0 = Boolean.class;
      DefaultConversionHandler defaultConversionHandler0 = DefaultConversionHandler.INSTANCE;
      try { 
        PropertyConverter.to(class0, uRI0, defaultConversionHandler0);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // The value file:///tmp/foo.bar can't be converted to a Boolean object
         //
         verifyException(""org.apache.commons.configuration2.convert.PropertyConverter"", e);
      }
  }"
610,"    public static Object to(final Class<?> cls, final Object value, final DefaultConversionHandler convHandler) throws ConversionException {
        if (cls.isInstance(value)) {
            return value; // no conversion needed
        }

        if (String.class.equals(cls)) {
            return String.valueOf(value);
        }
        if (Boolean.class.equals(cls) || Boolean.TYPE.equals(cls)) {
            return toBoolean(value);
        }
        if (Character.class.equals(cls) || Character.TYPE.equals(cls)) {
            return toCharacter(value);
        }
        if (Number.class.isAssignableFrom(cls) || cls.isPrimitive()) {
            if (Integer.class.equals(cls) || Integer.TYPE.equals(cls)) {
                return toInteger(value);
            }
            if (Long.class.equals(cls) || Long.TYPE.equals(cls)) {
                return toLong(value);
            }
            if (Byte.class.equals(cls) || Byte.TYPE.equals(cls)) {
                return toByte(value);
            }
            if (Short.class.equals(cls) || Short.TYPE.equals(cls)) {
                return toShort(value);
            }
            if (Float.class.equals(cls) || Float.TYPE.equals(cls)) {
                return toFloat(value);
            }
            if (Double.class.equals(cls) || Double.TYPE.equals(cls)) {
                return toDouble(value);
            }
            if (BigInteger.class.equals(cls)) {
                return toBigInteger(value);
            }
            if (BigDecimal.class.equals(cls)) {
                return toBigDecimal(value);
            }
        } else if (Date.class.equals(cls)) {
            return toDate(value, convHandler.getDateFormat());
        } else if (Calendar.class.equals(cls)) {
            return toCalendar(value, convHandler.getDateFormat());
        } else if (File.class.equals(cls)) {
            return toFile(value);
        } else if (Path.class.equals(cls)) {
            return toPath(value);
        } else if (URI.class.equals(cls)) {
            return toURI(value);
        } else if (URL.class.equals(cls)) {
            return toURL(value);
        } else if (Pattern.class.equals(cls)) {
            return toPattern(value);
        } else if (Locale.class.equals(cls)) {
            return toLocale(value);
        } else if (isEnum(cls)) {
            return convertToEnum(cls, value);
        } else if (Color.class.equals(cls)) {
            return toColor(value);
        } else if (cls.getName().equals(INTERNET_ADDRESS_CLASSNAME_JAVAX)) {
            // javamail-1.* With javax.mail.* namespace.
            return toInternetAddress(value, INTERNET_ADDRESS_CLASSNAME_JAVAX);
        } else if (cls.getName().equals(INTERNET_ADDRESS_CLASSNAME_JAKARTA)) {
            // javamail-2.0+, with jakarta.mail.* namespace.
            return toInternetAddress(value, INTERNET_ADDRESS_CLASSNAME_JAKARTA);
        } else if (InetAddress.class.isAssignableFrom(cls)) {
            return toInetAddress(value);
        } else if (Duration.class.equals(cls)) {
            return toDuration(value);
        }

        throw new ConversionException(""The value '"" + value + ""' ("" + value.getClass() + "")"" + "" can't be converted to a "" + cls.getName() + "" object"");
    }","  public void test84()  throws Throwable  {
      Class<Object> class0 = Object.class;
      DefaultConversionHandler defaultConversionHandler0 = new DefaultConversionHandler();
      Object object0 = PropertyConverter.to(class0, class0, defaultConversionHandler0);
}"
611,"    public static Calendar toCalendar(final Object value, final String format) throws ConversionException {
        if (value instanceof Calendar) {
            return (Calendar) value;
        }
        if (value instanceof Date) {
            final Calendar calendar = Calendar.getInstance();
            calendar.setTime((Date) value);
            return calendar;
        }
        if (!(value instanceof String)) {
            throw new ConversionException(""The value "" + value + "" can't be converted to a Calendar"");
        }
        try {
            final Calendar calendar = Calendar.getInstance();
            calendar.setTime(new SimpleDateFormat(format).parse((String) value));
            return calendar;
        } catch (final ParseException e) {
            throw new ConversionException(""The value "" + value + "" can't be converted to a Calendar"", e);
        }
    }","  public void test85()  throws Throwable  {
      // Undeclared exception!
      try { 
        PropertyConverter.toCalendar(""0bjava.lang.Object@0000000002"", (String) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.text.SimpleDateFormat"", e);
      }
  }"
612,"    public static Calendar toCalendar(final Object value, final String format) throws ConversionException {
        if (value instanceof Calendar) {
            return (Calendar) value;
        }
        if (value instanceof Date) {
            final Calendar calendar = Calendar.getInstance();
            calendar.setTime((Date) value);
            return calendar;
        }
        if (!(value instanceof String)) {
            throw new ConversionException(""The value "" + value + "" can't be converted to a Calendar"");
        }
        try {
            final Calendar calendar = Calendar.getInstance();
            calendar.setTime(new SimpleDateFormat(format).parse((String) value));
            return calendar;
        } catch (final ParseException e) {
            throw new ConversionException(""The value "" + value + "" can't be converted to a Calendar"", e);
        }
    }","  public void test86()  throws Throwable  {
      MockDate mockDate0 = new MockDate((byte)58, (byte)58, (byte)58, (byte)58, (byte)58, (byte)58);
      Calendar calendar0 = PropertyConverter.toCalendar(mockDate0, ""S:O"");
}"
613,"    public static Date toDate(final Object value, final String format) throws ConversionException {
        if (value instanceof Date) {
            return (Date) value;
        }
        if (value instanceof Calendar) {
            return ((Calendar) value).getTime();
        }
        if (!(value instanceof String)) {
            throw new ConversionException(""The value "" + value + "" can't be converted to a Date"");
        }
        try {
            return new SimpleDateFormat(format).parse((String) value);
        } catch (final ParseException e) {
            throw new ConversionException(""The value "" + value + "" can't be converted to a Date"", e);
        }
    }","  public void test87()  throws Throwable  {
      // Undeclared exception!
      try { 
        PropertyConverter.toDate(""3VO)iz.hW0"", (String) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.text.SimpleDateFormat"", e);
      }
  }"
614,"    public static Date toDate(final Object value, final String format) throws ConversionException {
        if (value instanceof Date) {
            return (Date) value;
        }
        if (value instanceof Calendar) {
            return ((Calendar) value).getTime();
        }
        if (!(value instanceof String)) {
            throw new ConversionException(""The value "" + value + "" can't be converted to a Date"");
        }
        try {
            return new SimpleDateFormat(format).parse((String) value);
        } catch (final ParseException e) {
            throw new ConversionException(""The value "" + value + "" can't be converted to a Date"", e);
        }
    }","  public void test88()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      Date date0 = PropertyConverter.toDate(mockGregorianCalendar0, ""_am_``Trn!\""Q&P"");
}"
615,"    public static Date toDate(final Object value, final String format) throws ConversionException {
        if (value instanceof Date) {
            return (Date) value;
        }
        if (value instanceof Calendar) {
            return ((Calendar) value).getTime();
        }
        if (!(value instanceof String)) {
            throw new ConversionException(""The value "" + value + "" can't be converted to a Date"");
        }
        try {
            return new SimpleDateFormat(format).parse((String) value);
        } catch (final ParseException e) {
            throw new ConversionException(""The value "" + value + "" can't be converted to a Date"", e);
        }
    }","  public void test89()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-2036015195), (-2036015195), (-2036015195), (-2036015195), (-2036015195));
      Date date0 = PropertyConverter.toDate(mockDate0, ""4Pn"");
}"
616,"    static <E extends Enum<E>> E toEnum(final Object value, final Class<E> cls) throws ConversionException {
        if (value.getClass().equals(cls)) {
            return cls.cast(value);
        }
        if (value instanceof String) {
            try {
                return Enum.valueOf(cls, (String) value);
            } catch (final Exception e) {
                throw new ConversionException(""The value "" + value + "" can't be converted to a "" + cls.getName());
            }
        }
        if (!(value instanceof Number)) {
            throw new ConversionException(""The value "" + value + "" can't be converted to a "" + cls.getName());
        }
        try {
            final E[] enumConstants = cls.getEnumConstants();
            return enumConstants[((Number) value).intValue()];
        } catch (final Exception e) {
            throw new ConversionException(""The value "" + value + "" can't be converted to a "" + cls.getName());
        }
    }","  public void test90()  throws Throwable  {
      Double double0 = new Double(0.0);
      Class<DummyLookup> class0 = DummyLookup.class;
      DummyLookup dummyLookup0 = PropertyConverter.toEnum((Object) double0, class0);
}"
617,"    static <E extends Enum<E>> E toEnum(final Object value, final Class<E> cls) throws ConversionException {
        if (value.getClass().equals(cls)) {
            return cls.cast(value);
        }
        if (value instanceof String) {
            try {
                return Enum.valueOf(cls, (String) value);
            } catch (final Exception e) {
                throw new ConversionException(""The value "" + value + "" can't be converted to a "" + cls.getName());
            }
        }
        if (!(value instanceof Number)) {
            throw new ConversionException(""The value "" + value + "" can't be converted to a "" + cls.getName());
        }
        try {
            final E[] enumConstants = cls.getEnumConstants();
            return enumConstants[((Number) value).intValue()];
        } catch (final Exception e) {
            throw new ConversionException(""The value "" + value + "" can't be converted to a "" + cls.getName());
        }
    }","  public void test91()  throws Throwable  {
      Class<DummyLookup> class0 = DummyLookup.class;
      try { 
        PropertyConverter.toEnum((Object) ""1"", class0);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // The value 1 can't be converted to a org.apache.commons.configuration2.interpol.DummyLookup
         //
         verifyException(""org.apache.commons.configuration2.convert.PropertyConverter"", e);
      }
  }"
618,"    static <E extends Enum<E>> E toEnum(final Object value, final Class<E> cls) throws ConversionException {
        if (value.getClass().equals(cls)) {
            return cls.cast(value);
        }
        if (value instanceof String) {
            try {
                return Enum.valueOf(cls, (String) value);
            } catch (final Exception e) {
                throw new ConversionException(""The value "" + value + "" can't be converted to a "" + cls.getName());
            }
        }
        if (!(value instanceof Number)) {
            throw new ConversionException(""The value "" + value + "" can't be converted to a "" + cls.getName());
        }
        try {
            final E[] enumConstants = cls.getEnumConstants();
            return enumConstants[((Number) value).intValue()];
        } catch (final Exception e) {
            throw new ConversionException(""The value "" + value + "" can't be converted to a "" + cls.getName());
        }
    }","  public void test92()  throws Throwable  {
      DummyLookup dummyLookup0 = DummyLookup.INSTANCE;
      Class<DummyLookup> class0 = DummyLookup.class;
      DummyLookup dummyLookup1 = PropertyConverter.toEnum((Object) dummyLookup0, class0);
}"
619,"    static Object toInternetAddress(final Object value, final String targetClassName) throws ConversionException {
        if (value.getClass().getName().equals(targetClassName)) {
            return value;
        }
        if (!(value instanceof String)) {
            throw new ConversionException(""The value "" + value + "" can't be converted to an InternetAddress"");
        }
        try {
            final Constructor<?> ctor = Class.forName(targetClassName).getConstructor(String.class);
            return ctor.newInstance(value);
        } catch (final Exception e) {
            throw new ConversionException(""The value "" + value + "" can't be converted to an InternetAddress"", e);
        }
    }","  public void test93()  throws Throwable  {
      try { 
        PropertyConverter.toInternetAddress(""C"", ""org.apache.commons.jexl2.parser.ParserTreeConstants"");
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // The value C can't be converted to an InternetAddress
         //
         verifyException(""org.apache.commons.configuration2.convert.PropertyConverter"", e);
      }
  }"
620,"    static Object toInternetAddress(final Object value, final String targetClassName) throws ConversionException {
        if (value.getClass().getName().equals(targetClassName)) {
            return value;
        }
        if (!(value instanceof String)) {
            throw new ConversionException(""The value "" + value + "" can't be converted to an InternetAddress"");
        }
        try {
            final Constructor<?> ctor = Class.forName(targetClassName).getConstructor(String.class);
            return ctor.newInstance(value);
        } catch (final Exception e) {
            throw new ConversionException(""The value "" + value + "" can't be converted to an InternetAddress"", e);
        }
    }","  public void test94()  throws Throwable  {
      DefaultConversionHandler defaultConversionHandler0 = new DefaultConversionHandler();
      Object object0 = PropertyConverter.toInternetAddress(defaultConversionHandler0, ""org.apache.commons.configuration2.convert.DefaultConversionHandler"");
}"
621,"    static Object toInternetAddress(final Object value, final String targetClassName) throws ConversionException {
        if (value.getClass().getName().equals(targetClassName)) {
            return value;
        }
        if (!(value instanceof String)) {
            throw new ConversionException(""The value "" + value + "" can't be converted to an InternetAddress"");
        }
        try {
            final Constructor<?> ctor = Class.forName(targetClassName).getConstructor(String.class);
            return ctor.newInstance(value);
        } catch (final Exception e) {
            throw new ConversionException(""The value "" + value + "" can't be converted to an InternetAddress"", e);
        }
    }","  public void test95()  throws Throwable  {
      Integer integer0 = new Integer(813);
      try { 
        PropertyConverter.toInternetAddress(integer0, "" can't be converted to a File"");
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // The value 813 can't be converted to an InternetAddress
         //
         verifyException(""org.apache.commons.configuration2.convert.PropertyConverter"", e);
      }
  }"
622,,"  public void test96()  throws Throwable  {
      DefaultConversionHandler defaultConversionHandler0 = new DefaultConversionHandler();
      URI uRI0 = MockURI.aFTPURI;
      Class<InetAddress> class0 = InetAddress.class;
      ConfigurationInterpolator configurationInterpolator0 = new ConfigurationInterpolator();
      // Undeclared exception!
      try { 
        defaultConversionHandler0.toArray(uRI0, class0, configurationInterpolator0);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // The value ftp://foo.bar can't be converted to a InetAddress
         //
         verifyException(""org.apache.commons.configuration2.convert.PropertyConverter"", e);
      }
  }"
623,"    static InetAddress toInetAddress(final Object value) throws ConversionException {
        if (value instanceof InetAddress) {
            return (InetAddress) value;
        }
        if (!(value instanceof String)) {
            throw new ConversionException(""The value "" + value + "" can't be converted to a InetAddress"");
        }
        try {
            return InetAddress.getByName((String) value);
        } catch (final UnknownHostException e) {
            throw new ConversionException(""The value "" + value + "" can't be converted to a InetAddress"", e);
        }
    }","  public void test97()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.getLocalHost();
      InetAddress inetAddress1 = PropertyConverter.toInetAddress(inetAddress0);
}"
624,"    public static Color toColor(final Object value) throws ConversionException {
        if (value instanceof Color) {
            return (Color) value;
        }
        if (!(value instanceof String) || StringUtils.isBlank((String) value)) {
            throw new ConversionException(""The value "" + value + "" can't be converted to a Color"");
        }
        String color = ((String) value).trim();

        final int[] components = new int[3];

        // check the size of the string
        final int minlength = components.length * 2;
        if (color.length() < minlength) {
            throw new ConversionException(""The value "" + value + "" can't be converted to a Color"");
        }

        // remove the leading #
        if (color.startsWith(""#"")) {
            color = color.substring(1);
        }

        try {
            // parse the components
            for (int i = 0; i < components.length; i++) {
                components[i] = Integer.parseInt(color.substring(2 * i, 2 * i + 2), HEX_RADIX);
            }

            // parse the transparency
            final int alpha;
            if (color.length() >= minlength + 2) {
                alpha = Integer.parseInt(color.substring(minlength, minlength + 2), HEX_RADIX);
            } else {
                alpha = Color.black.getAlpha();
            }

            return new Color(components[0], components[1], components[2], alpha);
        } catch (final Exception e) {
            throw new ConversionException(""The value "" + value + "" can't be converted to a Color"", e);
        }
    }","  public void test98()  throws Throwable  {
      try { 
        PropertyConverter.toColor(""0bjava.lang.Object@0000000002"");
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // The value 0bjava.lang.Object@0000000002 can't be converted to a Color
         //
         verifyException(""org.apache.commons.configuration2.convert.PropertyConverter"", e);
      }
  }"
625,"    public static Color toColor(final Object value) throws ConversionException {
        if (value instanceof Color) {
            return (Color) value;
        }
        if (!(value instanceof String) || StringUtils.isBlank((String) value)) {
            throw new ConversionException(""The value "" + value + "" can't be converted to a Color"");
        }
        String color = ((String) value).trim();

        final int[] components = new int[3];

        // check the size of the string
        final int minlength = components.length * 2;
        if (color.length() < minlength) {
            throw new ConversionException(""The value "" + value + "" can't be converted to a Color"");
        }

        // remove the leading #
        if (color.startsWith(""#"")) {
            color = color.substring(1);
        }

        try {
            // parse the components
            for (int i = 0; i < components.length; i++) {
                components[i] = Integer.parseInt(color.substring(2 * i, 2 * i + 2), HEX_RADIX);
            }

            // parse the transparency
            final int alpha;
            if (color.length() >= minlength + 2) {
                alpha = Integer.parseInt(color.substring(minlength, minlength + 2), HEX_RADIX);
            } else {
                alpha = Color.black.getAlpha();
            }

            return new Color(components[0], components[1], components[2], alpha);
        } catch (final Exception e) {
            throw new ConversionException(""The value "" + value + "" can't be converted to a Color"", e);
        }
    }","  public void test99()  throws Throwable  {
      try { 
        PropertyConverter.toColor(""%.'|"");
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // The value %.'| can't be converted to a Color
         //
         verifyException(""org.apache.commons.configuration2.convert.PropertyConverter"", e);
      }
  }"
626,"    public static Color toColor(final Object value) throws ConversionException {
        if (value instanceof Color) {
            return (Color) value;
        }
        if (!(value instanceof String) || StringUtils.isBlank((String) value)) {
            throw new ConversionException(""The value "" + value + "" can't be converted to a Color"");
        }
        String color = ((String) value).trim();

        final int[] components = new int[3];

        // check the size of the string
        final int minlength = components.length * 2;
        if (color.length() < minlength) {
            throw new ConversionException(""The value "" + value + "" can't be converted to a Color"");
        }

        // remove the leading #
        if (color.startsWith(""#"")) {
            color = color.substring(1);
        }

        try {
            // parse the components
            for (int i = 0; i < components.length; i++) {
                components[i] = Integer.parseInt(color.substring(2 * i, 2 * i + 2), HEX_RADIX);
            }

            // parse the transparency
            final int alpha;
            if (color.length() >= minlength + 2) {
                alpha = Integer.parseInt(color.substring(minlength, minlength + 2), HEX_RADIX);
            } else {
                alpha = Color.black.getAlpha();
            }

            return new Color(components[0], components[1], components[2], alpha);
        } catch (final Exception e) {
            throw new ConversionException(""The value "" + value + "" can't be converted to a Color"", e);
        }
    }","  public void test100()  throws Throwable  {
      try { 
        PropertyConverter.toColor("""");
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // The value  can't be converted to a Color
         //
         verifyException(""org.apache.commons.configuration2.convert.PropertyConverter"", e);
      }
  }"
627,"    public static Color toColor(final Object value) throws ConversionException {
        if (value instanceof Color) {
            return (Color) value;
        }
        if (!(value instanceof String) || StringUtils.isBlank((String) value)) {
            throw new ConversionException(""The value "" + value + "" can't be converted to a Color"");
        }
        String color = ((String) value).trim();

        final int[] components = new int[3];

        // check the size of the string
        final int minlength = components.length * 2;
        if (color.length() < minlength) {
            throw new ConversionException(""The value "" + value + "" can't be converted to a Color"");
        }

        // remove the leading #
        if (color.startsWith(""#"")) {
            color = color.substring(1);
        }

        try {
            // parse the components
            for (int i = 0; i < components.length; i++) {
                components[i] = Integer.parseInt(color.substring(2 * i, 2 * i + 2), HEX_RADIX);
            }

            // parse the transparency
            final int alpha;
            if (color.length() >= minlength + 2) {
                alpha = Integer.parseInt(color.substring(minlength, minlength + 2), HEX_RADIX);
            } else {
                alpha = Color.black.getAlpha();
            }

            return new Color(components[0], components[1], components[2], alpha);
        } catch (final Exception e) {
            throw new ConversionException(""The value "" + value + "" can't be converted to a Color"", e);
        }
    }","  public void test101()  throws Throwable  {
      try { 
        PropertyConverter.toColor(""#s=!=|s QSLi9+$"");
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // The value #s=!=|s QSLi9+$ can't be converted to a Color
         //
         verifyException(""org.apache.commons.configuration2.convert.PropertyConverter"", e);
      }
  }"
628,"    public static Color toColor(final Object value) throws ConversionException {
        if (value instanceof Color) {
            return (Color) value;
        }
        if (!(value instanceof String) || StringUtils.isBlank((String) value)) {
            throw new ConversionException(""The value "" + value + "" can't be converted to a Color"");
        }
        String color = ((String) value).trim();

        final int[] components = new int[3];

        // check the size of the string
        final int minlength = components.length * 2;
        if (color.length() < minlength) {
            throw new ConversionException(""The value "" + value + "" can't be converted to a Color"");
        }

        // remove the leading #
        if (color.startsWith(""#"")) {
            color = color.substring(1);
        }

        try {
            // parse the components
            for (int i = 0; i < components.length; i++) {
                components[i] = Integer.parseInt(color.substring(2 * i, 2 * i + 2), HEX_RADIX);
            }

            // parse the transparency
            final int alpha;
            if (color.length() >= minlength + 2) {
                alpha = Integer.parseInt(color.substring(minlength, minlength + 2), HEX_RADIX);
            } else {
                alpha = Color.black.getAlpha();
            }

            return new Color(components[0], components[1], components[2], alpha);
        } catch (final Exception e) {
            throw new ConversionException(""The value "" + value + "" can't be converted to a Color"", e);
        }
    }","  public void test102()  throws Throwable  {
      Color color0 = Color.cyan;
      Color color1 = PropertyConverter.toColor(color0);
}"
629,"    public static Locale toLocale(final Object value) throws ConversionException {
        if (value instanceof Locale) {
            return (Locale) value;
        }
        if (!(value instanceof String)) {
            throw new ConversionException(""The value "" + value + "" can't be converted to a Locale"");
        }
        final String[] elements = ((String) value).split(""_"");
        final int size = elements.length;

        if (size >= 1 && (elements[0].length() == 2 || elements[0].isEmpty())) {
            final String language = elements[0];
            final String country = size >= 2 ? elements[1] : """";
            final String variant = size >= 3 ? elements[2] : """";

            return new Locale(language, country, variant);
        }
        throw new ConversionException(""The value "" + value + "" can't be converted to a Locale"");
    }","  public void test103()  throws Throwable  {
      Locale locale0 = PropertyConverter.toLocale(""&#"");
}"
630,"    public static Locale toLocale(final Object value) throws ConversionException {
        if (value instanceof Locale) {
            return (Locale) value;
        }
        if (!(value instanceof String)) {
            throw new ConversionException(""The value "" + value + "" can't be converted to a Locale"");
        }
        final String[] elements = ((String) value).split(""_"");
        final int size = elements.length;

        if (size >= 1 && (elements[0].length() == 2 || elements[0].isEmpty())) {
            final String language = elements[0];
            final String country = size >= 2 ? elements[1] : """";
            final String variant = size >= 3 ? elements[2] : """";

            return new Locale(language, country, variant);
        }
        throw new ConversionException(""The value "" + value + "" can't be converted to a Locale"");
    }","  public void test104()  throws Throwable  {
      Locale locale0 = PropertyConverter.toLocale(""_am_``Trn!\""Q&P"");
}"
631,"    public static Locale toLocale(final Object value) throws ConversionException {
        if (value instanceof Locale) {
            return (Locale) value;
        }
        if (!(value instanceof String)) {
            throw new ConversionException(""The value "" + value + "" can't be converted to a Locale"");
        }
        final String[] elements = ((String) value).split(""_"");
        final int size = elements.length;

        if (size >= 1 && (elements[0].length() == 2 || elements[0].isEmpty())) {
            final String language = elements[0];
            final String country = size >= 2 ? elements[1] : """";
            final String variant = size >= 3 ? elements[2] : """";

            return new Locale(language, country, variant);
        }
        throw new ConversionException(""The value "" + value + "" can't be converted to a Locale"");
    }","  public void test105()  throws Throwable  {
      Locale locale0 = Locale.CANADA;
      Locale locale1 = PropertyConverter.toLocale(locale0);
}"
632,"    public static Pattern toPattern(final Object value) throws ConversionException {
        if (value instanceof Pattern) {
            return (Pattern) value;
        }
        if (!(value instanceof String)) {
            throw new ConversionException(""The value "" + value + "" can't be converted to a Pattern"");
        }
        try {
            return Pattern.compile((String) value);
        } catch (final PatternSyntaxException e) {
            throw new ConversionException(""The value "" + value + "" can't be converted to a Pattern"", e);
        }
    }","  public void test106()  throws Throwable  {
      try { 
        PropertyConverter.toPattern(""!:<mQnNTc.(<-N"");
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // The value !:<mQnNTc.(<-N can't be converted to a Pattern
         //
         verifyException(""org.apache.commons.configuration2.convert.PropertyConverter"", e);
      }
  }"
633,"    public static Pattern toPattern(final Object value) throws ConversionException {
        if (value instanceof Pattern) {
            return (Pattern) value;
        }
        if (!(value instanceof String)) {
            throw new ConversionException(""The value "" + value + "" can't be converted to a Pattern"");
        }
        try {
            return Pattern.compile((String) value);
        } catch (final PatternSyntaxException e) {
            throw new ConversionException(""The value "" + value + "" can't be converted to a Pattern"", e);
        }
    }","  public void test107()  throws Throwable  {
      Pattern pattern0 = Pattern.compile(""^!cDe+4t'5Kn+%"");
      Pattern pattern1 = PropertyConverter.toPattern(pattern0);
}"
634,"    public static URL toURL(final Object value) throws ConversionException {
        if (value instanceof URL) {
            return (URL) value;
        }
        if (!(value instanceof String)) {
            throw new ConversionException(""The value "" + value + "" can't be converted to an URL"");
        }
        try {
            return new URL((String) value);
        } catch (final MalformedURLException e) {
            throw new ConversionException(""The value "" + value + "" can't be converted to an URL"", e);
        }
    }","  public void test108()  throws Throwable  {
      try { 
        PropertyConverter.toURL(""7,lq y&93Mf;Zu-"");
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // The value 7,lq y&93Mf;Zu- can't be converted to an URL
         //
         verifyException(""org.apache.commons.configuration2.convert.PropertyConverter"", e);
      }
  }"
635,"    public static URL toURL(final Object value) throws ConversionException {
        if (value instanceof URL) {
            return (URL) value;
        }
        if (!(value instanceof String)) {
            throw new ConversionException(""The value "" + value + "" can't be converted to an URL"");
        }
        try {
            return new URL((String) value);
        } catch (final MalformedURLException e) {
            throw new ConversionException(""The value "" + value + "" can't be converted to an URL"", e);
        }
    }","  public void test109()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      URL uRL1 = PropertyConverter.toURL(uRL0);
}"
636,"    public static URI toURI(final Object value) throws ConversionException {
        if (value instanceof URI) {
            return (URI) value;
        }
        if (!(value instanceof String)) {
            throw new ConversionException(""The value "" + value + "" can't be converted to an URI"");
        }
        try {
            return new URI((String) value);
        } catch (final URISyntaxException e) {
            throw new ConversionException(""The value "" + value + "" can't be converted to an URI"", e);
        }
    }","  public void test110()  throws Throwable  {
      try { 
        PropertyConverter.toURI(""|_T|*+6(in:^)O8"");
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // The value |_T|*+6(in:^)O8 can't be converted to an URI
         //
         verifyException(""org.apache.commons.configuration2.convert.PropertyConverter"", e);
      }
  }"
637,"    public static URI toURI(final Object value) throws ConversionException {
        if (value instanceof URI) {
            return (URI) value;
        }
        if (!(value instanceof String)) {
            throw new ConversionException(""The value "" + value + "" can't be converted to an URI"");
        }
        try {
            return new URI((String) value);
        } catch (final URISyntaxException e) {
            throw new ConversionException(""The value "" + value + "" can't be converted to an URI"", e);
        }
    }","  public void test111()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      URI uRI1 = PropertyConverter.toURI(uRI0);
}"
638,"    public static Path toPath(final Object value) throws ConversionException {
        if (value instanceof File) {
            return ((File) value).toPath();
        }
        if (value instanceof Path) {
            return (Path) value;
        }
        if (value instanceof String) {
            return Paths.get((String) value);
        }
        throw new ConversionException(""The value "" + value + "" can't be converted to a Path"");
    }","  public void test112()  throws Throwable  {
      DefaultConversionHandler defaultConversionHandler0 = new DefaultConversionHandler();
      try { 
        PropertyConverter.toPath(defaultConversionHandler0);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // The value org.apache.commons.configuration2.convert.DefaultConversionHandler@1 can't be converted to a Path
         //
         verifyException(""org.apache.commons.configuration2.convert.PropertyConverter"", e);
      }
  }"
639,"    public static Path toPath(final Object value) throws ConversionException {
        if (value instanceof File) {
            return ((File) value).toPath();
        }
        if (value instanceof Path) {
            return (Path) value;
        }
        if (value instanceof String) {
            return Paths.get((String) value);
        }
        throw new ConversionException(""The value "" + value + "" can't be converted to a Path"");
    }","  public void test113()  throws Throwable  {
      Path path0 = PropertyConverter.toPath(""3VO)iz.hW0"");
      Path path1 = PropertyConverter.toPath(path0);
}"
640,"    public static Path toPath(final Object value) throws ConversionException {
        if (value instanceof File) {
            return ((File) value).toPath();
        }
        if (value instanceof Path) {
            return (Path) value;
        }
        if (value instanceof String) {
            return Paths.get((String) value);
        }
        throw new ConversionException(""The value "" + value + "" can't be converted to a Path"");
    }","  public void test114()  throws Throwable  {
      File file0 = MockFile.createTempFile(""0borg.evosuite.runtime.mock.java.util.MockGregorianCalendar@0000000001"", ""0borg.evosuite.runtime.mock.java.util.MockGregorianCalendar@0000000001"");
      Path path0 = PropertyConverter.toPath(file0);
}"
641,"    public static File toFile(final Object value) throws ConversionException {
        if (value instanceof File) {
            return (File) value;
        }
        if (value instanceof Path) {
            return ((Path) value).toFile();
        }
        if (value instanceof String) {
            return new File((String) value);
        }
        throw new ConversionException(""The value "" + value + "" can't be converted to a File"");
    }","  public void test115()  throws Throwable  {
      Path path0 = PropertyConverter.toPath(""3VO)iz.hW0"");
      File file0 = PropertyConverter.toFile(path0);
}"
642,"    public static BigDecimal toBigDecimal(final Object value) throws ConversionException {
        final Number n = toNumber(value, BigDecimal.class);
        if (n instanceof BigDecimal) {
            return (BigDecimal) n;
        }
        return new BigDecimal(n.doubleValue());
    }","  public void test116()  throws Throwable  {
      BigDecimal bigDecimal0 = new BigDecimal(1508);
      BigDecimal bigDecimal1 = PropertyConverter.toBigDecimal(bigDecimal0);
}"
643,"    public static BigInteger toBigInteger(final Object value) throws ConversionException {
        final Number n = toNumber(value, BigInteger.class);
        if (n instanceof BigInteger) {
            return (BigInteger) n;
        }
        return BigInteger.valueOf(n.longValue());
    }","  public void test117()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = PropertyConverter.toBigInteger(bigInteger0);
}"
644,"    public static Duration toDuration(final Object value) throws ConversionException {
        if (value instanceof Duration) {
            return (Duration) value;
        }
        if (value instanceof CharSequence) {
            try {
                return Duration.parse((CharSequence) value);
            } catch (final DateTimeParseException e) {
                throw new ConversionException(""Could not convert "" + value + "" to Duration"", e);
            }
        }
        throw new ConversionException(""The value "" + value + "" can't be converted to a Duration"");
    }","  public void test118()  throws Throwable  {
      try { 
        PropertyConverter.toDuration(""6"");
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // Could not convert 6 to Duration
         //
         verifyException(""org.apache.commons.configuration2.convert.PropertyConverter"", e);
      }
  }"
645,"    public static Duration toDuration(final Object value) throws ConversionException {
        if (value instanceof Duration) {
            return (Duration) value;
        }
        if (value instanceof CharSequence) {
            try {
                return Duration.parse((CharSequence) value);
            } catch (final DateTimeParseException e) {
                throw new ConversionException(""Could not convert "" + value + "" to Duration"", e);
            }
        }
        throw new ConversionException(""The value "" + value + "" can't be converted to a Duration"");
    }","  public void test119()  throws Throwable  {
      Duration duration0 = Duration.ZERO;
      Duration duration1 = PropertyConverter.toDuration(duration0);
}"
646,"    public static Double toDouble(final Object value) throws ConversionException {
        final Number n = toNumber(value, Double.class);
        if (n instanceof Double) {
            return (Double) n;
        }
        return Double.valueOf(n.doubleValue());
    }","  public void test120()  throws Throwable  {
      Double double0 = new Double(2874.9);
      Double double1 = PropertyConverter.toDouble(double0);
}"
647,"    public static Float toFloat(final Object value) throws ConversionException {
        final Number n = toNumber(value, Float.class);
        if (n instanceof Float) {
            return (Float) n;
        }
        return Float.valueOf(n.floatValue());
    }","  public void test121()  throws Throwable  {
      Float float0 = new Float(774.46537955);
      Float float1 = PropertyConverter.toFloat(float0);
}"
648,"    public static Long toLong(final Object value) throws ConversionException {
        final Number n = toNumber(value, Long.class);
        if (n instanceof Long) {
            return (Long) n;
        }
        return n.longValue();
    }","  public void test122()  throws Throwable  {
      Long long0 = new Long(1008L);
      Long long1 = PropertyConverter.toLong(long0);
}"
649,"    public static Long toLong(final Object value) throws ConversionException {
        final Number n = toNumber(value, Long.class);
        if (n instanceof Long) {
            return (Long) n;
        }
        return n.longValue();
    }","  public void test123()  throws Throwable  {
      Float float0 = new Float(774.46537955);
      Long long0 = PropertyConverter.toLong(float0);
}"
650,"    public static Integer toInteger(final Object value) throws ConversionException {
        final Number n = toNumber(value, Integer.class);
        if (n instanceof Integer) {
            return (Integer) n;
        }
        return n.intValue();
    }","  public void test124()  throws Throwable  {
      Integer integer0 = new Integer('j');
      Integer integer1 = PropertyConverter.toInteger(integer0);
}"
651,"    public static Short toShort(final Object value) throws ConversionException {
        final Number n = toNumber(value, Short.class);
        if (n instanceof Short) {
            return (Short) n;
        }
        return n.shortValue();
    }","  public void test125()  throws Throwable  {
      Short short0 = new Short((short)0);
      Short short1 = PropertyConverter.toShort(short0);
}"
652,"    public static Byte toByte(final Object value) throws ConversionException {
        final Number n = toNumber(value, Byte.class);
        if (n instanceof Byte) {
            return (Byte) n;
        }
        return n.byteValue();
    }","  public void test126()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-46));
      Byte byte1 = PropertyConverter.toByte(byte0);
}"
653,"    public static Byte toByte(final Object value) throws ConversionException {
        final Number n = toNumber(value, Byte.class);
        if (n instanceof Byte) {
            return (Byte) n;
        }
        return n.byteValue();
    }","  public void test127()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      Byte byte0 = PropertyConverter.toByte(bigDecimal0);
}"
654,"    public static Character toCharacter(final Object value) throws ConversionException {
        final String strValue = String.valueOf(value);
        if (strValue.length() == 1) {
            return Character.valueOf(strValue.charAt(0));
        }
        throw new ConversionException(String.format(""The value '%s' cannot be converted to a Character object!"", strValue));
    }","  public void test128()  throws Throwable  {
      Byte byte0 = new Byte((byte)0);
      Character character0 = PropertyConverter.toCharacter(byte0);
}"
655,"    public static Boolean toBoolean(final Object value) throws ConversionException {
        if (value instanceof Boolean) {
            return (Boolean) value;
        }
        if (!(value instanceof String)) {
            throw new ConversionException(""The value "" + value + "" can't be converted to a Boolean object"");
        }
        final Boolean b = BooleanUtils.toBooleanObject((String) value);
        if (b == null) {
            throw new ConversionException(""The value "" + value + "" can't be converted to a Boolean object"");
        }
        return b;
    }","  public void test129()  throws Throwable  {
      try { 
        PropertyConverter.toBoolean(""java.lang.BDolean"");
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // The value java.lang.BDolean can't be converted to a Boolean object
         //
         verifyException(""org.apache.commons.configuration2.convert.PropertyConverter"", e);
      }
  }"
656,"    public static Boolean toBoolean(final Object value) throws ConversionException {
        if (value instanceof Boolean) {
            return (Boolean) value;
        }
        if (!(value instanceof String)) {
            throw new ConversionException(""The value "" + value + "" can't be converted to a Boolean object"");
        }
        final Boolean b = BooleanUtils.toBooleanObject((String) value);
        if (b == null) {
            throw new ConversionException(""The value "" + value + "" can't be converted to a Boolean object"");
        }
        return b;
    }","  public void test130()  throws Throwable  {
      Boolean boolean0 = PropertyConverter.toBoolean(""1"");
}"
657,"    public static Object to(final Class<?> cls, final Object value, final DefaultConversionHandler convHandler) throws ConversionException {
        if (cls.isInstance(value)) {
            return value; // no conversion needed
        }

        if (String.class.equals(cls)) {
            return String.valueOf(value);
        }
        if (Boolean.class.equals(cls) || Boolean.TYPE.equals(cls)) {
            return toBoolean(value);
        }
        if (Character.class.equals(cls) || Character.TYPE.equals(cls)) {
            return toCharacter(value);
        }
        if (Number.class.isAssignableFrom(cls) || cls.isPrimitive()) {
            if (Integer.class.equals(cls) || Integer.TYPE.equals(cls)) {
                return toInteger(value);
            }
            if (Long.class.equals(cls) || Long.TYPE.equals(cls)) {
                return toLong(value);
            }
            if (Byte.class.equals(cls) || Byte.TYPE.equals(cls)) {
                return toByte(value);
            }
            if (Short.class.equals(cls) || Short.TYPE.equals(cls)) {
                return toShort(value);
            }
            if (Float.class.equals(cls) || Float.TYPE.equals(cls)) {
                return toFloat(value);
            }
            if (Double.class.equals(cls) || Double.TYPE.equals(cls)) {
                return toDouble(value);
            }
            if (BigInteger.class.equals(cls)) {
                return toBigInteger(value);
            }
            if (BigDecimal.class.equals(cls)) {
                return toBigDecimal(value);
            }
        } else if (Date.class.equals(cls)) {
            return toDate(value, convHandler.getDateFormat());
        } else if (Calendar.class.equals(cls)) {
            return toCalendar(value, convHandler.getDateFormat());
        } else if (File.class.equals(cls)) {
            return toFile(value);
        } else if (Path.class.equals(cls)) {
            return toPath(value);
        } else if (URI.class.equals(cls)) {
            return toURI(value);
        } else if (URL.class.equals(cls)) {
            return toURL(value);
        } else if (Pattern.class.equals(cls)) {
            return toPattern(value);
        } else if (Locale.class.equals(cls)) {
            return toLocale(value);
        } else if (isEnum(cls)) {
            return convertToEnum(cls, value);
        } else if (Color.class.equals(cls)) {
            return toColor(value);
        } else if (cls.getName().equals(INTERNET_ADDRESS_CLASSNAME_JAVAX)) {
            // javamail-1.* With javax.mail.* namespace.
            return toInternetAddress(value, INTERNET_ADDRESS_CLASSNAME_JAVAX);
        } else if (cls.getName().equals(INTERNET_ADDRESS_CLASSNAME_JAKARTA)) {
            // javamail-2.0+, with jakarta.mail.* namespace.
            return toInternetAddress(value, INTERNET_ADDRESS_CLASSNAME_JAKARTA);
        } else if (InetAddress.class.isAssignableFrom(cls)) {
            return toInetAddress(value);
        } else if (Duration.class.equals(cls)) {
            return toDuration(value);
        }

        throw new ConversionException(""The value '"" + value + ""' ("" + value.getClass() + "")"" + "" can't be converted to a "" + cls.getName() + "" object"");
    }","  public void test131()  throws Throwable  {
      DefaultConversionHandler defaultConversionHandler0 = new DefaultConversionHandler();
      StringWriter stringWriter0 = new StringWriter('j');
      Class<Duration> class0 = Duration.class;
      try { 
        PropertyConverter.to(class0, stringWriter0, defaultConversionHandler0);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // The value  can't be converted to a Duration
         //
         verifyException(""org.apache.commons.configuration2.convert.PropertyConverter"", e);
      }
  }"
658,"    public static Object to(final Class<?> cls, final Object value, final DefaultConversionHandler convHandler) throws ConversionException {
        if (cls.isInstance(value)) {
            return value; // no conversion needed
        }

        if (String.class.equals(cls)) {
            return String.valueOf(value);
        }
        if (Boolean.class.equals(cls) || Boolean.TYPE.equals(cls)) {
            return toBoolean(value);
        }
        if (Character.class.equals(cls) || Character.TYPE.equals(cls)) {
            return toCharacter(value);
        }
        if (Number.class.isAssignableFrom(cls) || cls.isPrimitive()) {
            if (Integer.class.equals(cls) || Integer.TYPE.equals(cls)) {
                return toInteger(value);
            }
            if (Long.class.equals(cls) || Long.TYPE.equals(cls)) {
                return toLong(value);
            }
            if (Byte.class.equals(cls) || Byte.TYPE.equals(cls)) {
                return toByte(value);
            }
            if (Short.class.equals(cls) || Short.TYPE.equals(cls)) {
                return toShort(value);
            }
            if (Float.class.equals(cls) || Float.TYPE.equals(cls)) {
                return toFloat(value);
            }
            if (Double.class.equals(cls) || Double.TYPE.equals(cls)) {
                return toDouble(value);
            }
            if (BigInteger.class.equals(cls)) {
                return toBigInteger(value);
            }
            if (BigDecimal.class.equals(cls)) {
                return toBigDecimal(value);
            }
        } else if (Date.class.equals(cls)) {
            return toDate(value, convHandler.getDateFormat());
        } else if (Calendar.class.equals(cls)) {
            return toCalendar(value, convHandler.getDateFormat());
        } else if (File.class.equals(cls)) {
            return toFile(value);
        } else if (Path.class.equals(cls)) {
            return toPath(value);
        } else if (URI.class.equals(cls)) {
            return toURI(value);
        } else if (URL.class.equals(cls)) {
            return toURL(value);
        } else if (Pattern.class.equals(cls)) {
            return toPattern(value);
        } else if (Locale.class.equals(cls)) {
            return toLocale(value);
        } else if (isEnum(cls)) {
            return convertToEnum(cls, value);
        } else if (Color.class.equals(cls)) {
            return toColor(value);
        } else if (cls.getName().equals(INTERNET_ADDRESS_CLASSNAME_JAVAX)) {
            // javamail-1.* With javax.mail.* namespace.
            return toInternetAddress(value, INTERNET_ADDRESS_CLASSNAME_JAVAX);
        } else if (cls.getName().equals(INTERNET_ADDRESS_CLASSNAME_JAKARTA)) {
            // javamail-2.0+, with jakarta.mail.* namespace.
            return toInternetAddress(value, INTERNET_ADDRESS_CLASSNAME_JAKARTA);
        } else if (InetAddress.class.isAssignableFrom(cls)) {
            return toInetAddress(value);
        } else if (Duration.class.equals(cls)) {
            return toDuration(value);
        }

        throw new ConversionException(""The value '"" + value + ""' ("" + value.getClass() + "")"" + "" can't be converted to a "" + cls.getName() + "" object"");
    }","  public void test132()  throws Throwable  {
      Class<InetAddress> class0 = InetAddress.class;
      DefaultConversionHandler defaultConversionHandler0 = DefaultConversionHandler.INSTANCE;
      Inet4Address inet4Address0 = (Inet4Address)PropertyConverter.to(class0, "" can't be converted to a Boolean object"", defaultConversionHandler0);
}"
659,"    public static Object to(final Class<?> cls, final Object value, final DefaultConversionHandler convHandler) throws ConversionException {
        if (cls.isInstance(value)) {
            return value; // no conversion needed
        }

        if (String.class.equals(cls)) {
            return String.valueOf(value);
        }
        if (Boolean.class.equals(cls) || Boolean.TYPE.equals(cls)) {
            return toBoolean(value);
        }
        if (Character.class.equals(cls) || Character.TYPE.equals(cls)) {
            return toCharacter(value);
        }
        if (Number.class.isAssignableFrom(cls) || cls.isPrimitive()) {
            if (Integer.class.equals(cls) || Integer.TYPE.equals(cls)) {
                return toInteger(value);
            }
            if (Long.class.equals(cls) || Long.TYPE.equals(cls)) {
                return toLong(value);
            }
            if (Byte.class.equals(cls) || Byte.TYPE.equals(cls)) {
                return toByte(value);
            }
            if (Short.class.equals(cls) || Short.TYPE.equals(cls)) {
                return toShort(value);
            }
            if (Float.class.equals(cls) || Float.TYPE.equals(cls)) {
                return toFloat(value);
            }
            if (Double.class.equals(cls) || Double.TYPE.equals(cls)) {
                return toDouble(value);
            }
            if (BigInteger.class.equals(cls)) {
                return toBigInteger(value);
            }
            if (BigDecimal.class.equals(cls)) {
                return toBigDecimal(value);
            }
        } else if (Date.class.equals(cls)) {
            return toDate(value, convHandler.getDateFormat());
        } else if (Calendar.class.equals(cls)) {
            return toCalendar(value, convHandler.getDateFormat());
        } else if (File.class.equals(cls)) {
            return toFile(value);
        } else if (Path.class.equals(cls)) {
            return toPath(value);
        } else if (URI.class.equals(cls)) {
            return toURI(value);
        } else if (URL.class.equals(cls)) {
            return toURL(value);
        } else if (Pattern.class.equals(cls)) {
            return toPattern(value);
        } else if (Locale.class.equals(cls)) {
            return toLocale(value);
        } else if (isEnum(cls)) {
            return convertToEnum(cls, value);
        } else if (Color.class.equals(cls)) {
            return toColor(value);
        } else if (cls.getName().equals(INTERNET_ADDRESS_CLASSNAME_JAVAX)) {
            // javamail-1.* With javax.mail.* namespace.
            return toInternetAddress(value, INTERNET_ADDRESS_CLASSNAME_JAVAX);
        } else if (cls.getName().equals(INTERNET_ADDRESS_CLASSNAME_JAKARTA)) {
            // javamail-2.0+, with jakarta.mail.* namespace.
            return toInternetAddress(value, INTERNET_ADDRESS_CLASSNAME_JAKARTA);
        } else if (InetAddress.class.isAssignableFrom(cls)) {
            return toInetAddress(value);
        } else if (Duration.class.equals(cls)) {
            return toDuration(value);
        }

        throw new ConversionException(""The value '"" + value + ""' ("" + value.getClass() + "")"" + "" can't be converted to a "" + cls.getName() + "" object"");
    }","  public void test133()  throws Throwable  {
      Class<Color> class0 = Color.class;
      DefaultConversionHandler defaultConversionHandler0 = new DefaultConversionHandler();
      try { 
        PropertyConverter.to(class0, class0, defaultConversionHandler0);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // The value class java.awt.Color can't be converted to a Color
         //
         verifyException(""org.apache.commons.configuration2.convert.PropertyConverter"", e);
      }
  }"
660,"    public static Object to(final Class<?> cls, final Object value, final DefaultConversionHandler convHandler) throws ConversionException {
        if (cls.isInstance(value)) {
            return value; // no conversion needed
        }

        if (String.class.equals(cls)) {
            return String.valueOf(value);
        }
        if (Boolean.class.equals(cls) || Boolean.TYPE.equals(cls)) {
            return toBoolean(value);
        }
        if (Character.class.equals(cls) || Character.TYPE.equals(cls)) {
            return toCharacter(value);
        }
        if (Number.class.isAssignableFrom(cls) || cls.isPrimitive()) {
            if (Integer.class.equals(cls) || Integer.TYPE.equals(cls)) {
                return toInteger(value);
            }
            if (Long.class.equals(cls) || Long.TYPE.equals(cls)) {
                return toLong(value);
            }
            if (Byte.class.equals(cls) || Byte.TYPE.equals(cls)) {
                return toByte(value);
            }
            if (Short.class.equals(cls) || Short.TYPE.equals(cls)) {
                return toShort(value);
            }
            if (Float.class.equals(cls) || Float.TYPE.equals(cls)) {
                return toFloat(value);
            }
            if (Double.class.equals(cls) || Double.TYPE.equals(cls)) {
                return toDouble(value);
            }
            if (BigInteger.class.equals(cls)) {
                return toBigInteger(value);
            }
            if (BigDecimal.class.equals(cls)) {
                return toBigDecimal(value);
            }
        } else if (Date.class.equals(cls)) {
            return toDate(value, convHandler.getDateFormat());
        } else if (Calendar.class.equals(cls)) {
            return toCalendar(value, convHandler.getDateFormat());
        } else if (File.class.equals(cls)) {
            return toFile(value);
        } else if (Path.class.equals(cls)) {
            return toPath(value);
        } else if (URI.class.equals(cls)) {
            return toURI(value);
        } else if (URL.class.equals(cls)) {
            return toURL(value);
        } else if (Pattern.class.equals(cls)) {
            return toPattern(value);
        } else if (Locale.class.equals(cls)) {
            return toLocale(value);
        } else if (isEnum(cls)) {
            return convertToEnum(cls, value);
        } else if (Color.class.equals(cls)) {
            return toColor(value);
        } else if (cls.getName().equals(INTERNET_ADDRESS_CLASSNAME_JAVAX)) {
            // javamail-1.* With javax.mail.* namespace.
            return toInternetAddress(value, INTERNET_ADDRESS_CLASSNAME_JAVAX);
        } else if (cls.getName().equals(INTERNET_ADDRESS_CLASSNAME_JAKARTA)) {
            // javamail-2.0+, with jakarta.mail.* namespace.
            return toInternetAddress(value, INTERNET_ADDRESS_CLASSNAME_JAKARTA);
        } else if (InetAddress.class.isAssignableFrom(cls)) {
            return toInetAddress(value);
        } else if (Duration.class.equals(cls)) {
            return toDuration(value);
        }

        throw new ConversionException(""The value '"" + value + ""' ("" + value.getClass() + "")"" + "" can't be converted to a "" + cls.getName() + "" object"");
    }","  public void test134()  throws Throwable  {
      Class<CharBuffer> class0 = CharBuffer.class;
      Float float0 = new Float(431.86);
      DefaultConversionHandler defaultConversionHandler0 = DefaultConversionHandler.INSTANCE;
      try { 
        PropertyConverter.to(class0, float0, defaultConversionHandler0);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // The value '431.86' (class java.lang.Float) can't be converted to a java.nio.CharBuffer object
         //
         verifyException(""org.apache.commons.configuration2.convert.PropertyConverter"", e);
      }
  }"
661,"    public static Object to(final Class<?> cls, final Object value, final DefaultConversionHandler convHandler) throws ConversionException {
        if (cls.isInstance(value)) {
            return value; // no conversion needed
        }

        if (String.class.equals(cls)) {
            return String.valueOf(value);
        }
        if (Boolean.class.equals(cls) || Boolean.TYPE.equals(cls)) {
            return toBoolean(value);
        }
        if (Character.class.equals(cls) || Character.TYPE.equals(cls)) {
            return toCharacter(value);
        }
        if (Number.class.isAssignableFrom(cls) || cls.isPrimitive()) {
            if (Integer.class.equals(cls) || Integer.TYPE.equals(cls)) {
                return toInteger(value);
            }
            if (Long.class.equals(cls) || Long.TYPE.equals(cls)) {
                return toLong(value);
            }
            if (Byte.class.equals(cls) || Byte.TYPE.equals(cls)) {
                return toByte(value);
            }
            if (Short.class.equals(cls) || Short.TYPE.equals(cls)) {
                return toShort(value);
            }
            if (Float.class.equals(cls) || Float.TYPE.equals(cls)) {
                return toFloat(value);
            }
            if (Double.class.equals(cls) || Double.TYPE.equals(cls)) {
                return toDouble(value);
            }
            if (BigInteger.class.equals(cls)) {
                return toBigInteger(value);
            }
            if (BigDecimal.class.equals(cls)) {
                return toBigDecimal(value);
            }
        } else if (Date.class.equals(cls)) {
            return toDate(value, convHandler.getDateFormat());
        } else if (Calendar.class.equals(cls)) {
            return toCalendar(value, convHandler.getDateFormat());
        } else if (File.class.equals(cls)) {
            return toFile(value);
        } else if (Path.class.equals(cls)) {
            return toPath(value);
        } else if (URI.class.equals(cls)) {
            return toURI(value);
        } else if (URL.class.equals(cls)) {
            return toURL(value);
        } else if (Pattern.class.equals(cls)) {
            return toPattern(value);
        } else if (Locale.class.equals(cls)) {
            return toLocale(value);
        } else if (isEnum(cls)) {
            return convertToEnum(cls, value);
        } else if (Color.class.equals(cls)) {
            return toColor(value);
        } else if (cls.getName().equals(INTERNET_ADDRESS_CLASSNAME_JAVAX)) {
            // javamail-1.* With javax.mail.* namespace.
            return toInternetAddress(value, INTERNET_ADDRESS_CLASSNAME_JAVAX);
        } else if (cls.getName().equals(INTERNET_ADDRESS_CLASSNAME_JAKARTA)) {
            // javamail-2.0+, with jakarta.mail.* namespace.
            return toInternetAddress(value, INTERNET_ADDRESS_CLASSNAME_JAKARTA);
        } else if (InetAddress.class.isAssignableFrom(cls)) {
            return toInetAddress(value);
        } else if (Duration.class.equals(cls)) {
            return toDuration(value);
        }

        throw new ConversionException(""The value '"" + value + ""' ("" + value.getClass() + "")"" + "" can't be converted to a "" + cls.getName() + "" object"");
    }","  public void test135()  throws Throwable  {
      Class<Locale> class0 = Locale.class;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = Calendar.getAvailableCalendarTypes();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      DefaultConversionHandler defaultConversionHandler0 = new DefaultConversionHandler();
      try { 
        PropertyConverter.to(class0, list0, defaultConversionHandler0);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // The value [] can't be converted to a Locale
         //
         verifyException(""org.apache.commons.configuration2.convert.PropertyConverter"", e);
      }
  }"
662,"    public static Object to(final Class<?> cls, final Object value, final DefaultConversionHandler convHandler) throws ConversionException {
        if (cls.isInstance(value)) {
            return value; // no conversion needed
        }

        if (String.class.equals(cls)) {
            return String.valueOf(value);
        }
        if (Boolean.class.equals(cls) || Boolean.TYPE.equals(cls)) {
            return toBoolean(value);
        }
        if (Character.class.equals(cls) || Character.TYPE.equals(cls)) {
            return toCharacter(value);
        }
        if (Number.class.isAssignableFrom(cls) || cls.isPrimitive()) {
            if (Integer.class.equals(cls) || Integer.TYPE.equals(cls)) {
                return toInteger(value);
            }
            if (Long.class.equals(cls) || Long.TYPE.equals(cls)) {
                return toLong(value);
            }
            if (Byte.class.equals(cls) || Byte.TYPE.equals(cls)) {
                return toByte(value);
            }
            if (Short.class.equals(cls) || Short.TYPE.equals(cls)) {
                return toShort(value);
            }
            if (Float.class.equals(cls) || Float.TYPE.equals(cls)) {
                return toFloat(value);
            }
            if (Double.class.equals(cls) || Double.TYPE.equals(cls)) {
                return toDouble(value);
            }
            if (BigInteger.class.equals(cls)) {
                return toBigInteger(value);
            }
            if (BigDecimal.class.equals(cls)) {
                return toBigDecimal(value);
            }
        } else if (Date.class.equals(cls)) {
            return toDate(value, convHandler.getDateFormat());
        } else if (Calendar.class.equals(cls)) {
            return toCalendar(value, convHandler.getDateFormat());
        } else if (File.class.equals(cls)) {
            return toFile(value);
        } else if (Path.class.equals(cls)) {
            return toPath(value);
        } else if (URI.class.equals(cls)) {
            return toURI(value);
        } else if (URL.class.equals(cls)) {
            return toURL(value);
        } else if (Pattern.class.equals(cls)) {
            return toPattern(value);
        } else if (Locale.class.equals(cls)) {
            return toLocale(value);
        } else if (isEnum(cls)) {
            return convertToEnum(cls, value);
        } else if (Color.class.equals(cls)) {
            return toColor(value);
        } else if (cls.getName().equals(INTERNET_ADDRESS_CLASSNAME_JAVAX)) {
            // javamail-1.* With javax.mail.* namespace.
            return toInternetAddress(value, INTERNET_ADDRESS_CLASSNAME_JAVAX);
        } else if (cls.getName().equals(INTERNET_ADDRESS_CLASSNAME_JAKARTA)) {
            // javamail-2.0+, with jakarta.mail.* namespace.
            return toInternetAddress(value, INTERNET_ADDRESS_CLASSNAME_JAKARTA);
        } else if (InetAddress.class.isAssignableFrom(cls)) {
            return toInetAddress(value);
        } else if (Duration.class.equals(cls)) {
            return toDuration(value);
        }

        throw new ConversionException(""The value '"" + value + ""' ("" + value.getClass() + "")"" + "" can't be converted to a "" + cls.getName() + "" object"");
    }","  public void test136()  throws Throwable  {
      Class<Pattern> class0 = Pattern.class;
      DefaultConversionHandler defaultConversionHandler0 = DefaultConversionHandler.INSTANCE;
      try { 
        PropertyConverter.to(class0, class0, defaultConversionHandler0);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // The value class java.util.regex.Pattern can't be converted to a Pattern
         //
         verifyException(""org.apache.commons.configuration2.convert.PropertyConverter"", e);
      }
  }"
663,"    public static Object to(final Class<?> cls, final Object value, final DefaultConversionHandler convHandler) throws ConversionException {
        if (cls.isInstance(value)) {
            return value; // no conversion needed
        }

        if (String.class.equals(cls)) {
            return String.valueOf(value);
        }
        if (Boolean.class.equals(cls) || Boolean.TYPE.equals(cls)) {
            return toBoolean(value);
        }
        if (Character.class.equals(cls) || Character.TYPE.equals(cls)) {
            return toCharacter(value);
        }
        if (Number.class.isAssignableFrom(cls) || cls.isPrimitive()) {
            if (Integer.class.equals(cls) || Integer.TYPE.equals(cls)) {
                return toInteger(value);
            }
            if (Long.class.equals(cls) || Long.TYPE.equals(cls)) {
                return toLong(value);
            }
            if (Byte.class.equals(cls) || Byte.TYPE.equals(cls)) {
                return toByte(value);
            }
            if (Short.class.equals(cls) || Short.TYPE.equals(cls)) {
                return toShort(value);
            }
            if (Float.class.equals(cls) || Float.TYPE.equals(cls)) {
                return toFloat(value);
            }
            if (Double.class.equals(cls) || Double.TYPE.equals(cls)) {
                return toDouble(value);
            }
            if (BigInteger.class.equals(cls)) {
                return toBigInteger(value);
            }
            if (BigDecimal.class.equals(cls)) {
                return toBigDecimal(value);
            }
        } else if (Date.class.equals(cls)) {
            return toDate(value, convHandler.getDateFormat());
        } else if (Calendar.class.equals(cls)) {
            return toCalendar(value, convHandler.getDateFormat());
        } else if (File.class.equals(cls)) {
            return toFile(value);
        } else if (Path.class.equals(cls)) {
            return toPath(value);
        } else if (URI.class.equals(cls)) {
            return toURI(value);
        } else if (URL.class.equals(cls)) {
            return toURL(value);
        } else if (Pattern.class.equals(cls)) {
            return toPattern(value);
        } else if (Locale.class.equals(cls)) {
            return toLocale(value);
        } else if (isEnum(cls)) {
            return convertToEnum(cls, value);
        } else if (Color.class.equals(cls)) {
            return toColor(value);
        } else if (cls.getName().equals(INTERNET_ADDRESS_CLASSNAME_JAVAX)) {
            // javamail-1.* With javax.mail.* namespace.
            return toInternetAddress(value, INTERNET_ADDRESS_CLASSNAME_JAVAX);
        } else if (cls.getName().equals(INTERNET_ADDRESS_CLASSNAME_JAKARTA)) {
            // javamail-2.0+, with jakarta.mail.* namespace.
            return toInternetAddress(value, INTERNET_ADDRESS_CLASSNAME_JAKARTA);
        } else if (InetAddress.class.isAssignableFrom(cls)) {
            return toInetAddress(value);
        } else if (Duration.class.equals(cls)) {
            return toDuration(value);
        }

        throw new ConversionException(""The value '"" + value + ""' ("" + value.getClass() + "")"" + "" can't be converted to a "" + cls.getName() + "" object"");
    }","  public void test137()  throws Throwable  {
      Class<URI> class0 = URI.class;
      try { 
        PropertyConverter.to(class0, class0, (DefaultConversionHandler) null);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // The value class java.net.URI can't be converted to an URI
         //
         verifyException(""org.apache.commons.configuration2.convert.PropertyConverter"", e);
      }
  }"
664,"    public static Object to(final Class<?> cls, final Object value, final DefaultConversionHandler convHandler) throws ConversionException {
        if (cls.isInstance(value)) {
            return value; // no conversion needed
        }

        if (String.class.equals(cls)) {
            return String.valueOf(value);
        }
        if (Boolean.class.equals(cls) || Boolean.TYPE.equals(cls)) {
            return toBoolean(value);
        }
        if (Character.class.equals(cls) || Character.TYPE.equals(cls)) {
            return toCharacter(value);
        }
        if (Number.class.isAssignableFrom(cls) || cls.isPrimitive()) {
            if (Integer.class.equals(cls) || Integer.TYPE.equals(cls)) {
                return toInteger(value);
            }
            if (Long.class.equals(cls) || Long.TYPE.equals(cls)) {
                return toLong(value);
            }
            if (Byte.class.equals(cls) || Byte.TYPE.equals(cls)) {
                return toByte(value);
            }
            if (Short.class.equals(cls) || Short.TYPE.equals(cls)) {
                return toShort(value);
            }
            if (Float.class.equals(cls) || Float.TYPE.equals(cls)) {
                return toFloat(value);
            }
            if (Double.class.equals(cls) || Double.TYPE.equals(cls)) {
                return toDouble(value);
            }
            if (BigInteger.class.equals(cls)) {
                return toBigInteger(value);
            }
            if (BigDecimal.class.equals(cls)) {
                return toBigDecimal(value);
            }
        } else if (Date.class.equals(cls)) {
            return toDate(value, convHandler.getDateFormat());
        } else if (Calendar.class.equals(cls)) {
            return toCalendar(value, convHandler.getDateFormat());
        } else if (File.class.equals(cls)) {
            return toFile(value);
        } else if (Path.class.equals(cls)) {
            return toPath(value);
        } else if (URI.class.equals(cls)) {
            return toURI(value);
        } else if (URL.class.equals(cls)) {
            return toURL(value);
        } else if (Pattern.class.equals(cls)) {
            return toPattern(value);
        } else if (Locale.class.equals(cls)) {
            return toLocale(value);
        } else if (isEnum(cls)) {
            return convertToEnum(cls, value);
        } else if (Color.class.equals(cls)) {
            return toColor(value);
        } else if (cls.getName().equals(INTERNET_ADDRESS_CLASSNAME_JAVAX)) {
            // javamail-1.* With javax.mail.* namespace.
            return toInternetAddress(value, INTERNET_ADDRESS_CLASSNAME_JAVAX);
        } else if (cls.getName().equals(INTERNET_ADDRESS_CLASSNAME_JAKARTA)) {
            // javamail-2.0+, with jakarta.mail.* namespace.
            return toInternetAddress(value, INTERNET_ADDRESS_CLASSNAME_JAKARTA);
        } else if (InetAddress.class.isAssignableFrom(cls)) {
            return toInetAddress(value);
        } else if (Duration.class.equals(cls)) {
            return toDuration(value);
        }

        throw new ConversionException(""The value '"" + value + ""' ("" + value.getClass() + "")"" + "" can't be converted to a "" + cls.getName() + "" object"");
    }","  public void test138()  throws Throwable  {
      Class<File> class0 = File.class;
      DefaultConversionHandler defaultConversionHandler0 = new DefaultConversionHandler();
      try { 
        PropertyConverter.to(class0, class0, defaultConversionHandler0);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // The value class java.io.File can't be converted to a File
         //
         verifyException(""org.apache.commons.configuration2.convert.PropertyConverter"", e);
      }
  }"
665,"    public static Object to(final Class<?> cls, final Object value, final DefaultConversionHandler convHandler) throws ConversionException {
        if (cls.isInstance(value)) {
            return value; // no conversion needed
        }

        if (String.class.equals(cls)) {
            return String.valueOf(value);
        }
        if (Boolean.class.equals(cls) || Boolean.TYPE.equals(cls)) {
            return toBoolean(value);
        }
        if (Character.class.equals(cls) || Character.TYPE.equals(cls)) {
            return toCharacter(value);
        }
        if (Number.class.isAssignableFrom(cls) || cls.isPrimitive()) {
            if (Integer.class.equals(cls) || Integer.TYPE.equals(cls)) {
                return toInteger(value);
            }
            if (Long.class.equals(cls) || Long.TYPE.equals(cls)) {
                return toLong(value);
            }
            if (Byte.class.equals(cls) || Byte.TYPE.equals(cls)) {
                return toByte(value);
            }
            if (Short.class.equals(cls) || Short.TYPE.equals(cls)) {
                return toShort(value);
            }
            if (Float.class.equals(cls) || Float.TYPE.equals(cls)) {
                return toFloat(value);
            }
            if (Double.class.equals(cls) || Double.TYPE.equals(cls)) {
                return toDouble(value);
            }
            if (BigInteger.class.equals(cls)) {
                return toBigInteger(value);
            }
            if (BigDecimal.class.equals(cls)) {
                return toBigDecimal(value);
            }
        } else if (Date.class.equals(cls)) {
            return toDate(value, convHandler.getDateFormat());
        } else if (Calendar.class.equals(cls)) {
            return toCalendar(value, convHandler.getDateFormat());
        } else if (File.class.equals(cls)) {
            return toFile(value);
        } else if (Path.class.equals(cls)) {
            return toPath(value);
        } else if (URI.class.equals(cls)) {
            return toURI(value);
        } else if (URL.class.equals(cls)) {
            return toURL(value);
        } else if (Pattern.class.equals(cls)) {
            return toPattern(value);
        } else if (Locale.class.equals(cls)) {
            return toLocale(value);
        } else if (isEnum(cls)) {
            return convertToEnum(cls, value);
        } else if (Color.class.equals(cls)) {
            return toColor(value);
        } else if (cls.getName().equals(INTERNET_ADDRESS_CLASSNAME_JAVAX)) {
            // javamail-1.* With javax.mail.* namespace.
            return toInternetAddress(value, INTERNET_ADDRESS_CLASSNAME_JAVAX);
        } else if (cls.getName().equals(INTERNET_ADDRESS_CLASSNAME_JAKARTA)) {
            // javamail-2.0+, with jakarta.mail.* namespace.
            return toInternetAddress(value, INTERNET_ADDRESS_CLASSNAME_JAKARTA);
        } else if (InetAddress.class.isAssignableFrom(cls)) {
            return toInetAddress(value);
        } else if (Duration.class.equals(cls)) {
            return toDuration(value);
        }

        throw new ConversionException(""The value '"" + value + ""' ("" + value.getClass() + "")"" + "" can't be converted to a "" + cls.getName() + "" object"");
    }","  public void test139()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-46));
      Class<Date> class0 = Date.class;
      DefaultConversionHandler defaultConversionHandler0 = DefaultConversionHandler.INSTANCE;
      try { 
        PropertyConverter.to(class0, byte0, defaultConversionHandler0);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // The value -46 can't be converted to a Date
         //
         verifyException(""org.apache.commons.configuration2.convert.PropertyConverter"", e);
      }
  }"
666,"    public static Object to(final Class<?> cls, final Object value, final DefaultConversionHandler convHandler) throws ConversionException {
        if (cls.isInstance(value)) {
            return value; // no conversion needed
        }

        if (String.class.equals(cls)) {
            return String.valueOf(value);
        }
        if (Boolean.class.equals(cls) || Boolean.TYPE.equals(cls)) {
            return toBoolean(value);
        }
        if (Character.class.equals(cls) || Character.TYPE.equals(cls)) {
            return toCharacter(value);
        }
        if (Number.class.isAssignableFrom(cls) || cls.isPrimitive()) {
            if (Integer.class.equals(cls) || Integer.TYPE.equals(cls)) {
                return toInteger(value);
            }
            if (Long.class.equals(cls) || Long.TYPE.equals(cls)) {
                return toLong(value);
            }
            if (Byte.class.equals(cls) || Byte.TYPE.equals(cls)) {
                return toByte(value);
            }
            if (Short.class.equals(cls) || Short.TYPE.equals(cls)) {
                return toShort(value);
            }
            if (Float.class.equals(cls) || Float.TYPE.equals(cls)) {
                return toFloat(value);
            }
            if (Double.class.equals(cls) || Double.TYPE.equals(cls)) {
                return toDouble(value);
            }
            if (BigInteger.class.equals(cls)) {
                return toBigInteger(value);
            }
            if (BigDecimal.class.equals(cls)) {
                return toBigDecimal(value);
            }
        } else if (Date.class.equals(cls)) {
            return toDate(value, convHandler.getDateFormat());
        } else if (Calendar.class.equals(cls)) {
            return toCalendar(value, convHandler.getDateFormat());
        } else if (File.class.equals(cls)) {
            return toFile(value);
        } else if (Path.class.equals(cls)) {
            return toPath(value);
        } else if (URI.class.equals(cls)) {
            return toURI(value);
        } else if (URL.class.equals(cls)) {
            return toURL(value);
        } else if (Pattern.class.equals(cls)) {
            return toPattern(value);
        } else if (Locale.class.equals(cls)) {
            return toLocale(value);
        } else if (isEnum(cls)) {
            return convertToEnum(cls, value);
        } else if (Color.class.equals(cls)) {
            return toColor(value);
        } else if (cls.getName().equals(INTERNET_ADDRESS_CLASSNAME_JAVAX)) {
            // javamail-1.* With javax.mail.* namespace.
            return toInternetAddress(value, INTERNET_ADDRESS_CLASSNAME_JAVAX);
        } else if (cls.getName().equals(INTERNET_ADDRESS_CLASSNAME_JAKARTA)) {
            // javamail-2.0+, with jakarta.mail.* namespace.
            return toInternetAddress(value, INTERNET_ADDRESS_CLASSNAME_JAKARTA);
        } else if (InetAddress.class.isAssignableFrom(cls)) {
            return toInetAddress(value);
        } else if (Duration.class.equals(cls)) {
            return toDuration(value);
        }

        throw new ConversionException(""The value '"" + value + ""' ("" + value.getClass() + "")"" + "" can't be converted to a "" + cls.getName() + "" object"");
    }","  public void test140()  throws Throwable  {
      Class<BigInteger> class0 = BigInteger.class;
      DefaultConversionHandler defaultConversionHandler0 = DefaultConversionHandler.INSTANCE;
      try { 
        PropertyConverter.to(class0, class0, defaultConversionHandler0);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // Could not convert java.lang.Class@0000000001 to java.math.BigInteger
         //
         verifyException(""org.apache.commons.configuration2.convert.PropertyConverter"", e);
      }
  }"
667,"    public static Object to(final Class<?> cls, final Object value, final DefaultConversionHandler convHandler) throws ConversionException {
        if (cls.isInstance(value)) {
            return value; // no conversion needed
        }

        if (String.class.equals(cls)) {
            return String.valueOf(value);
        }
        if (Boolean.class.equals(cls) || Boolean.TYPE.equals(cls)) {
            return toBoolean(value);
        }
        if (Character.class.equals(cls) || Character.TYPE.equals(cls)) {
            return toCharacter(value);
        }
        if (Number.class.isAssignableFrom(cls) || cls.isPrimitive()) {
            if (Integer.class.equals(cls) || Integer.TYPE.equals(cls)) {
                return toInteger(value);
            }
            if (Long.class.equals(cls) || Long.TYPE.equals(cls)) {
                return toLong(value);
            }
            if (Byte.class.equals(cls) || Byte.TYPE.equals(cls)) {
                return toByte(value);
            }
            if (Short.class.equals(cls) || Short.TYPE.equals(cls)) {
                return toShort(value);
            }
            if (Float.class.equals(cls) || Float.TYPE.equals(cls)) {
                return toFloat(value);
            }
            if (Double.class.equals(cls) || Double.TYPE.equals(cls)) {
                return toDouble(value);
            }
            if (BigInteger.class.equals(cls)) {
                return toBigInteger(value);
            }
            if (BigDecimal.class.equals(cls)) {
                return toBigDecimal(value);
            }
        } else if (Date.class.equals(cls)) {
            return toDate(value, convHandler.getDateFormat());
        } else if (Calendar.class.equals(cls)) {
            return toCalendar(value, convHandler.getDateFormat());
        } else if (File.class.equals(cls)) {
            return toFile(value);
        } else if (Path.class.equals(cls)) {
            return toPath(value);
        } else if (URI.class.equals(cls)) {
            return toURI(value);
        } else if (URL.class.equals(cls)) {
            return toURL(value);
        } else if (Pattern.class.equals(cls)) {
            return toPattern(value);
        } else if (Locale.class.equals(cls)) {
            return toLocale(value);
        } else if (isEnum(cls)) {
            return convertToEnum(cls, value);
        } else if (Color.class.equals(cls)) {
            return toColor(value);
        } else if (cls.getName().equals(INTERNET_ADDRESS_CLASSNAME_JAVAX)) {
            // javamail-1.* With javax.mail.* namespace.
            return toInternetAddress(value, INTERNET_ADDRESS_CLASSNAME_JAVAX);
        } else if (cls.getName().equals(INTERNET_ADDRESS_CLASSNAME_JAKARTA)) {
            // javamail-2.0+, with jakarta.mail.* namespace.
            return toInternetAddress(value, INTERNET_ADDRESS_CLASSNAME_JAKARTA);
        } else if (InetAddress.class.isAssignableFrom(cls)) {
            return toInetAddress(value);
        } else if (Duration.class.equals(cls)) {
            return toDuration(value);
        }

        throw new ConversionException(""The value '"" + value + ""' ("" + value.getClass() + "")"" + "" can't be converted to a "" + cls.getName() + "" object"");
    }","  public void test141()  throws Throwable  {
      Class<BigDecimal> class0 = BigDecimal.class;
      Double double0 = new Double(0.0);
      DefaultConversionHandler defaultConversionHandler0 = new DefaultConversionHandler();
      BigDecimal bigDecimal0 = (BigDecimal)PropertyConverter.to(class0, double0, defaultConversionHandler0);
}"
668,"    public static Object to(final Class<?> cls, final Object value, final DefaultConversionHandler convHandler) throws ConversionException {
        if (cls.isInstance(value)) {
            return value; // no conversion needed
        }

        if (String.class.equals(cls)) {
            return String.valueOf(value);
        }
        if (Boolean.class.equals(cls) || Boolean.TYPE.equals(cls)) {
            return toBoolean(value);
        }
        if (Character.class.equals(cls) || Character.TYPE.equals(cls)) {
            return toCharacter(value);
        }
        if (Number.class.isAssignableFrom(cls) || cls.isPrimitive()) {
            if (Integer.class.equals(cls) || Integer.TYPE.equals(cls)) {
                return toInteger(value);
            }
            if (Long.class.equals(cls) || Long.TYPE.equals(cls)) {
                return toLong(value);
            }
            if (Byte.class.equals(cls) || Byte.TYPE.equals(cls)) {
                return toByte(value);
            }
            if (Short.class.equals(cls) || Short.TYPE.equals(cls)) {
                return toShort(value);
            }
            if (Float.class.equals(cls) || Float.TYPE.equals(cls)) {
                return toFloat(value);
            }
            if (Double.class.equals(cls) || Double.TYPE.equals(cls)) {
                return toDouble(value);
            }
            if (BigInteger.class.equals(cls)) {
                return toBigInteger(value);
            }
            if (BigDecimal.class.equals(cls)) {
                return toBigDecimal(value);
            }
        } else if (Date.class.equals(cls)) {
            return toDate(value, convHandler.getDateFormat());
        } else if (Calendar.class.equals(cls)) {
            return toCalendar(value, convHandler.getDateFormat());
        } else if (File.class.equals(cls)) {
            return toFile(value);
        } else if (Path.class.equals(cls)) {
            return toPath(value);
        } else if (URI.class.equals(cls)) {
            return toURI(value);
        } else if (URL.class.equals(cls)) {
            return toURL(value);
        } else if (Pattern.class.equals(cls)) {
            return toPattern(value);
        } else if (Locale.class.equals(cls)) {
            return toLocale(value);
        } else if (isEnum(cls)) {
            return convertToEnum(cls, value);
        } else if (Color.class.equals(cls)) {
            return toColor(value);
        } else if (cls.getName().equals(INTERNET_ADDRESS_CLASSNAME_JAVAX)) {
            // javamail-1.* With javax.mail.* namespace.
            return toInternetAddress(value, INTERNET_ADDRESS_CLASSNAME_JAVAX);
        } else if (cls.getName().equals(INTERNET_ADDRESS_CLASSNAME_JAKARTA)) {
            // javamail-2.0+, with jakarta.mail.* namespace.
            return toInternetAddress(value, INTERNET_ADDRESS_CLASSNAME_JAKARTA);
        } else if (InetAddress.class.isAssignableFrom(cls)) {
            return toInetAddress(value);
        } else if (Duration.class.equals(cls)) {
            return toDuration(value);
        }

        throw new ConversionException(""The value '"" + value + ""' ("" + value.getClass() + "")"" + "" can't be converted to a "" + cls.getName() + "" object"");
    }","  public void test142()  throws Throwable  {
      Class<Double> class0 = Double.class;
      DefaultConversionHandler defaultConversionHandler0 = DefaultConversionHandler.INSTANCE;
      try { 
        PropertyConverter.to(class0, class0, defaultConversionHandler0);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // Could not convert java.lang.Class@0000000001 to java.lang.Double
         //
         verifyException(""org.apache.commons.configuration2.convert.PropertyConverter"", e);
      }
  }"
669,"    public static Object to(final Class<?> cls, final Object value, final DefaultConversionHandler convHandler) throws ConversionException {
        if (cls.isInstance(value)) {
            return value; // no conversion needed
        }

        if (String.class.equals(cls)) {
            return String.valueOf(value);
        }
        if (Boolean.class.equals(cls) || Boolean.TYPE.equals(cls)) {
            return toBoolean(value);
        }
        if (Character.class.equals(cls) || Character.TYPE.equals(cls)) {
            return toCharacter(value);
        }
        if (Number.class.isAssignableFrom(cls) || cls.isPrimitive()) {
            if (Integer.class.equals(cls) || Integer.TYPE.equals(cls)) {
                return toInteger(value);
            }
            if (Long.class.equals(cls) || Long.TYPE.equals(cls)) {
                return toLong(value);
            }
            if (Byte.class.equals(cls) || Byte.TYPE.equals(cls)) {
                return toByte(value);
            }
            if (Short.class.equals(cls) || Short.TYPE.equals(cls)) {
                return toShort(value);
            }
            if (Float.class.equals(cls) || Float.TYPE.equals(cls)) {
                return toFloat(value);
            }
            if (Double.class.equals(cls) || Double.TYPE.equals(cls)) {
                return toDouble(value);
            }
            if (BigInteger.class.equals(cls)) {
                return toBigInteger(value);
            }
            if (BigDecimal.class.equals(cls)) {
                return toBigDecimal(value);
            }
        } else if (Date.class.equals(cls)) {
            return toDate(value, convHandler.getDateFormat());
        } else if (Calendar.class.equals(cls)) {
            return toCalendar(value, convHandler.getDateFormat());
        } else if (File.class.equals(cls)) {
            return toFile(value);
        } else if (Path.class.equals(cls)) {
            return toPath(value);
        } else if (URI.class.equals(cls)) {
            return toURI(value);
        } else if (URL.class.equals(cls)) {
            return toURL(value);
        } else if (Pattern.class.equals(cls)) {
            return toPattern(value);
        } else if (Locale.class.equals(cls)) {
            return toLocale(value);
        } else if (isEnum(cls)) {
            return convertToEnum(cls, value);
        } else if (Color.class.equals(cls)) {
            return toColor(value);
        } else if (cls.getName().equals(INTERNET_ADDRESS_CLASSNAME_JAVAX)) {
            // javamail-1.* With javax.mail.* namespace.
            return toInternetAddress(value, INTERNET_ADDRESS_CLASSNAME_JAVAX);
        } else if (cls.getName().equals(INTERNET_ADDRESS_CLASSNAME_JAKARTA)) {
            // javamail-2.0+, with jakarta.mail.* namespace.
            return toInternetAddress(value, INTERNET_ADDRESS_CLASSNAME_JAKARTA);
        } else if (InetAddress.class.isAssignableFrom(cls)) {
            return toInetAddress(value);
        } else if (Duration.class.equals(cls)) {
            return toDuration(value);
        }

        throw new ConversionException(""The value '"" + value + ""' ("" + value.getClass() + "")"" + "" can't be converted to a "" + cls.getName() + "" object"");
    }","  public void test143()  throws Throwable  {
      Class<Float> class0 = Float.TYPE;
      DefaultConversionHandler defaultConversionHandler0 = new DefaultConversionHandler();
      try { 
        PropertyConverter.to(class0, class0, defaultConversionHandler0);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // Could not convert java.lang.Class@0000000002 to java.lang.Float
         //
         verifyException(""org.apache.commons.configuration2.convert.PropertyConverter"", e);
      }
  }"
670,"    public static Object to(final Class<?> cls, final Object value, final DefaultConversionHandler convHandler) throws ConversionException {
        if (cls.isInstance(value)) {
            return value; // no conversion needed
        }

        if (String.class.equals(cls)) {
            return String.valueOf(value);
        }
        if (Boolean.class.equals(cls) || Boolean.TYPE.equals(cls)) {
            return toBoolean(value);
        }
        if (Character.class.equals(cls) || Character.TYPE.equals(cls)) {
            return toCharacter(value);
        }
        if (Number.class.isAssignableFrom(cls) || cls.isPrimitive()) {
            if (Integer.class.equals(cls) || Integer.TYPE.equals(cls)) {
                return toInteger(value);
            }
            if (Long.class.equals(cls) || Long.TYPE.equals(cls)) {
                return toLong(value);
            }
            if (Byte.class.equals(cls) || Byte.TYPE.equals(cls)) {
                return toByte(value);
            }
            if (Short.class.equals(cls) || Short.TYPE.equals(cls)) {
                return toShort(value);
            }
            if (Float.class.equals(cls) || Float.TYPE.equals(cls)) {
                return toFloat(value);
            }
            if (Double.class.equals(cls) || Double.TYPE.equals(cls)) {
                return toDouble(value);
            }
            if (BigInteger.class.equals(cls)) {
                return toBigInteger(value);
            }
            if (BigDecimal.class.equals(cls)) {
                return toBigDecimal(value);
            }
        } else if (Date.class.equals(cls)) {
            return toDate(value, convHandler.getDateFormat());
        } else if (Calendar.class.equals(cls)) {
            return toCalendar(value, convHandler.getDateFormat());
        } else if (File.class.equals(cls)) {
            return toFile(value);
        } else if (Path.class.equals(cls)) {
            return toPath(value);
        } else if (URI.class.equals(cls)) {
            return toURI(value);
        } else if (URL.class.equals(cls)) {
            return toURL(value);
        } else if (Pattern.class.equals(cls)) {
            return toPattern(value);
        } else if (Locale.class.equals(cls)) {
            return toLocale(value);
        } else if (isEnum(cls)) {
            return convertToEnum(cls, value);
        } else if (Color.class.equals(cls)) {
            return toColor(value);
        } else if (cls.getName().equals(INTERNET_ADDRESS_CLASSNAME_JAVAX)) {
            // javamail-1.* With javax.mail.* namespace.
            return toInternetAddress(value, INTERNET_ADDRESS_CLASSNAME_JAVAX);
        } else if (cls.getName().equals(INTERNET_ADDRESS_CLASSNAME_JAKARTA)) {
            // javamail-2.0+, with jakarta.mail.* namespace.
            return toInternetAddress(value, INTERNET_ADDRESS_CLASSNAME_JAKARTA);
        } else if (InetAddress.class.isAssignableFrom(cls)) {
            return toInetAddress(value);
        } else if (Duration.class.equals(cls)) {
            return toDuration(value);
        }

        throw new ConversionException(""The value '"" + value + ""' ("" + value.getClass() + "")"" + "" can't be converted to a "" + cls.getName() + "" object"");
    }","  public void test144()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      DefaultConversionHandler defaultConversionHandler0 = DefaultConversionHandler.INSTANCE;
      try { 
        PropertyConverter.to(class0, class0, defaultConversionHandler0);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // Could not convert java.lang.Class@0000000001 to java.lang.Double
         //
         verifyException(""org.apache.commons.configuration2.convert.PropertyConverter"", e);
      }
  }"
671,"    public static Object to(final Class<?> cls, final Object value, final DefaultConversionHandler convHandler) throws ConversionException {
        if (cls.isInstance(value)) {
            return value; // no conversion needed
        }

        if (String.class.equals(cls)) {
            return String.valueOf(value);
        }
        if (Boolean.class.equals(cls) || Boolean.TYPE.equals(cls)) {
            return toBoolean(value);
        }
        if (Character.class.equals(cls) || Character.TYPE.equals(cls)) {
            return toCharacter(value);
        }
        if (Number.class.isAssignableFrom(cls) || cls.isPrimitive()) {
            if (Integer.class.equals(cls) || Integer.TYPE.equals(cls)) {
                return toInteger(value);
            }
            if (Long.class.equals(cls) || Long.TYPE.equals(cls)) {
                return toLong(value);
            }
            if (Byte.class.equals(cls) || Byte.TYPE.equals(cls)) {
                return toByte(value);
            }
            if (Short.class.equals(cls) || Short.TYPE.equals(cls)) {
                return toShort(value);
            }
            if (Float.class.equals(cls) || Float.TYPE.equals(cls)) {
                return toFloat(value);
            }
            if (Double.class.equals(cls) || Double.TYPE.equals(cls)) {
                return toDouble(value);
            }
            if (BigInteger.class.equals(cls)) {
                return toBigInteger(value);
            }
            if (BigDecimal.class.equals(cls)) {
                return toBigDecimal(value);
            }
        } else if (Date.class.equals(cls)) {
            return toDate(value, convHandler.getDateFormat());
        } else if (Calendar.class.equals(cls)) {
            return toCalendar(value, convHandler.getDateFormat());
        } else if (File.class.equals(cls)) {
            return toFile(value);
        } else if (Path.class.equals(cls)) {
            return toPath(value);
        } else if (URI.class.equals(cls)) {
            return toURI(value);
        } else if (URL.class.equals(cls)) {
            return toURL(value);
        } else if (Pattern.class.equals(cls)) {
            return toPattern(value);
        } else if (Locale.class.equals(cls)) {
            return toLocale(value);
        } else if (isEnum(cls)) {
            return convertToEnum(cls, value);
        } else if (Color.class.equals(cls)) {
            return toColor(value);
        } else if (cls.getName().equals(INTERNET_ADDRESS_CLASSNAME_JAVAX)) {
            // javamail-1.* With javax.mail.* namespace.
            return toInternetAddress(value, INTERNET_ADDRESS_CLASSNAME_JAVAX);
        } else if (cls.getName().equals(INTERNET_ADDRESS_CLASSNAME_JAKARTA)) {
            // javamail-2.0+, with jakarta.mail.* namespace.
            return toInternetAddress(value, INTERNET_ADDRESS_CLASSNAME_JAKARTA);
        } else if (InetAddress.class.isAssignableFrom(cls)) {
            return toInetAddress(value);
        } else if (Duration.class.equals(cls)) {
            return toDuration(value);
        }

        throw new ConversionException(""The value '"" + value + ""' ("" + value.getClass() + "")"" + "" can't be converted to a "" + cls.getName() + "" object"");
    }","  public void test145()  throws Throwable  {
      Float float0 = new Float(774.46537955);
      Class<Short> class0 = Short.TYPE;
      DefaultConversionHandler defaultConversionHandler0 = new DefaultConversionHandler();
      Object object0 = PropertyConverter.to(class0, float0, defaultConversionHandler0);
}"
672,"    public static Integer toInteger(final Object value) throws ConversionException {
        final Number n = toNumber(value, Integer.class);
        if (n instanceof Integer) {
            return (Integer) n;
        }
        return n.intValue();
    }","  public void test146()  throws Throwable  {
      Float float0 = new Float(774.46537955);
      Class<Short> class0 = Short.TYPE;
      DefaultConversionHandler defaultConversionHandler0 = new DefaultConversionHandler();
      Object object0 = PropertyConverter.to(class0, float0, defaultConversionHandler0);
      Integer integer0 = PropertyConverter.toInteger(object0);
}"
673,"    public static Object to(final Class<?> cls, final Object value, final DefaultConversionHandler convHandler) throws ConversionException {
        if (cls.isInstance(value)) {
            return value; // no conversion needed
        }

        if (String.class.equals(cls)) {
            return String.valueOf(value);
        }
        if (Boolean.class.equals(cls) || Boolean.TYPE.equals(cls)) {
            return toBoolean(value);
        }
        if (Character.class.equals(cls) || Character.TYPE.equals(cls)) {
            return toCharacter(value);
        }
        if (Number.class.isAssignableFrom(cls) || cls.isPrimitive()) {
            if (Integer.class.equals(cls) || Integer.TYPE.equals(cls)) {
                return toInteger(value);
            }
            if (Long.class.equals(cls) || Long.TYPE.equals(cls)) {
                return toLong(value);
            }
            if (Byte.class.equals(cls) || Byte.TYPE.equals(cls)) {
                return toByte(value);
            }
            if (Short.class.equals(cls) || Short.TYPE.equals(cls)) {
                return toShort(value);
            }
            if (Float.class.equals(cls) || Float.TYPE.equals(cls)) {
                return toFloat(value);
            }
            if (Double.class.equals(cls) || Double.TYPE.equals(cls)) {
                return toDouble(value);
            }
            if (BigInteger.class.equals(cls)) {
                return toBigInteger(value);
            }
            if (BigDecimal.class.equals(cls)) {
                return toBigDecimal(value);
            }
        } else if (Date.class.equals(cls)) {
            return toDate(value, convHandler.getDateFormat());
        } else if (Calendar.class.equals(cls)) {
            return toCalendar(value, convHandler.getDateFormat());
        } else if (File.class.equals(cls)) {
            return toFile(value);
        } else if (Path.class.equals(cls)) {
            return toPath(value);
        } else if (URI.class.equals(cls)) {
            return toURI(value);
        } else if (URL.class.equals(cls)) {
            return toURL(value);
        } else if (Pattern.class.equals(cls)) {
            return toPattern(value);
        } else if (Locale.class.equals(cls)) {
            return toLocale(value);
        } else if (isEnum(cls)) {
            return convertToEnum(cls, value);
        } else if (Color.class.equals(cls)) {
            return toColor(value);
        } else if (cls.getName().equals(INTERNET_ADDRESS_CLASSNAME_JAVAX)) {
            // javamail-1.* With javax.mail.* namespace.
            return toInternetAddress(value, INTERNET_ADDRESS_CLASSNAME_JAVAX);
        } else if (cls.getName().equals(INTERNET_ADDRESS_CLASSNAME_JAKARTA)) {
            // javamail-2.0+, with jakarta.mail.* namespace.
            return toInternetAddress(value, INTERNET_ADDRESS_CLASSNAME_JAKARTA);
        } else if (InetAddress.class.isAssignableFrom(cls)) {
            return toInetAddress(value);
        } else if (Duration.class.equals(cls)) {
            return toDuration(value);
        }

        throw new ConversionException(""The value '"" + value + ""' ("" + value.getClass() + "")"" + "" can't be converted to a "" + cls.getName() + "" object"");
    }","  public void test147()  throws Throwable  {
      Float float0 = new Float(774.46537955);
      Class<Short> class0 = Short.class;
      DefaultConversionHandler defaultConversionHandler0 = new DefaultConversionHandler();
      Object object0 = PropertyConverter.to(class0, float0, defaultConversionHandler0);
}"
674,"    public static Object to(final Class<?> cls, final Object value, final DefaultConversionHandler convHandler) throws ConversionException {
        if (cls.isInstance(value)) {
            return value; // no conversion needed
        }

        if (String.class.equals(cls)) {
            return String.valueOf(value);
        }
        if (Boolean.class.equals(cls) || Boolean.TYPE.equals(cls)) {
            return toBoolean(value);
        }
        if (Character.class.equals(cls) || Character.TYPE.equals(cls)) {
            return toCharacter(value);
        }
        if (Number.class.isAssignableFrom(cls) || cls.isPrimitive()) {
            if (Integer.class.equals(cls) || Integer.TYPE.equals(cls)) {
                return toInteger(value);
            }
            if (Long.class.equals(cls) || Long.TYPE.equals(cls)) {
                return toLong(value);
            }
            if (Byte.class.equals(cls) || Byte.TYPE.equals(cls)) {
                return toByte(value);
            }
            if (Short.class.equals(cls) || Short.TYPE.equals(cls)) {
                return toShort(value);
            }
            if (Float.class.equals(cls) || Float.TYPE.equals(cls)) {
                return toFloat(value);
            }
            if (Double.class.equals(cls) || Double.TYPE.equals(cls)) {
                return toDouble(value);
            }
            if (BigInteger.class.equals(cls)) {
                return toBigInteger(value);
            }
            if (BigDecimal.class.equals(cls)) {
                return toBigDecimal(value);
            }
        } else if (Date.class.equals(cls)) {
            return toDate(value, convHandler.getDateFormat());
        } else if (Calendar.class.equals(cls)) {
            return toCalendar(value, convHandler.getDateFormat());
        } else if (File.class.equals(cls)) {
            return toFile(value);
        } else if (Path.class.equals(cls)) {
            return toPath(value);
        } else if (URI.class.equals(cls)) {
            return toURI(value);
        } else if (URL.class.equals(cls)) {
            return toURL(value);
        } else if (Pattern.class.equals(cls)) {
            return toPattern(value);
        } else if (Locale.class.equals(cls)) {
            return toLocale(value);
        } else if (isEnum(cls)) {
            return convertToEnum(cls, value);
        } else if (Color.class.equals(cls)) {
            return toColor(value);
        } else if (cls.getName().equals(INTERNET_ADDRESS_CLASSNAME_JAVAX)) {
            // javamail-1.* With javax.mail.* namespace.
            return toInternetAddress(value, INTERNET_ADDRESS_CLASSNAME_JAVAX);
        } else if (cls.getName().equals(INTERNET_ADDRESS_CLASSNAME_JAKARTA)) {
            // javamail-2.0+, with jakarta.mail.* namespace.
            return toInternetAddress(value, INTERNET_ADDRESS_CLASSNAME_JAKARTA);
        } else if (InetAddress.class.isAssignableFrom(cls)) {
            return toInetAddress(value);
        } else if (Duration.class.equals(cls)) {
            return toDuration(value);
        }

        throw new ConversionException(""The value '"" + value + ""' ("" + value.getClass() + "")"" + "" can't be converted to a "" + cls.getName() + "" object"");
    }","  public void test148()  throws Throwable  {
      DefaultConversionHandler defaultConversionHandler0 = DefaultConversionHandler.INSTANCE;
      Class<Float> class0 = Float.class;
      Short short0 = new Short((short) (-1024));
      Object object0 = PropertyConverter.to(class0, short0, defaultConversionHandler0);
}"
675,"    public static Double toDouble(final Object value) throws ConversionException {
        final Number n = toNumber(value, Double.class);
        if (n instanceof Double) {
            return (Double) n;
        }
        return Double.valueOf(n.doubleValue());
    }","  public void test149()  throws Throwable  {
      DefaultConversionHandler defaultConversionHandler0 = DefaultConversionHandler.INSTANCE;
      Class<Float> class0 = Float.class;
      Short short0 = new Short((short) (-1024));
      Object object0 = PropertyConverter.to(class0, short0, defaultConversionHandler0);
      Double double0 = PropertyConverter.toDouble(object0);
}"
676,"    public static Object to(final Class<?> cls, final Object value, final DefaultConversionHandler convHandler) throws ConversionException {
        if (cls.isInstance(value)) {
            return value; // no conversion needed
        }

        if (String.class.equals(cls)) {
            return String.valueOf(value);
        }
        if (Boolean.class.equals(cls) || Boolean.TYPE.equals(cls)) {
            return toBoolean(value);
        }
        if (Character.class.equals(cls) || Character.TYPE.equals(cls)) {
            return toCharacter(value);
        }
        if (Number.class.isAssignableFrom(cls) || cls.isPrimitive()) {
            if (Integer.class.equals(cls) || Integer.TYPE.equals(cls)) {
                return toInteger(value);
            }
            if (Long.class.equals(cls) || Long.TYPE.equals(cls)) {
                return toLong(value);
            }
            if (Byte.class.equals(cls) || Byte.TYPE.equals(cls)) {
                return toByte(value);
            }
            if (Short.class.equals(cls) || Short.TYPE.equals(cls)) {
                return toShort(value);
            }
            if (Float.class.equals(cls) || Float.TYPE.equals(cls)) {
                return toFloat(value);
            }
            if (Double.class.equals(cls) || Double.TYPE.equals(cls)) {
                return toDouble(value);
            }
            if (BigInteger.class.equals(cls)) {
                return toBigInteger(value);
            }
            if (BigDecimal.class.equals(cls)) {
                return toBigDecimal(value);
            }
        } else if (Date.class.equals(cls)) {
            return toDate(value, convHandler.getDateFormat());
        } else if (Calendar.class.equals(cls)) {
            return toCalendar(value, convHandler.getDateFormat());
        } else if (File.class.equals(cls)) {
            return toFile(value);
        } else if (Path.class.equals(cls)) {
            return toPath(value);
        } else if (URI.class.equals(cls)) {
            return toURI(value);
        } else if (URL.class.equals(cls)) {
            return toURL(value);
        } else if (Pattern.class.equals(cls)) {
            return toPattern(value);
        } else if (Locale.class.equals(cls)) {
            return toLocale(value);
        } else if (isEnum(cls)) {
            return convertToEnum(cls, value);
        } else if (Color.class.equals(cls)) {
            return toColor(value);
        } else if (cls.getName().equals(INTERNET_ADDRESS_CLASSNAME_JAVAX)) {
            // javamail-1.* With javax.mail.* namespace.
            return toInternetAddress(value, INTERNET_ADDRESS_CLASSNAME_JAVAX);
        } else if (cls.getName().equals(INTERNET_ADDRESS_CLASSNAME_JAKARTA)) {
            // javamail-2.0+, with jakarta.mail.* namespace.
            return toInternetAddress(value, INTERNET_ADDRESS_CLASSNAME_JAKARTA);
        } else if (InetAddress.class.isAssignableFrom(cls)) {
            return toInetAddress(value);
        } else if (Duration.class.equals(cls)) {
            return toDuration(value);
        }

        throw new ConversionException(""The value '"" + value + ""' ("" + value.getClass() + "")"" + "" can't be converted to a "" + cls.getName() + "" object"");
    }","  public void test150()  throws Throwable  {
      Class<Byte> class0 = Byte.class;
      DummyLookup dummyLookup0 = DummyLookup.INSTANCE;
      DefaultConversionHandler defaultConversionHandler0 = DefaultConversionHandler.INSTANCE;
      try { 
        PropertyConverter.to(class0, dummyLookup0, defaultConversionHandler0);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // Could not convert org.apache.commons.configuration2.interpol.DummyLookup@0000000001 to java.lang.Byte
         //
         verifyException(""org.apache.commons.configuration2.convert.PropertyConverter"", e);
      }
  }"
677,"    public static Object to(final Class<?> cls, final Object value, final DefaultConversionHandler convHandler) throws ConversionException {
        if (cls.isInstance(value)) {
            return value; // no conversion needed
        }

        if (String.class.equals(cls)) {
            return String.valueOf(value);
        }
        if (Boolean.class.equals(cls) || Boolean.TYPE.equals(cls)) {
            return toBoolean(value);
        }
        if (Character.class.equals(cls) || Character.TYPE.equals(cls)) {
            return toCharacter(value);
        }
        if (Number.class.isAssignableFrom(cls) || cls.isPrimitive()) {
            if (Integer.class.equals(cls) || Integer.TYPE.equals(cls)) {
                return toInteger(value);
            }
            if (Long.class.equals(cls) || Long.TYPE.equals(cls)) {
                return toLong(value);
            }
            if (Byte.class.equals(cls) || Byte.TYPE.equals(cls)) {
                return toByte(value);
            }
            if (Short.class.equals(cls) || Short.TYPE.equals(cls)) {
                return toShort(value);
            }
            if (Float.class.equals(cls) || Float.TYPE.equals(cls)) {
                return toFloat(value);
            }
            if (Double.class.equals(cls) || Double.TYPE.equals(cls)) {
                return toDouble(value);
            }
            if (BigInteger.class.equals(cls)) {
                return toBigInteger(value);
            }
            if (BigDecimal.class.equals(cls)) {
                return toBigDecimal(value);
            }
        } else if (Date.class.equals(cls)) {
            return toDate(value, convHandler.getDateFormat());
        } else if (Calendar.class.equals(cls)) {
            return toCalendar(value, convHandler.getDateFormat());
        } else if (File.class.equals(cls)) {
            return toFile(value);
        } else if (Path.class.equals(cls)) {
            return toPath(value);
        } else if (URI.class.equals(cls)) {
            return toURI(value);
        } else if (URL.class.equals(cls)) {
            return toURL(value);
        } else if (Pattern.class.equals(cls)) {
            return toPattern(value);
        } else if (Locale.class.equals(cls)) {
            return toLocale(value);
        } else if (isEnum(cls)) {
            return convertToEnum(cls, value);
        } else if (Color.class.equals(cls)) {
            return toColor(value);
        } else if (cls.getName().equals(INTERNET_ADDRESS_CLASSNAME_JAVAX)) {
            // javamail-1.* With javax.mail.* namespace.
            return toInternetAddress(value, INTERNET_ADDRESS_CLASSNAME_JAVAX);
        } else if (cls.getName().equals(INTERNET_ADDRESS_CLASSNAME_JAKARTA)) {
            // javamail-2.0+, with jakarta.mail.* namespace.
            return toInternetAddress(value, INTERNET_ADDRESS_CLASSNAME_JAKARTA);
        } else if (InetAddress.class.isAssignableFrom(cls)) {
            return toInetAddress(value);
        } else if (Duration.class.equals(cls)) {
            return toDuration(value);
        }

        throw new ConversionException(""The value '"" + value + ""' ("" + value.getClass() + "")"" + "" can't be converted to a "" + cls.getName() + "" object"");
    }","  public void test151()  throws Throwable  {
      Class<Long> class0 = Long.TYPE;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(2763, 1314, 1314, 627, 627, 573);
      DefaultConversionHandler defaultConversionHandler0 = DefaultConversionHandler.INSTANCE;
      try { 
        PropertyConverter.to(class0, mockGregorianCalendar0, defaultConversionHandler0);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // Could not convert org.evosuite.runtime.mock.java.util.MockGregorianCalendar@0000000001 to java.lang.Long
         //
         verifyException(""org.apache.commons.configuration2.convert.PropertyConverter"", e);
      }
  }"
678,"    public static Object to(final Class<?> cls, final Object value, final DefaultConversionHandler convHandler) throws ConversionException {
        if (cls.isInstance(value)) {
            return value; // no conversion needed
        }

        if (String.class.equals(cls)) {
            return String.valueOf(value);
        }
        if (Boolean.class.equals(cls) || Boolean.TYPE.equals(cls)) {
            return toBoolean(value);
        }
        if (Character.class.equals(cls) || Character.TYPE.equals(cls)) {
            return toCharacter(value);
        }
        if (Number.class.isAssignableFrom(cls) || cls.isPrimitive()) {
            if (Integer.class.equals(cls) || Integer.TYPE.equals(cls)) {
                return toInteger(value);
            }
            if (Long.class.equals(cls) || Long.TYPE.equals(cls)) {
                return toLong(value);
            }
            if (Byte.class.equals(cls) || Byte.TYPE.equals(cls)) {
                return toByte(value);
            }
            if (Short.class.equals(cls) || Short.TYPE.equals(cls)) {
                return toShort(value);
            }
            if (Float.class.equals(cls) || Float.TYPE.equals(cls)) {
                return toFloat(value);
            }
            if (Double.class.equals(cls) || Double.TYPE.equals(cls)) {
                return toDouble(value);
            }
            if (BigInteger.class.equals(cls)) {
                return toBigInteger(value);
            }
            if (BigDecimal.class.equals(cls)) {
                return toBigDecimal(value);
            }
        } else if (Date.class.equals(cls)) {
            return toDate(value, convHandler.getDateFormat());
        } else if (Calendar.class.equals(cls)) {
            return toCalendar(value, convHandler.getDateFormat());
        } else if (File.class.equals(cls)) {
            return toFile(value);
        } else if (Path.class.equals(cls)) {
            return toPath(value);
        } else if (URI.class.equals(cls)) {
            return toURI(value);
        } else if (URL.class.equals(cls)) {
            return toURL(value);
        } else if (Pattern.class.equals(cls)) {
            return toPattern(value);
        } else if (Locale.class.equals(cls)) {
            return toLocale(value);
        } else if (isEnum(cls)) {
            return convertToEnum(cls, value);
        } else if (Color.class.equals(cls)) {
            return toColor(value);
        } else if (cls.getName().equals(INTERNET_ADDRESS_CLASSNAME_JAVAX)) {
            // javamail-1.* With javax.mail.* namespace.
            return toInternetAddress(value, INTERNET_ADDRESS_CLASSNAME_JAVAX);
        } else if (cls.getName().equals(INTERNET_ADDRESS_CLASSNAME_JAKARTA)) {
            // javamail-2.0+, with jakarta.mail.* namespace.
            return toInternetAddress(value, INTERNET_ADDRESS_CLASSNAME_JAKARTA);
        } else if (InetAddress.class.isAssignableFrom(cls)) {
            return toInetAddress(value);
        } else if (Duration.class.equals(cls)) {
            return toDuration(value);
        }

        throw new ConversionException(""The value '"" + value + ""' ("" + value.getClass() + "")"" + "" can't be converted to a "" + cls.getName() + "" object"");
    }","  public void test152()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      Class<Long> class0 = Long.class;
      DefaultConversionHandler defaultConversionHandler0 = DefaultConversionHandler.INSTANCE;
      try { 
        PropertyConverter.to(class0, mockGregorianCalendar0, defaultConversionHandler0);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // Could not convert org.evosuite.runtime.mock.java.util.MockGregorianCalendar@0000000001 to java.lang.Long
         //
         verifyException(""org.apache.commons.configuration2.convert.PropertyConverter"", e);
      }
  }"
679,"    public static Object to(final Class<?> cls, final Object value, final DefaultConversionHandler convHandler) throws ConversionException {
        if (cls.isInstance(value)) {
            return value; // no conversion needed
        }

        if (String.class.equals(cls)) {
            return String.valueOf(value);
        }
        if (Boolean.class.equals(cls) || Boolean.TYPE.equals(cls)) {
            return toBoolean(value);
        }
        if (Character.class.equals(cls) || Character.TYPE.equals(cls)) {
            return toCharacter(value);
        }
        if (Number.class.isAssignableFrom(cls) || cls.isPrimitive()) {
            if (Integer.class.equals(cls) || Integer.TYPE.equals(cls)) {
                return toInteger(value);
            }
            if (Long.class.equals(cls) || Long.TYPE.equals(cls)) {
                return toLong(value);
            }
            if (Byte.class.equals(cls) || Byte.TYPE.equals(cls)) {
                return toByte(value);
            }
            if (Short.class.equals(cls) || Short.TYPE.equals(cls)) {
                return toShort(value);
            }
            if (Float.class.equals(cls) || Float.TYPE.equals(cls)) {
                return toFloat(value);
            }
            if (Double.class.equals(cls) || Double.TYPE.equals(cls)) {
                return toDouble(value);
            }
            if (BigInteger.class.equals(cls)) {
                return toBigInteger(value);
            }
            if (BigDecimal.class.equals(cls)) {
                return toBigDecimal(value);
            }
        } else if (Date.class.equals(cls)) {
            return toDate(value, convHandler.getDateFormat());
        } else if (Calendar.class.equals(cls)) {
            return toCalendar(value, convHandler.getDateFormat());
        } else if (File.class.equals(cls)) {
            return toFile(value);
        } else if (Path.class.equals(cls)) {
            return toPath(value);
        } else if (URI.class.equals(cls)) {
            return toURI(value);
        } else if (URL.class.equals(cls)) {
            return toURL(value);
        } else if (Pattern.class.equals(cls)) {
            return toPattern(value);
        } else if (Locale.class.equals(cls)) {
            return toLocale(value);
        } else if (isEnum(cls)) {
            return convertToEnum(cls, value);
        } else if (Color.class.equals(cls)) {
            return toColor(value);
        } else if (cls.getName().equals(INTERNET_ADDRESS_CLASSNAME_JAVAX)) {
            // javamail-1.* With javax.mail.* namespace.
            return toInternetAddress(value, INTERNET_ADDRESS_CLASSNAME_JAVAX);
        } else if (cls.getName().equals(INTERNET_ADDRESS_CLASSNAME_JAKARTA)) {
            // javamail-2.0+, with jakarta.mail.* namespace.
            return toInternetAddress(value, INTERNET_ADDRESS_CLASSNAME_JAKARTA);
        } else if (InetAddress.class.isAssignableFrom(cls)) {
            return toInetAddress(value);
        } else if (Duration.class.equals(cls)) {
            return toDuration(value);
        }

        throw new ConversionException(""The value '"" + value + ""' ("" + value.getClass() + "")"" + "" can't be converted to a "" + cls.getName() + "" object"");
    }","  public void test153()  throws Throwable  {
      DefaultConversionHandler defaultConversionHandler0 = DefaultConversionHandler.INSTANCE;
      InetAddress inetAddress0 = MockInetAddress.anyLocalAddress();
      Class<Integer> class0 = Integer.TYPE;
      try { 
        PropertyConverter.to(class0, inetAddress0, defaultConversionHandler0);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // Could not convert java.net.Inet4Address@0000000001 to java.lang.Integer
         //
         verifyException(""org.apache.commons.configuration2.convert.PropertyConverter"", e);
      }
  }"
680,"    public static Object to(final Class<?> cls, final Object value, final DefaultConversionHandler convHandler) throws ConversionException {
        if (cls.isInstance(value)) {
            return value; // no conversion needed
        }

        if (String.class.equals(cls)) {
            return String.valueOf(value);
        }
        if (Boolean.class.equals(cls) || Boolean.TYPE.equals(cls)) {
            return toBoolean(value);
        }
        if (Character.class.equals(cls) || Character.TYPE.equals(cls)) {
            return toCharacter(value);
        }
        if (Number.class.isAssignableFrom(cls) || cls.isPrimitive()) {
            if (Integer.class.equals(cls) || Integer.TYPE.equals(cls)) {
                return toInteger(value);
            }
            if (Long.class.equals(cls) || Long.TYPE.equals(cls)) {
                return toLong(value);
            }
            if (Byte.class.equals(cls) || Byte.TYPE.equals(cls)) {
                return toByte(value);
            }
            if (Short.class.equals(cls) || Short.TYPE.equals(cls)) {
                return toShort(value);
            }
            if (Float.class.equals(cls) || Float.TYPE.equals(cls)) {
                return toFloat(value);
            }
            if (Double.class.equals(cls) || Double.TYPE.equals(cls)) {
                return toDouble(value);
            }
            if (BigInteger.class.equals(cls)) {
                return toBigInteger(value);
            }
            if (BigDecimal.class.equals(cls)) {
                return toBigDecimal(value);
            }
        } else if (Date.class.equals(cls)) {
            return toDate(value, convHandler.getDateFormat());
        } else if (Calendar.class.equals(cls)) {
            return toCalendar(value, convHandler.getDateFormat());
        } else if (File.class.equals(cls)) {
            return toFile(value);
        } else if (Path.class.equals(cls)) {
            return toPath(value);
        } else if (URI.class.equals(cls)) {
            return toURI(value);
        } else if (URL.class.equals(cls)) {
            return toURL(value);
        } else if (Pattern.class.equals(cls)) {
            return toPattern(value);
        } else if (Locale.class.equals(cls)) {
            return toLocale(value);
        } else if (isEnum(cls)) {
            return convertToEnum(cls, value);
        } else if (Color.class.equals(cls)) {
            return toColor(value);
        } else if (cls.getName().equals(INTERNET_ADDRESS_CLASSNAME_JAVAX)) {
            // javamail-1.* With javax.mail.* namespace.
            return toInternetAddress(value, INTERNET_ADDRESS_CLASSNAME_JAVAX);
        } else if (cls.getName().equals(INTERNET_ADDRESS_CLASSNAME_JAKARTA)) {
            // javamail-2.0+, with jakarta.mail.* namespace.
            return toInternetAddress(value, INTERNET_ADDRESS_CLASSNAME_JAKARTA);
        } else if (InetAddress.class.isAssignableFrom(cls)) {
            return toInetAddress(value);
        } else if (Duration.class.equals(cls)) {
            return toDuration(value);
        }

        throw new ConversionException(""The value '"" + value + ""' ("" + value.getClass() + "")"" + "" can't be converted to a "" + cls.getName() + "" object"");
    }","  public void test154()  throws Throwable  {
      Class<Character> class0 = Character.TYPE;
      DefaultConversionHandler defaultConversionHandler0 = new DefaultConversionHandler();
      try { 
        PropertyConverter.to(class0, class0, defaultConversionHandler0);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // The value 'char' cannot be converted to a Character object!
         //
         verifyException(""org.apache.commons.configuration2.convert.PropertyConverter"", e);
      }
  }"
681,"    public static Object to(final Class<?> cls, final Object value, final DefaultConversionHandler convHandler) throws ConversionException {
        if (cls.isInstance(value)) {
            return value; // no conversion needed
        }

        if (String.class.equals(cls)) {
            return String.valueOf(value);
        }
        if (Boolean.class.equals(cls) || Boolean.TYPE.equals(cls)) {
            return toBoolean(value);
        }
        if (Character.class.equals(cls) || Character.TYPE.equals(cls)) {
            return toCharacter(value);
        }
        if (Number.class.isAssignableFrom(cls) || cls.isPrimitive()) {
            if (Integer.class.equals(cls) || Integer.TYPE.equals(cls)) {
                return toInteger(value);
            }
            if (Long.class.equals(cls) || Long.TYPE.equals(cls)) {
                return toLong(value);
            }
            if (Byte.class.equals(cls) || Byte.TYPE.equals(cls)) {
                return toByte(value);
            }
            if (Short.class.equals(cls) || Short.TYPE.equals(cls)) {
                return toShort(value);
            }
            if (Float.class.equals(cls) || Float.TYPE.equals(cls)) {
                return toFloat(value);
            }
            if (Double.class.equals(cls) || Double.TYPE.equals(cls)) {
                return toDouble(value);
            }
            if (BigInteger.class.equals(cls)) {
                return toBigInteger(value);
            }
            if (BigDecimal.class.equals(cls)) {
                return toBigDecimal(value);
            }
        } else if (Date.class.equals(cls)) {
            return toDate(value, convHandler.getDateFormat());
        } else if (Calendar.class.equals(cls)) {
            return toCalendar(value, convHandler.getDateFormat());
        } else if (File.class.equals(cls)) {
            return toFile(value);
        } else if (Path.class.equals(cls)) {
            return toPath(value);
        } else if (URI.class.equals(cls)) {
            return toURI(value);
        } else if (URL.class.equals(cls)) {
            return toURL(value);
        } else if (Pattern.class.equals(cls)) {
            return toPattern(value);
        } else if (Locale.class.equals(cls)) {
            return toLocale(value);
        } else if (isEnum(cls)) {
            return convertToEnum(cls, value);
        } else if (Color.class.equals(cls)) {
            return toColor(value);
        } else if (cls.getName().equals(INTERNET_ADDRESS_CLASSNAME_JAVAX)) {
            // javamail-1.* With javax.mail.* namespace.
            return toInternetAddress(value, INTERNET_ADDRESS_CLASSNAME_JAVAX);
        } else if (cls.getName().equals(INTERNET_ADDRESS_CLASSNAME_JAKARTA)) {
            // javamail-2.0+, with jakarta.mail.* namespace.
            return toInternetAddress(value, INTERNET_ADDRESS_CLASSNAME_JAKARTA);
        } else if (InetAddress.class.isAssignableFrom(cls)) {
            return toInetAddress(value);
        } else if (Duration.class.equals(cls)) {
            return toDuration(value);
        }

        throw new ConversionException(""The value '"" + value + ""' ("" + value.getClass() + "")"" + "" can't be converted to a "" + cls.getName() + "" object"");
    }","  public void test155()  throws Throwable  {
      Class<Character> class0 = Character.class;
      DefaultConversionHandler defaultConversionHandler0 = DefaultConversionHandler.INSTANCE;
      try { 
        PropertyConverter.to(class0, class0, defaultConversionHandler0);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // The value 'class java.lang.Character' cannot be converted to a Character object!
         //
         verifyException(""org.apache.commons.configuration2.convert.PropertyConverter"", e);
      }
  }"
682,"    public static Object to(final Class<?> cls, final Object value, final DefaultConversionHandler convHandler) throws ConversionException {
        if (cls.isInstance(value)) {
            return value; // no conversion needed
        }

        if (String.class.equals(cls)) {
            return String.valueOf(value);
        }
        if (Boolean.class.equals(cls) || Boolean.TYPE.equals(cls)) {
            return toBoolean(value);
        }
        if (Character.class.equals(cls) || Character.TYPE.equals(cls)) {
            return toCharacter(value);
        }
        if (Number.class.isAssignableFrom(cls) || cls.isPrimitive()) {
            if (Integer.class.equals(cls) || Integer.TYPE.equals(cls)) {
                return toInteger(value);
            }
            if (Long.class.equals(cls) || Long.TYPE.equals(cls)) {
                return toLong(value);
            }
            if (Byte.class.equals(cls) || Byte.TYPE.equals(cls)) {
                return toByte(value);
            }
            if (Short.class.equals(cls) || Short.TYPE.equals(cls)) {
                return toShort(value);
            }
            if (Float.class.equals(cls) || Float.TYPE.equals(cls)) {
                return toFloat(value);
            }
            if (Double.class.equals(cls) || Double.TYPE.equals(cls)) {
                return toDouble(value);
            }
            if (BigInteger.class.equals(cls)) {
                return toBigInteger(value);
            }
            if (BigDecimal.class.equals(cls)) {
                return toBigDecimal(value);
            }
        } else if (Date.class.equals(cls)) {
            return toDate(value, convHandler.getDateFormat());
        } else if (Calendar.class.equals(cls)) {
            return toCalendar(value, convHandler.getDateFormat());
        } else if (File.class.equals(cls)) {
            return toFile(value);
        } else if (Path.class.equals(cls)) {
            return toPath(value);
        } else if (URI.class.equals(cls)) {
            return toURI(value);
        } else if (URL.class.equals(cls)) {
            return toURL(value);
        } else if (Pattern.class.equals(cls)) {
            return toPattern(value);
        } else if (Locale.class.equals(cls)) {
            return toLocale(value);
        } else if (isEnum(cls)) {
            return convertToEnum(cls, value);
        } else if (Color.class.equals(cls)) {
            return toColor(value);
        } else if (cls.getName().equals(INTERNET_ADDRESS_CLASSNAME_JAVAX)) {
            // javamail-1.* With javax.mail.* namespace.
            return toInternetAddress(value, INTERNET_ADDRESS_CLASSNAME_JAVAX);
        } else if (cls.getName().equals(INTERNET_ADDRESS_CLASSNAME_JAKARTA)) {
            // javamail-2.0+, with jakarta.mail.* namespace.
            return toInternetAddress(value, INTERNET_ADDRESS_CLASSNAME_JAKARTA);
        } else if (InetAddress.class.isAssignableFrom(cls)) {
            return toInetAddress(value);
        } else if (Duration.class.equals(cls)) {
            return toDuration(value);
        }

        throw new ConversionException(""The value '"" + value + ""' ("" + value.getClass() + "")"" + "" can't be converted to a "" + cls.getName() + "" object"");
    }","  public void test156()  throws Throwable  {
      Class<Boolean> class0 = Boolean.TYPE;
      DefaultConversionHandler defaultConversionHandler0 = new DefaultConversionHandler();
      try { 
        PropertyConverter.to(class0, class0, defaultConversionHandler0);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // The value boolean can't be converted to a Boolean object
         //
         verifyException(""org.apache.commons.configuration2.convert.PropertyConverter"", e);
      }
  }"
683,"    public static Object to(final Class<?> cls, final Object value, final DefaultConversionHandler convHandler) throws ConversionException {
        if (cls.isInstance(value)) {
            return value; // no conversion needed
        }

        if (String.class.equals(cls)) {
            return String.valueOf(value);
        }
        if (Boolean.class.equals(cls) || Boolean.TYPE.equals(cls)) {
            return toBoolean(value);
        }
        if (Character.class.equals(cls) || Character.TYPE.equals(cls)) {
            return toCharacter(value);
        }
        if (Number.class.isAssignableFrom(cls) || cls.isPrimitive()) {
            if (Integer.class.equals(cls) || Integer.TYPE.equals(cls)) {
                return toInteger(value);
            }
            if (Long.class.equals(cls) || Long.TYPE.equals(cls)) {
                return toLong(value);
            }
            if (Byte.class.equals(cls) || Byte.TYPE.equals(cls)) {
                return toByte(value);
            }
            if (Short.class.equals(cls) || Short.TYPE.equals(cls)) {
                return toShort(value);
            }
            if (Float.class.equals(cls) || Float.TYPE.equals(cls)) {
                return toFloat(value);
            }
            if (Double.class.equals(cls) || Double.TYPE.equals(cls)) {
                return toDouble(value);
            }
            if (BigInteger.class.equals(cls)) {
                return toBigInteger(value);
            }
            if (BigDecimal.class.equals(cls)) {
                return toBigDecimal(value);
            }
        } else if (Date.class.equals(cls)) {
            return toDate(value, convHandler.getDateFormat());
        } else if (Calendar.class.equals(cls)) {
            return toCalendar(value, convHandler.getDateFormat());
        } else if (File.class.equals(cls)) {
            return toFile(value);
        } else if (Path.class.equals(cls)) {
            return toPath(value);
        } else if (URI.class.equals(cls)) {
            return toURI(value);
        } else if (URL.class.equals(cls)) {
            return toURL(value);
        } else if (Pattern.class.equals(cls)) {
            return toPattern(value);
        } else if (Locale.class.equals(cls)) {
            return toLocale(value);
        } else if (isEnum(cls)) {
            return convertToEnum(cls, value);
        } else if (Color.class.equals(cls)) {
            return toColor(value);
        } else if (cls.getName().equals(INTERNET_ADDRESS_CLASSNAME_JAVAX)) {
            // javamail-1.* With javax.mail.* namespace.
            return toInternetAddress(value, INTERNET_ADDRESS_CLASSNAME_JAVAX);
        } else if (cls.getName().equals(INTERNET_ADDRESS_CLASSNAME_JAKARTA)) {
            // javamail-2.0+, with jakarta.mail.* namespace.
            return toInternetAddress(value, INTERNET_ADDRESS_CLASSNAME_JAKARTA);
        } else if (InetAddress.class.isAssignableFrom(cls)) {
            return toInetAddress(value);
        } else if (Duration.class.equals(cls)) {
            return toDuration(value);
        }

        throw new ConversionException(""The value '"" + value + ""' ("" + value.getClass() + "")"" + "" can't be converted to a "" + cls.getName() + "" object"");
    }","  public void test157()  throws Throwable  {
      Class<String> class0 = String.class;
      DefaultConversionHandler defaultConversionHandler0 = DefaultConversionHandler.INSTANCE;
      Object object0 = PropertyConverter.to(class0, class0, defaultConversionHandler0);
}"
684,"    public static Object to(final Class<?> cls, final Object value, final DefaultConversionHandler convHandler) throws ConversionException {
        if (cls.isInstance(value)) {
            return value; // no conversion needed
        }

        if (String.class.equals(cls)) {
            return String.valueOf(value);
        }
        if (Boolean.class.equals(cls) || Boolean.TYPE.equals(cls)) {
            return toBoolean(value);
        }
        if (Character.class.equals(cls) || Character.TYPE.equals(cls)) {
            return toCharacter(value);
        }
        if (Number.class.isAssignableFrom(cls) || cls.isPrimitive()) {
            if (Integer.class.equals(cls) || Integer.TYPE.equals(cls)) {
                return toInteger(value);
            }
            if (Long.class.equals(cls) || Long.TYPE.equals(cls)) {
                return toLong(value);
            }
            if (Byte.class.equals(cls) || Byte.TYPE.equals(cls)) {
                return toByte(value);
            }
            if (Short.class.equals(cls) || Short.TYPE.equals(cls)) {
                return toShort(value);
            }
            if (Float.class.equals(cls) || Float.TYPE.equals(cls)) {
                return toFloat(value);
            }
            if (Double.class.equals(cls) || Double.TYPE.equals(cls)) {
                return toDouble(value);
            }
            if (BigInteger.class.equals(cls)) {
                return toBigInteger(value);
            }
            if (BigDecimal.class.equals(cls)) {
                return toBigDecimal(value);
            }
        } else if (Date.class.equals(cls)) {
            return toDate(value, convHandler.getDateFormat());
        } else if (Calendar.class.equals(cls)) {
            return toCalendar(value, convHandler.getDateFormat());
        } else if (File.class.equals(cls)) {
            return toFile(value);
        } else if (Path.class.equals(cls)) {
            return toPath(value);
        } else if (URI.class.equals(cls)) {
            return toURI(value);
        } else if (URL.class.equals(cls)) {
            return toURL(value);
        } else if (Pattern.class.equals(cls)) {
            return toPattern(value);
        } else if (Locale.class.equals(cls)) {
            return toLocale(value);
        } else if (isEnum(cls)) {
            return convertToEnum(cls, value);
        } else if (Color.class.equals(cls)) {
            return toColor(value);
        } else if (cls.getName().equals(INTERNET_ADDRESS_CLASSNAME_JAVAX)) {
            // javamail-1.* With javax.mail.* namespace.
            return toInternetAddress(value, INTERNET_ADDRESS_CLASSNAME_JAVAX);
        } else if (cls.getName().equals(INTERNET_ADDRESS_CLASSNAME_JAKARTA)) {
            // javamail-2.0+, with jakarta.mail.* namespace.
            return toInternetAddress(value, INTERNET_ADDRESS_CLASSNAME_JAKARTA);
        } else if (InetAddress.class.isAssignableFrom(cls)) {
            return toInetAddress(value);
        } else if (Duration.class.equals(cls)) {
            return toDuration(value);
        }

        throw new ConversionException(""The value '"" + value + ""' ("" + value.getClass() + "")"" + "" can't be converted to a "" + cls.getName() + "" object"");
    }","  public void test158()  throws Throwable  {
      Class<BuilderConfigurationWrapperFactory.EventSourceSupport> class0 = BuilderConfigurationWrapperFactory.EventSourceSupport.class;
      try { 
        PropertyConverter.to(class0, class0, (DefaultConversionHandler) null);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // The value class org.apache.commons.configuration2.builder.BuilderConfigurationWrapperFactory$EventSourceSupport can't be converted to a org.apache.commons.configuration2.builder.BuilderConfigurationWrapperFactory$EventSourceSupport
         //
         verifyException(""org.apache.commons.configuration2.convert.PropertyConverter"", e);
      }
  }"
685,"    static boolean isEnum(final Class<?> cls) {
        return cls.isEnum();
    }","  public void test159()  throws Throwable  {
      Class<BigDecimal> class0 = BigDecimal.class;
      boolean boolean0 = PropertyConverter.isEnum(class0);
}"
686,"    public Object escapeList(final List<?> values, final ValueTransformer transformer) {
        if (!values.isEmpty()) {
            final Iterator<?> it = values.iterator();
            String lastValue = escapeValue(it.next(), true, transformer);
            final StringBuilder buf = new StringBuilder(lastValue);
            while (it.hasNext()) {
                // if the last value ended with an escape character, it has
                // to be escaped itself; otherwise the list delimiter will
                // be escaped
                if (lastValue.endsWith(ESCAPE) && (countTrailingBS(lastValue) / 2) % 2 != 0) {
                    buf.append(ESCAPE).append(ESCAPE);
                }
                buf.append(getDelimiter());
                lastValue = escapeValue(it.next(), true, transformer);
                buf.append(lastValue);
            }
            return buf.toString();
        }
        return null;
    }","  public void test0()  throws Throwable  {
      LegacyListDelimiterHandler legacyListDelimiterHandler0 = new LegacyListDelimiterHandler('{');
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add(""\\"");
      ValueTransformer valueTransformer0 = ListDelimiterHandler.NOOP_TRANSFORMER;
      Object object0 = legacyListDelimiterHandler0.escapeList(linkedList0, valueTransformer0);
}"
687,"    public char getDelimiter() {
        return delimiter;
    }","  public void test1()  throws Throwable  {
      LegacyListDelimiterHandler legacyListDelimiterHandler0 = new LegacyListDelimiterHandler('{');
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add(""\\"");
      ValueTransformer valueTransformer0 = ListDelimiterHandler.NOOP_TRANSFORMER;
      Object object0 = legacyListDelimiterHandler0.escapeList(linkedList0, valueTransformer0);
}"
688,"    protected Collection<String> splitString(final String s, final boolean trim) {
        if (s.indexOf(getDelimiter()) < 0) {
            return Collections.singleton(s);
        }

        final List<String> list = new ArrayList<>();

        StringBuilder token = new StringBuilder();
        int begin = 0;
        boolean inEscape = false;
        final char esc = ESCAPE.charAt(0);

        while (begin < s.length()) {
            final char c = s.charAt(begin);
            if (inEscape) {
                // last character was the escape marker
                // can current character be escaped?
                if (c != getDelimiter() && c != esc) {
                    // no, also add escape character
                    token.append(esc);
                }
                token.append(c);
                inEscape = false;
            } else if (c == getDelimiter()) {
                // found a list delimiter -> add token and
                // resetDefaultFileSystem buffer
                String t = token.toString();
                if (trim) {
                    t = t.trim();
                }
                list.add(t);
                token = new StringBuilder();
            } else if (c == esc) {
                // eventually escape next character
                inEscape = true;
            } else {
                token.append(c);
            }

            begin++;
        }

        // Trailing delimiter?
        if (inEscape) {
            token.append(esc);
        }
        // Add last token
        String t = token.toString();
        if (trim) {
            t = t.trim();
        }
        list.add(t);

        return list;
    }","  public void test2()  throws Throwable  {
      LegacyListDelimiterHandler legacyListDelimiterHandler0 = new LegacyListDelimiterHandler('l');
      Collection<String> collection0 = legacyListDelimiterHandler0.splitString(""q|T7x,+Pil!d-\n\""8P)"", false);
}"
689,"    public LegacyListDelimiterHandler(final char listDelimiter) {
        delimiter = listDelimiter;
    }","  public void test3()  throws Throwable  {
      LegacyListDelimiterHandler legacyListDelimiterHandler0 = new LegacyListDelimiterHandler('F');
      Collection<String> collection0 = legacyListDelimiterHandler0.split(""FS,zAmJ"", false);
}"
690,"    public char getDelimiter() {
        return delimiter;
    }","  public void test4()  throws Throwable  {
      LegacyListDelimiterHandler legacyListDelimiterHandler0 = new LegacyListDelimiterHandler('%');
      char char0 = legacyListDelimiterHandler0.getDelimiter();
}"
691,"    public char getDelimiter() {
        return delimiter;
    }","  public void test5()  throws Throwable  {
      LegacyListDelimiterHandler legacyListDelimiterHandler0 = new LegacyListDelimiterHandler('0');
      char char0 = legacyListDelimiterHandler0.getDelimiter();
}"
692,"    public char getDelimiter() {
        return delimiter;
    }","  public void test6()  throws Throwable  {
      LegacyListDelimiterHandler legacyListDelimiterHandler0 = new LegacyListDelimiterHandler('U');
      ValueTransformer valueTransformer0 = ListDelimiterHandler.NOOP_TRANSFORMER;
      legacyListDelimiterHandler0.escapeValue("""", false, valueTransformer0);
}"
693,"    public char getDelimiter() {
        return delimiter;
    }","  public void test7()  throws Throwable  {
      LegacyListDelimiterHandler legacyListDelimiterHandler0 = new LegacyListDelimiterHandler('F');
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      legacyListDelimiterHandler0.escapeBackslashs(linkedList0, false);
}"
694,"    public char getDelimiter() {
        return delimiter;
    }","  public void test8()  throws Throwable  {
      LegacyListDelimiterHandler legacyListDelimiterHandler0 = new LegacyListDelimiterHandler('O');
      legacyListDelimiterHandler0.escapeBackslashs("""", false);
}"
695,"    protected Collection<String> splitString(final String s, final boolean trim) {
        if (s.indexOf(getDelimiter()) < 0) {
            return Collections.singleton(s);
        }

        final List<String> list = new ArrayList<>();

        StringBuilder token = new StringBuilder();
        int begin = 0;
        boolean inEscape = false;
        final char esc = ESCAPE.charAt(0);

        while (begin < s.length()) {
            final char c = s.charAt(begin);
            if (inEscape) {
                // last character was the escape marker
                // can current character be escaped?
                if (c != getDelimiter() && c != esc) {
                    // no, also add escape character
                    token.append(esc);
                }
                token.append(c);
                inEscape = false;
            } else if (c == getDelimiter()) {
                // found a list delimiter -> add token and
                // resetDefaultFileSystem buffer
                String t = token.toString();
                if (trim) {
                    t = t.trim();
                }
                list.add(t);
                token = new StringBuilder();
            } else if (c == esc) {
                // eventually escape next character
                inEscape = true;
            } else {
                token.append(c);
            }

            begin++;
        }

        // Trailing delimiter?
        if (inEscape) {
            token.append(esc);
        }
        // Add last token
        String t = token.toString();
        if (trim) {
            t = t.trim();
        }
        list.add(t);

        return list;
    }","  public void test9()  throws Throwable  {
      LegacyListDelimiterHandler legacyListDelimiterHandler0 = new LegacyListDelimiterHandler('y');
      // Undeclared exception!
      try { 
        legacyListDelimiterHandler0.splitString((String) null, false);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.configuration2.convert.LegacyListDelimiterHandler"", e);
      }
  }"
696,"    protected String escapeValue(final Object value, final boolean inList, final ValueTransformer transformer) {
        String escapedValue = String.valueOf(transformer.transformValue(escapeBackslashs(value, inList)));
        if (getDelimiter() != 0) {
            escapedValue = StringUtils.replace(escapedValue, String.valueOf(getDelimiter()), ESCAPE + getDelimiter());
        }
        return escapedValue;
    }","  public void test10()  throws Throwable  {
      LegacyListDelimiterHandler legacyListDelimiterHandler0 = new LegacyListDelimiterHandler('[');
      // Undeclared exception!
      try { 
        legacyListDelimiterHandler0.escapeValue((Object) null, false, (ValueTransformer) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.configuration2.convert.LegacyListDelimiterHandler"", e);
      }
  }"
697,"    public Object escapeList(final List<?> values, final ValueTransformer transformer) {
        if (!values.isEmpty()) {
            final Iterator<?> it = values.iterator();
            String lastValue = escapeValue(it.next(), true, transformer);
            final StringBuilder buf = new StringBuilder(lastValue);
            while (it.hasNext()) {
                // if the last value ended with an escape character, it has
                // to be escaped itself; otherwise the list delimiter will
                // be escaped
                if (lastValue.endsWith(ESCAPE) && (countTrailingBS(lastValue) / 2) % 2 != 0) {
                    buf.append(ESCAPE).append(ESCAPE);
                }
                buf.append(getDelimiter());
                lastValue = escapeValue(it.next(), true, transformer);
                buf.append(lastValue);
            }
            return buf.toString();
        }
        return null;
    }","  public void test11()  throws Throwable  {
      LegacyListDelimiterHandler legacyListDelimiterHandler0 = new LegacyListDelimiterHandler('E');
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(0);
      linkedList0.add(integer0);
      // Undeclared exception!
      try { 
        legacyListDelimiterHandler0.escapeList(linkedList0, (ValueTransformer) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.configuration2.convert.LegacyListDelimiterHandler"", e);
      }
  }"
698,"    public Object escape(final Object value, final ValueTransformer transformer) {
        return escapeValue(value, false, transformer);
    }","  public void test12()  throws Throwable  {
      LegacyListDelimiterHandler legacyListDelimiterHandler0 = new LegacyListDelimiterHandler('f');
      // Undeclared exception!
      try { 
        legacyListDelimiterHandler0.escape((Object) null, (ValueTransformer) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.configuration2.convert.LegacyListDelimiterHandler"", e);
      }
  }"
699,"    public char getDelimiter() {
        return delimiter;
    }","  public void test13()  throws Throwable  {
      LegacyListDelimiterHandler legacyListDelimiterHandler0 = new LegacyListDelimiterHandler(';');
      ValueTransformer valueTransformer0 = ListDelimiterHandler.NOOP_TRANSFORMER;
      Collection<String> collection0 = legacyListDelimiterHandler0.splitString(""\\\\"", false);
      String string0 = legacyListDelimiterHandler0.escapeValue(collection0, true, valueTransformer0);
}"
700,"    protected String escapeValue(final Object value, final boolean inList, final ValueTransformer transformer) {
        String escapedValue = String.valueOf(transformer.transformValue(escapeBackslashs(value, inList)));
        if (getDelimiter() != 0) {
            escapedValue = StringUtils.replace(escapedValue, String.valueOf(getDelimiter()), ESCAPE + getDelimiter());
        }
        return escapedValue;
    }","  public void test14()  throws Throwable  {
      LegacyListDelimiterHandler legacyListDelimiterHandler0 = new LegacyListDelimiterHandler(';');
      ValueTransformer valueTransformer0 = ListDelimiterHandler.NOOP_TRANSFORMER;
      Collection<String> collection0 = legacyListDelimiterHandler0.splitString(""\\\\"", false);
      String string0 = legacyListDelimiterHandler0.escapeValue(collection0, true, valueTransformer0);
}"
701,"    public Object escapeList(final List<?> values, final ValueTransformer transformer) {
        if (!values.isEmpty()) {
            final Iterator<?> it = values.iterator();
            String lastValue = escapeValue(it.next(), true, transformer);
            final StringBuilder buf = new StringBuilder(lastValue);
            while (it.hasNext()) {
                // if the last value ended with an escape character, it has
                // to be escaped itself; otherwise the list delimiter will
                // be escaped
                if (lastValue.endsWith(ESCAPE) && (countTrailingBS(lastValue) / 2) % 2 != 0) {
                    buf.append(ESCAPE).append(ESCAPE);
                }
                buf.append(getDelimiter());
                lastValue = escapeValue(it.next(), true, transformer);
                buf.append(lastValue);
            }
            return buf.toString();
        }
        return null;
    }","  public void test15()  throws Throwable  {
      LegacyListDelimiterHandler legacyListDelimiterHandler0 = new LegacyListDelimiterHandler('{');
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add(""\\"");
      linkedList0.add(""org.apache.commons.configuration2.convert.LegacyListDelimiterHandler@1"");
      ValueTransformer valueTransformer0 = ListDelimiterHandler.NOOP_TRANSFORMER;
      Object object0 = legacyListDelimiterHandler0.escapeList(linkedList0, valueTransformer0);
}"
702,"    public char getDelimiter() {
        return delimiter;
    }","  public void test16()  throws Throwable  {
      LegacyListDelimiterHandler legacyListDelimiterHandler0 = new LegacyListDelimiterHandler('{');
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add(""\\"");
      linkedList0.add(""org.apache.commons.configuration2.convert.LegacyListDelimiterHandler@1"");
      ValueTransformer valueTransformer0 = ListDelimiterHandler.NOOP_TRANSFORMER;
      Object object0 = legacyListDelimiterHandler0.escapeList(linkedList0, valueTransformer0);
}"
703,"    public Object escapeList(final List<?> values, final ValueTransformer transformer) {
        if (!values.isEmpty()) {
            final Iterator<?> it = values.iterator();
            String lastValue = escapeValue(it.next(), true, transformer);
            final StringBuilder buf = new StringBuilder(lastValue);
            while (it.hasNext()) {
                // if the last value ended with an escape character, it has
                // to be escaped itself; otherwise the list delimiter will
                // be escaped
                if (lastValue.endsWith(ESCAPE) && (countTrailingBS(lastValue) / 2) % 2 != 0) {
                    buf.append(ESCAPE).append(ESCAPE);
                }
                buf.append(getDelimiter());
                lastValue = escapeValue(it.next(), true, transformer);
                buf.append(lastValue);
            }
            return buf.toString();
        }
        return null;
    }","  public void test17()  throws Throwable  {
      LegacyListDelimiterHandler legacyListDelimiterHandler0 = new LegacyListDelimiterHandler('{');
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add(""\\"");
      linkedList0.add(""org.apache.commons.configuration2.convert.LegacyListDelimiterHandler@1"");
      ValueTransformer valueTransformer0 = ListDelimiterHandler.NOOP_TRANSFORMER;
      Object object0 = legacyListDelimiterHandler0.escapeList(linkedList0, valueTransformer0);
}"
704,"    public char getDelimiter() {
        return delimiter;
    }","  public void test18()  throws Throwable  {
      LegacyListDelimiterHandler legacyListDelimiterHandler0 = new LegacyListDelimiterHandler('y');
      char char0 = legacyListDelimiterHandler0.getDelimiter();
}"
705,"    public char getDelimiter() {
        return delimiter;
    }","  public void test19()  throws Throwable  {
      LegacyListDelimiterHandler legacyListDelimiterHandler0 = new LegacyListDelimiterHandler('\u0000');
      ValueTransformer valueTransformer0 = ListDelimiterHandler.NOOP_TRANSFORMER;
      legacyListDelimiterHandler0.escape(valueTransformer0, valueTransformer0);
}"
706,"    protected Collection<String> splitString(final String s, final boolean trim) {
        if (s.indexOf(getDelimiter()) < 0) {
            return Collections.singleton(s);
        }

        final List<String> list = new ArrayList<>();

        StringBuilder token = new StringBuilder();
        int begin = 0;
        boolean inEscape = false;
        final char esc = ESCAPE.charAt(0);

        while (begin < s.length()) {
            final char c = s.charAt(begin);
            if (inEscape) {
                // last character was the escape marker
                // can current character be escaped?
                if (c != getDelimiter() && c != esc) {
                    // no, also add escape character
                    token.append(esc);
                }
                token.append(c);
                inEscape = false;
            } else if (c == getDelimiter()) {
                // found a list delimiter -> add token and
                // resetDefaultFileSystem buffer
                String t = token.toString();
                if (trim) {
                    t = t.trim();
                }
                list.add(t);
                token = new StringBuilder();
            } else if (c == esc) {
                // eventually escape next character
                inEscape = true;
            } else {
                token.append(c);
            }

            begin++;
        }

        // Trailing delimiter?
        if (inEscape) {
            token.append(esc);
        }
        // Add last token
        String t = token.toString();
        if (trim) {
            t = t.trim();
        }
        list.add(t);

        return list;
    }","  public void test20()  throws Throwable  {
      LegacyListDelimiterHandler legacyListDelimiterHandler0 = new LegacyListDelimiterHandler('m');
      Collection<String> collection0 = legacyListDelimiterHandler0.splitString(""org,apche.commons.cnfguration2.convertLegacyListelimiterHandler@1\\"", true);
}"
707,"    public char getDelimiter() {
        return delimiter;
    }","  public void test21()  throws Throwable  {
      LegacyListDelimiterHandler legacyListDelimiterHandler0 = new LegacyListDelimiterHandler('m');
      Collection<String> collection0 = legacyListDelimiterHandler0.splitString(""org,apche.commons.cnfguration2.convertLegacyListelimiterHandler@1\\"", true);
}"
708,"    public Object escapeList(final List<?> values, final ValueTransformer transformer) {
        if (!values.isEmpty()) {
            final Iterator<?> it = values.iterator();
            String lastValue = escapeValue(it.next(), true, transformer);
            final StringBuilder buf = new StringBuilder(lastValue);
            while (it.hasNext()) {
                // if the last value ended with an escape character, it has
                // to be escaped itself; otherwise the list delimiter will
                // be escaped
                if (lastValue.endsWith(ESCAPE) && (countTrailingBS(lastValue) / 2) % 2 != 0) {
                    buf.append(ESCAPE).append(ESCAPE);
                }
                buf.append(getDelimiter());
                lastValue = escapeValue(it.next(), true, transformer);
                buf.append(lastValue);
            }
            return buf.toString();
        }
        return null;
    }","  public void test22()  throws Throwable  {
      LegacyListDelimiterHandler legacyListDelimiterHandler0 = new LegacyListDelimiterHandler('\\');
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add(""\\"");
      linkedList0.add(""or.apahe.commonsconfguration2.convert.LegacyListDelimiterHandler@"");
      ValueTransformer valueTransformer0 = ListDelimiterHandler.NOOP_TRANSFORMER;
      Object object0 = legacyListDelimiterHandler0.escapeList(linkedList0, valueTransformer0);
}"
709,"    public Object escapeList(final List<?> values, final ValueTransformer transformer) {
        if (!values.isEmpty()) {
            final Iterator<?> it = values.iterator();
            String lastValue = escapeValue(it.next(), true, transformer);
            final StringBuilder buf = new StringBuilder(lastValue);
            while (it.hasNext()) {
                // if the last value ended with an escape character, it has
                // to be escaped itself; otherwise the list delimiter will
                // be escaped
                if (lastValue.endsWith(ESCAPE) && (countTrailingBS(lastValue) / 2) % 2 != 0) {
                    buf.append(ESCAPE).append(ESCAPE);
                }
                buf.append(getDelimiter());
                lastValue = escapeValue(it.next(), true, transformer);
                buf.append(lastValue);
            }
            return buf.toString();
        }
        return null;
    }","  public void test23()  throws Throwable  {
      LegacyListDelimiterHandler legacyListDelimiterHandler0 = new LegacyListDelimiterHandler('\\');
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add(""\\"");
      linkedList0.add(""or.apahe.commonsconfguration2.convert.LegacyListDelimiterHandler@"");
      ValueTransformer valueTransformer0 = ListDelimiterHandler.NOOP_TRANSFORMER;
      Object object0 = legacyListDelimiterHandler0.escapeList(linkedList0, valueTransformer0);
}"
710,"    public Object escapeList(final List<?> values, final ValueTransformer transformer) {
        if (!values.isEmpty()) {
            final Iterator<?> it = values.iterator();
            String lastValue = escapeValue(it.next(), true, transformer);
            final StringBuilder buf = new StringBuilder(lastValue);
            while (it.hasNext()) {
                // if the last value ended with an escape character, it has
                // to be escaped itself; otherwise the list delimiter will
                // be escaped
                if (lastValue.endsWith(ESCAPE) && (countTrailingBS(lastValue) / 2) % 2 != 0) {
                    buf.append(ESCAPE).append(ESCAPE);
                }
                buf.append(getDelimiter());
                lastValue = escapeValue(it.next(), true, transformer);
                buf.append(lastValue);
            }
            return buf.toString();
        }
        return null;
    }","  public void test24()  throws Throwable  {
      LegacyListDelimiterHandler legacyListDelimiterHandler0 = new LegacyListDelimiterHandler('\u0016');
      LinkedList<String> linkedList0 = new LinkedList<String>();
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      linkedList1.add((Object) linkedList0);
      linkedList1.add((Object) linkedList0);
      ValueTransformer valueTransformer0 = ListDelimiterHandler.NOOP_TRANSFORMER;
      Object object0 = legacyListDelimiterHandler0.escapeList(linkedList1, valueTransformer0);
}"
711,"    public Object escapeList(final List<?> values, final ValueTransformer transformer) {
        if (!values.isEmpty()) {
            final Iterator<?> it = values.iterator();
            String lastValue = escapeValue(it.next(), true, transformer);
            final StringBuilder buf = new StringBuilder(lastValue);
            while (it.hasNext()) {
                // if the last value ended with an escape character, it has
                // to be escaped itself; otherwise the list delimiter will
                // be escaped
                if (lastValue.endsWith(ESCAPE) && (countTrailingBS(lastValue) / 2) % 2 != 0) {
                    buf.append(ESCAPE).append(ESCAPE);
                }
                buf.append(getDelimiter());
                lastValue = escapeValue(it.next(), true, transformer);
                buf.append(lastValue);
            }
            return buf.toString();
        }
        return null;
    }","  public void test25()  throws Throwable  {
      LegacyListDelimiterHandler legacyListDelimiterHandler0 = new LegacyListDelimiterHandler('\u0016');
      LinkedList<String> linkedList0 = new LinkedList<String>();
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      linkedList1.add((Object) linkedList0);
      linkedList1.add((Object) linkedList0);
      ValueTransformer valueTransformer0 = ListDelimiterHandler.NOOP_TRANSFORMER;
      Object object0 = legacyListDelimiterHandler0.escapeList(linkedList1, valueTransformer0);
}"
712,"    public char getDelimiter() {
        return delimiter;
    }","  public void test26()  throws Throwable  {
      LegacyListDelimiterHandler legacyListDelimiterHandler0 = new LegacyListDelimiterHandler('y');
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      ValueTransformer valueTransformer0 = ListDelimiterHandler.NOOP_TRANSFORMER;
      legacyListDelimiterHandler0.escapeList(linkedList0, valueTransformer0);
}"
713,"    public char getDelimiter() {
        return delimiter;
    }","  public void test27()  throws Throwable  {
      LegacyListDelimiterHandler legacyListDelimiterHandler0 = new LegacyListDelimiterHandler('\u0016');
      legacyListDelimiterHandler0.escapeString(""[]\u0016[]"");
}"
714,"    public <T> void toCollection(final Object src, final Class<T> elemClass, final ConfigurationInterpolator ci, final Collection<T> dest) {
        if (dest == null) {
            throw new IllegalArgumentException(""Target collection must not be null!"");
        }

        if (src != null && !isEmptyElement(src)) {
            final ConfigurationInterpolator interpolator = fetchInterpolator(ci);
            convertToCollection(src, elemClass, interpolator, dest);
        }
    }","  public void test0()  throws Throwable  {
      DefaultConversionHandler defaultConversionHandler0 = DefaultConversionHandler.INSTANCE;
      DefaultListDelimiterHandler defaultListDelimiterHandler0 = new DefaultListDelimiterHandler('*');
      Collection<String> collection0 = defaultListDelimiterHandler0.splitString(""kQ="", false);
      ConfigurationInterpolator configurationInterpolator0 = new ConfigurationInterpolator();
      Class<DefaultListDelimiterHandler> class0 = DefaultListDelimiterHandler.class;
      LinkedList<DefaultListDelimiterHandler> linkedList0 = new LinkedList<DefaultListDelimiterHandler>();
      // Undeclared exception!
      try { 
        defaultConversionHandler0.toCollection((Object) collection0, class0, configurationInterpolator0, (Collection<DefaultListDelimiterHandler>) linkedList0);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // The value 'kQ=' (class java.lang.String) can't be converted to a org.apache.commons.configuration2.convert.DefaultListDelimiterHandler object
         //
         verifyException(""org.apache.commons.configuration2.convert.PropertyConverter"", e);
      }
  }"
715,"    public <T> T to(final Object src, final Class<T> targetCls, final ConfigurationInterpolator ci) {
        final ConfigurationInterpolator interpolator = fetchInterpolator(ci);
        return convert(interpolator.interpolate(src), targetCls, interpolator);
    }","  public void test1()  throws Throwable  {
      DefaultConversionHandler defaultConversionHandler0 = DefaultConversionHandler.INSTANCE;
      LegacyListDelimiterHandler legacyListDelimiterHandler0 = new LegacyListDelimiterHandler('S');
      Class<Object> class0 = Object.class;
      Object object0 = defaultConversionHandler0.INSTANCE.to((Object) legacyListDelimiterHandler0, class0, (ConfigurationInterpolator) null);
}"
716,"    protected boolean isEmptyElement(final Object src) {
        return (src instanceof CharSequence) && ((CharSequence) src).length() == 0;
    }","  public void test2()  throws Throwable  {
      DefaultConversionHandler defaultConversionHandler0 = DefaultConversionHandler.INSTANCE;
      boolean boolean0 = defaultConversionHandler0.isEmptyElement("""");
}"
717,"    protected boolean isEmptyElement(final Object src) {
        return (src instanceof CharSequence) && ((CharSequence) src).length() == 0;
    }","  public void test3()  throws Throwable  {
      DefaultConversionHandler defaultConversionHandler0 = DefaultConversionHandler.INSTANCE;
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(""yyyy-MM-dd HH:mm:ss"", ""w|"");
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(""failed finding method "", ""-u3Kp5@+!/C"", 256, sQLTransientConnectionException0);
      boolean boolean0 = defaultConversionHandler0.isEmptyElement(sQLSyntaxErrorException0);
}"
718,"    protected boolean isComplexObject(final Object src) {
        return src instanceof Iterator<?> || src instanceof Iterable<?> || (src != null && src.getClass().isArray());
    }","  public void test4()  throws Throwable  {
      DefaultConversionHandler defaultConversionHandler0 = DefaultConversionHandler.INSTANCE;
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("""");
      SQLWarning sQLWarning0 = new SQLWarning(sQLIntegrityConstraintViolationException0);
      boolean boolean0 = defaultConversionHandler0.isComplexObject(sQLWarning0);
}"
719,"    protected boolean isComplexObject(final Object src) {
        return src instanceof Iterator<?> || src instanceof Iterable<?> || (src != null && src.getClass().isArray());
    }","  public void test5()  throws Throwable  {
      DefaultConversionHandler defaultConversionHandler0 = DefaultConversionHandler.INSTANCE;
      boolean boolean0 = defaultConversionHandler0.isComplexObject((Object) null);
}"
720,"    public String getDateFormat() {
        final String fmt = dateFormat;
        return fmt != null ? fmt : DEFAULT_DATE_FORMAT;
    }","  public void test6()  throws Throwable  {
      DefaultConversionHandler defaultConversionHandler0 = DefaultConversionHandler.INSTANCE;
      defaultConversionHandler0.setDateFormat("""");
      String string0 = defaultConversionHandler0.getDateFormat();
}"
721,"    protected Collection<?> extractValues(final Object source, final int limit) {
        return EXTRACTOR.flatten(source, limit);
    }","  public void test7()  throws Throwable  {
      DefaultConversionHandler defaultConversionHandler0 = DefaultConversionHandler.INSTANCE;
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException((String) null, (String) null);
      Collection<?> collection0 = defaultConversionHandler0.INSTANCE.extractValues(sQLRecoverableException0, (-1));
}"
722,"    protected Collection<?> extractValues(final Object source, final int limit) {
        return EXTRACTOR.flatten(source, limit);
    }","  public void test8()  throws Throwable  {
      DefaultConversionHandler defaultConversionHandler0 = DefaultConversionHandler.INSTANCE;
      Collection<?> collection0 = defaultConversionHandler0.extractValues((Object) null);
}"
723,"    protected Object extractConversionValue(final Object container, final Class<?> targetCls, final ConfigurationInterpolator ci) {
        final Collection<?> values = extractValues(container, 1);
        return values.isEmpty() ? null : ci.interpolate(values.iterator().next());
    }","  public void test9()  throws Throwable  {
      DefaultConversionHandler defaultConversionHandler0 = DefaultConversionHandler.INSTANCE;
      Class<SQLClientInfoException> class0 = SQLClientInfoException.class;
      ConfigurationInterpolator configurationInterpolator0 = new ConfigurationInterpolator();
      Object object0 = defaultConversionHandler0.extractConversionValue(""+{K6Hn><A1C2UM"", class0, configurationInterpolator0);
}"
724,"    protected <T> T convertValue(final Object src, final Class<T> targetCls, final ConfigurationInterpolator ci) {
        if (src == null) {
            return null;
        }

        // This is a safe cast because PropertyConverter either returns an
        // object of the correct class or throws an exception.
        @SuppressWarnings(""unchecked"")
        final T result = (T) PropertyConverter.to(targetCls, src, this);
        return result;
    }","  public void test10()  throws Throwable  {
      DefaultConversionHandler defaultConversionHandler0 = DefaultConversionHandler.INSTANCE;
      Class<DefaultListDelimiterHandler> class0 = DefaultListDelimiterHandler.class;
      DefaultListDelimiterHandler defaultListDelimiterHandler0 = defaultConversionHandler0.convertValue((Object) null, class0, (ConfigurationInterpolator) null);
}"
725,"    protected <T> T convertValue(final Object src, final Class<T> targetCls, final ConfigurationInterpolator ci) {
        if (src == null) {
            return null;
        }

        // This is a safe cast because PropertyConverter either returns an
        // object of the correct class or throws an exception.
        @SuppressWarnings(""unchecked"")
        final T result = (T) PropertyConverter.to(targetCls, src, this);
        return result;
    }","  public void test11()  throws Throwable  {
      DefaultConversionHandler defaultConversionHandler0 = DefaultConversionHandler.INSTANCE;
      ConfigurationInterpolator configurationInterpolator0 = new ConfigurationInterpolator();
      MockIOException mockIOException0 = new MockIOException(""+{K6Hn><A1C2UM"");
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(""f4,e34/1!{'u]\""3"", mockIOException0);
      SQLDataException sQLDataException0 = new SQLDataException(""g=_24+3gR*\""8u@+OP"", ""f4,e34/1!{'u]\""3"", sQLTransientConnectionException0);
      SQLWarning sQLWarning0 = new SQLWarning(""org.apache.commons.configuration2.interpol.ConfigurationInterpolator"", ""+{K6Hn><A1C2UM"", sQLDataException0);
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException(""org.apache.commons.configuration2.interpol.ConfigurationInterpolator.defaultPrefixLookups"", ""+{K6Hn><A1C2UM"", 0, sQLWarning0);
      Class<String> class0 = String.class;
      String string0 = defaultConversionHandler0.INSTANCE.convertValue((Object) sQLRecoverableException0, class0, configurationInterpolator0);
}"
726,"    protected <T> T convert(final Object src, final Class<T> targetCls, final ConfigurationInterpolator ci) {
        final Object conversionSrc = isComplexObject(src) ? extractConversionValue(src, targetCls, ci) : src;
        return convertValue(ci.interpolate(conversionSrc), targetCls, ci);
    }","  public void test12()  throws Throwable  {
      DefaultConversionHandler defaultConversionHandler0 = DefaultConversionHandler.INSTANCE;
      InterpolatorSpecification interpolatorSpecification0 = mock(InterpolatorSpecification.class, new ViolatedAssumptionAnswer());
      doReturn((Collection) null).when(interpolatorSpecification0).getDefaultLookups();
      doReturn((ConfigurationInterpolator) null).when(interpolatorSpecification0).getInterpolator();
      doReturn((ConfigurationInterpolator) null).when(interpolatorSpecification0).getParentInterpolator();
      doReturn((Map) null).when(interpolatorSpecification0).getPrefixLookups();
      doReturn((Function) null).when(interpolatorSpecification0).getStringConverter();
      ConfigurationInterpolator configurationInterpolator0 = ConfigurationInterpolator.fromSpecification(interpolatorSpecification0);
      Class<SQLNonTransientConnectionException> class0 = SQLNonTransientConnectionException.class;
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = defaultConversionHandler0.convert((Object) null, class0, configurationInterpolator0);
}"
727,"    protected <T> T convert(final Object src, final Class<T> targetCls, final ConfigurationInterpolator ci) {
        final Object conversionSrc = isComplexObject(src) ? extractConversionValue(src, targetCls, ci) : src;
        return convertValue(ci.interpolate(conversionSrc), targetCls, ci);
    }","  public void test13()  throws Throwable  {
      DefaultConversionHandler defaultConversionHandler0 = DefaultConversionHandler.INSTANCE;
      ConfigurationInterpolator configurationInterpolator0 = new ConfigurationInterpolator();
      ConstantLookup constantLookup0 = new ConstantLookup();
      Class<String> class0 = String.class;
      String string0 = defaultConversionHandler0.INSTANCE.convert((Object) constantLookup0, class0, configurationInterpolator0);
}"
728,"    public <T> void toCollection(final Object src, final Class<T> elemClass, final ConfigurationInterpolator ci, final Collection<T> dest) {
        if (dest == null) {
            throw new IllegalArgumentException(""Target collection must not be null!"");
        }

        if (src != null && !isEmptyElement(src)) {
            final ConfigurationInterpolator interpolator = fetchInterpolator(ci);
            convertToCollection(src, elemClass, interpolator, dest);
        }
    }","  public void test14()  throws Throwable  {
      DefaultConversionHandler defaultConversionHandler0 = new DefaultConversionHandler();
      Class<String> class0 = String.class;
      Locale locale0 = Locale.GERMAN;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      // Undeclared exception!
      try { 
        defaultConversionHandler0.toCollection((Object) ""yyyy-MM-dd HH:mm:ss"", class0, (ConfigurationInterpolator) null, (Collection<String>) set0);
        fail(""Expecting exception: UnsupportedOperationException"");
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.util.AbstractCollection"", e);
      }
  }"
729,"    public Object toArray(final Object src, final Class<?> elemClass, final ConfigurationInterpolator ci) {
        if (src == null) {
            return null;
        }
        if (isEmptyElement(src)) {
            return Array.newInstance(elemClass, 0);
        }

        final ConfigurationInterpolator interpolator = fetchInterpolator(ci);
        return elemClass.isPrimitive() ? toPrimitiveArray(src, elemClass, interpolator) : toObjectArray(src, elemClass, interpolator);
    }","  public void test15()  throws Throwable  {
      DefaultConversionHandler defaultConversionHandler0 = new DefaultConversionHandler();
      // Undeclared exception!
      try { 
        defaultConversionHandler0.INSTANCE.toArray(""org.apache.commons.configuration2.interpol.ConfigurationInterpolator.defaultPrefixLookups"", (Class<?>) null, (ConfigurationInterpolator) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.configuration2.convert.DefaultConversionHandler"", e);
      }
  }"
730,"    public <T> T to(final Object src, final Class<T> targetCls, final ConfigurationInterpolator ci) {
        final ConfigurationInterpolator interpolator = fetchInterpolator(ci);
        return convert(interpolator.interpolate(src), targetCls, interpolator);
    }","  public void test16()  throws Throwable  {
      DefaultConversionHandler defaultConversionHandler0 = new DefaultConversionHandler();
      // Undeclared exception!
      try { 
        defaultConversionHandler0.to((Object) defaultConversionHandler0, (Class<SQLDataException>) null, (ConfigurationInterpolator) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.configuration2.convert.PropertyConverter"", e);
      }
  }"
731,"    protected Object extractConversionValue(final Object container, final Class<?> targetCls, final ConfigurationInterpolator ci) {
        final Collection<?> values = extractValues(container, 1);
        return values.isEmpty() ? null : ci.interpolate(values.iterator().next());
    }","  public void test17()  throws Throwable  {
      DefaultConversionHandler defaultConversionHandler0 = new DefaultConversionHandler();
      IsoEra isoEra0 = IsoEra.CE;
      Class<Integer> class0 = Integer.class;
      // Undeclared exception!
      try { 
        defaultConversionHandler0.extractConversionValue(isoEra0, class0, (ConfigurationInterpolator) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.configuration2.convert.DefaultConversionHandler"", e);
      }
  }"
732,"    protected <T> T convertValue(final Object src, final Class<T> targetCls, final ConfigurationInterpolator ci) {
        if (src == null) {
            return null;
        }

        // This is a safe cast because PropertyConverter either returns an
        // object of the correct class or throws an exception.
        @SuppressWarnings(""unchecked"")
        final T result = (T) PropertyConverter.to(targetCls, src, this);
        return result;
    }","  public void test18()  throws Throwable  {
      DefaultConversionHandler defaultConversionHandler0 = new DefaultConversionHandler();
      LegacyListDelimiterHandler legacyListDelimiterHandler0 = new LegacyListDelimiterHandler('>');
      Class<SQLRecoverableException> class0 = SQLRecoverableException.class;
      ConfigurationInterpolator configurationInterpolator0 = new ConfigurationInterpolator();
      // Undeclared exception!
      try { 
        defaultConversionHandler0.convertValue((Object) legacyListDelimiterHandler0, class0, configurationInterpolator0);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // The value 'org.apache.commons.configuration2.convert.LegacyListDelimiterHandler@2' (class org.apache.commons.configuration2.convert.LegacyListDelimiterHandler) can't be converted to a java.sql.SQLRecoverableException object
         //
         verifyException(""org.apache.commons.configuration2.convert.PropertyConverter"", e);
      }
  }"
733,"    protected <T> T convert(final Object src, final Class<T> targetCls, final ConfigurationInterpolator ci) {
        final Object conversionSrc = isComplexObject(src) ? extractConversionValue(src, targetCls, ci) : src;
        return convertValue(ci.interpolate(conversionSrc), targetCls, ci);
    }","  public void test19()  throws Throwable  {
      DefaultConversionHandler defaultConversionHandler0 = DefaultConversionHandler.INSTANCE;
      Class<BatchUpdateException> class0 = BatchUpdateException.class;
      InterpolatorSpecification interpolatorSpecification0 = mock(InterpolatorSpecification.class, new ViolatedAssumptionAnswer());
      doReturn((Collection) null).when(interpolatorSpecification0).getDefaultLookups();
      doReturn((ConfigurationInterpolator) null).when(interpolatorSpecification0).getInterpolator();
      doReturn((ConfigurationInterpolator) null).when(interpolatorSpecification0).getParentInterpolator();
      doReturn((Map) null).when(interpolatorSpecification0).getPrefixLookups();
      doReturn((Function) null).when(interpolatorSpecification0).getStringConverter();
      ConfigurationInterpolator configurationInterpolator0 = ConfigurationInterpolator.fromSpecification(interpolatorSpecification0);
      // Undeclared exception!
      try { 
        defaultConversionHandler0.convert((Object) """", class0, configurationInterpolator0);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // The value '' (class java.lang.String) can't be converted to a java.sql.BatchUpdateException object
         //
         verifyException(""org.apache.commons.configuration2.convert.PropertyConverter"", e);
      }
  }"
734,"    protected <T> T convert(final Object src, final Class<T> targetCls, final ConfigurationInterpolator ci) {
        final Object conversionSrc = isComplexObject(src) ? extractConversionValue(src, targetCls, ci) : src;
        return convertValue(ci.interpolate(conversionSrc), targetCls, ci);
    }","  public void test20()  throws Throwable  {
      DefaultConversionHandler defaultConversionHandler0 = new DefaultConversionHandler();
      Class<String> class0 = String.class;
      // Undeclared exception!
      try { 
        defaultConversionHandler0.convert((Object) ""yyyy-MM-dd HH:mm:ss"", class0, (ConfigurationInterpolator) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.configuration2.convert.DefaultConversionHandler"", e);
      }
  }"
735,"    public Object toArray(final Object src, final Class<?> elemClass, final ConfigurationInterpolator ci) {
        if (src == null) {
            return null;
        }
        if (isEmptyElement(src)) {
            return Array.newInstance(elemClass, 0);
        }

        final ConfigurationInterpolator interpolator = fetchInterpolator(ci);
        return elemClass.isPrimitive() ? toPrimitiveArray(src, elemClass, interpolator) : toObjectArray(src, elemClass, interpolator);
    }","  public void test21()  throws Throwable  {
      DefaultConversionHandler defaultConversionHandler0 = new DefaultConversionHandler();
      ConstantLookup constantLookup0 = new ConstantLookup();
      Class<Object> class0 = Object.class;
      Object object0 = defaultConversionHandler0.toArray(constantLookup0, class0, (ConfigurationInterpolator) null);
}"
736,"    protected Object extractConversionValue(final Object container, final Class<?> targetCls, final ConfigurationInterpolator ci) {
        final Collection<?> values = extractValues(container, 1);
        return values.isEmpty() ? null : ci.interpolate(values.iterator().next());
    }","  public void test22()  throws Throwable  {
      DefaultConversionHandler defaultConversionHandler0 = DefaultConversionHandler.INSTANCE;
      ExprLookup exprLookup0 = new ExprLookup();
      ConfigurationInterpolator configurationInterpolator0 = exprLookup0.getInterpolator();
      Class<DataTruncation> class0 = DataTruncation.class;
      Object object0 = defaultConversionHandler0.extractConversionValue((Object) null, class0, configurationInterpolator0);
}"
737,"    public Object toArray(final Object src, final Class<?> elemClass, final ConfigurationInterpolator ci) {
        if (src == null) {
            return null;
        }
        if (isEmptyElement(src)) {
            return Array.newInstance(elemClass, 0);
        }

        final ConfigurationInterpolator interpolator = fetchInterpolator(ci);
        return elemClass.isPrimitive() ? toPrimitiveArray(src, elemClass, interpolator) : toObjectArray(src, elemClass, interpolator);
    }","  public void test23()  throws Throwable  {
      DefaultConversionHandler defaultConversionHandler0 = DefaultConversionHandler.INSTANCE;
      Class<SQLNonTransientConnectionException> class0 = SQLNonTransientConnectionException.class;
      ConfigurationInterpolator configurationInterpolator0 = new ConfigurationInterpolator();
      // Undeclared exception!
      try { 
        defaultConversionHandler0.toArray(""yyyy-MM-dd HH:mm:ss"", class0, configurationInterpolator0);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // The value 'yyyy-MM-dd HH:mm:ss' (class java.lang.String) can't be converted to a java.sql.SQLNonTransientConnectionException object
         //
         verifyException(""org.apache.commons.configuration2.convert.PropertyConverter"", e);
      }
  }"
738,"    public <T> T to(final Object src, final Class<T> targetCls, final ConfigurationInterpolator ci) {
        final ConfigurationInterpolator interpolator = fetchInterpolator(ci);
        return convert(interpolator.interpolate(src), targetCls, interpolator);
    }","  public void test24()  throws Throwable  {
      DefaultConversionHandler defaultConversionHandler0 = new DefaultConversionHandler();
      Class<Integer> class0 = Integer.class;
      ConfigurationInterpolator configurationInterpolator0 = new ConfigurationInterpolator();
      Integer integer0 = defaultConversionHandler0.INSTANCE.to((Object) null, class0, configurationInterpolator0);
}"
739,"    public <T> void toCollection(final Object src, final Class<T> elemClass, final ConfigurationInterpolator ci, final Collection<T> dest) {
        if (dest == null) {
            throw new IllegalArgumentException(""Target collection must not be null!"");
        }

        if (src != null && !isEmptyElement(src)) {
            final ConfigurationInterpolator interpolator = fetchInterpolator(ci);
            convertToCollection(src, elemClass, interpolator, dest);
        }
    }","  public void test25()  throws Throwable  {
      DefaultConversionHandler defaultConversionHandler0 = DefaultConversionHandler.INSTANCE;
      Class<SQLRecoverableException> class0 = SQLRecoverableException.class;
      ConfigurationInterpolator configurationInterpolator0 = new ConfigurationInterpolator();
      Stack<SQLRecoverableException> stack0 = new Stack<SQLRecoverableException>();
      defaultConversionHandler0.toCollection((Object) """", class0, configurationInterpolator0, (Collection<SQLRecoverableException>) stack0);
}"
740,"    public <T> void toCollection(final Object src, final Class<T> elemClass, final ConfigurationInterpolator ci, final Collection<T> dest) {
        if (dest == null) {
            throw new IllegalArgumentException(""Target collection must not be null!"");
        }

        if (src != null && !isEmptyElement(src)) {
            final ConfigurationInterpolator interpolator = fetchInterpolator(ci);
            convertToCollection(src, elemClass, interpolator, dest);
        }
    }","  public void test26()  throws Throwable  {
      DefaultConversionHandler defaultConversionHandler0 = new DefaultConversionHandler();
      Class<SQLRecoverableException> class0 = SQLRecoverableException.class;
      Vector<SQLRecoverableException> vector0 = new Vector<SQLRecoverableException>();
      defaultConversionHandler0.toCollection((Object) null, class0, (ConfigurationInterpolator) null, (Collection<SQLRecoverableException>) vector0);
}"
741,"    public <T> void toCollection(final Object src, final Class<T> elemClass, final ConfigurationInterpolator ci, final Collection<T> dest) {
        if (dest == null) {
            throw new IllegalArgumentException(""Target collection must not be null!"");
        }

        if (src != null && !isEmptyElement(src)) {
            final ConfigurationInterpolator interpolator = fetchInterpolator(ci);
            convertToCollection(src, elemClass, interpolator, dest);
        }
    }","  public void test27()  throws Throwable  {
      DefaultConversionHandler defaultConversionHandler0 = new DefaultConversionHandler();
      Class<SQLDataException> class0 = SQLDataException.class;
      // Undeclared exception!
      try { 
        defaultConversionHandler0.toCollection((Object) ""yyyy-MM-dd HH:mm:ss"", class0, (ConfigurationInterpolator) null, (Collection<SQLDataException>) null);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Target collection must not be null!
         //
         verifyException(""org.apache.commons.configuration2.convert.DefaultConversionHandler"", e);
      }
  }"
742,"    public Object toArray(final Object src, final Class<?> elemClass, final ConfigurationInterpolator ci) {
        if (src == null) {
            return null;
        }
        if (isEmptyElement(src)) {
            return Array.newInstance(elemClass, 0);
        }

        final ConfigurationInterpolator interpolator = fetchInterpolator(ci);
        return elemClass.isPrimitive() ? toPrimitiveArray(src, elemClass, interpolator) : toObjectArray(src, elemClass, interpolator);
    }","  public void test28()  throws Throwable  {
      DefaultConversionHandler defaultConversionHandler0 = DefaultConversionHandler.INSTANCE;
      Class<SQLException> class0 = SQLException.class;
      ConfigurationInterpolator configurationInterpolator0 = new ConfigurationInterpolator();
      Object object0 = defaultConversionHandler0.INSTANCE.toArray("""", class0, configurationInterpolator0);
}"
743,"    public Object toArray(final Object src, final Class<?> elemClass, final ConfigurationInterpolator ci) {
        if (src == null) {
            return null;
        }
        if (isEmptyElement(src)) {
            return Array.newInstance(elemClass, 0);
        }

        final ConfigurationInterpolator interpolator = fetchInterpolator(ci);
        return elemClass.isPrimitive() ? toPrimitiveArray(src, elemClass, interpolator) : toObjectArray(src, elemClass, interpolator);
    }","  public void test29()  throws Throwable  {
      DefaultConversionHandler defaultConversionHandler0 = new DefaultConversionHandler();
      Class<SQLException> class0 = SQLException.class;
      Object object0 = defaultConversionHandler0.toArray((Object) null, class0, (ConfigurationInterpolator) null);
}"
744,"    public String getDateFormat() {
        final String fmt = dateFormat;
        return fmt != null ? fmt : DEFAULT_DATE_FORMAT;
    }","  public void test30()  throws Throwable  {
      DefaultConversionHandler defaultConversionHandler0 = new DefaultConversionHandler();
      String string0 = defaultConversionHandler0.getDateFormat();
}"
745,"    public String getDateFormat() {
        final String fmt = dateFormat;
        return fmt != null ? fmt : DEFAULT_DATE_FORMAT;
    }","  public void test31()  throws Throwable  {
      DefaultConversionHandler defaultConversionHandler0 = new DefaultConversionHandler();
      String string0 = defaultConversionHandler0.getDateFormat();
}"
746,"    public <T> T to(final Object src, final Class<T> targetCls, final ConfigurationInterpolator ci) {
        final ConfigurationInterpolator interpolator = fetchInterpolator(ci);
        return convert(interpolator.interpolate(src), targetCls, interpolator);
    }","  public void test32()  throws Throwable  {
      DefaultConversionHandler defaultConversionHandler0 = DefaultConversionHandler.INSTANCE;
      ConstantLookup constantLookup0 = new ConstantLookup();
      Class<Object> class0 = Object.class;
      Object object0 = defaultConversionHandler0.toArray(constantLookup0, class0, (ConfigurationInterpolator) null);
      Class<SQLDataException> class1 = SQLDataException.class;
      // Undeclared exception!
      try { 
        defaultConversionHandler0.to(object0, class1, (ConfigurationInterpolator) null);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // The value 'org.apache.commons.configuration2.interpol.ConstantLookup@1' (class org.apache.commons.configuration2.interpol.ConstantLookup) can't be converted to a java.sql.SQLDataException object
         //
         verifyException(""org.apache.commons.configuration2.convert.PropertyConverter"", e);
      }
  }"
747,"    protected String escapeString(final String s) {
        return s;
    }","  public void test0()  throws Throwable  {
      DisabledListDelimiterHandler disabledListDelimiterHandler0 = (DisabledListDelimiterHandler)DisabledListDelimiterHandler.INSTANCE;
      String string0 = disabledListDelimiterHandler0.escapeString(""WebTestClient-Request-Id"");
}"
748,"    protected String escapeString(final String s) {
        return s;
    }","  public void test1()  throws Throwable  {
      DisabledListDelimiterHandler disabledListDelimiterHandler0 = new DisabledListDelimiterHandler();
      String string0 = disabledListDelimiterHandler0.escapeString("""");
}"
749,"    protected Collection<String> splitString(final String s, final boolean trim) {
        final Collection<String> result = new ArrayList<>(1);
        result.add(s);
        return result;
    }","  public void test2()  throws Throwable  {
      DisabledListDelimiterHandler disabledListDelimiterHandler0 = new DisabledListDelimiterHandler();
      Collection<String> collection0 = disabledListDelimiterHandler0.splitString((String) null, false);
}"
750,"    public Object escapeList(final List<?> values, final ValueTransformer transformer) {
        throw new UnsupportedOperationException(""Escaping lists is not supported!"");
    }","  public void test3()  throws Throwable  {
      DisabledListDelimiterHandler disabledListDelimiterHandler0 = new DisabledListDelimiterHandler();
      ValueTransformer valueTransformer0 = ListDelimiterHandler.NOOP_TRANSFORMER;
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      // Undeclared exception!
      try { 
        disabledListDelimiterHandler0.escapeList(linkedList0, valueTransformer0);
        fail(""Expecting exception: UnsupportedOperationException"");
      } catch(UnsupportedOperationException e) {
         //
         // Escaping lists is not supported!
         //
         verifyException(""org.apache.commons.configuration2.convert.DisabledListDelimiterHandler"", e);
      }
  }"
751,"    protected String escapeString(final String s) {
        return s;
    }","  public void test4()  throws Throwable  {
      DisabledListDelimiterHandler disabledListDelimiterHandler0 = new DisabledListDelimiterHandler();
      String string0 = disabledListDelimiterHandler0.escapeString((String) null);
}"
752,"    public char getDelimiter() {
        return delimiter;
    }","  public void test0()  throws Throwable  {
      DefaultListDelimiterHandler defaultListDelimiterHandler0 = new DefaultListDelimiterHandler('6');
      Collection<?> collection0 = defaultListDelimiterHandler0.flatten(""!BK2RU>4^.{b"", 0);
}"
753,"    public DefaultListDelimiterHandler(final char listDelimiter) {
        delimiter = listDelimiter;
    }","  public void test1()  throws Throwable  {
      DefaultListDelimiterHandler defaultListDelimiterHandler0 = new DefaultListDelimiterHandler('6');
      Collection<?> collection0 = defaultListDelimiterHandler0.flatten(""!BK2RU>4^.{b"", 0);
}"
754,"    public Object escapeList(final List<?> values, final ValueTransformer transformer) {
        final Object[] escapedValues = new Object[values.size()];
        int idx = 0;
        for (final Object v : values) {
            escapedValues[idx++] = escape(v, transformer);
        }
        return StringUtils.join(escapedValues, getDelimiter());
    }","  public void test2()  throws Throwable  {
      DefaultListDelimiterHandler defaultListDelimiterHandler0 = new DefaultListDelimiterHandler('m');
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add(""ripn8W"");
      // Undeclared exception!
      try { 
        defaultListDelimiterHandler0.escapeList(linkedList0, (ValueTransformer) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.configuration2.convert.AbstractListDelimiterHandler"", e);
      }
  }"
755,"    public char getDelimiter() {
        return delimiter;
    }","  public void test3()  throws Throwable  {
      DefaultListDelimiterHandler defaultListDelimiterHandler0 = new DefaultListDelimiterHandler('4');
      char char0 = defaultListDelimiterHandler0.getDelimiter();
}"
756,"    public char getDelimiter() {
        return delimiter;
    }","  public void test4()  throws Throwable  {
      DefaultListDelimiterHandler defaultListDelimiterHandler0 = new DefaultListDelimiterHandler('t');
      char char0 = defaultListDelimiterHandler0.getDelimiter();
}"
757,"    public char getDelimiter() {
        return delimiter;
    }","  public void test5()  throws Throwable  {
      DefaultListDelimiterHandler defaultListDelimiterHandler0 = new DefaultListDelimiterHandler('@');
      defaultListDelimiterHandler0.escapeString("""");
}"
758,"    protected Collection<String> splitString(final String s, final boolean trim) {
        final List<String> list = new LinkedList<>();
        StringBuilder token = new StringBuilder();
        boolean inEscape = false;

        for (int i = 0; i < s.length(); i++) {
            final char c = s.charAt(i);
            if (inEscape) {
                // last character was the escape marker
                // can current character be escaped?
                if (c != getDelimiter() && c != ESCAPE) {
                    // no, also add escape character
                    token.append(ESCAPE);
                }
                token.append(c);
                inEscape = false;
            } else if (c == getDelimiter()) {
                // found a list delimiter -> add token and
                // reset buffer
                String t = token.toString();
                if (trim) {
                    t = t.trim();
                }
                list.add(t);
                token = new StringBuilder();
            } else if (c == ESCAPE) {
                // potentially escape next character
                inEscape = true;
            } else {
                token.append(c);
            }
        }

        // Trailing delimiter?
        if (inEscape) {
            token.append(ESCAPE);
        }
        // Add last token
        String t = token.toString();
        if (trim) {
            t = t.trim();
        }
        list.add(t);

        return list;
    }","  public void test6()  throws Throwable  {
      DefaultListDelimiterHandler defaultListDelimiterHandler0 = new DefaultListDelimiterHandler('S');
      // Undeclared exception!
      try { 
        defaultListDelimiterHandler0.splitString((String) null, true);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.configuration2.convert.DefaultListDelimiterHandler"", e);
      }
  }"
759,"    protected String escapeString(final String s) {
        final StringBuilder buf = new StringBuilder(s.length() + BUF_SIZE);
        for (int i = 0; i < s.length(); i++) {
            final char c = s.charAt(i);
            if (c == getDelimiter() || c == ESCAPE) {
                buf.append(ESCAPE);
            }
            buf.append(c);
        }
        return buf.toString();
    }","  public void test7()  throws Throwable  {
      DefaultListDelimiterHandler defaultListDelimiterHandler0 = new DefaultListDelimiterHandler('u');
      // Undeclared exception!
      try { 
        defaultListDelimiterHandler0.escapeString((String) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.configuration2.convert.DefaultListDelimiterHandler"", e);
      }
  }"
760,"    public char getDelimiter() {
        return delimiter;
    }","  public void test8()  throws Throwable  {
      DefaultListDelimiterHandler defaultListDelimiterHandler0 = new DefaultListDelimiterHandler('t');
      Collection<?> collection0 = defaultListDelimiterHandler0.flatten(""WebTes\\\tClien\\\t-Reques\\\t-Id"", (-1));
}"
761,"    public DefaultListDelimiterHandler(final char listDelimiter) {
        delimiter = listDelimiter;
    }","  public void test9()  throws Throwable  {
      DefaultListDelimiterHandler defaultListDelimiterHandler0 = new DefaultListDelimiterHandler('t');
      Collection<?> collection0 = defaultListDelimiterHandler0.flatten(""WebTes\\\tClien\\\t-Reques\\\t-Id"", (-1));
}"
762,"    public DefaultListDelimiterHandler(final char listDelimiter) {
        delimiter = listDelimiter;
    }","  public void test10()  throws Throwable  {
      DefaultListDelimiterHandler defaultListDelimiterHandler0 = new DefaultListDelimiterHandler('t');
      ValueTransformer valueTransformer0 = ListDelimiterHandler.NOOP_TRANSFORMER;
      Object object0 = defaultListDelimiterHandler0.escape(""WebTestClient-Request-Id"", valueTransformer0);
}"
763,"    public char getDelimiter() {
        return delimiter;
    }","  public void test11()  throws Throwable  {
      DefaultListDelimiterHandler defaultListDelimiterHandler0 = new DefaultListDelimiterHandler('\""');
      char char0 = defaultListDelimiterHandler0.getDelimiter();
}"
764,"    protected Collection<String> splitString(final String s, final boolean trim) {
        final List<String> list = new LinkedList<>();
        StringBuilder token = new StringBuilder();
        boolean inEscape = false;

        for (int i = 0; i < s.length(); i++) {
            final char c = s.charAt(i);
            if (inEscape) {
                // last character was the escape marker
                // can current character be escaped?
                if (c != getDelimiter() && c != ESCAPE) {
                    // no, also add escape character
                    token.append(ESCAPE);
                }
                token.append(c);
                inEscape = false;
            } else if (c == getDelimiter()) {
                // found a list delimiter -> add token and
                // reset buffer
                String t = token.toString();
                if (trim) {
                    t = t.trim();
                }
                list.add(t);
                token = new StringBuilder();
            } else if (c == ESCAPE) {
                // potentially escape next character
                inEscape = true;
            } else {
                token.append(c);
            }
        }

        // Trailing delimiter?
        if (inEscape) {
            token.append(ESCAPE);
        }
        // Add last token
        String t = token.toString();
        if (trim) {
            t = t.trim();
        }
        list.add(t);

        return list;
    }","  public void test12()  throws Throwable  {
      DefaultListDelimiterHandler defaultListDelimiterHandler0 = new DefaultListDelimiterHandler('@');
      Collection<String> collection0 = defaultListDelimiterHandler0.splitString("""", false);
}"
765,"    public char getDelimiter() {
        return delimiter;
    }","  public void test13()  throws Throwable  {
      DefaultListDelimiterHandler defaultListDelimiterHandler0 = new DefaultListDelimiterHandler('@');
      Collection<String> collection0 = defaultListDelimiterHandler0.splitString("""", false);
}"
766,"    public char getDelimiter() {
        return delimiter;
    }","  public void test14()  throws Throwable  {
      DefaultListDelimiterHandler defaultListDelimiterHandler0 = new DefaultListDelimiterHandler('u');
      Collection<String> collection0 = defaultListDelimiterHandler0.splitString(""WebTestClient-Request-Id"", true);
}"
767,"    protected Collection<String> splitString(final String s, final boolean trim) {
        final List<String> list = new LinkedList<>();
        StringBuilder token = new StringBuilder();
        boolean inEscape = false;

        for (int i = 0; i < s.length(); i++) {
            final char c = s.charAt(i);
            if (inEscape) {
                // last character was the escape marker
                // can current character be escaped?
                if (c != getDelimiter() && c != ESCAPE) {
                    // no, also add escape character
                    token.append(ESCAPE);
                }
                token.append(c);
                inEscape = false;
            } else if (c == getDelimiter()) {
                // found a list delimiter -> add token and
                // reset buffer
                String t = token.toString();
                if (trim) {
                    t = t.trim();
                }
                list.add(t);
                token = new StringBuilder();
            } else if (c == ESCAPE) {
                // potentially escape next character
                inEscape = true;
            } else {
                token.append(c);
            }
        }

        // Trailing delimiter?
        if (inEscape) {
            token.append(ESCAPE);
        }
        // Add last token
        String t = token.toString();
        if (trim) {
            t = t.trim();
        }
        list.add(t);

        return list;
    }","  public void test15()  throws Throwable  {
      DefaultListDelimiterHandler defaultListDelimiterHandler0 = new DefaultListDelimiterHandler('u');
      Collection<String> collection0 = defaultListDelimiterHandler0.splitString(""WebTestClient-Request-Id"", true);
}"
768,"    public DefaultListDelimiterHandler(final char listDelimiter) {
        delimiter = listDelimiter;
    }","  public void test16()  throws Throwable  {
      DefaultListDelimiterHandler defaultListDelimiterHandler0 = new DefaultListDelimiterHandler('y');
      Collection<String> collection0 = defaultListDelimiterHandler0.split(""h;qJ5y"", false);
}"
769,"    public char getDelimiter() {
        return delimiter;
    }","  public void test17()  throws Throwable  {
      DefaultListDelimiterHandler defaultListDelimiterHandler0 = new DefaultListDelimiterHandler('p');
      Collection<String> collection0 = defaultListDelimiterHandler0.splitString(""org.a\\pache.commos.configuration2.onvert.efaultListDliiterHandler"", false);
}"
770,"    protected Collection<String> splitString(final String s, final boolean trim) {
        final List<String> list = new LinkedList<>();
        StringBuilder token = new StringBuilder();
        boolean inEscape = false;

        for (int i = 0; i < s.length(); i++) {
            final char c = s.charAt(i);
            if (inEscape) {
                // last character was the escape marker
                // can current character be escaped?
                if (c != getDelimiter() && c != ESCAPE) {
                    // no, also add escape character
                    token.append(ESCAPE);
                }
                token.append(c);
                inEscape = false;
            } else if (c == getDelimiter()) {
                // found a list delimiter -> add token and
                // reset buffer
                String t = token.toString();
                if (trim) {
                    t = t.trim();
                }
                list.add(t);
                token = new StringBuilder();
            } else if (c == ESCAPE) {
                // potentially escape next character
                inEscape = true;
            } else {
                token.append(c);
            }
        }

        // Trailing delimiter?
        if (inEscape) {
            token.append(ESCAPE);
        }
        // Add last token
        String t = token.toString();
        if (trim) {
            t = t.trim();
        }
        list.add(t);

        return list;
    }","  public void test18()  throws Throwable  {
      DefaultListDelimiterHandler defaultListDelimiterHandler0 = new DefaultListDelimiterHandler('p');
      Collection<String> collection0 = defaultListDelimiterHandler0.splitString(""org.a\\pache.commos.configuration2.onvert.efaultListDliiterHandler"", false);
}"
771,"    protected String escapeString(final String s) {
        final StringBuilder buf = new StringBuilder(s.length() + BUF_SIZE);
        for (int i = 0; i < s.length(); i++) {
            final char c = s.charAt(i);
            if (c == getDelimiter() || c == ESCAPE) {
                buf.append(ESCAPE);
            }
            buf.append(c);
        }
        return buf.toString();
    }","  public void test19()  throws Throwable  {
      DefaultListDelimiterHandler defaultListDelimiterHandler0 = new DefaultListDelimiterHandler('p');
      String string0 = defaultListDelimiterHandler0.escapeString(""org.apache.commos.configuration2.onvert.efaultListDliiterHandler"");
}"
772,"    public char getDelimiter() {
        return delimiter;
    }","  public void test20()  throws Throwable  {
      DefaultListDelimiterHandler defaultListDelimiterHandler0 = new DefaultListDelimiterHandler('u');
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("""");
      ValueTransformer valueTransformer0 = ListDelimiterHandler.NOOP_TRANSFORMER;
      defaultListDelimiterHandler0.escapeList(linkedList0, valueTransformer0);
}"
773,"    public abstract URL locateFromURL(String basePath, String fileName);

    /**
     * Set the FileOptionsProvider
     *
     * @param provider The FileOptionsProvider
     */
    public void setFileOptionsProvider(final FileOptionsProvider provider) {
        this.optionsProvider = provider;
    }","  public void test0()  throws Throwable  {
      VFSFileSystem vFSFileSystem0 = new VFSFileSystem();
      URL uRL0 = vFSFileSystem0.locateFromURL(""z$0xBLCea=}A)nE"", ""z$0xBLCea=}A)nE"");
}"
774,"    public abstract URL locateFromURL(String basePath, String fileName);

    /**
     * Set the FileOptionsProvider
     *
     * @param provider The FileOptionsProvider
     */
    public void setFileOptionsProvider(final FileOptionsProvider provider) {
        this.optionsProvider = provider;
    }","  public void test1()  throws Throwable  {
      VFSFileSystem vFSFileSystem0 = new VFSFileSystem();
      URL uRL0 = vFSFileSystem0.locateFromURL(""file:///media/FSE_USER/extradrive1/toga-eval-FSE_USER-2023/toga-eval/artifacts/commons-configuration2-2.8.0-src/"", """");
}"
775,"    public abstract String getPath(File file, URL url, String basePath, String fileName);

    public abstract URL getURL(String basePath, String fileName) throws MalformedURLException;

    public abstract URL locateFromURL(String basePath, String fileName);

    /**
     * Set the FileOptionsProvider
     *
     * @param provider The FileOptionsProvider
     */
    public void setFileOptionsProvider(final FileOptionsProvider provider) {
        this.optionsProvider = provider;
    }","  public void test2()  throws Throwable  {
      VFSFileSystem vFSFileSystem0 = new VFSFileSystem();
      String string0 = vFSFileSystem0.getPath((File) null, (URL) null, ""The xray of ref%xes muet not be null"", ""1BDW6i"");
}"
776,"    public abstract String getPath(File file, URL url, String basePath, String fileName);

    public abstract URL getURL(String basePath, String fileName) throws MalformedURLException;

    public abstract URL locateFromURL(String basePath, String fileName);

    /**
     * Set the FileOptionsProvider
     *
     * @param provider The FileOptionsProvider
     */
    public void setFileOptionsProvider(final FileOptionsProvider provider) {
        this.optionsProvider = provider;
    }","  public void test3()  throws Throwable  {
      VFSFileSystem vFSFileSystem0 = new VFSFileSystem();
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      URL uRL0 = mockFile0.toURL();
      String string0 = vFSFileSystem0.getPath(mockFile0, uRL0, ""# 44G[4}TN"", ""# 44G[4}TN"");
}"
777,"    public abstract OutputStream getOutputStream(File file) throws ConfigurationException;

    public abstract OutputStream getOutputStream(URL url) throws ConfigurationException;

    public abstract String getPath(File file, URL url, String basePath, String fileName);

    public abstract URL getURL(String basePath, String fileName) throws MalformedURLException;

    public abstract URL locateFromURL(String basePath, String fileName);

    /**
     * Set the FileOptionsProvider
     *
     * @param provider The FileOptionsProvider
     */
    public void setFileOptionsProvider(final FileOptionsProvider provider) {
        this.optionsProvider = provider;
    }","  public void test4()  throws Throwable  {
      DefaultFileSystem defaultFileSystem0 = new DefaultFileSystem();
      URL uRL0 = defaultFileSystem0.getURL(""%+wF."", """");
      OutputStream outputStream0 = defaultFileSystem0.getOutputStream(uRL0);
}"
778,"    public abstract OutputStream getOutputStream(File file) throws ConfigurationException;

    public abstract OutputStream getOutputStream(URL url) throws ConfigurationException;

    public abstract String getPath(File file, URL url, String basePath, String fileName);

    public abstract URL getURL(String basePath, String fileName) throws MalformedURLException;

    public abstract URL locateFromURL(String basePath, String fileName);

    /**
     * Set the FileOptionsProvider
     *
     * @param provider The FileOptionsProvider
     */
    public void setFileOptionsProvider(final FileOptionsProvider provider) {
        this.optionsProvider = provider;
    }","  public void test5()  throws Throwable  {
      VFSFileSystem vFSFileSystem0 = new VFSFileSystem();
      MockFile mockFile0 = new MockFile(""Z\""XIt1zAN8Y7Zr"");
      OutputStream outputStream0 = vFSFileSystem0.getOutputStream((File) mockFile0);
}"
779,"    public abstract String getFileName(String path);

    public FileOptionsProvider getFileOptionsProvider() {
        return this.optionsProvider;
    }","  public void test6()  throws Throwable  {
      VFSFileSystem vFSFileSystem0 = new VFSFileSystem();
      String string0 = vFSFileSystem0.getFileName("""");
}"
780,"    public abstract String getFileName(String path);

    public FileOptionsProvider getFileOptionsProvider() {
        return this.optionsProvider;
    }","  public void test7()  throws Throwable  {
      DefaultFileSystem defaultFileSystem0 = new DefaultFileSystem();
      String string0 = defaultFileSystem0.getFileName(""org.apache.log4j.helpers.DateTimeDateFormat"");
}"
781,"    public abstract String getBasePath(String path);

    public abstract String getFileName(String path);

    public FileOptionsProvider getFileOptionsProvider() {
        return this.optionsProvider;
    }","  public void test8()  throws Throwable  {
      DefaultFileSystem defaultFileSystem0 = new DefaultFileSystem();
      String string0 = defaultFileSystem0.getBasePath((String) null);
}"
782,"    public abstract String getBasePath(String path);

    public abstract String getFileName(String path);

    public FileOptionsProvider getFileOptionsProvider() {
        return this.optionsProvider;
    }","  public void test9()  throws Throwable  {
      DefaultFileSystem defaultFileSystem0 = new DefaultFileSystem();
      String string0 = defaultFileSystem0.getBasePath(""Q:Flrfc8s'n03X"");
}"
783,"    public abstract URL locateFromURL(String basePath, String fileName);

    /**
     * Set the FileOptionsProvider
     *
     * @param provider The FileOptionsProvider
     */
    public void setFileOptionsProvider(final FileOptionsProvider provider) {
        this.optionsProvider = provider;
    }","  public void test10()  throws Throwable  {
      VFSFileSystem vFSFileSystem0 = new VFSFileSystem();
      // Undeclared exception!
      try { 
        vFSFileSystem0.locateFromURL(""file:///media/FSE_USER/extradrive1/toga-eval-FSE_USER-2023/toga-eval/artifacts/commons-configuration2-2.8.0-src/"", (String) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.vfs2.provider.UriParser"", e);
      }
  }"
784,"    public abstract URL getURL(String basePath, String fileName) throws MalformedURLException;

    public abstract URL locateFromURL(String basePath, String fileName);

    /**
     * Set the FileOptionsProvider
     *
     * @param provider The FileOptionsProvider
     */
    public void setFileOptionsProvider(final FileOptionsProvider provider) {
        this.optionsProvider = provider;
    }","  public void test11()  throws Throwable  {
      VFSFileSystem vFSFileSystem0 = new VFSFileSystem();
      // Undeclared exception!
      try { 
        vFSFileSystem0.getURL("":4Qjcx/~ps@C"", ""anz_nk"");
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // Could not parse basePath: :4Qjcx/~ps@C and fileName: anz_nk
         //
         verifyException(""org.apache.commons.configuration2.io.VFSFileSystem"", e);
      }
  }"
785,"    public abstract URL getURL(String basePath, String fileName) throws MalformedURLException;

    public abstract URL locateFromURL(String basePath, String fileName);

    /**
     * Set the FileOptionsProvider
     *
     * @param provider The FileOptionsProvider
     */
    public void setFileOptionsProvider(final FileOptionsProvider provider) {
        this.optionsProvider = provider;
    }","  public void test12()  throws Throwable  {
      VFSFileSystem vFSFileSystem0 = new VFSFileSystem();
      // Undeclared exception!
      try { 
        vFSFileSystem0.getURL((String) null, (String) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.vfs2.provider.UriParser"", e);
      }
  }"
786,"    public abstract OutputStream getOutputStream(File file) throws ConfigurationException;

    public abstract OutputStream getOutputStream(URL url) throws ConfigurationException;

    public abstract String getPath(File file, URL url, String basePath, String fileName);

    public abstract URL getURL(String basePath, String fileName) throws MalformedURLException;

    public abstract URL locateFromURL(String basePath, String fileName);

    /**
     * Set the FileOptionsProvider
     *
     * @param provider The FileOptionsProvider
     */
    public void setFileOptionsProvider(final FileOptionsProvider provider) {
        this.optionsProvider = provider;
    }","  public void test13()  throws Throwable  {
      VFSFileSystem vFSFileSystem0 = new VFSFileSystem();
      // Undeclared exception!
      try { 
        vFSFileSystem0.getOutputStream((URL) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.evosuite.runtime.mock.java.net.MockURL"", e);
      }
  }"
787,"    public abstract OutputStream getOutputStream(File file) throws ConfigurationException;

    public abstract OutputStream getOutputStream(URL url) throws ConfigurationException;

    public abstract String getPath(File file, URL url, String basePath, String fileName);

    public abstract URL getURL(String basePath, String fileName) throws MalformedURLException;

    public abstract URL locateFromURL(String basePath, String fileName);

    /**
     * Set the FileOptionsProvider
     *
     * @param provider The FileOptionsProvider
     */
    public void setFileOptionsProvider(final FileOptionsProvider provider) {
        this.optionsProvider = provider;
    }","  public void test14()  throws Throwable  {
      VFSFileSystem vFSFileSystem0 = new VFSFileSystem();
      MockFile mockFile0 = new MockFile(""+RfNq=5iDE!"");
      vFSFileSystem0.getOutputStream((File) mockFile0);
      MockFile mockFile1 = new MockFile(mockFile0, ""0dhw<ze*?f-]8s~"");
      try { 
        vFSFileSystem0.getOutputStream((File) mockFile1);
        fail(""Expecting exception: Exception"");
      } catch(Exception e) {
         //
         // Unable to save to file /media/FSE_USER/extradrive1/toga-eval-FSE_USER-2023/toga-eval/artifacts/commons-configuration2-2.8.0-src/+RfNq=5iDE!/0dhw<ze*?f-]8s~
         //
         verifyException(""org.apache.commons.configuration2.io.DefaultFileSystem"", e);
      }
  }"
788,"    public abstract OutputStream getOutputStream(File file) throws ConfigurationException;

    public abstract OutputStream getOutputStream(URL url) throws ConfigurationException;

    public abstract String getPath(File file, URL url, String basePath, String fileName);

    public abstract URL getURL(String basePath, String fileName) throws MalformedURLException;

    public abstract URL locateFromURL(String basePath, String fileName);

    /**
     * Set the FileOptionsProvider
     *
     * @param provider The FileOptionsProvider
     */
    public void setFileOptionsProvider(final FileOptionsProvider provider) {
        this.optionsProvider = provider;
    }","  public void test15()  throws Throwable  {
      DefaultFileSystem defaultFileSystem0 = new DefaultFileSystem();
      // Undeclared exception!
      try { 
        defaultFileSystem0.getOutputStream((File) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.io.File"", e);
      }
  }"
789,"    public abstract InputStream getInputStream(URL url) throws ConfigurationException;

    /**
     * Not abstract for binary compatibility.
     *
     * @param url TODO
     * @param urlConnectionOptions Ignored.
     * @return TODO
     * @throws ConfigurationException TODO
     *
     * @since 2.8.0
     */
    public InputStream getInputStream(final URL url, final URLConnectionOptions urlConnectionOptions) throws ConfigurationException {
        return getInputStream(url);
    }","  public void test16()  throws Throwable  {
      DefaultFileSystem defaultFileSystem0 = new DefaultFileSystem();
      URLConnectionOptions uRLConnectionOptions0 = URLConnectionOptions.DEFAULT;
      try { 
        defaultFileSystem0.getInputStream((URL) null, uRLConnectionOptions0);
        fail(""Expecting exception: Exception"");
      } catch(Exception e) {
         //
         // Unable to load the configuration from the URL null
         //
         verifyException(""org.apache.commons.configuration2.io.DefaultFileSystem"", e);
      }
  }"
790,"    public abstract InputStream getInputStream(URL url) throws ConfigurationException;

    /**
     * Not abstract for binary compatibility.
     *
     * @param url TODO
     * @param urlConnectionOptions Ignored.
     * @return TODO
     * @throws ConfigurationException TODO
     *
     * @since 2.8.0
     */
    public InputStream getInputStream(final URL url, final URLConnectionOptions urlConnectionOptions) throws ConfigurationException {
        return getInputStream(url);
    }","  public void test17()  throws Throwable  {
      VFSFileSystem vFSFileSystem0 = new VFSFileSystem();
      URL uRL0 = vFSFileSystem0.getURL("""", ""YOot+`a>Pgu2:nInQ/"");
      try { 
        vFSFileSystem0.getInputStream(uRL0);
        fail(""Expecting exception: Exception"");
      } catch(Exception e) {
         //
         // File not found
         //
         verifyException(""org.apache.commons.configuration2.io.VFSFileSystem"", e);
      }
  }"
791,"    public abstract InputStream getInputStream(URL url) throws ConfigurationException;

    /**
     * Not abstract for binary compatibility.
     *
     * @param url TODO
     * @param urlConnectionOptions Ignored.
     * @return TODO
     * @throws ConfigurationException TODO
     *
     * @since 2.8.0
     */
    public InputStream getInputStream(final URL url, final URLConnectionOptions urlConnectionOptions) throws ConfigurationException {
        return getInputStream(url);
    }","  public void test18()  throws Throwable  {
      VFSFileSystem vFSFileSystem0 = new VFSFileSystem();
      // Undeclared exception!
      try { 
        vFSFileSystem0.getInputStream((URL) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.evosuite.runtime.mock.java.net.MockURL"", e);
      }
  }"
792,"    public abstract String getFileName(String path);

    public FileOptionsProvider getFileOptionsProvider() {
        return this.optionsProvider;
    }","  public void test19()  throws Throwable  {
      VFSFileSystem vFSFileSystem0 = new VFSFileSystem();
      // Undeclared exception!
      try { 
        vFSFileSystem0.getFileName((String) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.vfs2.provider.UriParser"", e);
      }
  }"
793,"    public abstract String getBasePath(String path);

    public abstract String getFileName(String path);

    public FileOptionsProvider getFileOptionsProvider() {
        return this.optionsProvider;
    }","  public void test20()  throws Throwable  {
      VFSFileSystem vFSFileSystem0 = new VFSFileSystem();
      // Undeclared exception!
      try { 
        vFSFileSystem0.getBasePath((String) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.vfs2.provider.UriParser"", e);
      }
  }"
794,"    public FileOptionsProvider getFileOptionsProvider() {
        return this.optionsProvider;
    }","  public void test21()  throws Throwable  {
      DefaultFileSystem defaultFileSystem0 = new DefaultFileSystem();
      FileOptionsProvider fileOptionsProvider0 = defaultFileSystem0.getFileOptionsProvider();
}"
795,"    public void setFileOptionsProvider(final FileOptionsProvider provider) {
        this.optionsProvider = provider;
    }","  public void test22()  throws Throwable  {
      VFSFileSystem vFSFileSystem0 = new VFSFileSystem();
      vFSFileSystem0.setFileOptionsProvider((FileOptionsProvider) null);
  }"
796,"    public ConfigurationLogger getLogger() {
        final ConfigurationLogger result = log;
        return result != null ? result : DEFAULT_LOG;
    }","  public void test23()  throws Throwable  {
      VFSFileSystem vFSFileSystem0 = new VFSFileSystem();
      ConfigurationLogger configurationLogger0 = vFSFileSystem0.getLogger();
      vFSFileSystem0.setLogger(configurationLogger0);
      ConfigurationLogger configurationLogger1 = vFSFileSystem0.getLogger();
}"
797,"    public abstract OutputStream getOutputStream(File file) throws ConfigurationException;

    public abstract OutputStream getOutputStream(URL url) throws ConfigurationException;

    public abstract String getPath(File file, URL url, String basePath, String fileName);

    public abstract URL getURL(String basePath, String fileName) throws MalformedURLException;

    public abstract URL locateFromURL(String basePath, String fileName);

    /**
     * Set the FileOptionsProvider
     *
     * @param provider The FileOptionsProvider
     */
    public void setFileOptionsProvider(final FileOptionsProvider provider) {
        this.optionsProvider = provider;
    }","  public void test24()  throws Throwable  {
      VFSFileSystem vFSFileSystem0 = new VFSFileSystem();
      URL uRL0 = vFSFileSystem0.getURL((String) null, """");
      try { 
        vFSFileSystem0.getOutputStream(uRL0);
        fail(""Expecting exception: Exception"");
      } catch(Exception e) {
         //
         // Cannot save a configuration to a directory
         //
         verifyException(""org.apache.commons.configuration2.io.VFSFileSystem"", e);
      }
  }"
798,"    public URL locate(final FileSystem fileSystem, final FileLocator locator) {
        return locator.getSourceURL();
    }","  public void test0()  throws Throwable  {
      ProvidedURLLocationStrategy providedURLLocationStrategy0 = new ProvidedURLLocationStrategy();
      FileLocator fileLocator0 = mock(FileLocator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(fileLocator0).getBasePath();
      doReturn((String) null).when(fileLocator0).getEncoding();
      doReturn((String) null).when(fileLocator0).getFileName();
      doReturn((FileSystem) null).when(fileLocator0).getFileSystem();
      doReturn((FileLocationStrategy) null).when(fileLocator0).getLocationStrategy();
      doReturn((URL) null).when(fileLocator0).getSourceURL();
      doReturn((URLConnectionOptions) null).when(fileLocator0).getURLConnectionOptions();
      FileLocator.FileLocatorBuilder fileLocator_FileLocatorBuilder0 = new FileLocator.FileLocatorBuilder(fileLocator0);
      FileLocator fileLocator1 = new FileLocator(fileLocator_FileLocatorBuilder0);
      URL uRL0 = providedURLLocationStrategy0.locate((FileSystem) null, fileLocator1);
}"
799,"    public URL locate(final FileSystem fileSystem, final FileLocator locator) {
        return locator.getSourceURL();
    }","  public void test1()  throws Throwable  {
      ProvidedURLLocationStrategy providedURLLocationStrategy0 = new ProvidedURLLocationStrategy();
      FileLocator fileLocator0 = mock(FileLocator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(fileLocator0).getBasePath();
      doReturn((String) null).when(fileLocator0).getEncoding();
      doReturn((String) null).when(fileLocator0).getFileName();
      doReturn((FileSystem) null).when(fileLocator0).getFileSystem();
      doReturn((FileLocationStrategy) null).when(fileLocator0).getLocationStrategy();
      doReturn((URL) null).when(fileLocator0).getSourceURL();
      doReturn((URLConnectionOptions) null).when(fileLocator0).getURLConnectionOptions();
      FileLocator.FileLocatorBuilder fileLocator_FileLocatorBuilder0 = new FileLocator.FileLocatorBuilder(fileLocator0);
      VfsComponentContext vfsComponentContext0 = mock(VfsComponentContext.class, new ViolatedAssumptionAnswer());
      FileSystemOptions fileSystemOptions0 = new FileSystemOptions();
      DefaultURLStreamHandler defaultURLStreamHandler0 = new DefaultURLStreamHandler(vfsComponentContext0, fileSystemOptions0);
      URL uRL0 = MockURL.URL(""org.apache.commons.configuration2.io.VFSFileSystem$VFSURLStreamHandler"", ""f[V~g*"", 1107, "".data"", (URLStreamHandler) defaultURLStreamHandler0);
      FileLocator.FileLocatorBuilder fileLocator_FileLocatorBuilder1 = fileLocator_FileLocatorBuilder0.sourceURL(uRL0);
      FileLocator fileLocator1 = new FileLocator(fileLocator_FileLocatorBuilder1);
      URL uRL1 = providedURLLocationStrategy0.locate((FileSystem) null, fileLocator1);
}"
800,"    public URL locate(final FileSystem fileSystem, final FileLocator locator) {
        return locator.getSourceURL();
    }","  public void test2()  throws Throwable  {
      ProvidedURLLocationStrategy providedURLLocationStrategy0 = new ProvidedURLLocationStrategy();
      FileLocator.FileLocatorBuilder fileLocator_FileLocatorBuilder0 = new FileLocator.FileLocatorBuilder((FileLocator) null);
      URL uRL0 = MockURL.getFileExample();
      FileLocator.FileLocatorBuilder fileLocator_FileLocatorBuilder1 = fileLocator_FileLocatorBuilder0.sourceURL(uRL0);
      FileLocator fileLocator0 = new FileLocator(fileLocator_FileLocatorBuilder1);
      URL uRL1 = providedURLLocationStrategy0.locate((FileSystem) null, fileLocator0);
}"
801,"    public URL locate(final FileSystem fileSystem, final FileLocator locator) {
        return locator.getSourceURL();
    }","  public void test3()  throws Throwable  {
      ProvidedURLLocationStrategy providedURLLocationStrategy0 = new ProvidedURLLocationStrategy();
      VfsComponentContext vfsComponentContext0 = mock(VfsComponentContext.class, new ViolatedAssumptionAnswer());
      FileSystemOptions fileSystemOptions0 = new FileSystemOptions();
      DefaultURLStreamHandler defaultURLStreamHandler0 = new DefaultURLStreamHandler(vfsComponentContext0, fileSystemOptions0);
      URL uRL0 = MockURL.URL(""org.apache.log4j.RollingFileAppender"", ""org.apache.commons.configuration2.io.ProvidedURLLocationStrategy"", 0, ""w5"", (URLStreamHandler) defaultURLStreamHandler0);
      URLConnectionOptions uRLConnectionOptions0 = mock(URLConnectionOptions.class, new ViolatedAssumptionAnswer());
      FileLocator fileLocator0 = mock(FileLocator.class, new ViolatedAssumptionAnswer());
      doReturn(""org.apache.commons.configuration2.io.ProvidedURLLocationStrategy"").when(fileLocator0).getBasePath();
      doReturn(""w5"").when(fileLocator0).getEncoding();
      doReturn(""w5"").when(fileLocator0).getFileName();
      doReturn((FileSystem) null).when(fileLocator0).getFileSystem();
      doReturn(providedURLLocationStrategy0).when(fileLocator0).getLocationStrategy();
      doReturn(uRL0).when(fileLocator0).getSourceURL();
      doReturn(uRLConnectionOptions0).when(fileLocator0).getURLConnectionOptions();
      FileLocator.FileLocatorBuilder fileLocator_FileLocatorBuilder0 = new FileLocator.FileLocatorBuilder(fileLocator0);
      FileLocator fileLocator1 = new FileLocator(fileLocator_FileLocatorBuilder0);
      URL uRL1 = providedURLLocationStrategy0.locate((FileSystem) null, fileLocator1);
}"
802,"    public URL locate(final FileSystem fileSystem, final FileLocator locator) {
        return locator.getSourceURL();
    }","  public void test4()  throws Throwable  {
      ProvidedURLLocationStrategy providedURLLocationStrategy0 = new ProvidedURLLocationStrategy();
      DefaultFileSystem defaultFileSystem0 = new DefaultFileSystem();
      // Undeclared exception!
      try { 
        providedURLLocationStrategy0.locate(defaultFileSystem0, (FileLocator) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.configuration2.io.ProvidedURLLocationStrategy"", e);
      }
  }"
803,"    public URL locate(final FileSystem fileSystem, final FileLocator locator) {
        return fileSystem.locateFromURL(locator.getBasePath(), locator.getFileName());
    }","  public void test0()  throws Throwable  {
      FileSystemLocationStrategy fileSystemLocationStrategy0 = new FileSystemLocationStrategy();
      DefaultFileSystem defaultFileSystem0 = new DefaultFileSystem();
      FileLocator.FileLocatorBuilder fileLocator_FileLocatorBuilder0 = mock(FileLocator.FileLocatorBuilder.class, new ViolatedAssumptionAnswer());
      FileLocator fileLocator0 = new FileLocator(fileLocator_FileLocatorBuilder0);
      URL uRL0 = fileSystemLocationStrategy0.locate(defaultFileSystem0, fileLocator0);
}"
804,"    public URL locate(final FileSystem fileSystem, final FileLocator locator) {
        return fileSystem.locateFromURL(locator.getBasePath(), locator.getFileName());
    }","  public void test1()  throws Throwable  {
      FileSystemLocationStrategy fileSystemLocationStrategy0 = new FileSystemLocationStrategy();
      // Undeclared exception!
      try { 
        fileSystemLocationStrategy0.locate((FileSystem) null, (FileLocator) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.configuration2.io.FileSystemLocationStrategy"", e);
      }
  }"
805,"    public String getPath(final File file, final URL url, final String basePath, final String fileName) {
        if (file != null) {
            return super.getPath(file, url, basePath, fileName);
        }
        try {
            if (url != null) {
                final FileName name = resolveURI(url.toString());
                if (name != null) {
                    return name.toString();
                }
            }

            if (UriParser.extractScheme(fileName) != null) {
                return fileName;
            }
            if (basePath != null) {
                final FileName base = resolveURI(basePath);
                return getManager().resolveName(base, fileName).getURI();
            }
            final FileName name = resolveURI(fileName);
            final FileName base = name.getParent();
            return getManager().resolveName(base, name.getBaseName()).getURI();
        } catch (final FileSystemException fse) {
            fse.printStackTrace();
            return null;
        }
    }","  public void test0()  throws Throwable  {
      VFSFileSystem vFSFileSystem0 = new VFSFileSystem();
      FileName fileName0 = mock(FileName.class, new ViolatedAssumptionAnswer());
      FileSystemManager fileSystemManager0 = mock(FileSystemManager.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(fileSystemManager0).toString();
      doReturn((FileName) null).when(fileSystemManager0).resolveName(any(org.apache.commons.vfs2.FileName.class) , anyString());
      doReturn((FileName) null).when(fileSystemManager0).resolveURI(anyString());
      VFS.setManager(fileSystemManager0);
      // Undeclared exception!
      try { 
        vFSFileSystem0.getPath((File) null, (URL) null, ""org.apache.commons.vfs2.FileName$MockitoMock$1277435924@0000000002"", ""EpOhjiJ-_\""Y\"")n~5"");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.configuration2.io.VFSFileSystem"", e);
      }
  }"
806,"    public String getPath(final File file, final URL url, final String basePath, final String fileName) {
        if (file != null) {
            return super.getPath(file, url, basePath, fileName);
        }
        try {
            if (url != null) {
                final FileName name = resolveURI(url.toString());
                if (name != null) {
                    return name.toString();
                }
            }

            if (UriParser.extractScheme(fileName) != null) {
                return fileName;
            }
            if (basePath != null) {
                final FileName base = resolveURI(basePath);
                return getManager().resolveName(base, fileName).getURI();
            }
            final FileName name = resolveURI(fileName);
            final FileName base = name.getParent();
            return getManager().resolveName(base, name.getBaseName()).getURI();
        } catch (final FileSystemException fse) {
            fse.printStackTrace();
            return null;
        }
    }","  public void test1()  throws Throwable  {
      VFSFileSystem vFSFileSystem0 = new VFSFileSystem();
      String string0 = vFSFileSystem0.getPath((File) null, (URL) null, ""'! Ignoring."", """");
}"
807,"    public String getPath(final File file, final URL url, final String basePath, final String fileName) {
        if (file != null) {
            return super.getPath(file, url, basePath, fileName);
        }
        try {
            if (url != null) {
                final FileName name = resolveURI(url.toString());
                if (name != null) {
                    return name.toString();
                }
            }

            if (UriParser.extractScheme(fileName) != null) {
                return fileName;
            }
            if (basePath != null) {
                final FileName base = resolveURI(basePath);
                return getManager().resolveName(base, fileName).getURI();
            }
            final FileName name = resolveURI(fileName);
            final FileName base = name.getParent();
            return getManager().resolveName(base, name.getBaseName()).getURI();
        } catch (final FileSystemException fse) {
            fse.printStackTrace();
            return null;
        }
    }","  public void test2()  throws Throwable  {
      VFSFileSystem vFSFileSystem0 = new VFSFileSystem();
      MockFile mockFile0 = new MockFile(""9F>[]qe**R`\""4"", """");
      URL uRL0 = mockFile0.toURL();
      String string0 = vFSFileSystem0.getPath(mockFile0, uRL0, ""fileSystem"", (String) null);
}"
808,"    public OutputStream getOutputStream(final URL url) throws ConfigurationException {
        try {
            final FileSystemOptions opts = getOptions(url.getProtocol());
            final FileObject file = getManager().resolveFile(url.toString(), opts);
            // throw an exception if the target URL is a directory
            if (file == null || file.isFolder()) {
                throw new ConfigurationException(""Cannot save a configuration to a directory"");
            }
            final FileContent content = file.getContent();

            if (content == null) {
                throw new ConfigurationException(""Cannot access content of "" + url);
            }
            return content.getOutputStream();
        } catch (final FileSystemException fse) {
            throw new ConfigurationException(""Unable to access "" + url, fse);
        }
    }","  public void test3()  throws Throwable  {
      VFSFileSystem vFSFileSystem0 = new VFSFileSystem();
      URL uRL0 = MockURL.getHttpExample();
      try { 
        vFSFileSystem0.getOutputStream(uRL0);
        fail(""Expecting exception: Exception"");
      } catch(Exception e) {
         //
         // Unable to access http://www.someFakeButWellFormedURL.org/fooExample
         //
         verifyException(""org.apache.commons.configuration2.io.VFSFileSystem"", e);
      }
  }"
809,"    public InputStream getInputStream(final URL url) throws ConfigurationException {
        final FileObject file;
        try {
            final FileSystemOptions opts = getOptions(url.getProtocol());
            file = getManager().resolveFile(url.toString(), opts);
            if (!file.exists()) {
                throw new ConfigurationException(""File not found"");
            }
            if (!file.isFile()) {
                throw new ConfigurationException(""Cannot load a configuration from a directory"");
            }
            final FileContent content = file.getContent();
            if (content == null) {
                final String msg = ""Cannot access content of "" + file.getName().getFriendlyURI();
                throw new ConfigurationException(msg);
            }
            return content.getInputStream();
        } catch (final FileSystemException fse) {
            final String msg = ""Unable to access "" + url.toString();
            throw new ConfigurationException(msg, fse);
        }
    }","  public void test4()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      VFSFileSystem vFSFileSystem0 = new VFSFileSystem();
      try { 
        vFSFileSystem0.getInputStream(uRL0);
        fail(""Expecting exception: Exception"");
      } catch(Exception e) {
         //
         // Unable to access ftp://ftp.someFakeButWellFormedURL.org/fooExample
         //
         verifyException(""org.apache.commons.configuration2.io.VFSFileSystem"", e);
      }
  }"
810,"    public String getFileName(final String path) {
        if (UriParser.extractScheme(path) == null) {
            return super.getFileName(path);
        }
        try {
            return resolveURI(path).getBaseName();
        } catch (final FileSystemException fse) {
            fse.printStackTrace();
            return null;
        }
    }","  public void test5()  throws Throwable  {
      VFSFileSystem vFSFileSystem0 = new VFSFileSystem();
      String string0 = vFSFileSystem0.getFileName("":3NsWh"");
}"
811,"    public String getBasePath(final String path) {
        if (UriParser.extractScheme(path) == null) {
            return super.getBasePath(path);
        }
        try {
            final FileName parent = resolveURI(path).getParent();
            return parent != null ? parent.getURI() : null;
        } catch (final FileSystemException fse) {
            fse.printStackTrace();
            return null;
        }
    }","  public void test6()  throws Throwable  {
      VFSFileSystem vFSFileSystem0 = new VFSFileSystem();
      String string0 = vFSFileSystem0.getBasePath(""P.:xr"");
}"
812,"    public String getPath(final File file, final URL url, final String basePath, final String fileName) {
        if (file != null) {
            return super.getPath(file, url, basePath, fileName);
        }
        try {
            if (url != null) {
                final FileName name = resolveURI(url.toString());
                if (name != null) {
                    return name.toString();
                }
            }

            if (UriParser.extractScheme(fileName) != null) {
                return fileName;
            }
            if (basePath != null) {
                final FileName base = resolveURI(basePath);
                return getManager().resolveName(base, fileName).getURI();
            }
            final FileName name = resolveURI(fileName);
            final FileName base = name.getParent();
            return getManager().resolveName(base, name.getBaseName()).getURI();
        } catch (final FileSystemException fse) {
            fse.printStackTrace();
            return null;
        }
    }","  public void test7()  throws Throwable  {
      VFSFileSystem vFSFileSystem0 = new VFSFileSystem();
      FileName fileName0 = mock(FileName.class, new ViolatedAssumptionAnswer());
      FileName fileName1 = mock(FileName.class, new ViolatedAssumptionAnswer());
      doReturn("""").when(fileName1).toString();
      doReturn("""").when(fileName1).getBaseName();
      doReturn(fileName0).when(fileName1).getParent();
      FileName fileName2 = mock(FileName.class, new ViolatedAssumptionAnswer());
      doReturn("""").when(fileName2).getURI();
      FileSystemManager fileSystemManager0 = mock(FileSystemManager.class, new ViolatedAssumptionAnswer());
      doReturn("""", """").when(fileSystemManager0).toString();
      doReturn(fileName2).when(fileSystemManager0).resolveName(any(org.apache.commons.vfs2.FileName.class) , anyString());
      doReturn(fileName1).when(fileSystemManager0).resolveURI(anyString());
      VFS.setManager(fileSystemManager0);
      String string0 = vFSFileSystem0.getPath((File) null, (URL) null, (String) null, """");
}"
813,"    public OutputStream getOutputStream(final URL url) throws ConfigurationException {
        try {
            final FileSystemOptions opts = getOptions(url.getProtocol());
            final FileObject file = getManager().resolveFile(url.toString(), opts);
            // throw an exception if the target URL is a directory
            if (file == null || file.isFolder()) {
                throw new ConfigurationException(""Cannot save a configuration to a directory"");
            }
            final FileContent content = file.getContent();

            if (content == null) {
                throw new ConfigurationException(""Cannot access content of "" + url);
            }
            return content.getOutputStream();
        } catch (final FileSystemException fse) {
            throw new ConfigurationException(""Unable to access "" + url, fse);
        }
    }","  public void test8()  throws Throwable  {
      VFSFileSystem vFSFileSystem0 = new VFSFileSystem();
      MockFile mockFile0 = new MockFile(""EpOhjiJ-_\""Y\"")n~5"", """");
      URL uRL0 = mockFile0.toURL();
      FileSystemConfigBuilder fileSystemConfigBuilder0 = mock(FileSystemConfigBuilder.class, new ViolatedAssumptionAnswer());
      FileContent fileContent0 = mock(FileContent.class, new ViolatedAssumptionAnswer());
      doReturn((OutputStream) null).when(fileContent0).getOutputStream();
      FileObject fileObject0 = mock(FileObject.class, new ViolatedAssumptionAnswer());
      doReturn(fileContent0).when(fileObject0).getContent();
      doReturn(false).when(fileObject0).isFolder();
      FileSystemManager fileSystemManager0 = mock(FileSystemManager.class, new ViolatedAssumptionAnswer());
      doReturn("""", (String) null).when(fileSystemManager0).toString();
      doReturn((FileSystemConfigBuilder) null).when(fileSystemManager0).getFileSystemConfigBuilder(anyString());
      doReturn(fileObject0).when(fileSystemManager0).resolveFile(anyString() , any(org.apache.commons.vfs2.FileSystemOptions.class));
      VFS.setManager(fileSystemManager0);
      OutputStream outputStream0 = vFSFileSystem0.getOutputStream(uRL0);
}"
814,"    public OutputStream getOutputStream(final URL url) throws ConfigurationException {
        try {
            final FileSystemOptions opts = getOptions(url.getProtocol());
            final FileObject file = getManager().resolveFile(url.toString(), opts);
            // throw an exception if the target URL is a directory
            if (file == null || file.isFolder()) {
                throw new ConfigurationException(""Cannot save a configuration to a directory"");
            }
            final FileContent content = file.getContent();

            if (content == null) {
                throw new ConfigurationException(""Cannot access content of "" + url);
            }
            return content.getOutputStream();
        } catch (final FileSystemException fse) {
            throw new ConfigurationException(""Unable to access "" + url, fse);
        }
    }","  public void test9()  throws Throwable  {
      VFSFileSystem vFSFileSystem0 = new VFSFileSystem();
      MockFile mockFile0 = new MockFile(""EpOhjiJ-_\""Y\"")n~5"", """");
      URL uRL0 = mockFile0.toURL();
      FileSystemConfigBuilder fileSystemConfigBuilder0 = mock(FileSystemConfigBuilder.class, new ViolatedAssumptionAnswer());
      MockPrintStream mockPrintStream0 = new MockPrintStream(""EpOhjiJ-_\""Y\"")n~5"");
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0, 1);
      FileContent fileContent0 = mock(FileContent.class, new ViolatedAssumptionAnswer());
      FileObject fileObject0 = mock(FileObject.class, new ViolatedAssumptionAnswer());
      doReturn((FileContent) null).when(fileObject0).getContent();
      doReturn(false).when(fileObject0).isFolder();
      FileSystemManager fileSystemManager0 = mock(FileSystemManager.class, new ViolatedAssumptionAnswer());
      doReturn("""", """").when(fileSystemManager0).toString();
      doReturn(fileSystemConfigBuilder0).when(fileSystemManager0).getFileSystemConfigBuilder(anyString());
      doReturn(fileObject0).when(fileSystemManager0).resolveFile(anyString() , any(org.apache.commons.vfs2.FileSystemOptions.class));
      VFS.setManager(fileSystemManager0);
      try { 
        vFSFileSystem0.getOutputStream(uRL0);
        fail(""Expecting exception: Exception"");
      } catch(Exception e) {
         //
         // Cannot access content of file:/media/FSE_USER/extradrive1/toga-eval-FSE_USER-2023/toga-eval/artifacts/commons-configuration2-2.8.0-src/EpOhjiJ-_\""Y\"")n~5
         //
         verifyException(""org.apache.commons.configuration2.io.VFSFileSystem"", e);
      }
  }"
815,"    public String getFileName(final String path) {
        if (UriParser.extractScheme(path) == null) {
            return super.getFileName(path);
        }
        try {
            return resolveURI(path).getBaseName();
        } catch (final FileSystemException fse) {
            fse.printStackTrace();
            return null;
        }
    }","  public void test10()  throws Throwable  {
      VFSFileSystem vFSFileSystem0 = new VFSFileSystem();
      String string0 = vFSFileSystem0.getFileName("""");
}"
816,"    public URL locateFromURL(final String basePath, final String fileName) {
        final String fileScheme = UriParser.extractScheme(fileName);

        // Use DefaultFileSystem if basePath and fileName don't have a scheme.
        if ((basePath == null || UriParser.extractScheme(basePath) == null) && fileScheme == null) {
            return super.locateFromURL(basePath, fileName);
        }
        try {
            final FileObject file;
            // Only use the base path if the file name doesn't have a scheme.
            if (basePath != null && fileScheme == null) {
                final String scheme = UriParser.extractScheme(basePath);
                final FileSystemOptions opts = getOptions(scheme);
                FileObject base = getManager().resolveFile(basePath, opts);
                if (base.isFile()) {
                    base = base.getParent();
                }

                file = getManager().resolveFile(base, fileName);
            } else {
                final FileSystemOptions opts = getOptions(fileScheme);
                file = getManager().resolveFile(fileName, opts);
            }

            if (!file.exists()) {
                return null;
            }
            final FileName path = file.getName();
            final URLStreamHandler handler = new VFSURLStreamHandler(path);
            return new URL(null, path.getURI(), handler);
        } catch (final FileSystemException | MalformedURLException fse) {
            return null;
        }
    }","  public void test11()  throws Throwable  {
      VFSFileSystem vFSFileSystem0 = new VFSFileSystem();
      // Undeclared exception!
      try { 
        vFSFileSystem0.locateFromURL(""GGdBM.pJ2"", (String) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.vfs2.provider.UriParser"", e);
      }
  }"
817,"    public URL locateFromURL(final String basePath, final String fileName) {
        final String fileScheme = UriParser.extractScheme(fileName);

        // Use DefaultFileSystem if basePath and fileName don't have a scheme.
        if ((basePath == null || UriParser.extractScheme(basePath) == null) && fileScheme == null) {
            return super.locateFromURL(basePath, fileName);
        }
        try {
            final FileObject file;
            // Only use the base path if the file name doesn't have a scheme.
            if (basePath != null && fileScheme == null) {
                final String scheme = UriParser.extractScheme(basePath);
                final FileSystemOptions opts = getOptions(scheme);
                FileObject base = getManager().resolveFile(basePath, opts);
                if (base.isFile()) {
                    base = base.getParent();
                }

                file = getManager().resolveFile(base, fileName);
            } else {
                final FileSystemOptions opts = getOptions(fileScheme);
                file = getManager().resolveFile(fileName, opts);
            }

            if (!file.exists()) {
                return null;
            }
            final FileName path = file.getName();
            final URLStreamHandler handler = new VFSURLStreamHandler(path);
            return new URL(null, path.getURI(), handler);
        } catch (final FileSystemException | MalformedURLException fse) {
            return null;
        }
    }","  public void test12()  throws Throwable  {
      VFSFileSystem vFSFileSystem0 = new VFSFileSystem();
      Log4JLogger log4JLogger0 = new Log4JLogger();
      ConfigurationLogger configurationLogger0 = new ConfigurationLogger(log4JLogger0);
      vFSFileSystem0.setLogger(configurationLogger0);
      // Undeclared exception!
      try { 
        vFSFileSystem0.locateFromURL(""org.apache.commons.vfs2.provider.res.ResourceFileNameParser"", ""/media/FSE_USER/extradrive1/toga-eval-FSE_USER-2023/toga-eval/artifacts/commons-configuration2-2.8.0-src/9F>[]qe**R`\""4/fileSystem"");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.log4j.CategoryKey"", e);
      }
  }"
818,"    public URL getURL(final String basePath, final String file) throws MalformedURLException {
        if ((basePath != null && UriParser.extractScheme(basePath) == null) || (basePath == null && UriParser.extractScheme(file) == null)) {
            return super.getURL(basePath, file);
        }
        try {
            final FileName path;
            if (basePath != null && UriParser.extractScheme(file) == null) {
                final FileName base = resolveURI(basePath);
                path = getManager().resolveName(base, file);
            } else {
                path = resolveURI(file);
            }

            final URLStreamHandler handler = new VFSURLStreamHandler(path);
            return new URL(null, path.getURI(), handler);
        } catch (final FileSystemException fse) {
            throw new ConfigurationRuntimeException(""Could not parse basePath: "" + basePath + "" and fileName: "" + file, fse);
        }
    }","  public void test13()  throws Throwable  {
      VFSFileSystem vFSFileSystem0 = new VFSFileSystem();
      FileName fileName0 = mock(FileName.class, new ViolatedAssumptionAnswer());
      doReturn(""EpOhjiJ-_\""Y\"")n~5"").when(fileName0).toString();
      doReturn((FileName) null).when(fileName0).getParent();
      FileSystemManager fileSystemManager0 = mock(FileSystemManager.class, new ViolatedAssumptionAnswer());
      doReturn(""EpOhjiJ-_\""Y\"")n~5"", (String) null).when(fileSystemManager0).toString();
      doReturn(fileName0, (FileName) null).when(fileSystemManager0).resolveURI(anyString());
      VFS.setManager(fileSystemManager0);
      vFSFileSystem0.getBasePath(""file:///media/FSE_USER/extradrive1/toga-eval-FSE_USER-2023/toga-eval/artifacts/commons-configuration2-2.8.0-src/"");
      // Undeclared exception!
      try { 
        vFSFileSystem0.getURL(""file:///media/FSE_USER/extradrive1/toga-eval-FSE_USER-2023/toga-eval/artifacts/commons-configuration2-2.8.0-src/"", ""file:///media/FSE_USER/extradrive1/toga-eval-FSE_USER-2023/toga-eval/artifacts/commons-configuration2-2.8.0-src/"");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.configuration2.io.VFSFileSystem$VFSURLStreamHandler"", e);
      }
  }"
819,"    public OutputStream getOutputStream(final URL url) throws ConfigurationException {
        try {
            final FileSystemOptions opts = getOptions(url.getProtocol());
            final FileObject file = getManager().resolveFile(url.toString(), opts);
            // throw an exception if the target URL is a directory
            if (file == null || file.isFolder()) {
                throw new ConfigurationException(""Cannot save a configuration to a directory"");
            }
            final FileContent content = file.getContent();

            if (content == null) {
                throw new ConfigurationException(""Cannot access content of "" + url);
            }
            return content.getOutputStream();
        } catch (final FileSystemException fse) {
            throw new ConfigurationException(""Unable to access "" + url, fse);
        }
    }","  public void test14()  throws Throwable  {
      VFSFileSystem vFSFileSystem0 = new VFSFileSystem();
      // Undeclared exception!
      try { 
        vFSFileSystem0.getOutputStream((URL) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
820,"    public InputStream getInputStream(final URL url) throws ConfigurationException {
        final FileObject file;
        try {
            final FileSystemOptions opts = getOptions(url.getProtocol());
            file = getManager().resolveFile(url.toString(), opts);
            if (!file.exists()) {
                throw new ConfigurationException(""File not found"");
            }
            if (!file.isFile()) {
                throw new ConfigurationException(""Cannot load a configuration from a directory"");
            }
            final FileContent content = file.getContent();
            if (content == null) {
                final String msg = ""Cannot access content of "" + file.getName().getFriendlyURI();
                throw new ConfigurationException(msg);
            }
            return content.getInputStream();
        } catch (final FileSystemException fse) {
            final String msg = ""Unable to access "" + url.toString();
            throw new ConfigurationException(msg, fse);
        }
    }","  public void test15()  throws Throwable  {
      VFSFileSystem vFSFileSystem0 = new VFSFileSystem();
      // Undeclared exception!
      try { 
        vFSFileSystem0.getInputStream((URL) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
821,"    public String getFileName(final String path) {
        if (UriParser.extractScheme(path) == null) {
            return super.getFileName(path);
        }
        try {
            return resolveURI(path).getBaseName();
        } catch (final FileSystemException fse) {
            fse.printStackTrace();
            return null;
        }
    }","  public void test16()  throws Throwable  {
      VFSFileSystem vFSFileSystem0 = new VFSFileSystem();
      // Undeclared exception!
      try { 
        vFSFileSystem0.getFileName((String) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.vfs2.provider.UriParser"", e);
      }
  }"
822,"    public String getBasePath(final String path) {
        if (UriParser.extractScheme(path) == null) {
            return super.getBasePath(path);
        }
        try {
            final FileName parent = resolveURI(path).getParent();
            return parent != null ? parent.getURI() : null;
        } catch (final FileSystemException fse) {
            fse.printStackTrace();
            return null;
        }
    }","  public void test17()  throws Throwable  {
      VFSFileSystem vFSFileSystem0 = new VFSFileSystem();
      // Undeclared exception!
      try { 
        vFSFileSystem0.getBasePath((String) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.vfs2.provider.UriParser"", e);
      }
  }"
823,"    public URL getURL(final String basePath, final String file) throws MalformedURLException {
        if ((basePath != null && UriParser.extractScheme(basePath) == null) || (basePath == null && UriParser.extractScheme(file) == null)) {
            return super.getURL(basePath, file);
        }
        try {
            final FileName path;
            if (basePath != null && UriParser.extractScheme(file) == null) {
                final FileName base = resolveURI(basePath);
                path = getManager().resolveName(base, file);
            } else {
                path = resolveURI(file);
            }

            final URLStreamHandler handler = new VFSURLStreamHandler(path);
            return new URL(null, path.getURI(), handler);
        } catch (final FileSystemException fse) {
            throw new ConfigurationRuntimeException(""Could not parse basePath: "" + basePath + "" and fileName: "" + file, fse);
        }
    }","  public void test18()  throws Throwable  {
      VFSFileSystem vFSFileSystem0 = new VFSFileSystem();
      URL uRL0 = vFSFileSystem0.getURL((String) null, """");
}"
824,"    public URL locateFromURL(final String basePath, final String fileName) {
        final String fileScheme = UriParser.extractScheme(fileName);

        // Use DefaultFileSystem if basePath and fileName don't have a scheme.
        if ((basePath == null || UriParser.extractScheme(basePath) == null) && fileScheme == null) {
            return super.locateFromURL(basePath, fileName);
        }
        try {
            final FileObject file;
            // Only use the base path if the file name doesn't have a scheme.
            if (basePath != null && fileScheme == null) {
                final String scheme = UriParser.extractScheme(basePath);
                final FileSystemOptions opts = getOptions(scheme);
                FileObject base = getManager().resolveFile(basePath, opts);
                if (base.isFile()) {
                    base = base.getParent();
                }

                file = getManager().resolveFile(base, fileName);
            } else {
                final FileSystemOptions opts = getOptions(fileScheme);
                file = getManager().resolveFile(fileName, opts);
            }

            if (!file.exists()) {
                return null;
            }
            final FileName path = file.getName();
            final URLStreamHandler handler = new VFSURLStreamHandler(path);
            return new URL(null, path.getURI(), handler);
        } catch (final FileSystemException | MalformedURLException fse) {
            return null;
        }
    }","  public void test19()  throws Throwable  {
      VFSFileSystem vFSFileSystem0 = new VFSFileSystem();
      URL uRL0 = vFSFileSystem0.locateFromURL(""file:///media/FSE_USER/extradrive1/toga-eval-FSE_USER-2023/toga-eval/artifacts/commons-configuration2-2.8.0-src/"", ""0r~gt0[##r>;h"");
}"
825,"    public URL locateFromURL(final String basePath, final String fileName) {
        final String fileScheme = UriParser.extractScheme(fileName);

        // Use DefaultFileSystem if basePath and fileName don't have a scheme.
        if ((basePath == null || UriParser.extractScheme(basePath) == null) && fileScheme == null) {
            return super.locateFromURL(basePath, fileName);
        }
        try {
            final FileObject file;
            // Only use the base path if the file name doesn't have a scheme.
            if (basePath != null && fileScheme == null) {
                final String scheme = UriParser.extractScheme(basePath);
                final FileSystemOptions opts = getOptions(scheme);
                FileObject base = getManager().resolveFile(basePath, opts);
                if (base.isFile()) {
                    base = base.getParent();
                }

                file = getManager().resolveFile(base, fileName);
            } else {
                final FileSystemOptions opts = getOptions(fileScheme);
                file = getManager().resolveFile(fileName, opts);
            }

            if (!file.exists()) {
                return null;
            }
            final FileName path = file.getName();
            final URLStreamHandler handler = new VFSURLStreamHandler(path);
            return new URL(null, path.getURI(), handler);
        } catch (final FileSystemException | MalformedURLException fse) {
            return null;
        }
    }","  public void test20()  throws Throwable  {
      VFSFileSystem vFSFileSystem0 = new VFSFileSystem();
      URL uRL0 = vFSFileSystem0.locateFromURL(""0r~gt0[##r>;h"", ""file:///media/FSE_USER/extradrive1/toga-eval-FSE_USER-2023/toga-eval/artifacts/commons-configuration2-2.8.0-src/"");
}"
826,"    public URL locateFromURL(final String basePath, final String fileName) {
        final String fileScheme = UriParser.extractScheme(fileName);

        // Use DefaultFileSystem if basePath and fileName don't have a scheme.
        if ((basePath == null || UriParser.extractScheme(basePath) == null) && fileScheme == null) {
            return super.locateFromURL(basePath, fileName);
        }
        try {
            final FileObject file;
            // Only use the base path if the file name doesn't have a scheme.
            if (basePath != null && fileScheme == null) {
                final String scheme = UriParser.extractScheme(basePath);
                final FileSystemOptions opts = getOptions(scheme);
                FileObject base = getManager().resolveFile(basePath, opts);
                if (base.isFile()) {
                    base = base.getParent();
                }

                file = getManager().resolveFile(base, fileName);
            } else {
                final FileSystemOptions opts = getOptions(fileScheme);
                file = getManager().resolveFile(fileName, opts);
            }

            if (!file.exists()) {
                return null;
            }
            final FileName path = file.getName();
            final URLStreamHandler handler = new VFSURLStreamHandler(path);
            return new URL(null, path.getURI(), handler);
        } catch (final FileSystemException | MalformedURLException fse) {
            return null;
        }
    }","  public void test21()  throws Throwable  {
      VFSFileSystem vFSFileSystem0 = new VFSFileSystem();
      URL uRL0 = vFSFileSystem0.locateFromURL((String) null, ""log4j: "");
}"
827,"    public URL getURL(final String basePath, final String file) throws MalformedURLException {
        if ((basePath != null && UriParser.extractScheme(basePath) == null) || (basePath == null && UriParser.extractScheme(file) == null)) {
            return super.getURL(basePath, file);
        }
        try {
            final FileName path;
            if (basePath != null && UriParser.extractScheme(file) == null) {
                final FileName base = resolveURI(basePath);
                path = getManager().resolveName(base, file);
            } else {
                path = resolveURI(file);
            }

            final URLStreamHandler handler = new VFSURLStreamHandler(path);
            return new URL(null, path.getURI(), handler);
        } catch (final FileSystemException fse) {
            throw new ConfigurationRuntimeException(""Could not parse basePath: "" + basePath + "" and fileName: "" + file, fse);
        }
    }","  public void test22()  throws Throwable  {
      VFSFileSystem vFSFileSystem0 = new VFSFileSystem();
      // Undeclared exception!
      try { 
        vFSFileSystem0.getURL((String) null, "":#M*jKaW+"");
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // Could not parse basePath: null and fileName: :#M*jKaW+
         //
         verifyException(""org.apache.commons.configuration2.io.VFSFileSystem"", e);
      }
  }"
828,"    public String getPath(final File file, final URL url, final String basePath, final String fileName) {
        if (file != null) {
            return super.getPath(file, url, basePath, fileName);
        }
        try {
            if (url != null) {
                final FileName name = resolveURI(url.toString());
                if (name != null) {
                    return name.toString();
                }
            }

            if (UriParser.extractScheme(fileName) != null) {
                return fileName;
            }
            if (basePath != null) {
                final FileName base = resolveURI(basePath);
                return getManager().resolveName(base, fileName).getURI();
            }
            final FileName name = resolveURI(fileName);
            final FileName base = name.getParent();
            return getManager().resolveName(base, name.getBaseName()).getURI();
        } catch (final FileSystemException fse) {
            fse.printStackTrace();
            return null;
        }
    }","  public void test23()  throws Throwable  {
      VFSFileSystem vFSFileSystem0 = new VFSFileSystem();
      String string0 = vFSFileSystem0.getPath((File) null, (URL) null, (String) null, "":#M*jKaW+"");
}"
829,"    public String getPath(final File file, final URL url, final String basePath, final String fileName) {
        if (file != null) {
            return super.getPath(file, url, basePath, fileName);
        }
        try {
            if (url != null) {
                final FileName name = resolveURI(url.toString());
                if (name != null) {
                    return name.toString();
                }
            }

            if (UriParser.extractScheme(fileName) != null) {
                return fileName;
            }
            if (basePath != null) {
                final FileName base = resolveURI(basePath);
                return getManager().resolveName(base, fileName).getURI();
            }
            final FileName name = resolveURI(fileName);
            final FileName base = name.getParent();
            return getManager().resolveName(base, name.getBaseName()).getURI();
        } catch (final FileSystemException fse) {
            fse.printStackTrace();
            return null;
        }
    }","  public void test24()  throws Throwable  {
      VFSFileSystem vFSFileSystem0 = new VFSFileSystem();
      MockFile mockFile0 = new MockFile(""EpOhjiJ-_\""Y\"")n~5"", ""EpOhjiJ-_\""Y\"")n~5"");
      FileSystemManager fileSystemManager0 = mock(FileSystemManager.class, new ViolatedAssumptionAnswer());
      doReturn(""EpOhjiJ-_\""Y\"")n~5"", ""EpOhjiJ-_\""Y\"")n~5"", ""EpOhjiJ-_\""Y\"")n~5"").when(fileSystemManager0).toString();
      doReturn((FileName) null).when(fileSystemManager0).resolveName(any(org.apache.commons.vfs2.FileName.class) , anyString());
      doReturn((FileName) null, (FileName) null).when(fileSystemManager0).resolveURI(anyString());
      VFS.setManager(fileSystemManager0);
      URL uRL0 = mockFile0.toURL();
      // Undeclared exception!
      try { 
        vFSFileSystem0.getPath((File) null, uRL0, ""EpOhjiJ-_\""Y\"")n~5"", ""EpOhjiJ-_\""Y\"")n~5"");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.configuration2.io.VFSFileSystem"", e);
      }
  }"
830,"    public String getPath(final File file, final URL url, final String basePath, final String fileName) {
        if (file != null) {
            return super.getPath(file, url, basePath, fileName);
        }
        try {
            if (url != null) {
                final FileName name = resolveURI(url.toString());
                if (name != null) {
                    return name.toString();
                }
            }

            if (UriParser.extractScheme(fileName) != null) {
                return fileName;
            }
            if (basePath != null) {
                final FileName base = resolveURI(basePath);
                return getManager().resolveName(base, fileName).getURI();
            }
            final FileName name = resolveURI(fileName);
            final FileName base = name.getParent();
            return getManager().resolveName(base, name.getBaseName()).getURI();
        } catch (final FileSystemException fse) {
            fse.printStackTrace();
            return null;
        }
    }","  public void test25()  throws Throwable  {
      VFSFileSystem vFSFileSystem0 = new VFSFileSystem();
      MockFile mockFile0 = new MockFile("""", """");
      URL uRL0 = mockFile0.toURL();
      String string0 = vFSFileSystem0.getPath((File) null, uRL0, """", """");
}"
831,"    public OutputStream getOutputStream(final URL url) throws ConfigurationException {
        try {
            final FileSystemOptions opts = getOptions(url.getProtocol());
            final FileObject file = getManager().resolveFile(url.toString(), opts);
            // throw an exception if the target URL is a directory
            if (file == null || file.isFolder()) {
                throw new ConfigurationException(""Cannot save a configuration to a directory"");
            }
            final FileContent content = file.getContent();

            if (content == null) {
                throw new ConfigurationException(""Cannot access content of "" + url);
            }
            return content.getOutputStream();
        } catch (final FileSystemException fse) {
            throw new ConfigurationException(""Unable to access "" + url, fse);
        }
    }","  public void test26()  throws Throwable  {
      VFSFileSystem vFSFileSystem0 = new VFSFileSystem();
      MockFile mockFile0 = new MockFile(""EpOhjiJ-_\""Y\"")n~5"", ""EpOhjiJ-_\""Y\"")n~5"");
      URL uRL0 = mockFile0.toURL();
      FileSystemConfigBuilder fileSystemConfigBuilder0 = mock(FileSystemConfigBuilder.class, new ViolatedAssumptionAnswer());
      FileObject fileObject0 = mock(FileObject.class, new ViolatedAssumptionAnswer());
      doReturn((FileContent) null).when(fileObject0).getContent();
      doReturn(false).when(fileObject0).isFolder();
      FileSystemManager fileSystemManager0 = mock(FileSystemManager.class, new ViolatedAssumptionAnswer());
      doReturn(""EpOhjiJ-_\""Y\"")n~5"", ""EpOhjiJ-_\""Y\"")n~5"").when(fileSystemManager0).toString();
      doReturn(fileSystemConfigBuilder0).when(fileSystemManager0).getFileSystemConfigBuilder(anyString());
      doReturn(fileObject0).when(fileSystemManager0).resolveFile(anyString() , any(org.apache.commons.vfs2.FileSystemOptions.class));
      VFS.setManager(fileSystemManager0);
      try { 
        vFSFileSystem0.getOutputStream(uRL0);
        fail(""Expecting exception: Exception"");
      } catch(Exception e) {
         //
         // Cannot access content of file:/media/FSE_USER/extradrive1/toga-eval-FSE_USER-2023/toga-eval/artifacts/commons-configuration2-2.8.0-src/EpOhjiJ-_\""Y\"")n~5/EpOhjiJ-_\""Y\"")n~5
         //
         verifyException(""org.apache.commons.configuration2.io.VFSFileSystem"", e);
      }
  }"
832,"    public OutputStream getOutputStream(final URL url) throws ConfigurationException {
        try {
            final FileSystemOptions opts = getOptions(url.getProtocol());
            final FileObject file = getManager().resolveFile(url.toString(), opts);
            // throw an exception if the target URL is a directory
            if (file == null || file.isFolder()) {
                throw new ConfigurationException(""Cannot save a configuration to a directory"");
            }
            final FileContent content = file.getContent();

            if (content == null) {
                throw new ConfigurationException(""Cannot access content of "" + url);
            }
            return content.getOutputStream();
        } catch (final FileSystemException fse) {
            throw new ConfigurationException(""Unable to access "" + url, fse);
        }
    }","  public void test27()  throws Throwable  {
      VFSFileSystem vFSFileSystem0 = new VFSFileSystem();
      MockFile mockFile0 = new MockFile("""", """");
      URL uRL0 = mockFile0.toURL();
      FileSystemManager fileSystemManager0 = mock(FileSystemManager.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, ""d*8J,8/]!F8g"").when(fileSystemManager0).toString();
      doReturn((FileSystemConfigBuilder) null).when(fileSystemManager0).getFileSystemConfigBuilder(anyString());
      doReturn((FileObject) null).when(fileSystemManager0).resolveFile(anyString() , any(org.apache.commons.vfs2.FileSystemOptions.class));
      VFS.setManager(fileSystemManager0);
      try { 
        vFSFileSystem0.getOutputStream(uRL0);
        fail(""Expecting exception: Exception"");
      } catch(Exception e) {
         //
         // Cannot save a configuration to a directory
         //
         verifyException(""org.apache.commons.configuration2.io.VFSFileSystem"", e);
      }
  }"
833,"    public InputStream getInputStream(final URL url) throws ConfigurationException {
        final FileObject file;
        try {
            final FileSystemOptions opts = getOptions(url.getProtocol());
            file = getManager().resolveFile(url.toString(), opts);
            if (!file.exists()) {
                throw new ConfigurationException(""File not found"");
            }
            if (!file.isFile()) {
                throw new ConfigurationException(""Cannot load a configuration from a directory"");
            }
            final FileContent content = file.getContent();
            if (content == null) {
                final String msg = ""Cannot access content of "" + file.getName().getFriendlyURI();
                throw new ConfigurationException(msg);
            }
            return content.getInputStream();
        } catch (final FileSystemException fse) {
            final String msg = ""Unable to access "" + url.toString();
            throw new ConfigurationException(msg, fse);
        }
    }","  public void test28()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      URL uRL0 = MockURI.toURL(uRI0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(""/tmp/foo.bar"");
      byte[] byteArray0 = new byte[7];
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      VFSFileSystem vFSFileSystem0 = new VFSFileSystem();
      InputStream inputStream0 = vFSFileSystem0.getInputStream(uRL0);
}"
834,"    public InputStream getInputStream(final URL url) throws ConfigurationException {
        final FileObject file;
        try {
            final FileSystemOptions opts = getOptions(url.getProtocol());
            file = getManager().resolveFile(url.toString(), opts);
            if (!file.exists()) {
                throw new ConfigurationException(""File not found"");
            }
            if (!file.isFile()) {
                throw new ConfigurationException(""Cannot load a configuration from a directory"");
            }
            final FileContent content = file.getContent();
            if (content == null) {
                final String msg = ""Cannot access content of "" + file.getName().getFriendlyURI();
                throw new ConfigurationException(msg);
            }
            return content.getInputStream();
        } catch (final FileSystemException fse) {
            final String msg = ""Unable to access "" + url.toString();
            throw new ConfigurationException(msg, fse);
        }
    }","  public void test29()  throws Throwable  {
      VFSFileSystem vFSFileSystem0 = new VFSFileSystem();
      URL uRL0 = vFSFileSystem0.getURL(""Cannot access content of "", ""\""}2.+*ghTRoCYv^Gc?6"");
      try { 
        vFSFileSystem0.getInputStream(uRL0);
        fail(""Expecting exception: Exception"");
      } catch(Exception e) {
         //
         // File not found
         //
         verifyException(""org.apache.commons.configuration2.io.VFSFileSystem"", e);
      }
  }"
835,"    public InputStream getInputStream(final URL url) throws ConfigurationException {
        final FileObject file;
        try {
            final FileSystemOptions opts = getOptions(url.getProtocol());
            file = getManager().resolveFile(url.toString(), opts);
            if (!file.exists()) {
                throw new ConfigurationException(""File not found"");
            }
            if (!file.isFile()) {
                throw new ConfigurationException(""Cannot load a configuration from a directory"");
            }
            final FileContent content = file.getContent();
            if (content == null) {
                final String msg = ""Cannot access content of "" + file.getName().getFriendlyURI();
                throw new ConfigurationException(msg);
            }
            return content.getInputStream();
        } catch (final FileSystemException fse) {
            final String msg = ""Unable to access "" + url.toString();
            throw new ConfigurationException(msg, fse);
        }
    }","  public void test30()  throws Throwable  {
      VFSFileSystem vFSFileSystem0 = new VFSFileSystem();
      URL uRL0 = vFSFileSystem0.locateFromURL(""file:///media/FSE_USER/extradrive1/toga-eval-FSE_USER-2023/toga-eval/artifacts/commons-configuration2-2.8.0-src/"", """");
      try { 
        vFSFileSystem0.getInputStream(uRL0);
        fail(""Expecting exception: Exception"");
      } catch(Exception e) {
         //
         // Cannot load a configuration from a directory
         //
         verifyException(""org.apache.commons.configuration2.io.VFSFileSystem"", e);
      }
  }"
836,"    public String getFileName(final String path) {
        if (UriParser.extractScheme(path) == null) {
            return super.getFileName(path);
        }
        try {
            return resolveURI(path).getBaseName();
        } catch (final FileSystemException fse) {
            fse.printStackTrace();
            return null;
        }
    }","  public void test31()  throws Throwable  {
      VFSFileSystem vFSFileSystem0 = new VFSFileSystem();
      String string0 = vFSFileSystem0.getFileName(""TeqO\""gy7yss"");
}"
837,"    public String getBasePath(final String path) {
        if (UriParser.extractScheme(path) == null) {
            return super.getBasePath(path);
        }
        try {
            final FileName parent = resolveURI(path).getParent();
            return parent != null ? parent.getURI() : null;
        } catch (final FileSystemException fse) {
            fse.printStackTrace();
            return null;
        }
    }","  public void test32()  throws Throwable  {
      VFSFileSystem vFSFileSystem0 = new VFSFileSystem();
      String string0 = vFSFileSystem0.getBasePath(""Uw38HVhB@4"");
}"
838,"    public String getBasePath(final String path) {
        if (UriParser.extractScheme(path) == null) {
            return super.getBasePath(path);
        }
        try {
            final FileName parent = resolveURI(path).getParent();
            return parent != null ? parent.getURI() : null;
        } catch (final FileSystemException fse) {
            fse.printStackTrace();
            return null;
        }
    }","  public void test33()  throws Throwable  {
      VFSFileSystem vFSFileSystem0 = new VFSFileSystem();
      String string0 = vFSFileSystem0.getBasePath(""file:///media/FSE_USER/extradrive1/toga-eval-FSE_USER-2023/toga-eval/artifacts/commons-configuration2-2.8.0-src/"");
}"
839,"    public String getBasePath(final String path) {
        if (UriParser.extractScheme(path) == null) {
            return super.getBasePath(path);
        }
        try {
            final FileName parent = resolveURI(path).getParent();
            return parent != null ? parent.getURI() : null;
        } catch (final FileSystemException fse) {
            fse.printStackTrace();
            return null;
        }
    }","  public void test34()  throws Throwable  {
      VFSFileSystem vFSFileSystem0 = new VFSFileSystem();
      String string0 = vFSFileSystem0.getBasePath(""file:///media/FSE_USER/extradrive1/toga-eval-FSE_USER-2023/toga-eval/artifacts/commons-configuration2-2.8.0-src/"");
}"
840,"    public URL getURL(final String basePath, final String file) throws MalformedURLException {
        if ((basePath != null && UriParser.extractScheme(basePath) == null) || (basePath == null && UriParser.extractScheme(file) == null)) {
            return super.getURL(basePath, file);
        }
        try {
            final FileName path;
            if (basePath != null && UriParser.extractScheme(file) == null) {
                final FileName base = resolveURI(basePath);
                path = getManager().resolveName(base, file);
            } else {
                path = resolveURI(file);
            }

            final URLStreamHandler handler = new VFSURLStreamHandler(path);
            return new URL(null, path.getURI(), handler);
        } catch (final FileSystemException fse) {
            throw new ConfigurationRuntimeException(""Could not parse basePath: "" + basePath + "" and fileName: "" + file, fse);
        }
    }","  public void test35()  throws Throwable  {
      VFSFileSystem vFSFileSystem0 = new VFSFileSystem();
      URL uRL0 = vFSFileSystem0.getURL(""file:///media/FSE_USER/extradrive1/toga-eval-FSE_USER-2023/toga-eval/artifacts/commons-configuration2-2.8.0-src/"", ""Uw38HVhB@4"");
      try { 
        MockURL.openStream(uRL0);
        fail(""Expecting exception: IOException"");
      } catch(IOException e) {
         //
         // VFS URLs can only be used with VFS APIs
         //
         verifyException(""org.apache.commons.configuration2.io.VFSFileSystem$VFSURLStreamHandler"", e);
      }
  }"
841,"    public OutputStream getOutputStream(final URL url) throws ConfigurationException {
        try {
            final FileSystemOptions opts = getOptions(url.getProtocol());
            final FileObject file = getManager().resolveFile(url.toString(), opts);
            // throw an exception if the target URL is a directory
            if (file == null || file.isFolder()) {
                throw new ConfigurationException(""Cannot save a configuration to a directory"");
            }
            final FileContent content = file.getContent();

            if (content == null) {
                throw new ConfigurationException(""Cannot access content of "" + url);
            }
            return content.getOutputStream();
        } catch (final FileSystemException fse) {
            throw new ConfigurationException(""Unable to access "" + url, fse);
        }
    }","  public void test36()  throws Throwable  {
      VFSFileSystem vFSFileSystem0 = new VFSFileSystem();
      URL uRL0 = vFSFileSystem0.getURL(""file:///media/FSE_USER/extradrive1/toga-eval-FSE_USER-2023/toga-eval/artifacts/commons-configuration2-2.8.0-src/"", ""file:///media/FSE_USER/extradrive1/toga-eval-FSE_USER-2023/toga-eval/artifacts/commons-configuration2-2.8.0-src/"");
      try { 
        vFSFileSystem0.getOutputStream(uRL0);
        fail(""Expecting exception: Exception"");
      } catch(Exception e) {
         //
         // Cannot save a configuration to a directory
         //
         verifyException(""org.apache.commons.configuration2.io.VFSFileSystem"", e);
      }
  }"
842,"    public URLConnectionOptions getURLConnectionOptions() {
        return urlConnectionOptions;
    }","  public void test0()  throws Throwable  {
      FileLocator.FileLocatorBuilder fileLocator_FileLocatorBuilder0 = new FileLocator.FileLocatorBuilder((FileLocator) null);
      URLConnectionOptions uRLConnectionOptions0 = URLConnectionOptions.DEFAULT;
      fileLocator_FileLocatorBuilder0.urlConnectionOptions(uRLConnectionOptions0);
      uRLConnectionOptions0.setUseCaches(false);
      FileLocator fileLocator0 = new FileLocator(fileLocator_FileLocatorBuilder0);
      URLConnectionOptions uRLConnectionOptions1 = fileLocator0.getURLConnectionOptions();
}"
843,"    public URLConnectionOptions getURLConnectionOptions() {
        return urlConnectionOptions;
    }","  public void test1()  throws Throwable  {
      FileLocator.FileLocatorBuilder fileLocator_FileLocatorBuilder0 = new FileLocator.FileLocatorBuilder((FileLocator) null);
      URLConnectionOptions uRLConnectionOptions0 = URLConnectionOptions.DEFAULT;
      FileLocator.FileLocatorBuilder fileLocator_FileLocatorBuilder1 = fileLocator_FileLocatorBuilder0.urlConnectionOptions(uRLConnectionOptions0);
      FileLocator fileLocator0 = new FileLocator(fileLocator_FileLocatorBuilder1);
      uRLConnectionOptions0.setReadTimeoutMillis(1271);
      URLConnectionOptions uRLConnectionOptions1 = fileLocator0.getURLConnectionOptions();
}"
844,"    public URLConnectionOptions getURLConnectionOptions() {
        return urlConnectionOptions;
    }","  public void test2()  throws Throwable  {
      FileLocator.FileLocatorBuilder fileLocator_FileLocatorBuilder0 = new FileLocator.FileLocatorBuilder((FileLocator) null);
      URLConnectionOptions uRLConnectionOptions0 = URLConnectionOptions.DEFAULT;
      FileLocator.FileLocatorBuilder fileLocator_FileLocatorBuilder1 = fileLocator_FileLocatorBuilder0.urlConnectionOptions(uRLConnectionOptions0);
      uRLConnectionOptions0.setReadTimeoutMillis((-526));
      FileLocator fileLocator0 = fileLocator_FileLocatorBuilder1.create();
      URLConnectionOptions uRLConnectionOptions1 = fileLocator0.getURLConnectionOptions();
}"
845,"    public URLConnectionOptions getURLConnectionOptions() {
        return urlConnectionOptions;
    }","  public void test3()  throws Throwable  {
      FileLocator.FileLocatorBuilder fileLocator_FileLocatorBuilder0 = new FileLocator.FileLocatorBuilder((FileLocator) null);
      URLConnectionOptions uRLConnectionOptions0 = URLConnectionOptions.DEFAULT;
      URLConnectionOptions uRLConnectionOptions1 = uRLConnectionOptions0.setConnectTimeoutMillis(590);
      FileLocator.FileLocatorBuilder fileLocator_FileLocatorBuilder1 = fileLocator_FileLocatorBuilder0.urlConnectionOptions(uRLConnectionOptions0);
      FileLocator fileLocator0 = new FileLocator(fileLocator_FileLocatorBuilder1);
      URLConnectionOptions uRLConnectionOptions2 = fileLocator0.getURLConnectionOptions();
}"
846,"    public URLConnectionOptions getURLConnectionOptions() {
        return urlConnectionOptions;
    }","  public void test4()  throws Throwable  {
      FileLocator.FileLocatorBuilder fileLocator_FileLocatorBuilder0 = new FileLocator.FileLocatorBuilder((FileLocator) null);
      URLConnectionOptions uRLConnectionOptions0 = new URLConnectionOptions();
      FileLocator.FileLocatorBuilder fileLocator_FileLocatorBuilder1 = fileLocator_FileLocatorBuilder0.urlConnectionOptions(uRLConnectionOptions0);
      FileLocator fileLocator0 = new FileLocator(fileLocator_FileLocatorBuilder1);
      uRLConnectionOptions0.setConnectTimeoutMillis((-704));
      URLConnectionOptions uRLConnectionOptions1 = fileLocator0.getURLConnectionOptions();
}"
847,"    public URLConnectionOptions getURLConnectionOptions() {
        return urlConnectionOptions;
    }","  public void test5()  throws Throwable  {
      FileLocator.FileLocatorBuilder fileLocator_FileLocatorBuilder0 = new FileLocator.FileLocatorBuilder((FileLocator) null);
      URLConnectionOptions uRLConnectionOptions0 = URLConnectionOptions.DEFAULT;
      FileLocator.FileLocatorBuilder fileLocator_FileLocatorBuilder1 = fileLocator_FileLocatorBuilder0.urlConnectionOptions(uRLConnectionOptions0);
      FileLocator fileLocator0 = new FileLocator(fileLocator_FileLocatorBuilder1);
      uRLConnectionOptions0.setAllowUserInteraction(true);
      URLConnectionOptions uRLConnectionOptions1 = fileLocator0.getURLConnectionOptions();
}"
848,"    public String toString() {
        return ""FileLocator [basePath="" + basePath + "", encoding="" + encoding + "", fileName="" + fileName + "", fileSystem="" + fileSystem + "", locationStrategy=""
            + locationStrategy + "", sourceURL="" + sourceURL + "", urlConnectionOptions="" + urlConnectionOptions + ""]"";
    }","  public void test6()  throws Throwable  {
      FileLocator.FileLocatorBuilder fileLocator_FileLocatorBuilder0 = new FileLocator.FileLocatorBuilder((FileLocator) null);
      VfsComponentContext vfsComponentContext0 = mock(VfsComponentContext.class, new ViolatedAssumptionAnswer());
      FileSystemOptions fileSystemOptions0 = new FileSystemOptions();
      DefaultURLStreamHandler defaultURLStreamHandler0 = new DefaultURLStreamHandler(vfsComponentContext0, fileSystemOptions0);
      URL uRL0 = MockURL.URL(""The validated expression is false"", ""The validated expression is false"", 0, ""l0FLF4"", (URLStreamHandler) defaultURLStreamHandler0);
      fileLocator_FileLocatorBuilder0.sourceURL(uRL0);
      FileLocator fileLocator0 = new FileLocator(fileLocator_FileLocatorBuilder0);
      URL uRL1 = fileLocator0.getSourceURL();
}"
849,"    public URL getSourceURL() {
        return sourceURL;
    }","  public void test7()  throws Throwable  {
      FileLocator.FileLocatorBuilder fileLocator_FileLocatorBuilder0 = new FileLocator.FileLocatorBuilder((FileLocator) null);
      VfsComponentContext vfsComponentContext0 = mock(VfsComponentContext.class, new ViolatedAssumptionAnswer());
      DefaultURLStreamHandler defaultURLStreamHandler0 = new DefaultURLStreamHandler(vfsComponentContext0);
      URL uRL0 = MockURL.URL("""", """", 12, """", (URLStreamHandler) defaultURLStreamHandler0);
      fileLocator_FileLocatorBuilder0.sourceURL(uRL0);
      FileLocator fileLocator0 = new FileLocator(fileLocator_FileLocatorBuilder0);
      URL uRL1 = fileLocator0.getSourceURL();
}"
850,"    public URL getSourceURL() {
        return sourceURL;
    }","  public void test8()  throws Throwable  {
      FileLocator.FileLocatorBuilder fileLocator_FileLocatorBuilder0 = new FileLocator.FileLocatorBuilder((FileLocator) null);
      URL uRL0 = MockURL.getHttpExample();
      fileLocator_FileLocatorBuilder0.sourceURL(uRL0);
      FileLocator fileLocator0 = fileLocator_FileLocatorBuilder0.create();
      URL uRL1 = fileLocator0.getSourceURL();
}"
851,"    public FileLocationStrategy getLocationStrategy() {
        return locationStrategy;
    }","  public void test9()  throws Throwable  {
      FileLocator.FileLocatorBuilder fileLocator_FileLocatorBuilder0 = new FileLocator.FileLocatorBuilder((FileLocator) null);
      HomeDirectoryLocationStrategy homeDirectoryLocationStrategy0 = new HomeDirectoryLocationStrategy();
      FileLocator.FileLocatorBuilder fileLocator_FileLocatorBuilder1 = fileLocator_FileLocatorBuilder0.locationStrategy(homeDirectoryLocationStrategy0);
      FileLocator fileLocator0 = new FileLocator(fileLocator_FileLocatorBuilder1);
      HomeDirectoryLocationStrategy homeDirectoryLocationStrategy1 = (HomeDirectoryLocationStrategy)fileLocator0.getLocationStrategy();
}"
852,"    public FileSystem getFileSystem() {
        return fileSystem;
    }","  public void test10()  throws Throwable  {
      FileLocator.FileLocatorBuilder fileLocator_FileLocatorBuilder0 = new FileLocator.FileLocatorBuilder((FileLocator) null);
      DefaultFileSystem defaultFileSystem0 = new DefaultFileSystem();
      fileLocator_FileLocatorBuilder0.fileSystem(defaultFileSystem0);
      FileLocator fileLocator0 = fileLocator_FileLocatorBuilder0.create();
      FileSystem fileSystem0 = fileLocator0.getFileSystem();
}"
853,"    public String getFileName() {
        return fileName;
    }","  public void test11()  throws Throwable  {
      FileLocator.FileLocatorBuilder fileLocator_FileLocatorBuilder0 = new FileLocator.FileLocatorBuilder((FileLocator) null);
      FileLocator.FileLocatorBuilder fileLocator_FileLocatorBuilder1 = fileLocator_FileLocatorBuilder0.fileName(""6-!{/nhJ3m"");
      FileLocator fileLocator0 = fileLocator_FileLocatorBuilder1.create();
      String string0 = fileLocator0.getFileName();
}"
854,"    public String getFileName() {
        return fileName;
    }","  public void test12()  throws Throwable  {
      FileLocator.FileLocatorBuilder fileLocator_FileLocatorBuilder0 = new FileLocator.FileLocatorBuilder((FileLocator) null);
      fileLocator_FileLocatorBuilder0.fileName("""");
      FileLocator fileLocator0 = fileLocator_FileLocatorBuilder0.create();
      String string0 = fileLocator0.getFileName();
}"
855,"    public String getEncoding() {
        return encoding;
    }","  public void test13()  throws Throwable  {
      FileLocator.FileLocatorBuilder fileLocator_FileLocatorBuilder0 = new FileLocator.FileLocatorBuilder((FileLocator) null);
      FileLocator.FileLocatorBuilder fileLocator_FileLocatorBuilder1 = fileLocator_FileLocatorBuilder0.encoding(""/Ecr>HbP!+fOI"");
      FileLocator fileLocator0 = new FileLocator(fileLocator_FileLocatorBuilder1);
      String string0 = fileLocator0.getEncoding();
}"
856,"    public String getEncoding() {
        return encoding;
    }","  public void test14()  throws Throwable  {
      FileLocator.FileLocatorBuilder fileLocator_FileLocatorBuilder0 = new FileLocator.FileLocatorBuilder((FileLocator) null);
      fileLocator_FileLocatorBuilder0.encoding("""");
      FileLocator fileLocator0 = fileLocator_FileLocatorBuilder0.create();
      String string0 = fileLocator0.getEncoding();
}"
857,"    public String getBasePath() {
        return basePath;
    }","  public void test15()  throws Throwable  {
      FileLocator.FileLocatorBuilder fileLocator_FileLocatorBuilder0 = new FileLocator.FileLocatorBuilder((FileLocator) null);
      FileLocator.FileLocatorBuilder fileLocator_FileLocatorBuilder1 = fileLocator_FileLocatorBuilder0.basePath(""org.apache.commons.configuration2.io.FileLocator"");
      FileLocator fileLocator0 = new FileLocator(fileLocator_FileLocatorBuilder1);
      String string0 = fileLocator0.getBasePath();
}"
858,"    public String getBasePath() {
        return basePath;
    }","  public void test16()  throws Throwable  {
      FileLocator.FileLocatorBuilder fileLocator_FileLocatorBuilder0 = new FileLocator.FileLocatorBuilder((FileLocator) null);
      FileLocator.FileLocatorBuilder fileLocator_FileLocatorBuilder1 = fileLocator_FileLocatorBuilder0.basePath("""");
      FileLocator fileLocator0 = new FileLocator(fileLocator_FileLocatorBuilder1);
      String string0 = fileLocator0.getBasePath();
}"
859,"    public FileLocator(final FileLocatorBuilder builder) {
        fileName = builder.fileName;
        basePath = builder.basePath;
        sourceURL = builder.sourceURL;
        urlConnectionOptions = builder.urlConnectionOptions;
        encoding = builder.encoding;
        fileSystem = builder.fileSystem;
        locationStrategy = builder.locationStrategy;
    }","  public void test17()  throws Throwable  {
      FileLocator fileLocator0 = null;
      try {
        fileLocator0 = new FileLocator((FileLocator.FileLocatorBuilder) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.configuration2.io.FileLocator$FileLocatorBuilder"", e);
      }
  }"
860,"    public URLConnectionOptions getURLConnectionOptions() {
        return urlConnectionOptions;
    }","  public void test18()  throws Throwable  {
      FileLocator.FileLocatorBuilder fileLocator_FileLocatorBuilder0 = new FileLocator.FileLocatorBuilder((FileLocator) null);
      FileLocator fileLocator0 = new FileLocator(fileLocator_FileLocatorBuilder0);
      URLConnectionOptions uRLConnectionOptions0 = fileLocator0.getURLConnectionOptions();
}"
861,"    public FileLocationStrategy getLocationStrategy() {
        return locationStrategy;
    }","  public void test19()  throws Throwable  {
      FileLocator.FileLocatorBuilder fileLocator_FileLocatorBuilder0 = new FileLocator.FileLocatorBuilder((FileLocator) null);
      FileLocator fileLocator0 = fileLocator_FileLocatorBuilder0.create();
      FileLocationStrategy fileLocationStrategy0 = fileLocator0.getLocationStrategy();
}"
862,"    public URL getSourceURL() {
        return sourceURL;
    }","  public void test20()  throws Throwable  {
      FileLocator.FileLocatorBuilder fileLocator_FileLocatorBuilder0 = new FileLocator.FileLocatorBuilder((FileLocator) null);
      FileLocator fileLocator0 = fileLocator_FileLocatorBuilder0.create();
      URL uRL0 = fileLocator0.getSourceURL();
}"
863,"    public String getFileName() {
        return fileName;
    }","  public void test21()  throws Throwable  {
      FileLocator.FileLocatorBuilder fileLocator_FileLocatorBuilder0 = new FileLocator.FileLocatorBuilder((FileLocator) null);
      FileLocator fileLocator0 = fileLocator_FileLocatorBuilder0.create();
      String string0 = fileLocator0.getFileName();
}"
864,"    public String getEncoding() {
        return encoding;
    }","  public void test22()  throws Throwable  {
      FileLocator.FileLocatorBuilder fileLocator_FileLocatorBuilder0 = new FileLocator.FileLocatorBuilder((FileLocator) null);
      FileLocator fileLocator0 = new FileLocator(fileLocator_FileLocatorBuilder0);
      String string0 = fileLocator0.getEncoding();
}"
865,"    public String getBasePath() {
        return basePath;
    }","  public void test23()  throws Throwable  {
      FileLocator.FileLocatorBuilder fileLocator_FileLocatorBuilder0 = new FileLocator.FileLocatorBuilder((FileLocator) null);
      FileLocator fileLocator0 = new FileLocator(fileLocator_FileLocatorBuilder0);
      String string0 = fileLocator0.getBasePath();
}"
866,"    public FileSystem getFileSystem() {
        return fileSystem;
    }","  public void test24()  throws Throwable  {
      FileLocator.FileLocatorBuilder fileLocator_FileLocatorBuilder0 = new FileLocator.FileLocatorBuilder((FileLocator) null);
      FileLocator fileLocator0 = new FileLocator(fileLocator_FileLocatorBuilder0);
      FileSystem fileSystem0 = fileLocator0.getFileSystem();
}"
867,"    public boolean equals(final Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof FileLocator)) {
            return false;
        }
        final FileLocator other = (FileLocator) obj;
        return Objects.equals(basePath, other.basePath) && Objects.equals(encoding, other.encoding) && Objects.equals(fileName, other.fileName)
            && Objects.equals(fileSystem, other.fileSystem) && Objects.equals(locationStrategy, other.locationStrategy)
            && Objects.equals(sourceURL, other.sourceURL) && Objects.equals(urlConnectionOptions, other.urlConnectionOptions);
    }","  public void test25()  throws Throwable  {
      FileLocator.FileLocatorBuilder fileLocator_FileLocatorBuilder0 = new FileLocator.FileLocatorBuilder((FileLocator) null);
      FileLocator fileLocator0 = new FileLocator(fileLocator_FileLocatorBuilder0);
      VFSFileSystem vFSFileSystem0 = new VFSFileSystem();
      URL uRL0 = vFSFileSystem0.getURL(""OgX1 ]Zdh|:C-EHt"", ""OgX1 ]Zdh|:C-EHt"");
      fileLocator_FileLocatorBuilder0.sourceURL(uRL0);
      FileLocator fileLocator1 = new FileLocator(fileLocator_FileLocatorBuilder0);
      boolean boolean0 = fileLocator0.equals(fileLocator1);
}"
868,"    public boolean equals(final Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof FileLocator)) {
            return false;
        }
        final FileLocator other = (FileLocator) obj;
        return Objects.equals(basePath, other.basePath) && Objects.equals(encoding, other.encoding) && Objects.equals(fileName, other.fileName)
            && Objects.equals(fileSystem, other.fileSystem) && Objects.equals(locationStrategy, other.locationStrategy)
            && Objects.equals(sourceURL, other.sourceURL) && Objects.equals(urlConnectionOptions, other.urlConnectionOptions);
    }","  public void test26()  throws Throwable  {
      FileLocator.FileLocatorBuilder fileLocator_FileLocatorBuilder0 = new FileLocator.FileLocatorBuilder((FileLocator) null);
      FileLocator fileLocator0 = new FileLocator(fileLocator_FileLocatorBuilder0);
      FileSystemLocationStrategy fileSystemLocationStrategy0 = new FileSystemLocationStrategy();
      fileLocator_FileLocatorBuilder0.locationStrategy(fileSystemLocationStrategy0);
      FileLocator fileLocator1 = new FileLocator(fileLocator_FileLocatorBuilder0);
      boolean boolean0 = fileLocator0.equals(fileLocator1);
}"
869,"    public boolean equals(final Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof FileLocator)) {
            return false;
        }
        final FileLocator other = (FileLocator) obj;
        return Objects.equals(basePath, other.basePath) && Objects.equals(encoding, other.encoding) && Objects.equals(fileName, other.fileName)
            && Objects.equals(fileSystem, other.fileSystem) && Objects.equals(locationStrategy, other.locationStrategy)
            && Objects.equals(sourceURL, other.sourceURL) && Objects.equals(urlConnectionOptions, other.urlConnectionOptions);
    }","  public void test27()  throws Throwable  {
      FileLocator.FileLocatorBuilder fileLocator_FileLocatorBuilder0 = new FileLocator.FileLocatorBuilder((FileLocator) null);
      FileLocator fileLocator0 = new FileLocator(fileLocator_FileLocatorBuilder0);
      VFSFileSystem vFSFileSystem0 = new VFSFileSystem();
      fileLocator_FileLocatorBuilder0.fileSystem(vFSFileSystem0);
      FileLocator fileLocator1 = new FileLocator(fileLocator_FileLocatorBuilder0);
      boolean boolean0 = fileLocator0.equals(fileLocator1);
}"
870,"    public boolean equals(final Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof FileLocator)) {
            return false;
        }
        final FileLocator other = (FileLocator) obj;
        return Objects.equals(basePath, other.basePath) && Objects.equals(encoding, other.encoding) && Objects.equals(fileName, other.fileName)
            && Objects.equals(fileSystem, other.fileSystem) && Objects.equals(locationStrategy, other.locationStrategy)
            && Objects.equals(sourceURL, other.sourceURL) && Objects.equals(urlConnectionOptions, other.urlConnectionOptions);
    }","  public void test28()  throws Throwable  {
      FileLocator.FileLocatorBuilder fileLocator_FileLocatorBuilder0 = new FileLocator.FileLocatorBuilder((FileLocator) null);
      FileLocator fileLocator0 = new FileLocator(fileLocator_FileLocatorBuilder0);
      fileLocator_FileLocatorBuilder0.fileName(""OgX1 ]Zdh|:C-EHt"");
      FileLocator fileLocator1 = new FileLocator(fileLocator_FileLocatorBuilder0);
      boolean boolean0 = fileLocator0.equals(fileLocator1);
}"
871,"    public boolean equals(final Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof FileLocator)) {
            return false;
        }
        final FileLocator other = (FileLocator) obj;
        return Objects.equals(basePath, other.basePath) && Objects.equals(encoding, other.encoding) && Objects.equals(fileName, other.fileName)
            && Objects.equals(fileSystem, other.fileSystem) && Objects.equals(locationStrategy, other.locationStrategy)
            && Objects.equals(sourceURL, other.sourceURL) && Objects.equals(urlConnectionOptions, other.urlConnectionOptions);
    }","  public void test29()  throws Throwable  {
      FileLocator.FileLocatorBuilder fileLocator_FileLocatorBuilder0 = new FileLocator.FileLocatorBuilder((FileLocator) null);
      FileLocator fileLocator0 = new FileLocator(fileLocator_FileLocatorBuilder0);
      fileLocator_FileLocatorBuilder0.basePath(""<Y1N"");
      FileLocator fileLocator1 = new FileLocator(fileLocator_FileLocatorBuilder0);
      boolean boolean0 = fileLocator1.equals(fileLocator0);
}"
872,"    public boolean equals(final Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof FileLocator)) {
            return false;
        }
        final FileLocator other = (FileLocator) obj;
        return Objects.equals(basePath, other.basePath) && Objects.equals(encoding, other.encoding) && Objects.equals(fileName, other.fileName)
            && Objects.equals(fileSystem, other.fileSystem) && Objects.equals(locationStrategy, other.locationStrategy)
            && Objects.equals(sourceURL, other.sourceURL) && Objects.equals(urlConnectionOptions, other.urlConnectionOptions);
    }","  public void test30()  throws Throwable  {
      FileLocator.FileLocatorBuilder fileLocator_FileLocatorBuilder0 = new FileLocator.FileLocatorBuilder((FileLocator) null);
      FileLocator fileLocator0 = new FileLocator(fileLocator_FileLocatorBuilder0);
      FileLocator fileLocator1 = new FileLocator(fileLocator_FileLocatorBuilder0);
      boolean boolean0 = fileLocator0.equals(fileLocator1);
}"
873,"    public boolean equals(final Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof FileLocator)) {
            return false;
        }
        final FileLocator other = (FileLocator) obj;
        return Objects.equals(basePath, other.basePath) && Objects.equals(encoding, other.encoding) && Objects.equals(fileName, other.fileName)
            && Objects.equals(fileSystem, other.fileSystem) && Objects.equals(locationStrategy, other.locationStrategy)
            && Objects.equals(sourceURL, other.sourceURL) && Objects.equals(urlConnectionOptions, other.urlConnectionOptions);
    }","  public void test31()  throws Throwable  {
      FileLocator.FileLocatorBuilder fileLocator_FileLocatorBuilder0 = new FileLocator.FileLocatorBuilder((FileLocator) null);
      FileLocator fileLocator0 = new FileLocator(fileLocator_FileLocatorBuilder0);
      boolean boolean0 = fileLocator0.equals(fileLocator0);
}"
874,"    public boolean equals(final Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof FileLocator)) {
            return false;
        }
        final FileLocator other = (FileLocator) obj;
        return Objects.equals(basePath, other.basePath) && Objects.equals(encoding, other.encoding) && Objects.equals(fileName, other.fileName)
            && Objects.equals(fileSystem, other.fileSystem) && Objects.equals(locationStrategy, other.locationStrategy)
            && Objects.equals(sourceURL, other.sourceURL) && Objects.equals(urlConnectionOptions, other.urlConnectionOptions);
    }","  public void test32()  throws Throwable  {
      FileLocator.FileLocatorBuilder fileLocator_FileLocatorBuilder0 = new FileLocator.FileLocatorBuilder((FileLocator) null);
      FileLocator fileLocator0 = new FileLocator(fileLocator_FileLocatorBuilder0);
      boolean boolean0 = fileLocator0.equals(fileLocator_FileLocatorBuilder0);
}"
875,"    public int hashCode() {
        return Objects.hash(basePath, encoding, fileName, fileSystem, locationStrategy, sourceURL, urlConnectionOptions);
    }","  public void test33()  throws Throwable  {
      FileLocator.FileLocatorBuilder fileLocator_FileLocatorBuilder0 = new FileLocator.FileLocatorBuilder((FileLocator) null);
      FileLocator fileLocator0 = new FileLocator(fileLocator_FileLocatorBuilder0);
      fileLocator0.hashCode();
  }"
876,"    public String toString() {
        return ""FileLocator [basePath="" + basePath + "", encoding="" + encoding + "", fileName="" + fileName + "", fileSystem="" + fileSystem + "", locationStrategy=""
            + locationStrategy + "", sourceURL="" + sourceURL + "", urlConnectionOptions="" + urlConnectionOptions + ""]"";
    }","  public void test34()  throws Throwable  {
      FileLocator.FileLocatorBuilder fileLocator_FileLocatorBuilder0 = new FileLocator.FileLocatorBuilder((FileLocator) null);
      FileLocator fileLocator0 = new FileLocator(fileLocator_FileLocatorBuilder0);
      String string0 = fileLocator0.toString();
}"
877,"    public boolean equals(final Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof FileLocator)) {
            return false;
        }
        final FileLocator other = (FileLocator) obj;
        return Objects.equals(basePath, other.basePath) && Objects.equals(encoding, other.encoding) && Objects.equals(fileName, other.fileName)
            && Objects.equals(fileSystem, other.fileSystem) && Objects.equals(locationStrategy, other.locationStrategy)
            && Objects.equals(sourceURL, other.sourceURL) && Objects.equals(urlConnectionOptions, other.urlConnectionOptions);
    }","  public void test35()  throws Throwable  {
      FileLocator.FileLocatorBuilder fileLocator_FileLocatorBuilder0 = new FileLocator.FileLocatorBuilder((FileLocator) null);
      URLConnectionOptions uRLConnectionOptions0 = new URLConnectionOptions();
      FileLocator.FileLocatorBuilder fileLocator_FileLocatorBuilder1 = fileLocator_FileLocatorBuilder0.urlConnectionOptions(uRLConnectionOptions0);
      FileLocator fileLocator0 = new FileLocator(fileLocator_FileLocatorBuilder1);
      FileLocator.FileLocatorBuilder fileLocator_FileLocatorBuilder2 = new FileLocator.FileLocatorBuilder((FileLocator) null);
      FileLocator fileLocator1 = new FileLocator(fileLocator_FileLocatorBuilder2);
      boolean boolean0 = fileLocator0.equals(fileLocator1);
}"
878,"    public boolean equals(final Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof FileLocator)) {
            return false;
        }
        final FileLocator other = (FileLocator) obj;
        return Objects.equals(basePath, other.basePath) && Objects.equals(encoding, other.encoding) && Objects.equals(fileName, other.fileName)
            && Objects.equals(fileSystem, other.fileSystem) && Objects.equals(locationStrategy, other.locationStrategy)
            && Objects.equals(sourceURL, other.sourceURL) && Objects.equals(urlConnectionOptions, other.urlConnectionOptions);
    }","  public void test36()  throws Throwable  {
      FileLocator.FileLocatorBuilder fileLocator_FileLocatorBuilder0 = new FileLocator.FileLocatorBuilder((FileLocator) null);
      FileLocator fileLocator0 = new FileLocator(fileLocator_FileLocatorBuilder0);
      FileLocator.FileLocatorBuilder fileLocator_FileLocatorBuilder1 = new FileLocator.FileLocatorBuilder(fileLocator0);
}"
879,"    public boolean equals(final Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof FileLocator)) {
            return false;
        }
        final FileLocator other = (FileLocator) obj;
        return Objects.equals(basePath, other.basePath) && Objects.equals(encoding, other.encoding) && Objects.equals(fileName, other.fileName)
            && Objects.equals(fileSystem, other.fileSystem) && Objects.equals(locationStrategy, other.locationStrategy)
            && Objects.equals(sourceURL, other.sourceURL) && Objects.equals(urlConnectionOptions, other.urlConnectionOptions);
    }","  public void test37()  throws Throwable  {
      FileLocator.FileLocatorBuilder fileLocator_FileLocatorBuilder0 = new FileLocator.FileLocatorBuilder((FileLocator) null);
      FileLocator fileLocator0 = fileLocator_FileLocatorBuilder0.create();
      fileLocator_FileLocatorBuilder0.encoding(""6-!{/nhJ3m"");
      FileLocator fileLocator1 = fileLocator_FileLocatorBuilder0.create();
      boolean boolean0 = fileLocator1.equals(fileLocator0);
}"
880,"    static String decodeUrl(final String url) {
        String decoded = url;
        if (url != null && url.indexOf('%') >= 0) {
            final int n = url.length();
            final StringBuilder buffer = new StringBuilder();
            final ByteBuffer bytes = ByteBuffer.allocate(n);
            for (int i = 0; i < n;) {
                if (url.charAt(i) == '%') {
                    try {
                        do {
                            final byte octet = (byte) Integer.parseInt(url.substring(i + 1, i + 3), 16);
                            bytes.put(octet);
                            i += 3;
                        } while (i < n && url.charAt(i) == '%');
                        continue;
                    } catch (final RuntimeException ignored) {
                        // malformed percent-encoded octet, fall through and
                        // append characters literally
                    } finally {
                        if (bytes.position() > 0) {
                            bytes.flip();
                            buffer.append(UTF8.decode(bytes));
                            bytes.clear();
                        }
                    }
                }
                buffer.append(url.charAt(i++));
            }
            decoded = buffer.toString();
        }
        return decoded;
    }","  public void test0()  throws Throwable  {
      String string0 = FileUtils.decodeUrl(""D^N%eE$w%>9+v!L-"");
}"
881,"    static String decodeUrl(final String url) {
        String decoded = url;
        if (url != null && url.indexOf('%') >= 0) {
            final int n = url.length();
            final StringBuilder buffer = new StringBuilder();
            final ByteBuffer bytes = ByteBuffer.allocate(n);
            for (int i = 0; i < n;) {
                if (url.charAt(i) == '%') {
                    try {
                        do {
                            final byte octet = (byte) Integer.parseInt(url.substring(i + 1, i + 3), 16);
                            bytes.put(octet);
                            i += 3;
                        } while (i < n && url.charAt(i) == '%');
                        continue;
                    } catch (final RuntimeException ignored) {
                        // malformed percent-encoded octet, fall through and
                        // append characters literally
                    } finally {
                        if (bytes.position() > 0) {
                            bytes.flip();
                            buffer.append(UTF8.decode(bytes));
                            bytes.clear();
                        }
                    }
                }
                buffer.append(url.charAt(i++));
            }
            decoded = buffer.toString();
        }
        return decoded;
    }","  public void test1()  throws Throwable  {
      String string0 = FileUtils.decodeUrl(""%I6dw/<4*Bh"");
}"
882,"    public static File toFile(final URL url) {
        if (url == null || !""file"".equalsIgnoreCase(url.getProtocol())) {
            return null;
        }
        String fileName = url.getFile().replace('/', File.separatorChar);
        fileName = decodeUrl(fileName);
        return new File(fileName);
    }","  public void test2()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      URL uRL1 = MockURL.URL(uRL0, ""[a-z]+://.*"");
      File file0 = FileUtils.toFile(uRL1);
}"
883,"    public static File toFile(final URL url) {
        if (url == null || !""file"".equalsIgnoreCase(url.getProtocol())) {
            return null;
        }
        String fileName = url.getFile().replace('/', File.separatorChar);
        fileName = decodeUrl(fileName);
        return new File(fileName);
    }","  public void test3()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      URL uRL1 = MockURL.URL(uRL0, ""[a-z]+://.*"");
      File file0 = FileUtils.toFile(uRL1);
}"
884,"    public static File toFile(final URL url) {
        if (url == null || !""file"".equalsIgnoreCase(url.getProtocol())) {
            return null;
        }
        String fileName = url.getFile().replace('/', File.separatorChar);
        fileName = decodeUrl(fileName);
        return new File(fileName);
    }","  public void test4()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(""/fake/but/wellformed/url"");
      FileSystemHandling.createFolder(evoSuiteFile0);
      File file0 = FileUtils.toFile(uRL0);
}"
885,"    public static File toFile(final URL url) {
        if (url == null || !""file"".equalsIgnoreCase(url.getProtocol())) {
            return null;
        }
        String fileName = url.getFile().replace('/', File.separatorChar);
        fileName = decodeUrl(fileName);
        return new File(fileName);
    }","  public void test5()  throws Throwable  {
      URL uRL0 = MockURL.URL(""file"", ""file"", 3087, "":(?:[^/]+)@"");
      File file0 = FileUtils.toFile(uRL0);
}"
886,"    public static File toFile(final URL url) {
        if (url == null || !""file"".equalsIgnoreCase(url.getProtocol())) {
            return null;
        }
        String fileName = url.getFile().replace('/', File.separatorChar);
        fileName = decodeUrl(fileName);
        return new File(fileName);
    }","  public void test6()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(""/fake/but/wellformed/url"");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, ""(arfz^#u"");
      File file0 = FileUtils.toFile(uRL0);
}"
887,"    static String decodeUrl(final String url) {
        String decoded = url;
        if (url != null && url.indexOf('%') >= 0) {
            final int n = url.length();
            final StringBuilder buffer = new StringBuilder();
            final ByteBuffer bytes = ByteBuffer.allocate(n);
            for (int i = 0; i < n;) {
                if (url.charAt(i) == '%') {
                    try {
                        do {
                            final byte octet = (byte) Integer.parseInt(url.substring(i + 1, i + 3), 16);
                            bytes.put(octet);
                            i += 3;
                        } while (i < n && url.charAt(i) == '%');
                        continue;
                    } catch (final RuntimeException ignored) {
                        // malformed percent-encoded octet, fall through and
                        // append characters literally
                    } finally {
                        if (bytes.position() > 0) {
                            bytes.flip();
                            buffer.append(UTF8.decode(bytes));
                            bytes.clear();
                        }
                    }
                }
                buffer.append(url.charAt(i++));
            }
            decoded = buffer.toString();
        }
        return decoded;
    }","  public void test7()  throws Throwable  {
      String string0 = FileUtils.decodeUrl("""");
}"
888,"    static String decodeUrl(final String url) {
        String decoded = url;
        if (url != null && url.indexOf('%') >= 0) {
            final int n = url.length();
            final StringBuilder buffer = new StringBuilder();
            final ByteBuffer bytes = ByteBuffer.allocate(n);
            for (int i = 0; i < n;) {
                if (url.charAt(i) == '%') {
                    try {
                        do {
                            final byte octet = (byte) Integer.parseInt(url.substring(i + 1, i + 3), 16);
                            bytes.put(octet);
                            i += 3;
                        } while (i < n && url.charAt(i) == '%');
                        continue;
                    } catch (final RuntimeException ignored) {
                        // malformed percent-encoded octet, fall through and
                        // append characters literally
                    } finally {
                        if (bytes.position() > 0) {
                            bytes.flip();
                            buffer.append(UTF8.decode(bytes));
                            bytes.clear();
                        }
                    }
                }
                buffer.append(url.charAt(i++));
            }
            decoded = buffer.toString();
        }
        return decoded;
    }","  public void test8()  throws Throwable  {
      String string0 = FileUtils.decodeUrl(""DX%eaNM&ys%)-"");
}"
889,"    static String decodeUrl(final String url) {
        String decoded = url;
        if (url != null && url.indexOf('%') >= 0) {
            final int n = url.length();
            final StringBuilder buffer = new StringBuilder();
            final ByteBuffer bytes = ByteBuffer.allocate(n);
            for (int i = 0; i < n;) {
                if (url.charAt(i) == '%') {
                    try {
                        do {
                            final byte octet = (byte) Integer.parseInt(url.substring(i + 1, i + 3), 16);
                            bytes.put(octet);
                            i += 3;
                        } while (i < n && url.charAt(i) == '%');
                        continue;
                    } catch (final RuntimeException ignored) {
                        // malformed percent-encoded octet, fall through and
                        // append characters literally
                    } finally {
                        if (bytes.position() > 0) {
                            bytes.flip();
                            buffer.append(UTF8.decode(bytes));
                            bytes.clear();
                        }
                    }
                }
                buffer.append(url.charAt(i++));
            }
            decoded = buffer.toString();
        }
        return decoded;
    }","  public void test9()  throws Throwable  {
      String string0 = FileUtils.decodeUrl(""\u0006(7]Rf#a&A%1d%"");
}"
890,"    static String decodeUrl(final String url) {
        String decoded = url;
        if (url != null && url.indexOf('%') >= 0) {
            final int n = url.length();
            final StringBuilder buffer = new StringBuilder();
            final ByteBuffer bytes = ByteBuffer.allocate(n);
            for (int i = 0; i < n;) {
                if (url.charAt(i) == '%') {
                    try {
                        do {
                            final byte octet = (byte) Integer.parseInt(url.substring(i + 1, i + 3), 16);
                            bytes.put(octet);
                            i += 3;
                        } while (i < n && url.charAt(i) == '%');
                        continue;
                    } catch (final RuntimeException ignored) {
                        // malformed percent-encoded octet, fall through and
                        // append characters literally
                    } finally {
                        if (bytes.position() > 0) {
                            bytes.flip();
                            buffer.append(UTF8.decode(bytes));
                            bytes.clear();
                        }
                    }
                }
                buffer.append(url.charAt(i++));
            }
            decoded = buffer.toString();
        }
        return decoded;
    }","  public void test10()  throws Throwable  {
      String string0 = FileUtils.decodeUrl(""sF Vr%e6"");
}"
891,"    static String decodeUrl(final String url) {
        String decoded = url;
        if (url != null && url.indexOf('%') >= 0) {
            final int n = url.length();
            final StringBuilder buffer = new StringBuilder();
            final ByteBuffer bytes = ByteBuffer.allocate(n);
            for (int i = 0; i < n;) {
                if (url.charAt(i) == '%') {
                    try {
                        do {
                            final byte octet = (byte) Integer.parseInt(url.substring(i + 1, i + 3), 16);
                            bytes.put(octet);
                            i += 3;
                        } while (i < n && url.charAt(i) == '%');
                        continue;
                    } catch (final RuntimeException ignored) {
                        // malformed percent-encoded octet, fall through and
                        // append characters literally
                    } finally {
                        if (bytes.position() > 0) {
                            bytes.flip();
                            buffer.append(UTF8.decode(bytes));
                            bytes.clear();
                        }
                    }
                }
                buffer.append(url.charAt(i++));
            }
            decoded = buffer.toString();
        }
        return decoded;
    }","  public void test11()  throws Throwable  {
      String string0 = FileUtils.decodeUrl((String) null);
}"
892,"    public static File toFile(final URL url) {
        if (url == null || !""file"".equalsIgnoreCase(url.getProtocol())) {
            return null;
        }
        String fileName = url.getFile().replace('/', File.separatorChar);
        fileName = decodeUrl(fileName);
        return new File(fileName);
    }","  public void test12()  throws Throwable  {
      DefaultURLStreamHandler defaultURLStreamHandler0 = new DefaultURLStreamHandler((VfsComponentContext) null);
      URL uRL0 = MockURL.URL(""EkjF"", ""sF Vr\uFFFD"", 3, ""sF Vr\uFFFD"", (URLStreamHandler) defaultURLStreamHandler0);
      File file0 = FileUtils.toFile(uRL0);
}"
893,"    public static File toFile(final URL url) {
        if (url == null || !""file"".equalsIgnoreCase(url.getProtocol())) {
            return null;
        }
        String fileName = url.getFile().replace('/', File.separatorChar);
        fileName = decodeUrl(fileName);
        return new File(fileName);
    }","  public void test13()  throws Throwable  {
      File file0 = FileUtils.toFile((URL) null);
}"
894,,"  public void test14()  throws Throwable  {
      FileUtils fileUtils0 = new FileUtils();
  }"
895,"    public URL locate(final FileSystem fileSystem, final FileLocator locator) {
        if (StringUtils.isNotEmpty(locator.getFileName())) {
            final File file = new File(locator.getFileName());
            if (file.isAbsolute() && file.exists()) {
                return FileLocatorUtils.convertFileToURL(file);
            }
        }

        return null;
    }","  public void test0()  throws Throwable  {
      AbsoluteNameLocationStrategy absoluteNameLocationStrategy0 = new AbsoluteNameLocationStrategy();
      DefaultFileSystem defaultFileSystem0 = new DefaultFileSystem();
      // Undeclared exception!
      try { 
        absoluteNameLocationStrategy0.locate(defaultFileSystem0, (FileLocator) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.configuration2.io.AbsoluteNameLocationStrategy"", e);
      }
  }"
896,"    public URL locate(final FileSystem fileSystem, final FileLocator locator) {
        if (StringUtils.isNotEmpty(locator.getFileName())) {
            final File file = new File(locator.getFileName());
            if (file.isAbsolute() && file.exists()) {
                return FileLocatorUtils.convertFileToURL(file);
            }
        }

        return null;
    }","  public void test1()  throws Throwable  {
      URLConnectionOptions uRLConnectionOptions0 = mock(URLConnectionOptions.class, new ViolatedAssumptionAnswer());
      HomeDirectoryLocationStrategy homeDirectoryLocationStrategy0 = new HomeDirectoryLocationStrategy(true);
      URL uRL0 = MockURL.getHttpExample();
      FileLocator fileLocator0 = mock(FileLocator.class, new ViolatedAssumptionAnswer());
      doReturn(""l_z"").when(fileLocator0).getBasePath();
      doReturn((String) null).when(fileLocator0).getEncoding();
      doReturn(""/g(+%K_L3R:u"").when(fileLocator0).getFileName();
      doReturn((FileSystem) null).when(fileLocator0).getFileSystem();
      doReturn(homeDirectoryLocationStrategy0).when(fileLocator0).getLocationStrategy();
      doReturn(uRL0).when(fileLocator0).getSourceURL();
      doReturn(uRLConnectionOptions0).when(fileLocator0).getURLConnectionOptions();
      FileLocator.FileLocatorBuilder fileLocator_FileLocatorBuilder0 = new FileLocator.FileLocatorBuilder(fileLocator0);
      AbsoluteNameLocationStrategy absoluteNameLocationStrategy0 = new AbsoluteNameLocationStrategy();
      FileLocator fileLocator1 = new FileLocator(fileLocator_FileLocatorBuilder0);
      URL uRL1 = absoluteNameLocationStrategy0.locate((FileSystem) null, fileLocator1);
}"
897,"    public URL locate(final FileSystem fileSystem, final FileLocator locator) {
        if (StringUtils.isNotEmpty(locator.getFileName())) {
            final File file = new File(locator.getFileName());
            if (file.isAbsolute() && file.exists()) {
                return FileLocatorUtils.convertFileToURL(file);
            }
        }

        return null;
    }","  public void test2()  throws Throwable  {
      URLConnectionOptions uRLConnectionOptions0 = mock(URLConnectionOptions.class, new ViolatedAssumptionAnswer());
      HomeDirectoryLocationStrategy homeDirectoryLocationStrategy0 = new HomeDirectoryLocationStrategy(""_"", true);
      URL uRL0 = MockURL.getFtpExample();
      FileLocator fileLocator0 = mock(FileLocator.class, new ViolatedAssumptionAnswer());
      doReturn(""_"").when(fileLocator0).getBasePath();
      doReturn(""_"").when(fileLocator0).getEncoding();
      doReturn(""/g(+%K_L3R:u"").when(fileLocator0).getFileName();
      doReturn((FileSystem) null).when(fileLocator0).getFileSystem();
      doReturn(homeDirectoryLocationStrategy0).when(fileLocator0).getLocationStrategy();
      doReturn(uRL0).when(fileLocator0).getSourceURL();
      doReturn(uRLConnectionOptions0).when(fileLocator0).getURLConnectionOptions();
      FileLocator.FileLocatorBuilder fileLocator_FileLocatorBuilder0 = new FileLocator.FileLocatorBuilder(fileLocator0);
      AbsoluteNameLocationStrategy absoluteNameLocationStrategy0 = new AbsoluteNameLocationStrategy();
      FileLocator.FileLocatorBuilder fileLocator_FileLocatorBuilder1 = fileLocator_FileLocatorBuilder0.fileName(""_"");
      FileLocator fileLocator1 = new FileLocator(fileLocator_FileLocatorBuilder1);
      URL uRL1 = absoluteNameLocationStrategy0.locate((FileSystem) null, fileLocator1);
}"
898,"    public URL locate(final FileSystem fileSystem, final FileLocator locator) {
        if (StringUtils.isNotEmpty(locator.getFileName())) {
            final File file = new File(locator.getFileName());
            if (file.isAbsolute() && file.exists()) {
                return FileLocatorUtils.convertFileToURL(file);
            }
        }

        return null;
    }","  public void test3()  throws Throwable  {
      AbsoluteNameLocationStrategy absoluteNameLocationStrategy0 = new AbsoluteNameLocationStrategy();
      DefaultFileSystem defaultFileSystem0 = new DefaultFileSystem();
      FileLocator.FileLocatorBuilder fileLocator_FileLocatorBuilder0 = new FileLocator.FileLocatorBuilder((FileLocator) null);
      FileLocator fileLocator0 = new FileLocator(fileLocator_FileLocatorBuilder0);
      URL uRL0 = absoluteNameLocationStrategy0.locate(defaultFileSystem0, fileLocator0);
}"
899,"    public URL locate(final FileSystem fileSystem, final FileLocator locator) {
        return StringUtils.isEmpty(locator.getFileName()) ? null : FileLocatorUtils.locateFromClasspath(locator.getFileName());
    }","  public void test0()  throws Throwable  {
      ClasspathLocationStrategy classpathLocationStrategy0 = new ClasspathLocationStrategy();
      // Undeclared exception!
      try { 
        classpathLocationStrategy0.locate((FileSystem) null, (FileLocator) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.configuration2.io.ClasspathLocationStrategy"", e);
      }
  }"
900,"    public URL locate(final FileSystem fileSystem, final FileLocator locator) {
        return StringUtils.isEmpty(locator.getFileName()) ? null : FileLocatorUtils.locateFromClasspath(locator.getFileName());
    }","  public void test1()  throws Throwable  {
      ClasspathLocationStrategy classpathLocationStrategy0 = new ClasspathLocationStrategy();
      VFSFileSystem vFSFileSystem0 = new VFSFileSystem();
      FileLocator fileLocator0 = mock(FileLocator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(fileLocator0).getFileName();
      URL uRL0 = classpathLocationStrategy0.locate(vFSFileSystem0, fileLocator0);
}"
901,"    public URL locate(final FileSystem fileSystem, final FileLocator locator) {
        return StringUtils.isEmpty(locator.getFileName()) ? null : FileLocatorUtils.locateFromClasspath(locator.getFileName());
    }","  public void test2()  throws Throwable  {
      ClasspathLocationStrategy classpathLocationStrategy0 = new ClasspathLocationStrategy();
      FileLocator fileLocator0 = mock(FileLocator.class, new ViolatedAssumptionAnswer());
      doReturn(""xvX4`"", (String) null).when(fileLocator0).getFileName();
      VFSFileSystem vFSFileSystem0 = new VFSFileSystem();
      // Undeclared exception!
      try { 
        classpathLocationStrategy0.locate(vFSFileSystem0, fileLocator0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
902,"    public URL locate(final FileSystem fileSystem, final FileLocator locator) {
        if (StringUtils.isNotEmpty(locator.getFileName())) {
            final File file = FileLocatorUtils.constructFile(locator.getBasePath(), locator.getFileName());
            if (file.isFile()) {
                return FileLocatorUtils.convertFileToURL(file);
            }
        }

        return null;
    }","  public void test0()  throws Throwable  {
      BasePathLocationStrategy basePathLocationStrategy0 = new BasePathLocationStrategy();
      // Undeclared exception!
      try { 
        basePathLocationStrategy0.locate((FileSystem) null, (FileLocator) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.configuration2.io.BasePathLocationStrategy"", e);
      }
  }"
903,"    public URL locate(final FileSystem fileSystem, final FileLocator locator) {
        if (StringUtils.isNotEmpty(locator.getFileName())) {
            final File file = FileLocatorUtils.constructFile(locator.getBasePath(), locator.getFileName());
            if (file.isFile()) {
                return FileLocatorUtils.convertFileToURL(file);
            }
        }

        return null;
    }","  public void test1()  throws Throwable  {
      BasePathLocationStrategy basePathLocationStrategy0 = new BasePathLocationStrategy();
      URLConnectionOptions uRLConnectionOptions0 = URLConnectionOptions.DEFAULT;
      FileLocator fileLocator0 = mock(FileLocator.class, new ViolatedAssumptionAnswer());
      doReturn(""0pK5g=XD5]ttWE7"").when(fileLocator0).getBasePath();
      doReturn(""Z!BE^0r!KFFvsoR()"").when(fileLocator0).getEncoding();
      doReturn(""/"").when(fileLocator0).getFileName();
      doReturn((FileSystem) null).when(fileLocator0).getFileSystem();
      doReturn(basePathLocationStrategy0).when(fileLocator0).getLocationStrategy();
      doReturn((URL) null).when(fileLocator0).getSourceURL();
      doReturn(uRLConnectionOptions0).when(fileLocator0).getURLConnectionOptions();
      FileLocator.FileLocatorBuilder fileLocator_FileLocatorBuilder0 = new FileLocator.FileLocatorBuilder(fileLocator0);
      FileLocator fileLocator1 = new FileLocator(fileLocator_FileLocatorBuilder0);
      URL uRL0 = basePathLocationStrategy0.locate((FileSystem) null, fileLocator1);
}"
904,"    public URL locate(final FileSystem fileSystem, final FileLocator locator) {
        if (StringUtils.isNotEmpty(locator.getFileName())) {
            final File file = FileLocatorUtils.constructFile(locator.getBasePath(), locator.getFileName());
            if (file.isFile()) {
                return FileLocatorUtils.convertFileToURL(file);
            }
        }

        return null;
    }","  public void test2()  throws Throwable  {
      BasePathLocationStrategy basePathLocationStrategy0 = new BasePathLocationStrategy();
      FileLocator fileLocator0 = mock(FileLocator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(fileLocator0).getBasePath();
      doReturn((String) null).when(fileLocator0).getEncoding();
      doReturn((String) null).when(fileLocator0).getFileName();
      doReturn((FileSystem) null).when(fileLocator0).getFileSystem();
      doReturn((FileLocationStrategy) null).when(fileLocator0).getLocationStrategy();
      doReturn((URL) null).when(fileLocator0).getSourceURL();
      doReturn((URLConnectionOptions) null).when(fileLocator0).getURLConnectionOptions();
      FileLocator.FileLocatorBuilder fileLocator_FileLocatorBuilder0 = new FileLocator.FileLocatorBuilder(fileLocator0);
      fileLocator_FileLocatorBuilder0.fileName(""[Q5dG15#Nj{>"");
      FileLocator fileLocator1 = new FileLocator(fileLocator_FileLocatorBuilder0);
      URL uRL0 = basePathLocationStrategy0.locate((FileSystem) null, fileLocator1);
}"
905,"    public URL locate(final FileSystem fileSystem, final FileLocator locator) {
        if (StringUtils.isNotEmpty(locator.getFileName())) {
            final File file = FileLocatorUtils.constructFile(locator.getBasePath(), locator.getFileName());
            if (file.isFile()) {
                return FileLocatorUtils.convertFileToURL(file);
            }
        }

        return null;
    }","  public void test3()  throws Throwable  {
      BasePathLocationStrategy basePathLocationStrategy0 = new BasePathLocationStrategy();
      FileLocator fileLocator0 = mock(FileLocator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(fileLocator0).getFileName();
      VFSFileSystem vFSFileSystem0 = new VFSFileSystem();
      URL uRL0 = basePathLocationStrategy0.locate(vFSFileSystem0, fileLocator0);
}"
906,"    public boolean equals(final Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof URLConnectionOptions)) {
            return false;
        }
        final URLConnectionOptions other = (URLConnectionOptions) obj;
        return allowUserInteraction == other.allowUserInteraction && connectTimeoutMillis == other.connectTimeoutMillis
            && readTimeoutMillis == other.readTimeoutMillis && useCaches == other.useCaches;
    }","  public void test0()  throws Throwable  {
      URLConnectionOptions uRLConnectionOptions0 = new URLConnectionOptions();
      URLConnectionOptions uRLConnectionOptions1 = URLConnectionOptions.DEFAULT;
      boolean boolean0 = uRLConnectionOptions0.equals(uRLConnectionOptions1);
}"
907,"    public int getReadTimeoutMillis() {
        return readTimeoutMillis;
    }","  public void test1()  throws Throwable  {
      URLConnectionOptions uRLConnectionOptions0 = URLConnectionOptions.DEFAULT;
      uRLConnectionOptions0.setReadTimeoutMillis(29);
      uRLConnectionOptions0.setUseCaches(true);
}"
908,"    public int getConnectTimeoutMillis() {
        return connectTimeoutMillis;
    }","  public void test2()  throws Throwable  {
      URLConnectionOptions uRLConnectionOptions0 = URLConnectionOptions.DEFAULT;
      uRLConnectionOptions0.setConnectTimeoutMillis(1801);
      uRLConnectionOptions0.setUseCaches(true);
}"
909,"    public boolean equals(final Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof URLConnectionOptions)) {
            return false;
        }
        final URLConnectionOptions other = (URLConnectionOptions) obj;
        return allowUserInteraction == other.allowUserInteraction && connectTimeoutMillis == other.connectTimeoutMillis
            && readTimeoutMillis == other.readTimeoutMillis && useCaches == other.useCaches;
    }","  public void test3()  throws Throwable  {
      URLConnectionOptions uRLConnectionOptions0 = new URLConnectionOptions();
      URLConnectionOptions uRLConnectionOptions1 = uRLConnectionOptions0.DEFAULT.setReadTimeoutMillis(0);
}"
910,"    public int getConnectTimeoutMillis() {
        return connectTimeoutMillis;
    }","  public void test4()  throws Throwable  {
      URLConnectionOptions uRLConnectionOptions0 = URLConnectionOptions.DEFAULT;
      URLConnectionOptions uRLConnectionOptions1 = uRLConnectionOptions0.setConnectTimeoutMillis((-3874));
      uRLConnectionOptions1.setReadTimeoutMillis((-3874));
}"
911,"    public int getReadTimeoutMillis() {
        return readTimeoutMillis;
    }","  public void test5()  throws Throwable  {
      URLConnectionOptions uRLConnectionOptions0 = URLConnectionOptions.DEFAULT;
      URLConnectionOptions uRLConnectionOptions1 = uRLConnectionOptions0.setConnectTimeoutMillis((-3874));
      uRLConnectionOptions1.setReadTimeoutMillis((-3874));
}"
912,"    public int getReadTimeoutMillis() {
        return readTimeoutMillis;
    }","  public void test6()  throws Throwable  {
      URLConnectionOptions uRLConnectionOptions0 = URLConnectionOptions.DEFAULT;
      URLConnectionOptions uRLConnectionOptions1 = new URLConnectionOptions(uRLConnectionOptions0);
      uRLConnectionOptions0.setReadTimeoutMillis(3145);
}"
913,"    public boolean getAllowUserInteraction() {
        return allowUserInteraction;
    }","  public void test7()  throws Throwable  {
      URLConnectionOptions uRLConnectionOptions0 = URLConnectionOptions.DEFAULT;
      URLConnectionOptions uRLConnectionOptions1 = uRLConnectionOptions0.setAllowUserInteraction(true);
      uRLConnectionOptions1.DEFAULT.setUseCaches(true);
}"
914,"    public boolean getUseCaches() {
        return useCaches;
    }","  public void test8()  throws Throwable  {
      URLConnectionOptions uRLConnectionOptions0 = new URLConnectionOptions();
}"
915,"    public boolean getUseCaches() {
        return useCaches;
    }","  public void test9()  throws Throwable  {
      URLConnectionOptions uRLConnectionOptions0 = new URLConnectionOptions();
      uRLConnectionOptions0.setUseCaches(false);
      FileObject fileObject0 = mock(FileObject.class, new ViolatedAssumptionAnswer());
      doReturn((FileContent) null).when(fileObject0).getContent();
      VfsComponentContext vfsComponentContext0 = mock(VfsComponentContext.class, new ViolatedAssumptionAnswer());
      doReturn(fileObject0).when(vfsComponentContext0).resolveFile(anyString() , any(org.apache.commons.vfs2.FileSystemOptions.class));
      DefaultURLStreamHandler defaultURLStreamHandler0 = new DefaultURLStreamHandler(vfsComponentContext0);
      URL uRL0 = MockURL.URL(""URLConnectionOptions [allowUserInteraction=false, connectTimeoutMillis=0, readTimeoutMillis=0, useCaches=false]"", (String) null, 1511, ""ZP"", (URLStreamHandler) defaultURLStreamHandler0);
      uRLConnectionOptions0.openConnection(uRL0);
}"
916,"    public int getReadTimeoutMillis() {
        return readTimeoutMillis;
    }","  public void test10()  throws Throwable  {
      URLConnectionOptions uRLConnectionOptions0 = URLConnectionOptions.DEFAULT;
      FileObject fileObject0 = mock(FileObject.class, new ViolatedAssumptionAnswer());
      doReturn((FileContent) null).when(fileObject0).getContent();
      VfsComponentContext vfsComponentContext0 = mock(VfsComponentContext.class, new ViolatedAssumptionAnswer());
      doReturn(fileObject0).when(vfsComponentContext0).resolveFile(anyString() , any(org.apache.commons.vfs2.FileSystemOptions.class));
      DefaultURLStreamHandler defaultURLStreamHandler0 = new DefaultURLStreamHandler(vfsComponentContext0);
      URL uRL0 = MockURL.URL("""", ""W4"", 1667, ""W4"", (URLStreamHandler) defaultURLStreamHandler0);
      uRLConnectionOptions0.setReadTimeoutMillis(29);
      uRLConnectionOptions0.openConnection(uRL0);
}"
917,"    public boolean getUseCaches() {
        return useCaches;
    }","  public void test11()  throws Throwable  {
      URLConnectionOptions uRLConnectionOptions0 = new URLConnectionOptions();
      FileContent fileContent0 = mock(FileContent.class, new ViolatedAssumptionAnswer());
      FileObject fileObject0 = mock(FileObject.class, new ViolatedAssumptionAnswer());
      doReturn(fileContent0).when(fileObject0).getContent();
      VfsComponentContext vfsComponentContext0 = mock(VfsComponentContext.class, new ViolatedAssumptionAnswer());
      doReturn(fileObject0).when(vfsComponentContext0).resolveFile(anyString() , any(org.apache.commons.vfs2.FileSystemOptions.class));
      DefaultURLStreamHandler defaultURLStreamHandler0 = new DefaultURLStreamHandler(vfsComponentContext0);
      URL uRL0 = MockURL.URL(""m.~kd1tnul@,+"", "".app.log"", 0, """", (URLStreamHandler) defaultURLStreamHandler0);
      URLConnection uRLConnection0 = uRLConnectionOptions0.DEFAULT.openConnection(uRL0);
}"
918,"    public URLConnection openConnection(final URL url) throws IOException {
        return apply(url.openConnection());
    }","  public void test12()  throws Throwable  {
      URLConnectionOptions uRLConnectionOptions0 = new URLConnectionOptions();
      FileContent fileContent0 = mock(FileContent.class, new ViolatedAssumptionAnswer());
      FileObject fileObject0 = mock(FileObject.class, new ViolatedAssumptionAnswer());
      doReturn(fileContent0).when(fileObject0).getContent();
      VfsComponentContext vfsComponentContext0 = mock(VfsComponentContext.class, new ViolatedAssumptionAnswer());
      doReturn(fileObject0).when(vfsComponentContext0).resolveFile(anyString() , any(org.apache.commons.vfs2.FileSystemOptions.class));
      DefaultURLStreamHandler defaultURLStreamHandler0 = new DefaultURLStreamHandler(vfsComponentContext0);
      URL uRL0 = MockURL.URL(""m.~kd1tnul@,+"", "".app.log"", 0, """", (URLStreamHandler) defaultURLStreamHandler0);
      URLConnection uRLConnection0 = uRLConnectionOptions0.DEFAULT.openConnection(uRL0);
}"
919,"    public URLConnection openConnection(final URL url) throws IOException {
        return apply(url.openConnection());
    }","  public void test13()  throws Throwable  {
      URLConnectionOptions uRLConnectionOptions0 = new URLConnectionOptions();
      FileContent fileContent0 = mock(FileContent.class, new ViolatedAssumptionAnswer());
      FileObject fileObject0 = mock(FileObject.class, new ViolatedAssumptionAnswer());
      doReturn(fileContent0).when(fileObject0).getContent();
      VfsComponentContext vfsComponentContext0 = mock(VfsComponentContext.class, new ViolatedAssumptionAnswer());
      doReturn(fileObject0).when(vfsComponentContext0).resolveFile(anyString() , any(org.apache.commons.vfs2.FileSystemOptions.class));
      DefaultURLStreamHandler defaultURLStreamHandler0 = new DefaultURLStreamHandler(vfsComponentContext0);
      URL uRL0 = MockURL.URL(""m.~kd1tnul@,+"", "".app.log"", 0, """", (URLStreamHandler) defaultURLStreamHandler0);
      URLConnection uRLConnection0 = uRLConnectionOptions0.DEFAULT.openConnection(uRL0);
}"
920,"    public int getReadTimeoutMillis() {
        return readTimeoutMillis;
    }","  public void test14()  throws Throwable  {
      URLConnectionOptions uRLConnectionOptions0 = URLConnectionOptions.DEFAULT;
      URLConnectionOptions uRLConnectionOptions1 = uRLConnectionOptions0.setReadTimeoutMillis(3);
      int int0 = uRLConnectionOptions1.getReadTimeoutMillis();
}"
921,"    public int getReadTimeoutMillis() {
        return readTimeoutMillis;
    }","  public void test15()  throws Throwable  {
      URLConnectionOptions uRLConnectionOptions0 = URLConnectionOptions.DEFAULT;
      uRLConnectionOptions0.setReadTimeoutMillis((-3874));
      int int0 = uRLConnectionOptions0.getReadTimeoutMillis();
}"
922,"    public int getConnectTimeoutMillis() {
        return connectTimeoutMillis;
    }","  public void test16()  throws Throwable  {
      URLConnectionOptions uRLConnectionOptions0 = URLConnectionOptions.DEFAULT;
      URLConnectionOptions uRLConnectionOptions1 = uRLConnectionOptions0.setConnectTimeoutMillis(1801);
      int int0 = uRLConnectionOptions1.getConnectTimeoutMillis();
}"
923,"    public boolean getUseCaches() {
        return useCaches;
    }","  public void test17()  throws Throwable  {
      URLConnectionOptions uRLConnectionOptions0 = new URLConnectionOptions();
      URLConnectionOptions uRLConnectionOptions1 = uRLConnectionOptions0.DEFAULT.setConnectTimeoutMillis((-2078));
      int int0 = uRLConnectionOptions1.getConnectTimeoutMillis();
}"
924,"    public int getConnectTimeoutMillis() {
        return connectTimeoutMillis;
    }","  public void test18()  throws Throwable  {
      URLConnectionOptions uRLConnectionOptions0 = new URLConnectionOptions();
      URLConnectionOptions uRLConnectionOptions1 = uRLConnectionOptions0.DEFAULT.setConnectTimeoutMillis((-2078));
      int int0 = uRLConnectionOptions1.getConnectTimeoutMillis();
}"
925,"    public boolean getAllowUserInteraction() {
        return allowUserInteraction;
    }","  public void test19()  throws Throwable  {
      URLConnectionOptions uRLConnectionOptions0 = URLConnectionOptions.DEFAULT;
      boolean boolean0 = uRLConnectionOptions0.getAllowUserInteraction();
}"
926,"    public URLConnection apply(final URLConnection urlConnection) {
        urlConnection.setUseCaches(useCaches);
        urlConnection.setConnectTimeout(connectTimeoutMillis);
        urlConnection.setReadTimeout(readTimeoutMillis);
        return urlConnection;
    }","  public void test20()  throws Throwable  {
      URLConnectionOptions uRLConnectionOptions0 = new URLConnectionOptions();
      int int0 = 0;
      URLConnectionOptions uRLConnectionOptions1 = uRLConnectionOptions0.DEFAULT.setConnectTimeoutMillis(0);
      URLConnectionOptions uRLConnectionOptions2 = uRLConnectionOptions1.DEFAULT.setAllowUserInteraction(false);
      uRLConnectionOptions2.DEFAULT.setAllowUserInteraction(true);
      FileContent fileContent0 = mock(FileContent.class, new ViolatedAssumptionAnswer());
      FileObject fileObject0 = mock(FileObject.class, new ViolatedAssumptionAnswer());
      doReturn((FileName) null).when(fileObject0).getName();
      FileObject fileObject1 = mock(FileObject.class, new ViolatedAssumptionAnswer());
      doReturn(fileContent0).when(fileObject1).getContent();
      FileObject fileObject2 = mock(FileObject.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(fileObject2).isFile();
      doReturn(fileObject0).when(fileObject2).resolveFile(anyString());
      VfsComponentContext vfsComponentContext0 = mock(VfsComponentContext.class, new ViolatedAssumptionAnswer());
      doReturn(fileObject1, fileObject2).when(vfsComponentContext0).resolveFile(anyString() , any(org.apache.commons.vfs2.FileSystemOptions.class));
      FileSystemOptions fileSystemOptions0 = new FileSystemOptions();
      DefaultURLStreamHandler defaultURLStreamHandler0 = new DefaultURLStreamHandler(vfsComponentContext0, fileSystemOptions0);
      URL uRL0 = MockURL.URL(""org.apache.commons.io.filefilter.AgeFileFilter"", ""org.apache.commons.io.filefilter.AgeFileFilter"", 0, ""org.apache.commons.io.filefilter.AgeFileFilter"", (URLStreamHandler) defaultURLStreamHandler0);
      URLConnection uRLConnection0 = MockURL.openConnection(uRL0);
      uRLConnectionOptions2.apply(uRLConnection0);
      try { 
        MockURL.URL(uRL0, ""org.apache.commons.io.filefilter.AgeFileFilter"", (URLStreamHandler) defaultURLStreamHandler0);
        fail(""Expecting exception: MalformedURLException"");
      } catch(MalformedURLException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.net.URL"", e);
      }
  }"
927,"    public URLConnection apply(final URLConnection urlConnection) {
        urlConnection.setUseCaches(useCaches);
        urlConnection.setConnectTimeout(connectTimeoutMillis);
        urlConnection.setReadTimeout(readTimeoutMillis);
        return urlConnection;
    }","  public void test21()  throws Throwable  {
      URLConnectionOptions uRLConnectionOptions0 = new URLConnectionOptions();
      FileContent fileContent0 = mock(FileContent.class, new ViolatedAssumptionAnswer());
      FileObject fileObject0 = mock(FileObject.class, new ViolatedAssumptionAnswer());
      doReturn(fileContent0).when(fileObject0).getContent();
      VfsComponentContext vfsComponentContext0 = mock(VfsComponentContext.class, new ViolatedAssumptionAnswer());
      doReturn(fileObject0).when(vfsComponentContext0).resolveFile(anyString() , any(org.apache.commons.vfs2.FileSystemOptions.class));
      FileSystemOptions fileSystemOptions0 = new FileSystemOptions();
      DefaultURLStreamHandler defaultURLStreamHandler0 = new DefaultURLStreamHandler(vfsComponentContext0, fileSystemOptions0);
      URL uRL0 = MockURL.URL(""org.apache.commons.io.filefilter.AgeFileFilter"", ""org.apache.commons.io.filefilter.AgeFileFilter"", 0, ""org.apache.commons.io.filefilter.AgeFileFilter"", (URLStreamHandler) defaultURLStreamHandler0);
      URLConnection uRLConnection0 = MockURL.openConnection(uRL0);
      URLConnection uRLConnection1 = uRLConnectionOptions0.apply(uRLConnection0);
}"
928,"    public boolean getUseCaches() {
        return useCaches;
    }","  public void test22()  throws Throwable  {
      URLConnectionOptions uRLConnectionOptions0 = new URLConnectionOptions();
      FileContent fileContent0 = mock(FileContent.class, new ViolatedAssumptionAnswer());
      FileObject fileObject0 = mock(FileObject.class, new ViolatedAssumptionAnswer());
      doReturn(fileContent0).when(fileObject0).getContent();
      VfsComponentContext vfsComponentContext0 = mock(VfsComponentContext.class, new ViolatedAssumptionAnswer());
      doReturn(fileObject0).when(vfsComponentContext0).resolveFile(anyString() , any(org.apache.commons.vfs2.FileSystemOptions.class));
      FileSystemOptions fileSystemOptions0 = new FileSystemOptions();
      DefaultURLStreamHandler defaultURLStreamHandler0 = new DefaultURLStreamHandler(vfsComponentContext0, fileSystemOptions0);
      URL uRL0 = MockURL.URL(""org.apache.commons.io.filefilter.AgeFileFilter"", ""org.apache.commons.io.filefilter.AgeFileFilter"", 0, ""org.apache.commons.io.filefilter.AgeFileFilter"", (URLStreamHandler) defaultURLStreamHandler0);
      URLConnection uRLConnection0 = MockURL.openConnection(uRL0);
      URLConnection uRLConnection1 = uRLConnectionOptions0.apply(uRLConnection0);
}"
929,"    public URLConnection apply(final URLConnection urlConnection) {
        urlConnection.setUseCaches(useCaches);
        urlConnection.setConnectTimeout(connectTimeoutMillis);
        urlConnection.setReadTimeout(readTimeoutMillis);
        return urlConnection;
    }","  public void test23()  throws Throwable  {
      URLConnectionOptions uRLConnectionOptions0 = new URLConnectionOptions();
      FileContent fileContent0 = mock(FileContent.class, new ViolatedAssumptionAnswer());
      FileObject fileObject0 = mock(FileObject.class, new ViolatedAssumptionAnswer());
      doReturn(fileContent0).when(fileObject0).getContent();
      VfsComponentContext vfsComponentContext0 = mock(VfsComponentContext.class, new ViolatedAssumptionAnswer());
      doReturn(fileObject0).when(vfsComponentContext0).resolveFile(anyString() , any(org.apache.commons.vfs2.FileSystemOptions.class));
      FileSystemOptions fileSystemOptions0 = new FileSystemOptions();
      DefaultURLStreamHandler defaultURLStreamHandler0 = new DefaultURLStreamHandler(vfsComponentContext0, fileSystemOptions0);
      URL uRL0 = MockURL.URL(""org.apache.commons.io.filefilter.AgeFileFilter"", ""org.apache.commons.io.filefilter.AgeFileFilter"", 0, ""org.apache.commons.io.filefilter.AgeFileFilter"", (URLStreamHandler) defaultURLStreamHandler0);
      URLConnection uRLConnection0 = MockURL.openConnection(uRL0);
      URLConnection uRLConnection1 = uRLConnectionOptions0.apply(uRLConnection0);
}"
930,"    public URLConnection openConnection(final URL url) throws IOException {
        return apply(url.openConnection());
    }","  public void test24()  throws Throwable  {
      URLConnectionOptions uRLConnectionOptions0 = URLConnectionOptions.DEFAULT;
      URL uRL0 = MockURL.getFileExample();
      // Undeclared exception!
      try { 
        uRLConnectionOptions0.openConnection(uRL0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.configuration2.io.URLConnectionOptions"", e);
      }
  }"
931,"    public URLConnection openConnection(final URL url) throws IOException {
        return apply(url.openConnection());
    }","  public void test25()  throws Throwable  {
      URLConnectionOptions uRLConnectionOptions0 = URLConnectionOptions.DEFAULT;
      FileObject fileObject0 = mock(FileObject.class, new ViolatedAssumptionAnswer());
      doReturn((FileContent) null).when(fileObject0).getContent();
      VfsComponentContext vfsComponentContext0 = mock(VfsComponentContext.class, new ViolatedAssumptionAnswer());
      doReturn(fileObject0).when(vfsComponentContext0).resolveFile(anyString() , any(org.apache.commons.vfs2.FileSystemOptions.class));
      DefaultURLStreamHandler defaultURLStreamHandler0 = new DefaultURLStreamHandler(vfsComponentContext0);
      URL uRL0 = MockURL.URL("""", ""W4"", 1667, ""W4"", (URLStreamHandler) defaultURLStreamHandler0);
      URLConnection uRLConnection0 = uRLConnectionOptions0.DEFAULT.openConnection(uRL0);
}"
932,"    public URLConnection openConnection(final URL url) throws IOException {
        return apply(url.openConnection());
    }","  public void test26()  throws Throwable  {
      URLConnectionOptions uRLConnectionOptions0 = URLConnectionOptions.DEFAULT;
      FileObject fileObject0 = mock(FileObject.class, new ViolatedAssumptionAnswer());
      doReturn((FileContent) null).when(fileObject0).getContent();
      VfsComponentContext vfsComponentContext0 = mock(VfsComponentContext.class, new ViolatedAssumptionAnswer());
      doReturn(fileObject0).when(vfsComponentContext0).resolveFile(anyString() , any(org.apache.commons.vfs2.FileSystemOptions.class));
      DefaultURLStreamHandler defaultURLStreamHandler0 = new DefaultURLStreamHandler(vfsComponentContext0);
      URL uRL0 = MockURL.URL("""", ""W4"", 1667, ""W4"", (URLStreamHandler) defaultURLStreamHandler0);
      URLConnection uRLConnection0 = uRLConnectionOptions0.DEFAULT.openConnection(uRL0);
}"
933,"    public URLConnection apply(final URLConnection urlConnection) {
        urlConnection.setUseCaches(useCaches);
        urlConnection.setConnectTimeout(connectTimeoutMillis);
        urlConnection.setReadTimeout(readTimeoutMillis);
        return urlConnection;
    }","  public void test27()  throws Throwable  {
      URLConnectionOptions uRLConnectionOptions0 = URLConnectionOptions.DEFAULT;
      URLConnection uRLConnection0 = null;
      // Undeclared exception!
      try { 
        uRLConnectionOptions0.apply(uRLConnection0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.configuration2.io.URLConnectionOptions"", e);
      }
  }"
934,"    public URLConnection apply(final URLConnection urlConnection) {
        urlConnection.setUseCaches(useCaches);
        urlConnection.setConnectTimeout(connectTimeoutMillis);
        urlConnection.setReadTimeout(readTimeoutMillis);
        return urlConnection;
    }","  public void test28()  throws Throwable  {
      URLConnectionOptions uRLConnectionOptions0 = URLConnectionOptions.DEFAULT;
      URL uRL0 = MockURL.getHttpExample();
      URLConnection uRLConnection0 = uRLConnectionOptions0.openConnection(uRL0);
      uRLConnectionOptions0.setConnectTimeoutMillis((-3874));
      // Undeclared exception!
      try { 
        uRLConnectionOptions0.apply(uRLConnection0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // timeout can not be negative
         //
         verifyException(""java.net.URLConnection"", e);
      }
  }"
935,"    public URLConnectionOptions() {
        // Defaults initialized in declarations.
    }","  public void test29()  throws Throwable  {
      URLConnectionOptions uRLConnectionOptions0 = null;
      try {
        uRLConnectionOptions0 = new URLConnectionOptions((URLConnectionOptions) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.configuration2.io.URLConnectionOptions"", e);
      }
  }"
936,"    public boolean getAllowUserInteraction() {
        return allowUserInteraction;
    }","  public void test30()  throws Throwable  {
      URLConnectionOptions uRLConnectionOptions0 = URLConnectionOptions.DEFAULT;
      URLConnectionOptions uRLConnectionOptions1 = new URLConnectionOptions(uRLConnectionOptions0);
}"
937,"    public boolean equals(final Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof URLConnectionOptions)) {
            return false;
        }
        final URLConnectionOptions other = (URLConnectionOptions) obj;
        return allowUserInteraction == other.allowUserInteraction && connectTimeoutMillis == other.connectTimeoutMillis
            && readTimeoutMillis == other.readTimeoutMillis && useCaches == other.useCaches;
    }","  public void test31()  throws Throwable  {
      URLConnectionOptions uRLConnectionOptions0 = URLConnectionOptions.DEFAULT;
      URLConnectionOptions uRLConnectionOptions1 = new URLConnectionOptions(uRLConnectionOptions0);
      uRLConnectionOptions1.DEFAULT.setAllowUserInteraction(true);
      boolean boolean0 = uRLConnectionOptions0.equals(uRLConnectionOptions1);
}"
938,"    public boolean getUseCaches() {
        return useCaches;
    }","  public void test32()  throws Throwable  {
      URLConnectionOptions uRLConnectionOptions0 = URLConnectionOptions.DEFAULT;
      boolean boolean0 = uRLConnectionOptions0.getUseCaches();
}"
939,"    public int getConnectTimeoutMillis() {
        return connectTimeoutMillis;
    }","  public void test33()  throws Throwable  {
      URLConnectionOptions uRLConnectionOptions0 = URLConnectionOptions.DEFAULT;
      int int0 = uRLConnectionOptions0.getConnectTimeoutMillis();
}"
940,"    public int getReadTimeoutMillis() {
        return readTimeoutMillis;
    }","  public void test34()  throws Throwable  {
      URLConnectionOptions uRLConnectionOptions0 = new URLConnectionOptions();
      URLConnectionOptions uRLConnectionOptions1 = uRLConnectionOptions0.DEFAULT.setReadTimeoutMillis(2270);
      boolean boolean0 = uRLConnectionOptions0.equals(uRLConnectionOptions1);
}"
941,"    public boolean equals(final Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof URLConnectionOptions)) {
            return false;
        }
        final URLConnectionOptions other = (URLConnectionOptions) obj;
        return allowUserInteraction == other.allowUserInteraction && connectTimeoutMillis == other.connectTimeoutMillis
            && readTimeoutMillis == other.readTimeoutMillis && useCaches == other.useCaches;
    }","  public void test35()  throws Throwable  {
      URLConnectionOptions uRLConnectionOptions0 = new URLConnectionOptions();
      URLConnectionOptions uRLConnectionOptions1 = uRLConnectionOptions0.DEFAULT.setReadTimeoutMillis(2270);
      boolean boolean0 = uRLConnectionOptions0.equals(uRLConnectionOptions1);
}"
942,"    public boolean getUseCaches() {
        return useCaches;
    }","  public void test36()  throws Throwable  {
      URLConnectionOptions uRLConnectionOptions0 = new URLConnectionOptions();
      URLConnectionOptions uRLConnectionOptions1 = uRLConnectionOptions0.DEFAULT.setReadTimeoutMillis(2270);
      boolean boolean0 = uRLConnectionOptions0.equals(uRLConnectionOptions1);
}"
943,"    public boolean equals(final Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof URLConnectionOptions)) {
            return false;
        }
        final URLConnectionOptions other = (URLConnectionOptions) obj;
        return allowUserInteraction == other.allowUserInteraction && connectTimeoutMillis == other.connectTimeoutMillis
            && readTimeoutMillis == other.readTimeoutMillis && useCaches == other.useCaches;
    }","  public void test37()  throws Throwable  {
      URLConnectionOptions uRLConnectionOptions0 = new URLConnectionOptions();
      URLConnectionOptions uRLConnectionOptions1 = uRLConnectionOptions0.DEFAULT.setReadTimeoutMillis(2270);
      boolean boolean0 = uRLConnectionOptions0.equals(uRLConnectionOptions1);
}"
944,"    public int getReadTimeoutMillis() {
        return readTimeoutMillis;
    }","  public void test38()  throws Throwable  {
      URLConnectionOptions uRLConnectionOptions0 = new URLConnectionOptions();
      URLConnectionOptions uRLConnectionOptions1 = uRLConnectionOptions0.DEFAULT.setReadTimeoutMillis((-14));
      boolean boolean0 = uRLConnectionOptions0.equals(uRLConnectionOptions1);
}"
945,"    public boolean equals(final Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof URLConnectionOptions)) {
            return false;
        }
        final URLConnectionOptions other = (URLConnectionOptions) obj;
        return allowUserInteraction == other.allowUserInteraction && connectTimeoutMillis == other.connectTimeoutMillis
            && readTimeoutMillis == other.readTimeoutMillis && useCaches == other.useCaches;
    }","  public void test39()  throws Throwable  {
      URLConnectionOptions uRLConnectionOptions0 = new URLConnectionOptions();
      URLConnectionOptions uRLConnectionOptions1 = uRLConnectionOptions0.DEFAULT.setReadTimeoutMillis((-14));
      boolean boolean0 = uRLConnectionOptions0.equals(uRLConnectionOptions1);
}"
946,"    public boolean getUseCaches() {
        return useCaches;
    }","  public void test40()  throws Throwable  {
      URLConnectionOptions uRLConnectionOptions0 = new URLConnectionOptions();
      URLConnectionOptions uRLConnectionOptions1 = uRLConnectionOptions0.DEFAULT.setReadTimeoutMillis((-14));
      boolean boolean0 = uRLConnectionOptions0.equals(uRLConnectionOptions1);
}"
947,"    public boolean equals(final Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof URLConnectionOptions)) {
            return false;
        }
        final URLConnectionOptions other = (URLConnectionOptions) obj;
        return allowUserInteraction == other.allowUserInteraction && connectTimeoutMillis == other.connectTimeoutMillis
            && readTimeoutMillis == other.readTimeoutMillis && useCaches == other.useCaches;
    }","  public void test41()  throws Throwable  {
      URLConnectionOptions uRLConnectionOptions0 = new URLConnectionOptions();
      URLConnectionOptions uRLConnectionOptions1 = uRLConnectionOptions0.DEFAULT.setReadTimeoutMillis((-14));
      boolean boolean0 = uRLConnectionOptions0.equals(uRLConnectionOptions1);
}"
948,"    public boolean equals(final Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof URLConnectionOptions)) {
            return false;
        }
        final URLConnectionOptions other = (URLConnectionOptions) obj;
        return allowUserInteraction == other.allowUserInteraction && connectTimeoutMillis == other.connectTimeoutMillis
            && readTimeoutMillis == other.readTimeoutMillis && useCaches == other.useCaches;
    }","  public void test42()  throws Throwable  {
      URLConnectionOptions uRLConnectionOptions0 = URLConnectionOptions.DEFAULT;
      Object object0 = new Object();
      boolean boolean0 = uRLConnectionOptions0.equals(object0);
}"
949,"    public boolean equals(final Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof URLConnectionOptions)) {
            return false;
        }
        final URLConnectionOptions other = (URLConnectionOptions) obj;
        return allowUserInteraction == other.allowUserInteraction && connectTimeoutMillis == other.connectTimeoutMillis
            && readTimeoutMillis == other.readTimeoutMillis && useCaches == other.useCaches;
    }","  public void test43()  throws Throwable  {
      URLConnectionOptions uRLConnectionOptions0 = new URLConnectionOptions();
      boolean boolean0 = uRLConnectionOptions0.equals(uRLConnectionOptions0);
}"
950,"    public boolean getUseCaches() {
        return useCaches;
    }","  public void test44()  throws Throwable  {
      URLConnectionOptions uRLConnectionOptions0 = new URLConnectionOptions();
      boolean boolean0 = uRLConnectionOptions0.equals(uRLConnectionOptions0);
}"
951,"    public boolean equals(final Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof URLConnectionOptions)) {
            return false;
        }
        final URLConnectionOptions other = (URLConnectionOptions) obj;
        return allowUserInteraction == other.allowUserInteraction && connectTimeoutMillis == other.connectTimeoutMillis
            && readTimeoutMillis == other.readTimeoutMillis && useCaches == other.useCaches;
    }","  public void test45()  throws Throwable  {
      URLConnectionOptions uRLConnectionOptions0 = new URLConnectionOptions();
      URLConnectionOptions uRLConnectionOptions1 = uRLConnectionOptions0.DEFAULT.setReadTimeoutMillis(2270);
      boolean boolean0 = uRLConnectionOptions1.equals(uRLConnectionOptions0);
}"
952,"    public boolean getUseCaches() {
        return useCaches;
    }","  public void test46()  throws Throwable  {
      URLConnectionOptions uRLConnectionOptions0 = new URLConnectionOptions();
      URLConnectionOptions uRLConnectionOptions1 = uRLConnectionOptions0.DEFAULT.setReadTimeoutMillis(2270);
      boolean boolean0 = uRLConnectionOptions1.equals(uRLConnectionOptions0);
}"
953,"    public int getReadTimeoutMillis() {
        return readTimeoutMillis;
    }","  public void test47()  throws Throwable  {
      URLConnectionOptions uRLConnectionOptions0 = new URLConnectionOptions();
      URLConnectionOptions uRLConnectionOptions1 = uRLConnectionOptions0.DEFAULT.setReadTimeoutMillis(2270);
      boolean boolean0 = uRLConnectionOptions1.equals(uRLConnectionOptions0);
}"
954,"    public boolean equals(final Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof URLConnectionOptions)) {
            return false;
        }
        final URLConnectionOptions other = (URLConnectionOptions) obj;
        return allowUserInteraction == other.allowUserInteraction && connectTimeoutMillis == other.connectTimeoutMillis
            && readTimeoutMillis == other.readTimeoutMillis && useCaches == other.useCaches;
    }","  public void test48()  throws Throwable  {
      URLConnectionOptions uRLConnectionOptions0 = new URLConnectionOptions();
      URLConnectionOptions uRLConnectionOptions1 = uRLConnectionOptions0.DEFAULT.setReadTimeoutMillis(2270);
      boolean boolean0 = uRLConnectionOptions1.equals(uRLConnectionOptions0);
}"
955,"    public String toString() {
        return ""URLConnectionOptions [allowUserInteraction="" + allowUserInteraction + "", connectTimeoutMillis="" + connectTimeoutMillis + "", readTimeoutMillis=""
            + readTimeoutMillis + "", useCaches="" + useCaches + ""]"";
    }","  public void test49()  throws Throwable  {
      URLConnectionOptions uRLConnectionOptions0 = URLConnectionOptions.DEFAULT;
      String string0 = uRLConnectionOptions0.toString();
}"
956,"    public boolean getUseCaches() {
        return useCaches;
    }","  public void test50()  throws Throwable  {
      URLConnectionOptions uRLConnectionOptions0 = new URLConnectionOptions();
      uRLConnectionOptions0.DEFAULT.hashCode();
}"
957,"    public boolean equals(final Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof URLConnectionOptions)) {
            return false;
        }
        final URLConnectionOptions other = (URLConnectionOptions) obj;
        return allowUserInteraction == other.allowUserInteraction && connectTimeoutMillis == other.connectTimeoutMillis
            && readTimeoutMillis == other.readTimeoutMillis && useCaches == other.useCaches;
    }","  public void test51()  throws Throwable  {
      URLConnectionOptions uRLConnectionOptions0 = new URLConnectionOptions();
      uRLConnectionOptions0.setUseCaches(false);
      URLConnectionOptions uRLConnectionOptions1 = new URLConnectionOptions();
      boolean boolean0 = uRLConnectionOptions0.equals(uRLConnectionOptions1);
}"
958,"    public boolean getUseCaches() {
        return useCaches;
    }","  public void test52()  throws Throwable  {
      URLConnectionOptions uRLConnectionOptions0 = new URLConnectionOptions();
      uRLConnectionOptions0.setUseCaches(false);
      URLConnectionOptions uRLConnectionOptions1 = new URLConnectionOptions();
      boolean boolean0 = uRLConnectionOptions0.equals(uRLConnectionOptions1);
}"
959,"    public URL locateFromURL(final String basePath, final String fileName) {
        try {
            final URL url;
            if (basePath == null) {
                return new URL(fileName);
                // url = new URL(name);
            }
            final URL baseURL = new URL(basePath);
            url = new URL(baseURL, fileName);

            // check if the file exists
            try (final InputStream in = url.openStream()) {
                // nothing
                in.available();
            }
            return url;
        } catch (final IOException e) {
            if (getLogger().isDebugEnabled()) {
                getLogger().debug(""Could not locate file "" + fileName + "" at "" + basePath + "": "" + e.getMessage());
            }
            return null;
        }
    }","  public void test0()  throws Throwable  {
      DefaultFileSystem defaultFileSystem0 = new DefaultFileSystem();
      URL uRL0 = defaultFileSystem0.locateFromURL(""file:///media/FSE_USER/extradrive1/toga-eval-FSE_USER-2023/toga-eval/artifacts/commons-configuration2-2.8.0-src/"", (String) null);
}"
960,"    public String getPath(final File file, final URL url, final String basePath, final String fileName) {
        String path = null;
        // if resource was loaded from jar file may be null
        if (file != null) {
            path = file.getAbsolutePath();
        }

        // try to see if file was loaded from a jar
        if (path == null) {
            if (url != null) {
                path = url.getPath();
            } else {
                try {
                    path = getURL(basePath, fileName).getPath();
                } catch (final Exception e) {
                    // simply ignore it and return null
                    if (getLogger().isDebugEnabled()) {
                        getLogger().debug(String.format(""Could not determine URL for "" + ""basePath = %s, fileName = %s: %s"", basePath, fileName, e));
                    }
                }
            }
        }

        return path;
    }","  public void test1()  throws Throwable  {
      DefaultFileSystem defaultFileSystem0 = new DefaultFileSystem();
      String string0 = defaultFileSystem0.getPath((File) null, (URL) null, ""(?I _N8fL:.*Z"", ""vfs.impl/already-inited.error"");
}"
961,"    public String getPath(final File file, final URL url, final String basePath, final String fileName) {
        String path = null;
        // if resource was loaded from jar file may be null
        if (file != null) {
            path = file.getAbsolutePath();
        }

        // try to see if file was loaded from a jar
        if (path == null) {
            if (url != null) {
                path = url.getPath();
            } else {
                try {
                    path = getURL(basePath, fileName).getPath();
                } catch (final Exception e) {
                    // simply ignore it and return null
                    if (getLogger().isDebugEnabled()) {
                        getLogger().debug(String.format(""Could not determine URL for "" + ""basePath = %s, fileName = %s: %s"", basePath, fileName, e));
                    }
                }
            }
        }

        return path;
    }","  public void test2()  throws Throwable  {
      DefaultFileSystem defaultFileSystem0 = new DefaultFileSystem();
      String string0 = defaultFileSystem0.getPath((File) null, (URL) null, ""(?I _N8fL:.*Z"", ""vfs.impl/already-inited.error"");
}"
962,"    public String getFileName(final String path) {
        final URL url;
        try {
            url = getURL(null, path);
            return FileLocatorUtils.getFileName(url);
        } catch (final Exception e) {
            return null;
        }
    }","  public void test3()  throws Throwable  {
      DefaultFileSystem defaultFileSystem0 = new DefaultFileSystem();
      String string0 = defaultFileSystem0.getFileName((String) null);
}"
963,"    public URL locateFromURL(final String basePath, final String fileName) {
        try {
            final URL url;
            if (basePath == null) {
                return new URL(fileName);
                // url = new URL(name);
            }
            final URL baseURL = new URL(basePath);
            url = new URL(baseURL, fileName);

            // check if the file exists
            try (final InputStream in = url.openStream()) {
                // nothing
                in.available();
            }
            return url;
        } catch (final IOException e) {
            if (getLogger().isDebugEnabled()) {
                getLogger().debug(""Could not locate file "" + fileName + "" at "" + basePath + "": "" + e.getMessage());
            }
            return null;
        }
    }","  public void test4()  throws Throwable  {
      DefaultFileSystem defaultFileSystem0 = new DefaultFileSystem();
      URL uRL0 = defaultFileSystem0.locateFromURL((String) null, ""file:///media/FSE_USER/extradrive1/toga-eval-FSE_USER-2023/toga-eval/artifacts/commons-configuration2-2.8.0-src/"");
}"
964,"    public String getPath(final File file, final URL url, final String basePath, final String fileName) {
        String path = null;
        // if resource was loaded from jar file may be null
        if (file != null) {
            path = file.getAbsolutePath();
        }

        // try to see if file was loaded from a jar
        if (path == null) {
            if (url != null) {
                path = url.getPath();
            } else {
                try {
                    path = getURL(basePath, fileName).getPath();
                } catch (final Exception e) {
                    // simply ignore it and return null
                    if (getLogger().isDebugEnabled()) {
                        getLogger().debug(String.format(""Could not determine URL for "" + ""basePath = %s, fileName = %s: %s"", basePath, fileName, e));
                    }
                }
            }
        }

        return path;
    }","  public void test5()  throws Throwable  {
      DefaultFileSystem defaultFileSystem0 = new DefaultFileSystem();
      VfsComponentContext vfsComponentContext0 = mock(VfsComponentContext.class, new ViolatedAssumptionAnswer());
      DefaultURLStreamHandler defaultURLStreamHandler0 = new DefaultURLStreamHandler(vfsComponentContext0);
      URL uRL0 = MockURL.URL("""", ""MF"", 1, """", (URLStreamHandler) defaultURLStreamHandler0);
      String string0 = defaultFileSystem0.getPath((File) null, uRL0, """", ""MF"");
}"
965,"    public String getPath(final File file, final URL url, final String basePath, final String fileName) {
        String path = null;
        // if resource was loaded from jar file may be null
        if (file != null) {
            path = file.getAbsolutePath();
        }

        // try to see if file was loaded from a jar
        if (path == null) {
            if (url != null) {
                path = url.getPath();
            } else {
                try {
                    path = getURL(basePath, fileName).getPath();
                } catch (final Exception e) {
                    // simply ignore it and return null
                    if (getLogger().isDebugEnabled()) {
                        getLogger().debug(String.format(""Could not determine URL for "" + ""basePath = %s, fileName = %s: %s"", basePath, fileName, e));
                    }
                }
            }
        }

        return path;
    }","  public void test6()  throws Throwable  {
      DefaultFileSystem defaultFileSystem0 = new DefaultFileSystem();
      VfsComponentContext vfsComponentContext0 = mock(VfsComponentContext.class, new ViolatedAssumptionAnswer());
      DefaultURLStreamHandler defaultURLStreamHandler0 = new DefaultURLStreamHandler(vfsComponentContext0);
      URL uRL0 = MockURL.URL("""", ""MF"", 1, """", (URLStreamHandler) defaultURLStreamHandler0);
      String string0 = defaultFileSystem0.getPath((File) null, uRL0, """", ""MF"");
}"
966,"    public InputStream getInputStream(final URL url) throws ConfigurationException {
        return getInputStream(url, null);
    }","  public void test7()  throws Throwable  {
      FileContent fileContent0 = mock(FileContent.class, new ViolatedAssumptionAnswer());
      doReturn((InputStream) null).when(fileContent0).getInputStream();
      FileObject fileObject0 = mock(FileObject.class, new ViolatedAssumptionAnswer());
      doReturn(fileContent0).when(fileObject0).getContent();
      VfsComponentContext vfsComponentContext0 = mock(VfsComponentContext.class, new ViolatedAssumptionAnswer());
      doReturn(fileObject0).when(vfsComponentContext0).resolveFile(anyString() , any(org.apache.commons.vfs2.FileSystemOptions.class));
      FileSystemOptions fileSystemOptions0 = new FileSystemOptions();
      DefaultURLStreamHandler defaultURLStreamHandler0 = new DefaultURLStreamHandler(vfsComponentContext0, fileSystemOptions0);
      URL uRL0 = MockURL.URL(""q|"", ""q|"", 4727, ""b/+"", (URLStreamHandler) defaultURLStreamHandler0);
      DefaultFileSystem defaultFileSystem0 = new DefaultFileSystem();
      URLConnectionOptions uRLConnectionOptions0 = new URLConnectionOptions();
      InputStream inputStream0 = defaultFileSystem0.getInputStream(uRL0, uRLConnectionOptions0);
}"
967,"    public InputStream getInputStream(final URL url) throws ConfigurationException {
        return getInputStream(url, null);
    }","  public void test8()  throws Throwable  {
      DefaultFileSystem defaultFileSystem0 = new DefaultFileSystem();
      URL uRL0 = MockURL.getHttpExample();
      URLConnectionOptions uRLConnectionOptions0 = new URLConnectionOptions();
      EvoSuiteURL evoSuiteURL0 = new EvoSuiteURL(""http://www.someFakeButWellFormedURL.org/fooExample"");
      NetworkHandling.createRemoteTextFile(evoSuiteURL0, ""/fooExample"");
      InputStream inputStream0 = defaultFileSystem0.getInputStream(uRL0, uRLConnectionOptions0);
}"
968,"    public InputStream getInputStream(final URL url) throws ConfigurationException {
        return getInputStream(url, null);
    }","  public void test9()  throws Throwable  {
      DefaultFileSystem defaultFileSystem0 = new DefaultFileSystem();
      FileContent fileContent0 = mock(FileContent.class, new ViolatedAssumptionAnswer());
      doReturn((InputStream) null).when(fileContent0).getInputStream();
      FileObject fileObject0 = mock(FileObject.class, new ViolatedAssumptionAnswer());
      doReturn(fileContent0).when(fileObject0).getContent();
      VfsComponentContext vfsComponentContext0 = mock(VfsComponentContext.class, new ViolatedAssumptionAnswer());
      doReturn(fileObject0).when(vfsComponentContext0).resolveFile(anyString() , any(org.apache.commons.vfs2.FileSystemOptions.class));
      FileSystemOptions fileSystemOptions0 = new FileSystemOptions();
      DefaultURLStreamHandler defaultURLStreamHandler0 = new DefaultURLStreamHandler(vfsComponentContext0, fileSystemOptions0);
      URL uRL0 = MockURL.URL(""q|"", ""q|"", 4727, ""b/+"", (URLStreamHandler) defaultURLStreamHandler0);
      InputStream inputStream0 = defaultFileSystem0.getInputStream(uRL0);
}"
969,"    public InputStream getInputStream(final URL url) throws ConfigurationException {
        return getInputStream(url, null);
    }","  public void test10()  throws Throwable  {
      DefaultFileSystem defaultFileSystem0 = new DefaultFileSystem();
      URL uRL0 = MockURL.getHttpExample();
      EvoSuiteURL evoSuiteURL0 = new EvoSuiteURL(""http://www.someFakeButWellFormedURL.org/fooExample"");
      NetworkHandling.createRemoteTextFile(evoSuiteURL0, ""/fooExample"");
      InputStream inputStream0 = defaultFileSystem0.getInputStream(uRL0);
}"
970,"    public String getFileName(final String path) {
        final URL url;
        try {
            url = getURL(null, path);
            return FileLocatorUtils.getFileName(url);
        } catch (final Exception e) {
            return null;
        }
    }","  public void test11()  throws Throwable  {
      DefaultFileSystem defaultFileSystem0 = new DefaultFileSystem();
      URL uRL0 = defaultFileSystem0.getURL(""{%+Mv|LF,"", ""</body></html>"");
      defaultFileSystem0.getOutputStream(uRL0);
      String string0 = defaultFileSystem0.getFileName(""{%+Mv|LF,"");
}"
971,"    public String getBasePath(final String path) {
        final URL url;
        try {
            url = getURL(null, path);
            return FileLocatorUtils.getBasePath(url);
        } catch (final Exception e) {
            return null;
        }
    }","  public void test12()  throws Throwable  {
      DefaultFileSystem defaultFileSystem0 = new DefaultFileSystem();
      String string0 = defaultFileSystem0.getBasePath((String) null);
}"
972,"    public URL locateFromURL(final String basePath, final String fileName) {
        try {
            final URL url;
            if (basePath == null) {
                return new URL(fileName);
                // url = new URL(name);
            }
            final URL baseURL = new URL(basePath);
            url = new URL(baseURL, fileName);

            // check if the file exists
            try (final InputStream in = url.openStream()) {
                // nothing
                in.available();
            }
            return url;
        } catch (final IOException e) {
            if (getLogger().isDebugEnabled()) {
                getLogger().debug(""Could not locate file "" + fileName + "" at "" + basePath + "": "" + e.getMessage());
            }
            return null;
        }
    }","  public void test13()  throws Throwable  {
      DefaultFileSystem defaultFileSystem0 = new DefaultFileSystem();
      // Undeclared exception!
      try { 
        defaultFileSystem0.locateFromURL(""file:///media/FSE_USER/extradrive1/toga-eval-FSE_USER-2023/toga-eval/artifacts/commons-configuration2-2.8.0-src/"", ""file:///media/FSE_USER/extradrive1/toga-eval-FSE_USER-2023/toga-eval/artifacts/commons-configuration2-2.8.0-src/"");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.net.URL"", e);
      }
  }"
973,"    public URL locateFromURL(final String basePath, final String fileName) {
        try {
            final URL url;
            if (basePath == null) {
                return new URL(fileName);
                // url = new URL(name);
            }
            final URL baseURL = new URL(basePath);
            url = new URL(baseURL, fileName);

            // check if the file exists
            try (final InputStream in = url.openStream()) {
                // nothing
                in.available();
            }
            return url;
        } catch (final IOException e) {
            if (getLogger().isDebugEnabled()) {
                getLogger().debug(""Could not locate file "" + fileName + "" at "" + basePath + "": "" + e.getMessage());
            }
            return null;
        }
    }","  public void test14()  throws Throwable  {
      DefaultFileSystem defaultFileSystem0 = new DefaultFileSystem();
      Log4JLogger log4JLogger0 = new Log4JLogger();
      ConfigurationLogger configurationLogger0 = new ConfigurationLogger(log4JLogger0);
      defaultFileSystem0.setLogger(configurationLogger0);
      // Undeclared exception!
      try { 
        defaultFileSystem0.locateFromURL("""", """");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.log4j.CategoryKey"", e);
      }
  }"
974,"    public URL getURL(final String basePath, final String file) throws MalformedURLException {
        final File f = new File(file);
        // already absolute?
        if (f.isAbsolute()) {
            return FileLocatorUtils.toURL(f);
        }

        try {
            if (basePath == null) {
                return new URL(file);
            }
            final URL base = new URL(basePath);
            return new URL(base, file);
        } catch (final MalformedURLException uex) {
            return FileLocatorUtils.toURL(FileLocatorUtils.constructFile(basePath, file));
        }
    }","  public void test15()  throws Throwable  {
      DefaultFileSystem defaultFileSystem0 = new DefaultFileSystem();
      // Undeclared exception!
      try { 
        defaultFileSystem0.getURL((String) null, (String) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.io.File"", e);
      }
  }"
975,"    public String getPath(final File file, final URL url, final String basePath, final String fileName) {
        String path = null;
        // if resource was loaded from jar file may be null
        if (file != null) {
            path = file.getAbsolutePath();
        }

        // try to see if file was loaded from a jar
        if (path == null) {
            if (url != null) {
                path = url.getPath();
            } else {
                try {
                    path = getURL(basePath, fileName).getPath();
                } catch (final Exception e) {
                    // simply ignore it and return null
                    if (getLogger().isDebugEnabled()) {
                        getLogger().debug(String.format(""Could not determine URL for "" + ""basePath = %s, fileName = %s: %s"", basePath, fileName, e));
                    }
                }
            }
        }

        return path;
    }","  public void test16()  throws Throwable  {
      DefaultFileSystem defaultFileSystem0 = new DefaultFileSystem();
      ConfigurationLogger configurationLogger0 = new ConfigurationLogger();
      defaultFileSystem0.setLogger(configurationLogger0);
      // Undeclared exception!
      try { 
        defaultFileSystem0.getPath((File) null, (URL) null, ""file:///media/FSE_USER/extradrive1/toga-eval-FSE_USER-2023/toga-eval/artifacts/commons-configuration2-2.8.0-src/"", (String) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.configuration2.io.ConfigurationLogger"", e);
      }
  }"
976,"    public URL getURL(final String basePath, final String file) throws MalformedURLException {
        final File f = new File(file);
        // already absolute?
        if (f.isAbsolute()) {
            return FileLocatorUtils.toURL(f);
        }

        try {
            if (basePath == null) {
                return new URL(file);
            }
            final URL base = new URL(basePath);
            return new URL(base, file);
        } catch (final MalformedURLException uex) {
            return FileLocatorUtils.toURL(FileLocatorUtils.constructFile(basePath, file));
        }
    }","  public void test17()  throws Throwable  {
      DefaultFileSystem defaultFileSystem0 = new DefaultFileSystem();
      URL uRL0 = defaultFileSystem0.getURL((String) null, """");
}"
977,"    public InputStream getInputStream(final URL url) throws ConfigurationException {
        return getInputStream(url, null);
    }","  public void test18()  throws Throwable  {
      DefaultFileSystem defaultFileSystem0 = new DefaultFileSystem();
      URL uRL0 = defaultFileSystem0.getURL(""U}R6RP+x$3@!Q:xww-"", ""5?8s6"");
      try { 
        defaultFileSystem0.getInputStream(uRL0, (URLConnectionOptions) null);
        fail(""Expecting exception: Exception"");
      } catch(Exception e) {
         //
         // Unable to load the configuration from the URL file:/media/FSE_USER/extradrive1/toga-eval-FSE_USER-2023/toga-eval/artifacts/commons-configuration2-2.8.0-src/U%7DR6RP+x$3@!Q:xww-/5%3F8s6
         //
         verifyException(""org.apache.commons.configuration2.io.DefaultFileSystem"", e);
      }
  }"
978,"    public InputStream getInputStream(final URL url) throws ConfigurationException {
        return getInputStream(url, null);
    }","  public void test19()  throws Throwable  {
      DefaultFileSystem defaultFileSystem0 = new DefaultFileSystem();
      MockFile mockFile0 = new MockFile("""");
      URL uRL0 = mockFile0.toURL();
      URLConnectionOptions uRLConnectionOptions0 = new URLConnectionOptions();
      try { 
        defaultFileSystem0.getInputStream(uRL0, uRLConnectionOptions0);
        fail(""Expecting exception: Exception"");
      } catch(Exception e) {
         //
         // Cannot load a configuration from a directory
         //
         verifyException(""org.apache.commons.configuration2.io.DefaultFileSystem"", e);
      }
  }"
979,"    public OutputStream getOutputStream(final URL url) throws ConfigurationException {
        // file URLs have to be converted to Files since FileURLConnection is
        // read only (http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=4191800)
        final File file = FileLocatorUtils.fileFromURL(url);
        if (file != null) {
            return getOutputStream(file);
        }
        // for non file URLs save through an URLConnection
        OutputStream out;
        try {
            final URLConnection connection = url.openConnection();
            connection.setDoOutput(true);

            // use the PUT method for http URLs
            if (connection instanceof HttpURLConnection) {
                final HttpURLConnection conn = (HttpURLConnection) connection;
                conn.setRequestMethod(""PUT"");
            }

            out = connection.getOutputStream();

            // check the response code for http URLs and throw an exception if an error occured
            if (connection instanceof HttpURLConnection) {
                out = new HttpOutputStream(out, (HttpURLConnection) connection);
            }
            return out;
        } catch (final IOException e) {
            throw new ConfigurationException(""Could not save to URL "" + url, e);
        }
    }","  public void test20()  throws Throwable  {
      DefaultFileSystem defaultFileSystem0 = new DefaultFileSystem();
      URL uRL0 = defaultFileSystem0.getURL(""{%+M{dLen,"", ""</body></html>"");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(""{%+M{dLen,"");
      try { 
        defaultFileSystem0.getOutputStream(uRL0);
        fail(""Expecting exception: Exception"");
      } catch(Exception e) {
         //
         // Cannot create path: /media/FSE_USER/extradrive1/toga-eval-FSE_USER-2023/toga-eval/artifacts/commons-configuration2-2.8.0-src/{%+M{dLen,/</body><
         //
         verifyException(""org.apache.commons.configuration2.io.DefaultFileSystem"", e);
      }
  }"
980,"    public OutputStream getOutputStream(final URL url) throws ConfigurationException {
        // file URLs have to be converted to Files since FileURLConnection is
        // read only (http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=4191800)
        final File file = FileLocatorUtils.fileFromURL(url);
        if (file != null) {
            return getOutputStream(file);
        }
        // for non file URLs save through an URLConnection
        OutputStream out;
        try {
            final URLConnection connection = url.openConnection();
            connection.setDoOutput(true);

            // use the PUT method for http URLs
            if (connection instanceof HttpURLConnection) {
                final HttpURLConnection conn = (HttpURLConnection) connection;
                conn.setRequestMethod(""PUT"");
            }

            out = connection.getOutputStream();

            // check the response code for http URLs and throw an exception if an error occured
            if (connection instanceof HttpURLConnection) {
                out = new HttpOutputStream(out, (HttpURLConnection) connection);
            }
            return out;
        } catch (final IOException e) {
            throw new ConfigurationException(""Could not save to URL "" + url, e);
        }
    }","  public void test21()  throws Throwable  {
      DefaultFileSystem defaultFileSystem0 = new DefaultFileSystem();
      File file0 = MockFile.createTempFile(""(nY- "", """");
      MockFile mockFile0 = new MockFile(file0, ""ELFTYfYk&"");
      try { 
        defaultFileSystem0.getOutputStream((File) mockFile0);
        fail(""Expecting exception: Exception"");
      } catch(Exception e) {
         //
         // Unable to save to file /tmp/(nY- 0/ELFTYfYk&
         //
         verifyException(""org.apache.commons.configuration2.io.DefaultFileSystem"", e);
      }
  }"
981,"    public OutputStream getOutputStream(final URL url) throws ConfigurationException {
        // file URLs have to be converted to Files since FileURLConnection is
        // read only (http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=4191800)
        final File file = FileLocatorUtils.fileFromURL(url);
        if (file != null) {
            return getOutputStream(file);
        }
        // for non file URLs save through an URLConnection
        OutputStream out;
        try {
            final URLConnection connection = url.openConnection();
            connection.setDoOutput(true);

            // use the PUT method for http URLs
            if (connection instanceof HttpURLConnection) {
                final HttpURLConnection conn = (HttpURLConnection) connection;
                conn.setRequestMethod(""PUT"");
            }

            out = connection.getOutputStream();

            // check the response code for http URLs and throw an exception if an error occured
            if (connection instanceof HttpURLConnection) {
                out = new HttpOutputStream(out, (HttpURLConnection) connection);
            }
            return out;
        } catch (final IOException e) {
            throw new ConfigurationException(""Could not save to URL "" + url, e);
        }
    }","  public void test22()  throws Throwable  {
      DefaultFileSystem defaultFileSystem0 = new DefaultFileSystem();
      MockFile mockFile0 = new MockFile(""%7DS*%60(hZeP62TX9Wt%5D"");
      OutputStream outputStream0 = defaultFileSystem0.getOutputStream((File) mockFile0);
}"
982,"    public OutputStream getOutputStream(final URL url) throws ConfigurationException {
        // file URLs have to be converted to Files since FileURLConnection is
        // read only (http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=4191800)
        final File file = FileLocatorUtils.fileFromURL(url);
        if (file != null) {
            return getOutputStream(file);
        }
        // for non file URLs save through an URLConnection
        OutputStream out;
        try {
            final URLConnection connection = url.openConnection();
            connection.setDoOutput(true);

            // use the PUT method for http URLs
            if (connection instanceof HttpURLConnection) {
                final HttpURLConnection conn = (HttpURLConnection) connection;
                conn.setRequestMethod(""PUT"");
            }

            out = connection.getOutputStream();

            // check the response code for http URLs and throw an exception if an error occured
            if (connection instanceof HttpURLConnection) {
                out = new HttpOutputStream(out, (HttpURLConnection) connection);
            }
            return out;
        } catch (final IOException e) {
            throw new ConfigurationException(""Could not save to URL "" + url, e);
        }
    }","  public void test23()  throws Throwable  {
      DefaultFileSystem defaultFileSystem0 = new DefaultFileSystem();
      URL uRL0 = defaultFileSystem0.getURL(""{%+Mv|LF,"", ""</body></html>"");
      OutputStream outputStream0 = defaultFileSystem0.getOutputStream(uRL0);
      OutputStream outputStream1 = defaultFileSystem0.getOutputStream(uRL0);
}"
983,"    public OutputStream getOutputStream(final URL url) throws ConfigurationException {
        // file URLs have to be converted to Files since FileURLConnection is
        // read only (http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=4191800)
        final File file = FileLocatorUtils.fileFromURL(url);
        if (file != null) {
            return getOutputStream(file);
        }
        // for non file URLs save through an URLConnection
        OutputStream out;
        try {
            final URLConnection connection = url.openConnection();
            connection.setDoOutput(true);

            // use the PUT method for http URLs
            if (connection instanceof HttpURLConnection) {
                final HttpURLConnection conn = (HttpURLConnection) connection;
                conn.setRequestMethod(""PUT"");
            }

            out = connection.getOutputStream();

            // check the response code for http URLs and throw an exception if an error occured
            if (connection instanceof HttpURLConnection) {
                out = new HttpOutputStream(out, (HttpURLConnection) connection);
            }
            return out;
        } catch (final IOException e) {
            throw new ConfigurationException(""Could not save to URL "" + url, e);
        }
    }","  public void test24()  throws Throwable  {
      DefaultFileSystem defaultFileSystem0 = new DefaultFileSystem();
      // Undeclared exception!
      try { 
        defaultFileSystem0.getOutputStream((File) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.io.File"", e);
      }
  }"
984,"    public URL getURL(final String basePath, final String file) throws MalformedURLException {
        final File f = new File(file);
        // already absolute?
        if (f.isAbsolute()) {
            return FileLocatorUtils.toURL(f);
        }

        try {
            if (basePath == null) {
                return new URL(file);
            }
            final URL base = new URL(basePath);
            return new URL(base, file);
        } catch (final MalformedURLException uex) {
            return FileLocatorUtils.toURL(FileLocatorUtils.constructFile(basePath, file));
        }
    }","  public void test25()  throws Throwable  {
      DefaultFileSystem defaultFileSystem0 = new DefaultFileSystem();
      URL uRL0 = defaultFileSystem0.getURL("""", ""/media/FSE_USER/extradrive1/toga-eval-FSE_USER-2023/toga-eval/artifacts/commons-configuration2-2.8.0-src"");
}"
985,"    public String getPath(final File file, final URL url, final String basePath, final String fileName) {
        String path = null;
        // if resource was loaded from jar file may be null
        if (file != null) {
            path = file.getAbsolutePath();
        }

        // try to see if file was loaded from a jar
        if (path == null) {
            if (url != null) {
                path = url.getPath();
            } else {
                try {
                    path = getURL(basePath, fileName).getPath();
                } catch (final Exception e) {
                    // simply ignore it and return null
                    if (getLogger().isDebugEnabled()) {
                        getLogger().debug(String.format(""Could not determine URL for "" + ""basePath = %s, fileName = %s: %s"", basePath, fileName, e));
                    }
                }
            }
        }

        return path;
    }","  public void test26()  throws Throwable  {
      DefaultFileSystem defaultFileSystem0 = new DefaultFileSystem();
      String string0 = defaultFileSystem0.getPath((File) null, (URL) null, ""file:///media/FSE_USER/extradrive1/toga-eval-FSE_USER-2023/toga-eval/artifacts/commons-configuration2-2.8.0-src/"", (String) null);
}"
986,"    public String getPath(final File file, final URL url, final String basePath, final String fileName) {
        String path = null;
        // if resource was loaded from jar file may be null
        if (file != null) {
            path = file.getAbsolutePath();
        }

        // try to see if file was loaded from a jar
        if (path == null) {
            if (url != null) {
                path = url.getPath();
            } else {
                try {
                    path = getURL(basePath, fileName).getPath();
                } catch (final Exception e) {
                    // simply ignore it and return null
                    if (getLogger().isDebugEnabled()) {
                        getLogger().debug(String.format(""Could not determine URL for "" + ""basePath = %s, fileName = %s: %s"", basePath, fileName, e));
                    }
                }
            }
        }

        return path;
    }","  public void test27()  throws Throwable  {
      DefaultFileSystem defaultFileSystem0 = new DefaultFileSystem();
      File file0 = MockFile.createTempFile(""</body></html>"", ""1D/bnuWVd$_yqT;l8="");
      URL uRL0 = defaultFileSystem0.getURL(""{%+Mv|LF,"", ""</body></html>"");
      String string0 = defaultFileSystem0.getPath(file0, uRL0, ""\""y%<@bQKq c\""E8:>"", ""1D/bnuWVd$_yqT;l8="");
}"
987,"    public String getPath(final File file, final URL url, final String basePath, final String fileName) {
        String path = null;
        // if resource was loaded from jar file may be null
        if (file != null) {
            path = file.getAbsolutePath();
        }

        // try to see if file was loaded from a jar
        if (path == null) {
            if (url != null) {
                path = url.getPath();
            } else {
                try {
                    path = getURL(basePath, fileName).getPath();
                } catch (final Exception e) {
                    // simply ignore it and return null
                    if (getLogger().isDebugEnabled()) {
                        getLogger().debug(String.format(""Could not determine URL for "" + ""basePath = %s, fileName = %s: %s"", basePath, fileName, e));
                    }
                }
            }
        }

        return path;
    }","  public void test28()  throws Throwable  {
      DefaultFileSystem defaultFileSystem0 = new DefaultFileSystem();
      URL uRL0 = defaultFileSystem0.getURL(""file:///media/FSE_USER/extradrive1/toga-eval-FSE_USER-2023/toga-eval/artifacts/commons-configuration2-2.8.0-src/"", ""|24Etk"");
      String string0 = defaultFileSystem0.getPath((File) null, uRL0, ""|24Etk"", ""file:///media/FSE_USER/extradrive1/toga-eval-FSE_USER-2023/toga-eval/artifacts/commons-configuration2-2.8.0-src/"");
}"
988,"    public String getPath(final File file, final URL url, final String basePath, final String fileName) {
        String path = null;
        // if resource was loaded from jar file may be null
        if (file != null) {
            path = file.getAbsolutePath();
        }

        // try to see if file was loaded from a jar
        if (path == null) {
            if (url != null) {
                path = url.getPath();
            } else {
                try {
                    path = getURL(basePath, fileName).getPath();
                } catch (final Exception e) {
                    // simply ignore it and return null
                    if (getLogger().isDebugEnabled()) {
                        getLogger().debug(String.format(""Could not determine URL for "" + ""basePath = %s, fileName = %s: %s"", basePath, fileName, e));
                    }
                }
            }
        }

        return path;
    }","  public void test29()  throws Throwable  {
      DefaultFileSystem defaultFileSystem0 = new DefaultFileSystem();
      URL uRL0 = defaultFileSystem0.getURL(""file:///media/FSE_USER/extradrive1/toga-eval-FSE_USER-2023/toga-eval/artifacts/commons-configuration2-2.8.0-src/"", ""|24Etk"");
      String string0 = defaultFileSystem0.getPath((File) null, uRL0, ""|24Etk"", ""file:///media/FSE_USER/extradrive1/toga-eval-FSE_USER-2023/toga-eval/artifacts/commons-configuration2-2.8.0-src/"");
}"
989,"    public OutputStream getOutputStream(final URL url) throws ConfigurationException {
        // file URLs have to be converted to Files since FileURLConnection is
        // read only (http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=4191800)
        final File file = FileLocatorUtils.fileFromURL(url);
        if (file != null) {
            return getOutputStream(file);
        }
        // for non file URLs save through an URLConnection
        OutputStream out;
        try {
            final URLConnection connection = url.openConnection();
            connection.setDoOutput(true);

            // use the PUT method for http URLs
            if (connection instanceof HttpURLConnection) {
                final HttpURLConnection conn = (HttpURLConnection) connection;
                conn.setRequestMethod(""PUT"");
            }

            out = connection.getOutputStream();

            // check the response code for http URLs and throw an exception if an error occured
            if (connection instanceof HttpURLConnection) {
                out = new HttpOutputStream(out, (HttpURLConnection) connection);
            }
            return out;
        } catch (final IOException e) {
            throw new ConfigurationException(""Could not save to URL "" + url, e);
        }
    }","  public void test30()  throws Throwable  {
      DefaultFileSystem defaultFileSystem0 = new DefaultFileSystem();
      URL uRL0 = MockURL.getHttpExample();
      try { 
        defaultFileSystem0.getOutputStream(uRL0);
        fail(""Expecting exception: Exception"");
      } catch(Exception e) {
         //
         // Could not save to URL http://www.someFakeButWellFormedURL.org/fooExample
         //
         verifyException(""org.apache.commons.configuration2.io.DefaultFileSystem"", e);
      }
  }"
990,"    public OutputStream getOutputStream(final URL url) throws ConfigurationException {
        // file URLs have to be converted to Files since FileURLConnection is
        // read only (http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=4191800)
        final File file = FileLocatorUtils.fileFromURL(url);
        if (file != null) {
            return getOutputStream(file);
        }
        // for non file URLs save through an URLConnection
        OutputStream out;
        try {
            final URLConnection connection = url.openConnection();
            connection.setDoOutput(true);

            // use the PUT method for http URLs
            if (connection instanceof HttpURLConnection) {
                final HttpURLConnection conn = (HttpURLConnection) connection;
                conn.setRequestMethod(""PUT"");
            }

            out = connection.getOutputStream();

            // check the response code for http URLs and throw an exception if an error occured
            if (connection instanceof HttpURLConnection) {
                out = new HttpOutputStream(out, (HttpURLConnection) connection);
            }
            return out;
        } catch (final IOException e) {
            throw new ConfigurationException(""Could not save to URL "" + url, e);
        }
    }","  public void test31()  throws Throwable  {
      DefaultFileSystem defaultFileSystem0 = new DefaultFileSystem();
      FileContent fileContent0 = mock(FileContent.class, new ViolatedAssumptionAnswer());
      FileObject fileObject0 = mock(FileObject.class, new ViolatedAssumptionAnswer());
      VfsComponentContext vfsComponentContext0 = mock(VfsComponentContext.class, new ViolatedAssumptionAnswer());
      doReturn((FileObject) null).when(vfsComponentContext0).resolveFile(anyString() , any(org.apache.commons.vfs2.FileSystemOptions.class));
      FileSystemOptions fileSystemOptions0 = new FileSystemOptions();
      DefaultURLStreamHandler defaultURLStreamHandler0 = new DefaultURLStreamHandler(vfsComponentContext0, fileSystemOptions0);
      URL uRL0 = MockURL.URL(""q|"", ""q|"", 4727, ""b/+"", (URLStreamHandler) defaultURLStreamHandler0);
      // Undeclared exception!
      try { 
        defaultFileSystem0.getOutputStream(uRL0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.vfs2.provider.DefaultURLStreamHandler"", e);
      }
  }"
991,"    public OutputStream getOutputStream(final URL url) throws ConfigurationException {
        // file URLs have to be converted to Files since FileURLConnection is
        // read only (http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=4191800)
        final File file = FileLocatorUtils.fileFromURL(url);
        if (file != null) {
            return getOutputStream(file);
        }
        // for non file URLs save through an URLConnection
        OutputStream out;
        try {
            final URLConnection connection = url.openConnection();
            connection.setDoOutput(true);

            // use the PUT method for http URLs
            if (connection instanceof HttpURLConnection) {
                final HttpURLConnection conn = (HttpURLConnection) connection;
                conn.setRequestMethod(""PUT"");
            }

            out = connection.getOutputStream();

            // check the response code for http URLs and throw an exception if an error occured
            if (connection instanceof HttpURLConnection) {
                out = new HttpOutputStream(out, (HttpURLConnection) connection);
            }
            return out;
        } catch (final IOException e) {
            throw new ConfigurationException(""Could not save to URL "" + url, e);
        }
    }","  public void test32()  throws Throwable  {
      DefaultFileSystem defaultFileSystem0 = new DefaultFileSystem();
      URL uRL0 = defaultFileSystem0.locateFromURL((String) null, "";'@j Od"");
      // Undeclared exception!
      try { 
        defaultFileSystem0.getOutputStream(uRL0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.evosuite.runtime.mock.java.net.MockURL"", e);
      }
  }"
992,"    public InputStream getInputStream(final URL url) throws ConfigurationException {
        return getInputStream(url, null);
    }","  public void test33()  throws Throwable  {
      MockFile mockFile0 = new MockFile("""");
      URL uRL0 = mockFile0.toURL();
      DefaultFileSystem defaultFileSystem0 = new DefaultFileSystem();
      try { 
        defaultFileSystem0.getInputStream(uRL0);
        fail(""Expecting exception: Exception"");
      } catch(Exception e) {
         //
         // Cannot load a configuration from a directory
         //
         verifyException(""org.apache.commons.configuration2.io.DefaultFileSystem"", e);
      }
  }"
993,"    public String getBasePath(final String path) {
        final URL url;
        try {
            url = getURL(null, path);
            return FileLocatorUtils.getBasePath(url);
        } catch (final Exception e) {
            return null;
        }
    }","  public void test34()  throws Throwable  {
      DefaultFileSystem defaultFileSystem0 = new DefaultFileSystem();
      String string0 = defaultFileSystem0.getBasePath(""(nY- "");
}"
994,"    public String getBasePath(final String path) {
        final URL url;
        try {
            url = getURL(null, path);
            return FileLocatorUtils.getBasePath(url);
        } catch (final Exception e) {
            return null;
        }
    }","  public void test35()  throws Throwable  {
      DefaultFileSystem defaultFileSystem0 = new DefaultFileSystem();
      String string0 = defaultFileSystem0.getBasePath(""(nY- "");
}"
995,"    public String getFileName(final String path) {
        final URL url;
        try {
            url = getURL(null, path);
            return FileLocatorUtils.getFileName(url);
        } catch (final Exception e) {
            return null;
        }
    }","  public void test36()  throws Throwable  {
      DefaultFileSystem defaultFileSystem0 = new DefaultFileSystem();
      String string0 = defaultFileSystem0.getFileName(""{%+Mv|LF,"");
}"
996,"    public String getEncoding() {
        return getFileLocator().getEncoding();
    }","  public void test0()  throws Throwable  {
      FileHandler fileHandler0 = new FileHandler();
      fileHandler0.setFileName(""file:FileLocator must not be null!"");
}"
997,"    public void save() throws ConfigurationException {
        save(checkContentAndGetLocator());
    }","  public void test1()  throws Throwable  {
      XMLConfiguration xMLConfiguration0 = new XMLConfiguration();
      JSONConfiguration jSONConfiguration0 = new JSONConfiguration(xMLConfiguration0);
      FileHandler fileHandler0 = new FileHandler();
      FileHandler fileHandler1 = new FileHandler(jSONConfiguration0, fileHandler0);
      PipedWriter pipedWriter0 = new PipedWriter();
      try { 
        fileHandler1.save((Writer) pipedWriter0);
        fail(""Expecting exception: Exception"");
      } catch(Exception e) {
         //
         // java.io.IOException: Pipe not connected
         //
         verifyException(""org.apache.commons.configuration2.io.FileHandler"", e);
      }
  }"
998,"    public void save() throws ConfigurationException {
        save(checkContentAndGetLocator());
    }","  public void test2()  throws Throwable  {
      XMLPropertiesConfiguration xMLPropertiesConfiguration0 = new XMLPropertiesConfiguration();
      FileHandler fileHandler0 = new FileHandler(xMLPropertiesConfiguration0);
      MockFile mockFile0 = new MockFile(""[G2=.@#8RBA'5iG"");
      URL uRL0 = mockFile0.toURL();
      fileHandler0.save(uRL0);
}"
999,"    public String getEncoding() {
        return getFileLocator().getEncoding();
    }","  public void test3()  throws Throwable  {
      PropertiesConfiguration propertiesConfiguration0 = new PropertiesConfiguration();
      FileHandler fileHandler0 = new FileHandler(propertiesConfiguration0);
      MockFile mockFile0 = new MockFile(""ISO-8859-1"");
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0);
      fileHandler0.save((Writer) mockFileWriter0);
}"
1000,"    public boolean locate() {
        boolean result;
        boolean done;

        do {
            final FileLocator locator = getFileLocator();
            FileLocator fullLocator = FileLocatorUtils.fullyInitializedLocator(locator);
            if (fullLocator == null) {
                result = false;
                fullLocator = locator;
            } else {
                result = fullLocator != locator || FileLocatorUtils.isFullyInitialized(locator);
            }
            done = fileLocator.compareAndSet(locator, fullLocator);
        } while (!done);

        return result;
    }","  public void test4()  throws Throwable  {
      XMLPropertiesConfiguration xMLPropertiesConfiguration0 = new XMLPropertiesConfiguration();
      FileHandler fileHandler0 = new FileHandler(xMLPropertiesConfiguration0);
      boolean boolean0 = fileHandler0.locate();
}"
1001,"    public void load() throws ConfigurationException {
        load(checkContentAndGetLocator());
    }","  public void test5()  throws Throwable  {
      MergeCombiner mergeCombiner0 = new MergeCombiner();
      DynamicCombinedConfiguration dynamicCombinedConfiguration0 = new DynamicCombinedConfiguration(mergeCombiner0);
      PatternSubtreeConfigurationWrapper patternSubtreeConfigurationWrapper0 = new PatternSubtreeConfigurationWrapper(dynamicCombinedConfiguration0, """");
      FileHandler fileHandler0 = new FileHandler(patternSubtreeConfigurationWrapper0);
      byte[] byteArray0 = new byte[5];
      RowInputBinary rowInputBinary0 = new RowInputBinary(byteArray0);
      try { 
        fileHandler0.load((InputStream) rowInputBinary0);
        fail(""Expecting exception: Exception"");
      } catch(Exception e) {
         //
         // Wrapped configuration does not implement FileBased! No I/O operations are supported.
         //
         verifyException(""org.apache.commons.configuration2.PatternSubtreeConfigurationWrapper"", e);
      }
  }"
1002,"    public void load() throws ConfigurationException {
        load(checkContentAndGetLocator());
    }","  public void test6()  throws Throwable  {
      INIConfiguration iNIConfiguration0 = new INIConfiguration();
      FileHandler fileHandler0 = new FileHandler(iNIConfiguration0);
      PipedReader pipedReader0 = new PipedReader();
      try { 
        fileHandler0.load((Reader) pipedReader0);
        fail(""Expecting exception: Exception"");
      } catch(Exception e) {
         //
         // java.io.IOException: Pipe not connected
         //
         verifyException(""org.apache.commons.configuration2.io.FileHandler"", e);
      }
  }"
1003,"    public String getEncoding() {
        return getFileLocator().getEncoding();
    }","  public void test7()  throws Throwable  {
      INIConfiguration iNIConfiguration0 = new INIConfiguration();
      FileHandler fileHandler0 = new FileHandler(iNIConfiguration0);
      fileHandler0.setPath(""\"""");
      FileSystemHandling.shouldAllThrowIOExceptions();
      fileHandler0.save();
}"
1004,"    public boolean isLocationDefined() {
        return FileLocatorUtils.isLocationDefined(getFileLocator());
    }","  public void test8()  throws Throwable  {
      INIConfiguration iNIConfiguration0 = new INIConfiguration();
      FileHandler fileHandler0 = new FileHandler(iNIConfiguration0);
      fileHandler0.setPath(""\"""");
      boolean boolean0 = fileHandler0.isLocationDefined();
}"
1005,"    public String getEncoding() {
        return getFileLocator().getEncoding();
    }","  public void test9()  throws Throwable  {
      JSONConfiguration jSONConfiguration0 = new JSONConfiguration();
      FileHandler fileHandler0 = new FileHandler(jSONConfiguration0);
      fileHandler0.setEncoding(""file:0g8I"");
      String string0 = fileHandler0.getEncoding();
}"
1006,"    public final FileBased getContent() {
        return content;
    }","  public void test10()  throws Throwable  {
      INIConfiguration iNIConfiguration0 = new INIConfiguration();
      FileHandler fileHandler0 = new FileHandler(iNIConfiguration0);
      FileBased fileBased0 = fileHandler0.getContent();
}"
1007,"    public String getBasePath() {
        final FileLocator locator = getFileLocator();
        if (locator.getBasePath() != null) {
            return locator.getBasePath();
        }

        if (locator.getSourceURL() != null) {
            return FileLocatorUtils.getBasePath(locator.getSourceURL());
        }

        return null;
    }","  public void test11()  throws Throwable  {
      FileHandler fileHandler0 = new FileHandler();
      fileHandler0.setBasePath("""");
      String string0 = fileHandler0.getBasePath();
}"
1008,"    public void setPath(final String path) {
        setFile(new File(path));
    }","  public void test12()  throws Throwable  {
      FileHandler fileHandler0 = new FileHandler();
      // Undeclared exception!
      try { 
        fileHandler0.setPath((String) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.io.File"", e);
      }
  }"
1009,"    public void setFile(final File file) {
        final String fileName = file.getName();
        final String basePath = file.getParentFile() != null ? file.getParentFile().getAbsolutePath() : null;
        new Updater() {
            @Override
            protected void updateBuilder(final FileLocatorBuilder builder) {
                builder.fileName(fileName).basePath(basePath).sourceURL(null);
            }
        }.update();
    }","  public void test13()  throws Throwable  {
      FileHandler fileHandler0 = new FileHandler();
      // Undeclared exception!
      try { 
        fileHandler0.setFile((File) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.configuration2.io.FileHandler"", e);
      }
  }"
1010,"    public void save() throws ConfigurationException {
        save(checkContentAndGetLocator());
    }","  public void test14()  throws Throwable  {
      FileHandler fileHandler0 = new FileHandler();
      URL uRL0 = MockURL.getFtpExample();
      try { 
        fileHandler0.save(uRL0);
        fail(""Expecting exception: Exception"");
      } catch(Exception e) {
         //
         // No content available!
         //
         verifyException(""org.apache.commons.configuration2.io.FileHandler"", e);
      }
  }"
1011,"    public void save() throws ConfigurationException {
        save(checkContentAndGetLocator());
    }","  public void test15()  throws Throwable  {
      JSONConfiguration jSONConfiguration0 = new JSONConfiguration();
      INIConfiguration iNIConfiguration0 = new INIConfiguration(jSONConfiguration0);
      FileHandler fileHandler0 = new FileHandler(jSONConfiguration0);
      FileHandler fileHandler1 = new FileHandler(iNIConfiguration0, fileHandler0);
      // Undeclared exception!
      try { 
        fileHandler1.save((Writer) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.io.Writer"", e);
      }
  }"
1012,"    public void save() throws ConfigurationException {
        save(checkContentAndGetLocator());
    }","  public void test16()  throws Throwable  {
      JSONConfiguration jSONConfiguration0 = new JSONConfiguration();
      FileHandler fileHandler0 = new FileHandler(jSONConfiguration0);
      // Undeclared exception!
      try { 
        fileHandler0.save((Writer) null);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // argument \""w\"" is null
         //
         verifyException(""com.fasterxml.jackson.databind.ObjectWriter"", e);
      }
  }"
1013,"    public void save() throws ConfigurationException {
        save(checkContentAndGetLocator());
    }","  public void test17()  throws Throwable  {
      DynamicCombinedConfiguration dynamicCombinedConfiguration0 = new DynamicCombinedConfiguration();
      PatternSubtreeConfigurationWrapper patternSubtreeConfigurationWrapper0 = new PatternSubtreeConfigurationWrapper(dynamicCombinedConfiguration0, ""mk%E8m3+'ripI=C"");
      FileHandler fileHandler0 = new FileHandler(patternSubtreeConfigurationWrapper0);
      RowOutputBinary180 rowOutputBinary180_0 = new RowOutputBinary180((-716), 2408);
      try { 
        fileHandler0.save((OutputStream) rowOutputBinary180_0, ""mk%E8m3+'ripI=C"");
        fail(""Expecting exception: Exception"");
      } catch(Exception e) {
         //
         // The requested encoding is not supported, try the default encoding.
         //
         verifyException(""org.apache.commons.configuration2.io.FileHandler"", e);
      }
  }"
1014,"    public void save() throws ConfigurationException {
        save(checkContentAndGetLocator());
    }","  public void test18()  throws Throwable  {
      XMLPropertiesConfiguration xMLPropertiesConfiguration0 = new XMLPropertiesConfiguration();
      FileHandler fileHandler0 = new FileHandler(xMLPropertiesConfiguration0);
      RowOutputBinary rowOutputBinary0 = new RowOutputBinary((-670), (-670));
      rowOutputBinary0.setSize((-670));
      // Undeclared exception!
      try { 
        fileHandler0.save((OutputStream) rowOutputBinary0, ""UTF-8"");
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }"
1015,"    public void save() throws ConfigurationException {
        save(checkContentAndGetLocator());
    }","  public void test19()  throws Throwable  {
      FileHandler fileHandler0 = new FileHandler();
      byte[] byteArray0 = new byte[2];
      RowOutputBinary rowOutputBinary0 = new RowOutputBinary(byteArray0);
      try { 
        fileHandler0.save((OutputStream) rowOutputBinary0);
        fail(""Expecting exception: Exception"");
      } catch(Exception e) {
         //
         // No content available!
         //
         verifyException(""org.apache.commons.configuration2.io.FileHandler"", e);
      }
  }"
1016,"    public void save() throws ConfigurationException {
        save(checkContentAndGetLocator());
    }","  public void test20()  throws Throwable  {
      DynamicCombinedConfiguration dynamicCombinedConfiguration0 = new DynamicCombinedConfiguration();
      PatternSubtreeConfigurationWrapper patternSubtreeConfigurationWrapper0 = new PatternSubtreeConfigurationWrapper(dynamicCombinedConfiguration0, "">?9vvI^JK"");
      XMLConfiguration xMLConfiguration0 = new XMLConfiguration(patternSubtreeConfigurationWrapper0);
      FileHandler fileHandler0 = new FileHandler(xMLConfiguration0);
      // Undeclared exception!
      try { 
        fileHandler0.save((OutputStream) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.io.Writer"", e);
      }
  }"
1017,"    public void save() throws ConfigurationException {
        save(checkContentAndGetLocator());
    }","  public void test21()  throws Throwable  {
      XMLConfiguration xMLConfiguration0 = new XMLConfiguration();
      xMLConfiguration0.setProperty(""Lw<i{-`tSDqFu"", ""Lw<i{-`tSDqFu"");
      FileHandler fileHandler0 = new FileHandler(xMLConfiguration0);
      MockFile mockFile0 = new MockFile("":9F:pOQpMVb}m# `"");
      // Undeclared exception!
      try { 
        fileHandler0.save((File) mockFile0);
        fail(""Expecting exception: DOMException"");
      } catch(DOMException e) {
      }
  }"
1018,"    public void save() throws ConfigurationException {
        save(checkContentAndGetLocator());
    }","  public void test22()  throws Throwable  {
      PropertiesConfiguration propertiesConfiguration0 = new PropertiesConfiguration();
      Hashtable<String, CompositeConfiguration> hashtable0 = new Hashtable<String, CompositeConfiguration>();
      FileHandler fileHandler0 = FileHandler.fromMap(hashtable0);
      FileHandler fileHandler1 = new FileHandler(propertiesConfiguration0, fileHandler0);
      // Undeclared exception!
      try { 
        fileHandler1.save((File) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.io.File"", e);
      }
  }"
1019,"    public void load() throws ConfigurationException {
        load(checkContentAndGetLocator());
    }","  public void test23()  throws Throwable  {
      FileHandler fileHandler0 = new FileHandler();
      try { 
        fileHandler0.load("""");
        fail(""Expecting exception: Exception"");
      } catch(Exception e) {
         //
         // No content available!
         //
         verifyException(""org.apache.commons.configuration2.io.FileHandler"", e);
      }
  }"
1020,"    public void load() throws ConfigurationException {
        load(checkContentAndGetLocator());
    }","  public void test24()  throws Throwable  {
      XMLPropertiesConfiguration xMLPropertiesConfiguration0 = new XMLPropertiesConfiguration();
      FileHandler fileHandler0 = new FileHandler(xMLPropertiesConfiguration0);
      // Undeclared exception!
      try { 
        fileHandler0.load((InputStream) null, ""d(k(n-uXuW7t_"");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.io.Reader"", e);
      }
  }"
1021,"    public void load() throws ConfigurationException {
        load(checkContentAndGetLocator());
    }","  public void test25()  throws Throwable  {
      Hashtable<String, XMLConfiguration> hashtable0 = new Hashtable<String, XMLConfiguration>();
      FileHandler fileHandler0 = FileHandler.fromMap(hashtable0);
      fileHandler0.setFileName(""oracle.jdbc.replay.OracleDataSourceImpl"");
      File file0 = fileHandler0.getFile();
      try { 
        fileHandler0.load(file0);
        fail(""Expecting exception: Exception"");
      } catch(Exception e) {
         //
         // No content available!
         //
         verifyException(""org.apache.commons.configuration2.io.FileHandler"", e);
      }
  }"
1022,"    public void load() throws ConfigurationException {
        load(checkContentAndGetLocator());
    }","  public void test26()  throws Throwable  {
      FileHandler fileHandler0 = FileHandler.fromMap((Map<String, ?>) null);
      try { 
        fileHandler0.load();
        fail(""Expecting exception: Exception"");
      } catch(Exception e) {
         //
         // No content available!
         //
         verifyException(""org.apache.commons.configuration2.io.FileHandler"", e);
      }
  }"
1023,"    public void setFile(final File file) {
        final String fileName = file.getName();
        final String basePath = file.getParentFile() != null ? file.getParentFile().getAbsolutePath() : null;
        new Updater() {
            @Override
            protected void updateBuilder(final FileLocatorBuilder builder) {
                builder.fileName(fileName).basePath(basePath).sourceURL(null);
            }
        }.update();
    }","  public void test27()  throws Throwable  {
      FileHandler fileHandler0 = new FileHandler();
      MockFile mockFile0 = new MockFile(""Exception when closing "");
      fileHandler0.setFile(mockFile0);
}"
1024,"    public URL getURL() {
        final FileLocator locator = getFileLocator();
        return locator.getSourceURL() != null ? locator.getSourceURL() : FileLocatorUtils.locate(locator);
    }","  public void test28()  throws Throwable  {
      Hashtable<String, AbstractYAMLBasedConfiguration> hashtable0 = new Hashtable<String, AbstractYAMLBasedConfiguration>();
      FileHandler fileHandler0 = FileHandler.fromMap(hashtable0);
      URL uRL0 = MockURL.getHttpExample();
      fileHandler0.setURL(uRL0);
      URL uRL1 = fileHandler0.getURL();
}"
1025,"    public String getEncoding() {
        return getFileLocator().getEncoding();
    }","  public void test29()  throws Throwable  {
      INIConfiguration iNIConfiguration0 = new INIConfiguration();
      FileHandler fileHandler0 = new FileHandler(iNIConfiguration0);
      FileHandlerListenerAdapter fileHandlerListenerAdapter0 = new FileHandlerListenerAdapter();
      fileHandler0.setPath(""\"""");
      fileHandler0.addFileHandlerListener(fileHandlerListenerAdapter0);
      fileHandler0.save();
}"
1026,"    public String getEncoding() {
        return getFileLocator().getEncoding();
    }","  public void test30()  throws Throwable  {
      XMLConfiguration xMLConfiguration0 = new XMLConfiguration();
      FileHandler fileHandler0 = new FileHandler(xMLConfiguration0);
      FileHandlerListenerAdapter fileHandlerListenerAdapter0 = new FileHandlerListenerAdapter();
      fileHandler0.addFileHandlerListener(fileHandlerListenerAdapter0);
      fileHandler0.setFileName(""zgL?S[WzbP{<o-Xp"");
}"
1027,"    public String getEncoding() {
        return getFileLocator().getEncoding();
    }","  public void test31()  throws Throwable  {
      FileHandler fileHandler0 = new FileHandler((FileBased) null);
      fileHandler0.resetFileSystem();
}"
1028,"    public void load() throws ConfigurationException {
        load(checkContentAndGetLocator());
    }","  public void test32()  throws Throwable  {
      FileHandler fileHandler0 = new FileHandler();
      try { 
        fileHandler0.load((InputStream) null, ""v7Q#pU#]gatPUy<#4q"");
        fail(""Expecting exception: Exception"");
      } catch(Exception e) {
         //
         // No content available!
         //
         verifyException(""org.apache.commons.configuration2.io.FileHandler"", e);
      }
  }"
1029,"    public String getEncoding() {
        return getFileLocator().getEncoding();
    }","  public void test33()  throws Throwable  {
      FileHandler fileHandler0 = new FileHandler((FileBased) null);
      FileHandlerListenerAdapter fileHandlerListenerAdapter0 = new FileHandlerListenerAdapter();
      fileHandler0.removeFileHandlerListener(fileHandlerListenerAdapter0);
}"
1030,"    public void load() throws ConfigurationException {
        load(checkContentAndGetLocator());
    }","  public void test34()  throws Throwable  {
      INIConfiguration iNIConfiguration0 = new INIConfiguration();
      FileHandler fileHandler0 = new FileHandler(iNIConfiguration0);
      try { 
        fileHandler0.load("".BnqG'_nexlm9&"");
        fail(""Expecting exception: Exception"");
      } catch(Exception e) {
         //
         // Unable to load the configuration from the URL file:/media/FSE_USER/extradrive1/toga-eval-FSE_USER-2023/toga-eval/artifacts/commons-configuration2-2.8.0-src/.BnqG'_nexlm9&
         //
         verifyException(""org.apache.commons.configuration2.io.DefaultFileSystem"", e);
      }
  }"
1031,"    public void setFileLocator(final FileLocator locator) {
        if (locator == null) {
            throw new IllegalArgumentException(""FileLocator must not be null!"");
        }

        fileLocator.set(locator);
        fireLocationChangedEvent();
    }","  public void test35()  throws Throwable  {
      FileHandler fileHandler0 = new FileHandler();
      // Undeclared exception!
      try { 
        fileHandler0.setFileLocator((FileLocator) null);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // FileLocator must not be null!
         //
         verifyException(""org.apache.commons.configuration2.io.FileHandler"", e);
      }
  }"
1032,"    public String getEncoding() {
        return getFileLocator().getEncoding();
    }","  public void test36()  throws Throwable  {
      FileHandler fileHandler0 = new FileHandler((FileBased) null);
      FileLocator fileLocator0 = fileHandler0.getFileLocator();
      fileHandler0.setFileLocator(fileLocator0);
}"
1033,"    public String getEncoding() {
        return getFileLocator().getEncoding();
    }","  public void test37()  throws Throwable  {
      XMLPropertiesConfiguration xMLPropertiesConfiguration0 = new XMLPropertiesConfiguration();
      FileHandler fileHandler0 = new FileHandler(xMLPropertiesConfiguration0);
      FileUtil fileUtil0 = FileUtil.getFileUtil();
      OutputStream outputStream0 = fileUtil0.openOutputStreamElementAppend(""file://"");
      fileHandler0.save(outputStream0, ""UTF-8"");
}"
1034,"    public void save() throws ConfigurationException {
        save(checkContentAndGetLocator());
    }","  public void test38()  throws Throwable  {
      INIConfiguration iNIConfiguration0 = new INIConfiguration();
      FileHandler fileHandler0 = new FileHandler(iNIConfiguration0);
      try { 
        fileHandler0.save();
        fail(""Expecting exception: Exception"");
      } catch(Exception e) {
         //
         // No file location has been set!
         //
         verifyException(""org.apache.commons.configuration2.io.FileHandler"", e);
      }
  }"
1035,"    public void load() throws ConfigurationException {
        load(checkContentAndGetLocator());
    }","  public void test39()  throws Throwable  {
      XMLPropertiesConfiguration xMLPropertiesConfiguration0 = new XMLPropertiesConfiguration();
      FileHandler fileHandler0 = new FileHandler();
      FileHandler fileHandler1 = new FileHandler(xMLPropertiesConfiguration0, fileHandler0);
      fileHandler1.setEncoding(""UTF-8"");
      // Undeclared exception!
      try { 
        fileHandler1.load((InputStream) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.io.Reader"", e);
      }
  }"
1036,"    public void save() throws ConfigurationException {
        save(checkContentAndGetLocator());
    }","  public void test40()  throws Throwable  {
      INIConfiguration iNIConfiguration0 = new INIConfiguration();
      Hashtable<String, XMLConfiguration> hashtable0 = new Hashtable<String, XMLConfiguration>();
      FileHandler fileHandler0 = FileHandler.fromMap(hashtable0);
      FileHandler fileHandler1 = new FileHandler(iNIConfiguration0, fileHandler0);
      fileHandler1.save(""KPDSS_SESSSTATE_APPCONT_ENABLED"");
}"
1037,"    public URL getURL() {
        final FileLocator locator = getFileLocator();
        return locator.getSourceURL() != null ? locator.getSourceURL() : FileLocatorUtils.locate(locator);
    }","  public void test41()  throws Throwable  {
      FileHandler fileHandler0 = new FileHandler();
      URL uRL0 = fileHandler0.getURL();
}"
1038,"    public String getFileName() {
        final FileLocator locator = getFileLocator();
        if (locator.getFileName() != null) {
            return locator.getFileName();
        }

        if (locator.getSourceURL() != null) {
            return FileLocatorUtils.getFileName(locator.getSourceURL());
        }

        return null;
    }","  public void test42()  throws Throwable  {
      YAMLConfiguration yAMLConfiguration0 = new YAMLConfiguration();
      FileHandler fileHandler0 = new FileHandler(yAMLConfiguration0);
      String string0 = fileHandler0.getFileName();
}"
1039,"    public String getBasePath() {
        final FileLocator locator = getFileLocator();
        if (locator.getBasePath() != null) {
            return locator.getBasePath();
        }

        if (locator.getSourceURL() != null) {
            return FileLocatorUtils.getBasePath(locator.getSourceURL());
        }

        return null;
    }","  public void test43()  throws Throwable  {
      FileHandler fileHandler0 = new FileHandler();
      URL uRL0 = MockURL.getHttpExample();
      fileHandler0.setURL(uRL0);
      String string0 = fileHandler0.getBasePath();
}"
1040,"    public String getBasePath() {
        final FileLocator locator = getFileLocator();
        if (locator.getBasePath() != null) {
            return locator.getBasePath();
        }

        if (locator.getSourceURL() != null) {
            return FileLocatorUtils.getBasePath(locator.getSourceURL());
        }

        return null;
    }","  public void test44()  throws Throwable  {
      FileHandler fileHandler0 = new FileHandler();
      MockFile mockFile0 = new MockFile(""file:y:"", ""file:y:"");
      fileHandler0.setFile(mockFile0);
      String string0 = fileHandler0.getBasePath();
}"
1041,"    public String getBasePath() {
        final FileLocator locator = getFileLocator();
        if (locator.getBasePath() != null) {
            return locator.getBasePath();
        }

        if (locator.getSourceURL() != null) {
            return FileLocatorUtils.getBasePath(locator.getSourceURL());
        }

        return null;
    }","  public void test45()  throws Throwable  {
      FileHandler fileHandler0 = new FileHandler();
      MockFile mockFile0 = new MockFile(""file:y:"", ""file:y:"");
      fileHandler0.setFile(mockFile0);
      String string0 = fileHandler0.getBasePath();
}"
1042,"    public String getBasePath() {
        final FileLocator locator = getFileLocator();
        if (locator.getBasePath() != null) {
            return locator.getBasePath();
        }

        if (locator.getSourceURL() != null) {
            return FileLocatorUtils.getBasePath(locator.getSourceURL());
        }

        return null;
    }","  public void test46()  throws Throwable  {
      Hashtable<String, XMLConfiguration> hashtable0 = new Hashtable<String, XMLConfiguration>();
      FileHandler fileHandler0 = FileHandler.fromMap(hashtable0);
      String string0 = fileHandler0.getBasePath();
}"
1043,"    public void load() throws ConfigurationException {
        load(checkContentAndGetLocator());
    }","  public void test47()  throws Throwable  {
      PropertiesConfiguration propertiesConfiguration0 = new PropertiesConfiguration();
      FileHandler fileHandler0 = new FileHandler();
      FileHandler fileHandler1 = new FileHandler(propertiesConfiguration0, fileHandler0);
      PipedReader pipedReader0 = new PipedReader();
      FileHandlerListenerAdapter fileHandlerListenerAdapter0 = new FileHandlerListenerAdapter();
      fileHandler1.addFileHandlerListener(fileHandlerListenerAdapter0);
      try { 
        fileHandler1.load((Reader) pipedReader0);
        fail(""Expecting exception: Exception"");
      } catch(Exception e) {
         //
         // java.io.IOException: Pipe not connected
         //
         verifyException(""org.apache.commons.configuration2.PropertiesConfigurationLayout"", e);
      }
  }"
1044,"    public void addFileHandlerListener(final FileHandlerListener l) {
        if (l == null) {
            throw new IllegalArgumentException(""Listener must not be null!"");
        }
        listeners.add(l);
    }","  public void test48()  throws Throwable  {
      Hashtable<String, FileLocator> hashtable0 = new Hashtable<String, FileLocator>();
      FileHandler fileHandler0 = FileHandler.fromMap(hashtable0);
      // Undeclared exception!
      try { 
        fileHandler0.addFileHandlerListener((FileHandlerListener) null);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Listener must not be null!
         //
         verifyException(""org.apache.commons.configuration2.io.FileHandler"", e);
      }
  }"
1045,"    public String getEncoding() {
        return getFileLocator().getEncoding();
    }","  public void test49()  throws Throwable  {
      FileHandler fileHandler0 = FileHandler.fromMap((Map<String, ?>) null);
      fileHandler0.setFileName(""file://"");
}"
1046,"    public File getFile() {
        return createFile(getFileLocator());
    }","  public void test50()  throws Throwable  {
      Hashtable<String, XMLConfiguration> hashtable0 = new Hashtable<String, XMLConfiguration>();
      FileHandler fileHandler0 = FileHandler.fromMap(hashtable0);
      fileHandler0.setFileName("".."");
      File file0 = fileHandler0.getFile();
}"
1047,"    public String getEncoding() {
        return getFileLocator().getEncoding();
    }","  public void test51()  throws Throwable  {
      Hashtable<String, AQEnqueueOptions.VisibilityOption> hashtable0 = new Hashtable<String, AQEnqueueOptions.VisibilityOption>();
      FileHandler fileHandler0 = FileHandler.fromMap(hashtable0);
      fileHandler0.setFileName((String) null);
}"
1048,"    public String getPath() {
        final FileLocator locator = getFileLocator();
        final File file = createFile(locator);
        return FileLocatorUtils.obtainFileSystem(locator).getPath(file, locator.getSourceURL(), locator.getBasePath(), locator.getFileName());
    }","  public void test52()  throws Throwable  {
      FileHandler fileHandler0 = new FileHandler();
      MockFile mockFile0 = new MockFile(""file:y:"", ""file:y:"");
      fileHandler0.setFile(mockFile0);
      String string0 = fileHandler0.getPath();
}"
1049,"    public File getFile() {
        return createFile(getFileLocator());
    }","  public void test53()  throws Throwable  {
      FileHandler fileHandler0 = new FileHandler();
      URL uRL0 = MockURL.getHttpExample();
      fileHandler0.setURL(uRL0);
      File file0 = fileHandler0.getFile();
}"
1050,"    public String getPath() {
        final FileLocator locator = getFileLocator();
        final File file = createFile(locator);
        return FileLocatorUtils.obtainFileSystem(locator).getPath(file, locator.getSourceURL(), locator.getBasePath(), locator.getFileName());
    }","  public void test54()  throws Throwable  {
      FileHandler fileHandler0 = new FileHandler((FileBased) null);
      String string0 = fileHandler0.getPath();
}"
1051,"    public FileHandler() {
        this(null);
    }","  public void test55()  throws Throwable  {
      FileHandler fileHandler0 = null;
      try {
        fileHandler0 = new FileHandler((FileBased) null, (FileHandler) null);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // FileHandler to assign must not be null!
         //
         verifyException(""org.apache.commons.configuration2.io.FileHandler"", e);
      }
  }"
1052,"    public void save() throws ConfigurationException {
        save(checkContentAndGetLocator());
    }","  public void test56()  throws Throwable  {
      PropertiesConfiguration propertiesConfiguration0 = new PropertiesConfiguration();
      FileHandler fileHandler0 = new FileHandler(propertiesConfiguration0);
      RowOutputBinary180 rowOutputBinary180_0 = new RowOutputBinary180((-915), 3905);
      fileHandler0.save((OutputStream) rowOutputBinary180_0);
}"
1053,"    public File getFile() {
        return createFile(getFileLocator());
    }","  public void test57()  throws Throwable  {
      INIConfiguration iNIConfiguration0 = new INIConfiguration();
      FileHandler fileHandler0 = new FileHandler(iNIConfiguration0);
      fileHandler0.setPath(""\"""");
      fileHandler0.save();
      File file0 = fileHandler0.getFile();
}"
1054,"    public File getFile() {
        return createFile(getFileLocator());
    }","  public void test58()  throws Throwable  {
      INIConfiguration iNIConfiguration0 = new INIConfiguration();
      FileHandler fileHandler0 = new FileHandler(iNIConfiguration0);
      fileHandler0.setPath(""\"""");
      fileHandler0.save();
      File file0 = fileHandler0.getFile();
}"
1055,"    public String getEncoding() {
        return getFileLocator().getEncoding();
    }","  public void test59()  throws Throwable  {
      FileHandler fileHandler0 = new FileHandler();
      fileHandler0.clearLocation();
}"
1056,"    public void load() throws ConfigurationException {
        load(checkContentAndGetLocator());
    }","  public void test60()  throws Throwable  {
      FileHandler fileHandler0 = new FileHandler();
      // Undeclared exception!
      try { 
        fileHandler0.load((File) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.configuration2.io.FileLocatorUtils"", e);
      }
  }"
1057,"    public void load() throws ConfigurationException {
        load(checkContentAndGetLocator());
    }","  public void test61()  throws Throwable  {
      YAMLConfiguration yAMLConfiguration0 = new YAMLConfiguration();
      FileHandler fileHandler0 = new FileHandler(yAMLConfiguration0);
      try { 
        fileHandler0.load();
        fail(""Expecting exception: Exception"");
      } catch(Exception e) {
         //
         // Could not locate: FileLocator [basePath=null, encoding=null, fileName=null, fileSystem=null, locationStrategy=null, sourceURL=null, urlConnectionOptions=null]
         //
         verifyException(""org.apache.commons.configuration2.io.FileLocatorUtils"", e);
      }
  }"
1058,"    public FileLocationStrategy getLocationStrategy() {
        return FileLocatorUtils.obtainLocationStrategy(getFileLocator());
    }","  public void test62()  throws Throwable  {
      XMLPropertiesConfiguration xMLPropertiesConfiguration0 = new XMLPropertiesConfiguration();
      FileHandler fileHandler0 = new FileHandler(xMLPropertiesConfiguration0);
      FileLocationStrategy fileLocationStrategy0 = fileHandler0.getLocationStrategy();
}"
1059,"    public void save() throws ConfigurationException {
        save(checkContentAndGetLocator());
    }","  public void test63()  throws Throwable  {
      INIConfiguration iNIConfiguration0 = new INIConfiguration();
      FileHandler fileHandler0 = new FileHandler(iNIConfiguration0);
      // Undeclared exception!
      try { 
        fileHandler0.save((URL) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.evosuite.runtime.mock.java.net.MockURL"", e);
      }
  }"
1060,"    public void save() throws ConfigurationException {
        save(checkContentAndGetLocator());
    }","  public void test64()  throws Throwable  {
      Hashtable<String, XMLConfiguration> hashtable0 = new Hashtable<String, XMLConfiguration>();
      FileHandler fileHandler0 = FileHandler.fromMap(hashtable0);
      try { 
        fileHandler0.save(""orcle.jdbc.replay.OMacleDataSourceImpl"");
        fail(""Expecting exception: Exception"");
      } catch(Exception e) {
         //
         // No content available!
         //
         verifyException(""org.apache.commons.configuration2.io.FileHandler"", e);
      }
  }"
1061,"    public FileSystem getFileSystem() {
        return FileLocatorUtils.obtainFileSystem(getFileLocator());
    }","  public void test65()  throws Throwable  {
      FileHandler fileHandler0 = FileHandler.fromMap((Map<String, ?>) null);
      FileSystem fileSystem0 = fileHandler0.getFileSystem();
}"
1062,"    public void load() throws ConfigurationException {
        load(checkContentAndGetLocator());
    }","  public void test66()  throws Throwable  {
      JSONConfiguration jSONConfiguration0 = new JSONConfiguration();
      FileHandler fileHandler0 = new FileHandler();
      FileHandler fileHandler1 = new FileHandler(jSONConfiguration0, fileHandler0);
      try { 
        fileHandler1.load((InputStream) null);
        fail(""Expecting exception: Exception"");
      } catch(Exception e) {
         //
         // Unable to load the configuration
         //
         verifyException(""org.apache.commons.configuration2.AbstractYAMLBasedConfiguration"", e);
      }
  }"
1063,"    public void load() throws ConfigurationException {
        load(checkContentAndGetLocator());
    }","  public void test67()  throws Throwable  {
      PropertiesConfiguration propertiesConfiguration0 = new PropertiesConfiguration();
      FileHandler fileHandler0 = new FileHandler(propertiesConfiguration0);
      // Undeclared exception!
      try { 
        fileHandler0.load((Reader) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.io.Reader"", e);
      }
  }"
1064,"    public void save() throws ConfigurationException {
        save(checkContentAndGetLocator());
    }","  public void test68()  throws Throwable  {
      XMLConfiguration xMLConfiguration0 = new XMLConfiguration();
      FileHandler fileHandler0 = new FileHandler(xMLConfiguration0);
      MockFile mockFile0 = new MockFile("":9F:pOQpMVb}m# `"");
      fileHandler0.save((File) mockFile0);
}"
1065,"    public void save() throws ConfigurationException {
        save(checkContentAndGetLocator());
    }","  public void test69()  throws Throwable  {
      MergeCombiner mergeCombiner0 = new MergeCombiner();
      DynamicCombinedConfiguration dynamicCombinedConfiguration0 = new DynamicCombinedConfiguration(mergeCombiner0);
      PatternSubtreeConfigurationWrapper patternSubtreeConfigurationWrapper0 = new PatternSubtreeConfigurationWrapper(dynamicCombinedConfiguration0, """");
      FileHandler fileHandler0 = new FileHandler(patternSubtreeConfigurationWrapper0);
      // Undeclared exception!
      try { 
        fileHandler0.save((OutputStream) null, ""@mR8U=w$"");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.io.Writer"", e);
      }
  }"
1066,"    public void load() throws ConfigurationException {
        load(checkContentAndGetLocator());
    }","  public void test70()  throws Throwable  {
      DynamicCombinedConfiguration dynamicCombinedConfiguration0 = new DynamicCombinedConfiguration();
      JSONConfiguration jSONConfiguration0 = new JSONConfiguration(dynamicCombinedConfiguration0);
      FileHandler fileHandler0 = new FileHandler(jSONConfiguration0);
      try { 
        fileHandler0.load((URL) null);
        fail(""Expecting exception: Exception"");
      } catch(Exception e) {
         //
         // Unable to load the configuration from the URL null
         //
         verifyException(""org.apache.commons.configuration2.io.DefaultFileSystem"", e);
      }
  }"
1067,"    public boolean isLocationDefined() {
        return FileLocatorUtils.isLocationDefined(getFileLocator());
    }","  public void test71()  throws Throwable  {
      YAMLConfiguration yAMLConfiguration0 = new YAMLConfiguration();
      FileHandler fileHandler0 = new FileHandler(yAMLConfiguration0);
      boolean boolean0 = fileHandler0.isLocationDefined();
}"
1068,"    public String getEncoding() {
        return getFileLocator().getEncoding();
    }","  public void test72()  throws Throwable  {
      FileHandler fileHandler0 = new FileHandler();
      fileHandler0.setBasePath(""file:y:"");
}"
1069,"    public String getEncoding() {
        return getFileLocator().getEncoding();
    }","  public void test73()  throws Throwable  {
      FileHandler fileHandler0 = new FileHandler();
      BasePathLocationStrategy basePathLocationStrategy0 = new BasePathLocationStrategy();
      fileHandler0.setLocationStrategy(basePathLocationStrategy0);
}"
1070,"    public String getFileName() {
        final FileLocator locator = getFileLocator();
        if (locator.getFileName() != null) {
            return locator.getFileName();
        }

        if (locator.getSourceURL() != null) {
            return FileLocatorUtils.getFileName(locator.getSourceURL());
        }

        return null;
    }","  public void test74()  throws Throwable  {
      FileHandler fileHandler0 = new FileHandler();
      URL uRL0 = MockURL.getFtpExample();
      URLConnectionOptions uRLConnectionOptions0 = URLConnectionOptions.DEFAULT;
      fileHandler0.setURL(uRL0, uRLConnectionOptions0);
      String string0 = fileHandler0.getFileName();
}"
1071,"    public void loaded(final FileHandler handler) {
    }","  public void test0()  throws Throwable  {
      FileHandlerListenerAdapter fileHandlerListenerAdapter0 = new FileHandlerListenerAdapter();
      HashMap<String, FileLocationStrategy> hashMap0 = new HashMap<String, FileLocationStrategy>();
      FileHandler fileHandler0 = FileHandler.fromMap(hashMap0);
      fileHandlerListenerAdapter0.loaded(fileHandler0);
}"
1072,"    public void saving(final FileHandler handler) {
    }","  public void test1()  throws Throwable  {
      FileHandlerListenerAdapter fileHandlerListenerAdapter0 = new FileHandlerListenerAdapter();
      HashMap<String, FileLocationStrategy> hashMap0 = new HashMap<String, FileLocationStrategy>();
      FileHandler fileHandler0 = FileHandler.fromMap(hashMap0);
      fileHandlerListenerAdapter0.saving(fileHandler0);
}"
1073,"    public void saved(final FileHandler handler) {
    }","  public void test2()  throws Throwable  {
      FileHandlerListenerAdapter fileHandlerListenerAdapter0 = new FileHandlerListenerAdapter();
      HashMap<String, FileLocationStrategy> hashMap0 = new HashMap<String, FileLocationStrategy>();
      FileHandler fileHandler0 = FileHandler.fromMap(hashMap0);
      fileHandlerListenerAdapter0.saved(fileHandler0);
}"
1074,"    public void locationChanged(final FileHandler handler) {
    }","  public void test3()  throws Throwable  {
      FileHandlerListenerAdapter fileHandlerListenerAdapter0 = new FileHandlerListenerAdapter();
      HashMap<String, FileLocationStrategy> hashMap0 = new HashMap<String, FileLocationStrategy>();
      FileHandler fileHandler0 = FileHandler.fromMap(hashMap0);
      fileHandlerListenerAdapter0.locationChanged(fileHandler0);
}"
1075,"    public void loading(final FileHandler handler) {
    }","  public void test4()  throws Throwable  {
      FileHandlerListenerAdapter fileHandlerListenerAdapter0 = new FileHandlerListenerAdapter();
      HashMap<String, FileLocationStrategy> hashMap0 = new HashMap<String, FileLocationStrategy>();
      FileHandler fileHandler0 = FileHandler.fromMap(hashMap0);
      fileHandlerListenerAdapter0.loading(fileHandler0);
}"
1076,"    static File getFile(final String basePath, final String fileName) {
        // Check if the file name is absolute
        final File f = new File(fileName);
        if (f.isAbsolute()) {
            return f;
        }

        // Check if URLs are involved
        URL url;
        try {
            url = new URL(new URL(basePath), fileName);
        } catch (final MalformedURLException mex1) {
            try {
                url = new URL(fileName);
            } catch (final MalformedURLException mex2) {
                url = null;
            }
        }

        if (url != null) {
            return fileFromURL(url);
        }

        return constructFile(basePath, fileName);
    }","  public void test0()  throws Throwable  {
      File file0 = FileLocatorUtils.getFile(""file:file:/tmp/sourceURL"", ""file:file:/media/FSE_USER/extradrive1/toga-eval-FSE_USER-2023/toga-eval/artifacts/commons-configuration2-2.8.0-src/target/test-classes/"");
}"
1077,"    static File getFile(final String basePath, final String fileName) {
        // Check if the file name is absolute
        final File f = new File(fileName);
        if (f.isAbsolute()) {
            return f;
        }

        // Check if URLs are involved
        URL url;
        try {
            url = new URL(new URL(basePath), fileName);
        } catch (final MalformedURLException mex1) {
            try {
                url = new URL(fileName);
            } catch (final MalformedURLException mex2) {
                url = null;
            }
        }

        if (url != null) {
            return fileFromURL(url);
        }

        return constructFile(basePath, fileName);
    }","  public void test1()  throws Throwable  {
      File file0 = FileLocatorUtils.getFile(""file://file:/media/FSE_USER/extradrive1/toga-eval-FSE_USER-2023/toga-eval/artifacts/commons-configuration2-2.8.0-src/Logger%20name%20must%20not%20be%20null!/Logger%20name%20must%20not%20be%20null!"", ""file://file:/media/FSE_USER/extradrive1/toga-eval-FSE_USER-2023/toga-eval/artifacts/commons-configuration2-2.8.0-src/Logger%20name%20must%20not%20be%20null!/Logger%20name%20must%20not%20be%20null!"");
}"
1078,"    public static URL locateOrThrow(final FileLocator locator) throws ConfigurationException {
        final URL url = locate(locator);
        if (url == null) {
            throw new ConfigurationException(""Could not locate: "" + locator);
        }
        return url;
    }","  public void test2()  throws Throwable  {
      VfsComponentContext vfsComponentContext0 = mock(VfsComponentContext.class, new ViolatedAssumptionAnswer());
      FileSystemOptions fileSystemOptions0 = new FileSystemOptions();
      DefaultURLStreamHandler defaultURLStreamHandler0 = new DefaultURLStreamHandler(vfsComponentContext0, fileSystemOptions0);
      URL uRL0 = MockURL.URL(""qdIl=+69;Q7"", ""qdIl=+69;Q7"", 4537, ""qdIl=+69;Q7"", (URLStreamHandler) defaultURLStreamHandler0);
      HashMap<String, URL> hashMap0 = new HashMap<String, URL>();
      FileLocator fileLocator0 = FileLocatorUtils.fromMap(hashMap0);
      FileLocator.FileLocatorBuilder fileLocator_FileLocatorBuilder0 = FileLocatorUtils.fileLocator(fileLocator0);
      fileLocator_FileLocatorBuilder0.sourceURL(uRL0);
      FileLocator fileLocator1 = new FileLocator(fileLocator_FileLocatorBuilder0);
      URL uRL1 = FileLocatorUtils.locateOrThrow(fileLocator1);
}"
1079,"    public static URL locate(final FileLocator locator) {
        if (locator == null) {
            return null;
        }

        return obtainLocationStrategy(locator).locate(obtainFileSystem(locator), locator);
    }","  public void test3()  throws Throwable  {
      VfsComponentContext vfsComponentContext0 = mock(VfsComponentContext.class, new ViolatedAssumptionAnswer());
      FileSystemOptions fileSystemOptions0 = new FileSystemOptions();
      DefaultURLStreamHandler defaultURLStreamHandler0 = new DefaultURLStreamHandler(vfsComponentContext0, fileSystemOptions0);
      URL uRL0 = MockURL.URL(""qdIl=+69;Q7"", ""qdIl=+69;Q7"", 4537, ""qdIl=+69;Q7"", (URLStreamHandler) defaultURLStreamHandler0);
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      FileLocator fileLocator0 = FileLocatorUtils.fromMap(hashMap0);
      FileLocator.FileLocatorBuilder fileLocator_FileLocatorBuilder0 = FileLocatorUtils.fileLocator(fileLocator0);
      FileLocator.FileLocatorBuilder fileLocator_FileLocatorBuilder1 = fileLocator_FileLocatorBuilder0.sourceURL(uRL0);
      FileLocator fileLocator1 = new FileLocator(fileLocator_FileLocatorBuilder1);
      URL uRL1 = FileLocatorUtils.locate(fileLocator1);
}"
1080,"    public static URL locate(final FileLocator locator) {
        if (locator == null) {
            return null;
        }

        return obtainLocationStrategy(locator).locate(obtainFileSystem(locator), locator);
    }","  public void test4()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      URL uRL0 = FileLocatorUtils.toURL(mockFile0);
      HashMap<String, URL> hashMap0 = new HashMap<String, URL>();
      hashMap0.put(""sourceURL"", uRL0);
      FileLocator fileLocator0 = FileLocatorUtils.fromMap(hashMap0);
      URL uRL1 = FileLocatorUtils.locate(fileLocator0);
}"
1081,"    static String getFileName(final URL url) {
        if (url == null) {
            return null;
        }

        final String path = url.getPath();

        if (path.endsWith(""/"") || StringUtils.isEmpty(path)) {
            return null;
        }
        return path.substring(path.lastIndexOf(""/"") + 1);
    }","  public void test5()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      URL uRL0 = FileLocatorUtils.toURL(mockFile0);
      String string0 = FileLocatorUtils.getFileName(uRL0);
}"
1082,"    static String getFileName(final URL url) {
        if (url == null) {
            return null;
        }

        final String path = url.getPath();

        if (path.endsWith(""/"") || StringUtils.isEmpty(path)) {
            return null;
        }
        return path.substring(path.lastIndexOf(""/"") + 1);
    }","  public void test6()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      URL uRL0 = FileLocatorUtils.toURL(mockFile0);
      String string0 = FileLocatorUtils.getFileName(uRL0);
}"
1083,"    static File getFile(final String basePath, final String fileName) {
        // Check if the file name is absolute
        final File f = new File(fileName);
        if (f.isAbsolute()) {
            return f;
        }

        // Check if URLs are involved
        URL url;
        try {
            url = new URL(new URL(basePath), fileName);
        } catch (final MalformedURLException mex1) {
            try {
                url = new URL(fileName);
            } catch (final MalformedURLException mex2) {
                url = null;
            }
        }

        if (url != null) {
            return fileFromURL(url);
        }

        return constructFile(basePath, fileName);
    }","  public void test7()  throws Throwable  {
      File file0 = FileLocatorUtils.getFile(""."", ""http://foo.bar"");
}"
1084,"    static File getFile(final String basePath, final String fileName) {
        // Check if the file name is absolute
        final File f = new File(fileName);
        if (f.isAbsolute()) {
            return f;
        }

        // Check if URLs are involved
        URL url;
        try {
            url = new URL(new URL(basePath), fileName);
        } catch (final MalformedURLException mex1) {
            try {
                url = new URL(fileName);
            } catch (final MalformedURLException mex2) {
                url = null;
            }
        }

        if (url != null) {
            return fileFromURL(url);
        }

        return constructFile(basePath, fileName);
    }","  public void test8()  throws Throwable  {
      File file0 = FileLocatorUtils.getFile(""."", ""./"");
}"
1085,"    static File getFile(final String basePath, final String fileName) {
        // Check if the file name is absolute
        final File f = new File(fileName);
        if (f.isAbsolute()) {
            return f;
        }

        // Check if URLs are involved
        URL url;
        try {
            url = new URL(new URL(basePath), fileName);
        } catch (final MalformedURLException mex1) {
            try {
                url = new URL(fileName);
            } catch (final MalformedURLException mex2) {
                url = null;
            }
        }

        if (url != null) {
            return fileFromURL(url);
        }

        return constructFile(basePath, fileName);
    }","  public void test9()  throws Throwable  {
      File file0 = FileLocatorUtils.getFile(""."", ""./"");
}"
1086,"    static File getFile(final String basePath, final String fileName) {
        // Check if the file name is absolute
        final File f = new File(fileName);
        if (f.isAbsolute()) {
            return f;
        }

        // Check if URLs are involved
        URL url;
        try {
            url = new URL(new URL(basePath), fileName);
        } catch (final MalformedURLException mex1) {
            try {
                url = new URL(fileName);
            } catch (final MalformedURLException mex2) {
                url = null;
            }
        }

        if (url != null) {
            return fileFromURL(url);
        }

        return constructFile(basePath, fileName);
    }","  public void test10()  throws Throwable  {
      File file0 = FileLocatorUtils.getFile(""/"", """");
}"
1087,"    static File getFile(final String basePath, final String fileName) {
        // Check if the file name is absolute
        final File f = new File(fileName);
        if (f.isAbsolute()) {
            return f;
        }

        // Check if URLs are involved
        URL url;
        try {
            url = new URL(new URL(basePath), fileName);
        } catch (final MalformedURLException mex1) {
            try {
                url = new URL(fileName);
            } catch (final MalformedURLException mex2) {
                url = null;
            }
        }

        if (url != null) {
            return fileFromURL(url);
        }

        return constructFile(basePath, fileName);
    }","  public void test11()  throws Throwable  {
      File file0 = FileLocatorUtils.getFile(""/"", """");
}"
1088,"    static File getFile(final String basePath, final String fileName) {
        // Check if the file name is absolute
        final File f = new File(fileName);
        if (f.isAbsolute()) {
            return f;
        }

        // Check if URLs are involved
        URL url;
        try {
            url = new URL(new URL(basePath), fileName);
        } catch (final MalformedURLException mex1) {
            try {
                url = new URL(fileName);
            } catch (final MalformedURLException mex2) {
                url = null;
            }
        }

        if (url != null) {
            return fileFromURL(url);
        }

        return constructFile(basePath, fileName);
    }","  public void test12()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(""<G:E*/y{Y{cO]p]:P`[jFX"");
      byte[] byteArray0 = new byte[5];
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      File file0 = FileLocatorUtils.getFile(""<G:E*"", ""y{Y{cO]p]:P`[jFX"");
}"
1089,"    static File getFile(final String basePath, final String fileName) {
        // Check if the file name is absolute
        final File f = new File(fileName);
        if (f.isAbsolute()) {
            return f;
        }

        // Check if URLs are involved
        URL url;
        try {
            url = new URL(new URL(basePath), fileName);
        } catch (final MalformedURLException mex1) {
            try {
                url = new URL(fileName);
            } catch (final MalformedURLException mex2) {
                url = null;
            }
        }

        if (url != null) {
            return fileFromURL(url);
        }

        return constructFile(basePath, fileName);
    }","  public void test13()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(""<G:E*/y{Y{cO]p]:P`[jFX"");
      byte[] byteArray0 = new byte[5];
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      File file0 = FileLocatorUtils.getFile(""<G:E*"", ""y{Y{cO]p]:P`[jFX"");
}"
1090,"    static String getBasePath(final URL url) {
        if (url == null) {
            return null;
        }

        String s = url.toString();
        if (s.startsWith(FILE_SCHEME) && !s.startsWith(""file://"")) {
            s = ""file://"" + s.substring(FILE_SCHEME.length());
        }

        if (s.endsWith(""/"") || StringUtils.isEmpty(url.getPath())) {
            return s;
        }
        return s.substring(0, s.lastIndexOf(""/"") + 1);
    }","  public void test14()  throws Throwable  {
      VfsComponentContext vfsComponentContext0 = mock(VfsComponentContext.class, new ViolatedAssumptionAnswer());
      FileSystemOptions fileSystemOptions0 = new FileSystemOptions();
      DefaultURLStreamHandler defaultURLStreamHandler0 = new DefaultURLStreamHandler(vfsComponentContext0, fileSystemOptions0);
      URL uRL0 = MockURL.URL(""qdIl=+69;Q7"", ""qdIl=+69;Q7"", 4537, ""qdIl=+69;Q7"", (URLStreamHandler) defaultURLStreamHandler0);
      String string0 = FileLocatorUtils.getBasePath(uRL0);
}"
1091,"    public static File fileFromURL(final URL url) {
        return FileUtils.toFile(url);
    }","  public void test15()  throws Throwable  {
      FileSystemOptions fileSystemOptions0 = new FileSystemOptions();
      DefaultURLStreamHandler defaultURLStreamHandler0 = new DefaultURLStreamHandler((VfsComponentContext) null, fileSystemOptions0);
      URL uRL0 = MockURL.URL(""Cannot access property '"", ""TimeZone"", 0, """", (URLStreamHandler) defaultURLStreamHandler0);
      File file0 = FileLocatorUtils.fileFromURL(uRL0);
}"
1092,"    public static File fileFromURL(final URL url) {
        return FileUtils.toFile(url);
    }","  public void test16()  throws Throwable  {
      VFSFileSystem vFSFileSystem0 = new VFSFileSystem();
      URL uRL0 = vFSFileSystem0.getURL(""sourceURL/"", ""."");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(""sourceURL/."");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, ""sourceURL"");
      File file0 = FileLocatorUtils.fileFromURL(uRL0);
}"
1093,"    public static File fileFromURL(final URL url) {
        return FileUtils.toFile(url);
    }","  public void test17()  throws Throwable  {
      VFSFileSystem vFSFileSystem0 = new VFSFileSystem();
      URL uRL0 = vFSFileSystem0.getURL(""sourceURL/"", ""."");
      File file0 = FileLocatorUtils.fileFromURL(uRL0);
}"
1094,"    public static File fileFromURL(final URL url) {
        return FileUtils.toFile(url);
    }","  public void test18()  throws Throwable  {
      URL uRL0 = MockURL.URL(""file://"");
      File file0 = FileLocatorUtils.fileFromURL(uRL0);
}"
1095,"    static URL convertURIToURL(final URI uri) {
        try {
            return uri.toURL();
        } catch (final MalformedURLException e) {
            return null;
        }
    }","  public void test19()  throws Throwable  {
      URI uRI0 = MockURI.URI(""org.apache.commons.vfs2.FileObject"", ""org.apache.commons.vfs2.FileObject"", ""java.text.DateFormat"");
      URL uRL0 = FileLocatorUtils.convertURIToURL(uRI0);
}"
1096,"    static File constructFile(final String basePath, final String fileName) {
        final File file;

        final File absolute = new File(fileName);
        if (StringUtils.isEmpty(basePath) || absolute.isAbsolute()) {
            file = absolute;
        } else {
            file = new File(appendPath(basePath, fileName));
        }

        return file;
    }","  public void test20()  throws Throwable  {
      File file0 = FileLocatorUtils.constructFile(""file:file:/home/FSE_USER/y%7BY%7BcO%5Dp%5D:P%60%5BjFX"", ""..."");
}"
1097,"    static File constructFile(final String basePath, final String fileName) {
        final File file;

        final File absolute = new File(fileName);
        if (StringUtils.isEmpty(basePath) || absolute.isAbsolute()) {
            file = absolute;
        } else {
            file = new File(appendPath(basePath, fileName));
        }

        return file;
    }","  public void test21()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(""ISO8601/ISO8601"");
      FileSystemHandling.createFolder(evoSuiteFile0);
      File file0 = FileLocatorUtils.constructFile(""ISO8601"", ""ISO8601"");
}"
1098,"    static File constructFile(final String basePath, final String fileName) {
        final File file;

        final File absolute = new File(fileName);
        if (StringUtils.isEmpty(basePath) || absolute.isAbsolute()) {
            file = absolute;
        } else {
            file = new File(appendPath(basePath, fileName));
        }

        return file;
    }","  public void test22()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(""ISO8601/ISO8601"");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, ""fileName"");
      File file0 = FileLocatorUtils.constructFile(""ISO8601"", ""ISO8601"");
}"
1099,"    static URL toURL(final File file) throws MalformedURLException {
        return file.toURI().toURL();
    }","  public void test23()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileLocatorUtils.toURL((File) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.configuration2.io.FileLocatorUtils"", e);
      }
  }"
1100,"    public static URL locateOrThrow(final FileLocator locator) throws ConfigurationException {
        final URL url = locate(locator);
        if (url == null) {
            throw new ConfigurationException(""Could not locate: "" + locator);
        }
        return url;
    }","  public void test24()  throws Throwable  {
      FileLocator.FileLocatorBuilder fileLocator_FileLocatorBuilder0 = FileLocatorUtils.fileLocator();
      FileLocator.FileLocatorBuilder fileLocator_FileLocatorBuilder1 = fileLocator_FileLocatorBuilder0.fileName(""$8 _hC0B98xK1jQv"");
      FileLocator.FileLocatorBuilder fileLocator_FileLocatorBuilder2 = fileLocator_FileLocatorBuilder1.basePath(""file:///"");
      FileLocator fileLocator0 = new FileLocator(fileLocator_FileLocatorBuilder2);
      // Undeclared exception!
      try { 
        FileLocatorUtils.locateOrThrow(fileLocator0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.net.URL"", e);
      }
  }"
1101,"    static URL locateFromClasspath(final String resourceName) {
        URL url = null;
        // attempt to load from the context classpath
        final ClassLoader loader = Thread.currentThread().getContextClassLoader();
        if (loader != null) {
            url = loader.getResource(resourceName);

            if (url != null) {
                LOG.debug(""Loading configuration from the context classpath ("" + resourceName + "")"");
            }
        }

        // attempt to load from the system classpath
        if (url == null) {
            url = ClassLoader.getSystemResource(resourceName);

            if (url != null) {
                LOG.debug(""Loading configuration from the system classpath ("" + resourceName + "")"");
            }
        }
        return url;
    }","  public void test25()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileLocatorUtils.locateFromClasspath((String) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
1102,"    static File getFile(final String basePath, final String fileName) {
        // Check if the file name is absolute
        final File f = new File(fileName);
        if (f.isAbsolute()) {
            return f;
        }

        // Check if URLs are involved
        URL url;
        try {
            url = new URL(new URL(basePath), fileName);
        } catch (final MalformedURLException mex1) {
            try {
                url = new URL(fileName);
            } catch (final MalformedURLException mex2) {
                url = null;
            }
        }

        if (url != null) {
            return fileFromURL(url);
        }

        return constructFile(basePath, fileName);
    }","  public void test26()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileLocatorUtils.getFile((String) null, (String) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.io.File"", e);
      }
  }"
1103,"    public static FileLocator fullyInitializedLocator(final FileLocator locator) {
        if (isFullyInitialized(locator)) {
            // already fully initialized
            return locator;
        }

        final URL url = locate(locator);
        return url != null ? createFullyInitializedLocatorFromURL(locator, url) : null;
    }","  public void test27()  throws Throwable  {
      FileLocator.FileLocatorBuilder fileLocator_FileLocatorBuilder0 = FileLocatorUtils.fileLocator();
      FileLocator.FileLocatorBuilder fileLocator_FileLocatorBuilder1 = fileLocator_FileLocatorBuilder0.fileName(""file:"");
      FileLocator.FileLocatorBuilder fileLocator_FileLocatorBuilder2 = fileLocator_FileLocatorBuilder1.basePath(""file:"");
      FileLocator fileLocator0 = new FileLocator(fileLocator_FileLocatorBuilder2);
      // Undeclared exception!
      try { 
        FileLocatorUtils.fullyInitializedLocator(fileLocator0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.net.URL"", e);
      }
  }"
1104,"    public static FileLocator fromMap(final Map<String, ?> map) {
        final FileLocator.FileLocatorBuilder builder = fileLocator();
        if (map != null) {
            builder.basePath((String) map.get(PROP_BASE_PATH)).encoding((String) map.get(PROP_ENCODING)).fileName((String) map.get(PROP_FILE_NAME))
                .fileSystem((FileSystem) map.get(PROP_FILE_SYSTEM)).locationStrategy((FileLocationStrategy) map.get(PROP_STRATEGY))
                .sourceURL((URL) map.get(PROP_SOURCE_URL));
        }
        return builder.create();
    }","  public void test28()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      URL uRL0 = FileLocatorUtils.toURL(mockFile0);
      HashMap<String, URL> hashMap0 = new HashMap<String, URL>();
      hashMap0.put(""fileName"", uRL0);
      // Undeclared exception!
      try { 
        FileLocatorUtils.fromMap(hashMap0);
        fail(""Expecting exception: ClassCastException"");
      } catch(ClassCastException e) {
         //
         // java.net.URL cannot be cast to java.lang.String
         //
         verifyException(""org.apache.commons.configuration2.io.FileLocatorUtils"", e);
      }
  }"
1105,"    static URL convertURIToURL(final URI uri) {
        try {
            return uri.toURL();
        } catch (final MalformedURLException e) {
            return null;
        }
    }","  public void test29()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileLocatorUtils.convertURIToURL((URI) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
1106,"    static URL convertURIToURL(final URI uri) {
        try {
            return uri.toURL();
        } catch (final MalformedURLException e) {
            return null;
        }
    }","  public void test30()  throws Throwable  {
      URI uRI0 = MockURI.URI(""CD;,o+sd/"", """", ""CD;,o+sd/"", (-1), """", """", ""CD;,o+sd/"");
      // Undeclared exception!
      try { 
        FileLocatorUtils.convertURIToURL(uRI0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // URI is not absolute
         //
         verifyException(""org.evosuite.runtime.mock.java.net.MockURI"", e);
      }
  }"
1107,"    static URL convertFileToURL(final File file) {
        return convertURIToURL(file.toURI());
    }","  public void test31()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileLocatorUtils.convertFileToURL((File) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.configuration2.io.FileLocatorUtils"", e);
      }
  }"
1108,"    static File constructFile(final String basePath, final String fileName) {
        final File file;

        final File absolute = new File(fileName);
        if (StringUtils.isEmpty(basePath) || absolute.isAbsolute()) {
            file = absolute;
        } else {
            file = new File(appendPath(basePath, fileName));
        }

        return file;
    }","  public void test32()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileLocatorUtils.constructFile((String) null, (String) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.io.File"", e);
      }
  }"
1109,"    static String appendPath(final String path, final String ext) {
        final StringBuilder fName = new StringBuilder();
        fName.append(path);

        // My best friend. Paranoia.
        if (!path.endsWith(File.separator)) {
            fName.append(File.separator);
        }

        //
        // We have a relative path, and we have
        // two possible forms here. If we have the
        // ""./"" form then just strip that off first
        // before continuing.
        //
        if (ext.startsWith(""."" + File.separator)) {
            fName.append(ext.substring(2));
        } else {
            fName.append(ext);
        }
        return fName.toString();
    }","  public void test33()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileLocatorUtils.appendPath((String) null, ""<G:E*"");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
1110,"    public static URL locate(final FileLocator locator) {
        if (locator == null) {
            return null;
        }

        return obtainLocationStrategy(locator).locate(obtainFileSystem(locator), locator);
    }","  public void test34()  throws Throwable  {
      HashMap<String, URL> hashMap0 = new HashMap<String, URL>();
      FileLocator fileLocator0 = FileLocatorUtils.fromMap(hashMap0);
      URL uRL0 = FileLocatorUtils.locate(fileLocator0);
}"
1111,"    public static boolean isFullyInitialized(final FileLocator locator) {
        if (locator == null) {
            return false;
        }
        return locator.getBasePath() != null && locator.getFileName() != null && locator.getSourceURL() != null;
    }","  public void test35()  throws Throwable  {
      FileLocator.FileLocatorBuilder fileLocator_FileLocatorBuilder0 = FileLocatorUtils.fileLocator();
      FileLocator.FileLocatorBuilder fileLocator_FileLocatorBuilder1 = fileLocator_FileLocatorBuilder0.fileName(""./y{Y{cO]p]:P`[jFX"");
      FileLocator.FileLocatorBuilder fileLocator_FileLocatorBuilder2 = fileLocator_FileLocatorBuilder1.basePath(""./y{Y{cO]p]:P`[jFX"");
      FileLocator fileLocator0 = new FileLocator(fileLocator_FileLocatorBuilder2);
      boolean boolean0 = FileLocatorUtils.isFullyInitialized(fileLocator0);
}"
1112,"    public static boolean isFullyInitialized(final FileLocator locator) {
        if (locator == null) {
            return false;
        }
        return locator.getBasePath() != null && locator.getFileName() != null && locator.getSourceURL() != null;
    }","  public void test36()  throws Throwable  {
      HashMap<String, BasePathLocationStrategy> hashMap0 = new HashMap<String, BasePathLocationStrategy>();
      FileLocator fileLocator0 = FileLocatorUtils.fromMap(hashMap0);
      boolean boolean0 = FileLocatorUtils.isFullyInitialized(fileLocator0);
}"
1113,"    static String getFileName(final URL url) {
        if (url == null) {
            return null;
        }

        final String path = url.getPath();

        if (path.endsWith(""/"") || StringUtils.isEmpty(path)) {
            return null;
        }
        return path.substring(path.lastIndexOf(""/"") + 1);
    }","  public void test37()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      URL uRL0 = FileLocatorUtils.toURL(mockFile0);
      HashMap<String, URL> hashMap0 = new HashMap<String, URL>();
      hashMap0.put(""sourceURL"", uRL0);
      FileLocator fileLocator0 = FileLocatorUtils.fromMap(hashMap0);
      FileLocator fileLocator1 = FileLocatorUtils.fullyInitializedLocator(fileLocator0);
      boolean boolean0 = FileLocatorUtils.isFullyInitialized(fileLocator1);
}"
1114,"    static String getBasePath(final URL url) {
        if (url == null) {
            return null;
        }

        String s = url.toString();
        if (s.startsWith(FILE_SCHEME) && !s.startsWith(""file://"")) {
            s = ""file://"" + s.substring(FILE_SCHEME.length());
        }

        if (s.endsWith(""/"") || StringUtils.isEmpty(url.getPath())) {
            return s;
        }
        return s.substring(0, s.lastIndexOf(""/"") + 1);
    }","  public void test38()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      URL uRL0 = FileLocatorUtils.toURL(mockFile0);
      HashMap<String, URL> hashMap0 = new HashMap<String, URL>();
      hashMap0.put(""sourceURL"", uRL0);
      FileLocator fileLocator0 = FileLocatorUtils.fromMap(hashMap0);
      FileLocator fileLocator1 = FileLocatorUtils.fullyInitializedLocator(fileLocator0);
      boolean boolean0 = FileLocatorUtils.isFullyInitialized(fileLocator1);
}"
1115,"    public static boolean isFullyInitialized(final FileLocator locator) {
        if (locator == null) {
            return false;
        }
        return locator.getBasePath() != null && locator.getFileName() != null && locator.getSourceURL() != null;
    }","  public void test39()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      URL uRL0 = FileLocatorUtils.toURL(mockFile0);
      HashMap<String, URL> hashMap0 = new HashMap<String, URL>();
      hashMap0.put(""sourceURL"", uRL0);
      FileLocator fileLocator0 = FileLocatorUtils.fromMap(hashMap0);
      FileLocator fileLocator1 = FileLocatorUtils.fullyInitializedLocator(fileLocator0);
      boolean boolean0 = FileLocatorUtils.isFullyInitialized(fileLocator1);
}"
1116,"    public static boolean isFullyInitialized(final FileLocator locator) {
        if (locator == null) {
            return false;
        }
        return locator.getBasePath() != null && locator.getFileName() != null && locator.getSourceURL() != null;
    }","  public void test40()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      URL uRL0 = FileLocatorUtils.toURL(mockFile0);
      HashMap<String, URL> hashMap0 = new HashMap<String, URL>();
      hashMap0.put(""sourceURL"", uRL0);
      FileLocator fileLocator0 = FileLocatorUtils.fromMap(hashMap0);
      FileLocator fileLocator1 = FileLocatorUtils.fullyInitializedLocator(fileLocator0);
      boolean boolean0 = FileLocatorUtils.isFullyInitialized(fileLocator1);
}"
1117,"    public static void put(final FileLocator locator, final Map<String, Object> map) {
        if (map == null) {
            throw new IllegalArgumentException(""Map must not be null!"");
        }

        if (locator != null) {
            map.put(PROP_BASE_PATH, locator.getBasePath());
            map.put(PROP_ENCODING, locator.getEncoding());
            map.put(PROP_FILE_NAME, locator.getFileName());
            map.put(PROP_FILE_SYSTEM, locator.getFileSystem());
            map.put(PROP_SOURCE_URL, locator.getSourceURL());
            map.put(PROP_STRATEGY, locator.getLocationStrategy());
        }
    }","  public void test41()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      FileLocatorUtils.put((FileLocator) null, hashMap0);
}"
1118,"    public static void put(final FileLocator locator, final Map<String, Object> map) {
        if (map == null) {
            throw new IllegalArgumentException(""Map must not be null!"");
        }

        if (locator != null) {
            map.put(PROP_BASE_PATH, locator.getBasePath());
            map.put(PROP_ENCODING, locator.getEncoding());
            map.put(PROP_FILE_NAME, locator.getFileName());
            map.put(PROP_FILE_SYSTEM, locator.getFileSystem());
            map.put(PROP_SOURCE_URL, locator.getSourceURL());
            map.put(PROP_STRATEGY, locator.getLocationStrategy());
        }
    }","  public void test42()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileLocatorUtils.put((FileLocator) null, (Map<String, Object>) null);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Map must not be null!
         //
         verifyException(""org.apache.commons.configuration2.io.FileLocatorUtils"", e);
      }
  }"
1119,"    public static void put(final FileLocator locator, final Map<String, Object> map) {
        if (map == null) {
            throw new IllegalArgumentException(""Map must not be null!"");
        }

        if (locator != null) {
            map.put(PROP_BASE_PATH, locator.getBasePath());
            map.put(PROP_ENCODING, locator.getEncoding());
            map.put(PROP_FILE_NAME, locator.getFileName());
            map.put(PROP_FILE_SYSTEM, locator.getFileSystem());
            map.put(PROP_SOURCE_URL, locator.getSourceURL());
            map.put(PROP_STRATEGY, locator.getLocationStrategy());
        }
    }","  public void test43()  throws Throwable  {
      HashMap<String, FileSystemLocationStrategy> hashMap0 = new HashMap<String, FileSystemLocationStrategy>();
      FileLocator fileLocator0 = FileLocatorUtils.fromMap(hashMap0);
      HashMap<String, Object> hashMap1 = new HashMap<String, Object>();
      FileLocatorUtils.put(fileLocator0, hashMap1);
}"
1120,"    public static void put(final FileLocator locator, final Map<String, Object> map) {
        if (map == null) {
            throw new IllegalArgumentException(""Map must not be null!"");
        }

        if (locator != null) {
            map.put(PROP_BASE_PATH, locator.getBasePath());
            map.put(PROP_ENCODING, locator.getEncoding());
            map.put(PROP_FILE_NAME, locator.getFileName());
            map.put(PROP_FILE_SYSTEM, locator.getFileSystem());
            map.put(PROP_SOURCE_URL, locator.getSourceURL());
            map.put(PROP_STRATEGY, locator.getLocationStrategy());
        }
    }","  public void test44()  throws Throwable  {
      HashMap<String, FileSystemLocationStrategy> hashMap0 = new HashMap<String, FileSystemLocationStrategy>();
      FileLocator fileLocator0 = FileLocatorUtils.fromMap(hashMap0);
      HashMap<String, Object> hashMap1 = new HashMap<String, Object>();
      FileLocatorUtils.put(fileLocator0, hashMap1);
}"
1121,"    static FileLocationStrategy obtainLocationStrategy(final FileLocator locator) {
        return locator != null ? ObjectUtils.defaultIfNull(locator.getLocationStrategy(), DEFAULT_LOCATION_STRATEGY) : DEFAULT_LOCATION_STRATEGY;
    }","  public void test45()  throws Throwable  {
      FileLocationStrategy fileLocationStrategy0 = FileLocatorUtils.obtainLocationStrategy((FileLocator) null);
}"
1122,"    static FileSystem obtainFileSystem(final FileLocator locator) {
        return locator != null ? ObjectUtils.defaultIfNull(locator.getFileSystem(), DEFAULT_FILE_SYSTEM) : DEFAULT_FILE_SYSTEM;
    }","  public void test46()  throws Throwable  {
      FileSystem fileSystem0 = FileLocatorUtils.obtainFileSystem((FileLocator) null);
}"
1123,"    public static URL locateOrThrow(final FileLocator locator) throws ConfigurationException {
        final URL url = locate(locator);
        if (url == null) {
            throw new ConfigurationException(""Could not locate: "" + locator);
        }
        return url;
    }","  public void test47()  throws Throwable  {
      HashMap<String, DefaultFileSystem> hashMap0 = new HashMap<String, DefaultFileSystem>();
      FileLocator fileLocator0 = FileLocatorUtils.fromMap(hashMap0);
      try { 
        FileLocatorUtils.locateOrThrow(fileLocator0);
        fail(""Expecting exception: Exception"");
      } catch(Exception e) {
         //
         // Could not locate: FileLocator [basePath=null, encoding=null, fileName=null, fileSystem=null, locationStrategy=null, sourceURL=null, urlConnectionOptions=null]
         //
         verifyException(""org.apache.commons.configuration2.io.FileLocatorUtils"", e);
      }
  }"
1124,"    static URL locateFromClasspath(final String resourceName) {
        URL url = null;
        // attempt to load from the context classpath
        final ClassLoader loader = Thread.currentThread().getContextClassLoader();
        if (loader != null) {
            url = loader.getResource(resourceName);

            if (url != null) {
                LOG.debug(""Loading configuration from the context classpath ("" + resourceName + "")"");
            }
        }

        // attempt to load from the system classpath
        if (url == null) {
            url = ClassLoader.getSystemResource(resourceName);

            if (url != null) {
                LOG.debug(""Loading configuration from the system classpath ("" + resourceName + "")"");
            }
        }
        return url;
    }","  public void test48()  throws Throwable  {
      URL uRL0 = FileLocatorUtils.locateFromClasspath(""sourceURL"");
}"
1125,"    public static URL locate(final FileLocator locator) {
        if (locator == null) {
            return null;
        }

        return obtainLocationStrategy(locator).locate(obtainFileSystem(locator), locator);
    }","  public void test49()  throws Throwable  {
      URL uRL0 = FileLocatorUtils.locate((FileLocator) null);
}"
1126,"    public static boolean isLocationDefined(final FileLocator locator) {
        return locator != null && (locator.getFileName() != null || locator.getSourceURL() != null);
    }","  public void test50()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      URL uRL0 = FileLocatorUtils.toURL(mockFile0);
      HashMap<String, URL> hashMap0 = new HashMap<String, URL>();
      hashMap0.put(""sourceURL"", uRL0);
      FileLocator fileLocator0 = FileLocatorUtils.fromMap(hashMap0);
      boolean boolean0 = FileLocatorUtils.isLocationDefined(fileLocator0);
}"
1127,"    static String getFileName(final URL url) {
        if (url == null) {
            return null;
        }

        final String path = url.getPath();

        if (path.endsWith(""/"") || StringUtils.isEmpty(path)) {
            return null;
        }
        return path.substring(path.lastIndexOf(""/"") + 1);
    }","  public void test51()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      URL uRL0 = FileLocatorUtils.toURL(mockFile0);
      HashMap<String, URL> hashMap0 = new HashMap<String, URL>();
      hashMap0.put(""sourceURL"", uRL0);
      FileLocator fileLocator0 = FileLocatorUtils.fromMap(hashMap0);
      FileLocator fileLocator1 = FileLocatorUtils.fullyInitializedLocator(fileLocator0);
      boolean boolean0 = FileLocatorUtils.isLocationDefined(fileLocator1);
}"
1128,"    public static boolean isLocationDefined(final FileLocator locator) {
        return locator != null && (locator.getFileName() != null || locator.getSourceURL() != null);
    }","  public void test52()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      URL uRL0 = FileLocatorUtils.toURL(mockFile0);
      HashMap<String, URL> hashMap0 = new HashMap<String, URL>();
      hashMap0.put(""sourceURL"", uRL0);
      FileLocator fileLocator0 = FileLocatorUtils.fromMap(hashMap0);
      FileLocator fileLocator1 = FileLocatorUtils.fullyInitializedLocator(fileLocator0);
      boolean boolean0 = FileLocatorUtils.isLocationDefined(fileLocator1);
}"
1129,"    static String getBasePath(final URL url) {
        if (url == null) {
            return null;
        }

        String s = url.toString();
        if (s.startsWith(FILE_SCHEME) && !s.startsWith(""file://"")) {
            s = ""file://"" + s.substring(FILE_SCHEME.length());
        }

        if (s.endsWith(""/"") || StringUtils.isEmpty(url.getPath())) {
            return s;
        }
        return s.substring(0, s.lastIndexOf(""/"") + 1);
    }","  public void test53()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      URL uRL0 = FileLocatorUtils.toURL(mockFile0);
      HashMap<String, URL> hashMap0 = new HashMap<String, URL>();
      hashMap0.put(""sourceURL"", uRL0);
      FileLocator fileLocator0 = FileLocatorUtils.fromMap(hashMap0);
      FileLocator fileLocator1 = FileLocatorUtils.fullyInitializedLocator(fileLocator0);
      boolean boolean0 = FileLocatorUtils.isLocationDefined(fileLocator1);
}"
1130,"    public static boolean isLocationDefined(final FileLocator locator) {
        return locator != null && (locator.getFileName() != null || locator.getSourceURL() != null);
    }","  public void test54()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      URL uRL0 = FileLocatorUtils.toURL(mockFile0);
      HashMap<String, URL> hashMap0 = new HashMap<String, URL>();
      hashMap0.put(""sourceURL"", uRL0);
      FileLocator fileLocator0 = FileLocatorUtils.fromMap(hashMap0);
      FileLocator fileLocator1 = FileLocatorUtils.fullyInitializedLocator(fileLocator0);
      boolean boolean0 = FileLocatorUtils.isLocationDefined(fileLocator1);
}"
1131,"    public static boolean isLocationDefined(final FileLocator locator) {
        return locator != null && (locator.getFileName() != null || locator.getSourceURL() != null);
    }","  public void test55()  throws Throwable  {
      HashMap<String, URL> hashMap0 = new HashMap<String, URL>();
      FileLocator fileLocator0 = FileLocatorUtils.fromMap(hashMap0);
      boolean boolean0 = FileLocatorUtils.isLocationDefined(fileLocator0);
}"
1132,"    public static boolean isLocationDefined(final FileLocator locator) {
        return locator != null && (locator.getFileName() != null || locator.getSourceURL() != null);
    }","  public void test56()  throws Throwable  {
      boolean boolean0 = FileLocatorUtils.isLocationDefined((FileLocator) null);
}"
1133,"    public static boolean isFullyInitialized(final FileLocator locator) {
        if (locator == null) {
            return false;
        }
        return locator.getBasePath() != null && locator.getFileName() != null && locator.getSourceURL() != null;
    }","  public void test57()  throws Throwable  {
      FileLocator.FileLocatorBuilder fileLocator_FileLocatorBuilder0 = FileLocatorUtils.fileLocator();
      fileLocator_FileLocatorBuilder0.basePath("""");
      FileLocator fileLocator0 = fileLocator_FileLocatorBuilder0.create();
      boolean boolean0 = FileLocatorUtils.isFullyInitialized(fileLocator0);
}"
1134,"    public static boolean isFullyInitialized(final FileLocator locator) {
        if (locator == null) {
            return false;
        }
        return locator.getBasePath() != null && locator.getFileName() != null && locator.getSourceURL() != null;
    }","  public void test58()  throws Throwable  {
      boolean boolean0 = FileLocatorUtils.isFullyInitialized((FileLocator) null);
}"
1135,"    static String getFileName(final URL url) {
        if (url == null) {
            return null;
        }

        final String path = url.getPath();

        if (path.endsWith(""/"") || StringUtils.isEmpty(path)) {
            return null;
        }
        return path.substring(path.lastIndexOf(""/"") + 1);
    }","  public void test59()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = FileLocatorUtils.convertURIToURL(uRI0);
      String string0 = FileLocatorUtils.getFileName(uRL0);
}"
1136,"    static String getFileName(final URL url) {
        if (url == null) {
            return null;
        }

        final String path = url.getPath();

        if (path.endsWith(""/"") || StringUtils.isEmpty(path)) {
            return null;
        }
        return path.substring(path.lastIndexOf(""/"") + 1);
    }","  public void test60()  throws Throwable  {
      VFSFileSystem vFSFileSystem0 = new VFSFileSystem();
      URL uRL0 = vFSFileSystem0.getURL(""org.apache.commonE.vfs2.util.FileObjectUils"", ""/"");
      String string0 = FileLocatorUtils.getFileName(uRL0);
}"
1137,"    static String getFileName(final URL url) {
        if (url == null) {
            return null;
        }

        final String path = url.getPath();

        if (path.endsWith(""/"") || StringUtils.isEmpty(path)) {
            return null;
        }
        return path.substring(path.lastIndexOf(""/"") + 1);
    }","  public void test61()  throws Throwable  {
      String string0 = FileLocatorUtils.getFileName((URL) null);
}"
1138,"    static File getFile(final String basePath, final String fileName) {
        // Check if the file name is absolute
        final File f = new File(fileName);
        if (f.isAbsolute()) {
            return f;
        }

        // Check if URLs are involved
        URL url;
        try {
            url = new URL(new URL(basePath), fileName);
        } catch (final MalformedURLException mex1) {
            try {
                url = new URL(fileName);
            } catch (final MalformedURLException mex2) {
                url = null;
            }
        }

        if (url != null) {
            return fileFromURL(url);
        }

        return constructFile(basePath, fileName);
    }","  public void test62()  throws Throwable  {
      File file0 = FileLocatorUtils.getFile(""[<LDu?_CiP"", ""/;Z.dc"");
}"
1139,"    static String getBasePath(final URL url) {
        if (url == null) {
            return null;
        }

        String s = url.toString();
        if (s.startsWith(FILE_SCHEME) && !s.startsWith(""file://"")) {
            s = ""file://"" + s.substring(FILE_SCHEME.length());
        }

        if (s.endsWith(""/"") || StringUtils.isEmpty(url.getPath())) {
            return s;
        }
        return s.substring(0, s.lastIndexOf(""/"") + 1);
    }","  public void test64()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      String string0 = FileLocatorUtils.getBasePath(uRL0);
}"
1140,"    static String getBasePath(final URL url) {
        if (url == null) {
            return null;
        }

        String s = url.toString();
        if (s.startsWith(FILE_SCHEME) && !s.startsWith(""file://"")) {
            s = ""file://"" + s.substring(FILE_SCHEME.length());
        }

        if (s.endsWith(""/"") || StringUtils.isEmpty(url.getPath())) {
            return s;
        }
        return s.substring(0, s.lastIndexOf(""/"") + 1);
    }","  public void test65()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = FileLocatorUtils.convertURIToURL(uRI0);
      String string0 = FileLocatorUtils.getBasePath(uRL0);
}"
1141,"    static String getBasePath(final URL url) {
        if (url == null) {
            return null;
        }

        String s = url.toString();
        if (s.startsWith(FILE_SCHEME) && !s.startsWith(""file://"")) {
            s = ""file://"" + s.substring(FILE_SCHEME.length());
        }

        if (s.endsWith(""/"") || StringUtils.isEmpty(url.getPath())) {
            return s;
        }
        return s.substring(0, s.lastIndexOf(""/"") + 1);
    }","  public void test66()  throws Throwable  {
      String string0 = FileLocatorUtils.getBasePath((URL) null);
}"
1142,"    static String getBasePath(final URL url) {
        if (url == null) {
            return null;
        }

        String s = url.toString();
        if (s.startsWith(FILE_SCHEME) && !s.startsWith(""file://"")) {
            s = ""file://"" + s.substring(FILE_SCHEME.length());
        }

        if (s.endsWith(""/"") || StringUtils.isEmpty(url.getPath())) {
            return s;
        }
        return s.substring(0, s.lastIndexOf(""/"") + 1);
    }","  public void test67()  throws Throwable  {
      FileLocator fileLocator0 = FileLocatorUtils.fromMap((Map<String, ?>) null);
}"
1143,"    public static FileLocator fullyInitializedLocator(final FileLocator locator) {
        if (isFullyInitialized(locator)) {
            // already fully initialized
            return locator;
        }

        final URL url = locate(locator);
        return url != null ? createFullyInitializedLocatorFromURL(locator, url) : null;
    }","  public void test68()  throws Throwable  {
      FileLocator.FileLocatorBuilder fileLocator_FileLocatorBuilder0 = FileLocatorUtils.fileLocator();
      FileLocator.FileLocatorBuilder fileLocator_FileLocatorBuilder1 = fileLocator_FileLocatorBuilder0.fileName(""./y{Y{cO]p]:P`[jFX"");
      FileLocator.FileLocatorBuilder fileLocator_FileLocatorBuilder2 = fileLocator_FileLocatorBuilder1.basePath(""./y{Y{cO]p]:P`[jFX"");
      FileLocator fileLocator0 = new FileLocator(fileLocator_FileLocatorBuilder2);
      FileLocator fileLocator1 = FileLocatorUtils.fullyInitializedLocator(fileLocator0);
}"
1144,"    public static FileLocator fullyInitializedLocator(final FileLocator locator) {
        if (isFullyInitialized(locator)) {
            // already fully initialized
            return locator;
        }

        final URL url = locate(locator);
        return url != null ? createFullyInitializedLocatorFromURL(locator, url) : null;
    }","  public void test69()  throws Throwable  {
      FileLocator.FileLocatorBuilder fileLocator_FileLocatorBuilder0 = FileLocatorUtils.fileLocator();
      FileLocator.FileLocatorBuilder fileLocator_FileLocatorBuilder1 = fileLocator_FileLocatorBuilder0.fileName(""./y{Y{cO]p]:P`[jFX"");
      FileLocator.FileLocatorBuilder fileLocator_FileLocatorBuilder2 = fileLocator_FileLocatorBuilder1.basePath(""./y{Y{cO]p]:P`[jFX"");
      FileLocator fileLocator0 = new FileLocator(fileLocator_FileLocatorBuilder2);
      FileLocator fileLocator1 = FileLocatorUtils.fullyInitializedLocator(fileLocator0);
}"
1145,"    static String getBasePath(final URL url) {
        if (url == null) {
            return null;
        }

        String s = url.toString();
        if (s.startsWith(FILE_SCHEME) && !s.startsWith(""file://"")) {
            s = ""file://"" + s.substring(FILE_SCHEME.length());
        }

        if (s.endsWith(""/"") || StringUtils.isEmpty(url.getPath())) {
            return s;
        }
        return s.substring(0, s.lastIndexOf(""/"") + 1);
    }","  public void test70()  throws Throwable  {
      FileLocator.FileLocatorBuilder fileLocator_FileLocatorBuilder0 = FileLocatorUtils.fileLocator();
      FileLocator.FileLocatorBuilder fileLocator_FileLocatorBuilder1 = fileLocator_FileLocatorBuilder0.fileName(""./y{Y{cO]p]:P`[jFX"");
      FileLocator.FileLocatorBuilder fileLocator_FileLocatorBuilder2 = fileLocator_FileLocatorBuilder1.basePath(""./y{Y{cO]p]:P`[jFX"");
      FileLocator fileLocator0 = new FileLocator(fileLocator_FileLocatorBuilder2);
      FileLocator fileLocator1 = FileLocatorUtils.fullyInitializedLocator(fileLocator0);
}"
1146,"    static String getFileName(final URL url) {
        if (url == null) {
            return null;
        }

        final String path = url.getPath();

        if (path.endsWith(""/"") || StringUtils.isEmpty(path)) {
            return null;
        }
        return path.substring(path.lastIndexOf(""/"") + 1);
    }","  public void test71()  throws Throwable  {
      FileLocator.FileLocatorBuilder fileLocator_FileLocatorBuilder0 = FileLocatorUtils.fileLocator();
      FileLocator.FileLocatorBuilder fileLocator_FileLocatorBuilder1 = fileLocator_FileLocatorBuilder0.fileName(""./y{Y{cO]p]:P`[jFX"");
      FileLocator.FileLocatorBuilder fileLocator_FileLocatorBuilder2 = fileLocator_FileLocatorBuilder1.basePath(""./y{Y{cO]p]:P`[jFX"");
      FileLocator fileLocator0 = new FileLocator(fileLocator_FileLocatorBuilder2);
      FileLocator fileLocator1 = FileLocatorUtils.fullyInitializedLocator(fileLocator0);
}"
1147,"    static String getBasePath(final URL url) {
        if (url == null) {
            return null;
        }

        String s = url.toString();
        if (s.startsWith(FILE_SCHEME) && !s.startsWith(""file://"")) {
            s = ""file://"" + s.substring(FILE_SCHEME.length());
        }

        if (s.endsWith(""/"") || StringUtils.isEmpty(url.getPath())) {
            return s;
        }
        return s.substring(0, s.lastIndexOf(""/"") + 1);
    }","  public void test72()  throws Throwable  {
      FileLocator.FileLocatorBuilder fileLocator_FileLocatorBuilder0 = FileLocatorUtils.fileLocator();
      fileLocator_FileLocatorBuilder0.fileName(""./y{Y{cO]p]:P`[jFX"");
      FileLocator fileLocator0 = new FileLocator(fileLocator_FileLocatorBuilder0);
      FileLocator fileLocator1 = FileLocatorUtils.fullyInitializedLocator(fileLocator0);
}"
1148,"    public static FileLocator fullyInitializedLocator(final FileLocator locator) {
        if (isFullyInitialized(locator)) {
            // already fully initialized
            return locator;
        }

        final URL url = locate(locator);
        return url != null ? createFullyInitializedLocatorFromURL(locator, url) : null;
    }","  public void test73()  throws Throwable  {
      FileLocator.FileLocatorBuilder fileLocator_FileLocatorBuilder0 = FileLocatorUtils.fileLocator();
      fileLocator_FileLocatorBuilder0.fileName(""./y{Y{cO]p]:P`[jFX"");
      FileLocator fileLocator0 = new FileLocator(fileLocator_FileLocatorBuilder0);
      FileLocator fileLocator1 = FileLocatorUtils.fullyInitializedLocator(fileLocator0);
}"
1149,"    static String getFileName(final URL url) {
        if (url == null) {
            return null;
        }

        final String path = url.getPath();

        if (path.endsWith(""/"") || StringUtils.isEmpty(path)) {
            return null;
        }
        return path.substring(path.lastIndexOf(""/"") + 1);
    }","  public void test74()  throws Throwable  {
      FileLocator.FileLocatorBuilder fileLocator_FileLocatorBuilder0 = FileLocatorUtils.fileLocator();
      fileLocator_FileLocatorBuilder0.fileName(""./y{Y{cO]p]:P`[jFX"");
      FileLocator fileLocator0 = new FileLocator(fileLocator_FileLocatorBuilder0);
      FileLocator fileLocator1 = FileLocatorUtils.fullyInitializedLocator(fileLocator0);
}"
1150,"    public static FileLocator fullyInitializedLocator(final FileLocator locator) {
        if (isFullyInitialized(locator)) {
            // already fully initialized
            return locator;
        }

        final URL url = locate(locator);
        return url != null ? createFullyInitializedLocatorFromURL(locator, url) : null;
    }","  public void test75()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      URL uRL0 = FileLocatorUtils.toURL(mockFile0);
      HashMap<String, URL> hashMap0 = new HashMap<String, URL>();
      hashMap0.put(""sourceURL"", uRL0);
      FileLocator fileLocator0 = FileLocatorUtils.fromMap(hashMap0);
      FileLocator fileLocator1 = FileLocatorUtils.fullyInitializedLocator(fileLocator0);
}"
1151,"    static String getFileName(final URL url) {
        if (url == null) {
            return null;
        }

        final String path = url.getPath();

        if (path.endsWith(""/"") || StringUtils.isEmpty(path)) {
            return null;
        }
        return path.substring(path.lastIndexOf(""/"") + 1);
    }","  public void test76()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      URL uRL0 = FileLocatorUtils.toURL(mockFile0);
      HashMap<String, URL> hashMap0 = new HashMap<String, URL>();
      hashMap0.put(""sourceURL"", uRL0);
      FileLocator fileLocator0 = FileLocatorUtils.fromMap(hashMap0);
      FileLocator fileLocator1 = FileLocatorUtils.fullyInitializedLocator(fileLocator0);
      FileLocator fileLocator2 = FileLocatorUtils.fullyInitializedLocator(fileLocator1);
}"
1152,"    public static FileLocator fullyInitializedLocator(final FileLocator locator) {
        if (isFullyInitialized(locator)) {
            // already fully initialized
            return locator;
        }

        final URL url = locate(locator);
        return url != null ? createFullyInitializedLocatorFromURL(locator, url) : null;
    }","  public void test77()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      URL uRL0 = FileLocatorUtils.toURL(mockFile0);
      HashMap<String, URL> hashMap0 = new HashMap<String, URL>();
      hashMap0.put(""sourceURL"", uRL0);
      FileLocator fileLocator0 = FileLocatorUtils.fromMap(hashMap0);
      FileLocator fileLocator1 = FileLocatorUtils.fullyInitializedLocator(fileLocator0);
      FileLocator fileLocator2 = FileLocatorUtils.fullyInitializedLocator(fileLocator1);
}"
1153,"    static String getBasePath(final URL url) {
        if (url == null) {
            return null;
        }

        String s = url.toString();
        if (s.startsWith(FILE_SCHEME) && !s.startsWith(""file://"")) {
            s = ""file://"" + s.substring(FILE_SCHEME.length());
        }

        if (s.endsWith(""/"") || StringUtils.isEmpty(url.getPath())) {
            return s;
        }
        return s.substring(0, s.lastIndexOf(""/"") + 1);
    }","  public void test78()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      URL uRL0 = FileLocatorUtils.toURL(mockFile0);
      HashMap<String, URL> hashMap0 = new HashMap<String, URL>();
      hashMap0.put(""sourceURL"", uRL0);
      FileLocator fileLocator0 = FileLocatorUtils.fromMap(hashMap0);
      FileLocator fileLocator1 = FileLocatorUtils.fullyInitializedLocator(fileLocator0);
      FileLocator fileLocator2 = FileLocatorUtils.fullyInitializedLocator(fileLocator1);
}"
1154,"    public static FileLocator fullyInitializedLocator(final FileLocator locator) {
        if (isFullyInitialized(locator)) {
            // already fully initialized
            return locator;
        }

        final URL url = locate(locator);
        return url != null ? createFullyInitializedLocatorFromURL(locator, url) : null;
    }","  public void test79()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      URL uRL0 = FileLocatorUtils.toURL(mockFile0);
      HashMap<String, URL> hashMap0 = new HashMap<String, URL>();
      hashMap0.put(""sourceURL"", uRL0);
      FileLocator fileLocator0 = FileLocatorUtils.fromMap(hashMap0);
      FileLocator fileLocator1 = FileLocatorUtils.fullyInitializedLocator(fileLocator0);
      FileLocator fileLocator2 = FileLocatorUtils.fullyInitializedLocator(fileLocator1);
}"
1155,"    static File constructFile(final String basePath, final String fileName) {
        final File file;

        final File absolute = new File(fileName);
        if (StringUtils.isEmpty(basePath) || absolute.isAbsolute()) {
            file = absolute;
        } else {
            file = new File(appendPath(basePath, fileName));
        }

        return file;
    }","  public void test80()  throws Throwable  {
      File file0 = FileLocatorUtils.constructFile(""basePath"", ""/tmp/sourceURL/"");
}"
1156,"    public static URL locateOrThrow(final FileLocator locator) throws ConfigurationException {
        final URL url = locate(locator);
        if (url == null) {
            throw new ConfigurationException(""Could not locate: "" + locator);
        }
        return url;
    }","  public void test81()  throws Throwable  {
      FileLocator.FileLocatorBuilder fileLocator_FileLocatorBuilder0 = FileLocatorUtils.fileLocator();
      fileLocator_FileLocatorBuilder0.fileName(""./U pUBq:/"");
      FileLocator fileLocator0 = new FileLocator(fileLocator_FileLocatorBuilder0);
      URL uRL0 = FileLocatorUtils.locateOrThrow(fileLocator0);
}"
1157,"    static String appendPath(final String path, final String ext) {
        final StringBuilder fName = new StringBuilder();
        fName.append(path);

        // My best friend. Paranoia.
        if (!path.endsWith(File.separator)) {
            fName.append(File.separator);
        }

        //
        // We have a relative path, and we have
        // two possible forms here. If we have the
        // ""./"" form then just strip that off first
        // before continuing.
        //
        if (ext.startsWith(""."" + File.separator)) {
            fName.append(ext.substring(2));
        } else {
            fName.append(ext);
        }
        return fName.toString();
    }","  public void test82()  throws Throwable  {
      String string0 = FileLocatorUtils.appendPath(""./y{Y{cO]p]:P`[jFX"", ""./y{Y{cO]p]:P`[jFX"");
}"
1158,"    public static FileLocator fullyInitializedLocator(final FileLocator locator) {
        if (isFullyInitialized(locator)) {
            // already fully initialized
            return locator;
        }

        final URL url = locate(locator);
        return url != null ? createFullyInitializedLocatorFromURL(locator, url) : null;
    }","  public void test83()  throws Throwable  {
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      FileLocator fileLocator0 = FileLocatorUtils.fromMap(map0);
      FileLocator fileLocator1 = FileLocatorUtils.fullyInitializedLocator(fileLocator0);
}"
1159,"    static URL convertFileToURL(final File file) {
        return convertURIToURL(file.toURI());
    }","  public void test84()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""CD;,o+sd/"", """");
      URL uRL0 = FileLocatorUtils.convertFileToURL(mockFile0);
}"
1160,"    public ConversionException() {
    }","  public void test0()  throws Throwable  {
      ConversionException conversionException0 = new ConversionException(""(XyKO%8j?"");
  }"
1161,"    public ConversionException() {
    }","  public void test1()  throws Throwable  {
      ConversionException conversionException0 = new ConversionException();
  }"
1162,"    public ConversionException() {
    }","  public void test2()  throws Throwable  {
      ConversionException conversionException0 = new ConversionException((Throwable) null);
      ConversionException conversionException1 = new ConversionException(""(XyKO%8j?"", conversionException0);
}"
1163,"    public ConfigurationRuntimeException() {
    }","  public void test0()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      ConfigurationRuntimeException configurationRuntimeException0 = null;
      try {
        configurationRuntimeException0 = new ConfigurationRuntimeException(""gk%6rm`9t7S[e',R"", objectArray0);
        fail(""Expecting exception: UnknownFormatConversionException"");
      } catch(UnknownFormatConversionException e) {
         //
         // Conversion = 'r'
         //
         verifyException(""java.util.Formatter$FormatSpecifier"", e);
      }
  }"
1164,"    public ConfigurationRuntimeException() {
    }","  public void test1()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      ConfigurationRuntimeException configurationRuntimeException0 = null;
      try {
        configurationRuntimeException0 = new ConfigurationRuntimeException((String) null, objectArray0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
1165,"    public ConfigurationRuntimeException() {
    }","  public void test2()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      ConfigurationRuntimeException configurationRuntimeException0 = new ConfigurationRuntimeException("""", objectArray0);
  }"
1166,"    public ConfigurationRuntimeException() {
    }","  public void test3()  throws Throwable  {
      ConfigurationRuntimeException configurationRuntimeException0 = new ConfigurationRuntimeException();
  }"
1167,"    public ConfigurationRuntimeException() {
    }","  public void test4()  throws Throwable  {
      ConfigurationRuntimeException configurationRuntimeException0 = new ConfigurationRuntimeException((Throwable) null);
  }"
1168,"    public ConfigurationRuntimeException() {
    }","  public void test5()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable("""");
      ConfigurationRuntimeException configurationRuntimeException0 = new ConfigurationRuntimeException("""", mockThrowable0);
  }"
1169,"    public ConfigurationRuntimeException() {
    }","  public void test6()  throws Throwable  {
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[1];
      ConfigurationRuntimeException configurationRuntimeException0 = null;
      try {
        configurationRuntimeException0 = new ConfigurationRuntimeException(""Platform does not allow renaming files. Copied file from %s to %s instead"", stackTraceElementArray0);
        fail(""Expecting exception: MissingFormatArgumentException"");
      } catch(MissingFormatArgumentException e) {
         //
         // Format specifier '%s'
         //
         verifyException(""java.util.Formatter"", e);
      }
  }"
1170,"    public ConfigurationRuntimeException() {
    }","  public void test7()  throws Throwable  {
      ConfigurationRuntimeException configurationRuntimeException0 = new ConfigurationRuntimeException("""");
  }"
1171,,"  public void test0()  throws Throwable  {
      NoOpSynchronizer[] noOpSynchronizerArray0 = NoOpSynchronizer.values();
}"
1172,,"  public void test1()  throws Throwable  {
      NoOpSynchronizer noOpSynchronizer0 = NoOpSynchronizer.valueOf(""INSTANCE"");
}"
1173,"    public void endWrite() {
    }","  public void test2()  throws Throwable  {
      NoOpSynchronizer noOpSynchronizer0 = NoOpSynchronizer.INSTANCE;
      noOpSynchronizer0.endWrite();
  }"
1174,"    public void endRead() {
    }","  public void test3()  throws Throwable  {
      NoOpSynchronizer noOpSynchronizer0 = NoOpSynchronizer.INSTANCE;
      noOpSynchronizer0.endRead();
  }"
1175,"    public void beginRead() {
    }","  public void test4()  throws Throwable  {
      NoOpSynchronizer noOpSynchronizer0 = NoOpSynchronizer.INSTANCE;
      noOpSynchronizer0.beginRead();
  }"
1176,"    public void beginWrite() {
    }","  public void test5()  throws Throwable  {
      NoOpSynchronizer noOpSynchronizer0 = NoOpSynchronizer.INSTANCE;
      noOpSynchronizer0.beginWrite();
  }"
1177,"    public void endWrite() {
        lock.writeLock().unlock();
    }","  public void test0()  throws Throwable  {
      ReentrantReadWriteLock reentrantReadWriteLock0 = new ReentrantReadWriteLock();
      ReadWriteSynchronizer readWriteSynchronizer0 = new ReadWriteSynchronizer(reentrantReadWriteLock0);
      readWriteSynchronizer0.beginWrite();
      readWriteSynchronizer0.endWrite();
  }"
1178,"    public ReadWriteSynchronizer(final ReadWriteLock l) {
        lock = l != null ? l : createDefaultLock();
    }","  public void test1()  throws Throwable  {
      ReadWriteSynchronizer readWriteSynchronizer0 = new ReadWriteSynchronizer((ReadWriteLock) null);
  }"
1179,"    public void endRead() {
        lock.readLock().unlock();
    }","  public void test2()  throws Throwable  {
      ReentrantReadWriteLock reentrantReadWriteLock0 = new ReentrantReadWriteLock();
      ReadWriteSynchronizer readWriteSynchronizer0 = new ReadWriteSynchronizer(reentrantReadWriteLock0);
      readWriteSynchronizer0.beginRead();
      readWriteSynchronizer0.endRead();
  }"
1180,"    public void beginRead() {
        lock.readLock().lock();
    }","  public void test3()  throws Throwable  {
      ReadWriteSynchronizer readWriteSynchronizer0 = new ReadWriteSynchronizer();
      readWriteSynchronizer0.beginRead();
  }"
1181,"    public void endWrite() {
        lock.writeLock().unlock();
    }","  public void test4()  throws Throwable  {
      ReadWriteSynchronizer readWriteSynchronizer0 = new ReadWriteSynchronizer();
      // Undeclared exception!
      try { 
        readWriteSynchronizer0.endWrite();
        fail(""Expecting exception: IllegalMonitorStateException"");
      } catch(IllegalMonitorStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.util.concurrent.locks.ReentrantReadWriteLock$Sync"", e);
      }
  }"
1182,"    public void endRead() {
        lock.readLock().unlock();
    }","  public void test5()  throws Throwable  {
      ReadWriteSynchronizer readWriteSynchronizer0 = new ReadWriteSynchronizer();
      // Undeclared exception!
      try { 
        readWriteSynchronizer0.endRead();
        fail(""Expecting exception: IllegalMonitorStateException"");
      } catch(IllegalMonitorStateException e) {
         //
         // attempt to unlock read lock, not locked by current thread
         //
         verifyException(""java.util.concurrent.locks.ReentrantReadWriteLock$Sync"", e);
      }
  }"
1183,"    public Object lookup(final String key) {
        return stringLookup.lookup(key);
    }","  public void test0()  throws Throwable  {
      StringLookup stringLookup0 = mock(StringLookup.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(stringLookup0).lookup(anyString());
      StringLookupAdapter stringLookupAdapter0 = new StringLookupAdapter(stringLookup0);
      Object object0 = stringLookupAdapter0.lookup("""");
}"
1184,"    StringLookupAdapter(final StringLookup stringLookup) {
        this.stringLookup = Objects.requireNonNull(stringLookup, ""stringLookup"");
    }","  public void test1()  throws Throwable  {
      StringLookupAdapter stringLookupAdapter0 = null;
      try {
        stringLookupAdapter0 = new StringLookupAdapter((StringLookup) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // stringLookup
         //
         verifyException(""java.util.Objects"", e);
      }
  }"
1185,"    public Object lookup(final String key) {
        return stringLookup.lookup(key);
    }","  public void test2()  throws Throwable  {
      StringLookup stringLookup0 = mock(StringLookup.class, new ViolatedAssumptionAnswer());
      doReturn("""").when(stringLookup0).lookup(anyString());
      StringLookupAdapter stringLookupAdapter0 = new StringLookupAdapter(stringLookup0);
      Object object0 = stringLookupAdapter0.lookup("""");
}"
1186,,"  public void test0()  throws Throwable  {
      DummyLookup[] dummyLookupArray0 = DummyLookup.values();
}"
1187,,"  public void test1()  throws Throwable  {
      DummyLookup dummyLookup0 = DummyLookup.valueOf(""INSTANCE"");
}"
1188,"    public Object lookup(final String variable) {
        return null;
    }","  public void test2()  throws Throwable  {
      DummyLookup dummyLookup0 = DummyLookup.INSTANCE;
      Object object0 = dummyLookup0.lookup("""");
}"
1189,"    public ExprLookup() {
    }","  public void test0()  throws Throwable  {
      ExprLookup.Variable exprLookup_Variable0 = null;
      try {
        exprLookup_Variable0 = new ExprLookup.Variable(""$["", ""Class:"");
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // Unable to create Class:
         //
         verifyException(""org.apache.commons.configuration2.interpol.ExprLookup$Variable"", e);
      }
  }"
1190,"    public ExprLookup() {
    }","  public void test1()  throws Throwable  {
      ExprLookup.Variables exprLookup_Variables0 = new ExprLookup.Variables();
      ExprLookup.Variable exprLookup_Variable0 = new ExprLookup.Variable(""org.apache.commons.io.filefilter.CanWriteFileFilter"", exprLookup_Variables0);
      exprLookup_Variables0.add(exprLookup_Variable0);
      exprLookup_Variables0.add(exprLookup_Variable0);
      ExprLookup.Variable exprLookup_Variable1 = exprLookup_Variables0.getVariable();
}"
1191,"    public ExprLookup() {
    }","  public void test2()  throws Throwable  {
      ExprLookup.Variables exprLookup_Variables0 = new ExprLookup.Variables();
      ExprLookup exprLookup0 = new ExprLookup(exprLookup_Variables0, """", ""]"");
  }"
1192,"    public ExprLookup() {
    }","  public void test3()  throws Throwable  {
      ExprLookup.Variable exprLookup_Variable0 = new ExprLookup.Variable();
      exprLookup_Variable0.setName(""$["");
}"
1193,"    public ExprLookup() {
    }","  public void test4()  throws Throwable  {
      ExprLookup.Variable exprLookup_Variable0 = new ExprLookup.Variable();
      exprLookup_Variable0.setValue(""org.apache.commons.configuration2.interpol.ExprLookup$Variables"");
}"
1194,"    public Variables getVariables() {
        return new Variables(variables);
    }","  public void test5()  throws Throwable  {
      ExprLookup exprLookup0 = new ExprLookup();
      ExprLookup.Variables exprLookup_Variables0 = new ExprLookup.Variables();
      exprLookup0.setVariables(exprLookup_Variables0);
      ExprLookup.Variables exprLookup_Variables1 = exprLookup0.getVariables();
}"
1195,"    public Variables getVariables() {
        return new Variables(variables);
    }","  public void test6()  throws Throwable  {
      ExprLookup.Variables exprLookup_Variables0 = new ExprLookup.Variables();
      ExprLookup exprLookup0 = new ExprLookup(exprLookup_Variables0, """", """");
      ExprLookup.Variable exprLookup_Variable0 = new ExprLookup.Variable(""org.apache.commons.io.filefilter.CanWriteFileFilter"", exprLookup_Variables0);
      exprLookup_Variables0.add(exprLookup_Variable0);
      exprLookup0.setVariables(exprLookup_Variables0);
      ExprLookup.Variables exprLookup_Variables1 = exprLookup0.getVariables();
}"
1196,"    public ConfigurationLogger getLogger() {
        return logger;
    }","  public void test7()  throws Throwable  {
      ExprLookup.Variables exprLookup_Variables0 = new ExprLookup.Variables();
      ExprLookup exprLookup0 = new ExprLookup(exprLookup_Variables0);
      ConfigurationLogger configurationLogger0 = ConfigurationLogger.newDummyLogger();
      exprLookup0.setLogger(configurationLogger0);
      ConfigurationLogger configurationLogger1 = exprLookup0.getLogger();
}"
1197,"    public ConfigurationInterpolator getInterpolator() {
        return interpolator;
    }","  public void test8()  throws Throwable  {
      ExprLookup.Variables exprLookup_Variables0 = new ExprLookup.Variables();
      ExprLookup exprLookup0 = new ExprLookup(exprLookup_Variables0);
      ConfigurationInterpolator configurationInterpolator0 = new ConfigurationInterpolator();
      configurationInterpolator0.setEnableSubstitutionInVariables(true);
      exprLookup0.setInterpolator(configurationInterpolator0);
      ConfigurationInterpolator configurationInterpolator1 = exprLookup0.getInterpolator();
}"
1198,"    public ConfigurationInterpolator getInterpolator() {
        return interpolator;
    }","  public void test9()  throws Throwable  {
      ExprLookup.Variables exprLookup_Variables0 = new ExprLookup.Variables();
      ExprLookup exprLookup0 = new ExprLookup(exprLookup_Variables0);
      ConfigurationInterpolator configurationInterpolator0 = new ConfigurationInterpolator();
      exprLookup0.setInterpolator(configurationInterpolator0);
      ConfigurationInterpolator configurationInterpolator1 = exprLookup0.getInterpolator();
}"
1199,"    public void setVariables(final Variables list) {
        variables = new Variables(list);
    }","  public void test10()  throws Throwable  {
      ExprLookup exprLookup0 = new ExprLookup();
      // Undeclared exception!
      try { 
        exprLookup0.setVariables((ExprLookup.Variables) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.util.ArrayList"", e);
      }
  }"
1200,"    public void setInterpolator(final ConfigurationInterpolator interpolator) {
        this.interpolator = interpolator;
        installSubstitutor(interpolator);
    }","  public void test11()  throws Throwable  {
      ExprLookup.Variables exprLookup_Variables0 = new ExprLookup.Variables();
      ExprLookup exprLookup0 = new ExprLookup(exprLookup_Variables0);
      exprLookup0.setVariablePrefixMatcher((String) null);
      ConfigurationInterpolator configurationInterpolator0 = new ConfigurationInterpolator();
      // Undeclared exception!
      try { 
        exprLookup0.setInterpolator(configurationInterpolator0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Variable prefix must not be null!
         //
         verifyException(""org.apache.commons.lang3.Validate"", e);
      }
  }"
1201,"    public ExprLookup() {
    }","  public void test12()  throws Throwable  {
      ExprLookup exprLookup0 = null;
      try {
        exprLookup0 = new ExprLookup((ExprLookup.Variables) null, ""H26QpgDmat4%]"", ""H26QpgDmat4%]"");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.util.ArrayList"", e);
      }
  }"
1202,"    public ExprLookup() {
    }","  public void test13()  throws Throwable  {
      ExprLookup exprLookup0 = null;
      try {
        exprLookup0 = new ExprLookup((ExprLookup.Variables) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.util.ArrayList"", e);
      }
  }"
1203,"    public ExprLookup() {
    }","  public void test14()  throws Throwable  {
      ExprLookup.Variables exprLookup_Variables0 = new ExprLookup.Variables();
      ExprLookup.Variables exprLookup_Variables1 = new ExprLookup.Variables(exprLookup_Variables0);
}"
1204,"    public ExprLookup() {
    }","  public void test15()  throws Throwable  {
      ExprLookup.Variable exprLookup_Variable0 = new ExprLookup.Variable();
      String string0 = exprLookup_Variable0.getName();
}"
1205,"    public ExprLookup() {
    }","  public void test16()  throws Throwable  {
      ExprLookup.Variable exprLookup_Variable0 = new ExprLookup.Variable();
      Object object0 = exprLookup_Variable0.getValue();
}"
1206,"    public void setVariableSuffixMatcher(final String suffix) {
        suffixMatcher = suffix;
    }","  public void test17()  throws Throwable  {
      ExprLookup.Variables exprLookup_Variables0 = new ExprLookup.Variables();
      ExprLookup exprLookup0 = new ExprLookup(exprLookup_Variables0);
      exprLookup0.setVariableSuffixMatcher((String) null);
  }"
1207,"    public ConfigurationLogger getLogger() {
        return logger;
    }","  public void test18()  throws Throwable  {
      ExprLookup.Variables exprLookup_Variables0 = new ExprLookup.Variables();
      ExprLookup exprLookup0 = new ExprLookup(exprLookup_Variables0);
      ConfigurationLogger configurationLogger0 = exprLookup0.getLogger();
}"
1208,"    public ExprLookup() {
    }","  public void test19()  throws Throwable  {
      ExprLookup.Variables exprLookup_Variables0 = new ExprLookup.Variables();
      ExprLookup.Variable exprLookup_Variable0 = exprLookup_Variables0.getVariable();
}"
1209,"    public void setInterpolator(final ConfigurationInterpolator interpolator) {
        this.interpolator = interpolator;
        installSubstitutor(interpolator);
    }","  public void test20()  throws Throwable  {
      ExprLookup exprLookup0 = new ExprLookup();
      exprLookup0.setInterpolator((ConfigurationInterpolator) null);
  }"
1210,"    public String lookup(final String var) {
        if (substitutor == null) {
            return var;
        }

        String result = substitutor.replace(var);
        try {
            final Expression exp = engine.createExpression(result);
            final Object exprResult = exp.evaluate(createContext());
            result = exprResult != null ? String.valueOf(exprResult) : null;
        } catch (final Exception e) {
            final ConfigurationLogger l = getLogger();
            if (l != null) {
                l.debug(""Error encountered evaluating "" + result + "": "" + e);
            }
        }

        return result;
    }","  public void test21()  throws Throwable  {
      ExprLookup exprLookup0 = new ExprLookup();
      ConfigurationInterpolator configurationInterpolator0 = new ConfigurationInterpolator();
      ConfigurationLogger configurationLogger0 = ConfigurationLogger.newDummyLogger();
      exprLookup0.setLogger(configurationLogger0);
      exprLookup0.setInterpolator(configurationInterpolator0);
      String string0 = exprLookup0.lookup("""");
}"
1211,"    public String lookup(final String var) {
        if (substitutor == null) {
            return var;
        }

        String result = substitutor.replace(var);
        try {
            final Expression exp = engine.createExpression(result);
            final Object exprResult = exp.evaluate(createContext());
            result = exprResult != null ? String.valueOf(exprResult) : null;
        } catch (final Exception e) {
            final ConfigurationLogger l = getLogger();
            if (l != null) {
                l.debug(""Error encountered evaluating "" + result + "": "" + e);
            }
        }

        return result;
    }","  public void test22()  throws Throwable  {
      ExprLookup exprLookup0 = new ExprLookup();
      String string0 = exprLookup0.lookup(""org.apache.commons.configuration2.interpol.ConfigurationInterpolator.defaultPrefixLookups"");
}"
1212,"    public String lookup(final String var) {
        if (substitutor == null) {
            return var;
        }

        String result = substitutor.replace(var);
        try {
            final Expression exp = engine.createExpression(result);
            final Object exprResult = exp.evaluate(createContext());
            result = exprResult != null ? String.valueOf(exprResult) : null;
        } catch (final Exception e) {
            final ConfigurationLogger l = getLogger();
            if (l != null) {
                l.debug(""Error encountered evaluating "" + result + "": "" + e);
            }
        }

        return result;
    }","  public void test23()  throws Throwable  {
      ExprLookup.Variable exprLookup_Variable0 = new ExprLookup.Variable();
      ExprLookup.Variables exprLookup_Variables0 = new ExprLookup.Variables();
      exprLookup_Variables0.add(exprLookup_Variable0);
      ExprLookup exprLookup0 = new ExprLookup(exprLookup_Variables0);
      ConfigurationInterpolator configurationInterpolator0 = new ConfigurationInterpolator();
      exprLookup0.setInterpolator(configurationInterpolator0);
      String string0 = exprLookup0.lookup(""org.apache.commons.configuration2.interpol.ConfigurationInterpolator.defaultPrefixLookups"");
}"
1213,"    public ConfigurationInterpolator getInterpolator() {
        return interpolator;
    }","  public void test24()  throws Throwable  {
      ExprLookup.Variables exprLookup_Variables0 = new ExprLookup.Variables();
      ExprLookup exprLookup0 = new ExprLookup(exprLookup_Variables0, ""lHXIDWHo~V]"", ""lHXIDWHo~V]"");
      ConfigurationInterpolator configurationInterpolator0 = exprLookup0.getInterpolator();
}"
1214,"    public String lookup(final String var) {
        if (substitutor == null) {
            return var;
        }

        String result = substitutor.replace(var);
        try {
            final Expression exp = engine.createExpression(result);
            final Object exprResult = exp.evaluate(createContext());
            result = exprResult != null ? String.valueOf(exprResult) : null;
        } catch (final Exception e) {
            final ConfigurationLogger l = getLogger();
            if (l != null) {
                l.debug(""Error encountered evaluating "" + result + "": "" + e);
            }
        }

        return result;
    }","  public void test25()  throws Throwable  {
      ExprLookup exprLookup0 = new ExprLookup();
      ConfigurationInterpolator configurationInterpolator0 = new ConfigurationInterpolator();
      exprLookup0.setInterpolator(configurationInterpolator0);
      String string0 = exprLookup0.lookup("""");
}"
1215,"    public Variables getVariables() {
        return new Variables(variables);
    }","  public void test26()  throws Throwable  {
      ExprLookup exprLookup0 = new ExprLookup();
      // Undeclared exception!
      try { 
        exprLookup0.getVariables();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.util.ArrayList"", e);
      }
  }"
1216,"    private InterpolatorSpecification(final Builder builder) {
        interpolator = builder.interpolator;
        parentInterpolator = builder.parentInterpolator;
        prefixLookups = Collections.unmodifiableMap(new HashMap<>(builder.prefixLookups));
        defaultLookups = Collections.unmodifiableCollection(new ArrayList<>(builder.defLookups));
        stringConverter = builder.stringConverter;
    }","  public void test0()  throws Throwable  {
      InterpolatorSpecification.Builder interpolatorSpecification_Builder0 = new InterpolatorSpecification.Builder();
      interpolatorSpecification_Builder0.reset();
  }"
1217,"    public Collection<Lookup> getDefaultLookups() {
        return defaultLookups;
    }","  public void test1()  throws Throwable  {
      InterpolatorSpecification.Builder interpolatorSpecification_Builder0 = new InterpolatorSpecification.Builder();
      Lookup lookup0 = mock(Lookup.class, new ViolatedAssumptionAnswer());
      doReturn(""4&v_nm4z"").when(lookup0).toString();
      interpolatorSpecification_Builder0.withDefaultLookup(lookup0);
      InterpolatorSpecification interpolatorSpecification0 = interpolatorSpecification_Builder0.create();
      Collection<Lookup> collection0 = interpolatorSpecification0.getDefaultLookups();
      InterpolatorSpecification.Builder interpolatorSpecification_Builder1 = interpolatorSpecification_Builder0.withDefaultLookups(collection0);
}"
1218,"    private InterpolatorSpecification(final Builder builder) {
        interpolator = builder.interpolator;
        parentInterpolator = builder.parentInterpolator;
        prefixLookups = Collections.unmodifiableMap(new HashMap<>(builder.prefixLookups));
        defaultLookups = Collections.unmodifiableCollection(new ArrayList<>(builder.defLookups));
        stringConverter = builder.stringConverter;
    }","  public void test2()  throws Throwable  {
      InterpolatorSpecification.Builder interpolatorSpecification_Builder0 = new InterpolatorSpecification.Builder();
      InterpolatorSpecification.Builder interpolatorSpecification_Builder1 = interpolatorSpecification_Builder0.withDefaultLookups((Collection<? extends Lookup>) null);
}"
1219,"    public Map<String, Lookup> getPrefixLookups() {
        return prefixLookups;
    }","  public void test3()  throws Throwable  {
      InterpolatorSpecification.Builder interpolatorSpecification_Builder0 = new InterpolatorSpecification.Builder();
      Lookup lookup0 = mock(Lookup.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(lookup0).toString();
      InterpolatorSpecification.Builder interpolatorSpecification_Builder1 = interpolatorSpecification_Builder0.withPrefixLookup("""", lookup0);
      InterpolatorSpecification interpolatorSpecification0 = interpolatorSpecification_Builder0.create();
      Map<String, Lookup> map0 = interpolatorSpecification0.getPrefixLookups();
      InterpolatorSpecification.Builder interpolatorSpecification_Builder2 = interpolatorSpecification_Builder0.withPrefixLookups(map0);
}"
1220,"    private InterpolatorSpecification(final Builder builder) {
        interpolator = builder.interpolator;
        parentInterpolator = builder.parentInterpolator;
        prefixLookups = Collections.unmodifiableMap(new HashMap<>(builder.prefixLookups));
        defaultLookups = Collections.unmodifiableCollection(new ArrayList<>(builder.defLookups));
        stringConverter = builder.stringConverter;
    }","  public void test4()  throws Throwable  {
      InterpolatorSpecification.Builder interpolatorSpecification_Builder0 = new InterpolatorSpecification.Builder();
      InterpolatorSpecification.Builder interpolatorSpecification_Builder1 = interpolatorSpecification_Builder0.withPrefixLookups((Map<String, ? extends Lookup>) null);
}"
1221,"    private InterpolatorSpecification(final Builder builder) {
        interpolator = builder.interpolator;
        parentInterpolator = builder.parentInterpolator;
        prefixLookups = Collections.unmodifiableMap(new HashMap<>(builder.prefixLookups));
        defaultLookups = Collections.unmodifiableCollection(new ArrayList<>(builder.defLookups));
        stringConverter = builder.stringConverter;
    }","  public void test5()  throws Throwable  {
      Lookup lookup0 = mock(Lookup.class, new ViolatedAssumptionAnswer());
      InterpolatorSpecification.Builder interpolatorSpecification_Builder0 = new InterpolatorSpecification.Builder();
      // Undeclared exception!
      try { 
        interpolatorSpecification_Builder0.withPrefixLookup((String) null, lookup0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Prefix must not be null!
         //
         verifyException(""org.apache.commons.configuration2.interpol.InterpolatorSpecification$Builder"", e);
      }
  }"
1222,"    public Function<Object, String> getStringConverter() {
        return stringConverter;
    }","  public void test6()  throws Throwable  {
      InterpolatorSpecification.Builder interpolatorSpecification_Builder0 = new InterpolatorSpecification.Builder();
      InterpolatorSpecification interpolatorSpecification0 = interpolatorSpecification_Builder0.create();
      Function<Object, String> function0 = interpolatorSpecification0.getStringConverter();
}"
1223,"    public ConfigurationInterpolator getInterpolator() {
        return interpolator;
    }","  public void test7()  throws Throwable  {
      InterpolatorSpecification.Builder interpolatorSpecification_Builder0 = new InterpolatorSpecification.Builder();
      InterpolatorSpecification interpolatorSpecification0 = interpolatorSpecification_Builder0.create();
      ConfigurationInterpolator configurationInterpolator0 = interpolatorSpecification0.getInterpolator();
}"
1224,"    public ConfigurationInterpolator getParentInterpolator() {
        return parentInterpolator;
    }","  public void test8()  throws Throwable  {
      InterpolatorSpecification.Builder interpolatorSpecification_Builder0 = new InterpolatorSpecification.Builder();
      InterpolatorSpecification interpolatorSpecification0 = interpolatorSpecification_Builder0.create();
      ConfigurationInterpolator configurationInterpolator0 = interpolatorSpecification0.getParentInterpolator();
}"
1225,"    private InterpolatorSpecification(final Builder builder) {
        interpolator = builder.interpolator;
        parentInterpolator = builder.parentInterpolator;
        prefixLookups = Collections.unmodifiableMap(new HashMap<>(builder.prefixLookups));
        defaultLookups = Collections.unmodifiableCollection(new ArrayList<>(builder.defLookups));
        stringConverter = builder.stringConverter;
    }","  public void test9()  throws Throwable  {
      InterpolatorSpecification.Builder interpolatorSpecification_Builder0 = new InterpolatorSpecification.Builder();
      InterpolatorSpecification.Builder interpolatorSpecification_Builder1 = interpolatorSpecification_Builder0.withStringConverter((Function<Object, String>) null);
}"
1226,"    private InterpolatorSpecification(final Builder builder) {
        interpolator = builder.interpolator;
        parentInterpolator = builder.parentInterpolator;
        prefixLookups = Collections.unmodifiableMap(new HashMap<>(builder.prefixLookups));
        defaultLookups = Collections.unmodifiableCollection(new ArrayList<>(builder.defLookups));
        stringConverter = builder.stringConverter;
    }","  public void test10()  throws Throwable  {
      InterpolatorSpecification.Builder interpolatorSpecification_Builder0 = new InterpolatorSpecification.Builder();
      InterpolatorSpecification.Builder interpolatorSpecification_Builder1 = interpolatorSpecification_Builder0.withInterpolator((ConfigurationInterpolator) null);
}"
1227,"    private InterpolatorSpecification(final Builder builder) {
        interpolator = builder.interpolator;
        parentInterpolator = builder.parentInterpolator;
        prefixLookups = Collections.unmodifiableMap(new HashMap<>(builder.prefixLookups));
        defaultLookups = Collections.unmodifiableCollection(new ArrayList<>(builder.defLookups));
        stringConverter = builder.stringConverter;
    }","  public void test11()  throws Throwable  {
      InterpolatorSpecification.Builder interpolatorSpecification_Builder0 = new InterpolatorSpecification.Builder();
      // Undeclared exception!
      try { 
        interpolatorSpecification_Builder0.withDefaultLookup((Lookup) null);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Lookup must not be null!
         //
         verifyException(""org.apache.commons.configuration2.interpol.InterpolatorSpecification$Builder"", e);
      }
  }"
1228,"    private InterpolatorSpecification(final Builder builder) {
        interpolator = builder.interpolator;
        parentInterpolator = builder.parentInterpolator;
        prefixLookups = Collections.unmodifiableMap(new HashMap<>(builder.prefixLookups));
        defaultLookups = Collections.unmodifiableCollection(new ArrayList<>(builder.defLookups));
        stringConverter = builder.stringConverter;
    }","  public void test12()  throws Throwable  {
      InterpolatorSpecification.Builder interpolatorSpecification_Builder0 = new InterpolatorSpecification.Builder();
      InterpolatorSpecification.Builder interpolatorSpecification_Builder1 = interpolatorSpecification_Builder0.withParentInterpolator((ConfigurationInterpolator) null);
}"
1229,"    public Object resolve(final String var) {
        if (var == null) {
            return null;
        }

        final int prefixPos = var.indexOf(PREFIX_SEPARATOR);
        if (prefixPos >= 0) {
            final String prefix = var.substring(0, prefixPos);
            final String name = var.substring(prefixPos + 1);
            final Object value = fetchLookupForPrefix(prefix).lookup(name);
            if (value != null) {
                return value;
            }
        }

        for (final Lookup lookup : defaultLookups) {
            final Object value = lookup.lookup(var);
            if (value != null) {
                return value;
            }
        }

        final ConfigurationInterpolator parent = getParentInterpolator();
        if (parent != null) {
            return getParentInterpolator().resolve(var);
        }
        return null;
    }","  public void test0()  throws Throwable  {
      InterpolatorSpecification interpolatorSpecification0 = mock(InterpolatorSpecification.class, new ViolatedAssumptionAnswer());
      doReturn((Collection) null).when(interpolatorSpecification0).getDefaultLookups();
      doReturn((ConfigurationInterpolator) null).when(interpolatorSpecification0).getInterpolator();
      doReturn((ConfigurationInterpolator) null).when(interpolatorSpecification0).getParentInterpolator();
      doReturn((Map) null).when(interpolatorSpecification0).getPrefixLookups();
      doReturn((Function) null).when(interpolatorSpecification0).getStringConverter();
      ConfigurationInterpolator configurationInterpolator0 = ConfigurationInterpolator.fromSpecification(interpolatorSpecification0);
      Object object0 = configurationInterpolator0.resolve("":"");
}"
1230,"    public boolean removeDefaultLookup(final Lookup lookup) {
        return defaultLookups.remove(lookup);
    }","  public void test1()  throws Throwable  {
      InterpolatorSpecification interpolatorSpecification0 = mock(InterpolatorSpecification.class, new ViolatedAssumptionAnswer());
      doReturn((Collection) null).when(interpolatorSpecification0).getDefaultLookups();
      doReturn((ConfigurationInterpolator) null).when(interpolatorSpecification0).getInterpolator();
      doReturn((ConfigurationInterpolator) null).when(interpolatorSpecification0).getParentInterpolator();
      doReturn((Map) null).when(interpolatorSpecification0).getPrefixLookups();
      doReturn((Function) null).when(interpolatorSpecification0).getStringConverter();
      ConfigurationInterpolator configurationInterpolator0 = ConfigurationInterpolator.fromSpecification(interpolatorSpecification0);
      Lookup lookup0 = configurationInterpolator0.fetchLookupForPrefix(""version"");
      configurationInterpolator0.addDefaultLookup(lookup0);
      boolean boolean0 = configurationInterpolator0.removeDefaultLookup(lookup0);
}"
1231,"    public boolean isEnableSubstitutionInVariables() {
        return substitutor.isEnableSubstitutionInVariables();
    }","  public void test2()  throws Throwable  {
      ConfigurationInterpolator configurationInterpolator0 = new ConfigurationInterpolator();
      configurationInterpolator0.setEnableSubstitutionInVariables(true);
      boolean boolean0 = configurationInterpolator0.isEnableSubstitutionInVariables();
}"
1232,"    public Object interpolate(final Object value) {
        if (value instanceof String) {
            final String strValue = (String) value;
            if (isSingleVariable(strValue)) {
                final Object resolvedValue = resolveSingleVariable(strValue);
                if (resolvedValue != null && !(resolvedValue instanceof String)) {
                    // If the value is again a string, it needs no special
                    // treatment; it may also contain further variables which
                    // must be resolved; therefore, the default mechanism is
                    // applied.
                    return resolvedValue;
                }
            }
            return substitutor.replace(strValue);
        }
        return value;
    }","  public void test3()  throws Throwable  {
      ConfigurationInterpolator configurationInterpolator0 = new ConfigurationInterpolator();
      Object object0 = configurationInterpolator0.interpolate((Object) null);
}"
1233,"    public boolean isEnableSubstitutionInVariables() {
        return substitutor.isEnableSubstitutionInVariables();
    }","  public void test4()  throws Throwable  {
      InterpolatorSpecification interpolatorSpecification0 = mock(InterpolatorSpecification.class, new ViolatedAssumptionAnswer());
      doReturn((Collection) null).when(interpolatorSpecification0).getDefaultLookups();
      doReturn((ConfigurationInterpolator) null).when(interpolatorSpecification0).getInterpolator();
      doReturn((ConfigurationInterpolator) null).when(interpolatorSpecification0).getParentInterpolator();
      doReturn((Map) null).when(interpolatorSpecification0).getPrefixLookups();
      doReturn((Function) null).when(interpolatorSpecification0).getStringConverter();
      ConfigurationInterpolator configurationInterpolator0 = ConfigurationInterpolator.fromSpecification(interpolatorSpecification0);
      configurationInterpolator0.setParentInterpolator(configurationInterpolator0);
      ConfigurationInterpolator configurationInterpolator1 = configurationInterpolator0.getParentInterpolator();
}"
1234,"    public Map<String, Lookup> getLookups() {
        return new HashMap<>(prefixLookups);
    }","  public void test5()  throws Throwable  {
      ConfigurationInterpolator configurationInterpolator0 = new ConfigurationInterpolator();
      HashMap<String, DummyLookup> hashMap0 = new HashMap<String, DummyLookup>();
      DummyLookup dummyLookup0 = DummyLookup.INSTANCE;
      hashMap0.put("""", dummyLookup0);
      configurationInterpolator0.registerLookups(hashMap0);
      Map<String, Lookup> map0 = configurationInterpolator0.getLookups();
}"
1235,"    public List<Lookup> getDefaultLookups() {
        return new ArrayList<>(defaultLookups);
    }","  public void test6()  throws Throwable  {
      ConfigurationInterpolator configurationInterpolator0 = new ConfigurationInterpolator();
      ExprLookup.Variables exprLookup_Variables0 = new ExprLookup.Variables();
      ExprLookup exprLookup0 = new ExprLookup(exprLookup_Variables0);
      LinkedHashSet<ExprLookup> linkedHashSet0 = new LinkedHashSet<ExprLookup>();
      linkedHashSet0.add(exprLookup0);
      configurationInterpolator0.addDefaultLookups(linkedHashSet0);
      List<Lookup> list0 = configurationInterpolator0.getDefaultLookups();
}"
1236,"    public static ConfigurationInterpolator fromSpecification(final InterpolatorSpecification spec) {
        if (spec == null) {
            throw new IllegalArgumentException(""InterpolatorSpecification must not be null!"");
        }
        return spec.getInterpolator() != null ? spec.getInterpolator() : createInterpolator(spec);
    }","  public void test7()  throws Throwable  {
      ConfigurationInterpolator configurationInterpolator0 = new ConfigurationInterpolator();
      InterpolatorSpecification interpolatorSpecification0 = mock(InterpolatorSpecification.class, new ViolatedAssumptionAnswer());
      doReturn(configurationInterpolator0, (ConfigurationInterpolator) null).when(interpolatorSpecification0).getInterpolator();
      ConfigurationInterpolator configurationInterpolator1 = ConfigurationInterpolator.fromSpecification(interpolatorSpecification0);
}"
1237,"    public void registerLookups(final Map<String, ? extends Lookup> lookups) {
        if (lookups != null) {
            prefixLookups.putAll(lookups);
        }
    }","  public void test8()  throws Throwable  {
      ConfigurationInterpolator configurationInterpolator0 = new ConfigurationInterpolator();
      HashMap<String, ConstantLookup> hashMap0 = new HashMap<String, ConstantLookup>();
      ConstantLookup constantLookup0 = new ConstantLookup();
      hashMap0.put((String) null, constantLookup0);
      // Undeclared exception!
      try { 
        configurationInterpolator0.registerLookups(hashMap0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.util.concurrent.ConcurrentHashMap"", e);
      }
  }"
1238,"    protected Lookup fetchLookupForPrefix(final String prefix) {
        return nullSafeLookup(prefixLookups.get(prefix));
    }","  public void test9()  throws Throwable  {
      ConfigurationInterpolator configurationInterpolator0 = new ConfigurationInterpolator();
      // Undeclared exception!
      try { 
        configurationInterpolator0.fetchLookupForPrefix((String) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
1239,"    public boolean deregisterLookup(final String prefix) {
        return prefixLookups.remove(prefix) != null;
    }","  public void test10()  throws Throwable  {
      InterpolatorSpecification interpolatorSpecification0 = mock(InterpolatorSpecification.class, new ViolatedAssumptionAnswer());
      doReturn((Collection) null).when(interpolatorSpecification0).getDefaultLookups();
      doReturn((ConfigurationInterpolator) null).when(interpolatorSpecification0).getInterpolator();
      doReturn((ConfigurationInterpolator) null).when(interpolatorSpecification0).getParentInterpolator();
      doReturn((Map) null).when(interpolatorSpecification0).getPrefixLookups();
      doReturn((Function) null).when(interpolatorSpecification0).getStringConverter();
      ConfigurationInterpolator configurationInterpolator0 = ConfigurationInterpolator.fromSpecification(interpolatorSpecification0);
      // Undeclared exception!
      try { 
        configurationInterpolator0.deregisterLookup((String) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.util.concurrent.ConcurrentHashMap"", e);
      }
  }"
1240,"    public boolean isEnableSubstitutionInVariables() {
        return substitutor.isEnableSubstitutionInVariables();
    }","  public void test11()  throws Throwable  {
      ConfigurationInterpolator configurationInterpolator0 = new ConfigurationInterpolator();
      configurationInterpolator0.registerLookups((Map<String, ? extends Lookup>) null);
}"
1241,"    public boolean isEnableSubstitutionInVariables() {
        return substitutor.isEnableSubstitutionInVariables();
    }","  public void test12()  throws Throwable  {
      InterpolatorSpecification interpolatorSpecification0 = mock(InterpolatorSpecification.class, new ViolatedAssumptionAnswer());
      doReturn((Collection) null).when(interpolatorSpecification0).getDefaultLookups();
      doReturn((ConfigurationInterpolator) null).when(interpolatorSpecification0).getInterpolator();
      doReturn((ConfigurationInterpolator) null).when(interpolatorSpecification0).getParentInterpolator();
      doReturn((Map) null).when(interpolatorSpecification0).getPrefixLookups();
      doReturn((Function) null).when(interpolatorSpecification0).getStringConverter();
      ConfigurationInterpolator configurationInterpolator0 = ConfigurationInterpolator.fromSpecification(interpolatorSpecification0);
      configurationInterpolator0.setStringConverter((Function<Object, String>) null);
}"
1242,"    public boolean isEnableSubstitutionInVariables() {
        return substitutor.isEnableSubstitutionInVariables();
    }","  public void test13()  throws Throwable  {
      ConfigurationInterpolator configurationInterpolator0 = new ConfigurationInterpolator();
      Function<Object, String> function0 = configurationInterpolator0.getStringConverter();
      configurationInterpolator0.setStringConverter(function0);
}"
1243,"    public boolean isEnableSubstitutionInVariables() {
        return substitutor.isEnableSubstitutionInVariables();
    }","  public void test14()  throws Throwable  {
      ConfigurationInterpolator configurationInterpolator0 = new ConfigurationInterpolator();
      configurationInterpolator0.addDefaultLookups((Collection<? extends Lookup>) null);
}"
1244,"    public static Lookup nullSafeLookup(Lookup lookup) {
        if (lookup == null) {
            lookup = DummyLookup.INSTANCE;
        }
        return lookup;
    }","  public void test15()  throws Throwable  {
      Lookup lookup0 = ConfigurationInterpolator.nullSafeLookup((Lookup) null);
}"
1245,"    public ConfigurationInterpolator getParentInterpolator() {
        return this.parentInterpolator;
    }","  public void test16()  throws Throwable  {
      ConfigurationInterpolator configurationInterpolator0 = new ConfigurationInterpolator();
      ConfigurationInterpolator configurationInterpolator1 = configurationInterpolator0.getParentInterpolator();
}"
1246,"    public Function<Object, String> getStringConverter() {
        return stringConverter;
    }","  public void test17()  throws Throwable  {
      ConfigurationInterpolator configurationInterpolator0 = new ConfigurationInterpolator();
      LinkedHashSet<DummyLookup> linkedHashSet0 = new LinkedHashSet<DummyLookup>(219, 219);
      DummyLookup dummyLookup0 = DummyLookup.INSTANCE;
      linkedHashSet0.add(dummyLookup0);
      Function<Object, String> function0 = configurationInterpolator0.getStringConverter();
      String string0 = function0.apply(linkedHashSet0);
}"
1247,"    public Function<Object, String> getStringConverter() {
        return stringConverter;
    }","  public void test18()  throws Throwable  {
      ConfigurationInterpolator configurationInterpolator0 = new ConfigurationInterpolator();
      Function<Object, String> function0 = configurationInterpolator0.getStringConverter();
      Function<Object, String> function1 = function0.andThen((Function<? super String, ? extends String>) function0);
      ConstantLookup constantLookup0 = new ConstantLookup();
      String string0 = function1.apply(constantLookup0);
}"
1248,"    public Object resolve(final String var) {
        if (var == null) {
            return null;
        }

        final int prefixPos = var.indexOf(PREFIX_SEPARATOR);
        if (prefixPos >= 0) {
            final String prefix = var.substring(0, prefixPos);
            final String name = var.substring(prefixPos + 1);
            final Object value = fetchLookupForPrefix(prefix).lookup(name);
            if (value != null) {
                return value;
            }
        }

        for (final Lookup lookup : defaultLookups) {
            final Object value = lookup.lookup(var);
            if (value != null) {
                return value;
            }
        }

        final ConfigurationInterpolator parent = getParentInterpolator();
        if (parent != null) {
            return getParentInterpolator().resolve(var);
        }
        return null;
    }","  public void test19()  throws Throwable  {
      ConfigurationInterpolator.DefaultPrefixLookupsHolder configurationInterpolator_DefaultPrefixLookupsHolder0 = ConfigurationInterpolator.DefaultPrefixLookupsHolder.INSTANCE;
      Map<String, Lookup> map0 = configurationInterpolator_DefaultPrefixLookupsHolder0.getDefaultPrefixLookups();
      LinkedList<Lookup> linkedList0 = new LinkedList<Lookup>();
      ExprLookup.Variables exprLookup_Variables0 = new ExprLookup.Variables();
      ExprLookup exprLookup0 = new ExprLookup(exprLookup_Variables0);
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      InterpolatorSpecification interpolatorSpecification0 = mock(InterpolatorSpecification.class, new ViolatedAssumptionAnswer());
      doReturn(linkedList0).when(interpolatorSpecification0).getDefaultLookups();
      doReturn((ConfigurationInterpolator) null).when(interpolatorSpecification0).getInterpolator();
      doReturn((ConfigurationInterpolator) null).when(interpolatorSpecification0).getParentInterpolator();
      doReturn(map0).when(interpolatorSpecification0).getPrefixLookups();
      doReturn(function0).when(interpolatorSpecification0).getStringConverter();
      ConfigurationInterpolator configurationInterpolator0 = ConfigurationInterpolator.fromSpecification(interpolatorSpecification0);
      configurationInterpolator0.addDefaultLookup(exprLookup0);
      Object object0 = configurationInterpolator0.resolve(""org.apache.commons.configuration2.interpol.ConfigurationInterpolator.defaultPrefixLookups"");
}"
1249,"    public Object resolve(final String var) {
        if (var == null) {
            return null;
        }

        final int prefixPos = var.indexOf(PREFIX_SEPARATOR);
        if (prefixPos >= 0) {
            final String prefix = var.substring(0, prefixPos);
            final String name = var.substring(prefixPos + 1);
            final Object value = fetchLookupForPrefix(prefix).lookup(name);
            if (value != null) {
                return value;
            }
        }

        for (final Lookup lookup : defaultLookups) {
            final Object value = lookup.lookup(var);
            if (value != null) {
                return value;
            }
        }

        final ConfigurationInterpolator parent = getParentInterpolator();
        if (parent != null) {
            return getParentInterpolator().resolve(var);
        }
        return null;
    }","  public void test20()  throws Throwable  {
      ConfigurationInterpolator configurationInterpolator0 = new ConfigurationInterpolator();
      Object object0 = configurationInterpolator0.resolve(""S ;BtJ<v#':D%!g"");
}"
1250,"    public Object resolve(final String var) {
        if (var == null) {
            return null;
        }

        final int prefixPos = var.indexOf(PREFIX_SEPARATOR);
        if (prefixPos >= 0) {
            final String prefix = var.substring(0, prefixPos);
            final String name = var.substring(prefixPos + 1);
            final Object value = fetchLookupForPrefix(prefix).lookup(name);
            if (value != null) {
                return value;
            }
        }

        for (final Lookup lookup : defaultLookups) {
            final Object value = lookup.lookup(var);
            if (value != null) {
                return value;
            }
        }

        final ConfigurationInterpolator parent = getParentInterpolator();
        if (parent != null) {
            return getParentInterpolator().resolve(var);
        }
        return null;
    }","  public void test21()  throws Throwable  {
      ConfigurationInterpolator configurationInterpolator0 = new ConfigurationInterpolator();
      Object object0 = configurationInterpolator0.resolve((String) null);
}"
1251,"    public void registerLookup(final String prefix, final Lookup lookup) {
        if (prefix == null) {
            throw new IllegalArgumentException(""Prefix for lookup object must not be null!"");
        }
        if (lookup == null) {
            throw new IllegalArgumentException(""Lookup object must not be null!"");
        }
        prefixLookups.put(prefix, lookup);
    }","  public void test22()  throws Throwable  {
      InterpolatorSpecification interpolatorSpecification0 = mock(InterpolatorSpecification.class, new ViolatedAssumptionAnswer());
      doReturn((Collection) null).when(interpolatorSpecification0).getDefaultLookups();
      doReturn((ConfigurationInterpolator) null).when(interpolatorSpecification0).getInterpolator();
      doReturn((ConfigurationInterpolator) null).when(interpolatorSpecification0).getParentInterpolator();
      doReturn((Map) null).when(interpolatorSpecification0).getPrefixLookups();
      doReturn((Function) null).when(interpolatorSpecification0).getStringConverter();
      ConfigurationInterpolator configurationInterpolator0 = ConfigurationInterpolator.fromSpecification(interpolatorSpecification0);
      // Undeclared exception!
      try { 
        configurationInterpolator0.registerLookup(""RR|p1dq:|--3!eb"", (Lookup) null);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Lookup object must not be null!
         //
         verifyException(""org.apache.commons.configuration2.interpol.ConfigurationInterpolator"", e);
      }
  }"
1252,"    public void registerLookup(final String prefix, final Lookup lookup) {
        if (prefix == null) {
            throw new IllegalArgumentException(""Prefix for lookup object must not be null!"");
        }
        if (lookup == null) {
            throw new IllegalArgumentException(""Lookup object must not be null!"");
        }
        prefixLookups.put(prefix, lookup);
    }","  public void test23()  throws Throwable  {
      ConfigurationInterpolator configurationInterpolator0 = new ConfigurationInterpolator();
      Lookup lookup0 = configurationInterpolator0.fetchLookupForPrefix(""org.apache.commons.configuration2.interpol.ConfigurationInterpolator.defaultPrefixLookups"");
      // Undeclared exception!
      try { 
        configurationInterpolator0.registerLookup((String) null, lookup0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Prefix for lookup object must not be null!
         //
         verifyException(""org.apache.commons.configuration2.interpol.ConfigurationInterpolator"", e);
      }
  }"
1253,"    public Object interpolate(final Object value) {
        if (value instanceof String) {
            final String strValue = (String) value;
            if (isSingleVariable(strValue)) {
                final Object resolvedValue = resolveSingleVariable(strValue);
                if (resolvedValue != null && !(resolvedValue instanceof String)) {
                    // If the value is again a string, it needs no special
                    // treatment; it may also contain further variables which
                    // must be resolved; therefore, the default mechanism is
                    // applied.
                    return resolvedValue;
                }
            }
            return substitutor.replace(strValue);
        }
        return value;
    }","  public void test24()  throws Throwable  {
      ConfigurationInterpolator configurationInterpolator0 = new ConfigurationInterpolator();
      Object object0 = configurationInterpolator0.interpolate(""4{S{ Y)=RU?~}!OepOSD"");
}"
1254,"    public Object interpolate(final Object value) {
        if (value instanceof String) {
            final String strValue = (String) value;
            if (isSingleVariable(strValue)) {
                final Object resolvedValue = resolveSingleVariable(strValue);
                if (resolvedValue != null && !(resolvedValue instanceof String)) {
                    // If the value is again a string, it needs no special
                    // treatment; it may also contain further variables which
                    // must be resolved; therefore, the default mechanism is
                    // applied.
                    return resolvedValue;
                }
            }
            return substitutor.replace(strValue);
        }
        return value;
    }","  public void test25()  throws Throwable  {
      ConfigurationInterpolator configurationInterpolator0 = new ConfigurationInterpolator();
      Object object0 = configurationInterpolator0.interpolate(""${S{ Y)=RU?~!OepO8D"");
}"
1255,"    protected Lookup fetchLookupForPrefix(final String prefix) {
        return nullSafeLookup(prefixLookups.get(prefix));
    }","  public void test26()  throws Throwable  {
      LinkedList<Lookup> linkedList0 = new LinkedList<Lookup>();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      InterpolatorSpecification interpolatorSpecification0 = mock(InterpolatorSpecification.class, new ViolatedAssumptionAnswer());
      doReturn((Collection) null).when(interpolatorSpecification0).getDefaultLookups();
      doReturn((ConfigurationInterpolator) null).when(interpolatorSpecification0).getInterpolator();
      doReturn((ConfigurationInterpolator) null).when(interpolatorSpecification0).getParentInterpolator();
      doReturn((Map) null).when(interpolatorSpecification0).getPrefixLookups();
      doReturn((Function) null).when(interpolatorSpecification0).getStringConverter();
      ConfigurationInterpolator configurationInterpolator0 = ConfigurationInterpolator.fromSpecification(interpolatorSpecification0);
      configurationInterpolator0.getStringConverter();
      InterpolatorSpecification interpolatorSpecification1 = mock(InterpolatorSpecification.class, new ViolatedAssumptionAnswer());
      doReturn((Collection) null).when(interpolatorSpecification1).getDefaultLookups();
      doReturn((ConfigurationInterpolator) null).when(interpolatorSpecification1).getInterpolator();
      doReturn((ConfigurationInterpolator) null).when(interpolatorSpecification1).getParentInterpolator();
      doReturn((Map) null).when(interpolatorSpecification1).getPrefixLookups();
      doReturn((Function) null).when(interpolatorSpecification1).getStringConverter();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ConfigurationInterpolator configurationInterpolator1 = ConfigurationInterpolator.fromSpecification(interpolatorSpecification1);
      InterpolatorSpecification interpolatorSpecification2 = mock(InterpolatorSpecification.class, new ViolatedAssumptionAnswer());
      doReturn(configurationInterpolator0, (ConfigurationInterpolator) null).when(interpolatorSpecification2).getInterpolator();
      ConfigurationInterpolator configurationInterpolator2 = ConfigurationInterpolator.fromSpecification(interpolatorSpecification2);
      configurationInterpolator1.setParentInterpolator(configurationInterpolator2);
      configurationInterpolator1.getDefaultLookups();
      configurationInterpolator1.resolve("")LFXV2nF c$b;qSu"");
      configurationInterpolator1.getStringConverter();
      FileSystemHandling.shouldAllThrowIOExceptions();
      configurationInterpolator1.getLookups();
      configurationInterpolator1.getDefaultLookups();
      configurationInterpolator1.fetchLookupForPrefix(""org.apache.commons.configuration2.interpol.ConfigurationInterpolator.defaultPrefixLookups"");
      configurationInterpolator1.getDefaultLookups();
      configurationInterpolator1.fetchLookupForPrefix("")LFXV2nF c$b;qSu"");
  }"
1256,"    public boolean deregisterLookup(final String prefix) {
        return prefixLookups.remove(prefix) != null;
    }","  public void test27()  throws Throwable  {
      ConfigurationInterpolator.DefaultPrefixLookupsHolder configurationInterpolator_DefaultPrefixLookupsHolder0 = ConfigurationInterpolator.DefaultPrefixLookupsHolder.INSTANCE;
      Map<String, Lookup> map0 = configurationInterpolator_DefaultPrefixLookupsHolder0.getDefaultPrefixLookups();
      LinkedList<Lookup> linkedList0 = new LinkedList<Lookup>();
      ExprLookup.Variables exprLookup_Variables0 = new ExprLookup.Variables();
      ExprLookup exprLookup0 = new ExprLookup(exprLookup_Variables0);
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      InterpolatorSpecification interpolatorSpecification0 = mock(InterpolatorSpecification.class, new ViolatedAssumptionAnswer());
      doReturn(linkedList0).when(interpolatorSpecification0).getDefaultLookups();
      doReturn((ConfigurationInterpolator) null).when(interpolatorSpecification0).getInterpolator();
      doReturn((ConfigurationInterpolator) null).when(interpolatorSpecification0).getParentInterpolator();
      doReturn(map0).when(interpolatorSpecification0).getPrefixLookups();
      doReturn(function0).when(interpolatorSpecification0).getStringConverter();
      ConfigurationInterpolator configurationInterpolator0 = ConfigurationInterpolator.fromSpecification(interpolatorSpecification0);
      configurationInterpolator0.registerLookup(""org.apache.commons.configuration2.interpol.ConfigurationInterpolator.defaultPrefixLookups"", exprLookup0);
      boolean boolean0 = configurationInterpolator0.deregisterLookup(""org.apache.commons.configuration2.interpol.ConfigurationInterpolator.defaultPrefixLookups"");
}"
1257,"    public static Lookup nullSafeLookup(Lookup lookup) {
        if (lookup == null) {
            lookup = DummyLookup.INSTANCE;
        }
        return lookup;
    }","  public void test28()  throws Throwable  {
      ConfigurationInterpolator configurationInterpolator0 = new ConfigurationInterpolator();
      Lookup lookup0 = configurationInterpolator0.fetchLookupForPrefix("""");
      Lookup lookup1 = ConfigurationInterpolator.nullSafeLookup(lookup0);
}"
1258,"    public static ConfigurationInterpolator fromSpecification(final InterpolatorSpecification spec) {
        if (spec == null) {
            throw new IllegalArgumentException(""InterpolatorSpecification must not be null!"");
        }
        return spec.getInterpolator() != null ? spec.getInterpolator() : createInterpolator(spec);
    }","  public void test29()  throws Throwable  {
      // Undeclared exception!
      try { 
        ConfigurationInterpolator.fromSpecification((InterpolatorSpecification) null);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // InterpolatorSpecification must not be null!
         //
         verifyException(""org.apache.commons.configuration2.interpol.ConfigurationInterpolator"", e);
      }
  }"
1259,"    public Set<String> prefixSet() {
        return Collections.unmodifiableSet(prefixLookups.keySet());
    }","  public void test30()  throws Throwable  {
      ConfigurationInterpolator configurationInterpolator0 = new ConfigurationInterpolator();
      Set<String> set0 = configurationInterpolator0.prefixSet();
}"
1260,"    public static Map<String, Lookup> getDefaultPrefixLookups() {
        return DefaultPrefixLookupsHolder.INSTANCE.getDefaultPrefixLookups();
    }","  public void test31()  throws Throwable  {
      Map<String, Lookup> map0 = ConfigurationInterpolator.getDefaultPrefixLookups();
}"
1261,"    public boolean isEnableSubstitutionInVariables() {
        return substitutor.isEnableSubstitutionInVariables();
    }","  public void test32()  throws Throwable  {
      ConfigurationInterpolator configurationInterpolator0 = new ConfigurationInterpolator();
      boolean boolean0 = configurationInterpolator0.isEnableSubstitutionInVariables();
}"
1262,"    public Object resolve(final String var) {
        if (var == null) {
            return null;
        }

        final int prefixPos = var.indexOf(PREFIX_SEPARATOR);
        if (prefixPos >= 0) {
            final String prefix = var.substring(0, prefixPos);
            final String name = var.substring(prefixPos + 1);
            final Object value = fetchLookupForPrefix(prefix).lookup(name);
            if (value != null) {
                return value;
            }
        }

        for (final Lookup lookup : defaultLookups) {
            final Object value = lookup.lookup(var);
            if (value != null) {
                return value;
            }
        }

        final ConfigurationInterpolator parent = getParentInterpolator();
        if (parent != null) {
            return getParentInterpolator().resolve(var);
        }
        return null;
    }","  public void test33()  throws Throwable  {
      ConfigurationInterpolator configurationInterpolator0 = new ConfigurationInterpolator();
      configurationInterpolator0.getLookups();
      configurationInterpolator0.interpolate(""4{S{ Y)=RU?~}!OepOSD"");
      configurationInterpolator0.getLookups();
      configurationInterpolator0.setEnableSubstitutionInVariables(true);
      Lookup lookup0 = configurationInterpolator0.fetchLookupForPrefix("""");
      configurationInterpolator0.prefixSet();
      ConfigurationInterpolator.nullSafeLookup(lookup0);
      Properties properties0 = new Properties();
      LinkedHashSet<Lookup> linkedHashSet0 = new LinkedHashSet<Lookup>();
      configurationInterpolator0.getStringConverter();
      InterpolatorSpecification interpolatorSpecification0 = mock(InterpolatorSpecification.class, new ViolatedAssumptionAnswer());
      doReturn(configurationInterpolator0, (ConfigurationInterpolator) null).when(interpolatorSpecification0).getInterpolator();
      ConfigurationInterpolator.fromSpecification(interpolatorSpecification0);
      configurationInterpolator0.resolve(""Lookup object must not be null!"");
      // Undeclared exception!
      try { 
        properties0.put((Object) null, (Object) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.util.Hashtable"", e);
      }
  }"
1263,"    public Object resolve(final String var) {
        if (var == null) {
            return null;
        }

        final int prefixPos = var.indexOf(PREFIX_SEPARATOR);
        if (prefixPos >= 0) {
            final String prefix = var.substring(0, prefixPos);
            final String name = var.substring(prefixPos + 1);
            final Object value = fetchLookupForPrefix(prefix).lookup(name);
            if (value != null) {
                return value;
            }
        }

        for (final Lookup lookup : defaultLookups) {
            final Object value = lookup.lookup(var);
            if (value != null) {
                return value;
            }
        }

        final ConfigurationInterpolator parent = getParentInterpolator();
        if (parent != null) {
            return getParentInterpolator().resolve(var);
        }
        return null;
    }","  public void test34()  throws Throwable  {
      LinkedHashSet<Lookup> linkedHashSet0 = new LinkedHashSet<Lookup>();
      Properties properties0 = new Properties();
      ConfigurationInterpolator.DefaultPrefixLookupsHolder configurationInterpolator_DefaultPrefixLookupsHolder0 = new ConfigurationInterpolator.DefaultPrefixLookupsHolder(properties0);
      Map<String, Lookup> map0 = configurationInterpolator_DefaultPrefixLookupsHolder0.getDefaultPrefixLookups();
      InterpolatorSpecification interpolatorSpecification0 = mock(InterpolatorSpecification.class, new ViolatedAssumptionAnswer());
      doReturn(linkedHashSet0).when(interpolatorSpecification0).getDefaultLookups();
      doReturn((ConfigurationInterpolator) null).when(interpolatorSpecification0).getInterpolator();
      doReturn((ConfigurationInterpolator) null).when(interpolatorSpecification0).getParentInterpolator();
      doReturn(map0).when(interpolatorSpecification0).getPrefixLookups();
      doReturn((Function<Object, String>) null).when(interpolatorSpecification0).getStringConverter();
      ConfigurationInterpolator configurationInterpolator0 = ConfigurationInterpolator.fromSpecification(interpolatorSpecification0);
      Lookup lookup0 = configurationInterpolator0.fetchLookupForPrefix(""org.apache.commons.configuration2.interpol.ConfigurationInterpolator.defaultPrefixLookups"");
      configurationInterpolator0.addDefaultLookup(lookup0);
      Object object0 = configurationInterpolator0.resolve(""org.apache.commons.configuration2.interpol.ConfigurationInterpolator.defaultPrefixLookups"");
}"
1264,"    public boolean removeDefaultLookup(final Lookup lookup) {
        return defaultLookups.remove(lookup);
    }","  public void test35()  throws Throwable  {
      ConfigurationInterpolator configurationInterpolator0 = new ConfigurationInterpolator();
      DummyLookup dummyLookup0 = DummyLookup.INSTANCE;
      boolean boolean0 = configurationInterpolator0.removeDefaultLookup(dummyLookup0);
}"
1265,"    public Function<Object, String> getStringConverter() {
        return stringConverter;
    }","  public void test36()  throws Throwable  {
      ConfigurationInterpolator configurationInterpolator0 = new ConfigurationInterpolator();
      LinkedHashSet<DummyLookup> linkedHashSet0 = new LinkedHashSet<DummyLookup>(219, 219);
      Function<Object, String> function0 = configurationInterpolator0.getStringConverter();
      String string0 = function0.apply(linkedHashSet0);
}"
1266,"    protected Class<?> fetchClass(final String className) throws ClassNotFoundException {
        return ClassUtils.getClass(className);
    }","  public void test0()  throws Throwable  {
      ConstantLookup constantLookup0 = new ConstantLookup();
      Class<?> class0 = constantLookup0.fetchClass(""short"");
}"
1267,"    protected Class<?> fetchClass(final String className) throws ClassNotFoundException {
        return ClassUtils.getClass(className);
    }","  public void test1()  throws Throwable  {
      ConstantLookup constantLookup0 = new ConstantLookup();
      Class<?> class0 = constantLookup0.fetchClass(""org.apache.commons.configuration2.interpol.ConstantLookup"");
}"
1268,"    protected Object resolveField(final String className, final String fieldName) throws Exception {
        return fetchClass(className).getField(fieldName).get(null);
    }","  public void test2()  throws Throwable  {
      ConstantLookup constantLookup0 = new ConstantLookup();
      try { 
        constantLookup0.resolveField((String) null, "",;"");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // className
         //
         verifyException(""java.util.Objects"", e);
      }
  }"
1269,"    protected Object resolveField(final String className, final String fieldName) throws Exception {
        return fetchClass(className).getField(fieldName).get(null);
    }","  public void test3()  throws Throwable  {
      ConstantLookup constantLookup0 = new ConstantLookup();
      try { 
        constantLookup0.resolveField(""org.apache.commons.configuration2.interpol.ConstantLookup"", """");
        fail(""Expecting exception: NoSuchFieldException"");
      } catch(NoSuchFieldException e) {
      }
  }"
1270,"    protected Class<?> fetchClass(final String className) throws ClassNotFoundException {
        return ClassUtils.getClass(className);
    }","  public void test4()  throws Throwable  {
      ConstantLookup constantLookup0 = new ConstantLookup();
      // Undeclared exception!
      try { 
        constantLookup0.fetchClass((String) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // className
         //
         verifyException(""java.util.Objects"", e);
      }
  }"
1271,"    protected Class<?> fetchClass(final String className) throws ClassNotFoundException {
        return ClassUtils.getClass(className);
    }","  public void test5()  throws Throwable  {
      ConstantLookup constantLookup0 = new ConstantLookup();
      try { 
        constantLookup0.fetchClass(""cIzyf&]+"");
        fail(""Expecting exception: ClassNotFoundException"");
      } catch(ClassNotFoundException e) {
      }
  }"
1272,"    public Object lookup(final String var) {
        if (var == null) {
            return null;
        }
        return CACHE.computeIfAbsent(var, k -> {
            final int fieldPos = var.lastIndexOf(FIELD_SEPRATOR);
            if (fieldPos >= 0) {
                try {
                    return resolveField(var.substring(0, fieldPos), var.substring(fieldPos + 1));
                } catch (final Exception ex) {
                    log.warn(""Could not obtain value for variable "" + var, ex);
                }
            }
            return null;
        });
    }","  public void test6()  throws Throwable  {
      ConstantLookup constantLookup0 = new ConstantLookup();
      Object object0 = constantLookup0.lookup((String) null);
}"
1273,"    public Object lookup(final String var) {
        if (var == null) {
            return null;
        }
        return CACHE.computeIfAbsent(var, k -> {
            final int fieldPos = var.lastIndexOf(FIELD_SEPRATOR);
            if (fieldPos >= 0) {
                try {
                    return resolveField(var.substring(0, fieldPos), var.substring(fieldPos + 1));
                } catch (final Exception ex) {
                    log.warn(""Could not obtain value for variable "" + var, ex);
                }
            }
            return null;
        });
    }","  public void test7()  throws Throwable  {
      ConstantLookup constantLookup0 = new ConstantLookup();
      Object object0 = constantLookup0.lookup(""org.apache.commons.configuration2.interpol.ConstantLookup"");
}"
1274,"    public static void clear() {
        CACHE.clear();
    }","  public void test8()  throws Throwable  {
      ConstantLookup.clear();
  }"
1275,"    protected Object resolveField(final String className, final String fieldName) throws Exception {
        return fetchClass(className).getField(fieldName).get(null);
    }","  public void test9()  throws Throwable  {
      ConstantLookup constantLookup0 = new ConstantLookup();
      try { 
        constantLookup0.resolveField("" `3G[%X`QA3D;7&A/,w"", "" `3G[%X`QA3D;7&A/,w"");
        fail(""Expecting exception: ClassNotFoundException"");
      } catch(ClassNotFoundException e) {
      }
  }"
1276,"    public Object lookup(final String variable) {
        return StringLookupFactory.INSTANCE.systemPropertyStringLookup().lookup(variable);
    }","  public void test0()  throws Throwable  {
      SystemPropertiesLookup systemPropertiesLookup0 = new SystemPropertiesLookup();
      Object object0 = systemPropertiesLookup0.lookup(""*a"");
}"
1277,"    public String lookup(final String key) {
        return System.getenv(key);
    }","  public void test0()  throws Throwable  {
      EnvironmentLookup environmentLookup0 = new EnvironmentLookup();
      String string0 = environmentLookup0.lookup(""_"");
}"
1278,"    public String lookup(final String key) {
        return System.getenv(key);
    }","  public void test1()  throws Throwable  {
      EnvironmentLookup environmentLookup0 = new EnvironmentLookup();
      // Undeclared exception!
      try { 
        environmentLookup0.lookup((String) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }"
1279,"    public String lookup(final String key) {
        return System.getenv(key);
    }","  public void test2()  throws Throwable  {
      EnvironmentLookup environmentLookup0 = new EnvironmentLookup();
      String string0 = environmentLookup0.lookup(""org.apache.commons.configuration2.interpol.EnvironmentLookup"");
}"
1280,"    public Object getValue() {
        return value;
    }","  public void test0()  throws Throwable  {
      CombinedConfiguration combinedConfiguration0 = new CombinedConfiguration();
      XMLBeanDeclaration xMLBeanDeclaration0 = new XMLBeanDeclaration((HierarchicalConfiguration<ImmutableNode>) combinedConfiguration0);
      ConstructorArg constructorArg0 = ConstructorArg.forBeanDeclaration((BeanDeclaration) xMLBeanDeclaration0);
      Object object0 = constructorArg0.getValue();
}"
1281,"    public String getTypeName() {
        return typeName;
    }","  public void test1()  throws Throwable  {
      ConstructorArg constructorArg0 = ConstructorArg.forValue((Object) ""g)%>6$K"", ""\"""");
      String string0 = constructorArg0.getTypeName();
}"
1282,"    public String getTypeName() {
        return typeName;
    }","  public void test2()  throws Throwable  {
      Object object0 = new Object();
      ConstructorArg constructorArg0 = ConstructorArg.forValue(object0, """");
      String string0 = constructorArg0.getTypeName();
}"
1283,"    public BeanDeclaration getBeanDeclaration() {
        return beanDeclaration;
    }","  public void test3()  throws Throwable  {
      BeanDeclaration[] beanDeclarationArray0 = new BeanDeclaration[0];
      CombinedBeanDeclaration combinedBeanDeclaration0 = new CombinedBeanDeclaration(beanDeclarationArray0);
      ConstructorArg constructorArg0 = ConstructorArg.forBeanDeclaration((BeanDeclaration) combinedBeanDeclaration0, ""ZcPzv^7u>"");
      BeanDeclaration beanDeclaration0 = constructorArg0.getBeanDeclaration();
}"
1284,"    public static ConstructorArg forBeanDeclaration(final BeanDeclaration decl) {
        return forBeanDeclaration(decl, null);
    }","  public void test4()  throws Throwable  {
      // Undeclared exception!
      try { 
        ConstructorArg.forBeanDeclaration((BeanDeclaration) null, ""+;T0xY0eq6%"");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // beanDeclaration
         //
         verifyException(""java.util.Objects"", e);
      }
  }"
1285,"    public boolean isNestedBeanDeclaration() {
        return getBeanDeclaration() != null;
    }","  public void test5()  throws Throwable  {
      BeanDeclaration[] beanDeclarationArray0 = new BeanDeclaration[0];
      CombinedBeanDeclaration combinedBeanDeclaration0 = new CombinedBeanDeclaration(beanDeclarationArray0);
      ConstructorArg constructorArg0 = ConstructorArg.forBeanDeclaration((BeanDeclaration) combinedBeanDeclaration0, "",n]qa+"");
      boolean boolean0 = constructorArg0.isNestedBeanDeclaration();
}"
1286,"    public boolean isNestedBeanDeclaration() {
        return getBeanDeclaration() != null;
    }","  public void test6()  throws Throwable  {
      Object object0 = new Object();
      ConstructorArg constructorArg0 = ConstructorArg.forValue(object0);
      boolean boolean0 = constructorArg0.isNestedBeanDeclaration();
}"
1287,"    public String getTypeName() {
        return typeName;
    }","  public void test7()  throws Throwable  {
      Object object0 = new Object();
      ConstructorArg constructorArg0 = ConstructorArg.forValue(object0);
      String string0 = constructorArg0.getTypeName();
}"
1288,"    public Object getValue() {
        return value;
    }","  public void test8()  throws Throwable  {
      Object object0 = new Object();
      ConstructorArg constructorArg0 = ConstructorArg.forValue(object0);
      Object object1 = constructorArg0.getValue();
}"
1289,"    public BeanDeclaration getBeanDeclaration() {
        return beanDeclaration;
    }","  public void test9()  throws Throwable  {
      Object object0 = new Object();
      ConstructorArg constructorArg0 = ConstructorArg.forValue(object0);
      BeanDeclaration beanDeclaration0 = constructorArg0.getBeanDeclaration();
}"
1290,"    public boolean matches(final Class<?> argCls) {
        if (argCls == null) {
            return false;
        }

        return getTypeName() == null || getTypeName().equals(argCls.getName());
    }","  public void test10()  throws Throwable  {
      ConstructorArg constructorArg0 = ConstructorArg.forValue((Object) ""AhiMQYpWU;M5^"", ""java.lang.String"");
      Class<String> class0 = String.class;
      boolean boolean0 = constructorArg0.matches(class0);
}"
1291,"    public boolean matches(final Class<?> argCls) {
        if (argCls == null) {
            return false;
        }

        return getTypeName() == null || getTypeName().equals(argCls.getName());
    }","  public void test11()  throws Throwable  {
      HierarchicalConfiguration<Object> hierarchicalConfiguration0 = (HierarchicalConfiguration<Object>) mock(HierarchicalConfiguration.class, new ViolatedAssumptionAnswer());
      XMLBeanDeclaration xMLBeanDeclaration0 = new XMLBeanDeclaration(hierarchicalConfiguration0, (XMLBeanDeclaration.NodeData<?>) null);
      ConstructorArg constructorArg0 = ConstructorArg.forBeanDeclaration((BeanDeclaration) xMLBeanDeclaration0, """");
      Class<Object> class0 = Object.class;
      boolean boolean0 = constructorArg0.matches(class0);
}"
1292,"    public boolean matches(final Class<?> argCls) {
        if (argCls == null) {
            return false;
        }

        return getTypeName() == null || getTypeName().equals(argCls.getName());
    }","  public void test12()  throws Throwable  {
      ConstructorArg constructorArg0 = ConstructorArg.forValue((Object) ""AhiMQYpWU;M5^"", ""java.lang.String"");
      boolean boolean0 = constructorArg0.matches((Class<?>) null);
}"
1293,"    public boolean matches(final Class<?> argCls) {
        if (argCls == null) {
            return false;
        }

        return getTypeName() == null || getTypeName().equals(argCls.getName());
    }","  public void test13()  throws Throwable  {
      Object object0 = new Object();
      ConstructorArg constructorArg0 = ConstructorArg.forValue(object0);
      Class<Object> class0 = Object.class;
      boolean boolean0 = constructorArg0.matches(class0);
}"
1294,"    public static ConstructorArg forBeanDeclaration(final BeanDeclaration decl) {
        return forBeanDeclaration(decl, null);
    }","  public void test14()  throws Throwable  {
      // Undeclared exception!
      try { 
        ConstructorArg.forBeanDeclaration((BeanDeclaration) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // beanDeclaration
         //
         verifyException(""java.util.Objects"", e);
      }
  }"
1295,"    public boolean isNestedBeanDeclaration() {
        return getBeanDeclaration() != null;
    }","  public void test15()  throws Throwable  {
      Object object0 = new Object();
      ConstructorArg constructorArg0 = ConstructorArg.forValue(object0);
      constructorArg0.toString();
}"
1296,"    public boolean isNestedBeanDeclaration() {
        return getBeanDeclaration() != null;
    }","  public void test16()  throws Throwable  {
      HierarchicalConfiguration<Object> hierarchicalConfiguration0 = (HierarchicalConfiguration<Object>) mock(HierarchicalConfiguration.class, new ViolatedAssumptionAnswer());
      XMLBeanDeclaration xMLBeanDeclaration0 = new XMLBeanDeclaration(hierarchicalConfiguration0, (XMLBeanDeclaration.NodeData<?>) null);
      ConstructorArg constructorArg0 = ConstructorArg.forBeanDeclaration((BeanDeclaration) xMLBeanDeclaration0, """");
      constructorArg0.toString();
}"
1297,"    public <T> XMLBeanDeclaration(final HierarchicalConfiguration<T> config, final String key) {
        this(config, key, false);
    }","  public void test0()  throws Throwable  {
      CombinedConfiguration combinedConfiguration0 = new CombinedConfiguration();
      DefaultListDelimiterHandler defaultListDelimiterHandler0 = new DefaultListDelimiterHandler('K');
      combinedConfiguration0.setListDelimiterHandler(defaultListDelimiterHandler0);
      Class<CombinedBeanDeclaration> class0 = CombinedBeanDeclaration.class;
      Class<String> class1 = String.class;
      YAMLConfiguration yAMLConfiguration0 = new YAMLConfiguration(combinedConfiguration0);
      Class<String> class2 = String.class;
      yAMLConfiguration0.getList(class2, """");
      combinedConfiguration0.getCollection(class1, """", (Collection<String>) null, (Collection<String>) null);
      combinedConfiguration0.getArray(class0, (String) null);
      XMLBeanDeclaration xMLBeanDeclaration0 = new XMLBeanDeclaration((HierarchicalConfiguration<ImmutableNode>) combinedConfiguration0, (String) null, false);
      NodeHandler<CombinedConfiguration> nodeHandler0 = (NodeHandler<CombinedConfiguration>) mock(NodeHandler.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(nodeHandler0).getAttributeValue(any(org.apache.commons.configuration2.CombinedConfiguration.class) , anyString());
      xMLBeanDeclaration0.getBeanFactoryName();
      XMLBeanDeclaration.NodeData<CombinedConfiguration> xMLBeanDeclaration_NodeData0 = new XMLBeanDeclaration.NodeData<CombinedConfiguration>(combinedConfiguration0, nodeHandler0);
      xMLBeanDeclaration_NodeData0.getAttribute(""[@config-class]"");
      PatternSubtreeConfigurationWrapper patternSubtreeConfigurationWrapper0 = new PatternSubtreeConfigurationWrapper(combinedConfiguration0, ""config-value"");
      NodeHandler<PatternSubtreeConfigurationWrapper> nodeHandler1 = (NodeHandler<PatternSubtreeConfigurationWrapper>) mock(NodeHandler.class, new ViolatedAssumptionAnswer());
      doReturn((List) null).when(nodeHandler1).getChildren(any(org.apache.commons.configuration2.PatternSubtreeConfigurationWrapper.class));
      XMLBeanDeclaration.NodeData<PatternSubtreeConfigurationWrapper> xMLBeanDeclaration_NodeData1 = new XMLBeanDeclaration.NodeData<PatternSubtreeConfigurationWrapper>(patternSubtreeConfigurationWrapper0, nodeHandler1);
      // Undeclared exception!
      try { 
        xMLBeanDeclaration_NodeData1.getChildren();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.configuration2.beanutils.XMLBeanDeclaration$NodeData"", e);
      }
  }"
1298,"    public <T> XMLBeanDeclaration(final HierarchicalConfiguration<T> config, final String key) {
        this(config, key, false);
    }","  public void test1()  throws Throwable  {
      ConstructorArg constructorArg0 = ConstructorArg.forValue((Object) ""1w't@#F{-qV$m"");
      NodeHandler<ConstructorArg> nodeHandler0 = (NodeHandler<ConstructorArg>) mock(NodeHandler.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(nodeHandler0).nodeName(any(org.apache.commons.configuration2.beanutils.ConstructorArg.class));
      XMLBeanDeclaration.NodeData<ConstructorArg> xMLBeanDeclaration_NodeData0 = new XMLBeanDeclaration.NodeData<ConstructorArg>(constructorArg0, nodeHandler0);
      String string0 = xMLBeanDeclaration_NodeData0.nodeName();
}"
1299,"    public <T> XMLBeanDeclaration(final HierarchicalConfiguration<T> config, final String key) {
        this(config, key, false);
    }","  public void test2()  throws Throwable  {
      DynamicCombinedConfiguration dynamicCombinedConfiguration0 = new DynamicCombinedConfiguration();
      NodeHandler<DynamicCombinedConfiguration> nodeHandler0 = (NodeHandler<DynamicCombinedConfiguration>) mock(NodeHandler.class, new ViolatedAssumptionAnswer());
      doReturn((Set) null).when(nodeHandler0).getAttributes(any(org.apache.commons.configuration2.DynamicCombinedConfiguration.class));
      XMLBeanDeclaration.NodeData<DynamicCombinedConfiguration> xMLBeanDeclaration_NodeData0 = new XMLBeanDeclaration.NodeData<DynamicCombinedConfiguration>(dynamicCombinedConfiguration0, nodeHandler0);
      Set<String> set0 = xMLBeanDeclaration_NodeData0.getAttributes();
}"
1300,"    protected boolean isReservedName(final String name) {
        return name == null || name.startsWith(RESERVED_PREFIX);
    }","  public void test3()  throws Throwable  {
      HierarchicalConfiguration<Integer> hierarchicalConfiguration0 = (HierarchicalConfiguration<Integer>) mock(HierarchicalConfiguration.class, new ViolatedAssumptionAnswer());
      NodeHandler<DynamicCombinedConfiguration> nodeHandler0 = (NodeHandler<DynamicCombinedConfiguration>) mock(NodeHandler.class, new ViolatedAssumptionAnswer());
      XMLBeanDeclaration.NodeData<DynamicCombinedConfiguration> xMLBeanDeclaration_NodeData0 = new XMLBeanDeclaration.NodeData<DynamicCombinedConfiguration>((DynamicCombinedConfiguration) null, nodeHandler0);
      XMLBeanDeclaration xMLBeanDeclaration0 = new XMLBeanDeclaration(hierarchicalConfiguration0, xMLBeanDeclaration_NodeData0);
      boolean boolean0 = xMLBeanDeclaration0.isReservedName(""config-union select\n 'LONG RAW' as type_name, -4 as data_type, 2147483647 as precision,\n '''' as literal_prefix, '''' as literal_suffix, NULL as create_params,\n 1 as nullable, 0 as case_sensitive, 0 as searchable,\n 0 as unsigned_attribute, 0 as fixed_prec_scale, 0 as auto_increment,\n 'LONG RAW' as local_type_name, 0 as minimum_scale, 0 as maximum_scale,\n NULL as sql_data_type, NULL as sql_datetime_sub, 10 as num_prec_radix\nfrom dual\n"");
}"
1301,"    protected boolean isReservedName(final String name) {
        return name == null || name.startsWith(RESERVED_PREFIX);
    }","  public void test4()  throws Throwable  {
      ConstructorArg constructorArg0 = ConstructorArg.forValue((Object) ""1w't@#F{-qV$m"");
      NodeHandler<ConstructorArg> nodeHandler0 = (NodeHandler<ConstructorArg>) mock(NodeHandler.class, new ViolatedAssumptionAnswer());
      XMLBeanDeclaration.NodeData<ConstructorArg> xMLBeanDeclaration_NodeData0 = new XMLBeanDeclaration.NodeData<ConstructorArg>(constructorArg0, nodeHandler0);
      HierarchicalConfiguration<XMLConfiguration> hierarchicalConfiguration0 = (HierarchicalConfiguration<XMLConfiguration>) mock(HierarchicalConfiguration.class, new ViolatedAssumptionAnswer());
      XMLBeanDeclaration xMLBeanDeclaration0 = new XMLBeanDeclaration(hierarchicalConfiguration0, xMLBeanDeclaration_NodeData0);
      boolean boolean0 = xMLBeanDeclaration0.isReservedName(""[@config-"");
}"
1302,"    protected boolean isReservedChildName(final String name) {
        return isReservedName(name);
    }","  public void test5()  throws Throwable  {
      INIConfiguration iNIConfiguration0 = new INIConfiguration();
      JSONConfiguration jSONConfiguration0 = new JSONConfiguration(iNIConfiguration0);
      NodeHandler<AbstractYAMLBasedConfiguration> nodeHandler0 = (NodeHandler<AbstractYAMLBasedConfiguration>) mock(NodeHandler.class, new ViolatedAssumptionAnswer());
      XMLBeanDeclaration.NodeData<AbstractYAMLBasedConfiguration> xMLBeanDeclaration_NodeData0 = new XMLBeanDeclaration.NodeData<AbstractYAMLBasedConfiguration>(jSONConfiguration0, nodeHandler0);
      XMLBeanDeclaration xMLBeanDeclaration0 = new XMLBeanDeclaration(jSONConfiguration0, xMLBeanDeclaration_NodeData0);
      boolean boolean0 = xMLBeanDeclaration0.isReservedChildName(""i@{<G!'tDf@$\"";b"");
}"
1303,"    protected boolean isReservedAttributeName(final String name) {
        return isReservedName(name);
    }","  public void test6()  throws Throwable  {
      ConstructorArg constructorArg0 = ConstructorArg.forValue((Object) ""1w't@#F{-qV$m"");
      NodeHandler<ConstructorArg> nodeHandler0 = (NodeHandler<ConstructorArg>) mock(NodeHandler.class, new ViolatedAssumptionAnswer());
      XMLBeanDeclaration.NodeData<ConstructorArg> xMLBeanDeclaration_NodeData0 = new XMLBeanDeclaration.NodeData<ConstructorArg>(constructorArg0, nodeHandler0);
      HierarchicalConfiguration<XMLConfiguration> hierarchicalConfiguration0 = (HierarchicalConfiguration<XMLConfiguration>) mock(HierarchicalConfiguration.class, new ViolatedAssumptionAnswer());
      XMLBeanDeclaration xMLBeanDeclaration0 = new XMLBeanDeclaration(hierarchicalConfiguration0, xMLBeanDeclaration_NodeData0);
      boolean boolean0 = xMLBeanDeclaration0.isReservedAttributeName((String) null);
}"
1304,"    NodeData<?> getNode() {
        return nodeData;
    }","  public void test7()  throws Throwable  {
      HierarchicalConfiguration<YAMLConfiguration> hierarchicalConfiguration0 = (HierarchicalConfiguration<YAMLConfiguration>) mock(HierarchicalConfiguration.class, new ViolatedAssumptionAnswer());
      XMLBeanDeclaration xMLBeanDeclaration0 = new XMLBeanDeclaration(hierarchicalConfiguration0, (XMLBeanDeclaration.NodeData<?>) null);
      XMLBeanDeclaration.NodeData<?> xMLBeanDeclaration_NodeData0 = xMLBeanDeclaration0.getNode();
}"
1305,"    NodeData<?> getNode() {
        return nodeData;
    }","  public void test8()  throws Throwable  {
      HierarchicalConfiguration<CombinedConfiguration> hierarchicalConfiguration0 = (HierarchicalConfiguration<CombinedConfiguration>) mock(HierarchicalConfiguration.class, new ViolatedAssumptionAnswer());
      OverrideCombiner overrideCombiner0 = new OverrideCombiner();
      DynamicCombinedConfiguration dynamicCombinedConfiguration0 = new DynamicCombinedConfiguration(overrideCombiner0);
      NodeHandler<CombinedConfiguration> nodeHandler0 = (NodeHandler<CombinedConfiguration>) mock(NodeHandler.class, new ViolatedAssumptionAnswer());
      XMLBeanDeclaration.NodeData<CombinedConfiguration> xMLBeanDeclaration_NodeData0 = new XMLBeanDeclaration.NodeData<CombinedConfiguration>(dynamicCombinedConfiguration0, nodeHandler0);
      XMLBeanDeclaration xMLBeanDeclaration0 = new XMLBeanDeclaration(hierarchicalConfiguration0, xMLBeanDeclaration_NodeData0);
      XMLBeanDeclaration.NodeData<?> xMLBeanDeclaration_NodeData1 = xMLBeanDeclaration0.getNode();
}"
1306,"    public String getDefaultBeanClassName() {
        return defaultBeanClassName;
    }","  public void test9()  throws Throwable  {
      OverrideCombiner overrideCombiner0 = new OverrideCombiner();
      DynamicCombinedConfiguration dynamicCombinedConfiguration0 = new DynamicCombinedConfiguration(overrideCombiner0);
      NodeHandler<BaseHierarchicalConfiguration> nodeHandler0 = (NodeHandler<BaseHierarchicalConfiguration>) mock(NodeHandler.class, new ViolatedAssumptionAnswer());
      doReturn(dynamicCombinedConfiguration0).when(nodeHandler0).getRootNode();
      NodeModel<BaseHierarchicalConfiguration> nodeModel0 = (NodeModel<BaseHierarchicalConfiguration>) mock(NodeModel.class, new ViolatedAssumptionAnswer());
      doReturn(nodeHandler0).when(nodeModel0).getNodeHandler();
      HierarchicalConfiguration<BaseHierarchicalConfiguration> hierarchicalConfiguration0 = (HierarchicalConfiguration<BaseHierarchicalConfiguration>) mock(HierarchicalConfiguration.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(hierarchicalConfiguration0).toString();
      doReturn(nodeModel0).when(hierarchicalConfiguration0).getNodeModel();
      HierarchicalConfiguration<BaseHierarchicalConfiguration> hierarchicalConfiguration1 = (HierarchicalConfiguration<BaseHierarchicalConfiguration>) mock(HierarchicalConfiguration.class, new ViolatedAssumptionAnswer());
      doReturn(hierarchicalConfiguration0).when(hierarchicalConfiguration1).configurationAt(anyString());
      XMLBeanDeclaration xMLBeanDeclaration0 = new XMLBeanDeclaration(hierarchicalConfiguration1, ""/I:.w05dZA,i}C}Y2"", true, ""/I:.w05dZA,i}C}Y2"");
      String string0 = xMLBeanDeclaration0.getDefaultBeanClassName();
}"
1307,"    public String getDefaultBeanClassName() {
        return defaultBeanClassName;
    }","  public void test10()  throws Throwable  {
      YAMLConfiguration yAMLConfiguration0 = new YAMLConfiguration();
      XMLBeanDeclaration xMLBeanDeclaration0 = new XMLBeanDeclaration((HierarchicalConfiguration<ImmutableNode>) yAMLConfiguration0, """", false, """");
      String string0 = xMLBeanDeclaration0.getDefaultBeanClassName();
}"
1308,"    public Map<String, Object> getBeanProperties() {
        final Map<String, Object> props = new HashMap<>();
        for (final String key : getAttributeNames()) {
            if (!isReservedAttributeName(key)) {
                props.put(key, interpolate(getNode().getAttribute(key)));
            }
        }

        return props;
    }","  public void test11()  throws Throwable  {
      ConfigurationInterpolator configurationInterpolator0 = new ConfigurationInterpolator();
      configurationInterpolator0.getParentInterpolator();
      HierarchicalConfiguration<XMLConfiguration> hierarchicalConfiguration0 = (HierarchicalConfiguration<XMLConfiguration>) mock(HierarchicalConfiguration.class, new ViolatedAssumptionAnswer());
      doReturn(""config-i@{<G!'tDf@$\"";b"").when(hierarchicalConfiguration0).toString();
      doReturn((ConfigurationInterpolator) null).when(hierarchicalConfiguration0).getInterpolator();
      CombinedConfiguration combinedConfiguration0 = new CombinedConfiguration();
      PatternSubtreeConfigurationWrapper patternSubtreeConfigurationWrapper0 = new PatternSubtreeConfigurationWrapper(combinedConfiguration0, ""h"");
      NodeHandler<PatternSubtreeConfigurationWrapper> nodeHandler0 = (NodeHandler<PatternSubtreeConfigurationWrapper>) mock(NodeHandler.class, new ViolatedAssumptionAnswer());
      doReturn((Set) null).when(nodeHandler0).getAttributes(any(org.apache.commons.configuration2.PatternSubtreeConfigurationWrapper.class));
      doReturn((String) null).when(nodeHandler0).nodeName(any(org.apache.commons.configuration2.PatternSubtreeConfigurationWrapper.class));
      XMLBeanDeclaration.NodeData<PatternSubtreeConfigurationWrapper> xMLBeanDeclaration_NodeData0 = new XMLBeanDeclaration.NodeData<PatternSubtreeConfigurationWrapper>(patternSubtreeConfigurationWrapper0, nodeHandler0);
      xMLBeanDeclaration_NodeData0.escapedNodeName(combinedConfiguration0);
      XMLBeanDeclaration xMLBeanDeclaration0 = new XMLBeanDeclaration(hierarchicalConfiguration0, xMLBeanDeclaration_NodeData0);
      xMLBeanDeclaration0.interpolate(xMLBeanDeclaration_NodeData0);
      // Undeclared exception!
      try { 
        xMLBeanDeclaration0.getBeanProperties();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.configuration2.beanutils.XMLBeanDeclaration"", e);
      }
  }"
1309,"    public Object getBeanFactoryParameter() {
        return getConfiguration().getProperty(ATTR_FACTORY_PARAM);
    }","  public void test12()  throws Throwable  {
      HierarchicalConfiguration<ConstructorArg> hierarchicalConfiguration0 = (HierarchicalConfiguration<ConstructorArg>) mock(HierarchicalConfiguration.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(hierarchicalConfiguration0).toString();
      doReturn((Object) null).when(hierarchicalConfiguration0).getProperty(anyString());
      DynamicCombinedConfiguration dynamicCombinedConfiguration0 = new DynamicCombinedConfiguration();
      NodeHandler<DynamicCombinedConfiguration> nodeHandler0 = (NodeHandler<DynamicCombinedConfiguration>) mock(NodeHandler.class, new ViolatedAssumptionAnswer());
      XMLBeanDeclaration.NodeData<DynamicCombinedConfiguration> xMLBeanDeclaration_NodeData0 = new XMLBeanDeclaration.NodeData<DynamicCombinedConfiguration>(dynamicCombinedConfiguration0, nodeHandler0);
      XMLBeanDeclaration xMLBeanDeclaration0 = new XMLBeanDeclaration(hierarchicalConfiguration0, xMLBeanDeclaration_NodeData0);
      Object object0 = xMLBeanDeclaration0.getBeanFactoryParameter();
}"
1310,"    public String getDefaultBeanClassName() {
        return defaultBeanClassName;
    }","  public void test13()  throws Throwable  {
      YAMLConfiguration yAMLConfiguration0 = new YAMLConfiguration();
      XMLBeanDeclaration xMLBeanDeclaration0 = new XMLBeanDeclaration((HierarchicalConfiguration<ImmutableNode>) yAMLConfiguration0, ""conf\""ig-class"", true, ""conf\""ig-class"");
      xMLBeanDeclaration0.getBeanClassName();
}"
1311,"    protected Set<String> getAttributeNames() {
        return getNode().getAttributes();
    }","  public void test14()  throws Throwable  {
      HierarchicalConfiguration<ConstructorArg> hierarchicalConfiguration0 = (HierarchicalConfiguration<ConstructorArg>) mock(HierarchicalConfiguration.class, new ViolatedAssumptionAnswer());
      OverrideCombiner overrideCombiner0 = new OverrideCombiner();
      CombinedConfiguration combinedConfiguration0 = new CombinedConfiguration(overrideCombiner0);
      YAMLConfiguration yAMLConfiguration0 = new YAMLConfiguration(combinedConfiguration0);
      NodeHandler<AbstractYAMLBasedConfiguration> nodeHandler0 = (NodeHandler<AbstractYAMLBasedConfiguration>) mock(NodeHandler.class, new ViolatedAssumptionAnswer());
      doReturn((Set<String>) null).when(nodeHandler0).getAttributes(any(org.apache.commons.configuration2.AbstractYAMLBasedConfiguration.class));
      XMLBeanDeclaration.NodeData<AbstractYAMLBasedConfiguration> xMLBeanDeclaration_NodeData0 = new XMLBeanDeclaration.NodeData<AbstractYAMLBasedConfiguration>(yAMLConfiguration0, nodeHandler0);
      XMLBeanDeclaration xMLBeanDeclaration0 = new XMLBeanDeclaration(hierarchicalConfiguration0, xMLBeanDeclaration_NodeData0);
      Set<String> set0 = xMLBeanDeclaration0.getAttributeNames();
}"
1312,"    public String getDefaultBeanClassName() {
        return defaultBeanClassName;
    }","  public void test15()  throws Throwable  {
      HierarchicalConfiguration<ConstructorArg> hierarchicalConfiguration0 = (HierarchicalConfiguration<ConstructorArg>) mock(HierarchicalConfiguration.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(hierarchicalConfiguration0).toString();
      doReturn((ConfigurationInterpolator) null).when(hierarchicalConfiguration0).getInterpolator();
      OverrideCombiner overrideCombiner0 = new OverrideCombiner();
      CombinedConfiguration combinedConfiguration0 = new CombinedConfiguration(overrideCombiner0);
      overrideCombiner0.addListNode(""O1PsSd\""c,="");
      YAMLConfiguration yAMLConfiguration0 = new YAMLConfiguration(combinedConfiguration0);
      NodeHandler<AbstractYAMLBasedConfiguration> nodeHandler0 = (NodeHandler<AbstractYAMLBasedConfiguration>) mock(NodeHandler.class, new ViolatedAssumptionAnswer());
      doReturn((Set) null).when(nodeHandler0).getAttributes(any(org.apache.commons.configuration2.AbstractYAMLBasedConfiguration.class));
      doReturn((String) null).when(nodeHandler0).nodeName(any(org.apache.commons.configuration2.AbstractYAMLBasedConfiguration.class));
      XMLBeanDeclaration.NodeData<AbstractYAMLBasedConfiguration> xMLBeanDeclaration_NodeData0 = new XMLBeanDeclaration.NodeData<AbstractYAMLBasedConfiguration>(yAMLConfiguration0, nodeHandler0);
      XMLBeanDeclaration xMLBeanDeclaration0 = new XMLBeanDeclaration(hierarchicalConfiguration0, xMLBeanDeclaration_NodeData0);
      xMLBeanDeclaration_NodeData0.escapedNodeName(combinedConfiguration0);
      ConfigurationEvent configurationEvent0 = new ConfigurationEvent(overrideCombiner0, combinedConfiguration0.COMBINED_INVALIDATE, ""config-"", xMLBeanDeclaration0, true);
      Class<AbstractYAMLBasedConfiguration> class0 = AbstractYAMLBasedConfiguration.class;
      LinkedList<AbstractYAMLBasedConfiguration> linkedList0 = new LinkedList<AbstractYAMLBasedConfiguration>();
      List<AbstractYAMLBasedConfiguration> list0 = yAMLConfiguration0.getList(class0, """", (List<AbstractYAMLBasedConfiguration>) linkedList0);
      xMLBeanDeclaration_NodeData0.wrapInNodeData(list0);
      overrideCombiner0.addListNode("""");
      xMLBeanDeclaration0.interpolate(configurationEvent0);
      xMLBeanDeclaration0.getAttributeNames();
      String string0 = xMLBeanDeclaration0.getDefaultBeanClassName();
}"
1313,"    protected boolean isReservedAttributeName(final String name) {
        return isReservedName(name);
    }","  public void test16()  throws Throwable  {
      HierarchicalConfiguration<ConstructorArg> hierarchicalConfiguration0 = (HierarchicalConfiguration<ConstructorArg>) mock(HierarchicalConfiguration.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(hierarchicalConfiguration0).toString();
      doReturn((ConfigurationInterpolator) null).when(hierarchicalConfiguration0).getInterpolator();
      OverrideCombiner overrideCombiner0 = new OverrideCombiner();
      CombinedConfiguration combinedConfiguration0 = new CombinedConfiguration(overrideCombiner0);
      overrideCombiner0.addListNode(""O1PsSd\""c,="");
      YAMLConfiguration yAMLConfiguration0 = new YAMLConfiguration(combinedConfiguration0);
      NodeHandler<AbstractYAMLBasedConfiguration> nodeHandler0 = (NodeHandler<AbstractYAMLBasedConfiguration>) mock(NodeHandler.class, new ViolatedAssumptionAnswer());
      doReturn((Set) null).when(nodeHandler0).getAttributes(any(org.apache.commons.configuration2.AbstractYAMLBasedConfiguration.class));
      doReturn((String) null).when(nodeHandler0).nodeName(any(org.apache.commons.configuration2.AbstractYAMLBasedConfiguration.class));
      XMLBeanDeclaration.NodeData<AbstractYAMLBasedConfiguration> xMLBeanDeclaration_NodeData0 = new XMLBeanDeclaration.NodeData<AbstractYAMLBasedConfiguration>(yAMLConfiguration0, nodeHandler0);
      XMLBeanDeclaration xMLBeanDeclaration0 = new XMLBeanDeclaration(hierarchicalConfiguration0, xMLBeanDeclaration_NodeData0);
      xMLBeanDeclaration_NodeData0.escapedNodeName(combinedConfiguration0);
      ConfigurationEvent configurationEvent0 = new ConfigurationEvent(overrideCombiner0, combinedConfiguration0.COMBINED_INVALIDATE, ""config-"", xMLBeanDeclaration0, true);
      Class<AbstractYAMLBasedConfiguration> class0 = AbstractYAMLBasedConfiguration.class;
      LinkedList<AbstractYAMLBasedConfiguration> linkedList0 = new LinkedList<AbstractYAMLBasedConfiguration>();
      List<AbstractYAMLBasedConfiguration> list0 = yAMLConfiguration0.getList(class0, """", (List<AbstractYAMLBasedConfiguration>) linkedList0);
      xMLBeanDeclaration_NodeData0.wrapInNodeData(list0);
      overrideCombiner0.addListNode("""");
      xMLBeanDeclaration0.interpolate(configurationEvent0);
      xMLBeanDeclaration0.getAttributeNames();
      String string0 = xMLBeanDeclaration0.getDefaultBeanClassName();
      boolean boolean0 = xMLBeanDeclaration0.isReservedAttributeName(""O1PsSd\""c,="");
}"
1314,"    protected Set<String> getAttributeNames() {
        return getNode().getAttributes();
    }","  public void test17()  throws Throwable  {
      YAMLConfiguration yAMLConfiguration0 = new YAMLConfiguration();
      Vector<AbstractYAMLBasedConfiguration> vector0 = new Vector<AbstractYAMLBasedConfiguration>();
      ConstructorArg constructorArg0 = ConstructorArg.forValue((Object) vector0, """");
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      NodeHandler<ConstructorArg> nodeHandler0 = (NodeHandler<ConstructorArg>) mock(NodeHandler.class, new ViolatedAssumptionAnswer());
      doReturn(set0).when(nodeHandler0).getAttributes(any(org.apache.commons.configuration2.beanutils.ConstructorArg.class));
      XMLBeanDeclaration.NodeData<ConstructorArg> xMLBeanDeclaration_NodeData0 = new XMLBeanDeclaration.NodeData<ConstructorArg>(constructorArg0, nodeHandler0);
      XMLBeanDeclaration xMLBeanDeclaration0 = new XMLBeanDeclaration(yAMLConfiguration0, xMLBeanDeclaration_NodeData0);
      Set<String> set1 = xMLBeanDeclaration0.getAttributeNames();
}"
1315,"    public Map<String, Object> getNestedBeanDeclarations() {
        final Map<String, Object> nested = new HashMap<>();
        for (final NodeData<?> child : getNode().getChildren()) {
            if (!isReservedChildName(child.nodeName())) {
                if (nested.containsKey(child.nodeName())) {
                    final Object obj = nested.get(child.nodeName());
                    final List<BeanDeclaration> list;
                    if (obj instanceof List) {
                        // Safe because we created the lists ourselves.
                        @SuppressWarnings(""unchecked"")
                        final List<BeanDeclaration> tmpList = (List<BeanDeclaration>) obj;
                        list = tmpList;
                    } else {
                        list = new ArrayList<>();
                        list.add((BeanDeclaration) obj);
                        nested.put(child.nodeName(), list);
                    }
                    list.add(createBeanDeclaration(child));
                } else {
                    nested.put(child.nodeName(), createBeanDeclaration(child));
                }
            }
        }

        return nested;
    }","  public void test18()  throws Throwable  {
      ConfigurationInterpolator configurationInterpolator0 = new ConfigurationInterpolator();
      DefaultExpressionEngineSymbols defaultExpressionEngineSymbols0 = DefaultExpressionEngineSymbols.DEFAULT_SYMBOLS;
      DefaultExpressionEngine defaultExpressionEngine0 = new DefaultExpressionEngine(defaultExpressionEngineSymbols0);
      HierarchicalConfiguration<XMLConfiguration> hierarchicalConfiguration0 = (HierarchicalConfiguration<XMLConfiguration>) mock(HierarchicalConfiguration.class, new ViolatedAssumptionAnswer());
      doReturn(""3"", (String) null).when(hierarchicalConfiguration0).toString();
      doReturn((List) null).when(hierarchicalConfiguration0).configurationsAt(anyString());
      doReturn(defaultExpressionEngine0).when(hierarchicalConfiguration0).getExpressionEngine();
      CombinedConfiguration combinedConfiguration0 = new CombinedConfiguration();
      PatternSubtreeConfigurationWrapper patternSubtreeConfigurationWrapper0 = new PatternSubtreeConfigurationWrapper(combinedConfiguration0, """");
      configurationInterpolator0.prefixSet();
      Vector<PatternSubtreeConfigurationWrapper> vector0 = new Vector<PatternSubtreeConfigurationWrapper>();
      vector0.setSize(1);
      NodeHandler<PatternSubtreeConfigurationWrapper> nodeHandler0 = (NodeHandler<PatternSubtreeConfigurationWrapper>) mock(NodeHandler.class, new ViolatedAssumptionAnswer());
      doReturn(vector0).when(nodeHandler0).getChildren(any(org.apache.commons.configuration2.PatternSubtreeConfigurationWrapper.class));
      doReturn("".KqorHC"", ""iV8RVg(%K`O"", "")"", (String) null).when(nodeHandler0).nodeName(any(org.apache.commons.configuration2.PatternSubtreeConfigurationWrapper.class));
      XMLBeanDeclaration.NodeData<PatternSubtreeConfigurationWrapper> xMLBeanDeclaration_NodeData0 = new XMLBeanDeclaration.NodeData<PatternSubtreeConfigurationWrapper>(patternSubtreeConfigurationWrapper0, nodeHandler0);
      XMLBeanDeclaration xMLBeanDeclaration0 = new XMLBeanDeclaration(hierarchicalConfiguration0, xMLBeanDeclaration_NodeData0);
      // Undeclared exception!
      try { 
        xMLBeanDeclaration0.getNestedBeanDeclarations();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.configuration2.beanutils.XMLBeanDeclaration"", e);
      }
  }"
1316,"    public Map<String, Object> getBeanProperties() {
        final Map<String, Object> props = new HashMap<>();
        for (final String key : getAttributeNames()) {
            if (!isReservedAttributeName(key)) {
                props.put(key, interpolate(getNode().getAttribute(key)));
            }
        }

        return props;
    }","  public void test19()  throws Throwable  {
      PropertiesConfiguration propertiesConfiguration0 = new PropertiesConfiguration();
      propertiesConfiguration0.getInterpolator();
      HierarchicalConfiguration<Integer> hierarchicalConfiguration0 = (HierarchicalConfiguration<Integer>) mock(HierarchicalConfiguration.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(hierarchicalConfiguration0).toString();
      doReturn((ConfigurationInterpolator) null, (ConfigurationInterpolator) null, (ConfigurationInterpolator) null, (ConfigurationInterpolator) null, (ConfigurationInterpolator) null).when(hierarchicalConfiguration0).getInterpolator();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      NodeHandler<DynamicCombinedConfiguration> nodeHandler0 = (NodeHandler<DynamicCombinedConfiguration>) mock(NodeHandler.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null, (Object) null, (Object) null, (Object) null).when(nodeHandler0).getAttributeValue(any(org.apache.commons.configuration2.DynamicCombinedConfiguration.class) , anyString());
      doReturn(set0).when(nodeHandler0).getAttributes(any(org.apache.commons.configuration2.DynamicCombinedConfiguration.class));
      XMLBeanDeclaration.NodeData<DynamicCombinedConfiguration> xMLBeanDeclaration_NodeData0 = new XMLBeanDeclaration.NodeData<DynamicCombinedConfiguration>((DynamicCombinedConfiguration) null, nodeHandler0);
      XMLBeanDeclaration xMLBeanDeclaration0 = new XMLBeanDeclaration(hierarchicalConfiguration0, xMLBeanDeclaration_NodeData0);
      xMLBeanDeclaration0.getBeanProperties();
  }"
1317,"    protected Set<String> getAttributeNames() {
        return getNode().getAttributes();
    }","  public void test20()  throws Throwable  {
      HierarchicalConfiguration<PatternSubtreeConfigurationWrapper> hierarchicalConfiguration0 = (HierarchicalConfiguration<PatternSubtreeConfigurationWrapper>) mock(HierarchicalConfiguration.class, new ViolatedAssumptionAnswer());
      XMLBeanDeclaration xMLBeanDeclaration0 = new XMLBeanDeclaration(hierarchicalConfiguration0, (XMLBeanDeclaration.NodeData<?>) null);
      // Undeclared exception!
      try { 
        xMLBeanDeclaration0.getAttributeNames();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.configuration2.beanutils.XMLBeanDeclaration"", e);
      }
  }"
1318,"    BeanDeclaration createBeanDeclaration(final NodeData<?> nodeData) {
        for (final HierarchicalConfiguration<?> config : getConfiguration().configurationsAt(nodeData.escapedNodeName(getConfiguration()))) {
            if (nodeData.matchesConfigRootNode(config)) {
                return new XMLBeanDeclaration(config, nodeData);
            }
        }
        throw new ConfigurationRuntimeException(""Unable to match node for "" + nodeData.nodeName());
    }","  public void test21()  throws Throwable  {
      HierarchicalConfiguration<INIConfiguration> hierarchicalConfiguration0 = (HierarchicalConfiguration<INIConfiguration>) mock(HierarchicalConfiguration.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(hierarchicalConfiguration0).toString();
      doReturn((ExpressionEngine) null).when(hierarchicalConfiguration0).getExpressionEngine();
      JSONConfiguration jSONConfiguration0 = new JSONConfiguration();
      NodeHandler<JSONConfiguration> nodeHandler0 = (NodeHandler<JSONConfiguration>) mock(NodeHandler.class, new ViolatedAssumptionAnswer());
      XMLBeanDeclaration.NodeData<JSONConfiguration> xMLBeanDeclaration_NodeData0 = new XMLBeanDeclaration.NodeData<JSONConfiguration>(jSONConfiguration0, nodeHandler0);
      XMLBeanDeclaration xMLBeanDeclaration0 = new XMLBeanDeclaration(hierarchicalConfiguration0, xMLBeanDeclaration_NodeData0);
      // Undeclared exception!
      try { 
        xMLBeanDeclaration0.createBeanDeclaration(xMLBeanDeclaration_NodeData0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.configuration2.beanutils.XMLBeanDeclaration$NodeData"", e);
      }
  }"
1319,"    public <T> XMLBeanDeclaration(final HierarchicalConfiguration<T> config, final String key) {
        this(config, key, false);
    }","  public void test22()  throws Throwable  {
      XMLBeanDeclaration.NodeData<BaseHierarchicalConfiguration> xMLBeanDeclaration_NodeData0 = new XMLBeanDeclaration.NodeData<BaseHierarchicalConfiguration>((BaseHierarchicalConfiguration) null, (NodeHandler<BaseHierarchicalConfiguration>) null);
      XMLBeanDeclaration xMLBeanDeclaration0 = null;
      try {
        xMLBeanDeclaration0 = new XMLBeanDeclaration((HierarchicalConfiguration<?>) null, xMLBeanDeclaration_NodeData0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.configuration2.beanutils.XMLBeanDeclaration"", e);
      }
  }"
1320,"    public <T> XMLBeanDeclaration(final HierarchicalConfiguration<T> config, final String key) {
        this(config, key, false);
    }","  public void test23()  throws Throwable  {
      HierarchicalConfiguration<BaseHierarchicalConfiguration> hierarchicalConfiguration0 = (HierarchicalConfiguration<BaseHierarchicalConfiguration>) mock(HierarchicalConfiguration.class, new ViolatedAssumptionAnswer());
      doReturn((HierarchicalConfiguration) null).when(hierarchicalConfiguration0).configurationAt(anyString());
      XMLBeanDeclaration xMLBeanDeclaration0 = null;
      try {
        xMLBeanDeclaration0 = new XMLBeanDeclaration(hierarchicalConfiguration0, """", false, ""oracle.jdbc.internal.JMSDequeueOptions$StreamingMode"");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.configuration2.beanutils.XMLBeanDeclaration"", e);
      }
  }"
1321,"    public <T> XMLBeanDeclaration(final HierarchicalConfiguration<T> config, final String key) {
        this(config, key, false);
    }","  public void test24()  throws Throwable  {
      XMLConfiguration xMLConfiguration0 = new XMLConfiguration();
      JSONConfiguration jSONConfiguration0 = new JSONConfiguration(xMLConfiguration0);
      XMLBeanDeclaration xMLBeanDeclaration0 = null;
      try {
        xMLBeanDeclaration0 = new XMLBeanDeclaration((HierarchicalConfiguration<ImmutableNode>) jSONConfiguration0, ""7wj'@xN"", false);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // Passed in key must select exactly one node (found 0): 7wj'@xN
         //
         verifyException(""org.apache.commons.configuration2.BaseHierarchicalConfiguration"", e);
      }
  }"
1322,"    public <T> XMLBeanDeclaration(final HierarchicalConfiguration<T> config, final String key) {
        this(config, key, false);
    }","  public void test25()  throws Throwable  {
      HierarchicalConfiguration<Integer> hierarchicalConfiguration0 = (HierarchicalConfiguration<Integer>) mock(HierarchicalConfiguration.class, new ViolatedAssumptionAnswer());
      doReturn((HierarchicalConfiguration) null).when(hierarchicalConfiguration0).configurationAt(anyString());
      XMLBeanDeclaration xMLBeanDeclaration0 = null;
      try {
        xMLBeanDeclaration0 = new XMLBeanDeclaration(hierarchicalConfiguration0, ""Delivery Mode           : "", true);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.configuration2.beanutils.XMLBeanDeclaration"", e);
      }
  }"
1323,"    public <T> XMLBeanDeclaration(final HierarchicalConfiguration<T> config, final String key) {
        this(config, key, false);
    }","  public void test26()  throws Throwable  {
      XMLBeanDeclaration xMLBeanDeclaration0 = null;
      try {
        xMLBeanDeclaration0 = new XMLBeanDeclaration((HierarchicalConfiguration<ConstructorArg>) null, ""'"", true);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Configuration must not be null!
         //
         verifyException(""org.apache.commons.configuration2.beanutils.XMLBeanDeclaration"", e);
      }
  }"
1324,"    public <T> XMLBeanDeclaration(final HierarchicalConfiguration<T> config, final String key) {
        this(config, key, false);
    }","  public void test27()  throws Throwable  {
      CombinedConfiguration combinedConfiguration0 = new CombinedConfiguration();
      YAMLConfiguration yAMLConfiguration0 = new YAMLConfiguration(combinedConfiguration0);
      XMLBeanDeclaration xMLBeanDeclaration0 = null;
      try {
        xMLBeanDeclaration0 = new XMLBeanDeclaration((HierarchicalConfiguration<ImmutableNode>) yAMLConfiguration0, ""UTF-8"");
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // Passed in key must select exactly one node (found 0): UTF-8
         //
         verifyException(""org.apache.commons.configuration2.BaseHierarchicalConfiguration"", e);
      }
  }"
1325,"    public <T> XMLBeanDeclaration(final HierarchicalConfiguration<T> config, final String key) {
        this(config, key, false);
    }","  public void test28()  throws Throwable  {
      XMLBeanDeclaration xMLBeanDeclaration0 = null;
      try {
        xMLBeanDeclaration0 = new XMLBeanDeclaration((HierarchicalConfiguration<PatternSubtreeConfigurationWrapper>) null, """");
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Configuration must not be null!
         //
         verifyException(""org.apache.commons.configuration2.beanutils.XMLBeanDeclaration"", e);
      }
  }"
1326,"    public <T> XMLBeanDeclaration(final HierarchicalConfiguration<T> config, final String key) {
        this(config, key, false);
    }","  public void test29()  throws Throwable  {
      XMLBeanDeclaration xMLBeanDeclaration0 = null;
      try {
        xMLBeanDeclaration0 = new XMLBeanDeclaration((HierarchicalConfiguration<String>) null, """", false, """");
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Configuration must not be null!
         //
         verifyException(""org.apache.commons.configuration2.beanutils.XMLBeanDeclaration"", e);
      }
  }"
1327,"    public String getDefaultBeanClassName() {
        return defaultBeanClassName;
    }","  public void test30()  throws Throwable  {
      INIConfiguration iNIConfiguration0 = new INIConfiguration();
      JSONConfiguration jSONConfiguration0 = new JSONConfiguration(iNIConfiguration0);
      XMLBeanDeclaration xMLBeanDeclaration0 = new XMLBeanDeclaration((HierarchicalConfiguration<ImmutableNode>) jSONConfiguration0);
}"
1328,"    public HierarchicalConfiguration<?> getConfiguration() {
        return configuration;
    }","  public void test31()  throws Throwable  {
      HierarchicalConfiguration<CombinedConfiguration> hierarchicalConfiguration0 = (HierarchicalConfiguration<CombinedConfiguration>) mock(HierarchicalConfiguration.class, new ViolatedAssumptionAnswer());
      doReturn("" ]&P;D5YI#"").when(hierarchicalConfiguration0).toString();
      OverrideCombiner overrideCombiner0 = new OverrideCombiner();
      DynamicCombinedConfiguration dynamicCombinedConfiguration0 = new DynamicCombinedConfiguration(overrideCombiner0);
      NodeHandler<CombinedConfiguration> nodeHandler0 = (NodeHandler<CombinedConfiguration>) mock(NodeHandler.class, new ViolatedAssumptionAnswer());
      XMLBeanDeclaration.NodeData<CombinedConfiguration> xMLBeanDeclaration_NodeData0 = new XMLBeanDeclaration.NodeData<CombinedConfiguration>(dynamicCombinedConfiguration0, nodeHandler0);
      XMLBeanDeclaration xMLBeanDeclaration0 = new XMLBeanDeclaration(hierarchicalConfiguration0, xMLBeanDeclaration_NodeData0);
      HierarchicalConfiguration<?> hierarchicalConfiguration1 = xMLBeanDeclaration0.getConfiguration();
}"
1329,"    protected boolean isReservedChildName(final String name) {
        return isReservedName(name);
    }","  public void test32()  throws Throwable  {
      HierarchicalConfiguration<Integer> hierarchicalConfiguration0 = (HierarchicalConfiguration<Integer>) mock(HierarchicalConfiguration.class, new ViolatedAssumptionAnswer());
      NodeHandler<DynamicCombinedConfiguration> nodeHandler0 = (NodeHandler<DynamicCombinedConfiguration>) mock(NodeHandler.class, new ViolatedAssumptionAnswer());
      XMLBeanDeclaration.NodeData<DynamicCombinedConfiguration> xMLBeanDeclaration_NodeData0 = new XMLBeanDeclaration.NodeData<DynamicCombinedConfiguration>((DynamicCombinedConfiguration) null, nodeHandler0);
      XMLBeanDeclaration xMLBeanDeclaration0 = new XMLBeanDeclaration(hierarchicalConfiguration0, xMLBeanDeclaration_NodeData0);
      boolean boolean0 = xMLBeanDeclaration0.isReservedChildName(""config-union select\n 'LONG RAW' as type_name, -4 as data_type, 2147483647 as precision,\n '''' as literal_prefix, '''' as literal_suffix, NULL as create_params,\n 1 as nullable, 0 as case_sensitive, 0 as searchable,\n 0 as unsigned_attribute, 0 as fixed_prec_scale, 0 as auto_increment,\n 'LONG RAW' as local_type_name, 0 as minimum_scale, 0 as maximum_scale,\n NULL as sql_data_type, NULL as sql_datetime_sub, 10 as num_prec_radix\nfrom dual\n"");
}"
1330,"    protected Object interpolate(final Object value) {
        final ConfigurationInterpolator interpolator = getConfiguration().getInterpolator();
        return interpolator != null ? interpolator.interpolate(value) : value;
    }","  public void test33()  throws Throwable  {
      BaseConfiguration baseConfiguration0 = new BaseConfiguration();
      ConfigurationInterpolator configurationInterpolator0 = baseConfiguration0.getInterpolator();
      HierarchicalConfiguration<Integer> hierarchicalConfiguration0 = (HierarchicalConfiguration<Integer>) mock(HierarchicalConfiguration.class, new ViolatedAssumptionAnswer());
      doReturn(""3}OjG=V?8-h,"").when(hierarchicalConfiguration0).toString();
      doReturn(configurationInterpolator0).when(hierarchicalConfiguration0).getInterpolator();
      NodeHandler<DynamicCombinedConfiguration> nodeHandler0 = (NodeHandler<DynamicCombinedConfiguration>) mock(NodeHandler.class, new ViolatedAssumptionAnswer());
      XMLBeanDeclaration.NodeData<DynamicCombinedConfiguration> xMLBeanDeclaration_NodeData0 = new XMLBeanDeclaration.NodeData<DynamicCombinedConfiguration>((DynamicCombinedConfiguration) null, nodeHandler0);
      XMLBeanDeclaration xMLBeanDeclaration0 = new XMLBeanDeclaration(hierarchicalConfiguration0, xMLBeanDeclaration_NodeData0);
      Object object0 = xMLBeanDeclaration0.interpolate((Object) null);
}"
1331,"    public Map<String, Object> getNestedBeanDeclarations() {
        final Map<String, Object> nested = new HashMap<>();
        for (final NodeData<?> child : getNode().getChildren()) {
            if (!isReservedChildName(child.nodeName())) {
                if (nested.containsKey(child.nodeName())) {
                    final Object obj = nested.get(child.nodeName());
                    final List<BeanDeclaration> list;
                    if (obj instanceof List) {
                        // Safe because we created the lists ourselves.
                        @SuppressWarnings(""unchecked"")
                        final List<BeanDeclaration> tmpList = (List<BeanDeclaration>) obj;
                        list = tmpList;
                    } else {
                        list = new ArrayList<>();
                        list.add((BeanDeclaration) obj);
                        nested.put(child.nodeName(), list);
                    }
                    list.add(createBeanDeclaration(child));
                } else {
                    nested.put(child.nodeName(), createBeanDeclaration(child));
                }
            }
        }

        return nested;
    }","  public void test34()  throws Throwable  {
      HierarchicalConfiguration<XMLConfiguration> hierarchicalConfiguration0 = (HierarchicalConfiguration<XMLConfiguration>) mock(HierarchicalConfiguration.class, new ViolatedAssumptionAnswer());
      CombinedConfiguration combinedConfiguration0 = new CombinedConfiguration();
      PatternSubtreeConfigurationWrapper patternSubtreeConfigurationWrapper0 = new PatternSubtreeConfigurationWrapper(combinedConfiguration0, """");
      Vector<PatternSubtreeConfigurationWrapper> vector0 = new Vector<PatternSubtreeConfigurationWrapper>();
      NodeHandler<PatternSubtreeConfigurationWrapper> nodeHandler0 = (NodeHandler<PatternSubtreeConfigurationWrapper>) mock(NodeHandler.class, new ViolatedAssumptionAnswer());
      doReturn(vector0).when(nodeHandler0).getChildren(any(org.apache.commons.configuration2.PatternSubtreeConfigurationWrapper.class));
      doReturn((String) null).when(nodeHandler0).nodeName(any(org.apache.commons.configuration2.PatternSubtreeConfigurationWrapper.class));
      XMLBeanDeclaration.NodeData<PatternSubtreeConfigurationWrapper> xMLBeanDeclaration_NodeData0 = new XMLBeanDeclaration.NodeData<PatternSubtreeConfigurationWrapper>(patternSubtreeConfigurationWrapper0, nodeHandler0);
      vector0.add(patternSubtreeConfigurationWrapper0);
      XMLBeanDeclaration xMLBeanDeclaration0 = new XMLBeanDeclaration(hierarchicalConfiguration0, xMLBeanDeclaration_NodeData0);
      Map<String, Object> map0 = xMLBeanDeclaration0.getNestedBeanDeclarations();
}"
1332,"    public Map<String, Object> getBeanProperties() {
        final Map<String, Object> props = new HashMap<>();
        for (final String key : getAttributeNames()) {
            if (!isReservedAttributeName(key)) {
                props.put(key, interpolate(getNode().getAttribute(key)));
            }
        }

        return props;
    }","  public void test35()  throws Throwable  {
      HierarchicalConfiguration<Integer> hierarchicalConfiguration0 = (HierarchicalConfiguration<Integer>) mock(HierarchicalConfiguration.class, new ViolatedAssumptionAnswer());
      doReturn(""The wildcard must not be null"", ""The wildcard must not be null"", (String) null, (String) null, (String) null).when(hierarchicalConfiguration0).toString();
      doReturn((ConfigurationInterpolator) null, (ConfigurationInterpolator) null, (ConfigurationInterpolator) null, (ConfigurationInterpolator) null, (ConfigurationInterpolator) null).when(hierarchicalConfiguration0).getInterpolator();
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      NodeHandler<DynamicCombinedConfiguration> nodeHandler0 = (NodeHandler<DynamicCombinedConfiguration>) mock(NodeHandler.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null, (Object) null, (Object) null, (Object) null).when(nodeHandler0).getAttributeValue(any(org.apache.commons.configuration2.DynamicCombinedConfiguration.class) , anyString());
      doReturn(set0).when(nodeHandler0).getAttributes(any(org.apache.commons.configuration2.DynamicCombinedConfiguration.class));
      XMLBeanDeclaration.NodeData<DynamicCombinedConfiguration> xMLBeanDeclaration_NodeData0 = new XMLBeanDeclaration.NodeData<DynamicCombinedConfiguration>((DynamicCombinedConfiguration) null, nodeHandler0);
      XMLBeanDeclaration xMLBeanDeclaration0 = new XMLBeanDeclaration(hierarchicalConfiguration0, xMLBeanDeclaration_NodeData0);
      Map<String, Object> map0 = xMLBeanDeclaration0.getBeanProperties();
}"
1333,"    public <T> XMLBeanDeclaration(final HierarchicalConfiguration<T> config, final String key) {
        this(config, key, false);
    }","  public void test36()  throws Throwable  {
      JSONConfiguration jSONConfiguration0 = new JSONConfiguration();
      XMLBeanDeclaration xMLBeanDeclaration0 = null;
      try {
        xMLBeanDeclaration0 = new XMLBeanDeclaration((HierarchicalConfiguration<ImmutableNode>) jSONConfiguration0, ""4_@?.nKJXA-w"", false, """");
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // Passed in key must select exactly one node (found 0): 4_@?.nKJXA-w
         //
         verifyException(""org.apache.commons.configuration2.BaseHierarchicalConfiguration"", e);
      }
  }"
1334,"    public <T> XMLBeanDeclaration(final HierarchicalConfiguration<T> config, final String key) {
        this(config, key, false);
    }","  public void test37()  throws Throwable  {
      XMLBeanDeclaration xMLBeanDeclaration0 = null;
      try {
        xMLBeanDeclaration0 = new XMLBeanDeclaration((HierarchicalConfiguration<AbstractYAMLBasedConfiguration>) null);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Configuration must not be null!
         //
         verifyException(""org.apache.commons.configuration2.beanutils.XMLBeanDeclaration"", e);
      }
  }"
1335,"    public Object getBeanFactoryParameter() {
        return getConfiguration().getProperty(ATTR_FACTORY_PARAM);
    }","  public void test38()  throws Throwable  {
      HierarchicalConfiguration<Integer> hierarchicalConfiguration0 = (HierarchicalConfiguration<Integer>) mock(HierarchicalConfiguration.class, new ViolatedAssumptionAnswer());
      doReturn(""The wildcard must not be null"").when(hierarchicalConfiguration0).toString();
      doReturn(""/I:.w05dZA,i}C}Y2"").when(hierarchicalConfiguration0).getProperty(anyString());
      NodeHandler<DynamicCombinedConfiguration> nodeHandler0 = (NodeHandler<DynamicCombinedConfiguration>) mock(NodeHandler.class, new ViolatedAssumptionAnswer());
      XMLBeanDeclaration.NodeData<DynamicCombinedConfiguration> xMLBeanDeclaration_NodeData0 = new XMLBeanDeclaration.NodeData<DynamicCombinedConfiguration>((DynamicCombinedConfiguration) null, nodeHandler0);
      XMLBeanDeclaration xMLBeanDeclaration0 = new XMLBeanDeclaration(hierarchicalConfiguration0, xMLBeanDeclaration_NodeData0);
      Object object0 = xMLBeanDeclaration0.getBeanFactoryParameter();
}"
1336,"    public <T> XMLBeanDeclaration(final HierarchicalConfiguration<T> config, final String key) {
        this(config, key, false);
    }","  public void test39()  throws Throwable  {
      HierarchicalConfiguration<PatternSubtreeConfigurationWrapper> hierarchicalConfiguration0 = (HierarchicalConfiguration<PatternSubtreeConfigurationWrapper>) mock(HierarchicalConfiguration.class, new ViolatedAssumptionAnswer());
      doReturn((HierarchicalConfiguration) null).when(hierarchicalConfiguration0).configurationAt(anyString());
      XMLBeanDeclaration xMLBeanDeclaration0 = null;
      try {
        xMLBeanDeclaration0 = new XMLBeanDeclaration(hierarchicalConfiguration0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.configuration2.beanutils.XMLBeanDeclaration"", e);
      }
  }"
1337,"    public <T> XMLBeanDeclaration(final HierarchicalConfiguration<T> config, final String key) {
        this(config, key, false);
    }","  public void test40()  throws Throwable  {
      HierarchicalConfiguration<ForkJoinTask<BaseHierarchicalConfiguration>> hierarchicalConfiguration0 = (HierarchicalConfiguration<ForkJoinTask<BaseHierarchicalConfiguration>>) mock(HierarchicalConfiguration.class, new ViolatedAssumptionAnswer());
      doReturn((HierarchicalConfiguration) null).when(hierarchicalConfiguration0).configurationAt(anyString());
      XMLBeanDeclaration xMLBeanDeclaration0 = null;
      try {
        xMLBeanDeclaration0 = new XMLBeanDeclaration(hierarchicalConfiguration0, ""=QA?.8Xi\""~Q@lE"");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.configuration2.beanutils.XMLBeanDeclaration"", e);
      }
  }"
1338,"    private String getAttribute(final NodeData<?> nodeData, final String attribute) {
        final Object value = nodeData.getAttribute(attribute);
        return value == null ? null : String.valueOf(interpolate(value));
    }","  public void test41()  throws Throwable  {
      INIConfiguration iNIConfiguration0 = new INIConfiguration();
      JSONConfiguration jSONConfiguration0 = new JSONConfiguration(iNIConfiguration0);
      NodeHandler<AbstractYAMLBasedConfiguration> nodeHandler0 = (NodeHandler<AbstractYAMLBasedConfiguration>) mock(NodeHandler.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(nodeHandler0).getAttributeValue(any(org.apache.commons.configuration2.AbstractYAMLBasedConfiguration.class) , anyString());
      XMLBeanDeclaration.NodeData<AbstractYAMLBasedConfiguration> xMLBeanDeclaration_NodeData0 = new XMLBeanDeclaration.NodeData<AbstractYAMLBasedConfiguration>(jSONConfiguration0, nodeHandler0);
      xMLBeanDeclaration_NodeData0.getAttribute(""sysbackup"");
      XMLBeanDeclaration xMLBeanDeclaration0 = new XMLBeanDeclaration(jSONConfiguration0, xMLBeanDeclaration_NodeData0);
      ConstructorArg constructorArg0 = ConstructorArg.forBeanDeclaration((BeanDeclaration) xMLBeanDeclaration0);
      NodeHandler<ConstructorArg> nodeHandler1 = (NodeHandler<ConstructorArg>) mock(NodeHandler.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(nodeHandler1).getAttributeValue(any(org.apache.commons.configuration2.beanutils.ConstructorArg.class) , anyString());
      doReturn((List) null).when(nodeHandler1).getChildren(any(org.apache.commons.configuration2.beanutils.ConstructorArg.class) , anyString());
      ConstructorArg.forBeanDeclaration((BeanDeclaration) xMLBeanDeclaration0);
      XMLBeanDeclaration.NodeData<ConstructorArg> xMLBeanDeclaration_NodeData1 = new XMLBeanDeclaration.NodeData<ConstructorArg>(constructorArg0, nodeHandler1);
      xMLBeanDeclaration0.getBeanClassName();
      iNIConfiguration0.childConfigurationsAt((String) null);
      xMLBeanDeclaration_NodeData1.getAttribute(""G$m\""KDWNG"");
      jSONConfiguration0.getBigDecimal("" (Attribute key in the middle.)"");
      // Undeclared exception!
      try { 
        xMLBeanDeclaration_NodeData1.getChildren(""union select\n 'LONG RAW' as type_name, -4 as data_type, 2147483647 as precision,\n '''' as literal_prefix, '''' as literal_suffix, NULL as create_params,\n 1 as nullable, 0 as case_sensitive, 0 as searchable,\n 0 as unsigned_attribute, 0 as fixed_prec_scale, 0 as auto_increment,\n 'LONG RAW' as local_type_name, 0 as minimum_scale, 0 as maximum_scale,\n NULL as sql_data_type, NULL as sql_datetime_sub, 10 as num_prec_radix\nfrom dual\n"");
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.configuration2.beanutils.XMLBeanDeclaration$NodeData"", e);
      }
  }"
1339,"    public Collection<ConstructorArg> getConstructorArgs() {
        final Collection<ConstructorArg> args = new LinkedList<>();
        for (final NodeData<?> child : getNode().getChildren(ELEM_CTOR_ARG)) {
            args.add(createConstructorArg(child));
        }
        return args;
    }","  public void test42()  throws Throwable  {
      HierarchicalConfiguration<Integer> hierarchicalConfiguration0 = (HierarchicalConfiguration<Integer>) mock(HierarchicalConfiguration.class, new ViolatedAssumptionAnswer());
      INIConfiguration iNIConfiguration0 = new INIConfiguration();
      XMLBeanDeclaration.NodeData<INIConfiguration> xMLBeanDeclaration_NodeData0 = new XMLBeanDeclaration.NodeData<INIConfiguration>(iNIConfiguration0, (NodeHandler<INIConfiguration>) null);
      XMLBeanDeclaration xMLBeanDeclaration0 = new XMLBeanDeclaration(hierarchicalConfiguration0, xMLBeanDeclaration_NodeData0);
      // Undeclared exception!
      try { 
        xMLBeanDeclaration0.getConstructorArgs();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.configuration2.beanutils.XMLBeanDeclaration$NodeData"", e);
      }
  }"
1340,"    public <T> XMLBeanDeclaration(final HierarchicalConfiguration<T> config, final String key) {
        this(config, key, false);
    }","  public void test43()  throws Throwable  {
      INIConfiguration iNIConfiguration0 = new INIConfiguration();
      XMLBeanDeclaration.NodeData<INIConfiguration> xMLBeanDeclaration_NodeData0 = new XMLBeanDeclaration.NodeData<INIConfiguration>(iNIConfiguration0, (NodeHandler<INIConfiguration>) null);
      boolean boolean0 = xMLBeanDeclaration_NodeData0.matchesConfigRootNode(iNIConfiguration0);
}"
1341,"    public Map<String, Object> getNestedBeanDeclarations() {
        final Map<String, Object> result = new HashMap<>();
        for (int i = childDeclarations.size() - 1; i >= 0; i--) {
            final Map<String, Object> decls = childDeclarations.get(i).getNestedBeanDeclarations();
            if (decls != null) {
                result.putAll(decls);
            }
        }
        return result;
    }","  public void test0()  throws Throwable  {
      BeanDeclaration[] beanDeclarationArray0 = new BeanDeclaration[9];
      CombinedBeanDeclaration combinedBeanDeclaration0 = new CombinedBeanDeclaration(beanDeclarationArray0);
      // Undeclared exception!
      try { 
        combinedBeanDeclaration0.getNestedBeanDeclarations();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.configuration2.beanutils.CombinedBeanDeclaration"", e);
      }
  }"
1342,"    public Map<String, Object> getNestedBeanDeclarations() {
        final Map<String, Object> result = new HashMap<>();
        for (int i = childDeclarations.size() - 1; i >= 0; i--) {
            final Map<String, Object> decls = childDeclarations.get(i).getNestedBeanDeclarations();
            if (decls != null) {
                result.putAll(decls);
            }
        }
        return result;
    }","  public void test1()  throws Throwable  {
      BeanDeclaration[] beanDeclarationArray0 = new BeanDeclaration[0];
      CombinedBeanDeclaration combinedBeanDeclaration0 = new CombinedBeanDeclaration(beanDeclarationArray0);
      Map<String, Object> map0 = combinedBeanDeclaration0.getNestedBeanDeclarations();
}"
1343,"    public Map<String, Object> getBeanProperties() {
        final Map<String, Object> result = new HashMap<>();
        for (int i = childDeclarations.size() - 1; i >= 0; i--) {
            final Map<String, Object> props = childDeclarations.get(i).getBeanProperties();
            if (props != null) {
                result.putAll(props);
            }
        }
        return result;
    }","  public void test2()  throws Throwable  {
      BeanDeclaration[] beanDeclarationArray0 = new BeanDeclaration[1];
      HierarchicalConfiguration<Object> hierarchicalConfiguration0 = (HierarchicalConfiguration<Object>) mock(HierarchicalConfiguration.class, new ViolatedAssumptionAnswer());
      doReturn((ConfigurationInterpolator) null, (ConfigurationInterpolator) null).when(hierarchicalConfiguration0).getInterpolator();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      ConstructorArg constructorArg0 = ConstructorArg.forValue((Object) locale_FilteringMode0, ""w64SqsSq"");
      Charset charset0 = Charset.defaultCharset();
      Set<String> set0 = charset0.aliases();
      NodeHandler<Object> nodeHandler0 = (NodeHandler<Object>) mock(NodeHandler.class, new ViolatedAssumptionAnswer());
      doReturn(constructorArg0, (Object) null).when(nodeHandler0).getAttributeValue(any() , anyString());
      doReturn(set0).when(nodeHandler0).getAttributes(any());
      XMLBeanDeclaration.NodeData<Object> xMLBeanDeclaration_NodeData0 = new XMLBeanDeclaration.NodeData<Object>(hierarchicalConfiguration0, nodeHandler0);
      XMLBeanDeclaration xMLBeanDeclaration0 = new XMLBeanDeclaration(hierarchicalConfiguration0, xMLBeanDeclaration_NodeData0);
      beanDeclarationArray0[0] = (BeanDeclaration) xMLBeanDeclaration0;
      CombinedBeanDeclaration combinedBeanDeclaration0 = new CombinedBeanDeclaration(beanDeclarationArray0);
      Map<String, Object> map0 = combinedBeanDeclaration0.getBeanProperties();
}"
1344,"    public Map<String, Object> getNestedBeanDeclarations() {
        final Map<String, Object> result = new HashMap<>();
        for (int i = childDeclarations.size() - 1; i >= 0; i--) {
            final Map<String, Object> decls = childDeclarations.get(i).getNestedBeanDeclarations();
            if (decls != null) {
                result.putAll(decls);
            }
        }
        return result;
    }","  public void test3()  throws Throwable  {
      BeanDeclaration[] beanDeclarationArray0 = new BeanDeclaration[1];
      CombinedBeanDeclaration combinedBeanDeclaration0 = new CombinedBeanDeclaration(beanDeclarationArray0);
      // Undeclared exception!
      try { 
        combinedBeanDeclaration0.getNestedBeanDeclarations();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.configuration2.beanutils.CombinedBeanDeclaration"", e);
      }
  }"
1345,"    public Collection<ConstructorArg> getConstructorArgs() {
        for (final BeanDeclaration d : childDeclarations) {
            final Collection<ConstructorArg> args = d.getConstructorArgs();
            if (args != null && !args.isEmpty()) {
                return args;
            }
        }
        return Collections.emptyList();
    }","  public void test4()  throws Throwable  {
      BeanDeclaration[] beanDeclarationArray0 = new BeanDeclaration[1];
      CombinedBeanDeclaration combinedBeanDeclaration0 = new CombinedBeanDeclaration(beanDeclarationArray0);
      // Undeclared exception!
      try { 
        combinedBeanDeclaration0.getConstructorArgs();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.configuration2.beanutils.CombinedBeanDeclaration"", e);
      }
  }"
1346,"    public Map<String, Object> getBeanProperties() {
        final Map<String, Object> result = new HashMap<>();
        for (int i = childDeclarations.size() - 1; i >= 0; i--) {
            final Map<String, Object> props = childDeclarations.get(i).getBeanProperties();
            if (props != null) {
                result.putAll(props);
            }
        }
        return result;
    }","  public void test5()  throws Throwable  {
      BeanDeclaration[] beanDeclarationArray0 = new BeanDeclaration[8];
      CombinedBeanDeclaration combinedBeanDeclaration0 = new CombinedBeanDeclaration(beanDeclarationArray0);
      // Undeclared exception!
      try { 
        combinedBeanDeclaration0.getBeanProperties();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.configuration2.beanutils.CombinedBeanDeclaration"", e);
      }
  }"
1347,"    public Object getBeanFactoryParameter() {
        for (final BeanDeclaration d : childDeclarations) {
            final Object factoryParam = d.getBeanFactoryParameter();
            if (factoryParam != null) {
                return factoryParam;
            }
        }
        return null;
    }","  public void test6()  throws Throwable  {
      BeanDeclaration[] beanDeclarationArray0 = new BeanDeclaration[9];
      CombinedBeanDeclaration combinedBeanDeclaration0 = new CombinedBeanDeclaration(beanDeclarationArray0);
      // Undeclared exception!
      try { 
        combinedBeanDeclaration0.getBeanFactoryParameter();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.configuration2.beanutils.CombinedBeanDeclaration"", e);
      }
  }"
1348,"    public String getBeanClassName() {
        for (final BeanDeclaration d : childDeclarations) {
            final String beanClassName = d.getBeanClassName();
            if (beanClassName != null) {
                return beanClassName;
            }
        }
        return null;
    }","  public void test7()  throws Throwable  {
      BeanDeclaration[] beanDeclarationArray0 = new BeanDeclaration[1];
      CombinedBeanDeclaration combinedBeanDeclaration0 = new CombinedBeanDeclaration(beanDeclarationArray0);
      // Undeclared exception!
      try { 
        combinedBeanDeclaration0.getBeanClassName();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.configuration2.beanutils.CombinedBeanDeclaration"", e);
      }
  }"
1349,"    public CombinedBeanDeclaration(final BeanDeclaration... decl) {
        childDeclarations = new ArrayList<>(Arrays.asList(decl));
    }","  public void test8()  throws Throwable  {
      CombinedBeanDeclaration combinedBeanDeclaration0 = null;
      try {
        combinedBeanDeclaration0 = new CombinedBeanDeclaration((BeanDeclaration[]) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""java.util.Objects"", e);
      }
  }"
1350,"    public Object getBeanFactoryParameter() {
        for (final BeanDeclaration d : childDeclarations) {
            final Object factoryParam = d.getBeanFactoryParameter();
            if (factoryParam != null) {
                return factoryParam;
            }
        }
        return null;
    }","  public void test9()  throws Throwable  {
      BeanDeclaration[] beanDeclarationArray0 = new BeanDeclaration[1];
      HierarchicalConfiguration<Object> hierarchicalConfiguration0 = (HierarchicalConfiguration<Object>) mock(HierarchicalConfiguration.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(hierarchicalConfiguration0).getProperty(anyString());
      NodeHandler<CombinedBeanDeclaration> nodeHandler0 = (NodeHandler<CombinedBeanDeclaration>) mock(NodeHandler.class, new ViolatedAssumptionAnswer());
      XMLBeanDeclaration.NodeData<CombinedBeanDeclaration> xMLBeanDeclaration_NodeData0 = new XMLBeanDeclaration.NodeData<CombinedBeanDeclaration>((CombinedBeanDeclaration) null, nodeHandler0);
      XMLBeanDeclaration xMLBeanDeclaration0 = new XMLBeanDeclaration(hierarchicalConfiguration0, xMLBeanDeclaration_NodeData0);
      beanDeclarationArray0[0] = (BeanDeclaration) xMLBeanDeclaration0;
      CombinedBeanDeclaration combinedBeanDeclaration0 = new CombinedBeanDeclaration(beanDeclarationArray0);
      Object object0 = combinedBeanDeclaration0.getBeanFactoryParameter();
}"
1351,"    public String getBeanFactoryName() {
        for (final BeanDeclaration d : childDeclarations) {
            final String factoryName = d.getBeanFactoryName();
            if (factoryName != null) {
                return factoryName;
            }
        }
        return null;
    }","  public void test10()  throws Throwable  {
      BeanDeclaration[] beanDeclarationArray0 = new BeanDeclaration[1];
      HierarchicalConfiguration<Object> hierarchicalConfiguration0 = (HierarchicalConfiguration<Object>) mock(HierarchicalConfiguration.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(hierarchicalConfiguration0).getString(anyString() , anyString());
      NodeHandler<CombinedBeanDeclaration> nodeHandler0 = (NodeHandler<CombinedBeanDeclaration>) mock(NodeHandler.class, new ViolatedAssumptionAnswer());
      XMLBeanDeclaration.NodeData<CombinedBeanDeclaration> xMLBeanDeclaration_NodeData0 = new XMLBeanDeclaration.NodeData<CombinedBeanDeclaration>((CombinedBeanDeclaration) null, nodeHandler0);
      XMLBeanDeclaration xMLBeanDeclaration0 = new XMLBeanDeclaration(hierarchicalConfiguration0, xMLBeanDeclaration_NodeData0);
      beanDeclarationArray0[0] = (BeanDeclaration) xMLBeanDeclaration0;
      CombinedBeanDeclaration combinedBeanDeclaration0 = new CombinedBeanDeclaration(beanDeclarationArray0);
      String string0 = combinedBeanDeclaration0.getBeanFactoryName();
}"
1352,"    public Collection<ConstructorArg> getConstructorArgs() {
        for (final BeanDeclaration d : childDeclarations) {
            final Collection<ConstructorArg> args = d.getConstructorArgs();
            if (args != null && !args.isEmpty()) {
                return args;
            }
        }
        return Collections.emptyList();
    }","  public void test11()  throws Throwable  {
      BeanDeclaration[] beanDeclarationArray0 = new BeanDeclaration[1];
      XMLPropertiesConfiguration xMLPropertiesConfiguration0 = new XMLPropertiesConfiguration();
      ConfigurationInterpolator configurationInterpolator0 = xMLPropertiesConfiguration0.getInterpolator();
      HierarchicalConfiguration<Object> hierarchicalConfiguration0 = (HierarchicalConfiguration<Object>) mock(HierarchicalConfiguration.class, new ViolatedAssumptionAnswer());
      doReturn(configurationInterpolator0, configurationInterpolator0).when(hierarchicalConfiguration0).getInterpolator();
      Vector<CombinedBeanDeclaration> vector0 = new Vector<CombinedBeanDeclaration>();
      vector0.add((CombinedBeanDeclaration) null);
      Locale locale0 = Locale.GERMAN;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      NodeHandler<CombinedBeanDeclaration> nodeHandler0 = (NodeHandler<CombinedBeanDeclaration>) mock(NodeHandler.class, new ViolatedAssumptionAnswer());
      doReturn(""getDatabase"", vector0).when(nodeHandler0).getAttributeValue(any(org.apache.commons.configuration2.beanutils.CombinedBeanDeclaration.class) , anyString());
      doReturn(set0).when(nodeHandler0).getAttributes(any(org.apache.commons.configuration2.beanutils.CombinedBeanDeclaration.class));
      doReturn(vector0).when(nodeHandler0).getChildren(any(org.apache.commons.configuration2.beanutils.CombinedBeanDeclaration.class) , anyString());
      XMLBeanDeclaration.NodeData<CombinedBeanDeclaration> xMLBeanDeclaration_NodeData0 = new XMLBeanDeclaration.NodeData<CombinedBeanDeclaration>((CombinedBeanDeclaration) null, nodeHandler0);
      XMLBeanDeclaration xMLBeanDeclaration0 = new XMLBeanDeclaration(hierarchicalConfiguration0, xMLBeanDeclaration_NodeData0);
      beanDeclarationArray0[0] = (BeanDeclaration) xMLBeanDeclaration0;
      CombinedBeanDeclaration combinedBeanDeclaration0 = new CombinedBeanDeclaration(beanDeclarationArray0);
      Collection<ConstructorArg> collection0 = combinedBeanDeclaration0.getConstructorArgs();
}"
1353,"    public Collection<ConstructorArg> getConstructorArgs() {
        for (final BeanDeclaration d : childDeclarations) {
            final Collection<ConstructorArg> args = d.getConstructorArgs();
            if (args != null && !args.isEmpty()) {
                return args;
            }
        }
        return Collections.emptyList();
    }","  public void test12()  throws Throwable  {
      BeanDeclaration[] beanDeclarationArray0 = new BeanDeclaration[1];
      HierarchicalConfiguration<Object> hierarchicalConfiguration0 = (HierarchicalConfiguration<Object>) mock(HierarchicalConfiguration.class, new ViolatedAssumptionAnswer());
      Stack<CombinedBeanDeclaration> stack0 = new Stack<CombinedBeanDeclaration>();
      NodeHandler<CombinedBeanDeclaration> nodeHandler0 = (NodeHandler<CombinedBeanDeclaration>) mock(NodeHandler.class, new ViolatedAssumptionAnswer());
      doReturn((List) null).when(nodeHandler0).getChildren(any(org.apache.commons.configuration2.beanutils.CombinedBeanDeclaration.class) , anyString());
      XMLBeanDeclaration.NodeData<CombinedBeanDeclaration> xMLBeanDeclaration_NodeData0 = new XMLBeanDeclaration.NodeData<CombinedBeanDeclaration>((CombinedBeanDeclaration) null, nodeHandler0);
      XMLBeanDeclaration xMLBeanDeclaration0 = new XMLBeanDeclaration(hierarchicalConfiguration0, xMLBeanDeclaration_NodeData0);
      beanDeclarationArray0[0] = (BeanDeclaration) xMLBeanDeclaration0;
      CombinedBeanDeclaration combinedBeanDeclaration0 = new CombinedBeanDeclaration(beanDeclarationArray0);
      // Undeclared exception!
      try { 
        combinedBeanDeclaration0.getConstructorArgs();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.configuration2.beanutils.XMLBeanDeclaration$NodeData"", e);
      }
  }"
1354,"    public Map<String, Object> getNestedBeanDeclarations() {
        final Map<String, Object> result = new HashMap<>();
        for (int i = childDeclarations.size() - 1; i >= 0; i--) {
            final Map<String, Object> decls = childDeclarations.get(i).getNestedBeanDeclarations();
            if (decls != null) {
                result.putAll(decls);
            }
        }
        return result;
    }","  public void test13()  throws Throwable  {
      BeanDeclaration[] beanDeclarationArray0 = new BeanDeclaration[1];
      HierarchicalConfiguration<Object> hierarchicalConfiguration0 = (HierarchicalConfiguration<Object>) mock(HierarchicalConfiguration.class, new ViolatedAssumptionAnswer());
      Stack<CombinedBeanDeclaration> stack0 = new Stack<CombinedBeanDeclaration>();
      NodeHandler<CombinedBeanDeclaration> nodeHandler0 = (NodeHandler<CombinedBeanDeclaration>) mock(NodeHandler.class, new ViolatedAssumptionAnswer());
      doReturn((List) null).when(nodeHandler0).getChildren(any(org.apache.commons.configuration2.beanutils.CombinedBeanDeclaration.class));
      XMLBeanDeclaration.NodeData<CombinedBeanDeclaration> xMLBeanDeclaration_NodeData0 = new XMLBeanDeclaration.NodeData<CombinedBeanDeclaration>((CombinedBeanDeclaration) null, nodeHandler0);
      XMLBeanDeclaration xMLBeanDeclaration0 = new XMLBeanDeclaration(hierarchicalConfiguration0, xMLBeanDeclaration_NodeData0);
      beanDeclarationArray0[0] = (BeanDeclaration) xMLBeanDeclaration0;
      CombinedBeanDeclaration combinedBeanDeclaration0 = new CombinedBeanDeclaration(beanDeclarationArray0);
      // Undeclared exception!
      try { 
        combinedBeanDeclaration0.getNestedBeanDeclarations();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.configuration2.beanutils.XMLBeanDeclaration$NodeData"", e);
      }
  }"
1355,"    public Map<String, Object> getBeanProperties() {
        final Map<String, Object> result = new HashMap<>();
        for (int i = childDeclarations.size() - 1; i >= 0; i--) {
            final Map<String, Object> props = childDeclarations.get(i).getBeanProperties();
            if (props != null) {
                result.putAll(props);
            }
        }
        return result;
    }","  public void test14()  throws Throwable  {
      BeanDeclaration[] beanDeclarationArray0 = new BeanDeclaration[1];
      HierarchicalConfiguration<Object> hierarchicalConfiguration0 = (HierarchicalConfiguration<Object>) mock(HierarchicalConfiguration.class, new ViolatedAssumptionAnswer());
      Locale locale0 = Locale.GERMAN;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      NodeHandler<CombinedBeanDeclaration> nodeHandler0 = (NodeHandler<CombinedBeanDeclaration>) mock(NodeHandler.class, new ViolatedAssumptionAnswer());
      doReturn(set0).when(nodeHandler0).getAttributes(any(org.apache.commons.configuration2.beanutils.CombinedBeanDeclaration.class));
      XMLBeanDeclaration.NodeData<CombinedBeanDeclaration> xMLBeanDeclaration_NodeData0 = new XMLBeanDeclaration.NodeData<CombinedBeanDeclaration>((CombinedBeanDeclaration) null, nodeHandler0);
      XMLBeanDeclaration xMLBeanDeclaration0 = new XMLBeanDeclaration(hierarchicalConfiguration0, xMLBeanDeclaration_NodeData0);
      beanDeclarationArray0[0] = (BeanDeclaration) xMLBeanDeclaration0;
      CombinedBeanDeclaration combinedBeanDeclaration0 = new CombinedBeanDeclaration(beanDeclarationArray0);
      Map<String, Object> map0 = combinedBeanDeclaration0.getBeanProperties();
}"
1356,"    public String getBeanClassName() {
        for (final BeanDeclaration d : childDeclarations) {
            final String beanClassName = d.getBeanClassName();
            if (beanClassName != null) {
                return beanClassName;
            }
        }
        return null;
    }","  public void test15()  throws Throwable  {
      BeanDeclaration[] beanDeclarationArray0 = new BeanDeclaration[1];
      HierarchicalConfiguration<Object> hierarchicalConfiguration0 = (HierarchicalConfiguration<Object>) mock(HierarchicalConfiguration.class, new ViolatedAssumptionAnswer());
      doReturn(""getDatabase"").when(hierarchicalConfiguration0).getString(anyString() , anyString());
      NodeHandler<CombinedBeanDeclaration> nodeHandler0 = (NodeHandler<CombinedBeanDeclaration>) mock(NodeHandler.class, new ViolatedAssumptionAnswer());
      XMLBeanDeclaration.NodeData<CombinedBeanDeclaration> xMLBeanDeclaration_NodeData0 = new XMLBeanDeclaration.NodeData<CombinedBeanDeclaration>((CombinedBeanDeclaration) null, nodeHandler0);
      XMLBeanDeclaration xMLBeanDeclaration0 = new XMLBeanDeclaration(hierarchicalConfiguration0, xMLBeanDeclaration_NodeData0);
      beanDeclarationArray0[0] = (BeanDeclaration) xMLBeanDeclaration0;
      CombinedBeanDeclaration combinedBeanDeclaration0 = new CombinedBeanDeclaration(beanDeclarationArray0);
      String string0 = combinedBeanDeclaration0.getBeanClassName();
}"
1357,"    public String getBeanFactoryName() {
        for (final BeanDeclaration d : childDeclarations) {
            final String factoryName = d.getBeanFactoryName();
            if (factoryName != null) {
                return factoryName;
            }
        }
        return null;
    }","  public void test16()  throws Throwable  {
      BeanDeclaration[] beanDeclarationArray0 = new BeanDeclaration[1];
      CombinedBeanDeclaration combinedBeanDeclaration0 = new CombinedBeanDeclaration(beanDeclarationArray0);
      // Undeclared exception!
      try { 
        combinedBeanDeclaration0.getBeanFactoryName();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.configuration2.beanutils.CombinedBeanDeclaration"", e);
      }
  }"
1358,"    public boolean isDetailEvents() {
        return checkDetailEvents(0);
    }","  public void test0()  throws Throwable  {
      PatternSubtreeConfigurationWrapper patternSubtreeConfigurationWrapper0 = new PatternSubtreeConfigurationWrapper((HierarchicalConfiguration<ImmutableNode>) null, ""1}Bg{Ya#"");
      patternSubtreeConfigurationWrapper0.setDetailEvents(false);
      boolean boolean0 = patternSubtreeConfigurationWrapper0.isDetailEvents();
}"
1359,"    public <T extends ConfigurationErrorEvent> void fireError(final EventType<T> eventType, final EventType<?> operationType, final String propertyName,
        final Object propertyValue, final Throwable cause) {
        final EventListenerList.EventListenerIterator<T> iterator = eventListeners.getEventListenerIterator(eventType);
        if (iterator.hasNext()) {
            final ConfigurationErrorEvent event = createErrorEvent(eventType, operationType, propertyName, propertyValue, cause);
            while (iterator.hasNext()) {
                iterator.invokeNext(event);
            }
        }
    }","  public void test1()  throws Throwable  {
      PropertiesConfiguration propertiesConfiguration0 = new PropertiesConfiguration();
      EventType<ConfigurationEvent> eventType0 = ConfigurationEvent.SET_PROPERTY;
      EventType<ConfigurationErrorEvent> eventType1 = ConfigurationErrorEvent.ANY;
      EventListener<ConfigurationErrorEvent> eventListener0 = (EventListener<ConfigurationErrorEvent>) mock(EventListener.class, new ViolatedAssumptionAnswer());
      propertiesConfiguration0.addEventListener(eventType1, (EventListener<? super ConfigurationErrorEvent>) eventListener0);
      CombinedConfiguration combinedConfiguration0 = new CombinedConfiguration();
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(""EventType [ ERROR ]"", hashtable0);
      MergeCombiner mergeCombiner0 = new MergeCombiner();
      DynamicCombinedConfiguration dynamicCombinedConfiguration0 = new DynamicCombinedConfiguration(mergeCombiner0);
      ConfigurationEvent configurationEvent0 = new ConfigurationEvent(dynamicCombinedConfiguration0, eventType0, ""v=D-jS\""/TRf<U8n^7;W"", hashtable0, false);
      propertiesConfiguration0.fireError(eventType1, (EventType<?>) combinedConfiguration0.COMBINED_INVALIDATE, """", (Object) configurationEvent0, (Throwable) sQLClientInfoException0);
}"
1360,"    public <T extends ConfigurationErrorEvent> void fireError(final EventType<T> eventType, final EventType<?> operationType, final String propertyName,
        final Object propertyValue, final Throwable cause) {
        final EventListenerList.EventListenerIterator<T> iterator = eventListeners.getEventListenerIterator(eventType);
        if (iterator.hasNext()) {
            final ConfigurationErrorEvent event = createErrorEvent(eventType, operationType, propertyName, propertyValue, cause);
            while (iterator.hasNext()) {
                iterator.invokeNext(event);
            }
        }
    }","  public void test2()  throws Throwable  {
      PropertiesConfiguration propertiesConfiguration0 = new PropertiesConfiguration();
      EventType<ConfigurationEvent> eventType0 = ConfigurationEvent.SET_PROPERTY;
      EventType<ConfigurationErrorEvent> eventType1 = ConfigurationErrorEvent.ANY;
      CombinedConfiguration combinedConfiguration0 = new CombinedConfiguration();
      Hashtable<String, ClientInfoStatus> hashtable0 = new Hashtable<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(""EventType [ ERROR ]"", hashtable0);
      MergeCombiner mergeCombiner0 = new MergeCombiner();
      DynamicCombinedConfiguration dynamicCombinedConfiguration0 = new DynamicCombinedConfiguration(mergeCombiner0);
      ConfigurationEvent configurationEvent0 = new ConfigurationEvent(dynamicCombinedConfiguration0, eventType0, ""v=D-jS\""/TRf<U8n^7;W"", hashtable0, false);
      propertiesConfiguration0.fireError(eventType1, (EventType<?>) combinedConfiguration0.COMBINED_INVALIDATE, """", (Object) configurationEvent0, (Throwable) sQLClientInfoException0);
}"
1361,"    public boolean isDetailEvents() {
        return checkDetailEvents(0);
    }","  public void test3()  throws Throwable  {
      BaseEventSource baseEventSource0 = new BaseEventSource();
      EventType<ConfigurationEvent> eventType0 = ConfigurationEvent.ADD_PROPERTY;
      baseEventSource0.fireEvent(eventType0, (String) null, (Object) null, false);
}"
1362,"    public boolean isDetailEvents() {
        return checkDetailEvents(0);
    }","  public void test4()  throws Throwable  {
      YAMLConfiguration yAMLConfiguration0 = new YAMLConfiguration();
}"
1363,"    public boolean isDetailEvents() {
        return checkDetailEvents(0);
    }","  public void test5()  throws Throwable  {
      YAMLConfiguration yAMLConfiguration0 = new YAMLConfiguration();
      yAMLConfiguration0.setDetailEvents(true);
      boolean boolean0 = yAMLConfiguration0.isDetailEvents();
}"
1364,"    protected <T extends ConfigurationEvent> ConfigurationEvent createEvent(final EventType<T> type, final String propName, final Object propValue,
        final boolean before) {
        return new ConfigurationEvent(this, type, propName, propValue, before);
    }","  public void test6()  throws Throwable  {
      BaseEventSource baseEventSource0 = new BaseEventSource();
      EventType<ConfigurationEvent> eventType0 = ConfigurationEvent.ADD_PROPERTY;
      UnionCombiner unionCombiner0 = new UnionCombiner();
      CombinedConfiguration combinedConfiguration0 = new CombinedConfiguration(unionCombiner0);
      ConfigurationEvent configurationEvent0 = baseEventSource0.createEvent(eventType0, ""os17n;"", (Object) combinedConfiguration0, true);
}"
1365,"    protected <T extends ConfigurationEvent> ConfigurationEvent createEvent(final EventType<T> type, final String propName, final Object propValue,
        final boolean before) {
        return new ConfigurationEvent(this, type, propName, propValue, before);
    }","  public void test7()  throws Throwable  {
      BaseEventSource baseEventSource0 = new BaseEventSource();
      EventType<ConfigurationEvent> eventType0 = ConfigurationEvent.CLEAR_TREE;
      Object object0 = new Object();
      ConfigurationEvent configurationEvent0 = baseEventSource0.createEvent(eventType0, ""+-eIc(jM."", object0, false);
}"
1366,"    protected ConfigurationErrorEvent createErrorEvent(final EventType<? extends ConfigurationErrorEvent> type, final EventType<?> opType,
        final String propName, final Object propValue, final Throwable ex) {
        return new ConfigurationErrorEvent(this, type, opType, propName, propValue, ex);
    }","  public void test8()  throws Throwable  {
      BaseEventSource baseEventSource0 = new BaseEventSource();
      EventType<ConfigurationErrorEvent> eventType0 = ConfigurationErrorEvent.ANY;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("""", """", 0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("""", """", sQLInvalidAuthorizationSpecException0);
      ConfigurationErrorEvent configurationErrorEvent0 = baseEventSource0.createErrorEvent(eventType0, eventType0, ""os17n;"", eventType0, sQLNonTransientConnectionException0);
}"
1367,,"  public void test9()  throws Throwable  {
      SystemConfiguration systemConfiguration0 = new SystemConfiguration();
      Object object0 = ((BaseEventSource)systemConfiguration0).clone();
}"
1368,"    public <T extends Event> boolean removeEventListener(final EventType<T> eventType, final EventListener<? super T> listener) {
        return eventListeners.removeEventListener(eventType, listener);
    }","  public void test10()  throws Throwable  {
      JSONConfiguration jSONConfiguration0 = new JSONConfiguration();
      PatternSubtreeConfigurationWrapper patternSubtreeConfigurationWrapper0 = new PatternSubtreeConfigurationWrapper(jSONConfiguration0, ""#PD)K~HYI#Z3g3"");
      EventType<ConfigurationEvent> eventType0 = ConfigurationEvent.SET_PROPERTY;
      PropertiesConfigurationLayout propertiesConfigurationLayout0 = new PropertiesConfigurationLayout();
      // Undeclared exception!
      try { 
        patternSubtreeConfigurationWrapper0.removeEventListener(eventType0, (EventListener<? super ConfigurationEvent>) propertiesConfigurationLayout0);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // Passed in key must select exactly one node (found 0): #PD)K~HYI#Z3g3
         //
         verifyException(""org.apache.commons.configuration2.BaseHierarchicalConfiguration"", e);
      }
  }"
1369,"    public <T extends Event> Collection<EventListener<? super T>> getEventListeners(final EventType<T> eventType) {
        final List<EventListener<? super T>> result = new LinkedList<>();
        for (final EventListener<? super T> l : eventListeners.getEventListeners(eventType)) {
            result.add(l);
        }
        return Collections.unmodifiableCollection(result);
    }","  public void test11()  throws Throwable  {
      INIConfiguration iNIConfiguration0 = new INIConfiguration();
      XMLConfiguration xMLConfiguration0 = new XMLConfiguration(iNIConfiguration0);
      PatternSubtreeConfigurationWrapper patternSubtreeConfigurationWrapper0 = new PatternSubtreeConfigurationWrapper(xMLConfiguration0, ""-W_Mq>!"");
      EventType<ConfigurationErrorEvent> eventType0 = ConfigurationErrorEvent.ANY;
      // Undeclared exception!
      try { 
        patternSubtreeConfigurationWrapper0.getEventListeners(eventType0);
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // Passed in key must select exactly one node (found 0): -W_Mq>!
         //
         verifyException(""org.apache.commons.configuration2.BaseHierarchicalConfiguration"", e);
      }
  }"
1370,"    public <T extends Event> Collection<EventListener<? super T>> getEventListeners(final EventType<T> eventType) {
        final List<EventListener<? super T>> result = new LinkedList<>();
        for (final EventListener<? super T> l : eventListeners.getEventListeners(eventType)) {
            result.add(l);
        }
        return Collections.unmodifiableCollection(result);
    }","  public void test12()  throws Throwable  {
      PatternSubtreeConfigurationWrapper patternSubtreeConfigurationWrapper0 = new PatternSubtreeConfigurationWrapper((HierarchicalConfiguration<ImmutableNode>) null, """");
      EventType<ConfigurationEvent> eventType0 = ConfigurationEvent.CLEAR_PROPERTY;
      // Undeclared exception!
      try { 
        patternSubtreeConfigurationWrapper0.getEventListeners(eventType0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.configuration2.PatternSubtreeConfigurationWrapper"", e);
      }
  }"
1371,"    public void clearEventListeners() {
        eventListeners.clear();
    }","  public void test13()  throws Throwable  {
      PatternSubtreeConfigurationWrapper patternSubtreeConfigurationWrapper0 = new PatternSubtreeConfigurationWrapper((HierarchicalConfiguration<ImmutableNode>) null, ""1}Bg{Ya#"");
      // Undeclared exception!
      try { 
        patternSubtreeConfigurationWrapper0.clearEventListeners();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.configuration2.PatternSubtreeConfigurationWrapper"", e);
      }
  }"
1372,"    public void clearErrorListeners() {
        for (final EventListenerRegistrationData<? extends ConfigurationErrorEvent> reg : eventListeners
            .getRegistrationsForSuperType(ConfigurationErrorEvent.ANY)) {
            eventListeners.removeEventListener(reg);
        }
    }","  public void test14()  throws Throwable  {
      BaseHierarchicalConfiguration baseHierarchicalConfiguration0 = new BaseHierarchicalConfiguration();
      PatternSubtreeConfigurationWrapper patternSubtreeConfigurationWrapper0 = new PatternSubtreeConfigurationWrapper(baseHierarchicalConfiguration0, "">.:UgP%:w+,t:k1Ag]]"");
      // Undeclared exception!
      try { 
        patternSubtreeConfigurationWrapper0.clearErrorListeners();
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // Passed in key must select exactly one node (found 0): >.:UgP%:w+,t:k1Ag]]
         //
         verifyException(""org.apache.commons.configuration2.BaseHierarchicalConfiguration"", e);
      }
  }"
1373,"    public <T extends Event> void addEventListener(final EventType<T> eventType, final EventListener<? super T> listener) {
        eventListeners.addEventListener(eventType, listener);
    }","  public void test15()  throws Throwable  {
      EnvironmentConfiguration environmentConfiguration0 = new EnvironmentConfiguration();
      UnionCombiner unionCombiner0 = new UnionCombiner();
      CombinedConfiguration combinedConfiguration0 = new CombinedConfiguration(unionCombiner0);
      // Undeclared exception!
      try { 
        environmentConfiguration0.addEventListener((EventType<ConfigurationEvent>) null, (EventListener<? super ConfigurationEvent>) combinedConfiguration0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Event type must not be null!
         //
         verifyException(""org.apache.commons.configuration2.event.EventListenerRegistrationData"", e);
      }
  }"
1374,"    public boolean isDetailEvents() {
        return checkDetailEvents(0);
    }","  public void test16()  throws Throwable  {
      BaseEventSource baseEventSource0 = new BaseEventSource();
      JNDIConfiguration jNDIConfiguration0 = new JNDIConfiguration((Context) null);
      baseEventSource0.copyEventListeners(jNDIConfiguration0);
}"
1375,"    public void copyEventListeners(final BaseEventSource source) {
        if (source == null) {
            throw new IllegalArgumentException(""Target event source must not be null!"");
        }
        source.eventListeners.addAll(eventListeners);
    }","  public void test17()  throws Throwable  {
      DynamicCombinedConfiguration dynamicCombinedConfiguration0 = new DynamicCombinedConfiguration();
      // Undeclared exception!
      try { 
        dynamicCombinedConfiguration0.copyEventListeners((BaseEventSource) null);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Target event source must not be null!
         //
         verifyException(""org.apache.commons.configuration2.event.BaseEventSource"", e);
      }
  }"
1376,"    public void clearErrorListeners() {
        for (final EventListenerRegistrationData<? extends ConfigurationErrorEvent> reg : eventListeners
            .getRegistrationsForSuperType(ConfigurationErrorEvent.ANY)) {
            eventListeners.removeEventListener(reg);
        }
    }","  public void test18()  throws Throwable  {
      YAMLConfiguration yAMLConfiguration0 = new YAMLConfiguration();
      yAMLConfiguration0.addErrorLogListener();
      yAMLConfiguration0.clearErrorListeners();
}"
1377,"    public boolean isDetailEvents() {
        return checkDetailEvents(0);
    }","  public void test19()  throws Throwable  {
      CompositeConfiguration compositeConfiguration0 = new CompositeConfiguration();
      CombinedConfiguration combinedConfiguration0 = new CombinedConfiguration();
      compositeConfiguration0.setProperty(""1t6["", combinedConfiguration0);
}"
1378,"    public <T extends Event> Collection<EventListener<? super T>> getEventListeners(final EventType<T> eventType) {
        final List<EventListener<? super T>> result = new LinkedList<>();
        for (final EventListener<? super T> l : eventListeners.getEventListeners(eventType)) {
            result.add(l);
        }
        return Collections.unmodifiableCollection(result);
    }","  public void test20()  throws Throwable  {
      PropertiesConfiguration propertiesConfiguration0 = new PropertiesConfiguration();
      EventType<ConfigurationEvent> eventType0 = ConfigurationEvent.SET_PROPERTY;
      Collection<EventListener<? super ConfigurationEvent>> collection0 = propertiesConfiguration0.getEventListeners(eventType0);
}"
1379,"    public boolean isDetailEvents() {
        return checkDetailEvents(0);
    }","  public void test21()  throws Throwable  {
      PropertiesConfiguration propertiesConfiguration0 = new PropertiesConfiguration();
      EventType<ConfigurationEvent> eventType0 = ConfigurationEvent.SET_PROPERTY;
      Set<EventType<?>> set0 = EventType.fetchSuperEventTypes(eventType0);
      propertiesConfiguration0.addProperty(""EventType [ SET_PROPERTY ]"", set0);
}"
1380,"    public void clearEventListeners() {
        eventListeners.clear();
    }","  public void test22()  throws Throwable  {
      UnionCombiner unionCombiner0 = new UnionCombiner();
      CombinedConfiguration combinedConfiguration0 = new CombinedConfiguration(unionCombiner0);
      combinedConfiguration0.clearEventListeners();
}"
1381,"    protected Object clone() throws CloneNotSupportedException {
        final BaseEventSource copy = (BaseEventSource) super.clone();
        copy.initListeners();
        return copy;
    }","  public void test23()  throws Throwable  {
      BaseEventSource baseEventSource0 = new BaseEventSource();
      try { 
        baseEventSource0.clone();
        fail(""Expecting exception: CloneNotSupportedException"");
      } catch(CloneNotSupportedException e) {
         //
         // org.apache.commons.configuration2.event.BaseEventSource
         //
         verifyException(""java.lang.Object"", e);
      }
  }"
1382,"    public List<EventListenerRegistrationData<?>> getEventListenerRegistrations() {
        return eventListeners.getRegistrations();
    }","  public void test24()  throws Throwable  {
      PropertiesConfiguration propertiesConfiguration0 = new PropertiesConfiguration();
      List<EventListenerRegistrationData<?>> list0 = propertiesConfiguration0.getEventListenerRegistrations();
}"
1383,"    public <T extends Event> boolean removeEventListener(final EventType<T> eventType, final EventListener<? super T> listener) {
        return eventListeners.removeEventListener(eventType, listener);
    }","  public void test25()  throws Throwable  {
      PropertiesConfiguration propertiesConfiguration0 = new PropertiesConfiguration();
      EventType<ConfigurationErrorEvent> eventType0 = ConfigurationErrorEvent.READ;
      EventListener<ConfigurationErrorEvent> eventListener0 = (EventListener<ConfigurationErrorEvent>) mock(EventListener.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = propertiesConfiguration0.removeEventListener(eventType0, (EventListener<? super ConfigurationErrorEvent>) eventListener0);
}"
1384,"    public static boolean isInstanceOf(final EventType<?> derivedType, final EventType<?> baseType) {
        EventType<?> currentType = derivedType;
        while (currentType != null) {
            if (currentType == baseType) {
                return true;
            }
            currentType = currentType.getSuperType();
        }
        return false;
    }","  public void test0()  throws Throwable  {
      EventType<Event> eventType0 = new EventType<Event>((EventType<? super Event>) null, """");
      EventType<Event> eventType1 = new EventType<Event>(eventType0, """");
      boolean boolean0 = EventType.isInstanceOf(eventType1, (EventType<?>) null);
}"
1385,"    public static Set<EventType<?>> fetchSuperEventTypes(final EventType<?> eventType) {
        final Set<EventType<?>> types = new HashSet<>();
        EventType<?> currentType = eventType;
        while (currentType != null) {
            types.add(currentType);
            currentType = currentType.getSuperType();
        }
        return types;
    }","  public void test1()  throws Throwable  {
      EventType<Event> eventType0 = new EventType<Event>((EventType<? super Event>) null, (String) null);
      EventType<Event> eventType1 = new EventType<Event>(eventType0, """");
      Set<EventType<?>> set0 = EventType.fetchSuperEventTypes(eventType1);
}"
1386,"    public String getName() {
        return name;
    }","  public void test2()  throws Throwable  {
      EventType<Event> eventType0 = new EventType<Event>((EventType<? super Event>) null, """");
      EventType<Event> eventType1 = new EventType<Event>(eventType0, """");
      EventType<? super Event> eventType2 = eventType1.getSuperType();
}"
1387,"    public String getName() {
        return name;
    }","  public void test3()  throws Throwable  {
      EventType<Event> eventType0 = new EventType<Event>((EventType<? super Event>) null, (String) null);
      String string0 = eventType0.getName();
}"
1388,"    public String getName() {
        return name;
    }","  public void test4()  throws Throwable  {
      EventType<Event> eventType0 = new EventType<Event>((EventType<? super Event>) null, ""%s [ %s ]"");
      String string0 = eventType0.getName();
}"
1389,"    public static Set<EventType<?>> fetchSuperEventTypes(final EventType<?> eventType) {
        final Set<EventType<?>> types = new HashSet<>();
        EventType<?> currentType = eventType;
        while (currentType != null) {
            types.add(currentType);
            currentType = currentType.getSuperType();
        }
        return types;
    }","  public void test5()  throws Throwable  {
      Set<EventType<?>> set0 = EventType.fetchSuperEventTypes((EventType<?>) null);
}"
1390,"    public String getName() {
        return name;
    }","  public void test6()  throws Throwable  {
      EventType<Event> eventType0 = new EventType<Event>((EventType<? super Event>) null, """");
      String string0 = eventType0.getName();
}"
1391,"    public EventType<? super T> getSuperType() {
        return superType;
    }","  public void test7()  throws Throwable  {
      EventType<Event> eventType0 = new EventType<Event>((EventType<? super Event>) null, """");
      EventType<? super Event> eventType1 = eventType0.getSuperType();
}"
1392,"    public static boolean isInstanceOf(final EventType<?> derivedType, final EventType<?> baseType) {
        EventType<?> currentType = derivedType;
        while (currentType != null) {
            if (currentType == baseType) {
                return true;
            }
            currentType = currentType.getSuperType();
        }
        return false;
    }","  public void test8()  throws Throwable  {
      EventType<Event> eventType0 = new EventType<Event>((EventType<? super Event>) null, (String) null);
      boolean boolean0 = EventType.isInstanceOf(eventType0, eventType0);
}"
1393,"    public String toString() {
        return String.format(FMT_TO_STRING, getClass().getSimpleName(), getName());
    }","  public void test9()  throws Throwable  {
      EventType<Event> eventType0 = new EventType<Event>((EventType<? super Event>) null, (String) null);
      String string0 = eventType0.toString();
}"
1394,"    public String toString() {
        final StringBuilder buf = new StringBuilder(BUF_SIZE);
        buf.append(getClass().getSimpleName());
        buf.append("" ["");
        appendPropertyRepresentation(buf, ""source"", getSource());
        appendPropertyRepresentation(buf, ""eventType"", getEventType());
        buf.append("" ]"");
        return buf.toString();
    }","  public void test0()  throws Throwable  {
      Object object0 = new Object();
      EventType<Event> eventType0 = Event.ANY;
      EventType<Event> eventType1 = new EventType<Event>(eventType0, ""o]k,-fT%]uUY\""-m"");
      Event event0 = new Event(object0, eventType1);
      String string0 = event0.toString();
}"
1395,"    protected void appendPropertyRepresentation(final StringBuilder buf, final String property, final Object value) {
        buf.append(String.format(FMT_PROPERTY, property, String.valueOf(value)));
    }","  public void test1()  throws Throwable  {
      Object object0 = new Object();
      EventType<Event> eventType0 = Event.ANY;
      Event event0 = new Event(object0, eventType0);
      StringBuilder stringBuilder0 = new StringBuilder();
      event0.appendPropertyRepresentation(stringBuilder0, ""org.apache.commons.configuration2.event.EventType"", object0);
  }"
1396,"    protected void appendPropertyRepresentation(final StringBuilder buf, final String property, final Object value) {
        buf.append(String.format(FMT_PROPERTY, property, String.valueOf(value)));
    }","  public void test2()  throws Throwable  {
      EventType<Event> eventType0 = Event.ANY;
      Event event0 = new Event("""", eventType0);
      // Undeclared exception!
      try { 
        event0.appendPropertyRepresentation((StringBuilder) null, """", (Object) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.configuration2.event.Event"", e);
      }
  }"
1397,"    public Event(final Object source, final EventType<? extends Event> evType) {
        super(source);
        if (evType == null) {
            throw new IllegalArgumentException(""Event type must not be null!"");
        }
        eventType = evType;
    }","  public void test3()  throws Throwable  {
      EventType<Event> eventType0 = Event.ANY;
      Event event0 = null;
      try {
        event0 = new Event((Object) null, eventType0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // null source
         //
         verifyException(""java.util.EventObject"", e);
      }
  }"
1398,"    public EventType<? extends Event> getEventType() {
        return eventType;
    }","  public void test4()  throws Throwable  {
      EventType<Event> eventType0 = Event.ANY;
      Event event0 = new Event("""", eventType0);
      EventType<? extends Event> eventType1 = event0.getEventType();
}"
1399,"    public Event(final Object source, final EventType<? extends Event> evType) {
        super(source);
        if (evType == null) {
            throw new IllegalArgumentException(""Event type must not be null!"");
        }
        eventType = evType;
    }","  public void test5()  throws Throwable  {
      Event event0 = null;
      try {
        event0 = new Event("""", (EventType<? extends Event>) null);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Event type must not be null!
         //
         verifyException(""org.apache.commons.configuration2.event.Event"", e);
      }
  }"
1400,"    public EventListener<? super T> getListener() {
        return listener;
    }","  public void test0()  throws Throwable  {
      EventType<ConfigurationEvent> eventType0 = ConfigurationEvent.ANY_HIERARCHICAL;
      MergeCombiner mergeCombiner0 = new MergeCombiner();
      CombinedConfiguration combinedConfiguration0 = new CombinedConfiguration(mergeCombiner0);
      EventListenerRegistrationData<ConfigurationEvent> eventListenerRegistrationData0 = new EventListenerRegistrationData<ConfigurationEvent>(eventType0, combinedConfiguration0);
      EventListener<? super ConfigurationEvent> eventListener0 = eventListenerRegistrationData0.getListener();
}"
1401,"    public EventType<T> getEventType() {
        return eventType;
    }","  public void test1()  throws Throwable  {
      EventType<ConfigurationEvent> eventType0 = ConfigurationEvent.ANY_HIERARCHICAL;
      MergeCombiner mergeCombiner0 = new MergeCombiner();
      CombinedConfiguration combinedConfiguration0 = new CombinedConfiguration(mergeCombiner0);
      EventListenerRegistrationData<ConfigurationEvent> eventListenerRegistrationData0 = new EventListenerRegistrationData<ConfigurationEvent>(eventType0, combinedConfiguration0);
      EventType<ConfigurationEvent> eventType1 = eventListenerRegistrationData0.getEventType();
}"
1402,"    public boolean equals(final Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof EventListenerRegistrationData)) {
            return false;
        }

        final EventListenerRegistrationData<?> c = (EventListenerRegistrationData<?>) obj;
        return getListener() == c.getListener() && getEventType().equals(c.getEventType());
    }","  public void test2()  throws Throwable  {
      EventType<ConfigurationEvent> eventType0 = ConfigurationEvent.ANY_HIERARCHICAL;
      MergeCombiner mergeCombiner0 = new MergeCombiner();
      CombinedConfiguration combinedConfiguration0 = new CombinedConfiguration(mergeCombiner0);
      EventListenerRegistrationData<ConfigurationEvent> eventListenerRegistrationData0 = new EventListenerRegistrationData<ConfigurationEvent>(eventType0, combinedConfiguration0);
      EventListenerRegistrationData<ConfigurationEvent> eventListenerRegistrationData1 = new EventListenerRegistrationData<ConfigurationEvent>(eventType0, combinedConfiguration0);
      boolean boolean0 = eventListenerRegistrationData0.equals(eventListenerRegistrationData1);
}"
1403,"    public boolean equals(final Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof EventListenerRegistrationData)) {
            return false;
        }

        final EventListenerRegistrationData<?> c = (EventListenerRegistrationData<?>) obj;
        return getListener() == c.getListener() && getEventType().equals(c.getEventType());
    }","  public void test3()  throws Throwable  {
      EventType<ConfigurationErrorEvent> eventType0 = new EventType<ConfigurationErrorEvent>((EventType<? super ConfigurationErrorEvent>) null, """");
      EventListener<ConfigurationErrorEvent> eventListener0 = (EventListener<ConfigurationErrorEvent>) mock(EventListener.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(eventListener0).toString();
      EventListenerRegistrationData<ConfigurationErrorEvent> eventListenerRegistrationData0 = new EventListenerRegistrationData<ConfigurationErrorEvent>(eventType0, eventListener0);
      EventType<ConfigurationEvent> eventType1 = ConfigurationEvent.ANY_HIERARCHICAL;
      OverrideCombiner overrideCombiner0 = new OverrideCombiner();
      CombinedConfiguration combinedConfiguration0 = new CombinedConfiguration(overrideCombiner0);
      EventListenerRegistrationData<ConfigurationEvent> eventListenerRegistrationData1 = new EventListenerRegistrationData<ConfigurationEvent>(eventType1, combinedConfiguration0);
      boolean boolean0 = eventListenerRegistrationData0.equals(eventListenerRegistrationData1);
}"
1404,"    public boolean equals(final Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof EventListenerRegistrationData)) {
            return false;
        }

        final EventListenerRegistrationData<?> c = (EventListenerRegistrationData<?>) obj;
        return getListener() == c.getListener() && getEventType().equals(c.getEventType());
    }","  public void test4()  throws Throwable  {
      EventType<ConfigurationEvent> eventType0 = ConfigurationEvent.ANY_HIERARCHICAL;
      MergeCombiner mergeCombiner0 = new MergeCombiner();
      CombinedConfiguration combinedConfiguration0 = new CombinedConfiguration(mergeCombiner0);
      EventListenerRegistrationData<ConfigurationEvent> eventListenerRegistrationData0 = new EventListenerRegistrationData<ConfigurationEvent>(eventType0, combinedConfiguration0);
      boolean boolean0 = eventListenerRegistrationData0.equals(eventType0);
}"
1405,"    public boolean equals(final Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof EventListenerRegistrationData)) {
            return false;
        }

        final EventListenerRegistrationData<?> c = (EventListenerRegistrationData<?>) obj;
        return getListener() == c.getListener() && getEventType().equals(c.getEventType());
    }","  public void test5()  throws Throwable  {
      EventType<ConfigurationEvent> eventType0 = ConfigurationEvent.ANY_HIERARCHICAL;
      MergeCombiner mergeCombiner0 = new MergeCombiner();
      CombinedConfiguration combinedConfiguration0 = new CombinedConfiguration(mergeCombiner0);
      EventListenerRegistrationData<ConfigurationEvent> eventListenerRegistrationData0 = new EventListenerRegistrationData<ConfigurationEvent>(eventType0, combinedConfiguration0);
      boolean boolean0 = eventListenerRegistrationData0.equals(eventListenerRegistrationData0);
}"
1406,"    public EventListenerRegistrationData(final EventType<T> type, final EventListener<? super T> lstnr) {
        if (type == null) {
            throw new IllegalArgumentException(""Event type must not be null!"");
        }
        if (lstnr == null) {
            throw new IllegalArgumentException(""Listener to be registered must not be null!"");
        }

        eventType = type;
        listener = lstnr;
    }","  public void test6()  throws Throwable  {
      EventType<ConfigurationEvent> eventType0 = ConfigurationEvent.SET_PROPERTY;
      EventListenerRegistrationData<ConfigurationEvent> eventListenerRegistrationData0 = null;
      try {
        eventListenerRegistrationData0 = new EventListenerRegistrationData<ConfigurationEvent>(eventType0, (EventListener<? super ConfigurationEvent>) null);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Listener to be registered must not be null!
         //
         verifyException(""org.apache.commons.configuration2.event.EventListenerRegistrationData"", e);
      }
  }"
1407,"    public EventListenerRegistrationData(final EventType<T> type, final EventListener<? super T> lstnr) {
        if (type == null) {
            throw new IllegalArgumentException(""Event type must not be null!"");
        }
        if (lstnr == null) {
            throw new IllegalArgumentException(""Listener to be registered must not be null!"");
        }

        eventType = type;
        listener = lstnr;
    }","  public void test7()  throws Throwable  {
      CombinedConfiguration combinedConfiguration0 = new CombinedConfiguration();
      EventListenerRegistrationData<ConfigurationEvent> eventListenerRegistrationData0 = null;
      try {
        eventListenerRegistrationData0 = new EventListenerRegistrationData<ConfigurationEvent>((EventType<ConfigurationEvent>) null, combinedConfiguration0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Event type must not be null!
         //
         verifyException(""org.apache.commons.configuration2.event.EventListenerRegistrationData"", e);
      }
  }"
1408,"    public int hashCode() {
        int result = eventType.hashCode();
        result = HASH_FACTOR * result + listener.hashCode();
        return result;
    }","  public void test8()  throws Throwable  {
      EventType<ConfigurationEvent> eventType0 = ConfigurationEvent.ANY_HIERARCHICAL;
      MergeCombiner mergeCombiner0 = new MergeCombiner();
      CombinedConfiguration combinedConfiguration0 = new CombinedConfiguration(mergeCombiner0);
      EventListenerRegistrationData<ConfigurationEvent> eventListenerRegistrationData0 = new EventListenerRegistrationData<ConfigurationEvent>(eventType0, combinedConfiguration0);
      eventListenerRegistrationData0.hashCode();
  }"
1409,"    public boolean equals(final Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof EventListenerRegistrationData)) {
            return false;
        }

        final EventListenerRegistrationData<?> c = (EventListenerRegistrationData<?>) obj;
        return getListener() == c.getListener() && getEventType().equals(c.getEventType());
    }","  public void test9()  throws Throwable  {
      EventType<ConfigurationEvent> eventType0 = ConfigurationEvent.ANY_HIERARCHICAL;
      DynamicCombinedConfiguration dynamicCombinedConfiguration0 = new DynamicCombinedConfiguration();
      EventListenerRegistrationData<ConfigurationEvent> eventListenerRegistrationData0 = new EventListenerRegistrationData<ConfigurationEvent>(eventType0, dynamicCombinedConfiguration0);
      EventListenerRegistrationData<ConfigurationEvent> eventListenerRegistrationData1 = new EventListenerRegistrationData<ConfigurationEvent>(dynamicCombinedConfiguration0.COMBINED_INVALIDATE, dynamicCombinedConfiguration0);
      boolean boolean0 = eventListenerRegistrationData0.equals(eventListenerRegistrationData1);
}"
1410,"    public Object getPropertyValue() {
        return propertyValue;
    }","  public void test0()  throws Throwable  {
      Object object0 = new Object();
      EventType<ConfigurationErrorEvent> eventType0 = ConfigurationErrorEvent.WRITE;
      MockThrowable mockThrowable0 = new MockThrowable((Throwable) null);
      ConfigurationErrorEvent configurationErrorEvent0 = new ConfigurationErrorEvent(object0, eventType0, eventType0, """", (Object) null, mockThrowable0);
      Object object1 = configurationErrorEvent0.getPropertyValue();
}"
1411,"    public String getPropertyName() {
        return propertyName;
    }","  public void test1()  throws Throwable  {
      Object object0 = new Object();
      EventType<ConfigurationErrorEvent> eventType0 = ConfigurationErrorEvent.READ;
      MockThrowable mockThrowable0 = new MockThrowable();
      ConfigurationErrorEvent configurationErrorEvent0 = new ConfigurationErrorEvent(object0, eventType0, eventType0, ""2$)biaG4jDQeo@-A"", object0, mockThrowable0);
      ConfigurationErrorEvent configurationErrorEvent1 = new ConfigurationErrorEvent(configurationErrorEvent0, configurationErrorEvent0.WRITE, configurationErrorEvent0.READ, (String) null, (Object) null, mockThrowable0);
      String string0 = configurationErrorEvent1.getPropertyName();
}"
1412,"    public String getPropertyName() {
        return propertyName;
    }","  public void test2()  throws Throwable  {
      EventType<ConfigurationErrorEvent> eventType0 = ConfigurationErrorEvent.WRITE;
      MockIOException mockIOException0 = new MockIOException("""");
      MockThrowable mockThrowable0 = new MockThrowable("""", mockIOException0);
      ConfigurationErrorEvent configurationErrorEvent0 = new ConfigurationErrorEvent(""g@v3HYk5.P\""RUWe<`Y"", eventType0, eventType0, """", ""g@v3HYk5.P\""RUWe<`Y"", mockThrowable0);
      String string0 = configurationErrorEvent0.getPropertyName();
}"
1413,"    public EventType<?> getErrorOperationType() {
        return errorOperationType;
    }","  public void test3()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable();
      Object object0 = new Object();
      EventType<ConfigurationErrorEvent> eventType0 = ConfigurationErrorEvent.ANY;
      ConfigurationErrorEvent configurationErrorEvent0 = new ConfigurationErrorEvent(object0, eventType0, (EventType<?>) null, """", ""g@v3HYko.P\""HUWe6`Y"", mockThrowable0);
      EventType<?> eventType1 = configurationErrorEvent0.getErrorOperationType();
}"
1414,"    public Throwable getCause() {
        return cause;
    }","  public void test4()  throws Throwable  {
      Object object0 = new Object();
      EventType<ConfigurationErrorEvent> eventType0 = ConfigurationErrorEvent.READ;
      MockThrowable mockThrowable0 = new MockThrowable();
      ConfigurationErrorEvent configurationErrorEvent0 = new ConfigurationErrorEvent(object0, eventType0, eventType0, ""2$)biaG4jDQeo@-A"", object0, mockThrowable0);
      Throwable throwable0 = configurationErrorEvent0.getCause();
}"
1415,"    public ConfigurationErrorEvent(final Object source, final EventType<? extends ConfigurationErrorEvent> eventType, final EventType<?> operationType,
        final String propName, final Object propValue, final Throwable cause) {
        super(source, eventType);
        errorOperationType = operationType;
        propertyName = propName;
        propertyValue = propValue;
        this.cause = cause;
    }","  public void test5()  throws Throwable  {
      EventType<ConfigurationErrorEvent> eventType0 = ConfigurationErrorEvent.ANY;
      MockThrowable mockThrowable0 = new MockThrowable(""H?*}&=L<"");
      MockIOException mockIOException0 = new MockIOException(mockThrowable0);
      ConfigurationErrorEvent configurationErrorEvent0 = null;
      try {
        configurationErrorEvent0 = new ConfigurationErrorEvent((Object) null, eventType0, eventType0, ""H?*}&=L<"", ""H?*}&=L<"", mockIOException0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // null source
         //
         verifyException(""java.util.EventObject"", e);
      }
  }"
1416,"    public ConfigurationErrorEvent(final Object source, final EventType<? extends ConfigurationErrorEvent> eventType, final EventType<?> operationType,
        final String propName, final Object propValue, final Throwable cause) {
        super(source, eventType);
        errorOperationType = operationType;
        propertyName = propName;
        propertyValue = propValue;
        this.cause = cause;
    }","  public void test6()  throws Throwable  {
      Object object0 = new Object();
      MockThrowable mockThrowable0 = new MockThrowable("""");
      MockIOException mockIOException0 = new MockIOException(mockThrowable0);
      ConfigurationErrorEvent configurationErrorEvent0 = null;
      try {
        configurationErrorEvent0 = new ConfigurationErrorEvent(object0, (EventType<? extends ConfigurationErrorEvent>) null, (EventType<?>) null, (String) null, (Object) null, mockIOException0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Event type must not be null!
         //
         verifyException(""org.apache.commons.configuration2.event.Event"", e);
      }
  }"
1417,"    public EventType<?> getErrorOperationType() {
        return errorOperationType;
    }","  public void test7()  throws Throwable  {
      EventType<ConfigurationErrorEvent> eventType0 = ConfigurationErrorEvent.ANY;
      ConfigurationErrorEvent configurationErrorEvent0 = new ConfigurationErrorEvent(""/"", eventType0, eventType0, ""/"", ""/"", (Throwable) null);
      EventType<?> eventType1 = configurationErrorEvent0.getErrorOperationType();
}"
1418,"    public Throwable getCause() {
        return cause;
    }","  public void test8()  throws Throwable  {
      EventType<ConfigurationErrorEvent> eventType0 = ConfigurationErrorEvent.ANY;
      ConfigurationErrorEvent configurationErrorEvent0 = new ConfigurationErrorEvent(""/"", eventType0, eventType0, ""/"", ""/"", (Throwable) null);
      Throwable throwable0 = configurationErrorEvent0.getCause();
}"
1419,"    public String getPropertyName() {
        return propertyName;
    }","  public void test9()  throws Throwable  {
      EventType<ConfigurationErrorEvent> eventType0 = ConfigurationErrorEvent.ANY;
      ConfigurationErrorEvent configurationErrorEvent0 = new ConfigurationErrorEvent(""/"", eventType0, eventType0, ""/"", ""/"", (Throwable) null);
      String string0 = configurationErrorEvent0.getPropertyName();
}"
1420,"    public Object getPropertyValue() {
        return propertyValue;
    }","  public void test10()  throws Throwable  {
      EventType<ConfigurationErrorEvent> eventType0 = ConfigurationErrorEvent.WRITE;
      MockIOException mockIOException0 = new MockIOException();
      MockThrowable mockThrowable0 = new MockThrowable("""", mockIOException0);
      ConfigurationErrorEvent configurationErrorEvent0 = new ConfigurationErrorEvent(""g@v3HYk5.P\""RUWe<`Y"", eventType0, eventType0, """", ""g@v3HYk5.P\""RUWe<`Y"", mockThrowable0);
      Object object0 = configurationErrorEvent0.getPropertyValue();
}"
1421,"    public void addAll(final EventListenerList c) {
        if (c == null) {
            throw new IllegalArgumentException(""List to be copied must not be null!"");
        }

        for (final EventListenerRegistrationData<?> regData : c.getRegistrations()) {
            addEventListener(regData);
        }
    }","  public void test0()  throws Throwable  {
      EventListenerList eventListenerList0 = new EventListenerList();
      EventListenerList eventListenerList1 = new EventListenerList();
      eventListenerList1.addAll(eventListenerList0);
}"
1422,"    public <T extends Event> boolean removeEventListener(final EventType<T> eventType, final EventListener<? super T> listener) {
        return !(listener == null || eventType == null) && removeEventListener(new EventListenerRegistrationData<>(eventType, listener));
    }","  public void test1()  throws Throwable  {
      EventListenerList eventListenerList0 = new EventListenerList();
      EventType<ConfigurationEvent> eventType0 = ConfigurationEvent.ADD_NODES;
      CombinedConfiguration combinedConfiguration0 = new CombinedConfiguration((NodeCombiner) null);
      EventListenerRegistrationData<ConfigurationEvent> eventListenerRegistrationData0 = new EventListenerRegistrationData<ConfigurationEvent>(eventType0, combinedConfiguration0);
      eventListenerList0.addEventListener(eventListenerRegistrationData0);
      boolean boolean0 = eventListenerList0.removeEventListener(eventListenerRegistrationData0);
}"
1423,"    public <T extends Event> void addEventListener(final EventType<T> type, final EventListener<? super T> listener) {
        listeners.add(new EventListenerRegistrationData<>(type, listener));
    }","  public void test2()  throws Throwable  {
      EventListenerList eventListenerList0 = new EventListenerList();
      CombinedConfiguration combinedConfiguration0 = new CombinedConfiguration();
      // Undeclared exception!
      try { 
        eventListenerList0.addEventListener((EventType<ConfigurationEvent>) null, (EventListener<? super ConfigurationEvent>) combinedConfiguration0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Event type must not be null!
         //
         verifyException(""org.apache.commons.configuration2.event.EventListenerRegistrationData"", e);
      }
  }"
1424,"    public <T extends Event> EventListenerIterator<T> getEventListenerIterator(final EventType<T> eventType) {
        return new EventListenerIterator<>(listeners.iterator(), eventType);
    }","  public void test3()  throws Throwable  {
      EventListenerList eventListenerList0 = new EventListenerList();
      CombinedConfiguration combinedConfiguration0 = new CombinedConfiguration((NodeCombiner) null);
      EventListenerList.EventListenerIterator<ConfigurationEvent> eventListenerList_EventListenerIterator0 = eventListenerList0.getEventListenerIterator(combinedConfiguration0.COMBINED_INVALIDATE);
      // Undeclared exception!
      try { 
        eventListenerList_EventListenerIterator0.next();
        fail(""Expecting exception: NoSuchElementException"");
      } catch(NoSuchElementException e) {
         //
         // No more event listeners!
         //
         verifyException(""org.apache.commons.configuration2.event.EventListenerList$EventListenerIterator"", e);
      }
  }"
1425,"    public <T extends Event> EventListenerIterator<T> getEventListenerIterator(final EventType<T> eventType) {
        return new EventListenerIterator<>(listeners.iterator(), eventType);
    }","  public void test4()  throws Throwable  {
      EventListenerList eventListenerList0 = new EventListenerList();
      EventType<ConfigurationEvent> eventType0 = ConfigurationEvent.ADD_PROPERTY;
      PropertiesConfigurationLayout propertiesConfigurationLayout0 = new PropertiesConfigurationLayout();
      EventListenerRegistrationData<ConfigurationEvent> eventListenerRegistrationData0 = new EventListenerRegistrationData<ConfigurationEvent>(eventType0, propertiesConfigurationLayout0);
      eventListenerList0.addEventListener(eventListenerRegistrationData0);
      EventListenerList.EventListenerIterator<ConfigurationEvent> eventListenerList_EventListenerIterator0 = eventListenerList0.getEventListenerIterator(eventType0);
      EventListener<? super ConfigurationEvent> eventListener0 = eventListenerList_EventListenerIterator0.next();
}"
1426,"    public <T extends Event> EventListenerIterator<T> getEventListenerIterator(final EventType<T> eventType) {
        return new EventListenerIterator<>(listeners.iterator(), eventType);
    }","  public void test5()  throws Throwable  {
      EventListenerList eventListenerList0 = new EventListenerList();
      EventType<ConfigurationEvent> eventType0 = ConfigurationEvent.CLEAR;
      MergeCombiner mergeCombiner0 = new MergeCombiner();
      CombinedConfiguration combinedConfiguration0 = new CombinedConfiguration(mergeCombiner0);
      eventListenerList0.addEventListener(eventType0, (EventListener<? super ConfigurationEvent>) combinedConfiguration0);
      EventListenerList.EventListenerIterator<ConfigurationEvent> eventListenerList_EventListenerIterator0 = eventListenerList0.getEventListenerIterator(eventType0);
      boolean boolean0 = eventListenerList_EventListenerIterator0.hasNext();
}"
1427,"    public <T extends Event> EventListenerIterator<T> getEventListenerIterator(final EventType<T> eventType) {
        return new EventListenerIterator<>(listeners.iterator(), eventType);
    }","  public void test6()  throws Throwable  {
      EventListenerList eventListenerList0 = new EventListenerList();
      EventType<ConfigurationEvent> eventType0 = ConfigurationEvent.CLEAR_PROPERTY;
      EventListenerList.EventListenerIterator<ConfigurationEvent> eventListenerList_EventListenerIterator0 = eventListenerList0.getEventListenerIterator(eventType0);
      boolean boolean0 = eventListenerList_EventListenerIterator0.hasNext();
}"
1428,"    public <T extends Event> boolean removeEventListener(final EventType<T> eventType, final EventListener<? super T> listener) {
        return !(listener == null || eventType == null) && removeEventListener(new EventListenerRegistrationData<>(eventType, listener));
    }","  public void test7()  throws Throwable  {
      EventListenerList eventListenerList0 = new EventListenerList();
      EventType<ConfigurationEvent> eventType0 = ConfigurationEvent.ANY;
      CombinedConfiguration combinedConfiguration0 = new CombinedConfiguration();
      eventListenerList0.addEventListener(eventType0, (EventListener<? super ConfigurationEvent>) combinedConfiguration0);
      boolean boolean0 = eventListenerList0.removeEventListener(eventType0, (EventListener<? super ConfigurationEvent>) combinedConfiguration0);
}"
1429,"    public <T extends Event> EventListenerIterator<T> getEventListenerIterator(final EventType<T> eventType) {
        return new EventListenerIterator<>(listeners.iterator(), eventType);
    }","  public void test8()  throws Throwable  {
      EventListenerList eventListenerList0 = new EventListenerList();
      List<EventListenerRegistrationData<?>> list0 = eventListenerList0.getRegistrations();
      EventType<ConfigurationEvent> eventType0 = ConfigurationEvent.SET_PROPERTY;
      DynamicCombinedConfiguration dynamicCombinedConfiguration0 = new DynamicCombinedConfiguration();
      EventListenerRegistrationData<ConfigurationEvent> eventListenerRegistrationData0 = new EventListenerRegistrationData<ConfigurationEvent>(eventType0, dynamicCombinedConfiguration0);
      eventListenerList0.addEventListener(eventListenerRegistrationData0);
      EventListenerList.EventListenerIterator<ConfigurationEvent> eventListenerList_EventListenerIterator0 = eventListenerList0.getEventListenerIterator(eventType0);
      ConfigurationEvent configurationEvent0 = new ConfigurationEvent(""EventType [ SET_PROPERTY ]"", eventType0, ""b\""z"", list0, true);
      eventListenerList_EventListenerIterator0.invokeNext(configurationEvent0);
}"
1430,"    public <T extends Event> EventListenerIterator<T> getEventListenerIterator(final EventType<T> eventType) {
        return new EventListenerIterator<>(listeners.iterator(), eventType);
    }","  public void test9()  throws Throwable  {
      EventListenerList eventListenerList0 = new EventListenerList();
      EventType<ConfigurationEvent> eventType0 = ConfigurationEvent.CLEAR_TREE;
      DynamicCombinedConfiguration dynamicCombinedConfiguration0 = new DynamicCombinedConfiguration();
      EventListenerRegistrationData<ConfigurationEvent> eventListenerRegistrationData0 = new EventListenerRegistrationData<ConfigurationEvent>(eventType0, dynamicCombinedConfiguration0);
      EventListenerList.EventListenerIterator<ConfigurationErrorEvent> eventListenerList_EventListenerIterator0 = eventListenerList0.getEventListenerIterator((EventType<ConfigurationErrorEvent>) null);
      PropertiesConfigurationLayout propertiesConfigurationLayout0 = new PropertiesConfigurationLayout();
      ConfigurationEvent configurationEvent0 = new ConfigurationEvent(eventListenerRegistrationData0, dynamicCombinedConfiguration0.COMBINED_INVALIDATE, ""w:7`RTv2Lv/wRq*F(\""8u"", propertiesConfigurationLayout0, true);
      // Undeclared exception!
      try { 
        eventListenerList_EventListenerIterator0.invokeNext(configurationEvent0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Event incompatible with listener iteration: ConfigurationEvent [ source=org.apache.commons.configuration2.event.EventListenerRegistrationData@36e eventType=EventType [ COMBINED_INVALIDATE ] ]
         //
         verifyException(""org.apache.commons.configuration2.event.EventListenerList$EventListenerIterator"", e);
      }
  }"
1431,"    public <T extends Event> EventListenerIterator<T> getEventListenerIterator(final EventType<T> eventType) {
        return new EventListenerIterator<>(listeners.iterator(), eventType);
    }","  public void test10()  throws Throwable  {
      EventListenerList eventListenerList0 = new EventListenerList();
      EventType<ConfigurationEvent> eventType0 = ConfigurationEvent.ADD_NODES;
      EventListenerList.EventListenerIterator<ConfigurationEvent> eventListenerList_EventListenerIterator0 = eventListenerList0.getEventListenerIterator(eventType0);
      // Undeclared exception!
      try { 
        eventListenerList_EventListenerIterator0.invokeNext((Event) null);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Event incompatible with listener iteration: null
         //
         verifyException(""org.apache.commons.configuration2.event.EventListenerList$EventListenerIterator"", e);
      }
  }"
1432,"    public <T extends Event> EventListenerIterator<T> getEventListenerIterator(final EventType<T> eventType) {
        return new EventListenerIterator<>(listeners.iterator(), eventType);
    }","  public void test11()  throws Throwable  {
      EventListenerList eventListenerList0 = new EventListenerList();
      EventType<ConfigurationEvent> eventType0 = ConfigurationEvent.ADD_PROPERTY;
      UnionCombiner unionCombiner0 = new UnionCombiner();
      CombinedConfiguration combinedConfiguration0 = new CombinedConfiguration(unionCombiner0);
      EventListenerRegistrationData<ConfigurationEvent> eventListenerRegistrationData0 = new EventListenerRegistrationData<ConfigurationEvent>(eventType0, combinedConfiguration0);
      eventListenerList0.addEventListener(eventListenerRegistrationData0);
      EventListenerList.EventListenerIterator<ConfigurationEvent> eventListenerList_EventListenerIterator0 = eventListenerList0.getEventListenerIterator(combinedConfiguration0.COMBINED_INVALIDATE);
}"
1433,"    public void fire(final Event event) {
        if (event == null) {
            throw new IllegalArgumentException(""Event to be fired must not be null!"");
        }

        for (final EventListenerIterator<? extends Event> iterator = getEventListenerIterator(event.getEventType()); iterator.hasNext();) {
            iterator.invokeNextListenerUnchecked(event);
        }
    }","  public void test12()  throws Throwable  {
      EventListenerList eventListenerList0 = new EventListenerList();
      EventType<ConfigurationEvent> eventType0 = ConfigurationEvent.SUBNODE_CHANGED;
      EventListenerList.EventListenerIterator<ConfigurationEvent> eventListenerList_EventListenerIterator0 = eventListenerList0.getEventListenerIterator(eventType0);
      PropertiesConfigurationLayout propertiesConfigurationLayout0 = new PropertiesConfigurationLayout();
      eventListenerList0.addEventListener(eventType0, (EventListener<? super ConfigurationEvent>) propertiesConfigurationLayout0);
      eventListenerList0.addAll(eventListenerList0);
      ConfigurationEvent configurationEvent0 = new ConfigurationEvent(eventListenerList_EventListenerIterator0, eventType0, ""tKsV1{IDi2%Q+/t6n"", eventListenerList0, true);
      eventListenerList0.fire(configurationEvent0);
}"
1434,"    public void addAll(final EventListenerList c) {
        if (c == null) {
            throw new IllegalArgumentException(""List to be copied must not be null!"");
        }

        for (final EventListenerRegistrationData<?> regData : c.getRegistrations()) {
            addEventListener(regData);
        }
    }","  public void test13()  throws Throwable  {
      EventListenerList eventListenerList0 = new EventListenerList();
      // Undeclared exception!
      try { 
        eventListenerList0.addAll((EventListenerList) null);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // List to be copied must not be null!
         //
         verifyException(""org.apache.commons.configuration2.event.EventListenerList"", e);
      }
  }"
1435,"    public <T extends Event> List<EventListenerRegistrationData<? extends T>> getRegistrationsForSuperType(final EventType<T> eventType) {
        final Map<EventType<?>, Set<EventType<?>>> superTypes = new HashMap<>();
        final List<EventListenerRegistrationData<? extends T>> results = new LinkedList<>();

        for (final EventListenerRegistrationData<?> reg : listeners) {
            Set<EventType<?>> base = superTypes.get(reg.getEventType());
            if (base == null) {
                base = EventType.fetchSuperEventTypes(reg.getEventType());
                superTypes.put(reg.getEventType(), base);
            }
            if (base.contains(eventType)) {
                @SuppressWarnings(""unchecked"")
                final
                // This is safe because we just did a check
                EventListenerRegistrationData<? extends T> result = (EventListenerRegistrationData<? extends T>) reg;
                results.add(result);
            }
        }

        return results;
    }","  public void test14()  throws Throwable  {
      EventListenerList eventListenerList0 = new EventListenerList();
      EventType<ConfigurationEvent> eventType0 = ConfigurationEvent.ADD_PROPERTY;
      UnionCombiner unionCombiner0 = new UnionCombiner();
      CombinedConfiguration combinedConfiguration0 = new CombinedConfiguration(unionCombiner0);
      EventListenerRegistrationData<ConfigurationEvent> eventListenerRegistrationData0 = new EventListenerRegistrationData<ConfigurationEvent>(eventType0, combinedConfiguration0);
      eventListenerList0.addEventListener(eventListenerRegistrationData0);
      List<EventListenerRegistrationData<? extends ConfigurationEvent>> list0 = eventListenerList0.getRegistrationsForSuperType(eventType0);
}"
1436,"    public <T extends Event> List<EventListenerRegistrationData<? extends T>> getRegistrationsForSuperType(final EventType<T> eventType) {
        final Map<EventType<?>, Set<EventType<?>>> superTypes = new HashMap<>();
        final List<EventListenerRegistrationData<? extends T>> results = new LinkedList<>();

        for (final EventListenerRegistrationData<?> reg : listeners) {
            Set<EventType<?>> base = superTypes.get(reg.getEventType());
            if (base == null) {
                base = EventType.fetchSuperEventTypes(reg.getEventType());
                superTypes.put(reg.getEventType(), base);
            }
            if (base.contains(eventType)) {
                @SuppressWarnings(""unchecked"")
                final
                // This is safe because we just did a check
                EventListenerRegistrationData<? extends T> result = (EventListenerRegistrationData<? extends T>) reg;
                results.add(result);
            }
        }

        return results;
    }","  public void test15()  throws Throwable  {
      EventListenerList eventListenerList0 = new EventListenerList();
      EventType<ConfigurationEvent> eventType0 = ConfigurationEvent.ADD_PROPERTY;
      UnionCombiner unionCombiner0 = new UnionCombiner();
      CombinedConfiguration combinedConfiguration0 = new CombinedConfiguration(unionCombiner0);
      EventListenerRegistrationData<ConfigurationEvent> eventListenerRegistrationData0 = new EventListenerRegistrationData<ConfigurationEvent>(eventType0, combinedConfiguration0);
      eventListenerList0.addEventListener(eventListenerRegistrationData0);
      eventListenerList0.addAll(eventListenerList0);
      List<EventListenerRegistrationData<? extends ConfigurationEvent>> list0 = eventListenerList0.getRegistrationsForSuperType(combinedConfiguration0.COMBINED_INVALIDATE);
}"
1437,"    public void fire(final Event event) {
        if (event == null) {
            throw new IllegalArgumentException(""Event to be fired must not be null!"");
        }

        for (final EventListenerIterator<? extends Event> iterator = getEventListenerIterator(event.getEventType()); iterator.hasNext();) {
            iterator.invokeNextListenerUnchecked(event);
        }
    }","  public void test16()  throws Throwable  {
      EventListenerList eventListenerList0 = new EventListenerList();
      // Undeclared exception!
      try { 
        eventListenerList0.fire((Event) null);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Event to be fired must not be null!
         //
         verifyException(""org.apache.commons.configuration2.event.EventListenerList"", e);
      }
  }"
1438,"    public <T extends Event> boolean removeEventListener(final EventType<T> eventType, final EventListener<? super T> listener) {
        return !(listener == null || eventType == null) && removeEventListener(new EventListenerRegistrationData<>(eventType, listener));
    }","  public void test17()  throws Throwable  {
      EventListenerList eventListenerList0 = new EventListenerList();
      DynamicCombinedConfiguration dynamicCombinedConfiguration0 = new DynamicCombinedConfiguration();
      boolean boolean0 = eventListenerList0.removeEventListener((EventType<ConfigurationEvent>) null, (EventListener<? super ConfigurationEvent>) dynamicCombinedConfiguration0);
}"
1439,"    public <T extends Event> boolean removeEventListener(final EventType<T> eventType, final EventListener<? super T> listener) {
        return !(listener == null || eventType == null) && removeEventListener(new EventListenerRegistrationData<>(eventType, listener));
    }","  public void test18()  throws Throwable  {
      EventListenerList eventListenerList0 = new EventListenerList();
      EventType<ConfigurationEvent> eventType0 = ConfigurationEvent.ADD_PROPERTY;
      UnionCombiner unionCombiner0 = new UnionCombiner();
      CombinedConfiguration combinedConfiguration0 = new CombinedConfiguration(unionCombiner0);
      boolean boolean0 = eventListenerList0.removeEventListener(eventType0, (EventListener<? super ConfigurationEvent>) combinedConfiguration0);
}"
1440,"    public <T extends Event> boolean removeEventListener(final EventType<T> eventType, final EventListener<? super T> listener) {
        return !(listener == null || eventType == null) && removeEventListener(new EventListenerRegistrationData<>(eventType, listener));
    }","  public void test19()  throws Throwable  {
      CombinedConfiguration combinedConfiguration0 = new CombinedConfiguration();
      EventListenerList eventListenerList0 = new EventListenerList();
      boolean boolean0 = eventListenerList0.removeEventListener(combinedConfiguration0.COMBINED_INVALIDATE, (EventListener<? super ConfigurationEvent>) null);
}"
1441,"    public <T extends Event> void addEventListener(final EventType<T> type, final EventListener<? super T> listener) {
        listeners.add(new EventListenerRegistrationData<>(type, listener));
    }","  public void test20()  throws Throwable  {
      EventListenerList eventListenerList0 = new EventListenerList();
      // Undeclared exception!
      try { 
        eventListenerList0.addEventListener((EventListenerRegistrationData<ConfigurationErrorEvent>) null);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // EventListenerRegistrationData must not be null!
         //
         verifyException(""org.apache.commons.configuration2.event.EventListenerList"", e);
      }
  }"
1442,"    public <T extends Event> EventListenerIterator<T> getEventListenerIterator(final EventType<T> eventType) {
        return new EventListenerIterator<>(listeners.iterator(), eventType);
    }","  public void test21()  throws Throwable  {
      EventListenerList eventListenerList0 = new EventListenerList();
      EventType<ConfigurationEvent> eventType0 = ConfigurationEvent.SUBNODE_CHANGED;
      PropertiesConfigurationLayout propertiesConfigurationLayout0 = new PropertiesConfigurationLayout();
      EventListenerRegistrationData<ConfigurationEvent> eventListenerRegistrationData0 = new EventListenerRegistrationData<ConfigurationEvent>(eventType0, propertiesConfigurationLayout0);
      eventListenerList0.addEventListener(eventListenerRegistrationData0);
      eventListenerList0.addEventListener(eventType0, (EventListener<? super ConfigurationEvent>) propertiesConfigurationLayout0);
      EventListenerList.EventListenerIterator<ConfigurationEvent> eventListenerList_EventListenerIterator0 = eventListenerList0.getEventListenerIterator(eventType0);
}"
1443,"    public <T extends Event> EventListenerIterator<T> getEventListenerIterator(final EventType<T> eventType) {
        return new EventListenerIterator<>(listeners.iterator(), eventType);
    }","  public void test22()  throws Throwable  {
      EventListenerList eventListenerList0 = new EventListenerList();
      EventType<ConfigurationEvent> eventType0 = ConfigurationEvent.SUBNODE_CHANGED;
      EventListenerList.EventListenerIterator<ConfigurationEvent> eventListenerList_EventListenerIterator0 = eventListenerList0.getEventListenerIterator(eventType0);
      // Undeclared exception!
      try { 
        eventListenerList_EventListenerIterator0.remove();
        fail(""Expecting exception: UnsupportedOperationException"");
      } catch(UnsupportedOperationException e) {
         //
         // Removing elements is not supported!
         //
         verifyException(""org.apache.commons.configuration2.event.EventListenerList$EventListenerIterator"", e);
      }
  }"
1444,"    public <T extends Event> Iterable<EventListener<? super T>> getEventListeners(final EventType<T> eventType) {
        return () -> getEventListenerIterator(eventType);
    }","  public void test23()  throws Throwable  {
      EventListenerList eventListenerList0 = new EventListenerList();
      EventType<ConfigurationErrorEvent> eventType0 = (EventType<ConfigurationErrorEvent>) mock(EventType.class, new ViolatedAssumptionAnswer());
      EventType<ConfigurationErrorEvent> eventType1 = new EventType<ConfigurationErrorEvent>(eventType0, """");
      Iterable<EventListener<? super ConfigurationErrorEvent>> iterable0 = eventListenerList0.getEventListeners(eventType1);
}"
1445,"    public <T extends Event> boolean removeEventListener(final EventType<T> eventType, final EventListener<? super T> listener) {
        return !(listener == null || eventType == null) && removeEventListener(new EventListenerRegistrationData<>(eventType, listener));
    }","  public void test24()  throws Throwable  {
      EventListenerList eventListenerList0 = new EventListenerList();
      EventType<ConfigurationEvent> eventType0 = ConfigurationEvent.SUBNODE_CHANGED;
      PropertiesConfigurationLayout propertiesConfigurationLayout0 = new PropertiesConfigurationLayout();
      EventListenerRegistrationData<ConfigurationEvent> eventListenerRegistrationData0 = new EventListenerRegistrationData<ConfigurationEvent>(eventType0, propertiesConfigurationLayout0);
      boolean boolean0 = eventListenerList0.removeEventListener(eventListenerRegistrationData0);
}"
1446,"    public void clear() {
        listeners.clear();
    }","  public void test25()  throws Throwable  {
      EventListenerList eventListenerList0 = new EventListenerList();
      eventListenerList0.clear();
  }"
1447,"    public void fire(final Event event) {
        if (event == null) {
            throw new IllegalArgumentException(""Event to be fired must not be null!"");
        }

        for (final EventListenerIterator<? extends Event> iterator = getEventListenerIterator(event.getEventType()); iterator.hasNext();) {
            iterator.invokeNextListenerUnchecked(event);
        }
    }","  public void test26()  throws Throwable  {
      EventListenerList eventListenerList0 = new EventListenerList();
      EventType<ConfigurationEvent> eventType0 = ConfigurationEvent.ANY_HIERARCHICAL;
      CombinedConfiguration combinedConfiguration0 = new CombinedConfiguration();
      eventListenerList0.addEventListener(eventType0, (EventListener<? super ConfigurationEvent>) combinedConfiguration0);
      Set<EventType<?>> set0 = EventType.fetchSuperEventTypes(eventType0);
      EventListenerList.EventListenerIterator<ConfigurationEvent> eventListenerList_EventListenerIterator0 = eventListenerList0.getEventListenerIterator(eventType0);
      ConfigurationEvent configurationEvent0 = new ConfigurationEvent(set0, combinedConfiguration0.COMBINED_INVALIDATE, ""EventType [ HIERARCHICAL ]"", eventListenerList_EventListenerIterator0, false);
      Event event0 = new Event(configurationEvent0, configurationEvent0.ADD_NODES);
      // Undeclared exception!
      try { 
        eventListenerList0.fire(event0);
        fail(""Expecting exception: ClassCastException"");
      } catch(ClassCastException e) {
         //
         // org.apache.commons.configuration2.event.Event cannot be cast to org.apache.commons.configuration2.event.ConfigurationEvent
         //
         verifyException(""org.apache.commons.configuration2.CombinedConfiguration"", e);
      }
  }"
1448,"    public Object getData() {
        return data;
    }","  public void test0()  throws Throwable  {
      FileHandlerReloadingDetector fileHandlerReloadingDetector0 = new FileHandlerReloadingDetector();
      ReloadingController reloadingController0 = new ReloadingController(fileHandlerReloadingDetector0);
      ReloadingEvent reloadingEvent0 = new ReloadingEvent(reloadingController0, ""2S&`n^%g01"");
      Object object0 = reloadingEvent0.getData();
}"
1449,"    public ReloadingController getController() {
        return (ReloadingController) getSource();
    }","  public void test1()  throws Throwable  {
      ManagedReloadingDetector managedReloadingDetector0 = new ManagedReloadingDetector();
      managedReloadingDetector0.refresh();
      ReloadingController reloadingController0 = new ReloadingController(managedReloadingDetector0);
      reloadingController0.checkForReloading(managedReloadingDetector0);
      ReloadingEvent reloadingEvent0 = new ReloadingEvent(reloadingController0, managedReloadingDetector0);
      ReloadingController reloadingController1 = reloadingEvent0.getController();
}"
1450,"    public Object getData() {
        return data;
    }","  public void test2()  throws Throwable  {
      FileHandlerReloadingDetector fileHandlerReloadingDetector0 = new FileHandlerReloadingDetector((FileHandler) null);
      ReloadingController reloadingController0 = new ReloadingController(fileHandlerReloadingDetector0);
      ReloadingEvent reloadingEvent0 = new ReloadingEvent(reloadingController0, (Object) null);
      Object object0 = reloadingEvent0.getData();
}"
1451,"    public ReloadingController getController() {
        return (ReloadingController) getSource();
    }","  public void test3()  throws Throwable  {
      FileHandlerReloadingDetector fileHandlerReloadingDetector0 = new FileHandlerReloadingDetector((FileHandler) null);
      ReloadingController reloadingController0 = new ReloadingController(fileHandlerReloadingDetector0);
      ReloadingEvent reloadingEvent0 = new ReloadingEvent(reloadingController0, (Object) null);
      ReloadingController reloadingController1 = reloadingEvent0.getController();
}"
1452,"    public ReloadingEvent(final ReloadingController source, final Object addData) {
        super(source, ANY);
        data = addData;
    }","  public void test4()  throws Throwable  {
      ReloadingEvent reloadingEvent0 = null;
      try {
        reloadingEvent0 = new ReloadingEvent((ReloadingController) null, (Object) null);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // null source
         //
         verifyException(""java.util.EventObject"", e);
      }
  }"
1453,"    public <T extends Event> boolean removeEventListener(final EventType<T> eventType, final EventListener<? super T> listener) {
        return listeners.removeEventListener(eventType, listener);
    }","  public void test0()  throws Throwable  {
      VFSFileHandlerReloadingDetector vFSFileHandlerReloadingDetector0 = new VFSFileHandlerReloadingDetector();
      ReloadingController reloadingController0 = new ReloadingController(vFSFileHandlerReloadingDetector0);
      EventType<ConfigurationEvent> eventType0 = ConfigurationEvent.ADD_NODES;
      PropertiesConfiguration propertiesConfiguration0 = new PropertiesConfiguration();
      PropertiesConfigurationLayout propertiesConfigurationLayout0 = propertiesConfiguration0.getLayout();
      reloadingController0.addEventListener(eventType0, (EventListener<? super ConfigurationEvent>) propertiesConfigurationLayout0);
      boolean boolean0 = reloadingController0.removeEventListener(eventType0, (EventListener<? super ConfigurationEvent>) propertiesConfigurationLayout0);
}"
1454,"    public synchronized boolean isInReloadingState() {
        return reloadingState;
    }","  public void test1()  throws Throwable  {
      ManagedReloadingDetector managedReloadingDetector0 = new ManagedReloadingDetector();
      managedReloadingDetector0.refresh();
      ReloadingController reloadingController0 = new ReloadingController(managedReloadingDetector0);
      reloadingController0.checkForReloading(managedReloadingDetector0);
      boolean boolean0 = reloadingController0.isInReloadingState();
}"
1455,"    public <T extends Event> void addEventListener(final EventType<T> eventType, final EventListener<? super T> listener) {
        listeners.addEventListener(eventType, listener);
    }","  public void test2()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      FileHandler fileHandler0 = FileHandler.fromMap(hashMap0);
      VFSFileHandlerReloadingDetector vFSFileHandlerReloadingDetector0 = new VFSFileHandlerReloadingDetector(fileHandler0, 1048576L);
      ReloadingController reloadingController0 = new ReloadingController(vFSFileHandlerReloadingDetector0);
      CombinedConfiguration combinedConfiguration0 = new CombinedConfiguration();
      // Undeclared exception!
      try { 
        reloadingController0.addEventListener((EventType<ConfigurationEvent>) null, (EventListener<? super ConfigurationEvent>) combinedConfiguration0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Event type must not be null!
         //
         verifyException(""org.apache.commons.configuration2.event.EventListenerRegistrationData"", e);
      }
  }"
1456,"    public ReloadingDetector getDetector() {
        return detector;
    }","  public void test3()  throws Throwable  {
      VFSFileHandlerReloadingDetector vFSFileHandlerReloadingDetector0 = new VFSFileHandlerReloadingDetector();
      ReloadingController reloadingController0 = new ReloadingController(vFSFileHandlerReloadingDetector0);
      ReloadingDetector reloadingDetector0 = reloadingController0.getDetector();
}"
1457,"    public synchronized boolean isInReloadingState() {
        return reloadingState;
    }","  public void test4()  throws Throwable  {
      VFSFileHandlerReloadingDetector vFSFileHandlerReloadingDetector0 = new VFSFileHandlerReloadingDetector();
      ReloadingController reloadingController0 = new ReloadingController(vFSFileHandlerReloadingDetector0);
      boolean boolean0 = reloadingController0.isInReloadingState();
}"
1458,"    public synchronized void resetReloadingState() {
        if (isInReloadingState()) {
            getDetector().reloadingPerformed();
            reloadingState = false;
        }
    }","  public void test5()  throws Throwable  {
      ManagedReloadingDetector managedReloadingDetector0 = new ManagedReloadingDetector();
      managedReloadingDetector0.refresh();
      ReloadingController reloadingController0 = new ReloadingController(managedReloadingDetector0);
      PropertiesConfigurationLayout propertiesConfigurationLayout0 = new PropertiesConfigurationLayout();
      reloadingController0.checkForReloading(propertiesConfigurationLayout0);
      reloadingController0.resetReloadingState();
}"
1459,"    public synchronized boolean isInReloadingState() {
        return reloadingState;
    }","  public void test6()  throws Throwable  {
      ManagedReloadingDetector managedReloadingDetector0 = new ManagedReloadingDetector();
      ReloadingController reloadingController0 = new ReloadingController(managedReloadingDetector0);
      reloadingController0.resetReloadingState();
}"
1460,"    public synchronized boolean isInReloadingState() {
        return reloadingState;
    }","  public void test7()  throws Throwable  {
      ManagedReloadingDetector managedReloadingDetector0 = new ManagedReloadingDetector();
      managedReloadingDetector0.refresh();
      ReloadingController reloadingController0 = new ReloadingController(managedReloadingDetector0);
      PropertiesConfigurationLayout propertiesConfigurationLayout0 = new PropertiesConfigurationLayout();
      reloadingController0.checkForReloading(propertiesConfigurationLayout0);
      boolean boolean0 = reloadingController0.checkForReloading(managedReloadingDetector0);
}"
1461,"    public boolean checkForReloading(final Object data) {
        boolean sendEvent = false;
        synchronized (this) {
            if (isInReloadingState()) {
                return true;
            }
            if (getDetector().isReloadingRequired()) {
                sendEvent = true;
                reloadingState = true;
            }
        }

        if (sendEvent) {
            listeners.fire(new ReloadingEvent(this, data));
            return true;
        }
        return false;
    }","  public void test8()  throws Throwable  {
      ManagedReloadingDetector managedReloadingDetector0 = new ManagedReloadingDetector();
      managedReloadingDetector0.refresh();
      ReloadingController reloadingController0 = new ReloadingController(managedReloadingDetector0);
      PropertiesConfigurationLayout propertiesConfigurationLayout0 = new PropertiesConfigurationLayout();
      reloadingController0.checkForReloading(propertiesConfigurationLayout0);
      boolean boolean0 = reloadingController0.checkForReloading(managedReloadingDetector0);
}"
1462,"    public ReloadingController(final ReloadingDetector detect) {
        if (detect == null) {
            throw new IllegalArgumentException(""ReloadingDetector must not be null!"");
        }

        detector = detect;
        listeners = new EventListenerList();
    }","  public void test9()  throws Throwable  {
      ReloadingController reloadingController0 = null;
      try {
        reloadingController0 = new ReloadingController((ReloadingDetector) null);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // ReloadingDetector must not be null!
         //
         verifyException(""org.apache.commons.configuration2.reloading.ReloadingController"", e);
      }
  }"
1463,"    public <T extends Event> boolean removeEventListener(final EventType<T> eventType, final EventListener<? super T> listener) {
        return listeners.removeEventListener(eventType, listener);
    }","  public void test10()  throws Throwable  {
      ManagedReloadingDetector managedReloadingDetector0 = new ManagedReloadingDetector();
      ReloadingController reloadingController0 = new ReloadingController(managedReloadingDetector0);
      EventType<ConfigurationEvent> eventType0 = ConfigurationEvent.ANY_HIERARCHICAL;
      PropertiesConfigurationLayout propertiesConfigurationLayout0 = new PropertiesConfigurationLayout();
      boolean boolean0 = reloadingController0.removeEventListener(eventType0, (EventListener<? super ConfigurationEvent>) propertiesConfigurationLayout0);
}"
1464,"    public boolean checkForReloading(final Object data) {
        boolean sendEvent = false;
        synchronized (this) {
            if (isInReloadingState()) {
                return true;
            }
            if (getDetector().isReloadingRequired()) {
                sendEvent = true;
                reloadingState = true;
            }
        }

        if (sendEvent) {
            listeners.fire(new ReloadingEvent(this, data));
            return true;
        }
        return false;
    }","  public void test11()  throws Throwable  {
      ManagedReloadingDetector managedReloadingDetector0 = new ManagedReloadingDetector();
      ReloadingController reloadingController0 = new ReloadingController(managedReloadingDetector0);
      PropertiesConfigurationLayout propertiesConfigurationLayout0 = new PropertiesConfigurationLayout();
      boolean boolean0 = reloadingController0.checkForReloading(propertiesConfigurationLayout0);
}"
1465,"    protected String resolveFileURI() {
        final FileSystem fs = getFileHandler().getFileSystem();
        return fs.getPath(null, getFileHandler().getURL(), getFileHandler().getBasePath(), getFileHandler().getFileName());
    }","  public void test0()  throws Throwable  {
      FileHandler fileHandler0 = new FileHandler();
      VFSFileHandlerReloadingDetector vFSFileHandlerReloadingDetector0 = new VFSFileHandlerReloadingDetector(fileHandler0);
      fileHandler0.setFileName("""");
      String string0 = vFSFileHandlerReloadingDetector0.resolveFileURI();
}"
1466,"    protected FileObject getFileObject() {
        if (!getFileHandler().isLocationDefined()) {
            return null;
        }

        try {
            final FileSystemManager fsManager = VFS.getManager();
            final String uri = resolveFileURI();
            if (uri == null) {
                throw new ConfigurationRuntimeException(""Unable to determine file to monitor"");
            }
            return fsManager.resolveFile(uri);
        } catch (final FileSystemException fse) {
            final String msg = ""Unable to monitor "" + getFileHandler().getURL().toString();
            log.error(msg);
            throw new ConfigurationRuntimeException(msg, fse);
        }
    }","  public void test1()  throws Throwable  {
      FileHandler fileHandler0 = new FileHandler();
      VFSFileHandlerReloadingDetector vFSFileHandlerReloadingDetector0 = new VFSFileHandlerReloadingDetector(fileHandler0);
      fileHandler0.setFileName("""");
      FileObject fileObject0 = vFSFileHandlerReloadingDetector0.getFileObject();
      FileSystemManager fileSystemManager0 = mock(FileSystemManager.class, new ViolatedAssumptionAnswer());
      doReturn((FileObject) null, (FileObject) null, fileObject0, fileObject0).when(fileSystemManager0).resolveFile(anyString());
      VFS.setManager(fileSystemManager0);
      vFSFileHandlerReloadingDetector0.getLastModificationDate();
      vFSFileHandlerReloadingDetector0.getFileObject();
      vFSFileHandlerReloadingDetector0.getLastModificationDate();
      LocalFile localFile0 = (LocalFile)vFSFileHandlerReloadingDetector0.getFileObject();
}"
1467,"    protected String resolveFileURI() {
        final FileSystem fs = getFileHandler().getFileSystem();
        return fs.getPath(null, getFileHandler().getURL(), getFileHandler().getBasePath(), getFileHandler().getFileName());
    }","  public void test2()  throws Throwable  {
      FileHandler fileHandler0 = new FileHandler();
      VFSFileHandlerReloadingDetector vFSFileHandlerReloadingDetector0 = new VFSFileHandlerReloadingDetector(fileHandler0);
      VFSFileSystem vFSFileSystem0 = new VFSFileSystem();
      fileHandler0.setFileSystem(vFSFileSystem0);
      // Undeclared exception!
      try { 
        vFSFileHandlerReloadingDetector0.resolveFileURI();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.vfs2.provider.UriParser"", e);
      }
  }"
1468,"    protected long getLastModificationDate() {
        final FileObject file = getFileObject();
        try {
            if (file == null || !file.exists()) {
                return 0;
            }

            return file.getContent().getLastModifiedTime();
        } catch (final FileSystemException ex) {
            log.error(""Unable to get last modified time for"" + file.getName().getURI(), ex);
            return 0;
        }
    }","  public void test3()  throws Throwable  {
      FileHandler fileHandler0 = new FileHandler();
      VFSFileHandlerReloadingDetector vFSFileHandlerReloadingDetector0 = new VFSFileHandlerReloadingDetector(fileHandler0);
      VFSFileSystem vFSFileSystem0 = new VFSFileSystem();
      fileHandler0.setFileSystem(vFSFileSystem0);
      fileHandler0.setFileName(""'lcAHZlney|)Mm}S,="");
      // Undeclared exception!
      try { 
        vFSFileHandlerReloadingDetector0.getLastModificationDate();
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // Unable to monitor file:/media/FSE_USER/extradrive1/toga-eval-FSE_USER-2023/toga-eval/artifacts/commons-configuration2-2.8.0-src/'l%7FcAHZlney%7C)Mm%7DS,=
         //
         verifyException(""org.apache.commons.configuration2.reloading.VFSFileHandlerReloadingDetector"", e);
      }
  }"
1469,"    protected long getLastModificationDate() {
        final FileObject file = getFileObject();
        try {
            if (file == null || !file.exists()) {
                return 0;
            }

            return file.getContent().getLastModifiedTime();
        } catch (final FileSystemException ex) {
            log.error(""Unable to get last modified time for"" + file.getName().getURI(), ex);
            return 0;
        }
    }","  public void test4()  throws Throwable  {
      Hashtable<String, PGProperty> hashtable0 = new Hashtable<String, PGProperty>();
      FileHandler fileHandler0 = FileHandler.fromMap(hashtable0);
      VFSFileHandlerReloadingDetector vFSFileHandlerReloadingDetector0 = new VFSFileHandlerReloadingDetector(fileHandler0, (-1L));
      FileObject fileObject0 = mock(FileObject.class, new ViolatedAssumptionAnswer());
      doReturn("""").when(fileObject0).toString();
      doReturn(true).when(fileObject0).exists();
      doReturn((FileContent) null).when(fileObject0).getContent();
      FileSystemManager fileSystemManager0 = mock(FileSystemManager.class, new ViolatedAssumptionAnswer());
      doReturn(fileObject0).when(fileSystemManager0).resolveFile(anyString());
      VFS.setManager(fileSystemManager0);
      FileUtil fileUtil0 = FileUtil.getFileUtil();
      File file0 = fileUtil0.canonicalFile(""0"");
      fileHandler0.setFile(file0);
      // Undeclared exception!
      try { 
        vFSFileHandlerReloadingDetector0.getLastModificationDate();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.configuration2.reloading.VFSFileHandlerReloadingDetector"", e);
      }
  }"
1470,"    protected FileObject getFileObject() {
        if (!getFileHandler().isLocationDefined()) {
            return null;
        }

        try {
            final FileSystemManager fsManager = VFS.getManager();
            final String uri = resolveFileURI();
            if (uri == null) {
                throw new ConfigurationRuntimeException(""Unable to determine file to monitor"");
            }
            return fsManager.resolveFile(uri);
        } catch (final FileSystemException fse) {
            final String msg = ""Unable to monitor "" + getFileHandler().getURL().toString();
            log.error(msg);
            throw new ConfigurationRuntimeException(msg, fse);
        }
    }","  public void test5()  throws Throwable  {
      FileHandler fileHandler0 = new FileHandler();
      VFSFileHandlerReloadingDetector vFSFileHandlerReloadingDetector0 = new VFSFileHandlerReloadingDetector(fileHandler0);
      VFSFileSystem vFSFileSystem0 = new VFSFileSystem();
      fileHandler0.setFileSystem(vFSFileSystem0);
      FileSystemManager fileSystemManager0 = mock(FileSystemManager.class, new ViolatedAssumptionAnswer());
      doReturn((FileName) null, (FileName) null).when(fileSystemManager0).resolveURI(anyString());
      VFS.setManager(fileSystemManager0);
      fileHandler0.setFileName(""'lcAHZlney|)Mm}S,="");
      // Undeclared exception!
      try { 
        vFSFileHandlerReloadingDetector0.getFileObject();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.configuration2.io.VFSFileSystem"", e);
      }
  }"
1471,"    protected FileObject getFileObject() {
        if (!getFileHandler().isLocationDefined()) {
            return null;
        }

        try {
            final FileSystemManager fsManager = VFS.getManager();
            final String uri = resolveFileURI();
            if (uri == null) {
                throw new ConfigurationRuntimeException(""Unable to determine file to monitor"");
            }
            return fsManager.resolveFile(uri);
        } catch (final FileSystemException fse) {
            final String msg = ""Unable to monitor "" + getFileHandler().getURL().toString();
            log.error(msg);
            throw new ConfigurationRuntimeException(msg, fse);
        }
    }","  public void test6()  throws Throwable  {
      FileHandler fileHandler0 = new FileHandler();
      VFSFileHandlerReloadingDetector vFSFileHandlerReloadingDetector0 = new VFSFileHandlerReloadingDetector(fileHandler0);
      VFSFileSystem vFSFileSystem0 = new VFSFileSystem();
      fileHandler0.setFileSystem(vFSFileSystem0);
      fileHandler0.setFileName("""");
      // Undeclared exception!
      try { 
        vFSFileHandlerReloadingDetector0.getFileObject();
        fail(""Expecting exception: RuntimeException"");
      } catch(RuntimeException e) {
         //
         // Unable to determine file to monitor
         //
         verifyException(""org.apache.commons.configuration2.reloading.VFSFileHandlerReloadingDetector"", e);
      }
  }"
1472,"    protected long getLastModificationDate() {
        final FileObject file = getFileObject();
        try {
            if (file == null || !file.exists()) {
                return 0;
            }

            return file.getContent().getLastModifiedTime();
        } catch (final FileSystemException ex) {
            log.error(""Unable to get last modified time for"" + file.getName().getURI(), ex);
            return 0;
        }
    }","  public void test7()  throws Throwable  {
      FileHandler fileHandler0 = new FileHandler();
      VFSFileHandlerReloadingDetector vFSFileHandlerReloadingDetector0 = new VFSFileHandlerReloadingDetector(fileHandler0, (-2797L));
      MockFile mockFile0 = new MockFile(""0"");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(""0"");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, ""0"");
      fileHandler0.setFile(mockFile0);
      long long0 = vFSFileHandlerReloadingDetector0.getLastModificationDate();
}"
1473,"    protected long getLastModificationDate() {
        final FileObject file = getFileObject();
        try {
            if (file == null || !file.exists()) {
                return 0;
            }

            return file.getContent().getLastModifiedTime();
        } catch (final FileSystemException ex) {
            log.error(""Unable to get last modified time for"" + file.getName().getURI(), ex);
            return 0;
        }
    }","  public void test8()  throws Throwable  {
      FileHandler fileHandler0 = new FileHandler();
      VFSFileHandlerReloadingDetector vFSFileHandlerReloadingDetector0 = new VFSFileHandlerReloadingDetector(fileHandler0);
      long long0 = vFSFileHandlerReloadingDetector0.getLastModificationDate();
}"
1474,"    public VFSFileHandlerReloadingDetector() {
    }","  public void test9()  throws Throwable  {
      VFSFileHandlerReloadingDetector vFSFileHandlerReloadingDetector0 = new VFSFileHandlerReloadingDetector();
}"
1475,"    protected long getLastModificationDate() {
        final FileObject file = getFileObject();
        try {
            if (file == null || !file.exists()) {
                return 0;
            }

            return file.getContent().getLastModifiedTime();
        } catch (final FileSystemException ex) {
            log.error(""Unable to get last modified time for"" + file.getName().getURI(), ex);
            return 0;
        }
    }","  public void test10()  throws Throwable  {
      FileHandler fileHandler0 = new FileHandler();
      VFSFileHandlerReloadingDetector vFSFileHandlerReloadingDetector0 = new VFSFileHandlerReloadingDetector(fileHandler0, (-2797L));
      MockFile mockFile0 = new MockFile(""0"");
      fileHandler0.setFile(mockFile0);
      long long0 = vFSFileHandlerReloadingDetector0.getLastModificationDate();
}"
1476,"    protected String resolveFileURI() {
        final FileSystem fs = getFileHandler().getFileSystem();
        return fs.getPath(null, getFileHandler().getURL(), getFileHandler().getBasePath(), getFileHandler().getFileName());
    }","  public void test11()  throws Throwable  {
      FileHandler fileHandler0 = new FileHandler();
      VFSFileHandlerReloadingDetector vFSFileHandlerReloadingDetector0 = new VFSFileHandlerReloadingDetector(fileHandler0);
      String string0 = vFSFileHandlerReloadingDetector0.resolveFileURI();
}"
1477,"    public long getRefreshDelay() {
        return refreshDelayMillis;
    }","  public void test0()  throws Throwable  {
      JSONConfiguration jSONConfiguration0 = new JSONConfiguration();
      FileHandler fileHandler0 = new FileHandler(jSONConfiguration0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(""org.apache.commons.configuration2.reloading.FileHandlerReloadingDetector"");
      byte[] byteArray0 = new byte[3];
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      FileUtil fileUtil0 = FileUtil.getFileUtil();
      File file0 = fileUtil0.canonicalFile(""org.apache.commons.configuration2.reloading.FileHandlerReloadingDetector"");
      file0.setLastModified((byte)7);
      fileHandler0.setFile(file0);
      FileHandlerReloadingDetector fileHandlerReloadingDetector0 = new FileHandlerReloadingDetector(fileHandler0, (byte)8);
      boolean boolean0 = fileHandlerReloadingDetector0.isReloadingRequired();
}"
1478,"    public boolean isReloadingRequired() {
        final long nowMillis = System.currentTimeMillis();
        if (nowMillis >= lastCheckedMillis + getRefreshDelay()) {
            lastCheckedMillis = nowMillis;

            final long modifiedMillis = getLastModificationDate();
            if (modifiedMillis > 0) {
                if (lastModifiedMillis != 0) {
                    return modifiedMillis != lastModifiedMillis;
                }
                // initialization
                updateLastModified(modifiedMillis);
            }
        }

        return false;
    }","  public void test1()  throws Throwable  {
      JSONConfiguration jSONConfiguration0 = new JSONConfiguration();
      FileHandler fileHandler0 = new FileHandler(jSONConfiguration0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(""org.apache.commons.configuration2.reloading.FileHandlerReloadingDetector"");
      byte[] byteArray0 = new byte[3];
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      FileUtil fileUtil0 = FileUtil.getFileUtil();
      File file0 = fileUtil0.canonicalFile(""org.apache.commons.configuration2.reloading.FileHandlerReloadingDetector"");
      file0.setLastModified((byte)7);
      fileHandler0.setFile(file0);
      FileHandlerReloadingDetector fileHandlerReloadingDetector0 = new FileHandlerReloadingDetector(fileHandler0, (byte)8);
      boolean boolean0 = fileHandlerReloadingDetector0.isReloadingRequired();
}"
1479,"    public boolean isReloadingRequired() {
        final long nowMillis = System.currentTimeMillis();
        if (nowMillis >= lastCheckedMillis + getRefreshDelay()) {
            lastCheckedMillis = nowMillis;

            final long modifiedMillis = getLastModificationDate();
            if (modifiedMillis > 0) {
                if (lastModifiedMillis != 0) {
                    return modifiedMillis != lastModifiedMillis;
                }
                // initialization
                updateLastModified(modifiedMillis);
            }
        }

        return false;
    }","  public void test2()  throws Throwable  {
      JSONConfiguration jSONConfiguration0 = new JSONConfiguration();
      FileHandler fileHandler0 = new FileHandler(jSONConfiguration0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(""org.apache.commons.configuration2.reloading.FileHandlerReloadingDetector"");
      byte[] byteArray0 = new byte[3];
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      FileUtil fileUtil0 = FileUtil.getFileUtil();
      File file0 = fileUtil0.canonicalFile(""org.apache.commons.configuration2.reloading.FileHandlerReloadingDetector"");
      file0.setLastModified(1042L);
      fileHandler0.setFile(file0);
      FileHandlerReloadingDetector fileHandlerReloadingDetector0 = new FileHandlerReloadingDetector(fileHandler0, 0L);
      fileHandlerReloadingDetector0.refresh();
      boolean boolean0 = fileHandlerReloadingDetector0.isReloadingRequired();
}"
1480,"    public boolean isReloadingRequired() {
        final long nowMillis = System.currentTimeMillis();
        if (nowMillis >= lastCheckedMillis + getRefreshDelay()) {
            lastCheckedMillis = nowMillis;

            final long modifiedMillis = getLastModificationDate();
            if (modifiedMillis > 0) {
                if (lastModifiedMillis != 0) {
                    return modifiedMillis != lastModifiedMillis;
                }
                // initialization
                updateLastModified(modifiedMillis);
            }
        }

        return false;
    }","  public void test3()  throws Throwable  {
      JSONConfiguration jSONConfiguration0 = new JSONConfiguration();
      FileHandler fileHandler0 = new FileHandler(jSONConfiguration0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(""org.apache.commons.configuration2.reloading.FileHandlerReloadingDetector"");
      byte[] byteArray0 = new byte[3];
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      FileUtil fileUtil0 = FileUtil.getFileUtil();
      File file0 = fileUtil0.canonicalFile(""org.apache.commons.configuration2.reloading.FileHandlerReloadingDetector"");
      fileHandler0.setFile(file0);
      FileHandlerReloadingDetector fileHandlerReloadingDetector0 = new FileHandlerReloadingDetector(fileHandler0, 0L);
      fileHandlerReloadingDetector0.updateLastModified((byte) (-120));
      boolean boolean0 = fileHandlerReloadingDetector0.isReloadingRequired();
}"
1481,"    public boolean isReloadingRequired() {
        final long nowMillis = System.currentTimeMillis();
        if (nowMillis >= lastCheckedMillis + getRefreshDelay()) {
            lastCheckedMillis = nowMillis;

            final long modifiedMillis = getLastModificationDate();
            if (modifiedMillis > 0) {
                if (lastModifiedMillis != 0) {
                    return modifiedMillis != lastModifiedMillis;
                }
                // initialization
                updateLastModified(modifiedMillis);
            }
        }

        return false;
    }","  public void test4()  throws Throwable  {
      JSONConfiguration jSONConfiguration0 = new JSONConfiguration();
      FileHandler fileHandler0 = new FileHandler(jSONConfiguration0);
      FileHandlerReloadingDetector fileHandlerReloadingDetector0 = new FileHandlerReloadingDetector(fileHandler0, 0L);
      fileHandlerReloadingDetector0.isReloadingRequired();
      boolean boolean0 = fileHandlerReloadingDetector0.isReloadingRequired();
}"
1482,"    public long getRefreshDelay() {
        return refreshDelayMillis;
    }","  public void test5()  throws Throwable  {
      JSONConfiguration jSONConfiguration0 = new JSONConfiguration();
      FileHandler fileHandler0 = new FileHandler(jSONConfiguration0);
      FileHandlerReloadingDetector fileHandlerReloadingDetector0 = new FileHandlerReloadingDetector(fileHandler0, 0L);
      long long0 = fileHandlerReloadingDetector0.getRefreshDelay();
}"
1483,"    public long getRefreshDelay() {
        return refreshDelayMillis;
    }","  public void test6()  throws Throwable  {
      XMLConfiguration xMLConfiguration0 = new XMLConfiguration();
      YAMLConfiguration yAMLConfiguration0 = new YAMLConfiguration(xMLConfiguration0);
      FileHandler fileHandler0 = new FileHandler(yAMLConfiguration0);
      FileHandlerReloadingDetector fileHandlerReloadingDetector0 = new FileHandlerReloadingDetector(fileHandler0, (-470L));
      long long0 = fileHandlerReloadingDetector0.getRefreshDelay();
}"
1484,"    protected long getLastModificationDate() {
        final File file = getExistingFile();
        return file != null ? file.lastModified() : 0;
    }","  public void test7()  throws Throwable  {
      FileHandler fileHandler0 = new FileHandler();
      FileHandlerReloadingDetector fileHandlerReloadingDetector0 = new FileHandlerReloadingDetector(fileHandler0, 1L);
      long long0 = fileHandlerReloadingDetector0.getLastModificationDate();
}"
1485,"    public long getRefreshDelay() {
        return refreshDelayMillis;
    }","  public void test8()  throws Throwable  {
      FileHandler fileHandler0 = new FileHandler();
      FileHandlerReloadingDetector fileHandlerReloadingDetector0 = new FileHandlerReloadingDetector(fileHandler0, 1L);
      long long0 = fileHandlerReloadingDetector0.getLastModificationDate();
}"
1486,"    public long getRefreshDelay() {
        return refreshDelayMillis;
    }","  public void test9()  throws Throwable  {
      JSONConfiguration jSONConfiguration0 = new JSONConfiguration();
      FileHandler fileHandler0 = new FileHandler(jSONConfiguration0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(""org.apache.commons.configuration2.reloading.FileHandlerReloadingDetector"");
      byte[] byteArray0 = new byte[3];
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      FileUtil fileUtil0 = FileUtil.getFileUtil();
      File file0 = fileUtil0.canonicalFile(""org.apache.commons.configuration2.reloading.FileHandlerReloadingDetector"");
      fileHandler0.setFile(file0);
      FileHandlerReloadingDetector fileHandlerReloadingDetector0 = new FileHandlerReloadingDetector(fileHandler0, (byte)8);
      long long0 = fileHandlerReloadingDetector0.getLastModificationDate();
}"
1487,"    protected long getLastModificationDate() {
        final File file = getExistingFile();
        return file != null ? file.lastModified() : 0;
    }","  public void test10()  throws Throwable  {
      JSONConfiguration jSONConfiguration0 = new JSONConfiguration();
      FileHandler fileHandler0 = new FileHandler(jSONConfiguration0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(""org.apache.commons.configuration2.reloading.FileHandlerReloadingDetector"");
      byte[] byteArray0 = new byte[3];
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      FileUtil fileUtil0 = FileUtil.getFileUtil();
      File file0 = fileUtil0.canonicalFile(""org.apache.commons.configuration2.reloading.FileHandlerReloadingDetector"");
      fileHandler0.setFile(file0);
      FileHandlerReloadingDetector fileHandlerReloadingDetector0 = new FileHandlerReloadingDetector(fileHandler0, (byte)8);
      long long0 = fileHandlerReloadingDetector0.getLastModificationDate();
}"
1488,"    public long getRefreshDelay() {
        return refreshDelayMillis;
    }","  public void test11()  throws Throwable  {
      FileHandlerReloadingDetector fileHandlerReloadingDetector0 = new FileHandlerReloadingDetector();
      fileHandlerReloadingDetector0.getFile();
}"
1489,"    public long getRefreshDelay() {
        return refreshDelayMillis;
    }","  public void test12()  throws Throwable  {
      Hashtable<String, NodeNameMatchers> hashtable0 = new Hashtable<String, NodeNameMatchers>();
      FileHandler fileHandler0 = FileHandler.fromMap(hashtable0);
      fileHandler0.setPath("".ar"");
      FileHandlerReloadingDetector fileHandlerReloadingDetector0 = new FileHandlerReloadingDetector(fileHandler0, 3483L);
      fileHandlerReloadingDetector0.getFile();
}"
1490,"    public long getRefreshDelay() {
        return refreshDelayMillis;
    }","  public void test13()  throws Throwable  {
      FileHandler fileHandler0 = new FileHandler();
      FileHandlerReloadingDetector fileHandlerReloadingDetector0 = new FileHandlerReloadingDetector(fileHandler0);
      fileHandler0.setFileName("""");
      fileHandlerReloadingDetector0.getFile();
}"
1491,"    public long getRefreshDelay() {
        return refreshDelayMillis;
    }","  public void test14()  throws Throwable  {
      JSONConfiguration jSONConfiguration0 = new JSONConfiguration();
      FileHandler fileHandler0 = new FileHandler(jSONConfiguration0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(""org.apache.commons.configuration2.reloading.FileHandlerReloadingDetector"");
      byte[] byteArray0 = new byte[3];
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      FileUtil fileUtil0 = FileUtil.getFileUtil();
      File file0 = fileUtil0.canonicalFile(""org.apache.commons.configuration2.reloading.FileHandlerReloadingDetector"");
      fileHandler0.setFile(file0);
      FileHandlerReloadingDetector fileHandlerReloadingDetector0 = new FileHandlerReloadingDetector(fileHandler0, (byte)8);
      fileHandlerReloadingDetector0.getFile();
}"
1492,"    public void reloadingPerformed() {
        updateLastModified(getLastModificationDate());
    }","  public void test15()  throws Throwable  {
      JSONConfiguration jSONConfiguration0 = new JSONConfiguration();
      XMLConfiguration xMLConfiguration0 = new XMLConfiguration(jSONConfiguration0);
      FileHandler fileHandler0 = new FileHandler(xMLConfiguration0);
      VfsComponentContext vfsComponentContext0 = mock(VfsComponentContext.class, new ViolatedAssumptionAnswer());
      DefaultURLStreamHandler defaultURLStreamHandler0 = new DefaultURLStreamHandler(vfsComponentContext0);
      URL uRL0 = MockURL.URL(""jar"", ""jar"", 2234, ""jar"", (URLStreamHandler) defaultURLStreamHandler0);
      URLConnectionOptions uRLConnectionOptions0 = new URLConnectionOptions();
      fileHandler0.setURL(uRL0, uRLConnectionOptions0);
      FileHandlerReloadingDetector fileHandlerReloadingDetector0 = new FileHandlerReloadingDetector(fileHandler0);
      // Undeclared exception!
      try { 
        fileHandlerReloadingDetector0.reloadingPerformed();
        fail(""Expecting exception: StringIndexOutOfBoundsException"");
      } catch(StringIndexOutOfBoundsException e) {
      }
  }"
1493,"    public void refresh() {
        updateLastModified(getLastModificationDate());
    }","  public void test16()  throws Throwable  {
      JSONConfiguration jSONConfiguration0 = new JSONConfiguration();
      XMLConfiguration xMLConfiguration0 = new XMLConfiguration(jSONConfiguration0);
      FileHandler fileHandler0 = new FileHandler(xMLConfiguration0);
      VfsComponentContext vfsComponentContext0 = mock(VfsComponentContext.class, new ViolatedAssumptionAnswer());
      DefaultURLStreamHandler defaultURLStreamHandler0 = new DefaultURLStreamHandler(vfsComponentContext0);
      URL uRL0 = MockURL.URL(""jar"", ""jar"", 2234, ""jar"", (URLStreamHandler) defaultURLStreamHandler0);
      URLConnectionOptions uRLConnectionOptions0 = URLConnectionOptions.DEFAULT;
      fileHandler0.setURL(uRL0, uRLConnectionOptions0);
      FileHandlerReloadingDetector fileHandlerReloadingDetector0 = new FileHandlerReloadingDetector(fileHandler0);
      // Undeclared exception!
      try { 
        fileHandlerReloadingDetector0.refresh();
        fail(""Expecting exception: StringIndexOutOfBoundsException"");
      } catch(StringIndexOutOfBoundsException e) {
      }
  }"
1494,"    public void refresh() {
        updateLastModified(getLastModificationDate());
    }","  public void test17()  throws Throwable  {
      Hashtable<String, ConfigurationEvent> hashtable0 = new Hashtable<String, ConfigurationEvent>();
      FileHandler fileHandler0 = FileHandler.fromMap(hashtable0);
      VFSFileSystem vFSFileSystem0 = new VFSFileSystem();
      fileHandler0.setFileSystem(vFSFileSystem0);
      FileHandlerReloadingDetector fileHandlerReloadingDetector0 = new FileHandlerReloadingDetector(fileHandler0);
      // Undeclared exception!
      try { 
        fileHandlerReloadingDetector0.refresh();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.vfs2.provider.UriParser"", e);
      }
  }"
1495,"    public boolean isReloadingRequired() {
        final long nowMillis = System.currentTimeMillis();
        if (nowMillis >= lastCheckedMillis + getRefreshDelay()) {
            lastCheckedMillis = nowMillis;

            final long modifiedMillis = getLastModificationDate();
            if (modifiedMillis > 0) {
                if (lastModifiedMillis != 0) {
                    return modifiedMillis != lastModifiedMillis;
                }
                // initialization
                updateLastModified(modifiedMillis);
            }
        }

        return false;
    }","  public void test18()  throws Throwable  {
      FileHandler fileHandler0 = new FileHandler();
      VFSFileSystem vFSFileSystem0 = new VFSFileSystem();
      fileHandler0.setFileSystem(vFSFileSystem0);
      FileHandlerReloadingDetector fileHandlerReloadingDetector0 = new FileHandlerReloadingDetector(fileHandler0, (-1L));
      // Undeclared exception!
      try { 
        fileHandlerReloadingDetector0.isReloadingRequired();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.vfs2.provider.UriParser"", e);
      }
  }"
1496,"    protected long getLastModificationDate() {
        final File file = getExistingFile();
        return file != null ? file.lastModified() : 0;
    }","  public void test19()  throws Throwable  {
      FileHandler fileHandler0 = new FileHandler();
      VfsComponentContext vfsComponentContext0 = mock(VfsComponentContext.class, new ViolatedAssumptionAnswer());
      DefaultURLStreamHandler defaultURLStreamHandler0 = new DefaultURLStreamHandler(vfsComponentContext0);
      URL uRL0 = MockURL.URL(""jar"", ""jar"", 2208, ""jar"", (URLStreamHandler) defaultURLStreamHandler0);
      URLConnectionOptions uRLConnectionOptions0 = URLConnectionOptions.DEFAULT;
      fileHandler0.setURL(uRL0, uRLConnectionOptions0);
      FileHandlerReloadingDetector fileHandlerReloadingDetector0 = new FileHandlerReloadingDetector(fileHandler0);
      // Undeclared exception!
      try { 
        fileHandlerReloadingDetector0.getLastModificationDate();
        fail(""Expecting exception: StringIndexOutOfBoundsException"");
      } catch(StringIndexOutOfBoundsException e) {
      }
  }"
1497,"    protected long getLastModificationDate() {
        final File file = getExistingFile();
        return file != null ? file.lastModified() : 0;
    }","  public void test20()  throws Throwable  {
      JSONConfiguration jSONConfiguration0 = new JSONConfiguration();
      FileHandler fileHandler0 = new FileHandler(jSONConfiguration0);
      FileHandlerReloadingDetector fileHandlerReloadingDetector0 = new FileHandlerReloadingDetector(fileHandler0);
      VFSFileSystem vFSFileSystem0 = new VFSFileSystem();
      fileHandler0.setFileSystem(vFSFileSystem0);
      // Undeclared exception!
      try { 
        fileHandlerReloadingDetector0.getLastModificationDate();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.vfs2.provider.UriParser"", e);
      }
  }"
1498,"    protected File getFile() {
        final URL url = getFileHandler().getURL();
        return url != null ? fileFromURL(url) : getFileHandler().getFile();
    }","  public void test21()  throws Throwable  {
      JSONConfiguration jSONConfiguration0 = new JSONConfiguration();
      XMLConfiguration xMLConfiguration0 = new XMLConfiguration(jSONConfiguration0);
      FileHandler fileHandler0 = new FileHandler(xMLConfiguration0);
      VfsComponentContext vfsComponentContext0 = mock(VfsComponentContext.class, new ViolatedAssumptionAnswer());
      DefaultURLStreamHandler defaultURLStreamHandler0 = new DefaultURLStreamHandler(vfsComponentContext0);
      URL uRL0 = MockURL.URL(""jar"", ""jar"", 2234, ""org.apache.commons.configuration2.reloading.FileHandlerReloadingDetector"", (URLStreamHandler) defaultURLStreamHandler0);
      URLConnectionOptions uRLConnectionOptions0 = URLConnectionOptions.DEFAULT;
      fileHandler0.setURL(uRL0, uRLConnectionOptions0);
      FileHandlerReloadingDetector fileHandlerReloadingDetector0 = new FileHandlerReloadingDetector(fileHandler0);
      // Undeclared exception!
      try { 
        fileHandlerReloadingDetector0.getFile();
        fail(""Expecting exception: StringIndexOutOfBoundsException"");
      } catch(StringIndexOutOfBoundsException e) {
      }
  }"
1499,"    protected File getFile() {
        final URL url = getFileHandler().getURL();
        return url != null ? fileFromURL(url) : getFileHandler().getFile();
    }","  public void test22()  throws Throwable  {
      JSONConfiguration jSONConfiguration0 = new JSONConfiguration();
      FileHandler fileHandler0 = new FileHandler(jSONConfiguration0);
      FileHandlerReloadingDetector fileHandlerReloadingDetector0 = new FileHandlerReloadingDetector(fileHandler0);
      VFSFileSystem vFSFileSystem0 = new VFSFileSystem();
      fileHandler0.setFileSystem(vFSFileSystem0);
      // Undeclared exception!
      try { 
        fileHandlerReloadingDetector0.getFile();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.vfs2.provider.UriParser"", e);
      }
  }"
1500,"    public long getRefreshDelay() {
        return refreshDelayMillis;
    }","  public void test23()  throws Throwable  {
      FileHandlerReloadingDetector fileHandlerReloadingDetector0 = new FileHandlerReloadingDetector((FileHandler) null, 0L);
}"
1501,"    public long getRefreshDelay() {
        return refreshDelayMillis;
    }","  public void test24()  throws Throwable  {
      JSONConfiguration jSONConfiguration0 = new JSONConfiguration();
      FileHandler fileHandler0 = new FileHandler(jSONConfiguration0);
      FileHandlerReloadingDetector fileHandlerReloadingDetector0 = new FileHandlerReloadingDetector(fileHandler0, (byte)8);
      fileHandlerReloadingDetector0.getFileHandler();
}"
1502,"    public long getRefreshDelay() {
        return refreshDelayMillis;
    }","  public void test25()  throws Throwable  {
      JSONConfiguration jSONConfiguration0 = new JSONConfiguration();
      FileHandler fileHandler0 = new FileHandler(jSONConfiguration0);
      FileHandlerReloadingDetector fileHandlerReloadingDetector0 = new FileHandlerReloadingDetector(fileHandler0, (byte)8);
      long long0 = fileHandlerReloadingDetector0.getRefreshDelay();
}"
1503,"    public boolean isReloadingRequired() {
        final long nowMillis = System.currentTimeMillis();
        if (nowMillis >= lastCheckedMillis + getRefreshDelay()) {
            lastCheckedMillis = nowMillis;

            final long modifiedMillis = getLastModificationDate();
            if (modifiedMillis > 0) {
                if (lastModifiedMillis != 0) {
                    return modifiedMillis != lastModifiedMillis;
                }
                // initialization
                updateLastModified(modifiedMillis);
            }
        }

        return false;
    }","  public void test26()  throws Throwable  {
      FileHandler fileHandler0 = new FileHandler((FileBased) null);
      VfsComponentContext vfsComponentContext0 = mock(VfsComponentContext.class, new ViolatedAssumptionAnswer());
      DefaultURLStreamHandler defaultURLStreamHandler0 = new DefaultURLStreamHandler(vfsComponentContext0);
      URL uRL0 = MockURL.URL(""jar"", ""jar"", 2234, ""org.apache.commons.configuration2.reloading.FileHandlerReloadingDetector"", (URLStreamHandler) defaultURLStreamHandler0);
      URLConnectionOptions uRLConnectionOptions0 = URLConnectionOptions.DEFAULT;
      fileHandler0.setURL(uRL0, uRLConnectionOptions0);
      FileHandlerReloadingDetector fileHandlerReloadingDetector0 = new FileHandlerReloadingDetector(fileHandler0);
      // Undeclared exception!
      try { 
        fileHandlerReloadingDetector0.isReloadingRequired();
        fail(""Expecting exception: StringIndexOutOfBoundsException"");
      } catch(StringIndexOutOfBoundsException e) {
      }
  }"
1504,"    public long getRefreshDelay() {
        return refreshDelayMillis;
    }","  public void test27()  throws Throwable  {
      FileHandler fileHandler0 = new FileHandler();
      MockFile mockFile0 = new MockFile(""\u2191"", ""\u2191"");
      fileHandler0.setFile(mockFile0);
      FileHandlerReloadingDetector fileHandlerReloadingDetector0 = new FileHandlerReloadingDetector(fileHandler0);
      boolean boolean0 = fileHandlerReloadingDetector0.isReloadingRequired();
}"
1505,"    public boolean isReloadingRequired() {
        final long nowMillis = System.currentTimeMillis();
        if (nowMillis >= lastCheckedMillis + getRefreshDelay()) {
            lastCheckedMillis = nowMillis;

            final long modifiedMillis = getLastModificationDate();
            if (modifiedMillis > 0) {
                if (lastModifiedMillis != 0) {
                    return modifiedMillis != lastModifiedMillis;
                }
                // initialization
                updateLastModified(modifiedMillis);
            }
        }

        return false;
    }","  public void test28()  throws Throwable  {
      FileHandler fileHandler0 = new FileHandler();
      MockFile mockFile0 = new MockFile(""\u2191"", ""\u2191"");
      fileHandler0.setFile(mockFile0);
      FileHandlerReloadingDetector fileHandlerReloadingDetector0 = new FileHandlerReloadingDetector(fileHandler0);
      boolean boolean0 = fileHandlerReloadingDetector0.isReloadingRequired();
}"
1506,"    public boolean isReloadingRequired() {
        final long nowMillis = System.currentTimeMillis();
        if (nowMillis >= lastCheckedMillis + getRefreshDelay()) {
            lastCheckedMillis = nowMillis;

            final long modifiedMillis = getLastModificationDate();
            if (modifiedMillis > 0) {
                if (lastModifiedMillis != 0) {
                    return modifiedMillis != lastModifiedMillis;
                }
                // initialization
                updateLastModified(modifiedMillis);
            }
        }

        return false;
    }","  public void test29()  throws Throwable  {
      FileHandler fileHandler0 = new FileHandler();
      FileUtil fileUtil0 = FileUtil.getFileUtil();
      File file0 = fileUtil0.canonicalFile(""org.apache.commons.configuration2.reloading.FileHandlerReloadngDetector"");
      fileUtil0.openOutputStreamElement(""org.apache.commons.configuration2.reloading.FileHandlerReloadngDetector"");
      fileHandler0.setFile(file0);
      FileHandlerReloadingDetector fileHandlerReloadingDetector0 = new FileHandlerReloadingDetector(fileHandler0, (byte)22);
      fileHandlerReloadingDetector0.updateLastModified(1392409281377L);
      boolean boolean0 = fileHandlerReloadingDetector0.isReloadingRequired();
}"
1507,"    public long getRefreshDelay() {
        return refreshDelayMillis;
    }","  public void test30()  throws Throwable  {
      FileHandler fileHandler0 = new FileHandler();
      FileUtil fileUtil0 = FileUtil.getFileUtil();
      File file0 = fileUtil0.canonicalFile(""org.apache.commons.configuration2.reloading.FileHandlerReloadngDetector"");
      fileUtil0.openOutputStreamElement(""org.apache.commons.configuration2.reloading.FileHandlerReloadngDetector"");
      fileHandler0.setFile(file0);
      FileHandlerReloadingDetector fileHandlerReloadingDetector0 = new FileHandlerReloadingDetector(fileHandler0, (byte)22);
      fileHandlerReloadingDetector0.updateLastModified(1392409281377L);
      boolean boolean0 = fileHandlerReloadingDetector0.isReloadingRequired();
}"
1508,"    public boolean isReloadingRequired() {
        final long nowMillis = System.currentTimeMillis();
        if (nowMillis >= lastCheckedMillis + getRefreshDelay()) {
            lastCheckedMillis = nowMillis;

            final long modifiedMillis = getLastModificationDate();
            if (modifiedMillis > 0) {
                if (lastModifiedMillis != 0) {
                    return modifiedMillis != lastModifiedMillis;
                }
                // initialization
                updateLastModified(modifiedMillis);
            }
        }

        return false;
    }","  public void test31()  throws Throwable  {
      FileHandler fileHandler0 = new FileHandler();
      FileHandlerReloadingDetector fileHandlerReloadingDetector0 = new FileHandlerReloadingDetector(fileHandler0, (byte)22);
      fileHandlerReloadingDetector0.isReloadingRequired();
      boolean boolean0 = fileHandlerReloadingDetector0.isReloadingRequired();
}"
1509,"    public long getRefreshDelay() {
        return refreshDelayMillis;
    }","  public void test32()  throws Throwable  {
      FileHandler fileHandler0 = new FileHandler();
      FileHandlerReloadingDetector fileHandlerReloadingDetector0 = new FileHandlerReloadingDetector(fileHandler0, (byte)22);
      fileHandlerReloadingDetector0.isReloadingRequired();
      boolean boolean0 = fileHandlerReloadingDetector0.isReloadingRequired();
}"
1510,"    public long getRefreshDelay() {
        return refreshDelayMillis;
    }","  public void test33()  throws Throwable  {
      FileHandlerReloadingDetector fileHandlerReloadingDetector0 = new FileHandlerReloadingDetector();
      fileHandlerReloadingDetector0.reloadingPerformed();
}"
1511,"    public ReloadingDetector getDetector() {
        return detector;
    }","  public void test0()  throws Throwable  {
      LinkedBlockingDeque<ReloadingController> linkedBlockingDeque0 = new LinkedBlockingDeque<ReloadingController>();
      CombinedReloadingController combinedReloadingController0 = new CombinedReloadingController(linkedBlockingDeque0);
      ReloadingDetector reloadingDetector0 = combinedReloadingController0.getDetector();
}"
1512,"    public Collection<ReloadingController> getSubControllers() {
        return controllers;
    }","  public void test1()  throws Throwable  {
      LinkedBlockingDeque<ReloadingController> linkedBlockingDeque0 = new LinkedBlockingDeque<ReloadingController>();
      CombinedReloadingController combinedReloadingController0 = new CombinedReloadingController(linkedBlockingDeque0);
      Collection<ReloadingController> collection0 = combinedReloadingController0.getSubControllers();
}"
1513,"    public void resetInitialReloadingState() {
        getDetector().reloadingPerformed();
    }","  public void test2()  throws Throwable  {
      ArrayList<ReloadingController> arrayList0 = new ArrayList<ReloadingController>();
      CombinedReloadingController combinedReloadingController0 = new CombinedReloadingController(arrayList0);
      arrayList0.add((ReloadingController) combinedReloadingController0);
      CombinedReloadingController combinedReloadingController1 = new CombinedReloadingController(arrayList0);
      combinedReloadingController1.resetInitialReloadingState();
}"
1514,"    public CombinedReloadingController(final Collection<? extends ReloadingController> subCtrls) {
        super(DUMMY);
        controllers = checkManagedControllers(subCtrls);
        detector = new MultiReloadingControllerDetector(this);
    }","  public void test3()  throws Throwable  {
      HashSet<ReloadingController> hashSet0 = new HashSet<ReloadingController>();
      ManagedReloadingDetector managedReloadingDetector0 = new ManagedReloadingDetector();
      managedReloadingDetector0.refresh();
      ReloadingController reloadingController0 = new ReloadingController(managedReloadingDetector0);
      hashSet0.add(reloadingController0);
      CombinedReloadingController combinedReloadingController0 = new CombinedReloadingController(hashSet0);
      MergeCombiner mergeCombiner0 = new MergeCombiner();
      DynamicCombinedConfiguration dynamicCombinedConfiguration0 = new DynamicCombinedConfiguration(mergeCombiner0);
      boolean boolean0 = combinedReloadingController0.checkForReloading(dynamicCombinedConfiguration0);
}"
1515,"    public CombinedReloadingController(final Collection<? extends ReloadingController> subCtrls) {
        super(DUMMY);
        controllers = checkManagedControllers(subCtrls);
        detector = new MultiReloadingControllerDetector(this);
    }","  public void test4()  throws Throwable  {
      HashSet<ReloadingController> hashSet0 = new HashSet<ReloadingController>();
      ManagedReloadingDetector managedReloadingDetector0 = new ManagedReloadingDetector();
      managedReloadingDetector0.refresh();
      ReloadingController reloadingController0 = new ReloadingController(managedReloadingDetector0);
      hashSet0.add(reloadingController0);
      CombinedReloadingController combinedReloadingController0 = new CombinedReloadingController(hashSet0);
      MergeCombiner mergeCombiner0 = new MergeCombiner();
      DynamicCombinedConfiguration dynamicCombinedConfiguration0 = new DynamicCombinedConfiguration(mergeCombiner0);
      boolean boolean0 = combinedReloadingController0.checkForReloading(dynamicCombinedConfiguration0);
}"
1516,"    public CombinedReloadingController(final Collection<? extends ReloadingController> subCtrls) {
        super(DUMMY);
        controllers = checkManagedControllers(subCtrls);
        detector = new MultiReloadingControllerDetector(this);
    }","  public void test5()  throws Throwable  {
      LinkedList<ReloadingController> linkedList0 = new LinkedList<ReloadingController>();
      linkedList0.add((ReloadingController) null);
      CombinedReloadingController combinedReloadingController0 = null;
      try {
        combinedReloadingController0 = new CombinedReloadingController(linkedList0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Collection with sub controllers contains a null entry!
         //
         verifyException(""org.apache.commons.configuration2.reloading.CombinedReloadingController"", e);
      }
  }"
1517,"    public CombinedReloadingController(final Collection<? extends ReloadingController> subCtrls) {
        super(DUMMY);
        controllers = checkManagedControllers(subCtrls);
        detector = new MultiReloadingControllerDetector(this);
    }","  public void test6()  throws Throwable  {
      ArrayList<ReloadingController> arrayList0 = new ArrayList<ReloadingController>();
      CombinedReloadingController combinedReloadingController0 = new CombinedReloadingController(arrayList0);
      arrayList0.add((ReloadingController) combinedReloadingController0);
      CombinedReloadingController combinedReloadingController1 = new CombinedReloadingController(arrayList0);
      boolean boolean0 = combinedReloadingController1.checkForReloading(arrayList0);
}"
1518,"    public CombinedReloadingController(final Collection<? extends ReloadingController> subCtrls) {
        super(DUMMY);
        controllers = checkManagedControllers(subCtrls);
        detector = new MultiReloadingControllerDetector(this);
    }","  public void test7()  throws Throwable  {
      CombinedReloadingController combinedReloadingController0 = null;
      try {
        combinedReloadingController0 = new CombinedReloadingController((Collection<? extends ReloadingController>) null);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Collection with sub controllers must not be null!
         //
         verifyException(""org.apache.commons.configuration2.reloading.CombinedReloadingController"", e);
      }
  }"
