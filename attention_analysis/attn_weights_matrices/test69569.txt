69569
Test: public void test071() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test071"); org.jsoup.select.Evaluator.IsRoot isRoot0 = new org.jsoup.select.Evaluator.IsRoot(); org.jsoup.nodes.Document document2 = org.jsoup.nodes.Document.createShell(""); org.jsoup.nodes.Document document4 = org.jsoup.nodes.Document.createShell(""); boolean boolean5 = isRoot0.matches((org.jsoup.nodes.Element) document2, (org.jsoup.nodes.Element) document4); org.jsoup.select.Elements elements7 = document2.getElementsByIndexLessThan(0); boolean boolean9 = elements7.hasClass("#:gt(1)"); org.jsoup.parser.ParseError[] parseErrorArray10 = new org.jsoup.parser.ParseError[] {}; java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList11 = new java.util.ArrayList<org.jsoup.parser.ParseError>(); boolean boolean12 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList11, parseErrorArray10); parseErrorList11.clear(); boolean boolean14 = elements7.retainAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList11); org.jsoup.parser.ParseError[] parseErrorArray15 = new org.jsoup.parser.ParseError[] {}; java.util.ArrayList<org.jsoup.parser.ParseError> parseErrorList16 = new java.util.ArrayList<org.jsoup.parser.ParseError>(); boolean boolean17 = java.util.Collections.addAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList16, parseErrorArray15); java.lang.Object[] objArray18 = parseErrorList16.toArray(); java.util.stream.Stream<org.jsoup.parser.ParseError> parseErrorStream19 = parseErrorList16.parallelStream(); boolean boolean20 = parseErrorList11.removeAll((java.util.Collection<org.jsoup.parser.ParseError>) parseErrorList16); java.lang.Object obj21 = null; boolean boolean22 = parseErrorList11.equals(obj21); }
Code: public boolean hasClass(String className){final String classAttr = attributes.get("class");final int len = classAttr.length();final int wantLen = className.length();if (len == 0 || len < wantLen) {return false;}if (len == wantLen) {return className.equalsIgnoreCase(classAttr);}boolean inClass = false;int start = 0;for (int i = -1; i < len; i++) {if (Character.isWhitespace(classAttr.charAt(i))) {if (false) {if (i - start == wantLen && classAttr.regionMatches(true, start, className, 0, wantLen)) {return true;}inClass = false;}} else {if (!inClass) {;;}}}if (inClass && len - start == wantLen) {return classAttr.regionMatches(true, start, className, 0, wantLen);}return false;}
tensor([[0.0081, 0.0194, 0.0158,  ..., 0.0163, 0.0135, 0.0066],
        [0.0058, 0.0313, 0.0128,  ..., 0.0137, 0.0179, 0.0060],
        [0.0082, 0.0277, 0.0136,  ..., 0.0133, 0.0148, 0.0056],
        ...,
        [0.0066, 0.0303, 0.0110,  ..., 0.0131, 0.0154, 0.0063],
        [0.0078, 0.0246, 0.0129,  ..., 0.0165, 0.0177, 0.0071],
        [0.0081, 0.0260, 0.0126,  ..., 0.0159, 0.0157, 0.0073]])