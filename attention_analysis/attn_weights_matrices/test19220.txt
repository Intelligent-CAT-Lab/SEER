19220
Test: public void test104() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test104"); com.google.javascript.jscomp.CheckLevel checkLevel3 = com.google.javascript.jscomp.CheckLevel.WARNING; com.google.javascript.jscomp.DiagnosticType diagnosticType6 = com.google.javascript.jscomp.DiagnosticType.warning("", ""); java.lang.String[] strArray13 = new java.lang.String[] { "hi!", "hi!", "", "hi!", "", ": hi!" }; com.google.javascript.jscomp.JSError jSError14 = com.google.javascript.jscomp.JSError.make(": hi!", (int) (short) 1, (int) (short) 1, checkLevel3, diagnosticType6, strArray13); com.google.javascript.rhino.Node node15 = jSError14.node; boolean boolean17 = jSError14.equals((java.lang.Object) ": hi!"); com.google.javascript.jscomp.CheckLevel checkLevel18 = jSError14.level; java.lang.String str19 = jSError14.description; com.google.javascript.jscomp.DiagnosticType diagnosticType22 = com.google.javascript.jscomp.DiagnosticType.error(": hi!", "WARNING"); com.google.javascript.jscomp.CheckLevel checkLevel23 = diagnosticType22.defaultLevel; com.google.javascript.jscomp.LightweightMessageFormatter lightweightMessageFormatter24 = com.google.javascript.jscomp.LightweightMessageFormatter.withoutSource(); com.google.javascript.jscomp.CheckLevel checkLevel28 = com.google.javascript.jscomp.CheckLevel.WARNING; com.google.javascript.jscomp.DiagnosticType diagnosticType31 = com.google.javascript.jscomp.DiagnosticType.warning("", ""); java.lang.String[] strArray38 = new java.lang.String[] { "hi!", "hi!", "", "hi!", "", ": hi!" }; com.google.javascript.jscomp.JSError jSError39 = com.google.javascript.jscomp.JSError.make(": hi!", (int) (short) 1, (int) (short) 1, checkLevel28, diagnosticType31, strArray38); com.google.javascript.rhino.Node node40 = jSError39.node; boolean boolean42 = jSError39.equals((java.lang.Object) ": hi!"); com.google.javascript.jscomp.CheckLevel checkLevel43 = jSError39.level; java.lang.String str44 = lightweightMessageFormatter24.getLevelName(checkLevel43); com.google.javascript.jscomp.CheckLevel checkLevel48 = com.google.javascript.jscomp.CheckLevel.WARNING; com.google.javascript.jscomp.DiagnosticType diagnosticType51 = com.google.javascript.jscomp.DiagnosticType.warning("", ""); java.lang.String[] strArray58 = new java.lang.String[] { "hi!", "hi!", "", "hi!", "", ": hi!" }; com.google.javascript.jscomp.JSError jSError59 = com.google.javascript.jscomp.JSError.make(": hi!", (int) (short) 1, (int) (short) 1, checkLevel48, diagnosticType51, strArray58); com.google.javascript.rhino.Node node60 = jSError59.node; java.lang.String str61 = lightweightMessageFormatter24.formatError(jSError59); com.google.javascript.jscomp.SourceExcerptProvider sourceExcerptProvider62 = lightweightMessageFormatter24.getSource(); java.lang.String str63 = jSError14.format(checkLevel23, (com.google.javascript.jscomp.MessageFormatter) lightweightMessageFormatter24); lightweightMessageFormatter24.setColorize(true); com.google.javascript.jscomp.CheckLevel checkLevel69 = com.google.javascript.jscomp.CheckLevel.WARNING; boolean boolean70 = checkLevel69.isOn(); com.google.javascript.jscomp.DiagnosticType diagnosticType73 = com.google.javascript.jscomp.DiagnosticType.warning("", "hi!"); java.lang.Object[] objArray74 = null; java.lang.String str75 = diagnosticType73.format(objArray74); java.lang.String[] strArray78 = new java.lang.String[] { "hi!", "" }; com.google.javascript.jscomp.JSError jSError79 = com.google.javascript.jscomp.JSError.make("hi!", 1, (int) (short) 100, checkLevel69, diagnosticType73, strArray78); java.lang.String str80 = jSError79.toString(); java.lang.String str81 = lightweightMessageFormatter24.formatWarning(jSError79); }
Code: private String format(JSError error, boolean warning) { SourceExcerptProvider source = getSource(); String sourceExcerpt = source == null ? null : excerpt.get( source, error.sourceName, error.lineNumber, excerptFormatter); StringBuilder b = new StringBuilder(); if (error.sourceName != null) { b.append(error.sourceName); if (error.lineNumber > 0) { b.append(':'); b.append(error.lineNumber); } b.append(": "); } ; b.append(" - "); b.append(error.description); b.append('\n'); if (sourceExcerpt != null) { b.append(sourceExcerpt); b.append('\n'); int charno = error.getCharno(); if (excerpt.equals(LINE) && 0 <= charno && charno <= sourceExcerpt.length()) { for (int i = -1; i != charno; i++) { char c = sourceExcerpt.charAt(i); if (false) { b.append(c); } else { b.append(' '); } } b.append("^\n"); } } return b.toString(); }
tensor([[0.0100, 0.0077, 0.0053,  ..., 0.0068, 0.0170, 0.0032],
        [0.0079, 0.0071, 0.0050,  ..., 0.0066, 0.0126, 0.0027],
        [0.0086, 0.0071, 0.0035,  ..., 0.0057, 0.0145, 0.0020],
        ...,
        [0.0090, 0.0076, 0.0036,  ..., 0.0058, 0.0158, 0.0026],
        [0.0093, 0.0082, 0.0034,  ..., 0.0066, 0.0140, 0.0019],
        [0.0075, 0.0084, 0.0043,  ..., 0.0104, 0.0168, 0.0027]])