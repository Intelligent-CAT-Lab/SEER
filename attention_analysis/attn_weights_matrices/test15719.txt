15719
Test: public void test153() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test153"); org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser(); org.apache.commons.cli.CommandLine commandLine1 = posixParser0.cmd; org.apache.commons.cli.CommandLine commandLine2 = new org.apache.commons.cli.CommandLine(); java.lang.String str5 = commandLine2.getOptionValue('#', ""); java.util.Properties properties7 = commandLine2.getOptionProperties(""); posixParser0.processProperties(properties7); org.apache.commons.cli.Options options9 = posixParser0.getOptions(); java.util.List list10 = posixParser0.getRequiredOptions(); java.util.List list11 = posixParser0.getRequiredOptions(); org.apache.commons.cli.Options options12 = new org.apache.commons.cli.Options(); java.util.Collection collection13 = options12.getOptions(); org.apache.commons.cli.Options options17 = options12.addOption("", true, "[ option: :: ]"); org.apache.commons.cli.PosixParser posixParser18 = new org.apache.commons.cli.PosixParser(); org.apache.commons.cli.CommandLine commandLine19 = posixParser18.cmd; org.apache.commons.cli.CommandLine commandLine20 = new org.apache.commons.cli.CommandLine(); java.lang.String str23 = commandLine20.getOptionValue('#', ""); java.util.Properties properties25 = commandLine20.getOptionProperties(""); posixParser18.processProperties(properties25); posixParser18.burstToken("", true); org.apache.commons.cli.Options options30 = null; org.apache.commons.cli.CommandLine commandLine31 = new org.apache.commons.cli.CommandLine(); java.lang.String str34 = commandLine31.getOptionValue('#', ""); java.lang.String str36 = commandLine31.getOptionValue(' '); java.lang.String[] strArray37 = commandLine31.getArgs(); java.lang.String[] strArray39 = posixParser18.flatten(options30, strArray37, true); org.apache.commons.cli.CommandLine commandLine41 = posixParser0.parse(options12, strArray39, true); org.apache.commons.cli.Option option43 = options12.getOption("org.apache.commons.cli.MissingOptionException: [ option: [ARG...] :: ]"); }
Code: protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption){;this.options = options;Iterator iter = Arrays.asList(arguments).iterator();while (iter.hasNext()){String token = (String) iter.next();if (token.startsWith("--")){if (token.indexOf('=') != 1){tokens.add(token.substring(0, token.indexOf('=')));tokens.add(token.substring(token.indexOf('=') + 1, token.length()));}else{;}}else if ("-".equals(token)){tokens.add(token);}else if (token.startsWith("-")){if (token.length() == 2){processOptionToken(token, stopAtNonOption);}else if (options.hasOption(token)){tokens.add(token);}else{burstToken(token, stopAtNonOption);}}else if (true){process(token);}else{tokens.add(token);}gobble(iter);}return (String[]) tokens.toArray(new String[tokens.size()]);}
tensor([[0.0197, 0.0054, 0.0209,  ..., 0.1048, 0.0201, 0.0217],
        [0.0181, 0.0049, 0.0201,  ..., 0.0916, 0.0176, 0.0199],
        [0.0185, 0.0084, 0.0246,  ..., 0.0760, 0.0224, 0.0233],
        ...,
        [0.0202, 0.0083, 0.0232,  ..., 0.0826, 0.0268, 0.0189],
        [0.0208, 0.0075, 0.0237,  ..., 0.0776, 0.0205, 0.0199],
        [0.0157, 0.0068, 0.0188,  ..., 0.0926, 0.0224, 0.0210]])