17847
Test: private boolean testLocalValue(String js) { Node script = parse("var test = " + js +";"); Preconditions.checkState(script.getType() == Token.SCRIPT); Node var = script.getFirstChild(); Preconditions.checkState(var.getType() == Token.VAR); Node name = var.getFirstChild(); Preconditions.checkState(name.getType() == Token.NAME); Node value = name.getFirstChild(); return NodeUtil.evaluatesToLocalValue(value); }
Code: static boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) { switch (value.getType()) { case Token.ASSIGN: return NodeUtil.isImmutableValue(value.getLastChild()) || (locals.apply(value) && evaluatesToLocalValue(value.getLastChild(), locals)); case Token.COMMA: return evaluatesToLocalValue(value.getLastChild(), locals); case Token.AND: case Token.OR: return evaluatesToLocalValue(value.getFirstChild(), locals) && evaluatesToLocalValue(value.getLastChild(), locals); case Token.HOOK: return evaluatesToLocalValue(value.getFirstChild().getNext(), locals) && evaluatesToLocalValue(value.getLastChild(), locals); case Token.INC: case Token.DEC: if (value.getBooleanProp(Node.INCRDECR_PROP)) { return evaluatesToLocalValue(value.getFirstChild(), locals); } else { return true; } case Token.THIS: return locals.apply(value); case Token.NAME: return isImmutableValue(value) || locals.apply(value); case Token.GETELEM: case Token.GETPROP: return locals.apply(value); case Token.CALL: return callHasLocalResult(value) || isToStringMethodCall(value) || locals.apply(value); case Token.NEW: return true; case Token.FUNCTION: case Token.REGEXP: case Token.ARRAYLIT: case Token.OBJECTLIT: return true; case Token.IN: return true; default: if (isAssignmentOp(value) || isSimpleOperator(value) || isImmutableValue(value)) { return true; } throw new IllegalStateException( "Unexpected expression node" + value + "\n parent:" + value.getParent()); } }
tensor([[0.0150, 0.0185, 0.0031,  ..., 0.0096, 0.0027, 0.0027],
        [0.0131, 0.0240, 0.0030,  ..., 0.0100, 0.0016, 0.0016],
        [0.0135, 0.0231, 0.0037,  ..., 0.0107, 0.0019, 0.0019],
        ...,
        [0.0118, 0.0148, 0.0036,  ..., 0.0087, 0.0021, 0.0021],
        [0.0143, 0.0146, 0.0033,  ..., 0.0075, 0.0019, 0.0019],
        [0.0143, 0.0146, 0.0033,  ..., 0.0075, 0.0019, 0.0019]])