19260
Test: public void test149() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test149"); com.google.javascript.jscomp.DiagnosticType diagnosticType3 = com.google.javascript.jscomp.DiagnosticType.error(": hi!", "WARNING"); com.google.javascript.jscomp.CheckLevel checkLevel4 = diagnosticType3.defaultLevel; com.google.javascript.jscomp.LightweightMessageFormatter lightweightMessageFormatter5 = com.google.javascript.jscomp.LightweightMessageFormatter.withoutSource(); com.google.javascript.jscomp.CheckLevel checkLevel9 = com.google.javascript.jscomp.CheckLevel.WARNING; com.google.javascript.jscomp.DiagnosticType diagnosticType12 = com.google.javascript.jscomp.DiagnosticType.warning("", ""); java.lang.String[] strArray19 = new java.lang.String[] { "hi!", "hi!", "", "hi!", "", ": hi!" }; com.google.javascript.jscomp.JSError jSError20 = com.google.javascript.jscomp.JSError.make(": hi!", (int) (short) 1, (int) (short) 1, checkLevel9, diagnosticType12, strArray19); com.google.javascript.rhino.Node node21 = jSError20.node; boolean boolean23 = jSError20.equals((java.lang.Object) ": hi!"); com.google.javascript.jscomp.CheckLevel checkLevel24 = jSError20.level; java.lang.String str25 = lightweightMessageFormatter5.getLevelName(checkLevel24); com.google.javascript.jscomp.CheckLevel checkLevel29 = com.google.javascript.jscomp.CheckLevel.WARNING; com.google.javascript.jscomp.DiagnosticType diagnosticType32 = com.google.javascript.jscomp.DiagnosticType.warning("", ""); java.lang.String[] strArray39 = new java.lang.String[] { "hi!", "hi!", "", "hi!", "", ": hi!" }; com.google.javascript.jscomp.JSError jSError40 = com.google.javascript.jscomp.JSError.make(": hi!", (int) (short) 1, (int) (short) 1, checkLevel29, diagnosticType32, strArray39); com.google.javascript.rhino.Node node41 = jSError40.node; java.lang.String str42 = lightweightMessageFormatter5.formatError(jSError40); com.google.javascript.jscomp.CheckLevel checkLevel46 = com.google.javascript.jscomp.CheckLevel.WARNING; boolean boolean47 = checkLevel46.isOn(); com.google.javascript.jscomp.DiagnosticType diagnosticType50 = com.google.javascript.jscomp.DiagnosticType.warning("", "hi!"); java.lang.Object[] objArray51 = null; java.lang.String str52 = diagnosticType50.format(objArray51); java.lang.String[] strArray55 = new java.lang.String[] { "hi!", "" }; com.google.javascript.jscomp.JSError jSError56 = com.google.javascript.jscomp.JSError.make("hi!", 1, (int) (short) 100, checkLevel46, diagnosticType50, strArray55); java.lang.String str57 = lightweightMessageFormatter5.formatWarning(jSError56); com.google.javascript.jscomp.CheckLevel checkLevel61 = com.google.javascript.jscomp.CheckLevel.WARNING; com.google.javascript.jscomp.DiagnosticType diagnosticType64 = com.google.javascript.jscomp.DiagnosticType.warning("", ""); java.lang.String[] strArray71 = new java.lang.String[] { "hi!", "hi!", "", "hi!", "", ": hi!" }; com.google.javascript.jscomp.JSError jSError72 = com.google.javascript.jscomp.JSError.make(": hi!", (int) (short) 1, (int) (short) 1, checkLevel61, diagnosticType64, strArray71); java.lang.String str73 = lightweightMessageFormatter5.formatError(jSError72); boolean boolean74 = diagnosticType3.equals((java.lang.Object) jSError72); int int75 = jSError72.getCharno(); com.google.javascript.jscomp.CheckLevel checkLevel76 = jSError72.level; com.google.javascript.jscomp.DiagnosticType diagnosticType78 = com.google.javascript.jscomp.DiagnosticType.make(":52: ERROR - hi!\n", checkLevel76, "WARNING - hi!\n"); boolean boolean79 = checkLevel76.isOn(); }
Code: private String format(JSError error, boolean warning) { SourceExcerptProvider source = getSource(); String sourceExcerpt = source == null ? null : excerpt.get( source, error.sourceName, error.lineNumber, excerptFormatter); StringBuilder b = new StringBuilder(); if (error.sourceName != null) { b.append(error.sourceName); if (error.lineNumber > 0) { b.append(':'); b.append(error.lineNumber); } b.append(": "); } ; b.append(" - "); b.append(error.description); b.append('\n'); if (sourceExcerpt != null) { b.append(sourceExcerpt); b.append('\n'); int charno = error.getCharno(); if (excerpt.equals(LINE) && 0 <= charno && charno <= sourceExcerpt.length()) { for (int i = -1; i != charno; i++) { char c = sourceExcerpt.charAt(i); if (false) { b.append(c); } else { b.append(' '); } } b.append("^\n"); } } return b.toString(); }
tensor([[0.0100, 0.0077, 0.0053,  ..., 0.0068, 0.0170, 0.0032],
        [0.0079, 0.0071, 0.0050,  ..., 0.0066, 0.0126, 0.0027],
        [0.0086, 0.0071, 0.0035,  ..., 0.0057, 0.0145, 0.0020],
        ...,
        [0.0090, 0.0076, 0.0036,  ..., 0.0058, 0.0158, 0.0026],
        [0.0093, 0.0082, 0.0034,  ..., 0.0066, 0.0140, 0.0019],
        [0.0075, 0.0084, 0.0043,  ..., 0.0104, 0.0168, 0.0027]])