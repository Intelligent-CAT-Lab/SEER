101406
Test: public void test163() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test163"); org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstanceUTC(); org.joda.time.DateTimeField dateTimeField1 = iSOChronology0.secondOfDay(); long long4 = dateTimeField1.getDifferenceAsLong((long) (-1), (long) 1); org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.dayOfMonth(); org.joda.time.field.OffsetDateTimeField offsetDateTimeField7 = new org.joda.time.field.OffsetDateTimeField(dateTimeField1, dateTimeFieldType5, 10919); org.joda.time.MutableDateTime mutableDateTime8 = org.joda.time.MutableDateTime.now(); int int9 = mutableDateTime8.getDayOfMonth(); org.joda.time.MutableDateTime.Property property10 = mutableDateTime8.weekOfWeekyear(); org.joda.time.MutableDateTime mutableDateTime11 = org.joda.time.MutableDateTime.now(); org.joda.time.DateTime dateTime12 = mutableDateTime11.toDateTime(); org.joda.time.DateTime dateTime14 = dateTime12.withMinuteOfHour((int) (short) 1); org.joda.time.DateTime dateTime16 = dateTime14.plusHours(10); int int17 = dateTime16.getSecondOfDay(); org.joda.time.LocalDateTime localDateTime18 = dateTime16.toLocalDateTime(); int int20 = localDateTime18.getValue(3); int int21 = property10.compareTo((org.joda.time.ReadablePartial) localDateTime18); java.util.Locale locale22 = null; java.lang.String str23 = offsetDateTimeField7.getAsText((org.joda.time.ReadablePartial) localDateTime18, locale22); org.joda.time.MutableDateTime mutableDateTime24 = org.joda.time.MutableDateTime.now(); int int25 = mutableDateTime24.getDayOfMonth(); org.joda.time.MutableDateTime.Property property26 = mutableDateTime24.weekOfWeekyear(); org.joda.time.MutableDateTime mutableDateTime27 = org.joda.time.MutableDateTime.now(); org.joda.time.DateTime dateTime28 = mutableDateTime27.toDateTime(); org.joda.time.DateTime dateTime30 = dateTime28.withMinuteOfHour((int) (short) 1); org.joda.time.DateTime dateTime32 = dateTime30.plusHours(10); int int33 = dateTime32.getSecondOfDay(); org.joda.time.LocalDateTime localDateTime34 = dateTime32.toLocalDateTime(); int int36 = localDateTime34.getValue(3); int int37 = property26.compareTo((org.joda.time.ReadablePartial) localDateTime34); java.util.Locale locale39 = null; java.lang.String str40 = offsetDateTimeField7.getAsText((org.joda.time.ReadablePartial) localDateTime34, 10906, locale39); long long43 = offsetDateTimeField7.add((long) 27, 0); org.joda.time.Chronology chronology46 = null; org.joda.time.ReadableInterval readableInterval47 = null; org.joda.time.Chronology chronology48 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval47); org.joda.time.DateTimeField dateTimeField49 = chronology48.weekyearOfCentury(); org.joda.time.DateTimeField dateTimeField50 = chronology48.secondOfDay(); java.lang.String str52 = dateTimeField50.getAsShortText(0L); org.joda.time.field.SkipDateTimeField skipDateTimeField53 = new org.joda.time.field.SkipDateTimeField(chronology46, dateTimeField50); long long56 = skipDateTimeField53.getDifferenceAsLong((long) 9, 0L); org.joda.time.DurationField durationField57 = skipDateTimeField53.getRangeDurationField(); org.joda.time.MutableDateTime mutableDateTime58 = org.joda.time.MutableDateTime.now(); org.joda.time.DateTime dateTime59 = mutableDateTime58.toDateTime(); org.joda.time.DateTime dateTime61 = dateTime59.withMinuteOfHour((int) (short) 1); org.joda.time.DateTime dateTime63 = dateTime61.plusHours(10); int int64 = dateTime63.getSecondOfDay(); org.joda.time.LocalDateTime localDateTime65 = dateTime63.toLocalDateTime(); int[] intArray72 = new int[] { 288, 10906, 32, 10905, '#', (short) 0 }; int int73 = skipDateTimeField53.getMinimumValue((org.joda.time.ReadablePartial) localDateTime65, intArray72); java.util.Locale locale75 = null; java.lang.String str76 = skipDateTimeField53.getAsShortText(10909, locale75); org.joda.time.DateTimeFieldType dateTimeFieldType78 = org.joda.time.DateTimeFieldType.centuryOfEra(); org.joda.time.format.DateTimeFormatterBuilder.UnpaddedNumber unpaddedNumber81 = new org.joda.time.format.DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType78, (int) (short) 100, true); org.joda.time.Chronology chronology83 = null; java.util.Locale locale84 = null; org.joda.time.format.DateTimeParserBucket dateTimeParserBucket85 = new org.joda.time.format.DateTimeParserBucket((long) '#', chronology83, locale84); int int88 = unpaddedNumber81.parseInto(dateTimeParserBucket85, "2021-07-09T17:49:08.298-07:00", 10862); java.util.Locale locale89 = dateTimeParserBucket85.getLocale(); java.lang.String str90 = skipDateTimeField53.getAsShortText(0, locale89); try { long long91 = offsetDateTimeField7.set((long) 10863, "2021-07-09T17:49:30.634-07:00", locale89); } catch (org.joda.time.IllegalFieldValueException e) { } }
Code: public int parseInto(ReadWritableInstant instant, String text, int position) { DateTimeParser parser = requireParser(); if (instant == null) { throw new IllegalArgumentException("Instant must not be null"); } long instantMillis = instant.getMillis(); Chronology chrono = instant.getChronology(); long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis); chrono = selectChronology(chrono); int defaultYear = chrono.year().get(instantLocal); DateTimeParserBucket bucket = new DateTimeParserBucket( instantLocal, chrono, iLocale, iPivotYear, defaultYear); int newPos = parser.parseInto(bucket, text, position); instant.setMillis(bucket.computeMillis(false, text)); if (iOffsetParsed && bucket.getOffsetInteger() != null) { int parsedOffset = bucket.getOffsetInteger(); DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset); chrono = chrono.withZone(parsedZone); } else if (bucket.getZone() != null) { chrono = chrono.withZone(bucket.getZone()); } instant.setChronology(chrono); if (iZone != null) { instant.setZone(iZone); } return newPos; }
tensor([[0.0073, 0.0044, 0.0100,  ..., 0.0082, 0.0265, 0.0034],
        [0.0049, 0.0034, 0.0085,  ..., 0.0079, 0.0263, 0.0025],
        [0.0062, 0.0037, 0.0086,  ..., 0.0088, 0.0302, 0.0028],
        ...,
        [0.0048, 0.0027, 0.0092,  ..., 0.0068, 0.0312, 0.0028],
        [0.0056, 0.0029, 0.0073,  ..., 0.0071, 0.0302, 0.0018],
        [0.0053, 0.0040, 0.0100,  ..., 0.0118, 0.0199, 0.0030]])