69002
Test: public void test07() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test07"); org.jsoup.select.Evaluator.AttributeWithValueNot attributeWithValueNot2 = new org.jsoup.select.Evaluator.AttributeWithValueNot("hi!", "hi!"); org.jsoup.nodes.Document document4 = new org.jsoup.nodes.Document(""); java.util.List<org.jsoup.nodes.Node> nodeList5 = document4.childNodes(); org.jsoup.nodes.Node node6 = document4.clone(); org.jsoup.nodes.Element element8 = document4.append(""); org.jsoup.nodes.Document document9 = document4.clone(); org.jsoup.nodes.Node node10 = document9.clone(); org.jsoup.nodes.Document document12 = new org.jsoup.nodes.Document(""); java.util.List<org.jsoup.nodes.Node> nodeList13 = document12.childNodes(); org.jsoup.nodes.Node node14 = document12.clone(); org.jsoup.nodes.Element element16 = document12.append(""); org.jsoup.nodes.Document document17 = document12.clone(); boolean boolean18 = attributeWithValueNot2.matches((org.jsoup.nodes.Element) document9, (org.jsoup.nodes.Element) document17); org.jsoup.select.Evaluator.AttributeWithValueNot attributeWithValueNot21 = new org.jsoup.select.Evaluator.AttributeWithValueNot("hi!", "hi!"); org.jsoup.nodes.Document document23 = new org.jsoup.nodes.Document(""); java.util.List<org.jsoup.nodes.Node> nodeList24 = document23.childNodes(); org.jsoup.nodes.Node node25 = document23.clone(); org.jsoup.nodes.Element element27 = document23.append(""); org.jsoup.nodes.Document document28 = document23.clone(); org.jsoup.nodes.Node node29 = document28.clone(); org.jsoup.nodes.Document document31 = new org.jsoup.nodes.Document(""); java.util.List<org.jsoup.nodes.Node> nodeList32 = document31.childNodes(); org.jsoup.nodes.Node node33 = document31.clone(); org.jsoup.nodes.Element element35 = document31.append(""); org.jsoup.nodes.Document document36 = document31.clone(); boolean boolean37 = attributeWithValueNot21.matches((org.jsoup.nodes.Element) document28, (org.jsoup.nodes.Element) document36); org.jsoup.nodes.Document document39 = new org.jsoup.nodes.Document(""); java.util.List<org.jsoup.nodes.Node> nodeList40 = document39.childNodes(); org.jsoup.nodes.Document document42 = new org.jsoup.nodes.Document(""); java.lang.String str43 = document42.outerHtml(); java.lang.String str44 = document42.className(); java.lang.String str45 = document42.toString(); org.jsoup.nodes.Document document47 = new org.jsoup.nodes.Document(""); java.lang.String str48 = document47.outerHtml(); java.lang.String str49 = document47.className(); org.jsoup.nodes.Document document51 = new org.jsoup.nodes.Document(""); java.lang.String str52 = document51.outerHtml(); java.lang.String str53 = document51.className(); java.lang.String str54 = document51.toString(); org.jsoup.nodes.Document document56 = new org.jsoup.nodes.Document(""); java.lang.String str57 = document56.outerHtml(); java.lang.String str58 = document56.className(); org.jsoup.nodes.Element[] elementArray59 = new org.jsoup.nodes.Element[] { document39, document42, document47, document51, document56 }; java.util.ArrayList<org.jsoup.nodes.Element> elementList60 = new java.util.ArrayList<org.jsoup.nodes.Element>(); boolean boolean61 = java.util.Collections.addAll((java.util.Collection<org.jsoup.nodes.Element>) elementList60, elementArray59); org.jsoup.nodes.Document document63 = new org.jsoup.nodes.Document(""); java.lang.String str64 = document63.outerHtml(); org.jsoup.nodes.Document document66 = new org.jsoup.nodes.Document(""); org.jsoup.nodes.Element[] elementArray67 = new org.jsoup.nodes.Element[] { document63, document66 }; java.util.ArrayList<org.jsoup.nodes.Element> elementList68 = new java.util.ArrayList<org.jsoup.nodes.Element>(); boolean boolean69 = java.util.Collections.addAll((java.util.Collection<org.jsoup.nodes.Element>) elementList68, elementArray67); org.jsoup.select.Elements elements70 = org.jsoup.select.Selector.filterOut((java.util.Collection<org.jsoup.nodes.Element>) elementList60, (java.util.Collection<org.jsoup.nodes.Element>) elementList68); org.jsoup.nodes.Document document73 = new org.jsoup.nodes.Document(""); org.jsoup.nodes.Element element74 = document73.body(); org.jsoup.nodes.Element element75 = elements70.set(0, (org.jsoup.nodes.Element) document73); boolean boolean76 = attributeWithValueNot2.matches((org.jsoup.nodes.Element) document28, element75); org.jsoup.select.StructuralEvaluator.Root root77 = new org.jsoup.select.StructuralEvaluator.Root(); org.jsoup.select.Evaluator[] evaluatorArray78 = new org.jsoup.select.Evaluator[] { attributeWithValueNot2, root77 }; java.util.ArrayList<org.jsoup.select.Evaluator> evaluatorList79 = new java.util.ArrayList<org.jsoup.select.Evaluator>(); boolean boolean80 = java.util.Collections.addAll((java.util.Collection<org.jsoup.select.Evaluator>) evaluatorList79, evaluatorArray78); org.jsoup.select.CombiningEvaluator.Or or81 = new org.jsoup.select.CombiningEvaluator.Or((java.util.Collection<org.jsoup.select.Evaluator>) evaluatorList79); org.jsoup.select.CombiningEvaluator.And and82 = new org.jsoup.select.CombiningEvaluator.And((java.util.Collection<org.jsoup.select.Evaluator>) evaluatorList79); org.jsoup.select.CombiningEvaluator.Or or83 = new org.jsoup.select.CombiningEvaluator.Or((java.util.Collection<org.jsoup.select.Evaluator>) evaluatorList79); }
Code: public String toString() { return StringUtil.join(evaluators, " "); }
[[0.0927415  0.1171494  0.1134551  0.13724016 0.10374285 0.1736186
 0.13823357 0.08133321 0.04248562]
[0.09518388 0.10752973 0.12142335 0.15499134 0.09789962 0.1680176
 0.12726161 0.08927318 0.03841973]
[0.06731051 0.15496586 0.09976194 0.13457195 0.10217641 0.2110568
 0.12808318 0.06741162 0.03466171]
[0.09351005 0.13058874 0.09075564 0.15908684 0.10647498 0.1540969
 0.12638897 0.08439926 0.05469859]
[0.06597707 0.13426262 0.0826164  0.13995257 0.09390669 0.21118149
 0.16027144 0.07403429 0.03779741]
[0.08791929 0.11411305 0.11678458 0.16878727 0.11978988 0.16663477
 0.12048677 0.07133368 0.03415072]
[0.06738614 0.15140839 0.10780735 0.16847633 0.09492744 0.18729529
 0.10966124 0.0873227  0.02571515]
[0.08959219 0.12622456 0.08786358 0.14500025 0.08593108 0.22014791
 0.13758884 0.07482563 0.03282604]
[0.06148394 0.11256912 0.11960421 0.1645166  0.13616371 0.17040193
 0.14293498 0.05723599 0.03508953]]