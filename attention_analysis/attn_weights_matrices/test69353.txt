69353
Test: public void test51() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test51"); org.jsoup.select.Evaluator.IndexEquals indexEquals1 = new org.jsoup.select.Evaluator.IndexEquals(0); java.lang.String str2 = indexEquals1.toString(); org.jsoup.safety.Whitelist whitelist4 = org.jsoup.safety.Whitelist.simpleText(); boolean boolean5 = org.jsoup.Jsoup.isValid("hi!", whitelist4); org.jsoup.safety.Cleaner cleaner6 = new org.jsoup.safety.Cleaner(whitelist4); org.jsoup.nodes.Document document9 = org.jsoup.Jsoup.parse("", "hi!"); org.jsoup.nodes.Element element10 = document9.parent(); java.lang.String str11 = document9.nodeName(); org.jsoup.nodes.Element element12 = document9.clone(); org.jsoup.nodes.Document document15 = org.jsoup.Jsoup.parse("", "hi!"); org.jsoup.nodes.Element element16 = document15.parent(); java.lang.String str17 = document15.nodeName(); org.jsoup.nodes.Element element18 = document15.body(); org.jsoup.nodes.Element element19 = element12.appendChild((org.jsoup.nodes.Node) document15); org.jsoup.nodes.Node node20 = element19.clone(); org.jsoup.nodes.Document document21 = node20.ownerDocument(); org.jsoup.nodes.Document document22 = cleaner6.clean(document21); org.jsoup.select.Evaluator.Class class24 = new org.jsoup.select.Evaluator.Class("#root"); org.jsoup.nodes.Document document27 = org.jsoup.Jsoup.parse("", "hi!"); java.util.List<org.jsoup.nodes.TextNode> textNodeList28 = document27.textNodes(); org.jsoup.nodes.Document document31 = org.jsoup.Jsoup.parseBodyFragment("#document", ""); org.jsoup.nodes.Document document32 = document31.ownerDocument(); java.lang.String str33 = document32.val(); boolean boolean34 = class24.matches((org.jsoup.nodes.Element) document27, (org.jsoup.nodes.Element) document32); boolean boolean35 = cleaner6.isValid(document27); java.util.List<org.jsoup.nodes.TextNode> textNodeList36 = document27.textNodes(); org.jsoup.select.Elements elements38 = document27.getElementsByAttributeStarting(" "); org.jsoup.nodes.Document document41 = org.jsoup.Jsoup.parse("", "hi!"); org.jsoup.nodes.Element element42 = document41.parent(); java.lang.String str43 = document41.nodeName(); org.jsoup.nodes.Document document44 = document41.normalise(); java.util.List<org.jsoup.nodes.Node> nodeList45 = document44.childNodes(); org.jsoup.nodes.Document document47 = org.jsoup.Jsoup.parse("#document"); org.jsoup.nodes.Element element48 = document44.appendChild((org.jsoup.nodes.Node) document47); org.jsoup.nodes.Document document51 = org.jsoup.Jsoup.parseBodyFragment("#document", ""); org.jsoup.nodes.Document document52 = document51.ownerDocument(); org.jsoup.nodes.Node node53 = document47.after((org.jsoup.nodes.Node) document51); org.jsoup.select.Elements elements56 = document51.getElementsByAttributeValueNot("<html>\n <head></head>\n <body>\n #document\n </body>\n</html>", "[hi!^=hi!]"); boolean boolean57 = indexEquals1.matches((org.jsoup.nodes.Element) document27, (org.jsoup.nodes.Element) document51); java.lang.String str58 = indexEquals1.toString(); org.jsoup.select.Evaluator.Attribute attribute60 = new org.jsoup.select.Evaluator.Attribute("#text"); org.jsoup.nodes.Document document63 = org.jsoup.parser.Parser.parseBodyFragment("", "hi!"); org.jsoup.nodes.Document document66 = org.jsoup.Jsoup.parseBodyFragment("#document", ""); document66.setBaseUri("#root"); org.jsoup.nodes.Element element70 = document66.append("hi!"); boolean boolean71 = attribute60.matches((org.jsoup.nodes.Element) document63, (org.jsoup.nodes.Element) document66); org.jsoup.select.Elements elements74 = document63.getElementsByAttributeValueStarting(" #document=\"hi!\"", ":eq(0)"); org.jsoup.nodes.Document document77 = org.jsoup.Jsoup.parseBodyFragment("<#root #root=\"&lt;html&gt;\n &lt;head&gt;&lt;/head&gt;\n &lt;body&gt;&lt;/body&gt;\n&lt;/html&gt;\">\n [hi!$=#document]\n</#root>\n<html>\n <head></head>\n <body></body>\n</html>\n<#root>\n <html>\n <head></head>\n <body></body>\n </html>\n</#root>", "<html>\n <head>\n <title>#text</title>\n </head>\n <body>\n #document\n </body>\n</html>"); boolean boolean78 = indexEquals1.matches((org.jsoup.nodes.Element) document63, (org.jsoup.nodes.Element) document77); }
Code: public Document clean(Document dirtyDocument) { Validate.notNull(dirtyDocument); Document clean = Document.createShell(dirtyDocument.baseUri()); if (dirtyDocument.body() != null) copySafeNodes(dirtyDocument.body(), clean.body()); return clean; }
tensor([[0.0371, 0.1352, 0.0373, 0.0373, 0.0579, 0.0584, 0.1352, 0.0995, 0.0239,
         0.0732, 0.1009, 0.0311, 0.0213, 0.0188, 0.0237, 0.0202, 0.0419, 0.0295,
         0.0177],
        [0.0348, 0.1441, 0.0312, 0.0390, 0.0740, 0.0568, 0.1441, 0.0983, 0.0202,
         0.0623, 0.1219, 0.0231, 0.0198, 0.0156, 0.0170, 0.0168, 0.0421, 0.0257,
         0.0134],
        [0.0315, 0.1481, 0.0390, 0.0409, 0.0482, 0.0632, 0.1481, 0.0884, 0.0218,
         0.0697, 0.1115, 0.0285, 0.0174, 0.0131, 0.0202, 0.0192, 0.0463, 0.0316,
         0.0134],
        [0.0349, 0.1185, 0.0398, 0.0453, 0.0650, 0.0628, 0.1185, 0.0648, 0.0330,
         0.0733, 0.1127, 0.0301, 0.0238, 0.0260, 0.0239, 0.0257, 0.0535, 0.0277,
         0.0207],
        [0.0416, 0.1215, 0.0466, 0.0356, 0.0715, 0.0560, 0.1215, 0.0921, 0.0348,
         0.0639, 0.0710, 0.0297, 0.0303, 0.0260, 0.0252, 0.0267, 0.0472, 0.0345,
         0.0245],
        [0.0324, 0.1312, 0.0398, 0.0430, 0.0647, 0.0642, 0.1312, 0.0782, 0.0208,
         0.0665, 0.1109, 0.0284, 0.0232, 0.0236, 0.0223, 0.0247, 0.0461, 0.0311,
         0.0176],
        [0.0348, 0.1441, 0.0312, 0.0390, 0.0740, 0.0568, 0.1441, 0.0983, 0.0202,
         0.0623, 0.1219, 0.0231, 0.0198, 0.0156, 0.0170, 0.0168, 0.0421, 0.0257,
         0.0134],
        [0.0386, 0.1345, 0.0397, 0.0450, 0.0671, 0.0553, 0.1345, 0.0973, 0.0242,
         0.0649, 0.0968, 0.0236, 0.0213, 0.0211, 0.0298, 0.0243, 0.0385, 0.0243,
         0.0193],
        [0.0454, 0.1045, 0.0381, 0.0401, 0.0531, 0.0607, 0.1045, 0.0943, 0.0382,
         0.0573, 0.1009, 0.0300, 0.0384, 0.0286, 0.0308, 0.0316, 0.0502, 0.0306,
         0.0227],
        [0.0235, 0.1503, 0.0294, 0.0472, 0.0668, 0.0573, 0.1503, 0.0878, 0.0279,
         0.0716, 0.1142, 0.0289, 0.0142, 0.0132, 0.0205, 0.0164, 0.0473, 0.0205,
         0.0125],
        [0.0243, 0.1694, 0.0320, 0.0387, 0.0607, 0.0542, 0.1694, 0.0943, 0.0198,
         0.0702, 0.1406, 0.0187, 0.0104, 0.0091, 0.0112, 0.0142, 0.0326, 0.0211,
         0.0089],
        [0.0300, 0.1273, 0.0471, 0.0342, 0.0515, 0.0664, 0.1273, 0.0769, 0.0242,
         0.0904, 0.1238, 0.0242, 0.0271, 0.0152, 0.0204, 0.0215, 0.0480, 0.0294,
         0.0151],
        [0.0272, 0.1466, 0.0287, 0.0602, 0.0752, 0.0545, 0.1466, 0.0857, 0.0235,
         0.0707, 0.1157, 0.0252, 0.0126, 0.0139, 0.0193, 0.0165, 0.0393, 0.0259,
         0.0126],
        [0.0313, 0.1244, 0.0371, 0.0385, 0.0742, 0.0615, 0.1244, 0.0933, 0.0205,
         0.0731, 0.1413, 0.0285, 0.0175, 0.0190, 0.0194, 0.0219, 0.0382, 0.0245,
         0.0112],
        [0.0290, 0.1512, 0.0331, 0.0386, 0.0743, 0.0500, 0.1512, 0.0897, 0.0192,
         0.0661, 0.1192, 0.0260, 0.0138, 0.0119, 0.0196, 0.0163, 0.0473, 0.0328,
         0.0107],
        [0.0344, 0.1352, 0.0449, 0.0311, 0.0694, 0.0669, 0.1352, 0.0829, 0.0232,
         0.0628, 0.1171, 0.0375, 0.0167, 0.0172, 0.0213, 0.0223, 0.0432, 0.0218,
         0.0167],
        [0.0270, 0.1481, 0.0360, 0.0333, 0.0572, 0.0646, 0.1481, 0.1074, 0.0266,
         0.0735, 0.1083, 0.0219, 0.0172, 0.0155, 0.0172, 0.0221, 0.0384, 0.0221,
         0.0155],
        [0.0290, 0.1398, 0.0362, 0.0308, 0.0661, 0.0675, 0.1398, 0.0862, 0.0285,
         0.0651, 0.1223, 0.0284, 0.0162, 0.0150, 0.0177, 0.0186, 0.0531, 0.0249,
         0.0148],
        [0.0287, 0.1283, 0.0359, 0.0422, 0.0748, 0.0515, 0.1283, 0.0832, 0.0261,
         0.0720, 0.1110, 0.0374, 0.0211, 0.0180, 0.0190, 0.0161, 0.0630, 0.0275,
         0.0160]])