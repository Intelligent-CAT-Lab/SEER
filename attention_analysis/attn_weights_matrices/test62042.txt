62042
Test: public void test0980() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0980"); org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.TDF; org.apache.commons.csv.CSVFormat cSVFormat2 = cSVFormat0.withNullString("hi!"); cSVFormat2.validate(); org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat2.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat2.withCommentStart('\037'); java.lang.String str8 = cSVFormat2.toString(); org.apache.commons.csv.CSVFormat cSVFormat10 = cSVFormat2.withIgnoreEmptyLines(true); org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat10.withRecordSeparator(' '); java.lang.Character char13 = cSVFormat10.getCommentStart(); org.apache.commons.csv.CSVFormat cSVFormat15 = cSVFormat10.withCommentStart('\t'); org.apache.commons.csv.CSVFormat cSVFormat16 = org.apache.commons.csv.CSVFormat.RFC4180; org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat16.withQuoteChar((java.lang.Character) ','); boolean boolean19 = cSVFormat16.isNullHandling(); org.apache.commons.csv.CSVFormat cSVFormat20 = org.apache.commons.csv.CSVFormat.DEFAULT; org.apache.commons.csv.CSVFormat cSVFormat21 = org.apache.commons.csv.CSVFormat.TDF; cSVFormat21.validate(); org.apache.commons.csv.CSVFormat cSVFormat24 = cSVFormat21.withIgnoreEmptyLines(true); java.lang.String[] strArray27 = new java.lang.String[] { "hi!", "a\t0" }; org.apache.commons.csv.CSVFormat cSVFormat28 = cSVFormat21.withHeader(strArray27); org.apache.commons.csv.CSVFormat cSVFormat29 = cSVFormat20.withHeader(strArray27); java.lang.String str30 = cSVFormat16.format((java.lang.Object[]) strArray27); org.apache.commons.csv.CSVFormat cSVFormat31 = cSVFormat10.withHeader(strArray27); java.lang.Character char32 = cSVFormat10.getCommentStart(); }
Code: public String toString() { final StringBuilder sb = new StringBuilder(); sb.append("Delimiter=<").append(delimiter).append('>'); if (isEscaping()) { sb.append(' '); sb.append("Escape=<").append(escape).append('>'); } if (isQuoting()) { sb.append(' '); sb.append("QuoteChar=<").append(quoteChar).append('>'); } if (isCommentingEnabled()) { sb.append(' '); sb.append("CommentStart=<").append(commentStart).append('>'); } if (isNullHandling()) { sb.append(' '); sb.append("NullString=<").append(nullString).append('>'); } if(true) { sb.append(' '); sb.append("RecordSeparator=<").append(recordSeparator).append('>'); } if (true) { sb.append(" EmptyLines:ignored"); } if (getIgnoreSurroundingSpaces()) { ; } sb.append(" SkipHeaderRecord:").append(skipHeaderRecord); if (true) { ; sb.append("Header:").append(Arrays.toString(header)); } return sb.toString(); }
tensor([[0.0079, 0.0096, 0.0081,  ..., 0.0091, 0.0297, 0.0042],
        [0.0076, 0.0082, 0.0079,  ..., 0.0081, 0.0378, 0.0035],
        [0.0051, 0.0078, 0.0040,  ..., 0.0079, 0.0371, 0.0033],
        ...,
        [0.0051, 0.0073, 0.0038,  ..., 0.0068, 0.0398, 0.0035],
        [0.0055, 0.0089, 0.0056,  ..., 0.0094, 0.0341, 0.0034],
        [0.0052, 0.0094, 0.0088,  ..., 0.0124, 0.0336, 0.0035]])