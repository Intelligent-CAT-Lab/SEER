66580
Test: public void testComplexObject() throws Exception { FixtureObject aTestObj = new FixtureObject(); ObjectMapper aMapper = new ObjectMapper(); StringWriter aWriter = new StringWriter(); JsonGenerator aGen = new JsonFactory().createGenerator(aWriter); aMapper.writeValue(aGen, aTestObj); aGen.close(); JsonParser jp = new JsonFactory().createParser(new StringReader(aWriter.toString())); while (jp.nextToken() != JsonToken.END_OBJECT) { String name = jp.getCurrentName(); JsonToken t = jp.nextToken(); if (name.equals("uri") || name.equals("url")) { } else if (name.equals("testNull")) { } else if (name.equals("testString")) { } else if (name.equals("testBoolean")) { } else if (name.equals("testEnum")) { } else if (name.equals("testInteger")) { } else if (name.equals("testLong")) { } else if (name.equals("testBigInteger")) { } else if (name.equals("testBigDecimal")) { } else if (name.equals("testCharacter")) { } else if (name.equals("testShort")) { } else if (name.equals("testByte")) { } else if (name.equals("testFloat")) { } else if (name.equals("testDouble")) { } else if (name.equals("testStringBuffer")) { } else if (name.equals("testError")) { while (jp.nextToken() == JsonToken.FIELD_NAME) { name = jp.getCurrentName(); if (name.equals("cause")) { } else if (name.equals("message")) { } else if (name.equals("localizedMessage")) { } else if (name.equals("stackTrace")) { int i = 0; while(jp.nextToken() != JsonToken.END_ARRAY) { if(i >= 100000) { } } } else if (name.equals("suppressed")) { } else { fail("Unexpected field name '"+name+"'"); } } } else { fail("Unexpected field, name '"+name+"'"); } } jp.close(); }
Code: public String toString() { return _raw.getName()+"<>"; }
tensor([[0.1383, 0.1778, 0.1824, 0.1830, 0.1521, 0.1077, 0.0586],
        [0.1403, 0.1631, 0.1982, 0.2015, 0.1411, 0.1042, 0.0515],
        [0.0993, 0.2510, 0.1675, 0.1802, 0.1497, 0.1049, 0.0473],
        [0.1341, 0.1998, 0.1415, 0.2082, 0.1552, 0.0866, 0.0746],
        [0.1062, 0.2389, 0.1522, 0.2053, 0.1546, 0.0865, 0.0564],
        [0.1271, 0.2111, 0.1953, 0.1775, 0.1285, 0.0950, 0.0654],
        [0.0931, 0.1707, 0.1936, 0.2142, 0.1961, 0.0851, 0.0473]])