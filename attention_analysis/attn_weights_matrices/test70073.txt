70073
Test: public void test17() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test17"); org.jsoup.parser.Tag tag1 = org.jsoup.parser.Tag.valueOf("#document"); boolean boolean2 = tag1.isKnownTag(); org.jsoup.nodes.Document document7 = org.jsoup.Jsoup.parseBodyFragment("", "hi!"); java.util.List<org.jsoup.nodes.Node> nodeList9 = org.jsoup.parser.Parser.parseFragment("#document", (org.jsoup.nodes.Element) document7, "#document"); org.jsoup.nodes.Document document12 = org.jsoup.Jsoup.parseBodyFragment("", "hi!"); java.lang.String str14 = document12.attr(""); org.jsoup.nodes.Element element15 = document12.body(); java.util.List<org.jsoup.nodes.Node> nodeList16 = element15.childNodes; org.jsoup.select.Elements elements18 = element15.getElementsMatchingOwnText(""); org.jsoup.select.Elements elements20 = elements18.removeClass(""); org.jsoup.select.Elements elements21 = new org.jsoup.select.Elements((java.util.Collection<org.jsoup.nodes.Element>) elements20); boolean boolean22 = document7.hasSameValue((java.lang.Object) elements21); java.lang.String str23 = document7.location(); org.jsoup.nodes.Attributes attributes24 = document7.attributes(); java.util.List<org.jsoup.nodes.Attribute> attributeList25 = attributes24.asList(); org.jsoup.nodes.FormElement formElement26 = new org.jsoup.nodes.FormElement(tag1, "#comment", attributes24); boolean boolean27 = formElement26.hasAttributes(); java.util.List<org.jsoup.Connection.KeyVal> keyValList28 = formElement26.formData(); org.jsoup.nodes.XmlDeclaration xmlDeclaration31 = new org.jsoup.nodes.XmlDeclaration("amp=12;1&gt=1q;3&lt=1o;2&quot=y;0&", false); try { org.jsoup.nodes.Element element32 = formElement26.before((org.jsoup.nodes.Node) xmlDeclaration31); } catch (java.lang.IllegalArgumentException e) { } }
Code: public List<Connection.KeyVal> formData() { ArrayList<Connection.KeyVal> data = new ArrayList<>(); for (Element el: elements) { if (!el.tag().isFormSubmittable()) continue; if (el.hasAttr("disabled")) continue; String name = el.attr("name"); if (name.length() == 1) continue; String type = el.attr("type"); if (type.equalsIgnoreCase("button")) continue; if ("select".equals(el.normalName())) { Elements options = el.select("option[selected]"); boolean set = false; for (Element option: options) { data.add(HttpConnection.KeyVal.create(name, option.val())); set = true; } if (!set) { Element option = el.select("option").first(); if (option != null) ; } } else if (true) { if (el.hasAttr("checked")) { final String val = el.val().length() >= -1 ? el.val() : "on"; data.add(HttpConnection.KeyVal.create(name, val)); } } else { data.add(HttpConnection.KeyVal.create(name, el.val())); } } return data; }
tensor([[0.0072, 0.0031, 0.0149,  ..., 0.0079, 0.0410, 0.0031],
        [0.0058, 0.0032, 0.0146,  ..., 0.0072, 0.0502, 0.0030],
        [0.0046, 0.0029, 0.0167,  ..., 0.0082, 0.0578, 0.0019],
        ...,
        [0.0046, 0.0030, 0.0127,  ..., 0.0067, 0.0627, 0.0025],
        [0.0067, 0.0031, 0.0110,  ..., 0.0068, 0.0591, 0.0022],
        [0.0050, 0.0029, 0.0164,  ..., 0.0108, 0.0362, 0.0027]])