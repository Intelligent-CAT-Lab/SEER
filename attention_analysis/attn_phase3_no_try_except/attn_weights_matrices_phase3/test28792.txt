28792
Test: public void test50() throws Throwable { Vector2D.Unit vector2D_Unit0 = Vector2D.Unit.PLUS_X; Vector2D[] vector2DArray0 = new Vector2D[0]; Bounds2D bounds2D0 = Bounds2D.from((Vector2D) vector2D_Unit0, vector2DArray0); Precision.DoubleEquivalence precision_DoubleEquivalence0 = mock(Precision.DoubleEquivalence.class, new ViolatedAssumptionAnswer()); doReturn(true).when(precision_DoubleEquivalence0).eqZero(anyDouble()); boolean boolean0 = bounds2D0.hasSize(precision_DoubleEquivalence0); }
Code: public boolean hasSize(final Precision.DoubleEquivalence precision) { final Vector2D diag = getDiagonal(); return !precision.eqZero(diag.getX()) && !precision.eqZero(diag.getY()); }
[[0.05226531 0.12742113 0.07250832 0.07250832 0.07250832 0.07260809
 0.0423362  0.0671859  0.05538977 0.03307275 0.07250832 0.05788043
 0.07250832 0.0338832  0.07250832 0.0229072 ]
[0.03715265 0.18503739 0.07045061 0.07045061 0.07045061 0.0980078
 0.03641957 0.04244573 0.04226429 0.0291488  0.07045061 0.06285161
 0.07045061 0.02584982 0.07045061 0.01811871]
[0.04232133 0.1500834  0.06927365 0.06927365 0.06927365 0.07462484
 0.04302483 0.06723253 0.05258707 0.04708887 0.06927365 0.0515651
 0.06927365 0.03101014 0.06927365 0.02481998]
[0.04232133 0.1500834  0.06927365 0.06927365 0.06927365 0.07462484
 0.04302483 0.06723253 0.05258707 0.04708887 0.06927365 0.0515651
 0.06927365 0.03101014 0.06927365 0.02481998]
[0.04232133 0.1500834  0.06927365 0.06927365 0.06927365 0.07462484
 0.04302483 0.06723253 0.05258707 0.04708887 0.06927365 0.0515651
 0.06927365 0.03101014 0.06927365 0.02481998]
[0.05289959 0.10843508 0.06628455 0.06628455 0.06628455 0.09181456
 0.05220901 0.05964211 0.05439723 0.04434538 0.06628455 0.05999647
 0.06628455 0.04725883 0.06628455 0.03129443]
[0.04903806 0.13178055 0.07185788 0.07185788 0.07185788 0.08896002
 0.03335713 0.05417622 0.04692354 0.03785433 0.07185788 0.07147409
 0.07185788 0.03805427 0.07185788 0.01723458]
[0.05168127 0.18003762 0.0654636  0.0654636  0.0654636  0.09366357
 0.03874458 0.0534801  0.04346915 0.03167789 0.0654636  0.05438716
 0.0654636  0.03773652 0.0654636  0.02234059]
[0.04711235 0.15565169 0.06877768 0.06877768 0.06877768 0.09535673
 0.05085254 0.04462115 0.05162213 0.03225182 0.06877768 0.05542976
 0.06877768 0.0341927  0.06877768 0.02024304]
[0.05202783 0.1034707  0.07350869 0.07350869 0.07350869 0.0616703
 0.04392723 0.0620295  0.06314688 0.04397434 0.07350869 0.0576589
 0.07350869 0.04484164 0.07350869 0.02620055]
[0.04232133 0.1500834  0.06927365 0.06927365 0.06927365 0.07462484
 0.04302483 0.06723253 0.05258707 0.04708887 0.06927365 0.0515651
 0.06927365 0.03101014 0.06927365 0.02481998]
[0.03701825 0.17905113 0.07167752 0.07167752 0.07167752 0.07670807
 0.03458227 0.0553082  0.05047083 0.03645547 0.07167752 0.05300058
 0.07167752 0.02653832 0.07167752 0.02080172]
[0.04232133 0.1500834  0.06927365 0.06927365 0.06927365 0.07462484
 0.04302483 0.06723253 0.05258707 0.04708887 0.06927365 0.0515651
 0.06927365 0.03101014 0.06927365 0.02481998]
[0.03968492 0.18431377 0.0717053  0.0717053  0.0717053  0.08497618
 0.03402458 0.04383458 0.04382676 0.03381612 0.0717053  0.05076619
 0.0717053  0.0276446  0.0717053  0.02688042]
[0.04232133 0.1500834  0.06927365 0.06927365 0.06927365 0.07462484
 0.04302483 0.06723253 0.05258707 0.04708887 0.06927365 0.0515651
 0.06927365 0.03101014 0.06927365 0.02481998]
[0.03763756 0.12123259 0.0675709  0.0675709  0.0675709  0.11298854
 0.03527569 0.05446395 0.05254465 0.03580032 0.0675709  0.08690251
 0.0675709  0.03419807 0.0675709  0.02353074]]