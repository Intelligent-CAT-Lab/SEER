67473
Test: public void testCustomEnumValueAndKeyViaModifier() throws IOException { SimpleModule module = new SimpleModule(); module.setDeserializerModifier(new BeanDeserializerModifier() { @Override public JsonDeserializer<Enum> modifyEnumDeserializer(DeserializationConfig config, final JavaType type, BeanDescription beanDesc, final JsonDeserializer<?> deserializer) { return new JsonDeserializer<Enum>() { @Override public Enum deserialize(JsonParser p, DeserializationContext ctxt) throws IOException { Class<? extends Enum> rawClass = (Class<Enum<?>>) type.getRawClass(); final String str = p.getValueAsString().toLowerCase(); return KeyEnum.valueOf(rawClass, str); } }; } @Override public KeyDeserializer modifyKeyDeserializer(DeserializationConfig config, final JavaType type, KeyDeserializer deserializer) { if (!type.isEnumType()) { return deserializer; } return new KeyDeserializer() { @Override public Object deserializeKey(String key, DeserializationContext ctxt) throws IOException { Class<? extends Enum> rawClass = (Class<Enum<?>>) type.getRawClass(); return Enum.valueOf(rawClass, key.toLowerCase()); } }; } }); ObjectMapper mapper = new ObjectMapper() .registerModule(module); KeyEnum key = mapper.readValue(quote(KeyEnum.replacements.name().toUpperCase()), KeyEnum.class); EnumMap<KeyEnum,String> map = mapper.readValue( aposToQuotes("{'REPlaceMENTS':'foobar'}"), new TypeReference<EnumMap<KeyEnum,String>>() { }); }
Code: public T deserialize(JsonParser p, DeserializationContext ctxt){String text = p.getValueAsString();if (text != null) { if (text.length() == 0 || (text = text.trim()).length() == 0) {return _deserializeFromEmptyString();}Exception cause = null;try {if (_deserialize(text, ctxt) != null) {return _deserialize(text, ctxt);}} catch (IllegalArgumentException iae) {cause = iae;} catch (MalformedURLException me) {cause = me;}String msg = "not a valid textual representation";if (cause != null) {String m2 = cause.getMessage();if (m2 != null) {msg = msg + ", problem: "+m2;}}JsonMappingException e = ctxt.weirdStringException(text, _valueClass, msg);if (cause != null) {;}throw e;}JsonToken t = p.getCurrentToken();if (t == JsonToken.START_ARRAY) {return _deserializeFromArray(p, ctxt);}if (t == JsonToken.VALUE_EMBEDDED_OBJECT) {Object ob = p.getEmbeddedObject();if (ob == null) {return null;}if (_valueClass.isAssignableFrom(ob.getClass())) {return (T) ob;}return _deserializeEmbedded(ob, ctxt);}return (T) ctxt.handleUnexpectedToken(_valueClass, p);}
tensor([[0.0061, 0.0039, 0.0105,  ..., 0.0064, 0.0088, 0.0102],
        [0.0056, 0.0032, 0.0137,  ..., 0.0064, 0.0081, 0.0077],
        [0.0042, 0.0023, 0.0113,  ..., 0.0040, 0.0088, 0.0069],
        ...,
        [0.0063, 0.0032, 0.0098,  ..., 0.0060, 0.0086, 0.0094],
        [0.0059, 0.0031, 0.0126,  ..., 0.0071, 0.0106, 0.0089],
        [0.0045, 0.0026, 0.0136,  ..., 0.0063, 0.0088, 0.0080]])