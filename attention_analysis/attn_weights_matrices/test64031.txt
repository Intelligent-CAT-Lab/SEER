64031
Test: public void test135() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test135"); com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer bytesToNameCanonicalizer0 = com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer.createRoot(); boolean boolean1 = bytesToNameCanonicalizer0.maybeDirty(); com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler2 = null; com.fasterxml.jackson.core.io.IOContext iOContext5 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler2, (java.lang.Object) 0.0f, true); com.fasterxml.jackson.core.JsonEncoding jsonEncoding6 = com.fasterxml.jackson.core.JsonEncoding.UTF16_BE; java.lang.String str7 = jsonEncoding6.getJavaName(); com.fasterxml.jackson.core.io.IOContext iOContext8 = iOContext5.withEncoding(jsonEncoding6); com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler10 = null; com.fasterxml.jackson.core.io.IOContext iOContext13 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler10, (java.lang.Object) 0.0f, true); com.fasterxml.jackson.core.JsonEncoding jsonEncoding14 = iOContext13.getEncoding(); java.io.InputStream inputStream15 = null; byte[] byteArray16 = com.fasterxml.jackson.core.json.UTF8JsonGenerator.HEX_CHARS; com.fasterxml.jackson.core.io.MergedStream mergedStream19 = new com.fasterxml.jackson.core.io.MergedStream(iOContext13, inputStream15, byteArray16, (int) '4', (-1)); boolean boolean20 = mergedStream19.markSupported(); int int21 = mergedStream19.available(); com.fasterxml.jackson.core.ObjectCodec objectCodec22 = null; com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer byteQuadsCanonicalizer23 = com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer.createRoot(); java.lang.String str24 = byteQuadsCanonicalizer23.toString(); int int25 = byteQuadsCanonicalizer23.totalCount(); int int26 = byteQuadsCanonicalizer23.bucketCount(); byte[] byteArray27 = com.fasterxml.jackson.core.io.CharTypes.copyHexBytes(); com.fasterxml.jackson.core.json.UTF8StreamJsonParser uTF8StreamJsonParser31 = new com.fasterxml.jackson.core.json.UTF8StreamJsonParser(iOContext8, (int) (byte) -17, (java.io.InputStream) mergedStream19, objectCodec22, byteQuadsCanonicalizer23, byteArray27, (-1695542384), 208279835, false); java.lang.String str33 = uTF8StreamJsonParser31.getValueAsString("UTF-8"); int[] intArray34 = com.fasterxml.jackson.core.io.CharTypes.get7BitOutputEscapes(); uTF8StreamJsonParser31._quadBuffer = intArray34; try { int int37 = bytesToNameCanonicalizer0.calcHash(intArray34, 0); } catch (java.lang.IllegalArgumentException e) { } }
Code: public String getValueAsString() throws IOException { if (_currToken == JsonToken.VALUE_STRING) { return getText(); } return getValueAsString(null); }
[[0.04805671 0.06136194 0.06470546 0.11211071 0.0254566  0.06646758
 0.12977807 0.04742786 0.07511889 0.02949692 0.06646758 0.0531834
 0.09250118 0.02099834 0.0531834  0.03268705 0.02099833]
[0.04845751 0.05660232 0.08179383 0.13077226 0.02666877 0.06819775
 0.14102963 0.05048376 0.0625902  0.02453585 0.06819775 0.048585
 0.07930337 0.01752378 0.048585   0.02914932 0.01752378]
[0.04088609 0.06928534 0.08444891 0.11355214 0.03014856 0.07367477
 0.11893934 0.04884087 0.07185245 0.02352059 0.07367477 0.04801579
 0.08965342 0.01823643 0.04801579 0.02901835 0.01823643]
[0.03258398 0.06608865 0.06552537 0.16494612 0.01958761 0.07265169
 0.14541537 0.04063049 0.05183223 0.01673745 0.07265169 0.05216036
 0.09624013 0.01458209 0.05216036 0.02162432 0.01458209]
[0.0383972  0.06746827 0.0499936  0.14915434 0.02057896 0.06378256
 0.15590744 0.042961   0.07558633 0.02058475 0.06378256 0.05439944
 0.0899014  0.01393032 0.05439944 0.02524212 0.01393032]
[0.05047845 0.07598981 0.07830402 0.09008829 0.03325521 0.07725789
 0.08745188 0.04455451 0.05491143 0.03095209 0.07725789 0.05860365
 0.09165383 0.02786315 0.05860365 0.03491113 0.02786315]
[0.03037794 0.07051914 0.05929776 0.1788874  0.01857404 0.061466
 0.17038748 0.03956444 0.06313622 0.01150167 0.061466   0.03986248
 0.11431906 0.00951099 0.03986248 0.02175589 0.00951098]
[0.04440623 0.05659132 0.06622588 0.13827953 0.02340484 0.06710437
 0.14921597 0.04767727 0.05840307 0.02279806 0.06710437 0.05682347
 0.09510246 0.01460719 0.05682347 0.02082526 0.0146072 ]
[0.0277449  0.07792312 0.06441387 0.13144918 0.02025735 0.06700882
 0.15339127 0.04896297 0.06952065 0.01430969 0.06700882 0.0453621
 0.11018944 0.01394229 0.0453621  0.02921121 0.01394229]
[0.03536595 0.0698932  0.05942665 0.12833536 0.02234536 0.06346177
 0.13679475 0.04861195 0.06390309 0.02858108 0.06346177 0.05476611
 0.09668501 0.01749838 0.05476611 0.03860514 0.01749838]
[0.05047845 0.07598981 0.07830402 0.09008829 0.03325521 0.07725789
 0.08745188 0.04455451 0.05491143 0.03095209 0.07725789 0.05860365
 0.09165383 0.02786315 0.05860365 0.03491113 0.02786315]
[0.03330962 0.07433659 0.07154534 0.12496149 0.02576294 0.06491305
 0.13751441 0.0439057  0.06451181 0.02064294 0.06491305 0.04839611
 0.11153677 0.01779992 0.04839611 0.02975425 0.01779992]
[0.03910488 0.08402327 0.06564359 0.14313863 0.01590253 0.07278733
 0.14158913 0.04382303 0.06134844 0.01738248 0.07278733 0.05055313
 0.09855516 0.00796089 0.05055313 0.02688611 0.00796089]
[0.03211053 0.05886243 0.04785141 0.13571736 0.02450212 0.07612461
 0.12251852 0.03766984 0.05510159 0.02739576 0.07612461 0.06828113
 0.11009912 0.01668998 0.06828113 0.02597994 0.01668998]
[0.03330962 0.07433659 0.07154534 0.12496149 0.02576294 0.06491305
 0.13751441 0.0439057  0.06451181 0.02064294 0.06491305 0.04839611
 0.11153677 0.01779992 0.04839611 0.02975425 0.01779992]
[0.03952315 0.06155736 0.07062575 0.11591916 0.02126987 0.07321654
 0.1706073  0.04221206 0.06794795 0.01813395 0.07321654 0.04757869
 0.08971006 0.01256229 0.04757869 0.03577828 0.01256229]
[0.03211053 0.05886244 0.0478514  0.13571735 0.02450213 0.07612463
 0.12251849 0.03766985 0.05510159 0.02739576 0.07612463 0.06828114
 0.11009912 0.01668998 0.06828114 0.02597994 0.01668998]]