63925
Test: public void testTooBigBigDecimal() throws Exception { JsonFactory f = new JsonFactory(); f.enable(JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN); BigDecimal BIG = new BigDecimal("1E+9999"); BigDecimal TOO_BIG = new BigDecimal("1E+10000"); BigDecimal SMALL = new BigDecimal("1E-9999"); BigDecimal TOO_SMALL = new BigDecimal("1E-10000"); for (boolean useBytes : new boolean[] { false, true } ) { for (boolean asString : new boolean[] { false, true } ) { JsonGenerator g; if (useBytes) { g = f.createGenerator(new ByteArrayOutputStream()); } else { g = f.createGenerator(new StringWriter()); } if (asString) { g.enable(JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS); } g.writeStartArray(); g.writeNumber(BIG); g.writeNumber(SMALL); g.writeEndArray(); g.close(); for (BigDecimal input : new BigDecimal[] { TOO_BIG, TOO_SMALL }) { if (useBytes) { g = f.createGenerator(new ByteArrayOutputStream()); } else { g = f.createGenerator(new StringWriter()); } if (asString) { g.enable(JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS); } try { g.writeNumber(input); fail("Should not have written without exception: "+input); } catch (JsonGenerationException e) { verifyException(e, "Attempt to write plain `java.math.BigDecimal`"); verifyException(e, "illegal scale"); } g.close(); } } } }
Code: public void writeNumber(BigDecimal value) throws IOException { _verifyValueWrite(WRITE_NUMBER); if (value == null) { _writeNull(); } else if (_cfgNumbersAsStrings) { String raw = Feature.WRITE_BIGDECIMAL_AS_PLAIN.enabledIn(_features) ? value.toPlainString() : value.toString(); _writeQuotedRaw(raw); } else if (Feature.WRITE_BIGDECIMAL_AS_PLAIN.enabledIn(_features)) { writeRaw(value.toPlainString()); } else { writeRaw(_asString(value)); } }
tensor([[0.0189, 0.0154, 0.0103,  ..., 0.0105, 0.0083, 0.0083],
        [0.0152, 0.0132, 0.0083,  ..., 0.0092, 0.0080, 0.0080],
        [0.0118, 0.0126, 0.0092,  ..., 0.0093, 0.0072, 0.0072],
        ...,
        [0.0141, 0.0135, 0.0090,  ..., 0.0096, 0.0076, 0.0076],
        [0.0133, 0.0121, 0.0084,  ..., 0.0092, 0.0070, 0.0070],
        [0.0133, 0.0121, 0.0084,  ..., 0.0092, 0.0070, 0.0070]])