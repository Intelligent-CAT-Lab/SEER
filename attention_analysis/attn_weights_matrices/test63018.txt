63018
Test: public void test084() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test084"); com.google.gson.DefaultDateTypeAdapter defaultDateTypeAdapter2 = new com.google.gson.DefaultDateTypeAdapter((int) (byte) 0, 0); com.google.gson.TypeAdapter<java.util.Date> dateTypeAdapter3 = defaultDateTypeAdapter2.nullSafe(); java.util.Date date4 = null; com.google.gson.JsonElement jsonElement5 = defaultDateTypeAdapter2.toJsonTree(date4); com.google.gson.DefaultDateTypeAdapter defaultDateTypeAdapter8 = new com.google.gson.DefaultDateTypeAdapter((int) (byte) 0, 0); com.google.gson.internal.bind.JsonTreeWriter jsonTreeWriter9 = new com.google.gson.internal.bind.JsonTreeWriter(); com.google.gson.stream.JsonWriter jsonWriter11 = jsonTreeWriter9.value(false); com.google.gson.stream.JsonWriter jsonWriter13 = jsonWriter11.value(true); java.util.Date date14 = null; defaultDateTypeAdapter8.write(jsonWriter13, date14); com.google.gson.internal.bind.JsonTreeWriter jsonTreeWriter16 = new com.google.gson.internal.bind.JsonTreeWriter(); com.google.gson.stream.JsonWriter jsonWriter18 = jsonTreeWriter16.value(false); com.google.gson.stream.JsonWriter jsonWriter19 = jsonTreeWriter16.beginArray(); com.google.gson.stream.JsonWriter jsonWriter21 = jsonTreeWriter16.value(true); com.google.gson.stream.JsonWriter jsonWriter23 = jsonTreeWriter16.value((java.lang.Number) (-1.0f)); com.google.gson.stream.JsonWriter jsonWriter24 = jsonTreeWriter16.nullValue(); com.google.gson.stream.JsonWriter jsonWriter25 = jsonTreeWriter16.beginArray(); java.util.Date date26 = null; defaultDateTypeAdapter8.write(jsonWriter25, date26); java.util.Date date28 = null; com.google.gson.JsonElement jsonElement29 = defaultDateTypeAdapter8.toJsonTree(date28); java.util.Date date30 = defaultDateTypeAdapter2.fromJsonTree(jsonElement29); com.google.gson.internal.bind.JsonTreeWriter jsonTreeWriter31 = new com.google.gson.internal.bind.JsonTreeWriter(); com.google.gson.stream.JsonWriter jsonWriter33 = jsonTreeWriter31.value(false); com.google.gson.stream.JsonWriter jsonWriter34 = jsonTreeWriter31.nullValue(); com.google.gson.stream.JsonWriter jsonWriter36 = jsonTreeWriter31.value(false); com.google.gson.JsonElement jsonElement37 = jsonTreeWriter31.get(); com.google.gson.internal.bind.JsonTreeReader jsonTreeReader38 = new com.google.gson.internal.bind.JsonTreeReader(jsonElement37); try { java.util.Date date39 = defaultDateTypeAdapter2.read((com.google.gson.stream.JsonReader) jsonTreeReader38); } catch (java.lang.IllegalStateException e) { } }
Code: public Date read(JsonReader in) throws IOException { if (in.peek() != JsonToken.STRING) { throw new JsonParseException("The date should be a string value"); } Date date = deserializeToDate(in.nextString()); if (dateType == Date.class) { return date; } else if (dateType == Timestamp.class) { return new Timestamp(date.getTime()); } else if (dateType == java.sql.Date.class) { return new java.sql.Date(date.getTime()); } else { throw new AssertionError(); } }
tensor([[0.0125, 0.0063, 0.0167,  ..., 0.0147, 0.0057, 0.0057],
        [0.0106, 0.0058, 0.0163,  ..., 0.0164, 0.0040, 0.0040],
        [0.0084, 0.0045, 0.0139,  ..., 0.0158, 0.0044, 0.0044],
        ...,
        [0.0122, 0.0061, 0.0202,  ..., 0.0162, 0.0072, 0.0072],
        [0.0084, 0.0039, 0.0201,  ..., 0.0141, 0.0047, 0.0047],
        [0.0084, 0.0039, 0.0201,  ..., 0.0141, 0.0047, 0.0047]])