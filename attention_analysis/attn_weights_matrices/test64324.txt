64324
Test: public void testReaderCollisions() throws Exception { StringBuilder sb = new StringBuilder(); List<String> coll = collisions(); for (String field : coll) { if (sb.length() == 0) { sb.append("{"); } else { sb.append(",\n"); } sb.append('"'); sb.append(field); sb.append("\":3"); } sb.append("}"); JsonFactory jf = new JsonFactory(); JsonParser jp = jf.createParser(sb.toString()); jf.enable(JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW); try { while (jp.nextToken() != null) { ; } fail("Should have failed"); } catch (IllegalStateException e) { verifyException(e, "hash collision"); } jp.close(); jf = new JsonFactory(); jf.disable(JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW); jp = jf.createParser(sb.toString()); while (jp.nextToken() != null) { ; } jp.close(); }
Code: public final JsonToken nextToken(){if (_currToken == JsonToken.FIELD_NAME) {return _nextAfterName();}_numTypesValid = NR_UNKNOWN;if (_tokenIncomplete) {_skipString(); }int i = _skipWSOrEnd();if (i < 0) { close();return (_currToken = null);}_binaryValue = null;if (i == INT_RBRACKET) {;if (!_parsingContext.inArray()) {_reportMismatchedEndMarker(i, '}');}_parsingContext = _parsingContext.getParent();return (_currToken = JsonToken.END_ARRAY);}
tensor([[0.0219, 0.0175, 0.0325,  ..., 0.0213, 0.0138, 0.0274],
        [0.0210, 0.0137, 0.0328,  ..., 0.0202, 0.0163, 0.0282],
        [0.0186, 0.0139, 0.0315,  ..., 0.0219, 0.0128, 0.0275],
        ...,
        [0.0212, 0.0155, 0.0362,  ..., 0.0224, 0.0113, 0.0236],
        [0.0248, 0.0208, 0.0342,  ..., 0.0205, 0.0202, 0.0261],
        [0.0214, 0.0198, 0.0369,  ..., 0.0205, 0.0150, 0.0244]])