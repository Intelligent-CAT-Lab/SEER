101386
Test: public void test402() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test402"); org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance(); org.joda.time.chrono.AssembledChronology.Fields fields1 = null; iSOChronology0.assemble(fields1); org.joda.time.DurationField durationField3 = iSOChronology0.seconds(); org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHours(10); org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone6 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone5); org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(dateTimeZone5); int int8 = dateTime7.getDayOfWeek(); org.joda.time.DateTime dateTime10 = dateTime7.minusMinutes((int) (byte) 1); org.joda.time.DateTime.Property property11 = dateTime10.era(); boolean boolean13 = dateTime10.isBefore((long) 3); org.joda.time.DateTime dateTime15 = dateTime10.withWeekOfWeekyear(4); int int16 = dateTime15.getHourOfDay(); org.joda.time.DurationFieldType durationFieldType17 = org.joda.time.DurationFieldType.years(); org.joda.time.DateTime dateTime19 = dateTime15.withFieldAdded(durationFieldType17, (int) ' '); org.joda.time.field.ScaledDurationField scaledDurationField21 = new org.joda.time.field.ScaledDurationField(durationField3, durationFieldType17, 245); long long24 = scaledDurationField21.add(1625879131031L, (-259200000L)); }
Code: public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) { if (valueToAdd == 0) { return values; } if (DateTimeUtils.isContiguous(partial)) { long instant = 0L; for (int i = 0, isize = partial.size(); i < isize; i++) { instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]); } instant = add(instant, valueToAdd); return iChronology.get(partial, instant); } else { return super.add(partial, fieldIndex, values, valueToAdd); } }
tensor([[0.0101, 0.0378, 0.0264,  ..., 0.0146, 0.0047, 0.0047],
        [0.0113, 0.0336, 0.0219,  ..., 0.0197, 0.0045, 0.0045],
        [0.0076, 0.0436, 0.0194,  ..., 0.0176, 0.0046, 0.0046],
        ...,
        [0.0081, 0.0470, 0.0251,  ..., 0.0150, 0.0040, 0.0040],
        [0.0076, 0.0356, 0.0253,  ..., 0.0164, 0.0040, 0.0040],
        [0.0076, 0.0356, 0.0253,  ..., 0.0164, 0.0040, 0.0040]])