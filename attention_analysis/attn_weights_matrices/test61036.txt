61036
Test: public void test1047() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1047"); org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.TDF; cSVFormat0.validate(); org.apache.commons.csv.CSVFormat cSVFormat2 = org.apache.commons.csv.CSVFormat.TDF; cSVFormat2.validate(); org.apache.commons.csv.Quote quote4 = null; org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat2.withQuotePolicy(quote4); org.apache.commons.csv.CSVFormat cSVFormat7 = cSVFormat5.withEscape((java.lang.Character) 'a'); java.lang.Object[] objArray9 = new java.lang.Object[] { 'a', (byte) 0 }; java.lang.String str10 = cSVFormat0.format(objArray9); org.apache.commons.csv.CSVFormat cSVFormat12 = cSVFormat0.withNullString("\r\n"); org.apache.commons.csv.CSVFormat cSVFormat14 = cSVFormat12.withCommentStart((java.lang.Character) '\t'); org.apache.commons.csv.CSVFormat cSVFormat15 = org.apache.commons.csv.CSVFormat.TDF; cSVFormat15.validate(); org.apache.commons.csv.CSVFormat cSVFormat18 = cSVFormat15.withIgnoreEmptyLines(true); java.lang.String str19 = cSVFormat18.getNullString(); java.lang.String str20 = cSVFormat18.getNullString(); boolean boolean21 = cSVFormat12.equals((java.lang.Object) cSVFormat18); char char22 = cSVFormat12.getDelimiter(); }
Code: public String toString() { final StringBuilder sb = new StringBuilder(); sb.append("Delimiter=<").append(delimiter).append('>'); if (isEscaping()) { sb.append(' '); sb.append("Escape=<").append(escape).append('>'); } if (isQuoting()) { sb.append(' '); sb.append("QuoteChar=<").append(quoteChar).append('>'); } if (isCommentingEnabled()) { sb.append(' '); sb.append("CommentStart=<").append(commentStart).append('>'); } if (isNullHandling()) { sb.append(' '); sb.append("NullString=<").append(nullString).append('>'); } if(recordSeparator != null) { sb.append(' '); sb.append("RecordSeparator=<").append(recordSeparator).append('>'); } if (getIgnoreEmptyLines()) { sb.append(" EmptyLines:ignored"); } if (getIgnoreSurroundingSpaces()) { sb.append(" SurroundingSpaces:ignored"); } sb.append(" SkipHeaderRecord:").append(skipHeaderRecord); if (header != null) { sb.append(' '); sb.append("Header:").append(Arrays.toString(header)); } return sb.toString(); }
tensor([[0.0075, 0.0092, 0.0076,  ..., 0.0088, 0.0285, 0.0040],
        [0.0072, 0.0078, 0.0075,  ..., 0.0077, 0.0361, 0.0034],
        [0.0049, 0.0074, 0.0037,  ..., 0.0077, 0.0355, 0.0032],
        ...,
        [0.0049, 0.0070, 0.0036,  ..., 0.0065, 0.0380, 0.0034],
        [0.0052, 0.0086, 0.0053,  ..., 0.0090, 0.0329, 0.0033],
        [0.0050, 0.0091, 0.0084,  ..., 0.0120, 0.0327, 0.0034]])