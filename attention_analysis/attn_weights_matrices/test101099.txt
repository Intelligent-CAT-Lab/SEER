101099
Test: public void test0512() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0512"); org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance(); org.joda.time.chrono.ISOChronology iSOChronology1 = org.joda.time.chrono.ISOChronology.getInstance(); boolean boolean2 = iSOChronology0.equals((java.lang.Object) iSOChronology1); org.joda.time.DateTimeField dateTimeField3 = iSOChronology0.hourOfDay(); org.joda.time.DateTimeField dateTimeField4 = iSOChronology0.clockhourOfHalfday(); org.joda.time.Chronology chronology5 = iSOChronology0.withUTC(); org.joda.time.DateTimeField dateTimeField6 = iSOChronology0.minuteOfHour(); org.joda.time.chrono.ISOChronology iSOChronology7 = org.joda.time.chrono.ISOChronology.getInstance(); org.joda.time.chrono.ISOChronology iSOChronology8 = org.joda.time.chrono.ISOChronology.getInstance(); boolean boolean9 = iSOChronology7.equals((java.lang.Object) iSOChronology8); org.joda.time.chrono.GJChronology gJChronology11 = org.joda.time.chrono.GJChronology.getInstanceUTC(); org.joda.time.DateTimeField dateTimeField12 = gJChronology11.yearOfCentury(); org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology11); org.joda.time.DurationField durationField14 = gJChronology11.eras(); org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate((long) 0, (org.joda.time.Chronology) gJChronology11); int[] intArray17 = iSOChronology8.get((org.joda.time.ReadablePartial) localDate15, (-1123200000L)); org.joda.time.LocalDate localDate19 = localDate15.minusDays(100); org.joda.time.LocalDate localDate21 = localDate19.withYearOfCentury(9); org.joda.time.chrono.BasicChronology basicChronology23 = null; org.joda.time.chrono.GJEraDateTimeField gJEraDateTimeField24 = new org.joda.time.chrono.GJEraDateTimeField(basicChronology23); java.util.Locale locale25 = null; int int26 = gJEraDateTimeField24.getMaximumTextLength(locale25); org.joda.time.Instant instant28 = new org.joda.time.Instant((long) (short) -1); org.joda.time.chrono.GJChronology gJChronology29 = org.joda.time.chrono.GJChronology.getInstanceUTC(); org.joda.time.DateTimeField dateTimeField30 = gJChronology29.yearOfCentury(); org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology29); int int32 = dateTime31.getEra(); int int33 = dateTime31.getYear(); boolean boolean34 = instant28.isBefore((org.joda.time.ReadableInstant) dateTime31); org.joda.time.LocalDate localDate35 = dateTime31.toLocalDate(); org.joda.time.LocalDate localDate37 = localDate35.plusDays(2757764); int int38 = localDate37.getDayOfMonth(); org.joda.time.chrono.GJChronology gJChronology41 = org.joda.time.chrono.GJChronology.getInstanceUTC(); org.joda.time.DateTimeField dateTimeField42 = gJChronology41.yearOfCentury(); org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology41); org.joda.time.DurationField durationField44 = gJChronology41.eras(); org.joda.time.LocalDate localDate45 = new org.joda.time.LocalDate((long) 0, (org.joda.time.Chronology) gJChronology41); org.joda.time.ReadablePeriod readablePeriod46 = null; org.joda.time.LocalDate localDate48 = localDate45.withPeriodAdded(readablePeriod46, (-28800000)); org.joda.time.LocalDate.Property property49 = localDate45.dayOfMonth(); int[] intArray50 = localDate45.getValues(); int[] intArray52 = gJEraDateTimeField24.addWrapField((org.joda.time.ReadablePartial) localDate37, 0, intArray50, 899); try { int[] intArray54 = dateTimeField6.add((org.joda.time.ReadablePartial) localDate19, 956, intArray50, 479); } catch (java.lang.ArrayIndexOutOfBoundsException e) { } }
Code: public static synchronized GJChronology getInstance( DateTimeZone zone, ReadableInstant gregorianCutover, int minDaysInFirstWeek) { zone = DateTimeUtils.getZone(zone); Instant cutoverInstant; if (gregorianCutover == null) { cutoverInstant = DEFAULT_CUTOVER; } else { cutoverInstant = gregorianCutover.toInstant(); LocalDate cutoverDate = new LocalDate(cutoverInstant.getMillis(), GregorianChronology.getInstance(zone)); if (cutoverDate.getYear() <= 0) { throw new IllegalArgumentException("Cutover too early. Must be on or after 0001-01-01."); } } GJChronology chrono; synchronized (cCache) { ArrayList<GJChronology> chronos = cCache.get(zone); if (chronos == null) { chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); } else { for (int i = chronos.size(); --i >= 0;) { chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) { return chrono; } } } if (zone == DateTimeZone.UTC) { chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); } else { chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); } chronos.add(chrono); } return chrono; }
tensor([[0.0047, 0.0152, 0.0087,  ..., 0.0052, 0.0273, 0.0021],
        [0.0049, 0.0137, 0.0096,  ..., 0.0047, 0.0174, 0.0025],
        [0.0042, 0.0178, 0.0092,  ..., 0.0055, 0.0235, 0.0017],
        ...,
        [0.0030, 0.0148, 0.0096,  ..., 0.0042, 0.0273, 0.0017],
        [0.0040, 0.0147, 0.0094,  ..., 0.0047, 0.0236, 0.0020],
        [0.0034, 0.0141, 0.0105,  ..., 0.0073, 0.0177, 0.0018]])