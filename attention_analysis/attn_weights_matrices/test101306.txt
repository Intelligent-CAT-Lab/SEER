101306
Test: public void test283() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test283"); org.joda.time.DateTimeUtils.SystemMillisProvider systemMillisProvider0 = new org.joda.time.DateTimeUtils.SystemMillisProvider(); long long1 = systemMillisProvider0.getMillis(); org.joda.time.chrono.ISOChronology iSOChronology2 = org.joda.time.chrono.ISOChronology.getInstance(); org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime((java.lang.Object) long1, (org.joda.time.Chronology) iSOChronology2); org.joda.time.DateTimeZone dateTimeZone4 = iSOChronology2.getZone(); org.joda.time.DurationField durationField5 = iSOChronology2.eras(); org.joda.time.DateTimeField dateTimeField6 = iSOChronology2.weekyearOfCentury(); org.joda.time.DateTimeField dateTimeField7 = iSOChronology2.era(); org.joda.time.DurationField durationField8 = iSOChronology2.eras(); org.joda.time.DateTimeField dateTimeField9 = iSOChronology2.dayOfWeek(); org.joda.time.ReadableInterval readableInterval11 = null; org.joda.time.ReadableInterval readableInterval12 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval11); org.joda.time.ReadableInstant readableInstant13 = null; boolean boolean14 = readableInterval12.contains(readableInstant13); org.joda.time.DateTime dateTime15 = readableInterval12.getStart(); org.joda.time.ReadableInterval readableInterval16 = null; org.joda.time.ReadableInterval readableInterval17 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval16); org.joda.time.ReadableInstant readableInstant18 = null; boolean boolean19 = readableInterval17.contains(readableInstant18); org.joda.time.DateTime dateTime20 = readableInterval17.getStart(); java.util.Date date21 = dateTime20.toDate(); boolean boolean22 = dateTime15.isBefore((org.joda.time.ReadableInstant) dateTime20); org.joda.time.DateTimeZone dateTimeZone23 = dateTime15.getZone(); org.joda.time.MutableDateTime mutableDateTime24 = new org.joda.time.MutableDateTime((long) (short) 100, dateTimeZone23); mutableDateTime24.addWeeks(0); org.joda.time.ReadableInterval readableInterval28 = null; org.joda.time.ReadableInterval readableInterval29 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval28); org.joda.time.ReadableInstant readableInstant30 = null; boolean boolean31 = readableInterval29.contains(readableInstant30); org.joda.time.DateTime dateTime32 = readableInterval29.getStart(); org.joda.time.ReadableInterval readableInterval33 = null; org.joda.time.ReadableInterval readableInterval34 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval33); org.joda.time.ReadableInstant readableInstant35 = null; boolean boolean36 = readableInterval34.contains(readableInstant35); org.joda.time.DateTime dateTime37 = readableInterval34.getStart(); java.util.Date date38 = dateTime37.toDate(); boolean boolean39 = dateTime32.isBefore((org.joda.time.ReadableInstant) dateTime37); org.joda.time.DateTimeZone dateTimeZone40 = dateTime32.getZone(); org.joda.time.MutableDateTime mutableDateTime41 = new org.joda.time.MutableDateTime((long) (short) 100, dateTimeZone40); java.util.TimeZone timeZone42 = dateTimeZone40.toTimeZone(); mutableDateTime24.setZone(dateTimeZone40); java.util.Locale locale45 = null; java.lang.String str46 = dateTimeZone40.getShortName((long) (byte) 12, locale45); try { org.joda.time.MutableDateTime mutableDateTime47 = new org.joda.time.MutableDateTime((java.lang.Object) dateTimeField9, dateTimeZone40); } catch (java.lang.IllegalArgumentException e) { } }
Code: public void addWeeks(final int weeks) { if (weeks != 0) { setMillis(getChronology().weeks().add(getMillis(), weeks)); } }
tensor([[0.0473, 0.0394, 0.2298, 0.0281, 0.0500, 0.0723, 0.1284, 0.0498, 0.0270,
         0.0288, 0.0723, 0.0567, 0.1260, 0.0222, 0.0222],
        [0.0363, 0.0337, 0.2990, 0.0186, 0.0496, 0.0725, 0.1220, 0.0453, 0.0246,
         0.0265, 0.0725, 0.0480, 0.1080, 0.0217, 0.0217],
        [0.0491, 0.0415, 0.1936, 0.0286, 0.0729, 0.0726, 0.1563, 0.0579, 0.0302,
         0.0292, 0.0726, 0.0394, 0.1149, 0.0207, 0.0207],
        [0.0314, 0.0288, 0.2585, 0.0213, 0.0490, 0.0787, 0.1817, 0.0425, 0.0205,
         0.0263, 0.0787, 0.0485, 0.1018, 0.0162, 0.0162],
        [0.0430, 0.0347, 0.2360, 0.0227, 0.0499, 0.0707, 0.1226, 0.0431, 0.0273,
         0.0311, 0.0707, 0.0520, 0.1561, 0.0200, 0.0200],
        [0.0504, 0.0442, 0.2157, 0.0239, 0.0532, 0.0834, 0.0866, 0.0527, 0.0362,
         0.0347, 0.0834, 0.0644, 0.1131, 0.0290, 0.0290],
        [0.0260, 0.0220, 0.3871, 0.0119, 0.0337, 0.0745, 0.1539, 0.0506, 0.0122,
         0.0289, 0.0745, 0.0276, 0.0760, 0.0106, 0.0106],
        [0.0407, 0.0346, 0.2104, 0.0284, 0.0579, 0.0742, 0.1450, 0.0633, 0.0259,
         0.0315, 0.0742, 0.0540, 0.1213, 0.0193, 0.0193],
        [0.0313, 0.0233, 0.3032, 0.0176, 0.0439, 0.0898, 0.1355, 0.0492, 0.0147,
         0.0323, 0.0898, 0.0365, 0.1030, 0.0149, 0.0149],
        [0.0384, 0.0403, 0.2510, 0.0226, 0.0459, 0.0745, 0.1300, 0.0493, 0.0311,
         0.0283, 0.0745, 0.0559, 0.1077, 0.0252, 0.0252],
        [0.0504, 0.0442, 0.2157, 0.0239, 0.0532, 0.0834, 0.0866, 0.0527, 0.0362,
         0.0347, 0.0834, 0.0644, 0.1131, 0.0290, 0.0290],
        [0.0444, 0.0321, 0.2029, 0.0281, 0.0680, 0.0781, 0.1569, 0.0538, 0.0275,
         0.0358, 0.0781, 0.0406, 0.1144, 0.0196, 0.0196],
        [0.0302, 0.0202, 0.2947, 0.0158, 0.0468, 0.0688, 0.1311, 0.0489, 0.0168,
         0.0281, 0.0688, 0.0489, 0.1474, 0.0168, 0.0168],
        [0.0347, 0.0324, 0.2228, 0.0262, 0.0528, 0.0908, 0.1344, 0.0614, 0.0255,
         0.0262, 0.0908, 0.0445, 0.1186, 0.0195, 0.0195],
        [0.0347, 0.0324, 0.2228, 0.0262, 0.0528, 0.0908, 0.1344, 0.0614, 0.0255,
         0.0262, 0.0908, 0.0445, 0.1186, 0.0195, 0.0195]])