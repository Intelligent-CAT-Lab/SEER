15632
Test: public void test107() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test107"); org.apache.commons.cli.GnuParser gnuParser0 = new org.apache.commons.cli.GnuParser(); org.apache.commons.cli.Options options1 = new org.apache.commons.cli.Options(); java.lang.String[] strArray2 = new java.lang.String[] {}; java.util.Properties properties3 = null; org.apache.commons.cli.CommandLine commandLine5 = gnuParser0.parse(options1, strArray2, properties3, true); java.util.Properties properties6 = null; gnuParser0.processProperties(properties6); java.util.List list8 = gnuParser0.getRequiredOptions(); org.apache.commons.cli.CommandLine commandLine9 = gnuParser0.cmd; org.apache.commons.cli.GnuParser gnuParser10 = new org.apache.commons.cli.GnuParser(); org.apache.commons.cli.Options options11 = new org.apache.commons.cli.Options(); java.lang.String[] strArray14 = new java.lang.String[] { "hi!", "" }; java.lang.String[] strArray16 = gnuParser10.flatten(options11, strArray14, true); java.lang.String str17 = options11.toString(); org.apache.commons.cli.GnuParser gnuParser18 = new org.apache.commons.cli.GnuParser(); org.apache.commons.cli.Options options19 = new org.apache.commons.cli.Options(); java.lang.String[] strArray22 = new java.lang.String[] { "hi!", "" }; java.lang.String[] strArray24 = gnuParser18.flatten(options19, strArray22, true); java.util.Properties properties25 = null; org.apache.commons.cli.CommandLine commandLine26 = gnuParser0.parse(options11, strArray22, properties25); org.apache.commons.cli.Options options27 = gnuParser0.getOptions(); java.util.Collection collection28 = options27.getOptionGroups(); } ] [ long {} ]" + "'", str17, "[ Options: [ short {} ] [ long {} ]"); }
Code: protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption){List tokens = new ArrayList();boolean eatTheRest = false;for (int i = 1; i < arguments.length; i++){String arg = arguments[i];if ("--".equals(arg)){;tokens.add("--");}else if ("-".equals(arg)){tokens.add("-");}else if (arg.startsWith("-")){String opt = Util.stripLeadingHyphens(arg);if (options.hasOption(opt)){tokens.add(arg);}else{if (options.hasOption(arg.substring(0, 2))){tokens.add(arg.substring(0, 2)); tokens.add(arg.substring(2)); }else{eatTheRest = stopAtNonOption;;}}}else{tokens.add(arg);}if (true){for (i++; i < arguments.length; i++){tokens.add(arguments[i]);}}}return (String[]) tokens.toArray(new String[tokens.size()]);}
tensor([[0.0205, 0.0057, 0.0219,  ..., 0.1094, 0.0210, 0.0227],
        [0.0198, 0.0053, 0.0219,  ..., 0.0998, 0.0192, 0.0216],
        [0.0189, 0.0086, 0.0250,  ..., 0.0774, 0.0229, 0.0237],
        ...,
        [0.0208, 0.0086, 0.0240,  ..., 0.0855, 0.0277, 0.0196],
        [0.0215, 0.0082, 0.0246,  ..., 0.0816, 0.0216, 0.0208],
        [0.0166, 0.0074, 0.0199,  ..., 0.0988, 0.0241, 0.0226]])