15513
Test: public void test0377() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0377"); org.apache.commons.cli.Option option1 = org.apache.commons.cli.OptionBuilder.create("arg"); int int2 = option1.getId(); java.lang.Object obj3 = option1.clone(); option1.setOptionalArg(false); org.apache.commons.cli.Option option10 = new org.apache.commons.cli.Option("", "hi!", false, "hi!"); option10.setRequired(false); option10.setOptionalArg(true); java.lang.String str15 = option10.getLongOpt(); java.lang.String str17 = option10.getValue(""); option10.setDescription("arg"); java.lang.Object obj20 = option10.getType(); java.lang.String str21 = option10.toString(); java.lang.Object obj22 = option10.clone(); option10.setDescription("[ option: \000 :: [ option: hi! :: hi! ] ]"); boolean boolean25 = option1.equals((java.lang.Object) "[ option: \000 :: [ option: hi! :: hi! ] ]"); int int26 = option1.getArgs(); }
Code: public static Option create(String opt) throws IllegalArgumentException { Option option = null; try { option = new Option(opt, description); option.setLongOpt(longopt); option.setRequired(required); option.setOptionalArg(optionalArg); option.setArgs(numberOfArgs); option.setType(type); option.setValueSeparator(valuesep); option.setArgName(argName); } finally { OptionBuilder.reset(); } return option; }
tensor([[0.0173, 0.0538, 0.0483,  ..., 0.0192, 0.0336, 0.0076],
        [0.0186, 0.0490, 0.0420,  ..., 0.0176, 0.0368, 0.0088],
        [0.0150, 0.0578, 0.0388,  ..., 0.0218, 0.0288, 0.0064],
        ...,
        [0.0114, 0.0535, 0.0516,  ..., 0.0164, 0.0313, 0.0062],
        [0.0175, 0.0506, 0.0489,  ..., 0.0204, 0.0313, 0.0058],
        [0.0126, 0.0506, 0.0360,  ..., 0.0269, 0.0303, 0.0066]])