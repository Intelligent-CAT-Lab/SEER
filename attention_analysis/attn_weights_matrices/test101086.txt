101086
Test: public void test0969() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0969"); org.joda.time.chrono.BasicChronology basicChronology0 = null; org.joda.time.chrono.GJEraDateTimeField gJEraDateTimeField1 = new org.joda.time.chrono.GJEraDateTimeField(basicChronology0); java.util.Locale locale2 = null; int int3 = gJEraDateTimeField1.getMaximumTextLength(locale2); org.joda.time.Instant instant5 = new org.joda.time.Instant((long) (short) -1); org.joda.time.chrono.GJChronology gJChronology6 = org.joda.time.chrono.GJChronology.getInstanceUTC(); org.joda.time.DateTimeField dateTimeField7 = gJChronology6.yearOfCentury(); org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology6); int int9 = dateTime8.getEra(); int int10 = dateTime8.getYear(); boolean boolean11 = instant5.isBefore((org.joda.time.ReadableInstant) dateTime8); org.joda.time.LocalDate localDate12 = dateTime8.toLocalDate(); org.joda.time.LocalDate localDate14 = localDate12.plusDays(2757764); int int15 = localDate14.getDayOfMonth(); org.joda.time.chrono.GJChronology gJChronology18 = org.joda.time.chrono.GJChronology.getInstanceUTC(); org.joda.time.DateTimeField dateTimeField19 = gJChronology18.yearOfCentury(); org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology18); org.joda.time.DurationField durationField21 = gJChronology18.eras(); org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate((long) 0, (org.joda.time.Chronology) gJChronology18); org.joda.time.ReadablePeriod readablePeriod23 = null; org.joda.time.LocalDate localDate25 = localDate22.withPeriodAdded(readablePeriod23, (-28800000)); org.joda.time.LocalDate.Property property26 = localDate22.dayOfMonth(); int[] intArray27 = localDate22.getValues(); int[] intArray29 = gJEraDateTimeField1.addWrapField((org.joda.time.ReadablePartial) localDate14, 0, intArray27, 899); int int30 = gJEraDateTimeField1.getMaximumValue(); int int32 = gJEraDateTimeField1.getLeapAmount((long) 969); org.joda.time.ReadablePartial readablePartial33 = null; org.joda.time.chrono.JulianChronology julianChronology35 = org.joda.time.chrono.JulianChronology.getInstanceUTC(); int int37 = julianChronology35.getMillisOfDay((long) 682); org.joda.time.LocalDate localDate38 = org.joda.time.LocalDate.now((org.joda.time.Chronology) julianChronology35); int int39 = julianChronology35.getMaxYear(); org.joda.time.DateTimeField dateTimeField40 = julianChronology35.centuryOfEra(); org.joda.time.chrono.BasicYearDateTimeField basicYearDateTimeField41 = new org.joda.time.chrono.BasicYearDateTimeField((org.joda.time.chrono.BasicChronology) julianChronology35); long long44 = basicYearDateTimeField41.addWrapField((long) 2759289, 182); org.joda.time.chrono.GJChronology gJChronology46 = org.joda.time.chrono.GJChronology.getInstanceUTC(); org.joda.time.DateTimeField dateTimeField47 = gJChronology46.yearOfCentury(); org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology46); org.joda.time.DurationField durationField49 = gJChronology46.eras(); org.joda.time.LocalDate localDate50 = new org.joda.time.LocalDate((long) 0, (org.joda.time.Chronology) gJChronology46); org.joda.time.ReadablePeriod readablePeriod51 = null; org.joda.time.LocalDate localDate53 = localDate50.withPeriodAdded(readablePeriod51, (-28800000)); org.joda.time.chrono.ISOChronology iSOChronology54 = org.joda.time.chrono.ISOChronology.getInstance(); org.joda.time.chrono.ISOChronology iSOChronology55 = org.joda.time.chrono.ISOChronology.getInstance(); boolean boolean56 = iSOChronology54.equals((java.lang.Object) iSOChronology55); org.joda.time.chrono.GJChronology gJChronology58 = org.joda.time.chrono.GJChronology.getInstanceUTC(); org.joda.time.DateTimeField dateTimeField59 = gJChronology58.yearOfCentury(); org.joda.time.DateTime dateTime60 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology58); org.joda.time.DurationField durationField61 = gJChronology58.eras(); org.joda.time.LocalDate localDate62 = new org.joda.time.LocalDate((long) 0, (org.joda.time.Chronology) gJChronology58); int[] intArray64 = iSOChronology55.get((org.joda.time.ReadablePartial) localDate62, (-1123200000L)); int int65 = basicYearDateTimeField41.getMaximumValue((org.joda.time.ReadablePartial) localDate53, intArray64); try { int[] intArray67 = gJEraDateTimeField1.set(readablePartial33, 77, intArray64, 2812394); } catch (org.joda.time.IllegalFieldValueException e) { } }
Code: public static synchronized GJChronology getInstance( DateTimeZone zone, ReadableInstant gregorianCutover, int minDaysInFirstWeek) { zone = DateTimeUtils.getZone(zone); Instant cutoverInstant; if (gregorianCutover == null) { cutoverInstant = DEFAULT_CUTOVER; } else { cutoverInstant = gregorianCutover.toInstant(); } GJChronology chrono; synchronized (cCache) { ArrayList<GJChronology> chronos = cCache.get(zone); if (chronos == null) { chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); } else { for (int i = chronos.size(); --i >= 0;) { chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) { return chrono; } } } if (zone == DateTimeZone.UTC) { chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); } else { chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); } chronos.add(chrono); } return chrono; }
tensor([[0.0056, 0.0185, 0.0105,  ..., 0.0063, 0.0325, 0.0026],
        [0.0060, 0.0168, 0.0117,  ..., 0.0058, 0.0212, 0.0031],
        [0.0051, 0.0218, 0.0112,  ..., 0.0067, 0.0283, 0.0021],
        ...,
        [0.0036, 0.0181, 0.0115,  ..., 0.0050, 0.0325, 0.0021],
        [0.0049, 0.0181, 0.0114,  ..., 0.0058, 0.0284, 0.0024],
        [0.0041, 0.0173, 0.0128,  ..., 0.0090, 0.0216, 0.0023]])