66523
Test: public void testSerializeAsExternalizable() throws Exception { ByteArrayOutputStream bytes = new ByteArrayOutputStream(); ObjectOutputStream obs = new ObjectOutputStream(bytes); final MyPojo input = new MyPojo(13, "Foobar", new int[] { 1, 2, 3 } ); obs.writeObject(input); obs.close(); byte[] ser = bytes.toByteArray(); byte[] json = MapperHolder.mapper().writeValueAsBytes(input); int ix = indexOf(ser, json); if (ix < 0) { fail("Serialization ("+ser.length+") does NOT contain JSON (of "+json.length+")"); } if (false) { bytes = new ByteArrayOutputStream(); obs = new ObjectOutputStream(bytes); MyPojoNative p = new MyPojoNative(13, "Foobar", new int[] { 1, 2, 3 } ); obs.writeObject(p); obs.close(); System.out.println("Native size: "+bytes.size()+", vs JSON: "+ser.length); } ObjectInputStream ins = new ObjectInputStream(new ByteArrayInputStream(ser)); MyPojo output = (MyPojo) ins.readObject(); ins.close(); }
Code: public void writeObject(Object value) throws IOException { if (value == null) { writeNull(); return; } Class<?> raw = value.getClass(); if (raw == byte[].class || (value instanceof RawValue)) { _appendValue(JsonToken.VALUE_EMBEDDED_OBJECT, value); return; } if (_objectCodec == null) { _appendValue(JsonToken.VALUE_EMBEDDED_OBJECT, value); } else { _objectCodec.writeValue(this, value); } }
tensor([[0.0174, 0.0142, 0.0137,  ..., 0.0438, 0.0075, 0.0075],
        [0.0147, 0.0125, 0.0153,  ..., 0.0433, 0.0075, 0.0075],
        [0.0115, 0.0100, 0.0146,  ..., 0.0392, 0.0066, 0.0066],
        ...,
        [0.0151, 0.0160, 0.0149,  ..., 0.0375, 0.0060, 0.0060],
        [0.0129, 0.0116, 0.0236,  ..., 0.0280, 0.0066, 0.0066],
        [0.0129, 0.0116, 0.0236,  ..., 0.0280, 0.0066, 0.0066]])