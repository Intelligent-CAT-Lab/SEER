61108
Test: public void test0473() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0473"); org.apache.commons.csv.CSVFormat cSVFormat0 = org.apache.commons.csv.CSVFormat.TDF; cSVFormat0.validate(); org.apache.commons.csv.Quote quote2 = null; org.apache.commons.csv.CSVFormat cSVFormat3 = cSVFormat0.withQuotePolicy(quote2); org.apache.commons.csv.CSVFormat cSVFormat5 = cSVFormat3.withQuoteChar('\t'); java.lang.String str6 = cSVFormat5.toString(); org.apache.commons.csv.CSVFormat cSVFormat8 = cSVFormat5.withRecordSeparator('\037'); java.lang.String str9 = cSVFormat5.toString(); org.apache.commons.csv.CSVFormat cSVFormat11 = cSVFormat5.withRecordSeparator('\t'); org.apache.commons.csv.Quote quote12 = null; org.apache.commons.csv.CSVFormat cSVFormat13 = cSVFormat11.withQuotePolicy(quote12); org.apache.commons.csv.Quote quote14 = cSVFormat11.getQuotePolicy(); org.apache.commons.csv.CSVFormat cSVFormat16 = cSVFormat11.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat17 = org.apache.commons.csv.CSVFormat.TDF; cSVFormat17.validate(); org.apache.commons.csv.Quote quote19 = null; org.apache.commons.csv.CSVFormat cSVFormat20 = cSVFormat17.withQuotePolicy(quote19); org.apache.commons.csv.CSVFormat cSVFormat22 = cSVFormat20.withQuoteChar('\t'); java.lang.Character char23 = cSVFormat22.getEscape(); boolean boolean24 = cSVFormat22.getSkipHeaderRecord(); org.apache.commons.csv.CSVFormat cSVFormat26 = cSVFormat22.withIgnoreEmptyLines(false); org.apache.commons.csv.CSVFormat cSVFormat28 = cSVFormat26.withQuoteChar('\037'); boolean boolean29 = cSVFormat28.isCommentingEnabled(); org.apache.commons.csv.CSVFormat cSVFormat30 = org.apache.commons.csv.CSVFormat.TDF; org.apache.commons.csv.CSVFormat cSVFormat32 = cSVFormat30.withQuoteChar((java.lang.Character) '\t'); org.apache.commons.csv.CSVFormat cSVFormat34 = cSVFormat30.withSkipHeaderRecord(false); org.apache.commons.csv.CSVFormat cSVFormat35 = org.apache.commons.csv.CSVFormat.TDF; org.apache.commons.csv.CSVFormat cSVFormat37 = cSVFormat35.withNullString("hi!"); cSVFormat37.validate(); org.apache.commons.csv.CSVFormat cSVFormat40 = cSVFormat37.withNullString("\r\n"); org.apache.commons.csv.CSVFormat cSVFormat42 = cSVFormat40.withCommentStart((java.lang.Character) '4'); java.lang.String[] strArray47 = new java.lang.String[] { "Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false Header:[hi!, a\t0]", "Delimiter=<\t> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SurroundingSpaces:ignored SkipHeaderRecord:true", "hi!\t\"a\t0\"", "a\t0" }; org.apache.commons.csv.CSVFormat cSVFormat48 = cSVFormat42.withHeader(strArray47); java.lang.String str49 = cSVFormat34.format((java.lang.Object[]) strArray47); java.lang.String str50 = cSVFormat28.format((java.lang.Object[]) strArray47); org.apache.commons.csv.CSVFormat cSVFormat51 = org.apache.commons.csv.CSVFormat.TDF; cSVFormat51.validate(); org.apache.commons.csv.CSVFormat cSVFormat54 = cSVFormat51.withDelimiter('a'); boolean boolean55 = cSVFormat51.getIgnoreSurroundingSpaces(); java.lang.Character char56 = cSVFormat51.getCommentStart(); org.apache.commons.csv.CSVFormat cSVFormat57 = org.apache.commons.csv.CSVFormat.TDF; cSVFormat57.validate(); org.apache.commons.csv.CSVFormat cSVFormat59 = org.apache.commons.csv.CSVFormat.TDF; cSVFormat59.validate(); org.apache.commons.csv.Quote quote61 = null; org.apache.commons.csv.CSVFormat cSVFormat62 = cSVFormat59.withQuotePolicy(quote61); org.apache.commons.csv.CSVFormat cSVFormat64 = cSVFormat62.withEscape((java.lang.Character) 'a'); java.lang.Object[] objArray66 = new java.lang.Object[] { 'a', (byte) 0 }; java.lang.String str67 = cSVFormat57.format(objArray66); org.apache.commons.csv.CSVFormat cSVFormat68 = org.apache.commons.csv.CSVFormat.TDF; cSVFormat68.validate(); org.apache.commons.csv.CSVFormat cSVFormat71 = cSVFormat68.withIgnoreEmptyLines(true); java.lang.String[] strArray74 = new java.lang.String[] { "hi!", "a\t0" }; org.apache.commons.csv.CSVFormat cSVFormat75 = cSVFormat68.withHeader(strArray74); java.lang.String str76 = cSVFormat57.format((java.lang.Object[]) strArray74); java.lang.String str77 = cSVFormat51.format((java.lang.Object[]) strArray74); org.apache.commons.csv.CSVFormat cSVFormat78 = cSVFormat28.withHeader(strArray74); try { java.lang.String str79 = cSVFormat16.format((java.lang.Object[]) strArray74); } catch (java.lang.IllegalStateException e) { } }
Code: public String toString(){final StringBuilder sb = new StringBuilder();sb.append("Delimiter=<").append(delimiter).append('>');if (isEscaping()) {sb.append(' ');sb.append("Escape=<").append(escape).append('>');}if (isQuoting()) {sb.append(' ');;}if (isCommentingEnabled()) {sb.append(' ');sb.append("CommentStart=<").append(commentStart).append('>');}if (true) {sb.append(' ');;}if(recordSeparator != null) {sb.append(' ');sb.append("RecordSeparator=<").append(recordSeparator).append('>');}if (getIgnoreEmptyLines()) {sb.append(" EmptyLines:ignored");}if (getIgnoreSurroundingSpaces()) {sb.append(" SurroundingSpaces:ignored");}sb.append(" SkipHeaderRecord:").append(skipHeaderRecord);if (header != null) {sb.append(' ');sb.append("Header:").append(Arrays.toString(header));}return sb.toString();}
tensor([[0.0218, 0.0277, 0.0144,  ..., 0.0460, 0.0365, 0.0244],
        [0.0229, 0.0268, 0.0146,  ..., 0.0450, 0.0382, 0.0247],
        [0.0175, 0.0322, 0.0133,  ..., 0.0399, 0.0302, 0.0246],
        ...,
        [0.0212, 0.0329, 0.0170,  ..., 0.0390, 0.0332, 0.0230],
        [0.0164, 0.0288, 0.0131,  ..., 0.0423, 0.0242, 0.0170],
        [0.0221, 0.0311, 0.0146,  ..., 0.0435, 0.0271, 0.0243]])