101109
Test: public void test0463() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0463"); org.joda.time.chrono.GJChronology gJChronology0 = org.joda.time.chrono.GJChronology.getInstanceUTC(); org.joda.time.DateTimeField dateTimeField1 = gJChronology0.yearOfCentury(); org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology0); int int3 = dateTime2.getEra(); int int4 = dateTime2.getMillisOfSecond(); org.joda.time.DateTime.Property property5 = dateTime2.year(); org.joda.time.ReadableDuration readableDuration6 = null; org.joda.time.DateTime dateTime7 = dateTime2.plus(readableDuration6); int int8 = dateTime7.getMillisOfDay(); org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.millisOfDay(); int int10 = dateTime7.get(dateTimeFieldType9); org.joda.time.DurationFieldType durationFieldType11 = org.joda.time.DurationFieldType.eras(); org.joda.time.field.UnsupportedDurationField unsupportedDurationField12 = org.joda.time.field.UnsupportedDurationField.getInstance(durationFieldType11); org.joda.time.field.PreciseDurationField preciseDurationField14 = new org.joda.time.field.PreciseDurationField(durationFieldType11, 0L); long long15 = preciseDurationField14.getUnitMillis(); org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField16 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType9, (org.joda.time.DurationField) preciseDurationField14); org.joda.time.chrono.ISOChronology iSOChronology17 = org.joda.time.chrono.ISOChronology.getInstance(); org.joda.time.chrono.ISOChronology iSOChronology18 = org.joda.time.chrono.ISOChronology.getInstance(); boolean boolean19 = iSOChronology17.equals((java.lang.Object) iSOChronology18); org.joda.time.DateTimeField dateTimeField20 = iSOChronology17.hourOfDay(); org.joda.time.DateTimeField dateTimeField21 = iSOChronology17.clockhourOfHalfday(); org.joda.time.Chronology chronology22 = iSOChronology17.withUTC(); org.joda.time.DateTimeField dateTimeField23 = iSOChronology17.minuteOfHour(); org.joda.time.field.OffsetDateTimeField offsetDateTimeField25 = new org.joda.time.field.OffsetDateTimeField(dateTimeField23, 818); int int26 = offsetDateTimeField25.getMinimumValue(); long long28 = offsetDateTimeField25.roundHalfFloor((long) 436); long long30 = offsetDateTimeField25.roundHalfCeiling((long) 19); int int33 = offsetDateTimeField25.getDifference(0L, (long) 393); long long35 = offsetDateTimeField25.roundCeiling(0L); org.joda.time.chrono.JulianChronology julianChronology36 = org.joda.time.chrono.JulianChronology.getInstanceUTC(); int int38 = julianChronology36.getMillisOfDay((long) 682); org.joda.time.LocalDate localDate39 = org.joda.time.LocalDate.now((org.joda.time.Chronology) julianChronology36); int int40 = julianChronology36.getMaxYear(); org.joda.time.DateTimeField dateTimeField41 = julianChronology36.centuryOfEra(); org.joda.time.chrono.BasicYearDateTimeField basicYearDateTimeField42 = new org.joda.time.chrono.BasicYearDateTimeField((org.joda.time.chrono.BasicChronology) julianChronology36); long long45 = basicYearDateTimeField42.addWrapField((long) 2759289, 182); org.joda.time.chrono.GJChronology gJChronology47 = org.joda.time.chrono.GJChronology.getInstanceUTC(); org.joda.time.DateTimeField dateTimeField48 = gJChronology47.yearOfCentury(); org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology47); org.joda.time.DurationField durationField50 = gJChronology47.eras(); org.joda.time.LocalDate localDate51 = new org.joda.time.LocalDate((long) 0, (org.joda.time.Chronology) gJChronology47); org.joda.time.ReadablePeriod readablePeriod52 = null; org.joda.time.LocalDate localDate54 = localDate51.withPeriodAdded(readablePeriod52, (-28800000)); org.joda.time.chrono.ISOChronology iSOChronology55 = org.joda.time.chrono.ISOChronology.getInstance(); org.joda.time.chrono.ISOChronology iSOChronology56 = org.joda.time.chrono.ISOChronology.getInstance(); boolean boolean57 = iSOChronology55.equals((java.lang.Object) iSOChronology56); org.joda.time.chrono.GJChronology gJChronology59 = org.joda.time.chrono.GJChronology.getInstanceUTC(); org.joda.time.DateTimeField dateTimeField60 = gJChronology59.yearOfCentury(); org.joda.time.DateTime dateTime61 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology59); org.joda.time.DurationField durationField62 = gJChronology59.eras(); org.joda.time.LocalDate localDate63 = new org.joda.time.LocalDate((long) 0, (org.joda.time.Chronology) gJChronology59); int[] intArray65 = iSOChronology56.get((org.joda.time.ReadablePartial) localDate63, (-1123200000L)); int int66 = basicYearDateTimeField42.getMaximumValue((org.joda.time.ReadablePartial) localDate54, intArray65); org.joda.time.LocalDate localDate68 = localDate54.minusYears(876); java.util.Locale locale70 = null; java.lang.String str71 = offsetDateTimeField25.getAsShortText((org.joda.time.ReadablePartial) localDate68, 4, locale70); int[] intArray75 = new int[] { (-28800000), 23 }; try { int[] intArray77 = unsupportedDateTimeField16.addWrapField((org.joda.time.ReadablePartial) localDate68, 2765285, intArray75, 700); } catch (java.lang.UnsupportedOperationException e) { } }
Code: public static synchronized GJChronology getInstance( DateTimeZone zone, ReadableInstant gregorianCutover, int minDaysInFirstWeek) { zone = DateTimeUtils.getZone(zone); Instant cutoverInstant; if (gregorianCutover == null) { cutoverInstant = DEFAULT_CUTOVER; } else { cutoverInstant = gregorianCutover.toInstant(); LocalDate cutoverDate = new LocalDate(cutoverInstant.getMillis(), GregorianChronology.getInstance(zone)); if (cutoverDate.getYear() <= 0) { throw new IllegalArgumentException("Cutover too early. Must be on or after 0001-01-01."); } } GJChronology chrono; synchronized (cCache) { ArrayList<GJChronology> chronos = cCache.get(zone); if (chronos == null) { chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); } else { for (int i = chronos.size(); --i >= 0;) { chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) { return chrono; } } } if (zone == DateTimeZone.UTC) { chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); } else { chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); } chronos.add(chrono); } return chrono; }
tensor([[0.0047, 0.0152, 0.0087,  ..., 0.0052, 0.0273, 0.0021],
        [0.0049, 0.0137, 0.0096,  ..., 0.0047, 0.0174, 0.0025],
        [0.0042, 0.0178, 0.0092,  ..., 0.0055, 0.0235, 0.0017],
        ...,
        [0.0030, 0.0148, 0.0096,  ..., 0.0042, 0.0273, 0.0017],
        [0.0040, 0.0147, 0.0094,  ..., 0.0047, 0.0236, 0.0020],
        [0.0034, 0.0141, 0.0105,  ..., 0.0073, 0.0177, 0.0018]])