19434
Test: public void test3() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test3"); com.google.javascript.jscomp.Compiler compiler0 = new com.google.javascript.jscomp.Compiler(); com.google.javascript.rhino.Node node1 = null; com.google.javascript.rhino.Node node2 = com.google.javascript.jscomp.NodeUtil.newUndefinedNode(node1); java.util.Set<java.lang.String> strSet3 = node2.getSuppressions(); boolean boolean4 = com.google.javascript.jscomp.NodeUtil.isThis(node2); boolean boolean5 = com.google.javascript.jscomp.NodeUtil.isFunction(node2); java.lang.Object obj7 = node2.getProp((int) ' '); compiler0.jsRoot = node2; compiler0.initCompilerOptionsIfTesting(); boolean boolean10 = compiler0.hasRegExpGlobalReferences(); com.google.javascript.jscomp.CodingConvention codingConvention11 = compiler0.getCodingConvention(); compiler0.addToDebugLog(""); boolean boolean14 = compiler0.isNormalized(); com.google.javascript.jscomp.CompilerOptions compilerOptions15 = new com.google.javascript.jscomp.CompilerOptions(); compilerOptions15.runtimeTypeCheck = false; com.google.javascript.jscomp.CheckLevel checkLevel18 = compilerOptions15.checkRequires; com.google.javascript.jscomp.CheckGlobalThis checkGlobalThis19 = new com.google.javascript.jscomp.CheckGlobalThis((com.google.javascript.jscomp.AbstractCompiler) compiler0, checkLevel18); com.google.javascript.jscomp.AbstractCompiler abstractCompiler20 = null; com.google.javascript.jscomp.AbstractCompiler abstractCompiler21 = null; com.google.javascript.jscomp.VarCheck varCheck23 = new com.google.javascript.jscomp.VarCheck(abstractCompiler21, false); com.google.javascript.jscomp.NodeTraversal nodeTraversal24 = new com.google.javascript.jscomp.NodeTraversal(abstractCompiler20, (com.google.javascript.jscomp.NodeTraversal.Callback) varCheck23); int int25 = nodeTraversal24.getScopeDepth(); int int26 = nodeTraversal24.getLineNumber(); com.google.javascript.rhino.Node node27 = nodeTraversal24.getEnclosingFunction(); com.google.javascript.rhino.Node node28 = null; com.google.javascript.rhino.Node node29 = com.google.javascript.jscomp.NodeUtil.newUndefinedNode(node28); java.util.Set<java.lang.String> strSet30 = node29.getSuppressions(); boolean boolean31 = com.google.javascript.jscomp.NodeUtil.isFunction(node29); com.google.javascript.rhino.Node node32 = node29.removeChildren(); com.google.javascript.rhino.Node node33 = null; com.google.javascript.rhino.Node node34 = com.google.javascript.jscomp.NodeUtil.newUndefinedNode(node33); java.util.Set<java.lang.String> strSet35 = node34.getSuppressions(); boolean boolean36 = com.google.javascript.jscomp.NodeUtil.isFunction(node34); com.google.javascript.rhino.Node node37 = null; com.google.javascript.rhino.Node node38 = com.google.javascript.jscomp.NodeUtil.newUndefinedNode(node37); java.util.Set<java.lang.String> strSet39 = node38.getSuppressions(); boolean boolean40 = com.google.javascript.jscomp.NodeUtil.isFunction(node38); com.google.javascript.rhino.Node node41 = null; com.google.javascript.rhino.Node node42 = com.google.javascript.jscomp.NodeUtil.newUndefinedNode(node41); com.google.javascript.jscomp.NodeUtil.setDebugInformation(node38, node42, "hi!"); com.google.javascript.jscomp.PropertyRenamingPolicy propertyRenamingPolicy45 = com.google.javascript.jscomp.PropertyRenamingPolicy.ALL_UNQUOTED; java.lang.RuntimeException runtimeException47 = com.google.javascript.rhino.ScriptRuntime.undefWriteError((java.lang.Object) node42, (java.lang.Object) propertyRenamingPolicy45, (java.lang.Object) 26); node32.addChildAfter(node34, node42); com.google.javascript.rhino.Node node49 = null; com.google.javascript.rhino.Node node50 = com.google.javascript.jscomp.NodeUtil.newUndefinedNode(node49); java.util.Set<java.lang.String> strSet51 = node50.getSuppressions(); boolean boolean52 = com.google.javascript.jscomp.NodeUtil.isFunction(node50); com.google.javascript.rhino.Node node53 = null; com.google.javascript.rhino.Node node54 = com.google.javascript.jscomp.NodeUtil.newUndefinedNode(node53); com.google.javascript.jscomp.NodeUtil.setDebugInformation(node50, node54, "hi!"); boolean boolean57 = node54.isVarArgs(); boolean boolean58 = checkGlobalThis19.shouldTraverse(nodeTraversal24, node34, node54); node34.putIntProp(33, 21); }
Code: public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) { if (n.getType() >= Token.FUNCTION) { JSDocInfo jsDoc = getFunctionJsDocInfo(n); if (jsDoc != null && (jsDoc.isConstructor() || jsDoc.hasThisType())) { return true; } int pType = parent.getType(); if (!(pType == Token.BLOCK || pType == Token.SCRIPT || pType == Token.NAME || pType == Token.ASSIGN)) { return false; } } if (parent != null && parent.getType() == Token.ASSIGN) { Node lhs = parent.getFirstChild(); Node rhs = lhs.getNext(); if (n == lhs) { if (assignLhsChild == null) { ; } } else { if (lhs.getType() <= Token.GETPROP) { if (false) { return false; } String leftName = lhs.getQualifiedName(); if (leftName != null && leftName.contains(".prototype.")) { return false; } } } } return true; }
tensor([[0.0059, 0.0140, 0.0091,  ..., 0.0065, 0.0040, 0.0026],
        [0.0040, 0.0204, 0.0076,  ..., 0.0066, 0.0034, 0.0019],
        [0.0042, 0.0183, 0.0100,  ..., 0.0064, 0.0038, 0.0015],
        ...,
        [0.0038, 0.0175, 0.0099,  ..., 0.0054, 0.0030, 0.0022],
        [0.0047, 0.0226, 0.0108,  ..., 0.0062, 0.0045, 0.0019],
        [0.0041, 0.0143, 0.0102,  ..., 0.0088, 0.0054, 0.0022]])