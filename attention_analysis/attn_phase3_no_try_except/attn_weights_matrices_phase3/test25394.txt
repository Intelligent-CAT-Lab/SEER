25394
Test: public void test11() throws Throwable { AxisSequence axisSequence0 = AxisSequence.ZXZ; Vector3D vector3D0 = axisSequence0.getAxis2(); Vector3D vector3D1 = Vector3D.NaN; Vector3D vector3D2 = StlUtils.determineNormal(vector3D0, vector3D0, vector3D0, vector3D1); StlUtils.byteBuffer(229); AxisSequence axisSequence1 = AxisSequence.YZY; Vector3D vector3D3 = axisSequence1.getAxis3(); StlUtils.pointsAreCounterClockwise(vector3D0, vector3D3, vector3D1, vector3D2); StlUtils.byteBuffer(335); StlUtils.byteBuffer(0); StlUtils.byteBuffer(565); StlUtils.pointsAreCounterClockwise(vector3D0, vector3D1, vector3D1, vector3D2); Vector3D vector3D4 = Vector3D.of((double) 565, 4107.84904515, 0.6); Vector3D.Unit vector3D_Unit0 = vector3D4.directionTo(vector3D0); Vector3D.Unit vector3D_Unit1 = vector3D_Unit0.normalizeOrNull(); Vector3D.Unit vector3D_Unit2 = vector3D_Unit1.normalize(); boolean boolean0 = StlUtils.pointsAreCounterClockwise(vector3D2, vector3D2, vector3D0, vector3D_Unit2); StlUtils.byteBuffer(0); ByteBuffer byteBuffer0 = StlUtils.byteBuffer(0); }
Code: static ByteBuffer byteBuffer(final int capacity) { return ByteBuffer.allocate(capacity) .order(StlConstants.BINARY_BYTE_ORDER); }
[[0.2081489  0.05580059 0.11137678 0.04336531 0.11137678 0.13357213
 0.07663684 0.11137678 0.11137681 0.03696904]
[0.18110628 0.05740869 0.11690705 0.03690088 0.11690705 0.13789925
 0.09059213 0.11690705 0.11690707 0.02846449]
[0.22774148 0.05742354 0.11349948 0.04417413 0.11349948 0.10050543
 0.08155257 0.11349948 0.11349951 0.03460489]
[0.2578207  0.0485744  0.11911669 0.03393759 0.11911669 0.09144118
 0.07101353 0.11911669 0.11911674 0.02074579]
[0.22774148 0.05742354 0.11349948 0.04417413 0.11349948 0.10050543
 0.08155257 0.11349948 0.11349951 0.03460489]
[0.18806414 0.07277551 0.10851944 0.03939138 0.10851944 0.1262837
 0.09416904 0.10851944 0.10851946 0.04523849]
[0.2320025  0.06350562 0.11687767 0.03554559 0.11687767 0.09283841
 0.08240761 0.11687767 0.11687769 0.02618961]
[0.22774148 0.05742354 0.11349948 0.04417413 0.11349948 0.10050543
 0.08155257 0.11349948 0.11349951 0.03460489]
[0.22774148 0.05742354 0.11349948 0.04417413 0.11349948 0.10050544
 0.08155257 0.11349948 0.11349949 0.0346049 ]
[0.21460716 0.0625473  0.10280159 0.04133643 0.10280159 0.12765048
 0.11465222 0.10280159 0.10280161 0.02800005]]