101165
Test: public void test0435() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0435"); org.joda.time.DateTimeZone dateTimeZone6 = null; org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeUtils.getZone(dateTimeZone6); org.joda.time.Instant instant9 = new org.joda.time.Instant((long) (short) -1); org.joda.time.chrono.GJChronology gJChronology10 = org.joda.time.chrono.GJChronology.getInstanceUTC(); org.joda.time.DateTimeField dateTimeField11 = gJChronology10.yearOfCentury(); org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology10); int int13 = dateTime12.getEra(); int int14 = dateTime12.getYear(); boolean boolean15 = instant9.isBefore((org.joda.time.ReadableInstant) dateTime12); org.joda.time.chrono.GJChronology gJChronology16 = org.joda.time.chrono.GJChronology.getInstance(dateTimeZone7, (org.joda.time.ReadableInstant) instant9); java.lang.String str17 = gJChronology16.toString(); try { org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime(2762707, 707, 522, 2769819, 0, 738, (org.joda.time.Chronology) gJChronology16); } catch (org.joda.time.IllegalFieldValueException e) { } }
Code: public static synchronized GJChronology getInstance( DateTimeZone zone, ReadableInstant gregorianCutover, int minDaysInFirstWeek) { zone = DateTimeUtils.getZone(zone); Instant cutoverInstant; if (gregorianCutover == null) { cutoverInstant = DEFAULT_CUTOVER; } else { cutoverInstant = gregorianCutover.toInstant(); LocalDate cutoverDate = new LocalDate(cutoverInstant.getMillis(), GregorianChronology.getInstance(zone)); if (cutoverDate.getYear() <= 0) { throw new IllegalArgumentException("Cutover too early. Must be on or after 0001-01-01."); } } GJChronology chrono; synchronized (cCache) { ArrayList<GJChronology> chronos = cCache.get(zone); if (chronos == null) { chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); } else { for (int i = chronos.size(); --i >= 0;) { chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) { return chrono; } } } if (zone == DateTimeZone.UTC) { chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); } else { chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); } chronos.add(chrono); } return chrono; }
tensor([[0.0047, 0.0152, 0.0087,  ..., 0.0052, 0.0273, 0.0021],
        [0.0049, 0.0137, 0.0096,  ..., 0.0047, 0.0174, 0.0025],
        [0.0042, 0.0178, 0.0092,  ..., 0.0055, 0.0235, 0.0017],
        ...,
        [0.0030, 0.0148, 0.0096,  ..., 0.0042, 0.0273, 0.0017],
        [0.0040, 0.0147, 0.0094,  ..., 0.0047, 0.0236, 0.0020],
        [0.0034, 0.0141, 0.0105,  ..., 0.0073, 0.0177, 0.0018]])