15726
Test: public void test145() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test145"); org.apache.commons.cli.PosixParser posixParser0 = new org.apache.commons.cli.PosixParser(); org.apache.commons.cli.CommandLine commandLine1 = posixParser0.cmd; java.util.List list2 = posixParser0.getRequiredOptions(); org.apache.commons.cli.Options options3 = new org.apache.commons.cli.Options(); java.util.Collection collection4 = options3.getOptions(); java.util.List list5 = options3.getRequiredOptions(); org.apache.commons.cli.Options options9 = options3.addOption("", false, ""); java.util.Collection collection10 = options3.getOptionGroups(); org.apache.commons.cli.PosixParser posixParser11 = new org.apache.commons.cli.PosixParser(); org.apache.commons.cli.CommandLine commandLine12 = posixParser11.cmd; org.apache.commons.cli.CommandLine commandLine13 = new org.apache.commons.cli.CommandLine(); java.lang.String str16 = commandLine13.getOptionValue('#', ""); java.util.Properties properties18 = commandLine13.getOptionProperties(""); posixParser11.processProperties(properties18); posixParser11.burstToken("", true); java.util.List list23 = posixParser11.getRequiredOptions(); org.apache.commons.cli.CommandLine commandLine24 = new org.apache.commons.cli.CommandLine(); java.lang.String str27 = commandLine24.getOptionValue('#', ""); boolean boolean29 = commandLine24.hasOption(' '); java.lang.String[] strArray31 = commandLine24.getOptionValues('4'); posixParser11.cmd = commandLine24; org.apache.commons.cli.CommandLine commandLine33 = new org.apache.commons.cli.CommandLine(); java.lang.String str36 = commandLine33.getOptionValue('#', ""); java.lang.String str38 = commandLine33.getOptionValue("hi!"); org.apache.commons.cli.Option[] optionArray39 = commandLine33.getOptions(); java.util.Properties properties41 = commandLine33.getOptionProperties("org.apache.commons.cli.MissingOptionException: hi!"); posixParser11.cmd = commandLine33; org.apache.commons.cli.Options options43 = posixParser11.getOptions(); org.apache.commons.cli.Options options44 = new org.apache.commons.cli.Options(); java.util.Collection collection45 = options44.getOptions(); java.util.List list46 = options44.getRequiredOptions(); org.apache.commons.cli.Options options50 = options44.addOption("", false, ""); org.apache.commons.cli.Option option54 = new org.apache.commons.cli.Option("", false, ""); java.lang.String str55 = option54.getValue(); option54.setDescription(""); option54.setValueSeparator('4'); org.apache.commons.cli.CommandLine commandLine60 = new org.apache.commons.cli.CommandLine(); java.util.Properties properties62 = commandLine60.getOptionProperties("hi!"); java.util.Iterator iterator63 = commandLine60.iterator(); option54.setType((java.lang.Object) iterator63); org.apache.commons.cli.Options options65 = options50.addOption(option54); java.lang.String[] strArray68 = new java.lang.String[] { "org.apache.commons.cli.MissingOptionException: hi!", "[ option: :: ]" }; java.lang.String[] strArray70 = posixParser11.flatten(options50, strArray68, true); java.lang.String[] strArray72 = posixParser0.flatten(options3, strArray68, true); org.apache.commons.cli.Options options73 = new org.apache.commons.cli.Options(); java.util.Collection collection74 = options73.getOptions(); java.util.List list75 = options73.getRequiredOptions(); java.lang.String str76 = options73.toString(); org.apache.commons.cli.Option option80 = new org.apache.commons.cli.Option("", false, ""); java.lang.String str81 = option80.getLongOpt(); boolean boolean83 = option80.equals((java.lang.Object) (byte) 1); java.lang.String str85 = option80.getValue((int) (short) 1); option80.clearValues(); java.lang.String str87 = option80.getOpt(); org.apache.commons.cli.Options options88 = options73.addOption(option80); java.lang.String str89 = option80.getOpt(); org.apache.commons.cli.Options options90 = options3.addOption(option80); org.apache.commons.cli.OptionGroup optionGroup91 = null; try { org.apache.commons.cli.Options options92 = options3.addOptionGroup(optionGroup91); } catch (java.lang.NullPointerException e) { } } ] [ long {} ]" + "'", str76, "[ Options: [ short {} ] [ long {} ]"); }
Code: protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption){;this.options = options;Iterator iter = Arrays.asList(arguments).iterator();while (iter.hasNext()){String token = (String) iter.next();if (token.startsWith("--")){if (token.indexOf('=') != -1){tokens.add(token.substring(0, token.indexOf('=')));tokens.add(token.substring(token.indexOf('=') + 1, token.length()));}else{;}}else if ("-".equals(token)){tokens.add(token);}else if (token.startsWith("-")){if (token.length() == 2){processOptionToken(token, stopAtNonOption);}else if (options.hasOption(token)){tokens.add(token);}else{burstToken(token, stopAtNonOption);}}else if (false){process(token);}else{tokens.add(token);}gobble(iter);}return (String[]) tokens.toArray(new String[tokens.size()]);}
tensor([[0.0196, 0.0052, 0.0208,  ..., 0.1040, 0.0197, 0.0213],
        [0.0182, 0.0047, 0.0202,  ..., 0.0917, 0.0173, 0.0195],
        [0.0185, 0.0081, 0.0246,  ..., 0.0753, 0.0221, 0.0230],
        ...,
        [0.0202, 0.0082, 0.0232,  ..., 0.0826, 0.0266, 0.0188],
        [0.0207, 0.0072, 0.0237,  ..., 0.0768, 0.0202, 0.0196],
        [0.0159, 0.0066, 0.0189,  ..., 0.0928, 0.0222, 0.0209]])