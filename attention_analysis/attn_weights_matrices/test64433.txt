64433
Test: public void test191() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test191"); com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler0 = new com.fasterxml.jackson.core.util.BufferRecycler(); com.fasterxml.jackson.core.io.IOContext iOContext3 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler0, (java.lang.Object) (byte) 10, true); com.fasterxml.jackson.core.ObjectCodec objectCodec5 = null; java.io.OutputStream outputStream6 = null; com.fasterxml.jackson.core.json.UTF8JsonGenerator uTF8JsonGenerator7 = new com.fasterxml.jackson.core.json.UTF8JsonGenerator(iOContext3, (int) (byte) 1, objectCodec5, outputStream6); uTF8JsonGenerator7.writeBoolean(true); int[] intArray10 = uTF8JsonGenerator7._outputEscapes; com.fasterxml.jackson.core.Version version11 = uTF8JsonGenerator7.version(); com.fasterxml.jackson.core.JsonStreamContext jsonStreamContext12 = uTF8JsonGenerator7.getOutputContext(); com.fasterxml.jackson.core.JsonGenerator jsonGenerator14 = uTF8JsonGenerator7.setHighestNonEscapedChar(57343); uTF8JsonGenerator7.writeRaw("com.fasterxml.jackson.core.JsonParseException: hi!"); uTF8JsonGenerator7._releaseBuffers(); com.fasterxml.jackson.core.io.SerializedString serializedString19 = new com.fasterxml.jackson.core.io.SerializedString("UTF-32LE"); com.fasterxml.jackson.core.ObjectCodec objectCodec20 = null; com.fasterxml.jackson.core.JsonFactory jsonFactory21 = new com.fasterxml.jackson.core.JsonFactory(objectCodec20); java.io.Reader reader22 = null; com.fasterxml.jackson.core.JsonParser jsonParser23 = jsonFactory21.createParser(reader22); com.fasterxml.jackson.core.ObjectCodec objectCodec24 = null; com.fasterxml.jackson.core.JsonFactory jsonFactory25 = jsonFactory21.setCodec(objectCodec24); com.fasterxml.jackson.core.JsonFactory jsonFactory26 = jsonFactory25.copy(); com.fasterxml.jackson.core.io.SerializedString serializedString28 = new com.fasterxml.jackson.core.io.SerializedString(""); byte[] byteArray29 = new byte[] {}; int int31 = serializedString28.appendUnquotedUTF8(byteArray29, (int) (short) 0); char[] charArray32 = com.fasterxml.jackson.core.io.CharTypes.copyHexChars(); int int34 = serializedString28.appendUnquoted(charArray32, 5); com.fasterxml.jackson.core.util.BufferRecycler bufferRecycler35 = new com.fasterxml.jackson.core.util.BufferRecycler(); com.fasterxml.jackson.core.io.IOContext iOContext38 = new com.fasterxml.jackson.core.io.IOContext(bufferRecycler35, (java.lang.Object) (byte) 10, true); com.fasterxml.jackson.core.JsonEncoding jsonEncoding39 = com.fasterxml.jackson.core.JsonEncoding.UTF32_LE; com.fasterxml.jackson.core.io.IOContext iOContext40 = iOContext38.withEncoding(jsonEncoding39); char[] charArray42 = iOContext40.allocNameCopyBuffer(32); com.fasterxml.jackson.core.util.TextBuffer textBuffer43 = iOContext40.constructTextBuffer(); com.fasterxml.jackson.core.JsonEncoding jsonEncoding44 = null; com.fasterxml.jackson.core.io.IOContext iOContext45 = iOContext40.withEncoding(jsonEncoding44); java.io.Reader reader47 = null; com.fasterxml.jackson.core.ObjectCodec objectCodec48 = null; com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer charsToNameCanonicalizer49 = com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer.createRoot(); com.fasterxml.jackson.core.json.ReaderBasedJsonParser readerBasedJsonParser50 = new com.fasterxml.jackson.core.json.ReaderBasedJsonParser(iOContext40, (int) '#', reader47, objectCodec48, charsToNameCanonicalizer49); com.fasterxml.jackson.core.ObjectCodec objectCodec51 = readerBasedJsonParser50.getCodec(); java.lang.String str52 = readerBasedJsonParser50.getValueAsString(); com.fasterxml.jackson.core.ObjectCodec objectCodec53 = readerBasedJsonParser50.getCodec(); readerBasedJsonParser50.close(); com.fasterxml.jackson.core.util.ByteArrayBuilder byteArrayBuilder55 = readerBasedJsonParser50._getByteArrayBuilder(); int int56 = serializedString28.writeUnquotedUTF8((java.io.OutputStream) byteArrayBuilder55); com.fasterxml.jackson.core.JsonGenerator jsonGenerator57 = jsonFactory25.createJsonGenerator((java.io.OutputStream) byteArrayBuilder55); int int58 = serializedString19.writeQuotedUTF8((java.io.OutputStream) byteArrayBuilder55); com.fasterxml.jackson.core.JsonGenerator jsonGenerator59 = uTF8JsonGenerator7.setRootValueSeparator((com.fasterxml.jackson.core.SerializableString) serializedString19); }
Code: public void writeRaw(String text, int offset, int len){final char[] buf = _charBuffer;while (len > 0) {int len2 = Math.min(buf.length, len);text.getChars(offset, offset+len2, buf, 0);writeRaw(buf, -1, len2);;len -= len2;}}
tensor([[0.0241, 0.0203, 0.0155, 0.0299, 0.0140, 0.0852, 0.0140, 0.0555, 0.0084,
         0.0278, 0.0156, 0.0375, 0.0465, 0.0383, 0.0150, 0.0543, 0.0181, 0.0156,
         0.0318, 0.0452, 0.0962, 0.0633, 0.0540, 0.0546, 0.0349, 0.0289, 0.0553],
        [0.0172, 0.0167, 0.0154, 0.0252, 0.0086, 0.0926, 0.0086, 0.0603, 0.0074,
         0.0277, 0.0153, 0.0316, 0.0400, 0.0328, 0.0135, 0.0623, 0.0186, 0.0153,
         0.0335, 0.0575, 0.0984, 0.0875, 0.0525, 0.0366, 0.0423, 0.0301, 0.0526],
        [0.0183, 0.0141, 0.0169, 0.0252, 0.0102, 0.0935, 0.0102, 0.0672, 0.0074,
         0.0277, 0.0154, 0.0418, 0.0468, 0.0398, 0.0175, 0.0511, 0.0167, 0.0154,
         0.0335, 0.0458, 0.0942, 0.0740, 0.0556, 0.0524, 0.0359, 0.0268, 0.0467],
        [0.0171, 0.0130, 0.0176, 0.0321, 0.0094, 0.1009, 0.0094, 0.0569, 0.0072,
         0.0305, 0.0160, 0.0373, 0.0486, 0.0326, 0.0151, 0.0574, 0.0147, 0.0160,
         0.0319, 0.0376, 0.0889, 0.0780, 0.0541, 0.0454, 0.0319, 0.0350, 0.0654],
        [0.0151, 0.0140, 0.0143, 0.0223, 0.0100, 0.0704, 0.0100, 0.0636, 0.0081,
         0.0271, 0.0127, 0.0337, 0.0562, 0.0276, 0.0129, 0.0770, 0.0150, 0.0127,
         0.0349, 0.0583, 0.0888, 0.0946, 0.0539, 0.0524, 0.0372, 0.0267, 0.0504],
        [0.0282, 0.0217, 0.0162, 0.0323, 0.0141, 0.0746, 0.0141, 0.0680, 0.0072,
         0.0313, 0.0152, 0.0292, 0.0428, 0.0429, 0.0161, 0.0674, 0.0216, 0.0152,
         0.0383, 0.0455, 0.0890, 0.0662, 0.0580, 0.0407, 0.0262, 0.0264, 0.0515],
        [0.0151, 0.0140, 0.0143, 0.0223, 0.0100, 0.0704, 0.0100, 0.0636, 0.0081,
         0.0271, 0.0127, 0.0337, 0.0562, 0.0276, 0.0129, 0.0770, 0.0150, 0.0127,
         0.0349, 0.0583, 0.0888, 0.0946, 0.0539, 0.0524, 0.0372, 0.0267, 0.0504],
        [0.0170, 0.0162, 0.0149, 0.0277, 0.0093, 0.0992, 0.0093, 0.0616, 0.0066,
         0.0286, 0.0155, 0.0285, 0.0491, 0.0288, 0.0159, 0.0631, 0.0150, 0.0155,
         0.0363, 0.0475, 0.0962, 0.0858, 0.0514, 0.0467, 0.0279, 0.0256, 0.0606],
        [0.0162, 0.0116, 0.0153, 0.0283, 0.0089, 0.1317, 0.0089, 0.0570, 0.0067,
         0.0283, 0.0157, 0.0344, 0.0374, 0.0286, 0.0125, 0.0501, 0.0156, 0.0157,
         0.0257, 0.0374, 0.0849, 0.0886, 0.0624, 0.0462, 0.0454, 0.0249, 0.0617],
        [0.0253, 0.0233, 0.0196, 0.0327, 0.0116, 0.0963, 0.0116, 0.0556, 0.0090,
         0.0323, 0.0193, 0.0232, 0.0433, 0.0376, 0.0195, 0.0620, 0.0180, 0.0193,
         0.0349, 0.0514, 0.0729, 0.0659, 0.0581, 0.0381, 0.0401, 0.0237, 0.0556],
        [0.0282, 0.0233, 0.0221, 0.0267, 0.0169, 0.0677, 0.0169, 0.0575, 0.0117,
         0.0400, 0.0238, 0.0317, 0.0466, 0.0380, 0.0216, 0.0491, 0.0228, 0.0238,
         0.0432, 0.0562, 0.0613, 0.0526, 0.0457, 0.0552, 0.0349, 0.0290, 0.0537],
        [0.0166, 0.0123, 0.0165, 0.0297, 0.0101, 0.1024, 0.0101, 0.0601, 0.0064,
         0.0278, 0.0145, 0.0360, 0.0518, 0.0338, 0.0210, 0.0489, 0.0159, 0.0145,
         0.0273, 0.0571, 0.0958, 0.0847, 0.0474, 0.0452, 0.0335, 0.0304, 0.0503],
        [0.0213, 0.0161, 0.0154, 0.0307, 0.0099, 0.0939, 0.0099, 0.0780, 0.0065,
         0.0313, 0.0155, 0.0352, 0.0471, 0.0356, 0.0159, 0.0581, 0.0132, 0.0155,
         0.0338, 0.0515, 0.0750, 0.0986, 0.0450, 0.0469, 0.0256, 0.0278, 0.0470],
        [0.0245, 0.0163, 0.0172, 0.0282, 0.0106, 0.0793, 0.0106, 0.0645, 0.0070,
         0.0258, 0.0134, 0.0383, 0.0443, 0.0437, 0.0130, 0.0723, 0.0162, 0.0134,
         0.0329, 0.0467, 0.0843, 0.0743, 0.0534, 0.0581, 0.0301, 0.0268, 0.0547],
        [0.0202, 0.0219, 0.0185, 0.0295, 0.0117, 0.0893, 0.0117, 0.0497, 0.0083,
         0.0347, 0.0161, 0.0283, 0.0397, 0.0344, 0.0155, 0.0525, 0.0191, 0.0161,
         0.0423, 0.0431, 0.0894, 0.0900, 0.0523, 0.0423, 0.0377, 0.0280, 0.0580],
        [0.0166, 0.0147, 0.0136, 0.0320, 0.0089, 0.0992, 0.0089, 0.0484, 0.0067,
         0.0312, 0.0127, 0.0368, 0.0419, 0.0354, 0.0135, 0.0641, 0.0123, 0.0127,
         0.0255, 0.0422, 0.1071, 0.0917, 0.0561, 0.0478, 0.0342, 0.0236, 0.0620],
        [0.0174, 0.0172, 0.0151, 0.0273, 0.0109, 0.1023, 0.0109, 0.0641, 0.0083,
         0.0263, 0.0166, 0.0369, 0.0372, 0.0372, 0.0144, 0.0560, 0.0188, 0.0166,
         0.0286, 0.0442, 0.1217, 0.0641, 0.0441, 0.0414, 0.0311, 0.0356, 0.0559],
        [0.0282, 0.0233, 0.0221, 0.0267, 0.0169, 0.0677, 0.0169, 0.0575, 0.0117,
         0.0400, 0.0238, 0.0317, 0.0466, 0.0380, 0.0216, 0.0491, 0.0228, 0.0238,
         0.0432, 0.0562, 0.0613, 0.0526, 0.0457, 0.0552, 0.0349, 0.0290, 0.0537],
        [0.0263, 0.0291, 0.0181, 0.0358, 0.0142, 0.0875, 0.0142, 0.0641, 0.0110,
         0.0239, 0.0178, 0.0330, 0.0436, 0.0399, 0.0159, 0.0473, 0.0254, 0.0178,
         0.0315, 0.0544, 0.0856, 0.0794, 0.0374, 0.0291, 0.0301, 0.0362, 0.0512],
        [0.0206, 0.0135, 0.0157, 0.0260, 0.0090, 0.1235, 0.0090, 0.0575, 0.0059,
         0.0260, 0.0137, 0.0295, 0.0584, 0.0354, 0.0124, 0.0575, 0.0135, 0.0137,
         0.0387, 0.0425, 0.0834, 0.0712, 0.0577, 0.0573, 0.0345, 0.0229, 0.0511],
        [0.0195, 0.0200, 0.0148, 0.0241, 0.0078, 0.0987, 0.0078, 0.0626, 0.0063,
         0.0316, 0.0141, 0.0285, 0.0403, 0.0287, 0.0125, 0.0663, 0.0139, 0.0141,
         0.0315, 0.0544, 0.1023, 0.0764, 0.0592, 0.0403, 0.0401, 0.0260, 0.0583],
        [0.0206, 0.0152, 0.0162, 0.0265, 0.0100, 0.0873, 0.0100, 0.0721, 0.0073,
         0.0245, 0.0117, 0.0428, 0.0489, 0.0378, 0.0142, 0.0694, 0.0129, 0.0117,
         0.0270, 0.0522, 0.0991, 0.0665, 0.0521, 0.0522, 0.0266, 0.0305, 0.0548],
        [0.0178, 0.0185, 0.0161, 0.0302, 0.0083, 0.0955, 0.0083, 0.0583, 0.0065,
         0.0314, 0.0182, 0.0424, 0.0380, 0.0429, 0.0116, 0.0590, 0.0176, 0.0182,
         0.0341, 0.0449, 0.0979, 0.0657, 0.0534, 0.0474, 0.0288, 0.0299, 0.0593],
        [0.0237, 0.0166, 0.0171, 0.0272, 0.0102, 0.0935, 0.0102, 0.0642, 0.0067,
         0.0326, 0.0151, 0.0322, 0.0466, 0.0437, 0.0199, 0.0529, 0.0170, 0.0151,
         0.0347, 0.0505, 0.0846, 0.0727, 0.0483, 0.0441, 0.0367, 0.0270, 0.0571],
        [0.0199, 0.0190, 0.0155, 0.0232, 0.0091, 0.1126, 0.0091, 0.0609, 0.0077,
         0.0265, 0.0163, 0.0366, 0.0504, 0.0288, 0.0131, 0.0532, 0.0190, 0.0163,
         0.0364, 0.0479, 0.0924, 0.0630, 0.0427, 0.0530, 0.0317, 0.0304, 0.0651],
        [0.0219, 0.0182, 0.0172, 0.0298, 0.0116, 0.0816, 0.0116, 0.0570, 0.0087,
         0.0314, 0.0159, 0.0388, 0.0558, 0.0303, 0.0163, 0.0587, 0.0168, 0.0159,
         0.0399, 0.0458, 0.0991, 0.0661, 0.0527, 0.0429, 0.0261, 0.0302, 0.0597],
        [0.0157, 0.0151, 0.0170, 0.0275, 0.0109, 0.0993, 0.0109, 0.0705, 0.0081,
         0.0276, 0.0134, 0.0416, 0.0451, 0.0337, 0.0199, 0.0486, 0.0158, 0.0134,
         0.0274, 0.0496, 0.0822, 0.0817, 0.0510, 0.0597, 0.0338, 0.0273, 0.0529]])