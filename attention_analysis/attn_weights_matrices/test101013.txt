101013
Test: public void test0442() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0442"); org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance(); org.joda.time.chrono.ISOChronology iSOChronology1 = org.joda.time.chrono.ISOChronology.getInstance(); boolean boolean2 = iSOChronology0.equals((java.lang.Object) iSOChronology1); org.joda.time.DateTimeField dateTimeField3 = iSOChronology0.hourOfDay(); org.joda.time.DateTimeField dateTimeField4 = iSOChronology0.clockhourOfHalfday(); org.joda.time.Chronology chronology5 = iSOChronology0.withUTC(); org.joda.time.DateTimeField dateTimeField6 = iSOChronology0.minuteOfHour(); org.joda.time.field.OffsetDateTimeField offsetDateTimeField8 = new org.joda.time.field.OffsetDateTimeField(dateTimeField6, 818); int int9 = offsetDateTimeField8.getMinimumValue(); long long11 = offsetDateTimeField8.roundHalfCeiling(0L); long long14 = offsetDateTimeField8.add((long) 2765586, 17); org.joda.time.chrono.JulianChronology julianChronology15 = org.joda.time.chrono.JulianChronology.getInstanceUTC(); long long17 = julianChronology15.calculateFirstDayOfYearMillis(7); long long20 = julianChronology15.getYearDifference(0L, (long) 870); int int22 = julianChronology15.getWeekOfWeekyear((long) (short) 100); long long23 = julianChronology15.getAverageMillisPerYear(); org.joda.time.chrono.GJYearOfEraDateTimeField gJYearOfEraDateTimeField24 = new org.joda.time.chrono.GJYearOfEraDateTimeField((org.joda.time.DateTimeField) offsetDateTimeField8, (org.joda.time.chrono.BasicChronology) julianChronology15); long long27 = gJYearOfEraDateTimeField24.addWrapField((long) 699807, 97); org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetMillis(1969); org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone30 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone29); int int32 = cachedDateTimeZone30.getStandardOffset(0L); org.joda.time.chrono.ISOChronology iSOChronology33 = org.joda.time.chrono.ISOChronology.getInstance((org.joda.time.DateTimeZone) cachedDateTimeZone30); org.joda.time.DateTimeField dateTimeField34 = iSOChronology33.era(); org.joda.time.LocalDate localDate35 = org.joda.time.LocalDate.now((org.joda.time.Chronology) iSOChronology33); org.joda.time.DateTimeFieldType dateTimeFieldType36 = org.joda.time.DateTimeFieldType.millisOfDay(); org.joda.time.Chronology chronology37 = null; boolean boolean38 = dateTimeFieldType36.isSupported(chronology37); boolean boolean39 = localDate35.isSupported(dateTimeFieldType36); org.joda.time.chrono.ISOChronology iSOChronology41 = org.joda.time.chrono.ISOChronology.getInstance(); org.joda.time.chrono.ISOChronology iSOChronology42 = org.joda.time.chrono.ISOChronology.getInstance(); boolean boolean43 = iSOChronology41.equals((java.lang.Object) iSOChronology42); org.joda.time.chrono.GJChronology gJChronology45 = org.joda.time.chrono.GJChronology.getInstanceUTC(); org.joda.time.DateTimeField dateTimeField46 = gJChronology45.yearOfCentury(); org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime((org.joda.time.Chronology) gJChronology45); org.joda.time.DurationField durationField48 = gJChronology45.eras(); org.joda.time.LocalDate localDate49 = new org.joda.time.LocalDate((long) 0, (org.joda.time.Chronology) gJChronology45); int[] intArray51 = iSOChronology42.get((org.joda.time.ReadablePartial) localDate49, (-1123200000L)); try { int[] intArray53 = gJYearOfEraDateTimeField24.addWrapField((org.joda.time.ReadablePartial) localDate35, 2761873, intArray51, 2762707); } catch (java.lang.ArrayIndexOutOfBoundsException e) { } }
Code: public static synchronized GJChronology getInstance( DateTimeZone zone, ReadableInstant gregorianCutover, int minDaysInFirstWeek) { zone = DateTimeUtils.getZone(zone); Instant cutoverInstant; if (gregorianCutover == null) { cutoverInstant = DEFAULT_CUTOVER; } else { cutoverInstant = gregorianCutover.toInstant(); LocalDate cutoverDate = new LocalDate(cutoverInstant.getMillis(), GregorianChronology.getInstance(zone)); if (cutoverDate.getYear() <= 0) { throw new IllegalArgumentException("Cutover too early. Must be on or after 0001-01-01."); } } GJChronology chrono; synchronized (cCache) { ArrayList<GJChronology> chronos = cCache.get(zone); if (chronos == null) { chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); } else { for (int i = chronos.size(); --i >= 0;) { chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) { return chrono; } } } if (zone == DateTimeZone.UTC) { chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); } else { chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); } chronos.add(chrono); } return chrono; }
tensor([[0.0047, 0.0152, 0.0087,  ..., 0.0052, 0.0273, 0.0021],
        [0.0049, 0.0137, 0.0096,  ..., 0.0047, 0.0174, 0.0025],
        [0.0042, 0.0178, 0.0092,  ..., 0.0055, 0.0235, 0.0017],
        ...,
        [0.0030, 0.0148, 0.0096,  ..., 0.0042, 0.0273, 0.0017],
        [0.0040, 0.0147, 0.0094,  ..., 0.0047, 0.0236, 0.0020],
        [0.0034, 0.0141, 0.0105,  ..., 0.0073, 0.0177, 0.0018]])